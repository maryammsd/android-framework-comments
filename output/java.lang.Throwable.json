{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Throwable.java",
  "packageName" : "java.lang",
  "className" : "Throwable",
  "comment" : "\n * The {@code Throwable} class is the superclass of all errors and\n * exceptions in the Java language. Only objects that are instances of this\n * class (or one of its subclasses) are thrown by the Java Virtual Machine or\n * can be thrown by the Java {@code throw} statement. Similarly, only\n * this class or one of its subclasses can be the argument type in a\n * {@code catch} clause.\n *\n * For the purposes of compile-time checking of exceptions, {@code\n * Throwable} and any subclass of {@code Throwable} that is not also a\n * subclass of either {@link RuntimeException} or {@link Error} are\n * regarded as checked exceptions.\n *\n * <p>Instances of two subclasses, {@link java.lang.Error} and\n * {@link java.lang.Exception}, are conventionally used to indicate\n * that exceptional situations have occurred. Typically, these instances\n * are freshly created in the context of the exceptional situation so\n * as to include relevant information (such as stack trace data).\n *\n * <p>A throwable contains a snapshot of the execution stack of its\n * thread at the time it was created. It can also contain a message\n * string that gives more information about the error. Over time, a\n * throwable can {@linkplain Throwable#addSuppressed suppress} other\n * throwables from being propagated.  Finally, the throwable can also\n * contain a <i>cause</i>: another throwable that caused this\n * throwable to be constructed.  The recording of this causal information\n * is referred to as the <i>chained exception</i> facility, as the\n * cause can, itself, have a cause, and so on, leading to a \"chain\" of\n * exceptions, each caused by another.\n *\n * <p>One reason that a throwable may have a cause is that the class that\n * throws it is built atop a lower layered abstraction, and an operation on\n * the upper layer fails due to a failure in the lower layer.  It would be bad\n * design to let the throwable thrown by the lower layer propagate outward, as\n * it is generally unrelated to the abstraction provided by the upper layer.\n * Further, doing so would tie the API of the upper layer to the details of\n * its implementation, assuming the lower layer's exception was a checked\n * exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n * cause) allows the upper layer to communicate the details of the failure to\n * its caller without incurring either of these shortcomings.  It preserves\n * the flexibility to change the implementation of the upper layer without\n * changing its API (in particular, the set of exceptions thrown by its\n * methods).\n *\n * <p>A second reason that a throwable may have a cause is that the method\n * that throws it must conform to a general-purpose interface that does not\n * permit the method to throw the cause directly.  For example, suppose\n * a persistent collection conforms to the {@link java.util.Collection\n * Collection} interface, and that its persistence is implemented atop\n * {@code java.io}.  Suppose the internals of the {@code add} method\n * can throw an {@link java.io.IOException IOException}.  The implementation\n * can communicate the details of the {@code IOException} to its caller\n * while conforming to the {@code Collection} interface by wrapping the\n * {@code IOException} in an appropriate unchecked exception.  (The\n * specification for the persistent collection should indicate that it is\n * capable of throwing such exceptions.)\n *\n * <p>A cause can be associated with a throwable in two ways: via a\n * constructor that takes the cause as an argument, or via the\n * {@link #initCause(Throwable)} method.  New throwable classes that\n * wish to allow causes to be associated with them should provide constructors\n * that take a cause and delegate (perhaps indirectly) to one of the\n * {@code Throwable} constructors that takes a cause.\n *\n * Because the {@code initCause} method is public, it allows a cause to be\n * associated with any throwable, even a \"legacy throwable\" whose\n * implementation predates the addition of the exception chaining mechanism to\n * {@code Throwable}.\n *\n * <p>By convention, class {@code Throwable} and its subclasses have two\n * constructors, one that takes no arguments and one that takes a\n * {@code String} argument that can be used to produce a detail message.\n * Further, those subclasses that might likely have a cause associated with\n * them should have two more constructors, one that takes a\n * {@code Throwable} (the cause), and one that takes a\n * {@code String} (the detail message) and a {@code Throwable} (the\n * cause).\n *\n * @author  Josh Bloch (Added exception chaining and programmatic access to\n *          stack trace in 1.4.)\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since 1.0\n ",
  "links" : [ "java.lang.Error", "java.io.IOException", "java.lang.RuntimeException", "#initCause(Throwable)", "java.util.CollectionCollection", "java.lang.Exception" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "backtrace",
    "type" : "Object",
    "comment" : "\n     * The JVM saves some indication of the stack backtrace in this slot.\n     ",
    "links" : [ ]
  }, {
    "name" : "detailMessage",
    "type" : "String",
    "comment" : "\n     * Specific details about the Throwable.  For example, for\n     * {@code FileNotFoundException}, this contains the name of\n     * the file that could not be found.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "cause",
    "type" : "Throwable",
    "comment" : "\n     * The throwable that caused this throwable to get thrown, or null if this\n     * throwable was not caused by another throwable, or if the causative\n     * throwable is unknown.  If this field is equal to this throwable itself,\n     * it indicates that the cause of this throwable has not yet been\n     * initialized.\n     *\n     * @serial\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "stackTrace",
    "type" : "StackTraceElement[]",
    "comment" : " private StackTraceElement[] stackTrace = UNASSIGNED_STACK;",
    "links" : [ ]
  }, {
    "name" : "suppressedExceptions",
    "type" : "List<Throwable>",
    "comment" : " private List<Throwable> suppressedExceptions = SUPPRESSED_SENTINEL;",
    "links" : [ ]
  }, {
    "name" : "NULL_CAUSE_MESSAGE",
    "type" : "String",
    "comment" : " Message for trying to suppress a null exception. ",
    "links" : [ ]
  }, {
    "name" : "SELF_SUPPRESSION_MESSAGE",
    "type" : "String",
    "comment" : " Message for trying to suppress oneself. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_CAPTION",
    "type" : "String",
    "comment" : " Caption  for labeling causative exception stack traces ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSED_CAPTION",
    "type" : "String",
    "comment" : " Caption for labeling suppressed exception stack traces ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_THROWABLE_ARRAY",
    "type" : "Throwable[]",
    "comment" : " private static final Throwable[] EMPTY_THROWABLE_ARRAY = new Throwable[0];",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getMessage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the detail message string of this throwable.\n     *\n     * @return  the detail message string of this {@code Throwable} instance\n     *          (which may be {@code null}).\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalizedMessage()",
    "returnType" : "String",
    "comment" : "\n     * Creates a localized description of this throwable.\n     * Subclasses may override this method in order to produce a\n     * locale-specific message.  For subclasses that do not override this\n     * method, the default implementation returns the same result as\n     * {@code getMessage()}.\n     *\n     * @return  The localized description of this throwable.\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Throwable getCause()",
    "returnType" : "Throwable",
    "comment" : "\n     * Returns the cause of this throwable or {@code null} if the\n     * cause is nonexistent or unknown.  (The cause is the throwable that\n     * caused this throwable to get thrown.)\n     *\n     * <p>This implementation returns the cause that was supplied via one of\n     * the constructors requiring a {@code Throwable}, or that was set after\n     * creation with the {@link #initCause(Throwable)} method.  While it is\n     * typically unnecessary to override this method, a subclass can override\n     * it to return a cause set by some other means.  This is appropriate for\n     * a \"legacy chained throwable\" that predates the addition of chained\n     * exceptions to {@code Throwable}.  Note that it is <i>not</i>\n     * necessary to override any of the {@code PrintStackTrace} methods,\n     * all of which invoke the {@code getCause} method to determine the\n     * cause of a throwable.\n     *\n     * @return  the cause of this throwable or {@code null} if the\n     *          cause is nonexistent or unknown.\n     * @since 1.4\n     ",
    "links" : [ "#initCause(Throwable)" ]
  }, {
    "name" : "public synchronized Throwable initCause(Throwable cause)",
    "returnType" : "Throwable",
    "comment" : "\n     * Initializes the <i>cause</i> of this throwable to the specified value.\n     * (The cause is the throwable that caused this throwable to get thrown.)\n     *\n     * <p>This method can be called at most once.  It is generally called from\n     * within the constructor, or immediately after creating the\n     * throwable.  If this throwable was created\n     * with {@link #Throwable(Throwable)} or\n     * {@link #Throwable(String,Throwable)}, this method cannot be called\n     * even once.\n     *\n     * <p>An example of using this method on a legacy throwable type\n     * without other support for setting the cause is:\n     *\n     * <pre>\n     * try {\n     *     lowLevelOp();\n     * } catch (LowLevelException le) {\n     *     throw (HighLevelException)\n     *           new HighLevelException().initCause(le); // Legacy constructor\n     * }\n     * </pre>\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A {@code null} value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @return  a reference to this {@code Throwable} instance.\n     * @throws IllegalArgumentException if {@code cause} is this\n     *         throwable.  (A throwable cannot be its own cause.)\n     * @throws IllegalStateException if this throwable was\n     *         created with {@link #Throwable(Throwable)} or\n     *         {@link #Throwable(String,Throwable)}, or this method has already\n     *         been called on this throwable.\n     * @since  1.4\n     ",
    "links" : [ "#getCause()", "#Throwable(String", "#Throwable(Throwable)" ]
  }, {
    "name" : " final void setCause(Throwable t)",
    "returnType" : "void",
    "comment" : "\n     * This is called by readObject of a few exceptions such as\n     * ClassNotFoundException and ExceptionInInitializerError to deserialize\n     * a stream output from an older runtime version where the cause may\n     * have set to null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a short description of this throwable.\n     * The result is the concatenation of:\n     * <ul>\n     * <li> the {@linkplain Class#getName() name} of the class of this object\n     * <li> \": \" (a colon and a space)\n     * <li> the result of invoking this object's {@link #getLocalizedMessage}\n     *      method\n     * </ul>\n     * If {@code getLocalizedMessage} returns {@code null}, then just\n     * the class name is returned.\n     *\n     * @return a string representation of this throwable.\n     ",
    "links" : [ "#getLocalizedMessage" ]
  }, {
    "name" : "public void printStackTrace()",
    "returnType" : "void",
    "comment" : "\n     * Prints this throwable and its backtrace to the\n     * standard error stream. This method prints a stack trace for this\n     * {@code Throwable} object on the error output stream that is\n     * the value of the field {@code System.err}. The first line of\n     * output contains the result of the {@link #toString()} method for\n     * this object.  Remaining lines represent data previously recorded by\n     * the method {@link #fillInStackTrace()}. The format of this\n     * information depends on the implementation, but the following\n     * example may be regarded as typical:\n     * <blockquote><pre>\n     * java.lang.NullPointerException\n     *         at MyClass.mash(MyClass.java:9)\n     *         at MyClass.crunch(MyClass.java:6)\n     *         at MyClass.main(MyClass.java:3)\n     * </pre></blockquote>\n     * This example was produced by running the program:\n     * <pre>\n     * class MyClass {\n     *     public static void main(String[] args) {\n     *         crunch(null);\n     *     }\n     *     static void crunch(int[] a) {\n     *         mash(a);\n     *     }\n     *     static void mash(int[] b) {\n     *         System.out.println(b[0]);\n     *     }\n     * }\n     * </pre>\n     * The backtrace for a throwable with an initialized, non-null cause\n     * should generally include the backtrace for the cause.  The format\n     * of this information depends on the implementation, but the following\n     * example may be regarded as typical:\n     * <pre>\n     * HighLevelException: MidLevelException: LowLevelException\n     *         at Junk.a(Junk.java:13)\n     *         at Junk.main(Junk.java:4)\n     * Caused by: MidLevelException: LowLevelException\n     *         at Junk.c(Junk.java:23)\n     *         at Junk.b(Junk.java:17)\n     *         at Junk.a(Junk.java:11)\n     *         ... 1 more\n     * Caused by: LowLevelException\n     *         at Junk.e(Junk.java:30)\n     *         at Junk.d(Junk.java:27)\n     *         at Junk.c(Junk.java:21)\n     *         ... 3 more\n     * </pre>\n     * Note the presence of lines containing the characters {@code \"...\"}.\n     * These lines indicate that the remainder of the stack trace for this\n     * exception matches the indicated number of frames from the bottom of the\n     * stack trace of the exception that was caused by this exception (the\n     * \"enclosing\" exception).  This shorthand can greatly reduce the length\n     * of the output in the common case where a wrapped exception is thrown\n     * from same method as the \"causative exception\" is caught.  The above\n     * example was produced by running the program:\n     * <pre>\n     * public class Junk {\n     *     public static void main(String args[]) {\n     *         try {\n     *             a();\n     *         } catch(HighLevelException e) {\n     *             e.printStackTrace();\n     *         }\n     *     }\n     *     static void a() throws HighLevelException {\n     *         try {\n     *             b();\n     *         } catch(MidLevelException e) {\n     *             throw new HighLevelException(e);\n     *         }\n     *     }\n     *     static void b() throws MidLevelException {\n     *         c();\n     *     }\n     *     static void c() throws MidLevelException {\n     *         try {\n     *             d();\n     *         } catch(LowLevelException e) {\n     *             throw new MidLevelException(e);\n     *         }\n     *     }\n     *     static void d() throws LowLevelException {\n     *        e();\n     *     }\n     *     static void e() throws LowLevelException {\n     *         throw new LowLevelException();\n     *     }\n     * }\n     *\n     * class HighLevelException extends Exception {\n     *     HighLevelException(Throwable cause) { super(cause); }\n     * }\n     *\n     * class MidLevelException extends Exception {\n     *     MidLevelException(Throwable cause)  { super(cause); }\n     * }\n     *\n     * class LowLevelException extends Exception {\n     * }\n     * </pre>\n     * As of release 7, the platform supports the notion of\n     * <i>suppressed exceptions</i> (in conjunction with the {@code\n     * try}-with-resources statement). Any exceptions that were\n     * suppressed in order to deliver an exception are printed out\n     * beneath the stack trace.  The format of this information\n     * depends on the implementation, but the following example may be\n     * regarded as typical:\n     *\n     * <pre>\n     * Exception in thread \"main\" java.lang.Exception: Something happened\n     *  at Foo.bar(Foo.java:10)\n     *  at Foo.main(Foo.java:5)\n     *  Suppressed: Resource$CloseFailException: Resource ID = 0\n     *          at Resource.close(Resource.java:26)\n     *          at Foo.bar(Foo.java:9)\n     *          ... 1 more\n     * </pre>\n     * Note that the \"... n more\" notation is used on suppressed exceptions\n     * just as it is used on causes. Unlike causes, suppressed exceptions are\n     * indented beyond their \"containing exceptions.\"\n     *\n     * <p>An exception can have both a cause and one or more suppressed\n     * exceptions:\n     * <pre>\n     * Exception in thread \"main\" java.lang.Exception: Main block\n     *  at Foo3.main(Foo3.java:7)\n     *  Suppressed: Resource$CloseFailException: Resource ID = 2\n     *          at Resource.close(Resource.java:26)\n     *          at Foo3.main(Foo3.java:5)\n     *  Suppressed: Resource$CloseFailException: Resource ID = 1\n     *          at Resource.close(Resource.java:26)\n     *          at Foo3.main(Foo3.java:5)\n     * Caused by: java.lang.Exception: I did it\n     *  at Foo3.main(Foo3.java:8)\n     * </pre>\n     * Likewise, a suppressed exception can have a cause:\n     * <pre>\n     * Exception in thread \"main\" java.lang.Exception: Main block\n     *  at Foo4.main(Foo4.java:6)\n     *  Suppressed: Resource2$CloseFailException: Resource ID = 1\n     *          at Resource2.close(Resource2.java:20)\n     *          at Foo4.main(Foo4.java:5)\n     *  Caused by: java.lang.Exception: Rats, you caught me\n     *          at Resource2$CloseFailException.&lt;init&gt;(Resource2.java:45)\n     *          ... 2 more\n     * </pre>\n     ",
    "links" : [ "#fillInStackTrace()", "#toString()" ]
  }, {
    "name" : "public void printStackTrace(PrintStream s)",
    "returnType" : "void",
    "comment" : "\n     * Prints this throwable and its backtrace to the specified print stream.\n     *\n     * @param s {@code PrintStream} to use for output\n     ",
    "links" : [ ]
  }, {
    "name" : "private void printStackTrace(PrintStreamOrWriter s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void printEnclosedStackTrace(PrintStreamOrWriter s, StackTraceElement[] enclosingTrace, String caption, String prefix, Set<Throwable> dejaVu)",
    "returnType" : "void",
    "comment" : "\n     * Print our stack trace as an enclosed exception for the specified\n     * stack trace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printStackTrace(PrintWriter s)",
    "returnType" : "void",
    "comment" : "\n     * Prints this throwable and its backtrace to the specified\n     * print writer.\n     *\n     * @param s {@code PrintWriter} to use for output\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Throwable fillInStackTrace()",
    "returnType" : "Throwable",
    "comment" : " Android-changed: Add @NeverInline to keep code size low.",
    "links" : [ ]
  }, {
    "name" : "private static native Object nativeFillInStackTrace()",
    "returnType" : "Object",
    "comment" : " private native Throwable fillInStackTrace(int dummy);",
    "links" : [ ]
  }, {
    "name" : "public StackTraceElement[] getStackTrace()",
    "returnType" : "StackTraceElement[]",
    "comment" : "\n     * Provides programmatic access to the stack trace information printed by\n     * {@link #printStackTrace()}.  Returns an array of stack trace elements,\n     * each representing one stack frame.  The zeroth element of the array\n     * (assuming the array's length is non-zero) represents the top of the\n     * stack, which is the last method invocation in the sequence.  Typically,\n     * this is the point at which this throwable was created and thrown.\n     * The last element of the array (assuming the array's length is non-zero)\n     * represents the bottom of the stack, which is the first method invocation\n     * in the sequence.\n     *\n     * <p>Some virtual machines may, under some circumstances, omit one\n     * or more stack frames from the stack trace.  In the extreme case,\n     * a virtual machine that has no stack trace information concerning\n     * this throwable is permitted to return a zero-length array from this\n     * method.  Generally speaking, the array returned by this method will\n     * contain one element for every frame that would be printed by\n     * {@code printStackTrace}.  Writes to the returned array do not\n     * affect future calls to this method.\n     *\n     * @return an array of stack trace elements representing the stack trace\n     *         pertaining to this throwable.\n     * @since  1.4\n     ",
    "links" : [ "#printStackTrace()" ]
  }, {
    "name" : "private synchronized StackTraceElement[] getOurStackTrace()",
    "returnType" : "StackTraceElement[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStackTrace(StackTraceElement[] stackTrace)",
    "returnType" : "void",
    "comment" : "\n     * Sets the stack trace elements that will be returned by\n     * {@link #getStackTrace()} and printed by {@link #printStackTrace()}\n     * and related methods.\n     *\n     * This method, which is designed for use by RPC frameworks and other\n     * advanced systems, allows the client to override the default\n     * stack trace that is either generated by {@link #fillInStackTrace()}\n     * when a throwable is constructed or deserialized when a throwable is\n     * read from a serialization stream.\n     *\n     * <p>If the stack trace of this {@code Throwable} {@linkplain\n     * Throwable#Throwable(String, Throwable, boolean, boolean) is not\n     * writable}, calling this method has no effect other than\n     * validating its argument.\n     *\n     * @param   stackTrace the stack trace elements to be associated with\n     * this {@code Throwable}.  The specified array is copied by this\n     * call; changes in the specified array after the method invocation\n     * returns will have no affect on this {@code Throwable}'s stack\n     * trace.\n     *\n     * @throws NullPointerException if {@code stackTrace} is\n     *         {@code null} or if any of the elements of\n     *         {@code stackTrace} are {@code null}\n     *\n     * @since  1.4\n     ",
    "links" : [ "#fillInStackTrace()", "#getStackTrace()", "#printStackTrace()" ]
  }, {
    "name" : "private static native StackTraceElement[] nativeGetStackTrace(Object stackState)",
    "returnType" : "StackTraceElement[]",
    "comment" : " native StackTraceElement getStackTraceElement(int index);",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reads a {@code Throwable} from a stream, enforcing\n     * well-formedness constraints on fields.  Null entries and\n     * self-pointers are not allowed in the list of {@code\n     * suppressedExceptions}.  Null entries are not allowed for stack\n     * trace elements.  A null stack trace in the serial form results\n     * in a zero-length stack element array. A single-element stack\n     * trace whose entry is equal to {@code new StackTraceElement(\"\",\n     * \"\", null, Integer.MIN_VALUE)} results in a {@code null} {@code\n     * stackTrace} field.\n     *\n     * Note that there are no constraints on the value the {@code\n     * cause} field can hold; both {@code null} and {@code this} are\n     * valid values for the field.\n     *\n     * @param  s the {@code ObjectInputStream} from which data is read\n     * @throws IOException if an I/O error occurs\n     * @throws ClassNotFoundException if a serialized class cannot be loaded\n     ",
    "links" : [ ]
  }, {
    "name" : "private int validateSuppressedExceptionsList(List<Throwable> deserSuppressedExceptions) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void writeObject(ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write a {@code Throwable} object to a stream.\n     *\n     * A {@code null} stack trace field is represented in the serial\n     * form as a one-element array whose element is equal to {@code\n     * new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE)}.\n     *\n     * @param  s the {@code ObjectOutputStream} to which data is written\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized void addSuppressed(Throwable exception)",
    "returnType" : "void",
    "comment" : "\n     * Appends the specified exception to the exceptions that were\n     * suppressed in order to deliver this exception. This method is\n     * thread-safe and typically called (automatically and implicitly)\n     * by the {@code try}-with-resources statement.\n     *\n     * <p>The suppression behavior is enabled <em>unless</em> disabled\n     * {@linkplain #Throwable(String, Throwable, boolean, boolean) via\n     * a constructor}.  When suppression is disabled, this method does\n     * nothing other than to validate its argument.\n     *\n     * <p>Note that when one exception {@linkplain\n     * #initCause(Throwable) causes} another exception, the first\n     * exception is usually caught and then the second exception is\n     * thrown in response.  In other words, there is a causal\n     * connection between the two exceptions.\n     *\n     * In contrast, there are situations where two independent\n     * exceptions can be thrown in sibling code blocks, in particular\n     * in the {@code try} block of a {@code try}-with-resources\n     * statement and the compiler-generated {@code finally} block\n     * which closes the resource.\n     *\n     * In these situations, only one of the thrown exceptions can be\n     * propagated.  In the {@code try}-with-resources statement, when\n     * there are two such exceptions, the exception originating from\n     * the {@code try} block is propagated and the exception from the\n     * {@code finally} block is added to the list of exceptions\n     * suppressed by the exception from the {@code try} block.  As an\n     * exception unwinds the stack, it can accumulate multiple\n     * suppressed exceptions.\n     *\n     * <p>An exception may have suppressed exceptions while also being\n     * caused by another exception.  Whether or not an exception has a\n     * cause is semantically known at the time of its creation, unlike\n     * whether or not an exception will suppress other exceptions\n     * which is typically only determined after an exception is\n     * thrown.\n     *\n     * <p>Note that programmer written code is also able to take\n     * advantage of calling this method in situations where there are\n     * multiple sibling exceptions and only one can be propagated.\n     *\n     * @param exception the exception to be added to the list of\n     *        suppressed exceptions\n     * @throws IllegalArgumentException if {@code exception} is this\n     *         throwable; a throwable cannot suppress itself.\n     * @throws NullPointerException if {@code exception} is {@code null}\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized Throwable[] getSuppressed()",
    "returnType" : "Throwable[]",
    "comment" : "\n     * Returns an array containing all of the exceptions that were\n     * suppressed, typically by the {@code try}-with-resources\n     * statement, in order to deliver this exception.\n     *\n     * If no exceptions were suppressed or {@linkplain\n     * #Throwable(String, Throwable, boolean, boolean) suppression is\n     * disabled}, an empty array is returned.  This method is\n     * thread-safe.  Writes to the returned array do not affect future\n     * calls to this method.\n     *\n     * @return an array containing all of the exceptions that were\n     *         suppressed to deliver this exception.\n     * @since 1.7\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getMessage()", "public String getLocalizedMessage()", "public synchronized Throwable getCause()", "public synchronized Throwable initCause(Throwable cause)", " final void setCause(Throwable t)", "public String toString()", "public void printStackTrace()", "public void printStackTrace(PrintStream s)", "private void printStackTrace(PrintStreamOrWriter s)", "private void printEnclosedStackTrace(PrintStreamOrWriter s, StackTraceElement[] enclosingTrace, String caption, String prefix, Set<Throwable> dejaVu)", "public void printStackTrace(PrintWriter s)", "public synchronized Throwable fillInStackTrace()", "private static native Object nativeFillInStackTrace()", "public StackTraceElement[] getStackTrace()", "private synchronized StackTraceElement[] getOurStackTrace()", "public void setStackTrace(StackTraceElement[] stackTrace)", "private static native StackTraceElement[] nativeGetStackTrace(Object stackState)", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "private int validateSuppressedExceptionsList(List<Throwable> deserSuppressedExceptions) throws IOException", "private synchronized void writeObject(ObjectOutputStream s) throws IOException", "public final synchronized void addSuppressed(Throwable exception)", "public final synchronized Throwable[] getSuppressed()" ],
  "variableNames" : [ "serialVersionUID", "backtrace", "detailMessage", "cause", "stackTrace", "suppressedExceptions", "NULL_CAUSE_MESSAGE", "SELF_SUPPRESSION_MESSAGE", "CAUSE_CAPTION", "SUPPRESSED_CAPTION", "EMPTY_THROWABLE_ARRAY" ]
}