{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/slice/SliceProvider.java",
  "packageName" : "android.app.slice",
  "className" : "SliceProvider",
  "comment" : "\n * A SliceProvider allows an app to provide content to be displayed in system spaces. This content\n * is templated and can contain actions, and the behavior of how it is surfaced is specific to the\n * system surface.\n * <p>\n * Slices are not currently live content. They are bound once and shown to the user. If the content\n * changes due to a callback from user interaction, then\n * {@link ContentResolver#notifyChange(Uri, ContentObserver)} should be used to notify the system.\n * </p>\n * <p>\n * The provider needs to be declared in the manifest to provide the authority for the app. The\n * authority for most slices is expected to match the package of the application.\n * </p>\n *\n * <pre class=\"prettyprint\">\n * {@literal\n * <provider\n *     android:name=\"com.example.mypkg.MySliceProvider\"\n *     android:authorities=\"com.example.mypkg\" />}\n * </pre>\n * <p>\n * Slices can be identified by a Uri or by an Intent. To link an Intent with a slice, the provider\n * must have an {@link IntentFilter} matching the slice intent. When a slice is being requested via\n * an intent, {@link #onMapIntentToUri(Intent)} can be called and is expected to return an\n * appropriate Uri representing the slice.\n *\n * <pre class=\"prettyprint\">\n * {@literal\n * <provider\n *     android:name=\"com.example.mypkg.MySliceProvider\"\n *     android:authorities=\"com.example.mypkg\">\n *     <intent-filter>\n *         <action android:name=\"com.example.mypkg.intent.action.MY_SLICE_INTENT\" />\n *         <category android:name=\"android.app.slice.category.SLICE\" />\n *     </intent-filter>\n * </provider>}\n * </pre>\n *\n * @see Slice\n * @deprecated Slice framework has been deprecated, it will not receive any updates from\n *          {@link android.os.Build.VANILLA_ICE_CREAM} and forward. If you are looking for a\n *          framework that sends displayable data from one app to another, consider using\n *          {@link android.app.appsearch.AppSearchManager}.\n ",
  "links" : [ "android.content.ContentResolver#notifyChange(Uri", "android.os.Build.VANILLA_ICE_CREAM", "android.content.IntentFilter", "android.app.appsearch.AppSearchManager", "#onMapIntentToUri(Intent)" ],
  "variables" : [ {
    "name" : "SLICE_TYPE",
    "type" : "String",
    "comment" : "\n     * This is the Android platform's MIME type for a URI\n     * containing a slice implemented through {@link SliceProvider}.\n     ",
    "links" : [ "android.app.slice.SliceProvider" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BIND_URI",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SUPPORTED_SPECS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_SLICE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_MAP_INTENT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_MAP_ONLY_INTENT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_PIN",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_UNPIN",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_GET_DESCENDANTS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_GET_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INTENT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SLICE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SLICE_DESCENDANTS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PKG",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESULT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLICE_BIND_ANR",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoGrantPermissions",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSliceManager",
    "type" : "SliceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnr",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void attachInfo(Context context, ProviderInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Slice onBindSlice(Uri sliceUri, Set<SliceSpec> supportedSpecs)",
    "returnType" : "Slice",
    "comment" : "\n     * Implemented to create a slice.\n     * <p>\n     * onBindSlice should return as quickly as possible so that the UI tied\n     * to this slice can be responsive. No network or other IO will be allowed\n     * during onBindSlice. Any loading that needs to be done should happen\n     * in the background with a call to {@link ContentResolver#notifyChange(Uri, ContentObserver)}\n     * when the app is ready to provide the complete data in onBindSlice.\n     * <p>\n     * The slice returned should have a spec that is compatible with one of\n     * the supported specs.\n     *\n     * @param sliceUri Uri to bind.\n     * @param supportedSpecs List of supported specs.\n     * @see Slice\n     * @see Slice#HINT_PARTIAL\n     ",
    "links" : [ "android.content.ContentResolver#notifyChange(Uri" ]
  }, {
    "name" : "public void onSlicePinned(Uri sliceUri)",
    "returnType" : "void",
    "comment" : "\n     * Called to inform an app that a slice has been pinned.\n     * <p>\n     * Pinning is a way that slice hosts use to notify apps of which slices\n     * they care about updates for. When a slice is pinned the content is\n     * expected to be relatively fresh and kept up to date.\n     * <p>\n     * Being pinned does not provide any escalated privileges for the slice\n     * provider. So apps should do things such as turn on syncing or schedule\n     * a job in response to a onSlicePinned.\n     * <p>\n     * Pinned state is not persisted through a reboot, and apps can expect a\n     * new call to onSlicePinned for any slices that should remain pinned\n     * after a reboot occurs.\n     *\n     * @param sliceUri The uri of the slice being unpinned.\n     * @see #onSliceUnpinned(Uri)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSliceUnpinned(Uri sliceUri)",
    "returnType" : "void",
    "comment" : "\n     * Called to inform an app that a slices is no longer pinned.\n     * <p>\n     * This means that no other apps on the device care about updates to this\n     * slice anymore and therefore it is not important to be updated. Any syncs\n     * or jobs related to this slice should be cancelled.\n     * @see #onSlicePinned(Uri)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<Uri> onGetSliceDescendants(@NonNull Uri uri)",
    "returnType" : "Collection<Uri>",
    "comment" : "\n     * Obtains a list of slices that are descendants of the specified Uri.\n     * <p>\n     * Implementing this is optional for a SliceProvider, but does provide a good\n     * discovery mechanism for finding slice Uris.\n     *\n     * @param uri The uri to look for descendants under.\n     * @return All slices within the space.\n     * @see SliceManager#getSliceDescendants(Uri)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri onMapIntentToUri(Intent intent)",
    "returnType" : "Uri",
    "comment" : "\n     * This method must be overridden if an {@link IntentFilter} is specified on the SliceProvider.\n     * In that case, this method can be called and is expected to return a non-null Uri representing\n     * a slice. Otherwise this will throw {@link UnsupportedOperationException}.\n     *\n     * Any intent filter added to a slice provider should also contain\n     * {@link SliceManager#CATEGORY_SLICE}, because otherwise it will not be detected by\n     * {@link SliceManager#mapIntentToUri(Intent)}.\n     *\n     * @return Uri representing the slice associated with the provided intent.\n     * @see Slice\n     * @see SliceManager#mapIntentToUri(Intent)\n     ",
    "links" : [ "android.app.slice.SliceManager#CATEGORY_SLICE", "android.app.slice.SliceManager#mapIntentToUri(Intent)", "android.content.IntentFilter", "UnsupportedOperationException" ]
  }, {
    "name" : "public PendingIntent onCreatePermissionRequest(Uri sliceUri)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Called when an app requests a slice it does not have write permission\n     * to the uri for.\n     * <p>\n     * The return value will be the action on a slice that prompts the user that\n     * the calling app wants to show slices from this app. The default implementation\n     * launches a dialog that allows the user to grant access to this slice. Apps\n     * that do not want to allow this user grant, can override this and instead\n     * launch their own dialog with different behavior.\n     *\n     * @param sliceUri the Uri of the slice attempting to be bound.\n     * @see #getCallingPackage()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int delete(Uri uri, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Cursor query(Uri uri, String[] projection, Bundle queryArgs, CancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Uri insert(Uri uri, ContentValues values)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String getType(Uri uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(String method, String arg, Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Uri validateIncomingUriOrNull(Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Collection<Uri> handleGetDescendants(Uri uri)",
    "returnType" : "Collection<Uri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handlePinSlice(Uri sliceUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleUnpinSlice(Uri sliceUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Slice handleBindSlice(Uri sliceUri, List<SliceSpec> supportedSpecs, String callingPkg, int callingUid, int callingPid)",
    "returnType" : "Slice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Slice createPermissionSlice(Context context, Uri sliceUri, String callingPackage)",
    "returnType" : "Slice",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PendingIntent createPermissionPendingIntent(Context context, Uri sliceUri, String callingPackage)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Intent createPermissionIntent(Context context, Uri sliceUri, String callingPackage)",
    "returnType" : "Intent",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence getPermissionString(Context context, String callingPackage)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Slice onBindSliceStrict(Uri sliceUri, List<SliceSpec> supportedSpecs)",
    "returnType" : "Slice",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void attachInfo(Context context, ProviderInfo info)", "public Slice onBindSlice(Uri sliceUri, Set<SliceSpec> supportedSpecs)", "public void onSlicePinned(Uri sliceUri)", "public void onSliceUnpinned(Uri sliceUri)", "public Collection<Uri> onGetSliceDescendants(@NonNull Uri uri)", "public Uri onMapIntentToUri(Intent intent)", "public PendingIntent onCreatePermissionRequest(Uri sliceUri)", "public final int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)", "public final int delete(Uri uri, String selection, String[] selectionArgs)", "public final Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)", "public final Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal)", "public final Cursor query(Uri uri, String[] projection, Bundle queryArgs, CancellationSignal cancellationSignal)", "public final Uri insert(Uri uri, ContentValues values)", "public final String getType(Uri uri)", "public Bundle call(String method, String arg, Bundle extras)", "private Uri validateIncomingUriOrNull(Uri uri)", "private Collection<Uri> handleGetDescendants(Uri uri)", "private void handlePinSlice(Uri sliceUri)", "private void handleUnpinSlice(Uri sliceUri)", "private Slice handleBindSlice(Uri sliceUri, List<SliceSpec> supportedSpecs, String callingPkg, int callingUid, int callingPid)", "public Slice createPermissionSlice(Context context, Uri sliceUri, String callingPackage)", "public static PendingIntent createPermissionPendingIntent(Context context, Uri sliceUri, String callingPackage)", "public static Intent createPermissionIntent(Context context, Uri sliceUri, String callingPackage)", "public static CharSequence getPermissionString(Context context, String callingPackage)", "private Slice onBindSliceStrict(Uri sliceUri, List<SliceSpec> supportedSpecs)" ],
  "variableNames" : [ "SLICE_TYPE", "TAG", "EXTRA_BIND_URI", "EXTRA_SUPPORTED_SPECS", "METHOD_SLICE", "METHOD_MAP_INTENT", "METHOD_MAP_ONLY_INTENT", "METHOD_PIN", "METHOD_UNPIN", "METHOD_GET_DESCENDANTS", "METHOD_GET_PERMISSIONS", "EXTRA_INTENT", "EXTRA_SLICE", "EXTRA_SLICE_DESCENDANTS", "EXTRA_PKG", "EXTRA_RESULT", "DEBUG", "SLICE_BIND_ANR", "mAutoGrantPermissions", "mCallback", "mSliceManager", "mAnr" ]
}