{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowOnBackInvokedDispatcher.java",
  "packageName" : "android.window",
  "className" : "WindowOnBackInvokedDispatcher",
  "comment" : "\n * Provides window based implementation of {@link OnBackInvokedDispatcher}.\n * <p>\n * Callbacks with higher priorities receive back dispatching first.\n * Within the same priority, callbacks receive back dispatching in the reverse order\n * in which they are added.\n * <p>\n * When the top priority callback is updated, the new callback is propagated to the Window Manager\n * if the window the instance is associated with has been attached. It is allowed to register /\n * unregister {@link OnBackInvokedCallback}s before the window is attached, although\n * callbacks will not receive dispatches until window attachment.\n *\n * @hide\n ",
  "links" : [ "android.window.OnBackInvokedCallback", "android.window.OnBackInvokedDispatcher" ],
  "variables" : [ {
    "name" : "mWindowSession",
    "type" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "IWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchTracker",
    "type" : "BackTouchTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressAnimator",
    "type" : "BackProgressAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " This should be on the same thread the ViewRootImpl holding this instance is created on.",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENABLE_PREDICTIVE_BACK",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALWAYS_ENFORCE_PREDICTIVE_BACK",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREDICTIVE_BACK_FALLBACK_WINDOW_ATTRIBUTE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImeDispatcher",
    "type" : "ImeOnBackInvokedDispatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImeBackAnimationController",
    "type" : "ImeBackAnimationController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllCallbacks",
    "type" : "HashMap<OnBackInvokedCallback, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnBackInvokedCallbacks",
    "type" : "TreeMap<Integer, ArrayList<OnBackInvokedCallback>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChecker",
    "type" : "Checker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackSwipeLinearThreshold",
    "type" : "float",
    "comment" : " The threshold for back swipe full progress.",
    "links" : [ ]
  }, {
    "name" : "mNonLinearProgressFactor",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImeDispatchingActive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onMotionEvent(MotionEvent ev)",
    "returnType" : "void",
    "comment" : " Updates the dispatcher state on a new {@link MotionEvent}. ",
    "links" : [ "android.view.MotionEvent" ]
  }, {
    "name" : "public void attachToWindow(@NonNull IWindowSession windowSession, @NonNull IWindow window, @Nullable ImeBackAnimationController imeBackAnimationController)",
    "returnType" : "void",
    "comment" : "\n     * Sends the pending top callback (if one exists) to WM when the view root\n     * is attached a window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void detachFromWindow()",
    "returnType" : "void",
    "comment" : " Detaches the dispatcher instance from its window. ",
    "links" : [ ]
  }, {
    "name" : "public void registerOnBackInvokedCallback(@Priority int priority, @NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : " TODO: Take an Executor for the callback to run on.",
    "links" : [ ]
  }, {
    "name" : "public void registerOnBackInvokedCallbackUnchecked(@NonNull OnBackInvokedCallback callback, @Priority int priority)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback bypassing platform checks. This is used to register compatibility\n     * callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isBackGestureInProgress()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if a user gesture is currently in progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendCancelledIfInProgress(@NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerSystemOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : " Clears all registered callbacks on the instance. ",
    "links" : [ ]
  }, {
    "name" : "private void setTopOnBackInvokedCallback(@Nullable OnBackInvokedCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public OnBackInvokedCallback getTopCallback()",
    "returnType" : "OnBackInvokedCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateContext(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * The {@link Context} in ViewRootImp and Activity could be different, this will make sure it\n     * could update the checker condition base on the real context when binding the proxy\n     * dispatcher in PhoneWindow.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration configuration)",
    "returnType" : "void",
    "comment" : " Updates the threshold values for computing progress. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOnBackInvokedCallbackEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns false if the legacy back behavior should be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter writer)",
    "returnType" : "void",
    "comment" : "\n     * Dump information about this WindowOnBackInvokedDispatcher\n     * @param prefix the prefix that will be prepended to each line of the produced output\n     * @param writer the writer that will receive the resulting text\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onStartImeDispatching()",
    "returnType" : "void",
    "comment" : "\n     * Called when we start dispatching to a callback registered from IME.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onStopImeDispatching()",
    "returnType" : "void",
    "comment" : "\n     * Called when we stop dispatching to a callback registered from IME.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isOnBackInvokedCallbackEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns false if the legacy back behavior should be used.\n     * <p>\n     * Legacy back behavior dispatches KEYCODE_BACK instead of invoking the application registered\n     * {@link OnBackInvokedCallback}.\n     ",
    "links" : [ "android.window.OnBackInvokedCallback" ]
  }, {
    "name" : "public void setImeOnBackInvokedDispatcher(@NonNull ImeOnBackInvokedDispatcher imeDispatcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasImeOnBackInvokedDispatcher()",
    "returnType" : "boolean",
    "comment" : " Returns true if a non-null {@link ImeOnBackInvokedDispatcher} has been set. *",
    "links" : [ "android.window.ImeOnBackInvokedDispatcher" ]
  }, {
    "name" : "public static boolean isOnBackInvokedCallbackEnabled(@Nullable ActivityInfo activityInfo, @NonNull ApplicationInfo applicationInfo, @NonNull Supplier<Context> contextSupplier)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onMotionEvent(MotionEvent ev)", "public void attachToWindow(@NonNull IWindowSession windowSession, @NonNull IWindow window, @Nullable ImeBackAnimationController imeBackAnimationController)", "public void detachFromWindow()", "public void registerOnBackInvokedCallback(@Priority int priority, @NonNull OnBackInvokedCallback callback)", "public void registerOnBackInvokedCallbackUnchecked(@NonNull OnBackInvokedCallback callback, @Priority int priority)", "public void unregisterOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)", "public boolean isBackGestureInProgress()", "private void sendCancelledIfInProgress(@NonNull OnBackInvokedCallback callback)", "public void registerSystemOnBackInvokedCallback(@NonNull OnBackInvokedCallback callback)", "public void clear()", "private void setTopOnBackInvokedCallback(@Nullable OnBackInvokedCallback callback)", "public OnBackInvokedCallback getTopCallback()", "public void updateContext(@NonNull Context context)", "public void onConfigurationChanged(Configuration configuration)", "public boolean isOnBackInvokedCallbackEnabled()", "public void dump(String prefix, PrintWriter writer)", "public void onStartImeDispatching()", "public void onStopImeDispatching()", "public static boolean isOnBackInvokedCallbackEnabled(@NonNull Context context)", "public void setImeOnBackInvokedDispatcher(@NonNull ImeOnBackInvokedDispatcher imeDispatcher)", "public boolean hasImeOnBackInvokedDispatcher()", "public static boolean isOnBackInvokedCallbackEnabled(@Nullable ActivityInfo activityInfo, @NonNull ApplicationInfo applicationInfo, @NonNull Supplier<Context> contextSupplier)" ],
  "variableNames" : [ "mWindowSession", "mWindow", "mTouchTracker", "mProgressAnimator", "mHandler", "TAG", "ENABLE_PREDICTIVE_BACK", "ALWAYS_ENFORCE_PREDICTIVE_BACK", "PREDICTIVE_BACK_FALLBACK_WINDOW_ATTRIBUTE", "mImeDispatcher", "mImeBackAnimationController", "mAllCallbacks", "mOnBackInvokedCallbacks", "mChecker", "mLock", "mBackSwipeLinearThreshold", "mNonLinearProgressFactor", "mImeDispatchingActive" ]
}