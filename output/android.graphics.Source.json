{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/ImageDecoder.java",
  "packageName" : "android.graphics",
  "className" : "Source",
  "comment" : "\n     *  Source of encoded image data.\n     *\n     *  <p>References the data that will be used to decode a {@link Drawable}\n     *  or {@link Bitmap} in {@link #decodeDrawable decodeDrawable} or\n     *  {@link #decodeBitmap decodeBitmap}. Constructing a {@code Source} (with\n     *  one of the overloads of {@code createSource}) can be done on any thread\n     *  because the construction simply captures values. The real work is done\n     *  in {@link #decodeDrawable decodeDrawable} or {@link #decodeBitmap decodeBitmap}.\n     *\n     *  <p>A {@code Source} object can be reused to create multiple versions of the\n     *  same image. For example, to decode a full size image and its thumbnail,\n     *  the same {@code Source} can be used once with no\n     *  {@link OnHeaderDecodedListener OnHeaderDecodedListener} and once with an\n     *  implementation of {@link OnHeaderDecodedListener#onHeaderDecoded onHeaderDecoded}\n     *  that calls {@link #setTargetSize} with smaller dimensions. One {@code Source}\n     *  can even be used simultaneously in multiple threads.</p>\n     ",
  "links" : [ "#onHeaderDecoded", "#decodeBitmap", "android.graphics.Bitmap", "#decodeDrawable", "android.graphics.drawable.AnimatedImageDrawable", "#setTargetSize", "OnHeaderDecodedListener" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Resources getResources()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getDensity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int computeDstDensity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract ImageDecoder createImageDecoder(boolean preferAnimation) throws IOException",
    "returnType" : "ImageDecoder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " Resources getResources()", " int getDensity()", " final int computeDstDensity()", " abstract ImageDecoder createImageDecoder(boolean preferAnimation) throws IOException" ],
  "variableNames" : [ ]
}