{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/utils/SurfaceUtils.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "SurfaceUtils",
  "comment" : "\n * Various Surface utilities.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "USAGE_RENDERSCRIPT",
    "type" : "int",
    "comment" : " Usage flags not yet included in HardwareBuffer",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_COMPOSER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BGRA_8888",
    "type" : "int",
    "comment" : " Image formats not yet included in PixelFormat",
    "links" : [ ]
  }, {
    "name" : "BAD_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSurfaceForPreview(Surface surface)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a surface is for preview consumer based on consumer end point Gralloc usage flags.\n     *\n     * @param surface The surface to be checked.\n     * @return true if the surface is for preview consumer, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSurfaceForHwVideoEncoder(Surface surface)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the surface is for hardware video encoder consumer based on consumer end point\n     * Gralloc usage flags.\n     *\n     * @param surface The surface to be checked.\n     * @return true if the surface is for hardware video encoder consumer, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getSurfaceId(Surface surface)",
    "returnType" : "long",
    "comment" : "\n     * Get the native object id of a surface.\n     *\n     * @param surface The surface to be checked.\n     * @return the native object id of the surface, 0 if surface is not backed by a native object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getSurfaceUsage(Surface surface)",
    "returnType" : "long",
    "comment" : "\n     * Get the surface usage bits.\n     *\n     * @param surface The surface to be queried for usage.\n     * @return the native object id of the surface, 0 if surface is not backed by a native object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Size getSurfaceSize(Surface surface)",
    "returnType" : "Size",
    "comment" : "\n     * Get the Surface size.\n     *\n     * @param surface The surface to be queried for size.\n     * @return Size of the surface.\n     *\n     * @throws IllegalArgumentException if the surface is already abandoned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getSurfaceFormat(Surface surface)",
    "returnType" : "int",
    "comment" : "\n     * Get the Surface format.\n     *\n     * @param surface The surface to be queried for format.\n     * @return format of the surface.\n     *\n     * @throws IllegalArgumentException if the surface is already abandoned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int detectSurfaceFormat(Surface surface)",
    "returnType" : "int",
    "comment" : "\n     * Detect and retrieve the Surface format without any\n     * additional overrides.\n     *\n     * @param surface The surface to be queried for format.\n     * @return format of the surface.\n     *\n     * @throws IllegalArgumentException if the surface is already abandoned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getSurfaceDataspace(Surface surface)",
    "returnType" : "int",
    "comment" : "\n     * Get the Surface dataspace.\n     *\n     * @param surface The surface to be queried for dataspace.\n     * @return dataspace of the surface.\n     *\n     * @throws IllegalArgumentException if the surface is already abandoned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFlexibleConsumer(Surface output)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true is the consumer is one of the consumers that can accept\n     * producer overrides of the default dimensions and format.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkHighSpeedSurfaceFormat(Surface surface)",
    "returnType" : "void",
    "comment" : "\n     * A high speed output surface can only be preview or hardware encoder surface.\n     *\n     * @param surface The high speed output surface to be checked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void checkConstrainedHighSpeedSurfaces(Collection<Surface> surfaces, Range<Integer> fpsRange, StreamConfigurationMap config)",
    "returnType" : "void",
    "comment" : "\n     * Verify that that the surfaces are valid for high-speed recording mode,\n     * and that the FPS range is supported\n     *\n     * @param surfaces the surfaces to verify as valid in terms of size and format\n     * @param fpsRange the target high-speed FPS range to validate\n     * @param config The stream configuration map for the device in question\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceType(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceDataspace(Surface surface)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeDetectSurfaceUsageFlags(Surface surface)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeDetectSurfaceDimens(Surface surface, int[] dimens)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetSurfaceId(Surface surface)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isSurfaceForPreview(Surface surface)", "public static boolean isSurfaceForHwVideoEncoder(Surface surface)", "public static long getSurfaceId(Surface surface)", "public static long getSurfaceUsage(Surface surface)", "public static Size getSurfaceSize(Surface surface)", "public static int getSurfaceFormat(Surface surface)", "public static int detectSurfaceFormat(Surface surface)", "public static int getSurfaceDataspace(Surface surface)", "public static boolean isFlexibleConsumer(Surface output)", "private static void checkHighSpeedSurfaceFormat(Surface surface)", "public static void checkConstrainedHighSpeedSurfaces(Collection<Surface> surfaces, Range<Integer> fpsRange, StreamConfigurationMap config)", "private static native int nativeDetectSurfaceType(Surface surface)", "private static native int nativeDetectSurfaceDataspace(Surface surface)", "private static native long nativeDetectSurfaceUsageFlags(Surface surface)", "private static native int nativeDetectSurfaceDimens(Surface surface, int[] dimens)", "private static native long nativeGetSurfaceId(Surface surface)" ],
  "variableNames" : [ "USAGE_RENDERSCRIPT", "USAGE_HW_COMPOSER", "BGRA_8888", "BAD_VALUE" ]
}