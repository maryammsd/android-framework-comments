{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertPathValidatorException.java",
  "packageName" : "java.security.cert",
  "className" : "CertPathValidatorException",
  "comment" : "\n * An exception indicating one of a variety of problems encountered when\n * validating a certification path.\n * <p>\n * A {@code CertPathValidatorException} provides support for wrapping\n * exceptions. The {@link #getCause getCause} method returns the throwable,\n * if any, that caused this exception to be thrown.\n * <p>\n * A {@code CertPathValidatorException} may also include the\n * certification path that was being validated when the exception was thrown,\n * the index of the certificate in the certification path that caused the\n * exception to be thrown, and the reason that caused the failure. Use the\n * {@link #getCertPath getCertPath}, {@link #getIndex getIndex}, and\n * {@link #getReason getReason} methods to retrieve this information.\n *\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * Unless otherwise specified, the methods defined in this class are not\n * thread-safe. Multiple threads that need to access a single\n * object concurrently should synchronize amongst themselves and\n * provide the necessary locking. Multiple threads each manipulating\n * separate objects need not synchronize.\n *\n * @see CertPathValidator\n *\n * @since       1.4\n * @author      Yassir Elley\n ",
  "links" : [ "#getReason", "#getCertPath", "#getIndex", "#getCause" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : "\n     * @serial the index of the certificate in the certification path\n     * that caused the exception to be thrown\n     ",
    "links" : [ ]
  }, {
    "name" : "certPath",
    "type" : "CertPath",
    "comment" : "\n     * @serial the {@code CertPath} that was being validated when\n     * the exception was thrown\n     ",
    "links" : [ ]
  }, {
    "name" : "reason",
    "type" : "Reason",
    "comment" : "\n     * @serial the reason the validation failed\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CertPath getCertPath()",
    "returnType" : "CertPath",
    "comment" : "\n     * Returns the certification path that was being validated when\n     * the exception was thrown.\n     *\n     * @return the {@code CertPath} that was being validated when\n     * the exception was thrown (or {@code null} if not specified)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the certificate in the certification path\n     * that caused the exception to be thrown. Note that the list of\n     * certificates in a {@code CertPath} is zero based. If no\n     * index has been set, -1 is returned.\n     *\n     * @return the index that has been set, or -1 if none has been set\n     ",
    "links" : [ ]
  }, {
    "name" : "public Reason getReason()",
    "returnType" : "Reason",
    "comment" : "\n     * Returns the reason that the validation failed. The reason is\n     * associated with the index of the certificate returned by\n     * {@link #getIndex}.\n     *\n     * @return the reason that the validation failed, or\n     *    {@code BasicReason.UNSPECIFIED} if a reason has not been\n     *    specified\n     *\n     * @since 1.7\n     ",
    "links" : [ "#getIndex" ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws ClassNotFoundException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CertPath getCertPath()", "public int getIndex()", "public Reason getReason()", "private void readObject(ObjectInputStream stream) throws ClassNotFoundException, IOException" ],
  "variableNames" : [ "serialVersionUID", "index", "certPath", "reason" ]
}