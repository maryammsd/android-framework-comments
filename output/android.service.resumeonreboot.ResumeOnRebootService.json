{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/resumeonreboot/ResumeOnRebootService.java",
  "packageName" : "android.service.resumeonreboot",
  "className" : "ResumeOnRebootService",
  "comment" : "\n * Base class for service that provides wrapping/unwrapping of the opaque blob needed for\n * ResumeOnReboot operation. The package needs to provide a wrap/unwrap implementation for handling\n * the opaque blob, that's secure even when on device keystore and clock is compromised. This can\n * be achieved by using tamper-resistant hardware such as a secure element with a secure clock, or\n * using a remote server to store and retrieve data and manage timing.\n *\n * <p>To extend this class, you must declare the service in your manifest file with the\n * {@link android.Manifest.permission#BIND_RESUME_ON_REBOOT_SERVICE} permission,\n * include an intent filter with the {@link #SERVICE_INTERFACE} action and mark the service as\n * direct-boot aware. In addition, the package that contains the service must be granted\n * {@link android.Manifest.permission#BIND_RESUME_ON_REBOOT_SERVICE}.\n * For example:</p>\n * <pre>\n *     &lt;service android:name=\".FooResumeOnRebootService\"\n *             android:exported=\"true\"\n *             android:priority=\"100\"\n *             android:directBootAware=\"true\"\n *             android:permission=\"android.permission.BIND_RESUME_ON_REBOOT_SERVICE\"&gt;\n *         &lt;intent-filter&gt;\n *             &lt;action android:name=\"android.service.resumeonreboot.ResumeOnRebootService\" /&gt;\n *         &lt;/intent-filter&gt;\n *     &lt;/service&gt;\n * </pre>\n *\n * @hide\n * @see\n * <a href=\"https://source.android.com/devices/tech/ota/resume-on-reboot\">https://source.android.com/devices/tech/ota/resume-on-reboot</a>\n ",
  "links" : [ "#SERVICE_INTERFACE", "android.Manifest.permission#BIND_RESUME_ON_REBOOT_SERVICE" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The intent that the service must respond to. Add it to the intent filter of the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNWRAPPED_BLOB_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WRAPPED_BLOB_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXCEPTION_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "android.service.resumeonreboot.IResumeOnRebootService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract byte[] onWrap(@NonNull byte[] blob, @DurationMillisLong long lifeTimeInMillis) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Implementation for wrapping the opaque blob used for resume-on-reboot prior to\n     * reboot. The service should not assume any structure of the blob to be wrapped. The\n     * implementation should wrap the opaque blob in a reasonable time or throw {@link IOException}\n     * if it's unable to complete the action due to retry-able errors (e.g network errors)\n     * and {@link IllegalArgumentException} if {@code wrapBlob} fails due to fatal errors\n     * (e.g corrupted blob).\n     *\n     * @param blob             The opaque blob with size on the order of 100 bytes.\n     * @param lifeTimeInMillis The life time of the blob. This must be strictly enforced by the\n     *                         implementation and any attempt to unWrap the wrapped blob returned by\n     *                         this function after expiration should\n     *                         fail.\n     * @return Wrapped blob to be persisted across reboot with size on the order of 100 bytes.\n     * @throws IOException if the implementation is unable to wrap the blob successfully due to\n     * retry-able errors.\n     ",
    "links" : [ "java.io.IOException", "IllegalArgumentException" ]
  }, {
    "name" : "public abstract byte[] onUnwrap(@NonNull byte[] wrappedBlob) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Implementation for unwrapping the wrapped blob used for resume-on-reboot after reboot. This\n     * operation would happen after reboot during direct boot mode (i.e before device is unlocked\n     * for the first time). The implementation should unwrap the wrapped blob in a reasonable time\n     * and returns the result or throw {@link IOException} if it's unable to complete the action\n     * due to retry-able errors (e.g network error) and {@link IllegalArgumentException}\n     * if {@code unwrapBlob} fails due to fatal errors (e.g stale or corrupted blob).\n     *\n     * @param wrappedBlob The wrapped blob with size on the order of 100 bytes.\n     * @return Unwrapped blob used for resume-on-reboot with the size on the order of 100 bytes.\n     * @throws IOException if the implementation is unable to unwrap the wrapped blob successfully\n     * due to retry-able errors.\n     ",
    "links" : [ "java.io.IOException", "IllegalArgumentException" ]
  }, {
    "name" : "public IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract byte[] onWrap(@NonNull byte[] blob, @DurationMillisLong long lifeTimeInMillis) throws IOException", "public abstract byte[] onUnwrap(@NonNull byte[] wrappedBlob) throws IOException", "public IBinder onBind(@Nullable Intent intent)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "UNWRAPPED_BLOB_KEY", "WRAPPED_BLOB_KEY", "EXCEPTION_KEY", "mHandler", "mInterface" ]
}