{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/ZipInputStream.java",
  "packageName" : "java.util.zip",
  "className" : "ZipInputStream",
  "comment" : "\n * This class implements an input stream filter for reading files in the\n * ZIP file format. Includes support for both compressed and uncompressed\n * entries.\n *\n * @author      David Connelly\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "entry",
    "type" : "ZipEntry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "flag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "crc",
    "type" : "CRC32",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "remaining",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tmpbuf",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STORED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFLATED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entryEOF",
    "type" : "boolean",
    "comment" : " one entry",
    "links" : [ ]
  }, {
    "name" : "zc",
    "type" : "ZipCoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "b",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check to make sure that this stream has not been closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public ZipEntry getNextEntry() throws IOException",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Reads the next ZIP file entry and positions the stream at the\n     * beginning of the entry data.\n     *\n     * <p>If the app targets Android U or above, zip file entry names containing\n     * \"..\" or starting with \"/\" passed here will throw a {@link ZipException}.\n     * For more details, see {@link dalvik.system.ZipPathValidator}.\n     *\n     * @return the next ZIP file entry, or null if there are no more entries\n     * @throws ZipException if (1) a ZIP file error has occurred or\n     *            (2) <code>targetSdkVersion >= BUILD.VERSION_CODES.UPSIDE_DOWN_CAKE</code>\n     *            and (the <code>name</code> argument contains \"..\" or starts with \"/\").\n     * @throws IOException if an I/O error has occurred\n     ",
    "links" : [ "java.util.zip.ZipException", "dalvik.system.ZipPathValidator" ]
  }, {
    "name" : "public void closeEntry() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the current ZIP entry and positions the stream for reading the\n     * next entry.\n     * @throws    ZipException if a ZIP file error has occurred\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns 0 after EOF has reached for the current entry data,\n     * otherwise always return 1.\n     * <p>\n     * Programs should not count on this method to return the actual number\n     * of bytes that could be read without blocking.\n     *\n     * @return     1 before EOF and 0 after EOF has reached for current entry.\n     * @throws     IOException  if an I/O error occurs.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads from the current ZIP entry into an array of bytes.\n     * If {@code len} is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and {@code 0} is returned.\n     * @param b the buffer into which the data is read\n     * @param off the start offset in the destination array {@code b}\n     * @param len the maximum number of bytes read\n     * @return the actual number of bytes read, or -1 if the end of the\n     *         entry is reached\n     * @throws     NullPointerException if {@code b} is {@code null}.\n     * @throws     IndexOutOfBoundsException if {@code off} is negative,\n     * {@code len} is negative, or {@code len} is greater than\n     * {@code b.length - off}\n     * @throws    ZipException if a ZIP file error has occurred\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips specified number of bytes in the current ZIP entry.\n     * @param n the number of bytes to skip\n     * @return the actual number of bytes skipped\n     * @throws    ZipException if a ZIP file error has occurred\n     * @throws    IOException if an I/O error has occurred\n     * @throws    IllegalArgumentException if {@code n < 0}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources associated\n     * with the stream.\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "private ZipEntry readLOC() throws IOException",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Reads local file (LOC) header for next entry.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected ZipEntry createZipEntry(String name)",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Creates a new {@code ZipEntry} object for the specified\n     * entry name.\n     *\n     * @param name the ZIP file entry name\n     * @return the ZipEntry just created\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readEnd(ZipEntry e) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads end of deflated entry as well as EXT descriptor if present.\n     *\n     * Local headers for DEFLATED entries may optionally be followed by a\n     * data descriptor, and that data descriptor may optionally contain a\n     * leading signature (EXTSIG).\n     *\n     * From the zip spec http://www.pkware.com/documents/casestudies/APPNOTE.TXT\n     *\n     * \"\"\"Although not originally assigned a signature, the value 0x08074b50\n     * has commonly been adopted as a signature value for the data descriptor\n     * record.  Implementers should be aware that ZIP files may be\n     * encountered with or without this signature marking data descriptors\n     * and should account for either case when reading ZIP files to ensure\n     * compatibility.\"\"\"\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readFully(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads bytes, blocking until all bytes are read.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public ZipEntry getNextEntry() throws IOException", "public void closeEntry() throws IOException", "public int available() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public void close() throws IOException", "private ZipEntry readLOC() throws IOException", "protected ZipEntry createZipEntry(String name)", "private void readEnd(ZipEntry e) throws IOException", "private void readFully(byte[] b, int off, int len) throws IOException" ],
  "variableNames" : [ "entry", "flag", "crc", "remaining", "tmpbuf", "STORED", "DEFLATED", "closed", "entryEOF", "zc", "b" ]
}