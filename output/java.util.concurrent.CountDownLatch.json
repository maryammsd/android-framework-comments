{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/CountDownLatch.java",
  "packageName" : "java.util.concurrent",
  "className" : "CountDownLatch",
  "comment" : "\n * A synchronization aid that allows one or more threads to wait until\n * a set of operations being performed in other threads completes.\n *\n * <p>A {@code CountDownLatch} is initialized with a given <em>count</em>.\n * The {@link #await await} methods block until the current count reaches\n * zero due to invocations of the {@link #countDown} method, after which\n * all waiting threads are released and any subsequent invocations of\n * {@link #await await} return immediately.  This is a one-shot phenomenon\n * -- the count cannot be reset.  If you need a version that resets the\n * count, consider using a {@link CyclicBarrier}.\n *\n * <p>A {@code CountDownLatch} is a versatile synchronization tool\n * and can be used for a number of purposes.  A\n * {@code CountDownLatch} initialized with a count of one serves as a\n * simple on/off latch, or gate: all threads invoking {@link #await await}\n * wait at the gate until it is opened by a thread invoking {@link\n * #countDown}.  A {@code CountDownLatch} initialized to <em>N</em>\n * can be used to make one thread wait until <em>N</em> threads have\n * completed some action, or some action has been completed N times.\n *\n * <p>A useful property of a {@code CountDownLatch} is that it\n * doesn't require that threads calling {@code countDown} wait for\n * the count to reach zero before proceeding, it simply prevents any\n * thread from proceeding past an {@link #await await} until all\n * threads could pass.\n *\n * <p><b>Sample usage:</b> Here is a pair of classes in which a group\n * of worker threads use two countdown latches:\n * <ul>\n * <li>The first is a start signal that prevents any worker from proceeding\n * until the driver is ready for them to proceed;\n * <li>The second is a completion signal that allows the driver to wait\n * until all workers have completed.\n * </ul>\n *\n * <pre> {@code\n * class Driver { // ...\n *   void main() throws InterruptedException {\n *     CountDownLatch startSignal = new CountDownLatch(1);\n *     CountDownLatch doneSignal = new CountDownLatch(N);\n *\n *     for (int i = 0; i < N; ++i) // create and start threads\n *       new Thread(new Worker(startSignal, doneSignal)).start();\n *\n *     doSomethingElse();            // don't let run yet\n *     startSignal.countDown();      // let all threads proceed\n *     doSomethingElse();\n *     doneSignal.await();           // wait for all to finish\n *   }\n * }\n *\n * class Worker implements Runnable {\n *   private final CountDownLatch startSignal;\n *   private final CountDownLatch doneSignal;\n *   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {\n *     this.startSignal = startSignal;\n *     this.doneSignal = doneSignal;\n *   }\n *   public void run() {\n *     try {\n *       startSignal.await();\n *       doWork();\n *       doneSignal.countDown();\n *     } catch (InterruptedException ex) {} // return;\n *   }\n *\n *   void doWork() { ... }\n * }}</pre>\n *\n * <p>Another typical usage would be to divide a problem into N parts,\n * describe each part with a Runnable that executes that portion and\n * counts down on the latch, and queue all the Runnables to an\n * Executor.  When all sub-parts are complete, the coordinating thread\n * will be able to pass through await. (When threads must repeatedly\n * count down in this way, instead use a {@link CyclicBarrier}.)\n *\n * <pre> {@code\n * class Driver2 { // ...\n *   void main() throws InterruptedException {\n *     CountDownLatch doneSignal = new CountDownLatch(N);\n *     Executor e = ...;\n *\n *     for (int i = 0; i < N; ++i) // create and start threads\n *       e.execute(new WorkerRunnable(doneSignal, i));\n *\n *     doneSignal.await();           // wait for all to finish\n *   }\n * }\n *\n * class WorkerRunnable implements Runnable {\n *   private final CountDownLatch doneSignal;\n *   private final int i;\n *   WorkerRunnable(CountDownLatch doneSignal, int i) {\n *     this.doneSignal = doneSignal;\n *     this.i = i;\n *   }\n *   public void run() {\n *     doWork();\n *     doneSignal.countDown();\n *   }\n *\n *   void doWork() { ... }\n * }}</pre>\n *\n * <p>Memory consistency effects: Until the count reaches\n * zero, actions in a thread prior to calling\n * {@code countDown()}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions following a successful return from a corresponding\n * {@code await()} in another thread.\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.CyclicBarrier", "#await", "#countDown" ],
  "variables" : [ {
    "name" : "sync",
    "type" : "Sync",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void await() throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Causes the current thread to wait until the latch has counted down to\n     * zero, unless the thread is {@linkplain Thread#interrupt interrupted}.\n     *\n     * <p>If the current count is zero then this method returns immediately.\n     *\n     * <p>If the current count is greater than zero then the current\n     * thread becomes disabled for thread scheduling purposes and lies\n     * dormant until one of two things happen:\n     * <ul>\n     * <li>The count reaches zero due to invocations of the\n     * {@link #countDown} method; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread.\n     * </ul>\n     *\n     * <p>If the current thread:\n     * <ul>\n     * <li>has its interrupted status set on entry to this method; or\n     * <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * @throws InterruptedException if the current thread is interrupted\n     *         while waiting\n     ",
    "links" : [ "#countDown", "InterruptedException" ]
  }, {
    "name" : "public boolean await(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Causes the current thread to wait until the latch has counted down to\n     * zero, unless the thread is {@linkplain Thread#interrupt interrupted},\n     * or the specified waiting time elapses.\n     *\n     * <p>If the current count is zero then this method returns immediately\n     * with the value {@code true}.\n     *\n     * <p>If the current count is greater than zero then the current\n     * thread becomes disabled for thread scheduling purposes and lies\n     * dormant until one of three things happen:\n     * <ul>\n     * <li>The count reaches zero due to invocations of the\n     * {@link #countDown} method; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread; or\n     * <li>The specified waiting time elapses.\n     * </ul>\n     *\n     * <p>If the count reaches zero then the method returns with the\n     * value {@code true}.\n     *\n     * <p>If the current thread:\n     * <ul>\n     * <li>has its interrupted status set on entry to this method; or\n     * <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <p>If the specified waiting time elapses then the value {@code false}\n     * is returned.  If the time is less than or equal to zero, the method\n     * will not wait at all.\n     *\n     * @param timeout the maximum time to wait\n     * @param unit the time unit of the {@code timeout} argument\n     * @return {@code true} if the count reached zero and {@code false}\n     *         if the waiting time elapsed before the count reached zero\n     * @throws InterruptedException if the current thread is interrupted\n     *         while waiting\n     ",
    "links" : [ "#countDown", "InterruptedException" ]
  }, {
    "name" : "public void countDown()",
    "returnType" : "void",
    "comment" : "\n     * Decrements the count of the latch, releasing all waiting threads if\n     * the count reaches zero.\n     *\n     * <p>If the current count is greater than zero then it is decremented.\n     * If the new count is zero then all waiting threads are re-enabled for\n     * thread scheduling purposes.\n     *\n     * <p>If the current count equals zero then nothing happens.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCount()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current count.\n     *\n     * <p>This method is typically used for debugging and testing purposes.\n     *\n     * @return the current count\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string identifying this latch, as well as its state.\n     * The state, in brackets, includes the String {@code \"Count =\"}\n     * followed by the current count.\n     *\n     * @return a string identifying this latch, as well as its state\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void await() throws InterruptedException", "public boolean await(long timeout, TimeUnit unit) throws InterruptedException", "public void countDown()", "public long getCount()", "public String toString()" ],
  "variableNames" : [ "sync" ]
}