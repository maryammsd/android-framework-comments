{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Trie2_16.java",
  "packageName" : "android.icu.impl",
  "className" : "Trie2_16",
  "comment" : "\n * @author aheninger\n * \n * A read-only Trie2, holding 16 bit data values.\n * \n * A Trie2 is a highly optimized data structure for mapping from Unicode\n * code points (values ranging from 0 to 0x10ffff) to a 16 or 32 bit value.\n *\n * See class Trie2 for descriptions of the API for accessing the contents of a trie.\n * \n * The fundamental data access methods are declared final in this class, with\n * the intent that applications might gain a little extra performance, when compared\n * with calling the same methods via the abstract UTrie2 base class.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Trie2_16 createFromSerialized(ByteBuffer bytes) throws IOException",
    "returnType" : "Trie2_16",
    "comment" : "\n     * Create a Trie2 from its serialized form.  Inverse of utrie2_serialize().\n     * The serialized format is identical between ICU4C and ICU4J, so this function\n     * will work with serialized Trie2s from either.\n     *\n     * The serialized Trie2 in the bytes may be in either little or big endian byte order.\n     * This allows using serialized Tries from ICU4C without needing to consider the\n     * byte order of the system that created them.\n     *\n     * @param bytes a byte buffer to the serialized form of a UTrie2.\n     * @return An unserialized Trie2_16, ready for use.\n     * @throws IllegalArgumentException if the buffer does not contain a serialized Trie2.\n     * @throws IOException if a read error occurs in the buffer.\n     * @throws ClassCastException if the bytes contain a serialized Trie2_32\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int get(int codePoint)",
    "returnType" : "int",
    "comment" : "\n     * Get the value for a code point as stored in the Trie2.\n     *\n     * @param codePoint the code point\n     * @return the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFromU16SingleLead(char codeUnit)",
    "returnType" : "int",
    "comment" : "\n     * Get a Trie2 value for a UTF-16 code unit.\n     * \n     * This function returns the same value as get() if the input \n     * character is outside of the lead surrogate range\n     * \n     * There are two values stored in a Trie2 for inputs in the lead\n     * surrogate range.  This function returns the alternate value,\n     * while Trie2.get() returns the main value.\n     * \n     * @param codeUnit a 16 bit code unit or lead surrogate value.\n     * @return the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int serialize(OutputStream os) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Serialize a Trie2_16 onto an OutputStream.\n     * \n     * A Trie2 can be serialized multiple times.\n     * The serialized data is compatible with ICU4C UTrie2 serialization.\n     * Trie2 serialization is unrelated to Java object serialization.\n     *  \n     * @param os the stream to which the serialized Trie2 data will be written.\n     * @return the number of bytes written.\n     * @throw IOException on an error writing to the OutputStream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSerializedLength()",
    "returnType" : "int",
    "comment" : "\n     * @return the number of bytes of the serialized trie\n     ",
    "links" : [ ]
  }, {
    "name" : " int rangeEnd(int startingCP, int limit, int value)",
    "returnType" : "int",
    "comment" : "\n     * Given a starting code point, find the last in a range of code points,\n     * all with the same value.\n     * \n     * This function is part of the implementation of iterating over the\n     * Trie2's contents.\n     * @param startingCP The code point at which to begin looking.\n     * @return The last code point with the same value as the starting code point.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Trie2_16 createFromSerialized(ByteBuffer bytes) throws IOException", "public final int get(int codePoint)", "public int getFromU16SingleLead(char codeUnit)", "public int serialize(OutputStream os) throws IOException", "public int getSerializedLength()", " int rangeEnd(int startingCP, int limit, int value)" ],
  "variableNames" : [ ]
}