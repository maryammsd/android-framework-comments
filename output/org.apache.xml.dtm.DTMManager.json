{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/DTMManager.java",
  "packageName" : "org.apache.xml.dtm",
  "className" : "DTMManager",
  "comment" : "\n * A DTMManager instance can be used to create DTM and\n * DTMIterator objects, and manage the DTM objects in the system.\n *\n * <p>The system property that determines which Factory implementation\n * to create is named \"org.apache.xml.utils.DTMFactory\". This\n * property names a concrete subclass of the DTMFactory abstract\n *  class. If the property is not defined, a platform default is be used.</p>\n *\n * <p>An instance of this class <emph>must</emph> be safe to use across\n * thread instances.  It is expected that a client will create a single instance\n * of a DTMManager to use across multiple threads.  This will allow sharing\n * of DTMs across multiple processes.</p>\n *\n * <p>Note: this class is incomplete right now.  It will be pretty much\n * modeled after javax.xml.transform.TransformerFactory in terms of its\n * factory support.</p>\n *\n * <p>State: In progress!!</p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "defaultPropName",
    "type" : "String",
    "comment" : " The default property name to load the manager. ",
    "links" : [ ]
  }, {
    "name" : "defaultClassName",
    "type" : "String",
    "comment" : " The default class name to use as the manager. ",
    "links" : [ ]
  }, {
    "name" : "m_xsf",
    "type" : "XMLStringFactory",
    "comment" : "\n   * Factory for creating XMLString objects.\n   *  %TBD% Make this set by the caller.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_incremental",
    "type" : "boolean",
    "comment" : " Flag indicating whether an incremental transform is desired ",
    "links" : [ ]
  }, {
    "name" : "m_source_location",
    "type" : "boolean",
    "comment" : "\n   * Flag set by FEATURE_SOURCE_LOCATION.\n   * This feature specifies whether the transformation phase should\n   * keep track of line and column numbers for the input source\n   * document. \n   ",
    "links" : [ ]
  }, {
    "name" : "debug",
    "type" : "boolean",
    "comment" : "\n   * Temp debug code - this will be removed after we test everything\n   ",
    "links" : [ ]
  }, {
    "name" : "IDENT_DTM_NODE_BITS",
    "type" : "int",
    "comment" : " This value, set at compile time, controls how many bits of the\n   * DTM node identifier numbers are used to identify a node within a\n   * document, and thus sets the maximum number of nodes per\n   * document. The remaining bits are used to identify the DTM\n   * document which contains this node.\n   *\n   * If you change IDENT_DTM_NODE_BITS, be sure to rebuild _ALL_ the\n   * files which use it... including the IDKey testcases.\n   *\n   * (FuncGenerateKey currently uses the node identifier directly and\n   * thus is affected when this changes. The IDKEY results will still be\n   * _correct_ (presuming no other breakage), but simple equality\n   * comparison against the previous \"golden\" files will probably\n   * complain.)\n   * ",
    "links" : [ ]
  }, {
    "name" : "IDENT_NODE_DEFAULT",
    "type" : "int",
    "comment" : " When this bitmask is ANDed with a DTM node handle number, the result\n   * is the low bits of the node's index number within that DTM. To obtain\n   * the high bits, add the DTM ID portion's offset as assigned in the DTM \n   * Manager.\n   ",
    "links" : [ ]
  }, {
    "name" : "IDENT_DTM_DEFAULT",
    "type" : "int",
    "comment" : " When this bitmask is ANDed with a DTM node handle number, the result\n   * is the DTM's document identity number.\n   ",
    "links" : [ ]
  }, {
    "name" : "IDENT_MAX_DTMS",
    "type" : "int",
    "comment" : " This is the maximum number of DTMs available.  The highest DTM is\n    * one less than this.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public XMLStringFactory getXMLStringFactory()",
    "returnType" : "XMLStringFactory",
    "comment" : "\n   * Get the XMLStringFactory used for the DTMs.\n   *\n   *\n   * @return a valid XMLStringFactory object, or null if it hasn't been set yet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setXMLStringFactory(XMLStringFactory xsf)",
    "returnType" : "void",
    "comment" : "\n   * Set the XMLStringFactory used for the DTMs.\n   *\n   *\n   * @param xsf a valid XMLStringFactory object, should not be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static DTMManager newInstance(XMLStringFactory xsf) throws DTMConfigurationException",
    "returnType" : "DTMManager",
    "comment" : "\n   * Obtain a new instance of a <code>DTMManager</code>.\n   * This static method creates a new factory instance\n   * This method uses the following ordered lookup procedure to determine\n   * the <code>DTMManager</code> implementation class to\n   * load:\n   * <ul>\n   * <li>\n   * Use the <code>org.apache.xml.dtm.DTMManager</code> system\n   * property.\n   * </li>\n   * <li>\n   * Use the JAVA_HOME(the parent directory where jdk is\n   * installed)/lib/xalan.properties for a property file that contains the\n   * name of the implementation class keyed on the same value as the\n   * system property defined above.\n   * </li>\n   * <li>\n   * Use the Services API (as detailed in the JAR specification), if\n   * available, to determine the classname. The Services API will look\n   * for a classname in the file\n   * <code>META-INF/services/org.apache.xml.dtm.DTMManager</code>\n   * in jars available to the runtime.\n   * </li>\n   * <li>\n   * Use the default <code>DTMManager</code> classname, which is\n   * <code>org.apache.xml.dtm.ref.DTMManagerDefault</code>.\n   * </li>\n   * </ul>\n   *\n   * Once an application has obtained a reference to a <code>\n   * DTMManager</code> it can use the factory to configure\n   * and obtain parser instances.\n   *\n   * @return new DTMManager instance, never null.\n   *\n   * @throws DTMConfigurationException\n   * if the implementation is not available or cannot be instantiated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTM getDTM(javax.xml.transform.Source source, boolean unique, DTMWSFilter whiteSpaceFilter, boolean incremental, boolean doIndexing)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM, loaded with the content from the\n   * specified source.  If the unique flag is true, a new instance will\n   * always be returned.  Otherwise it is up to the DTMManager to return a\n   * new instance or an instance that it already created and may be being used\n   * by someone else.\n   * \n   * (More parameters may eventually need to be added for error handling\n   * and entity resolution, and to better control selection of implementations.)\n   *\n   * @param source the specification of the source object, which may be null,\n   *               in which case it is assumed that node construction will take\n   *               by some other means.\n   * @param unique true if the returned DTM must be unique, probably because it\n   * is going to be mutated.\n   * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may\n   *                         be null.\n   * @param incremental true if the DTM should be built incrementally, if\n   *                    possible.\n   * @param doIndexing true if the caller considers it worth it to use \n   *                   indexing schemes.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * Get the instance of DTM that \"owns\" a node handle.\n   *\n   * @param nodeHandle the nodeHandle.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDTMHandleFromNode(org.w3c.dom.Node node)",
    "returnType" : "int",
    "comment" : "\n   * Given a W3C DOM node, try and return a DTM handle.\n   * Note: calling this may be non-optimal.\n   *\n   * @param node Non-null reference to a DOM node.\n   *\n   * @return a valid DTM handle.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTM createDocumentFragment()",
    "returnType" : "DTM",
    "comment" : "\n   * Creates a DTM representing an empty <code>DocumentFragment</code> object.\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean release(DTM dtm, boolean shouldHardDelete)",
    "returnType" : "boolean",
    "comment" : "\n   * Release a DTM either to a lru pool, or completely remove reference.\n   * DTMs without system IDs are always hard deleted.\n   * State: experimental.\n   *\n   * @param dtm The DTM to be released.\n   * @param shouldHardDelete True if the DTM should be removed no matter what.\n   * @return true if the DTM was removed, false if it was put back in a lru pool.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTMIterator createDTMIterator(Object xpathCompiler, int pos)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> based on an XPath\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or\n   * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n   *\n   * @param xpathCompiler ??? Somehow we need to pass in a subpart of the\n   * expression.  I hate to do this with strings, since the larger expression\n   * has already been parsed.\n   *\n   * @param pos The position in the expression.\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTMIterator createDTMIterator(String xpathString, PrefixResolver presolver)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> based on an XPath\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or\n   * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n   *\n   * @param xpathString Must be a valid string expressing a\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or\n   * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n   *\n   * @param presolver An object that can resolve prefixes to namespace URLs.\n   *\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTMIterator createDTMIterator(int whatToShow, DTMFilter filter, boolean entityReferenceExpansion)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> based only on a whatToShow\n   * and a DTMFilter.  The traversal semantics are defined as the\n   * descendant access.\n   * <p>\n   * Note that DTMIterators may not be an exact match to DOM\n   * NodeIterators. They are initialized and used in much the same way\n   * as a NodeIterator, but their response to document mutation is not\n   * currently defined.\n   *\n   * @param whatToShow This flag specifies which node types may appear in\n   *   the logical view of the tree presented by the iterator. See the\n   *   description of <code>NodeFilter</code> for the set of possible\n   *   <code>SHOW_</code> values.These flags can be combined using\n   *   <code>OR</code>.\n   * @param filter The <code>NodeFilter</code> to be used with this\n   *   <code>DTMFilter</code>, or <code>null</code> to indicate no filter.\n   * @param entityReferenceExpansion The value of this flag determines\n   *   whether entity reference nodes are expanded.\n   *\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract DTMIterator createDTMIterator(int node)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> that holds exactly one node.\n   *\n   * @param node The node handle that the DTMIterator will iterate to.\n   *\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIncremental()",
    "returnType" : "boolean",
    "comment" : "\n   * Get a flag indicating whether an incremental transform is desired \n   * @return incremental boolean.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIncremental(boolean incremental)",
    "returnType" : "void",
    "comment" : "\n   * Set a flag indicating whether an incremental transform is desired\n   * This flag should have the same value as the FEATURE_INCREMENTAL feature\n   * which is set by the TransformerFactory.setAttribut() method before a\n   * DTMManager is created\n   * @param incremental boolean to use to set m_incremental.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSource_location()",
    "returnType" : "boolean",
    "comment" : "\n   * Get a flag indicating whether the transformation phase should\n   * keep track of line and column numbers for the input source\n   * document.\n   * @return source location boolean\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSource_location(boolean sourceLocation)",
    "returnType" : "void",
    "comment" : "\n   * Set a flag indicating whether the transformation phase should\n   * keep track of line and column numbers for the input source\n   * document.\n   * This flag should have the same value as the FEATURE_SOURCE_LOCATION feature\n   * which is set by the TransformerFactory.setAttribut() method before a\n   * DTMManager is created\n   * @param sourceLocation boolean to use to set m_source_location\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDTMIdentity(DTM dtm)",
    "returnType" : "int",
    "comment" : "\n   * %TBD% Doc\n   *\n   * NEEDSDOC @param dtm\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getDTMIdentityMask()",
    "returnType" : "int",
    "comment" : "\n   * %TBD% Doc\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNodeIdentityMask()",
    "returnType" : "int",
    "comment" : "\n   * %TBD% Doc\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public XMLStringFactory getXMLStringFactory()", "public void setXMLStringFactory(XMLStringFactory xsf)", "public static DTMManager newInstance(XMLStringFactory xsf) throws DTMConfigurationException", "public abstract DTM getDTM(javax.xml.transform.Source source, boolean unique, DTMWSFilter whiteSpaceFilter, boolean incremental, boolean doIndexing)", "public abstract DTM getDTM(int nodeHandle)", "public abstract int getDTMHandleFromNode(org.w3c.dom.Node node)", "public abstract DTM createDocumentFragment()", "public abstract boolean release(DTM dtm, boolean shouldHardDelete)", "public abstract DTMIterator createDTMIterator(Object xpathCompiler, int pos)", "public abstract DTMIterator createDTMIterator(String xpathString, PrefixResolver presolver)", "public abstract DTMIterator createDTMIterator(int whatToShow, DTMFilter filter, boolean entityReferenceExpansion)", "public abstract DTMIterator createDTMIterator(int node)", "public boolean getIncremental()", "public void setIncremental(boolean incremental)", "public boolean getSource_location()", "public void setSource_location(boolean sourceLocation)", "public abstract int getDTMIdentity(DTM dtm)", "public int getDTMIdentityMask()", "public int getNodeIdentityMask()" ],
  "variableNames" : [ "defaultPropName", "defaultClassName", "m_xsf", "m_incremental", "m_source_location", "debug", "IDENT_DTM_NODE_BITS", "IDENT_NODE_DEFAULT", "IDENT_DTM_DEFAULT", "IDENT_MAX_DTMS" ]
}