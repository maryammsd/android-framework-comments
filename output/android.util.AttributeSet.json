{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/AttributeSet.java",
  "packageName" : "android.util",
  "className" : "AttributeSet",
  "comment" : "\n * A collection of attributes, as found associated with a tag in an XML\n * document.  Often you will not want to use this interface directly, instead\n * passing it to {@link android.content.res.Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)\n * Resources.Theme.obtainStyledAttributes()}\n * which will take care of parsing the attributes for you.  In particular,\n * the Resources API will convert resource references (attribute values such as\n * \"@string/my_label\" in the original XML) to the desired type\n * for you; if you use AttributeSet directly then you will need to manually\n * check for resource references\n * (with {@link #getAttributeResourceValue(int, int)}) and do the resource\n * lookup yourself if needed.  Direct use of AttributeSet also prevents the\n * application of themes and styles when retrieving attribute values.\n * \n * <p>This interface provides an efficient mechanism for retrieving\n * data from compiled XML files, which can be retrieved for a particular\n * XmlPullParser through {@link Xml#asAttributeSet\n * Xml.asAttributeSet()}.  Normally this will return an implementation\n * of the interface that works on top of a generic XmlPullParser, however it\n * is more useful in conjunction with compiled XML resources:\n * \n * <pre>\n * XmlPullParser parser = resources.getXml(myResource);\n * AttributeSet attributes = Xml.asAttributeSet(parser);</pre>\n * \n * <p>The implementation returned here, unlike using\n * the implementation on top of a generic XmlPullParser,\n * is highly optimized by retrieving pre-computed information that was\n * generated by aapt when compiling your resources.  For example,\n * the {@link #getAttributeFloatValue(int, float)} method returns a floating\n * point number previous stored in the compiled resource instead of parsing\n * at runtime the string originally in the XML file.\n * \n * <p>This interface also provides additional information contained in the\n * compiled XML resource that is not available in a normal XML file, such\n * as {@link #getAttributeNameResource(int)} which returns the resource\n * identifier associated with a particular XML attribute name.\n *\n * @see XmlPullParser\n ",
  "links" : [ "#getAttributeResourceValue(int", "android.content.res.Resources.Theme#obtainStyledAttributes(AttributeSet", "#getAttributeFloatValue(int", "android.util.Xml#asAttributeSetXml.asAttributeSet()", "#getAttributeNameResource(int)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int getAttributeCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of attributes available in the set.\n     *\n     * <p>See also {@link XmlPullParser#getAttributeCount XmlPullParser.getAttributeCount()},\n     * which this method corresponds to when parsing a compiled XML file.</p>\n     *\n     * @return A positive integer, or 0 if the set is empty.\n     ",
    "links" : [ "org.xmlpull.v1.XmlPullParser#getAttributeCount" ]
  }, {
    "name" : " String getAttributeNamespace(int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns the namespace of the specified attribute.\n     *\n     * <p>See also {@link XmlPullParser#getAttributeNamespace XmlPullParser.getAttributeNamespace()},\n     * which this method corresponds to when parsing a compiled XML file.</p>\n     *\n     * @param index Index of the desired attribute, 0...count-1.\n     *\n     * @return A String containing the namespace of the attribute, or null if th\n     *         attribute cannot be found.\n     ",
    "links" : [ "org.xmlpull.v1.XmlPullParser#getAttributeNamespace" ]
  }, {
    "name" : "public String getAttributeName(int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the specified attribute.\n     *\n     * <p>See also {@link XmlPullParser#getAttributeName XmlPullParser.getAttributeName()},\n     * which this method corresponds to when parsing a compiled XML file.</p>\n     *\n     * @param index Index of the desired attribute, 0...count-1.\n     * \n     * @return A String containing the name of the attribute, or null if the\n     *         attribute cannot be found.\n     ",
    "links" : [ "org.xmlpull.v1.XmlPullParser#getAttributeName" ]
  }, {
    "name" : "public String getAttributeValue(int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the specified attribute as a string representation.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * \n     * @return A String containing the value of the attribute, or null if the\n     *         attribute cannot be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributeValue(String namespace, String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the specified attribute as a string representation.\n     * The lookup is performed using the attribute name.\n     * \n     * @param namespace The namespace of the attribute to get the value from.\n     * @param name The name of the attribute to get the value from.\n     * \n     * @return A String containing the value of the attribute, or null if the\n     *         attribute cannot be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPositionDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns a description of the current position of the attribute set.\n     * For instance, if the attribute set is loaded from an XML document,\n     * the position description could indicate the current line number.\n     * \n     * @return A string representation of the current position in the set,\n     *         may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeNameResource(int index)",
    "returnType" : "int",
    "comment" : "\n     * Return the resource ID associated with the given attribute name.  This\n     * will be the identifier for an attribute resource, which can be used by\n     * styles.  Returns 0 if there is no resource associated with this\n     * attribute.\n     * \n     * <p>Note that this is different than {@link #getAttributeResourceValue}\n     * in that it returns a resource identifier for the attribute name; the\n     * other method returns this attribute's value as a resource identifier.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * \n     * @return The resource identifier, 0 if none.\n     ",
    "links" : [ "#getAttributeResourceValue" ]
  }, {
    "name" : "public int getAttributeListValue(String namespace, String attribute, String[] options, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the value of 'attribute' in the list 'options'.\n     *\n     * @param namespace Namespace of attribute to retrieve. \n     * @param attribute Name of attribute to retrieve.\n     * @param options List of strings whose values we are checking against.\n     * @param defaultValue Value returned if attribute doesn't exist or no\n     *                     match is found.\n     * \n     * @return Index in to 'options' or defaultValue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAttributeBooleanValue(String namespace, String attribute, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Return the boolean value of 'attribute'.\n     * \n     * @param namespace Namespace of attribute to retrieve.\n     * @param attribute The attribute to retrieve.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeResourceValue(String namespace, String attribute, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the value of 'attribute' as a resource identifier.\n     * \n     * <p>Note that this is different than {@link #getAttributeNameResource}\n     * in that it returns the value contained in this attribute as a\n     * resource identifier (i.e., a value originally of the form\n     * \"@package:type/resource\"); the other method returns a resource\n     * identifier that identifies the name of the attribute.\n     * \n     * @param namespace Namespace of attribute to retrieve.\n     * @param attribute The attribute to retrieve.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ "#getAttributeNameResource" ]
  }, {
    "name" : "public int getAttributeIntValue(String namespace, String attribute, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the integer value of 'attribute'.\n     * \n     * @param namespace Namespace of attribute to retrieve.\n     * @param attribute The attribute to retrieve.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeUnsignedIntValue(String namespace, String attribute, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the boolean value of 'attribute' that is formatted as an\n     * unsigned value.  In particular, the formats 0xn...n and #n...n are\n     * handled.\n     * \n     * @param namespace Namespace of attribute to retrieve.\n     * @param attribute The attribute to retrieve.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAttributeFloatValue(String namespace, String attribute, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Return the float value of 'attribute'.\n     * \n     * @param namespace Namespace of attribute to retrieve.\n     * @param attribute The attribute to retrieve.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeListValue(int index, String[] options, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the value of attribute at 'index' in the list \n     * 'options'. \n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * @param options List of strings whose values we are checking against.\n     * @param defaultValue Value returned if attribute doesn't exist or no\n     *                     match is found.\n     * \n     * @return Index in to 'options' or defaultValue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAttributeBooleanValue(int index, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Return the boolean value of attribute at 'index'.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeResourceValue(int index, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the value of attribute at 'index' as a resource identifier.\n     * \n     * <p>Note that this is different than {@link #getAttributeNameResource}\n     * in that it returns the value contained in this attribute as a\n     * resource identifier (i.e., a value originally of the form\n     * \"@package:type/resource\"); the other method returns a resource\n     * identifier that identifies the name of the attribute.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ "#getAttributeNameResource" ]
  }, {
    "name" : "public int getAttributeIntValue(int index, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the integer value of attribute at 'index'.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeUnsignedIntValue(int index, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the integer value of attribute at 'index' that is formatted as an\n     * unsigned value.  In particular, the formats 0xn...n and #n...n are\n     * handled.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAttributeFloatValue(int index, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Return the float value of attribute at 'index'.\n     * \n     * @param index Index of the desired attribute, 0...count-1.\n     * @param defaultValue What to return if the attribute isn't found.\n     * \n     * @return Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getIdAttribute()",
    "returnType" : "String",
    "comment" : "\n     * Return the value of the \"id\" attribute or null if there is not one.\n     * Equivalent to getAttributeValue(null, \"id\").\n     * \n     * @return The id attribute's value or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getClassAttribute()",
    "returnType" : "String",
    "comment" : "\n     * Return the value of the \"class\" attribute or null if there is not one.\n     * Equivalent to getAttributeValue(null, \"class\").\n     * \n     * @return The class attribute's value or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIdAttributeResourceValue(int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Return the integer value of the \"id\" attribute or defaultValue if there\n     * is none.\n     * Equivalent to getAttributeResourceValue(null, \"id\", defaultValue);\n     *\n     * @param defaultValue What to return if the \"id\" attribute isn't found.\n     * @return int Resulting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStyleAttribute()",
    "returnType" : "int",
    "comment" : "\n\n     * Return the value of the \"style\" attribute or 0 if there is not one.\n     * Equivalent to getAttributeResourceValue(null, \"style\").\n     * \n     * @return The style attribute's resource identifier or 0.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getAttributeCount()", " String getAttributeNamespace(int index)", "public String getAttributeName(int index)", "public String getAttributeValue(int index)", "public String getAttributeValue(String namespace, String name)", "public String getPositionDescription()", "public int getAttributeNameResource(int index)", "public int getAttributeListValue(String namespace, String attribute, String[] options, int defaultValue)", "public boolean getAttributeBooleanValue(String namespace, String attribute, boolean defaultValue)", "public int getAttributeResourceValue(String namespace, String attribute, int defaultValue)", "public int getAttributeIntValue(String namespace, String attribute, int defaultValue)", "public int getAttributeUnsignedIntValue(String namespace, String attribute, int defaultValue)", "public float getAttributeFloatValue(String namespace, String attribute, float defaultValue)", "public int getAttributeListValue(int index, String[] options, int defaultValue)", "public boolean getAttributeBooleanValue(int index, boolean defaultValue)", "public int getAttributeResourceValue(int index, int defaultValue)", "public int getAttributeIntValue(int index, int defaultValue)", "public int getAttributeUnsignedIntValue(int index, int defaultValue)", "public float getAttributeFloatValue(int index, float defaultValue)", "public String getIdAttribute()", "public String getClassAttribute()", "public int getIdAttributeResourceValue(int defaultValue)", "public int getStyleAttribute()" ],
  "variableNames" : [ ]
}