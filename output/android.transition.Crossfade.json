{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/transition/Crossfade.java",
  "packageName" : "android.transition",
  "className" : "Crossfade",
  "comment" : "\n * This transition captures bitmap representations of target views before and\n * after the scene change and fades between them.\n *\n * <p>Note: This transition is not compatible with {@link TextureView}\n * or {@link SurfaceView}.</p>\n *\n * @hide\n ",
  "links" : [ "android.view.SurfaceView", "android.view.TextureView" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_BITMAP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_DRAWABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_BOUNDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRectEvaluator",
    "type" : "RectEvaluator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeBehavior",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResizeBehavior",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FADE_BEHAVIOR_CROSSFADE",
    "type" : "int",
    "comment" : "\n     * Flag specifying that the fading animation should cross-fade\n     * between the old and new representation of all affected target\n     * views. This means that the old representation will fade out\n     * while the new one fades in. This effect may work well on views\n     * without solid backgrounds, such as TextViews.\n     *\n     * @see #setFadeBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FADE_BEHAVIOR_REVEAL",
    "type" : "int",
    "comment" : "\n     * Flag specifying that the fading animation should reveal the\n     * new representation of all affected target views. This means\n     * that the old representation will fade out, gradually\n     * revealing the new representation, which remains opaque\n     * the whole time. This effect may work well on views\n     * with solid backgrounds, such as ImageViews.\n     *\n     * @see #setFadeBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FADE_BEHAVIOR_OUT_IN",
    "type" : "int",
    "comment" : "\n     * Flag specifying that the fading animation should first fade\n     * out the original representation completely and then fade in the\n     * new one. This effect may be more suitable than the other\n     * fade behaviors for views with.\n     *\n     * @see #setFadeBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_BEHAVIOR_NONE",
    "type" : "int",
    "comment" : "\n     * Flag specifying that the transition should not animate any\n     * changes in size between the old and new target views.\n     * This means that no scaling will take place as a result of\n     * this transition\n     *\n     * @see #setResizeBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_BEHAVIOR_SCALE",
    "type" : "int",
    "comment" : "\n     * Flag specifying that the transition should animate any\n     * changes in size between the old and new target views.\n     * This means that the animation will scale the start/end\n     * representations of affected views from the starting size\n     * to the ending size over the course of the animation.\n     * This effect may work well on images, but is not recommended\n     * for text.\n     *\n     * @see #setResizeBehavior(int)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Crossfade setFadeBehavior(int fadeBehavior)",
    "returnType" : "Crossfade",
    "comment" : "\n     * Sets the type of fading animation that will be run, one of\n     * {@link #FADE_BEHAVIOR_CROSSFADE} and {@link #FADE_BEHAVIOR_REVEAL}.\n     *\n     * @param fadeBehavior The type of fading animation to use when this\n     * transition is run.\n     ",
    "links" : [ "#FADE_BEHAVIOR_REVEAL", "#FADE_BEHAVIOR_CROSSFADE" ]
  }, {
    "name" : "public int getFadeBehavior()",
    "returnType" : "int",
    "comment" : "\n     * Returns the fading behavior of the animation.\n     *\n     * @return This crossfade object.\n     * @see #setFadeBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Crossfade setResizeBehavior(int resizeBehavior)",
    "returnType" : "Crossfade",
    "comment" : "\n     * Sets the type of resizing behavior that will be used during the\n     * transition animation, one of {@link #RESIZE_BEHAVIOR_NONE} and\n     * {@link #RESIZE_BEHAVIOR_SCALE}.\n     *\n     * @param resizeBehavior The type of resizing behavior to use when this\n     * transition is run.\n     ",
    "links" : [ "#RESIZE_BEHAVIOR_SCALE", "#RESIZE_BEHAVIOR_NONE" ]
  }, {
    "name" : "public int getResizeBehavior()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resizing behavior of the animation.\n     *\n     * @return This crossfade object.\n     * @see #setResizeBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable TransitionValues startValues, @Nullable TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void captureValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureStartValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureEndValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Crossfade setFadeBehavior(int fadeBehavior)", "public int getFadeBehavior()", "public Crossfade setResizeBehavior(int resizeBehavior)", "public int getResizeBehavior()", "public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable TransitionValues startValues, @Nullable TransitionValues endValues)", "private void captureValues(TransitionValues transitionValues)", "public void captureStartValues(TransitionValues transitionValues)", "public void captureEndValues(TransitionValues transitionValues)" ],
  "variableNames" : [ "LOG_TAG", "PROPNAME_BITMAP", "PROPNAME_DRAWABLE", "PROPNAME_BOUNDS", "sRectEvaluator", "mFadeBehavior", "mResizeBehavior", "FADE_BEHAVIOR_CROSSFADE", "FADE_BEHAVIOR_REVEAL", "FADE_BEHAVIOR_OUT_IN", "RESIZE_BEHAVIOR_NONE", "RESIZE_BEHAVIOR_SCALE" ]
}