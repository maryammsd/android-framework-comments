{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accounts/AccountManagerFuture.java",
  "packageName" : "android.accounts",
  "className" : "AccountManagerFuture",
  "comment" : "\n * A <tt>AccountManagerFuture</tt> represents the result of an asynchronous\n * {@link AccountManager} call.  Methods are provided to check if the computation is\n * complete, to wait for its completion, and to retrieve the result of\n * the computation.  The result can only be retrieved using method\n * <tt>get</tt> when the computation has completed, blocking if\n * necessary until it is ready.  Cancellation is performed by the\n * <tt>cancel</tt> method.  Additional methods are provided to\n * determine if the task completed normally or was cancelled. Once a\n * computation has completed, the computation cannot be cancelled.\n * If you would like to use a <tt>Future</tt> for the sake\n * of cancellability but not provide a usable result, you can\n * declare types of the form <tt>Future&lt;?&gt;</tt> and\n * return <tt>null</tt> as a result of the underlying task.\n ",
  "links" : [ "android.accounts.AccountManager" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean cancel(boolean mayInterruptIfRunning)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to cancel execution of this task.  This attempt will\n     * fail if the task has already completed, has already been cancelled,\n     * or could not be cancelled for some other reason. If successful,\n     * and this task has not started when <tt>cancel</tt> is called,\n     * this task should never run.  If the task has already started,\n     * then the <tt>mayInterruptIfRunning</tt> parameter determines\n     * whether the thread executing this task should be interrupted in\n     * an attempt to stop the task.\n     *\n     * <p>After this method returns, subsequent calls to {@link #isDone} will\n     * always return <tt>true</tt>.  Subsequent calls to {@link #isCancelled}\n     * will always return <tt>true</tt> if this method returned <tt>true</tt>.\n     *\n     * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this\n     * task should be interrupted; otherwise, in-progress tasks are allowed\n     * to complete\n     * @return <tt>false</tt> if the task could not be cancelled,\n     * typically because it has already completed normally;\n     * <tt>true</tt> otherwise\n     ",
    "links" : [ "#isDone", "#isCancelled" ]
  }, {
    "name" : " boolean isCancelled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <tt>true</tt> if this task was cancelled before it completed\n     * normally.\n     *\n     * @return <tt>true</tt> if this task was cancelled before it completed\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isDone()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <tt>true</tt> if this task completed.\n     *\n     * Completion may be due to normal termination, an exception, or\n     * cancellation -- in all of these cases, this method will return\n     * <tt>true</tt>.\n     *\n     * @return <tt>true</tt> if this task completed\n     ",
    "links" : [ ]
  }, {
    "name" : " V getResult() throws OperationCanceledException, IOException, AuthenticatorException",
    "returnType" : "V",
    "comment" : "\n     * Accessor for the future result the {@link AccountManagerFuture} represents. This\n     * call will block until the result is available. In order to check if the result is\n     * available without blocking, one may call {@link #isDone()} and  {@link #isCancelled()}.\n     * If the request that generated this result fails or is canceled then an exception\n     * will be thrown rather than the call returning normally.\n     * @return the actual result\n     * @throws android.accounts.OperationCanceledException if the request was canceled for any\n     * reason (including if it is forbidden\n     * by policy to modify an account (of that type))\n     * @throws android.accounts.AuthenticatorException if there was an error communicating with\n     * the authenticator or if the authenticator returned an invalid response\n     * @throws java.io.IOException if the authenticator returned an error response that indicates\n     * that it encountered an IOException while communicating with the authentication server\n     ",
    "links" : [ "#isDone()", "android.accounts.AccountManagerFuture", "#isCancelled()" ]
  }, {
    "name" : " V getResult(long timeout, TimeUnit unit) throws OperationCanceledException, IOException, AuthenticatorException",
    "returnType" : "V",
    "comment" : "\n     * Accessor for the future result the {@link AccountManagerFuture} represents. This\n     * call will block until the result is available. In order to check if the result is\n     * available without blocking, one may call {@link #isDone()} and  {@link #isCancelled()}.\n     * If the request that generated this result fails or is canceled then an exception\n     * will be thrown rather than the call returning normally. If a timeout is specified then\n     * the request will automatically be canceled if it does not complete in that amount of time.\n     * @param timeout the maximum time to wait\n     * @param unit the time unit of the timeout argument. This must not be null.\n     * @return the actual result\n     * @throws android.accounts.OperationCanceledException if the request was canceled for any\n     * reason\n     * @throws android.accounts.AuthenticatorException if there was an error communicating with\n     * the authenticator or if the authenticator returned an invalid response\n     * @throws java.io.IOException if the authenticator returned an error response that indicates\n     * that it encountered an IOException while communicating with the authentication server\n     ",
    "links" : [ "#isDone()", "android.accounts.AccountManagerFuture", "#isCancelled()" ]
  } ],
  "methodNames" : [ " boolean cancel(boolean mayInterruptIfRunning)", " boolean isCancelled()", " boolean isDone()", " V getResult() throws OperationCanceledException, IOException, AuthenticatorException", " V getResult(long timeout, TimeUnit unit) throws OperationCanceledException, IOException, AuthenticatorException" ],
  "variableNames" : [ ]
}