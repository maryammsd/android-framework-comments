{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/Logging/SessionManager.java",
  "packageName" : "android.telecom.Logging",
  "className" : "SessionManager",
  "comment" : "",
  "variables" : [ {
    "name" : "SESSION_ID_ROLLOVER_THRESHOLD",
    "type" : "long",
    "comment" : " Currently using 3 letters, So don't exceed 64^3",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SESSION_TIMEOUT_MS",
    "type" : "long",
    "comment" : " 30 seconds",
    "links" : [ ]
  }, {
    "name" : "LOGGING_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEOUTS_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCodeEntryCounter",
    "type" : "int",
    "comment" : " Synchronized in all method calls",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionMapper",
    "type" : "ConcurrentHashMap<Integer, Session>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCleanStaleSessions",
    "type" : "java.lang.Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCleanupHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentThreadId",
    "type" : "ICurrentThreadId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCleanupTimeoutMs",
    "type" : "ISessionCleanupTimeoutMs",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionListeners",
    "type" : "List<ISessionListener>",
    "comment" : " Usage is synchronized on this class.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setContext(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getSessionCleanupTimeoutMs()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void resetStaleSessionTimer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void startSession(Session.Info info, String shortMethodName, String callerIdentification)",
    "returnType" : "void",
    "comment" : "\n     * Determines whether or not to start a new session or continue an existing session based on\n     * the {@link Session.Info} info passed into startSession. If info is null, a new Session is\n     * created. This code must be accompanied by endSession() at the end of the Session.\n     ",
    "links" : [ "Session.Info" ]
  }, {
    "name" : "public synchronized void startSession(String shortMethodName, String callerIdentification)",
    "returnType" : "void",
    "comment" : "\n     * Call at an entry point to the Telecom code to track the session. This code must be\n     * accompanied by a Log.endSession().\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void startExternalSession(Session.Info sessionInfo, String shortMethodName)",
    "returnType" : "void",
    "comment" : "\n     * Registers an external Session with the Manager using that external Session's sessionInfo.\n     * Log.endSession will still need to be called at the end of the session.\n     * @param sessionInfo Describes the external Session's information.\n     * @param shortMethodName The method name of the new session that is being started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Session createSubsession()",
    "returnType" : "Session",
    "comment" : "\n     * Notifies the logging system that a subsession will be run at a later point and\n     * allocates the resources. Returns a session object that must be used in\n     * Log.continueSession(...) to start the subsession.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Session createSubsession(boolean isStartedFromActiveSession)",
    "returnType" : "Session",
    "comment" : "\n     * Creates a new subsession based on an existing session. Will not be started until\n     * {@link #continueSession(Session, String)} or {@link #cancelSubsession(Session)} is called.\n     * <p>\n     * Only public for testing!\n     * @param isStartedFromActiveSession true if this subsession is being created for a task on the\n     *     same thread, false if it is being created for a related task on another thread.\n     * @return a new {@link Session}, call {@link #continueSession(Session, String)} to continue the\n     * session and {@link #endSession()} when done with this subsession.\n     ",
    "links" : [ "#cancelSubsession(Session)", "#continueSession(Session", "android.telecom.Logging.Session", "#endSession()" ]
  }, {
    "name" : "public synchronized Session.Info getExternalSession()",
    "returnType" : "Session.Info",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized Session.Info getExternalSession(@Nullable String ownerInfo)",
    "returnType" : "Session.Info",
    "comment" : "\n     * Retrieve the information of the currently active Session. This information is parcelable and\n     * is used to create an external Session ({@link #startExternalSession(Session.Info, String)}).\n     * If there is no Session active, this method will return null.\n     * @param ownerInfo Owner information for the session.\n     * @return The session information\n     ",
    "links" : [ "#startExternalSession(Session.Info" ]
  }, {
    "name" : "public synchronized void cancelSubsession(Session subsession)",
    "returnType" : "void",
    "comment" : "\n     * Cancels a subsession that had Log.createSubsession() called on it, but will never have\n     * Log.continueSession(...) called on it due to an error. Allows the subsession to be cleaned\n     * gracefully instead of being removed by the mSessionCleanupHandler forcefully later.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void continueSession(Session subsession, String shortMethodName)",
    "returnType" : "void",
    "comment" : "\n     * Starts the subsession that was created in Log.CreateSubsession. The Log.endSession() method\n     * must be called at the end of this method. The full session will complete when all\n     * subsessions are completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void endSession()",
    "returnType" : "void",
    "comment" : "\n     * Ends the current session/subsession. Must be called after a Log.startSession(...) and\n     * Log.continueSession(...) call.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void endParentSessions(Session subsession)",
    "returnType" : "void",
    "comment" : " Recursively deletes all complete parent sessions of the current subsession if it is a leaf.",
    "links" : [ ]
  }, {
    "name" : "private void notifySessionCompleteListeners(String methodName, long sessionTimeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSessionId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void registerSessionListener(ISessionListener l)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized String getNextSessionID()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void restartSessionCounter()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getBase64Encoding(int number)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getCallingThreadId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized String printActiveSessions()",
    "returnType" : "String",
    "comment" : "\n     * @return A String representation of the active sessions at the time that this method is\n     * called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void cleanupStaleSessions(long timeoutMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getCleanupTimeout(Context context)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of time after a Logging session has been started that Telecom is set to\n     * perform a sweep to check and make sure that the session is still not incomplete (stale).\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SESSION_ID_ROLLOVER_THRESHOLD", "DEFAULT_SESSION_TIMEOUT_MS", "LOGGING_TAG", "TIMEOUTS_PREFIX", "sCodeEntryCounter", "mContext", "mSessionMapper", "mCleanStaleSessions", "mSessionCleanupHandler", "mCurrentThreadId", "mSessionCleanupTimeoutMs", "mSessionListeners" ],
  "methodNames" : [ "public void setContext(Context context)", "private long getSessionCleanupTimeoutMs()", "private synchronized void resetStaleSessionTimer()", "public synchronized void startSession(Session.Info info, String shortMethodName, String callerIdentification)", "public synchronized void startSession(String shortMethodName, String callerIdentification)", "public synchronized void startExternalSession(Session.Info sessionInfo, String shortMethodName)", "public Session createSubsession()", "public synchronized Session createSubsession(boolean isStartedFromActiveSession)", "public synchronized Session.Info getExternalSession()", "public synchronized Session.Info getExternalSession(@Nullable String ownerInfo)", "public synchronized void cancelSubsession(Session subsession)", "public synchronized void continueSession(Session subsession, String shortMethodName)", "public synchronized void endSession()", "private void endParentSessions(Session subsession)", "private void notifySessionCompleteListeners(String methodName, long sessionTimeMs)", "public String getSessionId()", "public synchronized void registerSessionListener(ISessionListener l)", "private synchronized String getNextSessionID()", "private synchronized void restartSessionCounter()", "private String getBase64Encoding(int number)", "private int getCallingThreadId()", "public synchronized String printActiveSessions()", "public synchronized void cleanupStaleSessions(long timeoutMs)", "private long getCleanupTimeout(Context context)" ]
}