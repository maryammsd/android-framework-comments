{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/PerformanceCollector.java",
  "packageName" : "android.os",
  "className" : "PerformanceCollector",
  "comment" : "\n * Collects performance data between two function calls in Bundle objects and\n * outputs the results using writer of type {@link PerformanceResultsWriter}.\n * <p>\n * {@link #beginSnapshot(String)} and {@link #endSnapshot()} functions collect\n * memory usage information and measure runtime between calls to begin and end.\n * These functions logically wrap around an entire test, and should be called\n * with name of test as the label, e.g. EmailPerformanceTest.\n * <p>\n * {@link #startTiming(String)} and {@link #stopTiming(String)} functions\n * measure runtime between calls to start and stop. These functions logically\n * wrap around a single test case or a small block of code, and should be called\n * with the name of test case as the label, e.g. testSimpleSendMailSequence.\n * <p>\n * {@link #addIteration(String)} inserts intermediate measurement point which\n * can be labeled with a String, e.g. Launch email app, compose, send, etc.\n * <p>\n * Snapshot and timing functions do not interfere with each other, and thus can\n * be called in any order. The intended structure is to wrap begin/endSnapshot\n * around calls to start/stopTiming, for example:\n * <p>\n * <code>beginSnapshot(\"EmailPerformanceTest\");\n * startTiming(\"testSimpleSendSequence\");\n * addIteration(\"Launch email app\");\n * addIteration(\"Compose\");\n * stopTiming(\"Send\");\n * startTiming(\"testComplexSendSequence\");\n * stopTiming(\"\");\n * startTiming(\"testAddLabel\");\n * stopTiming(\"\");\n * endSnapshot();</code>\n * <p>\n * Structure of results output is up to implementor of\n * {@link PerformanceResultsWriter }.\n *\n * {@hide} Pending approval for public API.\n ",
  "variables" : [ {
    "name" : "METRIC_KEY_ITERATIONS",
    "type" : "String",
    "comment" : "\n     * In a results Bundle, this key references a List of iteration Bundles.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_LABEL",
    "type" : "String",
    "comment" : "\n     * In an iteration Bundle, this key describes the iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_CPU_TIME",
    "type" : "String",
    "comment" : "\n     * In a results Bundle, this key reports the cpu time of the code block\n     * under measurement.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_EXECUTION_TIME",
    "type" : "String",
    "comment" : "\n     * In a results Bundle, this key reports the execution time of the code\n     * block under measurement.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_PRE_RECEIVED_TRANSACTIONS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of received\n     * transactions from the binder driver before collection started.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_PRE_SENT_TRANSACTIONS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of transactions sent by\n     * the running program before collection started.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_RECEIVED_TRANSACTIONS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of received\n     * transactions from the binder driver.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_SENT_TRANSACTIONS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of transactions sent by\n     * the running program.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_GC_INVOCATION_COUNT",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of garbage collection\n     * invocations.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_JAVA_ALLOCATED",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the amount of allocated memory\n     * used by the running program.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_JAVA_FREE",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the amount of free memory\n     * available to the running program.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_JAVA_PRIVATE_DIRTY",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of private dirty pages\n     * used by dalvik.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_JAVA_PSS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the proportional set size for\n     * dalvik.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_JAVA_SHARED_DIRTY",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of shared dirty pages\n     * used by dalvik.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_JAVA_SIZE",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the total amount of memory\n     * available to the running program.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_NATIVE_ALLOCATED",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the amount of allocated memory in\n     * the native heap.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_NATIVE_FREE",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the amount of free memory in the\n     * native heap.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_NATIVE_PRIVATE_DIRTY",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of private dirty pages\n     * used by the native heap.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_NATIVE_PSS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the proportional set size for the\n     * native heap.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_NATIVE_SHARED_DIRTY",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of shared dirty pages\n     * used by the native heap.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_NATIVE_SIZE",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the size of the native heap.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_GLOBAL_ALLOC_COUNT",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of objects allocated\n     * globally.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_GLOBAL_ALLOC_SIZE",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the size of all objects allocated\n     * globally.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_GLOBAL_FREED_COUNT",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of objects freed\n     * globally.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_GLOBAL_FREED_SIZE",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the size of all objects freed\n     * globally.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_OTHER_PRIVATE_DIRTY",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of private dirty pages\n     * used by everything else.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_OTHER_PSS",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the proportional set size for\n     * everything else.\n     ",
    "links" : [ ]
  }, {
    "name" : "METRIC_KEY_OTHER_SHARED_DIRTY",
    "type" : "String",
    "comment" : "\n     * In a snapshot Bundle, this key reports the number of shared dirty pages\n     * used by everything else.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPerfWriter",
    "type" : "PerformanceResultsWriter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerfSnapshot",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerfMeasurement",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnapshotCpuTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnapshotExecTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCpuTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPerformanceResultsWriter(PerformanceResultsWriter writer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void beginSnapshot(String label)",
    "returnType" : "void",
    "comment" : "\n     * Begin collection of memory usage information.\n     *\n     * @param label description of code block between beginSnapshot and\n     *              endSnapshot, used to label output\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle endSnapshot()",
    "returnType" : "Bundle",
    "comment" : "\n     * End collection of memory usage information. Returns collected data in a\n     * Bundle object.\n     *\n     * @return Memory and runtime metrics stored as key/value pairs. Values are\n     *         of type long, and keys include:\n     *         <ul>\n     *         <li>{@link #METRIC_KEY_CPU_TIME cpu_time}\n     *         <li>{@link #METRIC_KEY_EXECUTION_TIME execution_time}\n     *         <li>{@link #METRIC_KEY_PRE_RECEIVED_TRANSACTIONS\n     *         pre_received_transactions}\n     *         <li>{@link #METRIC_KEY_PRE_SENT_TRANSACTIONS\n     *         pre_sent_transactions}\n     *         <li>{@link #METRIC_KEY_RECEIVED_TRANSACTIONS\n     *         received_transactions}\n     *         <li>{@link #METRIC_KEY_SENT_TRANSACTIONS sent_transactions}\n     *         <li>{@link #METRIC_KEY_GC_INVOCATION_COUNT gc_invocation_count}\n     *         <li>{@link #METRIC_KEY_JAVA_ALLOCATED java_allocated}\n     *         <li>{@link #METRIC_KEY_JAVA_FREE java_free}\n     *         <li>{@link #METRIC_KEY_JAVA_PRIVATE_DIRTY java_private_dirty}\n     *         <li>{@link #METRIC_KEY_JAVA_PSS java_pss}\n     *         <li>{@link #METRIC_KEY_JAVA_SHARED_DIRTY java_shared_dirty}\n     *         <li>{@link #METRIC_KEY_JAVA_SIZE java_size}\n     *         <li>{@link #METRIC_KEY_NATIVE_ALLOCATED native_allocated}\n     *         <li>{@link #METRIC_KEY_NATIVE_FREE native_free}\n     *         <li>{@link #METRIC_KEY_NATIVE_PRIVATE_DIRTY native_private_dirty}\n     *         <li>{@link #METRIC_KEY_NATIVE_PSS native_pss}\n     *         <li>{@link #METRIC_KEY_NATIVE_SHARED_DIRTY native_shared_dirty}\n     *         <li>{@link #METRIC_KEY_NATIVE_SIZE native_size}\n     *         <li>{@link #METRIC_KEY_GLOBAL_ALLOC_COUNT global_alloc_count}\n     *         <li>{@link #METRIC_KEY_GLOBAL_ALLOC_SIZE global_alloc_size}\n     *         <li>{@link #METRIC_KEY_GLOBAL_FREED_COUNT global_freed_count}\n     *         <li>{@link #METRIC_KEY_GLOBAL_FREED_SIZE global_freed_size}\n     *         <li>{@link #METRIC_KEY_OTHER_PRIVATE_DIRTY other_private_dirty}\n     *         <li>{@link #METRIC_KEY_OTHER_PSS other_pss}\n     *         <li>{@link #METRIC_KEY_OTHER_SHARED_DIRTY other_shared_dirty}\n     *         </ul>\n     ",
    "links" : [ "#METRIC_KEY_CPU_TIME", "#METRIC_KEY_RECEIVED_TRANSACTIONSreceived_transactions", "#METRIC_KEY_JAVA_ALLOCATED", "#METRIC_KEY_NATIVE_ALLOCATED", "#METRIC_KEY_JAVA_FREE", "#METRIC_KEY_NATIVE_SHARED_DIRTY", "#METRIC_KEY_PRE_SENT_TRANSACTIONSpre_sent_transactions", "#METRIC_KEY_GLOBAL_FREED_COUNT", "#METRIC_KEY_JAVA_SHARED_DIRTY", "#METRIC_KEY_GLOBAL_ALLOC_SIZE", "#METRIC_KEY_GLOBAL_FREED_SIZE", "#METRIC_KEY_OTHER_PRIVATE_DIRTY", "#METRIC_KEY_OTHER_PSS", "#METRIC_KEY_OTHER_SHARED_DIRTY", "#METRIC_KEY_GC_INVOCATION_COUNT", "#METRIC_KEY_JAVA_PRIVATE_DIRTY", "#METRIC_KEY_EXECUTION_TIME", "#METRIC_KEY_NATIVE_SIZE", "#METRIC_KEY_PRE_RECEIVED_TRANSACTIONSpre_received_transactions", "#METRIC_KEY_JAVA_SIZE", "#METRIC_KEY_NATIVE_PSS", "#METRIC_KEY_JAVA_PSS", "#METRIC_KEY_GLOBAL_ALLOC_COUNT", "#METRIC_KEY_SENT_TRANSACTIONS", "#METRIC_KEY_NATIVE_PRIVATE_DIRTY", "#METRIC_KEY_NATIVE_FREE" ]
  }, {
    "name" : "public void startTiming(String label)",
    "returnType" : "void",
    "comment" : "\n     * Start measurement of user and cpu time.\n     *\n     * @param label description of code block between startTiming and\n     *        stopTiming, used to label output\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle addIteration(String label)",
    "returnType" : "Bundle",
    "comment" : "\n     * Add a measured segment, and start measuring the next segment. Returns\n     * collected data in a Bundle object.\n     *\n     * @param label description of code block between startTiming and\n     *              addIteration, and between two calls to addIteration, used\n     *              to label output\n     * @return Runtime metrics stored as key/value pairs. Values are of type\n     *         long, and keys include:\n     *         <ul>\n     *         <li>{@link #METRIC_KEY_LABEL label}\n     *         <li>{@link #METRIC_KEY_CPU_TIME cpu_time}\n     *         <li>{@link #METRIC_KEY_EXECUTION_TIME execution_time}\n     *         </ul>\n     ",
    "links" : [ "#METRIC_KEY_CPU_TIME", "#METRIC_KEY_EXECUTION_TIME", "#METRIC_KEY_LABEL" ]
  }, {
    "name" : "public Bundle stopTiming(String label)",
    "returnType" : "Bundle",
    "comment" : "\n     * Stop measurement of user and cpu time.\n     *\n     * @param label description of code block between addIteration or\n     *              startTiming and stopTiming, used to label output\n     * @return Runtime metrics stored in a bundle, including all iterations\n     *         between calls to startTiming and stopTiming. List of iterations\n     *         is keyed by {@link #METRIC_KEY_ITERATIONS iterations}.\n     ",
    "links" : [ "#METRIC_KEY_ITERATIONS" ]
  }, {
    "name" : "public void addMeasurement(String label, long value)",
    "returnType" : "void",
    "comment" : "\n     * Add an integer type measurement to the collector.\n     *\n     * @param label short description of the metric that was measured\n     * @param value long value of the measurement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addMeasurement(String label, float value)",
    "returnType" : "void",
    "comment" : "\n     * Add a float type measurement to the collector.\n     *\n     * @param label short description of the metric that was measured\n     * @param value float value of the measurement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addMeasurement(String label, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add a string field to the collector.\n     *\n     * @param label short description of the metric that was measured\n     * @param value string summary of the measurement\n     ",
    "links" : [ ]
  }, {
    "name" : "private void startPerformanceSnapshot()",
    "returnType" : "void",
    "comment" : "\n     * Starts tracking memory usage, binder transactions, and real & cpu timing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void endPerformanceSnapshot()",
    "returnType" : "void",
    "comment" : "\n     * Stops tracking memory usage, binder transactions, and real & cpu timing.\n     * Stores collected data as type long into Bundle object for reporting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void startAllocCounting()",
    "returnType" : "void",
    "comment" : "\n     * Starts allocation counting. This triggers a gc and resets the counts.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void stopAllocCounting()",
    "returnType" : "void",
    "comment" : "\n     * Stops allocation counting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Bundle getAllocCounts()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a bundle with the current results from the allocation counting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Bundle getBinderCounts()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a bundle with the counts for various binder counts for this\n     * process. Currently the only two that are reported are the number of send\n     * and the number of received transactions.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "METRIC_KEY_ITERATIONS", "METRIC_KEY_LABEL", "METRIC_KEY_CPU_TIME", "METRIC_KEY_EXECUTION_TIME", "METRIC_KEY_PRE_RECEIVED_TRANSACTIONS", "METRIC_KEY_PRE_SENT_TRANSACTIONS", "METRIC_KEY_RECEIVED_TRANSACTIONS", "METRIC_KEY_SENT_TRANSACTIONS", "METRIC_KEY_GC_INVOCATION_COUNT", "METRIC_KEY_JAVA_ALLOCATED", "METRIC_KEY_JAVA_FREE", "METRIC_KEY_JAVA_PRIVATE_DIRTY", "METRIC_KEY_JAVA_PSS", "METRIC_KEY_JAVA_SHARED_DIRTY", "METRIC_KEY_JAVA_SIZE", "METRIC_KEY_NATIVE_ALLOCATED", "METRIC_KEY_NATIVE_FREE", "METRIC_KEY_NATIVE_PRIVATE_DIRTY", "METRIC_KEY_NATIVE_PSS", "METRIC_KEY_NATIVE_SHARED_DIRTY", "METRIC_KEY_NATIVE_SIZE", "METRIC_KEY_GLOBAL_ALLOC_COUNT", "METRIC_KEY_GLOBAL_ALLOC_SIZE", "METRIC_KEY_GLOBAL_FREED_COUNT", "METRIC_KEY_GLOBAL_FREED_SIZE", "METRIC_KEY_OTHER_PRIVATE_DIRTY", "METRIC_KEY_OTHER_PSS", "METRIC_KEY_OTHER_SHARED_DIRTY", "mPerfWriter", "mPerfSnapshot", "mPerfMeasurement", "mSnapshotCpuTime", "mSnapshotExecTime", "mCpuTime", "mExecTime" ],
  "methodNames" : [ "public void setPerformanceResultsWriter(PerformanceResultsWriter writer)", "public void beginSnapshot(String label)", "public Bundle endSnapshot()", "public void startTiming(String label)", "public Bundle addIteration(String label)", "public Bundle stopTiming(String label)", "public void addMeasurement(String label, long value)", "public void addMeasurement(String label, float value)", "public void addMeasurement(String label, String value)", "private void startPerformanceSnapshot()", "private void endPerformanceSnapshot()", "private static void startAllocCounting()", "private static void stopAllocCounting()", "private static Bundle getAllocCounts()", "private static Bundle getBinderCounts()" ]
}