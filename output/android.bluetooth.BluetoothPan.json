{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothPan.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothPan",
  "comment" : "\n * This class provides the APIs to control the Bluetooth Pan Profile.\n *\n * <p>BluetoothPan is a proxy object for controlling the Bluetooth Service via IPC. Use {@link\n * BluetoothAdapter#getProfileProxy} to get the BluetoothPan proxy object.\n *\n * <p>Each method is protected with its appropriate permission.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Pan profile.\n     *\n     * <p>This intent will have 4 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     *   <li>{@link #EXTRA_LOCAL_ROLE} - Which local role the remote device is bound to.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * <p>{@link #EXTRA_LOCAL_ROLE} can be one of {@link #LOCAL_NAP_ROLE} or {@link\n     * #LOCAL_PANU_ROLE}\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#LOCAL_NAP_ROLE", "#LOCAL_PANU_ROLE", "#EXTRA_LOCAL_ROLE", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "EXTRA_LOCAL_ROLE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link #ACTION_CONNECTION_STATE_CHANGED} intent The local role of the PAN profile\n     * that the remote device is bound to. It can be one of {@link #LOCAL_NAP_ROLE} or {@link\n     * #LOCAL_PANU_ROLE}.\n     ",
    "links" : [ "#LOCAL_NAP_ROLE", "#LOCAL_PANU_ROLE", "#ACTION_CONNECTION_STATE_CHANGED" ]
  }, {
    "name" : "ACTION_TETHERING_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in tethering state of the Pan Profile\n     *\n     * <p>This intent will have 1 extra:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_TETHERING_STATE} - The current state of Bluetooth tethering.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_TETHERING_STATE} can be any of {@link #TETHERING_STATE_OFF} or {@link\n     * #TETHERING_STATE_ON}\n     ",
    "links" : [ "#TETHERING_STATE_OFF", "#TETHERING_STATE_ON", "#EXTRA_TETHERING_STATE" ]
  }, {
    "name" : "EXTRA_TETHERING_STATE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link #ACTION_TETHERING_STATE_CHANGED} intent The tethering state of the PAN\n     * profile. It can be one of {@link #TETHERING_STATE_OFF} or {@link #TETHERING_STATE_ON}.\n     ",
    "links" : [ "#TETHERING_STATE_OFF", "#ACTION_TETHERING_STATE_CHANGED", "#TETHERING_STATE_ON" ]
  }, {
    "name" : "PAN_ROLE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_NAP_ROLE",
    "type" : "int",
    "comment" : " The local device is acting as a Network Access Point. ",
    "links" : [ ]
  }, {
    "name" : "LOCAL_PANU_ROLE",
    "type" : "int",
    "comment" : " The local device is acting as a PAN User. ",
    "links" : [ ]
  }, {
    "name" : "REMOTE_NAP_ROLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_PANU_ROLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHERING_STATE_OFF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHERING_STATE_ON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PAN_DISCONNECT_FAILED_NOT_CONNECTED",
    "type" : "int",
    "comment" : "\n     * Return codes for the connect and disconnect Bluez / Dbus calls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PAN_CONNECT_FAILED_ALREADY_CONNECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PAN_CONNECT_FAILED_ATTEMPT_FAILED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PAN_OPERATION_GENERIC_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PAN_OPERATION_SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothPan",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the connection to the service and unregisters callbacks\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothPan getService()",
    "returnType" : "IBluetoothPan",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is already connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that connection\n     * state intent for the profile will be broadcasted with the state. Users can get the connection\n     * state of the profile from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p>This API will return false in scenarios like the profile on the Bluetooth device is not in\n     * connected state etc. When this API returns, true, it is guaranteed that the connection state\n     * change intent will be broadcasted with the state. Users can get the disconnection state of\n     * the profile from this intent.\n     *\n     * <p>If the disconnection is initiated by a remote device, the state will transition from\n     * {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by\n     * the host (local) device the state will transition from {@link #STATE_CONNECTED} to state\n     * {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link\n     * #STATE_DISCONNECTING} can be used to distinguish between the two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBluetoothTethering(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Turns on/off bluetooth tethering.\n     *\n     * @param value is whether to enable or disable bluetooth tethering\n     * @deprecated Use {@link #requestTetheredInterface} with {@link TetheredInterfaceCallback}\n     *     instead.\n     * @hide\n     ",
    "links" : [ "#requestTetheredInterface", "android.net.TetheringManager.TetheredInterfaceCallback" ]
  }, {
    "name" : "public TetheredInterfaceRequest requestTetheredInterface(@NonNull final Executor executor, @NonNull final TetheredInterfaceCallback callback)",
    "returnType" : "TetheredInterfaceRequest",
    "comment" : "\n     * Turns on Bluetooth tethering.\n     *\n     * <p>When one or more devices are connected, the PAN service will trigger {@link\n     * TetheredInterfaceCallback#onAvailable} to inform the caller that it is ready to tether. On\n     * the contrary, when all devices have been disconnected, the PAN service will trigger {@link\n     * TetheredInterfaceCallback#onUnavailable}.\n     *\n     * <p>To turn off Bluetooth tethering, the caller must use {@link\n     * TetheredInterfaceRequest#release} method.\n     *\n     * @param executor thread to execute callback methods\n     * @param callback is the tethering callback to indicate PAN service is ready or not to tether\n     *     to one or more devices\n     * @return new instance of {@link TetheredInterfaceRequest} which can be used to turn off\n     *     Bluetooth tethering or {@code null} if service is not enabled\n     * @hide\n     ",
    "links" : [ "android.net.TetheringManager.TetheredInterfaceCallback#onAvailable", "android.net.TetheringManager.TetheredInterfaceRequest", "android.net.TetheringManager.TetheredInterfaceCallback#onUnavailable", "android.net.TetheringManager.TetheredInterfaceRequest#release" ]
  }, {
    "name" : "public boolean isTetheringOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether tethering is enabled\n     *\n     * @return true if tethering is on, false if not or some error occurred\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothPan getService()", "public BluetoothAdapter getAdapter()", "protected void finalize()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public void setBluetoothTethering(boolean value)", "public TetheredInterfaceRequest requestTetheredInterface(@NonNull final Executor executor, @NonNull final TetheredInterfaceCallback callback)", "public boolean isTetheringOn()", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "EXTRA_LOCAL_ROLE", "ACTION_TETHERING_STATE_CHANGED", "EXTRA_TETHERING_STATE", "PAN_ROLE_NONE", "LOCAL_NAP_ROLE", "LOCAL_PANU_ROLE", "REMOTE_NAP_ROLE", "REMOTE_PANU_ROLE", "TETHERING_STATE_OFF", "TETHERING_STATE_ON", "PAN_DISCONNECT_FAILED_NOT_CONNECTED", "PAN_CONNECT_FAILED_ALREADY_CONNECTED", "PAN_CONNECT_FAILED_ATTEMPT_FAILED", "PAN_OPERATION_GENERIC_FAILURE", "PAN_OPERATION_SUCCESS", "mContext", "mAdapter", "mAttributionSource", "mService" ]
}