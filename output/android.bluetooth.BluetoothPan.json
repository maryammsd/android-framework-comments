{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothPan.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothPan",
  "comment" : "\n * This class provides the APIs to control the Bluetooth Pan\n * Profile.\n *\n * <p>BluetoothPan is a proxy object for controlling the Bluetooth\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get\n * the BluetoothPan proxy object.\n *\n * <p>Each method is protected with its appropriate permission.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Pan\n     * profile.\n     *\n     * <p>This intent will have 4 extras:\n     * <ul>\n     * <li> {@link #EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * <li> {@link #EXTRA_LOCAL_ROLE} - Which local role the remote device is\n     * bound to. </li>\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of\n     * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},\n     * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.\n     *\n     * <p> {@link #EXTRA_LOCAL_ROLE} can be one of {@link #LOCAL_NAP_ROLE} or\n     * {@link #LOCAL_PANU_ROLE}\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#LOCAL_NAP_ROLE", "#LOCAL_PANU_ROLE", "#EXTRA_LOCAL_ROLE", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "EXTRA_LOCAL_ROLE",
    "type" : "String",
    "comment" : "\n     * Extra for {@link #ACTION_CONNECTION_STATE_CHANGED} intent\n     * The local role of the PAN profile that the remote device is bound to.\n     * It can be one of {@link #LOCAL_NAP_ROLE} or {@link #LOCAL_PANU_ROLE}.\n     ",
    "links" : [ "#LOCAL_NAP_ROLE", "#LOCAL_PANU_ROLE", "#ACTION_CONNECTION_STATE_CHANGED" ]
  }, {
    "name" : "PAN_ROLE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_NAP_ROLE",
    "type" : "int",
    "comment" : "\n     * The local device is acting as a Network Access Point.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCAL_PANU_ROLE",
    "type" : "int",
    "comment" : "\n     * The local device is acting as a PAN User.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOTE_NAP_ROLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_PANU_ROLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PAN_DISCONNECT_FAILED_NOT_CONNECTED",
    "type" : "int",
    "comment" : "\n     * Return codes for the connect and disconnect Bluez / Dbus calls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PAN_CONNECT_FAILED_ALREADY_CONNECTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PAN_CONNECT_FAILED_ATTEMPT_FAILED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PAN_OPERATION_GENERIC_FAILURE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PAN_OPERATION_SUCCESS",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothPan>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the connection to the service and unregisters callbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothPan getService()",
    "returnType" : "IBluetoothPan",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p> This API returns false in scenarios like the profile on the\n     * device is already connected or Bluetooth is not turned on.\n     * When this API returns true, it is guaranteed that\n     * connection state intent for the profile will be broadcasted with\n     * the state. Users can get the connection state of the profile\n     * from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p> This API will return false in scenarios like the profile on the\n     * Bluetooth device is not in connected state etc. When this API returns,\n     * true, it is guaranteed that the connection state change\n     * intent will be broadcasted with the state. Users can get the\n     * disconnection state of the profile from this intent.\n     *\n     * <p> If the disconnection is initiated by a remote device, the state\n     * will transition from {@link #STATE_CONNECTED} to\n     * {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the\n     * host (local) device the state will transition from\n     * {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to\n     * state {@link #STATE_DISCONNECTED}. The transition to\n     * {@link #STATE_DISCONNECTING} can be used to distinguish between the\n     * two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of {@link #CONNECTION_POLICY_ALLOWED},\n     * {@link #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBluetoothTethering(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Turns on/off bluetooth tethering\n     *\n     * @param value is whether to enable or disable bluetooth tethering\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTetheringOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether tethering is enabled\n     *\n     * @return true if tethering is on, false if not or some error occurred\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "EXTRA_LOCAL_ROLE", "PAN_ROLE_NONE", "LOCAL_NAP_ROLE", "LOCAL_PANU_ROLE", "REMOTE_NAP_ROLE", "REMOTE_PANU_ROLE", "PAN_DISCONNECT_FAILED_NOT_CONNECTED", "PAN_CONNECT_FAILED_ALREADY_CONNECTED", "PAN_CONNECT_FAILED_ATTEMPT_FAILED", "PAN_OPERATION_GENERIC_FAILURE", "PAN_OPERATION_SUCCESS", "mContext", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ " void close()", "private IBluetoothPan getService()", "protected void finalize()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public void setBluetoothTethering(boolean value)", "public boolean isTetheringOn()", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ]
}