{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/HotwordDetectedResult.java",
  "packageName" : "android.service.voice",
  "className" : "HotwordDetectedResult",
  "comment" : "\n * Represents a result supporting the hotword detection.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CONFIDENCE_LEVEL_NONE",
    "type" : "int",
    "comment" : " No confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "CONFIDENCE_LEVEL_LOW",
    "type" : "int",
    "comment" : " Low confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "CONFIDENCE_LEVEL_LOW_MEDIUM",
    "type" : "int",
    "comment" : " Low-to-medium confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "CONFIDENCE_LEVEL_MEDIUM",
    "type" : "int",
    "comment" : " Medium confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "CONFIDENCE_LEVEL_MEDIUM_HIGH",
    "type" : "int",
    "comment" : " Medium-to-high confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "CONFIDENCE_LEVEL_HIGH",
    "type" : "int",
    "comment" : " High confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "CONFIDENCE_LEVEL_VERY_HIGH",
    "type" : "int",
    "comment" : " Very high confidence in hotword detector result. ",
    "links" : [ ]
  }, {
    "name" : "HOTWORD_OFFSET_UNSET",
    "type" : "int",
    "comment" : " Represents unset value for the hotword offset. ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_CHANNEL_UNSET",
    "type" : "int",
    "comment" : " Represents unset value for the triggered audio channel. ",
    "links" : [ ]
  }, {
    "name" : "BACKGROUND_AUDIO_POWER_UNSET",
    "type" : "int",
    "comment" : " Represents unset value for the background audio signal power. ",
    "links" : [ ]
  }, {
    "name" : "LIMIT_HOTWORD_OFFSET_MAX_VALUE",
    "type" : "int",
    "comment" : " 1 hour",
    "links" : [ ]
  }, {
    "name" : "LIMIT_AUDIO_CHANNEL_MAX_VALUE",
    "type" : "int",
    "comment" : " Limits the max value for the triggered audio channel. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PROXIMITY",
    "type" : "String",
    "comment" : "\n     * The bundle key for proximity\n     *\n     * TODO(b/238896013): Move the proximity logic out of bundle to proper API.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROXIMITY_UNKNOWN",
    "type" : "int",
    "comment" : " Usersâ€™ proximity is unknown (proximity sensing was inconclusive and is unsupported). ",
    "links" : [ ]
  }, {
    "name" : "PROXIMITY_NEAR",
    "type" : "int",
    "comment" : " Proximity value that represents that the object is near. ",
    "links" : [ ]
  }, {
    "name" : "PROXIMITY_FAR",
    "type" : "int",
    "comment" : " Proximity value that represents that the object is far. ",
    "links" : [ ]
  }, {
    "name" : "mSpeakerId",
    "type" : "int",
    "comment" : " Id of the current speaker\n     *\n     * <p>Only values between 0 and {@link #getMaxSpeakerId} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxSpeakerId" ]
  }, {
    "name" : "mConfidenceLevel",
    "type" : "int",
    "comment" : " Confidence level in the trigger outcome. ",
    "links" : [ ]
  }, {
    "name" : "mMediaSyncEvent",
    "type" : "MediaSyncEvent",
    "comment" : "\n     * A {@code MediaSyncEvent} that allows the {@link HotwordDetector} to recapture the audio\n     * that contains the hotword trigger. This must be obtained using\n     * {@link android.media.AudioRecord#shareAudioHistory(String, long)}.\n     ",
    "links" : [ "android.media.AudioRecord#shareAudioHistory(String", "android.service.voice.HotwordDetector" ]
  }, {
    "name" : "mHotwordOffsetMillis",
    "type" : "int",
    "comment" : "\n     * Offset in milliseconds the audio stream when the trigger event happened (end of hotword\n     * phrase).\n     *\n     * <p>Only value between 0 and 3600000 (inclusive) is accepted.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHotwordDurationMillis",
    "type" : "int",
    "comment" : "\n     * Duration in milliseconds of the hotword trigger phrase.\n     *\n     * <p>Only values between 0 and {@link android.media.AudioRecord#getMaxSharedAudioHistoryMillis}\n     * (inclusive) are accepted.\n     ",
    "links" : [ "android.media.AudioRecord#getMaxSharedAudioHistoryMillis" ]
  }, {
    "name" : "mAudioChannel",
    "type" : "int",
    "comment" : "\n     * Audio channel containing the highest-confidence hotword signal.\n     *\n     * <p>Only value between 0 and 63 (inclusive) is accepted.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHotwordDetectionPersonalized",
    "type" : "boolean",
    "comment" : "\n     * Returns whether the trigger has happened due to model having been personalized to fit user's\n     * voice.\n     ",
    "links" : [ ]
  }, {
    "name" : "mScore",
    "type" : "int",
    "comment" : "\n     * Score for the hotword trigger.\n     *\n     * <p>Only values between 0 and {@link #getMaxScore} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxScore" ]
  }, {
    "name" : "mPersonalizedScore",
    "type" : "int",
    "comment" : "\n     * Score for the hotword trigger for device user.\n     *\n     * <p>Only values between 0 and {@link #getMaxScore} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxScore" ]
  }, {
    "name" : "mHotwordPhraseId",
    "type" : "int",
    "comment" : "\n     * An ID representing the keyphrase that triggered the successful detection.\n     *\n     * <p>Only values between 0 and {@link #getMaxHotwordPhraseId()} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxHotwordPhraseId()" ]
  }, {
    "name" : "mAudioStreams",
    "type" : "List<HotwordAudioStream>",
    "comment" : "\n     * The list of the audio streams containing audio bytes that were used for hotword detection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "\n     * App-specific extras to support trigger.\n     *\n     * <p>The size of this bundle will be limited to {@link #getMaxBundleSize}. Results will larger\n     * bundles will be rejected.\n     *\n     * <p>Only primitive types are supported in this bundle. Complex types will be removed from the\n     * bundle.\n     *\n     * <p>The use of this method is discouraged, and support for it will be removed in future\n     * versions of Android.\n     *\n     * <p>After the trigger happens, a special case of proximity-related extra, with the key of\n     * 'android.service.voice.extra.PROXIMITY_VALUE' and the value of proximity value (integer)\n     * will be stored to enable proximity logic. {@link HotwordDetectedResult#PROXIMITY_NEAR} will\n     * indicate 'NEAR' proximity and {@link HotwordDetectedResult#PROXIMITY_FAR} will indicate 'FAR'\n     * proximity. The proximity value is provided by the system, on devices that support detecting\n     * proximity of nearby users, to help disambiguate which nearby device should respond. When the\n     * proximity is unknown, the proximity value will not be stored. This mapping will be excluded\n     * from the max bundle size calculation because this mapping is included after the result is\n     * returned from the hotword detector service.\n     *\n     * <p>This is a PersistableBundle so it doesn't allow any remotable objects or other contents\n     * that can be used to communicate with other processes.\n     ",
    "links" : [ "android.service.voice.HotwordDetectedResult#PROXIMITY_FAR", "#getMaxBundleSize", "android.service.voice.HotwordDetectedResult#PROXIMITY_NEAR" ]
  }, {
    "name" : "sMaxBundleSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundAudioPower",
    "type" : "int",
    "comment" : "\n     * Power of the background audio signal in which the hotword phrase was detected.\n     *\n     * <p> Only values between 0 and {@link #getMaxBackgroundAudioPower} (inclusive)\n     * and the special value {@link #BACKGROUND_AUDIO_POWER_UNSET} are valid.\n     *\n     * <p> This value is unitless. The relation between this value and the real audio signal\n     * power measured in decibels depends on the hotword detection service implementation.\n     ",
    "links" : [ "#getMaxBackgroundAudioPower", "#BACKGROUND_AUDIO_POWER_UNSET" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<HotwordDetectedResult>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int defaultSpeakerId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxSpeakerId()",
    "returnType" : "int",
    "comment" : " Maximum number of active speaker ids. *",
    "links" : [ ]
  }, {
    "name" : "private static int defaultConfidenceLevel()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int defaultScore()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int defaultPersonalizedScore()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxScore()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum values of {@link #getScore} and {@link #getPersonalizedScore}.\n     * <p>\n     * The float value should be calculated as {@code getScore() / getMaxScore()}.\n     ",
    "links" : [ "#getScore", "#getPersonalizedScore" ]
  }, {
    "name" : "private static int defaultHotwordPhraseId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxHotwordPhraseId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum value of {@link #getHotwordPhraseId()}.\n     ",
    "links" : [ "#getHotwordPhraseId()" ]
  }, {
    "name" : "private static List<HotwordAudioStream> defaultAudioStreams()",
    "returnType" : "List<HotwordAudioStream>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PersistableBundle defaultExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxBundleSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum byte size of the information contained in the bundle.\n     *\n     * <p>The total size will be calculated by how much bundle data should be written into the\n     * Parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaSyncEvent getMediaSyncEvent()",
    "returnType" : "MediaSyncEvent",
    "comment" : " @NonNull only, and by default codegen would use the same javadoc on both.",
    "links" : [ ]
  }, {
    "name" : "private static int defaultBackgroundAudioPower()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxBackgroundAudioPower()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum value of {@link #getBackgroundAudioPower()}.\n     ",
    "links" : [ "#getBackgroundAudioPower()" ]
  }, {
    "name" : "public static int getParcelableSize(@NonNull Parcelable parcelable)",
    "returnType" : "int",
    "comment" : "\n     * Returns how many bytes should be written into the Parcel\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getUsageSize(@NonNull HotwordDetectedResult hotwordDetectedResult)",
    "returnType" : "int",
    "comment" : "\n     * Returns how many bits have been written into the HotwordDetectedResult.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int bitCount(long value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onConstructed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<HotwordAudioStream> getAudioStreams()",
    "returnType" : "List<HotwordAudioStream>",
    "comment" : "\n     * The list of the audio streams containing audio bytes that were used for hotword detection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProximity(double distance)",
    "returnType" : "void",
    "comment" : "\n     * Adds proximity level, either near or far, that is mapped for the given distance into\n     * the bundle. The proximity value is provided by the system, on devices that support detecting\n     * proximity of nearby users, to help disambiguate which nearby device should respond.\n     * This mapping will be excluded from the max bundle size calculation because this mapping is\n     * included after the result is returned from the hotword detector service. The value will not\n     * be included if the proximity was unknown.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProximity()",
    "returnType" : "int",
    "comment" : "\n     * Returns proximity level, which can be either of {@link HotwordDetectedResult#PROXIMITY_NEAR}\n     * or {@link HotwordDetectedResult#PROXIMITY_FAR}. If the proximity is unknown, it will\n     * return {@link HotwordDetectedResult#PROXIMITY_UNKNOWN}.\n     ",
    "links" : [ "android.service.voice.HotwordDetectedResult#PROXIMITY_FAR", "android.service.voice.HotwordDetectedResult#PROXIMITY_UNKNOWN", "android.service.voice.HotwordDetectedResult#PROXIMITY_NEAR" ]
  }, {
    "name" : "private int convertToProximityLevel(double distance)",
    "returnType" : "int",
    "comment" : "\n     * Mapping of the proximity distance (meters) to proximity values, unknown, near, and far.\n     * Currently, this mapping is handled by HotwordDetectedResult because it handles just\n     * HotwordDetectionConnection which we know the mapping of. However, the mapping will need to\n     * move to a more centralized place once there are more clients.\n     *\n     * TODO(b/258531144): Move the proximity mapping to a central location\n     ",
    "links" : [ ]
  }, {
    "name" : "public Builder buildUpon()",
    "returnType" : "Builder",
    "comment" : "\n     * Provides an instance of {@link Builder} with state corresponding to this instance.\n     * @hide\n     ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public static String confidenceLevelToString(@ConfidenceLevel int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static String limitToString(@Limit int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String proximityToString(@Proximity int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getSpeakerId()",
    "returnType" : "int",
    "comment" : "\n     * Id of the current speaker\n     *\n     * <p>Only values between 0 and {@link #getMaxSpeakerId} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxSpeakerId" ]
  }, {
    "name" : "public int getConfidenceLevel()",
    "returnType" : "int",
    "comment" : "\n     * Confidence level in the trigger outcome.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHotwordOffsetMillis()",
    "returnType" : "int",
    "comment" : "\n     * Offset in milliseconds the audio stream when the trigger event happened (end of hotword\n     * phrase).\n     *\n     * <p>Only value between 0 and 3600000 (inclusive) is accepted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHotwordDurationMillis()",
    "returnType" : "int",
    "comment" : "\n     * Duration in milliseconds of the hotword trigger phrase.\n     *\n     * <p>Only values between 0 and {@link android.media.AudioRecord#getMaxSharedAudioHistoryMillis}\n     * (inclusive) are accepted.\n     ",
    "links" : [ "android.media.AudioRecord#getMaxSharedAudioHistoryMillis" ]
  }, {
    "name" : "public int getAudioChannel()",
    "returnType" : "int",
    "comment" : "\n     * Audio channel containing the highest-confidence hotword signal.\n     *\n     * <p>Only value between 0 and 63 (inclusive) is accepted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHotwordDetectionPersonalized()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the trigger has happened due to model having been personalized to fit user's\n     * voice.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScore()",
    "returnType" : "int",
    "comment" : "\n     * Score for the hotword trigger.\n     *\n     * <p>Only values between 0 and {@link #getMaxScore} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxScore" ]
  }, {
    "name" : "public int getPersonalizedScore()",
    "returnType" : "int",
    "comment" : "\n     * Score for the hotword trigger for device user.\n     *\n     * <p>Only values between 0 and {@link #getMaxScore} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxScore" ]
  }, {
    "name" : "public int getHotwordPhraseId()",
    "returnType" : "int",
    "comment" : "\n     * An ID representing the keyphrase that triggered the successful detection.\n     *\n     * <p>Only values between 0 and {@link #getMaxHotwordPhraseId()} (inclusive) are accepted.\n     ",
    "links" : [ "#getMaxHotwordPhraseId()" ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * App-specific extras to support trigger.\n     *\n     * <p>The size of this bundle will be limited to {@link #getMaxBundleSize}. Results will larger\n     * bundles will be rejected.\n     *\n     * <p>Only primitive types are supported in this bundle. Complex types will be removed from the\n     * bundle.\n     *\n     * <p>The use of this method is discouraged, and support for it will be removed in future\n     * versions of Android.\n     *\n     * <p>After the trigger happens, a special case of proximity-related extra, with the key of\n     * 'android.service.voice.extra.PROXIMITY_VALUE' and the value of proximity value (integer)\n     * will be stored to enable proximity logic. {@link HotwordDetectedResult#PROXIMITY_NEAR} will\n     * indicate 'NEAR' proximity and {@link HotwordDetectedResult#PROXIMITY_FAR} will indicate 'FAR'\n     * proximity. The proximity value is provided by the system, on devices that support detecting\n     * proximity of nearby users, to help disambiguate which nearby device should respond. When the\n     * proximity is unknown, the proximity value will not be stored. This mapping will be excluded\n     * from the max bundle size calculation because this mapping is included after the result is\n     * returned from the hotword detector service.\n     *\n     * <p>This is a PersistableBundle so it doesn't allow any remotable objects or other contents\n     * that can be used to communicate with other processes.\n     ",
    "links" : [ "android.service.voice.HotwordDetectedResult#PROXIMITY_FAR", "#getMaxBundleSize", "android.service.voice.HotwordDetectedResult#PROXIMITY_NEAR" ]
  }, {
    "name" : "public int getBackgroundAudioPower()",
    "returnType" : "int",
    "comment" : "\n     * Power of the background audio signal in which the hotword phrase was detected.\n     *\n     * <p> Only values between 0 and {@link #getMaxBackgroundAudioPower} (inclusive)\n     * and the special value {@link #BACKGROUND_AUDIO_POWER_UNSET} are valid.\n     *\n     * <p> This value is unitless. The relation between this value and the real audio signal\n     * power measured in decibels depends on the hotword detection service implementation.\n     ",
    "links" : [ "#getMaxBackgroundAudioPower", "#BACKGROUND_AUDIO_POWER_UNSET" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int defaultSpeakerId()", "public static int getMaxSpeakerId()", "private static int defaultConfidenceLevel()", "private static int defaultScore()", "private static int defaultPersonalizedScore()", "public static int getMaxScore()", "private static int defaultHotwordPhraseId()", "public static int getMaxHotwordPhraseId()", "private static List<HotwordAudioStream> defaultAudioStreams()", "private static PersistableBundle defaultExtras()", "public static int getMaxBundleSize()", "public MediaSyncEvent getMediaSyncEvent()", "private static int defaultBackgroundAudioPower()", "public static int getMaxBackgroundAudioPower()", "public static int getParcelableSize(@NonNull Parcelable parcelable)", "public static int getUsageSize(@NonNull HotwordDetectedResult hotwordDetectedResult)", "private static int bitCount(long value)", "private void onConstructed()", "public List<HotwordAudioStream> getAudioStreams()", "public void setProximity(double distance)", "public int getProximity()", "private int convertToProximityLevel(double distance)", "public Builder buildUpon()", "public static String confidenceLevelToString(@ConfidenceLevel int value)", " static String limitToString(@Limit int value)", "public static String proximityToString(@Proximity int value)", "public int getSpeakerId()", "public int getConfidenceLevel()", "public int getHotwordOffsetMillis()", "public int getHotwordDurationMillis()", "public int getAudioChannel()", "public boolean isHotwordDetectionPersonalized()", "public int getScore()", "public int getPersonalizedScore()", "public int getHotwordPhraseId()", "public PersistableBundle getExtras()", "public int getBackgroundAudioPower()", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "CONFIDENCE_LEVEL_NONE", "CONFIDENCE_LEVEL_LOW", "CONFIDENCE_LEVEL_LOW_MEDIUM", "CONFIDENCE_LEVEL_MEDIUM", "CONFIDENCE_LEVEL_MEDIUM_HIGH", "CONFIDENCE_LEVEL_HIGH", "CONFIDENCE_LEVEL_VERY_HIGH", "HOTWORD_OFFSET_UNSET", "AUDIO_CHANNEL_UNSET", "BACKGROUND_AUDIO_POWER_UNSET", "LIMIT_HOTWORD_OFFSET_MAX_VALUE", "LIMIT_AUDIO_CHANNEL_MAX_VALUE", "EXTRA_PROXIMITY", "PROXIMITY_UNKNOWN", "PROXIMITY_NEAR", "PROXIMITY_FAR", "mSpeakerId", "mConfidenceLevel", "mMediaSyncEvent", "mHotwordOffsetMillis", "mHotwordDurationMillis", "mAudioChannel", "mHotwordDetectionPersonalized", "mScore", "mPersonalizedScore", "mHotwordPhraseId", "mAudioStreams", "mExtras", "sMaxBundleSize", "mBackgroundAudioPower", "CREATOR" ]
}