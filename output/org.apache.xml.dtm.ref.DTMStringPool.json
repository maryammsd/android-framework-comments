{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMStringPool.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMStringPool",
  "comment" : " <p>DTMStringPool is an \"interning\" mechanism for strings. It will\n * create a stable 1:1 mapping between a set of string values and a set of\n * integer index values, so the integers can be used to reliably and\n * uniquely identify (and when necessary retrieve) the strings.</p>\n *\n * <p>Design Priorities:\n * <ul>\n * <li>String-to-index lookup speed is critical.</li>\n * <li>Index-to-String lookup speed is slightly less so.</li>\n * <li>Threadsafety is not guaranteed at this level.\n * Enforce that in the application if needed.</li>\n * <li>Storage efficiency is an issue but not a huge one.\n * It is expected that string pools won't exceed about 2000 entries.</li>\n * </ul>\n * </p>\n *\n * <p>Implementation detail: A standard Hashtable is relatively\n * inefficient when looking up primitive int values, especially when\n * we're already maintaining an int-to-string vector.  So I'm\n * maintaining a simple hash chain within this class.</p>\n *\n * <p>NOTE: There is nothing in the code that has a real dependency upon\n * String. It would work with any object type that implements reliable\n * .hashCode() and .equals() operations. The API enforces Strings because\n * it's safer that way, but this could trivially be turned into a general\n * ObjectPool if one was needed.</p>\n *\n * <p>Status: Passed basic test in main().</p>\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_intToString",
    "type" : "Vector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HASHPRIME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_hashStart",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_hashChain",
    "type" : "IntVector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void removeAllElements()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String indexToString(int i) throws java.lang.ArrayIndexOutOfBoundsException",
    "returnType" : "String",
    "comment" : " @return string whose value is uniquely identified by this integer index.\n   * @throws java.lang.ArrayIndexOutOfBoundsException\n   *  if index doesn't map to a string.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public int stringToIndex(String s)",
    "returnType" : "int",
    "comment" : " @return integer index uniquely identifying the value of this string. ",
    "links" : [ ]
  }, {
    "name" : "public static void main(String[] args)",
    "returnType" : "void",
    "comment" : " Command-line unit test driver. This test relies on the fact that\n   * this version of the pool assigns indices consecutively, starting\n   * from zero, as new unique strings are encountered.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void removeAllElements()", "public String indexToString(int i) throws java.lang.ArrayIndexOutOfBoundsException", "public int stringToIndex(String s)", "public static void main(String[] args)" ],
  "variableNames" : [ "m_intToString", "HASHPRIME", "m_hashStart", "m_hashChain", "NULL" ]
}