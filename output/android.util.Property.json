{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/Property.java",
  "packageName" : "android.util",
  "className" : "Property",
  "comment" : "\n * A property is an abstraction that can be used to represent a <emb>mutable</em> value that is held\n * in a <em>host</em> object. The Property's {@link #set(Object, Object)} or {@link #get(Object)}\n * methods can be implemented in terms of the private fields of the host object, or via \"setter\" and\n * \"getter\" methods or by some other mechanism, as appropriate.\n *\n * @param <T> The class on which the property is declared.\n * @param <V> The type that this property represents.\n ",
  "links" : [ "#set(Object", "#get(Object)" ],
  "variables" : [ {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "Class<V>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Property<T, V> of(Class<T> hostType, Class<V> valueType, String name)",
    "returnType" : "Property<T, V>",
    "comment" : "\n     * This factory method creates and returns a Property given the <code>class</code> and\n     * <code>name</code> parameters, where the <code>\"name\"</code> parameter represents either:\n     * <ul>\n     *     <li>a public <code>getName()</code> method on the class which takes no arguments, plus an\n     *     optional public <code>setName()</code> method which takes a value of the same type\n     *     returned by <code>getName()</code>\n     *     <li>a public <code>isName()</code> method on the class which takes no arguments, plus an\n     *     optional public <code>setName()</code> method which takes a value of the same type\n     *     returned by <code>isName()</code>\n     *     <li>a public <code>name</code> field on the class\n     * </ul>\n     *\n     * <p>If either of the get/is method alternatives is found on the class, but an appropriate\n     * <code>setName()</code> method is not found, the <code>Property</code> will be\n     * {@link #isReadOnly() readOnly}. Calling the {@link #set(Object, Object)} method on such\n     * a property is allowed, but will have no effect.</p>\n     *\n     * <p>If neither the methods nor the field are found on the class a\n     * {@link NoSuchPropertyException} exception will be thrown.</p>\n     ",
    "links" : [ "#set(Object", "#isReadOnly()", "android.util.NoSuchPropertyException" ]
  }, {
    "name" : "public boolean isReadOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the {@link #set(Object, Object)} method does not set the value on the target\n     * object (in which case the {@link #set(Object, Object) set()} method should throw a {@link\n     * NoSuchPropertyException} exception). This may happen if the Property wraps functionality that\n     * allows querying the underlying value but not setting it. For example, the {@link #of(Class,\n     * Class, String)} factory method may return a Property with name \"foo\" for an object that has\n     * only a <code>getFoo()</code> or <code>isFoo()</code> method, but no matching\n     * <code>setFoo()</code> method.\n     ",
    "links" : [ "#set(Object", "#of(Class", "android.util.NoSuchPropertyException" ]
  }, {
    "name" : "public void set(T object, V value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value on <code>object</code> which this property represents. If the method is unable\n     * to set the value on the target object it will throw an {@link UnsupportedOperationException}\n     * exception.\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract V get(T object)",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value that this property represents on the given <code>object</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name for this property.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<V> getType()",
    "returnType" : "Class<V>",
    "comment" : "\n     * Returns the type for this property.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Property<T, V> of(Class<T> hostType, Class<V> valueType, String name)", "public boolean isReadOnly()", "public void set(T object, V value)", "public abstract V get(T object)", "public String getName()", "public Class<V> getType()" ],
  "variableNames" : [ "mName", "mType" ]
}