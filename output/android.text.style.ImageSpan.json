{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/style/ImageSpan.java",
  "packageName" : "android.text.style",
  "className" : "ImageSpan",
  "comment" : "\n * Span that replaces the text it's attached to with a {@link Drawable} that can be aligned with\n * the bottom or with the baseline of the surrounding text. The drawable can be constructed from\n * varied sources:\n * <ul>\n * <li>{@link Bitmap} - see {@link #ImageSpan(Context, Bitmap)} and\n * {@link #ImageSpan(Context, Bitmap, int)}\n * </li>\n * <li>{@link Drawable} - see {@link #ImageSpan(Drawable, int)}</li>\n * <li>resource id - see {@link #ImageSpan(Context, int, int)}</li>\n * <li>{@link Uri} - see {@link #ImageSpan(Context, Uri, int)}</li>\n * </ul>\n * The default value for the vertical alignment is {@link DynamicDrawableSpan#ALIGN_BOTTOM}\n * <p>\n * For example, an <code>ImagedSpan</code> can be used like this:\n * <pre>\n * SpannableString string = new SpannableString(\"Bottom: span.\\nBaseline: span.\");\n * // using the default alignment: ALIGN_BOTTOM\n * string.setSpan(new ImageSpan(this, R.mipmap.ic_launcher), 7, 8, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n * string.setSpan(new ImageSpan(this, R.mipmap.ic_launcher, DynamicDrawableSpan.ALIGN_BASELINE),\n * 22, 23, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n * </pre>\n * <img src=\"{@docRoot}reference/android/images/text/style/imagespan.png\" />\n * <figcaption>Text with <code>ImageSpan</code>s aligned bottom and baseline.</figcaption>\n ",
  "links" : [ "#ImageSpan(Drawable", "android.graphics.Bitmap", "#ImageSpan(Context", "android.net.Uri", "android.graphics.drawable.BitmapDrawable", "android.text.style.DynamicDrawableSpan#ALIGN_BOTTOM" ],
  "variables" : [ {
    "name" : "mDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSource()",
    "returnType" : "String",
    "comment" : "\n     * Returns the source string that was saved during construction.\n     *\n     * @return the source string that was saved during construction\n     * @see #ImageSpan(Drawable, String)\n     * @see #ImageSpan(Context, Uri)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Drawable getDrawable()", "public String getSource()", "public String toString()" ],
  "variableNames" : [ "mDrawable", "mContentUri", "mResourceId", "mContext", "mSource" ]
}