{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/DecimalFormatProperties.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "DecimalFormatProperties",
  "comment" : "\n * Implement xsl:decimal-format.\n * <pre>\n * <!ELEMENT xsl:decimal-format EMPTY>\n * <!ATTLIST xsl:decimal-format\n *   name %qname; #IMPLIED\n *   decimal-separator %char; \".\"\n *   grouping-separator %char; \",\"\n *   infinity CDATA \"Infinity\"\n *   minus-sign %char; \"-\"\n *   NaN CDATA \"NaN\"\n *   percent %char; \"%\"\n *   per-mille %char; \"&#x2030;\"\n *   zero-digit %char; \"0\"\n *   digit %char; \"#\"\n *   pattern-separator %char; \";\"\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#format-number\">format-number in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_dfs",
    "type" : "DecimalFormatSymbols",
    "comment" : " An instance of DecimalFormatSymbols for this element.\n   *  @serial       ",
    "links" : [ ]
  }, {
    "name" : "m_qname",
    "type" : "QName",
    "comment" : "\n   * If there is a name attribute, then the element declares a named\n   * decimal-format; otherwise, it declares the default decimal-format.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DecimalFormatSymbols getDecimalFormatSymbols()",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n   * Return the decimal format Symbols for this element.\n   * <p>The xsl:decimal-format element declares a decimal-format,\n   * which controls the interpretation of a format pattern used by\n   * the format-number function. If there is a name attribute, then\n   * the element declares a named decimal-format; otherwise, it\n   * declares the default decimal-format. The value of the name\n   * attribute is a QName, which is expanded as described in [2.4 Qualified Names].\n   * It is an error to declare either the default decimal-format or a\n   * decimal-format with a given name more than once (even with different\n   * import precedence), unless it is declared every time with the same\n   * value for all attributes (taking into account any default values).</p>\n   * <p>The other attributes on xsl:decimal-format correspond to the\n   * methods on the JDK 1.1 DecimalFormatSymbols class. For each get/set\n   * method pair there is an attribute defined for the xsl:decimal-format\n   * element.</p>\n   *\n   * @return the decimal format Symbols for this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setName(QName qname)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * If there is a name attribute, then the element declares a named\n   * decimal-format; otherwise, it declares the default decimal-format.\n   *\n   * @param qname The name to set as the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * If there is a name attribute, then the element declares a named\n   * decimal-format; otherwise, it declares the default decimal-format.\n   *\n   * @return the value of the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalSeparator(char ds)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"decimal-separator\" attribute.\n   * decimal-separator specifies the character used for the decimal sign;\n   * the default value is the period character (.).\n   *\n   * @param ds Character to set as decimal separator \n   ",
    "links" : [ ]
  }, {
    "name" : "public char getDecimalSeparator()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"decimal-separator\" attribute.\n   * decimal-separator specifies the character used for the decimal sign;\n   * the default value is the period character (.).\n   *\n   * @return the character to use as decimal separator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupingSeparator(char gs)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"grouping-separator\" attribute.\n   * grouping-separator specifies the character used as a grouping\n   * (e.g. thousands) separator; the default value is the comma character (,).\n   *\n   * @param gs Character to use a grouping separator \n   ",
    "links" : [ ]
  }, {
    "name" : "public char getGroupingSeparator()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"grouping-separator\" attribute.\n   * grouping-separator specifies the character used as a grouping\n   * (e.g. thousands) separator; the default value is the comma character (,).\n   *\n   * @return Character to use a grouping separator \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setInfinity(String inf)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"infinity\" attribute.\n   * infinity specifies the string used to represent infinity;\n   * the default value is the string Infinity.\n   *\n   * @param inf String to use as the \"infinity\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getInfinity()",
    "returnType" : "String",
    "comment" : "\n   * Get the \"infinity\" attribute.\n   * infinity specifies the string used to represent infinity;\n   * the default value is the string Infinity.\n   *\n   * @return String to use as the \"infinity\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setMinusSign(char v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"minus-sign\" attribute.\n   * minus-sign specifies the character used as the default minus sign; the\n   * default value is the hyphen-minus character (-, #x2D).\n   *\n   * @param v Character to use as minus sign\n   ",
    "links" : [ ]
  }, {
    "name" : "public char getMinusSign()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"minus-sign\" attribute.\n   * minus-sign specifies the character used as the default minus sign; the\n   * default value is the hyphen-minus character (-, #x2D).\n   *\n   * @return Character to use as minus sign\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNaN(String v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"NaN\" attribute.\n   * NaN specifies the string used to represent the NaN value;\n   * the default value is the string NaN.\n   *\n   * @param v String to use as the \"NaN\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNaN()",
    "returnType" : "String",
    "comment" : "\n   * Get the \"NaN\" attribute.\n   * NaN specifies the string used to represent the NaN value;\n   * the default value is the string NaN.\n   *\n   * @return String to use as the \"NaN\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return the element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPercent(char v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"percent\" attribute.\n   * percent specifies the character used as a percent sign; the default\n   * value is the percent character (%).\n   *\n   * @param v Character to use as percent \n   ",
    "links" : [ ]
  }, {
    "name" : "public char getPercent()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"percent\" attribute.\n   * percent specifies the character used as a percent sign; the default\n   * value is the percent character (%).\n   *\n   * @return Character to use as percent \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPerMille(char v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"per-mille\" attribute.\n   * per-mille specifies the character used as a per mille sign; the default\n   * value is the Unicode per-mille character (#x2030).\n   *\n   * @param v Character to use as per-mille\n   ",
    "links" : [ ]
  }, {
    "name" : "public char getPerMille()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"per-mille\" attribute.\n   * per-mille specifies the character used as a per mille sign; the default\n   * value is the Unicode per-mille character (#x2030).\n   *\n   * @return Character to use as per-mille \n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setZeroDigit(char v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"zero-digit\" attribute.\n   * zero-digit specifies the character used as the digit zero; the default\n   * value is the digit zero (0).\n   *\n   * @param v Character to use as the digit zero\n   ",
    "links" : [ ]
  }, {
    "name" : "public char getZeroDigit()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"zero-digit\" attribute.\n   * zero-digit specifies the character used as the digit zero; the default\n   * value is the digit zero (0).\n   *\n   * @return Character to use as the digit zero\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDigit(char v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"digit\" attribute.\n   * digit specifies the character used for a digit in the format pattern;\n   * the default value is the number sign character (#).\n   *\n   * @param v Character to use for a digit in format pattern\n   ",
    "links" : [ ]
  }, {
    "name" : "public char getDigit()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"digit\" attribute.\n   * digit specifies the character used for a digit in the format pattern;\n   * the default value is the number sign character (#).\n   *\n   * @return Character to use for a digit in format pattern\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPatternSeparator(char v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"pattern-separator\" attribute.\n   * pattern-separator specifies the character used to separate positive\n   * and negative sub patterns in a pattern; the default value is the\n   * semi-colon character (;).\n   *\n   * @param v Character to use as a pattern separator\n   ",
    "links" : [ ]
  }, {
    "name" : "public char getPatternSeparator()",
    "returnType" : "char",
    "comment" : "\n   * Get the \"pattern-separator\" attribute.\n   * pattern-separator specifies the character used to separate positive\n   * and negative sub patterns in a pattern; the default value is the\n   * semi-colon character (;).\n   *\n   * @return Character to use as a pattern separator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root)",
    "returnType" : "void",
    "comment" : "\n   * This function is called to recompose() all of the decimal format properties elements.\n   * \n   * @param root Stylesheet root\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DecimalFormatSymbols getDecimalFormatSymbols()", "public void setName(QName qname)", "public QName getName()", "public void setDecimalSeparator(char ds)", "public char getDecimalSeparator()", "public void setGroupingSeparator(char gs)", "public char getGroupingSeparator()", "public void setInfinity(String inf)", "public String getInfinity()", "public void setMinusSign(char v)", "public char getMinusSign()", "public void setNaN(String v)", "public String getNaN()", "public String getNodeName()", "public void setPercent(char v)", "public char getPercent()", "public void setPerMille(char v)", "public char getPerMille()", "public int getXSLToken()", "public void setZeroDigit(char v)", "public char getZeroDigit()", "public void setDigit(char v)", "public char getDigit()", "public void setPatternSeparator(char v)", "public char getPatternSeparator()", "public void recompose(StylesheetRoot root)" ],
  "variableNames" : [ "serialVersionUID", "m_dfs", "m_qname" ]
}