{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/KeyStoreSpi.java",
  "packageName" : "java.security",
  "className" : "KeyStoreSpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Key engineGetKey(String alias, char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException",
    "returnType" : "Key",
    "comment" : "\n     * Returns the key associated with the given alias, using the given\n     * password to recover it.  The key must have been associated with\n     * the alias by a call to {@code setKeyEntry},\n     * or by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry} or {@code SecretKeyEntry}.\n     *\n     * @param alias the alias name\n     * @param password the password for recovering the key\n     *\n     * @return the requested key, or null if the given alias does not exist\n     * or does not identify a key-related entry.\n     *\n     * @exception NoSuchAlgorithmException if the algorithm for recovering the\n     * key cannot be found\n     * @exception UnrecoverableKeyException if the key cannot be recovered\n     * (e.g., the given password is wrong).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Certificate[] engineGetCertificateChain(String alias)",
    "returnType" : "Certificate[]",
    "comment" : "\n     * Returns the certificate chain associated with the given alias.\n     * The certificate chain must have been associated with the alias\n     * by a call to {@code setKeyEntry},\n     * or by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry}.\n     *\n     * @param alias the alias name\n     *\n     * @return the certificate chain (ordered with the user's certificate first\n     * and the root certificate authority last), or null if the given alias\n     * does not exist or does not contain a certificate chain\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Certificate engineGetCertificate(String alias)",
    "returnType" : "Certificate",
    "comment" : "\n     * Returns the certificate associated with the given alias.\n     *\n     * <p> If the given alias name identifies an entry\n     * created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry},\n     * then the trusted certificate contained in that entry is returned.\n     *\n     * <p> If the given alias name identifies an entry\n     * created by a call to {@code setKeyEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry},\n     * then the first element of the certificate chain in that entry\n     * (if a chain exists) is returned.\n     *\n     * @param alias the alias name\n     *\n     * @return the certificate, or null if the given alias does not exist or\n     * does not contain a certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date engineGetCreationDate(String alias)",
    "returnType" : "Date",
    "comment" : "\n     * Returns the creation date of the entry identified by the given alias.\n     *\n     * @param alias the alias name\n     *\n     * @return the creation date of this entry, or null if the given alias does\n     * not exist\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Assigns the given key to the given alias, protecting it with the given\n     * password.\n     *\n     * <p>If the given key is of type {@code java.security.PrivateKey},\n     * it must be accompanied by a certificate chain certifying the\n     * corresponding public key.\n     *\n     * <p>If the given alias already exists, the keystore information\n     * associated with it is overridden by the given key (and possibly\n     * certificate chain).\n     *\n     * @param alias the alias name\n     * @param key the key to be associated with the alias\n     * @param password the password to protect the key\n     * @param chain the certificate chain for the corresponding public\n     * key (only required if the given key is of type\n     * {@code java.security.PrivateKey}).\n     *\n     * @exception KeyStoreException if the given key cannot be protected, or\n     * this operation fails for some other reason\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Assigns the given key (that has already been protected) to the given\n     * alias.\n     *\n     * <p>If the protected key is of type\n     * {@code java.security.PrivateKey},\n     * it must be accompanied by a certificate chain certifying the\n     * corresponding public key.\n     *\n     * <p>If the given alias already exists, the keystore information\n     * associated with it is overridden by the given key (and possibly\n     * certificate chain).\n     *\n     * @param alias the alias name\n     * @param key the key (in protected format) to be associated with the alias\n     * @param chain the certificate chain for the corresponding public\n     * key (only useful if the protected key is of type\n     * {@code java.security.PrivateKey}).\n     *\n     * @exception KeyStoreException if this operation fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Assigns the given certificate to the given alias.\n     *\n     * <p> If the given alias identifies an existing entry\n     * created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry},\n     * the trusted certificate in the existing entry\n     * is overridden by the given certificate.\n     *\n     * @param alias the alias name\n     * @param cert the certificate\n     *\n     * @exception KeyStoreException if the given alias already exists and does\n     * not identify an entry containing a trusted certificate,\n     * or this operation fails for some other reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void engineDeleteEntry(String alias) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Deletes the entry identified by the given alias from this keystore.\n     *\n     * @param alias the alias name\n     *\n     * @exception KeyStoreException if the entry cannot be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Enumeration<String> engineAliases()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Lists all the alias names of this keystore.\n     *\n     * @return enumeration of the alias names\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean engineContainsAlias(String alias)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given alias exists in this keystore.\n     *\n     * @param alias the alias name\n     *\n     * @return true if the alias exists, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int engineSize()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the number of entries in this keystore.\n     *\n     * @return the number of entries in this keystore\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean engineIsKeyEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the entry identified by the given alias\n     * was created by a call to {@code setKeyEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry} or a {@code SecretKeyEntry}.\n     *\n     * @param alias the alias for the keystore entry to be checked\n     *\n     * @return true if the entry identified by the given alias is a\n     * key-related, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean engineIsCertificateEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the entry identified by the given alias\n     * was created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry}.\n     *\n     * @param alias the alias for the keystore entry to be checked\n     *\n     * @return true if the entry identified by the given alias contains a\n     * trusted certificate, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String engineGetCertificateAlias(Certificate cert)",
    "returnType" : "String",
    "comment" : "\n     * Returns the (alias) name of the first keystore entry whose certificate\n     * matches the given certificate.\n     *\n     * <p>This method attempts to match the given certificate with each\n     * keystore entry. If the entry being considered was\n     * created by a call to {@code setCertificateEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code TrustedCertificateEntry},\n     * then the given certificate is compared to that entry's certificate.\n     *\n     * <p> If the entry being considered was\n     * created by a call to {@code setKeyEntry},\n     * or created by a call to {@code setEntry} with a\n     * {@code PrivateKeyEntry},\n     * then the given certificate is compared to the first\n     * element of that entry's certificate chain.\n     *\n     * @param cert the certificate to match with.\n     *\n     * @return the alias name of the first entry with matching certificate,\n     * or null if no such entry exists in this keystore.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void engineStore(OutputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Stores this keystore to the given output stream, and protects its\n     * integrity with the given password.\n     *\n     * @param stream the output stream to which this keystore is written.\n     * @param password the password to generate the keystore integrity check\n     *\n     * @exception IOException if there was an I/O problem with data\n     * @exception NoSuchAlgorithmException if the appropriate data integrity\n     * algorithm could not be found\n     * @exception CertificateException if any of the certificates included in\n     * the keystore data could not be stored\n     ",
    "links" : [ ]
  }, {
    "name" : "public void engineStore(KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Stores this keystore using the given\n     * {@code KeyStore.LoadStoreParmeter}.\n     *\n     * @param param the {@code KeyStore.LoadStoreParmeter}\n     *          that specifies how to store the keystore,\n     *          which may be {@code null}\n     *\n     * @exception IllegalArgumentException if the given\n     *          {@code KeyStore.LoadStoreParmeter}\n     *          input is not recognized\n     * @exception IOException if there was an I/O problem with data\n     * @exception NoSuchAlgorithmException if the appropriate data integrity\n     *          algorithm could not be found\n     * @exception CertificateException if any of the certificates included in\n     *          the keystore data could not be stored\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void engineLoad(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Loads the keystore from the given input stream.\n     *\n     * <p>A password may be given to unlock the keystore\n     * (e.g. the keystore resides on a hardware token device),\n     * or to check the integrity of the keystore data.\n     * If a password is not given for integrity checking,\n     * then integrity checking is not performed.\n     *\n     * @param stream the input stream from which the keystore is loaded,\n     * or {@code null}\n     * @param password the password used to check the integrity of\n     * the keystore, the password used to unlock the keystore,\n     * or {@code null}\n     *\n     * @exception IOException if there is an I/O or format problem with the\n     * keystore data, if a password is required but not given,\n     * or if the given password was incorrect. If the error is due to a\n     * wrong password, the {@link Throwable#getCause cause} of the\n     * {@code IOException} should be an\n     * {@code UnrecoverableKeyException}\n     * @exception NoSuchAlgorithmException if the algorithm used to check\n     * the integrity of the keystore cannot be found\n     * @exception CertificateException if any of the certificates in the\n     * keystore could not be loaded\n     ",
    "links" : [ "#getCause" ]
  }, {
    "name" : "public void engineLoad(KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "\n     * Loads the keystore using the given\n     * {@code KeyStore.LoadStoreParameter}.\n     *\n     * <p> Note that if this KeyStore has already been loaded, it is\n     * reinitialized and loaded again from the given parameter.\n     *\n     * @param param the {@code KeyStore.LoadStoreParameter}\n     *          that specifies how to load the keystore,\n     *          which may be {@code null}\n     *\n     * @exception IllegalArgumentException if the given\n     *          {@code KeyStore.LoadStoreParameter}\n     *          input is not recognized\n     * @exception IOException if there is an I/O or format problem with the\n     *          keystore data. If the error is due to an incorrect\n     *         {@code ProtectionParameter} (e.g. wrong password)\n     *         the {@link Throwable#getCause cause} of the\n     *         {@code IOException} should be an\n     *         {@code UnrecoverableKeyException}\n     * @exception NoSuchAlgorithmException if the algorithm used to check\n     *          the integrity of the keystore cannot be found\n     * @exception CertificateException if any of the certificates in the\n     *          keystore could not be loaded\n     *\n     * @since 1.5\n     ",
    "links" : [ "#getCause" ]
  }, {
    "name" : " void engineLoad(InputStream stream, KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException",
    "returnType" : "KeyStore.Entry",
    "comment" : "\n     * Gets a {@code KeyStore.Entry} for the specified alias\n     * with the specified protection parameter.\n     *\n     * @param alias get the {@code KeyStore.Entry} for this alias\n     * @param protParam the {@code ProtectionParameter}\n     *          used to protect the {@code Entry},\n     *          which may be {@code null}\n     *\n     * @return the {@code KeyStore.Entry} for the specified alias,\n     *          or {@code null} if there is no such entry\n     *\n     * @exception KeyStoreException if the operation failed\n     * @exception NoSuchAlgorithmException if the algorithm for recovering the\n     *          entry cannot be found\n     * @exception UnrecoverableEntryException if the specified\n     *          {@code protParam} were insufficient or invalid\n     * @exception UnrecoverableKeyException if the entry is a\n     *          {@code PrivateKeyEntry} or {@code SecretKeyEntry}\n     *          and the specified {@code protParam} does not contain\n     *          the information needed to recover the key (e.g. wrong password)\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Saves a {@code KeyStore.Entry} under the specified alias.\n     * The specified protection parameter is used to protect the\n     * {@code Entry}.\n     *\n     * <p> If an entry already exists for the specified alias,\n     * it is overridden.\n     *\n     * @param alias save the {@code KeyStore.Entry} under this alias\n     * @param entry the {@code Entry} to save\n     * @param protParam the {@code ProtectionParameter}\n     *          used to protect the {@code Entry},\n     *          which may be {@code null}\n     *\n     * @exception KeyStoreException if this operation fails\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the keystore {@code Entry} for the specified\n     * {@code alias} is an instance or subclass of the specified\n     * {@code entryClass}.\n     *\n     * @param alias the alias name\n     * @param entryClass the entry class\n     *\n     * @return true if the keystore {@code Entry} for the specified\n     *          {@code alias} is an instance or subclass of the\n     *          specified {@code entryClass}, false otherwise\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean engineProbe(InputStream stream) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Probes the specified input stream to determine whether it contains a\n     * keystore that is supported by this implementation, or not.\n     *\n     * @implSpec\n     * This method returns false by default. Keystore implementations should\n     * override this method to peek at the data stream directly or to use other\n     * content detection mechanisms.\n     *\n     * @param  stream the keystore data to be probed\n     *\n     * @return true if the keystore data is supported, otherwise false\n     *\n     * @throws IOException if there is an I/O problem with the keystore data.\n     * @throws NullPointerException if stream is {@code null}.\n     *\n     * @since 9\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Key engineGetKey(String alias, char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException", "public abstract Certificate[] engineGetCertificateChain(String alias)", "public abstract Certificate engineGetCertificate(String alias)", "public abstract Date engineGetCreationDate(String alias)", "public abstract void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException", "public abstract void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) throws KeyStoreException", "public abstract void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException", "public abstract void engineDeleteEntry(String alias) throws KeyStoreException", "public abstract Enumeration<String> engineAliases()", "public abstract boolean engineContainsAlias(String alias)", "public abstract int engineSize()", "public abstract boolean engineIsKeyEntry(String alias)", "public abstract boolean engineIsCertificateEntry(String alias)", "public abstract String engineGetCertificateAlias(Certificate cert)", "public abstract void engineStore(OutputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineStore(KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException", "public abstract void engineLoad(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineLoad(KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException", " void engineLoad(InputStream stream, KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException", "public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException", "public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException", "public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)", "public boolean engineProbe(InputStream stream) throws IOException" ],
  "variableNames" : [ ]
}