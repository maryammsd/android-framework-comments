{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/PhoneAccount.java",
  "packageName" : "android.telecom",
  "className" : "PhoneAccount",
  "comment" : "\n * Represents a distinct method to place or receive a phone call. Apps which can place calls and\n * want those calls to be integrated into the dialer and in-call UI should build an instance of\n * this class and register it with the system using {@link TelecomManager}.\n * <p>\n * {@link TelecomManager} uses registered {@link PhoneAccount}s to present the user with\n * alternative options when placing a phone call. When building a {@link PhoneAccount}, the app\n * should supply a valid {@link PhoneAccountHandle} that references the connection service\n * implementation Telecom will use to interact with the app.\n ",
  "links" : [ "android.telecom.PhoneAccountHandle", "android.telecom.PhoneAccount", "android.telecom.TelecomManager" ],
  "variables" : [ {
    "name" : "EXTRA_SORT_ORDER",
    "type" : "String",
    "comment" : "\n     * Integer extra which determines the order in which {@link PhoneAccount}s are sorted\n     *\n     * This is an extras key set via {@link Builder#setExtras} which determines the order in which\n     * {@link PhoneAccount}s from the same {@link ConnectionService} are sorted. The accounts\n     * are sorted in ascending order by this key, and this ordering is used to\n     * determine priority when a call can be placed via multiple accounts.\n     *\n     * When multiple {@link PhoneAccount}s are supplied with the same sort order key, no ordering is\n     * guaranteed between those {@link PhoneAccount}s. Additionally, no ordering is guaranteed\n     * between {@link PhoneAccount}s that do not supply this extra, and all such accounts\n     * will be sorted after the accounts that do supply this extra.\n     *\n     * An example of a sort order key is slot index (see {@link TelephonyManager#getSlotIndex()}),\n     * which is the one used by the cell Telephony stack.\n     * @hide\n     ",
    "links" : [ "#setExtras", "android.telecom.PhoneAccount", "android.telephony.TelephonyManager#getSlotIndex()", "android.telecom.ConnectionService" ]
  }, {
    "name" : "EXTRA_CALL_SUBJECT_MAX_LENGTH",
    "type" : "String",
    "comment" : "\n     * {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which determines the\n     * maximum permitted length of a call subject specified via the\n     * {@link TelecomManager#EXTRA_CALL_SUBJECT} extra on an\n     * {@link android.content.Intent#ACTION_CALL} intent.  Ultimately a {@link ConnectionService} is\n     * responsible for enforcing the maximum call subject length when sending the message, however\n     * this extra is provided so that the user interface can proactively limit the length of the\n     * call subject as the user types it.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "android.content.Intent#ACTION_CALL", "android.telecom.TelecomManager#EXTRA_CALL_SUBJECT", "android.telecom.ConnectionService", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_CALL_SUBJECT_CHARACTER_ENCODING",
    "type" : "String",
    "comment" : "\n     * {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which determines the\n     * character encoding to be used when determining the length of messages.\n     * The user interface can use this when determining the number of characters the user may type\n     * in a call subject.  If empty-string, the call subject message size limit will be enforced on\n     * a 1:1 basis.  That is, each character will count towards the messages size limit as a single\n     * character.  If a character encoding is specified, the message size limit will be based on the\n     * number of bytes in the message per the specified encoding.  See\n     * {@link #EXTRA_CALL_SUBJECT_MAX_LENGTH} for more information on the call subject maximum\n     * length.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#EXTRA_CALL_SUBJECT_MAX_LENGTH", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_ALWAYS_USE_VOIP_AUDIO_MODE",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates that all calls from this {@link PhoneAccount} should be treated as VoIP calls\n     * rather than cellular calls by the Telecom audio handling logic.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_SUPPORTS_HANDOVER_TO",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates whether this {@link PhoneAccount} is capable of supporting a request to handover a\n     * connection (see {@code android.telecom.Call#handoverTo()}) to this {@link PhoneAccount} from\n     * a {@link PhoneAccount} specifying {@link #EXTRA_SUPPORTS_HANDOVER_FROM}.\n     * <p>\n     * A handover request is initiated by the user from the default dialer app to indicate a desire\n     * to handover a call from one {@link PhoneAccount}/{@link ConnectionService} to another.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#EXTRA_SUPPORTS_HANDOVER_FROM", "android.telecom.ConnectionService", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates whether this {@link PhoneAccount} supports using a fallback if video calling is\n     * not available. This extra is for device level support, {@link\n     * android.telephony.CarrierConfigManager#KEY_ALLOW_VIDEO_CALLING_FALLBACK_BOOL} should also\n     * be checked to ensure it is not disabled by individual carrier.\n     *\n     * @hide\n     ",
    "links" : [ "android.telecom.PhoneAccount", "android.telephony.CarrierConfigManager#KEY_ALLOW_VIDEO_CALLING_FALLBACK_BOOL", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_SUPPORTS_HANDOVER_FROM",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates whether this {@link PhoneAccount} is capable of supporting a request to handover a\n     * connection from this {@link PhoneAccount} to another {@link PhoneAccount}.\n     * (see {@code android.telecom.Call#handoverTo()}) which specifies\n     * {@link #EXTRA_SUPPORTS_HANDOVER_TO}.\n     * <p>\n     * A handover request is initiated by the user from the default dialer app to indicate a desire\n     * to handover a call from one {@link PhoneAccount}/{@link ConnectionService} to another.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#EXTRA_SUPPORTS_HANDOVER_TO", "android.telecom.ConnectionService", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_LOG_SELF_MANAGED_CALLS",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates whether a Self-Managed {@link PhoneAccount} should log its calls to the call log.\n     * Self-Managed {@link PhoneAccount}s are responsible for their own notifications, so the system\n     * will not create a notification when a missed call is logged.\n     * <p>\n     * By default, Self-Managed {@link PhoneAccount}s do not log their calls to the call log.\n     * Setting this extra to {@code true} provides a means for them to log their calls.\n     * <p>\n     * Note: Only calls where the {@link Call.Details#getHandle()} {@link Uri#getScheme()} is\n     * {@link #SCHEME_SIP} or {@link #SCHEME_TEL} will be logged at the current time.\n     ",
    "links" : [ "android.net.Uri#getScheme()", "android.telecom.PhoneAccount", "Call.Details#getHandle()", "#SCHEME_TEL", "#SCHEME_SIP", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_PLAY_CALL_RECORDING_TONE",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates whether calls for a {@link PhoneAccount} should generate a \"call recording tone\"\n     * when the user is recording audio on the device.\n     * <p>\n     * The call recording tone is played over the telephony audio stream so that the remote party\n     * has an audible indication that it is possible their call is being recorded using a call\n     * recording app on the device.\n     * <p>\n     * This extra only has an effect for calls placed via Telephony (e.g.\n     * {@link #CAPABILITY_SIM_SUBSCRIPTION}).\n     * <p>\n     * The call recording tone is a 1400 hz tone which repeats every 15 seconds while recording is\n     * in progress.\n     * @hide\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#CAPABILITY_SIM_SUBSCRIPTION", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_SKIP_CALL_FILTERING",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()} which\n     * indicates whether calls for a {@link PhoneAccount} should skip call filtering.\n     * <p>\n     * If not specified, this will default to false; all calls will undergo call filtering unless\n     * specifically exempted (e.g. {@link Connection#PROPERTY_EMERGENCY_CALLBACK_MODE}.) However,\n     * this may be used to skip call filtering when it has already been performed on another device.\n     * @hide\n     ",
    "links" : [ "android.telecom.Connection#PROPERTY_EMERGENCY_CALLBACK_MODE", "android.telecom.PhoneAccount", "android.telecom.PhoneAccount#getExtras()" ]
  }, {
    "name" : "EXTRA_ADD_SELF_MANAGED_CALLS_TO_INCALLSERVICE",
    "type" : "String",
    "comment" : "\n     * Boolean {@link PhoneAccount} extras key (see {@link PhoneAccount#getExtras()}) which\n     * indicates whether a Self-managed {@link PhoneAccount} want to expose its calls to all\n     * {@link InCallService} which declares the metadata\n     * {@link TelecomManager#METADATA_INCLUDE_SELF_MANAGED_CALLS}.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.PhoneAccount", "android.telecom.PhoneAccount#getExtras()", "android.telecom.TelecomManager#METADATA_INCLUDE_SELF_MANAGED_CALLS" ]
  }, {
    "name" : "CAPABILITY_CONNECTION_MANAGER",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} can act as a connection manager for\n     * other connections. The {@link ConnectionService} associated with this {@code PhoneAccount}\n     * will be allowed to manage phone calls including using its own proprietary phone-call\n     * implementation (like VoIP calling) to make calls instead of the telephony stack.\n     * <p>\n     * When a user opts to place a call using the SIM-based telephony stack, the\n     * {@link ConnectionService} associated with this {@code PhoneAccount} will be attempted first\n     * if the user has explicitly selected it to be used as the default connection manager.\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "#getCapabilities", "android.telecom.ConnectionService" ]
  }, {
    "name" : "CAPABILITY_CALL_PROVIDER",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} can make phone calls in place of\n     * traditional SIM-based telephony calls. This account will be treated as a distinct method\n     * for placing calls alongside the traditional SIM-based telephony stack. This flag is\n     * distinct from {@link #CAPABILITY_CONNECTION_MANAGER} in that it is not allowed to manage\n     * or place calls from the built-in telephony stack.\n     * <p>\n     * See {@link #getCapabilities}\n     * <p>\n     ",
    "links" : [ "#getCapabilities", "#CAPABILITY_CONNECTION_MANAGER" ]
  }, {
    "name" : "CAPABILITY_SIM_SUBSCRIPTION",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} represents a built-in PSTN SIM\n     * subscription.\n     * <p>\n     * Only the Android framework can register a {@code PhoneAccount} having this capability.\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "#getCapabilities" ]
  }, {
    "name" : "CAPABILITY_VIDEO_CALLING",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} is currently able to place video calls.\n     * <p>\n     * See also {@link #CAPABILITY_SUPPORTS_VIDEO_CALLING} which indicates whether the\n     * {@code PhoneAccount} supports placing video calls.\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "#getCapabilities", "#CAPABILITY_SUPPORTS_VIDEO_CALLING" ]
  }, {
    "name" : "CAPABILITY_PLACE_EMERGENCY_CALLS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} is capable of placing emergency calls.\n     * By default all PSTN {@code PhoneAccount}s are capable of placing emergency calls.\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "#getCapabilities" ]
  }, {
    "name" : "CAPABILITY_MULTI_USER",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} is capable of being used by all users. This\n     * should only be used by system apps (and will be ignored for all other apps trying to use it).\n     * <p>\n     * See {@link #getCapabilities}\n     * @hide\n     ",
    "links" : [ "#getCapabilities" ]
  }, {
    "name" : "CAPABILITY_CALL_SUBJECT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} supports a subject for Calls.  This means a\n     * caller is able to specify a short subject line for an outgoing call.  A capable receiving\n     * device displays the call subject on the incoming call screen.\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "#getCapabilities" ]
  }, {
    "name" : "CAPABILITY_EMERGENCY_CALLS_ONLY",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@code PhoneAccount} should only be used for emergency calls.\n     * <p>\n     * See {@link #getCapabilities}\n     * @hide\n     ",
    "links" : [ "#getCapabilities" ]
  }, {
    "name" : "CAPABILITY_VIDEO_CALLING_RELIES_ON_PRESENCE",
    "type" : "int",
    "comment" : "\n     * Flag indicating that for this {@code PhoneAccount}, the ability to make a video call to a\n     * number relies on presence.  Should only be set if the {@code PhoneAccount} also has\n     * {@link #CAPABILITY_VIDEO_CALLING}.\n     * <p>\n     * Note: As of Android 12, using the\n     * {@link android.provider.ContactsContract.Data#CARRIER_PRESENCE_VT_CAPABLE} bit on the\n     * {@link android.provider.ContactsContract.Data#CARRIER_PRESENCE} column to indicate whether\n     * a contact's phone number supports video calling has been deprecated and should only be used\n     * on devices where {@link CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL} is set. On newer\n     * devices, applications must use {@link android.telephony.ims.RcsUceAdapter} instead to\n     * determine whether or not a contact's phone number supports carrier video calling.\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "android.telephony.ims.RcsUceAdapter", "#getCapabilities", "android.provider.ContactsContract.Data#CARRIER_PRESENCE_VT_CAPABLE", "android.provider.ContactsContract.Data#CARRIER_PRESENCE", "#CAPABILITY_VIDEO_CALLING", "android.telephony.CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL" ]
  }, {
    "name" : "CAPABILITY_EMERGENCY_VIDEO_CALLING",
    "type" : "int",
    "comment" : "\n     * Flag indicating that for this {@link PhoneAccount}, emergency video calling is allowed.\n     * <p>\n     * When set, Telecom will allow emergency video calls to be placed.  When not set, Telecom will\n     * convert all outgoing video calls to emergency numbers to audio-only.\n     * @hide\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VIDEO_CALLING",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} supports video calling.\n     * This is not an indication that the {@link PhoneAccount} is currently able to make a video\n     * call, but rather that it has the ability to make video calls (but not necessarily at this\n     * time).\n     * <p>\n     * Whether a {@link PhoneAccount} can make a video call is ultimately controlled by\n     * {@link #CAPABILITY_VIDEO_CALLING}, which indicates whether the {@link PhoneAccount} is\n     * currently capable of making a video call.  Consider a case where, for example, a\n     * {@link PhoneAccount} supports making video calls (e.g.\n     * {@link #CAPABILITY_SUPPORTS_VIDEO_CALLING}), but a current lack of network connectivity\n     * prevents video calls from being made (e.g. {@link #CAPABILITY_VIDEO_CALLING}).\n     * <p>\n     * See {@link #getCapabilities}\n     ",
    "links" : [ "#getCapabilities", "android.telecom.PhoneAccount", "#CAPABILITY_VIDEO_CALLING", "#CAPABILITY_SUPPORTS_VIDEO_CALLING" ]
  }, {
    "name" : "CAPABILITY_SELF_MANAGED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} is responsible for managing its own\n     * {@link Connection}s.  This type of {@link PhoneAccount} is ideal for use with standalone\n     * calling apps which do not wish to use the default phone app for {@link Connection} UX,\n     * but which want to leverage the call and audio routing capabilities of the Telecom framework.\n     * <p>\n     * When set, {@link Connection}s created by the self-managed {@link ConnectionService} will not\n     * be surfaced to implementations of the {@link InCallService} API.  Thus it is the\n     * responsibility of a self-managed {@link ConnectionService} to provide a user interface for\n     * its {@link Connection}s.\n     * <p>\n     * Self-managed {@link Connection}s will, however, be displayed on connected Bluetooth devices.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.PhoneAccount", "android.telecom.Connection", "android.telecom.ConnectionService" ]
  }, {
    "name" : "CAPABILITY_RTT",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} is capable of making a call with an\n     * RTT (Real-time text) session.\n     * When set, Telecom will attempt to open an RTT session on outgoing calls that specify\n     * that they should be placed with an RTT session , and the in-call app will be displayed\n     * with text entry fields for RTT. Likewise, the in-call app can request that an RTT\n     * session be opened during a call if this bit is set.\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "CAPABILITY_EMERGENCY_PREFERRED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} is the preferred SIM subscription for\n     * emergency calls. A {@link PhoneAccount} that sets this capability must also\n     * set the {@link #CAPABILITY_SIM_SUBSCRIPTION} and {@link #CAPABILITY_PLACE_EMERGENCY_CALLS}\n     * capabilities. There must only be one emergency preferred {@link PhoneAccount} on the device.\n     * <p>\n     * When set, Telecom will prefer this {@link PhoneAccount} over others for emergency calling,\n     * even if the emergency call was placed with a specific {@link PhoneAccount} set using the\n     * extra{@link TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE} in\n     * {@link Intent#ACTION_CALL_EMERGENCY} or {@link TelecomManager#placeCall(Uri, Bundle)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#CAPABILITY_SIM_SUBSCRIPTION", "#CAPABILITY_PLACE_EMERGENCY_CALLS", "android.content.Intent#ACTION_CALL_EMERGENCY", "android.telecom.TelecomManager#placeCall(Uri", "android.telecom.TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE" ]
  }, {
    "name" : "CAPABILITY_ADHOC_CONFERENCE_CALLING",
    "type" : "int",
    "comment" : "\n     * An adhoc conference call is established by providing a list of addresses to\n     * {@code TelecomManager#startConference(List<Uri>, int videoState)} where the\n     * {@link ConnectionService} is responsible for connecting all indicated participants\n     * to a conference simultaneously.\n     * This is in contrast to conferences formed by merging calls together (e.g. using\n     * {@link android.telecom.Call#mergeConference()}).\n     ",
    "links" : [ "android.telecom.Call#mergeConference()", "android.telecom.ConnectionService" ]
  }, {
    "name" : "CAPABILITY_CALL_COMPOSER",
    "type" : "int",
    "comment" : "\n     * Flag indicating whether this {@link PhoneAccount} is capable of supporting the call composer\n     * functionality for enriched calls.\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} provides SIM-based voice calls, potentially as\n     * an over-the-top solution such as wi-fi calling.\n     *\n     * <p>Similar to {@link #CAPABILITY_SUPPORTS_VIDEO_CALLING}, this capability indicates this\n     * {@link PhoneAccount} has the ability to make voice calls (but not necessarily at this time).\n     * Whether this {@link PhoneAccount} can make a voice call is ultimately controlled by {@link\n     * #CAPABILITY_VOICE_CALLING_AVAILABLE}, which indicates whether this {@link PhoneAccount} is\n     * currently capable of making a voice call. Consider a case where, for example, a {@link\n     * PhoneAccount} supports making voice calls (e.g. {@link\n     * #CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS}), but a current lack of network connectivity\n     * prevents voice calls from being made (e.g. {@link #CAPABILITY_VOICE_CALLING_AVAILABLE}).\n     *\n     * <p>In order to declare this capability, this {@link PhoneAccount} must also declare {@link\n     * #CAPABILITY_SIM_SUBSCRIPTION} or {@link #CAPABILITY_CONNECTION_MANAGER} and satisfy the\n     * associated requirements.\n     *\n     * @see #CAPABILITY_VOICE_CALLING_AVAILABLE\n     * @see #getCapabilities\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#CAPABILITY_SIM_SUBSCRIPTION", "#CAPABILITY_VOICE_CALLING_AVAILABLE", "#CAPABILITY_CONNECTION_MANAGER", "#CAPABILITY_SUPPORTS_VIDEO_CALLING", "#CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS" ]
  }, {
    "name" : "CAPABILITY_VOICE_CALLING_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} is <em>currently</em> able to place SIM-based\n     * voice calls, similar to {@link #CAPABILITY_VIDEO_CALLING}.\n     *\n     * <p>See also {@link #CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS}, which indicates whether\n     * the {@code PhoneAccount} supports placing SIM-based voice calls or not.\n     *\n     * <p>In order to declare this capability, this {@link PhoneAccount} must also declare {@link\n     * #CAPABILITY_SIM_SUBSCRIPTION} or {@link #CAPABILITY_CONNECTION_MANAGER} and satisfy the\n     * associated requirements.\n     *\n     * @see #CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS\n     * @see #getCapabilities\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#CAPABILITY_SIM_SUBSCRIPTION", "#CAPABILITY_CONNECTION_MANAGER", "#CAPABILITY_VIDEO_CALLING", "#CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS" ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_TRANSACTIONAL_OPERATIONS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this {@link PhoneAccount} supports the use TelecomManager APIs that\n     * utilize {@link android.os.OutcomeReceiver}s or {@link java.util.function.Consumer}s.\n     * Be aware, if this capability is set, {@link #CAPABILITY_SELF_MANAGED} will be amended by\n     * Telecom when this {@link PhoneAccount} is registered via\n     * {@link TelecomManager#registerPhoneAccount(PhoneAccount)}.\n     *\n     * <p>\n     * {@link android.os.OutcomeReceiver}s and {@link java.util.function.Consumer}s represent\n     * transactional operations because the operation can succeed or fail.  An app wishing to use\n     * transactional operations should define behavior for a successful and failed TelecomManager\n     * API call.\n     *\n     * @see #CAPABILITY_SELF_MANAGED\n     * @see #getCapabilities\n     ",
    "links" : [ "java.util.function.Consumer", "android.telecom.TelecomManager#registerPhoneAccount(PhoneAccount)", "android.telecom.PhoneAccount", "#CAPABILITY_SELF_MANAGED", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "CAPABILITY_SUPPORTS_CALL_STREAMING",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this voip app {@link PhoneAccount} supports the call streaming session\n     * to stream call audio to another remote device via streaming app.\n     *\n     * @see #getCapabilities\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "SCHEME_TEL",
    "type" : "String",
    "comment" : "\n     * URI scheme for telephone number URIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHEME_VOICEMAIL",
    "type" : "String",
    "comment" : "\n     * URI scheme for voicemail URIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHEME_SIP",
    "type" : "String",
    "comment" : "\n     * URI scheme for SIP URIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_ICON_TINT",
    "type" : "int",
    "comment" : "\n     * Indicating no icon tint is set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_HIGHLIGHT_COLOR",
    "type" : "int",
    "comment" : "\n     * Indicating no hightlight color is set.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_RESOURCE_ID",
    "type" : "int",
    "comment" : "\n     * Indicating no resource ID is set.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAccountHandle",
    "type" : "PhoneAccountHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionAddress",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHighlightColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedUriSchemes",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedAudioRoutes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroupId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSimultaneousCallingRestriction",
    "type" : "Set<PhoneAccountHandle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PhoneAccount>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Builder builder(PhoneAccountHandle accountHandle, CharSequence label)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder toBuilder()",
    "returnType" : "Builder",
    "comment" : "\n     * Returns a builder initialized with the current {@link PhoneAccount} instance.\n     *\n     * @return The builder.\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "public PhoneAccountHandle getAccountHandle()",
    "returnType" : "PhoneAccountHandle",
    "comment" : "\n     * The unique identifier of this {@code PhoneAccount}.\n     *\n     * @return A {@code PhoneAccountHandle}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getAddress()",
    "returnType" : "Uri",
    "comment" : "\n     * The address (e.g., a phone number) associated with this {@code PhoneAccount}. This\n     * represents the destination from which outgoing calls using this {@code PhoneAccount}\n     * will appear to come, if applicable, and the destination to which incoming calls using this\n     * {@code PhoneAccount} may be addressed.\n     *\n     * @return A address expressed as a {@code Uri}, for example, a phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getSubscriptionAddress()",
    "returnType" : "Uri",
    "comment" : "\n     * The raw callback number used for this {@code PhoneAccount}, as distinct from\n     * {@link #getAddress()}. For the majority of {@code PhoneAccount}s this should be registered\n     * as {@code null}.  It is used by the system for SIM-based {@code PhoneAccount} registration\n     * where {@link android.telephony.TelephonyManager#setLine1NumberForDisplay(String, String)}\n     * has been used to alter the callback number.\n     * <p>\n     *\n     * @return The subscription number, suitable for display to the user.\n     ",
    "links" : [ "#getAddress()", "android.telephony.TelephonyManager#setLine1NumberForDisplay(String" ]
  }, {
    "name" : "public int getCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * The capabilities of this {@code PhoneAccount}.\n     *\n     * @return A bit field of flags describing this {@code PhoneAccount}'s capabilities.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCapabilities(int capability)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if this {@code PhoneAccount} has a capabilities specified by the passed in\n     * bit mask.\n     *\n     * @param capability The capabilities to check.\n     * @return {@code true} if the phone account has the capability.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAudioRoutes(int routes)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if this {@code PhoneAccount} has routes specified by the passed in bit mask.\n     *\n     * @param route The routes to check.\n     * @return {@code true} if the phone account has the routes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * A short label describing a {@code PhoneAccount}.\n     *\n     * @return A label for this {@code PhoneAccount}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getShortDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * A short paragraph describing this {@code PhoneAccount}.\n     *\n     * @return A description for this {@code PhoneAccount}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSupportedUriSchemes()",
    "returnType" : "List<String>",
    "comment" : "\n     * The URI schemes supported by this {@code PhoneAccount}.\n     *\n     * @return The URI schemes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * The extras associated with this {@code PhoneAccount}.\n     * <p>\n     * A {@link ConnectionService} may provide implementation specific information about the\n     * {@link PhoneAccount} via the extras.\n     *\n     * @return The extras.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public int getSupportedAudioRoutes()",
    "returnType" : "int",
    "comment" : "\n     * The audio routes supported by this {@code PhoneAccount}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Icon getIcon()",
    "returnType" : "Icon",
    "comment" : "\n     * The icon to represent this {@code PhoneAccount}.\n     *\n     * @return The icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the user has enabled this {@code PhoneAccount} or not. This value is only\n     * populated for {@code PhoneAccount}s returned by {@link TelecomManager#getPhoneAccount}.\n     *\n     * @return {@code true} if the account is enabled by the user, {@code false} otherwise.\n     ",
    "links" : [ "android.telecom.TelecomManager#getPhoneAccount" ]
  }, {
    "name" : "public String getGroupId()",
    "returnType" : "String",
    "comment" : "\n     * A non-empty {@link String} representing the group that A {@link PhoneAccount} is in or an\n     * empty {@link String} if the {@link PhoneAccount} is not in a group. If this\n     * {@link PhoneAccount} is in a group, this new {@link PhoneAccount} will replace a registered\n     * {@link PhoneAccount} that is in the same group. When the {@link PhoneAccount} is replaced,\n     * its user defined defaults and enabled status will also pass to this new {@link PhoneAccount}.\n     * Only {@link PhoneAccount}s that share the same {@link ConnectionService} can be replaced.\n     *\n     * @return A non-empty String Id if this {@link PhoneAccount} belongs to a group.\n     * @hide\n     ",
    "links" : [ "android.telecom.PhoneAccount", "String", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public boolean supportsUriScheme(String uriScheme)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the {@link PhoneAccount} supports calls to/from addresses with a specified URI\n     * scheme.\n     *\n     * @param uriScheme The URI scheme to check.\n     * @return {@code true} if the {@code PhoneAccount} supports calls to/from addresses with the\n     * specified URI scheme.\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "public int getHighlightColor()",
    "returnType" : "int",
    "comment" : "\n     * A highlight color to use in displaying information about this {@code PhoneAccount}.\n     *\n     * @return A hexadecimal color value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the enabled state of the phone account.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSelfManaged()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the {@link PhoneAccount} is self-managed, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "public Set<PhoneAccountHandle> getSimultaneousCallingRestriction()",
    "returnType" : "Set<PhoneAccountHandle>",
    "comment" : "\n     * If a restriction is set (see {@link #hasSimultaneousCallingRestriction()}), this method\n     * returns the Set of {@link PhoneAccountHandle}s that are allowed to support calls\n     * simultaneously with this {@link PhoneAccount}.\n     * <p>\n     * If this {@link PhoneAccount} is busy with one or more ongoing calls, a restriction is set on\n     * this PhoneAccount (see {@link #hasSimultaneousCallingRestriction()} to check),  and a new\n     * incoming or outgoing call is received or placed on a PhoneAccount that is not in this Set,\n     * Telecom will reject or cancel the pending call in favor of keeping the ongoing call alive.\n     * <p>\n     * Note: Simultaneous calling restrictions can only be placed on {@link PhoneAccount}s that\n     * were registered by the same application. Simultaneous calling across applications is\n     * always possible as long as the {@link Connection} supports hold.\n     *\n     * @return the Set of {@link PhoneAccountHandle}s that this {@link PhoneAccount} supports\n     * simultaneous calls with.\n     * @throws IllegalStateException If there is no restriction set on this {@link PhoneAccount}\n     * and this method is called. Whether or not there is a restriction can be checked using\n     * {@link #hasSimultaneousCallingRestriction()}.\n     ",
    "links" : [ "android.telecom.PhoneAccountHandle", "#hasSimultaneousCallingRestriction()", "android.telecom.PhoneAccount", "android.telecom.Connection" ]
  }, {
    "name" : "public boolean hasSimultaneousCallingRestriction()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not this {@link PhoneAccount} contains a simultaneous calling restriction on it.\n     *\n     * @return {@code true} if this PhoneAccount contains a simultaneous calling restriction,\n     * {@code false} if it does not. Use {@link #getSimultaneousCallingRestriction()} to query which\n     * other {@link PhoneAccount}s support simultaneous calling with this one.\n     * @see #getSimultaneousCallingRestriction() for more information on how the sinultaneous\n     * calling restriction works.\n     ",
    "links" : [ "#getSimultaneousCallingRestriction()", "android.telecom.PhoneAccount" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String capabilitiesToString()",
    "returnType" : "String",
    "comment" : "\n     * Generates a string representation of a capabilities bitmask.\n     *\n     * @return String representation of the capabilities bitmask.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String audioRoutesToString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean areBundlesEqual(Bundle extras, Bundle newExtras)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if two {@link Bundle}s are equal.\n     * @param extras First {@link Bundle} to check.\n     * @param newExtras {@link Bundle} to compare against.\n     * @return {@code true} if the {@link Bundle}s are equal, {@code false} otherwise.\n     ",
    "links" : [ "android.os.Bundle" ]
  } ],
  "methodNames" : [ "public boolean equals(Object o)", "public int hashCode()", "public static Builder builder(PhoneAccountHandle accountHandle, CharSequence label)", "public Builder toBuilder()", "public PhoneAccountHandle getAccountHandle()", "public Uri getAddress()", "public Uri getSubscriptionAddress()", "public int getCapabilities()", "public boolean hasCapabilities(int capability)", "public boolean hasAudioRoutes(int routes)", "public CharSequence getLabel()", "public CharSequence getShortDescription()", "public List<String> getSupportedUriSchemes()", "public Bundle getExtras()", "public int getSupportedAudioRoutes()", "public Icon getIcon()", "public boolean isEnabled()", "public String getGroupId()", "public boolean supportsUriScheme(String uriScheme)", "public int getHighlightColor()", "public void setIsEnabled(boolean isEnabled)", "public boolean isSelfManaged()", "public Set<PhoneAccountHandle> getSimultaneousCallingRestriction()", "public boolean hasSimultaneousCallingRestriction()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public String capabilitiesToString()", "private String audioRoutesToString()", "private static boolean areBundlesEqual(Bundle extras, Bundle newExtras)" ],
  "variableNames" : [ "EXTRA_SORT_ORDER", "EXTRA_CALL_SUBJECT_MAX_LENGTH", "EXTRA_CALL_SUBJECT_CHARACTER_ENCODING", "EXTRA_ALWAYS_USE_VOIP_AUDIO_MODE", "EXTRA_SUPPORTS_HANDOVER_TO", "EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK", "EXTRA_SUPPORTS_HANDOVER_FROM", "EXTRA_LOG_SELF_MANAGED_CALLS", "EXTRA_PLAY_CALL_RECORDING_TONE", "EXTRA_SKIP_CALL_FILTERING", "EXTRA_ADD_SELF_MANAGED_CALLS_TO_INCALLSERVICE", "CAPABILITY_CONNECTION_MANAGER", "CAPABILITY_CALL_PROVIDER", "CAPABILITY_SIM_SUBSCRIPTION", "CAPABILITY_VIDEO_CALLING", "CAPABILITY_PLACE_EMERGENCY_CALLS", "CAPABILITY_MULTI_USER", "CAPABILITY_CALL_SUBJECT", "CAPABILITY_EMERGENCY_CALLS_ONLY", "CAPABILITY_VIDEO_CALLING_RELIES_ON_PRESENCE", "CAPABILITY_EMERGENCY_VIDEO_CALLING", "CAPABILITY_SUPPORTS_VIDEO_CALLING", "CAPABILITY_SELF_MANAGED", "CAPABILITY_RTT", "CAPABILITY_EMERGENCY_PREFERRED", "CAPABILITY_ADHOC_CONFERENCE_CALLING", "CAPABILITY_CALL_COMPOSER", "CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS", "CAPABILITY_VOICE_CALLING_AVAILABLE", "CAPABILITY_SUPPORTS_TRANSACTIONAL_OPERATIONS", "CAPABILITY_SUPPORTS_CALL_STREAMING", "SCHEME_TEL", "SCHEME_VOICEMAIL", "SCHEME_SIP", "NO_ICON_TINT", "NO_HIGHLIGHT_COLOR", "NO_RESOURCE_ID", "mAccountHandle", "mAddress", "mSubscriptionAddress", "mCapabilities", "mHighlightColor", "mLabel", "mShortDescription", "mSupportedUriSchemes", "mSupportedAudioRoutes", "mIcon", "mExtras", "mIsEnabled", "mGroupId", "mSimultaneousCallingRestriction", "CREATOR" ]
}