{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicIntegerArray.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicIntegerArray",
  "comment" : "\n * An {@code int} array in which elements may be updated atomically.\n * See the {@link VarHandle} specification for descriptions of the\n * properties of atomic accesses.\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.lang.invoke.VarHandle" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AA",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "array",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the array.\n     *\n     * @return the length of the array\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int get(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     *\n     * @param i the index\n     * @return the current value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final void set(int i, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the element at index {@code i} to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setVolatile}.\n     *\n     * @param i the index\n     * @param newValue the new value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setVolatile" ]
  }, {
    "name" : "public final void lazySet(int i, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the element at index {@code i} to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final int getAndSet(int i, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the element at index {@code i} to {@code\n     * newValue} and returns the old value,\n     * with memory effects as specified by {@link VarHandle#getAndSet}.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndSet" ]
  }, {
    "name" : "public final boolean compareAndSet(int i, int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the element at index {@code i} to {@code\n     * newValue} if the element's current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#compareAndSet}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSet(int i, int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the element at index {@code i} to\n     * {@code newValue} if the element's current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @deprecated This method has plain memory effects but the method\n     * name implies volatile memory effects (see methods such as\n     * {@link #compareAndExchange} and {@link #compareAndSet}).  To avoid\n     * confusion over plain or volatile memory effects it is recommended that\n     * the method {@link #weakCompareAndSetPlain} be used instead.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @see #weakCompareAndSetPlain\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain", "#compareAndExchange", "#compareAndSet", "#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final boolean weakCompareAndSetPlain(int i, int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the element at index {@code i} to\n     * {@code newValue} if the element's current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final int getAndIncrement(int i)",
    "returnType" : "int",
    "comment" : "\n     * Atomically increments the value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code getAndAdd(i, 1)}.\n     *\n     * @param i the index\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int getAndDecrement(int i)",
    "returnType" : "int",
    "comment" : "\n     * Atomically decrements the value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code getAndAdd(i, -1)}.\n     *\n     * @param i the index\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int getAndAdd(int i, int delta)",
    "returnType" : "int",
    "comment" : "\n     * Atomically adds the given value to the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * @param i the index\n     * @param delta the value to add\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int incrementAndGet(int i)",
    "returnType" : "int",
    "comment" : "\n     * Atomically increments the value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code addAndGet(i, 1)}.\n     *\n     * @param i the index\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int decrementAndGet(int i)",
    "returnType" : "int",
    "comment" : "\n     * Atomically decrements the value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code addAndGet(i, -1)}.\n     *\n     * @param i the index\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int addAndGet(int i, int delta)",
    "returnType" : "int",
    "comment" : "\n     * Atomically adds the given value to the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * @param i the index\n     * @param delta the value to add\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int getAndUpdate(int i, IntUnaryOperator updateFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the element at index {@code i} with\n     * the results of applying the given function, returning the\n     * previous value. The function should be side-effect-free, since\n     * it may be re-applied when attempted updates fail due to\n     * contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final int updateAndGet(int i, IntUnaryOperator updateFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the element at index {@code i} with\n     * the results of applying the given function, returning the\n     * updated value. The function should be side-effect-free, since it\n     * may be re-applied when attempted updates fail due to contention\n     * among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final int getAndAccumulate(int i, int x, IntBinaryOperator accumulatorFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the element at index {@code i} with\n     * the results of applying the given function to the current and\n     * given values, returning the previous value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value of the element at index {@code i}\n     * as its first argument, and the given update as the second\n     * argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final int accumulateAndGet(int i, int x, IntBinaryOperator accumulatorFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the element at index {@code i} with\n     * the results of applying the given function to the current and\n     * given values, returning the updated value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value of the element at index {@code i}\n     * as its first argument, and the given update as the second\n     * argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current values of array.\n     * @return the String representation of the current values of array\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getPlain(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of the element at index {@code i},\n     * with memory semantics of reading as if the variable was declared\n     * non-{@code volatile}.\n     *\n     * @param i the index\n     * @return the value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setPlain(int i, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the element at index {@code i} to {@code newValue},\n     * with memory semantics of setting as if the variable was\n     * declared non-{@code volatile} and non-{@code final}.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getOpaque(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getOpaque}.\n     *\n     * @param i the index\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getOpaque" ]
  }, {
    "name" : "public final void setOpaque(int i, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the element at index {@code i} to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setOpaque}.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setOpaque" ]
  }, {
    "name" : "public final int getAcquire(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of the element at index {@code i},\n     * with memory effects as specified by {@link VarHandle#getAcquire}.\n     *\n     * @param i the index\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAcquire" ]
  }, {
    "name" : "public final void setRelease(int i, int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the element at index {@code i} to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final int compareAndExchange(int i, int expectedValue, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the element at index {@code i} to {@code newValue}\n     * if the element's current value, referred to as the <em>witness\n     * value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchange}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchange" ]
  }, {
    "name" : "public final int compareAndExchangeAcquire(int i, int expectedValue, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the element at index {@code i} to {@code newValue}\n     * if the element's current value, referred to as the <em>witness\n     * value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeAcquire}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeAcquire" ]
  }, {
    "name" : "public final int compareAndExchangeRelease(int i, int expectedValue, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the element at index {@code i} to {@code newValue}\n     * if the element's current value, referred to as the <em>witness\n     * value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeRelease}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeRelease" ]
  }, {
    "name" : "public final boolean weakCompareAndSetVolatile(int i, int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the element at index {@code i} to\n     * {@code newValue} if the element's current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSet}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSetAcquire(int i, int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the element at index {@code i} to\n     * {@code newValue} if the element's current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetAcquire}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetAcquire" ]
  }, {
    "name" : "public final boolean weakCompareAndSetRelease(int i, int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the element at index {@code i} to\n     * {@code newValue} if the element's current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetRelease}.\n     *\n     * @param i the index\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetRelease" ]
  } ],
  "methodNames" : [ "public final int length()", "public final int get(int i)", "public final void set(int i, int newValue)", "public final void lazySet(int i, int newValue)", "public final int getAndSet(int i, int newValue)", "public final boolean compareAndSet(int i, int expectedValue, int newValue)", "public final boolean weakCompareAndSet(int i, int expectedValue, int newValue)", "public final boolean weakCompareAndSetPlain(int i, int expectedValue, int newValue)", "public final int getAndIncrement(int i)", "public final int getAndDecrement(int i)", "public final int getAndAdd(int i, int delta)", "public final int incrementAndGet(int i)", "public final int decrementAndGet(int i)", "public final int addAndGet(int i, int delta)", "public final int getAndUpdate(int i, IntUnaryOperator updateFunction)", "public final int updateAndGet(int i, IntUnaryOperator updateFunction)", "public final int getAndAccumulate(int i, int x, IntBinaryOperator accumulatorFunction)", "public final int accumulateAndGet(int i, int x, IntBinaryOperator accumulatorFunction)", "public String toString()", "public final int getPlain(int i)", "public final void setPlain(int i, int newValue)", "public final int getOpaque(int i)", "public final void setOpaque(int i, int newValue)", "public final int getAcquire(int i)", "public final void setRelease(int i, int newValue)", "public final int compareAndExchange(int i, int expectedValue, int newValue)", "public final int compareAndExchangeAcquire(int i, int expectedValue, int newValue)", "public final int compareAndExchangeRelease(int i, int expectedValue, int newValue)", "public final boolean weakCompareAndSetVolatile(int i, int expectedValue, int newValue)", "public final boolean weakCompareAndSetAcquire(int i, int expectedValue, int newValue)", "public final boolean weakCompareAndSetRelease(int i, int expectedValue, int newValue)" ],
  "variableNames" : [ "serialVersionUID", "AA", "array" ]
}