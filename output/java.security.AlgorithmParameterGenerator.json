{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/AlgorithmParameterGenerator.java",
  "packageName" : "java.security",
  "className" : "AlgorithmParameterGenerator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "paramGenSpi",
    "type" : "AlgorithmParameterGeneratorSpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The algorithm",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the standard name of the algorithm this parameter\n     * generator is associated with.\n     *\n     * @return the string name of the algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AlgorithmParameterGenerator getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "AlgorithmParameterGenerator",
    "comment" : "\n     * Returns an AlgorithmParameterGenerator object for generating\n     * a set of parameters to be used with the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new AlgorithmParameterGenerator object encapsulating the\n     * AlgorithmParameterGeneratorSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the algorithm this\n     * parameter generator is associated with.cc\n     *\n     * @return the new {@code AlgorithmParameterGenerator} object\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports an\n     *         {@code AlgorithmParameterGeneratorSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static AlgorithmParameterGenerator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "AlgorithmParameterGenerator",
    "comment" : "\n     * Returns an AlgorithmParameterGenerator object for generating\n     * a set of parameters to be used with the specified algorithm.\n     *\n     * <p> A new AlgorithmParameterGenerator object encapsulating the\n     * AlgorithmParameterGeneratorSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the algorithm this\n     * parameter generator is associated with.\n     *\n     * @param provider the string name of the Provider.\n     *\n     * @return the new {@code AlgorithmParameterGenerator} object\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if an\n     *         {@code AlgorithmParameterGeneratorSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static AlgorithmParameterGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "AlgorithmParameterGenerator",
    "comment" : "\n     * Returns an AlgorithmParameterGenerator object for generating\n     * a set of parameters to be used with the specified algorithm.\n     *\n     * <p> A new AlgorithmParameterGenerator object encapsulating the\n     * AlgorithmParameterGeneratorSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the string name of the algorithm this\n     * parameter generator is associated with.\n     *\n     * @param provider the {@code Provider} object.\n     *\n     * @return the new {@code AlgorithmParameterGenerator} object\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if an\n     *         {@code AlgorithmParameterGeneratorSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this algorithm parameter generator object.\n     *\n     * @return the provider of this algorithm parameter generator object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(int size)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this parameter generator for a certain size.\n     * To create the parameters, the {@code SecureRandom}\n     * implementation of the highest-priority installed provider is used as\n     * the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * {@code SecureRandom}, a system-provided source of randomness is\n     * used.)\n     *\n     * @param size the size (number of bits).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(int size, SecureRandom random)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this parameter generator for a certain size and source\n     * of randomness.\n     *\n     * @param size the size (number of bits).\n     * @param random the source of randomness.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(AlgorithmParameterSpec genParamSpec) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this parameter generator with a set of algorithm-specific\n     * parameter generation values.\n     * To generate the parameters, the {@code SecureRandom}\n     * implementation of the highest-priority installed provider is used as\n     * the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * {@code SecureRandom}, a system-provided source of randomness is\n     * used.)\n     *\n     * @param genParamSpec the set of algorithm-specific parameter generation values.\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameter\n     * generation values are inappropriate for this parameter generator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(AlgorithmParameterSpec genParamSpec, SecureRandom random) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this parameter generator with a set of algorithm-specific\n     * parameter generation values.\n     *\n     * @param genParamSpec the set of algorithm-specific parameter generation values.\n     * @param random the source of randomness.\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameter\n     * generation values are inappropriate for this parameter generator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AlgorithmParameters generateParameters()",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Generates the parameters.\n     *\n     * @return the new AlgorithmParameters object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getAlgorithm()", "public static AlgorithmParameterGenerator getInstance(String algorithm) throws NoSuchAlgorithmException", "public static AlgorithmParameterGenerator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static AlgorithmParameterGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final void init(int size)", "public final void init(int size, SecureRandom random)", "public final void init(AlgorithmParameterSpec genParamSpec) throws InvalidAlgorithmParameterException", "public final void init(AlgorithmParameterSpec genParamSpec, SecureRandom random) throws InvalidAlgorithmParameterException", "public final AlgorithmParameters generateParameters()" ],
  "variableNames" : [ "provider", "paramGenSpi", "algorithm" ]
}