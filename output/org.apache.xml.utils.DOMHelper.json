{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/DOMHelper.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "DOMHelper",
  "comment" : "\n * @deprecated Since the introduction of the DTM, this class will be removed.\n * This class provides a front-end to DOM implementations, providing\n * a number of utility functions that either aren't yet standardized\n * by the DOM spec or that are defined in optional DOM modules and\n * hence may not be present in all DOMs.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_NSInfos",
    "type" : "Hashtable",
    "comment" : "\n   * An experiment for the moment.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_NSInfoUnProcWithXMLNS",
    "type" : "NSInfo",
    "comment" : " Object to put into the m_NSInfos table that tells that a node has not been \n   *  processed, but has xmlns namespace decls.  ",
    "links" : [ ]
  }, {
    "name" : "m_NSInfoUnProcWithoutXMLNS",
    "type" : "NSInfo",
    "comment" : " Object to put into the m_NSInfos table that tells that a node has not been \n   *  processed, but has no xmlns namespace decls.  ",
    "links" : [ ]
  }, {
    "name" : "m_NSInfoUnProcNoAncestorXMLNS",
    "type" : "NSInfo",
    "comment" : " Object to put into the m_NSInfos table that tells that a node has not been \n   *  processed, and has no xmlns namespace decls, and has no ancestor decls.  ",
    "links" : [ ]
  }, {
    "name" : "m_NSInfoNullWithXMLNS",
    "type" : "NSInfo",
    "comment" : " Object to put into the m_NSInfos table that tells that a node has been \n   *  processed, and has xmlns namespace decls.  ",
    "links" : [ ]
  }, {
    "name" : "m_NSInfoNullWithoutXMLNS",
    "type" : "NSInfo",
    "comment" : " Object to put into the m_NSInfos table that tells that a node has been \n   *  processed, and has no xmlns namespace decls.  ",
    "links" : [ ]
  }, {
    "name" : "m_NSInfoNullNoAncestorXMLNS",
    "type" : "NSInfo",
    "comment" : " Object to put into the m_NSInfos table that tells that a node has been \n   *  processed, and has no xmlns namespace decls. and has no ancestor decls.  ",
    "links" : [ ]
  }, {
    "name" : "m_candidateNoAncestorXMLNS",
    "type" : "Vector",
    "comment" : " Vector of node (odd indexes) and NSInfos (even indexes) that tell if \n   *  the given node is a candidate for ancestor namespace processing.  ",
    "links" : [ ]
  }, {
    "name" : "m_DOMFactory",
    "type" : "Document",
    "comment" : "\n   * The factory object used for creating nodes\n   * in the result tree.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Document createDocument(boolean isSecureProcessing)",
    "returnType" : "Document",
    "comment" : "\n   * DOM Level 1 did not have a standard mechanism for creating a new\n   * Document object. This function provides a DOM-implementation-independent\n   * abstraction for that for that concept. It's typically used when \n   * outputting a new DOM as the result of an operation.\n   * <p>\n   * TODO: This isn't directly compatable with DOM Level 2. \n   * The Level 2 createDocument call also creates the root \n   * element, and thus requires that you know what that element will be\n   * before creating the Document. We should think about whether we want\n   * to change this code, and the callers, so we can use the DOM's own \n   * method. (It's also possible that DOM Level 3 may relax this\n   * sequence, but you may give up some intelligence in the DOM by\n   * doing so; the intent was that knowing the document type and root\n   * element might let the DOM automatically switch to a specialized\n   * subclass for particular kinds of documents.)\n   *\n   * @param isSecureProcessing state of the secure processing feature.\n   * @return The newly created DOM Document object, with no children, or\n   * null if we can't find a DOM implementation that permits creating\n   * new empty Documents.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Document createDocument()",
    "returnType" : "Document",
    "comment" : "\n   * DOM Level 1 did not have a standard mechanism for creating a new\n   * Document object. This function provides a DOM-implementation-independent\n   * abstraction for that for that concept. It's typically used when \n   * outputting a new DOM as the result of an operation.\n   *\n   * @return The newly created DOM Document object, with no children, or\n   * null if we can't find a DOM implementation that permits creating\n   * new empty Documents.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldStripSourceNode(Node textNode) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tells, through the combination of the default-space attribute\n   * on xsl:stylesheet, xsl:strip-space, xsl:preserve-space, and the\n   * xml:space attribute, whether or not extra whitespace should be stripped\n   * from the node.  Literal elements from template elements should\n   * <em>not</em> be tested with this function.\n   * @param textNode A text node from the source tree.\n   * @return true if the text node should be stripped of extra whitespace.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getUniqueID(Node node)",
    "returnType" : "String",
    "comment" : "\n   * Supports the XPath function GenerateID by returning a unique\n   * identifier string for any given DOM Node.\n   * <p>\n   * Warning: The base implementation uses the Node object's hashCode(),\n   * which is NOT guaranteed to be unique. If that method hasn't been\n   * overridden in this DOM ipmlementation, most Java implementions will\n   * derive it from the object's address and should be OK... but if\n   * your DOM uses a different definition of hashCode (eg hashing the\n   * contents of the subtree), or if your DOM may have multiple objects\n   * that represent a single Node in the data structure (eg via proxying),\n   * you may need to find another way to assign a unique identifier.\n   * <p>\n   * Also, be aware that if nodes are destroyed and recreated, there is\n   * an open issue regarding whether an ID may be reused. Currently\n   * we're assuming that the input document is stable for the duration\n   * of the XPath/XSLT operation, so this shouldn't arise in this context.\n   * <p>\n   * (DOM Level 3 is investigating providing a unique node \"key\", but\n   * that won't help Level 1 and Level 2 implementations.)\n   *\n   * @param node whose identifier you want to obtain\n   *\n   * @return a string which should be different for every Node object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNodeAfter(Node node1, Node node2)",
    "returnType" : "boolean",
    "comment" : "\n   * Figure out whether node2 should be considered as being later\n   * in the document than node1, in Document Order as defined\n   * by the XPath model. This may not agree with the ordering defined\n   * by other XML applications.\n   * <p>\n   * There are some cases where ordering isn't defined, and neither are\n   * the results of this function -- though we'll generally return true.\n   * \n   * TODO: Make sure this does the right thing with attribute nodes!!!\n   *\n   * @param node1 DOM Node to perform position comparison on.\n   * @param node2 DOM Node to perform position comparison on .\n   * \n   * @return false if node2 comes before node1, otherwise return true.\n   * You can think of this as \n   * <code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNodeTheSame(Node node1, Node node2)",
    "returnType" : "boolean",
    "comment" : "\n   * Use DTMNodeProxy to determine whether two nodes are the same.\n   * \n   * @param node1 The first DOM node to compare.\n   * @param node2 The second DOM node to compare.\n   * @return true if the two nodes are the same.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isNodeAfterSibling(Node parent, Node child1, Node child2)",
    "returnType" : "boolean",
    "comment" : "\n   * Figure out if child2 is after child1 in document order.\n   * <p>\n   * Warning: Some aspects of \"document order\" are not well defined.\n   * For example, the order of attributes is considered\n   * meaningless in XML, and the order reported by our model will\n   * be consistant for a given invocation but may not \n   * match that of either the source file or the serialized output.\n   * \n   * @param parent Must be the parent of both child1 and child2.\n   * @param child1 Must be the child of parent and not equal to child2.\n   * @param child2 Must be the child of parent and not equal to child1.\n   * @return true if child 2 is after child1 in document order.\n   ",
    "links" : [ ]
  }, {
    "name" : "public short getLevel(Node n)",
    "returnType" : "short",
    "comment" : "\n   * Get the depth level of this node in the tree (equals 1 for\n   * a parentless node).\n   *\n   * @param n Node to be examined.\n   * @return the number of ancestors, plus one\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceForPrefix(String prefix, Element namespaceContext)",
    "returnType" : "String",
    "comment" : "\n   * Given an XML Namespace prefix and a context in which the prefix\n   * is to be evaluated, return the Namespace Name this prefix was \n   * bound to. Note that DOM Level 3 is expected to provide a version of\n   * this which deals with the DOM's \"early binding\" behavior.\n   * \n   * Default handling:\n   *\n   * @param prefix String containing namespace prefix to be resolved, \n   * without the ':' which separates it from the localname when used \n   * in a Node Name. The empty sting signifies the default namespace\n   * at this point in the document.\n   * @param namespaceContext Element which provides context for resolution.\n   * (We could extend this to work for other nodes by first seeking their\n   * nearest Element ancestor.)\n   *\n   * @return a String containing the Namespace URI which this prefix\n   * represents in the specified context.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceOfNode(Node n)",
    "returnType" : "String",
    "comment" : "\n   * Returns the namespace of the given node. Differs from simply getting\n   * the node's prefix and using getNamespaceForPrefix in that it attempts\n   * to cache some of the data in NSINFO objects, to avoid repeated lookup.\n   * TODO: Should we consider moving that logic into getNamespaceForPrefix?\n   *\n   * @param n Node to be examined.\n   *\n   * @return String containing the Namespace Name (uri) for this node.\n   * Note that this is undefined for any nodes other than Elements and\n   * Attributes.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalNameOfNode(Node n)",
    "returnType" : "String",
    "comment" : "\n   * Returns the local name of the given node. If the node's name begins\n   * with a namespace prefix, this is the part after the colon; otherwise\n   * it's the full node name.\n   *\n   * @param n the node to be examined.\n   *\n   * @return String containing the Local Name\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getExpandedElementName(Element elem)",
    "returnType" : "String",
    "comment" : "\n   * Returns the element name with the namespace prefix (if any) replaced\n   * by the Namespace URI it was bound to. This is not a standard \n   * representation of a node name, but it allows convenient \n   * single-string comparison of the \"universal\" names of two nodes.\n   *\n   * @param elem Element to be examined.\n   *\n   * @return String in the form \"namespaceURI:localname\" if the node\n   * belongs to a namespace, or simply \"localname\" if it doesn't.\n   * @see #getExpandedAttributeName\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getExpandedAttributeName(Attr attr)",
    "returnType" : "String",
    "comment" : "\n   * Returns the attribute name with the namespace prefix (if any) replaced\n   * by the Namespace URI it was bound to. This is not a standard \n   * representation of a node name, but it allows convenient \n   * single-string comparison of the \"universal\" names of two nodes.\n   *\n   * @param attr Attr to be examined\n   *\n   * @return String in the form \"namespaceURI:localname\" if the node\n   * belongs to a namespace, or simply \"localname\" if it doesn't.\n   * @see #getExpandedElementName\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIgnorableWhitespace(Text node)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the node is ignorable whitespace. Note that this can\n   * be determined only in the context of a DTD or other Schema,\n   * and that DOM Level 2 has nostandardized DOM API which can\n   * return that information.\n   * @deprecated\n   *\n   * @param node Node to be examined\n   *\n   * @return CURRENTLY HARDCODED TO FALSE, but should return true if\n   * and only if the node is of type Text, contains only whitespace,\n   * and does not appear as part of the #PCDATA content of an element.\n   * (Note that determining this last may require allowing for \n   * Entity References.)\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getRoot(Node node)",
    "returnType" : "Node",
    "comment" : "\n   * Get the first unparented node in the ancestor chain.\n   * @deprecated\n   *\n   * @param node Starting node, to specify which chain to chase\n   *\n   * @return the topmost ancestor.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getRootNode(Node n)",
    "returnType" : "Node",
    "comment" : "\n   * Get the root node of the document tree, regardless of\n   * whether or not the node passed in is a document node.\n   * <p>\n   * TODO: This doesn't handle DocumentFragments or \"orphaned\" subtrees\n   * -- it's currently returning ownerDocument even when the tree is\n   * not actually part of the main Document tree. We should either\n   * rewrite the description to say that it finds the Document node,\n   * or change the code to walk up the ancestor chain.\n\n   *\n   * @param n Node to be examined\n   *\n   * @return the Document node. Note that this is not the correct answer\n   * if n was (or was a child of) a DocumentFragment or an orphaned node,\n   * as can arise if the DOM has been edited rather than being generated\n   * by a parser.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNamespaceNode(Node n)",
    "returnType" : "boolean",
    "comment" : "\n   * Test whether the given node is a namespace decl node. In DOM Level 2\n   * this can be done in a namespace-aware manner, but in Level 1 DOMs\n   * it has to be done by testing the node name.\n   *\n   * @param n Node to be examined.\n   *\n   * @return boolean -- true iff the node is an Attr whose name is \n   * \"xmlns\" or has the \"xmlns:\" prefix.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Node getParentOfNode(Node node) throws RuntimeException",
    "returnType" : "Node",
    "comment" : "\n   * Obtain the XPath-model parent of a DOM node -- ownerElement for Attrs,\n   * parent for other nodes. \n   * <p>\n   * Background: The DOM believes that you must be your Parent's\n   * Child, and thus Attrs don't have parents. XPath said that Attrs\n   * do have their owning Element as their parent. This function\n   * bridges the difference, either by using the DOM Level 2 ownerElement\n   * function or by using a \"silly and expensive function\" in Level 1\n   * DOMs.\n   * <p>\n   * (There's some discussion of future DOMs generalizing ownerElement \n   * into ownerNode and making it work on all types of nodes. This\n   * still wouldn't help the users of Level 1 or Level 2 DOMs)\n   * <p>\n   *\n   * @param node Node whose XPath parent we want to obtain\n   *\n   * @return the parent of the node, or the ownerElement if it's an\n   * Attr node, or null if the node is an orphan.\n   *\n   * @throws RuntimeException if the Document has no root element.\n   * This can't arise if the Document was created\n   * via the DOM Level 2 factory methods, but is possible if other\n   * mechanisms were used to obtain it\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element getElementByID(String id, Document doc)",
    "returnType" : "Element",
    "comment" : "\n   * Given an ID, return the element. This can work only if the document\n   * is interpreted in the context of a DTD or Schema, since otherwise\n   * we don't know which attributes are or aren't IDs.\n   * <p>\n   * Note that DOM Level 1 had no ability to retrieve this information.\n   * DOM Level 2 introduced it but does not promise that it will be\n   * supported in all DOMs; those which can't support it will always\n   * return null.\n   * <p>\n   * TODO: getElementByID is currently unimplemented. Support DOM Level 2?\n   *\n   * @param id The unique identifier to be searched for.\n   * @param doc The document to search within.\n   * @return CURRENTLY HARDCODED TO NULL, but it should be:\n   * The node which has this unique identifier, or null if there\n   * is no such node or this DOM can't reliably recognize it.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getUnparsedEntityURI(String name, Document doc)",
    "returnType" : "String",
    "comment" : "\n   * The getUnparsedEntityURI function returns the URI of the unparsed\n   * entity with the specified name in the same document as the context\n   * node (see [3.3 Unparsed Entities]). It returns the empty string if\n   * there is no such entity.\n   * <p>\n   * XML processors may choose to use the System Identifier (if one\n   * is provided) to resolve the entity, rather than the URI in the\n   * Public Identifier. The details are dependent on the processor, and\n   * we would have to support some form of plug-in resolver to handle\n   * this properly. Currently, we simply return the System Identifier if\n   * present, and hope that it a usable URI or that our caller can\n   * map it to one.\n   * TODO: Resolve Public Identifiers... or consider changing function name.\n   * <p>\n   * If we find a relative URI \n   * reference, XML expects it to be resolved in terms of the base URI \n   * of the document. The DOM doesn't do that for us, and it isn't \n   * entirely clear whether that should be done here; currently that's\n   * pushed up to a higher levelof our application. (Note that DOM Level \n   * 1 didn't store the document's base URI.)\n   * TODO: Consider resolving Relative URIs.\n   * <p>\n   * (The DOM's statement that \"An XML processor may choose to\n   * completely expand entities before the structure model is passed\n   * to the DOM\" refers only to parsed entities, not unparsed, and hence\n   * doesn't affect this function.)\n   *\n   * @param name A string containing the Entity Name of the unparsed\n   * entity.\n   * @param doc Document node for the document to be searched.\n   *\n   * @return String containing the URI of the Unparsed Entity, or an\n   * empty string if no such entity exists.\n   ",
    "links" : [ ]
  }, {
    "name" : "private static Node locateAttrParent(Element elem, Node attr)",
    "returnType" : "Node",
    "comment" : "\n   * Support for getParentOfNode; walks a DOM tree until it finds\n   * the Element which owns the Attr. This is hugely expensive, and\n   * if at all possible you should use the DOM Level 2 Attr.ownerElement()\n   * method instead.\n   *  <p>\n   * The DOM Level 1 developers expected that folks would keep track\n   * of the last Element they'd seen and could recover the info from\n   * that source. Obviously that doesn't work very well if the only\n   * information you've been presented with is the Attr. The DOM Level 2\n   * getOwnerElement() method fixes that, but only for Level 2 and\n   * later DOMs.\n   *\n   * @param elem Element whose subtree is to be searched for this Attr\n   * @param attr Attr whose owner is to be located.\n   *\n   * @return the first Element whose attribute list includes the provided\n   * attr. In modern DOMs, this will also be the only such Element. (Early\n   * DOMs had some hope that Attrs might be sharable, but this idea has\n   * been abandoned.)\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDOMFactory(Document domFactory)",
    "returnType" : "void",
    "comment" : "\n   * Store the factory object required to create DOM nodes\n   * in the result tree. In fact, that's just the result tree's\n   * Document node...\n   *\n   * @param domFactory The DOM Document Node within whose context\n   * the result tree will be built.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Document getDOMFactory()",
    "returnType" : "Document",
    "comment" : "\n   * Retrieve the factory object required to create DOM nodes\n   * in the result tree.\n   *\n   * @return The result tree's DOM Document Node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static String getNodeData(Node node)",
    "returnType" : "String",
    "comment" : "\n   * Get the textual contents of the node. See\n   * getNodeData(Node,FastStringBuffer) for discussion of how\n   * whitespace nodes are handled.\n   *\n   * @param node DOM Node to be examined\n   * @return String containing a concatenation of all the \n   * textual content within that node. \n   * @see #getNodeData(Node,FastStringBuffer)\n   * \n   ",
    "links" : [ ]
  }, {
    "name" : "public static void getNodeData(Node node, FastStringBuffer buf)",
    "returnType" : "void",
    "comment" : "\n   * Retrieve the text content of a DOM subtree, appending it into a\n   * user-supplied FastStringBuffer object. Note that attributes are\n   * not considered part of the content of an element.\n   * <p>\n   * There are open questions regarding whitespace stripping. \n   * Currently we make no special effort in that regard, since the standard\n   * DOM doesn't yet provide DTD-based information to distinguish\n   * whitespace-in-element-context from genuine #PCDATA. Note that we\n   * should probably also consider xml:space if/when we address this.\n   * DOM Level 3 may solve the problem for us.\n   *\n   * @param node Node whose subtree is to be walked, gathering the\n   * contents of all Text or CDATASection nodes.\n   * @param buf FastStringBuffer into which the contents of the text\n   * nodes are to be concatenated.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Document createDocument(boolean isSecureProcessing)", "public static Document createDocument()", "public boolean shouldStripSourceNode(Node textNode) throws javax.xml.transform.TransformerException", "public String getUniqueID(Node node)", "public static boolean isNodeAfter(Node node1, Node node2)", "public static boolean isNodeTheSame(Node node1, Node node2)", "private static boolean isNodeAfterSibling(Node parent, Node child1, Node child2)", "public short getLevel(Node n)", "public String getNamespaceForPrefix(String prefix, Element namespaceContext)", "public String getNamespaceOfNode(Node n)", "public String getLocalNameOfNode(Node n)", "public String getExpandedElementName(Element elem)", "public String getExpandedAttributeName(Attr attr)", "public boolean isIgnorableWhitespace(Text node)", "public Node getRoot(Node node)", "public Node getRootNode(Node n)", "public boolean isNamespaceNode(Node n)", "public static Node getParentOfNode(Node node) throws RuntimeException", "public Element getElementByID(String id, Document doc)", "public String getUnparsedEntityURI(String name, Document doc)", "private static Node locateAttrParent(Element elem, Node attr)", "public void setDOMFactory(Document domFactory)", "public Document getDOMFactory()", "public static String getNodeData(Node node)", "public static void getNodeData(Node node, FastStringBuffer buf)" ],
  "variableNames" : [ "m_NSInfos", "m_NSInfoUnProcWithXMLNS", "m_NSInfoUnProcWithoutXMLNS", "m_NSInfoUnProcNoAncestorXMLNS", "m_NSInfoNullWithXMLNS", "m_NSInfoNullWithoutXMLNS", "m_NSInfoNullNoAncestorXMLNS", "m_candidateNoAncestorXMLNS", "m_DOMFactory" ]
}