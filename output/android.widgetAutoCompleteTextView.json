{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/AutoCompleteTextView.java",
  "packageName" : "android.widget",
  "className" : "AutoCompleteTextView",
  "comment" : "\n * <p>An editable text view that shows completion suggestions automatically\n * while the user is typing. The list of suggestions is displayed in a drop\n * down menu from which the user can choose an item to replace the content\n * of the edit box with.</p>\n *\n * <p>The drop down can be dismissed at any time by pressing the back key or,\n * if no item is selected in the drop down, by pressing the enter/dpad center\n * key.</p>\n *\n * <p>The list of suggestions is obtained from a data adapter and appears\n * only after a given number of characters defined by\n * {@link #getThreshold() the threshold}.</p>\n *\n * <p>The following code snippet shows how to create a text view which suggests\n * various countries names while the user is typing:</p>\n *\n * <pre class=\"prettyprint\">\n * public class CountriesActivity extends Activity {\n *     protected void onCreate(Bundle icicle) {\n *         super.onCreate(icicle);\n *         setContentView(R.layout.countries);\n *\n *         ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this,\n *                 android.R.layout.simple_dropdown_item_1line, COUNTRIES);\n *         AutoCompleteTextView textView = (AutoCompleteTextView)\n *                 findViewById(R.id.countries_list);\n *         textView.setAdapter(adapter);\n *     }\n *\n *     private static final String[] COUNTRIES = new String[] {\n *         \"Belgium\", \"France\", \"Italy\", \"Germany\", \"Spain\"\n *     };\n * }\n * </pre>\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/controls/text.html\">Text Fields</a>\n * guide.</p>\n *\n * @attr ref android.R.styleable#AutoCompleteTextView_completionHint\n * @attr ref android.R.styleable#AutoCompleteTextView_completionThreshold\n * @attr ref android.R.styleable#AutoCompleteTextView_completionHintView\n * @attr ref android.R.styleable#AutoCompleteTextView_dropDownSelector\n * @attr ref android.R.styleable#AutoCompleteTextView_dropDownAnchor\n * @attr ref android.R.styleable#AutoCompleteTextView_dropDownWidth\n * @attr ref android.R.styleable#AutoCompleteTextView_dropDownHeight\n * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXPAND_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupContext",
    "type" : "Context",
    "comment" : " Context used to inflate the popup window or dialog. ",
    "links" : [ ]
  }, {
    "name" : "mPopup",
    "type" : "ListPopupWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPassThroughClickListener",
    "type" : "PassThroughClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "ListAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilter",
    "type" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownAnchorId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemClickListener",
    "type" : "AdapterView.OnItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemSelectedListener",
    "type" : "AdapterView.OnItemSelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownDismissedOnCompletion",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastKeyCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoCompleteTextWatcher",
    "type" : "MyWatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValidator",
    "type" : "Validator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockCompletion",
    "type" : "boolean",
    "comment" : " Set to true when text is set directly and no filtering shall be performed",
    "links" : [ ]
  }, {
    "name" : "mPopupCanBeUpdated",
    "type" : "boolean",
    "comment" : " Set to false when the list is hidden to prevent asynchronous updates to popup the list again.",
    "links" : [ ]
  }, {
    "name" : "mObserver",
    "type" : "PopupDataSetObserver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnClickListener(OnClickListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onClickImpl()",
    "returnType" : "void",
    "comment" : "\n     * Private hook into the on click event, dispatched from {@link PassThroughClickListener}\n     ",
    "links" : [ "PassThroughClickListener" ]
  }, {
    "name" : "public void setCompletionHint(CharSequence hint)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the optional hint text that is displayed at the bottom of the\n     * the matching list.  This can be used as a cue to the user on how to\n     * best use the list, or to provide extra information.</p>\n     *\n     * @param hint the text to be displayed to the user\n     *\n     * @see #getCompletionHint()\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_completionHint\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCompletionHint()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the optional hint text displayed at the bottom of the the matching list.\n     *\n     * @return The hint text, if any\n     *\n     * @see #setCompletionHint(CharSequence)\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_completionHint\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDropDownWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current width for the auto-complete drop down list.\n     *\n     * This can be a fixed width, or {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}\n     * to fill the screen, or {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}\n     * to fit the width of its anchor view.\n     *\n     * @return the width for the drop down list\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_dropDownWidth\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public void setDropDownWidth(int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current width for the auto-complete drop down list.\n     *\n     * This can be a fixed width, or {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}\n     * to fill the screen, or {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}\n     * to fit the width of its anchor view.\n     *\n     * @param width the width to use\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_dropDownWidth\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public int getDropDownHeight()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the current height for the auto-complete drop down list.\n     *\n     * This can be a fixed width, or {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}\n     * to fill the screen, or {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}\n     * to fit the width of its anchor view.\n     *\n     * @return the height for the drop down list\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_dropDownHeight\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public void setDropDownHeight(int height)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current height for the auto-complete drop down list.\n     *\n     * This can be a fixed width, or {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}\n     * to fill the screen, or {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}\n     * to fit the width of its anchor view.\n     *\n     * @param height the height to use\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_dropDownHeight\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public int getDropDownAnchor()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the id for the view that the auto-complete drop down list is anchored to.</p>\n     *\n     * @return the view's id, or {@link View#NO_ID} if none specified\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_dropDownAnchor\n     ",
    "links" : [ "View#NO_ID" ]
  }, {
    "name" : "public void setDropDownAnchor(int id)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the view to which the auto-complete drop down list should anchor. The view\n     * corresponding to this id will not be loaded until the next time it is needed to avoid\n     * loading a view which is not yet instantiated.</p>\n     *\n     * @param id the id to anchor the drop down list view to\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_dropDownAnchor\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDropDownBackground()",
    "returnType" : "Drawable",
    "comment" : "\n     * <p>Gets the background of the auto-complete drop-down list.</p>\n     *\n     * @return the background drawable\n     *\n     * @attr ref android.R.styleable#PopupWindow_popupBackground\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownBackgroundDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the background of the auto-complete drop-down list.</p>\n     *\n     * @param d the drawable to set as the background\n     *\n     * @attr ref android.R.styleable#PopupWindow_popupBackground\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownBackgroundResource(@DrawableRes int id)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the background of the auto-complete drop-down list.</p>\n     *\n     * @param id the id of the drawable to set as the background\n     *\n     * @attr ref android.R.styleable#PopupWindow_popupBackground\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownVerticalOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the vertical offset used for the auto-complete drop-down list.</p>\n     *\n     * @param offset the vertical offset\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDropDownVerticalOffset()",
    "returnType" : "int",
    "comment" : "\n     * <p>Gets the vertical offset used for the auto-complete drop-down list.</p>\n     *\n     * @return the vertical offset\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownHorizontalOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the horizontal offset used for the auto-complete drop-down list.</p>\n     *\n     * @param offset the horizontal offset\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDropDownHorizontalOffset()",
    "returnType" : "int",
    "comment" : "\n     * <p>Gets the horizontal offset used for the auto-complete drop-down list.</p>\n     *\n     * @return the horizontal offset\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownAnimationStyle(int animationStyle)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the animation style of the auto-complete drop-down list.</p>\n     *\n     * <p>If the drop-down is showing, calling this method will take effect only\n     * the next time the drop-down is shown.</p>\n     *\n     * @param animationStyle animation style to use when the drop-down appears\n     *      and disappears.  Set to -1 for the default animation, 0 for no\n     *      animation, or a resource identifier for an explicit animation.\n     *\n     * @hide Pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDropDownAnimationStyle()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the animation style that is used when the drop-down list appears and disappears\n     * </p>\n     *\n     * @return the animation style that is used when the drop-down list appears and disappears\n     *\n     * @hide Pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDropDownAlwaysVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the drop-down is visible as long as there is {@link #enoughToFilter()}\n     *\n     * @hide Pending API council approval\n     ",
    "links" : [ "#enoughToFilter" ]
  }, {
    "name" : "public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the drop-down should remain visible as long as there is there is\n     * {@link #enoughToFilter()}.  This is useful if an unknown number of results are expected\n     * to show up in the adapter sometime in the future.\n     *\n     * The drop-down will occupy the entire screen below {@link #getDropDownAnchor} regardless\n     * of the size or content of the list.  {@link #getDropDownBackground()} will fill any space\n     * that is not used by the list.\n     *\n     * @param dropDownAlwaysVisible Whether to keep the drop-down visible.\n     *\n     * @hide Pending API council approval\n     ",
    "links" : [ "#enoughToFilter", "#getDropDownAnchor", "#getDropDownBackground" ]
  }, {
    "name" : "public boolean isDropDownDismissedOnCompletion()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the drop-down is dismissed when a suggestion is clicked.\n     *\n     * @hide Pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownDismissedOnCompletion(boolean dropDownDismissedOnCompletion)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the drop-down is dismissed when a suggestion is clicked. This is\n     * true by default.\n     *\n     * @param dropDownDismissedOnCompletion Whether to dismiss the drop-down.\n     *\n     * @hide Pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getThreshold()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the number of characters the user must type before the drop\n     * down list is shown.</p>\n     *\n     * @return the minimum number of characters to type to show the drop down\n     *\n     * @see #setThreshold(int)\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_completionThreshold\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThreshold(int threshold)",
    "returnType" : "void",
    "comment" : "\n     * <p>Specifies the minimum number of characters the user has to type in the\n     * edit box before the drop down list is shown.</p>\n     *\n     * <p>When <code>threshold</code> is less than or equals 0, a threshold of\n     * 1 is applied.</p>\n     *\n     * @param threshold the number of characters to type before the drop down\n     *                  is shown\n     *\n     * @see #getThreshold()\n     *\n     * @attr ref android.R.styleable#AutoCompleteTextView_completionThreshold\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnItemClickListener(AdapterView.OnItemClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the listener that will be notified when the user clicks an item\n     * in the drop down list.</p>\n     *\n     * @param l the item click listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnItemSelectedListener(AdapterView.OnItemSelectedListener l)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the listener that will be notified when the user selects an item\n     * in the drop down list.</p>\n     *\n     * @param l the item selected listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public AdapterView.OnItemClickListener getItemClickListener()",
    "returnType" : "AdapterView.OnItemClickListener",
    "comment" : "\n     * <p>Returns the listener that is notified whenever the user clicks an item\n     * in the drop down list.</p>\n     *\n     * @return the item click listener\n     *\n     * @deprecated Use {@link #getOnItemClickListener()} intead\n     ",
    "links" : [ "#getOnItemClickListener" ]
  }, {
    "name" : "public AdapterView.OnItemSelectedListener getItemSelectedListener()",
    "returnType" : "AdapterView.OnItemSelectedListener",
    "comment" : "\n     * <p>Returns the listener that is notified whenever the user selects an\n     * item in the drop down list.</p>\n     *\n     * @return the item selected listener\n     *\n     * @deprecated Use {@link #getOnItemSelectedListener()} intead\n     ",
    "links" : [ "#getOnItemSelectedListener" ]
  }, {
    "name" : "public AdapterView.OnItemClickListener getOnItemClickListener()",
    "returnType" : "AdapterView.OnItemClickListener",
    "comment" : "\n     * <p>Returns the listener that is notified whenever the user clicks an item\n     * in the drop down list.</p>\n     *\n     * @return the item click listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public AdapterView.OnItemSelectedListener getOnItemSelectedListener()",
    "returnType" : "AdapterView.OnItemSelectedListener",
    "comment" : "\n     * <p>Returns the listener that is notified whenever the user selects an\n     * item in the drop down list.</p>\n     *\n     * @return the item selected listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(final OnDismissListener dismissListener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener that will be invoked whenever the AutoCompleteTextView's\n     * list of completions is dismissed.\n     * @param dismissListener Listener to invoke when completions are dismissed\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListAdapter getAdapter()",
    "returnType" : "ListAdapter",
    "comment" : "\n     * <p>Returns a filterable list adapter used for auto completion.</p>\n     *\n     * @return a data adapter used for auto completion\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdapter(T adapter)",
    "returnType" : "void",
    "comment" : "\n     * <p>Changes the list of data used for auto completion. The provided list\n     * must be a filterable list adapter.</p>\n     *\n     * <p>The caller is still responsible for managing any resources used by the adapter.\n     * Notably, when the AutoCompleteTextView is closed or released, the adapter is not notified.\n     * A common case is the use of {@link android.widget.CursorAdapter}, which\n     * contains a {@link android.database.Cursor} that must be closed.  This can be done\n     * automatically (see\n     * {@link android.app.Activity#startManagingCursor(android.database.Cursor)\n     * startManagingCursor()}),\n     * or by manually closing the cursor when the AutoCompleteTextView is dismissed.</p>\n     *\n     * @param adapter the adapter holding the auto completion data\n     *\n     * @see #getAdapter()\n     * @see android.widget.Filterable\n     * @see android.widget.ListAdapter\n     ",
    "links" : [ "android.widget.CursorAdapter", "android.database.Cursor", "android.app.Activity#startManagingCursor" ]
  }, {
    "name" : "public boolean onKeyPreIme(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean enoughToFilter()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <code>true</code> if the amount of text in the field meets\n     * or exceeds the {@link #getThreshold} requirement.  You can override\n     * this to impose a different standard for when filtering will be\n     * triggered.\n     ",
    "links" : [ "#getThreshold" ]
  }, {
    "name" : " void doBeforeTextChanged()",
    "returnType" : "void",
    "comment" : "\n     * This function is deprecated. Please use {@link #refreshAutoCompleteResults} instead.\n     * Note: Remove {@link #mAutoCompleteTextWatcher} after removing this function.\n     ",
    "links" : [ "#refreshAutoCompleteResults", "#mAutoCompleteTextWatcher" ]
  }, {
    "name" : " void doAfterTextChanged()",
    "returnType" : "void",
    "comment" : "\n     * This function is deprecated. Please use {@link #refreshAutoCompleteResults} instead.\n     * Note: Remove {@link #mAutoCompleteTextWatcher} after removing this function.\n     ",
    "links" : [ "#refreshAutoCompleteResults", "#mAutoCompleteTextWatcher" ]
  }, {
    "name" : "public final void refreshAutoCompleteResults()",
    "returnType" : "void",
    "comment" : "\n     * Refreshes the auto complete results. You usually shouldn't have to manually refresh the\n     * AutoCompleteResults as this is done automatically whenever the text changes. However if the\n     * results are not available and have to be fetched, you can call this function after fetching\n     * the results.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPopupShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether the popup menu is showing.</p>\n     *\n     * @return true if the popup menu is showing, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected CharSequence convertSelectionToString(Object selectedItem)",
    "returnType" : "CharSequence",
    "comment" : "\n     * <p>Converts the selected item from the drop down list into a sequence\n     * of character that can be used in the edit box.</p>\n     *\n     * @param selectedItem the item selected by the user for completion\n     *\n     * @return a sequence of characters representing the selected suggestion\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearListSelection()",
    "returnType" : "void",
    "comment" : "\n     * <p>Clear the list selection.  This may only be temporary, as user input will often bring\n     * it back.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListSelection(int position)",
    "returnType" : "void",
    "comment" : "\n     * Set the position of the dropdown view selection.\n     *\n     * @param position The position to move the selector to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getListSelection()",
    "returnType" : "int",
    "comment" : "\n     * Get the position of the dropdown view selection, if there is one.  Returns\n     * {@link ListView#INVALID_POSITION ListView.INVALID_POSITION} if there is no dropdown or if\n     * there is no selection.\n     *\n     * @return the position of the current selection, if there is one, or\n     * {@link ListView#INVALID_POSITION ListView.INVALID_POSITION} if not.\n     *\n     * @see ListView#getSelectedItemPosition()\n     ",
    "links" : [ "ListView#INVALID_POSITION", "ListView#INVALID_POSITION" ]
  }, {
    "name" : "protected void performFiltering(CharSequence text, int keyCode)",
    "returnType" : "void",
    "comment" : "\n     * <p>Starts filtering the content of the drop down list. The filtering\n     * pattern is the content of the edit box. Subclasses should override this\n     * method to filter with a different pattern, for instance a substring of\n     * <code>text</code>.</p>\n     *\n     * @param text the filtering pattern\n     * @param keyCode the last character inserted in the edit box; beware that\n     * this will be null when text is being added through a soft input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performCompletion()",
    "returnType" : "void",
    "comment" : "\n     * <p>Performs the text completion by converting the selected item from\n     * the drop down list into a string, replacing the text box's content with\n     * this string and finally dismissing the drop down menu.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCommitCompletion(CompletionInfo completion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performCompletion(View selectedView, int position, long id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPerformingCompletion()",
    "returnType" : "boolean",
    "comment" : "\n     * Identifies whether the view is currently performing a text completion, so subclasses\n     * can decide whether to respond to text changed events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharSequence text, boolean filter)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #setText(CharSequence)}, except that it can disable filtering.\n     *\n     * @param filter If <code>false</code>, no filtering will be performed\n     *        as a result of this call.\n     ",
    "links" : [ "#setText" ]
  }, {
    "name" : "protected void replaceText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * <p>Performs the text completion by replacing the current text by the\n     * selected item. Subclasses should override this method to avoid replacing\n     * the whole content of the edit box.</p>\n     *\n     * @param text the selected suggestion in the drop down list\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFilterComplete(int count)",
    "returnType" : "void",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "private void updateDropDownForFilter(int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDisplayHint(int hint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dismissDropDown()",
    "returnType" : "void",
    "comment" : "\n     * <p>Closes the drop down if present on screen.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean setFrame(final int l, int t, final int r, int b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void showDropDownAfterLayout()",
    "returnType" : "void",
    "comment" : "\n     * Issues a runnable to show the dropdown as soon as possible.\n     *\n     * @hide internal used only by SearchDialog\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ensureImeVisible(boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Ensures that the drop down is not obscuring the IME.\n     * @param visible whether the ime should be in front. If false, the ime is pushed to\n     * the background.\n     *\n     * This method is deprecated. Please use the following methods instead.\n     * Use {@link #setInputMethodMode} to ensure that the drop down is not obscuring the IME.\n     * Use {@link #showDropDown()} to show the drop down immediately\n     * A combination of {@link #isDropDownAlwaysVisible()} and {@link #enoughToFilter()} to decide\n     * whether to manually trigger {@link #showDropDown()} or not.\n     *\n     * @hide internal used only here and SearchDialog\n     ",
    "links" : [ "#setInputMethodMode", "#showDropDown", "#isDropDownAlwaysVisible", "#enoughToFilter", "#showDropDown" ]
  }, {
    "name" : "public boolean isInputMethodNotNeeded()",
    "returnType" : "boolean",
    "comment" : "\n     * This method is deprecated. Please use {@link #getInputMethodMode()} instead.\n     *\n     * @hide This API is not being used and can be removed.\n     ",
    "links" : [ "#getInputMethodMode" ]
  }, {
    "name" : "public int getInputMethodMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the input method mode used by the auto complete dropdown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInputMethodMode(@InputMethodMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Use this method to specify when the IME should be displayed. This function can be used to\n     * prevent the dropdown from obscuring the IME.\n     *\n     * @param mode speficies the input method mode. use one of the following values:\n     *\n     * {@link ListPopupWindow#INPUT_METHOD_FROM_FOCUSABLE} IME Displayed if the auto-complete box is\n     * focusable.\n     * {@link ListPopupWindow#INPUT_METHOD_NEEDED} Always display the IME.\n     * {@link ListPopupWindow#INPUT_METHOD_NOT_NEEDED}. The auto-complete suggestions are always\n     * displayed, even if the suggestions cover/hide the input method.\n     ",
    "links" : [ "ListPopupWindow#INPUT_METHOD_FROM_FOCUSABLE", "ListPopupWindow#INPUT_METHOD_NEEDED", "ListPopupWindow#INPUT_METHOD_NOT_NEEDED" ]
  }, {
    "name" : "public void showDropDown()",
    "returnType" : "void",
    "comment" : "\n     * <p>Displays the drop down on screen.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)",
    "returnType" : "void",
    "comment" : "\n     * Forces outside touches to be ignored. Normally if {@link #isDropDownAlwaysVisible()} is\n     * false, we allow outside touch to dismiss the dropdown. If this is set to true, then we\n     * ignore outside touch even when the drop down is not set to always visible.\n     *\n     * @hide used only by SearchDialog\n     ",
    "links" : [ "#isDropDownAlwaysVisible" ]
  }, {
    "name" : "private void buildImeCompletions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setValidator(Validator validator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the validator used to perform text validation.\n     *\n     * @param validator The validator used to validate the text entered in this widget.\n     *\n     * @see #getValidator()\n     * @see #performValidation()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Validator getValidator()",
    "returnType" : "Validator",
    "comment" : "\n     * Returns the Validator set with {@link #setValidator},\n     * or <code>null</code> if it was not set.\n     *\n     * @see #setValidator(android.widget.AutoCompleteTextView.Validator)\n     * @see #performValidation()\n     ",
    "links" : [ "#setValidator" ]
  }, {
    "name" : "public void performValidation()",
    "returnType" : "void",
    "comment" : "\n     * If a validator was set on this view and the current string is not valid,\n     * ask the validator to fix it.\n     *\n     * @see #getValidator()\n     * @see #setValidator(android.widget.AutoCompleteTextView.Validator)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "\n     * Returns the Filter obtained from {@link Filterable#getFilter},\n     * or <code>null</code> if {@link #setAdapter} was not called with\n     * a Filterable.\n     ",
    "links" : [ "Filterable#getFilter", "#setAdapter" ]
  } ],
  "variableNames" : [ "DEBUG", "TAG", "EXPAND_MAX", "mPopupContext", "mPopup", "mPassThroughClickListener", "mHintText", "mHintView", "mHintResource", "mAdapter", "mFilter", "mThreshold", "mDropDownAnchorId", "mItemClickListener", "mItemSelectedListener", "mDropDownDismissedOnCompletion", "mLastKeyCode", "mAutoCompleteTextWatcher", "mValidator", "mBlockCompletion", "mPopupCanBeUpdated", "mObserver" ],
  "methodNames" : [ "public void setOnClickListener(OnClickListener listener)", "private void onClickImpl()", "public void setCompletionHint(CharSequence hint)", "public CharSequence getCompletionHint()", "public int getDropDownWidth()", "public void setDropDownWidth(int width)", "public int getDropDownHeight()", "public void setDropDownHeight(int height)", "public int getDropDownAnchor()", "public void setDropDownAnchor(int id)", "public Drawable getDropDownBackground()", "public void setDropDownBackgroundDrawable(Drawable d)", "public void setDropDownBackgroundResource(@DrawableRes int id)", "public void setDropDownVerticalOffset(int offset)", "public int getDropDownVerticalOffset()", "public void setDropDownHorizontalOffset(int offset)", "public int getDropDownHorizontalOffset()", "public void setDropDownAnimationStyle(int animationStyle)", "public int getDropDownAnimationStyle()", "public boolean isDropDownAlwaysVisible()", "public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)", "public boolean isDropDownDismissedOnCompletion()", "public void setDropDownDismissedOnCompletion(boolean dropDownDismissedOnCompletion)", "public int getThreshold()", "public void setThreshold(int threshold)", "public void setOnItemClickListener(AdapterView.OnItemClickListener l)", "public void setOnItemSelectedListener(AdapterView.OnItemSelectedListener l)", "public AdapterView.OnItemClickListener getItemClickListener()", "public AdapterView.OnItemSelectedListener getItemSelectedListener()", "public AdapterView.OnItemClickListener getOnItemClickListener()", "public AdapterView.OnItemSelectedListener getOnItemSelectedListener()", "public void setOnDismissListener(final OnDismissListener dismissListener)", "public ListAdapter getAdapter()", "public void setAdapter(T adapter)", "public boolean onKeyPreIme(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean enoughToFilter()", " void doBeforeTextChanged()", " void doAfterTextChanged()", "public final void refreshAutoCompleteResults()", "public boolean isPopupShowing()", "protected CharSequence convertSelectionToString(Object selectedItem)", "public void clearListSelection()", "public void setListSelection(int position)", "public int getListSelection()", "protected void performFiltering(CharSequence text, int keyCode)", "public void performCompletion()", "public void onCommitCompletion(CompletionInfo completion)", "private void performCompletion(View selectedView, int position, long id)", "public boolean isPerformingCompletion()", "public void setText(CharSequence text, boolean filter)", "protected void replaceText(CharSequence text)", "public void onFilterComplete(int count)", "private void updateDropDownForFilter(int count)", "public void onWindowFocusChanged(boolean hasWindowFocus)", "protected void onDisplayHint(int hint)", "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void dismissDropDown()", "protected boolean setFrame(final int l, int t, final int r, int b)", "public void showDropDownAfterLayout()", "public void ensureImeVisible(boolean visible)", "public boolean isInputMethodNotNeeded()", "public int getInputMethodMode()", "public void setInputMethodMode(@InputMethodMode int mode)", "public void showDropDown()", "public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)", "private void buildImeCompletions()", "public void setValidator(Validator validator)", "public Validator getValidator()", "public void performValidation()", "protected Filter getFilter()" ]
}