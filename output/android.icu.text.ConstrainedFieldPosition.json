{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/ConstrainedFieldPosition.java",
  "packageName" : "android.icu.text",
  "className" : "ConstrainedFieldPosition",
  "comment" : "\n * Represents a span of a string containing a given field.\n *\n * This class differs from FieldPosition in the following ways:\n *\n *   1. It has information on the field category.\n *   2. It allows you to set constraints to use when iterating over field positions.\n *   3. It is used for the newer FormattedValue APIs.\n *\n * @author sffc\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fConstraint",
    "type" : "ConstraintType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fClassConstraint",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fField",
    "type" : "Field",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fValue",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this ConstrainedFieldPosition to its initial state, as if it were newly created:\n     *\n     * - Removes any constraints that may have been set on the instance.\n     * - Resets the iteration position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void constrainField(Field field)",
    "returnType" : "void",
    "comment" : "\n     * Sets a constraint on the field.\n     *\n     * When this instance of ConstrainedFieldPosition is passed to {@link FormattedValue#nextPosition}, positions are\n     * skipped unless they have the given field.\n     *\n     * Any previously set constraints are cleared.\n     *\n     * For example, to loop over all grouping separators:\n     *\n     * <pre>\n     * ConstrainedFieldPosition cfpos;\n     * cfpos.constrainField(NumberFormat.Field.GROUPING_SEPARATOR);\n     * while (fmtval.nextPosition(cfpos)) {\n     *   // handle the grouping separator position\n     * }\n     * </pre>\n     *\n     * Changing the constraint while in the middle of iterating over a FormattedValue\n     * does not generally have well-defined behavior.\n     *\n     * @param field\n     *            The field to fix when iterating.\n     ",
    "links" : [ "android.icu.text.FormattedValue#nextPosition" ]
  }, {
    "name" : "public void constrainClass(Class<?> classConstraint)",
    "returnType" : "void",
    "comment" : "\n     * Sets a constraint on the field class.\n     *\n     * When this instance of ConstrainedFieldPosition is passed to {@link FormattedValue#nextPosition}, positions are\n     * skipped unless the field is an instance of the class constraint, including subclasses.\n     *\n     * Any previously set constraints are cleared.\n     *\n     * For example, to loop over only the number-related fields:\n     *\n     * <pre>\n     * ConstrainedFieldPosition cfpos;\n     * cfpos.constrainClass(NumberFormat.Field.class);\n     * while (fmtval.nextPosition(cfpos)) {\n     *   // handle the number-related field position\n     * }\n     * </pre>\n     *\n     * @param classConstraint\n     *            The field class to fix when iterating.\n     ",
    "links" : [ "android.icu.text.FormattedValue#nextPosition" ]
  }, {
    "name" : "public void constrainFieldAndValue(Field field, Object fieldValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets a constraint on field and field value.\n     *\n     * When this instance of ConstrainedFieldPosition is passed to {@link FormattedValue#nextPosition}, positions are\n     * skipped unless both the field and the field value are equal.\n     *\n     * Any previously set constraints are cleared.\n     *\n     * For example, to find the span a date interval corresponding to the first date:\n     *\n     * <pre>\n     * ConstrainedFieldPosition cfpos;\n     * cfpos.constrainFieldAndValue(DateIntervalFormat.SpanField.DATE_INTERVAL_SPAN, 0);\n     * while (fmtval.nextPosition(cfpos)) {\n     *   // handle the span of the first date in the date interval\n     * }\n     * </pre>\n     *\n     * @param field The field to fix when iterating.\n     * @param fieldValue The field value to fix when iterating.\n     * @deprecated This API is for technology preview and might be changed or removed in a future release.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.text.FormattedValue#nextPosition" ]
  }, {
    "name" : "public Field getField()",
    "returnType" : "Field",
    "comment" : "\n     * Gets the field for the current position.\n     *\n     * The return value is well-defined and non-null only after\n     * FormattedValue#nextPosition returns true.\n     *\n     * @return The field saved in the instance. See above for null conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStart()",
    "returnType" : "int",
    "comment" : "\n     * Gets the INCLUSIVE start index for the current position.\n     *\n     * The return value is well-defined only after FormattedValue#nextPosition returns true.\n     *\n     * @return The start index saved in the instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLimit()",
    "returnType" : "int",
    "comment" : "\n     * Gets the EXCLUSIVE end index stored for the current position.\n     *\n     * The return value is well-defined only after FormattedValue#nextPosition returns true.\n     *\n     * @return The end index saved in the instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getFieldValue()",
    "returnType" : "Object",
    "comment" : "\n     * Gets the value associated with the current field position. The field value is often not set.\n     *\n     * The return value is well-defined only after FormattedValue#nextPosition returns true.\n     *\n     * @return The value for the current position. Might be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getInt64IterationContext()",
    "returnType" : "long",
    "comment" : "\n     * Gets an int64 that FormattedValue implementations may use for storage.\n     *\n     * The initial value is zero.\n     *\n     * Users of FormattedValue should not need to call this method.\n     *\n     * @return The current iteration context from {@link #setInt64IterationContext}.\n     ",
    "links" : [ "#setInt64IterationContext" ]
  }, {
    "name" : "public void setInt64IterationContext(long context)",
    "returnType" : "void",
    "comment" : "\n     * Sets an int64 that FormattedValue implementations may use for storage.\n     *\n     * Intended to be used by FormattedValue implementations.\n     *\n     * @param context\n     *            The new iteration context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setState(Field field, Object value, int start, int limit)",
    "returnType" : "void",
    "comment" : "\n     * Sets new values for the primary public getters.\n     *\n     * Intended to be used by FormattedValue implementations.\n     *\n     * It is up to the implementation to ensure that the user-requested\n     * constraints are satisfied. This method does not check!\n     *\n     * @param field\n     *            The new field.\n     * @param value\n     *            The new field value. Should be null if there is no value.\n     * @param start\n     *            The new inclusive start index.\n     * @param limit\n     *            The new exclusive end index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesField(Field field, Object fieldValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether a given field and value should be included given the\n     * constraints.\n     *\n     * Intended to be used by FormattedValue implementations.\n     *\n     * @param field The field to test.\n     * @param fieldValue The field value to test. Should be null if there is no value.\n     * @return Whether the field should be included given the constraints.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset()", "public void constrainField(Field field)", "public void constrainClass(Class<?> classConstraint)", "public void constrainFieldAndValue(Field field, Object fieldValue)", "public Field getField()", "public int getStart()", "public int getLimit()", "public Object getFieldValue()", "public long getInt64IterationContext()", "public void setInt64IterationContext(long context)", "public void setState(Field field, Object value, int start, int limit)", "public boolean matchesField(Field field, Object fieldValue)", "public String toString()" ],
  "variableNames" : [ "fConstraint", "fClassConstraint", "fField", "fValue", "fStart", "fLimit", "fContext" ]
}