{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/adselection/AdSelectionConfig.java",
  "packageName" : "android.adservices.adselection",
  "className" : "Builder",
  "comment" : " Builder for {@link AdSelectionConfig} object. ",
  "links" : [ "android.adservices.adselection.AdSelectionConfig" ],
  "variables" : [ {
    "name" : "mSeller",
    "type" : "AdTechIdentifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecisionLogicUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomAudienceBuyers",
    "type" : "List<AdTechIdentifier>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdSelectionSignals",
    "type" : "AdSelectionSignals",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSellerSignals",
    "type" : "AdSelectionSignals",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerBuyerSignals",
    "type" : "Map<AdTechIdentifier, AdSelectionSignals>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuyerSignedContextualAds",
    "type" : "Map<AdTechIdentifier, SignedContextualAds>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustedScoringSignalsUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AdSelectionConfig.Builder setSeller(@NonNull AdTechIdentifier seller)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the seller identifier.\n         *\n         * <p>See {@link #getSeller()} for more details.\n         ",
    "links" : [ "#getSeller()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setDecisionLogicUri(@NonNull Uri decisionLogicUri)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the URI used to fetch decision logic for use in the ad selection process. Decision\n         * URI could be either of the two schemas:\n         *\n         * <ul>\n         *   <li><b>HTTPS:</b> HTTPS URIs have to be absolute URIs where the host matches the {@code\n         *       seller}\n         *   <li><b>Ad Selection Prebuilt:</b> Ad Selection Service URIs follow {@code\n         *       ad-selection-prebuilt://ad-selection/<name>?<script-generation-parameters>} format.\n         *       FLEDGE generates the appropriate JS script without the need for a network call.\n         *       <p>Available prebuilt scripts:\n         *       <ul>\n         *         <li><b>{@code highest-bid-wins} for {@code scoreAds} and {@code\n         *             reportResult}:</b> This JS picks the ad with the highest bid for scoring. For\n         *             reporting, the given URI is parameterized with {@code render_uri} and {@code\n         *             bid}. Below parameter(s) are required to use this prebuilt:\n         *             <ul>\n         *               <li><b>{@code reportingUrl}:</b> Base reporting uri that will be\n         *                   parameterized later with {@code render_uri} and {@code bid}\n         *             </ul>\n         *             <p>Ex. If your base reporting URL is \"https://www.ssp.com\" then, {@code\n         *             ad-selection-prebuilt://ad-selection/highest-bid-wins/?reportingUrl=https://www.ssp.com}\n         *       </ul>\n         * </ul>\n         *\n         * <p>See {@link #getDecisionLogicUri()} for more details.\n         ",
    "links" : [ "#getDecisionLogicUri()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setCustomAudienceBuyers(@NonNull List<AdTechIdentifier> customAudienceBuyers)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the list of allowed buyers.\n         *\n         * <p>See {@link #getCustomAudienceBuyers()} for more details.\n         ",
    "links" : [ "#getCustomAudienceBuyers()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setAdSelectionSignals(@NonNull AdSelectionSignals adSelectionSignals)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the signals provided to buyers during ad selection bid generation.\n         *\n         * <p>If not set, defaults to the empty JSON.\n         *\n         * <p>See {@link #getAdSelectionSignals()} for more details.\n         ",
    "links" : [ "#getAdSelectionSignals()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setSellerSignals(@NonNull AdSelectionSignals sellerSignals)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Set the signals used to modify ad selection results.\n         *\n         * <p>If not set, defaults to the empty JSON.\n         *\n         * <p>See {@link #getSellerSignals()} for more details.\n         ",
    "links" : [ "#getSellerSignals()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setPerBuyerSignals(@NonNull Map<AdTechIdentifier, AdSelectionSignals> perBuyerSignals)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the signals provided by each buyer during ad selection.\n         *\n         * <p>If not set, defaults to an empty map.\n         *\n         * <p>See {@link #getPerBuyerSignals()} for more details.\n         ",
    "links" : [ "#getPerBuyerSignals()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setPerBuyerSignedContextualAds(@NonNull Map<AdTechIdentifier, SignedContextualAds> buyerSignedContextualAds)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the contextual Ads corresponding to each buyer during ad selection.\n         *\n         * <p>If not set, defaults to an empty map.\n         *\n         * <p>See {@link #getPerBuyerSignedContextualAds()} for more details.\n         ",
    "links" : [ "#getPerBuyerSignedContextualAds()" ]
  }, {
    "name" : "public AdSelectionConfig.Builder setTrustedScoringSignalsUri(@NonNull Uri trustedScoringSignalsUri)",
    "returnType" : "AdSelectionConfig.Builder",
    "comment" : "\n         * Sets the URI endpoint of sell-side trusted signal from which creative specific realtime\n         * information can be fetched from.\n         *\n         * <p>If {@link Uri#EMPTY} is passed then network call will be skipped and {@link\n         * AdSelectionSignals#EMPTY} will be passed to ad selection.\n         *\n         * <p>See {@link #getTrustedScoringSignalsUri()} for more details.\n         ",
    "links" : [ "android.adservices.common.AdSelectionSignals#EMPTY", "android.net.Uri#EMPTY", "#getTrustedScoringSignalsUri()" ]
  }, {
    "name" : "public AdSelectionConfig build()",
    "returnType" : "AdSelectionConfig",
    "comment" : "\n         * Builds an {@link AdSelectionConfig} instance.\n         *\n         * @throws NullPointerException if any required params are null\n         ",
    "links" : [ "android.adservices.adselection.AdSelectionConfig" ]
  } ],
  "methodNames" : [ "public AdSelectionConfig.Builder setSeller(@NonNull AdTechIdentifier seller)", "public AdSelectionConfig.Builder setDecisionLogicUri(@NonNull Uri decisionLogicUri)", "public AdSelectionConfig.Builder setCustomAudienceBuyers(@NonNull List<AdTechIdentifier> customAudienceBuyers)", "public AdSelectionConfig.Builder setAdSelectionSignals(@NonNull AdSelectionSignals adSelectionSignals)", "public AdSelectionConfig.Builder setSellerSignals(@NonNull AdSelectionSignals sellerSignals)", "public AdSelectionConfig.Builder setPerBuyerSignals(@NonNull Map<AdTechIdentifier, AdSelectionSignals> perBuyerSignals)", "public AdSelectionConfig.Builder setPerBuyerSignedContextualAds(@NonNull Map<AdTechIdentifier, SignedContextualAds> buyerSignedContextualAds)", "public AdSelectionConfig.Builder setTrustedScoringSignalsUri(@NonNull Uri trustedScoringSignalsUri)", "public AdSelectionConfig build()" ],
  "variableNames" : [ "mSeller", "mDecisionLogicUri", "mCustomAudienceBuyers", "mAdSelectionSignals", "mSellerSignals", "mPerBuyerSignals", "mBuyerSignedContextualAds", "mTrustedScoringSignalsUri" ]
}