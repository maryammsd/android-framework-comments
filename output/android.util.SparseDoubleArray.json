{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/SparseDoubleArray.java",
  "packageName" : "android.util",
  "className" : "SparseDoubleArray",
  "comment" : "\n * SparseDoubleArrays map integers to doubles.  Unlike a normal array of doubles,\n * there can be gaps in the indices.  It is intended to be more memory efficient\n * than using a HashMap to map Integers to Doubles, both because it avoids\n * auto-boxing keys and values and its data structure doesn't rely on an extra entry object\n * for each mapping.\n *\n * <p>Note that this container keeps its mappings in an array data structure,\n * using a binary search to find keys.  The implementation is not intended to be appropriate for\n * data structures\n * that may contain large numbers of items.  It is generally slower than a traditional\n * HashMap, since lookups require a binary search and adds and removes require inserting\n * and deleting entries in the array.  For containers holding up to hundreds of items,\n * the performance difference is not significant, less than 50%.</p>\n *\n * <p>It is possible to iterate over the items in this container using\n * {@link #keyAt(int)} and {@link #valueAt(int)}. Iterating over the keys using\n * <code>keyAt(int)</code> with ascending values of the index will return the\n * keys in ascending order, or the values corresponding to the keys in ascending\n * order in the case of <code>valueAt(int)</code>.</p>\n *\n * @see SparseLongArray\n *\n * @hide\n ",
  "links" : [ "#keyAt(int)", "#valueAt(int)" ],
  "variables" : [ {
    "name" : "mValues",
    "type" : "SparseLongArray",
    "comment" : "\n     * The int->double map, but storing the doubles as longs using\n     * {@link Double#doubleToRawLongBits(double)}.\n     ",
    "links" : [ "#doubleToRawLongBits(double)" ]
  } ],
  "methods" : [ {
    "name" : "public SparseDoubleArray clone()",
    "returnType" : "SparseDoubleArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double get(int key)",
    "returnType" : "double",
    "comment" : "\n     * Gets the double mapped from the specified key, or <code>0</code>\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double get(int key, double valueIfKeyNotFound)",
    "returnType" : "double",
    "comment" : "\n     * Gets the double mapped from the specified key, or the specified value\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(int key, double value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a mapping from the specified key to the specified value,\n     * replacing the previous mapping from the specified key if there\n     * was one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void incrementValue(int key, double summand)",
    "returnType" : "void",
    "comment" : "\n     * Adds a mapping from the specified key to the specified value,\n     * <b>adding</b> its value to the previous mapping from the specified key if there\n     * was one.\n     *\n     * <p>This differs from {@link #put} because instead of replacing any previous value, it adds\n     * (in the numerical sense) to it.\n     ",
    "links" : [ "#put" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : " Returns the number of key-value mappings that this SparseDoubleArray currently stores. ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfKey(int key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index for which {@link #keyAt} would return the\n     * specified key, or a negative number if the specified\n     * key is not mapped.\n     ",
    "links" : [ "#keyAt" ]
  }, {
    "name" : "public int keyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the key from the <code>index</code>th key-value mapping that this\n     * SparseDoubleArray stores.\n     *\n     * @see SparseLongArray#keyAt(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public double valueAt(int index)",
    "returnType" : "double",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the value from the <code>index</code>th key-value mapping that this\n     * SparseDoubleArray stores.\n     *\n     * @see SparseLongArray#valueAt(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setValueAt(int index, double value)",
    "returnType" : "void",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, sets a new\n     * value for the <code>index</code>th key-value mapping that this\n     * SparseDoubleArray stores.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public void removeAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping at the given index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void delete(int key)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping from the specified key, if there was any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all key-value mappings from this SparseDoubleArray.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation composes a string by iterating over its mappings.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SparseDoubleArray clone()", "public double get(int key)", "public double get(int key, double valueIfKeyNotFound)", "public void put(int key, double value)", "public void incrementValue(int key, double summand)", "public int size()", "public int indexOfKey(int key)", "public int keyAt(int index)", "public double valueAt(int index)", "public void setValueAt(int index, double value)", "public void removeAt(int index)", "public void delete(int key)", "public void clear()", "public String toString()" ],
  "variableNames" : [ "mValues" ]
}