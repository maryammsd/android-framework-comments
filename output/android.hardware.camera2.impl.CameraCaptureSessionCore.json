{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/impl/CameraCaptureSessionCore.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "CameraCaptureSessionCore",
  "comment" : "\n * Internal interface for CameraDeviceImpl to CameraCaptureSessionImpl(s) communication\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void replaceSessionClose()",
    "returnType" : "void",
    "comment" : "\n     * Replace this session with another session.\n     *\n     * <p>This is an optimization to avoid unconfiguring and then immediately having to\n     * reconfigure again.</p>\n     *\n     * <p>The semantics are identical to {@link #close}, except that unconfiguring will be skipped.\n     * </p>\n     *\n     * <p>After this call completes, the session will not call any further methods on the camera\n     * device.</p>\n     *\n     * @see CameraCaptureSession#close\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : " CameraDeviceImpl.StateCallbackKK getDeviceStateCallback()",
    "returnType" : "CameraDeviceImpl.StateCallbackKK",
    "comment" : "\n     *\n     * Create an internal state callback, to be invoked on the mDeviceHandler\n     *\n     * <p>It has a few behaviors:\n     * <ul>\n     * <li>Convert device state changes into session state changes.\n     * <li>Keep track of async tasks that the session began (idle, abort).\n     * </ul>\n     * </p>\n     * ",
    "links" : [ ]
  }, {
    "name" : " boolean isAborting()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether currently in mid-abort.\n     *\n     * <p>This is used by the implementation to set the capture failure\n     * reason, in lieu of more accurate error codes from the camera service.\n     * Unsynchronized to avoid deadlocks between simultaneous session->device,\n     * device->session calls.</p>\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " void closeWithoutDraining()",
    "returnType" : "void",
    "comment" : "\n     * Close the capture session without draining the pending requests.\n     *\n     * <p>This is usually used when switching to offline session mode. Depending\n     * on the client input, some of the pending requests will be flushed and some\n     * will remain for further processing. In either case, the regular drain logic\n     * needs to be skipped.</p>\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void replaceSessionClose()", " CameraDeviceImpl.StateCallbackKK getDeviceStateCallback()", " boolean isAborting()", " void closeWithoutDraining()" ],
  "variableNames" : [ ]
}