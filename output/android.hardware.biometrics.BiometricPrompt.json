{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricPrompt.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricPrompt",
  "comment" : "\n * A class that manages a system-provided biometric dialog.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LOGO_DESCRIPTION_CHARACTER_NUMBER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HIDE_DIALOG_DELAY",
    "type" : "int",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_BIOMETRIC_CONFIRMED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_NEGATIVE",
    "type" : "int",
    "comment" : "\n     * Dialog is done animating away after user clicked on the button set via\n     * {@link BiometricPrompt.Builder#setNegativeButton(CharSequence, Executor,\n     * DialogInterface.OnClickListener)}.\n     * @hide\n     ",
    "links" : [ "BiometricPrompt.Builder#setNegativeButton(CharSequence" ]
  }, {
    "name" : "DISMISSED_REASON_USER_CANCEL",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_BIOMETRIC_CONFIRM_NOT_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Authenticated, confirmation not required. Dialog animated away.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_ERROR",
    "type" : "int",
    "comment" : "\n     * Error message shown on SystemUI. When BiometricService receives this, the UI is already\n     * gone.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_SERVER_REQUESTED",
    "type" : "int",
    "comment" : "\n     * Dialog dismissal requested by BiometricService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_CREDENTIAL_CONFIRMED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_CONTENT_VIEW_MORE_OPTIONS",
    "type" : "int",
    "comment" : "\n     * Dialog is done animating away after user clicked on the button set via\n     * {@link PromptContentViewWithMoreOptionsButton.Builder#setMoreOptionsButtonListener(Executor,\n     * DialogInterface.OnClickListener)} )}.\n     *\n     * @hide\n     ",
    "links" : [ "PromptContentViewWithMoreOptionsButton.Builder#setMoreOptionsButtonListener(Executor" ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAuthService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPromptInfo",
    "type" : "PromptInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeButtonInfo",
    "type" : "ButtonInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentViewMoreOptionsButtonInfo",
    "type" : "ButtonInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoObject",
    "type" : "CryptoObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationCallback",
    "type" : "AuthenticationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBiometricServiceReceiver",
    "type" : "IBiometricServiceReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPromptShowing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL",
    "type" : "int",
    "comment" : "\n     * Authentication type reported by {@link AuthenticationResult} when the user authenticated by\n     * entering their device PIN, pattern, or password.\n     ",
    "links" : [ "AuthenticationResult" ]
  }, {
    "name" : "AUTHENTICATION_RESULT_TYPE_BIOMETRIC",
    "type" : "int",
    "comment" : "\n     * Authentication type reported by {@link AuthenticationResult} when the user authenticated by\n     * presenting some form of biometric (e.g. fingerprint or face).\n     ",
    "links" : [ "AuthenticationResult" ]
  } ],
  "methods" : [ {
    "name" : "public int getLogoRes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the drawable resource of the logo for the prompt, as set by\n     * {@link Builder#setLogoRes(int)}. Currently for system applications use only.\n     *\n     * @return The drawable resource of the logo, or -1 if the prompt has no logo resource set.\n     ",
    "links" : [ "#setLogoRes(int)" ]
  }, {
    "name" : "public Bitmap getLogoBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Gets the logo bitmap for the prompt, as set by {@link Builder#setLogoBitmap(Bitmap)}.\n     * Currently for system applications use only.\n     *\n     * @return The logo bitmap of the prompt, or null if the prompt has no logo bitmap set.\n     ",
    "links" : [ "#setLogoBitmap(Bitmap)" ]
  }, {
    "name" : "public String getLogoDescription()",
    "returnType" : "String",
    "comment" : "\n     * Gets the logo description for the prompt, as set by\n     * {@link Builder#setLogoDescription(String)}.\n     * Currently for system applications use only.\n     *\n     * @return The logo description of the prompt, or null if the prompt has no logo description\n     * set.\n     ",
    "links" : [ "#setLogoDescription(String)" ]
  }, {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the title for the prompt, as set by {@link Builder#setTitle(CharSequence)}.\n     * @return The title of the prompt, which is guaranteed to be non-null.\n     ",
    "links" : [ "#setTitle(CharSequence)" ]
  }, {
    "name" : "public boolean shouldUseDefaultTitle()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether to use a default modality-specific title. For internal use only.\n     * @return See {@link Builder#setUseDefaultTitle()}.\n     * @hide\n     ",
    "links" : [ "#setUseDefaultTitle()" ]
  }, {
    "name" : "public CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the subtitle for the prompt, as set by {@link Builder#setSubtitle(CharSequence)}.\n     * @return The subtitle for the prompt, or null if the prompt has no subtitle.\n     ",
    "links" : [ "#setSubtitle(CharSequence)" ]
  }, {
    "name" : "public boolean shouldUseDefaultSubtitle()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether to use a default subtitle. For internal use only.\n     * @return See {@link Builder#setUseDefaultSubtitle()}.\n     * @hide\n     ",
    "links" : [ "#setUseDefaultSubtitle()" ]
  }, {
    "name" : "public CharSequence getDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the description for the prompt, as set by {@link Builder#setDescription(CharSequence)}.\n     * @return The description for the prompt, or null if the prompt has no description.\n     ",
    "links" : [ "#setDescription(CharSequence)" ]
  }, {
    "name" : "public PromptContentView getContentView()",
    "returnType" : "PromptContentView",
    "comment" : "\n     * Gets the content view for the prompt, as set by\n     * {@link Builder#setContentView(PromptContentView)}.\n     *\n     * @return The content view for the prompt, or null if the prompt has no content view.\n     ",
    "links" : [ "#setContentView(PromptContentView)" ]
  }, {
    "name" : "public CharSequence getNegativeButtonText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the negative button text for the prompt, as set by\n     * {@link Builder#setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.\n     * @return The negative button text for the prompt, or null if no negative button text was set.\n     ",
    "links" : [ "#setNegativeButton(CharSequence" ]
  }, {
    "name" : "public boolean isConfirmationRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if explicit user confirmation is required by the prompt, as set by\n     * {@link Builder#setConfirmationRequired(boolean)}.\n     *\n     * @return true if explicit user confirmation is required, or false otherwise.\n     ",
    "links" : [ "#setConfirmationRequired(boolean)" ]
  }, {
    "name" : "public int getAllowedAuthenticators()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type(s) of authenticators that may be invoked by the prompt to authenticate the\n     * user, as set by {@link Builder#setAllowedAuthenticators(int)}.\n     *\n     * @return A bit field representing the type(s) of authenticators that may be invoked by the\n     * prompt (as defined by {@link Authenticators}), or 0 if this field was not set.\n     ",
    "links" : [ "#setAllowedAuthenticators(int)", "android.hardware.biometrics.BiometricManager.Authenticators" ]
  }, {
    "name" : "public List<Integer> getAllowedSensorIds()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * @return The values set by {@link Builder#setAllowedSensorIds(List)}\n     * @hide\n     ",
    "links" : [ "#setAllowedSensorIds(List)" ]
  }, {
    "name" : "public boolean isAllowBackgroundAuthentication()",
    "returnType" : "boolean",
    "comment" : "\n     * @return The value set by {@link Builder#setAllowBackgroundAuthentication(boolean)}\n     * @hide\n     ",
    "links" : [ "#setAllowBackgroundAuthentication(boolean)" ]
  }, {
    "name" : "public void authenticateUser(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Authenticates for the given user.\n     *\n     * @param cancel An object that can be used to cancel authentication\n     * @param executor An executor to handle callback events\n     * @param callback An object to receive authentication events\n     * @param userId The user to authenticate\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long authenticateForOperation(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, long operationId)",
    "returnType" : "long",
    "comment" : "\n     * Authenticates for the given keystore operation.\n     *\n     * @param cancel An object that can be used to cancel authentication\n     * @param executor An executor to handle callback events\n     * @param callback An object to receive authentication events\n     * @param operationId The keystore operation associated with authentication\n     *\n     * @return A requestId that can be used to cancel this operation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticate(@NonNull CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This call warms up the biometric hardware, displays a system-provided dialog, and starts\n     * scanning for a biometric. It terminates when {@link\n     * AuthenticationCallback#onAuthenticationError(int, CharSequence)} is called, when {@link\n     * AuthenticationCallback#onAuthenticationSucceeded( AuthenticationResult)}, or when the user\n     * dismisses the system-provided dialog, at which point the crypto object becomes invalid. This\n     * operation can be canceled by using the provided cancel object. The application will receive\n     * authentication errors through {@link AuthenticationCallback}, and button events through the\n     * corresponding callback set in {@link Builder#setNegativeButton(CharSequence, Executor,\n     * DialogInterface.OnClickListener)}. It is safe to reuse the {@link BiometricPrompt} object,\n     * and calling {@link BiometricPrompt#authenticate(CancellationSignal, Executor,\n     * AuthenticationCallback)} while an existing authentication attempt is occurring will stop the\n     * previous client and start a new authentication. The interrupted client will receive a\n     * cancelled notification through {@link AuthenticationCallback#onAuthenticationError(int,\n     * CharSequence)}.\n     *\n     * <p>Note: Applications generally should not cancel and start authentication in quick\n     * succession. For example, to properly handle authentication across configuration changes, it's\n     * recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so,\n     * the application will not need to cancel/restart authentication during the configuration\n     * change.\n     *\n     * <p>Per the Android CDD, only biometric authenticators that meet or exceed the requirements\n     * for <strong>Strong</strong> are permitted to integrate with Keystore to perform related\n     * cryptographic operations. Therefore, it is an error to call this method after explicitly\n     * calling {@link Builder#setAllowedAuthenticators(int)} with any biometric strength other than\n     * {@link Authenticators#BIOMETRIC_STRONG}.\n     *\n     * @throws IllegalArgumentException If any argument is null, or if the allowed biometric\n     * authenticator strength is explicitly set to {@link Authenticators#BIOMETRIC_WEAK}. Prior to\n     * {@link android.os.Build.VERSION_CODES#R}, this exception is also thrown if\n     * {@link Builder#setDeviceCredentialAllowed(boolean)} was explicitly set to true.\n     *\n     * @param crypto A cryptographic operation to be unlocked after successful authentication.\n     * @param cancel An object that can be used to cancel authentication.\n     * @param executor An executor to handle callback events.\n     * @param callback An object to receive authentication events.\n     ",
    "links" : [ "#onAuthenticationError(int", "#setNegativeButton(CharSequence", "android.hardware.biometrics.BiometricPrompt", "#setAllowedAuthenticators(int)", "android.os.Build.VERSION_CODES#R", "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_WEAK", "AuthenticationCallback", "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_STRONG", "#onAuthenticationSucceeded(", "android.hardware.biometrics.BiometricPrompt#authenticate(CancellationSignal", "#setDeviceCredentialAllowed(boolean)" ]
  }, {
    "name" : "public void authenticate(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This call warms up the biometric hardware, displays a system-provided dialog, and starts\n     * scanning for a biometric. It terminates when {@link\n     * AuthenticationCallback#onAuthenticationError(int, CharSequence)} is called, when {@link\n     * AuthenticationCallback#onAuthenticationSucceeded( AuthenticationResult)} is called, or when\n     * the user dismisses the system-provided dialog.  This operation can be canceled by using the\n     * provided cancel object. The application will receive authentication errors through {@link\n     * AuthenticationCallback}, and button events through the corresponding callback set in {@link\n     * Builder#setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.  It is\n     * safe to reuse the {@link BiometricPrompt} object, and calling {@link\n     * BiometricPrompt#authenticate(CancellationSignal, Executor, AuthenticationCallback)} while\n     * an existing authentication attempt is occurring will stop the previous client and start a new\n     * authentication. The interrupted client will receive a cancelled notification through {@link\n     * AuthenticationCallback#onAuthenticationError(int, CharSequence)}.\n     *\n     * <p>Note: Applications generally should not cancel and start authentication in quick\n     * succession. For example, to properly handle authentication across configuration changes, it's\n     * recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so,\n     * the application will not need to cancel/restart authentication during the configuration\n     * change.\n     *\n     * @throws IllegalArgumentException If any of the arguments are null.\n     *\n     * @param cancel An object that can be used to cancel authentication.\n     * @param executor An executor to handle callback events.\n     * @param callback An object to receive authentication events.\n     ",
    "links" : [ "#onAuthenticationError(int", "#setNegativeButton(CharSequence", "android.hardware.biometrics.BiometricPrompt", "AuthenticationCallback", "#onAuthenticationSucceeded(", "android.hardware.biometrics.BiometricPrompt#authenticate(CancellationSignal" ]
  }, {
    "name" : "private void cancelAuthentication(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void authenticateInternal(@Nullable CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long authenticateInternal(long operationId, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCredentialAllowed(@Authenticators.Types int allowedAuthenticators)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLogoRes()", "public Bitmap getLogoBitmap()", "public String getLogoDescription()", "public CharSequence getTitle()", "public boolean shouldUseDefaultTitle()", "public CharSequence getSubtitle()", "public boolean shouldUseDefaultSubtitle()", "public CharSequence getDescription()", "public PromptContentView getContentView()", "public CharSequence getNegativeButtonText()", "public boolean isConfirmationRequired()", "public int getAllowedAuthenticators()", "public List<Integer> getAllowedSensorIds()", "public boolean isAllowBackgroundAuthentication()", "public void authenticateUser(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)", "public long authenticateForOperation(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, long operationId)", "public void authenticate(@NonNull CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)", "public void authenticate(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)", "private void cancelAuthentication(long requestId)", "private void authenticateInternal(@Nullable CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)", "private long authenticateInternal(long operationId, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)", "private static boolean isCredentialAllowed(@Authenticators.Types int allowedAuthenticators)" ],
  "variableNames" : [ "TAG", "MAX_LOGO_DESCRIPTION_CHARACTER_NUMBER", "HIDE_DIALOG_DELAY", "DISMISSED_REASON_BIOMETRIC_CONFIRMED", "DISMISSED_REASON_NEGATIVE", "DISMISSED_REASON_USER_CANCEL", "DISMISSED_REASON_BIOMETRIC_CONFIRM_NOT_REQUIRED", "DISMISSED_REASON_ERROR", "DISMISSED_REASON_SERVER_REQUESTED", "DISMISSED_REASON_CREDENTIAL_CONFIRMED", "DISMISSED_REASON_CONTENT_VIEW_MORE_OPTIONS", "mToken", "mContext", "mService", "mPromptInfo", "mNegativeButtonInfo", "mContentViewMoreOptionsButtonInfo", "mCryptoObject", "mExecutor", "mAuthenticationCallback", "mBiometricServiceReceiver", "mIsPromptShowing", "AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL", "AUTHENTICATION_RESULT_TYPE_BIOMETRIC" ]
}