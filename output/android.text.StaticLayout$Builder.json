{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/StaticLayout.java",
  "packageName" : "android.text",
  "className" : "Builder",
  "comment" : "\n     * Builder for static layouts. The builder is the preferred pattern for constructing\n     * StaticLayout objects and should be preferred over the constructors, particularly to access\n     * newer features. To build a static layout, first call {@link #obtain} with the required\n     * arguments (text, paint, and width), then call setters for optional parameters, and finally\n     * {@link #build} to build the StaticLayout object. Parameters not explicitly set will get\n     * default values.\n     ",
  "links" : [ "#obtain", "#build" ],
  "variables" : [ {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "TextPaint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlignment",
    "type" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextDir",
    "type" : "TextDirectionHeuristic",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpacingMult",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpacingAdd",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludePad",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackLineSpacing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsizedWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsize",
    "type" : "TextUtils.TruncateAt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxLines",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBreakStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHyphenationFrequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftIndents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightIndents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJustificationMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddLastLineLineSpacing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineBreakConfig",
    "type" : "LineBreakConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseBoundsForWidth",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShiftDrawingOffsetForStartOverhang",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCalculateBounds",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumFontMetrics",
    "type" : "Paint.FontMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFontMetricsInt",
    "type" : "Paint.FontMetricsInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<Builder>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Builder obtain(@NonNull CharSequence source, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextPaint paint, @IntRange(from = 0) int width)",
    "returnType" : "Builder",
    "comment" : "\n         * Obtain a builder for constructing StaticLayout objects.\n         *\n         * @param source The text to be laid out, optionally with spans\n         * @param start The index of the start of the text\n         * @param end The index + 1 of the end of the text\n         * @param paint The base paint used for layout\n         * @param width The width in pixels\n         * @return a builder object used for constructing the StaticLayout\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void recycle(@NonNull Builder b)",
    "returnType" : "void",
    "comment" : "\n         * This method should be called after the layout is finished getting constructed and the\n         * builder needs to be cleaned up and returned to the pool.\n         ",
    "links" : [ ]
  }, {
    "name" : " void finish()",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public Builder setText(CharSequence source)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setText(@NonNull CharSequence source, int start, int end)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text. Only useful when re-using the builder, which is done for\n         * the internal implementation of {@link DynamicLayout} but not as part\n         * of normal {@link StaticLayout} usage.\n         *\n         * @param source The text to be laid out, optionally with spans\n         * @param start The index of the start of the text\n         * @param end The index + 1 of the end of the text\n         * @return this builder, useful for chaining\n         *\n         * @hide\n         ",
    "links" : [ "android.text.StaticLayout", "android.text.DynamicLayout" ]
  }, {
    "name" : "public Builder setPaint(@NonNull TextPaint paint)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the paint. Internal for reuse cases only.\n         *\n         * @param paint The base paint used for layout\n         * @return this builder, useful for chaining\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setWidth(@IntRange(from = 0) int width)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the width. Internal for reuse cases only.\n         *\n         * @param width The width in pixels\n         * @return this builder, useful for chaining\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAlignment(@NonNull Alignment alignment)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the alignment. The default is {@link Layout.Alignment#ALIGN_NORMAL}.\n         *\n         * @param alignment Alignment for the resulting {@link StaticLayout}\n         * @return this builder, useful for chaining\n         ",
    "links" : [ "Layout.Alignment#ALIGN_NORMAL", "android.text.StaticLayout" ]
  }, {
    "name" : "public Builder setTextDirection(@NonNull TextDirectionHeuristic textDir)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text direction heuristic. The text direction heuristic is used to\n         * resolve text direction per-paragraph based on the input text. The default is\n         * {@link TextDirectionHeuristics#FIRSTSTRONG_LTR}.\n         *\n         * @param textDir text direction heuristic for resolving bidi behavior.\n         * @return this builder, useful for chaining\n         ",
    "links" : [ "android.text.TextDirectionHeuristics#FIRSTSTRONG_LTR" ]
  }, {
    "name" : "public Builder setLineSpacing(float spacingAdd, @FloatRange(from = 0.0) float spacingMult)",
    "returnType" : "Builder",
    "comment" : "\n         * Set line spacing parameters. Each line will have its line spacing multiplied by\n         * {@code spacingMult} and then increased by {@code spacingAdd}. The default is 0.0 for\n         * {@code spacingAdd} and 1.0 for {@code spacingMult}.\n         *\n         * @param spacingAdd the amount of line spacing addition\n         * @param spacingMult the line spacing multiplier\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setLineSpacing\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIncludePad(boolean includePad)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether to include extra space beyond font ascent and descent (which is\n         * needed to avoid clipping in some languages, such as Arabic and Kannada). The\n         * default is {@code true}.\n         *\n         * @param includePad whether to include padding\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setIncludeFontPadding\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUseLineSpacingFromFallbacks(boolean useLineSpacingFromFallbacks)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether to respect the ascent and descent of the fallback fonts that are used in\n         * displaying the text (which is needed to avoid text from consecutive lines running into\n         * each other). If set, fallback fonts that end up getting used can increase the ascent\n         * and descent of the lines that they are used on.\n         *\n         * <p>For backward compatibility reasons, the default is {@code false}, but setting this to\n         * true is strongly recommended. It is required to be true if text could be in languages\n         * like Burmese or Tibetan where text is typically much taller or deeper than Latin text.\n         *\n         * @param useLineSpacingFromFallbacks whether to expand linespacing based on fallback fonts\n         * @return this builder, useful for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEllipsizedWidth(@IntRange(from = 0) int ellipsizedWidth)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the width as used for ellipsizing purposes, if it differs from the\n         * normal layout width. The default is the {@code width}\n         * passed to {@link #obtain}.\n         *\n         * @param ellipsizedWidth width used for ellipsizing, in pixels\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setEllipsize\n         ",
    "links" : [ "#obtain" ]
  }, {
    "name" : "public Builder setEllipsize(@Nullable TextUtils.TruncateAt ellipsize)",
    "returnType" : "Builder",
    "comment" : "\n         * Set ellipsizing on the layout. Causes words that are longer than the view\n         * is wide, or exceeding the number of lines (see #setMaxLines) in the case\n         * of {@link android.text.TextUtils.TruncateAt#END} or\n         * {@link android.text.TextUtils.TruncateAt#MARQUEE}, to be ellipsized instead\n         * of broken. The default is {@code null}, indicating no ellipsis is to be applied.\n         *\n         * @param ellipsize type of ellipsis behavior\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setEllipsize\n         ",
    "links" : [ "android.text.TextUtils.TruncateAt#END", "android.text.TextUtils.TruncateAt#MARQUEE" ]
  }, {
    "name" : "public Builder setMaxLines(@IntRange(from = 0) int maxLines)",
    "returnType" : "Builder",
    "comment" : "\n         * Set maximum number of lines. This is particularly useful in the case of\n         * ellipsizing, where it changes the layout of the last line. The default is\n         * unlimited.\n         *\n         * @param maxLines maximum number of lines in the layout\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setMaxLines\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBreakStrategy(@BreakStrategy int breakStrategy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set break strategy, useful for selecting high quality or balanced paragraph\n         * layout options. The default is {@link Layout#BREAK_STRATEGY_SIMPLE}.\n         * <p/>\n         * Enabling hyphenation with either using {@link Layout#HYPHENATION_FREQUENCY_NORMAL} or\n         * {@link Layout#HYPHENATION_FREQUENCY_FULL} while line breaking is set to one of\n         * {@link Layout#BREAK_STRATEGY_BALANCED}, {@link Layout#BREAK_STRATEGY_HIGH_QUALITY}\n         * improves the structure of text layout however has performance impact and requires more\n         * time to do the text layout.\n         *\n         * @param breakStrategy break strategy for paragraph layout\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setBreakStrategy\n         * @see #setHyphenationFrequency(int)\n         ",
    "links" : [ "android.text.Layout#BREAK_STRATEGY_SIMPLE", "android.text.Layout#HYPHENATION_FREQUENCY_NORMAL", "android.text.Layout#HYPHENATION_FREQUENCY_FULL", "android.text.Layout#BREAK_STRATEGY_HIGH_QUALITY", "android.text.Layout#BREAK_STRATEGY_BALANCED" ]
  }, {
    "name" : "public Builder setHyphenationFrequency(@HyphenationFrequency int hyphenationFrequency)",
    "returnType" : "Builder",
    "comment" : "\n         * Set hyphenation frequency, to control the amount of automatic hyphenation used. The\n         * possible values are defined in {@link Layout}, by constants named with the pattern\n         * {@code HYPHENATION_FREQUENCY_*}. The default is\n         * {@link Layout#HYPHENATION_FREQUENCY_NONE}.\n         * <p/>\n         * Enabling hyphenation with either using {@link Layout#HYPHENATION_FREQUENCY_NORMAL} or\n         * {@link Layout#HYPHENATION_FREQUENCY_FULL} while line breaking is set to one of\n         * {@link Layout#BREAK_STRATEGY_BALANCED}, {@link Layout#BREAK_STRATEGY_HIGH_QUALITY}\n         * improves the structure of text layout however has performance impact and requires more\n         * time to do the text layout.\n         *\n         * @param hyphenationFrequency hyphenation frequency for the paragraph\n         * @return this builder, useful for chaining\n         * @see android.widget.TextView#setHyphenationFrequency\n         * @see #setBreakStrategy(int)\n         ",
    "links" : [ "android.text.Layout#HYPHENATION_FREQUENCY_NORMAL", "android.text.Layout#HYPHENATION_FREQUENCY_FULL", "android.text.Layout", "android.text.Layout#HYPHENATION_FREQUENCY_NONE", "android.text.Layout#BREAK_STRATEGY_HIGH_QUALITY", "android.text.Layout#BREAK_STRATEGY_BALANCED" ]
  }, {
    "name" : "public Builder setIndents(@Nullable int[] leftIndents, @Nullable int[] rightIndents)",
    "returnType" : "Builder",
    "comment" : "\n         * Set indents. Arguments are arrays holding an indent amount, one per line, measured in\n         * pixels. For lines past the last element in the array, the last element repeats.\n         *\n         * @param leftIndents array of indent values for left margin, in pixels\n         * @param rightIndents array of indent values for right margin, in pixels\n         * @return this builder, useful for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setJustificationMode(@JustificationMode int justificationMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Set paragraph justification mode. The default value is\n         * {@link Layout#JUSTIFICATION_MODE_NONE}. If the last line is too short for justification,\n         * the last line will be displayed with the alignment set by {@link #setAlignment}.\n         * When Justification mode is JUSTIFICATION_MODE_INTER_WORD, wordSpacing on the given\n         * {@link Paint} will be ignored. This behavior also affects Spans which change the\n         * wordSpacing.\n         *\n         * @param justificationMode justification mode for the paragraph.\n         * @return this builder, useful for chaining.\n         * @see Paint#setWordSpacing(float)\n         ",
    "links" : [ "android.text.Layout#JUSTIFICATION_MODE_NONE", "android.graphics.Paint", "#setAlignment" ]
  }, {
    "name" : " Builder setAddLastLineLineSpacing(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether the line spacing should be applied for the last line. Default value is\n         * {@code false}.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLineBreakConfig(@NonNull LineBreakConfig lineBreakConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line break configuration. The line break will be passed to native used for\n         * calculating the text wrapping. The default value of the line break style is\n         * {@link LineBreakConfig#LINE_BREAK_STYLE_NONE}\n         *\n         * @param lineBreakConfig the line break configuration for text wrapping.\n         * @return this builder, useful for chaining.\n         * @see android.widget.TextView#setLineBreakStyle\n         * @see android.widget.TextView#setLineBreakWordStyle\n         ",
    "links" : [ "android.graphics.text.LineBreakConfig#LINE_BREAK_STYLE_NONE" ]
  }, {
    "name" : "public Builder setUseBoundsForWidth(boolean useBoundsForWidth)",
    "returnType" : "Builder",
    "comment" : "\n         * Set true for using width of bounding box as a source of automatic line breaking and\n         * drawing.\n         *\n         * If this value is false, the Layout determines the drawing offset and automatic line\n         * breaking based on total advances. By setting true, use all joined glyph's bounding boxes\n         * as a source of text width.\n         *\n         * If the font has glyphs that have negative bearing X or its xMax is greater than advance,\n         * the glyph clipping can happen because the drawing area may be bigger. By setting this to\n         * true, the Layout will reserve more spaces for drawing.\n         *\n         * @param useBoundsForWidth True for using bounding box, false for advances.\n         * @return this builder instance\n         * @see Layout#getUseBoundsForWidth()\n         * @see Layout.Builder#setUseBoundsForWidth(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShiftDrawingOffsetForStartOverhang(boolean shiftDrawingOffsetForStartOverhang)",
    "returnType" : "Builder",
    "comment" : "\n         * Set true for shifting the drawing x offset for showing overhang at the start position.\n         *\n         * This flag is ignored if the {@link #getUseBoundsForWidth()} is false.\n         *\n         * If this value is false, the Layout draws text from the zero even if there is a glyph\n         * stroke in a region where the x coordinate is negative.\n         *\n         * If this value is true, the Layout draws text with shifting the x coordinate of the\n         * drawing bounding box.\n         *\n         * This value is false by default.\n         *\n         * @param shiftDrawingOffsetForStartOverhang true for shifting the drawing offset for\n         *                                          showing the stroke that is in the region where\n         *                                          the x coordinate is negative.\n         * @see #setUseBoundsForWidth(boolean)\n         * @see #getUseBoundsForWidth()\n         ",
    "links" : [ "#getUseBoundsForWidth()" ]
  }, {
    "name" : "public Builder setCalculateBounds(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Internal API that tells underlying line breaker that calculating bounding boxes even if\n         * the line break is performed with advances. This is useful for DynamicLayout internal\n         * implementation because it uses bounding box as well as advances.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMinimumFontMetrics(@Nullable Paint.FontMetrics minimumFontMetrics)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the minimum font metrics used for line spacing.\n         *\n         * <p>\n         * {@code null} is the default value. If {@code null} is set or left as default, the\n         * font metrics obtained by {@link Paint#getFontMetricsForLocale(Paint.FontMetrics)} is\n         * used.\n         *\n         * <p>\n         * The minimum meaning here is the minimum value of line spacing: maximum value of\n         * {@link Paint#ascent()}, minimum value of {@link Paint#descent()}.\n         *\n         * <p>\n         * By setting this value, each line will have minimum line spacing regardless of the text\n         * rendered. For example, usually Japanese script has larger vertical metrics than Latin\n         * script. By setting the metrics obtained by\n         * {@link Paint#getFontMetricsForLocale(Paint.FontMetrics)} for Japanese or leave it\n         * {@code null} if the Paint's locale is Japanese, the line spacing for Japanese is reserved\n         * if the text is an English text. If the vertical metrics of the text is larger than\n         * Japanese, for example Burmese, the bigger font metrics is used.\n         *\n         * @param minimumFontMetrics A minimum font metrics. Passing {@code null} for using the\n         *                          value obtained by\n         *                          {@link Paint#getFontMetricsForLocale(Paint.FontMetrics)}\n         * @see android.widget.TextView#setMinimumFontMetrics(Paint.FontMetrics)\n         * @see android.widget.TextView#getMinimumFontMetrics()\n         * @see Layout#getMinimumFontMetrics()\n         * @see Layout.Builder#setMinimumFontMetrics(Paint.FontMetrics)\n         * @see DynamicLayout.Builder#setMinimumFontMetrics(Paint.FontMetrics)\n         ",
    "links" : [ "android.graphics.Paint#descent()", "android.graphics.Paint#getFontMetricsForLocale(Paint.FontMetrics)", "android.graphics.Paint#ascent()" ]
  }, {
    "name" : "public StaticLayout build()",
    "returnType" : "StaticLayout",
    "comment" : "\n         * Build the {@link StaticLayout} after options have been set.\n         *\n         * <p>Note: the builder object must not be reused in any way after calling this\n         * method. Setting parameters after calling this method, or calling it a second\n         * time on the same builder object, will likely lead to unexpected results.\n         *\n         * @return the newly constructed {@link StaticLayout} object\n         ",
    "links" : [ "android.text.StaticLayout" ]
  }, {
    "name" : " StaticLayout buildPartialStaticLayoutForDynamicLayout(boolean trackpadding, StaticLayout recycle)",
    "returnType" : "StaticLayout",
    "comment" : " package ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Builder obtain(@NonNull CharSequence source, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextPaint paint, @IntRange(from = 0) int width)", "private static void recycle(@NonNull Builder b)", " void finish()", "public Builder setText(CharSequence source)", "public Builder setText(@NonNull CharSequence source, int start, int end)", "public Builder setPaint(@NonNull TextPaint paint)", "public Builder setWidth(@IntRange(from = 0) int width)", "public Builder setAlignment(@NonNull Alignment alignment)", "public Builder setTextDirection(@NonNull TextDirectionHeuristic textDir)", "public Builder setLineSpacing(float spacingAdd, @FloatRange(from = 0.0) float spacingMult)", "public Builder setIncludePad(boolean includePad)", "public Builder setUseLineSpacingFromFallbacks(boolean useLineSpacingFromFallbacks)", "public Builder setEllipsizedWidth(@IntRange(from = 0) int ellipsizedWidth)", "public Builder setEllipsize(@Nullable TextUtils.TruncateAt ellipsize)", "public Builder setMaxLines(@IntRange(from = 0) int maxLines)", "public Builder setBreakStrategy(@BreakStrategy int breakStrategy)", "public Builder setHyphenationFrequency(@HyphenationFrequency int hyphenationFrequency)", "public Builder setIndents(@Nullable int[] leftIndents, @Nullable int[] rightIndents)", "public Builder setJustificationMode(@JustificationMode int justificationMode)", " Builder setAddLastLineLineSpacing(boolean value)", "public Builder setLineBreakConfig(@NonNull LineBreakConfig lineBreakConfig)", "public Builder setUseBoundsForWidth(boolean useBoundsForWidth)", "public Builder setShiftDrawingOffsetForStartOverhang(boolean shiftDrawingOffsetForStartOverhang)", "public Builder setCalculateBounds(boolean value)", "public Builder setMinimumFontMetrics(@Nullable Paint.FontMetrics minimumFontMetrics)", "public StaticLayout build()", " StaticLayout buildPartialStaticLayoutForDynamicLayout(boolean trackpadding, StaticLayout recycle)" ],
  "variableNames" : [ "mText", "mStart", "mEnd", "mPaint", "mWidth", "mAlignment", "mTextDir", "mSpacingMult", "mSpacingAdd", "mIncludePad", "mFallbackLineSpacing", "mEllipsizedWidth", "mEllipsize", "mMaxLines", "mBreakStrategy", "mHyphenationFrequency", "mLeftIndents", "mRightIndents", "mJustificationMode", "mAddLastLineLineSpacing", "mLineBreakConfig", "mUseBoundsForWidth", "mShiftDrawingOffsetForStartOverhang", "mCalculateBounds", "mMinimumFontMetrics", "mFontMetricsInt", "sPool" ]
}