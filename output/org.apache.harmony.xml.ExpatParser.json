{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/ExpatParser.java",
  "packageName" : "org.apache.harmony.xml",
  "className" : "ExpatParser",
  "comment" : "\n * Adapts SAX API to the Expat native XML parser. Not intended for reuse\n * across documents.\n *\n * @see org.apache.harmony.xml.ExpatReader\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "BUFFER_SIZE",
    "type" : "int",
    "comment" : " in bytes",
    "links" : [ ]
  }, {
    "name" : "pointer",
    "type" : "long",
    "comment" : " necessary to ensure the Java object is kept reachable sufficiently long in these cases.",
    "links" : [ ]
  }, {
    "name" : "inStartElement",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "attributeCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "attributePointer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locator",
    "type" : "Locator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlReader",
    "type" : "ExpatReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "publicId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "systemId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "attributes",
    "type" : "ExpatAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OUTSIDE_START_ELEMENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ENCODING",
    "type" : "String",
    "comment" : " We default to UTF-8 when the user doesn't specify an encoding. ",
    "links" : [ ]
  }, {
    "name" : "CHARACTER_ENCODING",
    "type" : "String",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "TIMEOUT",
    "type" : "int",
    "comment" : " Timeout for HTTP connections (in ms) ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native long initialize(String encoding, boolean namespacesEnabled)",
    "returnType" : "long",
    "comment" : "\n     * Initializes native resources.\n     *\n     * @return the pointer to the native parser\n     ",
    "links" : [ ]
  }, {
    "name" : " void startElement(String uri, String localName, String qName, long attributePointer, int attributeCount) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void text(char[] text, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void comment(char[] text, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void startCdata() throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void endCdata() throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void startNamespace(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void endNamespace(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void startDtd(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void endDtd() throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void notationDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void handleExternalEntity(String context, String publicId, String systemId) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private String pickEncoding(InputSource inputSource)",
    "returnType" : "String",
    "comment" : "\n     * Picks an encoding for an external entity. Defaults to UTF-8.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseExternalEntity(ExpatParser entityParser, InputSource inputSource) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parses the the external entity provided by the input source.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long createEntityParser(long parentPointer, String context)",
    "returnType" : "long",
    "comment" : "\n     * Creates a native entity parser.\n     *\n     * @param parentPointer pointer to parent Expat parser\n     * @param context passed to {@link #handleExternalEntity}\n     * @return pointer to native parser\n     ",
    "links" : [ "#handleExternalEntity" ]
  }, {
    "name" : " void append(String xml) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private native void appendString(long pointer, String xml, boolean isFinal) throws SAXException, ExpatException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void append(char[] xml, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Appends part of an XML document. This parser will parse the given XML to\n     * the extent possible and dispatch to the appropriate methods.\n     *\n     * @param xml a whole or partial snippet of XML\n     * @param offset into the char[]\n     * @param length of characters to use\n     * @throws SAXException if an error occurs during parsing\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void appendChars(long pointer, char[] xml, int offset, int length) throws SAXException, ExpatException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void append(byte[] xml) throws SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void append(byte[] xml, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Appends part of an XML document. This parser will parse the given XML to\n     * the extent possible and dispatch to the appropriate methods.\n     *\n     * @param xml a whole or partial snippet of XML\n     * @param offset into the byte[]\n     * @param length of bytes to use\n     * @throws SAXException if an error occurs during parsing\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void appendBytes(long pointer, byte[] xml, int offset, int length) throws SAXException, ExpatException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void parseDocument(InputStream in) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void parseDocument(Reader in) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private void parseFragment(Reader in) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parses XML from the given Reader.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseFragment(InputStream in) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parses XML from the given input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finish() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Indicate that we're finished parsing.\n     *\n     * @throws SAXException if the xml is incomplete\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void release(long pointer)",
    "returnType" : "void",
    "comment" : "\n     * Releases all native objects.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void releaseParser(long pointer)",
    "returnType" : "void",
    "comment" : "\n     * Releases native parser only.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void staticInitialize(String emptyString)",
    "returnType" : "void",
    "comment" : "\n     * Initialize static resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int line()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current line number within the XML file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int line(long pointer)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int column()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current column number within the XML file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int column(long pointer)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Attributes cloneAttributes()",
    "returnType" : "Attributes",
    "comment" : "\n     * Clones the current attributes so they can be used outside of\n     * startElement().\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long cloneAttributes(long pointer, int attributeCount)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static InputStream openUrl(String url) throws IOException",
    "returnType" : "InputStream",
    "comment" : "package",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native long initialize(String encoding, boolean namespacesEnabled)", " void startElement(String uri, String localName, String qName, long attributePointer, int attributeCount) throws SAXException", " void endElement(String uri, String localName, String qName) throws SAXException", " void text(char[] text, int length) throws SAXException", " void comment(char[] text, int length) throws SAXException", " void startCdata() throws SAXException", " void endCdata() throws SAXException", " void startNamespace(String prefix, String uri) throws SAXException", " void endNamespace(String prefix) throws SAXException", " void startDtd(String name, String publicId, String systemId) throws SAXException", " void endDtd() throws SAXException", " void processingInstruction(String target, String data) throws SAXException", " void notationDecl(String name, String publicId, String systemId) throws SAXException", " void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException", " void handleExternalEntity(String context, String publicId, String systemId) throws SAXException, IOException", "private String pickEncoding(InputSource inputSource)", "private void parseExternalEntity(ExpatParser entityParser, InputSource inputSource) throws IOException, SAXException", "private static native long createEntityParser(long parentPointer, String context)", " void append(String xml) throws SAXException", "private native void appendString(long pointer, String xml, boolean isFinal) throws SAXException, ExpatException", " void append(char[] xml, int offset, int length) throws SAXException", "private native void appendChars(long pointer, char[] xml, int offset, int length) throws SAXException, ExpatException", " void append(byte[] xml) throws SAXException", " void append(byte[] xml, int offset, int length) throws SAXException", "private native void appendBytes(long pointer, byte[] xml, int offset, int length) throws SAXException, ExpatException", " void parseDocument(InputStream in) throws IOException, SAXException", " void parseDocument(Reader in) throws IOException, SAXException", "private void parseFragment(Reader in) throws IOException, SAXException", "private void parseFragment(InputStream in) throws IOException, SAXException", "private void startDocument() throws SAXException", "private void endDocument() throws SAXException", " void finish() throws SAXException", "protected synchronized void finalize() throws Throwable", "private native void release(long pointer)", "private static native void releaseParser(long pointer)", "private static native void staticInitialize(String emptyString)", "private int line()", "private static native int line(long pointer)", "private int column()", "private static native int column(long pointer)", " Attributes cloneAttributes()", "private static native long cloneAttributes(long pointer, int attributeCount)", " static InputStream openUrl(String url) throws IOException" ],
  "variableNames" : [ "BUFFER_SIZE", "pointer", "inStartElement", "attributeCount", "attributePointer", "locator", "xmlReader", "publicId", "systemId", "encoding", "attributes", "OUTSIDE_START_ELEMENT", "DEFAULT_ENCODING", "CHARACTER_ENCODING", "TIMEOUT" ]
}