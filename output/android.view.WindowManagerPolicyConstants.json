{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowManagerPolicyConstants.java",
  "packageName" : "android.view",
  "className" : "WindowManagerPolicyConstants",
  "comment" : "\n * Constants for interfacing with WindowManagerService and WindowManagerPolicyInternal.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FLAG_WAKE",
    "type" : "int",
    "comment" : " frameworks/native/libs/input/android/os/IInputConstants.aidl",
    "links" : [ ]
  }, {
    "name" : "FLAG_VIRTUAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_INJECTED_FROM_ACCESSIBILITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_INJECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_TRUSTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_FILTERED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_DISABLE_KEY_REPEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_INTERACTIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_PASS_TO_USER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_GOING_AWAY_FLAG_TO_SHADE",
    "type" : "int",
    "comment" : " Flags for IActivityTaskManager.keyguardGoingAway()",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_GOING_AWAY_FLAG_NO_WINDOW_ANIMATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_GOING_AWAY_FLAG_WITH_WALLPAPER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_GOING_AWAY_FLAG_SUBTLE_WINDOW_ANIMATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_GOING_AWAY_FLAG_TO_LAUNCHER_CLEAR_SNAPSHOT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRESENCE_INTERNAL",
    "type" : "int",
    "comment" : " of some type are available.",
    "links" : [ ]
  }, {
    "name" : "PRESENCE_EXTERNAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_INVALID",
    "type" : "int",
    "comment" : " Navigation bar position values",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_LEFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_RIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_BOTTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_3BUTTON",
    "type" : "int",
    "comment" : " Navigation bar interaction modes",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_2BUTTON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_GESTURAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_3BUTTON_OVERLAY",
    "type" : "String",
    "comment" : " Associated overlays for each nav bar mode",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_2BUTTON_OVERLAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_GESTURAL_OVERLAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_HDMI_PLUGGED",
    "type" : "String",
    "comment" : "\n     * Sticky broadcast of the current HDMI plugged state.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_HDMI_PLUGGED_STATE",
    "type" : "String",
    "comment" : "\n     * Extra in {@link #ACTION_HDMI_PLUGGED} indicating the state: true if\n     * plugged in to HDMI, false if not.\n     ",
    "links" : [ "#ACTION_HDMI_PLUGGED" ]
  }, {
    "name" : "EXTRA_FROM_HOME_KEY",
    "type" : "String",
    "comment" : "\n     * Set to {@code true} when intent was invoked from pressing the home key.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_START_REASON",
    "type" : "String",
    "comment" : "\n     * Extra for the start reason of the HOME intent.\n     * Will be {@link PowerManager#WAKE_REASON_WAKE_KEY} or\n     * {@link PowerManager#WAKE_REASON_POWER_BUTTON} when intent was sent through\n     * {@link PhoneWindowManager#shouldWakeUpWithHomeIntent}.\n     * @hide\n     ",
    "links" : [ "android.os.PowerManager#WAKE_REASON_WAKE_KEY", "#shouldWakeUpWithHomeIntent", "android.os.PowerManager#WAKE_REASON_POWER_BUTTON" ]
  }, {
    "name" : "EXTRA_FROM_BRIGHTNESS_KEY",
    "type" : "String",
    "comment" : "\n     * Set to {@code true} when intent was invoked from pressing one of the brightness keys.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OFF_BECAUSE_OF_ADMIN",
    "type" : "int",
    "comment" : " Screen turned off because of a device admin ",
    "links" : [ ]
  }, {
    "name" : "OFF_BECAUSE_OF_USER",
    "type" : "int",
    "comment" : " Screen turned off because of power button ",
    "links" : [ ]
  }, {
    "name" : "OFF_BECAUSE_OF_TIMEOUT",
    "type" : "int",
    "comment" : " Screen turned off because of timeout ",
    "links" : [ ]
  }, {
    "name" : "ON_BECAUSE_OF_USER",
    "type" : "int",
    "comment" : " Screen turned on because of a user-initiated action. ",
    "links" : [ ]
  }, {
    "name" : "ON_BECAUSE_OF_APPLICATION",
    "type" : "int",
    "comment" : " Screen turned on because of an application request or event ",
    "links" : [ ]
  }, {
    "name" : "ON_BECAUSE_OF_UNKNOWN",
    "type" : "int",
    "comment" : " Screen turned on for an unknown reason ",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_LAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_MEDIA_SUBLAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_MEDIA_OVERLAY_SUBLAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_PANEL_SUBLAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_SUB_PANEL_SUBLAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_ABOVE_SUB_PANEL_SUBLAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_LAYER_MULTIPLIER",
    "type" : "int",
    "comment" : "\n     * How much to multiply the policy's type layer, to reserve room\n     * for multiple windows of the same type and Z-ordering adjustment\n     * with TYPE_LAYER_OFFSET.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LAYER_OFFSET",
    "type" : "int",
    "comment" : "\n     * Offset from TYPE_LAYER_MULTIPLIER for moving a group of windows above\n     * or below others in the same layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_LAYER_MULTIPLIER",
    "type" : "int",
    "comment" : "\n     * How much to increment the layer for each window, to reserve room\n     * for effect surfaces between them.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYER_OFFSET_THUMBNAIL",
    "type" : "int",
    "comment" : "\n     * Animation thumbnail is as far as possible below the window above\n     * the thumbnail (or in other words as far as possible above the window\n     * below it).\n     ",
    "links" : [ ]
  }, {
    "name" : "WATERMARK_LAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRICT_MODE_LAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WINDOW_FREEZE_LAYER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_FREEZE_LAYER_BASE",
    "type" : "int",
    "comment" : "\n     * Layers for screen rotation animation. We put these layers above\n     * WINDOW_FREEZE_LAYER so that screen freeze will cover all windows.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int translateSleepReasonToOffReason(@PowerManager.GoToSleepReason int reason)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String onReasonToString(@OnReason int why)",
    "returnType" : "String",
    "comment" : " Convert the on reason to a human readable format ",
    "links" : [ ]
  }, {
    "name" : " static int translateWakeReasonToOnReason(@PowerManager.WakeReason int reason)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String offReasonToString(int why)",
    "returnType" : "String",
    "comment" : "\n     * Convert the off reason to a human readable format.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static int translateSleepReasonToOffReason(@PowerManager.GoToSleepReason int reason)", " static String onReasonToString(@OnReason int why)", " static int translateWakeReasonToOnReason(@PowerManager.WakeReason int reason)", " static String offReasonToString(int why)" ],
  "variableNames" : [ "FLAG_WAKE", "FLAG_VIRTUAL", "FLAG_INJECTED_FROM_ACCESSIBILITY", "FLAG_INJECTED", "FLAG_TRUSTED", "FLAG_FILTERED", "FLAG_DISABLE_KEY_REPEAT", "FLAG_INTERACTIVE", "FLAG_PASS_TO_USER", "KEYGUARD_GOING_AWAY_FLAG_TO_SHADE", "KEYGUARD_GOING_AWAY_FLAG_NO_WINDOW_ANIMATIONS", "KEYGUARD_GOING_AWAY_FLAG_WITH_WALLPAPER", "KEYGUARD_GOING_AWAY_FLAG_SUBTLE_WINDOW_ANIMATIONS", "KEYGUARD_GOING_AWAY_FLAG_TO_LAUNCHER_CLEAR_SNAPSHOT", "PRESENCE_INTERNAL", "PRESENCE_EXTERNAL", "NAV_BAR_INVALID", "NAV_BAR_LEFT", "NAV_BAR_RIGHT", "NAV_BAR_BOTTOM", "NAV_BAR_MODE_3BUTTON", "NAV_BAR_MODE_2BUTTON", "NAV_BAR_MODE_GESTURAL", "NAV_BAR_MODE_3BUTTON_OVERLAY", "NAV_BAR_MODE_2BUTTON_OVERLAY", "NAV_BAR_MODE_GESTURAL_OVERLAY", "ACTION_HDMI_PLUGGED", "EXTRA_HDMI_PLUGGED_STATE", "EXTRA_FROM_HOME_KEY", "EXTRA_START_REASON", "EXTRA_FROM_BRIGHTNESS_KEY", "OFF_BECAUSE_OF_ADMIN", "OFF_BECAUSE_OF_USER", "OFF_BECAUSE_OF_TIMEOUT", "ON_BECAUSE_OF_USER", "ON_BECAUSE_OF_APPLICATION", "ON_BECAUSE_OF_UNKNOWN", "APPLICATION_LAYER", "APPLICATION_MEDIA_SUBLAYER", "APPLICATION_MEDIA_OVERLAY_SUBLAYER", "APPLICATION_PANEL_SUBLAYER", "APPLICATION_SUB_PANEL_SUBLAYER", "APPLICATION_ABOVE_SUB_PANEL_SUBLAYER", "TYPE_LAYER_MULTIPLIER", "TYPE_LAYER_OFFSET", "WINDOW_LAYER_MULTIPLIER", "LAYER_OFFSET_THUMBNAIL", "WATERMARK_LAYER", "STRICT_MODE_LAYER", "WINDOW_FREEZE_LAYER", "SCREEN_FREEZE_LAYER_BASE" ]
}