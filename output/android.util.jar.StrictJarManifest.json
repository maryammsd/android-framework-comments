{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/jar/StrictJarManifest.java",
  "packageName" : "android.util.jar",
  "className" : "StrictJarManifest",
  "comment" : "\n * The {@code StrictJarManifest} class is used to obtain attribute information for a\n * {@code StrictJarFile} and its entries.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LINE_LENGTH_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINE_SEPARATOR",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE_SEPARATOR",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_NAME_NAME",
    "type" : "Attributes.Name",
    "comment" : " The attribute name \"Name\". ",
    "links" : [ ]
  }, {
    "name" : "mainAttributes",
    "type" : "Attributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entries",
    "type" : "HashMap<String, Attributes>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "chunks",
    "type" : "HashMap<String, Chunk>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mainEnd",
    "type" : "int",
    "comment" : "\n     * The end of the main attributes section in the manifest is needed in\n     * verification.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Resets the both the main attributes as well as the entry attributes\n     * associated with this {@code StrictJarManifest}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attributes getAttributes(String name)",
    "returnType" : "Attributes",
    "comment" : "\n     * Returns the {@code Attributes} associated with the parameter entry\n     * {@code name}.\n     *\n     * @param name\n     *            the name of the entry to obtain {@code Attributes} from.\n     * @return the Attributes for the entry or {@code null} if the entry does\n     *         not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Attributes> getEntries()",
    "returnType" : "Map<String, Attributes>",
    "comment" : "\n     * Returns a map containing the {@code Attributes} for each entry in the\n     * {@code StrictJarManifest}.\n     *\n     * @return the map of entry attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attributes getMainAttributes()",
    "returnType" : "Attributes",
    "comment" : "\n     * Returns the main {@code Attributes} of the {@code JarFile}.\n     *\n     * @return main {@code Attributes} associated with the source {@code\n     *         JarFile}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Creates a copy of this {@code StrictJarManifest}. The returned {@code StrictJarManifest}\n     * will equal the {@code StrictJarManifest} from which it was cloned.\n     *\n     * @return a copy of this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(OutputStream os) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes this {@code StrictJarManifest}'s name/attributes pairs to the given {@code OutputStream}.\n     * The {@code MANIFEST_VERSION} or {@code SIGNATURE_VERSION} attribute must be set before\n     * calling this method, or no attributes will be written.\n     *\n     * @throws IOException\n     *             If an error occurs writing the {@code StrictJarManifest}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void read(InputStream is) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Merges name/attribute pairs read from the input stream {@code is} into this manifest.\n     *\n     * @param is\n     *            The {@code InputStream} to read from.\n     * @throws IOException\n     *             If an error occurs reading the manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void read(byte[] buf) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code for this instance.\n     *\n     * @return this {@code StrictJarManifest}'s hashCode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the receiver is equal to the parameter object. Two {@code\n     * StrictJarManifest}s are equal if they have identical main attributes as well as\n     * identical entry attributes.\n     *\n     * @param o\n     *            the object to compare against.\n     * @return {@code true} if the manifests are equal, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : " Chunk getChunk(String name)",
    "returnType" : "Chunk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeChunks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getMainAttributesEnd()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void write(StrictJarManifest manifest, OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes out the attribute information of the specified manifest to the\n     * specified {@code OutputStream}\n     *\n     * @param manifest\n     *            the manifest to write out.\n     * @param out\n     *            The {@code OutputStream} to write to.\n     * @throws IOException\n     *             If an error occurs writing the {@code StrictJarManifest}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeEntry(OutputStream os, Attributes.Name name, String value, CharsetEncoder encoder, ByteBuffer bBuf) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void clear()", "public Attributes getAttributes(String name)", "public Map<String, Attributes> getEntries()", "public Attributes getMainAttributes()", "public Object clone()", "public void write(OutputStream os) throws IOException", "public void read(InputStream is) throws IOException", "private void read(byte[] buf) throws IOException", "public int hashCode()", "public boolean equals(@Nullable Object o)", " Chunk getChunk(String name)", " void removeChunks()", " int getMainAttributesEnd()", " static void write(StrictJarManifest manifest, OutputStream out) throws IOException", "private static void writeEntry(OutputStream os, Attributes.Name name, String value, CharsetEncoder encoder, ByteBuffer bBuf) throws IOException" ],
  "variableNames" : [ "LINE_LENGTH_LIMIT", "LINE_SEPARATOR", "VALUE_SEPARATOR", "ATTRIBUTE_NAME_NAME", "mainAttributes", "entries", "chunks", "mainEnd" ]
}