{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Comparable.java",
  "packageName" : "java.lang",
  "className" : "Comparable",
  "comment" : "\n * This interface imposes a total ordering on the objects of each class that\n * implements it.  This ordering is referred to as the class's <i>natural\n * ordering</i>, and the class's {@code compareTo} method is referred to as\n * its <i>natural comparison method</i>.<p>\n *\n * Lists (and arrays) of objects that implement this interface can be sorted\n * automatically by {@link Collections#sort(List) Collections.sort} (and\n * {@link Arrays#sort(Object[]) Arrays.sort}).  Objects that implement this\n * interface can be used as keys in a {@linkplain SortedMap sorted map} or as\n * elements in a {@linkplain SortedSet sorted set}, without the need to\n * specify a {@linkplain Comparator comparator}.<p>\n *\n * The natural ordering for a class {@code C} is said to be <i>consistent\n * with equals</i> if and only if {@code e1.compareTo(e2) == 0} has\n * the same boolean value as {@code e1.equals(e2)} for every\n * {@code e1} and {@code e2} of class {@code C}.  Note that {@code null}\n * is not an instance of any class, and {@code e.compareTo(null)} should\n * throw a {@code NullPointerException} even though {@code e.equals(null)}\n * returns {@code false}.<p>\n *\n * It is strongly recommended (though not required) that natural orderings be\n * consistent with equals.  This is so because sorted sets (and sorted maps)\n * without explicit comparators behave \"strangely\" when they are used with\n * elements (or keys) whose natural ordering is inconsistent with equals.  In\n * particular, such a sorted set (or sorted map) violates the general contract\n * for set (or map), which is defined in terms of the {@code equals}\n * method.<p>\n *\n * For example, if one adds two keys {@code a} and {@code b} such that\n * {@code (!a.equals(b) && a.compareTo(b) == 0)} to a sorted\n * set that does not use an explicit comparator, the second {@code add}\n * operation returns false (and the size of the sorted set does not increase)\n * because {@code a} and {@code b} are equivalent from the sorted set's\n * perspective.<p>\n *\n * Virtually all Java core classes that implement {@code Comparable}\n * have natural orderings that are consistent with equals.  One\n * exception is {@link java.math.BigDecimal}, whose {@linkplain\n * java.math.BigDecimal#compareTo natural ordering} equates {@code\n * BigDecimal} objects with equal numerical values and different\n * representations (such as 4.0 and 4.00). For {@link\n * java.math.BigDecimal#equals BigDecimal.equals()} to return true,\n * the representation and numerical value of the two {@code\n * BigDecimal} objects must be the same.<p>\n *\n * For the mathematically inclined, the <i>relation</i> that defines\n * the natural ordering on a given class C is:<pre>{@code\n *       {(x, y) such that x.compareTo(y) <= 0}.\n * }</pre> The <i>quotient</i> for this total order is: <pre>{@code\n *       {(x, y) such that x.compareTo(y) == 0}.\n * }</pre>\n *\n * It follows immediately from the contract for {@code compareTo} that the\n * quotient is an <i>equivalence relation</i> on {@code C}, and that the\n * natural ordering is a <i>total order</i> on {@code C}.  When we say that a\n * class's natural ordering is <i>consistent with equals</i>, we mean that the\n * quotient for the natural ordering is the equivalence relation defined by\n * the class's {@link Object#equals(Object) equals(Object)} method:<pre>\n *     {(x, y) such that x.equals(y)}. </pre><p>\n *\n * In other words, when a class's natural ordering is consistent with\n * equals, the equivalence classes defined by the equivalence relation\n * of the {@code equals} method and the equivalence classes defined by\n * the quotient of the {@code compareTo} method are the same.\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <T> the type of objects that this object may be compared to\n *\n * @author  Josh Bloch\n * @see java.util.Comparator\n * @since 1.2\n ",
  "links" : [ "java.math.BigDecimal", "#sort(Object", "java.math.BigDecimal#equals", "java.lang.Object#equals(Object)", "#sort(List)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int compareTo(T o)",
    "returnType" : "int",
    "comment" : "\n     * Compares this object with the specified object for order.  Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     *\n     * <p>The implementor must ensure {@link Integer#signum\n     * signum}{@code (x.compareTo(y)) == -signum(y.compareTo(x))} for\n     * all {@code x} and {@code y}.  (This implies that {@code\n     * x.compareTo(y)} must throw an exception if and only if {@code\n     * y.compareTo(x)} throws an exception.)\n     *\n     * <p>The implementor must also ensure that the relation is transitive:\n     * {@code (x.compareTo(y) > 0 && y.compareTo(z) > 0)} implies\n     * {@code x.compareTo(z) > 0}.\n     *\n     * <p>Finally, the implementor must ensure that {@code\n     * x.compareTo(y)==0} implies that {@code signum(x.compareTo(z))\n     * == signum(y.compareTo(z))}, for all {@code z}.\n     *\n     * @apiNote\n     * It is strongly recommended, but <i>not</i> strictly required that\n     * {@code (x.compareTo(y)==0) == (x.equals(y))}.  Generally speaking, any\n     * class that implements the {@code Comparable} interface and violates\n     * this condition should clearly indicate this fact.  The recommended\n     * language is \"Note: this class has a natural ordering that is\n     * inconsistent with equals.\"\n     *\n     * @param   o the object to be compared.\n     * @return  a negative integer, zero, or a positive integer as this object\n     *          is less than, equal to, or greater than the specified object.\n     *\n     * @throws NullPointerException if the specified object is null\n     * @throws ClassCastException if the specified object's type prevents it\n     *         from being compared to this object.\n     ",
    "links" : [ "java.lang.Integer#signumsignum" ]
  } ],
  "methodNames" : [ "public int compareTo(T o)" ],
  "variableNames" : [ ]
}