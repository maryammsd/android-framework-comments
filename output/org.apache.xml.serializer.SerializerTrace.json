{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/SerializerTrace.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "SerializerTrace",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "EVENTTYPE_STARTDOCUMENT",
    "type" : "int",
    "comment" : "\n   * Event type generated when a document begins.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_ENDDOCUMENT",
    "type" : "int",
    "comment" : "\n   * Event type generated when a document ends.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_STARTELEMENT",
    "type" : "int",
    "comment" : "\n   * Event type generated when an element begins (after the attributes have been processed but before the children have been added).\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_ENDELEMENT",
    "type" : "int",
    "comment" : "\n   * Event type generated when an element ends, after it's children have been added.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_CHARACTERS",
    "type" : "int",
    "comment" : "\n   * Event type generated for character data (CDATA and Ignorable Whitespace have their own events).\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_IGNORABLEWHITESPACE",
    "type" : "int",
    "comment" : "\n   * Event type generated for ignorable whitespace (I'm not sure how much this is actually called.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_PI",
    "type" : "int",
    "comment" : "\n   * Event type generated for processing instructions.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_COMMENT",
    "type" : "int",
    "comment" : "\n   * Event type generated after a comment has been added.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_ENTITYREF",
    "type" : "int",
    "comment" : "\n   * Event type generate after an entity ref is created.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_CDATA",
    "type" : "int",
    "comment" : "\n   * Event type generated after CDATA is generated.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS",
    "type" : "int",
    "comment" : "\n   * Event type generated when characters might be written to an output stream,\n   *  but  these characters never are. They will ultimately be written out via\n   * EVENTTYPE_OUTPUT_CHARACTERS. This type is used as attributes are collected.\n   * Whenever the attributes change this event type is fired. At the very end\n   * however, when the attributes do not change anymore and are going to be\n   * ouput to the document the real characters will be written out using the\n   * EVENTTYPE_OUTPUT_CHARACTERS.\n   ",
    "links" : [ ]
  }, {
    "name" : "EVENTTYPE_OUTPUT_CHARACTERS",
    "type" : "int",
    "comment" : "\n   * Event type generated when characters are written to an output stream.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasTraceListeners()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if trace listeners are present.\n   *\n   * @return True if there are trace listeners\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fireGenerateEvent(int eventType)",
    "returnType" : "void",
    "comment" : "\n   * Fire startDocument, endDocument events.\n   *\n   * @param eventType One of the EVENTTYPE_XXX constants.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fireGenerateEvent(int eventType, String name, Attributes atts)",
    "returnType" : "void",
    "comment" : "\n   * Fire startElement, endElement events.\n   *\n   * @param eventType One of the EVENTTYPE_XXX constants.\n   * @param name The name of the element.\n   * @param atts The SAX attribute list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fireGenerateEvent(int eventType, char[] ch, int start, int length)",
    "returnType" : "void",
    "comment" : "\n   * Fire characters, cdata events.\n   *\n   * @param eventType One of the EVENTTYPE_XXX constants.\n   * @param ch The char array from the SAX event.\n   * @param start The start offset to be used in the char array.\n   * @param length The end offset to be used in the chara array.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fireGenerateEvent(int eventType, String name, String data)",
    "returnType" : "void",
    "comment" : "\n   * Fire processingInstruction events.\n   *\n   * @param eventType One of the EVENTTYPE_XXX constants.\n   * @param name The name of the processing instruction.\n   * @param data The processing instruction data.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fireGenerateEvent(int eventType, String data)",
    "returnType" : "void",
    "comment" : "\n   * Fire comment and entity ref events.\n   *\n   * @param eventType One of the EVENTTYPE_XXX constants.\n   * @param data The comment or entity ref data.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean hasTraceListeners()", "public void fireGenerateEvent(int eventType)", "public void fireGenerateEvent(int eventType, String name, Attributes atts)", "public void fireGenerateEvent(int eventType, char[] ch, int start, int length)", "public void fireGenerateEvent(int eventType, String name, String data)", "public void fireGenerateEvent(int eventType, String data)" ],
  "variableNames" : [ "EVENTTYPE_STARTDOCUMENT", "EVENTTYPE_ENDDOCUMENT", "EVENTTYPE_STARTELEMENT", "EVENTTYPE_ENDELEMENT", "EVENTTYPE_CHARACTERS", "EVENTTYPE_IGNORABLEWHITESPACE", "EVENTTYPE_PI", "EVENTTYPE_COMMENT", "EVENTTYPE_ENTITYREF", "EVENTTYPE_CDATA", "EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS", "EVENTTYPE_OUTPUT_CHARACTERS" ]
}