{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/PublishConfig.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "Builder",
  "comment" : "\n     * Builder used to build {@link PublishConfig} objects.\n     ",
  "links" : [ "android.net.wifi.aware.PublishConfig" ],
  "variables" : [ {
    "name" : "mServiceName",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSpecificInfo",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchFilter",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPublishType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTtlSec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableTerminateNotification",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableRanging",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableInstantMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBand",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityConfig",
    "type" : "WifiAwareDataPathSecurityConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPairingConfig",
    "type" : "AwarePairingConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSuspendable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setServiceName(@NonNull String serviceName)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify the service name of the publish session. The actual on-air\n         * value is a 6 byte hashed representation of this string.\n         * <p>\n         * The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length.\n         * The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric\n         * values (A-Z, a-z, 0-9), the hyphen ('-'), the period ('.') and the underscore ('_'). All\n         * valid multi-byte UTF-8 characters are acceptable in a Service Name.\n         * <p>\n         * Note: for compatibility with devices running Android 11 or older, avoid using\n         * underscore ('_') symbol as a single-byte UTF-8 service name.\n         * <p>\n         * Must be called - an empty ServiceName is not valid.\n         *\n         * @param serviceName The service name for the publish session.\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceSpecificInfo(@Nullable byte[] serviceSpecificInfo)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify service specific information for the publish session. This is\n         * a free-form byte array available to the application to send\n         * additional information as part of the discovery operation - it\n         * will not be used to determine whether a publish/subscribe match\n         * occurs.\n         * <p>\n         *     Optional. Empty by default.\n         *\n         * @param serviceSpecificInfo A byte-array for the service-specific\n         *            information field.\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMatchFilter(@Nullable List<byte[]> matchFilter)",
    "returnType" : "Builder",
    "comment" : "\n         * The match filter for a publish session. Used to determine whether a service\n         * discovery occurred - in addition to relying on the service name.\n         * <p>\n         *     Optional. Empty by default.\n         *\n         * @param matchFilter A list of match filter entries (each of which is an arbitrary byte\n         *                    array).\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPublishType(@PublishTypes int publishType)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify the type of the publish session: solicited (aka active - publish\n         * packets are transmitted over-the-air), or unsolicited (aka passive -\n         * no publish packets are transmitted, a match is made against an active\n         * subscribe session whose packets are transmitted over-the-air).\n         *\n         * @param publishType Publish session type:\n         *            {@link PublishConfig#PUBLISH_TYPE_SOLICITED} or\n         *            {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED} (the default).\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_UNSOLICITED", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_SOLICITED" ]
  }, {
    "name" : "public Builder setTtlSec(int ttlSec)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time interval (in seconds) an unsolicited (\n         * {@link PublishConfig.Builder#setPublishType(int)}) publish session\n         * will be alive - broadcasting a packet. When the TTL is reached\n         * an event will be generated for\n         * {@link DiscoverySessionCallback#onSessionTerminated()} [unless\n         * {@link #setTerminateNotificationEnabled(boolean)} disables the callback].\n         * <p>\n         *     Optional. 0 by default - indicating the session doesn't terminate on its own.\n         *     Session will be terminated when {@link DiscoverySession#close()} is\n         *     called.\n         *\n         * @param ttlSec Lifetime of a publish session in seconds.\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionTerminated()", "PublishConfig.Builder#setPublishType(int)", "android.net.wifi.aware.DiscoverySession#close()", "#setTerminateNotificationEnabled(boolean)" ]
  }, {
    "name" : "public Builder setTerminateNotificationEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure whether a publish terminate notification\n         * {@link DiscoverySessionCallback#onSessionTerminated()} is reported\n         * back to the callback.\n         *\n         * @param enable If true the terminate callback will be called when the\n         *            publish is terminated. Otherwise it will not be called.\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onSessionTerminated()" ]
  }, {
    "name" : "public Builder setRangingEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure whether the publish discovery session supports ranging and allows peers to\n         * measure distance to it. This API is used in conjunction with\n         * {@link SubscribeConfig.Builder#setMinDistanceMm(int)} and\n         * {@link SubscribeConfig.Builder#setMaxDistanceMm(int)} to specify a minimum and/or\n         * maximum distance at which discovery will be triggered.\n         * <p>\n         * Optional. Disabled by default - i.e. any peer attempt to measure distance to this device\n         * will be refused and discovery will proceed without ranging constraints.\n         * <p>\n         * The device must support Wi-Fi RTT for this feature to be used. Feature support is checked\n         * as described in {@link android.net.wifi.rtt}.\n         *\n         * @param enable If true, ranging is supported on request of the peer.\n         *\n         * @return The builder to facilitate chaining\n         *         {@code builder.setXXX(..).setXXX(..)}.\n         ",
    "links" : [ "android.net.wifi.rtt", "SubscribeConfig.Builder#setMinDistanceMm(int)", "SubscribeConfig.Builder#setMaxDistanceMm(int)" ]
  }, {
    "name" : "public Builder setInstantCommunicationModeEnabled(boolean enabled, @WifiAwareManager.InstantModeBand int band)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure whether to enable and use instant communication for this publish session.\n         * Instant communication will speed up service discovery and any data-path set up as part of\n         * this session. Use {@link Characteristics#isInstantCommunicationModeSupported()} to check\n         * if the device supports this feature.\n         *\n         * <p>Note: due to increased power requirements of this mode - it will only remain enabled\n         * for 30 seconds from the time the discovery session is started.\n         *\n         * @param enabled true for enable instant communication mode, default is false.\n         * @param band When setting to {@link ScanResult#WIFI_BAND_5_GHZ}, device will try to enable\n         *     instant communication mode on 5Ghz, but may fall back to 2.4Ghz due to regulatory\n         *     requirements.\n         * @return the current {@link Builder} builder, enabling chaining of builder methods.\n         ",
    "links" : [ "Builder", "android.net.wifi.ScanResult#WIFI_BAND_5_GHZ", "android.net.wifi.aware.Characteristics#isInstantCommunicationModeSupported()" ]
  }, {
    "name" : "public Builder setDataPathSecurityConfig(@NonNull WifiAwareDataPathSecurityConfig securityConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure security config for the Wi-Fi Aware publish session. The security config set\n         * here must be the same as the one used to request Wi-Fi Aware data-path connection using\n         * {@link WifiAwareNetworkSpecifier.Builder#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)}.\n         * This security config will create a security identifier (SCID) which contains a PMKID and\n         * transmitted in the publish message. The device which subscribe this session can get this\n         * info by {@link ServiceDiscoveryInfo#getScid()}\n         * This method is optional - if not called, then no security context identifier will be\n         * passed in the publish message, then no security context identifier will be provided in\n         * the {@link ServiceDiscoveryInfo} on the subscriber. Security can still be negotiated\n         * using out-of-band (OOB) mechanisms.\n         *\n         * @param securityConfig The (optional) security config to be used to create security\n         *                       context Identifier\n         * @return the current {@link Builder} builder, enabling chaining of builder methods.\n         ",
    "links" : [ "android.net.wifi.aware.ServiceDiscoveryInfo", "android.net.wifi.aware.ServiceDiscoveryInfo#getScid()", "WifiAwareNetworkSpecifier.Builder#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)", "Builder" ]
  }, {
    "name" : "public Builder setPairingConfig(@Nullable AwarePairingConfig config)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link AwarePairingConfig} for this publish session, the peer can use this info\n         * to determine the config of the following bootstrapping, pairing setup/verification\n         * request.\n         * @see AwarePairingConfig\n         * @param config The pairing config set to the peer. Only valid when\n         * {@link Characteristics#isAwarePairingSupported()} is true.\n         * @return the current {@link Builder} builder, enabling chaining of builder methods.\n         ",
    "links" : [ "android.net.wifi.aware.AwarePairingConfig", "Builder", "android.net.wifi.aware.Characteristics#isAwarePairingSupported()" ]
  }, {
    "name" : "public Builder setSuspendable(boolean isSuspendable)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify whether to configure the publish discovery session to be suspendable. This API\n         * doesn't suspend the session, it allows it to be suspended and resumed in the future using\n         * {@link DiscoverySession#suspend()} and {@link DiscoverySession#resume()} respectively.\n         * <p>\n         * Optional. Not suspendable by default.\n         * <p>\n         * The device must support Wi-Fi Aware suspension for a publish session to be\n         * suspendable. Feature support check is determined by\n         * {@link Characteristics#isSuspensionSupported()}.\n         *\n         * @param isSuspendable If true, then this publish session can be suspended.\n         *\n         * @return the current {@link Builder} builder, enabling chaining of builder methods.\n         *\n         * @see DiscoverySession#suspend()\n         * @see DiscoverySession#resume()\n         * @hide\n         ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#resume()", "android.net.wifi.aware.DiscoverySession#suspend()", "Builder", "android.net.wifi.aware.Characteristics#isSuspensionSupported()" ]
  }, {
    "name" : "public Builder setVendorData(@NonNull List<OuiKeyedData> vendorData)",
    "returnType" : "Builder",
    "comment" : "\n         * Set additional vendor-provided configuration data.\n         *\n         * @param vendorData List of {@link OuiKeyedData} containing the vendor-provided\n         *     configuration data. Note that multiple elements with the same OUI are allowed.\n         * @return Builder for chaining.\n         * @hide\n         ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "public PublishConfig build()",
    "returnType" : "PublishConfig",
    "comment" : "\n         * Build {@link PublishConfig} given the current requests made on the\n         * builder.\n         ",
    "links" : [ "android.net.wifi.aware.PublishConfig" ]
  } ],
  "methodNames" : [ "public Builder setServiceName(@NonNull String serviceName)", "public Builder setServiceSpecificInfo(@Nullable byte[] serviceSpecificInfo)", "public Builder setMatchFilter(@Nullable List<byte[]> matchFilter)", "public Builder setPublishType(@PublishTypes int publishType)", "public Builder setTtlSec(int ttlSec)", "public Builder setTerminateNotificationEnabled(boolean enable)", "public Builder setRangingEnabled(boolean enable)", "public Builder setInstantCommunicationModeEnabled(boolean enabled, @WifiAwareManager.InstantModeBand int band)", "public Builder setDataPathSecurityConfig(@NonNull WifiAwareDataPathSecurityConfig securityConfig)", "public Builder setPairingConfig(@Nullable AwarePairingConfig config)", "public Builder setSuspendable(boolean isSuspendable)", "public Builder setVendorData(@NonNull List<OuiKeyedData> vendorData)", "public PublishConfig build()" ],
  "variableNames" : [ "mServiceName", "mServiceSpecificInfo", "mMatchFilter", "mPublishType", "mTtlSec", "mEnableTerminateNotification", "mEnableRanging", "mEnableInstantMode", "mBand", "mSecurityConfig", "mPairingConfig", "mIsSuspendable", "mVendorData" ]
}