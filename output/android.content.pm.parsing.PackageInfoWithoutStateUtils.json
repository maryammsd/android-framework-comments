{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/parsing/PackageInfoWithoutStateUtils.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "PackageInfoWithoutStateUtils",
  "comment" : " @hide *",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static PackageInfo generate(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo generate(ParsingPackageRead pkg, ApexInfo apexInfo, int flags)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PackageInfo generateWithComponents(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo generateWithoutComponents(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo, @NonNull ApplicationInfo applicationInfo)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo generateWithoutComponentsUnchecked(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo, @NonNull ApplicationInfo applicationInfo)",
    "returnType" : "PackageInfo",
    "comment" : "\n     * This bypasses critical checks that are necessary for usage with data passed outside of\n     * system server.\n     *\n     * Prefer {@link #generateWithoutComponents(ParsingPackageRead, int[], int, long, long, Set,\n     * PackageUserState, int, ApexInfo, ApplicationInfo)}.\n     ",
    "links" : [ "#generateWithoutComponents(ParsingPackageRead" ]
  }, {
    "name" : "public static ApplicationInfo generateApplicationInfo(ParsingPackageRead pkg, @PackageManager.ApplicationInfoFlags int flags, PackageUserState state, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationInfo generateApplicationInfoUnchecked(@NonNull ParsingPackageRead pkg, @PackageManager.ApplicationInfoFlags int flags, PackageUserState state, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * This bypasses critical checks that are necessary for usage with data passed outside of\n     * system server.\n     *\n     * Prefer {@link #generateApplicationInfo(ParsingPackageRead, int, PackageUserState, int)}.\n     ",
    "links" : [ "#generateApplicationInfo(ParsingPackageRead" ]
  }, {
    "name" : "public static ActivityInfo generateActivityInfo(ParsingPackageRead pkg, ParsedActivity a, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, @Nullable ApplicationInfo applicationInfo, int userId)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityInfo generateActivityInfoUnchecked(@NonNull ParsedActivity a, @NonNull ApplicationInfo applicationInfo)",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * This bypasses critical checks that are necessary for usage with data passed outside of\n     * system server.\n     *\n     * Prefer {@link #generateActivityInfo(ParsingPackageRead, ParsedActivity, int,\n     * PackageUserState, ApplicationInfo, int)}.\n     ",
    "links" : [ "#generateActivityInfo(ParsingPackageRead" ]
  }, {
    "name" : "public static ActivityInfo generateActivityInfo(ParsingPackageRead pkg, ParsedActivity a, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, int userId)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ServiceInfo generateServiceInfo(ParsingPackageRead pkg, ParsedService s, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, @Nullable ApplicationInfo applicationInfo, int userId)",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ServiceInfo generateServiceInfoUnchecked(@NonNull ParsedService s, @NonNull ApplicationInfo applicationInfo)",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * This bypasses critical checks that are necessary for usage with data passed outside of\n     * system server.\n     *\n     * Prefer {@link #generateServiceInfo(ParsingPackageRead, ParsedService, int, PackageUserState,\n     * ApplicationInfo, int)}.\n     ",
    "links" : [ "#generateServiceInfo(ParsingPackageRead" ]
  }, {
    "name" : "public static ServiceInfo generateServiceInfo(ParsingPackageRead pkg, ParsedService s, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, int userId)",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ProviderInfo generateProviderInfo(ParsingPackageRead pkg, ParsedProvider p, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, @Nullable ApplicationInfo applicationInfo, int userId)",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ProviderInfo generateProviderInfoUnchecked(@NonNull ParsedProvider p, @PackageManager.ComponentInfoFlags int flags, @NonNull ApplicationInfo applicationInfo)",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * This bypasses critical checks that are necessary for usage with data passed outside of\n     * system server.\n     *\n     * Prefer {@link #generateProviderInfo(ParsingPackageRead, ParsedProvider, int,\n     * PackageUserState, ApplicationInfo, int)}.\n     ",
    "links" : [ "#generateProviderInfo(ParsingPackageRead" ]
  }, {
    "name" : "public static ProviderInfo generateProviderInfo(ParsingPackageRead pkg, ParsedProvider p, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, int userId)",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InstrumentationInfo generateInstrumentationInfo(ParsedInstrumentation i, ParsingPackageRead pkg, @PackageManager.ComponentInfoFlags int flags, int userId)",
    "returnType" : "InstrumentationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PermissionInfo generatePermissionInfo(ParsedPermission p, @PackageManager.ComponentInfoFlags int flags)",
    "returnType" : "PermissionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PermissionGroupInfo generatePermissionGroupInfo(ParsedPermissionGroup pg, @PackageManager.ComponentInfoFlags int flags)",
    "returnType" : "PermissionGroupInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void assignSharedFieldsForComponentInfo(@NonNull ComponentInfo componentInfo, @NonNull ParsedMainComponent mainComponent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void assignSharedFieldsForPackageItemInfo(@NonNull PackageItemInfo packageItemInfo, @NonNull ParsedComponent component)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int flag(boolean hasFlag, int flag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int appInfoFlags(ParsingPackageRead pkg)",
    "returnType" : "int",
    "comment" : " @see ApplicationInfo#flags ",
    "links" : [ ]
  }, {
    "name" : "public static int appInfoPrivateFlags(ParsingPackageRead pkg)",
    "returnType" : "int",
    "comment" : " @see ApplicationInfo#privateFlags ",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkUseInstalled(ParsingPackageRead pkg, PackageUserState state, @PackageManager.PackageInfoFlags int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static File getDataDir(ParsingPackageRead pkg, int userId)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static File getDeviceProtectedDataDir(ParsingPackageRead pkg, int userId)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static File getCredentialProtectedDataDir(ParsingPackageRead pkg, int userId)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static PackageInfo generate(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId)", "public static PackageInfo generate(ParsingPackageRead pkg, ApexInfo apexInfo, int flags)", "private static PackageInfo generateWithComponents(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo)", "public static PackageInfo generateWithoutComponents(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo, @NonNull ApplicationInfo applicationInfo)", "public static PackageInfo generateWithoutComponentsUnchecked(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo, @NonNull ApplicationInfo applicationInfo)", "public static ApplicationInfo generateApplicationInfo(ParsingPackageRead pkg, @PackageManager.ApplicationInfoFlags int flags, PackageUserState state, int userId)", "public static ApplicationInfo generateApplicationInfoUnchecked(@NonNull ParsingPackageRead pkg, @PackageManager.ApplicationInfoFlags int flags, PackageUserState state, int userId)", "public static ActivityInfo generateActivityInfo(ParsingPackageRead pkg, ParsedActivity a, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, @Nullable ApplicationInfo applicationInfo, int userId)", "public static ActivityInfo generateActivityInfoUnchecked(@NonNull ParsedActivity a, @NonNull ApplicationInfo applicationInfo)", "public static ActivityInfo generateActivityInfo(ParsingPackageRead pkg, ParsedActivity a, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, int userId)", "public static ServiceInfo generateServiceInfo(ParsingPackageRead pkg, ParsedService s, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, @Nullable ApplicationInfo applicationInfo, int userId)", "public static ServiceInfo generateServiceInfoUnchecked(@NonNull ParsedService s, @NonNull ApplicationInfo applicationInfo)", "public static ServiceInfo generateServiceInfo(ParsingPackageRead pkg, ParsedService s, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, int userId)", "public static ProviderInfo generateProviderInfo(ParsingPackageRead pkg, ParsedProvider p, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, @Nullable ApplicationInfo applicationInfo, int userId)", "public static ProviderInfo generateProviderInfoUnchecked(@NonNull ParsedProvider p, @PackageManager.ComponentInfoFlags int flags, @NonNull ApplicationInfo applicationInfo)", "public static ProviderInfo generateProviderInfo(ParsingPackageRead pkg, ParsedProvider p, @PackageManager.ComponentInfoFlags int flags, PackageUserState state, int userId)", "public static InstrumentationInfo generateInstrumentationInfo(ParsedInstrumentation i, ParsingPackageRead pkg, @PackageManager.ComponentInfoFlags int flags, int userId)", "public static PermissionInfo generatePermissionInfo(ParsedPermission p, @PackageManager.ComponentInfoFlags int flags)", "public static PermissionGroupInfo generatePermissionGroupInfo(ParsedPermissionGroup pg, @PackageManager.ComponentInfoFlags int flags)", "private static void assignSharedFieldsForComponentInfo(@NonNull ComponentInfo componentInfo, @NonNull ParsedMainComponent mainComponent)", "private static void assignSharedFieldsForPackageItemInfo(@NonNull PackageItemInfo packageItemInfo, @NonNull ParsedComponent component)", "private static int flag(boolean hasFlag, int flag)", "public static int appInfoFlags(ParsingPackageRead pkg)", "public static int appInfoPrivateFlags(ParsingPackageRead pkg)", "private static boolean checkUseInstalled(ParsingPackageRead pkg, PackageUserState state, @PackageManager.PackageInfoFlags int flags)", "public static File getDataDir(ParsingPackageRead pkg, int userId)", "public static File getDeviceProtectedDataDir(ParsingPackageRead pkg, int userId)", "public static File getCredentialProtectedDataDir(ParsingPackageRead pkg, int userId)" ]
}