{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/MeasuredParagraph.java",
  "packageName" : "android.text",
  "className" : "MeasuredParagraph",
  "comment" : "\n * MeasuredParagraph provides text information for rendering purpose.\n *\n * The first motivation of this class is identify the text directions and retrieving individual\n * character widths. However retrieving character widths is slower than identifying text directions.\n * Thus, this class provides several builder methods for specific purposes.\n *\n * - buildForBidi:\n *   Compute only text directions.\n * - buildForMeasurement:\n *   Compute text direction and all character widths.\n * - buildForStaticLayout:\n *   This is bit special. StaticLayout also needs to know text direction and character widths for\n *   line breaking, but all things are done in native code. Similarly, text measurement is done\n *   in native code. So instead of storing result to Java array, this keeps the result in native\n *   code since there is no good reason to move the results to Java layer.\n *\n * In addition to the character widths, some additional information is computed for each purposes,\n * e.g. whole text length for measurement or font metrics for static layout.\n *\n * MeasuredParagraph is NOT a thread safe object.\n * @hide\n ",
  "variables" : [ {
    "name" : "OBJECT_REPLACEMENT_CHARACTER",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<MeasuredParagraph>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanned",
    "type" : "Spanned",
    "comment" : " This may be null if the passed text is not a Spanned.",
    "links" : [ ]
  }, {
    "name" : "mTextStart",
    "type" : "int",
    "comment" : " The start offset of the target range in the original text (mSpanned);",
    "links" : [ ]
  }, {
    "name" : "mTextLength",
    "type" : "int",
    "comment" : " The length of the target range in the original text.",
    "links" : [ ]
  }, {
    "name" : "mCopiedBuffer",
    "type" : "char[]",
    "comment" : " The length of this array is mTextLength.",
    "links" : [ ]
  }, {
    "name" : "mParaDir",
    "type" : "int",
    "comment" : " The whole paragraph direction.",
    "links" : [ ]
  }, {
    "name" : "mLtrWithoutBidi",
    "type" : "boolean",
    "comment" : " True if the text is LTR direction and doesn't contain any bidi characters.",
    "links" : [ ]
  }, {
    "name" : "mLevels",
    "type" : "ByteArray",
    "comment" : " This is empty if mLtrWithoutBidi is true.",
    "links" : [ ]
  }, {
    "name" : "mWholeWidth",
    "type" : "float",
    "comment" : " See getWholeWidth comments.",
    "links" : [ ]
  }, {
    "name" : "mWidths",
    "type" : "FloatArray",
    "comment" : " See getWidths comments.",
    "links" : [ ]
  }, {
    "name" : "mSpanEndCache",
    "type" : "IntArray",
    "comment" : " See getSpanEndCache comments.",
    "links" : [ ]
  }, {
    "name" : "mFontMetrics",
    "type" : "IntArray",
    "comment" : " See getFontMetrics comments.",
    "links" : [ ]
  }, {
    "name" : "mMeasuredText",
    "type" : "MeasuredText",
    "comment" : " The native MeasuredParagraph.",
    "links" : [ ]
  }, {
    "name" : "mCachedPaint",
    "type" : "TextPaint",
    "comment" : " Following two objects are for avoiding object allocation.",
    "links" : [ ]
  }, {
    "name" : "mCachedFm",
    "type" : "Paint.FontMetricsInt",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static MeasuredParagraph obtain()",
    "returnType" : "MeasuredParagraph",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycle the MeasuredParagraph.\n     *\n     * Do not call any methods after you call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases internal buffers.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the internal state for starting new text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTextLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the paragraph.\n     *\n     * This is always available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] getChars()",
    "returnType" : "char[]",
    "comment" : "\n     * Returns the characters to be measured.\n     *\n     * This is always available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphDir()",
    "returnType" : "int",
    "comment" : "\n     * Returns the paragraph direction.\n     *\n     * This is always available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Directions getDirections(@IntRange(from = 0) int start, @IntRange(from = 0) int end)",
    "returnType" : "Directions",
    "comment" : "\n     * Returns the directions.\n     *\n     * This is always available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getWholeWidth()",
    "returnType" : "float",
    "comment" : "\n     * Returns the whole text width.\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForMeasurement.\n     * Returns 0 in other cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FloatArray getWidths()",
    "returnType" : "FloatArray",
    "comment" : "\n     * Returns the individual character's width.\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForMeasurement.\n     * Returns empty array in other cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntArray getSpanEndCache()",
    "returnType" : "IntArray",
    "comment" : "\n     * Returns the MetricsAffectingSpan end indices.\n     *\n     * If the input text is not a spanned string, this has one value that is the length of the text.\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForStaticLayout.\n     * Returns empty array in other cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntArray getFontMetrics()",
    "returnType" : "IntArray",
    "comment" : "\n     * Returns the int array which holds FontMetrics.\n     *\n     * This array holds the repeat of top, bottom, ascent, descent of font metrics value.\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForStaticLayout.\n     * Returns empty array in other cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasuredText getMeasuredText()",
    "returnType" : "MeasuredText",
    "comment" : "\n     * Returns the native ptr of the MeasuredParagraph.\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForStaticLayout.\n     * Returns null in other cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getWidth(int start, int end)",
    "returnType" : "float",
    "comment" : "\n     * Returns the width of the given range.\n     *\n     * This is not available if the MeasuredParagraph is computed with buildForBidi.\n     * Returns 0 if the MeasuredParagraph is computed with buildForBidi.\n     *\n     * @param start the inclusive start offset of the target region in the text\n     * @param end the exclusive end offset of the target region in the text\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getBounds(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the bounding rectangle that encloses all of the characters, with an implied origin\n     * at (0, 0).\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForStaticLayout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCharWidthAt(@IntRange(from = 0) int offset)",
    "returnType" : "float",
    "comment" : "\n     * Returns a width of the character at the offset.\n     *\n     * This is available only if the MeasuredParagraph is computed with buildForStaticLayout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasuredParagraph buildForBidi(@NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, @Nullable MeasuredParagraph recycle)",
    "returnType" : "MeasuredParagraph",
    "comment" : "\n     * Generates new MeasuredParagraph for Bidi computation.\n     *\n     * If recycle is null, this returns new instance. If recycle is not null, this fills computed\n     * result to recycle and returns recycle.\n     *\n     * @param text the character sequence to be measured\n     * @param start the inclusive start offset of the target region in the text\n     * @param end the exclusive end offset of the target region in the text\n     * @param textDir the text direction\n     * @param recycle pass existing MeasuredParagraph if you want to recycle it.\n     *\n     * @return measured text\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasuredParagraph buildForMeasurement(@NonNull TextPaint paint, @NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, @Nullable MeasuredParagraph recycle)",
    "returnType" : "MeasuredParagraph",
    "comment" : "\n     * Generates new MeasuredParagraph for measuring texts.\n     *\n     * If recycle is null, this returns new instance. If recycle is not null, this fills computed\n     * result to recycle and returns recycle.\n     *\n     * @param paint the paint to be used for rendering the text.\n     * @param text the character sequence to be measured\n     * @param start the inclusive start offset of the target region in the text\n     * @param end the exclusive end offset of the target region in the text\n     * @param textDir the text direction\n     * @param recycle pass existing MeasuredParagraph if you want to recycle it.\n     *\n     * @return measured text\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasuredParagraph buildForStaticLayout(@NonNull TextPaint paint, @NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, boolean computeHyphenation, boolean computeLayout, @Nullable MeasuredParagraph hint, @Nullable MeasuredParagraph recycle)",
    "returnType" : "MeasuredParagraph",
    "comment" : "\n     * Generates new MeasuredParagraph for StaticLayout.\n     *\n     * If recycle is null, this returns new instance. If recycle is not null, this fills computed\n     * result to recycle and returns recycle.\n     *\n     * @param paint the paint to be used for rendering the text.\n     * @param text the character sequence to be measured\n     * @param start the inclusive start offset of the target region in the text\n     * @param end the exclusive end offset of the target region in the text\n     * @param textDir the text direction\n     * @param computeHyphenation true if need to compute hyphenation, otherwise false\n     * @param computeLayout true if need to compute full layout, otherwise false.\n     * @param hint pass if you already have measured paragraph.\n     * @param recycle pass existing MeasuredParagraph if you want to recycle it.\n     *\n     * @return measured text\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetAndAnalyzeBidi(@NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir)",
    "returnType" : "void",
    "comment" : "\n     * Reset internal state and analyzes text for bidirectional runs.\n     *\n     * @param text the character sequence to be measured\n     * @param start the inclusive start offset of the target region in the text\n     * @param end the exclusive end offset of the target region in the text\n     * @param textDir the text direction\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyReplacementRun(@NonNull ReplacementSpan replacement, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable MeasuredText.Builder builder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyStyleRun(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable MeasuredText.Builder builder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyMetricsAffectingSpan(@NonNull TextPaint paint, @Nullable MetricAffectingSpan[] spans, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable MeasuredText.Builder builder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int breakText(int limit, boolean forwards, float width)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum index that the accumulated width not exceeds the width.\n     *\n     * If forward=false is passed, returns the minimum index from the end instead.\n     *\n     * This only works if the MeasuredParagraph is computed with buildForMeasurement.\n     * Undefined behavior in other case.\n     ",
    "links" : [ ]
  }, {
    "name" : " float measure(int start, int limit)",
    "returnType" : "float",
    "comment" : "\n     * Returns the length of the substring.\n     *\n     * This only works if the MeasuredParagraph is computed with buildForMeasurement.\n     * Undefined behavior in other case.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMemoryUsage()",
    "returnType" : "int",
    "comment" : "\n     * This only works if the MeasuredParagraph is computed with buildForStaticLayout.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "OBJECT_REPLACEMENT_CHARACTER", "sPool", "mSpanned", "mTextStart", "mTextLength", "mCopiedBuffer", "mParaDir", "mLtrWithoutBidi", "mLevels", "mWholeWidth", "mWidths", "mSpanEndCache", "mFontMetrics", "mMeasuredText", "mCachedPaint", "mCachedFm" ],
  "methodNames" : [ "private static MeasuredParagraph obtain()", "public void recycle()", "public void release()", "private void reset()", "public int getTextLength()", "public char[] getChars()", "public int getParagraphDir()", "public Directions getDirections(@IntRange(from = 0) int start, @IntRange(from = 0) int end)", "public float getWholeWidth()", "public FloatArray getWidths()", "public IntArray getSpanEndCache()", "public IntArray getFontMetrics()", "public MeasuredText getMeasuredText()", "public float getWidth(int start, int end)", "public void getBounds(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull Rect bounds)", "public float getCharWidthAt(@IntRange(from = 0) int offset)", "public static MeasuredParagraph buildForBidi(@NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, @Nullable MeasuredParagraph recycle)", "public static MeasuredParagraph buildForMeasurement(@NonNull TextPaint paint, @NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, @Nullable MeasuredParagraph recycle)", "public static MeasuredParagraph buildForStaticLayout(@NonNull TextPaint paint, @NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, boolean computeHyphenation, boolean computeLayout, @Nullable MeasuredParagraph hint, @Nullable MeasuredParagraph recycle)", "private void resetAndAnalyzeBidi(@NonNull CharSequence text, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir)", "private void applyReplacementRun(@NonNull ReplacementSpan replacement, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable MeasuredText.Builder builder)", "private void applyStyleRun(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable MeasuredText.Builder builder)", "private void applyMetricsAffectingSpan(@NonNull TextPaint paint, @Nullable MetricAffectingSpan[] spans, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @Nullable MeasuredText.Builder builder)", " int breakText(int limit, boolean forwards, float width)", " float measure(int start, int limit)", "public int getMemoryUsage()" ]
}