{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/serialize/SerializerUtils.java",
  "packageName" : "org.apache.xalan.serialize",
  "className" : "SerializerUtils",
  "comment" : "\n * Class that contains only static methods that are used to \"serialize\",\n * these methods are used by Xalan and are not in org.apache.xml.serializer\n * because they have dependancies on the packages org.apache.xpath or org.\n * apache.xml.dtm or org.apache.xalan.transformer. The package org.apache.xml.\n * serializer should not depend on Xalan or XSLTC.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void addAttribute(SerializationHandler handler, int attr) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * Copy an DOM attribute to the created output element, executing\n     * attribute templates as need be, and processing the xsl:use\n     * attribute.\n     *\n     * @param handler SerializationHandler to which the attributes are added.\n     * @param attr Attribute node to add to SerializationHandler.\n     *\n     * @throws TransformerException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addAttributes(SerializationHandler handler, int src) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * Copy DOM attributes to the result element.\n     *\n     * @param src Source node with the attributes\n     *\n     * @throws TransformerException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void outputResultTreeFragment(SerializationHandler handler, XObject obj, XPathContext support) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Given a result tree fragment, walk the tree and\n     * output it to the SerializationHandler.\n     *\n     * @param obj Result tree fragment object\n     * @param support XPath context for the result tree fragment\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void processNSDecls(SerializationHandler handler, int src, int type, DTM dtm) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * Copy <KBD>xmlns:</KBD> attributes in if not already in scope.\n     *\n     * As a quick hack to support ClonerToResultTree, this can also be used\n     * to copy an individual namespace node.\n     *\n     * @param src Source Node\n     * NEEDSDOC @param type\n     * NEEDSDOC @param dtm\n     *\n     * @throws TransformerException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDefinedNSDecl(SerializationHandler serializer, int attr, DTM dtm)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a namespace is defined\n     *\n     *\n     * @param attr Namespace attribute node\n     * @param dtm The DTM that owns attr.\n     *\n     * @return True if the namespace is already defined in\n     * list of namespaces\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void ensureNamespaceDeclDeclared(SerializationHandler handler, DTM dtm, int namespace) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * This function checks to make sure a given prefix is really\n     * declared.  It might not be, because it may be an excluded prefix.\n     * If it's not, it still needs to be declared at this point.\n     * TODO: This needs to be done at an earlier stage in the game... -sb\n     *\n     * NEEDSDOC @param dtm\n     * NEEDSDOC @param namespace\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void addAttribute(SerializationHandler handler, int attr) throws TransformerException", "public static void addAttributes(SerializationHandler handler, int src) throws TransformerException", "public static void outputResultTreeFragment(SerializationHandler handler, XObject obj, XPathContext support) throws org.xml.sax.SAXException", "public static void processNSDecls(SerializationHandler handler, int src, int type, DTM dtm) throws TransformerException", "public static boolean isDefinedNSDecl(SerializationHandler serializer, int attr, DTM dtm)", "public static void ensureNamespaceDeclDeclared(SerializationHandler handler, DTM dtm, int namespace) throws org.xml.sax.SAXException" ],
  "variableNames" : [ ]
}