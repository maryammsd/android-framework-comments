{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/BytesTrie.java",
  "packageName" : "android.icu.util",
  "className" : "BytesTrie",
  "comment" : "\n * Light-weight, non-const reader class for a BytesTrie.\n * Traverses a byte-serialized data structure with minimal state,\n * for mapping byte sequences to non-negative integer values.\n *\n * <p>This class is not intended for public subclassing.\n *\n * @author Markus W. Scherer\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "valueResults_",
    "type" : "Result[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMaxBranchLinearSubNodeLength",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinLinearMatch",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxLinearMatchLength",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinValueLead",
    "type" : "int",
    "comment" : " 0x20",
    "links" : [ ]
  }, {
    "name" : "kValueIsFinal",
    "type" : "int",
    "comment" : " It is a final value if bit 0 is set.",
    "links" : [ ]
  }, {
    "name" : "kMinOneByteValueLead",
    "type" : "int",
    "comment" : " 0x10",
    "links" : [ ]
  }, {
    "name" : "kMaxOneByteValue",
    "type" : "int",
    "comment" : " At least 6 bits in the first byte.",
    "links" : [ ]
  }, {
    "name" : "kMinTwoByteValueLead",
    "type" : "int",
    "comment" : " 0x51",
    "links" : [ ]
  }, {
    "name" : "kMaxTwoByteValue",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinThreeByteValueLead",
    "type" : "int",
    "comment" : " 0x6c",
    "links" : [ ]
  }, {
    "name" : "kFourByteValueLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxThreeByteValue",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kFiveByteValueLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxOneByteDelta",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinTwoByteDeltaLead",
    "type" : "int",
    "comment" : " 0xc0",
    "links" : [ ]
  }, {
    "name" : "kMinThreeByteDeltaLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kFourByteDeltaLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kFiveByteDeltaLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxTwoByteDelta",
    "type" : "int",
    "comment" : " 0x2fff",
    "links" : [ ]
  }, {
    "name" : "kMaxThreeByteDelta",
    "type" : "int",
    "comment" : " 0xdffff",
    "links" : [ ]
  }, {
    "name" : "bytes_",
    "type" : "byte[]",
    "comment" : " Fixed value referencing the BytesTrie bytes.",
    "links" : [ ]
  }, {
    "name" : "root_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pos_",
    "type" : "int",
    "comment" : " Index of next trie byte to read. Negative if no more matches.",
    "links" : [ ]
  }, {
    "name" : "remainingMatchLength_",
    "type" : "int",
    "comment" : " Remaining length of a linear-match node, minus 1. Negative if not in such a node.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BytesTrie clone() throws CloneNotSupportedException",
    "returnType" : "BytesTrie",
    "comment" : "\n     * Clones this trie reader object and its state,\n     * but not the byte array which will be shared.\n     * @return A shallow clone of this trie.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BytesTrie reset()",
    "returnType" : "BytesTrie",
    "comment" : "\n     * Resets this trie to its initial state.\n     * @return this\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getState64()",
    "returnType" : "long",
    "comment" : "\n     * Returns the state of this trie as a 64-bit integer.\n     * The state value is never 0.\n     *\n     * @return opaque state value\n     * @see #resetToState64\n     ",
    "links" : [ ]
  }, {
    "name" : "public BytesTrie resetToState64(long state)",
    "returnType" : "BytesTrie",
    "comment" : "\n     * Resets this trie to the saved state.\n     * Unlike {@link #resetToState(State)}, the 64-bit state value\n     * must be from {@link #getState64()} from the same trie object or\n     * from one initialized the exact same way.\n     * Because of no validation, this method is faster.\n     *\n     * @param state The opaque trie state value from getState64().\n     * @return this\n     * @see #getState64\n     * @see #resetToState\n     * @see #reset\n     ",
    "links" : [ "#getState64()", "#resetToState(State)" ]
  }, {
    "name" : "public BytesTrie saveState(State state)",
    "returnType" : "BytesTrie",
    "comment" : "\n     * Saves the state of this trie.\n     * @param state The State object to hold the trie's state.\n     * @return this\n     * @see #resetToState\n     ",
    "links" : [ ]
  }, {
    "name" : "public BytesTrie resetToState(State state)",
    "returnType" : "BytesTrie",
    "comment" : "\n     * Resets this trie to the saved state.\n     * Slower than {@link #resetToState64(long)} which does not validate the state value.\n     *\n     * @param state The State object which holds a saved trie state.\n     * @return this\n     * @throws IllegalArgumentException if the state object contains no state,\n     *         or the state of a different trie\n     * @see #saveState\n     * @see #reset\n     ",
    "links" : [ "#resetToState64(long)" ]
  }, {
    "name" : "public Result current()",
    "returnType" : "Result",
    "comment" : "\n     * Determines whether the byte sequence so far matches, whether it has a value,\n     * and whether another input byte can continue a matching byte sequence.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result first(int inByte)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the initial state for this input byte.\n     * Equivalent to reset().next(inByte).\n     * @param inByte Input byte value. Values -0x100..-1 are treated like 0..0xff.\n     *               Values below -0x100 and above 0xff will never match.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result next(int inByte)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the current state for this input byte.\n     * @param inByte Input byte value. Values -0x100..-1 are treated like 0..0xff.\n     *               Values below -0x100 and above 0xff will never match.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result next(byte[] s, int sIndex, int sLimit)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the current state for this byte sequence.\n     * Equivalent to\n     * <pre>\n     * Result result=current();\n     * for(each c in s)\n     *   if(!result.hasNext()) return Result.NO_MATCH;\n     *   result=next(c);\n     * return result;\n     * </pre>\n     * @param s Contains a string or byte sequence.\n     * @param sIndex The start index of the byte sequence in s.\n     * @param sLimit The (exclusive) end index of the byte sequence in s.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns a matching byte sequence's value if called immediately after\n     * current()/first()/next() returned Result.INTERMEDIATE_VALUE or Result.FINAL_VALUE.\n     * getValue() can be called multiple times.\n     *\n     * Do not call getValue() after Result.NO_MATCH or Result.NO_VALUE!\n     * @return The value for the byte sequence so far.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUniqueValue()",
    "returnType" : "long",
    "comment" : "\n     * Determines whether all byte sequences reachable from the current state\n     * map to the same value, and if so, returns that value.\n     * @return The unique value in bits 32..1 with bit 0 set,\n     *         if all byte sequences reachable from the current state\n     *         map to the same value; otherwise returns 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextBytes(Appendable out)",
    "returnType" : "int",
    "comment" : "\n     * Finds each byte which continues the byte sequence from the current state.\n     * That is, each byte b for which it would be next(b)!=Result.NO_MATCH now.\n     * @param out Each next byte is 0-extended to a char and appended to this object.\n     *            (Only uses the out.append(c) method.)\n     * @return The number of bytes which continue the byte sequence from here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator iterator()",
    "returnType" : "Iterator",
    "comment" : "\n     * Iterates from the current state of this trie.\n     * @return A new BytesTrie.Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator iterator(int maxStringLength)",
    "returnType" : "Iterator",
    "comment" : "\n     * Iterates from the current state of this trie.\n     * @param maxStringLength If 0, the iterator returns full strings/byte sequences.\n     *                        Otherwise, the iterator returns strings with this maximum length.\n     * @return A new BytesTrie.Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Iterator iterator(byte[] trieBytes, int offset, int maxStringLength)",
    "returnType" : "Iterator",
    "comment" : "\n     * Iterates from the root of a byte-serialized BytesTrie.\n     * @param trieBytes Bytes array that contains the serialized trie.\n     * @param offset Root offset of the trie in the array.\n     * @param maxStringLength If 0, the iterator returns full strings/byte sequences.\n     *                        Otherwise, the iterator returns strings with this maximum length.\n     * @return A new BytesTrie.Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void stop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int readValue(byte[] bytes, int pos, int leadByte)",
    "returnType" : "int",
    "comment" : " pos is already after the leadByte, and the lead byte is already shifted right by 1.",
    "links" : [ ]
  }, {
    "name" : "private static int skipValue(int pos, int leadByte)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int skipValue(byte[] bytes, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int jumpByDelta(byte[] bytes, int pos)",
    "returnType" : "int",
    "comment" : "\n     * Reads a jump delta and jumps.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int skipDelta(byte[] bytes, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Result branchNext(int pos, int length, int inByte)",
    "returnType" : "Result",
    "comment" : " Handles a branch node for both next(byte) and next(string).",
    "links" : [ ]
  }, {
    "name" : "private Result nextImpl(int pos, int inByte)",
    "returnType" : "Result",
    "comment" : " Requires remainingLength_<0.",
    "links" : [ ]
  }, {
    "name" : "private static long findUniqueValueFromBranch(byte[] bytes, int pos, int length, long uniqueValue)",
    "returnType" : "long",
    "comment" : " On return, if not 0, then bits 63..33 contain the updated non-negative pos.",
    "links" : [ ]
  }, {
    "name" : "private static long findUniqueValue(byte[] bytes, int pos, long uniqueValue)",
    "returnType" : "long",
    "comment" : " Otherwise, uniqueValue is 0. Bits 63..33 are ignored.",
    "links" : [ ]
  }, {
    "name" : "private static void getNextBranchBytes(byte[] bytes, int pos, int length, Appendable out)",
    "returnType" : "void",
    "comment" : " getNextBytes() when pos is on a branch node.",
    "links" : [ ]
  }, {
    "name" : "private static void append(Appendable out, int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public BytesTrie clone() throws CloneNotSupportedException", "public BytesTrie reset()", "public long getState64()", "public BytesTrie resetToState64(long state)", "public BytesTrie saveState(State state)", "public BytesTrie resetToState(State state)", "public Result current()", "public Result first(int inByte)", "public Result next(int inByte)", "public Result next(byte[] s, int sIndex, int sLimit)", "public int getValue()", "public long getUniqueValue()", "public int getNextBytes(Appendable out)", "public Iterator iterator()", "public Iterator iterator(int maxStringLength)", "public static Iterator iterator(byte[] trieBytes, int offset, int maxStringLength)", "private void stop()", "private static int readValue(byte[] bytes, int pos, int leadByte)", "private static int skipValue(int pos, int leadByte)", "private static int skipValue(byte[] bytes, int pos)", "public static int jumpByDelta(byte[] bytes, int pos)", "private static int skipDelta(byte[] bytes, int pos)", "private Result branchNext(int pos, int length, int inByte)", "private Result nextImpl(int pos, int inByte)", "private static long findUniqueValueFromBranch(byte[] bytes, int pos, int length, long uniqueValue)", "private static long findUniqueValue(byte[] bytes, int pos, long uniqueValue)", "private static void getNextBranchBytes(byte[] bytes, int pos, int length, Appendable out)", "private static void append(Appendable out, int c)" ],
  "variableNames" : [ "valueResults_", "kMaxBranchLinearSubNodeLength", "kMinLinearMatch", "kMaxLinearMatchLength", "kMinValueLead", "kValueIsFinal", "kMinOneByteValueLead", "kMaxOneByteValue", "kMinTwoByteValueLead", "kMaxTwoByteValue", "kMinThreeByteValueLead", "kFourByteValueLead", "kMaxThreeByteValue", "kFiveByteValueLead", "kMaxOneByteDelta", "kMinTwoByteDeltaLead", "kMinThreeByteDeltaLead", "kFourByteDeltaLead", "kFiveByteDeltaLead", "kMaxTwoByteDelta", "kMaxThreeByteDelta", "bytes_", "root_", "pos_", "remainingMatchLength_" ]
}