{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/inputmethodservice/InputMethodServiceInternal.java",
  "packageName" : "android.inputmethodservice",
  "className" : "InputMethodServiceInternal",
  "comment" : "\n * A set of internal methods exposed by {@link InputMethodService} to be called only from other\n * framework classes for internal use.\n *\n * <p>CAVEATS: {@link AbstractInputMethodService} does not support all the methods here.</p>\n ",
  "links" : [ "android.inputmethodservice.InputMethodService", "android.inputmethodservice.AbstractInputMethodService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * @return {@link Context} associated with the service.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : " void exposeContent(@NonNull InputContentInfo inputContentInfo, @NonNull InputConnection inputConnection)",
    "returnType" : "void",
    "comment" : "\n     * Allow the receiver of {@link InputContentInfo} to obtain a temporary read-only access\n     * permission to the content.\n     *\n     * @param inputContentInfo Content to be temporarily exposed from the input method to the\n     *                         application. This cannot be {@code null}.\n     * @param inputConnection {@link InputConnection} with which\n     *                        {@link InputConnection#commitContent(InputContentInfo, int, Bundle)}\n     *                        will be called.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection", "android.view.inputmethod.InputConnection#commitContent(InputContentInfo", "android.view.inputmethod.InputContentInfo" ]
  }, {
    "name" : " void notifyUserActionIfNecessary()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user took some actions that should be taken into consideration to update the\n     * MRU list for input method rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dump(@SuppressLint(\"UseParcelFileDescriptor\") @NonNull FileDescriptor fd, @NonNull PrintWriter fout, @NonNull String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Called when the system is asking the IME to dump its information for debugging.\n     *\n     * <p>The caller is responsible for checking {@link android.Manifest.permission.DUMP}.</p>\n     *\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param fout The file to which you should dump your state.  This will be\n     * closed for you after you return.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ "android.Manifest.permission.DUMP" ]
  }, {
    "name" : " void triggerServiceDump(@NonNull String where, @Nullable byte[] icProto)",
    "returnType" : "void",
    "comment" : "\n     * Called with {@link com.android.internal.inputmethod.ImeTracing#triggerServiceDump(String,\n     * com.android.internal.inputmethod.ImeTracing.ServiceDumper, byte[])} needs to be triggered\n     * with the given parameters.\n     *\n     * @param where {@code where} parameter to be passed.\n     * @param icProto {@code icProto} parameter to be passed.\n     ",
    "links" : [ "com.android.internal.inputmethod.ImeTracing#triggerServiceDump(String" ]
  }, {
    "name" : " boolean isServiceDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@link InputMethodService} is destroyed.\n     ",
    "links" : [ "android.inputmethodservice.InputMethodService" ]
  } ],
  "methodNames" : [ " Context getContext()", " void exposeContent(@NonNull InputContentInfo inputContentInfo, @NonNull InputConnection inputConnection)", " void notifyUserActionIfNecessary()", " void dump(@SuppressLint(\"UseParcelFileDescriptor\") @NonNull FileDescriptor fd, @NonNull PrintWriter fout, @NonNull String[] args)", " void triggerServiceDump(@NonNull String where, @Nullable byte[] icProto)", " boolean isServiceDestroyed()" ],
  "variableNames" : [ ]
}