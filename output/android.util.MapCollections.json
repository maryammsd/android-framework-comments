{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/MapCollections.java",
  "packageName" : "android.util",
  "className" : "MapCollections",
  "comment" : "\n * Helper for writing standard Java collection interfaces to a data\n * structure like {@link ArrayMap}.\n * @hide\n ",
  "links" : [ "android.util.ArrayMap" ],
  "variables" : [ {
    "name" : "mEntrySet",
    "type" : "EntrySet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeySet",
    "type" : "KeySet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "ValuesCollection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean containsAllHelper(Map<K, V> map, Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean removeAllHelper(Map<K, V> map, Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean retainAllHelper(Map<K, V> map, Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArrayHelper(int offset)",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T[] toArrayHelper(T[] array, int offset)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean equalsSetHelper(Set<T> set, Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Map.Entry<K, V>> getEntrySet()",
    "returnType" : "Set<Map.Entry<K, V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<K> getKeySet()",
    "returnType" : "Set<K>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Collection<V> getValues()",
    "returnType" : "Collection<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract int colGetSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract Object colGetEntry(int index, int offset)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract int colIndexOfKey(Object key)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract int colIndexOfValue(Object key)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract Map<K, V> colGetMap()",
    "returnType" : "Map<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void colPut(K key, V value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract V colSetValue(int index, V value)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void colRemoveAt(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void colClear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean containsAllHelper(Map<K, V> map, Collection<?> collection)", "public static boolean removeAllHelper(Map<K, V> map, Collection<?> collection)", "public static boolean retainAllHelper(Map<K, V> map, Collection<?> collection)", "public Object[] toArrayHelper(int offset)", "public T[] toArrayHelper(T[] array, int offset)", "public static boolean equalsSetHelper(Set<T> set, Object object)", "public Set<Map.Entry<K, V>> getEntrySet()", "public Set<K> getKeySet()", "public Collection<V> getValues()", "protected abstract int colGetSize()", "protected abstract Object colGetEntry(int index, int offset)", "protected abstract int colIndexOfKey(Object key)", "protected abstract int colIndexOfValue(Object key)", "protected abstract Map<K, V> colGetMap()", "protected abstract void colPut(K key, V value)", "protected abstract V colSetValue(int index, V value)", "protected abstract void colRemoveAt(int index)", "protected abstract void colClear()" ],
  "variableNames" : [ "mEntrySet", "mKeySet", "mValues" ]
}