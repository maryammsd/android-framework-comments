{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/PointerIcon.java",
  "packageName" : "android.view",
  "className" : "PointerIcon",
  "comment" : "\n * Represents an icon that can be used as a mouse pointer.\n * <p>\n * Pointer icons can be provided either by the system using system types,\n * or by applications using bitmaps or application resources.\n * </p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_CUSTOM",
    "type" : "int",
    "comment" : " {@hide} Type constant: Custom icon with a user-supplied bitmap. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NULL",
    "type" : "int",
    "comment" : " Type constant: Null icon.  It has no bitmap. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NOT_SPECIFIED",
    "type" : "int",
    "comment" : "\n     * Type constant: no icons are specified. If all views uses this, then the pointer icon falls\n     * back to the default type, but this is helpful to distinguish a view that explicitly wants\n     * to have the default icon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ARROW",
    "type" : "int",
    "comment" : " Type constant: Arrow icon.  (Default mouse pointer) ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SPOT_HOVER",
    "type" : "int",
    "comment" : " {@hide} Type constant: Spot hover icon for touchpads. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SPOT_TOUCH",
    "type" : "int",
    "comment" : " {@hide} Type constant: Spot touch icon for touchpads. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SPOT_ANCHOR",
    "type" : "int",
    "comment" : " {@hide} Type constant: Spot anchor icon for touchpads. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CONTEXT_MENU",
    "type" : "int",
    "comment" : " Type constant: context-menu. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HAND",
    "type" : "int",
    "comment" : " Type constant: hand. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HELP",
    "type" : "int",
    "comment" : " Type constant: help. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_WAIT",
    "type" : "int",
    "comment" : " Type constant: wait. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CELL",
    "type" : "int",
    "comment" : " Type constant: cell. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CROSSHAIR",
    "type" : "int",
    "comment" : " Type constant: crosshair. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TEXT",
    "type" : "int",
    "comment" : " Type constant: text. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VERTICAL_TEXT",
    "type" : "int",
    "comment" : " Type constant: vertical-text. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALIAS",
    "type" : "int",
    "comment" : " Type constant: alias (indicating an alias of/shortcut to something is\n      * to be created. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_COPY",
    "type" : "int",
    "comment" : " Type constant: copy. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NO_DROP",
    "type" : "int",
    "comment" : " Type constant: no-drop. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALL_SCROLL",
    "type" : "int",
    "comment" : " Type constant: all-scroll. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HORIZONTAL_DOUBLE_ARROW",
    "type" : "int",
    "comment" : " Type constant: horizontal double arrow mainly for resizing. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VERTICAL_DOUBLE_ARROW",
    "type" : "int",
    "comment" : " Type constant: vertical double arrow mainly for resizing. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW",
    "type" : "int",
    "comment" : " Type constant: diagonal double arrow -- top-right to bottom-left. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW",
    "type" : "int",
    "comment" : " Type constant: diagonal double arrow -- top-left to bottom-right. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ZOOM_IN",
    "type" : "int",
    "comment" : " Type constant: zoom-in. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ZOOM_OUT",
    "type" : "int",
    "comment" : " Type constant: zoom-out. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GRAB",
    "type" : "int",
    "comment" : " Type constant: grab. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GRABBING",
    "type" : "int",
    "comment" : " Type constant: grabbing. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HANDWRITING",
    "type" : "int",
    "comment" : " Type constant: handwriting. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_OEM_FIRST",
    "type" : "int",
    "comment" : " conflicts with any system types that may be defined in the future.",
    "links" : [ ]
  }, {
    "name" : "TYPE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * The default pointer icon.\n     * @deprecated This is the same as using {@link #TYPE_ARROW}. Use {@link #TYPE_ARROW} to\n     *     explicitly show an arrow, or use a {@code null} {@link PointerIcon} with\n     *     {@link View#setPointerIcon(PointerIcon)} or\n     *     {@link View#onResolvePointerIcon(MotionEvent, int)} instead to show\n     *     the default pointer icon.\n     ",
    "links" : [ "android.view.PointerIcon", "android.view.View#onResolvePointerIcon(MotionEvent", "#TYPE_ARROW", "android.view.View#setPointerIcon(PointerIcon)" ]
  }, {
    "name" : "SYSTEM_ICONS",
    "type" : "SparseArray<PointerIcon>",
    "comment" : " every time we need to resolve the icon (i.e. on each input event).",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitmap",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotSpotX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotSpotY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitmapFrames",
    "type" : "Bitmap[]",
    "comment" : " will be stored in mBitmap.",
    "links" : [ ]
  }, {
    "name" : "mDurationPerFrame",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawNativeDropShadow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PointerIcon>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PointerIcon getSystemIcon(@NonNull Context context, int type)",
    "returnType" : "PointerIcon",
    "comment" : "\n     * Gets a system pointer icon for the given type.\n     *\n     * @param context The context.\n     * @param type The pointer icon type.\n     * @return The pointer icon.\n     *\n     * @throws IllegalArgumentException if context is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PointerIcon getSystemIcon(int type)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PointerIcon getLoadedSystemIcon(@NonNull Context context, int type, boolean useLargeIcons)",
    "returnType" : "PointerIcon",
    "comment" : "\n     * Get a system icon with its resources loaded.\n     * This should only be used by the system for drawing icons to the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isLoaded()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PointerIcon create(@NonNull Bitmap bitmap, float hotSpotX, float hotSpotY)",
    "returnType" : "PointerIcon",
    "comment" : "\n     * Creates a custom pointer icon from the given bitmap and hotspot information.\n     *\n     * @param bitmap The bitmap for the icon.\n     * @param hotSpotX The X offset of the pointer icon hotspot in the bitmap.\n     *        Must be within the [0, bitmap.getWidth()) range.\n     * @param hotSpotY The Y offset of the pointer icon hotspot in the bitmap.\n     *        Must be within the [0, bitmap.getHeight()) range.\n     * @return A pointer icon for this bitmap.\n     *\n     * @throws IllegalArgumentException if bitmap is null, or if the x/y hotspot\n     *         parameters are invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PointerIcon load(@NonNull Resources resources, @XmlRes int resourceId)",
    "returnType" : "PointerIcon",
    "comment" : "\n     * Loads a custom pointer icon from an XML resource.\n     * <p>\n     * The XML resource should have the following form:\n     * <code>\n     * &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n     * &lt;pointer-icon xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     *   android:bitmap=\"@drawable/my_pointer_bitmap\"\n     *   android:hotSpotX=\"24\"\n     *   android:hotSpotY=\"24\" /&gt;\n     * </code>\n     * </p>\n     *\n     * @param resources The resources object.\n     * @param resourceId The resource id.\n     * @return The pointer icon.\n     *\n     * @throws IllegalArgumentException if resources is null.\n     * @throws Resources.NotFoundException if the resource was not found or the drawable\n     * linked in the resource was not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bitmap getBitmapFromDrawable(BitmapDrawable bitmapDrawable)",
    "returnType" : "Bitmap",
    "comment" : "\n     *  Get the Bitmap from the Drawable.\n     *\n     *  If the Bitmap needed to be scaled up to account for density, BitmapDrawable\n     *  handles this at draw time. But this class doesn't actually draw the Bitmap;\n     *  it is just a holder for native code to access its SkBitmap. So this needs to\n     *  get a version that is scaled to account for density.\n     ",
    "links" : [ ]
  }, {
    "name" : "private BitmapDrawable getBitmapDrawableFromVectorDrawable(Resources resources, VectorDrawable vectorDrawable)",
    "returnType" : "BitmapDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loadResource(@NonNull Resources resources, @XmlRes int resourceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validateHotSpot(Bitmap bitmap, float hotSpotX, float hotSpotY, boolean isScaled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getSystemIconTypeIndex(int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String typeToString(int type)",
    "returnType" : "String",
    "comment" : "\n     * Convert type constant to string.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDrawNativeDropShadow(boolean drawNativeDropShadow)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether drop shadow will draw in the native code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static PointerIcon getSystemIcon(@NonNull Context context, int type)", "private static PointerIcon getSystemIcon(int type)", "public static PointerIcon getLoadedSystemIcon(@NonNull Context context, int type, boolean useLargeIcons)", "private boolean isLoaded()", "public static PointerIcon create(@NonNull Bitmap bitmap, float hotSpotX, float hotSpotY)", "public static PointerIcon load(@NonNull Resources resources, @XmlRes int resourceId)", "public int getType()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public boolean equals(@Nullable Object other)", "private Bitmap getBitmapFromDrawable(BitmapDrawable bitmapDrawable)", "private BitmapDrawable getBitmapDrawableFromVectorDrawable(Resources resources, VectorDrawable vectorDrawable)", "private void loadResource(@NonNull Resources resources, @XmlRes int resourceId)", "public String toString()", "private static void validateHotSpot(Bitmap bitmap, float hotSpotX, float hotSpotY, boolean isScaled)", "private static int getSystemIconTypeIndex(int type)", "public static String typeToString(int type)", "public void setDrawNativeDropShadow(boolean drawNativeDropShadow)" ],
  "variableNames" : [ "TAG", "TYPE_CUSTOM", "TYPE_NULL", "TYPE_NOT_SPECIFIED", "TYPE_ARROW", "TYPE_SPOT_HOVER", "TYPE_SPOT_TOUCH", "TYPE_SPOT_ANCHOR", "TYPE_CONTEXT_MENU", "TYPE_HAND", "TYPE_HELP", "TYPE_WAIT", "TYPE_CELL", "TYPE_CROSSHAIR", "TYPE_TEXT", "TYPE_VERTICAL_TEXT", "TYPE_ALIAS", "TYPE_COPY", "TYPE_NO_DROP", "TYPE_ALL_SCROLL", "TYPE_HORIZONTAL_DOUBLE_ARROW", "TYPE_VERTICAL_DOUBLE_ARROW", "TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW", "TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW", "TYPE_ZOOM_IN", "TYPE_ZOOM_OUT", "TYPE_GRAB", "TYPE_GRABBING", "TYPE_HANDWRITING", "TYPE_OEM_FIRST", "TYPE_DEFAULT", "SYSTEM_ICONS", "mType", "mBitmap", "mHotSpotX", "mHotSpotY", "mBitmapFrames", "mDurationPerFrame", "mDrawNativeDropShadow", "CREATOR" ]
}