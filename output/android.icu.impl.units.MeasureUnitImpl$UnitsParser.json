{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/MeasureUnitImpl.java",
  "packageName" : "android.icu.impl.units",
  "className" : "UnitsParser",
  "comment" : "\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "savedTrie",
    "type" : "CharsTrie",
    "comment" : " This used only to not build the trie each time we use the parser",
    "links" : [ ]
  }, {
    "name" : "trie",
    "type" : "CharsTrie",
    "comment" : " This trie used in the parsing operation.",
    "links" : [ ]
  }, {
    "name" : "fSource",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fIndex",
    "type" : "int",
    "comment" : " Tracks parser progress: the offset into fSource.",
    "links" : [ ]
  }, {
    "name" : "fAfterPer",
    "type" : "boolean",
    "comment" : " identifier is invalid pending TODO(CLDR-13701).",
    "links" : [ ]
  }, {
    "name" : "fSawAnd",
    "type" : "boolean",
    "comment" : "     * unit\", sawAnd is set to true. If not, it is left as is.",
    "links" : [ ]
  }, {
    "name" : "measurePrefixValues",
    "type" : "MeasureUnit.MeasurePrefix[]",
    "comment" : " more efficient",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MeasureUnitImpl parseForIdentifier(String identifier)",
    "returnType" : "MeasureUnitImpl",
    "comment" : "\n         * Construct a MeasureUnit from a CLDR Unit Identifier, defined in UTS 35.\n         * Validates and canonicalizes the identifier.\n         *\n         * @return MeasureUnitImpl object or null if the identifier is empty.\n         * @throws IllegalArgumentException in case of invalid identifier.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static MeasureUnit.MeasurePrefix getPrefixFromTrieIndex(int trieIndex)",
    "returnType" : "MeasureUnit.MeasurePrefix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getTrieIndexForPrefix(MeasureUnit.MeasurePrefix prefix)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MeasureUnitImpl parse()",
    "returnType" : "MeasureUnitImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SingleUnitImpl nextSingleUnit()",
    "returnType" : "SingleUnitImpl",
    "comment" : "\n         * Returns the next \"single unit\" via result.\n         * <p>\n         * If a \"-per-\" was parsed, the result will have appropriate negative\n         * dimensionality.\n         * <p>\n         *\n         * @throws IllegalArgumentException if we parse both compound units and \"-and-\", since mixed\n         *                                  compound units are not yet supported - TODO(CLDR-13701).\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Token nextToken()",
    "returnType" : "Token",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MeasureUnitImpl parseForIdentifier(String identifier)", "private static MeasureUnit.MeasurePrefix getPrefixFromTrieIndex(int trieIndex)", "private static int getTrieIndexForPrefix(MeasureUnit.MeasurePrefix prefix)", "private MeasureUnitImpl parse()", "private SingleUnitImpl nextSingleUnit()", "private boolean hasNext()", "private Token nextToken()" ],
  "variableNames" : [ "savedTrie", "trie", "fSource", "fIndex", "fAfterPer", "fSawAnd", "measurePrefixValues" ]
}