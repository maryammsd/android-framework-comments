{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/InputMethodSubtype.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputMethodSubtypeBuilder",
  "comment" : "\n     * InputMethodSubtypeBuilder is a builder class of InputMethodSubtype.\n     * This class is designed to be used with\n     * {@link android.view.inputmethod.InputMethodManager#setAdditionalInputMethodSubtypes}.\n     * The developer needs to be aware of what each parameter means.\n     ",
  "links" : [ "android.view.inputmethod.InputMethodManager#setAdditionalInputMethodSubtypes" ],
  "variables" : [ {
    "name" : "mIsAuxiliary",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverridesImplicitlyEnabledSubtype",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAsciiCapable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeIconResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeNameResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeNameOverride",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPkLanguageTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPkLayoutType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeLocale",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeLanguageTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeMode",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeExtraValue",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public InputMethodSubtypeBuilder setIsAuxiliary(boolean isAuxiliary)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param isAuxiliary should true when this subtype is auxiliary, false otherwise.\n         * An auxiliary subtype has the following differences with a regular subtype:\n         * - An auxiliary subtype cannot be chosen as the default IME in Settings.\n         * - The framework will never switch to this subtype through\n         *   {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.\n         * Note that the subtype will still be available in the IME switcher.\n         * The intent is to allow for IMEs to specify they are meant to be invoked temporarily\n         * in a one-shot way, and to return to the previous IME once finished (e.g. voice input).\n         ",
    "links" : [ "android.view.inputmethod.InputMethodManager#switchToLastInputMethod" ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean overridesImplicitlyEnabledSubtype)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param overridesImplicitlyEnabledSubtype should be true if this subtype should be\n         * enabled by default if no other subtypes in the IME are enabled explicitly. Note that a\n         * subtype with this parameter set will not be shown in the list of subtypes in each IME's\n         * subtype enabler. A canonical use of this would be for an IME to supply an \"automatic\"\n         * subtype that adapts to the current system language.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setIsAsciiCapable(boolean isAsciiCapable)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param isAsciiCapable should be true if this subtype is ASCII capable. If the subtype\n         * is ASCII capable, it should guarantee that the user can input ASCII characters with\n         * this subtype. This is important because many password fields only allow\n         * ASCII-characters.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeIconResId(int subtypeIconResId)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param subtypeIconResId is a resource ID of the subtype icon drawable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeNameResId(int subtypeNameResId)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param subtypeNameResId is the resource ID of the subtype name string.\n         * The string resource may have exactly one %s in it. If present,\n         * the %s part will be replaced with the locale's display name by\n         * the formatter. Please refer to {@link #getDisplayName} for details.\n         ",
    "links" : [ "#getDisplayName" ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeNameOverride(@NonNull CharSequence nameOverride)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * Sets the untranslatable name of the subtype.\n         *\n         * This string is used as the subtype's display name if subtype's name res Id is 0.\n         *\n         * @param nameOverride is the name to set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setPhysicalKeyboardHint(@Nullable ULocale languageTag, @NonNull String layoutType)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * Sets the physical keyboard hint information, such as language and layout.\n         *\n         * The system can use the hint information to automatically configure the physical keyboard\n         * for the subtype.\n         *\n         * @param languageTag is the preferred physical keyboard BCP-47 language tag. This is used\n         * to match the keyboardLocale attribute in the physical keyboard definition. If it's\n         * {@code null}, the subtype's language tag will be used.\n         * @param layoutType  is the preferred physical keyboard layout, which is used to match the\n         * keyboardLayoutType attribute in the physical keyboard definition. See\n         * {@link android.hardware.input.InputManager#ACTION_QUERY_KEYBOARD_LAYOUTS}.\n         ",
    "links" : [ "android.hardware.input.InputManager#ACTION_QUERY_KEYBOARD_LAYOUTS" ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeId(int subtypeId)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param subtypeId is the unique ID for this subtype. The input method framework keeps\n         * track of enabled subtypes by ID. When the IME package gets upgraded, enabled IDs will\n         * stay enabled even if other attributes are different. If the ID is unspecified or 0,\n         * Arrays.hashCode(new Object[] {locale, mode, extraValue,\n         * isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeLocale(String subtypeLocale)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param subtypeLocale is the locale supported by this subtype.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setLanguageTag(String languageTag)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param languageTag is the BCP-47 Language Tag supported by this subtype.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeMode(String subtypeMode)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param subtypeMode is the mode supported by this subtype.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtypeBuilder setSubtypeExtraValue(String subtypeExtraValue)",
    "returnType" : "InputMethodSubtypeBuilder",
    "comment" : "\n         * @param subtypeExtraValue is the extra value of the subtype. This string is free-form,\n         * but the API supplies tools to deal with a key-value comma-separated list; see\n         * {@link #containsExtraValueKey} and {@link #getExtraValueOf}.\n         ",
    "links" : [ "#containsExtraValueKey", "#getExtraValueOf" ]
  }, {
    "name" : "public InputMethodSubtype build()",
    "returnType" : "InputMethodSubtype",
    "comment" : "\n         * @return InputMethodSubtype using parameters in this InputMethodSubtypeBuilder.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public InputMethodSubtypeBuilder setIsAuxiliary(boolean isAuxiliary)", "public InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean overridesImplicitlyEnabledSubtype)", "public InputMethodSubtypeBuilder setIsAsciiCapable(boolean isAsciiCapable)", "public InputMethodSubtypeBuilder setSubtypeIconResId(int subtypeIconResId)", "public InputMethodSubtypeBuilder setSubtypeNameResId(int subtypeNameResId)", "public InputMethodSubtypeBuilder setSubtypeNameOverride(@NonNull CharSequence nameOverride)", "public InputMethodSubtypeBuilder setPhysicalKeyboardHint(@Nullable ULocale languageTag, @NonNull String layoutType)", "public InputMethodSubtypeBuilder setSubtypeId(int subtypeId)", "public InputMethodSubtypeBuilder setSubtypeLocale(String subtypeLocale)", "public InputMethodSubtypeBuilder setLanguageTag(String languageTag)", "public InputMethodSubtypeBuilder setSubtypeMode(String subtypeMode)", "public InputMethodSubtypeBuilder setSubtypeExtraValue(String subtypeExtraValue)", "public InputMethodSubtype build()" ],
  "variableNames" : [ "mIsAuxiliary", "mOverridesImplicitlyEnabledSubtype", "mIsAsciiCapable", "mSubtypeIconResId", "mSubtypeNameResId", "mSubtypeNameOverride", "mPkLanguageTag", "mPkLayoutType", "mSubtypeId", "mSubtypeLocale", "mSubtypeLanguageTag", "mSubtypeMode", "mSubtypeExtraValue" ]
}