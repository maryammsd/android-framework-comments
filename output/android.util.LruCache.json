{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/LruCache.java",
  "packageName" : "android.util",
  "className" : "LruCache",
  "comment" : "\n * A cache that holds strong references to a limited number of values. Each time\n * a value is accessed, it is moved to the head of a queue. When a value is\n * added to a full cache, the value at the end of that queue is evicted and may\n * become eligible for garbage collection.\n *\n * <p>If your cached values hold resources that need to be explicitly released,\n * override {@link #entryRemoved}.\n *\n * <p>If a cache miss should be computed on demand for the corresponding keys,\n * override {@link #create}. This simplifies the calling code, allowing it to\n * assume a value will always be returned, even when there's a cache miss.\n *\n * <p>By default, the cache size is measured in the number of entries. Override\n * {@link #sizeOf} to size the cache in different units. For example, this cache\n * is limited to 4MiB of bitmaps:\n * <pre>   {@code\n *   int cacheSize = 4 * 1024 * 1024; // 4MiB\n *   LruCache<String, Bitmap> bitmapCache = new LruCache<String, Bitmap>(cacheSize) {\n *       protected int sizeOf(String key, Bitmap value) {\n *           return value.getByteCount();\n *       }\n *   }}</pre>\n *\n * <p>This class is thread-safe. Perform multiple cache operations atomically by\n * synchronizing on the cache: <pre>   {@code\n *   synchronized (cache) {\n *     if (cache.get(key) == null) {\n *         cache.put(key, value);\n *     }\n *   }}</pre>\n *\n * <p>This class does not allow null to be used as a key or value. A return\n * value of null from {@link #get}, {@link #put} or {@link #remove} is\n * unambiguous: the key was not in the cache.\n *\n * <p>This class appeared in Android 3.1 (Honeycomb MR1); it's available as part\n * of <a href=\"http://developer.android.com/sdk/compatibility-library.html\">Android's\n * Support Package</a> for earlier releases.\n ",
  "links" : [ "#create", "#entryRemoved", "#get", "#remove", "#sizeOf", "#put" ],
  "variables" : [ {
    "name" : "map",
    "type" : "LinkedHashMap<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : " Size of this cache in units. Not necessarily the number of elements. ",
    "links" : [ ]
  }, {
    "name" : "maxSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "putCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "createCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "evictionCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hitCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "missCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void resize(int maxSize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the size of the cache.\n     *\n     * @param maxSize The new maximum size.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final V get(K key)",
    "returnType" : "V",
    "comment" : "\n     * Returns the value for {@code key} if it exists in the cache or can be\n     * created by {@code #create}. If a value was returned, it is moved to the\n     * head of the queue. This returns null if a value is not cached and cannot\n     * be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final V put(K key, V value)",
    "returnType" : "V",
    "comment" : "\n     * Caches {@code value} for {@code key}. The value is moved to the head of\n     * the queue.\n     *\n     * @return the previous value mapped by {@code key}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void trimToSize(int maxSize)",
    "returnType" : "void",
    "comment" : "\n     * Remove the eldest entries until the total of remaining entries is at or\n     * below the requested size.\n     *\n     * @param maxSize the maximum size of the cache before returning. May be -1\n     *            to evict even 0-sized elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Map.Entry<K, V> eldest()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Map.Entry<K, V> eldest$ravenwood()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final V remove(K key)",
    "returnType" : "V",
    "comment" : "\n     * Removes the entry for {@code key} if it exists.\n     *\n     * @return the previous value mapped by {@code key}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Called for entries that have been evicted or removed. This method is\n     * invoked when a value is evicted to make space, removed by a call to\n     * {@link #remove}, or replaced by a call to {@link #put}. The default\n     * implementation does nothing.\n     *\n     * <p>The method is called without synchronization: other threads may\n     * access the cache while this method is executing.\n     *\n     * @param evicted true if the entry is being removed to make space, false\n     *     if the removal was caused by a {@link #put} or {@link #remove}.\n     * @param newValue the new value for {@code key}, if it exists. If non-null,\n     *     this removal was caused by a {@link #put} or a {@link #get}. Otherwise it was caused by\n     *     an eviction or a {@link #remove}.\n     ",
    "links" : [ "#remove", "#get", "#put" ]
  }, {
    "name" : "protected V create(K key)",
    "returnType" : "V",
    "comment" : "\n     * Called after a cache miss to compute a value for the corresponding key.\n     * Returns the computed value or null if no value can be computed. The\n     * default implementation returns null.\n     *\n     * <p>The method is called without synchronization: other threads may\n     * access the cache while this method is executing.\n     *\n     * <p>If a value for {@code key} exists in the cache when this method\n     * returns, the created value will be released with {@link #entryRemoved}\n     * and discarded. This can occur when multiple threads request the same key\n     * at the same time (causing multiple values to be created), or when one\n     * thread calls {@link #put} while another is creating a value for the same\n     * key.\n     ",
    "links" : [ "#entryRemoved", "#put" ]
  }, {
    "name" : "private int safeSizeOf(K key, V value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int sizeOf(K key, V value)",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the entry for {@code key} and {@code value} in\n     * user-defined units.  The default implementation returns 1 so that size\n     * is the number of entries and max size is the maximum number of entries.\n     *\n     * <p>An entry's size must not change while it is in the cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void evictAll()",
    "returnType" : "void",
    "comment" : "\n     * Clear the cache, calling {@link #entryRemoved} on each removed entry.\n     ",
    "links" : [ "#entryRemoved" ]
  }, {
    "name" : "public final synchronized int size()",
    "returnType" : "int",
    "comment" : "\n     * For caches that do not override {@link #sizeOf}, this returns the number\n     * of entries in the cache. For all other caches, this returns the sum of\n     * the sizes of the entries in this cache.\n     ",
    "links" : [ "#sizeOf" ]
  }, {
    "name" : "public final synchronized int maxSize()",
    "returnType" : "int",
    "comment" : "\n     * For caches that do not override {@link #sizeOf}, this returns the maximum\n     * number of entries in the cache. For all other caches, this returns the\n     * maximum sum of the sizes of the entries in this cache.\n     ",
    "links" : [ "#sizeOf" ]
  }, {
    "name" : "public final synchronized int hitCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times {@link #get} returned a value that was\n     * already present in the cache.\n     ",
    "links" : [ "#get" ]
  }, {
    "name" : "public final synchronized int missCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times {@link #get} returned null or required a new\n     * value to be created.\n     ",
    "links" : [ "#get" ]
  }, {
    "name" : "public final synchronized int createCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times {@link #create(Object)} returned a value.\n     ",
    "links" : [ "#create(Object)" ]
  }, {
    "name" : "public final synchronized int putCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times {@link #put} was called.\n     ",
    "links" : [ "#put" ]
  }, {
    "name" : "public final synchronized int evictionCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of values that have been evicted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized Map<K, V> snapshot()",
    "returnType" : "Map<K, V>",
    "comment" : "\n     * Returns a copy of the current contents of the cache, ordered from least\n     * recently accessed to most recently accessed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void resize(int maxSize)", "public final V get(K key)", "public final V put(K key, V value)", "public void trimToSize(int maxSize)", "private Map.Entry<K, V> eldest()", "private Map.Entry<K, V> eldest$ravenwood()", "public final V remove(K key)", "protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue)", "protected V create(K key)", "private int safeSizeOf(K key, V value)", "protected int sizeOf(K key, V value)", "public final void evictAll()", "public final synchronized int size()", "public final synchronized int maxSize()", "public final synchronized int hitCount()", "public final synchronized int missCount()", "public final synchronized int createCount()", "public final synchronized int putCount()", "public final synchronized int evictionCount()", "public final synchronized Map<K, V> snapshot()", "public final synchronized String toString()" ],
  "variableNames" : [ "map", "size", "maxSize", "putCount", "createCount", "evictionCount", "hitCount", "missCount" ]
}