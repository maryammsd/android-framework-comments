{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Boolean.java",
  "packageName" : "java.lang",
  "className" : "Boolean",
  "comment" : "\n * The Boolean class wraps a value of the primitive type\n * {@code boolean} in an object. An object of type\n * {@code Boolean} contains a single field whose type is\n * {@code boolean}.\n *\n * <p>In addition, this class provides many methods for\n * converting a {@code boolean} to a {@code String} and a\n * {@code String} to a {@code boolean}, as well as other\n * constants and methods useful when dealing with a\n * {@code boolean}.\n *\n * <!-- Android-removed: paragraph on ValueBased\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n * -->\n *\n * @author  Arthur van Hoff\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TRUE",
    "type" : "Boolean",
    "comment" : "\n     * The {@code Boolean} object corresponding to the primitive\n     * value {@code true}.\n     ",
    "links" : [ ]
  }, {
    "name" : "FALSE",
    "type" : "Boolean",
    "comment" : "\n     * The {@code Boolean} object corresponding to the primitive\n     * value {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE",
    "type" : "Class<Boolean>",
    "comment" : "\n     * The Class object representing the primitive type boolean.\n     *\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "boolean",
    "comment" : "\n     * The value of the Boolean.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean parseBoolean(String s)",
    "returnType" : "boolean",
    "comment" : "\n     * Parses the string argument as a boolean.  The {@code boolean}\n     * returned represents the value {@code true} if the string argument\n     * is not {@code null} and is equal, ignoring case, to the string\n     * {@code \"true\"}.\n     * Otherwise, a false value is returned, including for a null\n     * argument.<p>\n     * Example: {@code Boolean.parseBoolean(\"True\")} returns {@code true}.<br>\n     * Example: {@code Boolean.parseBoolean(\"yes\")} returns {@code false}.\n     *\n     * @param      s   the {@code String} containing the boolean\n     *                 representation to be parsed\n     * @return     the boolean represented by the string argument\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean booleanValue()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of this {@code Boolean} object as a boolean\n     * primitive.\n     *\n     * @return  the primitive {@code boolean} value of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Boolean valueOf(boolean b)",
    "returnType" : "Boolean",
    "comment" : "\n     * Returns a {@code Boolean} instance representing the specified\n     * {@code boolean} value.  If the specified {@code boolean} value\n     * is {@code true}, this method returns {@code Boolean.TRUE};\n     * if it is {@code false}, this method returns {@code Boolean.FALSE}.\n     * If a new {@code Boolean} instance is not required, this method\n     * should generally be used in preference to the constructor\n     * {@link #Boolean(boolean)}, as this method is likely to yield\n     * significantly better space and time performance.\n     *\n     * @param  b a boolean value.\n     * @return a {@code Boolean} instance representing {@code b}.\n     * @since  1.4\n     ",
    "links" : [ "#Boolean(boolean)" ]
  }, {
    "name" : "public static Boolean valueOf(String s)",
    "returnType" : "Boolean",
    "comment" : "\n     * Returns a {@code Boolean} with a value represented by the\n     * specified string.  The {@code Boolean} returned represents a\n     * true value if the string argument is not {@code null}\n     * and is equal, ignoring case, to the string {@code \"true\"}.\n     * Otherwise, a false value is returned, including for a null\n     * argument.\n     *\n     * @param   s   a string.\n     * @return  the {@code Boolean} value represented by the string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toString(boolean b)",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing the specified\n     * boolean.  If the specified boolean is {@code true}, then\n     * the string {@code \"true\"} will be returned, otherwise the\n     * string {@code \"false\"} will be returned.\n     *\n     * @param b the boolean to be converted\n     * @return the string representation of the specified {@code boolean}\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing this Boolean's\n     * value.  If this object represents the value {@code true},\n     * a string equal to {@code \"true\"} is returned. Otherwise, a\n     * string equal to {@code \"false\"} is returned.\n     *\n     * @return  a string representation of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code Boolean} object.\n     *\n     * @return  the integer {@code 1231} if this object represents\n     * {@code true}; returns the integer {@code 1237} if this\n     * object represents {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int hashCode(boolean value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for a {@code boolean} value; compatible with\n     * {@code Boolean.hashCode()}.\n     *\n     * @param value the value to hash\n     * @return a hash code value for a {@code boolean} value.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if and only if the argument is not\n     * {@code null} and is a {@code Boolean} object that\n     * represents the same {@code boolean} value as this object.\n     *\n     * @param   obj   the object to compare with.\n     * @return  {@code true} if the Boolean objects represent the\n     *          same value; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getBoolean(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if and only if the system property named\n     * by the argument exists and is equal to, ignoring case, the\n     * string {@code \"true\"}.\n     * A system property is accessible through {@code getProperty}, a\n     * method defined by the {@code System} class.  <p> If there is no\n     * property with the specified name, or if the specified name is\n     * empty or null, then {@code false} is returned.\n     *\n     * @param   name   the system property name.\n     * @return  the {@code boolean} value of the system property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     ",
    "links" : [ "java.lang.System#getProperty(String)" ]
  }, {
    "name" : "public int compareTo(Boolean b)",
    "returnType" : "int",
    "comment" : "\n     * Compares this {@code Boolean} instance with another.\n     *\n     * @param   b the {@code Boolean} instance to be compared\n     * @return  zero if this object represents the same boolean value as the\n     *          argument; a positive value if this object represents true\n     *          and the argument represents false; and a negative value if\n     *          this object represents false and the argument represents true\n     * @throws  NullPointerException if the argument is {@code null}\n     * @see     Comparable\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(boolean x, boolean y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code boolean} values.\n     * The value returned is identical to what would be returned by:\n     * <pre>\n     *    Boolean.valueOf(x).compareTo(Boolean.valueOf(y))\n     * </pre>\n     *\n     * @param  x the first {@code boolean} to compare\n     * @param  y the second {@code boolean} to compare\n     * @return the value {@code 0} if {@code x == y};\n     *         a value less than {@code 0} if {@code !x && y}; and\n     *         a value greater than {@code 0} if {@code x && !y}\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean logicalAnd(boolean a, boolean b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the result of applying the logical AND operator to the\n     * specified {@code boolean} operands.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the logical AND of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean logicalOr(boolean a, boolean b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the result of applying the logical OR operator to the\n     * specified {@code boolean} operands.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the logical OR of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean logicalXor(boolean a, boolean b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the result of applying the logical XOR operator to the\n     * specified {@code boolean} operands.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return  the logical XOR of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Optional<DynamicConstantDesc<Boolean>> describeConstable()",
    "returnType" : "Optional<DynamicConstantDesc<Boolean>>",
    "comment" : "\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance.\n     *\n     * @return an {@link Optional} describing the {@linkplain Boolean} instance\n     * @since 15\n     * @hide\n     ",
    "links" : [ "java.util.Optional" ]
  } ],
  "methodNames" : [ "public static boolean parseBoolean(String s)", "public boolean booleanValue()", "public static Boolean valueOf(boolean b)", "public static Boolean valueOf(String s)", "public static String toString(boolean b)", "public String toString()", "public int hashCode()", "public static int hashCode(boolean value)", "public boolean equals(Object obj)", "public static boolean getBoolean(String name)", "public int compareTo(Boolean b)", "public static int compare(boolean x, boolean y)", "public static boolean logicalAnd(boolean a, boolean b)", "public static boolean logicalOr(boolean a, boolean b)", "public static boolean logicalXor(boolean a, boolean b)", "public Optional<DynamicConstantDesc<Boolean>> describeConstable()" ],
  "variableNames" : [ "TRUE", "FALSE", "TYPE", "value", "serialVersionUID" ]
}