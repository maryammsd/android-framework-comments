{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/games/GameService.java",
  "packageName" : "android.service.games",
  "className" : "GameService",
  "comment" : "\n * Top-level service of the game service, which provides support for determining\n * when a game session should begin. It is always kept running by the system.\n * Because of this it should be kept as lightweight as possible.\n *\n * <p> Instead of requiring permissions for sensitive actions (e.g., starting a new game session),\n * this class is provided with an {@link IGameServiceController} instance which exposes the\n * sensitive functionality. This controller is provided by the system server when calling the\n * {@link IGameService#connected(IGameServiceController)} method exposed by this class. The system\n * server does so only when creating the bound game service.\n *\n * <p>Heavyweight operations (such as showing UI) should be implemented in the\n * associated {@link GameSessionService} when a game session is taking place. Its\n * implementation should run in a separate process from the {@link GameService}.\n *\n * <p>To extend this class, you must declare the service in your manifest file with\n * the {@link android.Manifest.permission#BIND_GAME_SERVICE} permission\n * and include an intent filter with the {@link #SERVICE_INTERFACE} action. For example:\n * <pre>\n * &lt;service android:name=\".GameService\"\n *          android:label=\"&#64;string/service_name\"\n *          android:permission=\"android.permission.BIND_GAME_SERVICE\">\n *     &lt;intent-filter>\n *         &lt;action android:name=\"android.service.games.GameService\" />\n *     &lt;/intent-filter>\n * &lt;/service>\n * </pre>\n *\n * @hide\n ",
  "links" : [ "#SERVICE_INTERFACE", "IGameServiceController", "#connected(IGameServiceController)", "android.service.games.GameService", "android.service.games.GameSessionService", "android.Manifest.permission#BIND_GAME_SERVICE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_GAME_SERVICE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_GAME_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_GAME_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a GameService component publishes information about itself.\n     * This meta-data should reference an XML resource containing a\n     * <code>&lt;{@link\n     * android.R.styleable#GameService game-session-service}&gt;</code> tag.\n     ",
    "links" : [ "android.R.styleable#GameService" ]
  }, {
    "name" : "mGameServiceController",
    "type" : "IGameServiceController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGameManagerService",
    "type" : "IGameManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IGameService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGameManagerServiceDeathRecipient",
    "type" : "IBinder.DeathRecipient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doOnConnected(@NonNull IGameServiceController gameServiceController)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called during service initialization to indicate that the system is ready\n     * to receive interaction from it. You should generally do initialization here\n     * rather than in {@link #onCreate}.\n     ",
    "links" : [ "#onCreate" ]
  }, {
    "name" : "public void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called during service de-initialization to indicate that the system is shutting the\n     * service down. At this point this service may no longer be the active {@link GameService}.\n     * The service should clean up any resources that it holds at this point.\n     ",
    "links" : [ "android.service.games.GameService" ]
  }, {
    "name" : "public void onGameStarted(@NonNull GameStartedEvent gameStartedEvent)",
    "returnType" : "void",
    "comment" : "\n     * Called when a game task is started. It is the responsibility of the service to determine what\n     * action to take (e.g., request that a game session be created).\n     *\n     * @param gameStartedEvent Contains information about the game being started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void createGameSession(@IntRange(from = 0) int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Call to create a new game session be created for a game. This method may be called\n     * by a game service following {@link #onGameStarted}, using the task ID provided by the\n     * provided {@link GameStartedEvent} (using {@link GameStartedEvent#getTaskId}).\n     *\n     * If a game session already exists for the game task, this call will be ignored and the\n     * existing session will continue.\n     *\n     * @param taskId The taskId of the game.\n     ",
    "links" : [ "android.service.games.GameStartedEvent#getTaskId", "android.service.games.GameStartedEvent", "#onGameStarted" ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@Nullable Intent intent)", "private void doOnConnected(@NonNull IGameServiceController gameServiceController)", "public void onConnected()", "public void onDisconnected()", "public void onGameStarted(@NonNull GameStartedEvent gameStartedEvent)", "public final void createGameSession(@IntRange(from = 0) int taskId)" ],
  "variableNames" : [ "TAG", "ACTION_GAME_SERVICE", "SERVICE_META_DATA", "mGameServiceController", "mGameManagerService", "mInterface", "mGameManagerServiceDeathRecipient" ]
}