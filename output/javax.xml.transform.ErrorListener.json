{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/transform/ErrorListener.java",
  "packageName" : "javax.xml.transform",
  "className" : "ErrorListener",
  "comment" : "\n * <p>To provide customized error handling, implement this interface and\n * use the <code>setErrorListener</code> method to register an instance of the\n * implementation with the {@link javax.xml.transform.Transformer}.  The\n * <code>Transformer</code> then reports all errors and warnings through this\n * interface.</p>\n *\n * <p>If an application does <em>not</em> register its own custom\n * <code>ErrorListener</code>, the default <code>ErrorListener</code>\n * is used which reports all warnings and errors to <code>System.err</code>\n * and does not throw any <code>Exception</code>s.\n * Applications are <em>strongly</em> encouraged to register and use\n * <code>ErrorListener</code>s that insure proper behavior for warnings and\n * errors.</p>\n *\n * <p>For transformation errors, a <code>Transformer</code> must use this\n * interface instead of throwing an <code>Exception</code>: it is up to the\n * application to decide whether to throw an <code>Exception</code> for\n * different types of errors and warnings.  Note however that the\n * <code>Transformer</code> is not required to continue with the transformation\n * after a call to {@link #fatalError(TransformerException exception)}.</p>\n *\n * <p><code>Transformer</code>s may use this mechanism to report XML parsing\n * errors as well as transformation errors.</p>\n ",
  "links" : [ "javax.xml.transform.Transformer", "#fatalError(TransformerException" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void warning(TransformerException exception) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a warning.\n     *\n     * <p>{@link javax.xml.transform.Transformer} can use this method to report\n     * conditions that are not errors or fatal errors.  The default behavior\n     * is to take no action.</p>\n     *\n     * <p>After invoking this method, the Transformer must continue with\n     * the transformation. It should still be possible for the\n     * application to process the document through to the end.</p>\n     *\n     * @param exception The warning information encapsulated in a\n     *                  transformer exception.\n     *\n     * @throws javax.xml.transform.TransformerException if the application\n     * chooses to discontinue the transformation.\n     *\n     * @see javax.xml.transform.TransformerException\n     ",
    "links" : [ "javax.xml.transform.Transformer" ]
  }, {
    "name" : "public abstract void error(TransformerException exception) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a recoverable error.\n     *\n     * <p>The transformer must continue to try and provide normal transformation\n     * after invoking this method.  It should still be possible for the\n     * application to process the document through to the end if no other errors\n     * are encountered.</p>\n     *\n     * @param exception The error information encapsulated in a\n     *                  transformer exception.\n     *\n     * @throws javax.xml.transform.TransformerException if the application\n     * chooses to discontinue the transformation.\n     *\n     * @see javax.xml.transform.TransformerException\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void fatalError(TransformerException exception) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n     * <p>Receive notification of a non-recoverable error.</p>\n     *\n     * <p>The <code>Transformer</code> must continue to try and provide normal\n     * transformation after invoking this method.  It should still be possible for the\n     * application to process the document through to the end if no other errors\n     * are encountered, but there is no guarantee that the output will be\n     * useable.</p>\n     *\n     * @param exception The error information encapsulated in a\n     *    <code>TransformerException</code>.\n     *\n     * @throws javax.xml.transform.TransformerException if the application\n     * chooses to discontinue the transformation.\n     *\n     * @see javax.xml.transform.TransformerException\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void warning(TransformerException exception) throws TransformerException", "public abstract void error(TransformerException exception) throws TransformerException", "public abstract void fatalError(TransformerException exception) throws TransformerException" ],
  "variableNames" : [ ]
}