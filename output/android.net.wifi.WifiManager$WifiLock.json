{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiManager.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiLock",
  "comment" : "\n     * Allows an application to keep the Wi-Fi radio awake.\n     * Normally the Wi-Fi radio may turn off when the user has not used the device in a while.\n     * Acquiring a WifiLock will keep the radio on until the lock is released.  Multiple\n     * applications may hold WifiLocks, and the radio will only be allowed to turn off when no\n     * WifiLocks are held in any application.\n     * <p>\n     * Before using a WifiLock, consider carefully if your application requires Wi-Fi access, or\n     * could function over a mobile network, if available.  A program that needs to download large\n     * files should hold a WifiLock to ensure that the download will complete, but a program whose\n     * network usage is occasional or low-bandwidth should not hold a WifiLock to avoid adversely\n     * affecting battery life.\n     * <p>\n     * Note that WifiLocks cannot override the user-level \"Wi-Fi Enabled\" setting, nor Airplane\n     * Mode.  They simply keep the radio from turning off when Wi-Fi is already on but the device\n     * is idle.\n     * <p>\n     * Any application using a WifiLock must request the {@code android.permission.WAKE_LOCK}\n     * permission in an {@code <uses-permission>} element of the application's manifest.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLockType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefCounted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeld",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkSource",
    "type" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void acquire()",
    "returnType" : "void",
    "comment" : "\n         * Locks the Wi-Fi radio on until {@link #release} is called.\n         *\n         * If this WifiLock is reference-counted, each call to {@code acquire} will increment the\n         * reference count, and the radio will remain locked as long as the reference count is\n         * above zero.\n         *\n         * If this WifiLock is not reference-counted, the first call to {@code acquire} will lock\n         * the radio, but subsequent calls will be ignored.  Only one call to {@link #release}\n         * will be required, regardless of the number of times that {@code acquire} is called.\n         ",
    "links" : [ "#release" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle.\n         *\n         * If this WifiLock is reference-counted, each call to {@code release} will decrement the\n         * reference count, and the radio will be unlocked only when the reference count reaches\n         * zero.  If the reference count goes below zero (that is, if {@code release} is called\n         * a greater number of times than {@link #acquire}), an exception is thrown.\n         *\n         * If this WifiLock is not reference-counted, the first call to {@code release} (after\n         * the radio was locked using {@link #acquire}) will unlock the radio, and subsequent\n         * calls will be ignored.\n         ",
    "links" : [ "#acquire" ]
  }, {
    "name" : "public void setReferenceCounted(boolean refCounted)",
    "returnType" : "void",
    "comment" : "\n         * Controls whether this is a reference-counted or non-reference-counted WifiLock.\n         *\n         * Reference-counted WifiLocks keep track of the number of calls to {@link #acquire} and\n         * {@link #release}, and only allow the radio to sleep when every call to {@link #acquire}\n         * has been balanced with a call to {@link #release}.  Non-reference-counted WifiLocks\n         * lock the radio whenever {@link #acquire} is called and it is unlocked, and unlock the\n         * radio whenever {@link #release} is called and it is locked.\n         *\n         * @param refCounted true if this WifiLock should keep a reference count\n         ",
    "links" : [ "#acquire", "#release" ]
  }, {
    "name" : "public boolean isHeld()",
    "returnType" : "boolean",
    "comment" : "\n         * Checks whether this WifiLock is currently held.\n         *\n         * @return true if this WifiLock is held, false otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setWorkSource(WorkSource ws)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void acquire()", "public void release()", "public void setReferenceCounted(boolean refCounted)", "public boolean isHeld()", "public void setWorkSource(WorkSource ws)", "public String toString()", "protected void finalize() throws Throwable" ],
  "variableNames" : [ "mTag", "mBinder", "mRefCount", "mLockType", "mRefCounted", "mHeld", "mWorkSource" ]
}