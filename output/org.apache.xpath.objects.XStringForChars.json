{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/objects/XStringForChars.java",
  "packageName" : "org.apache.xpath.objects",
  "className" : "XStringForChars",
  "comment" : "\n * This class will wrap a FastStringBuffer and allow for\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_start",
    "type" : "int",
    "comment" : " The start position in the fsb. ",
    "links" : [ ]
  }, {
    "name" : "m_length",
    "type" : "int",
    "comment" : " The length of the string. ",
    "links" : [ ]
  }, {
    "name" : "m_strCache",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public FastStringBuffer fsb()",
    "returnType" : "FastStringBuffer",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)",
    "returnType" : "void",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasString()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this object contains a java String object.\n   * \n   * @return true if this XMLString can return a string without creating one.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String str()",
    "returnType" : "String",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object object()",
    "returnType" : "Object",
    "comment" : "\n   * Since this object is incomplete without the length and the offset, we \n   * have to convert to a string when this function is called.\n   *\n   * @return The java String representation of this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * characters method on the passed ContentHandler for the\n   * string-value. Multiple calls to the\n   * ContentHandler's characters methods may well occur for a single call to\n   * this method.\n   *\n   * @param ch A non-null reference to a ContentHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * comment method on the passed LexicalHandler for the\n   * string-value.\n   *\n   * @param lh A non-null reference to a LexicalHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n   * Returns the length of this string.\n   *\n   * @return  the length of the sequence of characters represented by this\n   *          object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int index)",
    "returnType" : "char",
    "comment" : "\n   * Returns the character at the specified index. An index ranges\n   * from <code>0</code> to <code>length() - 1</code>. The first character\n   * of the sequence is at index <code>0</code>, the next at index\n   * <code>1</code>, and so on, as for array indexing.\n   *\n   * @param      index   the index of the character.\n   * @return     the character at the specified index of this string.\n   *             The first character is at index <code>0</code>.\n   * @exception  IndexOutOfBoundsException  if the <code>index</code>\n   *             argument is negative or not less than the length of this\n   *             string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",
    "returnType" : "void",
    "comment" : "\n   * Copies characters from this string into the destination character\n   * array.\n   *\n   * @param      srcBegin   index of the first character in the string\n   *                        to copy.\n   * @param      srcEnd     index after the last character in the string\n   *                        to copy.\n   * @param      dst        the destination array.\n   * @param      dstBegin   the start offset in the destination array.\n   * @exception IndexOutOfBoundsException If any of the following\n   *            is true:\n   *            <ul><li><code>srcBegin</code> is negative.\n   *            <li><code>srcBegin</code> is greater than <code>srcEnd</code>\n   *            <li><code>srcEnd</code> is greater than the length of this\n   *                string\n   *            <li><code>dstBegin</code> is negative\n   *            <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than\n   *                <code>dst.length</code></ul>\n   * @exception NullPointerException if <code>dst</code> is <code>null</code>\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public FastStringBuffer fsb()", "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)", "public boolean hasString()", "public String str()", "public Object object()", "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException", "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException", "public int length()", "public char charAt(int index)", "public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)" ],
  "variableNames" : [ "serialVersionUID", "m_start", "m_length", "m_strCache" ]
}