{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/ConnectionMigrationOptions.java",
  "packageName" : "org.chromium.net",
  "className" : "ConnectionMigrationOptions",
  "comment" : "\n * A class configuring Cronet's connection migration functionality.\n *\n * <p>Connection migration stops open connections to servers from being destroyed when the\n * client device switches its L4 connectivity (typically the IP address as a result of using\n * a different network). This is particularly common with mobile devices losing\n * wifi connectivity and switching to cellular data, or vice versa (a.k.a. the parking lot\n * problem). QUIC uses connection identifiers which are independent of the underlying\n * transport layer to make this possible. If the client connects to a new network and wants\n * to preserve the existing connection, they can do so by using a connection identifier the server\n * knows to be a continuation of the existing connection.\n *\n * <p>The features are only available for QUIC connections and the server needs to support\n * connection migration.\n *\n * @see <a href=\"https://www.rfc-editor.org/rfc/rfc9000.html#section-9\">Connection\n *     Migration specification</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mEnableDefaultNetworkMigration",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnablePathDegradationMigration",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowServerMigration",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMigrateIdleConnections",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleMigrationPeriodSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetryPreHandshakeErrorsOnAlternateNetwork",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowNonDefaultNetworkUsage",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxTimeOnNonDefaultNetworkSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxWriteErrorEagerMigrationsCount",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxPathDegradingEagerMigrationsCount",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Boolean getEnableDefaultNetworkMigration()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getEnablePathDegradationMigration()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getAllowServerMigration()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getMigrateIdleConnections()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Long getIdleMigrationPeriodSeconds()",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getRetryPreHandshakeErrorsOnAlternateNetwork()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getAllowNonDefaultNetworkUsage()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Long getMaxTimeOnNonDefaultNetworkSeconds()",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Integer getMaxWriteErrorEagerMigrationsCount()",
    "returnType" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Integer getMaxPathDegradingEagerMigrationsCount()",
    "returnType" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Builder builder()",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Boolean getEnableDefaultNetworkMigration()", "public Boolean getEnablePathDegradationMigration()", "public Boolean getAllowServerMigration()", "public Boolean getMigrateIdleConnections()", "public Long getIdleMigrationPeriodSeconds()", "public Boolean getRetryPreHandshakeErrorsOnAlternateNetwork()", "public Boolean getAllowNonDefaultNetworkUsage()", "public Long getMaxTimeOnNonDefaultNetworkSeconds()", "public Integer getMaxWriteErrorEagerMigrationsCount()", "public Integer getMaxPathDegradingEagerMigrationsCount()", "public static Builder builder()" ],
  "variableNames" : [ "mEnableDefaultNetworkMigration", "mEnablePathDegradationMigration", "mAllowServerMigration", "mMigrateIdleConnections", "mIdleMigrationPeriodSeconds", "mRetryPreHandshakeErrorsOnAlternateNetwork", "mAllowNonDefaultNetworkUsage", "mMaxTimeOnNonDefaultNetworkSeconds", "mMaxWriteErrorEagerMigrationsCount", "mMaxPathDegradingEagerMigrationsCount" ]
}