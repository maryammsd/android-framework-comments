{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/vcn/VcnGatewayConnectionConfig.java",
  "packageName" : "android.net.vcn",
  "className" : "Builder",
  "comment" : "\n     * This class is used to incrementally build {@link VcnGatewayConnectionConfig} objects.\n     ",
  "links" : [ "android.net.vcn.VcnGatewayConnectionConfig" ],
  "variables" : [ {
    "name" : "mGatewayConnectionName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTunnelConnectionParams",
    "type" : "IkeTunnelConnectionParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExposedCapabilities",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnderlyingNetworkTemplates",
    "type" : "List<VcnUnderlyingNetworkTemplate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetryIntervalsMs",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxMtu",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinUdpPort4500NatTimeoutSeconds",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSafeModeDisabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGatewayOptions",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addExposedCapability(@VcnSupportedCapability int exposedCapability)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a capability that this VCN Gateway Connection will support.\n         *\n         * @param exposedCapability the app-facing capability to be exposed by this VCN Gateway\n         *     Connection (i.e., the capabilities that this VCN Gateway Connection will support).\n         * @return this {@link Builder} instance, for chaining\n         * @see VcnGatewayConnectionConfig for a list of capabilities may be exposed by a Gateway\n         *     Connection\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder removeExposedCapability(@VcnSupportedCapability int exposedCapability)",
    "returnType" : "Builder",
    "comment" : "\n         * Remove a capability that this VCN Gateway Connection will support.\n         *\n         * @param exposedCapability the app-facing capability to not be exposed by this VCN Gateway\n         *     Connection (i.e., the capabilities that this VCN Gateway Connection will support)\n         * @return this {@link Builder} instance, for chaining\n         * @see VcnGatewayConnectionConfig for a list of capabilities may be exposed by a Gateway\n         *     Connection\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setVcnUnderlyingNetworkPriorities(@NonNull List<VcnUnderlyingNetworkTemplate> underlyingNetworkTemplates)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the list of templates to match underlying networks against, in high-to-low priority\n         * order.\n         *\n         * <p>To select the VCN underlying network, the VCN connection will go through all the\n         * network candidates and return a network matching the highest priority rule.\n         *\n         * <p>If multiple networks match the same rule, the VCN will prefer an already-selected\n         * network as opposed to a new/unselected network. However, if both are new/unselected\n         * networks, a network will be chosen arbitrarily amongst the networks matching the highest\n         * priority rule.\n         *\n         * <p>If all networks fail to match the rules provided, a carrier-owned underlying network\n         * will still be selected (if available, at random if necessary).\n         *\n         * @param underlyingNetworkTemplates a list of unique VcnUnderlyingNetworkTemplates that are\n         *     ordered from most to least preferred, or an empty list to use the default\n         *     prioritization. The default network prioritization order is Opportunistic cellular,\n         *     Carrier WiFi and then Macro cellular.\n         * @return this {@link Builder} instance, for chaining\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setRetryIntervalsMillis(@NonNull long[] retryIntervalsMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the retry interval between VCN establishment attempts upon successive failures.\n         *\n         * <p>The last retry interval will be repeated until safe mode is entered, or a connection\n         * is successfully established, at which point the retry timers will be reset. For power\n         * reasons, the last (repeated) retry interval MUST be at least 15 minutes.\n         *\n         * <p>Retry intervals MAY be subject to system power saving modes. That is to say that if\n         * the system enters a power saving mode, the retry may not occur until the device leaves\n         * the specified power saving mode. Intervals are sequential, and intervals will NOT be\n         * skipped if system power saving results in delaying retries (even if it exceed multiple\n         * retry intervals).\n         *\n         * <p>Each Gateway Connection will retry according to the retry intervals configured, but if\n         * safe mode is enabled, all Gateway Connection(s) will be disabled.\n         *\n         * @param retryIntervalsMs an array of between 1 and 10 millisecond intervals after which\n         *     the VCN will attempt to retry a session initiation. The last (repeating) retry\n         *     interval must be at least 15 minutes. Defaults to: {@code [1s, 2s, 5s, 30s, 1m, 5m,\n         *     15m]}\n         * @return this {@link Builder} instance, for chaining\n         * @see VcnManager for additional discussion on fail-safe mode\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setMaxMtu(@IntRange(from = MIN_MTU_V6) int maxMtu)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum MTU allowed for this VCN Gateway Connection.\n         *\n         * <p>This MTU is applied to the VCN Gateway Connection exposed Networks, and represents the\n         * MTU of the virtualized network.\n         *\n         * <p>The system may reduce the MTU below the maximum specified based on signals such as the\n         * MTU of the underlying networks (and adjusted for Gateway Connection overhead).\n         *\n         * @param maxMtu the maximum MTU allowed for this Gateway Connection. Must be greater than\n         *     the IPv6 minimum MTU of 1280. Defaults to 1500.\n         * @return this {@link Builder} instance, for chaining\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setMinUdpPort4500NatTimeoutSeconds(@IntRange(from = MIN_UDP_PORT_4500_NAT_TIMEOUT_SECONDS) int minUdpPort4500NatTimeoutSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum supported IKEv2/IPsec NATT keepalive timeout.\n         *\n         * <p>This is used as a power-optimization hint for other IKEv2/IPsec use cases (e.g. VPNs,\n         * or IWLAN) to reduce the necessary keepalive frequency, thus conserving power and data.\n         *\n         * @param minUdpPort4500NatTimeoutSeconds the maximum keepalive timeout supported by the VCN\n         *     Gateway Connection, generally the minimum duration a NAT mapping is cached on the VCN\n         *     Gateway.\n         * @return this {@link Builder} instance, for chaining\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder addGatewayOption(@VcnGatewayOption int option)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables the specified VCN gateway option.\n         *\n         * @param option the option to be enabled\n         * @return this {@link Builder} instance, for chaining\n         * @throws IllegalArgumentException if the provided option is invalid\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder removeGatewayOption(@VcnGatewayOption int option)",
    "returnType" : "Builder",
    "comment" : "\n         * Resets (disables) the specified VCN gateway option.\n         *\n         * @param option the option to be disabled\n         * @return this {@link Builder} instance, for chaining\n         * @throws IllegalArgumentException if the provided option is invalid\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setSafeModeEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Enable/disable safe mode\n         *\n         * <p>If a VCN fails to provide connectivity within a system-provided timeout, it will enter\n         * safe mode. In safe mode, the VCN Network will be torn down and the system will restore\n         * connectivity by allowing underlying cellular or WiFi networks to be used as default. At\n         * the same time, VCN will continue to retry until it succeeds.\n         *\n         * <p>When safe mode is disabled and VCN connection fails to provide connectivity, end users\n         * might not have connectivity, and may not have access to carrier-owned underlying\n         * networks.\n         *\n         * @param enabled whether safe mode should be enabled. Defaults to {@code true}\n         ",
    "links" : [ ]
  }, {
    "name" : "public VcnGatewayConnectionConfig build()",
    "returnType" : "VcnGatewayConnectionConfig",
    "comment" : "\n         * Builds and validates the VcnGatewayConnectionConfig.\n         *\n         * @return an immutable VcnGatewayConnectionConfig instance\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder addExposedCapability(@VcnSupportedCapability int exposedCapability)", "public Builder removeExposedCapability(@VcnSupportedCapability int exposedCapability)", "public Builder setVcnUnderlyingNetworkPriorities(@NonNull List<VcnUnderlyingNetworkTemplate> underlyingNetworkTemplates)", "public Builder setRetryIntervalsMillis(@NonNull long[] retryIntervalsMs)", "public Builder setMaxMtu(@IntRange(from = MIN_MTU_V6) int maxMtu)", "public Builder setMinUdpPort4500NatTimeoutSeconds(@IntRange(from = MIN_UDP_PORT_4500_NAT_TIMEOUT_SECONDS) int minUdpPort4500NatTimeoutSeconds)", "public Builder addGatewayOption(@VcnGatewayOption int option)", "public Builder removeGatewayOption(@VcnGatewayOption int option)", "public Builder setSafeModeEnabled(boolean enabled)", "public VcnGatewayConnectionConfig build()" ],
  "variableNames" : [ "mGatewayConnectionName", "mTunnelConnectionParams", "mExposedCapabilities", "mUnderlyingNetworkTemplates", "mRetryIntervalsMs", "mMaxMtu", "mMinUdpPort4500NatTimeoutSeconds", "mIsSafeModeDisabled", "mGatewayOptions" ]
}