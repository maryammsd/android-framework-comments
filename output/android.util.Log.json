{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/Log.java",
  "packageName" : "android.util",
  "className" : "Log",
  "comment" : "\n * API for sending log output.\n *\n * <p>Generally, you should use the {@link #v Log.v()}, {@link #d Log.d()},\n * {@link #i Log.i()}, {@link #w Log.w()}, and {@link #e Log.e()} methods to write logs.\n * You can then <a href=\"{@docRoot}studio/debug/am-logcat.html\">view the logs in logcat</a>.\n *\n * <p>The order in terms of verbosity, from least to most is\n * ERROR, WARN, INFO, DEBUG, VERBOSE.\n *\n * <p><b>Tip:</b> A good convention is to declare a <code>TAG</code> constant\n * in your class:\n *\n * <pre>private static final String TAG = \"MyActivity\";</pre>\n *\n * and use that in subsequent calls to the log methods.\n * </p>\n *\n * <p><b>Tip:</b> Don't forget that when you make a call like\n * <pre>Log.v(TAG, \"index=\" + i);</pre>\n * that when you're building the string to pass into Log.d, the compiler uses a\n * StringBuilder and at least three allocations occur: the StringBuilder\n * itself, the buffer, and the String object.  Realistically, there is also\n * another buffer allocation and copy, and even more pressure on the gc.\n * That means that if your log message is filtered out, you might be doing\n * significant work and incurring significant overhead.\n *\n * <p>When calling the log methods that take a Throwable parameter,\n * if any of the throwables in the cause chain is an <code>UnknownHostException</code>,\n * then the stack trace is not logged.\n *\n * <p>Note: The return value from the logging functions in this class may vary between Android\n * releases due to changes in the logging implementation. For the methods that return an integer,\n * a positive value may be considered as a successful invocation.\n ",
  "links" : [ "#d", "#e", "#v", "#w", "#i" ],
  "variables" : [ {
    "name" : "VERBOSE",
    "type" : "int",
    "comment" : "\n     * Priority constant for the println method; use Log.v.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "int",
    "comment" : "\n     * Priority constant for the println method; use Log.d.\n     ",
    "links" : [ ]
  }, {
    "name" : "INFO",
    "type" : "int",
    "comment" : "\n     * Priority constant for the println method; use Log.i.\n     ",
    "links" : [ ]
  }, {
    "name" : "WARN",
    "type" : "int",
    "comment" : "\n     * Priority constant for the println method; use Log.w.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "int",
    "comment" : "\n     * Priority constant for the println method; use Log.e.\n     ",
    "links" : [ ]
  }, {
    "name" : "ASSERT",
    "type" : "int",
    "comment" : "\n     * Priority constant for the println method.\n     ",
    "links" : [ ]
  }, {
    "name" : "sWtfHandler",
    "type" : "TerribleFailureHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_ID_MAIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOG_ID_RADIO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOG_ID_EVENTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOG_ID_SYSTEM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOG_ID_CRASH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int v(@Nullable String tag, @NonNull String msg)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #VERBOSE} log message.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#VERBOSE" ]
  }, {
    "name" : "public static int v(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #VERBOSE} log message and log the exception.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @param tr An exception to log.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#VERBOSE" ]
  }, {
    "name" : "public static int d(@Nullable String tag, @NonNull String msg)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #DEBUG} log message.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#DEBUG" ]
  }, {
    "name" : "public static int d(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #DEBUG} log message and log the exception.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @param tr An exception to log.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#DEBUG" ]
  }, {
    "name" : "public static int i(@Nullable String tag, @NonNull String msg)",
    "returnType" : "int",
    "comment" : "\n     * Send an {@link #INFO} log message.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#INFO" ]
  }, {
    "name" : "public static int i(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #INFO} log message and log the exception.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @param tr An exception to log.\n     ",
    "links" : [ "#INFO" ]
  }, {
    "name" : "public static int w(@Nullable String tag, @NonNull String msg)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #WARN} log message.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#WARN" ]
  }, {
    "name" : "public static int w(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #WARN} log message and log the exception.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @param tr An exception to log.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#WARN" ]
  }, {
    "name" : "public static native boolean isLoggable(@Nullable String tag, @Level int level)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks to see whether or not a log for the specified tag is loggable at the specified level.\n     *\n     *  The default level of any tag is set to INFO. This means that any level above and including\n     *  INFO will be logged. Before you make any calls to a logging method you should check to see\n     *  if your tag should be logged. You can change the default level by setting a system property:\n     *      'setprop log.tag.&lt;YOUR_LOG_TAG> &lt;LEVEL>'\n     *  Where level is either VERBOSE, DEBUG, INFO, WARN, ERROR, or ASSERT.\n     *  You can also create a local.prop file that with the following in it:\n     *      'log.tag.&lt;YOUR_LOG_TAG>=&lt;LEVEL>'\n     *  and place that in /data/local.prop.\n     *\n     * @param tag The tag to check.\n     * @param level The level to check.\n     * @return Whether or not that this is allowed to be logged.\n     * @throws IllegalArgumentException is thrown if the tag.length() > 23\n     *         for Nougat (7.0) and prior releases (API <= 25), there is no\n     *         tag limit of concern after this API level.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int w(@Nullable String tag, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #WARN} log message and log the exception.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param tr An exception to log.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#WARN" ]
  }, {
    "name" : "public static int e(@Nullable String tag, @NonNull String msg)",
    "returnType" : "int",
    "comment" : "\n     * Send an {@link #ERROR} log message.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#ERROR" ]
  }, {
    "name" : "public static int e(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Send a {@link #ERROR} log message and log the exception.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @param tr An exception to log.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#ERROR" ]
  }, {
    "name" : "public static int wtf(@Nullable String tag, @Nullable String msg)",
    "returnType" : "int",
    "comment" : "\n     * What a Terrible Failure: Report a condition that should never happen.\n     * The error will always be logged at level ASSERT with the call stack.\n     * Depending on system configuration, a report may be added to the\n     * {@link android.os.DropBoxManager} and/or the process may be terminated\n     * immediately with an error dialog.\n     * @param tag Used to identify the source of a log message.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "android.os.DropBoxManager" ]
  }, {
    "name" : "public static int wtfStack(@Nullable String tag, @Nullable String msg)",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #wtf(String, String)}, but also writes to the log the full\n     * call stack.\n     * @hide\n     ",
    "links" : [ "#wtf(String" ]
  }, {
    "name" : "public static int wtf(@Nullable String tag, @NonNull Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * What a Terrible Failure: Report an exception that should never happen.\n     * Similar to {@link #wtf(String, String)}, with an exception to log.\n     * @param tag Used to identify the source of a log message.\n     * @param tr An exception to log.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#wtf(String" ]
  }, {
    "name" : "public static int wtf(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * What a Terrible Failure: Report an exception that should never happen.\n     * Similar to {@link #wtf(String, Throwable)}, with a message as well.\n     * @param tag Used to identify the source of a log message.\n     * @param msg The message you would like logged.\n     * @param tr An exception to log.  May be null.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable", "#wtf(String" ]
  }, {
    "name" : " static int wtf(int logId, @Nullable String tag, @Nullable String msg, @Nullable Throwable tr, boolean localStack, boolean system)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void wtfQuiet(int logId, @Nullable String tag, @Nullable String msg, boolean system)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static TerribleFailureHandler setWtfHandler(@NonNull TerribleFailureHandler handler)",
    "returnType" : "TerribleFailureHandler",
    "comment" : "\n     * Sets the terrible failure handler, for testing.\n     *\n     * @return the old handler\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getStackTraceString(@Nullable Throwable tr)",
    "returnType" : "String",
    "comment" : "\n     * Handy function to get a loggable stack trace from a Throwable\n\n     * <p>If any of the throwables in the cause chain is an <code>UnknownHostException</code>,\n     * this returns an empty string.\n     * @param tr An exception to log.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int println(@Level int priority, @Nullable String tag, @NonNull String msg)",
    "returnType" : "int",
    "comment" : "\n     * Low-level logging call.\n     * @param priority The priority/type of this log message\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     ",
    "links" : [ "#isLoggable" ]
  }, {
    "name" : "public static native int println_native(int bufID, int priority, String tag, String msg)",
    "returnType" : "int",
    "comment" : "\n     * Low-level logging call.\n     * @param bufID The buffer ID to receive the message.\n     * @param priority The priority of the message.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param msg The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     * @hide\n     ",
    "links" : [ "#isLoggable" ]
  }, {
    "name" : "public static int logToRadioBuffer(@Level int priority, @Nullable String tag, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Send a log message to the \"radio\" log buffer, which can be dumped with\n     * {@code adb logcat -b radio}.\n     *\n     * <p>Only the telephony mainline module should use it.\n     *\n     * <p>Note ART will protect {@code MODULE_LIBRARIES} system APIs from regular app code.\n     *\n     * @param priority Log priority.\n     * @param tag Used to identify the source of a log message.  It usually identifies\n     *        the class or activity where the log call occurs.\n     * @param message The message you would like logged.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     * @hide\n     ",
    "links" : [ "#isLoggable" ]
  }, {
    "name" : "private static native int logger_entry_max_payload_native()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum payload the log daemon accepts without truncation.\n     * @return LOGGER_ENTRY_MAX_PAYLOAD.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int printlns(int bufID, int priority, @Nullable String tag, @NonNull String msg, @Nullable Throwable tr)",
    "returnType" : "int",
    "comment" : "\n     * Helper function for long messages. Uses the LineBreakBufferedWriter to break\n     * up long messages and stacktraces along newlines, but tries to write in large\n     * chunks. This is to avoid truncation.\n     * @return A positive value if the message was loggable (see {@link #isLoggable}).\n     * @hide\n     ",
    "links" : [ "#isLoggable" ]
  } ],
  "methodNames" : [ "public static int v(@Nullable String tag, @NonNull String msg)", "public static int v(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)", "public static int d(@Nullable String tag, @NonNull String msg)", "public static int d(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)", "public static int i(@Nullable String tag, @NonNull String msg)", "public static int i(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)", "public static int w(@Nullable String tag, @NonNull String msg)", "public static int w(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)", "public static native boolean isLoggable(@Nullable String tag, @Level int level)", "public static int w(@Nullable String tag, @Nullable Throwable tr)", "public static int e(@Nullable String tag, @NonNull String msg)", "public static int e(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)", "public static int wtf(@Nullable String tag, @Nullable String msg)", "public static int wtfStack(@Nullable String tag, @Nullable String msg)", "public static int wtf(@Nullable String tag, @NonNull Throwable tr)", "public static int wtf(@Nullable String tag, @Nullable String msg, @Nullable Throwable tr)", " static int wtf(int logId, @Nullable String tag, @Nullable String msg, @Nullable Throwable tr, boolean localStack, boolean system)", " static void wtfQuiet(int logId, @Nullable String tag, @Nullable String msg, boolean system)", "public static TerribleFailureHandler setWtfHandler(@NonNull TerribleFailureHandler handler)", "public static String getStackTraceString(@Nullable Throwable tr)", "public static int println(@Level int priority, @Nullable String tag, @NonNull String msg)", "public static native int println_native(int bufID, int priority, String tag, String msg)", "public static int logToRadioBuffer(@Level int priority, @Nullable String tag, @Nullable String message)", "private static native int logger_entry_max_payload_native()", "public static int printlns(int bufID, int priority, @Nullable String tag, @NonNull String msg, @Nullable Throwable tr)" ],
  "variableNames" : [ "VERBOSE", "DEBUG", "INFO", "WARN", "ERROR", "ASSERT", "sWtfHandler", "LOG_ID_MAIN", "LOG_ID_RADIO", "LOG_ID_EVENTS", "LOG_ID_SYSTEM", "LOG_ID_CRASH" ]
}