{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/locks/ReentrantReadWriteLock.java",
  "packageName" : "java.util.concurrent.locks",
  "className" : "ReadLock",
  "comment" : "\n     * The lock returned by method {@link ReentrantReadWriteLock#readLock}.\n     ",
  "links" : [ "java.util.concurrent.locks.ReentrantReadWriteLock#readLock" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sync",
    "type" : "Sync",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void lock()",
    "returnType" : "void",
    "comment" : "\n         * Acquires the read lock.\n         *\n         * <p>Acquires the read lock if the write lock is not held by\n         * another thread and returns immediately.\n         *\n         * <p>If the write lock is held by another thread then\n         * the current thread becomes disabled for thread scheduling\n         * purposes and lies dormant until the read lock has been acquired.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void lockInterruptibly() throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n         * Acquires the read lock unless the current thread is\n         * {@linkplain Thread#interrupt interrupted}.\n         *\n         * <p>Acquires the read lock if the write lock is not held\n         * by another thread and returns immediately.\n         *\n         * <p>If the write lock is held by another thread then the\n         * current thread becomes disabled for thread scheduling\n         * purposes and lies dormant until one of two things happens:\n         *\n         * <ul>\n         *\n         * <li>The read lock is acquired by the current thread; or\n         *\n         * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n         * the current thread.\n         *\n         * </ul>\n         *\n         * <p>If the current thread:\n         *\n         * <ul>\n         *\n         * <li>has its interrupted status set on entry to this method; or\n         *\n         * <li>is {@linkplain Thread#interrupt interrupted} while\n         * acquiring the read lock,\n         *\n         * </ul>\n         *\n         * then {@link InterruptedException} is thrown and the current\n         * thread's interrupted status is cleared.\n         *\n         * <p>In this implementation, as this method is an explicit\n         * interruption point, preference is given to responding to\n         * the interrupt over normal or reentrant acquisition of the\n         * lock.\n         *\n         * @throws InterruptedException if the current thread is interrupted\n         ",
    "links" : [ "InterruptedException" ]
  }, {
    "name" : "public boolean tryLock()",
    "returnType" : "boolean",
    "comment" : "\n         * Acquires the read lock only if the write lock is not held by\n         * another thread at the time of invocation.\n         *\n         * <p>Acquires the read lock if the write lock is not held by\n         * another thread and returns immediately with the value\n         * {@code true}. Even when this lock has been set to use a\n         * fair ordering policy, a call to {@code tryLock()}\n         * <em>will</em> immediately acquire the read lock if it is\n         * available, whether or not other threads are currently\n         * waiting for the read lock.  This &quot;barging&quot; behavior\n         * can be useful in certain circumstances, even though it\n         * breaks fairness. If you want to honor the fairness setting\n         * for this lock, then use {@link #tryLock(long, TimeUnit)\n         * tryLock(0, TimeUnit.SECONDS)} which is almost equivalent\n         * (it also detects interruption).\n         *\n         * <p>If the write lock is held by another thread then\n         * this method will return immediately with the value\n         * {@code false}.\n         *\n         * @return {@code true} if the read lock was acquired\n         ",
    "links" : [ "#tryLock(long" ]
  }, {
    "name" : "public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n         * Acquires the read lock if the write lock is not held by\n         * another thread within the given waiting time and the\n         * current thread has not been {@linkplain Thread#interrupt\n         * interrupted}.\n         *\n         * <p>Acquires the read lock if the write lock is not held by\n         * another thread and returns immediately with the value\n         * {@code true}. If this lock has been set to use a fair\n         * ordering policy then an available lock <em>will not</em> be\n         * acquired if any other threads are waiting for the\n         * lock. This is in contrast to the {@link #tryLock()}\n         * method. If you want a timed {@code tryLock} that does\n         * permit barging on a fair lock then combine the timed and\n         * un-timed forms together:\n         *\n         * <pre> {@code\n         * if (lock.tryLock() ||\n         *     lock.tryLock(timeout, unit)) {\n         *   ...\n         * }}</pre>\n         *\n         * <p>If the write lock is held by another thread then the\n         * current thread becomes disabled for thread scheduling\n         * purposes and lies dormant until one of three things happens:\n         *\n         * <ul>\n         *\n         * <li>The read lock is acquired by the current thread; or\n         *\n         * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n         * the current thread; or\n         *\n         * <li>The specified waiting time elapses.\n         *\n         * </ul>\n         *\n         * <p>If the read lock is acquired then the value {@code true} is\n         * returned.\n         *\n         * <p>If the current thread:\n         *\n         * <ul>\n         *\n         * <li>has its interrupted status set on entry to this method; or\n         *\n         * <li>is {@linkplain Thread#interrupt interrupted} while\n         * acquiring the read lock,\n         *\n         * </ul> then {@link InterruptedException} is thrown and the\n         * current thread's interrupted status is cleared.\n         *\n         * <p>If the specified waiting time elapses then the value\n         * {@code false} is returned.  If the time is less than or\n         * equal to zero, the method will not wait at all.\n         *\n         * <p>In this implementation, as this method is an explicit\n         * interruption point, preference is given to responding to\n         * the interrupt over normal or reentrant acquisition of the\n         * lock, and over reporting the elapse of the waiting time.\n         *\n         * @param timeout the time to wait for the read lock\n         * @param unit the time unit of the timeout argument\n         * @return {@code true} if the read lock was acquired\n         * @throws InterruptedException if the current thread is interrupted\n         * @throws NullPointerException if the time unit is null\n         ",
    "links" : [ "#tryLock()", "InterruptedException" ]
  }, {
    "name" : "public void unlock()",
    "returnType" : "void",
    "comment" : "\n         * Attempts to release this lock.\n         *\n         * <p>If the number of readers is now zero then the lock\n         * is made available for write lock attempts. If the current\n         * thread does not hold this lock then {@link\n         * IllegalMonitorStateException} is thrown.\n         *\n         * @throws IllegalMonitorStateException if the current thread\n         * does not hold this lock\n         ",
    "links" : [ "IllegalMonitorStateException" ]
  }, {
    "name" : "public Condition newCondition()",
    "returnType" : "Condition",
    "comment" : "\n         * Throws {@code UnsupportedOperationException} because\n         * {@code ReadLocks} do not support conditions.\n         *\n         * @throws UnsupportedOperationException always\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n         * Returns a string identifying this lock, as well as its lock state.\n         * The state, in brackets, includes the String {@code \"Read locks =\"}\n         * followed by the number of held read locks.\n         *\n         * @return a string identifying this lock, as well as its lock state\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void lock()", "public void lockInterruptibly() throws InterruptedException", "public boolean tryLock()", "public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException", "public void unlock()", "public Condition newCondition()", "public String toString()" ],
  "variableNames" : [ "serialVersionUID", "sync" ]
}