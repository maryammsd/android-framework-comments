{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/InCallAdapter.java",
  "packageName" : "android.telecom",
  "className" : "InCallAdapter",
  "comment" : "\n * Receives commands from {@link InCallService} implementations which should be executed by\n * Telecom. When Telecom binds to a {@link InCallService}, an instance of this class is given to\n * the in-call service through which it can manipulate live (active, dialing, ringing) calls. When\n * the in-call service is notified of new calls, it can use the\n * given call IDs to execute commands such as {@link #answerCall} for incoming calls or\n * {@link #disconnectCall} for active calls the user would like to end. Some commands are only\n * appropriate for calls in certain states; please consult each method for such limitations.\n * <p>\n * The adapter will stop functioning when there are no more calls.\n *\n * @hide\n ",
  "links" : [ "android.telecom.InCallService", "#answerCall", "#disconnectCall" ],
  "variables" : [ {
    "name" : "mAdapter",
    "type" : "IInCallAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void answerCall(String callId, int videoState)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to answer the specified call.\n     *\n     * @param callId The identifier of the call to answer.\n     * @param videoState The video state in which to answer the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deflectCall(String callId, Uri address)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to deflect the specified call.\n     *\n     * @param callId The identifier of the call to deflect.\n     * @param address The address to deflect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rejectCall(String callId, boolean rejectWithMessage, String textMessage)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to reject the specified call.\n     *\n     * @param callId The identifier of the call to reject.\n     * @param rejectWithMessage Whether to reject with a text message.\n     * @param textMessage An optional text message with which to respond.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rejectCall(String callId, @Call.RejectReason int rejectReason)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to reject the specified call.\n     *\n     * @param callId The identifier of the call to reject.\n     * @param rejectReason The reason the call was rejected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transferCall(@NonNull String callId, @NonNull Uri targetNumber, boolean isConfirmationRequired)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to transfer the specified call.\n     *\n     * @param callId The identifier of the call to transfer.\n     * @param targetNumber The address to transfer to.\n     * @param isConfirmationRequired if {@code true} it will initiate a confirmed transfer,\n     * if {@code false}, it will initiate unconfirmed transfer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transferCall(@NonNull String callId, @NonNull String otherCallId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to transfer the specified call to another ongoing call.\n     *\n     * @param callId The identifier of the call to transfer.\n     * @param otherCallId The identifier of the other call to which this will be transferred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnectCall(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to disconnect the specified call.\n     *\n     * @param callId The identifier of the call to disconnect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void holdCall(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to put the specified call on hold.\n     *\n     * @param callId The identifier of the call to put on hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unholdCall(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to release the specified call from hold.\n     *\n     * @param callId The identifier of the call to release from hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mute(boolean shouldMute)",
    "returnType" : "void",
    "comment" : "\n     * Mute the microphone.\n     *\n     * @param shouldMute True if the microphone should be muted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioRoute(int route)",
    "returnType" : "void",
    "comment" : "\n     * Sets the audio route (speaker, bluetooth, etc...). See {@link CallAudioState}.\n     *\n     * @param route The audio route to use.\n     ",
    "links" : [ "android.telecom.CallAudioState" ]
  }, {
    "name" : "public void enterBackgroundAudioProcessing(String callId)",
    "returnType" : "void",
    "comment" : "\n     * @see Call#enterBackgroundAudioProcessing()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void exitBackgroundAudioProcessing(String callId, boolean shouldRing)",
    "returnType" : "void",
    "comment" : "\n     * @see Call#exitBackgroundAudioProcessing(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestBluetoothAudio(String bluetoothAddress)",
    "returnType" : "void",
    "comment" : "\n     * Request audio routing to a specific bluetooth device. Calling this method may result in\n     * the device routing audio to a different bluetooth device than the one specified. A list of\n     * available devices can be obtained via {@link CallAudioState#getSupportedBluetoothDevices()}\n     *\n     * @param bluetoothAddress The address of the bluetooth device to connect to, as returned by\n     * {@link BluetoothDevice#getAddress()}, or {@code null} if no device is preferred.\n     ",
    "links" : [ "android.telecom.CallAudioState#getSupportedBluetoothDevices()", "android.bluetooth.BluetoothDevice#getAddress()" ]
  }, {
    "name" : "public void requestCallEndpointChange(CallEndpoint endpoint, Executor executor, OutcomeReceiver<Void, CallEndpointException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request audio routing to a specific CallEndpoint.. See {@link CallEndpoint}.\n     *\n     * @param endpoint The call endpoint to use.\n     * @param executor The executor of where the callback will execute.\n     * @param callback The callback to notify the result of the endpoint change.\n     ",
    "links" : [ "android.telecom.CallEndpoint" ]
  }, {
    "name" : "public void playDtmfTone(String callId, char digit)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to play a dual-tone multi-frequency signaling (DTMF) tone in a call.\n     *\n     * Any other currently playing DTMF tone in the specified call is immediately stopped.\n     *\n     * @param callId The unique ID of the call in which the tone will be played.\n     * @param digit A character representing the DTMF digit for which to play the tone. This\n     *         value must be one of {@code '0'} through {@code '9'}, {@code '*'} or {@code '#'}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopDtmfTone(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to stop any dual-tone multi-frequency signaling (DTMF) tone currently\n     * playing.\n     *\n     * DTMF tones are played by calling {@link #playDtmfTone(String,char)}. If no DTMF tone is\n     * currently playing, this method will do nothing.\n     *\n     * @param callId The unique ID of the call in which any currently playing tone will be stopped.\n     ",
    "links" : [ "#playDtmfTone(String" ]
  }, {
    "name" : "public void postDialContinue(String callId, boolean proceed)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to continue playing a post-dial DTMF string.\n     *\n     * A post-dial DTMF string is a string of digits entered after a phone number, when dialed,\n     * that are immediately sent as DTMF tones to the recipient as soon as the connection is made.\n     * While these tones are playing, Telecom will notify the {@link InCallService} that the call\n     * is in the post dial state.\n     *\n     * If the DTMF string contains a {@link TelecomManager#DTMF_CHARACTER_PAUSE} symbol, Telecom\n     * will temporarily pause playing the tones for a pre-defined period of time.\n     *\n     * If the DTMF string contains a {@link TelecomManager#DTMF_CHARACTER_WAIT} symbol, Telecom\n     * will pause playing the tones and notify the {@link InCallService} that the call is in the\n     * post dial wait state. When the user decides to continue the postdial sequence, the\n     * {@link InCallService} should invoke the {@link #postDialContinue(String,boolean)} method.\n     *\n     * @param callId The unique ID of the call for which postdial string playing should continue.\n     * @param proceed Whether or not to continue with the post-dial sequence.\n     ",
    "links" : [ "#postDialContinue(String", "android.telecom.InCallService", "android.telecom.TelecomManager#DTMF_CHARACTER_PAUSE", "android.telecom.TelecomManager#DTMF_CHARACTER_WAIT" ]
  }, {
    "name" : "public void phoneAccountSelected(String callId, PhoneAccountHandle accountHandle, boolean setDefault)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to add a PhoneAccountHandle to the specified call.\n     *\n     * @param callId The identifier of the call.\n     * @param accountHandle The PhoneAccountHandle through which to place the call.\n     * @param setDefault {@code True} if this account should be set as the default for calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void conference(String callId, String otherCallId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to conference the specified call.\n     *\n     * @param callId The unique ID of the call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addConferenceParticipants(String callId, List<Uri> participants)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to pull participants to existing call\n     *\n     * @param callId The unique ID of the call.\n     * @param participants participants to be pulled to existing call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void splitFromConference(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to split the specified call from any conference call with which it may be\n     * connected.\n     *\n     * @param callId The unique ID of the call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mergeConference(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to merge child calls of the specified conference call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void swapConference(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to swap the child calls of the specified conference call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pullExternalCall(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to pull an external call to the local device.\n     *\n     * @param callId The callId to pull.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendCallEvent(String callId, String event, int targetSdkVer, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Intructs Telecom to send a call event.\n     *\n     * @param callId The callId to send the event for.\n     * @param event The event.\n     * @param targetSdkVer Target sdk version of the app calling this api\n     * @param extras Extras associated with the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putExtras(String callId, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Intructs Telecom to add extras to a call.\n     *\n     * @param callId The callId to add the extras to.\n     * @param extras The extras.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putExtra(String callId, String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Intructs Telecom to add an extra to a call.\n     *\n     * @param callId The callId to add the extras to.\n     * @param key The extra key.\n     * @param value The extra value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putExtra(String callId, String key, int value)",
    "returnType" : "void",
    "comment" : "\n     * Intructs Telecom to add an extra to a call.\n     *\n     * @param callId The callId to add the extras to.\n     * @param key The extra key.\n     * @param value The extra value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putExtra(String callId, String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Intructs Telecom to add an extra to a call.\n     *\n     * @param callId The callId to add the extras to.\n     * @param key The extra key.\n     * @param value The extra value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeExtras(String callId, List<String> keys)",
    "returnType" : "void",
    "comment" : "\n     * Intructs Telecom to remove extras from a call.\n     * @param callId The callId to remove the extras from.\n     * @param keys The extra keys to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void turnProximitySensorOn()",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to turn the proximity sensor on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void turnProximitySensorOff(boolean screenOnImmediately)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to turn the proximity sensor off.\n     *\n     * @param screenOnImmediately If true, the screen will be turned on immediately if it was\n     * previously off. Otherwise, the screen will only be turned on after the proximity sensor\n     * is no longer triggered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendRttRequest(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sends an RTT upgrade request to the remote end of the connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void respondToRttRequest(String callId, int id, boolean accept)",
    "returnType" : "void",
    "comment" : "\n     * Responds to an RTT upgrade request initiated from the remote end.\n     *\n     * @param id the ID of the request as specified by Telecom\n     * @param accept Whether the request should be accepted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopRtt(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to shut down the RTT communication channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRttMode(String callId, int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RTT audio mode.\n     * @param mode the desired RTT audio mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public void handoverTo(String callId, PhoneAccountHandle destAcct, int videoState, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Initiates a handover of this {@link Call} to the {@link ConnectionService} identified\n     * by destAcct.\n     * @param callId The callId of the Call which calls this function.\n     * @param destAcct ConnectionService to which the call should be handed over.\n     * @param videoState The video state desired after the handover.\n     * @param extras Extra information to be passed to ConnectionService\n     ",
    "links" : [ "android.telecom.Call", "android.telecom.ConnectionService" ]
  } ],
  "methodNames" : [ "public void answerCall(String callId, int videoState)", "public void deflectCall(String callId, Uri address)", "public void rejectCall(String callId, boolean rejectWithMessage, String textMessage)", "public void rejectCall(String callId, @Call.RejectReason int rejectReason)", "public void transferCall(@NonNull String callId, @NonNull Uri targetNumber, boolean isConfirmationRequired)", "public void transferCall(@NonNull String callId, @NonNull String otherCallId)", "public void disconnectCall(String callId)", "public void holdCall(String callId)", "public void unholdCall(String callId)", "public void mute(boolean shouldMute)", "public void setAudioRoute(int route)", "public void enterBackgroundAudioProcessing(String callId)", "public void exitBackgroundAudioProcessing(String callId, boolean shouldRing)", "public void requestBluetoothAudio(String bluetoothAddress)", "public void requestCallEndpointChange(CallEndpoint endpoint, Executor executor, OutcomeReceiver<Void, CallEndpointException> callback)", "public void playDtmfTone(String callId, char digit)", "public void stopDtmfTone(String callId)", "public void postDialContinue(String callId, boolean proceed)", "public void phoneAccountSelected(String callId, PhoneAccountHandle accountHandle, boolean setDefault)", "public void conference(String callId, String otherCallId)", "public void addConferenceParticipants(String callId, List<Uri> participants)", "public void splitFromConference(String callId)", "public void mergeConference(String callId)", "public void swapConference(String callId)", "public void pullExternalCall(String callId)", "public void sendCallEvent(String callId, String event, int targetSdkVer, Bundle extras)", "public void putExtras(String callId, Bundle extras)", "public void putExtra(String callId, String key, boolean value)", "public void putExtra(String callId, String key, int value)", "public void putExtra(String callId, String key, String value)", "public void removeExtras(String callId, List<String> keys)", "public void turnProximitySensorOn()", "public void turnProximitySensorOff(boolean screenOnImmediately)", "public void sendRttRequest(String callId)", "public void respondToRttRequest(String callId, int id, boolean accept)", "public void stopRtt(String callId)", "public void setRttMode(String callId, int mode)", "public void handoverTo(String callId, PhoneAccountHandle destAcct, int videoState, Bundle extras)" ],
  "variableNames" : [ "mAdapter" ]
}