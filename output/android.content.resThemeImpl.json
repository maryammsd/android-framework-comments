{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/res/ResourcesImpl.java",
  "packageName" : "android.content.res",
  "className" : "ThemeImpl",
  "comment" : "",
  "variables" : [ {
    "name" : "mKey",
    "type" : "Resources.ThemeKey",
    "comment" : "\n         * Unique key for the series of styles applied to this theme.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAssets",
    "type" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTheme",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeResId",
    "type" : "int",
    "comment" : "\n         * Resource identifier for the theme.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Resources.ThemeKey getKey()",
    "returnType" : "Resources.ThemeKey",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " long getNativeTheme()",
    "returnType" : "long",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " int getAppliedStyleResId()",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void applyStyle(int resId, boolean force)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTo(ThemeImpl other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " TypedArray obtainStyledAttributes(@NonNull Resources.Theme wrapper, AttributeSet set, @StyleableRes int[] attrs, @AttrRes int defStyleAttr, @StyleRes int defStyleRes)",
    "returnType" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " TypedArray resolveAttributes(@NonNull Resources.Theme wrapper, @NonNull int[] values, @NonNull int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean resolveAttribute(int resid, TypedValue outValue, boolean resolveRefs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int[] getAllAttributes()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(int priority, String tag, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getTheme()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void rebase()",
    "returnType" : "void",
    "comment" : "\n         * Rebases the theme against the parent Resource object's current\n         * configuration by re-applying the styles passed to\n         * {@link #applyStyle(int, boolean)}.\n         ",
    "links" : [ "#applyStyle" ]
  }, {
    "name" : "public int[] getAttributeResolutionStack(@AttrRes int defStyleAttr, @StyleRes int defStyleRes, @StyleRes int explicitStyleRes)",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the ordered list of resource ID that are considered when resolving attribute\n         * values when making an equivalent call to\n         * {@link #obtainStyledAttributes(Resources.Theme, AttributeSet, int[], int, int)}. The list\n         * will include a set of explicit styles ({@code explicitStyleRes} and it will include the\n         * default styles ({@code defStyleAttr} and {@code defStyleRes}).\n         *\n         * @param defStyleAttr An attribute in the current theme that contains a\n         *                     reference to a style resource that supplies\n         *                     defaults values for the TypedArray.  Can be\n         *                     0 to not look for defaults.\n         * @param defStyleRes A resource identifier of a style resource that\n         *                    supplies default values for the TypedArray,\n         *                    used only if defStyleAttr is 0 or can not be found\n         *                    in the theme.  Can be 0 to not look for defaults.\n         * @param explicitStyleRes A resource identifier of an explicit style resource.\n         * @return ordered list of resource ID that are considered when resolving attribute values.\n         ",
    "links" : [ "#obtainStyledAttributes" ]
  } ],
  "variableNames" : [ "mKey", "mAssets", "mTheme", "mThemeResId" ],
  "methodNames" : [ "protected void finalize() throws Throwable", " Resources.ThemeKey getKey()", " long getNativeTheme()", " int getAppliedStyleResId()", " void applyStyle(int resId, boolean force)", " void setTo(ThemeImpl other)", " TypedArray obtainStyledAttributes(@NonNull Resources.Theme wrapper, AttributeSet set, @StyleableRes int[] attrs, @AttrRes int defStyleAttr, @StyleRes int defStyleRes)", " TypedArray resolveAttributes(@NonNull Resources.Theme wrapper, @NonNull int[] values, @NonNull int[] attrs)", " boolean resolveAttribute(int resid, TypedValue outValue, boolean resolveRefs)", " int[] getAllAttributes()", " int getChangingConfigurations()", "public void dump(int priority, String tag, String prefix)", " String[] getTheme()", " void rebase()", "public int[] getAttributeResolutionStack(@AttrRes int defStyleAttr, @StyleRes int defStyleRes, @StyleRes int explicitStyleRes)" ]
}