{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/SurfaceTexture.java",
  "packageName" : "android.graphics",
  "className" : "SurfaceTexture",
  "comment" : "\n * Captures frames from an image stream as an OpenGL ES texture.\n *\n * <p>The image stream may come from either camera preview or video decode. A\n * {@link android.view.Surface} created from a SurfaceTexture can be used as an output\n * destination for the {@link android.hardware.camera2}, {@link android.media.MediaCodec},\n * {@link android.media.MediaPlayer}, and {@link android.renderscript.Allocation} APIs.\n * When {@link #updateTexImage} is called, the contents of the texture object specified\n * when the SurfaceTexture was created are updated to contain the most recent image from the image\n * stream.  This may cause some frames of the stream to be skipped.\n *\n * <p>A SurfaceTexture may also be used in place of a SurfaceHolder when specifying the output\n * destination of the older {@link android.hardware.Camera} API. Doing so will cause all the\n * frames from the image stream to be sent to the SurfaceTexture object rather than to the device's\n * display.\n *\n * <p>When sampling from the texture one should first transform the texture coordinates using the\n * matrix queried via {@link #getTransformMatrix(float[])}.  The transform matrix may change each\n * time {@link #updateTexImage} is called, so it should be re-queried each time the texture image\n * is updated.\n * This matrix transforms traditional 2D OpenGL ES texture coordinate column vectors of the form (s,\n * t, 0, 1) where s and t are on the inclusive interval [0, 1] to the proper sampling location in\n * the streamed texture.  This transform compensates for any properties of the image stream source\n * that cause it to appear different from a traditional OpenGL ES texture.  For example, sampling\n * from the bottom left corner of the image can be accomplished by transforming the column vector\n * (0, 0, 0, 1) using the queried matrix, while sampling from the top right corner of the image can\n * be done by transforming (1, 1, 0, 1).\n *\n * <p>The texture object uses the GL_TEXTURE_EXTERNAL_OES texture target, which is defined by the\n * <a href=\"http://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image_external.txt\">\n * GL_OES_EGL_image_external</a> OpenGL ES extension.  This limits how the texture may be used.\n * Each time the texture is bound it must be bound to the GL_TEXTURE_EXTERNAL_OES target rather than\n * the GL_TEXTURE_2D target.  Additionally, any OpenGL ES 2.0 shader that samples from the texture\n * must declare its use of this extension using, for example, an \"#extension\n * GL_OES_EGL_image_external : require\" directive.  Such shaders must also access the texture using\n * the samplerExternalOES GLSL sampler type.\n *\n * <p>SurfaceTexture objects may be created on any thread.  {@link #updateTexImage} may only be\n * called on the thread with the OpenGL ES context that contains the texture object.  The\n * frame-available callback is called on an arbitrary thread, so unless special care is taken {@link\n * #updateTexImage} should not be called directly from the callback.\n ",
  "variables" : [ {
    "name" : "mCreatorLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnFrameAvailableHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceTexture",
    "type" : "long",
    "comment" : "\n     * These fields are used by native code, do not access or modify.\n     ",
    "links" : [ ]
  }, {
    "name" : "mProducer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameAvailableListener",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSingleBuffered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnFrameAvailableListener(@Nullable OnFrameAvailableListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a new image frame becomes available to the\n     * SurfaceTexture.\n     * <p>\n     * The callback may be called on an arbitrary thread, so it is not\n     * safe to call {@link #updateTexImage} without first binding the OpenGL ES context to the\n     * thread invoking the callback.\n     * </p>\n     *\n     * @param listener The listener to use, or null to remove the listener.\n     ",
    "links" : [ "#updateTexImage" ]
  }, {
    "name" : "public void setOnFrameAvailableListener(@Nullable final OnFrameAvailableListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a new image frame becomes available to the\n     * SurfaceTexture.\n     * <p>\n     * If a handler is specified, the callback will be invoked on that handler's thread.\n     * If no handler is specified, then the callback may be called on an arbitrary thread,\n     * so it is not safe to call {@link #updateTexImage} without first binding the OpenGL ES\n     * context to the thread invoking the callback.\n     * </p>\n     *\n     * @param listener The listener to use, or null to remove the listener.\n     * @param handler The handler on which the listener should be invoked, or null\n     * to use an arbitrary thread.\n     ",
    "links" : [ "#updateTexImage" ]
  }, {
    "name" : "public void setDefaultBufferSize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Set the default size of the image buffers.  The image producer may override the buffer size,\n     * in which case the producer-set buffer size will be used, not the default size set by this\n     * method.  Both video and camera based image producers do override the size.  This method may\n     * be used to set the image size when producing images with {@link android.graphics.Canvas} (via\n     * {@link android.view.Surface#lockCanvas}), or OpenGL ES (via an EGLSurface).\n     * <p>\n     * The new default buffer size will take effect the next time the image producer requests a\n     * buffer to fill.  For {@link android.graphics.Canvas} this will be the next time {@link\n     * android.view.Surface#lockCanvas} is called.  For OpenGL ES, the EGLSurface should be\n     * destroyed (via eglDestroySurface), made not-current (via eglMakeCurrent), and then recreated\n     * (via {@code eglCreateWindowSurface}) to ensure that the new default size has taken effect.\n     * <p>\n     * The width and height parameters must be no greater than the minimum of\n     * {@code GL_MAX_VIEWPORT_DIMS} and {@code GL_MAX_TEXTURE_SIZE} (see\n     * {@link javax.microedition.khronos.opengles.GL10#glGetIntegerv glGetIntegerv}).\n     * An error due to invalid dimensions might not be reported until\n     * updateTexImage() is called.\n     ",
    "links" : [ "android.graphics.Canvas", "android.view.Surface#lockCanvas", "android.graphics.Canvas", "javax.microedition.khronos.opengles.GL10#glGetIntegerv" ]
  }, {
    "name" : "public void updateTexImage()",
    "returnType" : "void",
    "comment" : "\n     * Update the texture image to the most recent frame from the image stream.  This may only be\n     * called while the OpenGL ES context that owns the texture is current on the calling thread.\n     * It will implicitly bind its texture to the {@code GL_TEXTURE_EXTERNAL_OES} texture target.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releaseTexImage()",
    "returnType" : "void",
    "comment" : "\n     * Releases the the texture content. This is needed in single buffered mode to allow the image\n     * content producer to take ownership of the image buffer.\n     * <p>\n     * For more information see {@link #SurfaceTexture(int, boolean)}.\n     ",
    "links" : [ "#SurfaceTexture" ]
  }, {
    "name" : "public void detachFromGLContext()",
    "returnType" : "void",
    "comment" : "\n     * Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object.\n     * This call must be made with the OpenGL ES context current on the calling thread.  The OpenGL\n     * ES texture object will be deleted as a result of this call.  After calling this method all\n     * calls to {@link #updateTexImage} will throw an {@link java.lang.IllegalStateException} until\n     * a successful call to {@link #attachToGLContext} is made.\n     * <p>\n     * This can be used to access the SurfaceTexture image contents from multiple OpenGL ES\n     * contexts.  Note, however, that the image contents are only accessible from one OpenGL ES\n     * context at a time.\n     ",
    "links" : [ "#updateTexImage", "java.lang.IllegalStateException", "#attachToGLContext" ]
  }, {
    "name" : "public void attachToGLContext(int texName)",
    "returnType" : "void",
    "comment" : "\n     * Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread.  A\n     * new OpenGL ES texture object is created and populated with the SurfaceTexture image frame\n     * that was current at the time of the last call to {@link #detachFromGLContext}.  This new\n     * texture is bound to the {@code GL_TEXTURE_EXTERNAL_OES} texture target.\n     * <p>\n     * This can be used to access the SurfaceTexture image contents from multiple OpenGL ES\n     * contexts.  Note, however, that the image contents are only accessible from one OpenGL ES\n     * context at a time.\n     *\n     * @param texName The name of the OpenGL ES texture that will be created.  This texture name\n     * must be unusued in the OpenGL ES context that is current on the calling thread.\n     ",
    "links" : [ "#detachFromGLContext" ]
  }, {
    "name" : "public void getTransformMatrix(float[] mtx)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by\n     * the most recent call to {@link #updateTexImage}.\n     * <p>\n     * This transform matrix maps 2D homogeneous texture coordinates of the form (s, t, 0, 1) with s\n     * and t in the inclusive range [0, 1] to the texture coordinate that should be used to sample\n     * that location from the texture.  Sampling the texture outside of the range of this transform\n     * is undefined.\n     * <p>\n     * The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via\n     * the {@code glLoadMatrixf} or {@code glUniformMatrix4fv} functions.\n     * <p>\n     * If the underlying buffer has a crop associated with it, the transformation will also include\n     * a slight scale to cut off a 1-texel border around the edge of the crop. This ensures that\n     * when the texture is bilinear sampled that no texels outside of the buffer's valid region\n     * are accessed by the GPU, avoiding any sampling artifacts when scaling.\n     *\n     * @param mtx the array into which the 4x4 matrix will be stored.  The array must have exactly\n     *     16 elements.\n     ",
    "links" : [ "#updateTexImage" ]
  }, {
    "name" : "public long getTimestamp()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * {@code release()} frees all the buffers and puts the SurfaceTexture into the\n     * 'abandoned' state. Once put in this state the SurfaceTexture can never\n     * leave it. When in the 'abandoned' state, all methods of the\n     * {@code IGraphicBufferProducer} interface will fail with the {@code NO_INIT}\n     * error.\n     * <p>\n     * Note that while calling this method causes all the buffers to be freed\n     * from the perspective of the the SurfaceTexture, if there are additional\n     * references on the buffers (e.g. if a buffer is referenced by a client or\n     * by OpenGL ES as a texture) then those buffer will remain allocated.\n     * <p>\n     * Always call this method when you are done with SurfaceTexture. Failing\n     * to do so may delay resource deallocation for a significant amount of\n     * time.\n     *\n     * @see #isReleased()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReleased()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the SurfaceTexture was released.\n     *\n     * @see #release()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void postEventFromNative(WeakReference<SurfaceTexture> weakSelf)",
    "returnType" : "void",
    "comment" : "\n     * This method is invoked from native code only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSingleBuffered()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the SurfaceTexture is single-buffered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void nativeInit(boolean isDetached, int texName, boolean singleBufferMode, WeakReference<SurfaceTexture> weakSelf) throws Surface.OutOfResourcesException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeFinalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeGetTransformMatrix(float[] mtx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeGetTimestamp()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeSetDefaultBufferSize(int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeUpdateTexImage()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeReleaseTexImage()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeDetachFromGLContext()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeAttachToGLContext(int texName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeRelease()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeIsReleased()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mCreatorLooper", "mOnFrameAvailableHandler", "mSurfaceTexture", "mProducer", "mFrameAvailableListener", "mIsSingleBuffered" ],
  "methodNames" : [ "public void setOnFrameAvailableListener(@Nullable OnFrameAvailableListener listener)", "public void setOnFrameAvailableListener(@Nullable final OnFrameAvailableListener listener, @Nullable Handler handler)", "public void setDefaultBufferSize(int width, int height)", "public void updateTexImage()", "public void releaseTexImage()", "public void detachFromGLContext()", "public void attachToGLContext(int texName)", "public void getTransformMatrix(float[] mtx)", "public long getTimestamp()", "public void release()", "public boolean isReleased()", "protected void finalize() throws Throwable", "private static void postEventFromNative(WeakReference<SurfaceTexture> weakSelf)", "public boolean isSingleBuffered()", "private native void nativeInit(boolean isDetached, int texName, boolean singleBufferMode, WeakReference<SurfaceTexture> weakSelf) throws Surface.OutOfResourcesException", "private native void nativeFinalize()", "private native void nativeGetTransformMatrix(float[] mtx)", "private native long nativeGetTimestamp()", "private native void nativeSetDefaultBufferSize(int width, int height)", "private native void nativeUpdateTexImage()", "private native void nativeReleaseTexImage()", "private native int nativeDetachFromGLContext()", "private native int nativeAttachToGLContext(int texName)", "private native void nativeRelease()", "private native boolean nativeIsReleased()" ]
}