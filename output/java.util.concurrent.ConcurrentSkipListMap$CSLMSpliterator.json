{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentSkipListMap.java",
  "packageName" : "java.util.concurrent",
  "className" : "CSLMSpliterator",
  "comment" : "\n     * Base class providing common structure for Spliterators.\n     * (Although not all that much common functionality; as usual for\n     * view classes, details annoyingly vary in key, value, and entry\n     * subclasses in ways that are not worth abstracting out for\n     * internal classes.)\n     *\n     * The basic split strategy is to recursively descend from top\n     * level, row by row, descending to next row when either split\n     * off, or the end of row is encountered. Control of the number of\n     * splits relies on some statistical estimation: The expected\n     * remaining number of elements of a skip list when advancing\n     * either across or down decreases by about 25%.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "comparator",
    "type" : "Comparator<? super K>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fence",
    "type" : "K",
    "comment" : " exclusive upper bound for keys, or null if to end",
    "links" : [ ]
  }, {
    "name" : "row",
    "type" : "Index<K, V>",
    "comment" : " the level to split out",
    "links" : [ ]
  }, {
    "name" : "current",
    "type" : "Node<K, V>",
    "comment" : " current traversal node; initialize at origin",
    "links" : [ ]
  }, {
    "name" : "est",
    "type" : "long",
    "comment" : " size estimate",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final long estimateSize()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final long estimateSize()" ],
  "variableNames" : [ "comparator", "fence", "row", "current", "est" ]
}