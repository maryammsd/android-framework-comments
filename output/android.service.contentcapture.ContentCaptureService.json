{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/contentcapture/ContentCaptureService.java",
  "packageName" : "android.service.contentcapture",
  "className" : "ContentCaptureService",
  "comment" : "\n * A service used to capture the content of the screen to provide contextual data in other areas of\n * the system such as Autofill.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_CONTENT_CAPTURE_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_CONTENT_CAPTURE_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "PROTECTION_SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the protection service.\n     *\n     * <p>To be supported, the service must also require the {@link\n     * android.Manifest.permission#BIND_CONTENT_CAPTURE_SERVICE} permission so that other\n     * applications can not abuse it.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BIND_CONTENT_CAPTURE_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a ContentCaptureService component publishes information about itself.\n     *\n     * <p>This meta-data should reference an XML resource containing a\n     * <code>&lt;{@link\n     * android.R.styleable#ContentCaptureService content-capture-service}&gt;</code> tag.\n     *\n     * <p>Here's an example of how to use it on {@code AndroidManifest.xml}:\n     *\n     * <pre>\n     * &lt;service android:name=\".MyContentCaptureService\"\n     *     android:permission=\"android.permission.BIND_CONTENT_CAPTURE_SERVICE\"&gt;\n     *   &lt;intent-filter&gt;\n     *     &lt;action android:name=\"android.service.contentcapture.ContentCaptureService\" /&gt;\n     *   &lt;/intent-filter&gt;\n     *\n     *   &lt;meta-data\n     *       android:name=\"android.content_capture\"\n     *       android:resource=\"@xml/my_content_capture_service\"/&gt;\n     * &lt;/service&gt;\n     * </pre>\n     *\n     * <p>And then on {@code res/xml/my_content_capture_service.xml}:\n     *\n     * <pre>\n     *   &lt;content-capture-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     *       android:settingsActivity=\"my.package.MySettingsActivity\"&gt;\n     *   &lt;/content-capture-service&gt;\n     * </pre>\n     ",
    "links" : [ "android.R.styleable#ContentCaptureService" ]
  }, {
    "name" : "mDataShareAdapterResourceManager",
    "type" : "LocalDataShareAdapterResourceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureServiceCallback",
    "type" : "IContentCaptureServiceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentProtectionAllowlistCallback",
    "type" : "IContentProtectionAllowlistCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerMismatchTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastCallerMismatchLog",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureServerInterface",
    "type" : "IContentCaptureService",
    "comment" : " Binder that receives calls from the system server in the content capture flow. ",
    "links" : [ ]
  }, {
    "name" : "mContentProtectionServerInterface",
    "type" : "IContentProtectionService",
    "comment" : " Binder that receives calls from the system server in the content protection flow. ",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureClientInterface",
    "type" : "IContentCaptureDirectManager",
    "comment" : " Binder that receives calls from the app in the content capture flow. ",
    "links" : [ ]
  }, {
    "name" : "mSessionUids",
    "type" : "SparseIntArray",
    "comment" : "\n     * UIDs associated with each session.\n     *\n     * <p>This map is populated when an session is started, which is called by the system server\n     * and can be trusted. Then subsequent calls made by the app are verified against this map.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setContentCaptureWhitelist(@Nullable Set<String> packages, @Nullable Set<ComponentName> activities)",
    "returnType" : "void",
    "comment" : "\n     * Explicitly limits content capture to the given packages and activities.\n     *\n     * <p>To reset the allowlist, call it passing {@code null} to both arguments.\n     *\n     * <p>Useful when the service wants to restrict content capture to a category of apps, like\n     * chat apps. For example, if the service wants to support view captures on all activities of\n     * app {@code ChatApp1} and just activities {@code act1} and {@code act2} of {@code ChatApp2},\n     * it would call: {@code setContentCaptureWhitelist(Sets.newArraySet(\"ChatApp1\"),\n     * Sets.newArraySet(new ComponentName(\"ChatApp2\", \"act1\"),\n     * new ComponentName(\"ChatApp2\", \"act2\")));}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setContentCaptureConditions(@NonNull String packageName, @Nullable Set<ContentCaptureCondition> conditions)",
    "returnType" : "void",
    "comment" : "\n     * Explicitly sets the conditions for which content capture should be available by an app.\n     *\n     * <p>Typically used to restrict content capture to a few websites on browser apps. Example:\n     *\n     * <code>\n     *   ArraySet<ContentCaptureCondition> conditions = new ArraySet<>(1);\n     *   conditions.add(new ContentCaptureCondition(new LocusId(\"^https://.*\\\\.example\\\\.com$\"),\n     *       ContentCaptureCondition.FLAG_IS_REGEX));\n     *   service.setContentCaptureConditions(\"com.example.browser_app\", conditions);\n     *\n     * </code>\n     *\n     * <p>NOTE: </p> this method doesn't automatically disable content capture for the given\n     * conditions; it's up to the {@code packageName} implementation to call\n     * {@link ContentCaptureManager#getContentCaptureConditions()} and disable it accordingly.\n     *\n     * @param packageName name of the packages where the restrictions are set.\n     * @param conditions list of conditions, or {@code null} to reset the conditions for the\n     * package.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager#getContentCaptureConditions()" ]
  }, {
    "name" : "public void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system connects to service.\n     *\n     * <p>You should generally do initialization here rather than in {@link #onCreate}.\n     ",
    "links" : [ "#onCreate" ]
  }, {
    "name" : "public void onCreateContentCaptureSession(@NonNull ContentCaptureContext context, @NonNull ContentCaptureSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new content capture session.\n     *\n     * @param context content capture context\n     * @param sessionId the session's Id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onContentCaptureEvent(@NonNull ContentCaptureSessionId sessionId, @NonNull ContentCaptureEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service of {@link ContentCaptureEvent events} associated with a content capture\n     * session.\n     *\n     * @param sessionId the session's Id\n     * @param event the event\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureEvent" ]
  }, {
    "name" : "public void onDataRemovalRequest(@NonNull DataRemovalRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that the app requested to remove content capture data.\n     *\n     * @param request the content capture data requested to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDataShareRequest(@NonNull DataShareRequest request, @NonNull DataShareCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that data has been shared via a readable file.\n     *\n     * @param request request object containing information about data being shared\n     * @param callback callback to be fired with response on whether the request is \"needed\" and can\n     *                 be handled by the Content Capture service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActivitySnapshot(@NonNull ContentCaptureSessionId sessionId, @NonNull SnapshotData snapshotData)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service of {@link SnapshotData snapshot data} associated with an activity.\n     *\n     * @param sessionId the session's Id. This may also be\n     *                  {@link ContentCaptureSession#NO_SESSION_ID} if no content capture session\n     *                  exists for the activity being snapshotted\n     * @param snapshotData the data\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureSession#NO_SESSION_ID", "android.service.contentcapture.SnapshotData" ]
  }, {
    "name" : "public void onActivityEvent(@NonNull ActivityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service of an activity-level event that is not associated with a session.\n     *\n     * <p>This method can be used to track some high-level events for all activities, even those\n     * that are not allowlisted for Content Capture.\n     *\n     * @param event high-level activity event\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroyContentCaptureSession(@NonNull ContentCaptureSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Destroys the content capture session.\n     *\n     * @param sessionId the id of the session to destroy\n     * ",
    "links" : [ ]
  }, {
    "name" : "public final void disableSelf()",
    "returnType" : "void",
    "comment" : "\n     * Disables the Content Capture service for the given user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system disconnects from the service.\n     *\n     * <p> At this point this service may no longer be an active {@link ContentCaptureService}.\n     * It should not make calls on {@link ContentCaptureManager} that requires the caller to be\n     * the current service.\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager", "android.service.contentcapture.ContentCaptureService" ]
  }, {
    "name" : "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnConnected(@NonNull IBinder callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnDisconnected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnCreateSession(@NonNull ContentCaptureContext context, int sessionId, int uid, IResultReceiver clientReceiver, int initialState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleSendEvents(int uid, @NonNull ParceledListSlice<ContentCaptureEvent> parceledEvents, int reason, @Nullable ContentCaptureOptions options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnLoginDetected(int uid, @NonNull ParceledListSlice<ContentCaptureEvent> parceledEvents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnUpdateAllowlistRequest(int uid, @NonNull IBinder callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnActivitySnapshot(int sessionId, @NonNull SnapshotData snapshotData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleFinishSession(int sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnDataRemovalRequest(@NonNull DataRemovalRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnDataShared(@NonNull DataShareRequest request, IDataShareCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnActivityEvent(@NonNull ActivityEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleIsRightCallerFor(@NonNull ContentCaptureEvent event, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given {@code uid} owns the session associated with the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setClientState(@NonNull IResultReceiver clientReceiver, int sessionState, @Nullable IBinder binder)",
    "returnType" : "void",
    "comment" : "\n     * Sends the state of the {@link ContentCaptureManager} in the client app.\n     *\n     * @param clientReceiver receiver in the client app.\n     * @param sessionState state of the session\n     * @param binder handle to the {@code IContentCaptureDirectManager} object that resides in the\n     * service.\n     * @hide\n     ",
    "links" : [ "android.view.contentcapture.ContentCaptureManager" ]
  }, {
    "name" : "private void writeFlushMetrics(int sessionId, @Nullable ComponentName app, @NonNull FlushMetrics flushMetrics, @Nullable ContentCaptureOptions options, int flushReason)",
    "returnType" : "void",
    "comment" : "\n     * Logs the metrics for content capture events flushing.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(Intent intent)", "public final void setContentCaptureWhitelist(@Nullable Set<String> packages, @Nullable Set<ComponentName> activities)", "public final void setContentCaptureConditions(@NonNull String packageName, @Nullable Set<ContentCaptureCondition> conditions)", "public void onConnected()", "public void onCreateContentCaptureSession(@NonNull ContentCaptureContext context, @NonNull ContentCaptureSessionId sessionId)", "public void onContentCaptureEvent(@NonNull ContentCaptureSessionId sessionId, @NonNull ContentCaptureEvent event)", "public void onDataRemovalRequest(@NonNull DataRemovalRequest request)", "public void onDataShareRequest(@NonNull DataShareRequest request, @NonNull DataShareCallback callback)", "public void onActivitySnapshot(@NonNull ContentCaptureSessionId sessionId, @NonNull SnapshotData snapshotData)", "public void onActivityEvent(@NonNull ActivityEvent event)", "public void onDestroyContentCaptureSession(@NonNull ContentCaptureSessionId sessionId)", "public final void disableSelf()", "public void onDisconnected()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private void handleOnConnected(@NonNull IBinder callback)", "private void handleOnDisconnected()", "private void handleOnCreateSession(@NonNull ContentCaptureContext context, int sessionId, int uid, IResultReceiver clientReceiver, int initialState)", "private void handleSendEvents(int uid, @NonNull ParceledListSlice<ContentCaptureEvent> parceledEvents, int reason, @Nullable ContentCaptureOptions options)", "private void handleOnLoginDetected(int uid, @NonNull ParceledListSlice<ContentCaptureEvent> parceledEvents)", "private void handleOnUpdateAllowlistRequest(int uid, @NonNull IBinder callback)", "private void handleOnActivitySnapshot(int sessionId, @NonNull SnapshotData snapshotData)", "private void handleFinishSession(int sessionId)", "private void handleOnDataRemovalRequest(@NonNull DataRemovalRequest request)", "private void handleOnDataShared(@NonNull DataShareRequest request, IDataShareCallback callback)", "private void handleOnActivityEvent(@NonNull ActivityEvent event)", "private boolean handleIsRightCallerFor(@NonNull ContentCaptureEvent event, int uid)", "public static void setClientState(@NonNull IResultReceiver clientReceiver, int sessionState, @Nullable IBinder binder)", "private void writeFlushMetrics(int sessionId, @Nullable ComponentName app, @NonNull FlushMetrics flushMetrics, @Nullable ContentCaptureOptions options, int flushReason)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "PROTECTION_SERVICE_INTERFACE", "SERVICE_META_DATA", "mDataShareAdapterResourceManager", "mHandler", "mContentCaptureServiceCallback", "mContentProtectionAllowlistCallback", "mCallerMismatchTimeout", "mLastCallerMismatchLog", "mContentCaptureServerInterface", "mContentProtectionServerInterface", "mContentCaptureClientInterface", "mSessionUids" ]
}