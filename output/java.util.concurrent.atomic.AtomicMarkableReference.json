{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicMarkableReference.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicMarkableReference",
  "comment" : "\n * An {@code AtomicMarkableReference} maintains an object reference\n * along with a mark bit, that can be updated atomically.\n *\n * <p>Implementation note: This implementation maintains markable\n * references by creating internal objects representing \"boxed\"\n * [reference, boolean] pairs.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <V> The type of object referred to by this reference\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "pair",
    "type" : "Pair<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PAIR",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public V getReference()",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value of the reference.\n     *\n     * @return the current value of the reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMarked()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current value of the mark.\n     *\n     * @return the current value of the mark\n     ",
    "links" : [ ]
  }, {
    "name" : "public V get(boolean[] markHolder)",
    "returnType" : "V",
    "comment" : "\n     * Returns the current values of both the reference and the mark.\n     * Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.\n     *\n     * @param markHolder an array of size of at least one. On return,\n     * {@code markHolder[0]} will hold the value of the mark.\n     * @return the current value of the reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value of both the reference and mark to the\n     * given update values if the current reference is {@code ==} to\n     * the expected reference and the current mark is equal to the\n     * expected mark. This operation may fail spuriously and does not\n     * provide ordering guarantees, so is only rarely an\n     * appropriate alternative to {@code compareAndSet}.\n     *\n     * @param expectedReference the expected value of the reference\n     * @param newReference the new value for the reference\n     * @param expectedMark the expected value of the mark\n     * @param newMark the new value for the mark\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value of both the reference and mark\n     * to the given update values if the\n     * current reference is {@code ==} to the expected reference\n     * and the current mark is equal to the expected mark.\n     *\n     * @param expectedReference the expected value of the reference\n     * @param newReference the new value for the reference\n     * @param expectedMark the expected value of the mark\n     * @param newMark the new value for the mark\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(V newReference, boolean newMark)",
    "returnType" : "void",
    "comment" : "\n     * Unconditionally sets the value of both the reference and mark.\n     *\n     * @param newReference the new value for the reference\n     * @param newMark the new value for the mark\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean attemptMark(V expectedReference, boolean newMark)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value of the mark to the given update value\n     * if the current reference is {@code ==} to the expected\n     * reference.  Any given invocation of this operation may fail\n     * (return {@code false}) spuriously, but repeated invocation\n     * when the current value holds the expected value and no other\n     * thread is also attempting to set the value will eventually\n     * succeed.\n     *\n     * @param expectedReference the expected value of the reference\n     * @param newMark the new value for the mark\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean casPair(Pair<V> cmp, Pair<V> val)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public V getReference()", "public boolean isMarked()", "public V get(boolean[] markHolder)", "public boolean weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)", "public boolean compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)", "public void set(V newReference, boolean newMark)", "public boolean attemptMark(V expectedReference, boolean newMark)", "private boolean casPair(Pair<V> cmp, Pair<V> val)" ],
  "variableNames" : [ "pair", "PAIR" ]
}