{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/GpsClock.java",
  "packageName" : "android.location",
  "className" : "GpsClock",
  "comment" : "\n * A class containing a GPS clock timestamp.\n * It represents a measurement of the GPS receiver's clock.\n *\n * @deprecated use {@link GnssClock} instead.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TYPE_UNKNOWN",
    "type" : "byte",
    "comment" : "\n     * The type of the time stored is not available or it is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LOCAL_HW_TIME",
    "type" : "byte",
    "comment" : "\n     * The source of the time value reported by this class is the 'Local Hardware Clock'.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_GPS_TIME",
    "type" : "byte",
    "comment" : "\n     * The source of the time value reported by this class is the 'GPS time' derived from\n     * satellites (epoch = Jan 6, 1980).\n     ",
    "links" : [ ]
  }, {
    "name" : "HAS_NO_FLAGS",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_LEAP_SECOND",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_TIME_UNCERTAINTY",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_FULL_BIAS",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_BIAS",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_BIAS_UNCERTAINTY",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_DRIFT",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_DRIFT_UNCERTAINTY",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeapSecond",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeInNs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeUncertaintyInNs",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullBiasInNs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBiasInNs",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBiasUncertaintyInNs",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDriftInNsPerSec",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDriftUncertaintyInNsPerSec",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GpsClock>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(GpsClock clock)",
    "returnType" : "void",
    "comment" : "\n     * Sets all contents to the values stored in the provided object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets all the contents to its original state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getType()",
    "returnType" : "byte",
    "comment" : "\n     * Gets the type of time reported by {@link #getTimeInNs()}.\n     ",
    "links" : [ "#getTimeInNs" ]
  }, {
    "name" : "public void setType(byte value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the type of time reported.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getTypeString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'type'.\n     * For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLeapSecond()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getLeapSecond()} is available, false otherwise.\n     ",
    "links" : [ "#getLeapSecond" ]
  }, {
    "name" : "public short getLeapSecond()",
    "returnType" : "short",
    "comment" : "\n     * Gets the leap second associated with the clock's time.\n     * The sign of the value is defined by the following equation:\n     *      utc_time_ns = time_ns + (full_bias_ns + bias_ns) - leap_second * 1,000,000,000\n     *\n     * The value is only available if {@link #hasLeapSecond()} is true.\n     ",
    "links" : [ "#hasLeapSecond" ]
  }, {
    "name" : "public void setLeapSecond(short leapSecond)",
    "returnType" : "void",
    "comment" : "\n     * Sets the leap second associated with the clock's time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetLeapSecond()",
    "returnType" : "void",
    "comment" : "\n     * Resets the leap second associated with the clock's time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimeInNs()",
    "returnType" : "long",
    "comment" : "\n     * Gets the GPS receiver internal clock value in nanoseconds.\n     * This can be either the 'local hardware clock' value ({@link #TYPE_LOCAL_HW_TIME}), or the\n     * current GPS time derived inside GPS receiver ({@link #TYPE_GPS_TIME}).\n     * {@link #getType()} defines the time reported.\n     *\n     * For 'local hardware clock' this value is expected to be monotonically increasing during the\n     * reporting session. The real GPS time can be derived by compensating\n     * {@link #getFullBiasInNs()} (when it is available) from this value.\n     *\n     * For 'GPS time' this value is expected to be the best estimation of current GPS time that GPS\n     * receiver can achieve. {@link #getTimeUncertaintyInNs()} should be available when GPS time is\n     * specified.\n     *\n     * Sub-nanosecond accuracy can be provided by means of {@link #getBiasInNs()}.\n     * The reported time includes {@link #getTimeUncertaintyInNs()}.\n     ",
    "links" : [ "#TYPE_LOCAL_HW_TIME", "#TYPE_GPS_TIME", "#getType", "#getFullBiasInNs", "#getTimeUncertaintyInNs", "#getBiasInNs", "#getTimeUncertaintyInNs" ]
  }, {
    "name" : "public void setTimeInNs(long timeInNs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GPS receiver internal clock in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTimeUncertaintyInNs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getTimeUncertaintyInNs()} is available, false otherwise.\n     ",
    "links" : [ "#getTimeUncertaintyInNs" ]
  }, {
    "name" : "public double getTimeUncertaintyInNs()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's time Uncertainty (1-Sigma) in nanoseconds.\n     * The uncertainty is represented as an absolute (single sided) value.\n     *\n     * The value is only available if {@link #hasTimeUncertaintyInNs()} is true.\n     ",
    "links" : [ "#hasTimeUncertaintyInNs" ]
  }, {
    "name" : "public void setTimeUncertaintyInNs(double timeUncertaintyInNs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Time Uncertainty (1-Sigma) in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetTimeUncertaintyInNs()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Time Uncertainty (1-Sigma) in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFullBiasInNs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link @getFullBiasInNs()} is available, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFullBiasInNs()",
    "returnType" : "long",
    "comment" : "\n     * Gets the difference between hardware clock ({@link #getTimeInNs()}) inside GPS receiver and\n     * the true GPS time since 0000Z, January 6, 1980, in nanoseconds.\n     *\n     * This value is available if {@link #TYPE_LOCAL_HW_TIME} is set, and GPS receiver has solved\n     * the clock for GPS time.\n     * {@link #getBiasUncertaintyInNs()} should be used for quality check.\n     *\n     * The sign of the value is defined by the following equation:\n     *      true time (GPS time) = time_ns + (full_bias_ns + bias_ns)\n     *\n     * The reported full bias includes {@link #getBiasUncertaintyInNs()}.\n     * The value is onl available if {@link #hasFullBiasInNs()} is true.\n     ",
    "links" : [ "#getTimeInNs", "#TYPE_LOCAL_HW_TIME", "#getBiasUncertaintyInNs", "#getBiasUncertaintyInNs", "#hasFullBiasInNs" ]
  }, {
    "name" : "public void setFullBiasInNs(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the full bias in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetFullBiasInNs()",
    "returnType" : "void",
    "comment" : "\n     * Resets the full bias in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBiasInNs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getBiasInNs()} is available, false otherwise.\n     ",
    "links" : [ "#getBiasInNs" ]
  }, {
    "name" : "public double getBiasInNs()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's sub-nanosecond bias.\n     * The reported bias includes {@link #getBiasUncertaintyInNs()}.\n     *\n     * The value is only available if {@link #hasBiasInNs()} is true.\n     ",
    "links" : [ "#getBiasUncertaintyInNs", "#hasBiasInNs" ]
  }, {
    "name" : "public void setBiasInNs(double biasInNs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sub-nanosecond bias.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBiasInNs()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Bias in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBiasUncertaintyInNs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getBiasUncertaintyInNs()} is available, false otherwise.\n     ",
    "links" : [ "#getBiasUncertaintyInNs" ]
  }, {
    "name" : "public double getBiasUncertaintyInNs()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's Bias Uncertainty (1-Sigma) in nanoseconds.\n     *\n     * The value is only available if {@link #hasBiasUncertaintyInNs()} is true.\n     ",
    "links" : [ "#hasBiasUncertaintyInNs" ]
  }, {
    "name" : "public void setBiasUncertaintyInNs(double biasUncertaintyInNs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Bias Uncertainty (1-Sigma) in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBiasUncertaintyInNs()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Bias Uncertainty (1-Sigma) in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDriftInNsPerSec()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getDriftInNsPerSec()} is available, false otherwise.\n     ",
    "links" : [ "#getDriftInNsPerSec" ]
  }, {
    "name" : "public double getDriftInNsPerSec()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's Drift in nanoseconds per second.\n     * A positive value indicates that the frequency is higher than the nominal frequency.\n     * The reported drift includes {@link #getDriftUncertaintyInNsPerSec()}.\n     *\n     * The value is only available if {@link #hasDriftInNsPerSec()} is true.\n     ",
    "links" : [ "#getDriftUncertaintyInNsPerSec", "#hasDriftInNsPerSec" ]
  }, {
    "name" : "public void setDriftInNsPerSec(double driftInNsPerSec)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Drift in nanoseconds per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetDriftInNsPerSec()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Drift in nanoseconds per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDriftUncertaintyInNsPerSec()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #getDriftUncertaintyInNsPerSec()} is available, false otherwise.\n     ",
    "links" : [ "#getDriftUncertaintyInNsPerSec" ]
  }, {
    "name" : "public double getDriftUncertaintyInNsPerSec()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's Drift Uncertainty (1-Sigma) in nanoseconds per second.\n     *\n     * The value is only available if {@link #hasDriftUncertaintyInNsPerSec()} is true.\n     ",
    "links" : [ "#hasDriftUncertaintyInNsPerSec" ]
  }, {
    "name" : "public void setDriftUncertaintyInNsPerSec(double driftUncertaintyInNsPerSec)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Drift Uncertainty (1-Sigma) in nanoseconds per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetDriftUncertaintyInNsPerSec()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Drift Uncertainty (1-Sigma) in nanoseconds per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initialize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(short flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetFlag(short flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isFlagSet(short flag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_UNKNOWN", "TYPE_LOCAL_HW_TIME", "TYPE_GPS_TIME", "HAS_NO_FLAGS", "HAS_LEAP_SECOND", "HAS_TIME_UNCERTAINTY", "HAS_FULL_BIAS", "HAS_BIAS", "HAS_BIAS_UNCERTAINTY", "HAS_DRIFT", "HAS_DRIFT_UNCERTAINTY", "mFlags", "mLeapSecond", "mType", "mTimeInNs", "mTimeUncertaintyInNs", "mFullBiasInNs", "mBiasInNs", "mBiasUncertaintyInNs", "mDriftInNsPerSec", "mDriftUncertaintyInNsPerSec", "CREATOR" ],
  "methodNames" : [ "public void set(GpsClock clock)", "public void reset()", "public byte getType()", "public void setType(byte value)", "private String getTypeString()", "public boolean hasLeapSecond()", "public short getLeapSecond()", "public void setLeapSecond(short leapSecond)", "public void resetLeapSecond()", "public long getTimeInNs()", "public void setTimeInNs(long timeInNs)", "public boolean hasTimeUncertaintyInNs()", "public double getTimeUncertaintyInNs()", "public void setTimeUncertaintyInNs(double timeUncertaintyInNs)", "public void resetTimeUncertaintyInNs()", "public boolean hasFullBiasInNs()", "public long getFullBiasInNs()", "public void setFullBiasInNs(long value)", "public void resetFullBiasInNs()", "public boolean hasBiasInNs()", "public double getBiasInNs()", "public void setBiasInNs(double biasInNs)", "public void resetBiasInNs()", "public boolean hasBiasUncertaintyInNs()", "public double getBiasUncertaintyInNs()", "public void setBiasUncertaintyInNs(double biasUncertaintyInNs)", "public void resetBiasUncertaintyInNs()", "public boolean hasDriftInNsPerSec()", "public double getDriftInNsPerSec()", "public void setDriftInNsPerSec(double driftInNsPerSec)", "public void resetDriftInNsPerSec()", "public boolean hasDriftUncertaintyInNsPerSec()", "public double getDriftUncertaintyInNsPerSec()", "public void setDriftUncertaintyInNsPerSec(double driftUncertaintyInNsPerSec)", "public void resetDriftUncertaintyInNsPerSec()", "public void writeToParcel(Parcel parcel, int flags)", "public int describeContents()", "public String toString()", "private void initialize()", "private void setFlag(short flag)", "private void resetFlag(short flag)", "private boolean isFlagSet(short flag)" ]
}