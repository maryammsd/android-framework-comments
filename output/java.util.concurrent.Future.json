{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/Future.java",
  "packageName" : "java.util.concurrent",
  "className" : "Future",
  "comment" : "\n * A {@code Future} represents the result of an asynchronous\n * computation.  Methods are provided to check if the computation is\n * complete, to wait for its completion, and to retrieve the result of\n * the computation.  The result can only be retrieved using method\n * {@code get} when the computation has completed, blocking if\n * necessary until it is ready.  Cancellation is performed by the\n * {@code cancel} method.  Additional methods are provided to\n * determine if the task completed normally or was cancelled. Once a\n * computation has completed, the computation cannot be cancelled.\n * If you would like to use a {@code Future} for the sake\n * of cancellability but not provide a usable result, you can\n * declare types of the form {@code Future<?>} and\n * return {@code null} as a result of the underlying task.\n *\n * <p><b>Sample Usage</b> (Note that the following classes are all\n * made-up.)\n *\n * <pre> {@code\n * interface ArchiveSearcher { String search(String target); }\n * class App {\n *   ExecutorService executor = ...;\n *   ArchiveSearcher searcher = ...;\n *   void showSearch(String target) throws InterruptedException {\n *     Callable<String> task = () -> searcher.search(target);\n *     Future<String> future = executor.submit(task);\n *     displayOtherThings(); // do other things while searching\n *     try {\n *       displayText(future.get()); // use future\n *     } catch (ExecutionException ex) { cleanup(); return; }\n *   }\n * }}</pre>\n *\n * The {@link FutureTask} class is an implementation of {@code Future} that\n * implements {@code Runnable}, and so may be executed by an {@code Executor}.\n * For example, the above construction with {@code submit} could be replaced by:\n * <pre> {@code\n * FutureTask<String> future = new FutureTask<>(task);\n * executor.execute(future);}</pre>\n *\n * <p>Memory consistency effects: Actions taken by the asynchronous computation\n * <a href=\"package-summary.html#MemoryVisibility\"> <i>happen-before</i></a>\n * actions following the corresponding {@code Future.get()} in another thread.\n *\n * @see FutureTask\n * @see Executor\n * @since 1.5\n * @author Doug Lea\n * @param <V> The result type returned by this Future's {@code get} method\n ",
  "links" : [ "java.util.concurrent.FutureTask" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean cancel(boolean mayInterruptIfRunning)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to cancel execution of this task.  This method has no\n     * effect if the task is already completed or cancelled, or could\n     * not be cancelled for some other reason.  Otherwise, if this\n     * task has not started when {@code cancel} is called, this task\n     * should never run.  If the task has already started, then the\n     * {@code mayInterruptIfRunning} parameter determines whether the\n     * thread executing this task (when known by the implementation)\n     * is interrupted in an attempt to stop the task.\n     *\n     * <p>The return value from this method does not necessarily\n     * indicate whether the task is now cancelled; use {@link\n     * #isCancelled}.\n     *\n     * @param mayInterruptIfRunning {@code true} if the thread\n     * executing this task should be interrupted (if the thread is\n     * known to the implementation); otherwise, in-progress tasks are\n     * allowed to complete\n     * @return {@code false} if the task could not be cancelled,\n     * typically because it has already completed; {@code true}\n     * otherwise. If two or more threads cause a task to be cancelled,\n     * then at least one of them returns {@code true}. Implementations\n     * may provide stronger guarantees.\n     ",
    "links" : [ "#isCancelled" ]
  }, {
    "name" : " boolean isCancelled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this task was cancelled before it completed\n     * normally.\n     *\n     * @return {@code true} if this task was cancelled before it completed\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isDone()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this task completed.\n     *\n     * Completion may be due to normal termination, an exception, or\n     * cancellation -- in all of these cases, this method will return\n     * {@code true}.\n     *\n     * @return {@code true} if this task completed\n     ",
    "links" : [ ]
  }, {
    "name" : " V get() throws InterruptedException, ExecutionException",
    "returnType" : "V",
    "comment" : "\n     * Waits if necessary for the computation to complete, and then\n     * retrieves its result.\n     *\n     * @return the computed result\n     * @throws CancellationException if the computation was cancelled\n     * @throws ExecutionException if the computation threw an\n     * exception\n     * @throws InterruptedException if the current thread was interrupted\n     * while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",
    "returnType" : "V",
    "comment" : "\n     * Waits if necessary for at most the given time for the computation\n     * to complete, and then retrieves its result, if available.\n     *\n     * @param timeout the maximum time to wait\n     * @param unit the time unit of the timeout argument\n     * @return the computed result\n     * @throws CancellationException if the computation was cancelled\n     * @throws ExecutionException if the computation threw an\n     * exception\n     * @throws InterruptedException if the current thread was interrupted\n     * while waiting\n     * @throws TimeoutException if the wait timed out\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean cancel(boolean mayInterruptIfRunning)", " boolean isCancelled()", " boolean isDone()", " V get() throws InterruptedException, ExecutionException", " V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException" ],
  "variableNames" : [ ]
}