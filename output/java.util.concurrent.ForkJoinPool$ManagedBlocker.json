{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ForkJoinPool.java",
  "packageName" : "java.util.concurrent",
  "className" : "ManagedBlocker",
  "comment" : "\n     * Interface for extending managed parallelism for tasks running\n     * in {@link ForkJoinPool}s.\n     *\n     * <p>A {@code ManagedBlocker} provides two methods.  Method\n     * {@link #isReleasable} must return {@code true} if blocking is\n     * not necessary. Method {@link #block} blocks the current thread\n     * if necessary (perhaps internally invoking {@code isReleasable}\n     * before actually blocking). These actions are performed by any\n     * thread invoking {@link\n     * ForkJoinPool#managedBlock(ManagedBlocker)}.  The unusual\n     * methods in this API accommodate synchronizers that may, but\n     * don't usually, block for long periods. Similarly, they allow\n     * more efficient internal handling of cases in which additional\n     * workers may be, but usually are not, needed to ensure\n     * sufficient parallelism.  Toward this end, implementations of\n     * method {@code isReleasable} must be amenable to repeated\n     * invocation. Neither method is invoked after a prior invocation\n     * of {@code isReleasable} or {@code block} returns {@code true}.\n     *\n     * <p>For example, here is a ManagedBlocker based on a\n     * ReentrantLock:\n     * <pre> {@code\n     * class ManagedLocker implements ManagedBlocker {\n     *   final ReentrantLock lock;\n     *   boolean hasLock = false;\n     *   ManagedLocker(ReentrantLock lock) { this.lock = lock; }\n     *   public boolean block() {\n     *     if (!hasLock)\n     *       lock.lock();\n     *     return true;\n     *   }\n     *   public boolean isReleasable() {\n     *     return hasLock || (hasLock = lock.tryLock());\n     *   }\n     * }}</pre>\n     *\n     * <p>Here is a class that possibly blocks waiting for an\n     * item on a given queue:\n     * <pre> {@code\n     * class QueueTaker<E> implements ManagedBlocker {\n     *   final BlockingQueue<E> queue;\n     *   volatile E item = null;\n     *   QueueTaker(BlockingQueue<E> q) { this.queue = q; }\n     *   public boolean block() throws InterruptedException {\n     *     if (item == null)\n     *       item = queue.take();\n     *     return true;\n     *   }\n     *   public boolean isReleasable() {\n     *     return item != null || (item = queue.poll()) != null;\n     *   }\n     *   public E getItem() { // call after pool.managedBlock completes\n     *     return item;\n     *   }\n     * }}</pre>\n     ",
  "links" : [ "#isReleasable", "java.util.concurrent.ForkJoinPool#managedBlock(ManagedBlocker)", "java.util.concurrent.ForkJoinPool", "#block" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean block() throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n         * Possibly blocks the current thread, for example waiting for\n         * a lock or condition.\n         *\n         * @return {@code true} if no additional blocking is necessary\n         * (i.e., if isReleasable would return true)\n         * @throws InterruptedException if interrupted while waiting\n         * (the method is not required to do so, but is allowed to)\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean isReleasable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if blocking is unnecessary.\n         * @return {@code true} if blocking is unnecessary\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean block() throws InterruptedException", " boolean isReleasable()" ],
  "variableNames" : [ ]
}