{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/SurfaceControlViewHost.java",
  "packageName" : "android.view",
  "className" : "SurfacePackage",
  "comment" : "\n     * Package encapsulating a Surface hierarchy which contains interactive view\n     * elements. It's expected to get this object from\n     * {@link SurfaceControlViewHost#getSurfacePackage} afterwards it can be embedded within\n     * a SurfaceView by calling {@link SurfaceView#setChildSurfacePackage}.\n     *\n     * Note that each {@link SurfacePackage} must be released by calling\n     * {@link SurfacePackage#release}. However, if you use the recommended flow,\n     *  the framework will automatically handle the lifetime for you.\n     *\n     * 1. When sending the package to the remote process, return it from an AIDL method\n     * or manually use FLAG_WRITE_RETURN_VALUE in writeToParcel. This will automatically\n     * release the package in the local process.\n     * 2. In the remote process, consume the package using SurfaceView. This way the\n     * SurfaceView will take over the lifetime and call {@link SurfacePackage#release}\n     * for the user.\n     *\n     * One final note: The {@link SurfacePackage} lifetime is totally de-coupled\n     * from the lifetime of the underlying {@link SurfaceControlViewHost}. Regardless\n     * of the lifetime of the package the user should still call\n     * {@link SurfaceControlViewHost#release} when finished.\n     ",
  "variables" : [ {
    "name" : "mSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityEmbeddedConnection",
    "type" : "IAccessibilityEmbeddedConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SurfacePackage>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SurfaceControl getSurfaceControl()",
    "returnType" : "SurfaceControl",
    "comment" : "\n         * Use {@link SurfaceView#setChildSurfacePackage} or manually fix\n         * accessibility (see SurfaceView implementation).\n         * @hide\n         ",
    "links" : [ "android.view.SurfaceView#setChildSurfacePackage" ]
  }, {
    "name" : "public IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()",
    "returnType" : "IAccessibilityEmbeddedConnection",
    "comment" : "\n         * Gets an accessibility embedded connection interface for this SurfaceControlViewHost.\n         *\n         * @return {@link IAccessibilityEmbeddedConnection} interface.\n         * @hide\n         ",
    "links" : [ "android.view.accessibility.IAccessibilityEmbeddedConnection" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Release the {@link SurfaceControl} associated with this package.\n         * It's not necessary to call this if you pass the package to\n         * {@link SurfaceView#setChildSurfacePackage} as {@link SurfaceView} will\n         * take ownership in that case.\n         ",
    "links" : [ "android.view.SurfaceView", "android.view.SurfaceControl", "android.view.SurfaceView#setChildSurfacePackage" ]
  } ],
  "variableNames" : [ "mSurfaceControl", "mAccessibilityEmbeddedConnection", "CREATOR" ],
  "methodNames" : [ "public SurfaceControl getSurfaceControl()", "public IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public void release()" ]
}