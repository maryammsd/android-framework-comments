{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/SecurityLog.java",
  "packageName" : "android.app.admin",
  "className" : "SecurityLog",
  "comment" : "\n * Definitions for working with security logs.\n *\n * <p>Device owner apps can control the logging with\n * {@link DevicePolicyManager#setSecurityLoggingEnabled}. When security logs are enabled, device\n * owner apps receive periodic callbacks from {@link DeviceAdminReceiver#onSecurityLogsAvailable},\n * at which time new batch of logs can be collected via\n * {@link DevicePolicyManager#retrieveSecurityLogs}. {@link SecurityEvent} describes the type and\n * format of security logs being collected.\n ",
  "links" : [ "android.app.admin.DeviceAdminReceiver#onSecurityLogsAvailable", "SecurityEvent", "android.app.admin.DevicePolicyManager#setSecurityLoggingEnabled", "android.app.admin.DevicePolicyManager#retrieveSecurityLogs" ],
  "variables" : [ {
    "name" : "PROPERTY_LOGGING_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_ADB_SHELL_INTERACTIVE",
    "type" : "int",
    "comment" : "\n     * Indicates that an ADB interactive shell was opened via \"adb shell\".\n     * There is no extra payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_ADB_SHELL_CMD",
    "type" : "int",
    "comment" : "\n     * Indicates that a shell command was issued over ADB via {@code adb shell <command>}\n     * The log entry contains a {@code String} payload containing the shell command, accessible\n     * via {@link SecurityEvent#getData()}. If security logging is enabled on organization-owned\n     * managed profile devices, the shell command will be redacted to an empty string.\n     ",
    "links" : [ "#getData()" ]
  }, {
    "name" : "TAG_SYNC_RECV_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates that a file was pulled from the device via the adb daemon, for example via\n     * {@code adb pull}. The log entry contains a {@code String} payload containing the path of the\n     * pulled file on the device, accessible via {@link SecurityEvent#getData()}.\n     ",
    "links" : [ "#getData()" ]
  }, {
    "name" : "TAG_SYNC_SEND_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates that a file was pushed to the device via the adb daemon, for example via\n     * {@code adb push}. The log entry contains a {@code String} payload containing the destination\n     * path of the pushed file, accessible via {@link SecurityEvent#getData()}.\n     ",
    "links" : [ "#getData()" ]
  }, {
    "name" : "TAG_APP_PROCESS_START",
    "type" : "int",
    "comment" : "\n     * Indicates that an app process was started. The log entry contains the following\n     * information about the process encapsulated in an {@link Object} array, accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] process name ({@code String})\n     * <li> [1] exact start time in milliseconds according to {@code System.currentTimeMillis()}\n     *      ({@code Long})\n     * <li> [2] app uid ({@code Integer})\n     * <li> [3] app pid ({@code Integer})\n     * <li> [4] seinfo tag ({@code String})\n     * <li> [5] SHA-256 hash of the base APK in hexadecimal ({@code String})\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_KEYGUARD_DISMISSED",
    "type" : "int",
    "comment" : "\n     * Indicates that keyguard has been dismissed. This event is only logged if the device\n     * has a secure keyguard. It is logged regardless of how keyguard is dismissed, including\n     * via PIN/pattern/password, biometrics or via a trust agent.\n     * There is no extra payload in the log event.\n     * @see #TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT",
    "type" : "int",
    "comment" : "\n     * Indicates that there has been an authentication attempt to dismiss the keyguard. The log\n     * entry contains the following information about the attempt encapsulated in an {@link Object}\n     * array, accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] attempt result ({@code Integer}, 1 for successful, 0 for unsuccessful)\n     * <li> [1] strength of authentication method ({@code Integer}, 1 if strong authentication\n     *      method was used, 0 otherwise)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_KEYGUARD_SECURED",
    "type" : "int",
    "comment" : "\n     * Indicates that the device has been locked, either by the user or by a timeout. There is no\n     * extra payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_OS_STARTUP",
    "type" : "int",
    "comment" : "\n     * Indicates that the Android OS has started. The log entry contains the following information\n     * about the startup time software integrity check encapsulated in an {@link Object} array,\n     * accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] Verified Boot state ({@code String})\n     * <li> [1] dm-verity mode ({@code String}).\n     * <p>Verified Boot state can be one of the following:\n     * <li> {@code green} indicates that there is a full chain of trust extending from the\n     * bootloader to verified partitions including the bootloader, boot partition, and all verified\n     * partitions.\n     * <li> {@code yellow} indicates that the boot partition has been verified using the embedded\n     * certificate and the signature is valid.\n     * <li> {@code orange} indicates that the device may be freely modified. Device integrity is\n     * left to the user to verify out-of-band.\n     * <p>dm-verity mode can be one of the following:\n     * <li> {@code enforcing} indicates that the device will be restarted when corruption is\n     * detected.\n     * <li> {@code eio} indicates that an I/O error will be returned for an attempt to read\n     * corrupted data blocks.\n     * <li> {@code disabled} indicates that integrity check is disabled.\n     * For details see Verified Boot documentation.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_OS_SHUTDOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the Android OS has shutdown. There is no extra payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_LOGGING_STARTED",
    "type" : "int",
    "comment" : "\n     * Indicates start-up of audit logging. There is no extra payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_LOGGING_STOPPED",
    "type" : "int",
    "comment" : "\n     * Indicates shutdown of audit logging. There is no extra payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_MEDIA_MOUNT",
    "type" : "int",
    "comment" : "\n     * Indicates that removable media has been mounted on the device. The log entry contains the\n     * following information about the event, encapsulated in an {@link Object} array and\n     * accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] mount point ({@code String})\n     * <li> [1] volume label ({@code String}). Redacted to empty string on organization-owned\n     *     managed profile devices.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_MEDIA_UNMOUNT",
    "type" : "int",
    "comment" : "\n     * Indicates that removable media was unmounted from the device. The log entry contains the\n     * following information about the event, encapsulated in an {@link Object} array and\n     * accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] mount point ({@code String})\n     * <li> [1] volume label ({@code String}). Redacted to empty string on organization-owned\n     *     managed profile devices.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_LOG_BUFFER_SIZE_CRITICAL",
    "type" : "int",
    "comment" : "\n     * Indicates that the audit log buffer has reached 90% of its capacity. There is no extra\n     * payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_PASSWORD_EXPIRATION_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a password expiration timeout. The log entry contains the\n     * following information about the event, encapsulated in an {@link Object} array and accessible\n     * via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] new password expiration timeout in milliseconds ({@code Long}).\n     * @see DevicePolicyManager#setPasswordExpirationTimeout(ComponentName, long)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PASSWORD_COMPLEXITY_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a requirement for password complexity. The log entry contains\n     * the following information about the event, encapsulated in an {@link Object} array and\n     * accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] minimum password length ({@code Integer})\n     * <li> [4] password quality constraint ({@code Integer})\n     * <li> [5] minimum number of letters ({@code Integer})\n     * <li> [6] minimum number of non-letters ({@code Integer})\n     * <li> [7] minimum number of digits ({@code Integer})\n     * <li> [8] minimum number of uppercase letters ({@code Integer})\n     * <li> [9] minimum number of lowercase letters ({@code Integer})\n     * <li> [10] minimum number of symbols ({@code Integer})\n     *\n     * @see DevicePolicyManager#setPasswordMinimumLength(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordQuality(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordMinimumLetters(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordMinimumNonLetter(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordMinimumLowerCase(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordMinimumUpperCase(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordMinimumNumeric(ComponentName, int)\n     * @see DevicePolicyManager#setPasswordMinimumSymbols(ComponentName, int)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PASSWORD_HISTORY_LENGTH_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a password history length. The log entry contains the\n     * following information about the event encapsulated in an {@link Object} array, accessible\n     * via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] new password history length value ({@code Integer})\n     * @see DevicePolicyManager#setPasswordHistoryLength(ComponentName, int)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_MAX_SCREEN_LOCK_TIMEOUT_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a maximum screen lock timeout. The log entry contains the\n     * following information about the event encapsulated in an {@link Object} array, accessible\n     * via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] new screen lock timeout in milliseconds ({@code Long})\n     * @see DevicePolicyManager#setMaximumTimeToLock(ComponentName, long)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_MAX_PASSWORD_ATTEMPTS_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a maximum number of failed password attempts before wiping\n     * data. The log entry contains the following information about the event encapsulated in an\n     * {@link Object} array, accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] new maximum number of failed password attempts ({@code Integer})\n     * @see DevicePolicyManager#setMaximumFailedPasswordsForWipe(ComponentName, int)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_KEYGUARD_DISABLED_FEATURES_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set disabled keyguard features. The log entry contains the\n     * following information about the event encapsulated in an {@link Object} array, accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] disabled keyguard feature mask ({@code Integer}).\n     * @see DevicePolicyManager#setKeyguardDisabledFeatures(ComponentName, int)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_REMOTE_LOCK",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin remotely locked the device or profile. The log entry contains the\n     * following information about the event encapsulated in an {@link Object} array, accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String}),\n     * <li> [1] admin user ID ({@code Integer}).\n     * <li> [2] target user ID ({@code Integer})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_WIPE_FAILURE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure to wipe device or user data. There is no extra payload in the log event.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_KEY_GENERATED",
    "type" : "int",
    "comment" : "\n     * Indicates that a cryptographic key was generated. The log entry contains the following\n     * information about the event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] result ({@code Integer}, 0 if operation failed, 1 if succeeded)\n     * <li> [1] alias of the key ({@code String})\n     * <li> [2] requesting process uid ({@code Integer}).\n     *\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_KEY_IMPORT",
    "type" : "int",
    "comment" : "\n     * Indicates that a cryptographic key was imported. The log entry contains the following\n     * information about the event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] result ({@code Integer}, 0 if operation failed, 1 if succeeded)\n     * <li> [1] alias of the key ({@code String})\n     * <li> [2] requesting process uid ({@code Integer}).\n     *\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_KEY_DESTRUCTION",
    "type" : "int",
    "comment" : "\n     * Indicates that a cryptographic key was destroyed. The log entry contains the following\n     * information about the event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] result ({@code Integer}, 0 if operation failed, 1 if succeeded)\n     * <li> [1] alias of the key ({@code String})\n     * <li> [2] requesting process uid ({@code Integer}).\n     *\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_CERT_AUTHORITY_INSTALLED",
    "type" : "int",
    "comment" : "\n     * Indicates that a new root certificate has been installed into system's trusted credential\n     * storage. The log entry contains the following information about the event, encapsulated in an\n     * {@link Object} array and accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] result ({@code Integer}, 0 if operation failed, 1 if succeeded)\n     * <li> [1] subject of the certificate ({@code String}).\n     * <li> [2] which user the certificate is installed for ({@code Integer}), only available from\n     *   version {@link android.os.Build.VERSION_CODES#R}.\n     *\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "Object", "#getData()" ]
  }, {
    "name" : "TAG_CERT_AUTHORITY_REMOVED",
    "type" : "int",
    "comment" : "\n     * Indicates that a new root certificate has been removed from system's trusted credential\n     * storage. The log entry contains the following information about the event, encapsulated in an\n     * {@link Object} array and accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] result ({@code Integer}, 0 if operation failed, 1 if succeeded)\n     * <li> [1] subject of the certificate ({@code String}).\n     * <li> [2] which user the certificate is removed from ({@code Integer}), only available from\n     *   version {@link android.os.Build.VERSION_CODES#R}.\n     *\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "Object", "#getData()" ]
  }, {
    "name" : "TAG_USER_RESTRICTION_ADDED",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a user restriction. The log entry contains the following\n     * information about the event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] user restriction ({@code String})\n     * @see DevicePolicyManager#addUserRestriction(ComponentName, String)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_USER_RESTRICTION_REMOVED",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has removed a user restriction. The log entry contains the following\n     * information about the event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] user restriction ({@code String})\n     * @see DevicePolicyManager#clearUserRestriction(ComponentName, String)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_CRYPTO_SELF_TEST_COMPLETED",
    "type" : "int",
    "comment" : "\n     * Indicates that cryptographic functionality self test has completed. The log entry contains an\n     * {@code Integer} payload, indicating the result of the test (0 if the test failed, 1 if\n     * succeeded) and accessible via {@link SecurityEvent#getData()}.\n     ",
    "links" : [ "#getData()" ]
  }, {
    "name" : "TAG_KEY_INTEGRITY_VIOLATION",
    "type" : "int",
    "comment" : "\n     * Indicates a failed cryptographic key integrity check. The log entry contains the following\n     * information about the event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] alias of the key ({@code String})\n     * <li> [1] owner application uid ({@code Integer}).\n     *\n     * If security logging is enabled on organization-owned managed profile devices, only events\n     * happening inside the managed profile will be visible.\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_CERT_VALIDATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure to validate X.509v3 certificate. The log entry contains a {@code String}\n     * payload indicating the failure reason, accessible via {@link SecurityEvent#getData()}.\n     ",
    "links" : [ "#getData()" ]
  }, {
    "name" : "TAG_CAMERA_POLICY_SET",
    "type" : "int",
    "comment" : "\n     * Indicates that the admin has set policy to disable camera.\n     * The log entry contains the following information about the event, encapsulated in an\n     * {@link Object} array and accessible via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] whether the camera is disabled or not ({@code Integer}, 1 if it's disabled,\n     *      0 if enabled)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PASSWORD_COMPLEXITY_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has set a password complexity requirement, using the platform's\n     * pre-defined complexity levels. The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] target user ID ({@code Integer})\n     * <li> [3] Password complexity ({@code Integer})\n     *\n     * @see DevicePolicyManager#setRequiredPasswordComplexity(int)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PASSWORD_CHANGED",
    "type" : "int",
    "comment" : "\n     * Indicates that a user has just changed their lockscreen password.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] complexity for the new password ({@code Integer})\n     * <li> [1] target user ID ({@code Integer})\n     *\n     * <p>Password complexity levels are defined as in\n     * {@link DevicePolicyManager#getPasswordComplexity()}\n     ",
    "links" : [ "Object", "android.app.admin.DevicePolicyManager#getPasswordComplexity()", "#getData()" ]
  }, {
    "name" : "TAG_WIFI_CONNECTION",
    "type" : "int",
    "comment" : "\n     * Indicates that an event occurred as the device attempted to connect to\n     * a managed WiFi network. The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] Last 2 octets of the network BSSID ({@code String}, in the form \"xx:xx:xx:xx:AA:BB\")\n     * <li> [1] Type of event that occurred ({@code String}). Event types are CONNECTED,\n     *      DISCONNECTED, ASSOCIATING, ASSOCIATED, EAP_METHOD_SELECTED, EAP_FAILURE,\n     *      SSID_TEMP_DISABLED, and OPEN_SSL_FAILURE.\n     * <li> [2] Optional human-readable failure reason, empty string if none ({@code String})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_WIFI_DISCONNECTION",
    "type" : "int",
    "comment" : "\n     * Indicates that the device disconnects from a managed WiFi network.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] Last 2 octets of the network BSSID ({@code String}, in the form \"xx:xx:xx:xx:AA:BB\")\n     * <li> [1] Optional human-readable disconnection reason, empty string if none ({@code String})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_BLUETOOTH_CONNECTION",
    "type" : "int",
    "comment" : "\n     * Indicates that the device attempts to connect to a Bluetooth device.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] The MAC address of the Bluetooth device ({@code String})\n     * <li> [1] Whether the connection is successful ({@code Integer}, 1 if successful, 0 otherwise)\n     * <li> [2] Optional human-readable failure reason, empty string if none ({@code String})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_BLUETOOTH_DISCONNECTION",
    "type" : "int",
    "comment" : "\n     * Indicates that the device disconnects from a connected Bluetooth device.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] The MAC address of the connected Bluetooth device ({@code String})\n     * <li> [1] Optional human-readable disconnection reason, empty string if none ({@code String})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PACKAGE_INSTALLED",
    "type" : "int",
    "comment" : "\n     * Indicates that a package is installed.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] Name of the package being installed ({@code String})\n     * <li> [1] Package version code ({@code Long})\n     * <li> [2] UserId of the user that installed this package ({@code Integer})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PACKAGE_UPDATED",
    "type" : "int",
    "comment" : "\n     * Indicates that a package is updated.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] Name of the package being updated ({@code String})\n     * <li> [1] Package version code ({@code Long})\n     * <li> [2] UserId of the user that updated this package ({@code Integer})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_PACKAGE_UNINSTALLED",
    "type" : "int",
    "comment" : "\n     * Indicates that a package is uninstalled.\n     * The log entry contains the following information about the\n     * event, encapsulated in an {@link Object} array and accessible via\n     * {@link SecurityEvent#getData()}:\n     * <li> [0] Name of the package being uninstalled ({@code String})\n     * <li> [1] Package version code ({@code Long})\n     * <li> [2] UserId of the user that uninstalled this package ({@code Integer})\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "TAG_BACKUP_SERVICE_TOGGLED",
    "type" : "int",
    "comment" : "\n     * Indicates that an admin has enabled or disabled backup service. The log entry contains the\n     * following information about the event encapsulated in an {@link Object} array, accessible\n     * via {@link SecurityEvent#getData()}:\n     * <li> [0] admin package name ({@code String})\n     * <li> [1] admin user ID ({@code Integer})\n     * <li> [2] backup service state ({@code Integer}, 1 for enabled, 0 for disabled)\n     * @see DevicePolicyManager#setBackupServiceEnabled(ComponentName, boolean)\n     ",
    "links" : [ "Object", "#getData()" ]
  }, {
    "name" : "LEVEL_INFO",
    "type" : "int",
    "comment" : "\n     * Event severity level indicating that the event corresponds to normal workflow.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEVEL_WARNING",
    "type" : "int",
    "comment" : "\n     * Event severity level indicating that the event may require admin attention.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEVEL_ERROR",
    "type" : "int",
    "comment" : "\n     * Event severity level indicating that the event requires urgent admin action.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native boolean isLoggingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if security logging is enabled. Log producers should only write new logs if this is\n     * true. Under the hood this is the logical AND of whether device owner exists and whether\n     * it enables logging by setting the system property {@link #PROPERTY_LOGGING_ENABLED}.\n     * @hide\n     ",
    "links" : [ "#PROPERTY_LOGGING_ENABLED" ]
  }, {
    "name" : "public static void setLoggingEnabledProperty(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getLoggingEnabledProperty()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void redactEvents(ArrayList<SecurityEvent> logList, int accessingUser)",
    "returnType" : "void",
    "comment" : "\n     * Redacts events in-place according to which user will consume the events.\n     *\n     * @param accessingUser which user will consume the redacted events, or UserHandle.USER_ALL if\n     *     redaction should be skipped.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void readEvents(Collection<SecurityEvent> output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Retrieve all security logs and return immediately.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void readEventsSince(long timestamp, Collection<SecurityEvent> output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Retrieve all security logs since the given timestamp in nanoseconds and return immediately.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void readPreviousEvents(Collection<SecurityEvent> output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Retrieve all security logs before the last reboot. May return corrupted data due to\n     * unreliable pstore.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void readEventsOnWrapping(long timestamp, Collection<SecurityEvent> output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Retrieve all security logs whose timestamp is equal to or greater than the given timestamp in\n     * nanoseconds. This method will block until either the last log earlier than the given\n     * timestamp is about to be pruned, or after a 2-hour timeout has passed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int writeEvent(@SecurityLogTag int tag, @NonNull Object... payloads)",
    "returnType" : "int",
    "comment" : " TODO(b/218658622): enforce WRITE_SECURITY_LOG in logd.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static native boolean isLoggingEnabled()", "public static void setLoggingEnabledProperty(boolean enabled)", "public static boolean getLoggingEnabledProperty()", "public static void redactEvents(ArrayList<SecurityEvent> logList, int accessingUser)", "public static native void readEvents(Collection<SecurityEvent> output) throws IOException", "public static native void readEventsSince(long timestamp, Collection<SecurityEvent> output) throws IOException", "public static native void readPreviousEvents(Collection<SecurityEvent> output) throws IOException", "public static native void readEventsOnWrapping(long timestamp, Collection<SecurityEvent> output) throws IOException", "public static native int writeEvent(@SecurityLogTag int tag, @NonNull Object... payloads)" ],
  "variableNames" : [ "PROPERTY_LOGGING_ENABLED", "TAG_ADB_SHELL_INTERACTIVE", "TAG_ADB_SHELL_CMD", "TAG_SYNC_RECV_FILE", "TAG_SYNC_SEND_FILE", "TAG_APP_PROCESS_START", "TAG_KEYGUARD_DISMISSED", "TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT", "TAG_KEYGUARD_SECURED", "TAG_OS_STARTUP", "TAG_OS_SHUTDOWN", "TAG_LOGGING_STARTED", "TAG_LOGGING_STOPPED", "TAG_MEDIA_MOUNT", "TAG_MEDIA_UNMOUNT", "TAG_LOG_BUFFER_SIZE_CRITICAL", "TAG_PASSWORD_EXPIRATION_SET", "TAG_PASSWORD_COMPLEXITY_SET", "TAG_PASSWORD_HISTORY_LENGTH_SET", "TAG_MAX_SCREEN_LOCK_TIMEOUT_SET", "TAG_MAX_PASSWORD_ATTEMPTS_SET", "TAG_KEYGUARD_DISABLED_FEATURES_SET", "TAG_REMOTE_LOCK", "TAG_WIPE_FAILURE", "TAG_KEY_GENERATED", "TAG_KEY_IMPORT", "TAG_KEY_DESTRUCTION", "TAG_CERT_AUTHORITY_INSTALLED", "TAG_CERT_AUTHORITY_REMOVED", "TAG_USER_RESTRICTION_ADDED", "TAG_USER_RESTRICTION_REMOVED", "TAG_CRYPTO_SELF_TEST_COMPLETED", "TAG_KEY_INTEGRITY_VIOLATION", "TAG_CERT_VALIDATION_FAILURE", "TAG_CAMERA_POLICY_SET", "TAG_PASSWORD_COMPLEXITY_REQUIRED", "TAG_PASSWORD_CHANGED", "TAG_WIFI_CONNECTION", "TAG_WIFI_DISCONNECTION", "TAG_BLUETOOTH_CONNECTION", "TAG_BLUETOOTH_DISCONNECTION", "TAG_PACKAGE_INSTALLED", "TAG_PACKAGE_UPDATED", "TAG_PACKAGE_UNINSTALLED", "TAG_BACKUP_SERVICE_TOGGLED", "LEVEL_INFO", "LEVEL_WARNING", "LEVEL_ERROR" ]
}