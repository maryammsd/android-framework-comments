{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkCapabilities.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : "\n     * Builder class for NetworkCapabilities.\n     *\n     * This class is mainly for {@link NetworkAgent} instances to use. Many fields in\n     * the built class require holding a signature permission to use - mostly\n     * {@link android.Manifest.permission.NETWORK_FACTORY}, but refer to the specific\n     * description of each setter. As this class lives entirely in app space it does not\n     * enforce these restrictions itself but the system server clears out the relevant\n     * fields when receiving a NetworkCapabilities object from a caller without the\n     * appropriate permission.\n     *\n     * Apps don't use this builder directly. Instead, they use {@link NetworkRequest} via\n     * its builder object.\n     *\n     * @hide\n     ",
  "links" : [ "android.net.NetworkAgent", "android.Manifest.permission.NETWORK_FACTORY", "android.net.NetworkRequest" ],
  "variables" : [ {
    "name" : "mCaps",
    "type" : "NetworkCapabilities",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Builder withoutDefaultCapabilities()",
    "returnType" : "Builder",
    "comment" : "\n         * Creates a new Builder without the default capabilities.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addTransportType(@Transport int transportType)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds the given transport type.\n         *\n         * Multiple transports may be added. Note that when searching for a network to satisfy a\n         * request, satisfying any of the transports listed in the request will satisfy the request.\n         * For example {@code TRANSPORT_WIFI} and {@code TRANSPORT_ETHERNET} added to a\n         * {@code NetworkCapabilities} would cause either a Wi-Fi network or an Ethernet network\n         * to be selected. This is logically different than\n         * {@code NetworkCapabilities.NET_CAPABILITY_*}. Also note that multiple networks with the\n         * same transport type may be active concurrently.\n         *\n         * @param transportType the transport type to be added or removed.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeTransportType(@Transport int transportType)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes the given transport type.\n         *\n         * @see #addTransportType\n         *\n         * @param transportType the transport type to be added or removed.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addCapability(@NetCapability final int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds the given capability.\n         *\n         * @param capability the capability\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeCapability(@NetCapability final int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes the given capability.\n         *\n         * @param capability the capability\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addForbiddenCapability(@NetCapability final int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds the given capability to the list of forbidden capabilities.\n         *\n         * A network with a capability will not match a {@link NetworkCapabilities} or\n         * {@link NetworkRequest} which has said capability set as forbidden. For example, if\n         * a request has NET_CAPABILITY_INTERNET in the list of forbidden capabilities, networks\n         * with NET_CAPABILITY_INTERNET will not match the request.\n         *\n         * If the capability was previously added to the list of required capabilities (for\n         * example, it was there by default or added using {@link #addCapability(int)} method), then\n         * it will be removed from the list of required capabilities as well.\n         *\n         * @param capability the capability\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "#addCapability(int)", "android.net.NetworkCapabilities", "android.net.NetworkRequest" ]
  }, {
    "name" : "public Builder removeForbiddenCapability(@NetCapability final int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes the given capability from the list of forbidden capabilities.\n         *\n         * @see #addForbiddenCapability(int)\n         * @param capability the capability\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addEnterpriseId(@EnterpriseId int enterpriseId)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds the given enterprise capability identifier.\n         * Note that when searching for a network to satisfy a request, all capabilities identifier\n         * requested must be satisfied. Enterprise capability identifier is applicable only\n         * for NET_CAPABILITY_ENTERPRISE capability\n         *\n         * @param enterpriseId enterprise capability identifier.\n         *\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeEnterpriseId(@EnterpriseId int enterpriseId)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes the given enterprise capability identifier. Enterprise capability identifier is\n         * applicable only for NET_CAPABILITY_ENTERPRISE capability\n         *\n         * @param enterpriseId the enterprise capability identifier\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOwnerUid(final int ownerUid)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the owner UID.\n         *\n         * The default value is {@link Process#INVALID_UID}. Pass this value to reset.\n         *\n         * Note: for security the system will clear out this field when received from a\n         * non-privileged source.\n         *\n         * @param ownerUid the owner UID\n         * @return this builder\n         ",
    "links" : [ "android.os.Process#INVALID_UID" ]
  }, {
    "name" : "public Builder setAdministratorUids(@NonNull final int[] administratorUids)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the list of UIDs that are administrators of this network.\n         *\n         * <p>UIDs included in administratorUids gain administrator privileges over this\n         * Network. Examples of UIDs that should be included in administratorUids are:\n         * <ul>\n         *     <li>Carrier apps with privileges for the relevant subscription\n         *     <li>Active VPN apps\n         *     <li>Other application groups with a particular Network-related role\n         * </ul>\n         *\n         * <p>In general, user-supplied networks (such as WiFi networks) do not have\n         * administrators.\n         *\n         * <p>An app is granted owner privileges over Networks that it supplies. The owner\n         * UID MUST always be included in administratorUids.\n         *\n         * The default value is the empty array. Pass an empty array to reset.\n         *\n         * Note: for security the system will clear out this field when received from a\n         * non-privileged source, such as an app using reflection to call this or\n         * mutate the member in the built object.\n         *\n         * @param administratorUids the UIDs to be set as administrators of this Network.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLinkUpstreamBandwidthKbps(final int upKbps)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the upstream bandwidth of the link.\n         *\n         * Sets the upstream bandwidth for this network in Kbps. This always only refers to\n         * the estimated first hop transport bandwidth.\n         * <p>\n         * Note that when used to request a network, this specifies the minimum acceptable.\n         * When received as the state of an existing network this specifies the typical\n         * first hop bandwidth expected. This is never measured, but rather is inferred\n         * from technology type and other link parameters. It could be used to differentiate\n         * between very slow 1xRTT cellular links and other faster networks or even between\n         * 802.11b vs 802.11AC wifi technologies. It should not be used to differentiate between\n         * fast backhauls and slow backhauls.\n         *\n         * @param upKbps the estimated first hop upstream (device to network) bandwidth.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLinkDownstreamBandwidthKbps(final int downKbps)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the downstream bandwidth for this network in Kbps. This always only refers to\n         * the estimated first hop transport bandwidth.\n         * <p>\n         * Note that when used to request a network, this specifies the minimum acceptable.\n         * When received as the state of an existing network this specifies the typical\n         * first hop bandwidth expected. This is never measured, but rather is inferred\n         * from technology type and other link parameters. It could be used to differentiate\n         * between very slow 1xRTT cellular links and other faster networks or even between\n         * 802.11b vs 802.11AC wifi technologies. It should not be used to differentiate between\n         * fast backhauls and slow backhauls.\n         *\n         * @param downKbps the estimated first hop downstream (network to device) bandwidth.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNetworkSpecifier(@Nullable final NetworkSpecifier specifier)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the optional bearer specific network specifier.\n         * This has no meaning if a single transport is also not specified, so calling\n         * this without a single transport set will generate an exception, as will\n         * subsequently adding or removing transports after this is set.\n         * </p>\n         *\n         * @param specifier a concrete, parcelable framework class that extends NetworkSpecifier,\n         *        or null to clear it.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransportInfo(@Nullable final TransportInfo info)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the optional transport specific information.\n         *\n         * @param info A concrete, parcelable framework class that extends {@link TransportInfo},\n         *             or null to clear it.\n         * @return this builder\n         ",
    "links" : [ "android.net.TransportInfo" ]
  }, {
    "name" : "public Builder setSignalStrength(final int signalStrength)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the signal strength. This is a signed integer, with higher values indicating a\n         * stronger signal. The exact units are bearer-dependent. For example, Wi-Fi uses the\n         * same RSSI units reported by wifi code.\n         * <p>\n         * Note that when used to register a network callback, this specifies the minimum\n         * acceptable signal strength. When received as the state of an existing network it\n         * specifies the current value. A value of code SIGNAL_STRENGTH_UNSPECIFIED} means\n         * no value when received and has no effect when requesting a callback.\n         *\n         * Note: for security the system will throw if it receives a NetworkRequest where\n         * the underlying NetworkCapabilities has this member set from a source that does\n         * not hold the {@link android.Manifest.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP}\n         * permission. Apps with this permission can use this indirectly through\n         * {@link android.net.NetworkRequest}.\n         *\n         * @param signalStrength the bearer-specific signal strength.\n         * @return this builder\n         ",
    "links" : [ "android.Manifest.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP", "android.net.NetworkRequest" ]
  }, {
    "name" : "public Builder setSsid(@Nullable final String ssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the SSID of this network.\n         *\n         * Note: for security the system will clear out this field when received from a\n         * non-privileged source, like an app using reflection to set this.\n         *\n         * @param ssid the SSID, or null to clear it.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequestorUid(final int uid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the uid of the app causing this network to exist.\n         *\n         * Note: for security the system will clear out this field when received from a\n         * non-privileged source.\n         *\n         * @param uid UID of the app.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequestorPackageName(@Nullable final String packageName)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the package name of the app causing this network to exist.\n         *\n         * Note: for security the system will clear out this field when received from a\n         * non-privileged source.\n         *\n         * @param packageName package name of the app, or null to clear it.\n         * @return this builder\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSubscriptionIds(@NonNull final Set<Integer> subIds)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the subscription ID set.\n         *\n         * <p>SubIds are populated in NetworkCapability instances from the system only for callers\n         * that hold the NETWORK_FACTORY permission. Similarly, the system will reject any\n         * NetworkRequests filed with a non-empty set of subIds unless the caller holds the\n         * NETWORK_FACTORY permission.\n         *\n         * @param subIds a set that represent the subscription IDs. Empty if clean up.\n         * @return this builder.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUids(@Nullable Set<Range<Integer>> uids)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the list of UIDs this network applies to.\n         *\n         * @param uids the list of UIDs this network applies to, or {@code null} if this network\n         *             applies to all UIDs.\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAllowedUids(@NonNull Set<Integer> uids)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a list of UIDs that can always access this network\n         * <p>\n         * Provide a list of UIDs that can access this network even if the network doesn't have the\n         * {@link #NET_CAPABILITY_NOT_RESTRICTED} capability and the UID does not hold the\n         * {@link android.Manifest.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS} permission.\n         * <p>\n         * This is disallowed in {@link NetworkRequest}, and can only be set by\n         * {@link NetworkAgent}s, who hold the\n         * {@link android.Manifest.permission.NETWORK_FACTORY} permission.\n         * Network agents also have restrictions on how they can set these ; they can only back\n         * a public Android API. As such, Ethernet agents can set this when backing the per-UID\n         * access API, and Telephony can set exactly one UID which has to match the manager app for\n         * the associated subscription. Failure to comply with these rules will see this member\n         * cleared.\n         * <p>\n         * These UIDs are only visible to network factories and the system server, since the system\n         * server makes sure to redact them before sending a {@link NetworkCapabilities} instance\n         * to a process that doesn't hold the {@link android.Manifest.permission.NETWORK_FACTORY}\n         * permission.\n         * <p>\n         * This list cannot be null, but it can be empty to mean that no UID without the\n         * {@link android.Manifest.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS} permission\n         * can access this network.\n         *\n         * @param uids the list of UIDs that can always access this network\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "#NET_CAPABILITY_NOT_RESTRICTED", "android.Manifest.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS", "android.net.NetworkAgent", "android.Manifest.permission.NETWORK_FACTORY", "android.net.NetworkCapabilities", "android.net.NetworkRequest" ]
  }, {
    "name" : "public Builder setUnderlyingNetworks(@Nullable List<Network> networks)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the underlying networks of this network.\n         *\n         * <p>This API is mainly for {@link NetworkAgent}s who hold\n         * {@link android.Manifest.permission.NETWORK_FACTORY} to set its underlying networks.\n         *\n         * <p>The underlying networks are only visible for the receiver who has one of\n         * {@link android.Manifest.permission.NETWORK_FACTORY},\n         * {@link android.Manifest.permission.NETWORK_SETTINGS} and\n         * {@link NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK}.\n         * If the receiver doesn't have required permissions, the field will be cleared before\n         * sending to the caller.</p>\n         *\n         * @param networks The underlying networks of this network.\n         ",
    "links" : [ "android.Manifest.permission.NETWORK_SETTINGS", "android.net.NetworkAgent", "android.Manifest.permission.NETWORK_FACTORY", "NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK" ]
  }, {
    "name" : "public NetworkCapabilities build()",
    "returnType" : "NetworkCapabilities",
    "comment" : "\n         * Builds the instance of the capabilities.\n         *\n         * @return the built instance of NetworkCapabilities.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Builder withoutDefaultCapabilities()", "public Builder addTransportType(@Transport int transportType)", "public Builder removeTransportType(@Transport int transportType)", "public Builder addCapability(@NetCapability final int capability)", "public Builder removeCapability(@NetCapability final int capability)", "public Builder addForbiddenCapability(@NetCapability final int capability)", "public Builder removeForbiddenCapability(@NetCapability final int capability)", "public Builder addEnterpriseId(@EnterpriseId int enterpriseId)", "public Builder removeEnterpriseId(@EnterpriseId int enterpriseId)", "public Builder setOwnerUid(final int ownerUid)", "public Builder setAdministratorUids(@NonNull final int[] administratorUids)", "public Builder setLinkUpstreamBandwidthKbps(final int upKbps)", "public Builder setLinkDownstreamBandwidthKbps(final int downKbps)", "public Builder setNetworkSpecifier(@Nullable final NetworkSpecifier specifier)", "public Builder setTransportInfo(@Nullable final TransportInfo info)", "public Builder setSignalStrength(final int signalStrength)", "public Builder setSsid(@Nullable final String ssid)", "public Builder setRequestorUid(final int uid)", "public Builder setRequestorPackageName(@Nullable final String packageName)", "public Builder setSubscriptionIds(@NonNull final Set<Integer> subIds)", "public Builder setUids(@Nullable Set<Range<Integer>> uids)", "public Builder setAllowedUids(@NonNull Set<Integer> uids)", "public Builder setUnderlyingNetworks(@Nullable List<Network> networks)", "public NetworkCapabilities build()" ],
  "variableNames" : [ "mCaps" ]
}