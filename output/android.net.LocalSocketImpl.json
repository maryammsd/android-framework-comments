{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/LocalSocketImpl.java",
  "packageName" : "android.net",
  "className" : "LocalSocketImpl",
  "comment" : "\n * Socket implementation used for android.net.LocalSocket and\n * android.net.LocalServerSocket. Supports only AF_LOCAL sockets.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fis",
    "type" : "SocketInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fos",
    "type" : "SocketOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readMonitor",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "writeMonitor",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : " null if closed or not yet created ",
    "links" : [ ]
  }, {
    "name" : "mFdCreatedInternally",
    "type" : "boolean",
    "comment" : " whether fd is created internally ",
    "links" : [ ]
  }, {
    "name" : "inboundFileDescriptors",
    "type" : "FileDescriptor[]",
    "comment" : " file descriptor array received during a previous read ",
    "links" : [ ]
  }, {
    "name" : "outboundFileDescriptors",
    "type" : "FileDescriptor[]",
    "comment" : " file descriptor array that should be written during next write ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int read_native(FileDescriptor fd) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int readba_native(byte[] b, int off, int len, FileDescriptor fd) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void writeba_native(byte[] b, int off, int len, FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void write_native(int b, FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void connectLocal(FileDescriptor fd, String name, int namespace) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void bindLocal(FileDescriptor fd, String name, int namespace) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Credentials getPeerCredentials_native(FileDescriptor fd) throws IOException",
    "returnType" : "Credentials",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void create(int sockType) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates a socket in the underlying OS.\n     *\n     * @param sockType either {@link LocalSocket#SOCKET_DGRAM}, {@link LocalSocket#SOCKET_STREAM}\n     * or {@link LocalSocket#SOCKET_SEQPACKET}\n     * @throws IOException\n     ",
    "links" : [ "android.net.LocalSocket#SOCKET_SEQPACKET", "android.net.LocalSocket#SOCKET_DGRAM", "android.net.LocalSocket#SOCKET_STREAM" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the socket.\n     *\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void connect(LocalSocketAddress address, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : " note timeout presently ignored ",
    "links" : [ ]
  }, {
    "name" : "public void bind(LocalSocketAddress endpoint) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds this socket to an endpoint name. May only be called on an instance\n     * that has not yet been bound.\n     *\n     * @param endpoint endpoint address\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void listen(int backlog) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void accept(LocalSocketImpl s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Accepts a new connection to the socket. Blocks until a new\n     * connection arrives.\n     *\n     * @param s a socket that will be used to represent the new connection.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Retrieves the input stream for this instance.\n     *\n     * @return input stream\n     * @throws IOException if socket has been closed or cannot be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Retrieves the output stream for this instance.\n     *\n     * @return output stream\n     * @throws IOException if socket has been closed or cannot be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes available for reading without blocking.\n     *\n     * @return >= 0 count bytes available\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void shutdownInput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the input side of the socket.\n     *\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void shutdownOutput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the output side of the socket.\n     *\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean supportsUrgentData()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void sendUrgentData(int data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getOption(int optID) throws IOException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOption(int optID, Object value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFileDescriptorsForSend(FileDescriptor[] fds)",
    "returnType" : "void",
    "comment" : "\n     * Enqueues a set of file descriptors to send to the peer. The queue\n     * is one deep. The file descriptors will be sent with the next write\n     * of normal data, and will be delivered in a single ancillary message.\n     * See \"man 7 unix\" SCM_RIGHTS on a desktop Linux machine.\n     *\n     * @param fds non-null; file descriptors to send.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor[] getAncillaryFileDescriptors() throws IOException",
    "returnType" : "FileDescriptor[]",
    "comment" : "\n     * Retrieves a set of file descriptors that a peer has sent through\n     * an ancillary message. This method retrieves the most recent set sent,\n     * and then returns null until a new set arrives.\n     * File descriptors may only be passed along with regular data, so this\n     * method can only return a non-null after a read operation.\n     *\n     * @return null or file descriptor array\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public Credentials getPeerCredentials() throws IOException",
    "returnType" : "Credentials",
    "comment" : "\n     * Retrieves the credentials of this socket's peer. Only valid on\n     * connected sockets.\n     *\n     * @return non-null; peer credentials\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocalSocketAddress getSockAddress() throws IOException",
    "returnType" : "LocalSocketAddress",
    "comment" : "\n     * Retrieves the socket name from the OS.\n     *\n     * @return non-null; socket name\n     * @throws IOException on failure\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int javaSoToOsOpt(int optID)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native int read_native(FileDescriptor fd) throws IOException", "private native int readba_native(byte[] b, int off, int len, FileDescriptor fd) throws IOException", "private native void writeba_native(byte[] b, int off, int len, FileDescriptor fd) throws IOException", "private native void write_native(int b, FileDescriptor fd) throws IOException", "private native void connectLocal(FileDescriptor fd, String name, int namespace) throws IOException", "private native void bindLocal(FileDescriptor fd, String name, int namespace) throws IOException", "private native Credentials getPeerCredentials_native(FileDescriptor fd) throws IOException", "public String toString()", "public void create(int sockType) throws IOException", "public void close() throws IOException", "protected void connect(LocalSocketAddress address, int timeout) throws IOException", "public void bind(LocalSocketAddress endpoint) throws IOException", "protected void listen(int backlog) throws IOException", "protected void accept(LocalSocketImpl s) throws IOException", "protected InputStream getInputStream() throws IOException", "protected OutputStream getOutputStream() throws IOException", "protected int available() throws IOException", "protected void shutdownInput() throws IOException", "protected void shutdownOutput() throws IOException", "protected FileDescriptor getFileDescriptor()", "protected boolean supportsUrgentData()", "protected void sendUrgentData(int data) throws IOException", "public Object getOption(int optID) throws IOException", "public void setOption(int optID, Object value) throws IOException", "public void setFileDescriptorsForSend(FileDescriptor[] fds)", "public FileDescriptor[] getAncillaryFileDescriptors() throws IOException", "public Credentials getPeerCredentials() throws IOException", "public LocalSocketAddress getSockAddress() throws IOException", "protected void finalize() throws IOException", "private static int javaSoToOsOpt(int optID)" ],
  "variableNames" : [ "fis", "fos", "readMonitor", "writeMonitor", "fd", "mFdCreatedInternally", "inboundFileDescriptors", "outboundFileDescriptors" ]
}