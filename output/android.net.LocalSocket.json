{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/LocalSocket.java",
  "packageName" : "android.net",
  "className" : "LocalSocket",
  "comment" : "\n * Creates a (non-server) socket in the UNIX-domain namespace. The interface\n * here is not entirely unlike that of java.net.Socket. This class and the streams\n * returned from it may be used from multiple threads.\n ",
  "variables" : [ {
    "name" : "impl",
    "type" : "LocalSocketImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "implCreated",
    "type" : "boolean",
    "comment" : " false if impl.create() needs to be called ",
    "links" : [ ]
  }, {
    "name" : "localAddress",
    "type" : "LocalSocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isBound",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isConnected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sockType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOCKET_UNKNOWN",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "SOCKET_DGRAM",
    "type" : "int",
    "comment" : " Datagram socket type ",
    "links" : [ ]
  }, {
    "name" : "SOCKET_STREAM",
    "type" : "int",
    "comment" : " Stream socket type ",
    "links" : [ ]
  }, {
    "name" : "SOCKET_SEQPACKET",
    "type" : "int",
    "comment" : " Sequential packet socket type ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LocalSocket createConnectedLocalSocket(FileDescriptor fd)",
    "returnType" : "LocalSocket",
    "comment" : "\n     * Creates a LocalSocket instances using the FileDescriptor for an already-connected\n     * AF_LOCAL/UNIX domain stream socket. Note: the FileDescriptor must be closed by the caller:\n     * closing the LocalSocket will not close it.\n     *\n     * @hide - used by BluetoothSocket.\n     ",
    "links" : [ ]
  }, {
    "name" : " static LocalSocket createLocalSocketForAccept(LocalSocketImpl impl)",
    "returnType" : "LocalSocket",
    "comment" : "\n     * for use with LocalServerSocket.accept()\n     ",
    "links" : [ ]
  }, {
    "name" : "private static LocalSocket createConnectedLocalSocket(LocalSocketImpl impl, int sockType)",
    "returnType" : "LocalSocket",
    "comment" : "\n     * Creates a LocalSocket from an existing LocalSocketImpl that is already connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "private void implCreateIfNeeded() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * It's difficult to discern from the spec when impl.create() should be\n     * called, but it seems like a reasonable rule is \"as soon as possible,\n     * but not in a context where IOException cannot be thrown\"\n     *\n     * @throws IOException from SocketImpl.create()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void connect(LocalSocketAddress endpoint) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Connects this socket to an endpoint. May only be called on an instance\n     * that has not yet been connected.\n     *\n     * @param endpoint endpoint address\n     * @throws IOException if socket is in invalid state or the address does\n     * not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bind(LocalSocketAddress bindpoint) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds this socket to an endpoint name. May only be called on an instance\n     * that has not yet been bound.\n     *\n     * @param bindpoint endpoint address\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocalSocketAddress getLocalSocketAddress()",
    "returnType" : "LocalSocketAddress",
    "comment" : "\n     * Retrieves the name that this socket is bound to, if any.\n     *\n     * @return Local address or null if anonymous\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Retrieves the input stream for this instance.\n     *\n     * @return input stream\n     * @throws IOException if socket has been closed or cannot be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Retrieves the output stream for this instance.\n     *\n     * @return output stream\n     * @throws IOException if socket has been closed or cannot be created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the socket.\n     *\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shutdownInput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the input side of the socket.\n     *\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void shutdownOutput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the output side of the socket.\n     *\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReceiveBufferSize(int size) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getReceiveBufferSize() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSoTimeout(int n) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSoTimeout() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSendBufferSize(int n) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSendBufferSize() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LocalSocketAddress getRemoteSocketAddress()",
    "returnType" : "LocalSocketAddress",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isBound()",
    "returnType" : "boolean",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public boolean isOutputShutdown()",
    "returnType" : "boolean",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public boolean isInputShutdown()",
    "returnType" : "boolean",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public void connect(LocalSocketAddress endpoint, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "???SEC",
    "links" : [ ]
  }, {
    "name" : "public void setFileDescriptorsForSend(FileDescriptor[] fds)",
    "returnType" : "void",
    "comment" : "\n     * Enqueues a set of file descriptors to send to the peer. The queue\n     * is one deep. The file descriptors will be sent with the next write\n     * of normal data, and will be delivered in a single ancillary message.\n     * See \"man 7 unix\" SCM_RIGHTS on a desktop Linux machine.\n     *\n     * @param fds non-null; file descriptors to send.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor[] getAncillaryFileDescriptors() throws IOException",
    "returnType" : "FileDescriptor[]",
    "comment" : "\n     * Retrieves a set of file descriptors that a peer has sent through\n     * an ancillary message. This method retrieves the most recent set sent,\n     * and then returns null until a new set arrives.\n     * File descriptors may only be passed along with regular data, so this\n     * method can only return a non-null after a read operation.\n     *\n     * @return null or file descriptor array\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public Credentials getPeerCredentials() throws IOException",
    "returnType" : "Credentials",
    "comment" : "\n     * Retrieves the credentials of this socket's peer. Only valid on\n     * connected sockets.\n     *\n     * @return non-null; peer credentials\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns file descriptor or null if not yet open/already closed\n     *\n     * @return fd or null\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "impl", "implCreated", "localAddress", "isBound", "isConnected", "sockType", "SOCKET_UNKNOWN", "SOCKET_DGRAM", "SOCKET_STREAM", "SOCKET_SEQPACKET" ],
  "methodNames" : [ "public static LocalSocket createConnectedLocalSocket(FileDescriptor fd)", " static LocalSocket createLocalSocketForAccept(LocalSocketImpl impl)", "private static LocalSocket createConnectedLocalSocket(LocalSocketImpl impl, int sockType)", "public String toString()", "private void implCreateIfNeeded() throws IOException", "public void connect(LocalSocketAddress endpoint) throws IOException", "public void bind(LocalSocketAddress bindpoint) throws IOException", "public LocalSocketAddress getLocalSocketAddress()", "public InputStream getInputStream() throws IOException", "public OutputStream getOutputStream() throws IOException", "public void close() throws IOException", "public void shutdownInput() throws IOException", "public void shutdownOutput() throws IOException", "public void setReceiveBufferSize(int size) throws IOException", "public int getReceiveBufferSize() throws IOException", "public void setSoTimeout(int n) throws IOException", "public int getSoTimeout() throws IOException", "public void setSendBufferSize(int n) throws IOException", "public int getSendBufferSize() throws IOException", "public LocalSocketAddress getRemoteSocketAddress()", "public synchronized boolean isConnected()", "public boolean isClosed()", "public synchronized boolean isBound()", "public boolean isOutputShutdown()", "public boolean isInputShutdown()", "public void connect(LocalSocketAddress endpoint, int timeout) throws IOException", "public void setFileDescriptorsForSend(FileDescriptor[] fds)", "public FileDescriptor[] getAncillaryFileDescriptors() throws IOException", "public Credentials getPeerCredentials() throws IOException", "public FileDescriptor getFileDescriptor()" ]
}