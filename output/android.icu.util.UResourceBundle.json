{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/UResourceBundle.java",
  "packageName" : "android.icu.util",
  "className" : "UResourceBundle",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.util.ResourceBundle}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p>A class representing a collection of resource information pertaining to a given\n * locale. A resource bundle provides a way of accessing locale- specific information in a\n * data file. You create a resource bundle that manages the resources for a given locale\n * and then ask it for individual resources.\n *\n * <p>In ResourceBundle, an object is created and the sub-items are fetched using the\n * getString and getObject methods.  In UResourceBundle, each individual element of a\n * resource is a resource by itself.\n *\n * <p>Resource bundles in ICU are currently defined using text files that conform to the\n * following <a\n * href=\"https://github.com/unicode-org/icu-docs/blob/main/design/bnf_rb.txt\">BNF\n * definition</a>.  More on resource bundle concepts and syntax can be found in the <a\n * href=\"https://unicode-org.github.io/icu/userguide/locale/resources\">Users Guide</a>.\n *\n * <p>The packaging of ICU *.res files can be of two types\n * ICU4C:\n * <pre>\n *       root.res\n *         |\n *      --------\n *     |        |\n *   fr.res  en.res\n *     |\n *   --------\n *  |        |\n * fr_CA.res fr_FR.res\n * </pre>\n * JAVA/JDK:\n * <pre>\n *    LocaleElements.res\n *         |\n *      -------------------\n *     |                   |\n * LocaleElements_fr.res  LocaleElements_en.res\n *     |\n *   ---------------------------\n *  |                            |\n * LocaleElements_fr_CA.res   LocaleElements_fr_FR.res\n * </pre>\n *\n * Depending on the organization of your resources, the syntax to getBundleInstance will\n * change.  To open ICU style organization use:\n *\n * <pre>\n *      UResourceBundle bundle =\n *          UResourceBundle.getBundleInstance(\"com/mycompany/resources\",\n *                                            \"en_US\", myClassLoader);\n * </pre>\n * To open Java/JDK style organization use:\n * <pre>\n *      UResourceBundle bundle =\n *          UResourceBundle.getBundleInstance(\"com.mycompany.resources.LocaleElements\",\n *                                            \"en_US\", myClassLoader);\n * </pre>\n *\n * <p>Note: Please use pass a class loader for loading non-ICU resources. Java security does not\n * allow loading of resources across jar files. You must provide your class loader\n * to load the resources\n\n * @author ram\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "java.util.ResourceBundle" ],
  "variables" : [ {
    "name" : "ROOT_CACHE",
    "type" : "Map<String, RootType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Resource type constant for \"no resource\".\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Resource type constant for strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "BINARY",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Resource type constant for binary data.\n     ",
    "links" : [ ]
  }, {
    "name" : "TABLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Resource type constant for tables of key-value pairs.\n     ",
    "links" : [ ]
  }, {
    "name" : "INT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Resource type constant for a single 28-bit integer, interpreted as\n     * signed or unsigned by the getInt() function.\n     * @see #getInt\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAY",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Resource type constant for arrays of resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "INT_VECTOR",
    "type" : "int",
    "comment" : "\n     * Resource type constant for vectors of 32-bit integers.\n     * @see #getIntVector\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static UResourceBundle getBundleInstance(String baseName, String localeName)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a resource bundle using the specified base name and locale.\n     * ICU_DATA_CLASS is used as the default root.\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param localeName the locale for which a resource bundle is desired\n     * @throws MissingResourceException If no resource bundle for the specified base name\n     * can be found\n     * @return a resource bundle for the given base name and locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(String baseName, String localeName, ClassLoader root)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a resource bundle using the specified base name, locale, and class root.\n     *\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param localeName the locale for which a resource bundle is desired\n     * @param root the class object from which to load the resource bundle\n     * @throws MissingResourceException If no resource bundle for the specified base name\n     * can be found\n     * @return a resource bundle for the given base name and locale\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static UResourceBundle getBundleInstance(String baseName, String localeName, ClassLoader root, boolean disableFallback)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a resource bundle using the specified base name, locale, and class\n     * root.\n     *\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param localeName the locale for which a resource bundle is desired\n     * @param root the class object from which to load the resource bundle\n     * @param disableFallback Option to disable locale inheritance.\n     *                          If true the fallback chain will not be built.\n     * @throws MissingResourceException\n     *     if no resource bundle for the specified base name can be found\n     * @return a resource bundle for the given base name and locale\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(ULocale locale)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a UResourceBundle for the locale specified, from which users can extract\n     * resources by using their corresponding keys.\n     * @param locale  specifies the locale for which we want to open the resource.\n     *                If null the bundle for default locale is opened.\n     * @return a resource bundle for the given locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(String baseName)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a UResourceBundle for the default locale and specified base name,\n     * from which users can extract resources by using their corresponding keys.\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @return a resource bundle for the given base name and default locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(String baseName, Locale locale)",
    "returnType" : "UResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(String baseName, ULocale locale)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a UResourceBundle, from which users can extract resources by using\n     * their corresponding keys.\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param locale  specifies the locale for which we want to open the resource.\n     *                If null the bundle for default locale is opened.\n     * @return a resource bundle for the given base name and locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(String baseName, Locale locale, ClassLoader loader)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a UResourceBundle for the specified locale and specified base name,\n     * from which users can extract resources by using their corresponding keys.\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param locale  specifies the locale for which we want to open the resource.\n     *                If null the bundle for default locale is opened.\n     * @param loader  the loader to use\n     * @return a resource bundle for the given base name and locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle getBundleInstance(String baseName, ULocale locale, ClassLoader loader)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Creates a UResourceBundle, from which users can extract resources by using\n     * their corresponding keys.<br><br>\n     * Note: Please use this API for loading non-ICU resources. Java security does not\n     * allow loading of resources across jar files. You must provide your class loader\n     * to load the resources\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param locale  specifies the locale for which we want to open the resource.\n     *                If null the bundle for default locale is opened.\n     * @param loader  the loader to use\n     * @return a resource bundle for the given base name and locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ULocale getULocale()",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the RFC 3066 conformant locale id of this resource bundle.\n     * This method can be used after a call to getBundleInstance() to\n     * determine whether the resource bundle returned really\n     * corresponds to the requested locale or is a fallback.\n     *\n     * @return the locale of this resource bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract String getLocaleID()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the localeID\n     * @return The string representation of the localeID\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract String getBaseName()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the base name of the resource bundle\n     * @return The string representation of the base name\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract UResourceBundle getParent()",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Returns the parent bundle\n     * @return The parent bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the locale of this bundle\n     * @return the locale of this resource bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "private static RootType getRootType(String baseName, ClassLoader root)",
    "returnType" : "RootType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setRootType(String baseName, RootType rootType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static UResourceBundle instantiateBundle(String baseName, String localeName, ClassLoader root, boolean disableFallback)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Loads a new resource bundle for the given base name, locale and class loader.\n     * Optionally will disable loading of fallback bundles.\n     * @param baseName string containing the name of the data package.\n     *                    If null the default ICU package name is used.\n     * @param localeName the locale for which a resource bundle is desired\n     * @param root the class object from which to load the resource bundle\n     * @param disableFallback disables loading of fallback lookup chain\n     * @throws MissingResourceException If no resource bundle for the specified base name\n     * can be found\n     * @return a resource bundle for the given base name and locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public ByteBuffer getBinary()",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * <strong>[icu]</strong> Returns a binary data item from a binary resource, as a read-only ByteBuffer.\n     *\n     * @return a pointer to a chunk of unsigned bytes which live in a memory mapped/DLL\n     * file.\n     * @see #getIntVector\n     * @see #getInt\n     * @throws MissingResourceException If no resource bundle can be found.\n     * @throws UResourceTypeMismatchException If the resource has a type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string from a string resource type\n     *\n     * @return a string\n     * @see #getBinary()\n     * @see #getIntVector\n     * @see #getInt\n     * @throws MissingResourceException If resource bundle is missing.\n     * @throws UResourceTypeMismatchException If resource bundle has a type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getStringArray()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a string array from a array resource type\n     *\n     * @return a string\n     * @see #getString()\n     * @see #getIntVector\n     * @throws MissingResourceException If resource bundle is missing.\n     * @throws UResourceTypeMismatchException If resource bundle has a type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBinary(byte[] ba)",
    "returnType" : "byte[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns a binary data from a binary resource, as a byte array with a copy\n     * of the bytes from the resource bundle.\n     *\n     * @param ba  The byte array to write the bytes to. A null variable is OK.\n     * @return an array of bytes containing the binary data from the resource.\n     * @see #getIntVector\n     * @see #getInt\n     * @throws MissingResourceException If resource bundle is missing.\n     * @throws UResourceTypeMismatchException If resource bundle has a type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getIntVector()",
    "returnType" : "int[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns a 32 bit integer array from a resource.\n     *\n     * @return a pointer to a chunk of unsigned bytes which live in a memory mapped/DLL file.\n     * @see #getBinary()\n     * @see #getInt\n     * @throws MissingResourceException If resource bundle is missing.\n     * @throws UResourceTypeMismatchException If resource bundle has a type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns a signed integer from a resource.\n     *\n     * @return an integer value\n     * @see #getIntVector\n     * @see #getBinary()\n     * @throws MissingResourceException If resource bundle is missing.\n     * @throws UResourceTypeMismatchException If resource bundle type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUInt()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns a unsigned integer from a resource.\n     * This integer is originally 28 bit and the sign gets propagated.\n     *\n     * @return an integer value\n     * @see #getIntVector\n     * @see #getBinary()\n     * @throws MissingResourceException If resource bundle is missing.\n     * @throws UResourceTypeMismatchException If resource bundle type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UResourceBundle get(String aKey)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Returns a resource in a given resource that has a given key.\n     *\n     * @param aKey               a key associated with the wanted resource\n     * @return                  a resource bundle object representing the resource\n     * @throws MissingResourceException If resource bundle is missing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected UResourceBundle findTopLevel(String aKey)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * Returns a resource in a given resource that has a given key, or null if the\n     * resource is not found.\n     *\n     * @param aKey the key associated with the wanted resource\n     * @return the resource, or null\n     * @see #get(String)\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string in a given resource at the specified index.\n     *\n     * @param index an index to the wanted string.\n     * @return a string which lives in the resource.\n     * @throws IndexOutOfBoundsException If the index value is out of bounds of accepted values.\n     * @throws UResourceTypeMismatchException If resource bundle type mismatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UResourceBundle get(int index)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Returns the resource in a given resource at the specified index.\n     *\n     * @param index an index to the wanted resource.\n     * @return the sub resource UResourceBundle object\n     * @throws IndexOutOfBoundsException If the index value is out of bounds of accepted values.\n     * @throws MissingResourceException If the resource bundle is missing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected UResourceBundle findTopLevel(int index)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * Returns a resource in a given resource that has a given index, or null if the\n     * resource is not found.\n     *\n     * @param index the index of the resource\n     * @return the resource, or null\n     * @see #get(int)\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getKeys()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns the keys in this bundle as an enumeration\n     * @return an enumeration containing key strings,\n     *         which is empty if this is not a bundle or a table resource\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> keySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a Set of all keys contained in this ResourceBundle and its parent bundles.\n     * @return a Set of all keys contained in this ResourceBundle and its parent bundles,\n     *         which is empty if this is not a bundle or a table resource\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Set<String> handleKeySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a Set of the keys contained <i>only</i> in this ResourceBundle.\n     * This does not include further keys from parent bundles.\n     * @return a Set of the keys contained only in this ResourceBundle,\n     *         which is empty if this is not a bundle or a table resource\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSize()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns the size of a resource. Size for scalar types is always 1, and for\n     * vector/table types is the number of child resources.\n     *\n     * <br><b>Note:</b> Integer array is treated as a scalar type. There are no APIs to\n     * access individual members of an integer array. It is always returned as a whole.\n     * @return number of resources in a given resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns the type of a resource.\n     * Available types are {@link #INT INT}, {@link #ARRAY ARRAY},\n     * {@link #BINARY BINARY}, {@link #INT_VECTOR INT_VECTOR},\n     * {@link #STRING STRING}, {@link #TABLE TABLE}.\n     *\n     * @return type of the given resource.\n     ",
    "links" : [ "#ARRAY", "#STRING", "#BINARY", "#INT_VECTOR", "#TABLE", "#INT" ]
  }, {
    "name" : "public VersionInfo getVersion()",
    "returnType" : "VersionInfo",
    "comment" : "\n     * <strong>[icu]</strong> Return the version number associated with this UResourceBundle as an\n     * VersionInfo object.\n     * @return VersionInfo object containing the version of the bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "public UResourceBundleIterator getIterator()",
    "returnType" : "UResourceBundleIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns the iterator which iterates over this\n     * resource bundle\n     * @return UResourceBundleIterator that iterates over the resources in the bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the key associated with a given resource. Not all the resources have\n     * a key - only those that are members of a table.\n     * @return a key associated to this resource, or null if it doesn't have a key\n     ",
    "links" : [ ]
  }, {
    "name" : "protected UResourceBundle handleGet(String aKey, HashMap<String, String> aliasesVisited, UResourceBundle requested)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Actual worker method for fetching a resource based on the given key.\n     * Sub classes must override this method if they support resources with keys.\n     * @param aKey the key string of the resource to be fetched\n     * @param aliasesVisited hashtable object to hold references of resources already seen\n     * @param requested the original resource bundle object on which the get method was invoked.\n     *                  The requested bundle and the bundle on which this method is invoked\n     *                  are the same, except in the cases where aliases are involved.\n     * @return UResourceBundle a resource associated with the key\n     ",
    "links" : [ ]
  }, {
    "name" : "protected UResourceBundle handleGet(int index, HashMap<String, String> aliasesVisited, UResourceBundle requested)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * <strong>[icu]</strong> Actual worker method for fetching a resource based on the given index.\n     * Sub classes must override this method if they support arrays of resources.\n     * @param index the index of the resource to be fetched\n     * @param aliasesVisited hashtable object to hold references of resources already seen\n     * @param requested the original resource bundle object on which the get method was invoked.\n     *                  The requested bundle and the bundle on which this method is invoked\n     *                  are the same, except in the cases where aliases are involved.\n     * @return UResourceBundle a resource associated with the index\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String[] handleGetStringArray()",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Actual worker method for fetching the array of strings in a resource.\n     * Sub classes must override this method if they support arrays of strings.\n     * @return String[] An array of strings containing strings\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Enumeration<String> handleGetKeys()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * <strong>[icu]</strong> Actual worker method for fetching the keys of resources contained in the resource.\n     * Sub classes must override this method if they support keys and associated resources.\n     *\n     * @return Enumeration An enumeration of all the keys in this resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Object handleGetObject(String aKey)",
    "returnType" : "Object",
    "comment" : " Override this method",
    "links" : [ ]
  }, {
    "name" : "private Object handleGetObjectImpl(String aKey, UResourceBundle requested)",
    "returnType" : "Object",
    "comment" : " done twice before throwing a MissingResourceExpection.",
    "links" : [ ]
  }, {
    "name" : "private Object resolveObject(String aKey, UResourceBundle requested)",
    "returnType" : "Object",
    "comment" : " string or string array",
    "links" : [ ]
  }, {
    "name" : "protected boolean isTopLevelResource()",
    "returnType" : "boolean",
    "comment" : "\n     * Is this a top-level resource, that is, a whole bundle?\n     * @return true if this is a top-level resource\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static UResourceBundle getBundleInstance(String baseName, String localeName)", "public static UResourceBundle getBundleInstance(String baseName, String localeName, ClassLoader root)", "protected static UResourceBundle getBundleInstance(String baseName, String localeName, ClassLoader root, boolean disableFallback)", "public static UResourceBundle getBundleInstance(ULocale locale)", "public static UResourceBundle getBundleInstance(String baseName)", "public static UResourceBundle getBundleInstance(String baseName, Locale locale)", "public static UResourceBundle getBundleInstance(String baseName, ULocale locale)", "public static UResourceBundle getBundleInstance(String baseName, Locale locale, ClassLoader loader)", "public static UResourceBundle getBundleInstance(String baseName, ULocale locale, ClassLoader loader)", "public abstract ULocale getULocale()", "protected abstract String getLocaleID()", "protected abstract String getBaseName()", "protected abstract UResourceBundle getParent()", "public Locale getLocale()", "private static RootType getRootType(String baseName, ClassLoader root)", "private static void setRootType(String baseName, RootType rootType)", "protected static UResourceBundle instantiateBundle(String baseName, String localeName, ClassLoader root, boolean disableFallback)", "public ByteBuffer getBinary()", "public String getString()", "public String[] getStringArray()", "public byte[] getBinary(byte[] ba)", "public int[] getIntVector()", "public int getInt()", "public int getUInt()", "public UResourceBundle get(String aKey)", "protected UResourceBundle findTopLevel(String aKey)", "public String getString(int index)", "public UResourceBundle get(int index)", "protected UResourceBundle findTopLevel(int index)", "public Enumeration<String> getKeys()", "public Set<String> keySet()", "protected Set<String> handleKeySet()", "public int getSize()", "public int getType()", "public VersionInfo getVersion()", "public UResourceBundleIterator getIterator()", "public String getKey()", "protected UResourceBundle handleGet(String aKey, HashMap<String, String> aliasesVisited, UResourceBundle requested)", "protected UResourceBundle handleGet(int index, HashMap<String, String> aliasesVisited, UResourceBundle requested)", "protected String[] handleGetStringArray()", "protected Enumeration<String> handleGetKeys()", "protected Object handleGetObject(String aKey)", "private Object handleGetObjectImpl(String aKey, UResourceBundle requested)", "private Object resolveObject(String aKey, UResourceBundle requested)", "protected boolean isTopLevelResource()" ],
  "variableNames" : [ "ROOT_CACHE", "NONE", "STRING", "BINARY", "TABLE", "INT", "ARRAY", "INT_VECTOR" ]
}