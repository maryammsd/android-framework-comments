{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/QuickContactBadge.java",
  "packageName" : "android.widget",
  "className" : "QuickContactBadge",
  "comment" : "\n * Widget used to show an image with the standard QuickContact badge\n * and on-click behavior.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mContactUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContactEmail",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContactPhone",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlay",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueryHandler",
    "type" : "QueryHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultAvatar",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrioritizedMimeType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludeMimes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOKEN_EMAIL_LOOKUP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOKEN_PHONE_LOOKUP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOKEN_EMAIL_LOOKUP_AND_TRIGGER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOKEN_PHONE_LOOKUP_AND_TRIGGER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_URI_CONTENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMAIL_LOOKUP_PROJECTION",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMAIL_ID_COLUMN_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMAIL_LOOKUP_STRING_COLUMN_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHONE_LOOKUP_PROJECTION",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHONE_ID_COLUMN_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHONE_LOOKUP_STRING_COLUMN_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMode(int size)",
    "returnType" : "void",
    "comment" : " This call has no effect anymore, as there is only one QuickContact mode ",
    "links" : [ ]
  }, {
    "name" : "public void setPrioritizedMimeType(String prioritizedMimeType)",
    "returnType" : "void",
    "comment" : "\n     * Set which mimetype should be prioritized in the QuickContacts UI. For example, passing the\n     * value {@link Email#CONTENT_ITEM_TYPE} can cause emails to be displayed more prominently in\n     * QuickContacts.\n     ",
    "links" : [ "android.provider.ContactsContract.CommonDataKinds.Email#CONTENT_ITEM_TYPE" ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAssigned()",
    "returnType" : "boolean",
    "comment" : " True if a contact, an email address or a phone number has been assigned ",
    "links" : [ ]
  }, {
    "name" : "public void setImageToDefault()",
    "returnType" : "void",
    "comment" : "\n     * Resets the contact photo to the default state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void assignContactUri(Uri contactUri)",
    "returnType" : "void",
    "comment" : "\n     * Assign the contact uri that this QuickContactBadge should be associated\n     * with. Note that this is only used for displaying the QuickContact window and\n     * won't bind the contact's photo for you. Call {@link #setImageDrawable(Drawable)} to set the\n     * photo.\n     *\n     * @param contactUri Either a {@link Contacts#CONTENT_URI} or\n     *            {@link Contacts#CONTENT_LOOKUP_URI} style URI.\n     ",
    "links" : [ "android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI", "#setImageDrawable(Drawable)", "android.provider.ContactsContract.Contacts#CONTENT_URI" ]
  }, {
    "name" : "public void assignContactFromEmail(String emailAddress, boolean lazyLookup)",
    "returnType" : "void",
    "comment" : "\n     * Assign a contact based on an email address. This should only be used when\n     * the contact's URI is not available, as an extra query will have to be\n     * performed to lookup the URI based on the email.\n     *\n     * @param emailAddress The email address of the contact.\n     * @param lazyLookup If this is true, the lookup query will not be performed\n     * until this view is clicked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void assignContactFromEmail(String emailAddress, boolean lazyLookup, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void assignContactFromPhone(String phoneNumber, boolean lazyLookup)",
    "returnType" : "void",
    "comment" : "\n     * Assign a contact based on a phone number. This should only be used when\n     * the contact's URI is not available, as an extra query will have to be\n     * performed to lookup the URI based on the phone number.\n     *\n     * @param phoneNumber The phone number of the contact.\n     * @param lazyLookup If this is true, the lookup query will not be performed\n     * until this view is clicked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void assignContactFromPhone(String phoneNumber, boolean lazyLookup, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Assign a contact based on a phone number. This should only be used when\n     * the contact's URI is not available, as an extra query will have to be\n     * performed to lookup the URI based on the phone number.\n     *\n     * @param phoneNumber The phone number of the contact.\n     * @param lazyLookup If this is true, the lookup query will not be performed\n     * until this view is clicked.\n     * @param extras A bundle of extras to populate the contact edit page with if the contact\n     * is not found and the user chooses to add the phone number to an existing contact or\n     * create a new contact. Uses the same string constants as those found in\n     * {@link android.provider.ContactsContract.Intents.Insert}\n     ",
    "links" : [ "android.provider.ContactsContract.Intents.Insert" ]
  }, {
    "name" : "public void setOverlay(Drawable overlay)",
    "returnType" : "void",
    "comment" : "\n     * Assigns the drawable that is to be drawn on top of the assigned contact photo.\n     *\n     * @param overlay Drawable to be drawn over the assigned contact photo. Must have a non-zero\n     *         instrinsic width and height.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onContactUriChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onClick(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExcludeMimes(String[] excludeMimes)",
    "returnType" : "void",
    "comment" : "\n     * Set a list of specific MIME-types to exclude and not display. For\n     * example, this can be used to hide the {@link Contacts#CONTENT_ITEM_TYPE}\n     * profile icon.\n     ",
    "links" : [ "android.provider.ContactsContract.Contacts#CONTENT_ITEM_TYPE" ]
  } ],
  "methodNames" : [ "protected void onAttachedToWindow()", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", "public void setMode(int size)", "public void setPrioritizedMimeType(String prioritizedMimeType)", "protected void onDraw(Canvas canvas)", "private boolean isAssigned()", "public void setImageToDefault()", "public void assignContactUri(Uri contactUri)", "public void assignContactFromEmail(String emailAddress, boolean lazyLookup)", "public void assignContactFromEmail(String emailAddress, boolean lazyLookup, Bundle extras)", "public void assignContactFromPhone(String phoneNumber, boolean lazyLookup)", "public void assignContactFromPhone(String phoneNumber, boolean lazyLookup, Bundle extras)", "public void setOverlay(Drawable overlay)", "private void onContactUriChanged()", "public void onClick(View v)", "public CharSequence getAccessibilityClassName()", "public void setExcludeMimes(String[] excludeMimes)" ],
  "variableNames" : [ "mContactUri", "mContactEmail", "mContactPhone", "mOverlay", "mQueryHandler", "mDefaultAvatar", "mExtras", "mPrioritizedMimeType", "mExcludeMimes", "TOKEN_EMAIL_LOOKUP", "TOKEN_PHONE_LOOKUP", "TOKEN_EMAIL_LOOKUP_AND_TRIGGER", "TOKEN_PHONE_LOOKUP_AND_TRIGGER", "EXTRA_URI_CONTENT", "EMAIL_LOOKUP_PROJECTION", "EMAIL_ID_COLUMN_INDEX", "EMAIL_LOOKUP_STRING_COLUMN_INDEX", "PHONE_LOOKUP_PROJECTION", "PHONE_ID_COLUMN_INDEX", "PHONE_LOOKUP_STRING_COLUMN_INDEX" ]
}