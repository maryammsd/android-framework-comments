{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tuner/filter/MediaEvent.java",
  "packageName" : "android.media.tv.tuner.filter",
  "className" : "MediaEvent",
  "comment" : "\n * Filter event sent from {@link Filter} objects with media type.\n *\n * @hide\n ",
  "links" : [ "android.media.tv.tuner.filter.Filter" ],
  "variables" : [ {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleased",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPtsPresent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPts",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDtsPresent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDts",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataLength",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffset",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinearBlock",
    "type" : "LinearBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSecureMemory",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMpuSequenceNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPrivateData",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScIndexMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraMetaData",
    "type" : "AudioDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioPresentations",
    "type" : "List<AudioPresentation>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native Long nativeGetAudioHandle()",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native LinearBlock nativeGetLinearBlock()",
    "returnType" : "LinearBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeFinalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStreamId()",
    "returnType" : "int",
    "comment" : "\n     * Gets stream ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPtsPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether PTS (Presentation Time Stamp) is present.\n     *\n     * @return {@code true} if PTS is present in PES header; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getPts()",
    "returnType" : "long",
    "comment" : "\n     * Gets PTS (Presentation Time Stamp) for audio or video frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDtsPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether DTS (Decode Time Stamp) is present.\n     *\n     * <p>This query is only supported in Tuner 2.0 or higher version. Unsupported version will\n     * return {@code false}.\n     * Use {@link TunerVersionChecker#getTunerVersion()} to get the version information.\n     *\n     * @return {@code true} if DTS is present in PES header; {@code false} otherwise.\n     ",
    "links" : [ "#getTunerVersion()" ]
  }, {
    "name" : "public long getDts()",
    "returnType" : "long",
    "comment" : "\n     * Gets DTS (Decode Time Stamp) for audio or video frame.\n     *\n     * * <p>This query is only supported in Tuner 2.0 or higher version. Unsupported version will\n     * return {@code -1}.\n     * Use {@link TunerVersionChecker#getTunerVersion()} to get the version information.\n     ",
    "links" : [ "#getTunerVersion()" ]
  }, {
    "name" : "public long getDataLength()",
    "returnType" : "long",
    "comment" : "\n     * Gets data size in bytes of audio or video frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getOffset()",
    "returnType" : "long",
    "comment" : "\n     * The offset in the memory block which is shared among multiple Media Events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LinearBlock getLinearBlock()",
    "returnType" : "LinearBlock",
    "comment" : "\n     * Gets a linear block associated to the memory where audio or video data stays.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSecureMemory()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the data is secure.\n     *\n     * @return {@code true} if the data is in secure area, and isn't mappable;\n     *         {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAvDataId()",
    "returnType" : "long",
    "comment" : "\n     * Gets the ID which is used by HAL to provide additional information for AV data.\n     *\n     * <p>For secure audio, it's the audio handle used by Audio Track.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAudioHandle()",
    "returnType" : "long",
    "comment" : "\n     * Gets the audio handle.\n     *\n     * <p>Client gets audio handle from {@link MediaEvent}, and queues it to\n     * {@link android.media.AudioTrack} in\n     * {@link android.media.AudioTrack#ENCAPSULATION_MODE_HANDLE} format.\n     *\n     * @return the audio handle.\n     * @see android.media.AudioTrack#ENCAPSULATION_MODE_HANDLE\n     ",
    "links" : [ "android.media.AudioTrack#ENCAPSULATION_MODE_HANDLE", "android.media.tv.tuner.filter.MediaEvent", "android.media.AudioTrack" ]
  }, {
    "name" : "public int getMpuSequenceNumber()",
    "returnType" : "int",
    "comment" : "\n     * Gets MPU sequence number of filtered data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrivateData()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the data is private.\n     *\n     * @return {@code true} if the data is in private; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScIndexMask()",
    "returnType" : "int",
    "comment" : "\n     * Gets SC (Start Code) index mask.\n     *\n     * <p>This API is only supported by Tuner HAL 2.0 or higher. Unsupported version would return\n     * {@code 0}. Use {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "#getTunerVersion()" ]
  }, {
    "name" : "public AudioDescriptor getExtraMetaData()",
    "returnType" : "AudioDescriptor",
    "comment" : "\n     * Gets audio extra metadata.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AudioPresentation> getAudioPresentations()",
    "returnType" : "List<AudioPresentation>",
    "comment" : "\n     * Gets audio presentations.\n     *\n     * <p>The audio presentation order matters. As specified in ETSI EN 300 468 V1.17.1, all the\n     * audio programme components corresponding to the first audio preselection in the loop are\n     * contained in the main NGA stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "\n     * Finalize the MediaEvent object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases the MediaEvent object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native Long nativeGetAudioHandle()", "private native LinearBlock nativeGetLinearBlock()", "private native void nativeFinalize()", "public int getStreamId()", "public boolean isPtsPresent()", "public long getPts()", "public boolean isDtsPresent()", "public long getDts()", "public long getDataLength()", "public long getOffset()", "public LinearBlock getLinearBlock()", "public boolean isSecureMemory()", "public long getAvDataId()", "public long getAudioHandle()", "public int getMpuSequenceNumber()", "public boolean isPrivateData()", "public int getScIndexMask()", "public AudioDescriptor getExtraMetaData()", "public List<AudioPresentation> getAudioPresentations()", "protected void finalize()", "public void release()" ],
  "variableNames" : [ "mNativeContext", "mReleased", "mLock", "mStreamId", "mIsPtsPresent", "mPts", "mIsDtsPresent", "mDts", "mDataLength", "mOffset", "mLinearBlock", "mIsSecureMemory", "mDataId", "mMpuSequenceNumber", "mIsPrivateData", "mScIndexMask", "mExtraMetaData", "mAudioPresentations" ]
}