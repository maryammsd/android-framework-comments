{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/duration/impl/PeriodFormatterData.java",
  "packageName" : "android.icu.impl.duration.impl",
  "className" : "PeriodFormatterData",
  "comment" : "\n * PeriodFormatterData provides locale-specific data used to format\n * relative dates and times, and convenience api to access it.\n *\n * An instance of PeriodFormatterData is usually created by requesting\n * data for a given locale from an PeriodFormatterDataService.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "dr",
    "type" : "DataRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localeName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trace",
    "type" : "boolean",
    "comment" : " debug",
    "links" : [ ]
  }, {
    "name" : "FORM_PLURAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORM_SINGULAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORM_DUAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORM_PAUCAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORM_SINGULAR_SPELLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORM_SINGULAR_NO_OMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORM_HALF_SPELLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int pluralization()",
    "returnType" : "int",
    "comment" : "\n   * Return the pluralization format used by this locale.\n   * @return the pluralization format\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowZero()",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if zeros are allowed in the display.\n   * @return true if zeros should be allowed\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean weeksAloneOnly()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int useMilliseconds()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean appendPrefix(int tl, int td, StringBuffer sb)",
    "returnType" : "boolean",
    "comment" : "\n   * Append the appropriate prefix to the string builder, depending on whether and\n   * how a limit and direction are to be displayed.\n   *\n   * @param tl how and whether to display the time limit\n   * @param td how and whether to display the time direction\n   * @param sb the string builder to which to append the text\n   * @return true if a following digit will require a digit prefix\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendSuffix(int tl, int td, StringBuffer sb)",
    "returnType" : "void",
    "comment" : "\n   * Append the appropriate suffix to the string builder, depending on whether and\n   * how a limit and direction are to be displayed.\n   *\n   * @param tl how and whether to display the time limit\n   * @param td how and whether to display the time direction\n   * @param sb the string builder to which to append the text\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean appendUnit(TimeUnit unit, int count, int cv, int uv, boolean useCountSep, boolean useDigitPrefix, boolean multiple, boolean last, boolean wasSkipped, StringBuffer sb)",
    "returnType" : "boolean",
    "comment" : "\n   * Append the count and unit to the string builder.\n   *\n   * @param unit the unit to append\n   * @param count the count of units, * 1000\n   * @param cv the format to use for displaying the count\n   * @param uv the format to use for displaying the unit\n   * @param useCountSep if false, force no separator between count and unit\n   * @param useDigitPrefix if true, use the digit prefix\n   * @param multiple true if there are multiple units in this string\n   * @param last true if this is the last unit\n   * @param wasSkipped true if the unit(s) before this were skipped\n   * @param sb the string builder to which to append the text\n   * @return true if will require skip marker\n   ",
    "links" : [ ]
  }, {
    "name" : "public int appendCount(TimeUnit unit, boolean omitCount, boolean useDigitPrefix, int count, int cv, boolean useSep, String name, boolean last, StringBuffer sb)",
    "returnType" : "int",
    "comment" : "\n   * Append a count to the string builder.\n   *\n   * @param unit the unit\n   * @param count the count\n   * @param cv the format to use for displaying the count\n   * @param useSep whether to use the count separator, if available\n   * @param name the term name\n   * @param last true if this is the last unit to be formatted\n   * @param sb the string builder to which to append the text\n   * @return index to use if might have required or optional suffix, or -1 if none required\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendCountValue(int count, int integralDigits, int decimalDigits, StringBuffer sb)",
    "returnType" : "void",
    "comment" : "\n   * Append a count value to the builder.\n   *\n   * @param count the count\n   * @param integralDigits the number of integer digits to display\n   * @param decimalDigits the number of decimal digits to display, <= 3\n   * @param sb the string builder to which to append the text\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendInteger(int num, int mindigits, int maxdigits, StringBuffer sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void appendDigits(long num, int mindigits, int maxdigits, StringBuffer sb)",
    "returnType" : "void",
    "comment" : "\n   * Append digits to the string builder, using this.zero for '0' etc.\n   *\n   * @param num the integer to append\n   * @param mindigits the minimum number of digits to append\n   * @param maxdigits the maximum number of digits to append\n   * @param sb the string builder to which to append the text\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendSkippedUnit(StringBuffer sb)",
    "returnType" : "void",
    "comment" : "\n   * Append a marker for skipped units internal to a string.\n   * @param sb the string builder to which to append the text\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean appendUnitSeparator(TimeUnit unit, boolean longSep, boolean afterFirst, boolean beforeLast, StringBuffer sb)",
    "returnType" : "boolean",
    "comment" : "\n   * Append the appropriate separator between units\n   *\n   * @param unit the unit to which to append the separator\n   * @param afterFirst true if this is the first unit formatted\n   * @param beforeLast true if this is the next-to-last unit to be formatted\n   * @param sb the string builder to which to append the text\n   * @return true if a prefix will be required before a following unit\n   ",
    "links" : [ ]
  }, {
    "name" : "private int computeForm(TimeUnit unit, int count, int cv, boolean lastOfMultiple)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int pluralization()", "public boolean allowZero()", "public boolean weeksAloneOnly()", "public int useMilliseconds()", "public boolean appendPrefix(int tl, int td, StringBuffer sb)", "public void appendSuffix(int tl, int td, StringBuffer sb)", "public boolean appendUnit(TimeUnit unit, int count, int cv, int uv, boolean useCountSep, boolean useDigitPrefix, boolean multiple, boolean last, boolean wasSkipped, StringBuffer sb)", "public int appendCount(TimeUnit unit, boolean omitCount, boolean useDigitPrefix, int count, int cv, boolean useSep, String name, boolean last, StringBuffer sb)", "public void appendCountValue(int count, int integralDigits, int decimalDigits, StringBuffer sb)", "public void appendInteger(int num, int mindigits, int maxdigits, StringBuffer sb)", "public void appendDigits(long num, int mindigits, int maxdigits, StringBuffer sb)", "public void appendSkippedUnit(StringBuffer sb)", "public boolean appendUnitSeparator(TimeUnit unit, boolean longSep, boolean afterFirst, boolean beforeLast, StringBuffer sb)", "private int computeForm(TimeUnit unit, int count, int cv, boolean lastOfMultiple)" ],
  "variableNames" : [ "dr", "localeName", "trace", "FORM_PLURAL", "FORM_SINGULAR", "FORM_DUAL", "FORM_PAUCAL", "FORM_SINGULAR_SPELLED", "FORM_SINGULAR_NO_OMIT", "FORM_HALF_SPELLED" ]
}