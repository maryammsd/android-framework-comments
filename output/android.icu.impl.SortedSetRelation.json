{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/SortedSetRelation.java",
  "packageName" : "android.icu.impl",
  "className" : "SortedSetRelation",
  "comment" : "\n * Computationally efficient determination of the relationship between\n * two SortedSets.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "A_NOT_B",
    "type" : "int",
    "comment" : "\n     * The relationship between two sets A and B can be determined by looking at:\n     * A - B\n     * A & B (intersection)\n     * B - A\n     * These are represented by a set of bits.\n     * Bit 2 is true if A - B is not empty\n     * Bit 1 is true if A & B is not empty\n     * BIT 0 is true if B - A is not empty\n     ",
    "links" : [ ]
  }, {
    "name" : "A_AND_B",
    "type" : "int",
    "comment" : "\n     * The relationship between two sets A and B can be determined by looking at:\n     * A - B\n     * A & B (intersection)\n     * B - A\n     * These are represented by a set of bits.\n     * Bit 2 is true if A - B is not empty\n     * Bit 1 is true if A & B is not empty\n     * BIT 0 is true if B - A is not empty\n     ",
    "links" : [ ]
  }, {
    "name" : "B_NOT_A",
    "type" : "int",
    "comment" : "\n     * The relationship between two sets A and B can be determined by looking at:\n     * A - B\n     * A & B (intersection)\n     * B - A\n     * These are represented by a set of bits.\n     * Bit 2 is true if A - B is not empty\n     * Bit 1 is true if A & B is not empty\n     * BIT 0 is true if B - A is not empty\n     ",
    "links" : [ ]
  }, {
    "name" : "ANY",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAINS",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISJOINT",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "ISCONTAINED",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_B",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "EQUALS",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_A",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADDALL",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "A",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPLEMENTALL",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "B",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVEALL",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "RETAINALL",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "B_REMOVEALL",
    "type" : "int",
    "comment" : "\n     * There are 8 combinations of the relationship bits. These correspond to\n     * the filters (combinations of allowed bits) in hasRelation. They also\n     * correspond to the modification functions, listed in comments.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean hasRelation(SortedSet<T> a, int allow, SortedSet<T> b)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility that could be on SortedSet. Faster implementation than\n     * what is in Java for doing contains, equals, etc.\n     * @param a first set\n     * @param allow filter, using ANY, CONTAINS, etc.\n     * @param b second set\n     * @return whether the filter relationship is true or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SortedSet<? extends T> doOperation(SortedSet<T> a, int relation, SortedSet<T> b)",
    "returnType" : "SortedSet<? extends T>",
    "comment" : "\n     * Utility that could be on SortedSet. Allows faster implementation than\n     * what is in Java for doing addAll, removeAll, retainAll, (complementAll).\n     * @param a first set\n     * @param relation the relation filter, using ANY, CONTAINS, etc.\n     * @param b second set\n     * @return the new set\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean hasRelation(SortedSet<T> a, int allow, SortedSet<T> b)", "public static SortedSet<? extends T> doOperation(SortedSet<T> a, int relation, SortedSet<T> b)" ],
  "variableNames" : [ "A_NOT_B", "A_AND_B", "B_NOT_A", "ANY", "CONTAINS", "DISJOINT", "ISCONTAINED", "NO_B", "EQUALS", "NO_A", "NONE", "ADDALL", "A", "COMPLEMENTALL", "B", "REMOVEALL", "RETAINALL", "B_REMOVEALL" ]
}