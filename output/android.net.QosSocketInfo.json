{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/QosSocketInfo.java",
  "packageName" : "android.net",
  "className" : "QosSocketInfo",
  "comment" : "\n * Used in conjunction with\n * {@link ConnectivityManager#registerQosCallback}\n * in order to receive Qos Sessions related to the local address and port of a bound {@link Socket}\n * and/or remote address and port of a connected {@link Socket}.\n *\n * @hide\n ",
  "links" : [ "java.net.DatagramSocket", "android.net.ConnectivityManager#registerQosCallback" ],
  "variables" : [ {
    "name" : "mNetwork",
    "type" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParcelFileDescriptor",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalSocketAddress",
    "type" : "InetSocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteSocketAddress",
    "type" : "InetSocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<QosSocketInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Network getNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * The {@link Network} the socket is on.\n     *\n     * @return the registered {@link Network}\n     ",
    "links" : [ "android.net.Network" ]
  }, {
    "name" : "public ParcelFileDescriptor getParcelFileDescriptor()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * The parcel file descriptor wrapped around the socket's file descriptor.\n     *\n     * @return the parcel file descriptor of the socket\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetSocketAddress getLocalSocketAddress()",
    "returnType" : "InetSocketAddress",
    "comment" : "\n     * The local address of the socket passed into {@link QosSocketInfo(Network, Socket)}.\n     * The value does not reflect any changes that occur to the socket after it is first set\n     * in the constructor.\n     *\n     * @return the local address of the socket\n     ",
    "links" : [ "QosSocketInfo(Network" ]
  }, {
    "name" : "public InetSocketAddress getRemoteSocketAddress()",
    "returnType" : "InetSocketAddress",
    "comment" : "\n     * The remote address of the socket passed into {@link QosSocketInfo(Network, Socket)}.\n     * The value does not reflect any changes that occur to the socket after it is first set\n     * in the constructor.\n     *\n     * @return the remote address of the socket if socket is connected, null otherwise\n     ",
    "links" : [ "QosSocketInfo(Network" ]
  }, {
    "name" : "public int getSocketType()",
    "returnType" : "int",
    "comment" : "\n     * The socket type of the socket passed in when this QosSocketInfo object was constructed.\n     *\n     * @return the socket type of the socket.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private InetSocketAddress readSocketAddress(final Parcel in)",
    "returnType" : "InetSocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull final Parcel dest, final int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelWithoutFd(@NonNull final Parcel dest, final int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used when sending QosSocketInfo to telephony, which does not need access to the socket FD.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeToParcelInternal(@NonNull final Parcel dest, final int flags, boolean includeFd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Network getNetwork()", "public ParcelFileDescriptor getParcelFileDescriptor()", "public InetSocketAddress getLocalSocketAddress()", "public InetSocketAddress getRemoteSocketAddress()", "public int getSocketType()", "private InetSocketAddress readSocketAddress(final Parcel in)", "public int describeContents()", "public void writeToParcel(@NonNull final Parcel dest, final int flags)", "public void writeToParcelWithoutFd(@NonNull final Parcel dest, final int flags)", "private void writeToParcelInternal(@NonNull final Parcel dest, final int flags, boolean includeFd)" ],
  "variableNames" : [ "mNetwork", "mParcelFileDescriptor", "mLocalSocketAddress", "mRemoteSocketAddress", "mSocketType", "CREATOR" ]
}