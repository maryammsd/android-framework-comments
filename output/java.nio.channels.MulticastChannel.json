{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/MulticastChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "MulticastChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this channel.\n     *\n     * <p> If the channel is a member of a multicast group then the membership\n     * is {@link MembershipKey#drop dropped}. Upon return, the {@link\n     * MembershipKey membership-key} will be {@link MembershipKey#isValid\n     * invalid}.\n     *\n     * <p> This method otherwise behaves exactly as specified by the {@link\n     * Channel} interface.\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.MembershipKey#drop", "java.nio.channels.MembershipKey#isValidinvalid", "java.nio.channels.MembershipKey", "java.nio.channels.Channel" ]
  }, {
    "name" : " MembershipKey join(InetAddress group, NetworkInterface interf) throws IOException",
    "returnType" : "MembershipKey",
    "comment" : "\n     * Joins a multicast group to begin receiving all datagrams sent to the group,\n     * returning a membership key.\n     *\n     * <p> If this channel is currently a member of the group on the given\n     * interface to receive all datagrams then the membership key, representing\n     * that membership, is returned. Otherwise this channel joins the group and\n     * the resulting new membership key is returned. The resulting membership key\n     * is not {@link MembershipKey#sourceAddress source-specific}.\n     *\n     * <p> A multicast channel may join several multicast groups, including\n     * the same group on more than one interface. An implementation may impose a\n     * limit on the number of groups that may be joined at the same time.\n     *\n     * @param   group\n     *          The multicast address to join\n     * @param   interf\n     *          The network interface on which to join the group\n     *\n     * @return  The membership key\n     *\n     * @throws  IllegalArgumentException\n     *          If the group parameter is not a {@link InetAddress#isMulticastAddress\n     *          multicast} address, or the group parameter is an address type\n     *          that is not supported by this channel\n     * @throws  IllegalStateException\n     *          If the channel already has source-specific membership of the\n     *          group on the interface\n     * @throws  UnsupportedOperationException\n     *          If the channel's socket is not an Internet Protocol socket, or\n     *          the platform does not support multicasting\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is set, and its\n     *          {@link SecurityManager#checkMulticast(InetAddress) checkMulticast}\n     *          method denies access to the multiast group\n     ",
    "links" : [ "#checkMulticast(InetAddress)", "java.net.InetAddress#isMulticastAddressmulticast", "java.nio.channels.MembershipKey#sourceAddress" ]
  }, {
    "name" : " MembershipKey join(InetAddress group, NetworkInterface interf, InetAddress source) throws IOException",
    "returnType" : "MembershipKey",
    "comment" : "\n     * Joins a multicast group to begin receiving datagrams sent to the group\n     * from a given source address.\n     *\n     * <p> If this channel is currently a member of the group on the given\n     * interface to receive datagrams from the given source address then the\n     * membership key, representing that membership, is returned. Otherwise this\n     * channel joins the group and the resulting new membership key is returned.\n     * The resulting membership key is {@link MembershipKey#sourceAddress\n     * source-specific}.\n     *\n     * <p> Membership is <em>cumulative</em> and this method may be invoked\n     * again with the same group and interface to allow receiving datagrams sent\n     * by other source addresses to the group.\n     *\n     * @param   group\n     *          The multicast address to join\n     * @param   interf\n     *          The network interface on which to join the group\n     * @param   source\n     *          The source address\n     *\n     * @return  The membership key\n     *\n     * @throws  IllegalArgumentException\n     *          If the group parameter is not a {@link\n     *          InetAddress#isMulticastAddress multicast} address, the\n     *          source parameter is not a unicast address, the group\n     *          parameter is an address type that is not supported by this channel,\n     *          or the source parameter is not the same address type as the group\n     * @throws  IllegalStateException\n     *          If the channel is currently a member of the group on the given\n     *          interface to receive all datagrams\n     * @throws  UnsupportedOperationException\n     *          If the channel's socket is not an Internet Protocol socket, or\n     *          source filtering is not supported, or the platform does not\n     *          support multicasting\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is set, and its\n     *          {@link SecurityManager#checkMulticast(InetAddress) checkMulticast}\n     *          method denies access to the multiast group\n     ",
    "links" : [ "java.nio.channels.MembershipKey#sourceAddresssource", "#checkMulticast(InetAddress)", "java.net.InetAddress#isMulticastAddress" ]
  } ],
  "methodNames" : [ " void close() throws IOException", " MembershipKey join(InetAddress group, NetworkInterface interf) throws IOException", " MembershipKey join(InetAddress group, NetworkInterface interf, InetAddress source) throws IOException" ],
  "variableNames" : [ ]
}