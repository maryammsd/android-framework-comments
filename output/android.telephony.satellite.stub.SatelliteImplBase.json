{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/satellite/stub/SatelliteImplBase.java",
  "packageName" : "android.telephony.satellite.stub",
  "className" : "SatelliteImplBase",
  "comment" : "\n * Base implementation of satellite service.\n * Any service wishing to provide satellite services should extend this class and implement all\n * methods that the service supports.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder getBinder()",
    "returnType" : "IBinder",
    "comment" : "\n     * @return The binder for the Satellite implementation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSatelliteListener(@NonNull ISatelliteListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register the callback interface with satellite service.\n     *\n     * @param listener The callback interface to handle satellite service indications.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestSatelliteListeningEnabled(boolean enable, int timeout, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Request to enable or disable the satellite service listening mode.\n     * Listening mode allows the satellite service to listen for incoming pages.\n     *\n     * @param enable True to enable satellite listening mode and false to disable.\n     * @param timeout How long the satellite modem should wait for the next incoming page before\n     *                disabling listening mode.\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableCellularModemWhileSatelliteModeIsOn(boolean enabled, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Allow cellular modem scanning while satellite mode is on.\n     * @param enabled  {@code true} to enable cellular modem while satellite mode is on\n     * and {@code false} to disable\n     * @param resultCallback The callback to receive the error code result of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestSatelliteEnabled(boolean enableSatellite, boolean enableDemoMode, boolean isEmergency, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Request to enable or disable the satellite modem and demo mode. If the satellite modem is\n     * enabled, this may also disable the cellular modem, and if the satellite modem is disabled,\n     * this may also re-enable the cellular modem.\n     *\n     * @param enableSatellite True to enable the satellite modem and false to disable.\n     * @param enableDemoMode True to enable demo mode and false to disable.\n     * @param isEmergency To specify the satellite is enabled for emergency session and false for\n     * non emergency session. Note: it is possible that a emergency session started get converted\n     * to a non emergency session and vice versa.\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestIsSatelliteEnabled(@NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite modem is enabled.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *                       This must only be sent when the result is not\n     *                       SatelliteResult#SATELLITE_RESULT_SUCCESS.\n     * @param callback If the result is SatelliteResult#SATELLITE_RESULT_SUCCESS, the callback to\n     *                 receive whether the satellite modem is enabled.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestIsSatelliteSupported(@NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite service is supported on the device.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *                       This must only be sent when the result is not\n     *                       SatelliteResult#SATELLITE_RESULT_SUCCESS.\n     * @param callback If the result is SatelliteResult#SATELLITE_RESULT_SUCCESS, the callback to\n     *                 receive whether the satellite service is supported on the device.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestSatelliteCapabilities(@NonNull IIntegerConsumer resultCallback, @NonNull ISatelliteCapabilitiesConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the SatelliteCapabilities of the satellite service.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *                       This must only be sent when the result is not\n     *                       SatelliteResult#SATELLITE_RESULT_SUCCESS.\n     * @param callback If the result is SatelliteResult#SATELLITE_RESULT_SUCCESS, the callback to\n     *                 receive the SatelliteCapabilities of the satellite service.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startSendingSatellitePointingInfo(@NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * User started pointing to the satellite.\n     * The satellite service should report the satellite pointing info via\n     * ISatelliteListener#onSatellitePositionChanged as the user device/satellite moves.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopSendingSatellitePointingInfo(@NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * User stopped pointing to the satellite.\n     * The satellite service should stop reporting satellite pointing info to the framework.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void provisionSatelliteService(@NonNull String token, @NonNull byte[] provisionData, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Provision the device with a satellite provider.\n     * This is needed if the provider allows dynamic registration.\n     * Once provisioned, ISatelliteListener#onSatelliteProvisionStateChanged should report true.\n     *\n     * @param token The token to be used as a unique identifier for provisioning with satellite\n     *              gateway.\n     * @param provisionData Data from the provisioning app that can be used by provisioning\n     *                      server\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_ABORTED\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_TIMEOUT\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deprovisionSatelliteService(@NonNull String token, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Deprovision the device with the satellite provider.\n     * This is needed if the provider allows dynamic registration.\n     * Once deprovisioned, ISatelliteListener#onSatelliteProvisionStateChanged should report false.\n     *\n     * @param token The token of the device/subscription to be deprovisioned.\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_ABORTED\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_TIMEOUT\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestIsSatelliteProvisioned(@NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether this device is provisioned with a satellite provider.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *                       This must only be sent when the result is not\n     *                       SatelliteResult#SATELLITE_RESULT_SUCCESS.\n     * @param callback If the result is SatelliteResult#SATELLITE_RESULT_SUCCESS, the callback to\n     *                 receive whether this device is provisioned with a satellite provider.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pollPendingSatelliteDatagrams(@NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Poll the pending datagrams to be received over satellite.\n     * The satellite service should check if there are any pending datagrams to be received over\n     * satellite and report them via ISatelliteListener#onSatelliteDatagramsReceived.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     *   SatelliteResult:SATELLITE_RESULT_ACCESS_BARRED\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_TIMEOUT\n     *   SatelliteResult:SATELLITE_RESULT_NOT_REACHABLE\n     *   SatelliteResult:SATELLITE_RESULT_NOT_AUTHORIZED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendSatelliteDatagram(@NonNull SatelliteDatagram datagram, boolean isEmergency, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Send datagram over satellite.\n     *\n     * @param datagram Datagram to send in byte format.\n     * @param isEmergency Whether this is an emergency datagram.\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_ABORTED\n     *   SatelliteResult:SATELLITE_RESULT_ACCESS_BARRED\n     *   SatelliteResult:SATELLITE_RESULT_NETWORK_TIMEOUT\n     *   SatelliteResult:SATELLITE_RESULT_NOT_REACHABLE\n     *   SatelliteResult:SATELLITE_RESULT_NOT_AUTHORIZED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestSatelliteModemState(@NonNull IIntegerConsumer resultCallback, @NonNull IIntegerConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request the current satellite modem state.\n     * The satellite service should report the current satellite modem state via\n     * ISatelliteListener#onSatelliteModemStateChanged.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *                       This must only be sent when the result is not\n     *                       SatelliteResult#SATELLITE_RESULT_SUCCESS.\n     * @param callback If the result is SatelliteResult#SATELLITE_RESULT_SUCCESS, the callback to\n     *                 receive the current satellite modem state.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestTimeForNextSatelliteVisibility(@NonNull IIntegerConsumer resultCallback, @NonNull IIntegerConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the time after which the satellite will be visible. This is an int\n     * representing the duration in seconds after which the satellite will be visible.\n     * This will return 0 if the satellite is currently visible.\n     *\n     * @param resultCallback The callback to receive the error code result of the operation.\n     *                       This must only be sent when the result is not\n     *                       SatelliteResult#SATELLITE_RESULT_SUCCESS.\n     * @param callback If the result is SatelliteResult#SATELLITE_RESULT_SUCCESS, the callback to\n     *                 receive the time after which the satellite will be visible.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_SERVICE_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSatellitePlmn(@NonNull int simLogicalSlotIndex, @NonNull List<String> carrierPlmnList, @NonNull List<String> allSatellitePlmnList, @NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Set the non-terrestrial PLMN with lower priority than terrestrial networks.\n     * MCC/MNC broadcast by the non-terrestrial networks may not be included in OPLMNwACT file on\n     * SIM profile. Acquisition of satellite based system is lower priority to terrestrial\n     * networks. UE shall make all attempts to acquire terrestrial service prior to camping on\n     * satellite LTE service.\n     *\n     * @param simLogicalSlotIndex Indicates the SIM logical slot index to which this API will be\n     * applied. The modem will use this information to determine the relevant carrier.\n     * @param resultCallback The callback to receive the error code result of the operation.\n     * @param carrierPlmnList The list of roaming PLMN used for connecting to satellite networks\n     *                        supported by user subscription.\n     * @param allSatellitePlmnList Modem should use the allSatellitePlmnList to identify satellite\n     *                             PLMNs that are not supported by the carrier and make sure not to\n     *                             attach to them.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:NONE\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_ARGUMENTS\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:MODEM_ERR\n     *   SatelliteResult:SATELLITE_RESULT_NO_RESOURCES\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSatelliteEnabledForCarrier(@NonNull int simLogicalSlotIndex, @NonNull boolean satelliteEnabled, @NonNull IIntegerConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to enable or disable carrier supported satellite plmn scan and attach by modem.\n     * Refer {@link #setSatellitePlmn} for the details of satellite PLMN scanning process.\n     *\n     * @param simLogicalSlotIndex Indicates the SIM logical slot index to which this API will be\n     * applied. The modem will use this information to determine the relevant carrier.\n     * @param satelliteEnabled {@code true} to enable satellite, {@code false} to disable satellite.\n     * @param callback {@code true} to enable satellite, {@code false} to disable satellite.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     ",
    "links" : [ "#setSatellitePlmn" ]
  }, {
    "name" : "public void requestIsSatelliteEnabledForCarrier(@NonNull int simLogicalSlotIndex, @NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite is enabled in the cellular modem associated with a\n     * carrier.\n     *\n     * @param simLogicalSlotIndex Indicates the SIM logical slot index to which this API will be\n     * applied. The modem will use this information to determine the relevant carrier.\n     * @param resultCallback The callback to receive the error code result of the operation.\n     * @param callback {@code true} to satellite enabled, {@code false} to satellite disabled.\n     *\n     * Valid result codes returned:\n     *   SatelliteResult:SATELLITE_RESULT_SUCCESS\n     *   SatelliteResult:SATELLITE_RESULT_INVALID_MODEM_STATE\n     *   SatelliteResult:SATELLITE_RESULT_MODEM_ERROR\n     *   SatelliteResult:SATELLITE_RESULT_RADIO_NOT_AVAILABLE\n     *   SatelliteResult:SATELLITE_RESULT_REQUEST_NOT_SUPPORTED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestSignalStrength(@NonNull IIntegerConsumer resultCallback, INtnSignalStrengthConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the signal strength of the satellite connection.\n     *\n     * @param resultCallback The {@link SatelliteError} result of the operation.\n     * @param callback The callback to handle the NTN signal strength changed event.\n     ",
    "links" : [ "SatelliteError" ]
  }, {
    "name" : "public void startSendingNtnSignalStrength(@NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Requests to deliver signal strength changed events through the\n     * {@link ISatelliteListener#onNtnSignalStrengthChanged(NtnSignalStrength ntnSignalStrength)}\n     * callback.\n     *\n     * @param resultCallback The {@link SatelliteError} result of the operation.\n     ",
    "links" : [ "SatelliteError", "#onNtnSignalStrengthChanged(NtnSignalStrength" ]
  }, {
    "name" : "public void stopSendingNtnSignalStrength(@NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Requests to stop signal strength changed events\n     *\n     * @param resultCallback The {@link SatelliteError} result of the operation.\n     ",
    "links" : [ "SatelliteError" ]
  }, {
    "name" : "public void abortSendingSatelliteDatagrams(@NonNull IIntegerConsumer resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Requests to abort sending satellite datagrams\n     *\n     * @param resultCallback The {@link SatelliteError} result of the operation.\n     ",
    "links" : [ "SatelliteError" ]
  } ],
  "methodNames" : [ "public final IBinder getBinder()", "public void setSatelliteListener(@NonNull ISatelliteListener listener)", "public void requestSatelliteListeningEnabled(boolean enable, int timeout, @NonNull IIntegerConsumer resultCallback)", "public void enableCellularModemWhileSatelliteModeIsOn(boolean enabled, @NonNull IIntegerConsumer resultCallback)", "public void requestSatelliteEnabled(boolean enableSatellite, boolean enableDemoMode, boolean isEmergency, @NonNull IIntegerConsumer resultCallback)", "public void requestIsSatelliteEnabled(@NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)", "public void requestIsSatelliteSupported(@NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)", "public void requestSatelliteCapabilities(@NonNull IIntegerConsumer resultCallback, @NonNull ISatelliteCapabilitiesConsumer callback)", "public void startSendingSatellitePointingInfo(@NonNull IIntegerConsumer resultCallback)", "public void stopSendingSatellitePointingInfo(@NonNull IIntegerConsumer resultCallback)", "public void provisionSatelliteService(@NonNull String token, @NonNull byte[] provisionData, @NonNull IIntegerConsumer resultCallback)", "public void deprovisionSatelliteService(@NonNull String token, @NonNull IIntegerConsumer resultCallback)", "public void requestIsSatelliteProvisioned(@NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)", "public void pollPendingSatelliteDatagrams(@NonNull IIntegerConsumer resultCallback)", "public void sendSatelliteDatagram(@NonNull SatelliteDatagram datagram, boolean isEmergency, @NonNull IIntegerConsumer resultCallback)", "public void requestSatelliteModemState(@NonNull IIntegerConsumer resultCallback, @NonNull IIntegerConsumer callback)", "public void requestTimeForNextSatelliteVisibility(@NonNull IIntegerConsumer resultCallback, @NonNull IIntegerConsumer callback)", "public void setSatellitePlmn(@NonNull int simLogicalSlotIndex, @NonNull List<String> carrierPlmnList, @NonNull List<String> allSatellitePlmnList, @NonNull IIntegerConsumer resultCallback)", "public void setSatelliteEnabledForCarrier(@NonNull int simLogicalSlotIndex, @NonNull boolean satelliteEnabled, @NonNull IIntegerConsumer callback)", "public void requestIsSatelliteEnabledForCarrier(@NonNull int simLogicalSlotIndex, @NonNull IIntegerConsumer resultCallback, @NonNull IBooleanConsumer callback)", "public void requestSignalStrength(@NonNull IIntegerConsumer resultCallback, INtnSignalStrengthConsumer callback)", "public void startSendingNtnSignalStrength(@NonNull IIntegerConsumer resultCallback)", "public void stopSendingNtnSignalStrength(@NonNull IIntegerConsumer resultCallback)", "public void abortSendingSatelliteDatagrams(@NonNull IIntegerConsumer resultCallback)" ],
  "variableNames" : [ "TAG", "mExecutor", "mBinder" ]
}