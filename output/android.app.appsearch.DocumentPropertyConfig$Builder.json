{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/AppSearchSchema.java",
  "packageName" : "android.app.appsearch",
  "className" : "Builder",
  "comment" : " Builder for {@link DocumentPropertyConfig}. ",
  "links" : [ "DocumentPropertyConfig" ],
  "variables" : [ {
    "name" : "mPropertyName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSchemaType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCardinality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldIndexNestedProperties",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndexableNestedPropertiesList",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DocumentPropertyConfig.Builder setDescription(@NonNull String description)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Sets a natural language description of this property.\n             *\n             * <p>For more details about the description field, see {@link\n             * AppSearchSchema.PropertyConfig#getDescription}.\n             ",
    "links" : [ "AppSearchSchema.PropertyConfig#getDescription" ]
  }, {
    "name" : "public DocumentPropertyConfig.Builder setCardinality(@Cardinality int cardinality)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Sets the cardinality of the property (whether it is optional, required or repeated).\n             *\n             * <p>If this method is not called, the default cardinality is {@link\n             * PropertyConfig#CARDINALITY_OPTIONAL}.\n             ",
    "links" : [ "#CARDINALITY_OPTIONAL" ]
  }, {
    "name" : "public DocumentPropertyConfig.Builder setShouldIndexNestedProperties(boolean indexNestedProperties)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Configures whether properties in the nested document should be indexed according to\n             * that document's schema.\n             *\n             * <p>If false, the nested document's properties are not indexed regardless of its own\n             * schema.\n             *\n             * <p>To index a subset of properties from the nested document, set this to false and\n             * use {@link #addIndexableNestedProperties(Collection)}.\n             ",
    "links" : [ "#addIndexableNestedProperties(Collection)" ]
  }, {
    "name" : "public DocumentPropertyConfig.Builder addIndexableNestedProperties(@NonNull String... indexableNestedProperties)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Adds one or more properties for indexing from the nested document property.\n             *\n             * @see #addIndexableNestedProperties(Collection)\n             ",
    "links" : [ ]
  }, {
    "name" : "public DocumentPropertyConfig.Builder addIndexableNestedPropertyPaths(@NonNull PropertyPath... indexableNestedPropertyPaths)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Adds one or more property paths for indexing from the nested document property.\n             *\n             * @see #addIndexableNestedProperties(Collection)\n             ",
    "links" : [ ]
  }, {
    "name" : "public DocumentPropertyConfig.Builder addIndexableNestedProperties(@NonNull Collection<String> indexableNestedProperties)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Adds one or more properties for indexing from the nested document. The added property\n             * will be indexed according to that property's indexing configurations in the\n             * document's schema definition. All properties in this list will consume a sectionId\n             * regardless of its actual indexing config -- this includes properties added that do\n             * not actually exist, as well as properties that are not set as indexable in the nested\n             * schema type.\n             *\n             * <p>Input strings should follow the format of the property path for the nested\n             * property, with '.' as the path separator. This nested document's property name should\n             * not be included in the property path.\n             *\n             * <p>Ex. Consider an 'Organization' schema type which defines a nested document\n             * property 'address' (Address schema type), where Address has a nested document\n             * property 'country' (Country schema type with string 'name' property), and a string\n             * 'street' property. The 'street' and 'country's name' properties from the 'address'\n             * document property can be indexed for the 'Organization' schema type by calling:\n             *\n             * <pre>{@code\n             * OrganizationSchema.addProperty(\n             *                 new DocumentPropertyConfig.Builder(\"address\", \"Address\")\n             *                         .addIndexableNestedProperties(\"street\", \"country.name\")\n             *                         .build()).\n             * }</pre>\n             *\n             * <p>{@link DocumentPropertyConfig.Builder#setShouldIndexNestedProperties} is required\n             * to be false if any indexable nested property is added this way for the document\n             * property. Attempting to build a DocumentPropertyConfig when this is not true throws\n             * {@link IllegalArgumentException}.\n             ",
    "links" : [ "DocumentPropertyConfig.Builder#setShouldIndexNestedProperties", "IllegalArgumentException" ]
  }, {
    "name" : "public DocumentPropertyConfig.Builder addIndexableNestedPropertyPaths(@NonNull Collection<PropertyPath> indexableNestedPropertyPaths)",
    "returnType" : "DocumentPropertyConfig.Builder",
    "comment" : "\n             * Adds one or more property paths for indexing from the nested document property.\n             *\n             * @see #addIndexableNestedProperties(Collection)\n             ",
    "links" : [ ]
  }, {
    "name" : "public DocumentPropertyConfig build()",
    "returnType" : "DocumentPropertyConfig",
    "comment" : "\n             * Constructs a new {@link PropertyConfig} from the contents of this builder.\n             *\n             * @throws IllegalArgumentException if the provided PropertyConfig sets {@link\n             *     #shouldIndexNestedProperties()} to true and has one or more properties defined\n             *     using {@link #addIndexableNestedProperties(Collection)}.\n             ",
    "links" : [ "#shouldIndexNestedProperties()", "#addIndexableNestedProperties(Collection)", "PropertyConfig" ]
  } ],
  "methodNames" : [ "public DocumentPropertyConfig.Builder setDescription(@NonNull String description)", "public DocumentPropertyConfig.Builder setCardinality(@Cardinality int cardinality)", "public DocumentPropertyConfig.Builder setShouldIndexNestedProperties(boolean indexNestedProperties)", "public DocumentPropertyConfig.Builder addIndexableNestedProperties(@NonNull String... indexableNestedProperties)", "public DocumentPropertyConfig.Builder addIndexableNestedPropertyPaths(@NonNull PropertyPath... indexableNestedPropertyPaths)", "public DocumentPropertyConfig.Builder addIndexableNestedProperties(@NonNull Collection<String> indexableNestedProperties)", "public DocumentPropertyConfig.Builder addIndexableNestedPropertyPaths(@NonNull Collection<PropertyPath> indexableNestedPropertyPaths)", "public DocumentPropertyConfig build()" ],
  "variableNames" : [ "mPropertyName", "mSchemaType", "mDescription", "mCardinality", "mShouldIndexNestedProperties", "mIndexableNestedPropertiesList" ]
}