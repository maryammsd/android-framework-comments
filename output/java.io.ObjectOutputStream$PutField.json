{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectOutputStream.java",
  "packageName" : "java.io",
  "className" : "PutField",
  "comment" : "\n     * Provide programmatic access to the persistent fields to be written\n     * to ObjectOutput.\n     *\n     * @since 1.2\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void put(String name, boolean val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named boolean field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>boolean</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, byte val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named byte field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>byte</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, char val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named char field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>char</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, short val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named short field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>short</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, int val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named int field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>int</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, long val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named long field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>long</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, float val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named float field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>float</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, double val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named double field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not\n         * <code>double</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void put(String name, Object val)",
    "returnType" : "void",
    "comment" : "\n         * Put the value of the named Object field into the persistent field.\n         *\n         * @param  name the name of the serializable field\n         * @param  val the value to assign to the field\n         *         (which may be <code>null</code>)\n         * @throws IllegalArgumentException if <code>name</code> does not\n         * match the name of a serializable field for the class whose fields\n         * are being written, or if the type of the named field is not a\n         * reference type\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void write(ObjectOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Write the data and fields to the specified ObjectOutput stream,\n         * which must be the same stream that produced this\n         * <code>PutField</code> object.\n         *\n         * @param  out the stream to write the data and fields to\n         * @throws IOException if I/O errors occur while writing to the\n         *         underlying stream\n         * @throws IllegalArgumentException if the specified stream is not\n         *         the same stream that produced this <code>PutField</code>\n         *         object\n         * @deprecated This method does not write the values contained by this\n         *         <code>PutField</code> object in a proper format, and may\n         *         result in corruption of the serialization stream.  The\n         *         correct way to write <code>PutField</code> data is by\n         *         calling the {@link java.io.ObjectOutputStream#writeFields()}\n         *         method.\n         ",
    "links" : [ "java.io.ObjectOutputStream#writeFields()" ]
  } ],
  "methodNames" : [ "public abstract void put(String name, boolean val)", "public abstract void put(String name, byte val)", "public abstract void put(String name, char val)", "public abstract void put(String name, short val)", "public abstract void put(String name, int val)", "public abstract void put(String name, long val)", "public abstract void put(String name, float val)", "public abstract void put(String name, double val)", "public abstract void put(String name, Object val)", "public abstract void write(ObjectOutput out) throws IOException" ],
  "variableNames" : [ ]
}