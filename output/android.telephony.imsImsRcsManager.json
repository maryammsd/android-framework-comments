{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/ImsRcsManager.java",
  "packageName" : "android.telephony.ims",
  "className" : "ImsRcsManager",
  "comment" : "\n * Manager for interfacing with the framework RCS services, including the User Capability Exchange\n * (UCE) service, as well as managing user settings.\n *\n * Use {@link ImsManager#getImsRcsManager(int)} to create an instance of this manager.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show the opt-in dialog for enabling or disabling RCS contact discovery\n     * using User Capability Exchange (UCE).\n     * <p>\n     * An application that depends on RCS contact discovery being enabled must send this intent\n     * using {@link Context#startActivity(Intent)} to ask the user to opt-in for contacts upload for\n     * capability exchange if it is currently disabled. Whether or not RCS contact discovery has\n     * been enabled by the user can be queried using {@link RcsUceAdapter#isUceSettingEnabled()}.\n     * <p>\n     * This intent will always be handled by the system, however the application should only send\n     * this Intent if the carrier supports RCS contact discovery, which can be queried using the key\n     * {@link CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL}. Otherwise, the RCS contact discovery\n     * opt-in dialog will not be shown.\n     * <p>\n     * Input: A mandatory {@link Settings#EXTRA_SUB_ID} extra containing the subscription that the\n     * setting will be be shown for.\n     * <p>\n     * Output: Nothing\n     * @see RcsUceAdapter\n     ",
    "links" : [ "Context#startActivity", "RcsUceAdapter#isUceSettingEnabled", "CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL", "Settings#EXTRA_SUB_ID" ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public RcsUceAdapter getUceAdapter()",
    "returnType" : "RcsUceAdapter",
    "comment" : "\n     * @return A {@link RcsUceAdapter} used for User Capability Exchange (UCE) operations for\n     * this subscription.\n     ",
    "links" : [ "RcsUceAdapter" ]
  }, {
    "name" : "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : " @Override add back to RegistrationManager interface once public.",
    "links" : [ ]
  }, {
    "name" : "public void unregisterImsRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)",
    "returnType" : "void",
    "comment" : " @Override add back to RegistrationManager interface once public.",
    "links" : [ ]
  }, {
    "name" : "public void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @RegistrationManager.ImsRegistrationState Consumer<Integer> stateCallback)",
    "returnType" : "void",
    "comment" : " @Override add back to RegistrationManager interface once public.",
    "links" : [ ]
  }, {
    "name" : "public void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerRcsAvailabilityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull AvailabilityCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers an {@link AvailabilityCallback} with the system, which will provide RCS\n     * availability updates for the subscription specified.\n     *\n     * Use {@link SubscriptionManager.OnSubscriptionsChangedListener} to listen to\n     * subscription changed events and call\n     * {@link #unregisterRcsAvailabilityCallback(AvailabilityCallback)} to clean up after a\n     * subscription is removed.\n     * <p>\n     * When the callback is registered, it will initiate the callback c to be called with the\n     * current capabilities.\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param c The RCS {@link AvailabilityCallback} to be registered.\n     * @see #unregisterRcsAvailabilityCallback(AvailabilityCallback)\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link ImsRcsManager} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "AvailabilityCallback", "SubscriptionManager.OnSubscriptionsChangedListener", "#unregisterRcsAvailabilityCallback", "AvailabilityCallback", "ImsRcsManager", "ImsException#getCode" ]
  }, {
    "name" : "public void unregisterRcsAvailabilityCallback(@NonNull AvailabilityCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing RCS {@link AvailabilityCallback}.\n     * <p>\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be unregistered. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     * @param c The RCS {@link AvailabilityCallback} to be removed.\n     * @see #registerRcsAvailabilityCallback(Executor, AvailabilityCallback)\n     * @throws ImsException if the IMS service is not available when calling this method.\n     * See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "AvailabilityCallback", "AvailabilityCallback", "ImsException#getCode" ]
  }, {
    "name" : "public boolean isCapable(@RcsFeature.RcsImsCapabilities.RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech) throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * Query for the capability of an IMS RCS service provided by the framework.\n     * <p>\n     * This only reports the status of RCS capabilities provided by the framework, not necessarily\n     * RCS capabilities provided over-the-top by applications.\n     *\n     * @param capability The RCS capability to query.\n     * @param radioTech The radio tech that this capability failed for, defined as\n     * {@link ImsRegistrationImplBase#REGISTRATION_TECH_LTE} or\n     * {@link ImsRegistrationImplBase#REGISTRATION_TECH_IWLAN}.\n     * @return true if the RCS capability is capable for this subscription, false otherwise. This\n     * does not necessarily mean that we are registered for IMS and the capability is available, but\n     * rather the subscription is capable of this service over IMS.\n     * @see #isAvailable(int)\n     * @see android.telephony.CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL\n     * @throws ImsException if the IMS service is not available when calling this method.\n     * See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "ImsRegistrationImplBase#REGISTRATION_TECH_LTE", "ImsRegistrationImplBase#REGISTRATION_TECH_IWLAN", "ImsException#getCode" ]
  }, {
    "name" : "public boolean isAvailable(@RcsFeature.RcsImsCapabilities.RcsImsCapabilityFlag int capability) throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * Query the availability of an IMS RCS capability.\n     * <p>\n     * This only reports the status of RCS capabilities provided by the framework, not necessarily\n     * RCS capabilities provided by over-the-top by applications.\n     *\n     * @param capability the RCS capability to query.\n     * @return true if the RCS capability is currently available for the associated subscription,\n     * false otherwise. If the capability is available, IMS is registered and the service is\n     * currently available over IMS.\n     * @see #isCapable(int, int)\n     * @throws ImsException if the IMS service is not available when calling this method.\n     * See {@link ImsException#getCode()} for more information on the error codes.\n     * @hide\n     ",
    "links" : [ "ImsException#getCode" ]
  }, {
    "name" : "private IImsRcsController getIImsRcsController()",
    "returnType" : "IImsRcsController",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN", "mSubId", "mContext" ],
  "methodNames" : [ "public RcsUceAdapter getUceAdapter()", "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException", "public void unregisterImsRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)", "public void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @RegistrationManager.ImsRegistrationState Consumer<Integer> stateCallback)", "public void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)", "public void registerRcsAvailabilityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull AvailabilityCallback c) throws ImsException", "public void unregisterRcsAvailabilityCallback(@NonNull AvailabilityCallback c) throws ImsException", "public boolean isCapable(@RcsFeature.RcsImsCapabilities.RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech) throws ImsException", "public boolean isAvailable(@RcsFeature.RcsImsCapabilities.RcsImsCapabilityFlag int capability) throws ImsException", "private IImsRcsController getIImsRcsController()" ]
}