{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/format/DateTimeTextProvider.java",
  "packageName" : "java.time.format",
  "className" : "DateTimeTextProvider",
  "comment" : "\n * A provider to obtain the textual form of a date-time field.\n *\n * @implSpec\n * Implementations must be thread-safe.\n * Implementations should cache the textual information.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CACHE",
    "type" : "ConcurrentMap<Entry<TemporalField, Locale>, Object>",
    "comment" : " Cache. ",
    "links" : [ ]
  }, {
    "name" : "COMPARATOR",
    "type" : "Comparator<Entry<String, Long>>",
    "comment" : " Comparator. ",
    "links" : [ ]
  }, {
    "name" : "INSTANCE",
    "type" : "DateTimeTextProvider",
    "comment" : " Singleton instance",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static DateTimeTextProvider getInstance()",
    "returnType" : "DateTimeTextProvider",
    "comment" : "\n     * Gets the provider of text.\n     *\n     * @return the provider, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getText(TemporalField field, long value, TextStyle style, Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Gets the text for the specified field, locale and style\n     * for the purpose of formatting.\n     * <p>\n     * The text associated with the value is returned.\n     * The null return value should be used if there is no applicable text, or\n     * if the text would be a numeric representation of the value.\n     *\n     * @param field  the field to get text for, not null\n     * @param value  the field value to get text for, not null\n     * @param style  the style to get text for, not null\n     * @param locale  the locale to get text for, not null\n     * @return the text for the field value, null if no text found\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getText(Chronology chrono, TemporalField field, long value, TextStyle style, Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Gets the text for the specified chrono, field, locale and style\n     * for the purpose of formatting.\n     * <p>\n     * The text associated with the value is returned.\n     * The null return value should be used if there is no applicable text, or\n     * if the text would be a numeric representation of the value.\n     *\n     * @param chrono  the Chronology to get text for, not null\n     * @param field  the field to get text for, not null\n     * @param value  the field value to get text for, not null\n     * @param style  the style to get text for, not null\n     * @param locale  the locale to get text for, not null\n     * @return the text for the field value, null if no text found\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Entry<String, Long>> getTextIterator(TemporalField field, TextStyle style, Locale locale)",
    "returnType" : "Iterator<Entry<String, Long>>",
    "comment" : "\n     * Gets an iterator of text to field for the specified field, locale and style\n     * for the purpose of parsing.\n     * <p>\n     * The iterator must be returned in order from the longest text to the shortest.\n     * <p>\n     * The null return value should be used if there is no applicable parsable text, or\n     * if the text would be a numeric representation of the value.\n     * Text can only be parsed if all the values for that field-style-locale combination are unique.\n     *\n     * @param field  the field to get text for, not null\n     * @param style  the style to get text for, null for all parsable text\n     * @param locale  the locale to get text for, not null\n     * @return the iterator of text to field pairs, in order from longest text to shortest text,\n     *  null if the field or style is not parsable\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Entry<String, Long>> getTextIterator(Chronology chrono, TemporalField field, TextStyle style, Locale locale)",
    "returnType" : "Iterator<Entry<String, Long>>",
    "comment" : "\n     * Gets an iterator of text to field for the specified chrono, field, locale and style\n     * for the purpose of parsing.\n     * <p>\n     * The iterator must be returned in order from the longest text to the shortest.\n     * <p>\n     * The null return value should be used if there is no applicable parsable text, or\n     * if the text would be a numeric representation of the value.\n     * Text can only be parsed if all the values for that field-style-locale combination are unique.\n     *\n     * @param chrono  the Chronology to get text for, not null\n     * @param field  the field to get text for, not null\n     * @param style  the style to get text for, null for all parsable text\n     * @param locale  the locale to get text for, not null\n     * @return the iterator of text to field pairs, in order from longest text to shortest text,\n     *  null if the field or style is not parsable\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object findStore(TemporalField field, Locale locale)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int toWeekDay(int calWeekDay)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object createStore(TemporalField field, Locale locale)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Map<Long, String> extractQuarters(String[] quarters)",
    "returnType" : "Map<Long, String>",
    "comment" : " BEGIN Android-added: Extracts a Map of quarter names.",
    "links" : [ ]
  }, {
    "name" : "private static Entry<A, B> createEntry(A text, B field)",
    "returnType" : "Entry<A, B>",
    "comment" : "\n     * Helper method to create an immutable entry.\n     *\n     * @param text  the text, not null\n     * @param field  the field, not null\n     * @return the entry, not null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static DateTimeTextProvider getInstance()", "public String getText(TemporalField field, long value, TextStyle style, Locale locale)", "public String getText(Chronology chrono, TemporalField field, long value, TextStyle style, Locale locale)", "public Iterator<Entry<String, Long>> getTextIterator(TemporalField field, TextStyle style, Locale locale)", "public Iterator<Entry<String, Long>> getTextIterator(Chronology chrono, TemporalField field, TextStyle style, Locale locale)", "private Object findStore(TemporalField field, Locale locale)", "private static int toWeekDay(int calWeekDay)", "private Object createStore(TemporalField field, Locale locale)", "private static Map<Long, String> extractQuarters(String[] quarters)", "private static Entry<A, B> createEntry(A text, B field)" ],
  "variableNames" : [ "CACHE", "COMPARATOR", "INSTANCE" ]
}