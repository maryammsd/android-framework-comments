{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/GregorianCalendar.java",
  "packageName" : "android.icu.util",
  "className" : "GregorianCalendar",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.util.GregorianCalendar}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p><code>GregorianCalendar</code> is a concrete subclass of\n * {@link Calendar}\n * and provides the standard calendar used by most of the world.\n *\n * <p>The standard (Gregorian) calendar has 2 eras, BC and AD.\n *\n * <p>This implementation handles a single discontinuity, which corresponds by\n * default to the date the Gregorian calendar was instituted (October 15, 1582\n * in some countries, later in others).  The cutover date may be changed by the\n * caller by calling <code>setGregorianChange()</code>.\n *\n * <p>Historically, in those countries which adopted the Gregorian calendar first,\n * October 4, 1582 was thus followed by October 15, 1582. This calendar models\n * this correctly.  Before the Gregorian cutover, <code>GregorianCalendar</code>\n * implements the Julian calendar.  The only difference between the Gregorian\n * and the Julian calendar is the leap year rule. The Julian calendar specifies\n * leap years every four years, whereas the Gregorian calendar omits century\n * years which are not divisible by 400.\n *\n * <p><code>GregorianCalendar</code> implements <em>proleptic</em> Gregorian and\n * Julian calendars. That is, dates are computed by extrapolating the current\n * rules indefinitely far backward and forward in time. As a result,\n * <code>GregorianCalendar</code> may be used for all years to generate\n * meaningful and consistent results. However, dates obtained using\n * <code>GregorianCalendar</code> are historically accurate only from March 1, 4\n * AD onward, when modern Julian calendar rules were adopted.  Before this date,\n * leap year rules were applied irregularly, and before 45 BC the Julian\n * calendar did not even exist.\n *\n * <p>Prior to the institution of the Gregorian calendar, New Year's Day was\n * March 25. To avoid confusion, this calendar always uses January 1. A manual\n * adjustment may be made if desired for dates that are prior to the Gregorian\n * changeover and which fall between January 1 and March 24.\n *\n * <p>Values calculated for the <code>WEEK_OF_YEAR</code> field range from 1 to\n * 53.  Week 1 for a year is the earliest seven day period starting on\n * <code>getFirstDayOfWeek()</code> that contains at least\n * <code>getMinimalDaysInFirstWeek()</code> days from that year.  It thus\n * depends on the values of <code>getMinimalDaysInFirstWeek()</code>,\n * <code>getFirstDayOfWeek()</code>, and the day of the week of January 1.\n * Weeks between week 1 of one year and week 1 of the following year are\n * numbered sequentially from 2 to 52 or 53 (as needed).\n\n * <p>For example, January 1, 1998 was a Thursday.  If\n * <code>getFirstDayOfWeek()</code> is <code>MONDAY</code> and\n * <code>getMinimalDaysInFirstWeek()</code> is 4 (these are the values\n * reflecting ISO 8601 and many national standards), then week 1 of 1998 starts\n * on December 29, 1997, and ends on January 4, 1998.  If, however,\n * <code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>, then week 1 of 1998\n * starts on January 4, 1998, and ends on January 10, 1998; the first three days\n * of 1998 then are part of week 53 of 1997.\n *\n * <p>Values calculated for the <code>WEEK_OF_MONTH</code> field range from 0 or\n * 1 to 4 or 5.  Week 1 of a month (the days with <code>WEEK_OF_MONTH =\n * 1</code>) is the earliest set of at least\n * <code>getMinimalDaysInFirstWeek()</code> contiguous days in that month,\n * ending on the day before <code>getFirstDayOfWeek()</code>.  Unlike\n * week 1 of a year, week 1 of a month may be shorter than 7 days, need\n * not start on <code>getFirstDayOfWeek()</code>, and will not include days of\n * the previous month.  Days of a month before week 1 have a\n * <code>WEEK_OF_MONTH</code> of 0.\n *\n * <p>For example, if <code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>\n * and <code>getMinimalDaysInFirstWeek()</code> is 4, then the first week of\n * January 1998 is Sunday, January 4 through Saturday, January 10.  These days\n * have a <code>WEEK_OF_MONTH</code> of 1.  Thursday, January 1 through\n * Saturday, January 3 have a <code>WEEK_OF_MONTH</code> of 0.  If\n * <code>getMinimalDaysInFirstWeek()</code> is changed to 3, then January 1\n * through January 3 have a <code>WEEK_OF_MONTH</code> of 1.\n *\n * <p>\n * <strong>Example:</strong>\n * <blockquote>\n * <pre>\n * // get the supported ids for GMT-08:00 (Pacific Standard Time)\n * String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);\n * // if no ids were returned, something is wrong. get out.\n * if (ids.length == 0)\n *     System.exit(0);\n *\n *  // begin output\n * System.out.println(\"Current Time\");\n *\n * // create a Pacific Standard Time time zone\n * SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);\n *\n * // set up rules for daylight savings time\n * pdt.setStartRule(Calendar.MARCH, 2, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n * pdt.setEndRule(Calendar.NOVEMBER, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n *\n * // create a GregorianCalendar with the Pacific Daylight time zone\n * // and the current date and time\n * Calendar calendar = new GregorianCalendar(pdt);\n * Date trialTime = new Date();\n * calendar.setTime(trialTime);\n *\n * // print out a bunch of interesting things\n * System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));\n * System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));\n * System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));\n * System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));\n * System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));\n * System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));\n * System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));\n * System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));\n * System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));\n * System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"\n *                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n * System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));\n * System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));\n * System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));\n * System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));\n * System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));\n * System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));\n * System.out.println(\"ZONE_OFFSET: \"\n *                    + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));\n * System.out.println(\"DST_OFFSET: \"\n *                    + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));\n\n * System.out.println(\"Current Time, with hour reset to 3\");\n * calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override\n * calendar.set(Calendar.HOUR, 3);\n * System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));\n * System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));\n * System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));\n * System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));\n * System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));\n * System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));\n * System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));\n * System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));\n * System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));\n * System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"\n *                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n * System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));\n * System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));\n * System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));\n * System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));\n * System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));\n * System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));\n * System.out.println(\"ZONE_OFFSET: \"\n *        + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours\n * System.out.println(\"DST_OFFSET: \"\n *        + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours</pre>\n * </blockquote>\n * <p>\n * GregorianCalendar usually should be instantiated using \n * {@link android.icu.util.Calendar#getInstance(ULocale)} passing in a <code>ULocale</code>\n * with the tag <code>\"@calendar=gregorian\"</code>.</p>\n\n * @see          Calendar\n * @see          TimeZone\n * @author Deborah Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu\n ",
  "links" : [ "android.icu.util.Calendar#getInstance(ULocale)", "java.util.GregorianCalendar", "android.icu.util.Calendar" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " jdk1.4.2 serialver",
    "links" : [ ]
  }, {
    "name" : "BC",
    "type" : "int",
    "comment" : "\n     * Value of the <code>ERA</code> field indicating\n     * the period before the common era (before Christ), also known as BCE.\n     * The sequence of years at the transition from <code>BC</code> to <code>AD</code> is\n     * ..., 2 BC, 1 BC, 1 AD, 2 AD,...\n     * @see Calendar#ERA\n     ",
    "links" : [ ]
  }, {
    "name" : "AD",
    "type" : "int",
    "comment" : "\n     * Value of the <code>ERA</code> field indicating\n     * the common era (Anno Domini), also known as CE.\n     * The sequence of years at the transition from <code>BC</code> to <code>AD</code> is\n     * ..., 2 BC, 1 BC, 1 AD, 2 AD,...\n     * @see Calendar#ERA\n     ",
    "links" : [ ]
  }, {
    "name" : "EPOCH_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_COUNT",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIMITS",
    "type" : "int[][]",
    "comment" : "\n     * Old year limits were least max 292269054, max 292278994.\n     ",
    "links" : [ ]
  }, {
    "name" : "gregorianCutover",
    "type" : "long",
    "comment" : "\n     * The point at which the Gregorian calendar rules are used, measured in\n     * milliseconds from the standard epoch.  Default is October 15, 1582\n     * (Gregorian) 00:00:00 UTC or -12219292800000L.  For this value, October 4,\n     * 1582 (Julian) is followed by October 15, 1582 (Gregorian).  This\n     * corresponds to Julian day number 2299161.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "cutoverJulianDay",
    "type" : "int",
    "comment" : "\n     * Julian day number of the Gregorian cutover.\n     ",
    "links" : [ ]
  }, {
    "name" : "gregorianCutoverYear",
    "type" : "int",
    "comment" : "\n     * The year of the gregorianCutover, with 0 representing\n     * 1 BC, -1 representing 2 BC, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "isGregorian",
    "type" : "boolean",
    "comment" : "\n     * Used by handleComputeJulianDay() and handleComputeMonthStart().\n     ",
    "links" : [ ]
  }, {
    "name" : "invertGregorian",
    "type" : "boolean",
    "comment" : "\n     * Used by handleComputeJulianDay() and handleComputeMonthStart().\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected int handleGetLimit(int field, int limitType)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGregorianChange(Date date)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GregorianCalendar change date. This is the point when the switch\n     * from Julian dates to Gregorian dates occurred. Default is October 15,\n     * 1582. Previous to this, dates will be in the Julian calendar.\n     * <p>\n     * To obtain a pure Julian calendar, set the change date to\n     * <code>Date(Long.MAX_VALUE)</code>.  To obtain a pure Gregorian calendar,\n     * set the change date to <code>Date(Long.MIN_VALUE)</code>.\n     *\n     * @param date the given Gregorian cutover date.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Date getGregorianChange()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the Gregorian Calendar change date.  This is the point when the\n     * switch from Julian dates to Gregorian dates occurred. Default is\n     * October 15, 1582. Previous to this, dates will be in the Julian\n     * calendar.\n     * @return the Gregorian cutover date for this calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeapYear(int year)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the given year is a leap year. Returns true if the\n     * given year is a leap year.\n     * @param year the given year.\n     * @return true if the given year is a leap year; false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEquivalentTo(Calendar other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given Calendar object is equivalent to this\n     * one.  Calendar override.\n     *\n     * @param other the Calendar to be compared with this Calendar   \n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Override hashCode.\n     * Generates the hash code for the GregorianCalendar object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void roll(int field, int amount)",
    "returnType" : "void",
    "comment" : "\n     * Roll a field by a signed amount.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActualMinimum(int field)",
    "returnType" : "int",
    "comment" : "\n     * Return the minimum value that this field could have, given the current date.\n     * For the Gregorian calendar, this is the same as getMinimum() and getGreatestMinimum().\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActualMaximum(int field)",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum value that this field could have, given the current date.\n     * For example, with the date \"Feb 3, 1997\" and the DAY_OF_MONTH field, the actual\n     * maximum would be 28; for \"Feb 3, 1996\" it s 29.  Similarly for a Hebrew calendar,\n     * for some years the actual maximum for MONTH is 12, and for others 13.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean inDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the current time for this Calendar is in Daylight\n     * Savings Time.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetMonthLength(int extendedYear, int month)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetYearLength(int eyear)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void handleComputeFields(int julianDay)",
    "returnType" : "void",
    "comment" : "\n     * Override Calendar to compute several fields specific to the hybrid\n     * Gregorian-Julian calendar system.  These are:\n     *\n     * <ul><li>ERA\n     * <li>YEAR\n     * <li>MONTH\n     * <li>DAY_OF_MONTH\n     * <li>DAY_OF_YEAR\n     * <li>EXTENDED_YEAR</ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetExtendedYear()",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleComputeJulianDay(int bestField)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)",
    "returnType" : "int",
    "comment" : "\n     * Return JD of start of given month/year\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isEra0CountingBackward()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int handleGetLimit(int field, int limitType)", "public void setGregorianChange(Date date)", "public final Date getGregorianChange()", "public boolean isLeapYear(int year)", "public boolean isEquivalentTo(Calendar other)", "public int hashCode()", "public void roll(int field, int amount)", "public int getActualMinimum(int field)", "public int getActualMaximum(int field)", " boolean inDaylightTime()", "protected int handleGetMonthLength(int extendedYear, int month)", "protected int handleGetYearLength(int eyear)", "protected void handleComputeFields(int julianDay)", "protected int handleGetExtendedYear()", "protected int handleComputeJulianDay(int bestField)", "protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)", "public String getType()", "protected boolean isEra0CountingBackward()" ],
  "variableNames" : [ "serialVersionUID", "BC", "AD", "EPOCH_YEAR", "MONTH_COUNT", "LIMITS", "gregorianCutover", "cutoverJulianDay", "gregorianCutoverYear", "isGregorian", "invertGregorian" ]
}