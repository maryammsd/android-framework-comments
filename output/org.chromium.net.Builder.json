{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/QuicOptions.java",
  "packageName" : "org.chromium.net",
  "className" : "Builder",
  "comment" : " Builder for {@link QuicOptions}. ",
  "links" : [ "org.chromium.net.QuicOptions" ],
  "variables" : [ {
    "name" : "mQuicHostAllowlist",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabledQuicVersions",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionOptions",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientConnectionOptions",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInMemoryServerConfigsCacheSize",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandshakeUserAgent",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetryWithoutAltSvcOnQuicErrors",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableTlsZeroRtt",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreCryptoHandshakeIdleTimeoutSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoHandshakeTimeoutSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleConnectionTimeoutSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetransmittableOnWireTimeoutMillis",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseSessionsOnIpChange",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGoawaySessionsOnIpChange",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialBrokenServicePeriodSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncreaseBrokenServicePeriodExponentially",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelayJobsWithAvailableSpdySession",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraQuicheFlags",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addAllowedQuicHost(String quicHost)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a host to the QUIC allowlist.\n         *\n         * <p>If no hosts are specified, the per-host allowlist functionality is disabled.\n         * Otherwise, Cronet will only use QUIC when talking to hosts on the allowlist.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addEnabledQuicVersion(String enabledQuicVersion)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a QUIC version to the list of QUIC versions to enable.\n         *\n         * <p>If no versions are specified, Cronet will use a list of default QUIC versions.\n         *\n         * <p>The version format is specified by\n         * <a\n         * href=\"https://github.com/google/quiche/blob/main/quiche/quic/core/quic_versions.cc#L344\">QUICHE</a>.\n         * Outside of filtering out values known to be obsolete, Cronet doesn't process the versions\n         * anyhow and simply passes them along to QUICHE.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addConnectionOption(String connectionOption)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a QUIC tag to send in a QUIC handshake's connection options.\n         *\n         * <p>The QUIC tags should be presented as strings up to four letters long\n         * (for instance, {@code NBHD}).\n         *\n         * <p>As the QUIC tags are under active development and some are only relevant to the\n         * server, Cronet doesn't attempt to maintain a complete list of all supported QUIC flags as\n         * a part of the API. The flags. Flags supported by QUICHE, a QUIC implementation used by\n         * Cronet and Google servers, can be found <a\n         * href=https://github.com/google/quiche/blob/main/quiche/quic/core/crypto/crypto_protocol.h\">here</a>.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addClientConnectionOption(String clientConnectionOption)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a QUIC tag to send in a QUIC handshake's connection options that only affects\n         * the client.\n         *\n         * <p>See {@link #addConnectionOption(String)} for more details.\n         ",
    "links" : [ "#addConnectionOption(String)" ]
  }, {
    "name" : "public Builder setInMemoryServerConfigsCacheSize(int inMemoryServerConfigsCacheSize)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets how many server configurations (metadata like list of alt svc, whether QUIC is\n         * supported, etc.) should be held in memory.\n         *\n         * <p>If the storage path is set ({@link\n         * org.chromium.net.CronetEngine.Builder#setStoragePath(String)}, Cronet will also persist\n         * the server configurations on disk.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ "org.chromium.net.CronetEngine.Builder#setStoragePath(String)" ]
  }, {
    "name" : "public Builder setHandshakeUserAgent(String handshakeUserAgent)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the user agent to be used outside of HTTP requests (for example for QUIC\n         * handshakes).\n         *\n         * <p>To set the default user agent for HTTP requests, use\n         * {@link CronetEngine.Builder#setUserAgent(String)} instead.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ "CronetEngine.Builder#setUserAgent(String)" ]
  }, {
    "name" : "public Builder retryWithoutAltSvcOnQuicErrors(boolean retryWithoutAltSvcOnQuicErrors)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether requests that failed with a QUIC protocol errors should be retried without\n         * using any {@code alt-svc} servers.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder enableTlsZeroRtt(boolean enableTlsZeroRtt)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether TLS with 0-RTT should be enabled.\n         *\n         * <p>0-RTT is a performance optimization avoiding an extra round trip when resuming\n         * connections to a known server.\n         *\n         * @see <a href=\"https://blog.cloudflare.com/introducing-0-rtt/\">Cloudflare's 0-RTT\n         *         blogpost</a>\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPreCryptoHandshakeIdleTimeoutSeconds(long preCryptoHandshakeIdleTimeoutSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum idle time for a connection which hasn't completed a SSL handshake yet.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCryptoHandshakeTimeoutSeconds(long cryptoHandshakeTimeoutSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the timeout for a connection SSL handshake.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIdleConnectionTimeoutSeconds(long idleConnectionTimeoutSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum idle time for a connection.\n         *\n         * TODO what happens to connection that are idle for too long?\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRetransmittableOnWireTimeoutMillis(long retransmittableOnWireTimeoutMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum desired time between packets on wire.\n         *\n         * <p>When the retransmittable-on-wire time is exceeded Cronet will probe quality of the\n         * network using artificial traffic. Smaller timeouts will typically  result in faster\n         * discovery of a broken or degrading path, but also larger usage of resources (battery,\n         * data).\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder closeSessionsOnIpChange(boolean closeSessionsOnIpChange)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether QUIC sessions should be closed on IP address change.\n         *\n         * <p>Don't use in combination with connection migration\n         * (configured using {@link ConnectionMigrationOptions}).\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ "org.chromium.net.ConnectionMigrationOptions" ]
  }, {
    "name" : "public Builder goawaySessionsOnIpChange(boolean goawaySessionsOnIpChange)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether QUIC sessions should be goaway'd on IP address change.\n         *\n         * <p>Don't use in combination with connection migration\n         * (configured using {@link ConnectionMigrationOptions}).\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ "org.chromium.net.ConnectionMigrationOptions" ]
  }, {
    "name" : "public Builder setInitialBrokenServicePeriodSeconds(long initialBrokenServicePeriodSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the initial for which Cronet shouldn't attempt to use QUIC for a given server after\n         * the server's QUIC support turned out to be broken.\n         *\n         * <p>Once Cronet detects that a server advertises QUIC but doesn't actually speak it, it\n         * marks the server as broken and doesn't attempt to use QUIC when talking to the server for\n         * an amount of time. Once Cronet is past this point it will try using QUIC again. This is\n         * to balance short term (there's no point wasting resources to try QUIC if the server is\n         * broken) and long term (the breakage might have been temporary, using QUIC is generally\n         * beneficial) interests.\n         *\n         * <p>The delay is increased every unsuccessful consecutive retry. See\n         * {@link #increaseBrokenServicePeriodExponentially(boolean)} for details.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ "#increaseBrokenServicePeriodExponentially(boolean)" ]
  }, {
    "name" : "public Builder increaseBrokenServicePeriodExponentially(boolean increaseBrokenServicePeriodExponentially)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether the broken server period should scale exponentially.\n         *\n         * <p>If set to true, the initial delay (configurable\n         * by {@link #setInitialBrokenServicePeriodSeconds}) will be scaled exponentially for\n         * subsequent retries ({@code SCALING_FACTOR^NUM_TRIES * delay}). If false, the delay will\n         * scale linearly (SCALING_FACTOR * NUM_TRIES * delay).\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ "#setInitialBrokenServicePeriodSeconds" ]
  }, {
    "name" : "public Builder delayJobsWithAvailableSpdySession(boolean delayJobsWithAvailableSpdySession)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether Cronet should wait for the primary path (usually QUIC) to be ready even if\n         * there's a secondary path of reaching the server (SPDY / HTTP2) which is ready\n         * immediately.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addExtraQuicheFlag(String extraQuicheFlag)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an arbitrary QUICHE flag. Flags should be passed in {@code FLAG_NAME=FLAG_VALUE}\n         * format.\n         *\n         * See the <a href=\"https://github.com/google/quiche/\">QUICHE code base</a> for a full list\n         * of flags.\n         *\n         * @return the builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public QuicOptions build()",
    "returnType" : "QuicOptions",
    "comment" : "\n         * Creates and returns the final {@link QuicOptions} instance, based on the values\n         * in this builder.\n         ",
    "links" : [ "org.chromium.net.QuicOptions" ]
  } ],
  "methodNames" : [ "public Builder addAllowedQuicHost(String quicHost)", "public Builder addEnabledQuicVersion(String enabledQuicVersion)", "public Builder addConnectionOption(String connectionOption)", "public Builder addClientConnectionOption(String clientConnectionOption)", "public Builder setInMemoryServerConfigsCacheSize(int inMemoryServerConfigsCacheSize)", "public Builder setHandshakeUserAgent(String handshakeUserAgent)", "public Builder retryWithoutAltSvcOnQuicErrors(boolean retryWithoutAltSvcOnQuicErrors)", "public Builder enableTlsZeroRtt(boolean enableTlsZeroRtt)", "public Builder setPreCryptoHandshakeIdleTimeoutSeconds(long preCryptoHandshakeIdleTimeoutSeconds)", "public Builder setCryptoHandshakeTimeoutSeconds(long cryptoHandshakeTimeoutSeconds)", "public Builder setIdleConnectionTimeoutSeconds(long idleConnectionTimeoutSeconds)", "public Builder setRetransmittableOnWireTimeoutMillis(long retransmittableOnWireTimeoutMillis)", "public Builder closeSessionsOnIpChange(boolean closeSessionsOnIpChange)", "public Builder goawaySessionsOnIpChange(boolean goawaySessionsOnIpChange)", "public Builder setInitialBrokenServicePeriodSeconds(long initialBrokenServicePeriodSeconds)", "public Builder increaseBrokenServicePeriodExponentially(boolean increaseBrokenServicePeriodExponentially)", "public Builder delayJobsWithAvailableSpdySession(boolean delayJobsWithAvailableSpdySession)", "public Builder addExtraQuicheFlag(String extraQuicheFlag)", "public QuicOptions build()" ],
  "variableNames" : [ "mQuicHostAllowlist", "mEnabledQuicVersions", "mConnectionOptions", "mClientConnectionOptions", "mInMemoryServerConfigsCacheSize", "mHandshakeUserAgent", "mRetryWithoutAltSvcOnQuicErrors", "mEnableTlsZeroRtt", "mPreCryptoHandshakeIdleTimeoutSeconds", "mCryptoHandshakeTimeoutSeconds", "mIdleConnectionTimeoutSeconds", "mRetransmittableOnWireTimeoutMillis", "mCloseSessionsOnIpChange", "mGoawaySessionsOnIpChange", "mInitialBrokenServicePeriodSeconds", "mIncreaseBrokenServicePeriodExponentially", "mDelayJobsWithAvailableSpdySession", "mExtraQuicheFlags" ]
}