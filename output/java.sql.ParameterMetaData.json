{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/ParameterMetaData.java",
  "packageName" : "java.sql",
  "className" : "ParameterMetaData",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "parameterNoNulls",
    "type" : "int",
    "comment" : "\n     * The constant indicating that a\n     * parameter will not allow <code>NULL</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "parameterNullable",
    "type" : "int",
    "comment" : "\n     * The constant indicating that a\n     * parameter will allow <code>NULL</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "parameterNullableUnknown",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the\n     * nullability of a parameter is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "parameterModeUnknown",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the mode of the parameter is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "parameterModeIn",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the parameter's mode is IN.\n     ",
    "links" : [ ]
  }, {
    "name" : "parameterModeInOut",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the parameter's mode is INOUT.\n     ",
    "links" : [ ]
  }, {
    "name" : "parameterModeOut",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the parameter's mode is  OUT.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getParameterCount() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the number of parameters in the <code>PreparedStatement</code>\n     * object for which this <code>ParameterMetaData</code> object contains\n     * information.\n     *\n     * @return the number of parameters\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int isNullable(int param) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves whether null values are allowed in the designated parameter.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return the nullability status of the given parameter; one of\n     *        <code>ParameterMetaData.parameterNoNulls</code>,\n     *        <code>ParameterMetaData.parameterNullable</code>, or\n     *        <code>ParameterMetaData.parameterNullableUnknown</code>\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSigned(int param) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether values for the designated parameter can be signed numbers.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getPrecision(int param) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the designated parameter's specified column size.\n     *\n     * <P>The returned value represents the maximum column size for the given parameter.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. 0 is returned for data types where the\n     * column size is not applicable.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return precision\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getScale(int param) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the designated parameter's number of digits to right of the decimal point.\n     * 0 is returned for data types where the scale is not applicable.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return scale\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getParameterType(int param) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the designated parameter's SQL type.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return SQL type from <code>java.sql.Types</code>\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     * @see Types\n     ",
    "links" : [ ]
  }, {
    "name" : " String getParameterTypeName(int param) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the designated parameter's database-specific type name.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return type the name used by the database. If the parameter type is\n     * a user-defined type, then a fully-qualified type name is returned.\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " String getParameterClassName(int param) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the fully-qualified name of the Java class whose instances\n     * should be passed to the method <code>PreparedStatement.setObject</code>.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return the fully-qualified name of the class in the Java programming\n     *         language that would be used by the method\n     *         <code>PreparedStatement.setObject</code> to set the value\n     *         in the specified parameter. This is the class name used\n     *         for custom mapping.\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getParameterMode(int param) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the designated parameter's mode.\n     *\n     * @param param the first parameter is 1, the second is 2, ...\n     * @return mode of the parameter; one of\n     *        <code>ParameterMetaData.parameterModeIn</code>,\n     *        <code>ParameterMetaData.parameterModeOut</code>, or\n     *        <code>ParameterMetaData.parameterModeInOut</code>\n     *        <code>ParameterMetaData.parameterModeUnknown</code>.\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getParameterCount() throws SQLException", " int isNullable(int param) throws SQLException", " boolean isSigned(int param) throws SQLException", " int getPrecision(int param) throws SQLException", " int getScale(int param) throws SQLException", " int getParameterType(int param) throws SQLException", " String getParameterTypeName(int param) throws SQLException", " String getParameterClassName(int param) throws SQLException", " int getParameterMode(int param) throws SQLException" ],
  "variableNames" : [ "parameterNoNulls", "parameterNullable", "parameterNullableUnknown", "parameterModeUnknown", "parameterModeIn", "parameterModeInOut", "parameterModeOut" ]
}