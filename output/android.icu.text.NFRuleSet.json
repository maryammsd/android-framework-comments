{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFRuleSet.java",
  "packageName" : "android.icu.text",
  "className" : "NFRuleSet",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * The rule set's name\n     ",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "NFRule[]",
    "comment" : "\n     * The rule set's regular rules\n     ",
    "links" : [ ]
  }, {
    "name" : "nonNumericalRules",
    "type" : "NFRule[]",
    "comment" : "\n     * The rule set's non-numerical rules like negative, fractions, infinity and NaN\n     ",
    "links" : [ ]
  }, {
    "name" : "fractionRules",
    "type" : "LinkedList<NFRule>",
    "comment" : "\n     * These are a pile of fraction rules in declared order. They may have alternate\n     * ways to represent fractions.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_RULE_INDEX",
    "type" : "int",
    "comment" : " -x ",
    "links" : [ ]
  }, {
    "name" : "IMPROPER_FRACTION_RULE_INDEX",
    "type" : "int",
    "comment" : " x.x ",
    "links" : [ ]
  }, {
    "name" : "PROPER_FRACTION_RULE_INDEX",
    "type" : "int",
    "comment" : " 0.x ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_RULE_INDEX",
    "type" : "int",
    "comment" : " x.0 ",
    "links" : [ ]
  }, {
    "name" : "INFINITY_RULE_INDEX",
    "type" : "int",
    "comment" : " Inf ",
    "links" : [ ]
  }, {
    "name" : "NAN_RULE_INDEX",
    "type" : "int",
    "comment" : " NaN ",
    "links" : [ ]
  }, {
    "name" : "owner",
    "type" : "RuleBasedNumberFormat",
    "comment" : "\n     * The RuleBasedNumberFormat that owns this rule\n     ",
    "links" : [ ]
  }, {
    "name" : "isFractionRuleSet",
    "type" : "boolean",
    "comment" : "\n     * True if the rule set is a fraction rule set.  A fraction rule set\n     * is a rule set that is used to format the fractional part of a\n     * number.  It is called from a >> substitution in another rule set's\n     * fraction rule, and is only called upon to format values between\n     * 0 and 1.  A fraction rule set has different rule-selection\n     * behavior than a regular rule set.\n     ",
    "links" : [ ]
  }, {
    "name" : "isParseable",
    "type" : "boolean",
    "comment" : "\n     * True if the rule set is parseable.\n     ",
    "links" : [ ]
  }, {
    "name" : "RECURSION_LIMIT",
    "type" : "int",
    "comment" : "\n     * Limit of recursion. It's about a 64 bit number formatted in base 2.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void parseRules(String description)",
    "returnType" : "void",
    "comment" : "\n     * Construct the subordinate data structures used by this object.\n     * This function is called by the RuleBasedNumberFormat constructor\n     * after all the rule sets have been created to actually parse\n     * the description and build rules from it.  Since any rule set\n     * can refer to any other rule set, we have to have created all of\n     * them before we can create anything else.\n     * @param description The textual description of this rule set\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNonNumericalRule(NFRule rule)",
    "returnType" : "void",
    "comment" : "\n     * Set one of the non-numerical rules.\n     * @param rule The rule to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setBestFractionRule(int originalIndex, NFRule newRule, boolean rememberRule)",
    "returnType" : "void",
    "comment" : "\n     * Determine the best fraction rule to use. Rules matching the decimal point from\n     * DecimalFormatSymbols become the main set of rules to use.\n     * @param originalIndex The index into nonNumericalRules\n     * @param newRule The new rule to consider\n     * @param rememberRule Should the new rule be added to fractionRules.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeIntoFractionRuleSet()",
    "returnType" : "void",
    "comment" : "\n     * Flags this rule set as a fraction rule set.  This function is\n     * called during the construction process once we know this rule\n     * set is a fraction rule set.  We don't know a rule set is a\n     * fraction rule set until we see it used somewhere.  This function\n     * is not ad must not be called at any time other than during\n     * construction of a RuleBasedNumberFormat.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two rule sets for equality.\n     * @param that The other rule set\n     * @return true if the two rule sets are functionally equivalent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Builds a textual representation of a rule set.\n     * @return A textual representation of a rule set.  This won't\n     * necessarily be the same description that the rule set was\n     * constructed with, but it will produce the same results.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFractionSet()",
    "returnType" : "boolean",
    "comment" : "\n     * Says whether this rule set is a fraction rule set.\n     * @return true if this rule is a fraction rule set; false if it isn't\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the rule set's name\n     * @return The rule set's name\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPublic()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the rule set is public.\n     * @return true if the rule set is public\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isParseable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the rule set can be used for parsing.\n     * @return true if the rule set can be used for parsing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void format(long number, StringBuilder toInsertInto, int pos, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Formats a long.  Selects an appropriate rule and dispatches\n     * control to it.\n     * @param number The number being formatted\n     * @param toInsertInto The string where the result is to be placed\n     * @param pos The position in toInsertInto where the result of\n     * this operation is to be inserted\n     ",
    "links" : [ ]
  }, {
    "name" : "public void format(double number, StringBuilder toInsertInto, int pos, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Formats a double.  Selects an appropriate rule and dispatches\n     * control to it.\n     * @param number The number being formatted\n     * @param toInsertInto The string where the result is to be placed\n     * @param pos The position in toInsertInto where the result of\n     * this operation is to be inserted\n     ",
    "links" : [ ]
  }, {
    "name" : " NFRule findRule(double number)",
    "returnType" : "NFRule",
    "comment" : "\n     * Selects an appropriate rule for formatting the number.\n     * @param number The number being formatted.\n     * @return The rule that should be used to format it\n     ",
    "links" : [ ]
  }, {
    "name" : "private NFRule findNormalRule(long number)",
    "returnType" : "NFRule",
    "comment" : "\n     * If the value passed to findRule() is a positive integer, findRule()\n     * uses this function to select the appropriate rule.  The result will\n     * generally be the rule with the highest base value less than or equal\n     * to the number.  There is one exception to this: If that rule has\n     * two substitutions and a base value that is not an even multiple of\n     * its divisor, and the number itself IS an even multiple of the rule's\n     * divisor, then the result will be the rule that preceded the original\n     * result in the rule list.  (This behavior is known as the \"rollback\n     * rule\", and is used to handle optional text: a rule with optional\n     * text is represented internally as two rules, and the rollback rule\n     * selects appropriate between them.  This avoids things like \"two\n     * hundred zero\".)\n     * @param number The number being formatted\n     * @return The rule to use to format this number\n     ",
    "links" : [ ]
  }, {
    "name" : "private NFRule findFractionRuleSetRule(double number)",
    "returnType" : "NFRule",
    "comment" : "\n     * If this rule is a fraction rule set, this function is used by\n     * findRule() to select the most appropriate rule for formatting\n     * the number.  Basically, the base value of each rule in the rule\n     * set is treated as the denominator of a fraction.  Whichever\n     * denominator can produce the fraction closest in value to the\n     * number passed in is the result.  If there's a tie, the earlier\n     * one in the list wins.  (If there are two rules in a row with the\n     * same base value, the first one is used when the numerator of the\n     * fraction would be 1, and the second rule is used the rest of the\n     * time.\n     * @param number The number being formatted (which will always be\n     * a number between 0 and 1)\n     * @return The rule to use to format this number\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long lcm(long x, long y)",
    "returnType" : "long",
    "comment" : "\n     * Calculates the least common multiple of x and y.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number parse(String text, ParsePosition parsePosition, double upperBound, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * Parses a string.  Matches the string to be parsed against each\n     * of its rules (with a base value less than upperBound) and returns\n     * the value produced by the rule that matched the most characters\n     * in the source string.\n     * @param text The string to parse\n     * @param parsePosition The initial position is ignored and assumed\n     * to be 0.  On exit, this object has been updated to point to the\n     * first character position this rule set didn't consume.\n     * @param upperBound Limits the rules that can be allowed to match.\n     * Only rules whose base values are strictly less than upperBound\n     * are considered.\n     * @return The numerical result of parsing this string.  This will\n     * be the matching rule's base value, composed appropriately with\n     * the results of matching any of its substitutions.  The object\n     * will be an instance of Long if it's an integral value; otherwise,\n     * it will be an instance of Double.  This function always returns\n     * a valid object: If nothing matched the input string at all,\n     * this function returns Long.valueOf(0), and the parse position is\n     * left unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void parseRules(String description)", " void setNonNumericalRule(NFRule rule)", "private void setBestFractionRule(int originalIndex, NFRule newRule, boolean rememberRule)", "public void makeIntoFractionRuleSet()", "public boolean equals(Object that)", "public int hashCode()", "public String toString()", "public boolean isFractionSet()", "public String getName()", "public boolean isPublic()", "public boolean isParseable()", "public void format(long number, StringBuilder toInsertInto, int pos, int recursionCount)", "public void format(double number, StringBuilder toInsertInto, int pos, int recursionCount)", " NFRule findRule(double number)", "private NFRule findNormalRule(long number)", "private NFRule findFractionRuleSetRule(double number)", "private static long lcm(long x, long y)", "public Number parse(String text, ParsePosition parsePosition, double upperBound, int nonNumericalExecutedRuleMask)", "public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)" ],
  "variableNames" : [ "name", "rules", "nonNumericalRules", "fractionRules", "NEGATIVE_RULE_INDEX", "IMPROPER_FRACTION_RULE_INDEX", "PROPER_FRACTION_RULE_INDEX", "DEFAULT_RULE_INDEX", "INFINITY_RULE_INDEX", "NAN_RULE_INDEX", "owner", "isFractionRuleSet", "isParseable", "RECURSION_LIMIT" ]
}