{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/IpSecAlgorithm.java",
  "packageName" : "android.net",
  "className" : "IpSecAlgorithm",
  "comment" : "\n * This class represents a single algorithm that can be used by an {@link IpSecTransform}.\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc4301\">RFC 4301, Security Architecture for the\n * Internet Protocol</a>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CRYPT_NULL",
    "type" : "String",
    "comment" : "\n     * Null cipher.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CRYPT_AES_CBC",
    "type" : "String",
    "comment" : "\n     * AES-CBC Encryption/Ciphering Algorithm.\n     *\n     * <p>Valid lengths for this key are {128, 192, 256}.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_HMAC_MD5",
    "type" : "String",
    "comment" : "\n     * MD5 HMAC Authentication/Integrity Algorithm. <b>This algorithm is not recommended for use in\n     * new applications and is provided for legacy compatibility with 3gpp infrastructure.</b>\n     *\n     * <p>Keys for this algorithm must be 128 bits in length.\n     *\n     * <p>Valid truncation lengths are multiples of 8 bits from 96 to 128.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_HMAC_SHA1",
    "type" : "String",
    "comment" : "\n     * SHA1 HMAC Authentication/Integrity Algorithm. <b>This algorithm is not recommended for use in\n     * new applications and is provided for legacy compatibility with 3gpp infrastructure.</b>\n     *\n     * <p>Keys for this algorithm must be 160 bits in length.\n     *\n     * <p>Valid truncation lengths are multiples of 8 bits from 96 to 160.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_HMAC_SHA256",
    "type" : "String",
    "comment" : "\n     * SHA256 HMAC Authentication/Integrity Algorithm.\n     *\n     * <p>Keys for this algorithm must be 256 bits in length.\n     *\n     * <p>Valid truncation lengths are multiples of 8 bits from 96 to 256.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_HMAC_SHA384",
    "type" : "String",
    "comment" : "\n     * SHA384 HMAC Authentication/Integrity Algorithm.\n     *\n     * <p>Keys for this algorithm must be 384 bits in length.\n     *\n     * <p>Valid truncation lengths are multiples of 8 bits from 192 to 384.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_HMAC_SHA512",
    "type" : "String",
    "comment" : "\n     * SHA512 HMAC Authentication/Integrity Algorithm.\n     *\n     * <p>Keys for this algorithm must be 512 bits in length.\n     *\n     * <p>Valid truncation lengths are multiples of 8 bits from 256 to 512.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTH_CRYPT_AES_GCM",
    "type" : "String",
    "comment" : "\n     * AES-GCM Authentication/Integrity + Encryption/Ciphering Algorithm.\n     *\n     * <p>Valid lengths for keying material are {160, 224, 288}.\n     *\n     * <p>As per <a href=\"https://tools.ietf.org/html/rfc4106#section-8.1\">RFC4106 (Section\n     * 8.1)</a>, keying material consists of a 128, 192, or 256 bit AES key followed by a 32-bit\n     * salt. RFC compliance requires that the salt must be unique per invocation with the same key.\n     *\n     * <p>Valid ICV (truncation) lengths are {64, 96, 128}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTruncLenBits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<IpSecAlgorithm>",
    "comment" : " Parcelable Creator ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : " Get the algorithm name ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getKey()",
    "returnType" : "byte[]",
    "comment" : " Get the key for this algorithm ",
    "links" : [ ]
  }, {
    "name" : "public int getTruncationLengthBits()",
    "returnType" : "int",
    "comment" : " Get the truncation length of this algorithm, in bits ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Parcelable Implementation ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : " Write to parcel ",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidOrThrow(String name, int keyLen, int truncLen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAuthentication()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEncryption()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAead()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isUnsafeBuild()",
    "returnType" : "boolean",
    "comment" : " such as beta testers, we only allow sensitive info such as keys on eng builds.",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean equals(IpSecAlgorithm lhs, IpSecAlgorithm rhs)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "CRYPT_NULL", "CRYPT_AES_CBC", "AUTH_HMAC_MD5", "AUTH_HMAC_SHA1", "AUTH_HMAC_SHA256", "AUTH_HMAC_SHA384", "AUTH_HMAC_SHA512", "AUTH_CRYPT_AES_GCM", "mName", "mKey", "mTruncLenBits", "CREATOR" ],
  "methodNames" : [ "public String getName()", "public byte[] getKey()", "public int getTruncationLengthBits()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "private static void checkValidOrThrow(String name, int keyLen, int truncLen)", "public boolean isAuthentication()", "public boolean isEncryption()", "public boolean isAead()", "private static boolean isUnsafeBuild()", "public String toString()", "public static boolean equals(IpSecAlgorithm lhs, IpSecAlgorithm rhs)" ]
}