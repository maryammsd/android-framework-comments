{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UnicodeDecompressor.java",
  "packageName" : "android.icu.text",
  "className" : "UnicodeDecompressor",
  "comment" : "\n* A decompression engine implementing the Standard Compression Scheme\n* for Unicode (SCSU) as outlined in <A\n* HREF=\"https://www.unicode.org/reports/tr6\">Unicode Technical\n* Report #6</A>.\n*\n* <P><STRONG>USAGE</STRONG></P>\n*\n* <P>The static methods on <TT>UnicodeDecompressor</TT> may be used in a\n* straightforward manner to decompress simple strings:</P>\n*\n* <PRE>\n*  byte [] compressed = ... ; // get compressed bytes from somewhere\n*  String result = UnicodeDecompressor.decompress(compressed);\n* </PRE>\n*\n* <P>The static methods have a fairly large memory footprint.\n* For finer-grained control over memory usage, \n* <TT>UnicodeDecompressor</TT> offers more powerful APIs allowing\n* iterative decompression:</P>\n*\n* <PRE>\n*  // Decompress an array \"bytes\" of length \"len\" using a buffer of 512 chars\n*  // to the Writer \"out\"\n*\n*  UnicodeDecompressor myDecompressor         = new UnicodeDecompressor();\n*  final static int    BUFSIZE                = 512;\n*  char []             charBuffer             = new char [ BUFSIZE ];\n*  int                 charsWritten           = 0;\n*  int []              bytesRead              = new int [1];\n*  int                 totalBytesDecompressed = 0;\n*  int                 totalCharsWritten      = 0;\n*\n*  do {\n*    // do the decompression\n*    charsWritten = myDecompressor.decompress(bytes, totalBytesDecompressed, \n*                                             len, bytesRead,\n*                                             charBuffer, 0, BUFSIZE);\n*\n*    // do something with the current set of chars\n*    out.write(charBuffer, 0, charsWritten);\n*\n*    // update the no. of bytes decompressed\n*    totalBytesDecompressed += bytesRead[0];\n*\n*    // update the no. of chars written\n*    totalCharsWritten += charsWritten;\n*\n*  } while(totalBytesDecompressed &lt; len);\n*\n*  myDecompressor.reset(); // reuse decompressor\n* </PRE>\n*\n* <P>Decompression is performed according to the standard set forth in \n* <A HREF=\"https://www.unicode.org/reports/tr6\">Unicode Technical \n* Report #6</A></P>\n*\n* @see UnicodeCompressor\n*\n* @author Stephen F. Booth\n* @hide Only a subset of ICU is exposed in Android\n",
  "links" : [ ],
  "variables" : [ {
    "name" : "fCurrentWindow",
    "type" : "int",
    "comment" : " Alias to current dynamic window ",
    "links" : [ ]
  }, {
    "name" : "fOffsets",
    "type" : "int[]",
    "comment" : " Dynamic compression window offsets ",
    "links" : [ ]
  }, {
    "name" : "fMode",
    "type" : "int",
    "comment" : " Current compression mode ",
    "links" : [ ]
  }, {
    "name" : "BUFSIZE",
    "type" : "int",
    "comment" : " Size of our internal buffer ",
    "links" : [ ]
  }, {
    "name" : "fBuffer",
    "type" : "byte[]",
    "comment" : " Internal buffer for saving state ",
    "links" : [ ]
  }, {
    "name" : "fBufferLength",
    "type" : "int",
    "comment" : " Number of characters in our internal buffer ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String decompress(byte[] buffer)",
    "returnType" : "String",
    "comment" : "\n     * Decompress a byte array into a String.\n     * @param buffer The byte array to decompress.\n     * @return A String containing the decompressed characters.\n     * @see #decompress(byte [], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char[] decompress(byte[] buffer, int start, int limit)",
    "returnType" : "char[]",
    "comment" : "\n     * Decompress a byte array into a Unicode character array.\n     * @param buffer The byte array to decompress.\n     * @param start The start of the byte run to decompress.\n     * @param limit The limit of the byte run to decompress.\n     * @return A character array containing the decompressed bytes.\n     * @see #decompress(byte [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public int decompress(byte[] byteBuffer, int byteBufferStart, int byteBufferLimit, int[] bytesRead, char[] charBuffer, int charBufferStart, int charBufferLimit)",
    "returnType" : "int",
    "comment" : "\n     * Decompress a byte array into a Unicode character array.\n     *\n     * This function will either completely fill the output buffer, \n     * or consume the entire input.  \n     *\n     * @param byteBuffer The byte buffer to decompress.\n     * @param byteBufferStart The start of the byte run to decompress.\n     * @param byteBufferLimit The limit of the byte run to decompress.\n     * @param bytesRead A one-element array.  If not null, on return\n     * the number of bytes read from byteBuffer.\n     * @param charBuffer A buffer to receive the decompressed data. \n     * This buffer must be at minimum two characters in size.\n     * @param charBufferStart The starting offset to which to write \n     * decompressed data.\n     * @param charBufferLimit The limiting offset for writing \n     * decompressed data.\n     * @return The number of Unicode characters written to charBuffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : " \n     * Reset the decompressor to its initial state. \n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String decompress(byte[] buffer)", "public static char[] decompress(byte[] buffer, int start, int limit)", "public int decompress(byte[] byteBuffer, int byteBufferStart, int byteBufferLimit, int[] bytesRead, char[] charBuffer, int charBufferStart, int charBufferLimit)", "public void reset()" ],
  "variableNames" : [ "fCurrentWindow", "fOffsets", "fMode", "BUFSIZE", "fBuffer", "fBufferLength" ]
}