{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/utils/URI.java",
  "packageName" : "org.apache.xml.serializer.utils",
  "className" : "URI",
  "comment" : "\n * A class to represent a Uniform Resource Identifier (URI). This class\n * is designed to handle the parsing of URIs and provide access to\n * the various components (scheme, host, port, userinfo, path, query\n * string and fragment) that may constitute a URI.\n * <p>\n * Parsing of a URI specification is done according to the URI\n * syntax described in RFC 2396\n * <http://www.ietf.org/rfc/rfc2396.txt?number=2396>. Every URI consists\n * of a scheme, followed by a colon (':'), followed by a scheme-specific\n * part. For URIs that follow the \"generic URI\" syntax, the scheme-\n * specific part begins with two slashes (\"//\") and may be followed\n * by an authority segment (comprised of user information, host, and\n * port), path segment, query segment and fragment. Note that RFC 2396\n * no longer specifies the use of the parameters segment and excludes\n * the \"user:password\" syntax as part of the authority segment. If\n * \"user:password\" appears in a URI, the entire user/password string\n * is stored as userinfo.\n * <p>\n * For URIs that do not follow the \"generic URI\" syntax (e.g. mailto),\n * the entire scheme-specific part is treated as the \"path\" portion\n * of the URI.\n * <p>\n * Note that, unlike the java.net.URL class, this class does not provide\n * any built-in network access functionality nor does it provide any\n * scheme-specific functionality (for example, it does not know a\n * default port for a specific scheme). Rather, it only knows the\n * grammar and basic set of operations that can be applied to a URI.\n *\n * This class is a copy of the one in org.apache.xml.utils. \n * It exists to cut the serializers dependancy on that package.\n * \n * A minor change from the original is that this class no longer implements\n * Serializable, and the serialVersionUID magic field is dropped, and\n * the class is no longer \"public\".\n *  \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RESERVED_CHARACTERS",
    "type" : "String",
    "comment" : " reserved characters ",
    "links" : [ ]
  }, {
    "name" : "MARK_CHARACTERS",
    "type" : "String",
    "comment" : "\n   * URI punctuation mark characters - these, combined with\n   *   alphanumerics, constitute the \"unreserved\" characters \n   ",
    "links" : [ ]
  }, {
    "name" : "SCHEME_CHARACTERS",
    "type" : "String",
    "comment" : " scheme can be composed of alphanumerics and these characters ",
    "links" : [ ]
  }, {
    "name" : "USERINFO_CHARACTERS",
    "type" : "String",
    "comment" : "\n   * userinfo can be composed of unreserved, escaped and these\n   *   characters \n   ",
    "links" : [ ]
  }, {
    "name" : "m_scheme",
    "type" : "String",
    "comment" : " Stores the scheme (usually the protocol) for this URI.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_userinfo",
    "type" : "String",
    "comment" : " If specified, stores the userinfo for this URI; otherwise null.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_host",
    "type" : "String",
    "comment" : " If specified, stores the host for this URI; otherwise null.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_port",
    "type" : "int",
    "comment" : " If specified, stores the port for this URI; otherwise -1.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_path",
    "type" : "String",
    "comment" : " If specified, stores the path for this URI; otherwise null.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_queryString",
    "type" : "String",
    "comment" : "\n   * If specified, stores the query string for this URI; otherwise\n   *   null. \n   * @serial \n   ",
    "links" : [ ]
  }, {
    "name" : "m_fragment",
    "type" : "String",
    "comment" : " If specified, stores the fragment for this URI; otherwise null.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Indicate whether in DEBUG mode          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initialize(URI p_other)",
    "returnType" : "void",
    "comment" : "\n   * Initialize all fields of this URI from another URI.\n   *\n   * @param p_other the URI to copy (cannot be null)\n   ",
    "links" : [ ]
  }, {
    "name" : "private void initialize(URI p_base, String p_uriSpec) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Initializes this URI from a base URI and a URI specification string.\n   * See RFC 2396 Section 4 and Appendix B for specifications on parsing\n   * the URI and Section 5 for specifications on resolving relative URIs\n   * and relative paths.\n   *\n   * @param p_base the base URI (may be null if p_uriSpec is an absolute\n   *               URI)\n   * @param p_uriSpec the URI spec string which may be an absolute or\n   *                  relative URI (can only be null/empty if p_base\n   *                  is not null)\n   *\n   * @throws MalformedURIException if p_base is null and p_uriSpec\n   *                                  is not an absolute URI or if\n   *                                  p_uriSpec violates syntax rules\n   ",
    "links" : [ ]
  }, {
    "name" : "private void initializeScheme(String p_uriSpec) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Initialize the scheme for this URI from a URI string spec.\n   *\n   * @param p_uriSpec the URI specification (cannot be null)\n   *\n   * @throws MalformedURIException if URI does not have a conformant\n   *                                  scheme\n   ",
    "links" : [ ]
  }, {
    "name" : "private void initializeAuthority(String p_uriSpec) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Initialize the authority (userinfo, host and port) for this\n   * URI from a URI string spec.\n   *\n   * @param p_uriSpec the URI specification (cannot be null)\n   *\n   * @throws MalformedURIException if p_uriSpec violates syntax rules\n   ",
    "links" : [ ]
  }, {
    "name" : "private void initializePath(String p_uriSpec) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Initialize the path for this URI from a URI string spec.\n   *\n   * @param p_uriSpec the URI specification (cannot be null)\n   *\n   * @throws MalformedURIException if p_uriSpec violates syntax rules\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getScheme()",
    "returnType" : "String",
    "comment" : "\n   * Get the scheme for this URI.\n   *\n   * @return the scheme for this URI\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSchemeSpecificPart()",
    "returnType" : "String",
    "comment" : "\n   * Get the scheme-specific part for this URI (everything following the\n   * scheme and the first colon). See RFC 2396 Section 5.2 for spec.\n   *\n   * @return the scheme-specific part for this URI\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getUserinfo()",
    "returnType" : "String",
    "comment" : "\n   * Get the userinfo for this URI.\n   *\n   * @return the userinfo for this URI (null if not specified).\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getHost()",
    "returnType" : "String",
    "comment" : "\n   * Get the host for this URI.\n   *\n   * @return the host for this URI (null if not specified).\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getPort()",
    "returnType" : "int",
    "comment" : "\n   * Get the port for this URI.\n   *\n   * @return the port for this URI (-1 if not specified).\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPath(boolean p_includeQueryString, boolean p_includeFragment)",
    "returnType" : "String",
    "comment" : "\n   * Get the path for this URI (optionally with the query string and\n   * fragment).\n   *\n   * @param p_includeQueryString if true (and query string is not null),\n   *                             then a \"?\" followed by the query string\n   *                             will be appended\n   * @param p_includeFragment if true (and fragment is not null),\n   *                             then a \"#\" followed by the fragment\n   *                             will be appended\n   *\n   * @return the path for this URI possibly including the query string\n   *         and fragment\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n   * Get the path for this URI. Note that the value returned is the path\n   * only and does not include the query string or fragment.\n   *\n   * @return the path for this URI.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getQueryString()",
    "returnType" : "String",
    "comment" : "\n   * Get the query string for this URI.\n   *\n   * @return the query string for this URI. Null is returned if there\n   *         was no \"?\" in the URI spec, empty string if there was a\n   *         \"?\" but no query string following it.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getFragment()",
    "returnType" : "String",
    "comment" : "\n   * Get the fragment for this URI.\n   *\n   * @return the fragment for this URI. Null is returned if there\n   *         was no \"#\" in the URI spec, empty string if there was a\n   *         \"#\" but no fragment following it.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setScheme(String p_scheme) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the scheme for this URI. The scheme is converted to lowercase\n   * before it is set.\n   *\n   * @param p_scheme the scheme for this URI (cannot be null)\n   *\n   * @throws MalformedURIException if p_scheme is not a conformant\n   *                                  scheme name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setUserinfo(String p_userinfo) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the userinfo for this URI. If a non-null value is passed in and\n   * the host value is null, then an exception is thrown.\n   *\n   * @param p_userinfo the userinfo for this URI\n   *\n   * @throws MalformedURIException if p_userinfo contains invalid\n   *                                  characters\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setHost(String p_host) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the host for this URI. If null is passed in, the userinfo\n   * field is also set to null and the port is set to -1.\n   *\n   * @param p_host the host for this URI\n   *\n   * @throws MalformedURIException if p_host is not a valid IP\n   *                                  address or DNS hostname.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPort(int p_port) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the port for this URI. -1 is used to indicate that the port is\n   * not specified, otherwise valid port numbers are  between 0 and 65535.\n   * If a valid port number is passed in and the host field is null,\n   * an exception is thrown.\n   *\n   * @param p_port the port number for this URI\n   *\n   * @throws MalformedURIException if p_port is not -1 and not a\n   *                                  valid port number\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPath(String p_path) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the path for this URI. If the supplied path is null, then the\n   * query string and fragment are set to null as well. If the supplied\n   * path includes a query string and/or fragment, these fields will be\n   * parsed and set as well. Note that, for URIs following the \"generic\n   * URI\" syntax, the path specified should start with a slash.\n   * For URIs that do not follow the generic URI syntax, this method\n   * sets the scheme-specific part.\n   *\n   * @param p_path the path for this URI (may be null)\n   *\n   * @throws MalformedURIException if p_path contains invalid\n   *                                  characters\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendPath(String p_addToPath) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Append to the end of the path of this URI. If the current path does\n   * not end in a slash and the path to be appended does not begin with\n   * a slash, a slash will be appended to the current path before the\n   * new segment is added. Also, if the current path ends in a slash\n   * and the new segment begins with a slash, the extra slash will be\n   * removed before the new segment is appended.\n   *\n   * @param p_addToPath the new segment to be added to the current path\n   *\n   * @throws MalformedURIException if p_addToPath contains syntax\n   *                                  errors\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setQueryString(String p_queryString) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the query string for this URI. A non-null value is valid only\n   * if this is an URI conforming to the generic URI syntax and\n   * the path value is not null.\n   *\n   * @param p_queryString the query string for this URI\n   *\n   * @throws MalformedURIException if p_queryString is not null and this\n   *                                  URI does not conform to the generic\n   *                                  URI syntax or if the path is null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setFragment(String p_fragment) throws MalformedURIException",
    "returnType" : "void",
    "comment" : "\n   * Set the fragment for this URI. A non-null value is valid only\n   * if this is a URI conforming to the generic URI syntax and\n   * the path value is not null.\n   *\n   * @param p_fragment the fragment for this URI\n   *\n   * @throws MalformedURIException if p_fragment is not null and this\n   *                                  URI does not conform to the generic\n   *                                  URI syntax or if the path is null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object p_test)",
    "returnType" : "boolean",
    "comment" : "\n   * Determines if the passed-in Object is equivalent to this URI.\n   *\n   * @param p_test the Object to test for equality.\n   *\n   * @return true if p_test is a URI with all values equal to this\n   *         URI, false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n   * Get the URI as a string specification. See RFC 2396 Section 5.2.\n   *\n   * @return the URI string specification\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGenericURI()",
    "returnType" : "boolean",
    "comment" : "\n   * Get the indicator as to whether this URI uses the \"generic URI\"\n   * syntax.\n   *\n   * @return true if this URI uses the \"generic URI\" syntax, false\n   *         otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isConformantSchemeName(String p_scheme)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a scheme conforms to the rules for a scheme name.\n   * A scheme is conformant if it starts with an alphanumeric, and\n   * contains only alphanumerics, '+','-' and '.'.\n   *\n   *\n   * @param p_scheme The sheme name to check\n   * @return true if the scheme is conformant, false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isWellFormedAddress(String p_address)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a string is syntactically capable of representing\n   * a valid IPv4 address or the domain name of a network host. A valid\n   * IPv4 address consists of four decimal digit groups separated by a\n   * '.'. A hostname consists of domain labels (each of which must\n   * begin and end with an alphanumeric but may contain '-') separated\n   * & by a '.'. See RFC 2396 Section 3.2.2.\n   *\n   *\n   * @param p_address The address string to check\n   * @return true if the string is a syntactically valid IPv4 address\n   *              or hostname\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDigit(char p_char)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a char is a digit.\n   *\n   *\n   * @param p_char the character to check\n   * @return true if the char is betweeen '0' and '9', false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isHex(char p_char)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a character is a hexadecimal character.\n   *\n   *\n   * @param p_char the character to check\n   * @return true if the char is betweeen '0' and '9', 'a' and 'f'\n   *         or 'A' and 'F', false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAlpha(char p_char)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a char is an alphabetic character: a-z or A-Z\n   *\n   *\n   * @param p_char the character to check\n   * @return true if the char is alphabetic, false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAlphanum(char p_char)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a char is an alphanumeric: 0-9, a-z or A-Z\n   *\n   *\n   * @param p_char the character to check\n   * @return true if the char is alphanumeric, false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isReservedCharacter(char p_char)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a character is a reserved character:\n   * ';', '/', '?', ':', '@', '&', '=', '+', '$' or ','\n   *\n   *\n   * @param p_char the character to check\n   * @return true if the string contains any reserved characters\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isUnreservedCharacter(char p_char)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a char is an unreserved character.\n   *\n   *\n   * @param p_char the character to check\n   * @return true if the char is unreserved, false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isURIString(String p_uric)",
    "returnType" : "boolean",
    "comment" : "\n   * Determine whether a given string contains only URI characters (also\n   * called \"uric\" in RFC 2396). uric consist of all reserved\n   * characters, unreserved characters and escaped characters.\n   *\n   *\n   * @param p_uric URI string\n   * @return true if the string is comprised of uric, false otherwise\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initialize(URI p_other)", "private void initialize(URI p_base, String p_uriSpec) throws MalformedURIException", "private void initializeScheme(String p_uriSpec) throws MalformedURIException", "private void initializeAuthority(String p_uriSpec) throws MalformedURIException", "private void initializePath(String p_uriSpec) throws MalformedURIException", "public String getScheme()", "public String getSchemeSpecificPart()", "public String getUserinfo()", "public String getHost()", "public int getPort()", "public String getPath(boolean p_includeQueryString, boolean p_includeFragment)", "public String getPath()", "public String getQueryString()", "public String getFragment()", "public void setScheme(String p_scheme) throws MalformedURIException", "public void setUserinfo(String p_userinfo) throws MalformedURIException", "public void setHost(String p_host) throws MalformedURIException", "public void setPort(int p_port) throws MalformedURIException", "public void setPath(String p_path) throws MalformedURIException", "public void appendPath(String p_addToPath) throws MalformedURIException", "public void setQueryString(String p_queryString) throws MalformedURIException", "public void setFragment(String p_fragment) throws MalformedURIException", "public boolean equals(Object p_test)", "public String toString()", "public boolean isGenericURI()", "public static boolean isConformantSchemeName(String p_scheme)", "public static boolean isWellFormedAddress(String p_address)", "private static boolean isDigit(char p_char)", "private static boolean isHex(char p_char)", "private static boolean isAlpha(char p_char)", "private static boolean isAlphanum(char p_char)", "private static boolean isReservedCharacter(char p_char)", "private static boolean isUnreservedCharacter(char p_char)", "private static boolean isURIString(String p_uric)" ],
  "variableNames" : [ "RESERVED_CHARACTERS", "MARK_CHARACTERS", "SCHEME_CHARACTERS", "USERINFO_CHARACTERS", "m_scheme", "m_userinfo", "m_host", "m_port", "m_path", "m_queryString", "m_fragment", "DEBUG" ]
}