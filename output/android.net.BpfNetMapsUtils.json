{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/BpfNetMapsUtils.java",
  "packageName" : "android.net",
  "className" : "BpfNetMapsUtils",
  "comment" : " Note that NetworkStack can not use this before U due to b/326143935",
  "links" : [ ],
  "variables" : [ {
    "name" : "sMaskDropIfSet",
    "type" : "long",
    "comment" : " Bitmaps for calculating whether a given uid is blocked by firewall chains.",
    "links" : [ ]
  }, {
    "name" : "sMaskDropIfUnset",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static long getMatchByFirewallChain(final int chain)",
    "returnType" : "long",
    "comment" : "\n     * Get corresponding match from firewall chain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFirewallAllowList(final int chain)",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether the chain is an allow-list or a deny-list.\n     *\n     * ALLOWLIST means the firewall denies all by default, uids must be explicitly allowed\n     * DENYLIST means the firewall allows all by default, uids must be explicitly denied\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String matchToString(long matchMask)",
    "returnType" : "String",
    "comment" : "\n     * Get match string representation from the given match bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void throwIfPreT(final String msg)",
    "returnType" : "void",
    "comment" : "\n     * Throw UnsupportedOperationException if SdkLevel is before T.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChainEnabled(final IBpfMap<S32, U32> configurationMap, final int chain)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the specified firewall chain's status.\n     *\n     * @param configurationMap target configurationMap\n     * @param chain target chain\n     * @return {@code true} if chain is enabled, {@code false} if chain is not enabled.\n     * @throws UnsupportedOperationException if called on pre-T devices.\n     * @throws ServiceSpecificException in case of failure, with an error code indicating the\n     *                                  cause of the failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getUidRule(final IBpfMap<S32, UidOwnerValue> uidOwnerMap, final int chain, final int uid)",
    "returnType" : "int",
    "comment" : "\n     * Get firewall rule of specified firewall chain on specified uid.\n     *\n     * @param uidOwnerMap target uidOwnerMap.\n     * @param chain target chain.\n     * @param uid target uid.\n     * @return either FIREWALL_RULE_ALLOW or FIREWALL_RULE_DENY\n     * @throws UnsupportedOperationException if called on pre-T devices.\n     * @throws ServiceSpecificException      in case of failure, with an error code indicating the\n     *                                       cause of the failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getUidNetworkingBlockedReasons(final int uid, IBpfMap<S32, U32> configurationMap, IBpfMap<S32, UidOwnerValue> uidOwnerMap, IBpfMap<S32, U8> dataSaverEnabledMap)",
    "returnType" : "int",
    "comment" : "\n     * Get blocked reasons for specified uid\n     *\n     * @param uid Target Uid\n     * @return Reasons of network access blocking for an UID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isUidNetworkingBlocked(final int uid, boolean isNetworkMetered, IBpfMap<S32, U32> configurationMap, IBpfMap<S32, UidOwnerValue> uidOwnerMap, IBpfMap<S32, U8> dataSaverEnabledMap)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the network is blocked by firewall chains for the given uid.\n     *\n     * Note that {@link #getDataSaverEnabled(IBpfMap)} has a latency before V.\n     *\n     * @param uid The target uid.\n     * @param isNetworkMetered Whether the target network is metered.\n     *\n     * @return True if the network is blocked. Otherwise, false.\n     * @throws ServiceSpecificException if the read fails.\n     *\n     * @hide\n     ",
    "links" : [ "#getDataSaverEnabled(IBpfMap)" ]
  }, {
    "name" : "public static boolean getDataSaverEnabled(IBpfMap<S32, U8> dataSaverEnabledMap)",
    "returnType" : "boolean",
    "comment" : "\n     * Get Data Saver enabled or disabled\n     *\n     * Note that before V, the data saver status in bpf is written by ConnectivityService\n     * when receiving {@link ConnectivityManager#ACTION_RESTRICT_BACKGROUND_CHANGED}. Thus,\n     * the status is not synchronized.\n     * On V+, the data saver status is set by platform code when enabling/disabling\n     * data saver, which is synchronized.\n     *\n     * @return whether Data Saver is enabled or disabled.\n     * @throws ServiceSpecificException in case of failure, with an error code indicating the\n     *                                  cause of the failure.\n     ",
    "links" : [ "android.net.ConnectivityManager#ACTION_RESTRICT_BACKGROUND_CHANGED" ]
  } ],
  "methodNames" : [ "public static long getMatchByFirewallChain(final int chain)", "public static boolean isFirewallAllowList(final int chain)", "public static String matchToString(long matchMask)", "public static void throwIfPreT(final String msg)", "public static boolean isChainEnabled(final IBpfMap<S32, U32> configurationMap, final int chain)", "public static int getUidRule(final IBpfMap<S32, UidOwnerValue> uidOwnerMap, final int chain, final int uid)", "public static int getUidNetworkingBlockedReasons(final int uid, IBpfMap<S32, U32> configurationMap, IBpfMap<S32, UidOwnerValue> uidOwnerMap, IBpfMap<S32, U8> dataSaverEnabledMap)", "public static boolean isUidNetworkingBlocked(final int uid, boolean isNetworkMetered, IBpfMap<S32, U32> configurationMap, IBpfMap<S32, UidOwnerValue> uidOwnerMap, IBpfMap<S32, U8> dataSaverEnabledMap)", "public static boolean getDataSaverEnabled(IBpfMap<S32, U8> dataSaverEnabledMap)" ],
  "variableNames" : [ "sMaskDropIfSet", "sMaskDropIfUnset" ]
}