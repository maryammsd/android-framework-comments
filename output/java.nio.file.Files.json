{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/Files.java",
  "packageName" : "java.nio.file",
  "className" : "Files",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "BUFFER_SIZE",
    "type" : "int",
    "comment" : " buffer size used for reading and writing",
    "links" : [ ]
  }, {
    "name" : "MAX_BUFFER_SIZE",
    "type" : "int",
    "comment" : "\n     * The maximum size of array to allocate.\n     * Some VMs reserve some header words in an array.\n     * Attempts to allocate larger arrays may result in\n     * OutOfMemoryError: Requested array size exceeds VM limit\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static FileSystemProvider provider(Path path)",
    "returnType" : "FileSystemProvider",
    "comment" : "\n     * Returns the {@code FileSystemProvider} to delegate to.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Runnable asUncheckedRunnable(Closeable c)",
    "returnType" : "Runnable",
    "comment" : "\n     * Convert a Closeable to a Runnable by converting checked IOException\n     * to UncheckedIOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputStream newInputStream(Path path, OpenOption... options) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Opens a file, returning an input stream to read from the file. The stream\n     * will not be buffered, and is not required to support the {@link\n     * InputStream#mark mark} or {@link InputStream#reset reset} methods. The\n     * stream will be safe for access by multiple concurrent threads. Reading\n     * commences at the beginning of the file. Whether the returned stream is\n     * <i>asynchronously closeable</i> and/or <i>interruptible</i> is highly\n     * file system provider specific and therefore not specified.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * If no options are present then it is equivalent to opening the file with\n     * the {@link StandardOpenOption#READ READ} option. In addition to the {@code\n     * READ} option, an implementation may also support additional implementation\n     * specific options.\n     *\n     * @param   path\n     *          the path to the file to open\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new input stream\n     *\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of options is specified\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     ",
    "links" : [ "#checkRead(String)", "java.io.InputStream#mark", "java.io.InputStream#reset", "java.nio.file.StandardOpenOption#READ" ]
  }, {
    "name" : "public static OutputStream newOutputStream(Path path, OpenOption... options) throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Opens or creates a file, returning an output stream that may be used to\n     * write bytes to the file. The resulting stream will not be buffered. The\n     * stream will be safe for access by multiple concurrent threads. Whether\n     * the returned stream is <i>asynchronously closeable</i> and/or\n     * <i>interruptible</i> is highly file system provider specific and\n     * therefore not specified.\n     *\n     * <p> This method opens or creates a file in exactly the manner specified\n     * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}\n     * method with the exception that the {@link StandardOpenOption#READ READ}\n     * option may not be present in the array of options. If no options are\n     * present then this method works as if the {@link StandardOpenOption#CREATE\n     * CREATE}, {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING},\n     * and {@link StandardOpenOption#WRITE WRITE} options are present. In other\n     * words, it opens the file for writing, creating the file if it doesn't\n     * exist, or initially truncating an existing {@link #isRegularFile\n     * regular-file} to a size of {@code 0} if it exists.\n     *\n     * <p> <b>Usage Examples:</b>\n     * <pre>\n     *     Path path = ...\n     *\n     *     // truncate and overwrite an existing file, or create the file if\n     *     // it doesn't initially exist\n     *     OutputStream out = Files.newOutputStream(path);\n     *\n     *     // append to an existing file, fail if the file does not exist\n     *     out = Files.newOutputStream(path, APPEND);\n     *\n     *     // append to an existing file, create file if it doesn't initially exist\n     *     out = Files.newOutputStream(path, CREATE, APPEND);\n     *\n     *     // always create new file, failing if it already exists\n     *     out = Files.newOutputStream(path, CREATE_NEW);\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file to open or create\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new output stream\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code options} contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file. The {@link\n     *          SecurityManager#checkDelete(String) checkDelete} method is\n     *          invoked to check delete access if the file is opened with the\n     *          {@code DELETE_ON_CLOSE} option.\n     ",
    "links" : [ "#newByteChannel(Path", "java.nio.file.StandardOpenOption#WRITE", "java.nio.file.StandardOpenOption#CREATECREATE", "#checkDelete(String)", "java.nio.file.StandardOpenOption#READ", "java.nio.file.StandardOpenOption#TRUNCATE_EXISTING", "#isRegularFileregular", "#checkWrite(String)" ]
  }, {
    "name" : "public static SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "SeekableByteChannel",
    "comment" : "\n     * Opens or creates a file, returning a seekable byte channel to access the\n     * file.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * The {@link StandardOpenOption#READ READ} and {@link\n     * StandardOpenOption#WRITE WRITE} options determine if the file should be\n     * opened for reading and/or writing. If neither option (or the {@link\n     * StandardOpenOption#APPEND APPEND} option) is present then the file is\n     * opened for reading. By default reading or writing commence at the\n     * beginning of the file.\n     *\n     * <p> In the addition to {@code READ} and {@code WRITE}, the following\n     * options may be present:\n     *\n     * <table border=1 cellpadding=5 summary=\"Options\">\n     * <tr> <th>Option</th> <th>Description</th> </tr>\n     * <tr>\n     *   <td> {@link StandardOpenOption#APPEND APPEND} </td>\n     *   <td> If this option is present then the file is opened for writing and\n     *     each invocation of the channel's {@code write} method first advances\n     *     the position to the end of the file and then writes the requested\n     *     data. Whether the advancement of the position and the writing of the\n     *     data are done in a single atomic operation is system-dependent and\n     *     therefore unspecified. This option may not be used in conjunction\n     *     with the {@code READ} or {@code TRUNCATE_EXISTING} options. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </td>\n     *   <td> If this option is present then the existing file is truncated to\n     *   a size of 0 bytes. This option is ignored when the file is opened only\n     *   for reading. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </td>\n     *   <td> If this option is present then a new file is created, failing if\n     *   the file already exists or is a symbolic link. When creating a file the\n     *   check for the existence of the file and the creation of the file if it\n     *   does not exist is atomic with respect to other file system operations.\n     *   This option is ignored when the file is opened only for reading. </td>\n     * </tr>\n     * <tr>\n     *   <td > {@link StandardOpenOption#CREATE CREATE} </td>\n     *   <td> If this option is present then an existing file is opened if it\n     *   exists, otherwise a new file is created. This option is ignored if the\n     *   {@code CREATE_NEW} option is also present or the file is opened only\n     *   for reading. </td>\n     * </tr>\n     * <tr>\n     *   <td > {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} </td>\n     *   <td> When this option is present then the implementation makes a\n     *   <em>best effort</em> attempt to delete the file when closed by the\n     *   {@link SeekableByteChannel#close close} method. If the {@code close}\n     *   method is not invoked then a <em>best effort</em> attempt is made to\n     *   delete the file when the Java virtual machine terminates. </td>\n     * </tr>\n     * <tr>\n     *   <td>{@link StandardOpenOption#SPARSE SPARSE} </td>\n     *   <td> When creating a new file this option is a <em>hint</em> that the\n     *   new file will be sparse. This option is ignored when not creating\n     *   a new file. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link StandardOpenOption#SYNC SYNC} </td>\n     *   <td> Requires that every update to the file's content or metadata be\n     *   written synchronously to the underlying storage device. (see <a\n     *   href=\"package-summary.html#integrity\"> Synchronized I/O file\n     *   integrity</a>). </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link StandardOpenOption#DSYNC DSYNC} </td>\n     *   <td> Requires that every update to the file's content be written\n     *   synchronously to the underlying storage device. (see <a\n     *   href=\"package-summary.html#integrity\"> Synchronized I/O file\n     *   integrity</a>). </td>\n     * </tr>\n     * </table>\n     *\n     * <p> An implementation may also support additional implementation specific\n     * options.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * file-attributes} to set atomically when a new file is created.\n     *\n     * <p> In the case of the default provider, the returned seekable byte channel\n     * is a {@link java.nio.channels.FileChannel}.\n     *\n     * <p> <b>Usage Examples:</b>\n     * <pre>\n     *     Path path = ...\n     *\n     *     // open file for reading\n     *     ReadableByteChannel rbc = Files.newByteChannel(path, EnumSet.of(READ)));\n     *\n     *     // open file for writing to the end of an existing file, creating\n     *     // the file if it doesn't already exist\n     *     WritableByteChannel wbc = Files.newByteChannel(path, EnumSet.of(CREATE,APPEND));\n     *\n     *     // create file with initial permissions, opening it for both reading and writing\n     *     {@code FileAttribute<Set<PosixFilePermission>> perms = ...}\n     *     SeekableByteChannel sbc = Files.newByteChannel(path, EnumSet.of(CREATE_NEW,READ,WRITE), perms);\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file to open or create\n     * @param   options\n     *          options specifying how the file is opened\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the file\n     *\n     * @return  a new seekable byte channel\n     *\n     * @throws  IllegalArgumentException\n     *          if the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          if an unsupported open option is specified or the array contains\n     *          attributes that cannot be set atomically when creating the file\n     * @throws  FileAlreadyExistsException\n     *          if a file of that name already exists and the {@link\n     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified\n     *          <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the path if the file is\n     *          opened for reading. The {@link SecurityManager#checkWrite(String)\n     *          checkWrite} method is invoked to check write access to the path\n     *          if the file is opened for writing. The {@link\n     *          SecurityManager#checkDelete(String) checkDelete} method is\n     *          invoked to check delete access if the file is opened with the\n     *          {@code DELETE_ON_CLOSE} option.\n     *\n     * @see java.nio.channels.FileChannel#open(Path,Set,FileAttribute[])\n     ",
    "links" : [ "java.nio.file.StandardOpenOption#SPARSE", "java.nio.file.StandardOpenOption#WRITE", "#checkRead(String)", "java.nio.file.StandardOpenOption#READ", "#checkWrite(String)", "java.nio.file.StandardOpenOption#SYNC", "java.nio.file.StandardOpenOption#DSYNC", "#checkDelete(String)", "java.nio.file.StandardOpenOption#CREATE", "java.nio.file.StandardOpenOption#TRUNCATE_EXISTING", "java.nio.file.StandardOpenOption#APPEND", "java.nio.file.StandardOpenOption#DELETE_ON_CLOSE", "java.nio.channels.SeekableByteChannel#close", "java.nio.file.StandardOpenOption#CREATE_NEW", "FileAttributefile", "java.nio.channels.FileChannel" ]
  }, {
    "name" : "public static SeekableByteChannel newByteChannel(Path path, OpenOption... options) throws IOException",
    "returnType" : "SeekableByteChannel",
    "comment" : "\n     * Opens or creates a file, returning a seekable byte channel to access the\n     * file.\n     *\n     * <p> This method opens or creates a file in exactly the manner specified\n     * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}\n     * method.\n     *\n     * @param   path\n     *          the path to the file to open or create\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new seekable byte channel\n     *\n     * @throws  IllegalArgumentException\n     *          if the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          if an unsupported open option is specified\n     * @throws  FileAlreadyExistsException\n     *          if a file of that name already exists and the {@link\n     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified\n     *          <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the path if the file is\n     *          opened for reading. The {@link SecurityManager#checkWrite(String)\n     *          checkWrite} method is invoked to check write access to the path\n     *          if the file is opened for writing. The {@link\n     *          SecurityManager#checkDelete(String) checkDelete} method is\n     *          invoked to check delete access if the file is opened with the\n     *          {@code DELETE_ON_CLOSE} option.\n     *\n     * @see java.nio.channels.FileChannel#open(Path,OpenOption[])\n     ",
    "links" : [ "#newByteChannel(Path", "#checkRead(String)", "#checkDelete(String)", "java.nio.file.StandardOpenOption#CREATE_NEW", "#checkWrite(String)" ]
  }, {
    "name" : "public static DirectoryStream<Path> newDirectoryStream(Path dir) throws IOException",
    "returnType" : "DirectoryStream<Path>",
    "comment" : "\n     * Opens a directory, returning a {@link DirectoryStream} to iterate over\n     * all entries in the directory. The elements returned by the directory\n     * stream's {@link DirectoryStream#iterator iterator} are of type {@code\n     * Path}, each one representing an entry in the directory. The {@code Path}\n     * objects are obtained as if by {@link Path#resolve(Path) resolving} the\n     * name of the directory entry against {@code dir}.\n     *\n     * <p> When not using the try-with-resources construct, then directory\n     * stream's {@code close} method should be invoked after iteration is\n     * completed so as to free any resources held for the open directory.\n     *\n     * <p> When an implementation supports operations on entries in the\n     * directory that execute in a race-free manner then the returned directory\n     * stream is a {@link SecureDirectoryStream}.\n     *\n     * @param   dir\n     *          the path to the directory\n     *\n     * @return  a new and open {@code DirectoryStream} object\n     *\n     * @throws  NotDirectoryException\n     *          if the file could not otherwise be opened because it is not\n     *          a directory <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the directory.\n     ",
    "links" : [ "java.nio.file.DirectoryStream", "java.nio.file.Path#resolve(Path)", "java.nio.file.SecureDirectoryStream", "#checkRead(String)", "java.nio.file.DirectoryStream#iterator" ]
  }, {
    "name" : "public static DirectoryStream<Path> newDirectoryStream(Path dir, String glob) throws IOException",
    "returnType" : "DirectoryStream<Path>",
    "comment" : "\n     * Opens a directory, returning a {@link DirectoryStream} to iterate over\n     * the entries in the directory. The elements returned by the directory\n     * stream's {@link DirectoryStream#iterator iterator} are of type {@code\n     * Path}, each one representing an entry in the directory. The {@code Path}\n     * objects are obtained as if by {@link Path#resolve(Path) resolving} the\n     * name of the directory entry against {@code dir}. The entries returned by\n     * the iterator are filtered by matching the {@code String} representation\n     * of their file names against the given <em>globbing</em> pattern.\n     *\n     * <p> For example, suppose we want to iterate over the files ending with\n     * \".java\" in a directory:\n     * <pre>\n     *     Path dir = ...\n     *     try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir, \"*.java\")) {\n     *         :\n     *     }\n     * </pre>\n     *\n     * <p> The globbing pattern is specified by the {@link\n     * FileSystem#getPathMatcher getPathMatcher} method.\n     *\n     * <p> When not using the try-with-resources construct, then directory\n     * stream's {@code close} method should be invoked after iteration is\n     * completed so as to free any resources held for the open directory.\n     *\n     * <p> When an implementation supports operations on entries in the\n     * directory that execute in a race-free manner then the returned directory\n     * stream is a {@link SecureDirectoryStream}.\n     *\n     * @param   dir\n     *          the path to the directory\n     * @param   glob\n     *          the glob pattern\n     *\n     * @return  a new and open {@code DirectoryStream} object\n     *\n     * @throws  java.util.regex.PatternSyntaxException\n     *          if the pattern is invalid\n     * @throws  NotDirectoryException\n     *          if the file could not otherwise be opened because it is not\n     *          a directory <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the directory.\n     ",
    "links" : [ "java.nio.file.DirectoryStream", "java.nio.file.Path#resolve(Path)", "java.nio.file.SecureDirectoryStream", "#checkRead(String)", "java.nio.file.DirectoryStream#iterator", "java.nio.file.FileSystem#getPathMatcher" ]
  }, {
    "name" : "public static DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException",
    "returnType" : "DirectoryStream<Path>",
    "comment" : "\n     * Opens a directory, returning a {@link DirectoryStream} to iterate over\n     * the entries in the directory. The elements returned by the directory\n     * stream's {@link DirectoryStream#iterator iterator} are of type {@code\n     * Path}, each one representing an entry in the directory. The {@code Path}\n     * objects are obtained as if by {@link Path#resolve(Path) resolving} the\n     * name of the directory entry against {@code dir}. The entries returned by\n     * the iterator are filtered by the given {@link DirectoryStream.Filter\n     * filter}.\n     *\n     * <p> When not using the try-with-resources construct, then directory\n     * stream's {@code close} method should be invoked after iteration is\n     * completed so as to free any resources held for the open directory.\n     *\n     * <p> Where the filter terminates due to an uncaught error or runtime\n     * exception then it is propagated to the {@link Iterator#hasNext()\n     * hasNext} or {@link Iterator#next() next} method. Where an {@code\n     * IOException} is thrown, it results in the {@code hasNext} or {@code\n     * next} method throwing a {@link DirectoryIteratorException} with the\n     * {@code IOException} as the cause.\n     *\n     * <p> When an implementation supports operations on entries in the\n     * directory that execute in a race-free manner then the returned directory\n     * stream is a {@link SecureDirectoryStream}.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to iterate over the files in a directory that are\n     * larger than 8K.\n     * <pre>\n     *     DirectoryStream.Filter&lt;Path&gt; filter = new DirectoryStream.Filter&lt;Path&gt;() {\n     *         public boolean accept(Path file) throws IOException {\n     *             return (Files.size(file) &gt; 8192L);\n     *         }\n     *     };\n     *     Path dir = ...\n     *     try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir, filter)) {\n     *         :\n     *     }\n     * </pre>\n     *\n     * @param   dir\n     *          the path to the directory\n     * @param   filter\n     *          the directory stream filter\n     *\n     * @return  a new and open {@code DirectoryStream} object\n     *\n     * @throws  NotDirectoryException\n     *          if the file could not otherwise be opened because it is not\n     *          a directory <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the directory.\n     ",
    "links" : [ "DirectoryStream.Filterfilter", "java.nio.file.DirectoryStream", "java.nio.file.Path#resolve(Path)", "java.util.Iterator#hasNext()", "java.nio.file.SecureDirectoryStream", "#checkRead(String)", "java.nio.file.DirectoryStream#iterator", "java.util.Iterator#next()", "java.nio.file.DirectoryIteratorException" ]
  }, {
    "name" : "public static Path createFile(Path path, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a new and empty file, failing if the file already exists. The\n     * check for the existence of the file and the creation of the new file if\n     * it does not exist are a single operation that is atomic with respect to\n     * all other filesystem activities that might affect the directory.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * file-attributes} to set atomically when creating the file. Each attribute\n     * is identified by its {@link FileAttribute#name name}. If more than one\n     * attribute of the same name is included in the array then all but the last\n     * occurrence is ignored.\n     *\n     * @param   path\n     *          the path to the file to create\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the file\n     *\n     * @return  the file\n     *\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the file\n     * @throws  FileAlreadyExistsException\n     *          if a file of that name already exists\n     *          <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs or the parent directory does not exist\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the new file.\n     ",
    "links" : [ "java.nio.file.attribute.FileAttribute#name", "FileAttributefile", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a new directory. The check for the existence of the file and the\n     * creation of the directory if it does not exist are a single operation\n     * that is atomic with respect to all other filesystem activities that might\n     * affect the directory. The {@link #createDirectories createDirectories}\n     * method should be used where it is required to create all nonexistent\n     * parent directories first.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * file-attributes} to set atomically when creating the directory. Each\n     * attribute is identified by its {@link FileAttribute#name name}. If more\n     * than one attribute of the same name is included in the array then all but\n     * the last occurrence is ignored.\n     *\n     * @param   dir\n     *          the directory to create\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the directory\n     *\n     * @return  the directory\n     *\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the directory\n     * @throws  FileAlreadyExistsException\n     *          if a directory could not otherwise be created because a file of\n     *          that name already exists <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs or the parent directory does not exist\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the new directory.\n     ",
    "links" : [ "java.nio.file.attribute.FileAttribute#name", "FileAttributefile", "#checkWrite(String)", "#createDirectories" ]
  }, {
    "name" : "public static Path createDirectories(Path dir, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a directory by creating all nonexistent parent directories first.\n     * Unlike the {@link #createDirectory createDirectory} method, an exception\n     * is not thrown if the directory could not be created because it already\n     * exists.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * file-attributes} to set atomically when creating the nonexistent\n     * directories. Each file attribute is identified by its {@link\n     * FileAttribute#name name}. If more than one attribute of the same name is\n     * included in the array then all but the last occurrence is ignored.\n     *\n     * <p> If this method fails, then it may do so after creating some, but not\n     * all, of the parent directories.\n     *\n     * @param   dir\n     *          the directory to create\n     *\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the directory\n     *\n     * @return  the directory\n     *\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the directory\n     * @throws  FileAlreadyExistsException\n     *          if {@code dir} exists but is not a directory <i>(optional specific\n     *          exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          in the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked prior to attempting to create a directory and\n     *          its {@link SecurityManager#checkRead(String) checkRead} is\n     *          invoked for each parent directory that is checked. If {@code\n     *          dir} is not an absolute path then its {@link Path#toAbsolutePath\n     *          toAbsolutePath} may need to be invoked to get its absolute path.\n     *          This may invoke the security manager's {@link\n     *          SecurityManager#checkPropertyAccess(String) checkPropertyAccess}\n     *          method to check access to the system property {@code user.dir}\n     ",
    "links" : [ "java.nio.file.attribute.FileAttribute#name", "#createDirectory", "#checkPropertyAccess(String)", "#checkRead(String)", "java.nio.file.Path#toAbsolutePathtoAbsolutePath", "FileAttributefile", "#checkWrite(String)" ]
  }, {
    "name" : "private static void createAndCheckIsDirectory(Path dir, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Used by createDirectories to attempt to create a directory. A no-op\n     * if the directory already exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Path createTempFile(Path dir, String prefix, String suffix, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a new empty file in the specified directory, using the given\n     * prefix and suffix strings to generate its name. The resulting\n     * {@code Path} is associated with the same {@code FileSystem} as the given\n     * directory.\n     *\n     * <p> The details as to how the name of the file is constructed is\n     * implementation dependent and therefore not specified. Where possible\n     * the {@code prefix} and {@code suffix} are used to construct candidate\n     * names in the same manner as the {@link\n     * java.io.File#createTempFile(String,String,File)} method.\n     *\n     * <p> As with the {@code File.createTempFile} methods, this method is only\n     * part of a temporary-file facility. Where used as a <em>work files</em>,\n     * the resulting file may be opened using the {@link\n     * StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} option so that the\n     * file is deleted when the appropriate {@code close} method is invoked.\n     * Alternatively, a {@link Runtime#addShutdownHook shutdown-hook}, or the\n     * {@link java.io.File#deleteOnExit} mechanism may be used to delete the\n     * file automatically.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * file-attributes} to set atomically when creating the file. Each attribute\n     * is identified by its {@link FileAttribute#name name}. If more than one\n     * attribute of the same name is included in the array then all but the last\n     * occurrence is ignored. When no file attributes are specified, then the\n     * resulting file may have more restrictive access permissions to files\n     * created by the {@link java.io.File#createTempFile(String,String,File)}\n     * method.\n     *\n     * @param   dir\n     *          the path to directory in which to create the file\n     * @param   prefix\n     *          the prefix string to be used in generating the file's name;\n     *          may be {@code null}\n     * @param   suffix\n     *          the suffix string to be used in generating the file's name;\n     *          may be {@code null}, in which case \"{@code .tmp}\" is used\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the file\n     *\n     * @return  the path to the newly created file that did not exist before\n     *          this method was invoked\n     *\n     * @throws  IllegalArgumentException\n     *          if the prefix or suffix parameters cannot be used to generate\n     *          a candidate file name\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the directory\n     * @throws  IOException\n     *          if an I/O error occurs or {@code dir} does not exist\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     ",
    "links" : [ "java.io.File#createTempFile(String", "java.nio.file.attribute.FileAttribute#name", "#addShutdownHook", "java.io.File#deleteOnExit", "java.nio.file.StandardOpenOption#DELETE_ON_CLOSE", "FileAttributefile", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path createTempFile(String prefix, String suffix, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates an empty file in the default temporary-file directory, using\n     * the given prefix and suffix to generate its name. The resulting {@code\n     * Path} is associated with the default {@code FileSystem}.\n     *\n     * <p> This method works in exactly the manner specified by the\n     * {@link #createTempFile(Path,String,String,FileAttribute[])} method for\n     * the case that the {@code dir} parameter is the temporary-file directory.\n     *\n     * @param   prefix\n     *          the prefix string to be used in generating the file's name;\n     *          may be {@code null}\n     * @param   suffix\n     *          the suffix string to be used in generating the file's name;\n     *          may be {@code null}, in which case \"{@code .tmp}\" is used\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the file\n     *\n     * @return  the path to the newly created file that did not exist before\n     *          this method was invoked\n     *\n     * @throws  IllegalArgumentException\n     *          if the prefix or suffix parameters cannot be used to generate\n     *          a candidate file name\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the directory\n     * @throws  IOException\n     *          if an I/O error occurs or the temporary-file directory does not\n     *          exist\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     ",
    "links" : [ "#createTempFile(Path", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path createTempDirectory(Path dir, String prefix, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a new directory in the specified directory, using the given\n     * prefix to generate its name.  The resulting {@code Path} is associated\n     * with the same {@code FileSystem} as the given directory.\n     *\n     * <p> The details as to how the name of the directory is constructed is\n     * implementation dependent and therefore not specified. Where possible\n     * the {@code prefix} is used to construct candidate names.\n     *\n     * <p> As with the {@code createTempFile} methods, this method is only\n     * part of a temporary-file facility. A {@link Runtime#addShutdownHook\n     * shutdown-hook}, or the {@link java.io.File#deleteOnExit} mechanism may be\n     * used to delete the directory automatically.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * file-attributes} to set atomically when creating the directory. Each\n     * attribute is identified by its {@link FileAttribute#name name}. If more\n     * than one attribute of the same name is included in the array then all but\n     * the last occurrence is ignored.\n     *\n     * @param   dir\n     *          the path to directory in which to create the directory\n     * @param   prefix\n     *          the prefix string to be used in generating the directory's name;\n     *          may be {@code null}\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the directory\n     *\n     * @return  the path to the newly created directory that did not exist before\n     *          this method was invoked\n     *\n     * @throws  IllegalArgumentException\n     *          if the prefix cannot be used to generate a candidate directory name\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the directory\n     * @throws  IOException\n     *          if an I/O error occurs or {@code dir} does not exist\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access when creating the\n     *          directory.\n     ",
    "links" : [ "java.nio.file.attribute.FileAttribute#name", "java.io.File#deleteOnExit", "#addShutdownHookshutdown", "FileAttributefile", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a new directory in the default temporary-file directory, using\n     * the given prefix to generate its name. The resulting {@code Path} is\n     * associated with the default {@code FileSystem}.\n     *\n     * <p> This method works in exactly the manner specified by {@link\n     * #createTempDirectory(Path,String,FileAttribute[])} method for the case\n     * that the {@code dir} parameter is the temporary-file directory.\n     *\n     * @param   prefix\n     *          the prefix string to be used in generating the directory's name;\n     *          may be {@code null}\n     * @param   attrs\n     *          an optional list of file attributes to set atomically when\n     *          creating the directory\n     *\n     * @return  the path to the newly created directory that did not exist before\n     *          this method was invoked\n     *\n     * @throws  IllegalArgumentException\n     *          if the prefix cannot be used to generate a candidate directory name\n     * @throws  UnsupportedOperationException\n     *          if the array contains an attribute that cannot be set atomically\n     *          when creating the directory\n     * @throws  IOException\n     *          if an I/O error occurs or the temporary-file directory does not\n     *          exist\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access when creating the\n     *          directory.\n     ",
    "links" : [ "#createTempDirectory(Path", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a symbolic link to a target <i>(optional operation)</i>.\n     *\n     * <p> The {@code target} parameter is the target of the link. It may be an\n     * {@link Path#isAbsolute absolute} or relative path and may not exist. When\n     * the target is a relative path then file system operations on the resulting\n     * link are relative to the path of the link.\n     *\n     * <p> The {@code attrs} parameter is optional {@link FileAttribute\n     * attributes} to set atomically when creating the link. Each attribute is\n     * identified by its {@link FileAttribute#name name}. If more than one attribute\n     * of the same name is included in the array then all but the last occurrence\n     * is ignored.\n     *\n     * <p> Where symbolic links are supported, but the underlying {@link FileStore}\n     * does not support symbolic links, then this may fail with an {@link\n     * IOException}. Additionally, some operating systems may require that the\n     * Java virtual machine be started with implementation specific privileges to\n     * create symbolic links, in which case this method may throw {@code IOException}.\n     *\n     * @param   link\n     *          the path of the symbolic link to create\n     * @param   target\n     *          the target of the symbolic link\n     * @param   attrs\n     *          the array of attributes to set atomically when creating the\n     *          symbolic link\n     *\n     * @return  the path to the symbolic link\n     *\n     * @throws  UnsupportedOperationException\n     *          if the implementation does not support symbolic links or the\n     *          array contains an attribute that cannot be set atomically when\n     *          creating the symbolic link\n     * @throws  FileAlreadyExistsException\n     *          if a file with the name already exists <i>(optional specific\n     *          exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, it denies {@link LinkPermission}<tt>(\"symbolic\")</tt>\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the path of the symbolic link.\n     ",
    "links" : [ "java.nio.file.attribute.FileAttribute#name", "FileAttributeattributes", "java.nio.file.FileStore", "java.io.IOException", "#checkWrite(String)", "java.nio.file.Path#isAbsolute", "java.nio.file.LinkPermission" ]
  }, {
    "name" : "public static Path createLink(Path link, Path existing) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Creates a new link (directory entry) for an existing file <i>(optional\n     * operation)</i>.\n     *\n     * <p> The {@code link} parameter locates the directory entry to create.\n     * The {@code existing} parameter is the path to an existing file. This\n     * method creates a new directory entry for the file so that it can be\n     * accessed using {@code link} as the path. On some file systems this is\n     * known as creating a \"hard link\". Whether the file attributes are\n     * maintained for the file or for each directory entry is file system\n     * specific and therefore not specified. Typically, a file system requires\n     * that all links (directory entries) for a file be on the same file system.\n     * Furthermore, on some platforms, the Java virtual machine may require to\n     * be started with implementation specific privileges to create hard links\n     * or to create links to directories.\n     *\n     * @param   link\n     *          the link (directory entry) to create\n     * @param   existing\n     *          a path to an existing file\n     *\n     * @return  the path to the link (directory entry)\n     *\n     * @throws  UnsupportedOperationException\n     *          if the implementation does not support adding an existing file\n     *          to a directory\n     * @throws  FileAlreadyExistsException\n     *          if the entry could not otherwise be created because a file of\n     *          that name already exists <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, it denies {@link LinkPermission}<tt>(\"hard\")</tt>\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to either the link or the\n     *          existing file.\n     ",
    "links" : [ "#checkWrite(String)", "java.nio.file.LinkPermission" ]
  }, {
    "name" : "public static void delete(Path path) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Deletes a file.\n     *\n     * <p> An implementation may require to examine the file to determine if the\n     * file is a directory. Consequently this method may not be atomic with respect\n     * to other file system operations.  If the file is a symbolic link then the\n     * symbolic link itself, not the final target of the link, is deleted.\n     *\n     * <p> If the file is a directory then the directory must be empty. In some\n     * implementations a directory has entries for special files or links that\n     * are created when the directory is created. In such implementations a\n     * directory is considered empty when only the special entries exist.\n     * This method can be used with the {@link #walkFileTree walkFileTree}\n     * method to delete a directory and all entries in the directory, or an\n     * entire <i>file-tree</i> where required.\n     *\n     * <p> On some operating systems it may not be possible to remove a file when\n     * it is open and in use by this Java virtual machine or other programs.\n     *\n     * @param   path\n     *          the path to the file to delete\n     *\n     * @throws  NoSuchFileException\n     *          if the file does not exist <i>(optional specific exception)</i>\n     * @throws  DirectoryNotEmptyException\n     *          if the file is a directory and could not otherwise be deleted\n     *          because the directory is not empty <i>(optional specific\n     *          exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkDelete(String)} method\n     *          is invoked to check delete access to the file\n     ",
    "links" : [ "#checkDelete(String)", "#walkFileTree" ]
  }, {
    "name" : "public static boolean deleteIfExists(Path path) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Deletes a file if it exists.\n     *\n     * <p> As with the {@link #delete(Path) delete(Path)} method, an\n     * implementation may need to examine the file to determine if the file is a\n     * directory. Consequently this method may not be atomic with respect to\n     * other file system operations.  If the file is a symbolic link, then the\n     * symbolic link itself, not the final target of the link, is deleted.\n     *\n     * <p> If the file is a directory then the directory must be empty. In some\n     * implementations a directory has entries for special files or links that\n     * are created when the directory is created. In such implementations a\n     * directory is considered empty when only the special entries exist.\n     *\n     * <p> On some operating systems it may not be possible to remove a file when\n     * it is open and in use by this Java virtual machine or other programs.\n     *\n     * @param   path\n     *          the path to the file to delete\n     *\n     * @return  {@code true} if the file was deleted by this method; {@code\n     *          false} if the file could not be deleted because it did not\n     *          exist\n     *\n     * @throws  DirectoryNotEmptyException\n     *          if the file is a directory and could not otherwise be deleted\n     *          because the directory is not empty <i>(optional specific\n     *          exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkDelete(String)} method\n     *          is invoked to check delete access to the file.\n     ",
    "links" : [ "#delete(Path)", "#checkDelete(String)" ]
  }, {
    "name" : "public static Path copy(Path source, Path target, CopyOption... options) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Copy a file to a target file.\n     *\n     * <p> This method copies a file to the target file with the {@code\n     * options} parameter specifying how the copy is performed. By default, the\n     * copy fails if the target file already exists or is a symbolic link,\n     * except if the source and target are the {@link #isSameFile same} file, in\n     * which case the method completes without copying the file. File attributes\n     * are not required to be copied to the target file. If symbolic links are\n     * supported, and the file is a symbolic link, then the final target of the\n     * link is copied. If the file is a directory then it creates an empty\n     * directory in the target location (entries in the directory are not\n     * copied). This method can be used with the {@link #walkFileTree\n     * walkFileTree} method to copy a directory and all entries in the directory,\n     * or an entire <i>file-tree</i> where required.\n     *\n     * <p> The {@code options} parameter may include any of the following:\n     *\n     * <table border=1 cellpadding=5 summary=\"\">\n     * <tr> <th>Option</th> <th>Description</th> </tr>\n     * <tr>\n     *   <td> {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} </td>\n     *   <td> If the target file exists, then the target file is replaced if it\n     *     is not a non-empty directory. If the target file exists and is a\n     *     symbolic link, then the symbolic link itself, not the target of\n     *     the link, is replaced. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link StandardCopyOption#COPY_ATTRIBUTES COPY_ATTRIBUTES} </td>\n     *   <td> Attempts to copy the file attributes associated with this file to\n     *     the target file. The exact file attributes that are copied is platform\n     *     and file system dependent and therefore unspecified. Minimally, the\n     *     {@link BasicFileAttributes#lastModifiedTime last-modified-time} is\n     *     copied to the target file if supported by both the source and target\n     *     file stores. Copying of file timestamps may result in precision\n     *     loss. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} </td>\n     *   <td> Symbolic links are not followed. If the file is a symbolic link,\n     *     then the symbolic link itself, not the target of the link, is copied.\n     *     It is implementation specific if file attributes can be copied to the\n     *     new link. In other words, the {@code COPY_ATTRIBUTES} option may be\n     *     ignored when copying a symbolic link. </td>\n     * </tr>\n     * </table>\n     *\n     * <p> An implementation of this interface may support additional\n     * implementation specific options.\n     *\n     * <p> Copying a file is not an atomic operation. If an {@link IOException}\n     * is thrown, then it is possible that the target file is incomplete or some\n     * of its file attributes have not been copied from the source file. When\n     * the {@code REPLACE_EXISTING} option is specified and the target file\n     * exists, then the target file is replaced. The check for the existence of\n     * the file and the creation of the new file may not be atomic with respect\n     * to other file system activities.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to copy a file into a directory, giving it the same file\n     * name as the source file:\n     * <pre>\n     *     Path source = ...\n     *     Path newdir = ...\n     *     Files.copy(source, newdir.resolve(source.getFileName());\n     * </pre>\n     *\n     * @param   source\n     *          the path to the file to copy\n     * @param   target\n     *          the path to the target file (may be associated with a different\n     *          provider to the source path)\n     * @param   options\n     *          options specifying how the copy should be done\n     *\n     * @return  the path to the target file\n     *\n     * @throws  UnsupportedOperationException\n     *          if the array contains a copy option that is not supported\n     * @throws  FileAlreadyExistsException\n     *          if the target file exists but cannot be replaced because the\n     *          {@code REPLACE_EXISTING} option is not specified <i>(optional\n     *          specific exception)</i>\n     * @throws  DirectoryNotEmptyException\n     *          the {@code REPLACE_EXISTING} option is specified but the file\n     *          cannot be replaced because it is a non-empty directory\n     *          <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the source file, the\n     *          {@link SecurityManager#checkWrite(String) checkWrite} is invoked\n     *          to check write access to the target file. If a symbolic link is\n     *          copied the security manager is invoked to check {@link\n     *          LinkPermission}{@code (\"symbolic\")}.\n     ",
    "links" : [ "java.nio.file.attribute.BasicFileAttributes#lastModifiedTime", "java.nio.file.StandardCopyOption#REPLACE_EXISTING", "#checkRead(String)", "java.io.IOException", "java.nio.file.LinkOption#NOFOLLOW_LINKS", "#walkFileTreewalkFileTree", "#checkWrite(String)", "java.nio.file.StandardCopyOption#COPY_ATTRIBUTES", "#isSameFile", "java.nio.file.LinkPermission" ]
  }, {
    "name" : "public static Path move(Path source, Path target, CopyOption... options) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Move or rename a file to a target file.\n     *\n     * <p> By default, this method attempts to move the file to the target\n     * file, failing if the target file exists except if the source and\n     * target are the {@link #isSameFile same} file, in which case this method\n     * has no effect. If the file is a symbolic link then the symbolic link\n     * itself, not the target of the link, is moved. This method may be\n     * invoked to move an empty directory. In some implementations a directory\n     * has entries for special files or links that are created when the\n     * directory is created. In such implementations a directory is considered\n     * empty when only the special entries exist. When invoked to move a\n     * directory that is not empty then the directory is moved if it does not\n     * require moving the entries in the directory.  For example, renaming a\n     * directory on the same {@link FileStore} will usually not require moving\n     * the entries in the directory. When moving a directory requires that its\n     * entries be moved then this method fails (by throwing an {@code\n     * IOException}). To move a <i>file tree</i> may involve copying rather\n     * than moving directories and this can be done using the {@link\n     * #copy copy} method in conjunction with the {@link\n     * #walkFileTree Files.walkFileTree} utility method.\n     *\n     * <p> The {@code options} parameter may include any of the following:\n     *\n     * <table border=1 cellpadding=5 summary=\"\">\n     * <tr> <th>Option</th> <th>Description</th> </tr>\n     * <tr>\n     *   <td> {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} </td>\n     *   <td> If the target file exists, then the target file is replaced if it\n     *     is not a non-empty directory. If the target file exists and is a\n     *     symbolic link, then the symbolic link itself, not the target of\n     *     the link, is replaced. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} </td>\n     *   <td> The move is performed as an atomic file system operation and all\n     *     other options are ignored. If the target file exists then it is\n     *     implementation specific if the existing file is replaced or this method\n     *     fails by throwing an {@link IOException}. If the move cannot be\n     *     performed as an atomic file system operation then {@link\n     *     AtomicMoveNotSupportedException} is thrown. This can arise, for\n     *     example, when the target location is on a different {@code FileStore}\n     *     and would require that the file be copied, or target location is\n     *     associated with a different provider to this object. </td>\n     * </table>\n     *\n     * <p> An implementation of this interface may support additional\n     * implementation specific options.\n     *\n     * <p> Moving a file will copy the {@link\n     * BasicFileAttributes#lastModifiedTime last-modified-time} to the target\n     * file if supported by both source and target file stores. Copying of file\n     * timestamps may result in precision loss. An implementation may also\n     * attempt to copy other file attributes but is not required to fail if the\n     * file attributes cannot be copied. When the move is performed as\n     * a non-atomic operation, and an {@code IOException} is thrown, then the\n     * state of the files is not defined. The original file and the target file\n     * may both exist, the target file may be incomplete or some of its file\n     * attributes may not been copied from the original file.\n     *\n     * <p> <b>Usage Examples:</b>\n     * Suppose we want to rename a file to \"newname\", keeping the file in the\n     * same directory:\n     * <pre>\n     *     Path source = ...\n     *     Files.move(source, source.resolveSibling(\"newname\"));\n     * </pre>\n     * Alternatively, suppose we want to move a file to new directory, keeping\n     * the same file name, and replacing any existing file of that name in the\n     * directory:\n     * <pre>\n     *     Path source = ...\n     *     Path newdir = ...\n     *     Files.move(source, newdir.resolve(source.getFileName()), REPLACE_EXISTING);\n     * </pre>\n     *\n     * @param   source\n     *          the path to the file to move\n     * @param   target\n     *          the path to the target file (may be associated with a different\n     *          provider to the source path)\n     * @param   options\n     *          options specifying how the move should be done\n     *\n     * @return  the path to the target file\n     *\n     * @throws  UnsupportedOperationException\n     *          if the array contains a copy option that is not supported\n     * @throws  FileAlreadyExistsException\n     *          if the target file exists but cannot be replaced because the\n     *          {@code REPLACE_EXISTING} option is not specified <i>(optional\n     *          specific exception)</i>\n     * @throws  DirectoryNotEmptyException\n     *          the {@code REPLACE_EXISTING} option is specified but the file\n     *          cannot be replaced because it is a non-empty directory\n     *          <i>(optional specific exception)</i>\n     * @throws  AtomicMoveNotSupportedException\n     *          if the options array contains the {@code ATOMIC_MOVE} option but\n     *          the file cannot be moved as an atomic file system operation.\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to both the source and\n     *          target file.\n     ",
    "links" : [ "java.nio.file.StandardCopyOption#ATOMIC_MOVE", "#copy", "java.nio.file.FileStore", "java.nio.file.attribute.BasicFileAttributes#lastModifiedTime", "java.nio.file.StandardCopyOption#REPLACE_EXISTING", "#walkFileTree", "java.nio.file.AtomicMoveNotSupportedException", "java.io.IOException", "#checkWrite(String)", "#isSameFile" ]
  }, {
    "name" : "public static Path readSymbolicLink(Path link) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Reads the target of a symbolic link <i>(optional operation)</i>.\n     *\n     * <p> If the file system supports <a href=\"package-summary.html#links\">symbolic\n     * links</a> then this method is used to read the target of the link, failing\n     * if the file is not a symbolic link. The target of the link need not exist.\n     * The returned {@code Path} object will be associated with the same file\n     * system as {@code link}.\n     *\n     * @param   link\n     *          the path to the symbolic link\n     *\n     * @return  a {@code Path} object representing the target of the link\n     *\n     * @throws  UnsupportedOperationException\n     *          if the implementation does not support symbolic links\n     * @throws  NotLinkException\n     *          if the target could otherwise not be read because the file\n     *          is not a symbolic link <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager\n     *          is installed, it checks that {@code FilePermission} has been\n     *          granted with the \"{@code readlink}\" action to read the link.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileStore getFileStore(Path path) throws IOException",
    "returnType" : "FileStore",
    "comment" : "\n     * Returns the {@link FileStore} representing the file store where a file\n     * is located.\n     *\n     * <p> Once a reference to the {@code FileStore} is obtained it is\n     * implementation specific if operations on the returned {@code FileStore},\n     * or {@link FileStoreAttributeView} objects obtained from it, continue\n     * to depend on the existence of the file. In particular the behavior is not\n     * defined for the case that the file is deleted or moved to a different\n     * file store.\n     *\n     * @param   path\n     *          the path to the file\n     *\n     * @return  the file store where the file is stored\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file, and in\n     *          addition it checks {@link RuntimePermission}<tt>\n     *          (\"getFileStoreAttributes\")</tt>\n     ",
    "links" : [ "java.nio.file.FileStore", "#checkRead(String)", "RuntimePermission", "java.nio.file.attribute.FileStoreAttributeView" ]
  }, {
    "name" : "public static boolean isSameFile(Path path, Path path2) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if two paths locate the same file.\n     *\n     * <p> If both {@code Path} objects are {@link Path#equals(Object) equal}\n     * then this method returns {@code true} without checking if the file exists.\n     * If the two {@code Path} objects are associated with different providers\n     * then this method returns {@code false}. Otherwise, this method checks if\n     * both {@code Path} objects locate the same file, and depending on the\n     * implementation, may require to open or access both files.\n     *\n     * <p> If the file system and files remain static, then this method implements\n     * an equivalence relation for non-null {@code Paths}.\n     * <ul>\n     * <li>It is <i>reflexive</i>: for {@code Path} {@code f},\n     *     {@code isSameFile(f,f)} should return {@code true}.\n     * <li>It is <i>symmetric</i>: for two {@code Paths} {@code f} and {@code g},\n     *     {@code isSameFile(f,g)} will equal {@code isSameFile(g,f)}.\n     * <li>It is <i>transitive</i>: for three {@code Paths}\n     *     {@code f}, {@code g}, and {@code h}, if {@code isSameFile(f,g)} returns\n     *     {@code true} and {@code isSameFile(g,h)} returns {@code true}, then\n     *     {@code isSameFile(f,h)} will return return {@code true}.\n     * </ul>\n     *\n     * @param   path\n     *          one path to the file\n     * @param   path2\n     *          the other path\n     *\n     * @return  {@code true} if, and only if, the two paths locate the same file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to both files.\n     *\n     * @see java.nio.file.attribute.BasicFileAttributes#fileKey\n     ",
    "links" : [ "#checkRead(String)", "java.nio.file.Path#equals(Object)" ]
  }, {
    "name" : "public static boolean isHidden(Path path) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not a file is considered <em>hidden</em>. The exact\n     * definition of hidden is platform or provider dependent. On UNIX for\n     * example a file is considered to be hidden if its name begins with a\n     * period character ('.'). On Windows a file is considered hidden if it\n     * isn't a directory and the DOS {@link DosFileAttributes#isHidden hidden}\n     * attribute is set.\n     *\n     * <p> Depending on the implementation this method may require to access\n     * the file system to determine if the file is considered hidden.\n     *\n     * @param   path\n     *          the path to the file to test\n     *\n     * @return  {@code true} if the file is considered hidden\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     ",
    "links" : [ "#checkRead(String)", "java.nio.file.attribute.DosFileAttributes#isHidden" ]
  }, {
    "name" : "public static String probeContentType(Path path) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Probes the content type of a file.\n     *\n     * <p> This method uses the installed {@link FileTypeDetector} implementations\n     * to probe the given file to determine its content type. Each file type\n     * detector's {@link FileTypeDetector#probeContentType probeContentType} is\n     * invoked, in turn, to probe the file type. If the file is recognized then\n     * the content type is returned. If the file is not recognized by any of the\n     * installed file type detectors then a system-default file type detector is\n     * invoked to guess the content type.\n     *\n     * <p> A given invocation of the Java virtual machine maintains a system-wide\n     * list of file type detectors. Installed file type detectors are loaded\n     * using the service-provider loading facility defined by the {@link ServiceLoader}\n     * class. Installed file type detectors are loaded using the system class\n     * loader. If the system class loader cannot be found then the extension class\n     * loader is used; If the extension class loader cannot be found then the\n     * bootstrap class loader is used. File type detectors are typically installed\n     * by placing them in a JAR file on the application class path or in the\n     * extension directory, the JAR file contains a provider-configuration file\n     * named {@code java.nio.file.spi.FileTypeDetector} in the resource directory\n     * {@code META-INF/services}, and the file lists one or more fully-qualified\n     * names of concrete subclass of {@code FileTypeDetector } that have a zero\n     * argument constructor. If the process of locating or instantiating the\n     * installed file type detectors fails then an unspecified error is thrown.\n     * The ordering that installed providers are located is implementation\n     * specific.\n     *\n     * <p> The return value of this method is the string form of the value of a\n     * Multipurpose Internet Mail Extension (MIME) content type as\n     * defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\"><i>RFC&nbsp;2045:\n     * Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet\n     * Message Bodies</i></a>. The string is guaranteed to be parsable according\n     * to the grammar in the RFC.\n     *\n     * @param   path\n     *          the path to the file to probe\n     *\n     * @return  The content type of the file, or {@code null} if the content\n     *          type cannot be determined\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is installed and it denies an unspecified\n     *          permission required by a file type detector implementation.\n     ",
    "links" : [ "java.nio.file.spi.FileTypeDetector#probeContentType", "java.util.ServiceLoader", "java.nio.file.spi.FileTypeDetector" ]
  }, {
    "name" : "public static V getFileAttributeView(Path path, Class<V> type, LinkOption... options)",
    "returnType" : "V",
    "comment" : "\n     * Returns a file attribute view of a given type.\n     *\n     * <p> A file attribute view provides a read-only or updatable view of a\n     * set of file attributes. This method is intended to be used where the file\n     * attribute view defines type-safe methods to read or update the file\n     * attributes. The {@code type} parameter is the type of the attribute view\n     * required and the method returns an instance of that type if supported.\n     * The {@link BasicFileAttributeView} type supports access to the basic\n     * attributes of a file. Invoking this method to select a file attribute\n     * view of that type will always return an instance of that class.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled by the resulting file attribute view for the case that the\n     * file is a symbolic link. By default, symbolic links are followed. If the\n     * option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then\n     * symbolic links are not followed. This option is ignored by implementations\n     * that do not support symbolic links.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want read or set a file's ACL, if supported:\n     * <pre>\n     *     Path path = ...\n     *     AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);\n     *     if (view != null) {\n     *         List&lt;AclEntry&gt; acl = view.getAcl();\n     *         :\n     *     }\n     * </pre>\n     *\n     * @param   <V>\n     *          The {@code FileAttributeView} type\n     * @param   path\n     *          the path to the file\n     * @param   type\n     *          the {@code Class} object corresponding to the file attribute view\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  a file attribute view of the specified type, or {@code null} if\n     *          the attribute view type is not available\n     ",
    "links" : [ "java.nio.file.attribute.BasicFileAttributeView", "java.nio.file.LinkOption#NOFOLLOW_LINKS" ]
  }, {
    "name" : "public static A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException",
    "returnType" : "A",
    "comment" : "\n     * Reads a file's attributes as a bulk operation.\n     *\n     * <p> The {@code type} parameter is the type of the attributes required\n     * and this method returns an instance of that type if supported. All\n     * implementations support a basic set of file attributes and so invoking\n     * this method with a  {@code type} parameter of {@code\n     * BasicFileAttributes.class} will not throw {@code\n     * UnsupportedOperationException}.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> It is implementation specific if all file attributes are read as an\n     * atomic operation with respect to other file system operations.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to read a file's attributes in bulk:\n     * <pre>\n     *    Path path = ...\n     *    BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);\n     * </pre>\n     * Alternatively, suppose we want to read file's POSIX attributes without\n     * following symbolic links:\n     * <pre>\n     *    PosixFileAttributes attrs = Files.readAttributes(path, PosixFileAttributes.class, NOFOLLOW_LINKS);\n     * </pre>\n     *\n     * @param   <A>\n     *          The {@code BasicFileAttributes} type\n     * @param   path\n     *          the path to the file\n     * @param   type\n     *          the {@code Class} of the file attributes required\n     *          to read\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  the file attributes\n     *\n     * @throws  UnsupportedOperationException\n     *          if an attributes of the given type are not supported\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file. If this\n     *          method is invoked to read security sensitive attributes then the\n     *          security manager may be invoke to check for additional permissions.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#checkRead(String)" ]
  }, {
    "name" : "public static Path setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Sets the value of a file attribute.\n     *\n     * <p> The {@code attribute} parameter identifies the attribute to be set\n     * and takes the form:\n     * <blockquote>\n     * [<i>view-name</i><b>:</b>]<i>attribute-name</i>\n     * </blockquote>\n     * where square brackets [...] delineate an optional component and the\n     * character {@code ':'} stands for itself.\n     *\n     * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link\n     * FileAttributeView} that identifies a set of file attributes. If not\n     * specified then it defaults to {@code \"basic\"}, the name of the file\n     * attribute view that identifies the basic set of file attributes common to\n     * many file systems. <i>attribute-name</i> is the name of the attribute\n     * within the set.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is set. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to set the DOS \"hidden\" attribute:\n     * <pre>\n     *    Path path = ...\n     *    Files.setAttribute(path, \"dos:hidden\", true);\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file\n     * @param   attribute\n     *          the attribute to set\n     * @param   value\n     *          the attribute value\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  the {@code path} parameter\n     *\n     * @throws  UnsupportedOperationException\n     *          if the attribute view is not available\n     * @throws  IllegalArgumentException\n     *          if the attribute name is not specified, or is not recognized, or\n     *          the attribute value is of the correct type but has an\n     *          inappropriate value\n     * @throws  ClassCastException\n     *          if the attribute value is not of the expected type or is a\n     *          collection containing elements that are not of the expected\n     *          type\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the file. If this method is invoked\n     *          to set security sensitive attributes then the security manager\n     *          may be invoked to check for additional permissions.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "java.nio.file.attribute.BasicFileAttributeView#name", "java.nio.file.attribute.BasicFileAttributeView", "#checkWrite(String)" ]
  }, {
    "name" : "public static Object getAttribute(Path path, String attribute, LinkOption... options) throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Reads the value of a file attribute.\n     *\n     * <p> The {@code attribute} parameter identifies the attribute to be read\n     * and takes the form:\n     * <blockquote>\n     * [<i>view-name</i><b>:</b>]<i>attribute-name</i>\n     * </blockquote>\n     * where square brackets [...] delineate an optional component and the\n     * character {@code ':'} stands for itself.\n     *\n     * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link\n     * FileAttributeView} that identifies a set of file attributes. If not\n     * specified then it defaults to {@code \"basic\"}, the name of the file\n     * attribute view that identifies the basic set of file attributes common to\n     * many file systems. <i>attribute-name</i> is the name of the attribute.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we require the user ID of the file owner on a system that\n     * supports a \"{@code unix}\" view:\n     * <pre>\n     *    Path path = ...\n     *    int uid = (Integer)Files.getAttribute(path, \"unix:uid\");\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file\n     * @param   attribute\n     *          the attribute to read\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  the attribute value\n     *\n     * @throws  UnsupportedOperationException\n     *          if the attribute view is not available\n     * @throws  IllegalArgumentException\n     *          if the attribute name is not specified or is not recognized\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file. If this method is invoked\n     *          to read security sensitive attributes then the security manager\n     *          may be invoked to check for additional permissions.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "java.nio.file.attribute.BasicFileAttributeView#name", "#checkRead(String)", "java.nio.file.attribute.BasicFileAttributeView" ]
  }, {
    "name" : "public static Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException",
    "returnType" : "Map<String, Object>",
    "comment" : "\n     * Reads a set of file attributes as a bulk operation.\n     *\n     * <p> The {@code attributes} parameter identifies the attributes to be read\n     * and takes the form:\n     * <blockquote>\n     * [<i>view-name</i><b>:</b>]<i>attribute-list</i>\n     * </blockquote>\n     * where square brackets [...] delineate an optional component and the\n     * character {@code ':'} stands for itself.\n     *\n     * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link\n     * FileAttributeView} that identifies a set of file attributes. If not\n     * specified then it defaults to {@code \"basic\"}, the name of the file\n     * attribute view that identifies the basic set of file attributes common to\n     * many file systems.\n     *\n     * <p> The <i>attribute-list</i> component is a comma separated list of\n     * zero or more names of attributes to read. If the list contains the value\n     * {@code \"*\"} then all attributes are read. Attributes that are not supported\n     * are ignored and will not be present in the returned map. It is\n     * implementation specific if all attributes are read as an atomic operation\n     * with respect to other file system operations.\n     *\n     * <p> The following examples demonstrate possible values for the {@code\n     * attributes} parameter:\n     *\n     * <blockquote>\n     * <table border=\"0\" summary=\"Possible values\">\n     * <tr>\n     *   <td> {@code \"*\"} </td>\n     *   <td> Read all {@link BasicFileAttributes basic-file-attributes}. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@code \"size,lastModifiedTime,lastAccessTime\"} </td>\n     *   <td> Reads the file size, last modified time, and last access time\n     *     attributes. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@code \"posix:*\"} </td>\n     *   <td> Read all {@link PosixFileAttributes POSIX-file-attributes}. </td>\n     * </tr>\n     * <tr>\n     *   <td> {@code \"posix:permissions,owner,size\"} </td>\n     *   <td> Reads the POSX file permissions, owner, and file size. </td>\n     * </tr>\n     * </table>\n     * </blockquote>\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   attributes\n     *          the attributes to read\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  a map of the attributes returned; The map's keys are the\n     *          attribute names, its values are the attribute values\n     *\n     * @throws  UnsupportedOperationException\n     *          if the attribute view is not available\n     * @throws  IllegalArgumentException\n     *          if no attributes are specified or an unrecognized attributes is\n     *          specified\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file. If this method is invoked\n     *          to read security sensitive attributes then the security manager\n     *          may be invoke to check for additional permissions.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "java.nio.file.attribute.BasicFileAttributeView#name", "java.nio.file.attribute.PosixFileAttributes", "#checkRead(String)", "java.nio.file.attribute.BasicFileAttributeView", "java.nio.file.attribute.BasicFileAttributes" ]
  }, {
    "name" : "public static Set<PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options) throws IOException",
    "returnType" : "Set<PosixFilePermission>",
    "comment" : "\n     * Returns a file's POSIX file permissions.\n     *\n     * <p> The {@code path} parameter is associated with a {@code FileSystem}\n     * that supports the {@link PosixFileAttributeView}. This attribute view\n     * provides access to file attributes commonly associated with files on file\n     * systems used by operating systems that implement the Portable Operating\n     * System Interface (POSIX) family of standards.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  the file permissions\n     *\n     * @throws  UnsupportedOperationException\n     *          if the associated file system does not support the {@code\n     *          PosixFileAttributeView}\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>\n     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n     *          denies read access to the file.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#checkRead(String)", "java.nio.file.attribute.PosixFileAttributeView", "RuntimePermission" ]
  }, {
    "name" : "public static Path setPosixFilePermissions(Path path, Set<PosixFilePermission> perms) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Sets a file's POSIX permissions.\n     *\n     * <p> The {@code path} parameter is associated with a {@code FileSystem}\n     * that supports the {@link PosixFileAttributeView}. This attribute view\n     * provides access to file attributes commonly associated with files on file\n     * systems used by operating systems that implement the Portable Operating\n     * System Interface (POSIX) family of standards.\n     *\n     * @param   path\n     *          The path to the file\n     * @param   perms\n     *          The new set of permissions\n     *\n     * @return  The path\n     *\n     * @throws  UnsupportedOperationException\n     *          if the associated file system does not support the {@code\n     *          PosixFileAttributeView}\n     * @throws  ClassCastException\n     *          if the sets contains elements that are not of type {@code\n     *          PosixFilePermission}\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the file.\n     ",
    "links" : [ "java.nio.file.attribute.PosixFileAttributeView", "RuntimePermission", "#checkWrite(String)" ]
  }, {
    "name" : "public static UserPrincipal getOwner(Path path, LinkOption... options) throws IOException",
    "returnType" : "UserPrincipal",
    "comment" : "\n     * Returns the owner of a file.\n     *\n     * <p> The {@code path} parameter is associated with a file system that\n     * supports {@link FileOwnerAttributeView}. This file attribute view provides\n     * access to a file attribute that is the owner of the file.\n     *\n     * @param   path\n     *          The path to the file\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  A user principal representing the owner of the file\n     *\n     * @throws  UnsupportedOperationException\n     *          if the associated file system does not support the {@code\n     *          FileOwnerAttributeView}\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>\n     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n     *          denies read access to the file.\n     ",
    "links" : [ "#checkRead(String)", "RuntimePermission", "java.nio.file.attribute.FileOwnerAttributeView" ]
  }, {
    "name" : "public static Path setOwner(Path path, UserPrincipal owner) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Updates the file owner.\n     *\n     * <p> The {@code path} parameter is associated with a file system that\n     * supports {@link FileOwnerAttributeView}. This file attribute view provides\n     * access to a file attribute that is the owner of the file.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to make \"joe\" the owner of a file:\n     * <pre>\n     *     Path path = ...\n     *     UserPrincipalLookupService lookupService =\n     *         provider(path).getUserPrincipalLookupService();\n     *     UserPrincipal joe = lookupService.lookupPrincipalByName(\"joe\");\n     *     Files.setOwner(path, joe);\n     * </pre>\n     *\n     * @param   path\n     *          The path to the file\n     * @param   owner\n     *          The new file owner\n     *\n     * @return  The path\n     *\n     * @throws  UnsupportedOperationException\n     *          if the associated file system does not support the {@code\n     *          FileOwnerAttributeView}\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the file.\n     *\n     * @see FileSystem#getUserPrincipalLookupService\n     * @see java.nio.file.attribute.UserPrincipalLookupService\n     ",
    "links" : [ "RuntimePermission", "java.nio.file.attribute.FileOwnerAttributeView", "#checkWrite(String)" ]
  }, {
    "name" : "public static boolean isSymbolicLink(Path path)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file is a symbolic link.\n     *\n     * <p> Where it is required to distinguish an I/O exception from the case\n     * that the file is not a symbolic link then the file attributes can be\n     * read with the {@link #readAttributes(Path,Class,LinkOption[])\n     * readAttributes} method and the file type tested with the {@link\n     * BasicFileAttributes#isSymbolicLink} method.\n     *\n     * @param   path  The path to the file\n     *\n     * @return  {@code true} if the file is a symbolic link; {@code false} if\n     *          the file does not exist, is not a symbolic link, or it cannot\n     *          be determined if the file is a symbolic link or not.\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file.\n     ",
    "links" : [ "#readAttributes(Path", "#checkRead(String)", "java.nio.file.attribute.BasicFileAttributes#isSymbolicLink" ]
  }, {
    "name" : "public static boolean isDirectory(Path path, LinkOption... options)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file is a directory.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> Where it is required to distinguish an I/O exception from the case\n     * that the file is not a directory then the file attributes can be\n     * read with the {@link #readAttributes(Path,Class,LinkOption[])\n     * readAttributes} method and the file type tested with the {@link\n     * BasicFileAttributes#isDirectory} method.\n     *\n     * @param   path\n     *          the path to the file to test\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  {@code true} if the file is a directory; {@code false} if\n     *          the file does not exist, is not a directory, or it cannot\n     *          be determined if the file is a directory or not.\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#readAttributes(Path", "#checkRead(String)", "java.nio.file.attribute.BasicFileAttributes#isDirectory" ]
  }, {
    "name" : "public static boolean isRegularFile(Path path, LinkOption... options)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file is a regular file with opaque content.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> Where it is required to distinguish an I/O exception from the case\n     * that the file is not a regular file then the file attributes can be\n     * read with the {@link #readAttributes(Path,Class,LinkOption[])\n     * readAttributes} method and the file type tested with the {@link\n     * BasicFileAttributes#isRegularFile} method.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  {@code true} if the file is a regular file; {@code false} if\n     *          the file does not exist, is not a regular file, or it\n     *          cannot be determined if the file is a regular file or not.\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#readAttributes(Path", "#checkRead(String)", "java.nio.file.attribute.BasicFileAttributes#isRegularFile" ]
  }, {
    "name" : "public static FileTime getLastModifiedTime(Path path, LinkOption... options) throws IOException",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns a file's last modified time.\n     *\n     * <p> The {@code options} array may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed and the file attribute of the final target\n     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  a {@code FileTime} representing the time the file was last\n     *          modified, or an implementation specific default when a time\n     *          stamp to indicate the time of last modification is not supported\n     *          by the file system\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file.\n     *\n     * @see BasicFileAttributes#lastModifiedTime\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#checkRead(String)" ]
  }, {
    "name" : "public static Path setLastModifiedTime(Path path, FileTime time) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Updates a file's last modified time attribute. The file time is converted\n     * to the epoch and precision supported by the file system. Converting from\n     * finer to coarser granularities result in precision loss. The behavior of\n     * this method when attempting to set the last modified time when it is not\n     * supported by the file system or is outside the range supported by the\n     * underlying file store is not defined. It may or not fail by throwing an\n     * {@code IOException}.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to set the last modified time to the current time:\n     * <pre>\n     *    Path path = ...\n     *    FileTime now = FileTime.fromMillis(System.currentTimeMillis());\n     *    Files.setLastModifiedTime(path, now);\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file\n     * @param   time\n     *          the new last modified time\n     *\n     * @return  the path\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, the security manager's {@link\n     *          SecurityManager#checkWrite(String) checkWrite} method is invoked\n     *          to check write access to file\n     *\n     * @see BasicFileAttributeView#setTimes\n     ",
    "links" : [ "#checkWrite(String)" ]
  }, {
    "name" : "public static long size(Path path) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the size of a file (in bytes). The size may differ from the\n     * actual size on the file system due to compression, support for sparse\n     * files, or other reasons. The size of files that are not {@link\n     * #isRegularFile regular} files is implementation specific and\n     * therefore unspecified.\n     *\n     * @param   path\n     *          the path to the file\n     *\n     * @return  the file size, in bytes\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n     *          method denies read access to the file.\n     *\n     * @see BasicFileAttributes#size\n     ",
    "links" : [ "#isRegularFile", "#checkRead(String)" ]
  }, {
    "name" : "private static boolean followLinks(LinkOption... options)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code false} if NOFOLLOW_LINKS is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean exists(Path path, LinkOption... options)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file exists.\n     *\n     * <p> The {@code options} parameter may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> Note that the result of this method is immediately outdated. If this\n     * method indicates the file exists then there is no guarantee that a\n     * subsequence access will succeed. Care should be taken when using this\n     * method in security sensitive applications.\n     *\n     * @param   path\n     *          the path to the file to test\n     * @param   options\n     *          options indicating how symbolic links are handled\n     * .\n     * @return  {@code true} if the file exists; {@code false} if the file does\n     *          not exist or its existence cannot be determined.\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String)} is invoked to check\n     *          read access to the file.\n     *\n     * @see #notExists\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#checkRead(String)" ]
  }, {
    "name" : "public static boolean notExists(Path path, LinkOption... options)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether the file located by this path does not exist. This method\n     * is intended for cases where it is required to take action when it can be\n     * confirmed that a file does not exist.\n     *\n     * <p> The {@code options} parameter may be used to indicate how symbolic links\n     * are handled for the case that the file is a symbolic link. By default,\n     * symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS\n     * NOFOLLOW_LINKS} is present then symbolic links are not followed.\n     *\n     * <p> Note that this method is not the complement of the {@link #exists\n     * exists} method. Where it is not possible to determine if a file exists\n     * or not then both methods return {@code false}. As with the {@code exists}\n     * method, the result of this method is immediately outdated. If this\n     * method indicates the file does exist then there is no guarantee that a\n     * subsequence attempt to create the file will succeed. Care should be taken\n     * when using this method in security sensitive applications.\n     *\n     * @param   path\n     *          the path to the file to test\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  {@code true} if the file does not exist; {@code false} if the\n     *          file exists or its existence cannot be determined\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String)} is invoked to check\n     *          read access to the file.\n     ",
    "links" : [ "java.nio.file.LinkOption#NOFOLLOW_LINKSNOFOLLOW_LINKS", "#checkRead(String)", "#existsexists" ]
  }, {
    "name" : "private static boolean isAccessible(Path path, AccessMode... modes)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by isReadbale, isWritable, isExecutable to test access to a file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isReadable(Path path)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file is readable. This method checks that a file exists\n     * and that this Java virtual machine has appropriate privileges that would\n     * allow it open the file for reading. Depending on the implementation, this\n     * method may require to read file permissions, access control lists, or\n     * other file attributes in order to check the effective access to the file.\n     * Consequently, this method may not be atomic with respect to other file\n     * system operations.\n     *\n     * <p> Note that the result of this method is immediately outdated, there is\n     * no guarantee that a subsequent attempt to open the file for reading will\n     * succeed (or even that it will access the same file). Care should be taken\n     * when using this method in security sensitive applications.\n     *\n     * @param   path\n     *          the path to the file to check\n     *\n     * @return  {@code true} if the file exists and is readable; {@code false}\n     *          if the file does not exist, read access would be denied because\n     *          the Java virtual machine has insufficient privileges, or access\n     *          cannot be determined\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          is invoked to check read access to the file.\n     ",
    "links" : [ "#checkRead(String)" ]
  }, {
    "name" : "public static boolean isWritable(Path path)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file is writable. This method checks that a file exists\n     * and that this Java virtual machine has appropriate privileges that would\n     * allow it open the file for writing. Depending on the implementation, this\n     * method may require to read file permissions, access control lists, or\n     * other file attributes in order to check the effective access to the file.\n     * Consequently, this method may not be atomic with respect to other file\n     * system operations.\n     *\n     * <p> Note that result of this method is immediately outdated, there is no\n     * guarantee that a subsequent attempt to open the file for writing will\n     * succeed (or even that it will access the same file). Care should be taken\n     * when using this method in security sensitive applications.\n     *\n     * @param   path\n     *          the path to the file to check\n     *\n     * @return  {@code true} if the file exists and is writable; {@code false}\n     *          if the file does not exist, write access would be denied because\n     *          the Java virtual machine has insufficient privileges, or access\n     *          cannot be determined\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          is invoked to check write access to the file.\n     ",
    "links" : [ "#checkWrite(String)" ]
  }, {
    "name" : "public static boolean isExecutable(Path path)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether a file is executable. This method checks that a file exists\n     * and that this Java virtual machine has appropriate privileges to {@link\n     * Runtime#exec execute} the file. The semantics may differ when checking\n     * access to a directory. For example, on UNIX systems, checking for\n     * execute access checks that the Java virtual machine has permission to\n     * search the directory in order to access file or subdirectories.\n     *\n     * <p> Depending on the implementation, this method may require to read file\n     * permissions, access control lists, or other file attributes in order to\n     * check the effective access to the file. Consequently, this method may not\n     * be atomic with respect to other file system operations.\n     *\n     * <p> Note that the result of this method is immediately outdated, there is\n     * no guarantee that a subsequent attempt to execute the file will succeed\n     * (or even that it will access the same file). Care should be taken when\n     * using this method in security sensitive applications.\n     *\n     * @param   path\n     *          the path to the file to check\n     *\n     * @return  {@code true} if the file exists and is executable; {@code false}\n     *          if the file does not exist, execute access would be denied because\n     *          the Java virtual machine has insufficient privileges, or access\n     *          cannot be determined\n     *\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkExec(String)\n     *          checkExec} is invoked to check execute access to the file.\n     ",
    "links" : [ "#checkExec(String)", "#exec" ]
  }, {
    "name" : "public static Path walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Walks a file tree.\n     *\n     * <p> This method walks a file tree rooted at a given starting file. The\n     * file tree traversal is <em>depth-first</em> with the given {@link\n     * FileVisitor} invoked for each file encountered. File tree traversal\n     * completes when all accessible files in the tree have been visited, or a\n     * visit method returns a result of {@link FileVisitResult#TERMINATE\n     * TERMINATE}. Where a visit method terminates due an {@code IOException},\n     * an uncaught error, or runtime exception, then the traversal is terminated\n     * and the error or exception is propagated to the caller of this method.\n     *\n     * <p> For each file encountered this method attempts to read its {@link\n     * java.nio.file.attribute.BasicFileAttributes}. If the file is not a\n     * directory then the {@link FileVisitor#visitFile visitFile} method is\n     * invoked with the file attributes. If the file attributes cannot be read,\n     * due to an I/O exception, then the {@link FileVisitor#visitFileFailed\n     * visitFileFailed} method is invoked with the I/O exception.\n     *\n     * <p> Where the file is a directory, and the directory could not be opened,\n     * then the {@code visitFileFailed} method is invoked with the I/O exception,\n     * after which, the file tree walk continues, by default, at the next\n     * <em>sibling</em> of the directory.\n     *\n     * <p> Where the directory is opened successfully, then the entries in the\n     * directory, and their <em>descendants</em> are visited. When all entries\n     * have been visited, or an I/O error occurs during iteration of the\n     * directory, then the directory is closed and the visitor's {@link\n     * FileVisitor#postVisitDirectory postVisitDirectory} method is invoked.\n     * The file tree walk then continues, by default, at the next <em>sibling</em>\n     * of the directory.\n     *\n     * <p> By default, symbolic links are not automatically followed by this\n     * method. If the {@code options} parameter contains the {@link\n     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links are\n     * followed. When following links, and the attributes of the target cannot\n     * be read, then this method attempts to get the {@code BasicFileAttributes}\n     * of the link. If they can be read then the {@code visitFile} method is\n     * invoked with the attributes of the link (otherwise the {@code visitFileFailed}\n     * method is invoked as specified above).\n     *\n     * <p> If the {@code options} parameter contains the {@link\n     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then this method keeps\n     * track of directories visited so that cycles can be detected. A cycle\n     * arises when there is an entry in a directory that is an ancestor of the\n     * directory. Cycle detection is done by recording the {@link\n     * java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,\n     * or if file keys are not available, by invoking the {@link #isSameFile\n     * isSameFile} method to test if a directory is the same file as an\n     * ancestor. When a cycle is detected it is treated as an I/O error, and the\n     * {@link FileVisitor#visitFileFailed visitFileFailed} method is invoked with\n     * an instance of {@link FileSystemLoopException}.\n     *\n     * <p> The {@code maxDepth} parameter is the maximum number of levels of\n     * directories to visit. A value of {@code 0} means that only the starting\n     * file is visited, unless denied by the security manager. A value of\n     * {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all\n     * levels should be visited. The {@code visitFile} method is invoked for all\n     * files, including directories, encountered at {@code maxDepth}, unless the\n     * basic file attributes cannot be read, in which case the {@code\n     * visitFileFailed} method is invoked.\n     *\n     * <p> If a visitor returns a result of {@code null} then {@code\n     * NullPointerException} is thrown.\n     *\n     * <p> When a security manager is installed and it denies access to a file\n     * (or directory), then it is ignored and the visitor is not invoked for\n     * that file (or directory).\n     *\n     * @param   start\n     *          the starting file\n     * @param   options\n     *          options to configure the traversal\n     * @param   maxDepth\n     *          the maximum number of directory levels to visit\n     * @param   visitor\n     *          the file visitor to invoke for each file\n     *\n     * @return  the starting file\n     *\n     * @throws  IllegalArgumentException\n     *          if the {@code maxDepth} parameter is negative\n     * @throws  SecurityException\n     *          If the security manager denies access to the starting file.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String) checkRead} method is invoked\n     *          to check read access to the directory.\n     * @throws  IOException\n     *          if an I/O error is thrown by a visitor method\n     ",
    "links" : [ "java.nio.file.FileVisitor", "#checkRead(String)", "java.nio.file.FileVisitor#visitFile", "java.nio.file.FileVisitResult#TERMINATETERMINATE", "java.nio.file.attribute.BasicFileAttributes", "java.nio.file.FileVisitor#visitFileFailed", "java.nio.file.FileVisitOption#FOLLOW_LINKS", "#MAX_VALUE", "java.nio.file.FileVisitor#visitFileFailedvisitFileFailed", "java.nio.file.FileSystemLoopException", "java.nio.file.attribute.BasicFileAttributes#fileKey", "java.nio.file.FileVisitor#postVisitDirectory", "#isSameFileisSameFile" ]
  }, {
    "name" : "public static Path walkFileTree(Path start, FileVisitor<? super Path> visitor) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Walks a file tree.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <blockquote><pre>\n     * walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor)\n     * </pre></blockquote>\n     * In other words, it does not follow symbolic links, and visits all levels\n     * of the file tree.\n     *\n     * @param   start\n     *          the starting file\n     * @param   visitor\n     *          the file visitor to invoke for each file\n     *\n     * @return  the starting file\n     *\n     * @throws  SecurityException\n     *          If the security manager denies access to the starting file.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String) checkRead} method is invoked\n     *          to check read access to the directory.\n     * @throws  IOException\n     *          if an I/O error is thrown by a visitor method\n     ",
    "links" : [ "#checkRead(String)" ]
  }, {
    "name" : "public static BufferedReader newBufferedReader(Path path, Charset cs) throws IOException",
    "returnType" : "BufferedReader",
    "comment" : "\n     * Opens a file for reading, returning a {@code BufferedReader} that may be\n     * used to read text from the file in an efficient manner. Bytes from the\n     * file are decoded into characters using the specified charset. Reading\n     * commences at the beginning of the file.\n     *\n     * <p> The {@code Reader} methods that read from the file throw {@code\n     * IOException} if a malformed or unmappable byte sequence is read.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   cs\n     *          the charset to use for decoding\n     *\n     * @return  a new buffered reader, with default buffer size, to read text\n     *          from the file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs opening the file\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     *\n     * @see #readAllLines\n     ",
    "links" : [ "#checkRead(String)" ]
  }, {
    "name" : "public static BufferedReader newBufferedReader(Path path) throws IOException",
    "returnType" : "BufferedReader",
    "comment" : "\n     * Opens a file for reading, returning a {@code BufferedReader} to read text\n     * from the file in an efficient manner. Bytes from the file are decoded into\n     * characters using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset\n     * charset}.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <pre>{@code\n     * Files.newBufferedReader(path, StandardCharsets.UTF_8)\n     * }</pre>\n     *\n     * @param   path\n     *          the path to the file\n     *\n     * @return  a new buffered reader, with default buffer size, to read text\n     *          from the file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs opening the file\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     *\n     * @since 1.8\n     ",
    "links" : [ "Charsetcharset", "#checkRead(String)", "java.nio.charset.StandardCharsets#UTF_8" ]
  }, {
    "name" : "public static BufferedWriter newBufferedWriter(Path path, Charset cs, OpenOption... options) throws IOException",
    "returnType" : "BufferedWriter",
    "comment" : "\n     * Opens or creates a file for writing, returning a {@code BufferedWriter}\n     * that may be used to write text to the file in an efficient manner.\n     * The {@code options} parameter specifies how the the file is created or\n     * opened. If no options are present then this method works as if the {@link\n     * StandardOpenOption#CREATE CREATE}, {@link\n     * StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link\n     * StandardOpenOption#WRITE WRITE} options are present. In other words, it\n     * opens the file for writing, creating the file if it doesn't exist, or\n     * initially truncating an existing {@link #isRegularFile regular-file} to\n     * a size of {@code 0} if it exists.\n     *\n     * <p> The {@code Writer} methods to write text throw {@code IOException}\n     * if the text cannot be encoded using the specified charset.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   cs\n     *          the charset to use for encoding\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new buffered writer, with default buffer size, to write text\n     *          to the file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs opening or creating the file\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     *\n     * @see #write(Path,Iterable,Charset,OpenOption[])\n     ",
    "links" : [ "#isRegularFile", "java.nio.file.StandardOpenOption#WRITE", "java.nio.file.StandardOpenOption#CREATE", "java.nio.file.StandardOpenOption#TRUNCATE_EXISTING", "#checkWrite(String)" ]
  }, {
    "name" : "public static BufferedWriter newBufferedWriter(Path path, OpenOption... options) throws IOException",
    "returnType" : "BufferedWriter",
    "comment" : "\n     * Opens or creates a file for writing, returning a {@code BufferedWriter}\n     * to write text to the file in an efficient manner. The text is encoded\n     * into bytes for writing using the {@link StandardCharsets#UTF_8 UTF-8}\n     * {@link Charset charset}.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <pre>{@code\n     * Files.newBufferedWriter(path, StandardCharsets.UTF_8, options)\n     * }</pre>\n     *\n     * @param   path\n     *          the path to the file\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new buffered writer, with default buffer size, to write text\n     *          to the file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs opening or creating the file\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.nio.charset.Charset", "java.nio.charset.StandardCharsets#UTF_8", "#checkWrite(String)" ]
  }, {
    "name" : "private static long copy(InputStream source, OutputStream sink) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads all bytes from an input stream and writes them to an output stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(InputStream in, Path target, CopyOption... options) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copies all bytes from an input stream to a file. On return, the input\n     * stream will be at end of stream.\n     *\n     * <p> By default, the copy fails if the target file already exists or is a\n     * symbolic link. If the {@link StandardCopyOption#REPLACE_EXISTING\n     * REPLACE_EXISTING} option is specified, and the target file already exists,\n     * then it is replaced if it is not a non-empty directory. If the target\n     * file exists and is a symbolic link, then the symbolic link is replaced.\n     * In this release, the {@code REPLACE_EXISTING} option is the only option\n     * required to be supported by this method. Additional options may be\n     * supported in future releases.\n     *\n     * <p>  If an I/O error occurs reading from the input stream or writing to\n     * the file, then it may do so after the target file has been created and\n     * after some bytes have been read or written. Consequently the input\n     * stream may not be at end of stream and may be in an inconsistent state.\n     * It is strongly recommended that the input stream be promptly closed if an\n     * I/O error occurs.\n     *\n     * <p> This method may block indefinitely reading from the input stream (or\n     * writing to the file). The behavior for the case that the input stream is\n     * <i>asynchronously closed</i> or the thread interrupted during the copy is\n     * highly input stream and file system provider specific and therefore not\n     * specified.\n     *\n     * <p> <b>Usage example</b>: Suppose we want to capture a web page and save\n     * it to a file:\n     * <pre>\n     *     Path path = ...\n     *     URI u = URI.create(\"http://java.sun.com/\");\n     *     try (InputStream in = u.toURL().openStream()) {\n     *         Files.copy(in, path);\n     *     }\n     * </pre>\n     *\n     * @param   in\n     *          the input stream to read from\n     * @param   target\n     *          the path to the file\n     * @param   options\n     *          options specifying how the copy should be done\n     *\n     * @return  the number of bytes read or written\n     *\n     * @throws  IOException\n     *          if an I/O error occurs when reading or writing\n     * @throws  FileAlreadyExistsException\n     *          if the target file exists but cannot be replaced because the\n     *          {@code REPLACE_EXISTING} option is not specified <i>(optional\n     *          specific exception)</i>\n     * @throws  DirectoryNotEmptyException\n     *          the {@code REPLACE_EXISTING} option is specified but the file\n     *          cannot be replaced because it is a non-empty directory\n     *          <i>(optional specific exception)</i>     *\n     * @throws  UnsupportedOperationException\n     *          if {@code options} contains a copy option that is not supported\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file. Where the\n     *          {@code REPLACE_EXISTING} option is specified, the security\n     *          manager's {@link SecurityManager#checkDelete(String) checkDelete}\n     *          method is invoked to check that an existing file can be deleted.\n     ",
    "links" : [ "java.nio.file.StandardCopyOption#REPLACE_EXISTINGREPLACE_EXISTING", "#checkDelete(String)", "#checkWrite(String)" ]
  }, {
    "name" : "public static long copy(Path source, OutputStream out) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copies all bytes from a file to an output stream.\n     *\n     * <p> If an I/O error occurs reading from the file or writing to the output\n     * stream, then it may do so after some bytes have been read or written.\n     * Consequently the output stream may be in an inconsistent state. It is\n     * strongly recommended that the output stream be promptly closed if an I/O\n     * error occurs.\n     *\n     * <p> This method may block indefinitely writing to the output stream (or\n     * reading from the file). The behavior for the case that the output stream\n     * is <i>asynchronously closed</i> or the thread interrupted during the copy\n     * is highly output stream and file system provider specific and therefore\n     * not specified.\n     *\n     * <p> Note that if the given output stream is {@link java.io.Flushable}\n     * then its {@link java.io.Flushable#flush flush} method may need to invoked\n     * after this method completes so as to flush any buffered output.\n     *\n     * @param   source\n     *          the  path to the file\n     * @param   out\n     *          the output stream to write to\n     *\n     * @return  the number of bytes read or written\n     *\n     * @throws  IOException\n     *          if an I/O error occurs when reading or writing\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     ",
    "links" : [ "java.io.Flushable#flush", "#checkRead(String)", "java.io.Flushable" ]
  }, {
    "name" : "private static byte[] read(InputStream source, int initialSize) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reads all the bytes from an input stream. Uses {@code initialSize} as a hint\n     * about how many bytes the stream will have.\n     *\n     * @param   source\n     *          the input stream to read from\n     * @param   initialSize\n     *          the initial size of the byte array to allocate\n     *\n     * @return  a byte array containing the bytes read from the file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs reading from the stream\n     * @throws  OutOfMemoryError\n     *          if an array of the required size cannot be allocated\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] readAllBytes(Path path) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reads all the bytes from a file. The method ensures that the file is\n     * closed when all bytes have been read or an I/O error, or other runtime\n     * exception, is thrown.\n     *\n     * <p> Note that this method is intended for simple cases where it is\n     * convenient to read all bytes into a byte array. It is not intended for\n     * reading in large files.\n     *\n     * @param   path\n     *          the path to the file\n     *\n     * @return  a byte array containing the bytes read from the file\n     *\n     * @throws  IOException\n     *          if an I/O error occurs reading from the stream\n     * @throws  OutOfMemoryError\n     *          if an array of the required size cannot be allocated, for\n     *          example the file is larger that {@code 2GB}\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     ",
    "links" : [ "#checkRead(String)" ]
  }, {
    "name" : "public static List<String> readAllLines(Path path, Charset cs) throws IOException",
    "returnType" : "List<String>",
    "comment" : "\n     * Read all lines from a file. This method ensures that the file is\n     * closed when all bytes have been read or an I/O error, or other runtime\n     * exception, is thrown. Bytes from the file are decoded into characters\n     * using the specified charset.\n     *\n     * <p> This method recognizes the following as line terminators:\n     * <ul>\n     *   <li> <code>&#92;u000D</code> followed by <code>&#92;u000A</code>,\n     *     CARRIAGE RETURN followed by LINE FEED </li>\n     *   <li> <code>&#92;u000A</code>, LINE FEED </li>\n     *   <li> <code>&#92;u000D</code>, CARRIAGE RETURN </li>\n     * </ul>\n     * <p> Additional Unicode line terminators may be recognized in future\n     * releases.\n     *\n     * <p> Note that this method is intended for simple cases where it is\n     * convenient to read all lines in a single operation. It is not intended\n     * for reading in large files.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   cs\n     *          the charset to use for decoding\n     *\n     * @return  the lines from the file as a {@code List}; whether the {@code\n     *          List} is modifiable or not is implementation dependent and\n     *          therefore not specified\n     *\n     * @throws  IOException\n     *          if an I/O error occurs reading from the file or a malformed or\n     *          unmappable byte sequence is read\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     *\n     * @see #newBufferedReader\n     ",
    "links" : [ "#checkRead(String)" ]
  }, {
    "name" : "public static List<String> readAllLines(Path path) throws IOException",
    "returnType" : "List<String>",
    "comment" : "\n     * Read all lines from a file. Bytes from the file are decoded into characters\n     * using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <pre>{@code\n     * Files.readAllLines(path, StandardCharsets.UTF_8)\n     * }</pre>\n     *\n     * @param   path\n     *          the path to the file\n     *\n     * @return  the lines from the file as a {@code List}; whether the {@code\n     *          List} is modifiable or not is implementation dependent and\n     *          therefore not specified\n     *\n     * @throws  IOException\n     *          if an I/O error occurs reading from the file or a malformed or\n     *          unmappable byte sequence is read\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.nio.charset.Charset", "#checkRead(String)", "java.nio.charset.StandardCharsets#UTF_8" ]
  }, {
    "name" : "public static Path write(Path path, byte[] bytes, OpenOption... options) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Writes bytes to a file. The {@code options} parameter specifies how the\n     * the file is created or opened. If no options are present then this method\n     * works as if the {@link StandardOpenOption#CREATE CREATE}, {@link\n     * StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link\n     * StandardOpenOption#WRITE WRITE} options are present. In other words, it\n     * opens the file for writing, creating the file if it doesn't exist, or\n     * initially truncating an existing {@link #isRegularFile regular-file} to\n     * a size of {@code 0}. All bytes in the byte array are written to the file.\n     * The method ensures that the file is closed when all bytes have been\n     * written (or an I/O error or other runtime exception is thrown). If an I/O\n     * error occurs then it may do so after the file has created or truncated,\n     * or after some bytes have been written to the file.\n     *\n     * <p> <b>Usage example</b>: By default the method creates a new file or\n     * overwrites an existing file. Suppose you instead want to append bytes\n     * to an existing file:\n     * <pre>\n     *     Path path = ...\n     *     byte[] bytes = ...\n     *     Files.write(path, bytes, StandardOpenOption.APPEND);\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file\n     * @param   bytes\n     *          the byte array with the bytes to write\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  the path\n     *\n     * @throws  IOException\n     *          if an I/O error occurs writing to or creating the file\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     ",
    "links" : [ "#isRegularFile", "java.nio.file.StandardOpenOption#WRITE", "java.nio.file.StandardOpenOption#CREATE", "java.nio.file.StandardOpenOption#TRUNCATE_EXISTING", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path write(Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Write lines of text to a file. Each line is a char sequence and is\n     * written to the file in sequence with each line terminated by the\n     * platform's line separator, as defined by the system property {@code\n     * line.separator}. Characters are encoded into bytes using the specified\n     * charset.\n     *\n     * <p> The {@code options} parameter specifies how the the file is created\n     * or opened. If no options are present then this method works as if the\n     * {@link StandardOpenOption#CREATE CREATE}, {@link\n     * StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link\n     * StandardOpenOption#WRITE WRITE} options are present. In other words, it\n     * opens the file for writing, creating the file if it doesn't exist, or\n     * initially truncating an existing {@link #isRegularFile regular-file} to\n     * a size of {@code 0}. The method ensures that the file is closed when all\n     * lines have been written (or an I/O error or other runtime exception is\n     * thrown). If an I/O error occurs then it may do so after the file has\n     * created or truncated, or after some bytes have been written to the file.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   lines\n     *          an object to iterate over the char sequences\n     * @param   cs\n     *          the charset to use for encoding\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  the path\n     *\n     * @throws  IOException\n     *          if an I/O error occurs writing to or creating the file, or the\n     *          text cannot be encoded using the specified charset\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     ",
    "links" : [ "#isRegularFile", "java.nio.file.StandardOpenOption#WRITE", "java.nio.file.StandardOpenOption#CREATE", "java.nio.file.StandardOpenOption#TRUNCATE_EXISTING", "#checkWrite(String)" ]
  }, {
    "name" : "public static Path write(Path path, Iterable<? extends CharSequence> lines, OpenOption... options) throws IOException",
    "returnType" : "Path",
    "comment" : "\n     * Write lines of text to a file. Characters are encoded into bytes using\n     * the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <pre>{@code\n     * Files.write(path, lines, StandardCharsets.UTF_8, options);\n     * }</pre>\n     *\n     * @param   path\n     *          the path to the file\n     * @param   lines\n     *          an object to iterate over the char sequences\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  the path\n     *\n     * @throws  IOException\n     *          if an I/O error occurs writing to or creating the file, or the\n     *          text cannot be encoded as {@code UTF-8}\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file.\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.nio.charset.Charset", "java.nio.charset.StandardCharsets#UTF_8", "#checkWrite(String)" ]
  }, {
    "name" : "public static Stream<Path> list(Path dir) throws IOException",
    "returnType" : "Stream<Path>",
    "comment" : "\n     * Return a lazily populated {@code Stream}, the elements of\n     * which are the entries in the directory.  The listing is not recursive.\n     *\n     * <p> The elements of the stream are {@link Path} objects that are\n     * obtained as if by {@link Path#resolve(Path) resolving} the name of the\n     * directory entry against {@code dir}. Some file systems maintain special\n     * links to the directory itself and the directory's parent directory.\n     * Entries representing these links are not included.\n     *\n     * <p> The stream is <i>weakly consistent</i>. It is thread safe but does\n     * not freeze the directory while iterating, so it may (or may not)\n     * reflect updates to the directory that occur after returning from this\n     * method.\n     *\n     * <p> The returned stream encapsulates a {@link DirectoryStream}.\n     * If timely disposal of file system resources is required, the\n     * {@code try}-with-resources construct should be used to ensure that the\n     * stream's {@link Stream#close close} method is invoked after the stream\n     * operations are completed.\n     *\n     * <p> Operating on a closed stream behaves as if the end of stream\n     * has been reached. Due to read-ahead, one or more elements may be\n     * returned after the stream has been closed.\n     *\n     * <p> If an {@link IOException} is thrown when accessing the directory\n     * after this method has returned, it is wrapped in an {@link\n     * UncheckedIOException} which will be thrown from the method that caused\n     * the access to take place.\n     *\n     * @param   dir  The path to the directory\n     *\n     * @return  The {@code Stream} describing the content of the\n     *          directory\n     *\n     * @throws  NotDirectoryException\n     *          if the file could not otherwise be opened because it is not\n     *          a directory <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs when opening the directory\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the directory.\n     *\n     * @see     #newDirectoryStream(Path)\n     * @since   1.8\n     ",
    "links" : [ "java.io.UncheckedIOException", "java.nio.file.DirectoryStream", "java.io.InputStream#close", "java.nio.file.Path#resolve(Path)", "#checkRead(String)", "java.io.IOException", "java.nio.file.Path" ]
  }, {
    "name" : "public static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options) throws IOException",
    "returnType" : "Stream<Path>",
    "comment" : "\n     * Return a {@code Stream} that is lazily populated with {@code\n     * Path} by walking the file tree rooted at a given starting file.  The\n     * file tree is traversed <em>depth-first</em>, the elements in the stream\n     * are {@link Path} objects that are obtained as if by {@link\n     * Path#resolve(Path) resolving} the relative path against {@code start}.\n     *\n     * <p> The {@code stream} walks the file tree as elements are consumed.\n     * The {@code Stream} returned is guaranteed to have at least one\n     * element, the starting file itself. For each file visited, the stream\n     * attempts to read its {@link BasicFileAttributes}. If the file is a\n     * directory and can be opened successfully, entries in the directory, and\n     * their <em>descendants</em> will follow the directory in the stream as\n     * they are encountered. When all entries have been visited, then the\n     * directory is closed. The file tree walk then continues at the next\n     * <em>sibling</em> of the directory.\n     *\n     * <p> The stream is <i>weakly consistent</i>. It does not freeze the\n     * file tree while iterating, so it may (or may not) reflect updates to\n     * the file tree that occur after returned from this method.\n     *\n     * <p> By default, symbolic links are not automatically followed by this\n     * method. If the {@code options} parameter contains the {@link\n     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links are\n     * followed. When following links, and the attributes of the target cannot\n     * be read, then this method attempts to get the {@code BasicFileAttributes}\n     * of the link.\n     *\n     * <p> If the {@code options} parameter contains the {@link\n     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then the stream keeps\n     * track of directories visited so that cycles can be detected. A cycle\n     * arises when there is an entry in a directory that is an ancestor of the\n     * directory. Cycle detection is done by recording the {@link\n     * java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,\n     * or if file keys are not available, by invoking the {@link #isSameFile\n     * isSameFile} method to test if a directory is the same file as an\n     * ancestor. When a cycle is detected it is treated as an I/O error with\n     * an instance of {@link FileSystemLoopException}.\n     *\n     * <p> The {@code maxDepth} parameter is the maximum number of levels of\n     * directories to visit. A value of {@code 0} means that only the starting\n     * file is visited, unless denied by the security manager. A value of\n     * {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all\n     * levels should be visited.\n     *\n     * <p> When a security manager is installed and it denies access to a file\n     * (or directory), then it is ignored and not included in the stream.\n     *\n     * <p> The returned stream encapsulates one or more {@link DirectoryStream}s.\n     * If timely disposal of file system resources is required, the\n     * {@code try}-with-resources construct should be used to ensure that the\n     * stream's {@link Stream#close close} method is invoked after the stream\n     * operations are completed.  Operating on a closed stream will result in an\n     * {@link java.lang.IllegalStateException}.\n     *\n     * <p> If an {@link IOException} is thrown when accessing the directory\n     * after this method has returned, it is wrapped in an {@link\n     * UncheckedIOException} which will be thrown from the method that caused\n     * the access to take place.\n     *\n     * @param   start\n     *          the starting file\n     * @param   maxDepth\n     *          the maximum number of directory levels to visit\n     * @param   options\n     *          options to configure the traversal\n     *\n     * @return  the {@link Stream} of {@link Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if the {@code maxDepth} parameter is negative\n     * @throws  SecurityException\n     *          If the security manager denies access to the starting file.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String) checkRead} method is invoked\n     *          to check read access to the directory.\n     * @throws  IOException\n     *          if an I/O error is thrown when accessing the starting file.\n     * @since   1.8\n     ",
    "links" : [ "java.lang.IllegalStateException", "#checkRead(String)", "java.io.IOException", "java.nio.file.attribute.BasicFileAttributes", "java.io.UncheckedIOException", "java.nio.file.FileVisitOption#FOLLOW_LINKS", "java.nio.file.DirectoryStream", "java.io.InputStream#close", "java.nio.file.Path#resolve(Path)", "#MAX_VALUE", "java.nio.file.FileSystemLoopException", "java.nio.file.attribute.BasicFileAttributes#fileKey", "java.nio.file.Path", "#isSameFileisSameFile", "java.io.InputStream" ]
  }, {
    "name" : "public static Stream<Path> walk(Path start, FileVisitOption... options) throws IOException",
    "returnType" : "Stream<Path>",
    "comment" : "\n     * Return a {@code Stream} that is lazily populated with {@code\n     * Path} by walking the file tree rooted at a given starting file.  The\n     * file tree is traversed <em>depth-first</em>, the elements in the stream\n     * are {@link Path} objects that are obtained as if by {@link\n     * Path#resolve(Path) resolving} the relative path against {@code start}.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <blockquote><pre>\n     * walk(start, Integer.MAX_VALUE, options)\n     * </pre></blockquote>\n     * In other words, it visits all levels of the file tree.\n     *\n     * <p> The returned stream encapsulates one or more {@link DirectoryStream}s.\n     * If timely disposal of file system resources is required, the\n     * {@code try}-with-resources construct should be used to ensure that the\n     * stream's {@link Stream#close close} method is invoked after the stream\n     * operations are completed.  Operating on a closed stream will result in an\n     * {@link java.lang.IllegalStateException}.\n     *\n     * @param   start\n     *          the starting file\n     * @param   options\n     *          options to configure the traversal\n     *\n     * @return  the {@link Stream} of {@link Path}\n     *\n     * @throws  SecurityException\n     *          If the security manager denies access to the starting file.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String) checkRead} method is invoked\n     *          to check read access to the directory.\n     * @throws  IOException\n     *          if an I/O error is thrown when accessing the starting file.\n     *\n     * @see     #walk(Path, int, FileVisitOption...)\n     * @since   1.8\n     ",
    "links" : [ "java.nio.file.DirectoryStream", "java.io.InputStream#close", "java.lang.IllegalStateException", "java.nio.file.Path#resolve(Path)", "#checkRead(String)", "java.nio.file.Path", "java.io.InputStream" ]
  }, {
    "name" : "public static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options) throws IOException",
    "returnType" : "Stream<Path>",
    "comment" : "\n     * Return a {@code Stream} that is lazily populated with {@code\n     * Path} by searching for files in a file tree rooted at a given starting\n     * file.\n     *\n     * <p> This method walks the file tree in exactly the manner specified by\n     * the {@link #walk walk} method. For each file encountered, the given\n     * {@link BiPredicate} is invoked with its {@link Path} and {@link\n     * BasicFileAttributes}. The {@code Path} object is obtained as if by\n     * {@link Path#resolve(Path) resolving} the relative path against {@code\n     * start} and is only included in the returned {@link Stream} if\n     * the {@code BiPredicate} returns true. Compare to calling {@link\n     * java.util.stream.Stream#filter filter} on the {@code Stream}\n     * returned by {@code walk} method, this method may be more efficient by\n     * avoiding redundant retrieval of the {@code BasicFileAttributes}.\n     *\n     * <p> The returned stream encapsulates one or more {@link DirectoryStream}s.\n     * If timely disposal of file system resources is required, the\n     * {@code try}-with-resources construct should be used to ensure that the\n     * stream's {@link Stream#close close} method is invoked after the stream\n     * operations are completed.  Operating on a closed stream will result in an\n     * {@link java.lang.IllegalStateException}.\n     *\n     * <p> If an {@link IOException} is thrown when accessing the directory\n     * after returned from this method, it is wrapped in an {@link\n     * UncheckedIOException} which will be thrown from the method that caused\n     * the access to take place.\n     *\n     * @param   start\n     *          the starting file\n     * @param   maxDepth\n     *          the maximum number of directory levels to search\n     * @param   matcher\n     *          the function used to decide whether a file should be included\n     *          in the returned stream\n     * @param   options\n     *          options to configure the traversal\n     *\n     * @return  the {@link Stream} of {@link Path}\n     *\n     * @throws  IllegalArgumentException\n     *          if the {@code maxDepth} parameter is negative\n     * @throws  SecurityException\n     *          If the security manager denies access to the starting file.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String) checkRead} method is invoked\n     *          to check read access to the directory.\n     * @throws  IOException\n     *          if an I/O error is thrown when accessing the starting file.\n     *\n     * @see     #walk(Path, int, FileVisitOption...)\n     * @since   1.8\n     ",
    "links" : [ "java.lang.IllegalStateException", "#checkRead(String)", "#walk", "java.io.IOException", "java.nio.file.attribute.BasicFileAttributes", "java.io.UncheckedIOException", "java.util.function.BiPredicate", "java.nio.file.DirectoryStream", "java.io.InputStream#close", "java.nio.file.Path#resolve(Path)", "java.nio.file.Path", "java.util.stream.Stream#filter", "java.io.InputStream" ]
  }, {
    "name" : "public static Stream<String> lines(Path path, Charset cs) throws IOException",
    "returnType" : "Stream<String>",
    "comment" : "\n     * Read all lines from a file as a {@code Stream}. Unlike {@link\n     * #readAllLines(Path, Charset) readAllLines}, this method does not read\n     * all lines into a {@code List}, but instead populates lazily as the stream\n     * is consumed.\n     *\n     * <p> Bytes from the file are decoded into characters using the specified\n     * charset and the same line terminators as specified by {@code\n     * readAllLines} are supported.\n     *\n     * <p> After this method returns, then any subsequent I/O exception that\n     * occurs while reading from the file or when a malformed or unmappable byte\n     * sequence is read, is wrapped in an {@link UncheckedIOException} that will\n     * be thrown from the\n     * {@link java.util.stream.Stream} method that caused the read to take\n     * place. In case an {@code IOException} is thrown when closing the file,\n     * it is also wrapped as an {@code UncheckedIOException}.\n     *\n     * <p> The returned stream encapsulates a {@link Reader}.  If timely\n     * disposal of file system resources is required, the try-with-resources\n     * construct should be used to ensure that the stream's\n     * {@link Stream#close close} method is invoked after the stream operations\n     * are completed.\n     *\n     *\n     * @param   path\n     *          the path to the file\n     * @param   cs\n     *          the charset to use for decoding\n     *\n     * @return  the lines from the file as a {@code Stream}\n     *\n     * @throws  IOException\n     *          if an I/O error occurs opening the file\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     *\n     * @see     #readAllLines(Path, Charset)\n     * @see     #newBufferedReader(Path, Charset)\n     * @see     java.io.BufferedReader#lines()\n     * @since   1.8\n     ",
    "links" : [ "java.io.UncheckedIOException", "#readAllLines(Path", "java.io.InputStream#close", "java.util.stream.Stream", "#checkRead(String)", "java.io.BufferedReader" ]
  }, {
    "name" : "public static Stream<String> lines(Path path) throws IOException",
    "returnType" : "Stream<String>",
    "comment" : "\n     * Read all lines from a file as a {@code Stream}. Bytes from the file are\n     * decoded into characters using the {@link StandardCharsets#UTF_8 UTF-8}\n     * {@link Charset charset}.\n     *\n     * <p> This method works as if invoking it were equivalent to evaluating the\n     * expression:\n     * <pre>{@code\n     * Files.lines(path, StandardCharsets.UTF_8)\n     * }</pre>\n     *\n     * @param   path\n     *          the path to the file\n     *\n     * @return  the lines from the file as a {@code Stream}\n     *\n     * @throws  IOException\n     *          if an I/O error occurs opening the file\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     *\n     * @since 1.8\n     ",
    "links" : [ "java.nio.charset.Charset", "#checkRead(String)", "java.nio.charset.StandardCharsets#UTF_8" ]
  } ],
  "methodNames" : [ "private static FileSystemProvider provider(Path path)", "private static Runnable asUncheckedRunnable(Closeable c)", "public static InputStream newInputStream(Path path, OpenOption... options) throws IOException", "public static OutputStream newOutputStream(Path path, OpenOption... options) throws IOException", "public static SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException", "public static SeekableByteChannel newByteChannel(Path path, OpenOption... options) throws IOException", "public static DirectoryStream<Path> newDirectoryStream(Path dir) throws IOException", "public static DirectoryStream<Path> newDirectoryStream(Path dir, String glob) throws IOException", "public static DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException", "public static Path createFile(Path path, FileAttribute<?>... attrs) throws IOException", "public static Path createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException", "public static Path createDirectories(Path dir, FileAttribute<?>... attrs) throws IOException", "private static void createAndCheckIsDirectory(Path dir, FileAttribute<?>... attrs) throws IOException", "public static Path createTempFile(Path dir, String prefix, String suffix, FileAttribute<?>... attrs) throws IOException", "public static Path createTempFile(String prefix, String suffix, FileAttribute<?>... attrs) throws IOException", "public static Path createTempDirectory(Path dir, String prefix, FileAttribute<?>... attrs) throws IOException", "public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException", "public static Path createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs) throws IOException", "public static Path createLink(Path link, Path existing) throws IOException", "public static void delete(Path path) throws IOException", "public static boolean deleteIfExists(Path path) throws IOException", "public static Path copy(Path source, Path target, CopyOption... options) throws IOException", "public static Path move(Path source, Path target, CopyOption... options) throws IOException", "public static Path readSymbolicLink(Path link) throws IOException", "public static FileStore getFileStore(Path path) throws IOException", "public static boolean isSameFile(Path path, Path path2) throws IOException", "public static boolean isHidden(Path path) throws IOException", "public static String probeContentType(Path path) throws IOException", "public static V getFileAttributeView(Path path, Class<V> type, LinkOption... options)", "public static A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException", "public static Path setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException", "public static Object getAttribute(Path path, String attribute, LinkOption... options) throws IOException", "public static Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException", "public static Set<PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options) throws IOException", "public static Path setPosixFilePermissions(Path path, Set<PosixFilePermission> perms) throws IOException", "public static UserPrincipal getOwner(Path path, LinkOption... options) throws IOException", "public static Path setOwner(Path path, UserPrincipal owner) throws IOException", "public static boolean isSymbolicLink(Path path)", "public static boolean isDirectory(Path path, LinkOption... options)", "public static boolean isRegularFile(Path path, LinkOption... options)", "public static FileTime getLastModifiedTime(Path path, LinkOption... options) throws IOException", "public static Path setLastModifiedTime(Path path, FileTime time) throws IOException", "public static long size(Path path) throws IOException", "private static boolean followLinks(LinkOption... options)", "public static boolean exists(Path path, LinkOption... options)", "public static boolean notExists(Path path, LinkOption... options)", "private static boolean isAccessible(Path path, AccessMode... modes)", "public static boolean isReadable(Path path)", "public static boolean isWritable(Path path)", "public static boolean isExecutable(Path path)", "public static Path walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor) throws IOException", "public static Path walkFileTree(Path start, FileVisitor<? super Path> visitor) throws IOException", "public static BufferedReader newBufferedReader(Path path, Charset cs) throws IOException", "public static BufferedReader newBufferedReader(Path path) throws IOException", "public static BufferedWriter newBufferedWriter(Path path, Charset cs, OpenOption... options) throws IOException", "public static BufferedWriter newBufferedWriter(Path path, OpenOption... options) throws IOException", "private static long copy(InputStream source, OutputStream sink) throws IOException", "public static long copy(InputStream in, Path target, CopyOption... options) throws IOException", "public static long copy(Path source, OutputStream out) throws IOException", "private static byte[] read(InputStream source, int initialSize) throws IOException", "public static byte[] readAllBytes(Path path) throws IOException", "public static List<String> readAllLines(Path path, Charset cs) throws IOException", "public static List<String> readAllLines(Path path) throws IOException", "public static Path write(Path path, byte[] bytes, OpenOption... options) throws IOException", "public static Path write(Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options) throws IOException", "public static Path write(Path path, Iterable<? extends CharSequence> lines, OpenOption... options) throws IOException", "public static Stream<Path> list(Path dir) throws IOException", "public static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options) throws IOException", "public static Stream<Path> walk(Path start, FileVisitOption... options) throws IOException", "public static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options) throws IOException", "public static Stream<String> lines(Path path, Charset cs) throws IOException", "public static Stream<String> lines(Path path) throws IOException" ],
  "variableNames" : [ "BUFFER_SIZE", "MAX_BUFFER_SIZE" ]
}