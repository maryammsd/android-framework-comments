{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/pdf/PdfRenderer.java",
  "packageName" : "android.graphics.pdf",
  "className" : "Page",
  "comment" : "\n     * This class represents a PDF document page for rendering.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RENDER_MODE_FOR_DISPLAY",
    "type" : "int",
    "comment" : "\n         * Mode to render the content for display on a screen.\n         ",
    "links" : [ ]
  }, {
    "name" : "RENDER_MODE_FOR_PRINT",
    "type" : "int",
    "comment" : "\n         * Mode to render the content for printing.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n         * Gets the page index.\n         *\n         * @return The index.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n         * Returns the width of the {@link PdfRenderer.Page} object in points (1/72\"). It is\n         * not guaranteed that all pages will have the same width and the viewport should be resized\n         * to the page width.\n         *\n         * @return width of the page\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "PdfRenderer.Page" ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n         * Returns the height of the {@link PdfRenderer.Page} object in points (1/72\"). It is\n         * not guaranteed that all pages will have the same height and the viewport should be\n         * resized to the page height.\n         *\n         * @return height of the page\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "PdfRenderer.Page" ]
  }, {
    "name" : "public void render(@NonNull Bitmap destination, @Nullable Rect destClip, @Nullable Matrix transform, @RenderMode int renderMode)",
    "returnType" : "void",
    "comment" : "\n         * Renders a page to a bitmap.\n         * <p>\n         * You may optionally specify a rectangular clip in the bitmap bounds. No rendering\n         * outside the clip will be performed, hence it is your responsibility to initialize\n         * the bitmap outside the clip.\n         * <p>\n         * You may optionally specify a matrix to transform the content from page coordinates\n         * which are in points (1/72\") to bitmap coordinates which are in pixels. If this\n         * matrix is not provided this method will apply a transformation that will fit the\n         * whole page to the destination clip if provided or the destination bitmap if no\n         * clip is provided.\n         * <p>\n         * The clip and transformation are useful for implementing tile rendering where the\n         * destination bitmap contains a portion of the image, for example when zooming.\n         * Another useful application is for printing where the size of the bitmap holding\n         * the page is too large and a client can render the page in stripes.\n         * <p>\n         * <strong>Note: </strong> The destination bitmap format must be\n         * {@link Config#ARGB_8888 ARGB}.\n         * <p>\n         * <strong>Note: </strong> The optional transformation matrix must be affine as per\n         * {@link android.graphics.Matrix#isAffine() Matrix.isAffine()}. Hence, you can specify\n         * rotation, scaling, translation but not a perspective transformation.\n         *\n         * @param destination Destination bitmap to which to render.\n         * @param destClip    Optional clip in the bitmap bounds.\n         * @param transform   Optional transformation to apply when rendering.\n         * @param renderMode  The render mode.\n         * @see #RENDER_MODE_FOR_DISPLAY\n         * @see #RENDER_MODE_FOR_PRINT\n         ",
    "links" : [ "android.graphics.Matrix#isAffine()", "android.graphics.Bitmap.Config#ARGB_8888" ]
  }, {
    "name" : "public void render(@NonNull Bitmap destination, @Nullable Rect destClip, @Nullable Matrix transform, @NonNull RenderParams params)",
    "returnType" : "void",
    "comment" : "\n         * Renders a page to a bitmap. In case of default zoom, the {@link Bitmap} dimensions will\n         * be equal to the page dimensions. In this case, {@link Rect} parameter can be null.\n         *\n         * <p>In case of zoom, the {@link Rect} parameter needs to be specified which represents\n         * the offset from top and left for tile generation purposes. In this case, the\n         * {@link Bitmap} dimensions should be equal to the tile dimensions.\n         * <p>\n         * <strong>Note:</strong> The method will take care of closing the bitmap. Should be\n         * invoked\n         * on the {@link android.annotation.WorkerThread} as it is long-running task.\n         *\n         * @param destination Destination bitmap to write to.\n         * @param destClip    If null, default zoom is applied. In case the value is non-null, the\n         *                    value specifies the top top-left corner of the tile.\n         * @param transform   Applied to scale the bitmap up/down from default 1/72 points.\n         * @param params      Render params for the changing display mode and/or annotations.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "android.graphics.Rect", "android.graphics.Bitmap", "android.annotation.WorkerThread" ]
  }, {
    "name" : "public List<PdfPageTextContent> getTextContents()",
    "returnType" : "List<PdfPageTextContent>",
    "comment" : "\n         * Return list of {@link PdfPageTextContent} found on the page, ordered left to right\n         * and top to bottom. It contains all the content associated with text found on the page.\n         * The list will be empty if there are no results found. Currently, localisation does\n         * not have any impact on the order in which {@link PdfPageTextContent} is returned.\n         *\n         * @return list of text content found on the page.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "android.graphics.pdf.content.PdfPageTextContent" ]
  }, {
    "name" : "public List<PdfPageImageContent> getImageContents()",
    "returnType" : "List<PdfPageImageContent>",
    "comment" : "\n         * Return list of {@link PdfPageImageContent} found on the page, ordered left to right\n         * and top to bottom. It contains all the content associated with images found on the\n         * page including alt text. The list will be empty if there are no results found.\n         * Currently, localisation does not have any impact on the order in which\n         * {@link PdfPageImageContent} is returned.\n         *\n         * @return list of image content found on the page.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "android.graphics.pdf.content.PdfPageImageContent" ]
  }, {
    "name" : "public List<PageMatchBounds> searchText(@NonNull String query)",
    "returnType" : "List<PageMatchBounds>",
    "comment" : "\n         * Search for the given string on the page and returns the bounds of all the matches. The\n         * list will be empty if there are no matches on the page. If this function was\n         * invoked previously for any page, it will wait for that operation to\n         * complete before this operation is started.\n         * <p>\n         * <strong>Note:</strong> Should be invoked on the {@link android.annotation.WorkerThread}\n         * as it is long-running task.\n         *\n         * @param query plain search string for querying the document\n         * @return List of {@link PageMatchBounds} representing the bounds of each match on the\n         * page.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "android.graphics.pdf.models.PageMatchBounds", "android.annotation.WorkerThread" ]
  }, {
    "name" : "public PageSelection selectContent(@NonNull SelectionBoundary start, @NonNull SelectionBoundary stop)",
    "returnType" : "PageSelection",
    "comment" : "\n         * Return a {@link PageSelection} which represents the selected content that spans between\n         * the two boundaries. The boundaries can be either exactly defined with text indexes, or\n         * approximately defined with points on the page. The resulting selection will also be\n         * exactly defined with both indexes and points. If the start and stop boundary are both at\n         * the same point, selects the word at that point. In case the selection from the given\n         * boundaries result in an empty space, then the method returns {@code null}. The start and\n         * stop {@link SelectionBoundary} in {@link PageSelection} resolves to the \"nearest\" index\n         * when returned.\n         * <p>\n         * <strong>Note:</strong> Should be invoked on a {@link android.annotation.WorkerThread}\n         * as it is long-running task.\n         *\n         * @param start boundary where the selection starts (inclusive)\n         * @param stop  boundary where the selection stops (exclusive)\n         * @return collection of the selected content for text, images, etc.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "android.graphics.pdf.models.selection.PageSelection", "android.annotation.WorkerThread", "android.graphics.pdf.models.selection.SelectionBoundary" ]
  }, {
    "name" : "public List<PdfPageLinkContent> getLinkContents()",
    "returnType" : "List<PdfPageLinkContent>",
    "comment" : "\n         * Get the bounds and URLs of all the links on the page.\n         *\n         * @return list of all links on the page.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<PdfPageGotoLinkContent> getGotoLinks()",
    "returnType" : "List<PdfPageGotoLinkContent>",
    "comment" : "\n         * Gets bookmarks and goto links present on the page of a pdf document. Goto Links\n         * are the internal navigation links which directs the user to different location\n         * within the same document.\n         *\n         * @return list of all goto links {@link PdfPageGotoLinkContent} on a page, ordered\n         * left to right and top to bottom.\n         * @throws IllegalStateException If the document/page is closed before invocation.\n         ",
    "links" : [ "android.graphics.pdf.content.PdfPageGotoLinkContent" ]
  }, {
    "name" : "public List<FormWidgetInfo> getFormWidgetInfos()",
    "returnType" : "List<FormWidgetInfo>",
    "comment" : "\n         * Returns information about all form widgets on the page, or an empty list if there are no\n         * form widgets on the page.\n         *\n         * @throws IllegalStateException if the renderer or page is closed\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<FormWidgetInfo> getFormWidgetInfos(@NonNull @FormWidgetInfo.WidgetType int[] types)",
    "returnType" : "List<FormWidgetInfo>",
    "comment" : "\n         * Returns information about all form widgets of the specified types on the page, or an\n         * empty list if there are no form widgets of the specified types on the page.\n         *\n         * @param types the types of form widgets to return, or an empty array to return all widgets\n         * @throws IllegalStateException if the renderer or page is closed\n         ",
    "links" : [ ]
  }, {
    "name" : "public FormWidgetInfo getFormWidgetInfoAtIndex(@IntRange(from = 0) int widgetIndex)",
    "returnType" : "FormWidgetInfo",
    "comment" : "\n         * Returns information about the widget with {@code widgetIndex}.\n         *\n         * @param widgetIndex the index of the widget within the page's \"Annot\" array in the PDF\n         *                    document, available on results of previous calls to {@link\n         *                    #getFormWidgetInfos(int[])} or\n         *                    {@link #getFormWidgetInfoAtPosition(int, int)} via\n         *                    {@link FormWidgetInfo#getWidgetIndex()}.\n         * @throws IllegalArgumentException if there is no form widget at the provided index.\n         * @throws IllegalStateException    if the renderer or page is closed\n         ",
    "links" : [ "#getFormWidgetInfos(int", "#getFormWidgetInfoAtPosition(int", "android.graphics.pdf.models.FormWidgetInfo#getWidgetIndex()" ]
  }, {
    "name" : "public FormWidgetInfo getFormWidgetInfoAtPosition(int x, int y)",
    "returnType" : "FormWidgetInfo",
    "comment" : "\n         * Returns information about the widget at the given point.\n         *\n         * @param x the x position of the widget on the page, in points\n         * @param y the y position of the widget on the page, in points\n         * @throws IllegalArgumentException if there is no form widget at the provided position.\n         * @throws IllegalStateException    if the renderer or page is closed\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<Rect> applyEdit(@NonNull FormEditRecord editRecord)",
    "returnType" : "List<Rect>",
    "comment" : "\n         * Applies a {@link FormEditRecord} to the PDF.\n         *\n         * <p>Apps must call {@link #render(Bitmap, Rect, Matrix, RenderParams)} to render new\n         * bitmaps for the corresponding areas of the page.\n         *\n         * <p>For click type {@link FormEditRecord}s, performs a click on {@link\n         * FormEditRecord#getClickPoint()}\n         *\n         * <p>For set text type {@link FormEditRecord}s, sets the text value of the form widget.\n         *\n         * <p>For set indices type {@link FormEditRecord}s, sets the {@link\n         * FormEditRecord#getSelectedIndices()} as selected and all others as unselected for the\n         * form widget indicated by the record.\n         *\n         * @param editRecord the {@link FormEditRecord} to be applied\n         * @return Rectangular areas of the page bitmap that have been invalidated by this action.\n         * @throws IllegalArgumentException if the provided {@link FormEditRecord} cannot be\n         *                                  applied to the widget indicated by the index, or if the\n         *                                  index does not correspond to a widget on the page.\n         * @throws IllegalStateException    If the document is already closed.\n         * @throws IllegalStateException    If the page is already closed.\n         ",
    "links" : [ "android.graphics.pdf.models.FormEditRecord", "#render(Bitmap", "android.graphics.pdf.models.FormEditRecord#getClickPoint()", "android.graphics.pdf.models.FormEditRecord#getSelectedIndices()" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Closes this page.\n         *\n         * @see android.graphics.pdf.PdfRenderer#openPage(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfDocumentOrPageClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPageClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getIndex()", "public int getWidth()", "public int getHeight()", "public void render(@NonNull Bitmap destination, @Nullable Rect destClip, @Nullable Matrix transform, @RenderMode int renderMode)", "public void render(@NonNull Bitmap destination, @Nullable Rect destClip, @Nullable Matrix transform, @NonNull RenderParams params)", "public List<PdfPageTextContent> getTextContents()", "public List<PdfPageImageContent> getImageContents()", "public List<PageMatchBounds> searchText(@NonNull String query)", "public PageSelection selectContent(@NonNull SelectionBoundary start, @NonNull SelectionBoundary stop)", "public List<PdfPageLinkContent> getLinkContents()", "public List<PdfPageGotoLinkContent> getGotoLinks()", "public List<FormWidgetInfo> getFormWidgetInfos()", "public List<FormWidgetInfo> getFormWidgetInfos(@NonNull @FormWidgetInfo.WidgetType int[] types)", "public FormWidgetInfo getFormWidgetInfoAtIndex(@IntRange(from = 0) int widgetIndex)", "public FormWidgetInfo getFormWidgetInfoAtPosition(int x, int y)", "public List<Rect> applyEdit(@NonNull FormEditRecord editRecord)", "public void close()", "protected void finalize() throws Throwable", "private void doClose()", "private void throwIfDocumentOrPageClosed()", "private void throwIfPageClosed()" ],
  "variableNames" : [ "RENDER_MODE_FOR_DISPLAY", "RENDER_MODE_FOR_PRINT", "mCloseGuard", "mWidth", "mHeight", "mIndex" ]
}