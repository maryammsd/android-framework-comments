{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/image/DynamicSystemManager.java",
  "packageName" : "android.os.image",
  "className" : "DynamicSystemManager",
  "comment" : "\n * The DynamicSystemManager offers a mechanism to use a new system image temporarily. After the\n * installation, the device can reboot into this image with a new created /data. This image will\n * last until the next reboot and then the device will go back to the original image. However the\n * installed image and the new created /data are not deleted but disabled. Thus the application can\n * either re-enable the installed image by calling {@link #toggle} or use the {@link #remove} to\n * delete it completely. In other words, there are three device states: no installation, installed\n * and running. The procedure to install a DynamicSystem starts with a {@link #startInstallation},\n * followed by a series of {@link #write} and ends with a {@link commit}. Once the installation is\n * complete, the device state changes from no installation to the installed state and a followed\n * reboot will change its state to running. Note one instance of DynamicSystem can exist on a given\n * device thus the {@link #startInstallation} will fail if the device is currently running a\n * DynamicSystem.\n *\n * @hide\n ",
  "links" : [ "#remove", "#write", "commit", "#startInstallation", "#toggle" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IDynamicSystemService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean startInstallation(String dsuSlot)",
    "returnType" : "boolean",
    "comment" : "\n     * Start DynamicSystem installation.\n     *\n     * @return true if the call succeeds\n     ",
    "links" : [ ]
  }, {
    "name" : "public Pair<Integer, Session> createPartition(String name, long size, boolean readOnly)",
    "returnType" : "Pair<Integer, Session>",
    "comment" : "\n     * Start DynamicSystem installation. This call may take an unbounded amount of time. The caller\n     * may use another thread to call the getStartProgress() to get the progress.\n     *\n     * @param name The DSU partition name\n     * @param size Size of the DSU image in bytes\n     * @param readOnly True if the partition is read only, e.g. system.\n     * @return {@code Integer} an IGsiService.INSTALL_* status code. {@link Session} an installation\n     *     session object if successful, otherwise {@code null}.\n     ",
    "links" : [ "Session" ]
  }, {
    "name" : "public boolean closePartition()",
    "returnType" : "boolean",
    "comment" : "\n     * Complete the current partition installation.\n     *\n     * @return true if the partition installation completes without error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean finishInstallation()",
    "returnType" : "boolean",
    "comment" : "\n     * Finish a previously started installation. Installations without a corresponding\n     * finishInstallation() will be cleaned up during device boot.\n     ",
    "links" : [ ]
  }, {
    "name" : "public GsiProgress getInstallationProgress()",
    "returnType" : "GsiProgress",
    "comment" : "\n     * Query the progress of the current installation operation. This can be called while the\n     * installation is in progress.\n     *\n     * @return GsiProgress GsiProgress { int status; long bytes_processed; long total_bytes; } The\n     *     status field can be IGsiService.STATUS_NO_OPERATION, IGsiService.STATUS_WORKING or\n     *     IGsiService.STATUS_COMPLETE.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean abort()",
    "returnType" : "boolean",
    "comment" : "\n     * Abort the installation process. Note this method must be called in a thread other than the\n     * one calling the startInstallation method as the startInstallation method will not return\n     * until it is finished.\n     *\n     * @return {@code true} if the call succeeds. {@code false} if there is no installation\n     *     currently.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInUse()",
    "returnType" : "boolean",
    "comment" : " @return {@code true} if the device is running a dynamic system ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstalled()",
    "returnType" : "boolean",
    "comment" : " @return {@code true} if the device has a dynamic system installed ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : " @return {@code true} if the device has a dynamic system enabled ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove()",
    "returnType" : "boolean",
    "comment" : "\n     * Remove DynamicSystem installation if present\n     *\n     * @return {@code true} if the call succeeds. {@code false} if there is no installed image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setEnable(boolean enable, boolean oneShot)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable or disable DynamicSystem.\n     * @return {@code true} if the call succeeds. {@code false} if there is no installed image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long suggestScratchSize()",
    "returnType" : "long",
    "comment" : "\n     * Returns the suggested scratch partition size for overlayFS.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getActiveDsuSlot()",
    "returnType" : "String",
    "comment" : "\n     * Returns the active DSU slot\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean startInstallation(String dsuSlot)", "public Pair<Integer, Session> createPartition(String name, long size, boolean readOnly)", "public boolean closePartition()", "public boolean finishInstallation()", "public GsiProgress getInstallationProgress()", "public boolean abort()", "public boolean isInUse()", "public boolean isInstalled()", "public boolean isEnabled()", "public boolean remove()", "public boolean setEnable(boolean enable, boolean oneShot)", "public long suggestScratchSize()", "public String getActiveDsuSlot()" ],
  "variableNames" : [ "TAG", "mService" ]
}