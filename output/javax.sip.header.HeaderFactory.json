{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/sip/header/HeaderFactory.java",
  "packageName" : "javax.sip.header",
  "className" : "HeaderFactory",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void setPrettyEncoding(boolean flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AcceptEncodingHeader createAcceptEncodingHeader(String encoding) throws ParseException",
    "returnType" : "AcceptEncodingHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AcceptHeader createAcceptHeader(String contentType, String contentSubType) throws ParseException",
    "returnType" : "AcceptHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AcceptLanguageHeader createAcceptLanguageHeader(Locale language)",
    "returnType" : "AcceptLanguageHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AlertInfoHeader createAlertInfoHeader(URI alertInfo)",
    "returnType" : "AlertInfoHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AllowEventsHeader createAllowEventsHeader(String eventType) throws ParseException",
    "returnType" : "AllowEventsHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AllowHeader createAllowHeader(String method) throws ParseException",
    "returnType" : "AllowHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AuthenticationInfoHeader createAuthenticationInfoHeader(String response) throws ParseException",
    "returnType" : "AuthenticationInfoHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AuthorizationHeader createAuthorizationHeader(String scheme) throws ParseException",
    "returnType" : "AuthorizationHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " CallIdHeader createCallIdHeader(String callId) throws ParseException",
    "returnType" : "CallIdHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " CallInfoHeader createCallInfoHeader(URI callInfo)",
    "returnType" : "CallInfoHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContactHeader createContactHeader()",
    "returnType" : "ContactHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContactHeader createContactHeader(Address address)",
    "returnType" : "ContactHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentDispositionHeader createContentDispositionHeader(String contentDispositionType) throws ParseException",
    "returnType" : "ContentDispositionHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentEncodingHeader createContentEncodingHeader(String encoding) throws ParseException",
    "returnType" : "ContentEncodingHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentLanguageHeader createContentLanguageHeader(Locale contentLanguage)",
    "returnType" : "ContentLanguageHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentLengthHeader createContentLengthHeader(int contentLength) throws InvalidArgumentException",
    "returnType" : "ContentLengthHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentTypeHeader createContentTypeHeader(String contentType, String contentSubType) throws ParseException",
    "returnType" : "ContentTypeHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " CSeqHeader createCSeqHeader(int sequenceNumber, String method) throws ParseException, InvalidArgumentException",
    "returnType" : "CSeqHeader",
    "comment" : "\n     * @deprecated\n     * @see #createCSeqHeader(long, String)\n     ",
    "links" : [ ]
  }, {
    "name" : " CSeqHeader createCSeqHeader(long sequenceNumber, String method) throws ParseException, InvalidArgumentException",
    "returnType" : "CSeqHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DateHeader createDateHeader(Calendar date)",
    "returnType" : "DateHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ErrorInfoHeader createErrorInfoHeader(URI errorInfo)",
    "returnType" : "ErrorInfoHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " EventHeader createEventHeader(String eventType) throws ParseException",
    "returnType" : "EventHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ExpiresHeader createExpiresHeader(int expires) throws InvalidArgumentException",
    "returnType" : "ExpiresHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ExtensionHeader createExtensionHeader(String name, String value) throws ParseException",
    "returnType" : "ExtensionHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " FromHeader createFromHeader(Address address, String tag) throws ParseException",
    "returnType" : "FromHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Header createHeader(String name, String value) throws ParseException",
    "returnType" : "Header",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Header createHeader(String headerText) throws ParseException",
    "returnType" : "Header",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " List createHeaders(String headers) throws ParseException",
    "returnType" : "List",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InReplyToHeader createInReplyToHeader(String callId) throws ParseException",
    "returnType" : "InReplyToHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " MaxForwardsHeader createMaxForwardsHeader(int maxForwards) throws InvalidArgumentException",
    "returnType" : "MaxForwardsHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " MimeVersionHeader createMimeVersionHeader(int majorVersion, int minorVersion) throws InvalidArgumentException",
    "returnType" : "MimeVersionHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " MinExpiresHeader createMinExpiresHeader(int minExpires) throws InvalidArgumentException",
    "returnType" : "MinExpiresHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " OrganizationHeader createOrganizationHeader(String organization) throws ParseException",
    "returnType" : "OrganizationHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " PriorityHeader createPriorityHeader(String priority) throws ParseException",
    "returnType" : "PriorityHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ProxyAuthenticateHeader createProxyAuthenticateHeader(String scheme) throws ParseException",
    "returnType" : "ProxyAuthenticateHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ProxyAuthorizationHeader createProxyAuthorizationHeader(String scheme) throws ParseException",
    "returnType" : "ProxyAuthorizationHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ProxyRequireHeader createProxyRequireHeader(String optionTag) throws ParseException",
    "returnType" : "ProxyRequireHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RAckHeader createRAckHeader(long rSeqNumber, long cSeqNumber, String method) throws InvalidArgumentException, ParseException",
    "returnType" : "RAckHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RAckHeader createRAckHeader(int rSeqNumber, int cSeqNumber, String method) throws InvalidArgumentException, ParseException",
    "returnType" : "RAckHeader",
    "comment" : "\n     * @deprecated\n     * @see #createRAckHeader(long, long, String)\n     ",
    "links" : [ ]
  }, {
    "name" : " ReasonHeader createReasonHeader(String protocol, int cause, String text) throws InvalidArgumentException, ParseException",
    "returnType" : "ReasonHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RecordRouteHeader createRecordRouteHeader(Address address)",
    "returnType" : "RecordRouteHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ReferToHeader createReferToHeader(Address address)",
    "returnType" : "ReferToHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ReplyToHeader createReplyToHeader(Address address)",
    "returnType" : "ReplyToHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RequireHeader createRequireHeader(String optionTag) throws ParseException",
    "returnType" : "RequireHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RetryAfterHeader createRetryAfterHeader(int retryAfter) throws InvalidArgumentException",
    "returnType" : "RetryAfterHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RouteHeader createRouteHeader(Address address)",
    "returnType" : "RouteHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RSeqHeader createRSeqHeader(long sequenceNumber) throws InvalidArgumentException",
    "returnType" : "RSeqHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RSeqHeader createRSeqHeader(int sequenceNumber) throws InvalidArgumentException",
    "returnType" : "RSeqHeader",
    "comment" : "\n     * @deprecated\n     * @see #createRSeqHeader(long)\n     ",
    "links" : [ ]
  }, {
    "name" : " ServerHeader createServerHeader(List product) throws ParseException",
    "returnType" : "ServerHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SIPETagHeader createSIPETagHeader(String etag) throws ParseException",
    "returnType" : "SIPETagHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SIPIfMatchHeader createSIPIfMatchHeader(String etag) throws ParseException",
    "returnType" : "SIPIfMatchHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SubjectHeader createSubjectHeader(String subject) throws ParseException",
    "returnType" : "SubjectHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SubscriptionStateHeader createSubscriptionStateHeader(String subscriptionState) throws ParseException",
    "returnType" : "SubscriptionStateHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SupportedHeader createSupportedHeader(String optionTag) throws ParseException",
    "returnType" : "SupportedHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " TimeStampHeader createTimeStampHeader(float timeStamp) throws InvalidArgumentException",
    "returnType" : "TimeStampHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ToHeader createToHeader(Address address, String tag) throws ParseException",
    "returnType" : "ToHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " UnsupportedHeader createUnsupportedHeader(String optionTag) throws ParseException",
    "returnType" : "UnsupportedHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " UserAgentHeader createUserAgentHeader(List product) throws ParseException",
    "returnType" : "UserAgentHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ViaHeader createViaHeader(String host, int port, String transport, String branch) throws InvalidArgumentException, ParseException",
    "returnType" : "ViaHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " WarningHeader createWarningHeader(String agent, int code, String comment) throws InvalidArgumentException, ParseException",
    "returnType" : "WarningHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " WWWAuthenticateHeader createWWWAuthenticateHeader(String scheme) throws ParseException",
    "returnType" : "WWWAuthenticateHeader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setPrettyEncoding(boolean flag)", " AcceptEncodingHeader createAcceptEncodingHeader(String encoding) throws ParseException", " AcceptHeader createAcceptHeader(String contentType, String contentSubType) throws ParseException", " AcceptLanguageHeader createAcceptLanguageHeader(Locale language)", " AlertInfoHeader createAlertInfoHeader(URI alertInfo)", " AllowEventsHeader createAllowEventsHeader(String eventType) throws ParseException", " AllowHeader createAllowHeader(String method) throws ParseException", " AuthenticationInfoHeader createAuthenticationInfoHeader(String response) throws ParseException", " AuthorizationHeader createAuthorizationHeader(String scheme) throws ParseException", " CallIdHeader createCallIdHeader(String callId) throws ParseException", " CallInfoHeader createCallInfoHeader(URI callInfo)", " ContactHeader createContactHeader()", " ContactHeader createContactHeader(Address address)", " ContentDispositionHeader createContentDispositionHeader(String contentDispositionType) throws ParseException", " ContentEncodingHeader createContentEncodingHeader(String encoding) throws ParseException", " ContentLanguageHeader createContentLanguageHeader(Locale contentLanguage)", " ContentLengthHeader createContentLengthHeader(int contentLength) throws InvalidArgumentException", " ContentTypeHeader createContentTypeHeader(String contentType, String contentSubType) throws ParseException", " CSeqHeader createCSeqHeader(int sequenceNumber, String method) throws ParseException, InvalidArgumentException", " CSeqHeader createCSeqHeader(long sequenceNumber, String method) throws ParseException, InvalidArgumentException", " DateHeader createDateHeader(Calendar date)", " ErrorInfoHeader createErrorInfoHeader(URI errorInfo)", " EventHeader createEventHeader(String eventType) throws ParseException", " ExpiresHeader createExpiresHeader(int expires) throws InvalidArgumentException", " ExtensionHeader createExtensionHeader(String name, String value) throws ParseException", " FromHeader createFromHeader(Address address, String tag) throws ParseException", " Header createHeader(String name, String value) throws ParseException", " Header createHeader(String headerText) throws ParseException", " List createHeaders(String headers) throws ParseException", " InReplyToHeader createInReplyToHeader(String callId) throws ParseException", " MaxForwardsHeader createMaxForwardsHeader(int maxForwards) throws InvalidArgumentException", " MimeVersionHeader createMimeVersionHeader(int majorVersion, int minorVersion) throws InvalidArgumentException", " MinExpiresHeader createMinExpiresHeader(int minExpires) throws InvalidArgumentException", " OrganizationHeader createOrganizationHeader(String organization) throws ParseException", " PriorityHeader createPriorityHeader(String priority) throws ParseException", " ProxyAuthenticateHeader createProxyAuthenticateHeader(String scheme) throws ParseException", " ProxyAuthorizationHeader createProxyAuthorizationHeader(String scheme) throws ParseException", " ProxyRequireHeader createProxyRequireHeader(String optionTag) throws ParseException", " RAckHeader createRAckHeader(long rSeqNumber, long cSeqNumber, String method) throws InvalidArgumentException, ParseException", " RAckHeader createRAckHeader(int rSeqNumber, int cSeqNumber, String method) throws InvalidArgumentException, ParseException", " ReasonHeader createReasonHeader(String protocol, int cause, String text) throws InvalidArgumentException, ParseException", " RecordRouteHeader createRecordRouteHeader(Address address)", " ReferToHeader createReferToHeader(Address address)", " ReplyToHeader createReplyToHeader(Address address)", " RequireHeader createRequireHeader(String optionTag) throws ParseException", " RetryAfterHeader createRetryAfterHeader(int retryAfter) throws InvalidArgumentException", " RouteHeader createRouteHeader(Address address)", " RSeqHeader createRSeqHeader(long sequenceNumber) throws InvalidArgumentException", " RSeqHeader createRSeqHeader(int sequenceNumber) throws InvalidArgumentException", " ServerHeader createServerHeader(List product) throws ParseException", " SIPETagHeader createSIPETagHeader(String etag) throws ParseException", " SIPIfMatchHeader createSIPIfMatchHeader(String etag) throws ParseException", " SubjectHeader createSubjectHeader(String subject) throws ParseException", " SubscriptionStateHeader createSubscriptionStateHeader(String subscriptionState) throws ParseException", " SupportedHeader createSupportedHeader(String optionTag) throws ParseException", " TimeStampHeader createTimeStampHeader(float timeStamp) throws InvalidArgumentException", " ToHeader createToHeader(Address address, String tag) throws ParseException", " UnsupportedHeader createUnsupportedHeader(String optionTag) throws ParseException", " UserAgentHeader createUserAgentHeader(List product) throws ParseException", " ViaHeader createViaHeader(String host, int port, String transport, String branch) throws InvalidArgumentException, ParseException", " WarningHeader createWarningHeader(String agent, int code, String comment) throws InvalidArgumentException, ParseException", " WWWAuthenticateHeader createWWWAuthenticateHeader(String scheme) throws ParseException" ],
  "variableNames" : [ ]
}