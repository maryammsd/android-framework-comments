{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/VibrationEffect.java",
  "packageName" : "android.os",
  "className" : "VibrationEffect",
  "comment" : "\n * A VibrationEffect describes a haptic effect to be performed by a {@link Vibrator}.\n *\n * <p>These effects may be any number of things, from single shot vibrations to complex waveforms.\n ",
  "links" : [ "android.os.Vibrator" ],
  "variables" : [ {
    "name" : "SCALE_GAMMA",
    "type" : "float",
    "comment" : " Stevens' coefficient to scale the perceived vibration intensity.",
    "links" : [ ]
  }, {
    "name" : "MAX_HAPTIC_FEEDBACK_DURATION",
    "type" : "long",
    "comment" : " If a vibration is playing for longer than 1s, it's probably not haptic feedback",
    "links" : [ ]
  }, {
    "name" : "MAX_HAPTIC_FEEDBACK_COMPOSITION_SIZE",
    "type" : "long",
    "comment" : " If a vibration is playing more than 3 constants, it's probably not haptic feedback",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_AMPLITUDE",
    "type" : "int",
    "comment" : "\n     * The default vibration strength of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_AMPLITUDE",
    "type" : "int",
    "comment" : "\n     * The maximum amplitude value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_CLICK",
    "type" : "int",
    "comment" : "\n     * A click effect. Use this effect as a baseline, as it's the most common type of click effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_DOUBLE_CLICK",
    "type" : "int",
    "comment" : "\n     * A double click effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_TICK",
    "type" : "int",
    "comment" : "\n     * A tick effect. This effect is less strong compared to {@link #EFFECT_CLICK}.\n     ",
    "links" : [ "#EFFECT_CLICK" ]
  }, {
    "name" : "EFFECT_THUD",
    "type" : "int",
    "comment" : "\n     * A thud effect.\n     * @see #get(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_POP",
    "type" : "int",
    "comment" : "\n     * A pop effect.\n     * @see #get(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_HEAVY_CLICK",
    "type" : "int",
    "comment" : "\n     * A heavy click effect. This effect is stronger than {@link #EFFECT_CLICK}.\n     ",
    "links" : [ "#EFFECT_CLICK" ]
  }, {
    "name" : "EFFECT_TEXTURE_TICK",
    "type" : "int",
    "comment" : "\n     * A texture effect meant to replicate soft ticks.\n     *\n     * <p>Unlike normal effects, texture effects are meant to be called repeatedly, generally in\n     * response to some motion, in order to replicate the feeling of some texture underneath the\n     * user's fingers.\n     *\n     * @see #get(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_STRENGTH_LIGHT",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_STRENGTH_MEDIUM",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EFFECT_STRENGTH_STRONG",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "RINGTONES",
    "type" : "int[]",
    "comment" : "\n     * Ringtone patterns. They may correspond with the device's ringtone audio, or may just be a\n     * pattern that can be played as a ringtone with any audio, depending on the device.\n     *\n     * @see #get(Uri, Context)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VibrationEffect>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static VibrationEffect createOneShot(long milliseconds, int amplitude)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Create a one shot vibration.\n     *\n     * <p>One shot vibrations will vibrate constantly for the specified period of time at the\n     * specified amplitude, and then stop.\n     *\n     * @param milliseconds The number of milliseconds to vibrate. This must be a positive number.\n     * @param amplitude The strength of the vibration. This must be a value between 1 and 255, or\n     * {@link #DEFAULT_AMPLITUDE}.\n     *\n     * @return The desired effect.\n     ",
    "links" : [ "#DEFAULT_AMPLITUDE" ]
  }, {
    "name" : "public static VibrationEffect createWaveform(long[] timings, int repeat)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Create a waveform vibration, using only off/on transitions at the provided time intervals,\n     * and potentially repeating.\n     *\n     * <p>In effect, the timings array represents the number of milliseconds <em>before</em> turning\n     * the vibrator on, followed by the number of milliseconds to keep the vibrator on, then\n     * the number of milliseconds turned off, and so on. Consequently, the first timing value will\n     * often be 0, so that the effect will start vibrating immediately.\n     *\n     * <p>This method is equivalent to calling {@link #createWaveform(long[], int[], int)} with\n     * corresponding amplitude values alternating between 0 and {@link #DEFAULT_AMPLITUDE},\n     * beginning with 0.\n     *\n     * <p>To cause the pattern to repeat, pass the index into the timings array at which to start\n     * the repetition, or -1 to disable repeating. Repeating effects will be played indefinitely\n     * and should be cancelled via {@link Vibrator#cancel()}.\n     *\n     * @param timings The pattern of alternating on-off timings, starting with an 'off' timing, and\n     *               representing the length of time to sustain the individual item (not\n     *               cumulative).\n     * @param repeat The index into the timings array at which to repeat, or -1 if you don't\n     *               want to repeat indefinitely.\n     *\n     * @return The desired effect.\n     ",
    "links" : [ "#DEFAULT_AMPLITUDE", "#createWaveform(long", "android.os.Vibrator#cancel()" ]
  }, {
    "name" : "public abstract long[] computeCreateWaveformOffOnTimingsOrNull()",
    "returnType" : "long[]",
    "comment" : "\n     * Computes a legacy vibration pattern (i.e. a pattern with duration values for \"off/on\"\n     * vibration components) that is equivalent to this VibrationEffect.\n     *\n     * <p>All non-repeating effects created with {@link #createWaveform(long[], int)} are\n     * convertible into an equivalent vibration pattern with this method. It is not guaranteed that\n     * an effect created with other means becomes converted into an equivalent legacy vibration\n     * pattern, even if it has an equivalent vibration pattern. If this method is unable to create\n     * an equivalent vibration pattern for such effects, it will return {@code null}.\n     *\n     * <p>Note that a valid equivalent long[] pattern cannot be created for an effect that has any\n     * form of repeating behavior, regardless of how the effect was created. For repeating effects,\n     * the method will always return {@code null}.\n     *\n     * @return a long array representing a vibration pattern equivalent to the VibrationEffect, if\n     *               the method successfully derived a vibration pattern equivalent to the effect\n     *               (this will always be the case if the effect was created via\n     *               {@link #createWaveform(long[], int)} and is non-repeating). Otherwise, returns\n     *               {@code null}.\n     * @hide\n     ",
    "links" : [ "#createWaveform(long" ]
  }, {
    "name" : "public static VibrationEffect createWaveform(long[] timings, int[] amplitudes, int repeat)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Create a waveform vibration.\n     *\n     * <p>Waveform vibrations are a potentially repeating series of timing and amplitude pairs,\n     * provided in separate arrays. For each pair, the value in the amplitude array determines\n     * the strength of the vibration and the value in the timing array determines how long it\n     * vibrates for, in milliseconds.\n     *\n     * <p>To cause the pattern to repeat, pass the index into the timings array at which to start\n     * the repetition, or -1 to disable repeating. Repeating effects will be played indefinitely\n     * and should be cancelled via {@link Vibrator#cancel()}.\n     *\n     * @param timings The timing values, in milliseconds, of the timing / amplitude pairs. Timing\n     *                values of 0 will cause the pair to be ignored.\n     * @param amplitudes The amplitude values of the timing / amplitude pairs. Amplitude values\n     *                   must be between 0 and 255, or equal to {@link #DEFAULT_AMPLITUDE}. An\n     *                   amplitude value of 0 implies the motor is off.\n     * @param repeat The index into the timings array at which to repeat, or -1 if you don't\n     *               want to repeat indefinitely.\n     *\n     * @return The desired effect.\n     ",
    "links" : [ "#DEFAULT_AMPLITUDE", "android.os.Vibrator#cancel()" ]
  }, {
    "name" : "public static VibrationEffect createPredefined(@EffectType int effectId)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Create a predefined vibration effect.\n     *\n     * <p>Predefined effects are a set of common vibration effects that should be identical,\n     * regardless of the app they come from, in order to provide a cohesive experience for users\n     * across the entire device. They also may be custom tailored to the device hardware in order to\n     * provide a better experience than you could otherwise build using the generic building\n     * blocks.\n     *\n     * <p>This will fallback to a generic pattern if one exists and there does not exist a\n     * hardware-specific implementation of the effect.\n     *\n     * @param effectId The ID of the effect to perform:\n     *                 {@link #EFFECT_CLICK}, {@link #EFFECT_DOUBLE_CLICK}, {@link #EFFECT_TICK}\n     *\n     * @return The desired effect.\n     ",
    "links" : [ "#EFFECT_CLICK", "#EFFECT_TICK", "#EFFECT_DOUBLE_CLICK" ]
  }, {
    "name" : "public static VibrationEffect get(int effectId)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Get a predefined vibration effect.\n     *\n     * <p>Predefined effects are a set of common vibration effects that should be identical,\n     * regardless of the app they come from, in order to provide a cohesive experience for users\n     * across the entire device. They also may be custom tailored to the device hardware in order to\n     * provide a better experience than you could otherwise build using the generic building\n     * blocks.\n     *\n     * <p>This will fallback to a generic pattern if one exists and there does not exist a\n     * hardware-specific implementation of the effect.\n     *\n     * @param effectId The ID of the effect to perform:\n     *                 {@link #EFFECT_CLICK}, {@link #EFFECT_DOUBLE_CLICK}, {@link #EFFECT_TICK}\n     *\n     * @return The desired effect.\n     * @hide\n     ",
    "links" : [ "#EFFECT_CLICK", "#EFFECT_TICK", "#EFFECT_DOUBLE_CLICK" ]
  }, {
    "name" : "public static VibrationEffect get(int effectId, boolean fallback)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Get a predefined vibration effect.\n     *\n     * <p>Predefined effects are a set of common vibration effects that should be identical,\n     * regardless of the app they come from, in order to provide a cohesive experience for users\n     * across the entire device. They also may be custom tailored to the device hardware in order to\n     * provide a better experience than you could otherwise build using the generic building\n     * blocks.\n     *\n     * <p>Some effects you may only want to play if there's a hardware specific implementation\n     * because they may, for example, be too disruptive to the user without tuning. The\n     * {@code fallback} parameter allows you to decide whether you want to fallback to the generic\n     * implementation or only play if there's a tuned, hardware specific one available.\n     *\n     * @param effectId The ID of the effect to perform:\n     *                 {@link #EFFECT_CLICK}, {@link #EFFECT_DOUBLE_CLICK}, {@link #EFFECT_TICK}\n     * @param fallback Whether to fall back to a generic pattern if a hardware specific\n     *                 implementation doesn't exist.\n     *\n     * @return The desired effect.\n     * @hide\n     ",
    "links" : [ "#EFFECT_CLICK", "#EFFECT_TICK", "#EFFECT_DOUBLE_CLICK" ]
  }, {
    "name" : "public static VibrationEffect get(Uri uri, Context context)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Get a predefined vibration effect associated with a given URI.\n     *\n     * <p>Predefined effects are a set of common vibration effects that should be identical,\n     * regardless of the app they come from, in order to provide a cohesive experience for users\n     * across the entire device. They also may be custom tailored to the device hardware in order to\n     * provide a better experience than you could otherwise build using the generic building\n     * blocks.\n     *\n     * @param uri The URI associated with the haptic effect.\n     * @param context The context used to get the URI to haptic effect association.\n     *\n     * @return The desired effect, or {@code null} if there's no associated effect.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Composition startComposition()",
    "returnType" : "Composition",
    "comment" : "\n     * Start composing a haptic effect.\n     *\n     * @see VibrationEffect.Composition\n     ",
    "links" : [ ]
  }, {
    "name" : "public static WaveformBuilder startWaveform()",
    "returnType" : "WaveformBuilder",
    "comment" : "\n     * Start building a waveform vibration.\n     *\n     * <p>The waveform builder offers more flexibility for creating waveform vibrations, allowing\n     * control over vibration amplitude and frequency via smooth transitions between values.\n     *\n     * <p>The waveform will start the first transition from the vibrator off state, with the\n     * resonant frequency by default. To provide an initial state, use\n     * {@link #startWaveform(VibrationEffect.VibrationParameter)}.\n     *\n     * @see VibrationEffect.WaveformBuilder\n     * @hide\n     ",
    "links" : [ "#startWaveform(VibrationEffect.VibrationParameter)" ]
  }, {
    "name" : "public static WaveformBuilder startWaveform(@NonNull VibrationParameter initialParameter)",
    "returnType" : "WaveformBuilder",
    "comment" : "\n     * Start building a waveform vibration with an initial state specified by a\n     * {@link VibrationEffect.VibrationParameter}.\n     *\n     * <p>The waveform builder offers more flexibility for creating waveform vibrations, allowing\n     * control over vibration amplitude and frequency via smooth transitions between values.\n     *\n     * @param initialParameter The initial {@link VibrationEffect.VibrationParameter} value to be\n     *                         applied at the beginning of the vibration.\n     * @return The {@link VibrationEffect.WaveformBuilder} started with the initial parameters.\n     *\n     * @see VibrationEffect.WaveformBuilder\n     * @hide\n     ",
    "links" : [ "VibrationEffect.WaveformBuilder", "VibrationEffect.VibrationParameter" ]
  }, {
    "name" : "public static WaveformBuilder startWaveform(@NonNull VibrationParameter initialParameter1, @NonNull VibrationParameter initialParameter2)",
    "returnType" : "WaveformBuilder",
    "comment" : "\n     * Start building a waveform vibration with an initial state specified by two\n     * {@link VibrationEffect.VibrationParameter VibrationParameters}.\n     *\n     * <p>The waveform builder offers more flexibility for creating waveform vibrations, allowing\n     * control over vibration amplitude and frequency via smooth transitions between values.\n     *\n     * @param initialParameter1 The initial {@link VibrationEffect.VibrationParameter} value to be\n     *                          applied at the beginning of the vibration.\n     * @param initialParameter2 The initial {@link VibrationEffect.VibrationParameter} value to be\n     *                          applied at the beginning of the vibration, must be a different type\n     *                          of parameter than the one specified by the first argument.\n     * @return The {@link VibrationEffect.WaveformBuilder} started with the initial parameters.\n     *\n     * @see VibrationEffect.WaveformBuilder\n     * @hide\n     ",
    "links" : [ "VibrationEffect.WaveformBuilder", "VibrationEffect.VibrationParameter" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void validate()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the estimated duration of the vibration in milliseconds.\n     *\n     * <p>For effects without a defined end (e.g. a Waveform with a non-negative repeat index), this\n     * returns Long.MAX_VALUE. For effects with an unknown duration (e.g. Prebaked effects where\n     * the length is device and potentially run-time dependent), this returns -1.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean areVibrationFeaturesSupported(@NonNull VibratorInfo vibratorInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a vibrator with a given {@link VibratorInfo} can play this effect as intended.\n     *\n     * <p>See {@link VibratorInfo#areVibrationFeaturesSupported(VibrationEffect)} for more\n     * information about what counts as supported by a vibrator, and what counts as not.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibratorInfo", "android.os.VibratorInfo#areVibrationFeaturesSupported(VibrationEffect)" ]
  }, {
    "name" : "public boolean isHapticFeedbackCandidate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this effect could represent a touch haptic feedback.\n     *\n     * <p>It is strongly recommended that an instance of {@link VibrationAttributes} is specified\n     * for each vibration, with the correct usage. When a vibration is played with usage UNKNOWN,\n     * then this method will be used to classify the most common use case and make sure they are\n     * covered by the user settings for \"Touch feedback\".\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationAttributes" ]
  }, {
    "name" : "public abstract T resolve(int defaultAmplitude)",
    "returnType" : "T",
    "comment" : "\n     * Resolve default values into integer amplitude numbers.\n     *\n     * @param defaultAmplitude the default amplitude to apply, must be between 0 and\n     *                         MAX_AMPLITUDE\n     * @return this if amplitude value is already set, or a copy of this effect with given default\n     *         amplitude otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract T scale(float scaleFactor)",
    "returnType" : "T",
    "comment" : "\n     * Scale the vibration effect intensity with the given constraints.\n     *\n     * @param scaleFactor scale factor to be applied to the intensity. Values within [0,1) will\n     *                    scale down the intensity, values larger than 1 will scale up\n     * @return this if there is no scaling to be done, or a copy of this effect with scaled\n     *         vibration intensity otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract VibrationEffect applyRepeatingIndefinitely(boolean wantRepeating, int loopDelayMs)",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Ensures that the effect is repeating indefinitely or not. This is a lossy operation and\n     * should only be applied once to an original effect - it shouldn't be applied to the\n     * result of this method.\n     *\n     * <p>Non-repeating effects will be made repeating by looping the entire effect with the\n     * specified delay between each loop. The delay is added irrespective of whether the effect\n     * already has a delay at the beginning or end.\n     *\n     * <p>Repeating effects will be left with their native repeating portion if it should be\n     * repeating, and otherwise the loop index is removed, so that the entire effect plays once.\n     *\n     * @param wantRepeating Whether the effect is required to be repeating or not.\n     * @param loopDelayMs The milliseconds to pause between loops, if repeating is to be added to\n     *                    the effect. Ignored if {@code repeating==false} or the effect is already\n     *                    repeating itself. No delay is added if <= 0.\n     * @return this if the effect already satisfies the repeating requirement, or a copy of this\n     *         adjusted to repeat or not repeat as appropriate.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float scale(float intensity, float scaleFactor)",
    "returnType" : "float",
    "comment" : "\n     * Scale given vibration intensity by the given factor.\n     *\n     * <p> This scale is not necessarily linear and may apply a gamma correction to the scale\n     * factor before using it.\n     *\n     * @param intensity   relative intensity of the effect, must be between 0 and 1\n     * @param scaleFactor scale factor to be applied to the intensity. Values within [0,1) will\n     *                    scale down the intensity, values larger than 1 will scale up\n     * @return the scaled intensity which will be values within [0, 1].\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float scaleLinearly(float intensity, float scaleFactor)",
    "returnType" : "float",
    "comment" : "\n     * Performs a linear scaling on the given vibration intensity by the given factor.\n     *\n     * @param intensity relative intensity of the effect, must be between 0 and 1.\n     * @param scaleFactor scale factor to be applied to the intensity. Values within [0,1) will\n     *                    scale down the intensity, values larger than 1 will scale up.\n     * @return the scaled intensity which will be values within [0, 1].\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toDebugString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a compact version of the {@link #toString()} result for debugging purposes.\n     *\n     * @hide\n     ",
    "links" : [ "#toString()" ]
  }, {
    "name" : "public static String effectIdToString(int effectId)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String effectStrengthToString(int effectStrength)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static VibrationEffect createOneShot(long milliseconds, int amplitude)", "public static VibrationEffect createWaveform(long[] timings, int repeat)", "public abstract long[] computeCreateWaveformOffOnTimingsOrNull()", "public static VibrationEffect createWaveform(long[] timings, int[] amplitudes, int repeat)", "public static VibrationEffect createPredefined(@EffectType int effectId)", "public static VibrationEffect get(int effectId)", "public static VibrationEffect get(int effectId, boolean fallback)", "public static VibrationEffect get(Uri uri, Context context)", "public static Composition startComposition()", "public static WaveformBuilder startWaveform()", "public static WaveformBuilder startWaveform(@NonNull VibrationParameter initialParameter)", "public static WaveformBuilder startWaveform(@NonNull VibrationParameter initialParameter1, @NonNull VibrationParameter initialParameter2)", "public int describeContents()", "public abstract void validate()", "public abstract long getDuration()", "public abstract boolean areVibrationFeaturesSupported(@NonNull VibratorInfo vibratorInfo)", "public boolean isHapticFeedbackCandidate()", "public abstract T resolve(int defaultAmplitude)", "public abstract T scale(float scaleFactor)", "public abstract VibrationEffect applyRepeatingIndefinitely(boolean wantRepeating, int loopDelayMs)", "public static float scale(float intensity, float scaleFactor)", "public static float scaleLinearly(float intensity, float scaleFactor)", "public abstract String toDebugString()", "public static String effectIdToString(int effectId)", "public static String effectStrengthToString(int effectStrength)" ],
  "variableNames" : [ "SCALE_GAMMA", "MAX_HAPTIC_FEEDBACK_DURATION", "MAX_HAPTIC_FEEDBACK_COMPOSITION_SIZE", "DEFAULT_AMPLITUDE", "MAX_AMPLITUDE", "EFFECT_CLICK", "EFFECT_DOUBLE_CLICK", "EFFECT_TICK", "EFFECT_THUD", "EFFECT_POP", "EFFECT_HEAVY_CLICK", "EFFECT_TEXTURE_TICK", "EFFECT_STRENGTH_LIGHT", "EFFECT_STRENGTH_MEDIUM", "EFFECT_STRENGTH_STRONG", "RINGTONES", "CREATOR" ]
}