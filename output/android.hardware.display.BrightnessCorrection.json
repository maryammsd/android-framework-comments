{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/BrightnessCorrection.java",
  "packageName" : "android.hardware.display",
  "className" : "BrightnessCorrection",
  "comment" : "\n * BrightnessCorrection encapsulates a correction to the brightness, without comitting to the\n * actual correction scheme.\n * It is used by the BrightnessConfiguration, which maps context (e.g. the foreground app's package\n * name and category) to corrections that need to be applied to the brightness within that context.\n * Corrections are currently done by the app that has the top activity of the focused stack, either\n * by its package name, or (if its package name is not mapped to any correction) by its category.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SCALE_AND_TRANSLATE_LOG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_SCALE_AND_TRANSLATE_LOG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImplementation",
    "type" : "BrightnessCorrectionImplementation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BrightnessCorrection>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BrightnessCorrection createScaleAndTranslateLog(float scale, float translate)",
    "returnType" : "BrightnessCorrection",
    "comment" : "\n     * Creates a BrightnessCorrection that given {@code brightness}, corrects it to be\n     * {@code exp(scale * ln(brightness) + translate)}.\n     *\n     * @param scale\n     *      How much to scale the log (base e) brightness.\n     * @param translate\n     *      How much to translate the log (base e) brightness.\n     *\n     * @return A BrightnessCorrection that given {@code brightness}, corrects it to be\n     * {@code exp(scale * ln(brightness) + translate)}.\n     *\n     * @throws IllegalArgumentException\n     *      - scale or translate are NaN.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float apply(@FloatRange(from = 0.0) float brightness)",
    "returnType" : "float",
    "comment" : "\n     * Applies the brightness correction to a given brightness.\n     *\n     * @param brightness\n     *      The brightness.\n     *\n     * @return The corrected brightness.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation.\n     *\n     * @return A string representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void saveToXml(TypedXmlSerializer serializer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the correction to an XML serializer.\n     *\n     * @param serializer\n     *      The XML serializer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BrightnessCorrection loadFromXml(TypedXmlPullParser parser) throws IOException, XmlPullParserException",
    "returnType" : "BrightnessCorrection",
    "comment" : "\n     * Read a correction from an XML parser.\n     *\n     * @param parser\n     *      The XML parser.\n     *\n     * @throws IOException\n     *      The parser failed to read the XML file.\n     * @throws XmlPullParserException\n     *      The parser failed to parse the XML file.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float loadFloatFromXml(TypedXmlPullParser parser, String attribute)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static BrightnessCorrection createScaleAndTranslateLog(float scale, float translate)", "public float apply(@FloatRange(from = 0.0) float brightness)", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public void saveToXml(TypedXmlSerializer serializer) throws IOException", "public static BrightnessCorrection loadFromXml(TypedXmlPullParser parser) throws IOException, XmlPullParserException", "private static float loadFloatFromXml(TypedXmlPullParser parser, String attribute)" ],
  "variableNames" : [ "SCALE_AND_TRANSLATE_LOG", "TAG_SCALE_AND_TRANSLATE_LOG", "mImplementation", "CREATOR" ]
}