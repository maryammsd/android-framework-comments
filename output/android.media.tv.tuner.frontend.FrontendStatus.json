{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tuner/frontend/FrontendStatus.java",
  "packageName" : "android.media.tv.tuner.frontend",
  "className" : "FrontendStatus",
  "comment" : "\n * A Frontend Status class that contains the metrics of the active frontend.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FRONTEND_STATUS_TYPE_DEMOD_LOCK",
    "type" : "int",
    "comment" : "\n     * Lock status for Demod.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_SNR",
    "type" : "int",
    "comment" : "\n     * Signal to Noise Ratio.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_BER",
    "type" : "int",
    "comment" : "\n     * Bit Error Ratio.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_PER",
    "type" : "int",
    "comment" : "\n     * Packages Error Ratio.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_PRE_BER",
    "type" : "int",
    "comment" : "\n     * Bit Error Ratio before FEC.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_SIGNAL_QUALITY",
    "type" : "int",
    "comment" : "\n     * Signal Quality (0..100). Good data over total data in percent can be\n     * used as a way to present Signal Quality.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_SIGNAL_STRENGTH",
    "type" : "int",
    "comment" : "\n     * Signal Strength.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_SYMBOL_RATE",
    "type" : "int",
    "comment" : "\n     * Symbol Rate in symbols per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_FEC",
    "type" : "int",
    "comment" : "\n     * Forward Error Correction Type.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_MODULATION",
    "type" : "int",
    "comment" : "\n     * Modulation Type.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_SPECTRAL",
    "type" : "int",
    "comment" : "\n     * Spectral Inversion Type.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_LNB_VOLTAGE",
    "type" : "int",
    "comment" : "\n     * LNB Voltage.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_PLP_ID",
    "type" : "int",
    "comment" : "\n     * Physical Layer Pipe ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_EWBS",
    "type" : "int",
    "comment" : "\n     * Status for Emergency Warning Broadcasting System.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_AGC",
    "type" : "int",
    "comment" : "\n     * Automatic Gain Control.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_LNA",
    "type" : "int",
    "comment" : "\n     * Low Noise Amplifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_LAYER_ERROR",
    "type" : "int",
    "comment" : "\n     * Error status by layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_MER",
    "type" : "int",
    "comment" : "\n     * Modulation Error Ratio.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_FREQ_OFFSET",
    "type" : "int",
    "comment" : "\n     * Difference between tuning frequency and actual locked frequency.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_HIERARCHY",
    "type" : "int",
    "comment" : "\n     * Hierarchy for DVBT.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_RF_LOCK",
    "type" : "int",
    "comment" : "\n     * Lock status for RF.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_ATSC3_PLP_INFO",
    "type" : "int",
    "comment" : "\n     * Current tuned PLP information in a frequency band for ATSC-3.0 frontend.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_BERS",
    "type" : "int",
    "comment" : "\n     * BERS Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_CODERATES",
    "type" : "int",
    "comment" : "\n     * Coderate Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_BANDWIDTH",
    "type" : "int",
    "comment" : "\n     * Bandwidth Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_GUARD_INTERVAL",
    "type" : "int",
    "comment" : "\n     * Guard Interval Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_TRANSMISSION_MODE",
    "type" : "int",
    "comment" : "\n     * Transmission Mode Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_UEC",
    "type" : "int",
    "comment" : "\n     * UEC Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_T2_SYSTEM_ID",
    "type" : "int",
    "comment" : "\n     * T2 System Id Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_INTERLEAVINGS",
    "type" : "int",
    "comment" : "\n     * Interleavings Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_ISDBT_SEGMENTS",
    "type" : "int",
    "comment" : "\n     * ISDBT Segments Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_TS_DATA_RATES",
    "type" : "int",
    "comment" : "\n     * TS Data Rates Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_MODULATIONS_EXT",
    "type" : "int",
    "comment" : "\n     * Extended Modulations Type. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_ROLL_OFF",
    "type" : "int",
    "comment" : "\n     * Roll Off Type status of the frontend. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IS_MISO_ENABLED",
    "type" : "int",
    "comment" : "\n     * If the frontend currently supports MISO or not. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IS_LINEAR",
    "type" : "int",
    "comment" : "\n     * If the frontend code rate is linear or not. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IS_SHORT_FRAMES_ENABLED",
    "type" : "int",
    "comment" : "\n     * If short frames is enabled or not. Only supported in Tuner HAL 1.1 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_ISDBT_MODE",
    "type" : "int",
    "comment" : "\n     * ISDB-T mode. Only supported in Tuner HAL 2.0 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_ISDBT_PARTIAL_RECEPTION_FLAG",
    "type" : "int",
    "comment" : "\n     * ISDB-T partial reception flag. Only supported in Tuner HAL 2.0 or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_STREAM_IDS",
    "type" : "int",
    "comment" : "\n     * Stream IDs included in a transponder.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_DVBT_CELL_IDS",
    "type" : "int",
    "comment" : "\n     * DVB-T Cell IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IPTV_CONTENT_URL",
    "type" : "int",
    "comment" : "\n     * IPTV content URL.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IPTV_PACKETS_LOST",
    "type" : "int",
    "comment" : "\n     * IPTV packets lost.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IPTV_PACKETS_RECEIVED",
    "type" : "int",
    "comment" : "\n     * IPTV packets received.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IPTV_WORST_JITTER_MS",
    "type" : "int",
    "comment" : "\n     * IPTV worst jitter.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_IPTV_AVERAGE_JITTER_MS",
    "type" : "int",
    "comment" : "\n     * IPTV average jitter.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRONTEND_STATUS_TYPE_ATSC3_ALL_PLP_INFO",
    "type" : "int",
    "comment" : "\n     * All PLP information in a frequency band for ATSC-3.0 frontend, which includes both tuned and\n     * not tuned PLPs for currently watching service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsDemodLocked",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnr",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBer",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPer",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerBer",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignalQuality",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignalStrength",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSymbolRate",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInnerFec",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModulation",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInversion",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLnbVoltage",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlpId",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEwbs",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAgc",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLnaOn",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLayerErrors",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMer",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreqOffset",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHierarchy",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRfLocked",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlpInfo",
    "type" : "Atsc3PlpTuningInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBers",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodeRates",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBandwidth",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGuardInterval",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransmissionMode",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUec",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemId",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterleaving",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTsDataRate",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsdbtSegment",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModulationsExt",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRollOff",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsMisoEnabled",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLinear",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsShortFrames",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsdbtMode",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsdbtPartialReceptionFlag",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamIds",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDvbtCellIds",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllPlpInfo",
    "type" : "Atsc3PlpInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIptvContentUrl",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIptvPacketsLost",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIptvPacketsReceived",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIptvWorstJitterMs",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIptvAverageJitterMs",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isDemodLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the demod is currently locked or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSnr()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Signal to Noise Ratio in thousandths of a deciBel (0.001dB).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBer()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Bit Error Ratio.\n     *\n     * <p>The number of error bit per 1 billion bits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPer()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Packages Error Ratio.\n     *\n     * <p>The number of error package per 1 billion packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPerBer()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Bit Error Ratio before Forward Error Correction (FEC).\n     *\n     * <p>The number of error bit per 1 billion bits before FEC.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSignalQuality()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Signal Quality in percent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSignalStrength()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Signal Strength in thousandths of a dBm (0.001dBm).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSymbolRate()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current symbol rate in symbols per second.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getInnerFec()",
    "returnType" : "long",
    "comment" : "\n     *  Gets the current Inner Forward Error Correction type as specified in ETSI EN 300 468 V1.15.1\n     *  and ETSI EN 302 307-2 V1.1.1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getModulation()",
    "returnType" : "int",
    "comment" : "\n     * Gets the currently modulation information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSpectralInversion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the currently Spectral Inversion information for DVBC.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLnbVoltage()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Power Voltage Type for LNB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPlpId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Physical Layer Pipe ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEwbs()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether it's Emergency Warning Broadcasting System\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAgc()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Automatic Gain Control value which is normalized from 0 to 255.\n     *\n     * Larger AGC values indicate it is applying more gain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLnaOn()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks LNA (Low Noise Amplifier) is on or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getLayerErrors()",
    "returnType" : "boolean[]",
    "comment" : "\n     * Gets the current Error information by layer.\n     *\n     * The order of the vectors is in ascending order of the required CNR (Contrast-to-noise ratio).\n     * The most robust layer is the first. For example, in ISDB-T, vec[0] is the information of\n     * layer A. vec[1] is the information of layer B.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMer()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Modulation Error Ratio in thousandths of a deciBel (0.001dB).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFreqOffset()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current frequency difference in Hz.\n     *\n     * <p>Difference between tuning frequency and actual locked frequency.\n     * @deprecated Use {@link #getFreqOffsetLong()}\n     ",
    "links" : [ "#getFreqOffsetLong()" ]
  }, {
    "name" : "public long getFreqOffsetLong()",
    "returnType" : "long",
    "comment" : "\n     * Gets the current frequency difference in Hz.\n     *\n     * <p>Difference between tuning frequency and actual locked frequency.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHierarchy()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current hierarchy Type for DVBT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRfLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the RF is locked or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Atsc3PlpTuningInfo[] getAtsc3PlpTuningInfo()",
    "returnType" : "Atsc3PlpTuningInfo[]",
    "comment" : "\n     * Gets an array of the current tuned PLPs information of ATSC3 frontend.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getBers()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets an array of the current extended bit error ratio.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     *\n     * The order of the vectors is in ascending order of the required CNR (Contrast-to-noise ratio).\n     * The most robust layer is the first. For example, in ISDB-T, vec[0] is the information of\n     * layer A. vec[1] is the information of layer B.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getCodeRates()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets an array of the current code rates.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     *\n     * The order of the vectors is in ascending order of the required CNR (Contrast-to-noise ratio).\n     * The most robust layer is the first. For example, in ISDB-T, vec[0] is the information of\n     * layer A. vec[1] is the information of layer B.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getBandwidth()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current bandwidth information.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getGuardInterval()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current guard interval information.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getTransmissionMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current transmission mode information.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getUec()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current Uncorrectable Error Counts of the frontend's Physical Layer Pipe (PLP)\n     * since the last tune operation.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getSystemId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current DVB-T2 system id.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getInterleaving()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets an array of the current interleaving mode information.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     *\n     * The order of the vectors is in ascending order of the required CNR (Contrast-to-noise ratio).\n     * The most robust layer is the first. For example, in ISDB-T, vec[0] is the information of\n     * layer A. vec[1] is the information of layer B.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getIsdbtSegment()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets an array of the current segments information in ISDB-T Specification of all the\n     * channels.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     *\n     * The order of the vectors is in ascending order of the required CNR (Contrast-to-noise ratio).\n     * The most robust layer is the first. For example, in ISDB-T, vec[0] is the information of\n     * layer A. vec[1] is the information of layer B.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getTsDataRate()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets an array of the Transport Stream Data Rate in BPS of the current channel.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getExtendedModulations()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets an array of the current extended modulations information.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     *\n     * The order of the vectors is in ascending order of the required CNR (Contrast-to-noise ratio).\n     * The most robust layer is the first. For example, in ISDB-T, vec[0] is the information of\n     * layer A. vec[1] is the information of layer B.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getRollOff()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current roll off information.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public boolean isMisoEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets is MISO enabled or not.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public boolean isLinear()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets is the Code Rate of the frontend is linear or not.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public boolean isShortFramesEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets is the Short Frames enabled or not.\n     *\n     * <p>This query is only supported by Tuner HAL 1.1 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getIsdbtMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets ISDB-T mode.\n     *\n     * <p>This query is only supported by Tuner HAL 2.0 or higher. Unsupported version or if HAL\n     * doesn't return ISDB-T mode status will throw IllegalStateException. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getIsdbtPartialReceptionFlag()",
    "returnType" : "int",
    "comment" : "\n     * Gets ISDB-T partial reception flag.\n     *\n     * <p>This query is only supported by Tuner HAL 2.0 or higher. Unsupported version or if HAL\n     * doesn't return partial reception flag status will throw IllegalStateException. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getStreamIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets stream ids included in a transponder.\n     *\n     * <p>This query is only supported by Tuner HAL 2.0 or higher. Unsupported version or if HAL\n     * doesn't return stream ids will throw IllegalStateException. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int[] getDvbtCellIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets DVB-T cell ids.\n     *\n     * <p>This query is only supported by Tuner HAL 2.0 or higher. Unsupported version or if HAL\n     * doesn't return cell ids will throw IllegalStateException. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public List<Atsc3PlpInfo> getAllAtsc3PlpInfo()",
    "returnType" : "List<Atsc3PlpInfo>",
    "comment" : "\n     * Gets a list of all PLPs information of ATSC3 frontend, which includes both tuned and not\n     * tuned PLPs for currently watching service.\n     *\n     * <p>This query is only supported by Tuner HAL 2.0 or higher. Unsupported version will throw\n     * UnsupportedOperationException. Use {@link TunerVersionChecker#getTunerVersion()} to check\n     * the version.\n     *\n     * @return a list of all PLPs information. It is empty if HAL doesn't return all PLPs\n     *         information status.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public String getIptvContentUrl()",
    "returnType" : "String",
    "comment" : "\n     * Gets the IPTV content URL.\n     *\n     * @return A String URL in the format protocol://ip:port (udp://127.0.0.1:3000).\n     *\n     * <p>This query is only supported by Tuner HAL 3.0 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public long getIptvPacketsLost()",
    "returnType" : "long",
    "comment" : "\n     * Gets the number of packets lost.\n     *\n     * @return A long value representing the number of packets lost in transmission.\n     *\n     * <p>This query is only supported by Tuner HAL 3.0 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public long getIptvPacketsReceived()",
    "returnType" : "long",
    "comment" : "\n     * Gets the number of packets received.\n     *\n     * @return A long value representing the number of packets received.\n     *\n     * <p>This query is only supported by Tuner HAL 3.0 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getIptvWorstJitterMillis()",
    "returnType" : "int",
    "comment" : "\n     * Gets the worst jitter.\n     *\n     * @return An integer representing worst jitter recorded (in milliseconds).\n     *\n     * <p>This query is only supported by Tuner HAL 3.0 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  }, {
    "name" : "public int getIptvAverageJitterMillis()",
    "returnType" : "int",
    "comment" : "\n     * Gets the average jitter.\n     *\n     * @return An integer representing average jitter recorded (in milliseconds).\n     *\n     * <p>This query is only supported by Tuner HAL 3.0 or higher. Use\n     * {@link TunerVersionChecker#getTunerVersion()} to check the version.\n     ",
    "links" : [ "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()" ]
  } ],
  "methodNames" : [ "public boolean isDemodLocked()", "public int getSnr()", "public int getBer()", "public int getPer()", "public int getPerBer()", "public int getSignalQuality()", "public int getSignalStrength()", "public int getSymbolRate()", "public long getInnerFec()", "public int getModulation()", "public int getSpectralInversion()", "public int getLnbVoltage()", "public int getPlpId()", "public boolean isEwbs()", "public int getAgc()", "public boolean isLnaOn()", "public boolean[] getLayerErrors()", "public int getMer()", "public int getFreqOffset()", "public long getFreqOffsetLong()", "public int getHierarchy()", "public boolean isRfLocked()", "public Atsc3PlpTuningInfo[] getAtsc3PlpTuningInfo()", "public int[] getBers()", "public int[] getCodeRates()", "public int getBandwidth()", "public int getGuardInterval()", "public int getTransmissionMode()", "public int getUec()", "public int getSystemId()", "public int[] getInterleaving()", "public int[] getIsdbtSegment()", "public int[] getTsDataRate()", "public int[] getExtendedModulations()", "public int getRollOff()", "public boolean isMisoEnabled()", "public boolean isLinear()", "public boolean isShortFramesEnabled()", "public int getIsdbtMode()", "public int getIsdbtPartialReceptionFlag()", "public int[] getStreamIds()", "public int[] getDvbtCellIds()", "public List<Atsc3PlpInfo> getAllAtsc3PlpInfo()", "public String getIptvContentUrl()", "public long getIptvPacketsLost()", "public long getIptvPacketsReceived()", "public int getIptvWorstJitterMillis()", "public int getIptvAverageJitterMillis()" ],
  "variableNames" : [ "FRONTEND_STATUS_TYPE_DEMOD_LOCK", "FRONTEND_STATUS_TYPE_SNR", "FRONTEND_STATUS_TYPE_BER", "FRONTEND_STATUS_TYPE_PER", "FRONTEND_STATUS_TYPE_PRE_BER", "FRONTEND_STATUS_TYPE_SIGNAL_QUALITY", "FRONTEND_STATUS_TYPE_SIGNAL_STRENGTH", "FRONTEND_STATUS_TYPE_SYMBOL_RATE", "FRONTEND_STATUS_TYPE_FEC", "FRONTEND_STATUS_TYPE_MODULATION", "FRONTEND_STATUS_TYPE_SPECTRAL", "FRONTEND_STATUS_TYPE_LNB_VOLTAGE", "FRONTEND_STATUS_TYPE_PLP_ID", "FRONTEND_STATUS_TYPE_EWBS", "FRONTEND_STATUS_TYPE_AGC", "FRONTEND_STATUS_TYPE_LNA", "FRONTEND_STATUS_TYPE_LAYER_ERROR", "FRONTEND_STATUS_TYPE_MER", "FRONTEND_STATUS_TYPE_FREQ_OFFSET", "FRONTEND_STATUS_TYPE_HIERARCHY", "FRONTEND_STATUS_TYPE_RF_LOCK", "FRONTEND_STATUS_TYPE_ATSC3_PLP_INFO", "FRONTEND_STATUS_TYPE_BERS", "FRONTEND_STATUS_TYPE_CODERATES", "FRONTEND_STATUS_TYPE_BANDWIDTH", "FRONTEND_STATUS_TYPE_GUARD_INTERVAL", "FRONTEND_STATUS_TYPE_TRANSMISSION_MODE", "FRONTEND_STATUS_TYPE_UEC", "FRONTEND_STATUS_TYPE_T2_SYSTEM_ID", "FRONTEND_STATUS_TYPE_INTERLEAVINGS", "FRONTEND_STATUS_TYPE_ISDBT_SEGMENTS", "FRONTEND_STATUS_TYPE_TS_DATA_RATES", "FRONTEND_STATUS_TYPE_MODULATIONS_EXT", "FRONTEND_STATUS_TYPE_ROLL_OFF", "FRONTEND_STATUS_TYPE_IS_MISO_ENABLED", "FRONTEND_STATUS_TYPE_IS_LINEAR", "FRONTEND_STATUS_TYPE_IS_SHORT_FRAMES_ENABLED", "FRONTEND_STATUS_TYPE_ISDBT_MODE", "FRONTEND_STATUS_TYPE_ISDBT_PARTIAL_RECEPTION_FLAG", "FRONTEND_STATUS_TYPE_STREAM_IDS", "FRONTEND_STATUS_TYPE_DVBT_CELL_IDS", "FRONTEND_STATUS_TYPE_IPTV_CONTENT_URL", "FRONTEND_STATUS_TYPE_IPTV_PACKETS_LOST", "FRONTEND_STATUS_TYPE_IPTV_PACKETS_RECEIVED", "FRONTEND_STATUS_TYPE_IPTV_WORST_JITTER_MS", "FRONTEND_STATUS_TYPE_IPTV_AVERAGE_JITTER_MS", "FRONTEND_STATUS_TYPE_ATSC3_ALL_PLP_INFO", "mIsDemodLocked", "mSnr", "mBer", "mPer", "mPerBer", "mSignalQuality", "mSignalStrength", "mSymbolRate", "mInnerFec", "mModulation", "mInversion", "mLnbVoltage", "mPlpId", "mIsEwbs", "mAgc", "mIsLnaOn", "mIsLayerErrors", "mMer", "mFreqOffset", "mHierarchy", "mIsRfLocked", "mPlpInfo", "mBers", "mCodeRates", "mBandwidth", "mGuardInterval", "mTransmissionMode", "mUec", "mSystemId", "mInterleaving", "mTsDataRate", "mIsdbtSegment", "mModulationsExt", "mRollOff", "mIsMisoEnabled", "mIsLinear", "mIsShortFrames", "mIsdbtMode", "mIsdbtPartialReceptionFlag", "mStreamIds", "mDvbtCellIds", "mAllPlpInfo", "mIptvContentUrl", "mIptvPacketsLost", "mIptvPacketsReceived", "mIptvWorstJitterMs", "mIptvAverageJitterMs" ]
}