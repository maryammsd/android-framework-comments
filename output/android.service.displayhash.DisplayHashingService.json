{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/displayhash/DisplayHashingService.java",
  "packageName" : "android.service.displayhash",
  "className" : "DisplayHashingService",
  "comment" : "\n * A service that handles generating and verify {@link DisplayHash}.\n *\n * The service will generate a DisplayHash based on arguments passed in. Then later that\n * same DisplayHash can be verified to determine that it was created by the system.\n *\n * @hide\n ",
  "links" : [ "android.view.displayhash.DisplayHash" ],
  "variables" : [ {
    "name" : "EXTRA_VERIFIED_DISPLAY_HASH",
    "type" : "String",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INTERVAL_BETWEEN_REQUESTS",
    "type" : "String",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} action that must be declared as handled by a service in its manifest\n     * for the system to recognize it as a DisplayHash providing service.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "mWrapper",
    "type" : "DisplayHashingServiceWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGenerateDisplayHash(@NonNull byte[] salt, @NonNull HardwareBuffer buffer, @NonNull Rect bounds, @NonNull String hashAlgorithm, @NonNull DisplayHashResultCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Generates the DisplayHash that can be used to validate that the system generated the\n     * token.\n     *\n     * @param salt          The salt to use when generating the hmac. This should be unique to the\n     *                      caller so the token cannot be verified by any other process.\n     * @param buffer        The buffer for the content to generate the hash for.\n     * @param bounds        The size and position of the content in window space.\n     * @param hashAlgorithm The String for the hashing algorithm to use based values in\n     *                      {@link #getDisplayHashAlgorithms(RemoteCallback)}.\n     * @param callback      The callback to invoke\n     *                      {@link DisplayHashResultCallback#onDisplayHashResult(DisplayHash)}\n     *                      if successfully generated a DisplayHash or {@link\n     *                      DisplayHashResultCallback#onDisplayHashError(int)} if failed.\n     ",
    "links" : [ "android.view.displayhash.DisplayHashResultCallback#onDisplayHashResult(DisplayHash)", "#getDisplayHashAlgorithms(RemoteCallback)", "android.view.displayhash.DisplayHashResultCallback#onDisplayHashError(int)" ]
  }, {
    "name" : "public abstract Map<String, DisplayHashParams> onGetDisplayHashAlgorithms()",
    "returnType" : "Map<String, DisplayHashParams>",
    "comment" : "\n     * Returns a map of supported algorithms and their {@link DisplayHashParams}\n     ",
    "links" : [ "android.service.displayhash.DisplayHashParams" ]
  }, {
    "name" : "public abstract VerifiedDisplayHash onVerifyDisplayHash(@NonNull byte[] salt, @NonNull DisplayHash displayHash)",
    "returnType" : "VerifiedDisplayHash",
    "comment" : "\n     * Call to verify that the DisplayHash passed in was generated by the system.\n     *\n     * @param salt        The salt value to use when verifying the hmac. This should be the\n     *                    same value that was passed to\n     *                    {@link #onGenerateDisplayHash(byte[],\n     *                    HardwareBuffer, Rect, String, DisplayHashResultCallback)} to\n     *                    generate the token.\n     * @param displayHash The token to verify that it was generated by the system.\n     * @return a {@link VerifiedDisplayHash} if the provided display hash was originally generated\n     * by the system or null if the system did not generate the display hash.\n     ",
    "links" : [ "android.view.displayhash.VerifiedDisplayHash", "#onGenerateDisplayHash(byte" ]
  }, {
    "name" : "private void verifyDisplayHash(byte[] salt, DisplayHash displayHash, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getDisplayHashAlgorithms(RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int onGetIntervalBetweenRequestsMillis()",
    "returnType" : "int",
    "comment" : "\n     * Call to get the interval required between display hash requests. Requests made faster than\n     * this will be throttled.\n     *\n     * @return the interval value required between requests.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getDurationBetweenRequestsMillis(RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public abstract void onGenerateDisplayHash(@NonNull byte[] salt, @NonNull HardwareBuffer buffer, @NonNull Rect bounds, @NonNull String hashAlgorithm, @NonNull DisplayHashResultCallback callback)", "public abstract Map<String, DisplayHashParams> onGetDisplayHashAlgorithms()", "public abstract VerifiedDisplayHash onVerifyDisplayHash(@NonNull byte[] salt, @NonNull DisplayHash displayHash)", "private void verifyDisplayHash(byte[] salt, DisplayHash displayHash, RemoteCallback callback)", "private void getDisplayHashAlgorithms(RemoteCallback callback)", "public abstract int onGetIntervalBetweenRequestsMillis()", "private void getDurationBetweenRequestsMillis(RemoteCallback callback)" ],
  "variableNames" : [ "EXTRA_VERIFIED_DISPLAY_HASH", "EXTRA_INTERVAL_BETWEEN_REQUESTS", "SERVICE_INTERFACE", "mWrapper", "mHandler" ]
}