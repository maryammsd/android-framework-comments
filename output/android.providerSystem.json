{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/Settings.java",
  "packageName" : "android.provider",
  "className" : "System",
  "comment" : "\n     * System settings, containing miscellaneous system preferences.  This\n     * table holds simple name/value pairs.  There are convenience\n     * functions for accessing individual settings entries.\n     ",
  "variables" : [ {
    "name" : "DEFAULT_FONT_SCALE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for this table\n         ",
    "links" : [ ]
  }, {
    "name" : "sProviderHolder",
    "type" : "ContentProviderHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNameValueCache",
    "type" : "NameValueCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MOVED_TO_SECURE",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MOVED_TO_GLOBAL",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MOVED_TO_SECURE_THEN_GLOBAL",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STAY_ON_WHILE_PLUGGED_IN",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#STAY_ON_WHILE_PLUGGED_IN} instead\n         ",
    "links" : [ "android.provider.Settings.Global#STAY_ON_WHILE_PLUGGED_IN" ]
  }, {
    "name" : "END_BUTTON_BEHAVIOR",
    "type" : "String",
    "comment" : "\n         * What happens when the user presses the end call button if they're not\n         * on a call.<br/>\n         * <b>Values:</b><br/>\n         * 0 - The end button does nothing.<br/>\n         * 1 - The end button goes to the home screen.<br/>\n         * 2 - The end button puts the device to sleep and locks the keyguard.<br/>\n         * 3 - The end button goes to the home screen.  If the user is already on the\n         * home screen, it puts the device to sleep.\n         ",
    "links" : [ ]
  }, {
    "name" : "END_BUTTON_BEHAVIOR_HOME",
    "type" : "int",
    "comment" : "\n         * END_BUTTON_BEHAVIOR value for \"go home\".\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "END_BUTTON_BEHAVIOR_SLEEP",
    "type" : "int",
    "comment" : "\n         * END_BUTTON_BEHAVIOR value for \"go to sleep\".\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "END_BUTTON_BEHAVIOR_DEFAULT",
    "type" : "int",
    "comment" : "\n         * END_BUTTON_BEHAVIOR default value.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ADVANCED_SETTINGS",
    "type" : "String",
    "comment" : "\n         * Is advanced settings mode turned on. 0 == no, 1 == yes\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ADVANCED_SETTINGS_DEFAULT",
    "type" : "int",
    "comment" : "\n         * ADVANCED_SETTINGS default value.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AIRPLANE_MODE_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#AIRPLANE_MODE_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#AIRPLANE_MODE_ON" ]
  }, {
    "name" : "RADIO_BLUETOOTH",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#RADIO_BLUETOOTH} instead\n         ",
    "links" : [ "android.provider.Settings.Global#RADIO_BLUETOOTH" ]
  }, {
    "name" : "RADIO_WIFI",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#RADIO_WIFI} instead\n         ",
    "links" : [ "android.provider.Settings.Global#RADIO_WIFI" ]
  }, {
    "name" : "RADIO_WIMAX",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#RADIO_WIMAX} instead\n         * {@hide}\n         ",
    "links" : [ "android.provider.Settings.Global#RADIO_WIMAX" ]
  }, {
    "name" : "RADIO_CELL",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#RADIO_CELL} instead\n         ",
    "links" : [ "android.provider.Settings.Global#RADIO_CELL" ]
  }, {
    "name" : "RADIO_NFC",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#RADIO_NFC} instead\n         ",
    "links" : [ "android.provider.Settings.Global#RADIO_NFC" ]
  }, {
    "name" : "AIRPLANE_MODE_RADIOS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#AIRPLANE_MODE_RADIOS} instead\n         ",
    "links" : [ "android.provider.Settings.Global#AIRPLANE_MODE_RADIOS" ]
  }, {
    "name" : "AIRPLANE_MODE_TOGGLEABLE_RADIOS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#AIRPLANE_MODE_TOGGLEABLE_RADIOS} instead\n         *\n         * {@hide}\n         ",
    "links" : [ "android.provider.Settings.Global#AIRPLANE_MODE_TOGGLEABLE_RADIOS" ]
  }, {
    "name" : "WIFI_SLEEP_POLICY",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_SLEEP_POLICY} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_SLEEP_POLICY" ]
  }, {
    "name" : "WIFI_SLEEP_POLICY_DEFAULT",
    "type" : "int",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_SLEEP_POLICY_DEFAULT} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_SLEEP_POLICY_DEFAULT" ]
  }, {
    "name" : "WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED",
    "type" : "int",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED" ]
  }, {
    "name" : "WIFI_SLEEP_POLICY_NEVER",
    "type" : "int",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_SLEEP_POLICY_NEVER} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_SLEEP_POLICY_NEVER" ]
  }, {
    "name" : "MODE_RINGER",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#MODE_RINGER} instead\n         ",
    "links" : [ "android.provider.Settings.Global#MODE_RINGER" ]
  }, {
    "name" : "WIFI_USE_STATIC_IP",
    "type" : "String",
    "comment" : "\n         * Whether to use static IP and other static network attributes.\n         * <p>\n         * Set to 1 for true and 0 for false.\n         *\n         * @deprecated Use {@link WifiManager} instead\n         ",
    "links" : [ "WifiManager" ]
  }, {
    "name" : "WIFI_STATIC_IP",
    "type" : "String",
    "comment" : "\n         * The static IP address.\n         * <p>\n         * Example: \"192.168.1.51\"\n         *\n         * @deprecated Use {@link WifiManager} instead\n         ",
    "links" : [ "WifiManager" ]
  }, {
    "name" : "WIFI_STATIC_GATEWAY",
    "type" : "String",
    "comment" : "\n         * If using static IP, the gateway's IP address.\n         * <p>\n         * Example: \"192.168.1.1\"\n         *\n         * @deprecated Use {@link WifiManager} instead\n         ",
    "links" : [ "WifiManager" ]
  }, {
    "name" : "WIFI_STATIC_NETMASK",
    "type" : "String",
    "comment" : "\n         * If using static IP, the net mask.\n         * <p>\n         * Example: \"255.255.255.0\"\n         *\n         * @deprecated Use {@link WifiManager} instead\n         ",
    "links" : [ "WifiManager" ]
  }, {
    "name" : "WIFI_STATIC_DNS1",
    "type" : "String",
    "comment" : "\n         * If using static IP, the primary DNS's IP address.\n         * <p>\n         * Example: \"192.168.1.1\"\n         *\n         * @deprecated Use {@link WifiManager} instead\n         ",
    "links" : [ "WifiManager" ]
  }, {
    "name" : "WIFI_STATIC_DNS2",
    "type" : "String",
    "comment" : "\n         * If using static IP, the secondary DNS's IP address.\n         * <p>\n         * Example: \"192.168.1.2\"\n         *\n         * @deprecated Use {@link WifiManager} instead\n         ",
    "links" : [ "WifiManager" ]
  }, {
    "name" : "BLUETOOTH_DISCOVERABILITY",
    "type" : "String",
    "comment" : "\n         * Determines whether remote devices may discover and/or connect to\n         * this device.\n         * <P>Type: INT</P>\n         * 2 -- discoverable and connectable\n         * 1 -- connectable but not discoverable\n         * 0 -- neither connectable nor discoverable\n         ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_DISCOVERABILITY_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * Bluetooth discoverability timeout.  If this value is nonzero, then\n         * Bluetooth becomes discoverable for a certain number of seconds,\n         * after which is becomes simply connectable.  The value is in seconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_PATTERN_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#LOCK_PATTERN_ENABLED}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#LOCK_PATTERN_ENABLED" ]
  }, {
    "name" : "LOCK_PATTERN_VISIBLE",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#LOCK_PATTERN_VISIBLE}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#LOCK_PATTERN_VISIBLE" ]
  }, {
    "name" : "LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Secure#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED" ]
  }, {
    "name" : "NEXT_ALARM_FORMATTED",
    "type" : "String",
    "comment" : "\n         * A formatted string of the next alarm that is set, or the empty string\n         * if there is no alarm set.\n         *\n         * @deprecated Use {@link android.app.AlarmManager#getNextAlarmClock()}.\n         ",
    "links" : [ "android.app.AlarmManager#getNextAlarmClock" ]
  }, {
    "name" : "FONT_SCALE",
    "type" : "String",
    "comment" : "\n         * Scaling factor for fonts, float.\n         ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_LOCALES",
    "type" : "String",
    "comment" : "\n         * The serialized system locale value.\n         *\n         * Do not use this value directory.\n         * To get system locale, use {@link LocaleList#getDefault} instead.\n         * To update system locale, use {@link com.android.internal.app.LocalePicker#updateLocales}\n         * instead.\n         * @hide\n         ",
    "links" : [ "LocaleList#getDefault", "com.android.internal.app.LocalePicker#updateLocales" ]
  }, {
    "name" : "DEBUG_APP",
    "type" : "String",
    "comment" : "\n         * Name of an application package to be debugged.\n         *\n         * @deprecated Use {@link Global#DEBUG_APP} instead\n         ",
    "links" : [ "Global#DEBUG_APP" ]
  }, {
    "name" : "WAIT_FOR_DEBUGGER",
    "type" : "String",
    "comment" : "\n         * If 1, when launching DEBUG_APP it will wait for the debugger before\n         * starting user code.  If 0, it will run normally.\n         *\n         * @deprecated Use {@link Global#WAIT_FOR_DEBUGGER} instead\n         ",
    "links" : [ "Global#WAIT_FOR_DEBUGGER" ]
  }, {
    "name" : "DIM_SCREEN",
    "type" : "String",
    "comment" : "\n         * Whether or not to dim the screen. 0=no  1=yes\n         * @deprecated This setting is no longer used.\n         ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_COLOR_MODE",
    "type" : "String",
    "comment" : "\n         * The display color mode.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MIN_REFRESH_RATE",
    "type" : "String",
    "comment" : "\n         * The user selected min refresh rate in frames per second.\n         *\n         * If this isn't set, 0 will be used.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PEAK_REFRESH_RATE",
    "type" : "String",
    "comment" : "\n         * The user selected peak refresh rate in frames per second.\n         *\n         * If this isn't set, the system falls back to a device specific default.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_OFF_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * The amount of time in milliseconds before the device goes to sleep or begins\n         * to dream after a period of inactivity.  This value is also known as the\n         * user activity timeout period since the screen isn't necessarily turned off\n         * when it expires.\n         *\n         * <p>\n         * This value is bounded by maximum timeout set by\n         * {@link android.app.admin.DevicePolicyManager#setMaximumTimeToLock(ComponentName, long)}.\n         ",
    "links" : [ "android.app.admin.DevicePolicyManager#setMaximumTimeToLock" ]
  }, {
    "name" : "SCREEN_BRIGHTNESS",
    "type" : "String",
    "comment" : "\n         * The screen backlight brightness between 0 and 255.\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_FOR_VR",
    "type" : "String",
    "comment" : "\n         * The screen backlight brightness between 0 and 255.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_FOR_VR_FLOAT",
    "type" : "String",
    "comment" : "\n         * The screen backlight brightness between 0.0f and 1.0f.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_FLOAT",
    "type" : "String",
    "comment" : "\n         * The screen backlight brightness between 0.0f and 1.0f.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_MODE",
    "type" : "String",
    "comment" : "\n         * Control whether to enable automatic brightness mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_AUTO_BRIGHTNESS_ADJ",
    "type" : "String",
    "comment" : "\n         * Adjustment to auto-brightness to make it generally more (>0.0 <1.0)\n         * or less (<0.0 >-1.0) bright.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_MODE_MANUAL",
    "type" : "int",
    "comment" : "\n         * SCREEN_BRIGHTNESS_MODE value for manual mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_MODE_AUTOMATIC",
    "type" : "int",
    "comment" : "\n         * SCREEN_BRIGHTNESS_MODE value for automatic mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "ADAPTIVE_SLEEP",
    "type" : "String",
    "comment" : "\n         * Control whether to enable adaptive sleep mode.\n         * @deprecated Use {@link android.provider.Settings.Secure#ADAPTIVE_SLEEP} instead.\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Secure#ADAPTIVE_SLEEP" ]
  }, {
    "name" : "SHOW_PROCESSES",
    "type" : "String",
    "comment" : "\n         * Control whether the process CPU usage meter should be shown.\n         *\n         * @deprecated This functionality is no longer available as of\n         * {@link android.os.Build.VERSION_CODES#N_MR1}.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#N_MR1" ]
  }, {
    "name" : "ALWAYS_FINISH_ACTIVITIES",
    "type" : "String",
    "comment" : "\n         * If 1, the activity manager will aggressively finish activities and\n         * processes as soon as they are no longer needed.  If 0, the normal\n         * extended lifetime is used.\n         *\n         * @deprecated Use {@link Global#ALWAYS_FINISH_ACTIVITIES} instead\n         ",
    "links" : [ "Global#ALWAYS_FINISH_ACTIVITIES" ]
  }, {
    "name" : "MODE_RINGER_STREAMS_AFFECTED",
    "type" : "String",
    "comment" : "\n         * Determines which streams are affected by ringer and zen mode changes. The\n         * stream type's bit should be set to 1 if it should be muted when going\n         * into an inaudible ringer mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "MUTE_STREAMS_AFFECTED",
    "type" : "String",
    "comment" : "\n          * Determines which streams are affected by mute. The\n          * stream type's bit should be set to 1 if it should be muted when a mute request\n          * is received.\n          ",
    "links" : [ ]
  }, {
    "name" : "VIBRATE_ON",
    "type" : "String",
    "comment" : "\n         * Whether vibrate is on for different events. This is used internally,\n         * changing this value will not change the vibrate. See AudioManager.\n         ",
    "links" : [ ]
  }, {
    "name" : "VIBRATE_INPUT_DEVICES",
    "type" : "String",
    "comment" : "\n         * If 1, redirects the system vibrator to all currently attached input devices\n         * that support vibration.  If there are no such input devices, then the system\n         * vibrator is used instead.\n         * If 0, does not register the system vibrator.\n         *\n         * This setting is mainly intended to provide a compatibility mechanism for\n         * applications that only know about the system vibrator and do not use the\n         * input device vibrator API.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_VIBRATION_INTENSITY",
    "type" : "String",
    "comment" : "\n         * The intensity of notification vibrations, if configurable.\n         *\n         * Not all devices are capable of changing their vibration intensity; on these devices\n         * there will likely be no difference between the various vibration intensities except for\n         * intensity 0 (off) and the rest.\n         *\n         * <b>Values:</b><br/>\n         * 0 - Vibration is disabled<br/>\n         * 1 - Weak vibrations<br/>\n         * 2 - Medium vibrations<br/>\n         * 3 - Strong vibrations\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "RING_VIBRATION_INTENSITY",
    "type" : "String",
    "comment" : "\n         * The intensity of ringtone vibrations, if configurable.\n         *\n         * Not all devices are capable of changing their vibration intensity; on these devices\n         * there will likely be no difference between the various vibration intensities except for\n         * intensity 0 (off) and the rest.\n         *\n         * <b>Values:</b><br/>\n         * 0 - Vibration is disabled<br/>\n         * 1 - Weak vibrations<br/>\n         * 2 - Medium vibrations<br/>\n         * 3 - Strong vibrations\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "HAPTIC_FEEDBACK_INTENSITY",
    "type" : "String",
    "comment" : "\n         * The intensity of haptic feedback vibrations, if configurable.\n         *\n         * Not all devices are capable of changing their feedback intensity; on these devices\n         * there will likely be no difference between the various vibration intensities except for\n         * intensity 0 (off) and the rest.\n         *\n         * <b>Values:</b><br/>\n         * 0 - Vibration is disabled<br/>\n         * 1 - Weak vibrations<br/>\n         * 2 - Medium vibrations<br/>\n         * 3 - Strong vibrations\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_RING",
    "type" : "String",
    "comment" : "\n         * Ringer volume. This is used internally, changing this value will not\n         * change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_SYSTEM",
    "type" : "String",
    "comment" : "\n         * System/notifications volume. This is used internally, changing this\n         * value will not change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_VOICE",
    "type" : "String",
    "comment" : "\n         * Voice call volume. This is used internally, changing this value will\n         * not change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_MUSIC",
    "type" : "String",
    "comment" : "\n         * Music/media/gaming volume. This is used internally, changing this\n         * value will not change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_ALARM",
    "type" : "String",
    "comment" : "\n         * Alarm volume. This is used internally, changing this\n         * value will not change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_NOTIFICATION",
    "type" : "String",
    "comment" : "\n         * Notification volume. This is used internally, changing this\n         * value will not change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_BLUETOOTH_SCO",
    "type" : "String",
    "comment" : "\n         * Bluetooth Headset volume. This is used internally, changing this value will\n         * not change the volume. See AudioManager.\n         *\n         * @removed Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_ACCESSIBILITY",
    "type" : "String",
    "comment" : "\n         * @hide\n         * Acessibility volume. This is used internally, changing this\n         * value will not change the volume.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_ASSISTANT",
    "type" : "String",
    "comment" : "\n         * @hide\n         * Volume index for virtual assistant.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_MASTER",
    "type" : "String",
    "comment" : "\n         * Master volume (float in the range 0.0f to 1.0f).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MASTER_MONO",
    "type" : "String",
    "comment" : "\n         * Master mono (int 1 = mono, 0 = normal).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MASTER_BALANCE",
    "type" : "String",
    "comment" : "\n         * Master balance (float -1.f = 100% left, 0.f = dead center, 1.f = 100% right).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATIONS_USE_RING_VOLUME",
    "type" : "String",
    "comment" : "\n         * Whether the notifications should use the ring volume (value of 1) or\n         * a separate notification volume (value of 0). In most cases, users\n         * will have this enabled so the notification and ringer volumes will be\n         * the same. However, power users can disable this and use the separate\n         * notification volume control.\n         * <p>\n         * Note: This is a one-off setting that will be removed in the future\n         * when there is profile support. For this reason, it is kept hidden\n         * from the public APIs.\n         *\n         * @hide\n         * @deprecated\n         ",
    "links" : [ ]
  }, {
    "name" : "VIBRATE_IN_SILENT",
    "type" : "String",
    "comment" : "\n         * Whether silent mode should allow vibration feedback. This is used\n         * internally in AudioService and the Sound settings activity to\n         * coordinate decoupling of vibrate and silent modes. This setting\n         * will likely be removed in a future release with support for\n         * audio/vibe feedback profiles.\n         *\n         * Not used anymore. On devices with vibrator, the user explicitly selects\n         * silent or vibrate mode.\n         * Kept for use by legacy database upgrade code in DatabaseHelper.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_SETTINGS",
    "type" : "String[]",
    "comment" : "\n         * The mapping of stream type (integer) to its setting.\n         *\n         * @removed  Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_SETTINGS_INT",
    "type" : "String[]",
    "comment" : "\n         * @hide\n         * The mapping of stream type (integer) to its setting.\n         * Unlike the VOLUME_SETTINGS array, this one contains as many entries as\n         * AudioSystem.NUM_STREAM_TYPES, and has empty strings for stream types whose volumes\n         * are never persisted.\n         ",
    "links" : [ ]
  }, {
    "name" : "APPEND_FOR_LAST_AUDIBLE",
    "type" : "String",
    "comment" : "\n         * Appended to various volume related settings to record the previous\n         * values before they the settings were affected by a silent/vibrate\n         * ringer mode change.\n         *\n         * @removed  Not used by anything since API 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "RINGTONE",
    "type" : "String",
    "comment" : "\n         * Persistent store for the system-wide default ringtone URI.\n         * <p>\n         * If you need to play the default ringtone at any given time, it is recommended\n         * you give {@link #DEFAULT_RINGTONE_URI} to the media player.  It will resolve\n         * to the set default ringtone at the time of playing.\n         *\n         * @see #DEFAULT_RINGTONE_URI\n         ",
    "links" : [ "#DEFAULT_RINGTONE_URI" ]
  }, {
    "name" : "DEFAULT_RINGTONE_URI",
    "type" : "Uri",
    "comment" : "\n         * A {@link Uri} that will point to the current default ringtone at any\n         * given time.\n         * <p>\n         * If the current default ringtone is in the DRM provider and the caller\n         * does not have permission, the exception will be a\n         * FileNotFoundException.\n         ",
    "links" : [ "Uri" ]
  }, {
    "name" : "RINGTONE_CACHE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "RINGTONE_CACHE_URI",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_SOUND",
    "type" : "String",
    "comment" : "\n         * Persistent store for the system-wide default notification sound.\n         *\n         * @see #RINGTONE\n         * @see #DEFAULT_NOTIFICATION_URI\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_NOTIFICATION_URI",
    "type" : "Uri",
    "comment" : "\n         * A {@link Uri} that will point to the current default notification\n         * sound at any given time.\n         *\n         * @see #DEFAULT_RINGTONE_URI\n         ",
    "links" : [ "Uri" ]
  }, {
    "name" : "NOTIFICATION_SOUND_CACHE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_SOUND_CACHE_URI",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ALARM_ALERT",
    "type" : "String",
    "comment" : "\n         * Persistent store for the system-wide default alarm alert.\n         *\n         * @see #RINGTONE\n         * @see #DEFAULT_ALARM_ALERT_URI\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALARM_ALERT_URI",
    "type" : "Uri",
    "comment" : "\n         * A {@link Uri} that will point to the current default alarm alert at\n         * any given time.\n         *\n         * @see #DEFAULT_ALARM_ALERT_URI\n         ",
    "links" : [ "Uri" ]
  }, {
    "name" : "ALARM_ALERT_CACHE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ALARM_ALERT_CACHE_URI",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_BUTTON_RECEIVER",
    "type" : "String",
    "comment" : "\n         * Persistent store for the system default media button event receiver.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TEXT_AUTO_REPLACE",
    "type" : "String",
    "comment" : "\n         * Setting to enable Auto Replace (AutoText) in text editors. 1 = On, 0 = Off\n         ",
    "links" : [ ]
  }, {
    "name" : "TEXT_AUTO_CAPS",
    "type" : "String",
    "comment" : "\n         * Setting to enable Auto Caps in text editors. 1 = On, 0 = Off\n         ",
    "links" : [ ]
  }, {
    "name" : "TEXT_AUTO_PUNCTUATE",
    "type" : "String",
    "comment" : "\n         * Setting to enable Auto Punctuate in text editors. 1 = On, 0 = Off. This\n         * feature converts two spaces to a \".\" and space.\n         ",
    "links" : [ ]
  }, {
    "name" : "TEXT_SHOW_PASSWORD",
    "type" : "String",
    "comment" : "\n         * Setting to showing password characters in text editors. 1 = On, 0 = Off\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_GTALK_SERVICE_STATUS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WALLPAPER_ACTIVITY",
    "type" : "String",
    "comment" : "\n         * Name of activity to use for wallpaper on the home screen.\n         *\n         * @deprecated Use {@link WallpaperManager} instead.\n         ",
    "links" : [ "WallpaperManager" ]
  }, {
    "name" : "AUTO_TIME",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#AUTO_TIME}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Global#AUTO_TIME" ]
  }, {
    "name" : "AUTO_TIME_ZONE",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#AUTO_TIME_ZONE}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Global#AUTO_TIME_ZONE" ]
  }, {
    "name" : "TIME_12_24",
    "type" : "String",
    "comment" : "\n         * Display times as 12 or 24 hours\n         *   12\n         *   24\n         ",
    "links" : [ ]
  }, {
    "name" : "DATE_FORMAT",
    "type" : "String",
    "comment" : "\n         * Date format string\n         *   mm/dd/yyyy\n         *   dd/mm/yyyy\n         *   yyyy/mm/dd\n         ",
    "links" : [ ]
  }, {
    "name" : "SETUP_WIZARD_HAS_RUN",
    "type" : "String",
    "comment" : "\n         * Whether the setup wizard has been run before (on first boot), or if\n         * it still needs to be run.\n         *\n         * nonzero = it has been run in the past\n         * 0 = it has not been run in the past\n         ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_ANIMATION_SCALE",
    "type" : "String",
    "comment" : "\n         * Scaling factor for normal window animations. Setting to 0 will disable window\n         * animations.\n         *\n         * @deprecated Use {@link Global#WINDOW_ANIMATION_SCALE} instead\n         ",
    "links" : [ "Global#WINDOW_ANIMATION_SCALE" ]
  }, {
    "name" : "TRANSITION_ANIMATION_SCALE",
    "type" : "String",
    "comment" : "\n         * Scaling factor for activity transition animations. Setting to 0 will disable window\n         * animations.\n         *\n         * @deprecated Use {@link Global#TRANSITION_ANIMATION_SCALE} instead\n         ",
    "links" : [ "Global#TRANSITION_ANIMATION_SCALE" ]
  }, {
    "name" : "ANIMATOR_DURATION_SCALE",
    "type" : "String",
    "comment" : "\n         * Scaling factor for Animator-based animations. This affects both the start delay and\n         * duration of all such animations. Setting to 0 will cause animations to end immediately.\n         * The default value is 1.\n         *\n         * @deprecated Use {@link Global#ANIMATOR_DURATION_SCALE} instead\n         ",
    "links" : [ "Global#ANIMATOR_DURATION_SCALE" ]
  }, {
    "name" : "ACCELEROMETER_ROTATION",
    "type" : "String",
    "comment" : "\n         * Control whether the accelerometer will be used to change screen\n         * orientation.  If 0, it will not be used unless explicitly requested\n         * by the application; if 1, it will be used by default unless explicitly\n         * disabled by the application.\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_ROTATION",
    "type" : "String",
    "comment" : "\n         * Default screen rotation when no other policy applies.\n         * When {@link #ACCELEROMETER_ROTATION} is zero and no on-screen Activity expresses a\n         * preference, this rotation value will be used. Must be one of the\n         * {@link android.view.Surface#ROTATION_0 Surface rotation constants}.\n         *\n         * @see Display#getRotation\n         ",
    "links" : [ "#ACCELEROMETER_ROTATION", "android.view.Surface#ROTATION_0" ]
  }, {
    "name" : "HIDE_ROTATION_LOCK_TOGGLE_FOR_ACCESSIBILITY",
    "type" : "String",
    "comment" : "\n         * Control whether the rotation lock toggle in the System UI should be hidden.\n         * Typically this is done for accessibility purposes to make it harder for\n         * the user to accidentally toggle the rotation lock while the display rotation\n         * has been locked for accessibility.\n         *\n         * If 0, then rotation lock toggle is not hidden for accessibility (although it may be\n         * unavailable for other reasons).  If 1, then the rotation lock toggle is hidden.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VIBRATE_WHEN_RINGING",
    "type" : "String",
    "comment" : "\n         * Whether the phone vibrates when it is ringing due to an incoming call. This will\n         * be used by Phone and Setting apps; it shouldn't affect other apps.\n         * The value is boolean (1 or 0).\n         *\n         * Note: this is not same as \"vibrate on ring\", which had been available until ICS.\n         * It was about AudioManager's setting and thus affected all the applications which\n         * relied on the setting, while this is purely about the vibration setting for incoming\n         * calls.\n         ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_ENABLE_ENHANCED_CALL_BLOCKING",
    "type" : "String",
    "comment" : "\n         * When {@code 1}, Telecom enhanced call blocking functionality is enabled.  When\n         * {@code 0}, enhanced call blocking functionality is disabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DTMF_TONE_WHEN_DIALING",
    "type" : "String",
    "comment" : "\n         * Whether the audible DTMF tones are played by the dialer when dialing. The value is\n         * boolean (1 or 0).\n         ",
    "links" : [ ]
  }, {
    "name" : "DTMF_TONE_TYPE_WHEN_DIALING",
    "type" : "String",
    "comment" : "\n         * CDMA only settings\n         * DTMF tone type played by the dialer when dialing.\n         *                 0 = Normal\n         *                 1 = Long\n         ",
    "links" : [ ]
  }, {
    "name" : "HEARING_AID",
    "type" : "String",
    "comment" : "\n         * Whether the hearing aid is enabled. The value is\n         * boolean (1 or 0).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TTY_MODE",
    "type" : "String",
    "comment" : "\n         * CDMA only settings\n         * TTY Mode\n         * 0 = OFF\n         * 1 = FULL\n         * 2 = VCO\n         * 3 = HCO\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SOUND_EFFECTS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the sounds effects (key clicks, lid open ...) are enabled. The value is\n         * boolean (1 or 0).\n         ",
    "links" : [ ]
  }, {
    "name" : "HAPTIC_FEEDBACK_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether haptic feedback (Vibrate on tap) is enabled. The value is\n         * boolean (1 or 0).\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_WEB_SUGGESTIONS",
    "type" : "String",
    "comment" : "\n         * @deprecated Each application that shows web suggestions should have its own\n         * setting for this.\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_LIGHT_PULSE",
    "type" : "String",
    "comment" : "\n         * Whether the notification LED should repeatedly flash when a notification is\n         * pending. The value is boolean (1 or 0).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "POINTER_LOCATION",
    "type" : "String",
    "comment" : "\n         * Show pointer location on screen?\n         * 0 = no\n         * 1 = yes\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_TOUCHES",
    "type" : "String",
    "comment" : "\n         * Show touch positions on screen?\n         * 0 = no\n         * 1 = yes\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_ORIENTATION_LISTENER_LOG",
    "type" : "String",
    "comment" : "\n         * Log raw orientation data from\n         * {@link com.android.server.policy.WindowOrientationListener} for use with the\n         * orientationplot.py tool.\n         * 0 = no\n         * 1 = yes\n         * @hide\n         ",
    "links" : [ "com.android.server.policy.WindowOrientationListener" ]
  }, {
    "name" : "POWER_SOUNDS_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#POWER_SOUNDS_ENABLED}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#POWER_SOUNDS_ENABLED" ]
  }, {
    "name" : "DOCK_SOUNDS_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DOCK_SOUNDS_ENABLED}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#DOCK_SOUNDS_ENABLED" ]
  }, {
    "name" : "LOCKSCREEN_SOUNDS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether to play sounds when the keyguard is shown and dismissed.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCKSCREEN_DISABLED",
    "type" : "String",
    "comment" : "\n         * Whether the lockscreen should be completely disabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOW_BATTERY_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#LOW_BATTERY_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#LOW_BATTERY_SOUND" ]
  }, {
    "name" : "DESK_DOCK_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DESK_DOCK_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#DESK_DOCK_SOUND" ]
  }, {
    "name" : "DESK_UNDOCK_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DESK_UNDOCK_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#DESK_UNDOCK_SOUND" ]
  }, {
    "name" : "CAR_DOCK_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#CAR_DOCK_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#CAR_DOCK_SOUND" ]
  }, {
    "name" : "CAR_UNDOCK_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#CAR_UNDOCK_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#CAR_UNDOCK_SOUND" ]
  }, {
    "name" : "LOCK_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#LOCK_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#LOCK_SOUND" ]
  }, {
    "name" : "UNLOCK_SOUND",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#UNLOCK_SOUND}\n         * instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#UNLOCK_SOUND" ]
  }, {
    "name" : "SIP_RECEIVE_CALLS",
    "type" : "String",
    "comment" : "\n         * Receive incoming SIP calls?\n         * 0 = no\n         * 1 = yes\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SIP_CALL_OPTIONS",
    "type" : "String",
    "comment" : "\n         * Call Preference String.\n         * \"SIP_ALWAYS\" : Always use SIP with network access\n         * \"SIP_ADDRESS_ONLY\" : Only if destination is a SIP address\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SIP_ALWAYS",
    "type" : "String",
    "comment" : "\n         * One of the sip call options: Always use SIP with network access.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SIP_ADDRESS_ONLY",
    "type" : "String",
    "comment" : "\n         * One of the sip call options: Only if destination is a SIP address.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SIP_ASK_ME_EACH_TIME",
    "type" : "String",
    "comment" : "\n         * @deprecated Use SIP_ALWAYS or SIP_ADDRESS_ONLY instead.  Formerly used to indicate that\n         * the user should be prompted each time a call is made whether it should be placed using\n         * SIP.  The {@link com.android.providers.settings.DatabaseHelper} replaces this with\n         * SIP_ADDRESS_ONLY.\n         * @hide\n         ",
    "links" : [ "com.android.providers.settings.DatabaseHelper" ]
  }, {
    "name" : "POINTER_SPEED",
    "type" : "String",
    "comment" : "\n         * Pointer speed setting.\n         * This is an integer value in a range between -7 and +7, so there are 15 possible values.\n         *   -7 = slowest\n         *    0 = default speed\n         *   +7 = fastest\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_TO_APP_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether lock-to-app will be triggered by long-press on recents.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "EGG_MODE",
    "type" : "String",
    "comment" : "\n         * I am the lolrus.\n         * <p>\n         * Nonzero values indicate that the user has a bukkit.\n         * Backward-compatible with <code>PrefGetPreference(prefAllowEasterEggs)</code>.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_BATTERY_PERCENT",
    "type" : "String",
    "comment" : "\n         * Setting to determine whether or not to show the battery percentage in the status bar.\n         *    0 - Don't show percentage\n         *    1 - Show percentage\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MULTI_AUDIO_FOCUS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not to enable multiple audio focus.\n         * When enabled, requires more management by user over application playback activity,\n         * for instance pausing media apps when another starts.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LEGACY_RESTORE_SETTINGS",
    "type" : "String[]",
    "comment" : "\n         * Keys we no longer back up under the current schema, but want to continue to\n         * process when restoring historical backup datasets.\n         *\n         * All settings in {@link LEGACY_RESTORE_SETTINGS} array *must* have a non-null validator,\n         * otherwise they won't be restored.\n         *\n         * @hide\n         ",
    "links" : [ "LEGACY_RESTORE_SETTINGS" ]
  }, {
    "name" : "PUBLIC_SETTINGS",
    "type" : "Set<String>",
    "comment" : "\n         * These are all public system settings\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_SETTINGS",
    "type" : "Set<String>",
    "comment" : "\n         * These are all hidden system settings.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CLONE_TO_MANAGED_PROFILE",
    "type" : "Set<String>",
    "comment" : "\n         * These entries are considered common between the personal and the managed profile,\n         * since the managed profile doesn't get to change them.\n         ",
    "links" : [ ]
  }, {
    "name" : "CLONE_FROM_PARENT_ON_VALUE",
    "type" : "Map<String, String>",
    "comment" : "\n         * These entries should be cloned from this profile's parent only if the dependency's\n         * value is true (\"1\")\n         *\n         * Note: the dependencies must be Secure settings\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INSTANT_APP_SETTINGS",
    "type" : "Set<String>",
    "comment" : "\n         * System settings which can be accessed by instant apps.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "WHEN_TO_MAKE_WIFI_CALLS",
    "type" : "String",
    "comment" : "\n         * When to use Wi-Fi calling\n         *\n         * @see android.telephony.TelephonyManager.WifiCallingChoices\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ADB_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#ADB_ENABLED}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Global#ADB_ENABLED" ]
  }, {
    "name" : "ANDROID_ID",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#ANDROID_ID} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#ANDROID_ID" ]
  }, {
    "name" : "BLUETOOTH_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#BLUETOOTH_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#BLUETOOTH_ON" ]
  }, {
    "name" : "DATA_ROAMING",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DATA_ROAMING} instead\n         ",
    "links" : [ "android.provider.Settings.Global#DATA_ROAMING" ]
  }, {
    "name" : "DEVICE_PROVISIONED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DEVICE_PROVISIONED} instead\n         ",
    "links" : [ "android.provider.Settings.Global#DEVICE_PROVISIONED" ]
  }, {
    "name" : "HTTP_PROXY",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#HTTP_PROXY} instead\n         ",
    "links" : [ "android.provider.Settings.Global#HTTP_PROXY" ]
  }, {
    "name" : "INSTALL_NON_MARKET_APPS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#INSTALL_NON_MARKET_APPS} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#INSTALL_NON_MARKET_APPS" ]
  }, {
    "name" : "LOCATION_PROVIDERS_ALLOWED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#LOCATION_PROVIDERS_ALLOWED}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#LOCATION_PROVIDERS_ALLOWED" ]
  }, {
    "name" : "LOGGING_ID",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#LOGGING_ID} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#LOGGING_ID" ]
  }, {
    "name" : "NETWORK_PREFERENCE",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#NETWORK_PREFERENCE} instead\n         ",
    "links" : [ "android.provider.Settings.Global#NETWORK_PREFERENCE" ]
  }, {
    "name" : "PARENTAL_CONTROL_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#PARENTAL_CONTROL_ENABLED}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#PARENTAL_CONTROL_ENABLED" ]
  }, {
    "name" : "PARENTAL_CONTROL_LAST_UPDATE",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#PARENTAL_CONTROL_LAST_UPDATE}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#PARENTAL_CONTROL_LAST_UPDATE" ]
  }, {
    "name" : "PARENTAL_CONTROL_REDIRECT_URL",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#PARENTAL_CONTROL_REDIRECT_URL}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#PARENTAL_CONTROL_REDIRECT_URL" ]
  }, {
    "name" : "SETTINGS_CLASSNAME",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#SETTINGS_CLASSNAME} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#SETTINGS_CLASSNAME" ]
  }, {
    "name" : "USB_MASS_STORAGE_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#USB_MASS_STORAGE_ENABLED} instead\n         ",
    "links" : [ "android.provider.Settings.Global#USB_MASS_STORAGE_ENABLED" ]
  }, {
    "name" : "USE_GOOGLE_MAIL",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#USE_GOOGLE_MAIL} instead\n         ",
    "links" : [ "android.provider.Settings.Global#USE_GOOGLE_MAIL" ]
  }, {
    "name" : "WIFI_MAX_DHCP_RETRY_COUNT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Global#WIFI_MAX_DHCP_RETRY_COUNT} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_MAX_DHCP_RETRY_COUNT" ]
  }, {
    "name" : "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Global#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS" ]
  }, {
    "name" : "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON" ]
  }, {
    "name" : "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY" ]
  }, {
    "name" : "WIFI_NUM_OPEN_NETWORKS_KEPT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_NUM_OPEN_NETWORKS_KEPT}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_NUM_OPEN_NETWORKS_KEPT" ]
  }, {
    "name" : "WIFI_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_ON" ]
  }, {
    "name" : "WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Secure#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE" ]
  }, {
    "name" : "WIFI_WATCHDOG_AP_COUNT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#WIFI_WATCHDOG_AP_COUNT} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_AP_COUNT" ]
  }, {
    "name" : "WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Secure#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS" ]
  }, {
    "name" : "WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Secure#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED" ]
  }, {
    "name" : "WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Secure#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS" ]
  }, {
    "name" : "WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Secure#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT" ]
  }, {
    "name" : "WIFI_WATCHDOG_MAX_AP_CHECKS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#WIFI_WATCHDOG_MAX_AP_CHECKS}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_MAX_AP_CHECKS" ]
  }, {
    "name" : "WIFI_WATCHDOG_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_WATCHDOG_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_WATCHDOG_ON" ]
  }, {
    "name" : "WIFI_WATCHDOG_PING_COUNT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#WIFI_WATCHDOG_PING_COUNT} instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_PING_COUNT" ]
  }, {
    "name" : "WIFI_WATCHDOG_PING_DELAY_MS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#WIFI_WATCHDOG_PING_DELAY_MS}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_PING_DELAY_MS" ]
  }, {
    "name" : "WIFI_WATCHDOG_PING_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Secure#WIFI_WATCHDOG_PING_TIMEOUT_MS}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Secure#WIFI_WATCHDOG_PING_TIMEOUT_MS" ]
  } ],
  "methods" : [ {
    "name" : "public static void getMovedToGlobalSettings(Set<String> outKeySet)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void getMovedToSecureSettings(Set<String> outKeySet)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void getNonLegacyMovedKeys(HashSet<String> outKeySet)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void clearProviderForTest()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getString(ContentResolver resolver, String name)",
    "returnType" : "String",
    "comment" : "\n         * Look up a name in the database.\n         * @param resolver to access the database with\n         * @param name to look up in the table\n         * @return the corresponding value, or null if not present\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String getStringForUser(ContentResolver resolver, String name, int userHandle)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putString(ContentResolver resolver, String name, String value)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database.\n         * @param resolver to access the database with\n         * @param name to store\n         * @param value to associate with the name\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putString(@NonNull ContentResolver resolver, @NonNull String name, @Nullable String value, boolean overrideableByRestore)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database. Values written by this method will be\n         * overridden if a restore happens in the future.\n         *\n         * @param resolver to access the database with\n         * @param name to store\n         * @param value to associate with the name\n         *\n         * @return true if the value was set, false on database errors\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putStringForUser(ContentResolver resolver, String name, String value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static boolean putStringForUser(ContentResolver resolver, String name, String value, int userHandle, boolean overrideableByRestore)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Uri getUriFor(String name)",
    "returnType" : "Uri",
    "comment" : "\n         * Construct the content URI for a particular name/value pair,\n         * useful for monitoring changes with a ContentObserver.\n         * @param name to look up in the table\n         * @return the corresponding content URI, or null if not present\n         ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(ContentResolver cr, String name, int def)",
    "returnType" : "int",
    "comment" : "\n         * Convenience function for retrieving a single system settings value\n         * as an integer.  Note that internally setting values are always\n         * stored as strings; this function converts the string to an integer\n         * for you.  The default value will be returned if the setting is\n         * not defined or not an integer.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         * @param def Value to return if the setting is not defined.\n         *\n         * @return The setting's current value, or 'def' if it is not defined\n         * or not a valid integer.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static int getIntForUser(ContentResolver cr, String name, int def, int userHandle)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(ContentResolver cr, String name) throws SettingNotFoundException",
    "returnType" : "int",
    "comment" : "\n         * Convenience function for retrieving a single system settings value\n         * as an integer.  Note that internally setting values are always\n         * stored as strings; this function converts the string to an integer\n         * for you.\n         * <p>\n         * This version does not take a default value.  If the setting has not\n         * been set, or the string value is not a number,\n         * it throws {@link SettingNotFoundException}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         *\n         * @throws SettingNotFoundException Thrown if a setting by the given\n         * name can't be found or the setting value is not an integer.\n         *\n         * @return The setting's current value.\n         ",
    "links" : [ "SettingNotFoundException" ]
  }, {
    "name" : "public static int getIntForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putInt(ContentResolver cr, String name, int value)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function for updating a single settings value as an\n         * integer. This will either create a new entry in the table if the\n         * given name does not exist, or modify the value of the existing row\n         * with that name.  Note that internally setting values are always\n         * stored as strings, so this function converts the given value to a\n         * string before storing it.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to modify.\n         * @param value The new value for the setting.\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putIntForUser(ContentResolver cr, String name, int value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(ContentResolver cr, String name, long def)",
    "returnType" : "long",
    "comment" : "\n         * Convenience function for retrieving a single system settings value\n         * as a {@code long}.  Note that internally setting values are always\n         * stored as strings; this function converts the string to a {@code long}\n         * for you.  The default value will be returned if the setting is\n         * not defined or not a {@code long}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         * @param def Value to return if the setting is not defined.\n         *\n         * @return The setting's current value, or 'def' if it is not defined\n         * or not a valid {@code long}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static long getLongForUser(ContentResolver cr, String name, long def, int userHandle)",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(ContentResolver cr, String name) throws SettingNotFoundException",
    "returnType" : "long",
    "comment" : "\n         * Convenience function for retrieving a single system settings value\n         * as a {@code long}.  Note that internally setting values are always\n         * stored as strings; this function converts the string to a {@code long}\n         * for you.\n         * <p>\n         * This version does not take a default value.  If the setting has not\n         * been set, or the string value is not a number,\n         * it throws {@link SettingNotFoundException}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         *\n         * @return The setting's current value.\n         * @throws SettingNotFoundException Thrown if a setting by the given\n         * name can't be found or the setting value is not an integer.\n         ",
    "links" : [ "SettingNotFoundException" ]
  }, {
    "name" : "public static long getLongForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putLong(ContentResolver cr, String name, long value)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function for updating a single settings value as a long\n         * integer. This will either create a new entry in the table if the\n         * given name does not exist, or modify the value of the existing row\n         * with that name.  Note that internally setting values are always\n         * stored as strings, so this function converts the given value to a\n         * string before storing it.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to modify.\n         * @param value The new value for the setting.\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putLongForUser(ContentResolver cr, String name, long value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(ContentResolver cr, String name, float def)",
    "returnType" : "float",
    "comment" : "\n         * Convenience function for retrieving a single system settings value\n         * as a floating point number.  Note that internally setting values are\n         * always stored as strings; this function converts the string to an\n         * float for you. The default value will be returned if the setting\n         * is not defined or not a valid float.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         * @param def Value to return if the setting is not defined.\n         *\n         * @return The setting's current value, or 'def' if it is not defined\n         * or not a valid float.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloatForUser(ContentResolver cr, String name, float def, int userHandle)",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(ContentResolver cr, String name) throws SettingNotFoundException",
    "returnType" : "float",
    "comment" : "\n         * Convenience function for retrieving a single system settings value\n         * as a float.  Note that internally setting values are always\n         * stored as strings; this function converts the string to a float\n         * for you.\n         * <p>\n         * This version does not take a default value.  If the setting has not\n         * been set, or the string value is not a number,\n         * it throws {@link SettingNotFoundException}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         *\n         * @throws SettingNotFoundException Thrown if a setting by the given\n         * name can't be found or the setting value is not a float.\n         *\n         * @return The setting's current value.\n         ",
    "links" : [ "SettingNotFoundException" ]
  }, {
    "name" : "public static float getFloatForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putFloat(ContentResolver cr, String name, float value)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function for updating a single settings value as a\n         * floating point number. This will either create a new entry in the\n         * table if the given name does not exist, or modify the value of the\n         * existing row with that name.  Note that internally setting values\n         * are always stored as strings, so this function converts the given\n         * value to a string before storing it.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to modify.\n         * @param value The new value for the setting.\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putFloatForUser(ContentResolver cr, String name, float value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void getConfiguration(ContentResolver cr, Configuration outConfig)",
    "returnType" : "void",
    "comment" : "\n         * Convenience function to read all of the current\n         * configuration-related settings into a\n         * {@link Configuration} object.\n         *\n         * @param cr The ContentResolver to access.\n         * @param outConfig Where to place the configuration settings.\n         ",
    "links" : [ "Configuration" ]
  }, {
    "name" : "public static void adjustConfigurationForUser(ContentResolver cr, Configuration outConfig, int userHandle, boolean updateSettingsIfEmpty)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void clearConfiguration(Configuration inoutConfig)",
    "returnType" : "void",
    "comment" : "\n         * @hide Erase the fields in the Configuration that should be applied\n         * by the settings.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putConfiguration(ContentResolver cr, Configuration config)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function to write a batch of configuration-related\n         * settings from a {@link Configuration} object.\n         *\n         * @param cr The ContentResolver to access.\n         * @param config The settings to write.\n         * @return true if the values were set, false on database errors\n         ",
    "links" : [ "Configuration" ]
  }, {
    "name" : "public static boolean putConfigurationForUser(ContentResolver cr, Configuration config, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasInterestingConfigurationChanges(int changes)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getShowGTalkServiceStatus(ContentResolver cr)",
    "returnType" : "boolean",
    "comment" : " @deprecated - Do not use ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getShowGTalkServiceStatusForUser(ContentResolver cr, int userHandle)",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         * @deprecated - Do not use\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void setShowGTalkServiceStatus(ContentResolver cr, boolean flag)",
    "returnType" : "void",
    "comment" : " @deprecated - Do not use ",
    "links" : [ ]
  }, {
    "name" : "public static void setShowGTalkServiceStatusForUser(ContentResolver cr, boolean flag, int userHandle)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         * @deprecated - Do not use\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void getCloneToManagedProfileSettings(Set<String> outKeySet)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void getCloneFromParentOnValueSettings(Map<String, String> outMap)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean canWrite(Context context)",
    "returnType" : "boolean",
    "comment" : "\n         * Checks if the specified app can modify system settings. As of API\n         * level 23, an app cannot modify system settings unless it declares the\n         * {@link android.Manifest.permission#WRITE_SETTINGS}\n         * permission in its manifest, <em>and</em> the user specifically grants\n         * the app this capability. To prompt the user to grant this approval,\n         * the app must send an intent with the action {@link\n         * android.provider.Settings#ACTION_MANAGE_WRITE_SETTINGS}, which causes\n         * the system to display a permission management screen.\n         *\n         * @param context App context.\n         * @return true if the calling app can write to system settings, false otherwise\n         ",
    "links" : [ "android.Manifest.permission#WRITE_SETTINGS" ]
  } ],
  "variableNames" : [ "DEFAULT_FONT_SCALE", "CONTENT_URI", "sProviderHolder", "sNameValueCache", "MOVED_TO_SECURE", "MOVED_TO_GLOBAL", "MOVED_TO_SECURE_THEN_GLOBAL", "STAY_ON_WHILE_PLUGGED_IN", "END_BUTTON_BEHAVIOR", "END_BUTTON_BEHAVIOR_HOME", "END_BUTTON_BEHAVIOR_SLEEP", "END_BUTTON_BEHAVIOR_DEFAULT", "ADVANCED_SETTINGS", "ADVANCED_SETTINGS_DEFAULT", "AIRPLANE_MODE_ON", "RADIO_BLUETOOTH", "RADIO_WIFI", "RADIO_WIMAX", "RADIO_CELL", "RADIO_NFC", "AIRPLANE_MODE_RADIOS", "AIRPLANE_MODE_TOGGLEABLE_RADIOS", "WIFI_SLEEP_POLICY", "WIFI_SLEEP_POLICY_DEFAULT", "WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED", "WIFI_SLEEP_POLICY_NEVER", "MODE_RINGER", "WIFI_USE_STATIC_IP", "WIFI_STATIC_IP", "WIFI_STATIC_GATEWAY", "WIFI_STATIC_NETMASK", "WIFI_STATIC_DNS1", "WIFI_STATIC_DNS2", "BLUETOOTH_DISCOVERABILITY", "BLUETOOTH_DISCOVERABILITY_TIMEOUT", "LOCK_PATTERN_ENABLED", "LOCK_PATTERN_VISIBLE", "LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED", "NEXT_ALARM_FORMATTED", "FONT_SCALE", "SYSTEM_LOCALES", "DEBUG_APP", "WAIT_FOR_DEBUGGER", "DIM_SCREEN", "DISPLAY_COLOR_MODE", "MIN_REFRESH_RATE", "PEAK_REFRESH_RATE", "SCREEN_OFF_TIMEOUT", "SCREEN_BRIGHTNESS", "SCREEN_BRIGHTNESS_FOR_VR", "SCREEN_BRIGHTNESS_FOR_VR_FLOAT", "SCREEN_BRIGHTNESS_FLOAT", "SCREEN_BRIGHTNESS_MODE", "SCREEN_AUTO_BRIGHTNESS_ADJ", "SCREEN_BRIGHTNESS_MODE_MANUAL", "SCREEN_BRIGHTNESS_MODE_AUTOMATIC", "ADAPTIVE_SLEEP", "SHOW_PROCESSES", "ALWAYS_FINISH_ACTIVITIES", "MODE_RINGER_STREAMS_AFFECTED", "MUTE_STREAMS_AFFECTED", "VIBRATE_ON", "VIBRATE_INPUT_DEVICES", "NOTIFICATION_VIBRATION_INTENSITY", "RING_VIBRATION_INTENSITY", "HAPTIC_FEEDBACK_INTENSITY", "VOLUME_RING", "VOLUME_SYSTEM", "VOLUME_VOICE", "VOLUME_MUSIC", "VOLUME_ALARM", "VOLUME_NOTIFICATION", "VOLUME_BLUETOOTH_SCO", "VOLUME_ACCESSIBILITY", "VOLUME_ASSISTANT", "VOLUME_MASTER", "MASTER_MONO", "MASTER_BALANCE", "NOTIFICATIONS_USE_RING_VOLUME", "VIBRATE_IN_SILENT", "VOLUME_SETTINGS", "VOLUME_SETTINGS_INT", "APPEND_FOR_LAST_AUDIBLE", "RINGTONE", "DEFAULT_RINGTONE_URI", "RINGTONE_CACHE", "RINGTONE_CACHE_URI", "NOTIFICATION_SOUND", "DEFAULT_NOTIFICATION_URI", "NOTIFICATION_SOUND_CACHE", "NOTIFICATION_SOUND_CACHE_URI", "ALARM_ALERT", "DEFAULT_ALARM_ALERT_URI", "ALARM_ALERT_CACHE", "ALARM_ALERT_CACHE_URI", "MEDIA_BUTTON_RECEIVER", "TEXT_AUTO_REPLACE", "TEXT_AUTO_CAPS", "TEXT_AUTO_PUNCTUATE", "TEXT_SHOW_PASSWORD", "SHOW_GTALK_SERVICE_STATUS", "WALLPAPER_ACTIVITY", "AUTO_TIME", "AUTO_TIME_ZONE", "TIME_12_24", "DATE_FORMAT", "SETUP_WIZARD_HAS_RUN", "WINDOW_ANIMATION_SCALE", "TRANSITION_ANIMATION_SCALE", "ANIMATOR_DURATION_SCALE", "ACCELEROMETER_ROTATION", "USER_ROTATION", "HIDE_ROTATION_LOCK_TOGGLE_FOR_ACCESSIBILITY", "VIBRATE_WHEN_RINGING", "DEBUG_ENABLE_ENHANCED_CALL_BLOCKING", "DTMF_TONE_WHEN_DIALING", "DTMF_TONE_TYPE_WHEN_DIALING", "HEARING_AID", "TTY_MODE", "SOUND_EFFECTS_ENABLED", "HAPTIC_FEEDBACK_ENABLED", "SHOW_WEB_SUGGESTIONS", "NOTIFICATION_LIGHT_PULSE", "POINTER_LOCATION", "SHOW_TOUCHES", "WINDOW_ORIENTATION_LISTENER_LOG", "POWER_SOUNDS_ENABLED", "DOCK_SOUNDS_ENABLED", "LOCKSCREEN_SOUNDS_ENABLED", "LOCKSCREEN_DISABLED", "LOW_BATTERY_SOUND", "DESK_DOCK_SOUND", "DESK_UNDOCK_SOUND", "CAR_DOCK_SOUND", "CAR_UNDOCK_SOUND", "LOCK_SOUND", "UNLOCK_SOUND", "SIP_RECEIVE_CALLS", "SIP_CALL_OPTIONS", "SIP_ALWAYS", "SIP_ADDRESS_ONLY", "SIP_ASK_ME_EACH_TIME", "POINTER_SPEED", "LOCK_TO_APP_ENABLED", "EGG_MODE", "SHOW_BATTERY_PERCENT", "MULTI_AUDIO_FOCUS_ENABLED", "LEGACY_RESTORE_SETTINGS", "PUBLIC_SETTINGS", "PRIVATE_SETTINGS", "CLONE_TO_MANAGED_PROFILE", "CLONE_FROM_PARENT_ON_VALUE", "INSTANT_APP_SETTINGS", "WHEN_TO_MAKE_WIFI_CALLS", "ADB_ENABLED", "ANDROID_ID", "BLUETOOTH_ON", "DATA_ROAMING", "DEVICE_PROVISIONED", "HTTP_PROXY", "INSTALL_NON_MARKET_APPS", "LOCATION_PROVIDERS_ALLOWED", "LOGGING_ID", "NETWORK_PREFERENCE", "PARENTAL_CONTROL_ENABLED", "PARENTAL_CONTROL_LAST_UPDATE", "PARENTAL_CONTROL_REDIRECT_URL", "SETTINGS_CLASSNAME", "USB_MASS_STORAGE_ENABLED", "USE_GOOGLE_MAIL", "WIFI_MAX_DHCP_RETRY_COUNT", "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS", "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON", "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY", "WIFI_NUM_OPEN_NETWORKS_KEPT", "WIFI_ON", "WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE", "WIFI_WATCHDOG_AP_COUNT", "WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS", "WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED", "WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS", "WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT", "WIFI_WATCHDOG_MAX_AP_CHECKS", "WIFI_WATCHDOG_ON", "WIFI_WATCHDOG_PING_COUNT", "WIFI_WATCHDOG_PING_DELAY_MS", "WIFI_WATCHDOG_PING_TIMEOUT_MS" ],
  "methodNames" : [ "public static void getMovedToGlobalSettings(Set<String> outKeySet)", "public static void getMovedToSecureSettings(Set<String> outKeySet)", "public static void getNonLegacyMovedKeys(HashSet<String> outKeySet)", "public static void clearProviderForTest()", "public static String getString(ContentResolver resolver, String name)", "public static String getStringForUser(ContentResolver resolver, String name, int userHandle)", "public static boolean putString(ContentResolver resolver, String name, String value)", "public static boolean putString(@NonNull ContentResolver resolver, @NonNull String name, @Nullable String value, boolean overrideableByRestore)", "public static boolean putStringForUser(ContentResolver resolver, String name, String value, int userHandle)", "private static boolean putStringForUser(ContentResolver resolver, String name, String value, int userHandle, boolean overrideableByRestore)", "public static Uri getUriFor(String name)", "public static int getInt(ContentResolver cr, String name, int def)", "public static int getIntForUser(ContentResolver cr, String name, int def, int userHandle)", "public static int getInt(ContentResolver cr, String name) throws SettingNotFoundException", "public static int getIntForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException", "public static boolean putInt(ContentResolver cr, String name, int value)", "public static boolean putIntForUser(ContentResolver cr, String name, int value, int userHandle)", "public static long getLong(ContentResolver cr, String name, long def)", "public static long getLongForUser(ContentResolver cr, String name, long def, int userHandle)", "public static long getLong(ContentResolver cr, String name) throws SettingNotFoundException", "public static long getLongForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException", "public static boolean putLong(ContentResolver cr, String name, long value)", "public static boolean putLongForUser(ContentResolver cr, String name, long value, int userHandle)", "public static float getFloat(ContentResolver cr, String name, float def)", "public static float getFloatForUser(ContentResolver cr, String name, float def, int userHandle)", "public static float getFloat(ContentResolver cr, String name) throws SettingNotFoundException", "public static float getFloatForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException", "public static boolean putFloat(ContentResolver cr, String name, float value)", "public static boolean putFloatForUser(ContentResolver cr, String name, float value, int userHandle)", "public static void getConfiguration(ContentResolver cr, Configuration outConfig)", "public static void adjustConfigurationForUser(ContentResolver cr, Configuration outConfig, int userHandle, boolean updateSettingsIfEmpty)", "public static void clearConfiguration(Configuration inoutConfig)", "public static boolean putConfiguration(ContentResolver cr, Configuration config)", "public static boolean putConfigurationForUser(ContentResolver cr, Configuration config, int userHandle)", "public static boolean hasInterestingConfigurationChanges(int changes)", "public static boolean getShowGTalkServiceStatus(ContentResolver cr)", "public static boolean getShowGTalkServiceStatusForUser(ContentResolver cr, int userHandle)", "public static void setShowGTalkServiceStatus(ContentResolver cr, boolean flag)", "public static void setShowGTalkServiceStatusForUser(ContentResolver cr, boolean flag, int userHandle)", "public static void getCloneToManagedProfileSettings(Set<String> outKeySet)", "public static void getCloneFromParentOnValueSettings(Map<String, String> outMap)", "public static boolean canWrite(Context context)" ]
}