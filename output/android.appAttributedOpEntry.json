{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/AppOpsManager.java",
  "packageName" : "android.app",
  "className" : "AttributedOpEntry",
  "comment" : "\n     * Last {@link #noteOp} and {@link #startOp} events performed for a single op and a specific\n     * {@link Context#createAttributionContext(String) attribution} for all uidModes and opFlags.\n     *\n     * @hide\n     ",
  "variables" : [ {
    "name" : "mOp",
    "type" : "int",
    "comment" : " The code of the op ",
    "links" : [ ]
  }, {
    "name" : "mRunning",
    "type" : "boolean",
    "comment" : " Whether the op is running ",
    "links" : [ ]
  }, {
    "name" : "mAccessEvents",
    "type" : "LongSparseArray<NoteOpEvent>",
    "comment" : " The access events ",
    "links" : [ ]
  }, {
    "name" : "mRejectEvents",
    "type" : "LongSparseArray<NoteOpEvent>",
    "comment" : " The rejection events ",
    "links" : [ ]
  }, {
    "name" : "sParcellingForAccessEvents",
    "type" : "Parcelling<LongSparseArray<NoteOpEvent>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sParcellingForRejectEvents",
    "type" : "Parcelling<LongSparseArray<NoteOpEvent>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AttributedOpEntry>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ArraySet<Long> collectKeys()",
    "returnType" : "ArraySet<Long>",
    "comment" : "\n         * Returns all keys for which we have events.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last access time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no access\n         *\n         * @see #getLastAccessForegroundTime(int)\n         * @see #getLastAccessBackgroundTime(int)\n         * @see #getLastAccessTime(int, int, int)\n         * @see OpEntry#getLastAccessTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessForegroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last foreground access time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no foreground access\n         *\n         * @see #getLastAccessTime(int)\n         * @see #getLastAccessBackgroundTime(int)\n         * @see #getLastAccessTime(int, int, int)\n         * @see OpEntry#getLastAccessForegroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessBackgroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last background access time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no background access\n         *\n         * @see #getLastAccessTime(int)\n         * @see #getLastAccessForegroundTime(int)\n         * @see #getLastAccessTime(int, int, int)\n         * @see OpEntry#getLastAccessBackgroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "private NoteOpEvent getLastAccessEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "NoteOpEvent",
    "comment" : "\n         * Return the last access event.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access event of {@code null} if there was no access\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last access time.\n         *\n         * @param fromUidState The lowest UID state for which to query\n         * @param toUidState The highest UID state for which to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no access\n         *\n         * @see #getLastAccessTime(int)\n         * @see #getLastAccessForegroundTime(int)\n         * @see #getLastAccessBackgroundTime(int)\n         * @see OpEntry#getLastAccessTime(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last rejection time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no rejection\n         *\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectBackgroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see OpEntry#getLastRejectTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectForegroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last foreground rejection time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no foreground rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectBackgroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see OpEntry#getLastRejectForegroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectBackgroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last background rejection time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no background rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see OpEntry#getLastRejectBackgroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "private NoteOpEvent getLastRejectEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "NoteOpEvent",
    "comment" : "\n         * Return the last background rejection event.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection event of {@code null} if there was no rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectBackgroundTime(int)\n         * @see OpEntry#getLastRejectTime(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last rejection time.\n         *\n         * @param fromUidState The lowest UID state for which to query\n         * @param toUidState The highest UID state for which to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch) or {@code -1} if there was no\n         * rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see OpEntry#getLastRejectTime(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last the access.\n         *\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no rejection\n         *\n         * @see #getLastForegroundDuration(int)\n         * @see #getLastBackgroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see OpEntry#getLastDuration(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastForegroundDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last foreground access.\n         *\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no foreground rejection\n         *\n         * @see #getLastDuration(int)\n         * @see #getLastBackgroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see OpEntry#getLastForegroundDuration(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastBackgroundDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last background access.\n         *\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no background rejection\n         *\n         * @see #getLastDuration(int)\n         * @see #getLastForegroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see OpEntry#getLastBackgroundDuration(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastDuration(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last access.\n         *\n         * @param fromUidState The lowest UID state for which to query\n         * @param toUidState The highest UID state for which to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no rejection\n         *\n         * @see #getLastDuration(int)\n         * @see #getLastForegroundDuration(int)\n         * @see #getLastBackgroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see OpEntry#getLastDuration(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastProxyInfo(@OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last access on behalf of this\n         * attribution and as a result blamed the op on this attribution.\n         *\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no proxy access\n         *\n         * @see #getLastForegroundProxyInfo(int)\n         * @see #getLastBackgroundProxyInfo(int)\n         * @see #getLastProxyInfo(int, int, int)\n         * @see OpEntry#getLastProxyInfo(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastForegroundProxyInfo(@OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last foreground access on behalf of\n         * this attribution and as a result blamed the op on this attribution.\n         *\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no proxy access\n         *\n         * @see #getLastProxyInfo(int)\n         * @see #getLastBackgroundProxyInfo(int)\n         * @see #getLastProxyInfo(int, int, int)\n         * @see OpEntry#getLastForegroundProxyInfo(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastBackgroundProxyInfo(@OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last background access on behalf of\n         * this attribution and as a result blamed the op on this attribution.\n         *\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no proxy background access\n         *\n         * @see #getLastProxyInfo(int)\n         * @see #getLastForegroundProxyInfo(int)\n         * @see #getLastProxyInfo(int, int, int)\n         * @see OpEntry#getLastBackgroundProxyInfo(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastProxyInfo(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last access on behalf of this\n         * attribution and as a result blamed the op on this attribution.\n         *\n         * @param fromUidState The lowest UID state for which to query\n         * @param toUidState The highest UID state for which to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no proxy foreground access\n         *\n         * @see #getLastProxyInfo(int)\n         * @see #getLastForegroundProxyInfo(int)\n         * @see #getLastBackgroundProxyInfo(int)\n         * @see OpEntry#getLastProxyInfo(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the op is running\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mOp", "mRunning", "mAccessEvents", "mRejectEvents", "sParcellingForAccessEvents", "sParcellingForRejectEvents", "CREATOR" ],
  "methodNames" : [ "public ArraySet<Long> collectKeys()", "public long getLastAccessTime(@OpFlags int flags)", "public long getLastAccessForegroundTime(@OpFlags int flags)", "public long getLastAccessBackgroundTime(@OpFlags int flags)", "private NoteOpEvent getLastAccessEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getLastAccessTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getLastRejectTime(@OpFlags int flags)", "public long getLastRejectForegroundTime(@OpFlags int flags)", "public long getLastRejectBackgroundTime(@OpFlags int flags)", "private NoteOpEvent getLastRejectEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getLastRejectTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getLastDuration(@OpFlags int flags)", "public long getLastForegroundDuration(@OpFlags int flags)", "public long getLastBackgroundDuration(@OpFlags int flags)", "public long getLastDuration(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public OpEventProxyInfo getLastProxyInfo(@OpFlags int flags)", "public OpEventProxyInfo getLastForegroundProxyInfo(@OpFlags int flags)", "public OpEventProxyInfo getLastBackgroundProxyInfo(@OpFlags int flags)", "public OpEventProxyInfo getLastProxyInfo(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public boolean isRunning()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()" ]
}