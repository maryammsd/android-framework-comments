{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ThreadLocal.java",
  "packageName" : "java.lang",
  "className" : "ThreadLocalMap",
  "comment" : "\n     * ThreadLocalMap is a customized hash map suitable only for\n     * maintaining thread local values. No operations are exported\n     * outside of the ThreadLocal class. The class is package private to\n     * allow declaration of fields in class Thread.  To help deal with\n     * very large and long-lived usages, the hash table entries use\n     * WeakReferences for keys. However, since reference queues are not\n     * used, stale entries are guaranteed to be removed only when\n     * the table starts running out of space.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INITIAL_CAPACITY",
    "type" : "int",
    "comment" : "\n         * The initial capacity -- MUST be a power of two.\n         ",
    "links" : [ ]
  }, {
    "name" : "table",
    "type" : "Entry[]",
    "comment" : "\n         * The table, resized as necessary.\n         * table.length MUST always be a power of two.\n         ",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "\n         * The number of entries in the table.\n         ",
    "links" : [ ]
  }, {
    "name" : "threshold",
    "type" : "int",
    "comment" : " Default to 0",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setThreshold(int len)",
    "returnType" : "void",
    "comment" : "\n         * Set the resize threshold to maintain at worst a 2/3 load factor.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int nextIndex(int i, int len)",
    "returnType" : "int",
    "comment" : "\n         * Increment i modulo len.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int prevIndex(int i, int len)",
    "returnType" : "int",
    "comment" : "\n         * Decrement i modulo len.\n         ",
    "links" : [ ]
  }, {
    "name" : "private Entry getEntry(ThreadLocal<?> key)",
    "returnType" : "Entry",
    "comment" : "\n         * Get the entry associated with key.  This method\n         * itself handles only the fast path: a direct hit of existing\n         * key. It otherwise relays to getEntryAfterMiss.  This is\n         * designed to maximize performance for direct hits, in part\n         * by making this method readily inlinable.\n         *\n         * @param  key the thread local object\n         * @return the entry associated with key, or null if no such\n         ",
    "links" : [ ]
  }, {
    "name" : "private Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e)",
    "returnType" : "Entry",
    "comment" : "\n         * Version of getEntry method for use when key is not found in\n         * its direct hash slot.\n         *\n         * @param  key the thread local object\n         * @param  i the table index for key's hash code\n         * @param  e the entry at table[i]\n         * @return the entry associated with key, or null if no such\n         ",
    "links" : [ ]
  }, {
    "name" : "private void set(ThreadLocal<?> key, Object value)",
    "returnType" : "void",
    "comment" : "\n         * Set the value associated with key.\n         *\n         * @param key the thread local object\n         * @param value the value to be set\n         ",
    "links" : [ ]
  }, {
    "name" : "private void remove(ThreadLocal<?> key)",
    "returnType" : "void",
    "comment" : "\n         * Remove the entry for key.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void replaceStaleEntry(ThreadLocal<?> key, Object value, int staleSlot)",
    "returnType" : "void",
    "comment" : "\n         * Replace a stale entry encountered during a set operation\n         * with an entry for the specified key.  The value passed in\n         * the value parameter is stored in the entry, whether or not\n         * an entry already exists for the specified key.\n         *\n         * As a side effect, this method expunges all stale entries in the\n         * \"run\" containing the stale entry.  (A run is a sequence of entries\n         * between two null slots.)\n         *\n         * @param  key the key\n         * @param  value the value to be associated with key\n         * @param  staleSlot index of the first stale entry encountered while\n         *         searching for key.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int expungeStaleEntry(int staleSlot)",
    "returnType" : "int",
    "comment" : "\n         * Expunge a stale entry by rehashing any possibly colliding entries\n         * lying between staleSlot and the next null slot.  This also expunges\n         * any other stale entries encountered before the trailing null.  See\n         * Knuth, Section 6.4\n         *\n         * @param staleSlot index of slot known to have null key\n         * @return the index of the next null slot after staleSlot\n         * (all between staleSlot and this slot will have been checked\n         * for expunging).\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean cleanSomeSlots(int i, int n)",
    "returnType" : "boolean",
    "comment" : "\n         * Heuristically scan some cells looking for stale entries.\n         * This is invoked when either a new element is added, or\n         * another stale one has been expunged. It performs a\n         * logarithmic number of scans, as a balance between no\n         * scanning (fast but retains garbage) and a number of scans\n         * proportional to number of elements, that would find all\n         * garbage but would cause some insertions to take O(n) time.\n         *\n         * @param i a position known NOT to hold a stale entry. The\n         * scan starts at the element after i.\n         *\n         * @param n scan control: {@code log2(n)} cells are scanned,\n         * unless a stale entry is found, in which case\n         * {@code log2(table.length)-1} additional cells are scanned.\n         * When called from insertions, this parameter is the number\n         * of elements, but when from replaceStaleEntry, it is the\n         * table length. (Note: all this could be changed to be either\n         * more or less aggressive by weighting n instead of just\n         * using straight log n. But this version is simple, fast, and\n         * seems to work well.)\n         *\n         * @return true if any stale entries have been removed.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void rehash()",
    "returnType" : "void",
    "comment" : "\n         * Re-pack and/or re-size the table. First scan the entire\n         * table removing stale entries. If this doesn't sufficiently\n         * shrink the size of the table, double the table size.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void resize()",
    "returnType" : "void",
    "comment" : "\n         * Double the capacity of the table.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void expungeStaleEntries()",
    "returnType" : "void",
    "comment" : "\n         * Expunge all stale entries in the table.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setThreshold(int len)", "private static int nextIndex(int i, int len)", "private static int prevIndex(int i, int len)", "private Entry getEntry(ThreadLocal<?> key)", "private Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e)", "private void set(ThreadLocal<?> key, Object value)", "private void remove(ThreadLocal<?> key)", "private void replaceStaleEntry(ThreadLocal<?> key, Object value, int staleSlot)", "private int expungeStaleEntry(int staleSlot)", "private boolean cleanSomeSlots(int i, int n)", "private void rehash()", "private void resize()", "private void expungeStaleEntries()" ],
  "variableNames" : [ "INITIAL_CAPACITY", "table", "size", "threshold" ]
}