{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebViewDelegate.java",
  "packageName" : "android.webkit",
  "className" : "WebViewDelegate",
  "comment" : "\n * Delegate used by the WebView provider implementation to access\n * the required framework functionality needed to implement a {@link WebView}.\n *\n * @hide\n ",
  "links" : [ "android.webkit.WebView" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void setOnTraceEnabledChangeListener(final OnTraceEnabledChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when tracing for the WebView component has been\n     * enabled/disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTraceTagEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the WebView trace tag is enabled and {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canInvokeDrawGlFunctor(View containerView)",
    "returnType" : "boolean",
    "comment" : "\n     * Throws {@link UnsupportedOperationException}\n     * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}\n     ",
    "links" : [ "#drawWebViewFunctor(Canvas", "UnsupportedOperationException" ]
  }, {
    "name" : "public void invokeDrawGlFunctor(View containerView, long nativeDrawGLFunctor, boolean waitForCompletion)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@link UnsupportedOperationException}\n     * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}\n     ",
    "links" : [ "#drawWebViewFunctor(Canvas", "UnsupportedOperationException" ]
  }, {
    "name" : "public void callDrawGlFunction(Canvas canvas, long nativeDrawGLFunctor)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@link UnsupportedOperationException}\n     * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}\n     ",
    "links" : [ "#drawWebViewFunctor(Canvas", "UnsupportedOperationException" ]
  }, {
    "name" : "public void callDrawGlFunction(@NonNull Canvas canvas, long nativeDrawGLFunctor, @Nullable Runnable releasedRunnable)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@link UnsupportedOperationException}\n     * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}\n     ",
    "links" : [ "#drawWebViewFunctor(Canvas", "UnsupportedOperationException" ]
  }, {
    "name" : "public void drawWebViewFunctor(@NonNull Canvas canvas, int functor)",
    "returnType" : "void",
    "comment" : "\n     * Call webview draw functor. See API in draw_fn.h.\n     * @param canvas a {@link RecordingCanvas}.\n     * @param functor created by AwDrawFn_CreateFunctor in draw_fn.h.\n     ",
    "links" : [ "android.graphics.RecordingCanvas" ]
  }, {
    "name" : "public void detachDrawGlFunctor(View containerView, long nativeDrawGLFunctor)",
    "returnType" : "void",
    "comment" : "\n     * Detaches the draw GL functor.\n     *\n     * @param nativeDrawGLFunctor the pointer to the native functor that implements\n     *        system/core/include/utils/Functor.h\n     * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}\n     ",
    "links" : [ "#drawWebViewFunctor(Canvas" ]
  }, {
    "name" : "public int getPackageId(Resources resources, String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Returns the package id of the given {@code packageName}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Application getApplication()",
    "returnType" : "Application",
    "comment" : "\n     * Returns the application which is embedding the WebView.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getErrorString(Context context, int errorCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns the error string for the given {@code errorCode}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addWebViewAssetPath(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Adds the WebView asset path to {@link android.content.res.AssetManager}.\n     * If {@link android.content.res.Flags#FLAG_REGISTER_RESOURCE_PATHS} is enabled, this function\n     * will be a no-op because the asset paths appending work will only be handled by\n     * {@link android.content.res.Resources#registerResourcePaths(String, ApplicationInfo)},\n     * otherwise it behaves the old way.\n     ",
    "links" : [ "android.content.res.AssetManager", "android.content.res.Flags#FLAG_REGISTER_RESOURCE_PATHS", "android.content.res.Resources#registerResourcePaths(String" ]
  }, {
    "name" : "public boolean isMultiProcessEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether WebView should run in multiprocess mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDataDirectorySuffix()",
    "returnType" : "String",
    "comment" : "\n     * Returns the data directory suffix to use, or null for none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebViewFactory.StartupTimestamps getStartupTimestamps()",
    "returnType" : "WebViewFactory.StartupTimestamps",
    "comment" : "\n     * Get the timestamps at which various WebView startup events occurred in this process.\n     * This method must be called on the same thread where the\n     * WebViewChromiumFactoryProvider#create method was invoked.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setOnTraceEnabledChangeListener(final OnTraceEnabledChangeListener listener)", "public boolean isTraceTagEnabled()", "public boolean canInvokeDrawGlFunctor(View containerView)", "public void invokeDrawGlFunctor(View containerView, long nativeDrawGLFunctor, boolean waitForCompletion)", "public void callDrawGlFunction(Canvas canvas, long nativeDrawGLFunctor)", "public void callDrawGlFunction(@NonNull Canvas canvas, long nativeDrawGLFunctor, @Nullable Runnable releasedRunnable)", "public void drawWebViewFunctor(@NonNull Canvas canvas, int functor)", "public void detachDrawGlFunctor(View containerView, long nativeDrawGLFunctor)", "public int getPackageId(Resources resources, String packageName)", "public Application getApplication()", "public String getErrorString(Context context, int errorCode)", "public void addWebViewAssetPath(Context context)", "public boolean isMultiProcessEnabled()", "public String getDataDirectorySuffix()", "public WebViewFactory.StartupTimestamps getStartupTimestamps()" ],
  "variableNames" : [ ]
}