{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/controls/templates/ControlTemplate.java",
  "packageName" : "android.service.controls.templates",
  "className" : "ControlTemplate",
  "comment" : "\n * An abstract input template for a {@link Control}.\n *\n * Specifies what layout is presented to the user for a given {@link Control}.\n * <p>\n * Some instances of {@link Control} can originate actions (via user interaction) to modify its\n * associated state. The actions available to a given {@link Control} are determined by its\n * {@link ControlTemplate}.\n * @see ControlAction\n ",
  "links" : [ "android.service.controls.templates.ControlTemplate", "android.service.controls.Control" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TEMPLATE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TEMPLATE_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_TEMPLATE",
    "type" : "ControlTemplate",
    "comment" : "\n     * Singleton representing a {@link Control} with no input.\n     * @hide\n     ",
    "links" : [ "android.service.controls.Control" ]
  }, {
    "name" : "ERROR_TEMPLATE",
    "type" : "ControlTemplate",
    "comment" : "\n     * Object returned when there is an unparcelling error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ERROR",
    "type" : "int",
    "comment" : "\n     * Type identifier of the template returned by {@link #getErrorTemplate()}.\n     ",
    "links" : [ "#getErrorTemplate()" ]
  }, {
    "name" : "TYPE_NO_TEMPLATE",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link ControlTemplate#getNoTemplateObject}.\n     ",
    "links" : [ "android.service.controls.templates.ControlTemplate#getNoTemplateObject" ]
  }, {
    "name" : "TYPE_TOGGLE",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link ToggleTemplate}.\n     ",
    "links" : [ "android.service.controls.templates.ToggleTemplate" ]
  }, {
    "name" : "TYPE_RANGE",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link RangeTemplate}.\n     ",
    "links" : [ "android.service.controls.templates.RangeTemplate" ]
  }, {
    "name" : "TYPE_THUMBNAIL",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link ThumbnailTemplate}.\n     ",
    "links" : [ "android.service.controls.templates.ThumbnailTemplate" ]
  }, {
    "name" : "TYPE_TOGGLE_RANGE",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link ToggleRangeTemplate}.\n     ",
    "links" : [ "android.service.controls.templates.ToggleRangeTemplate" ]
  }, {
    "name" : "TYPE_TEMPERATURE",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link TemperatureControlTemplate}.\n     ",
    "links" : [ "android.service.controls.templates.TemperatureControlTemplate" ]
  }, {
    "name" : "TYPE_STATELESS",
    "type" : "int",
    "comment" : "\n     * Type identifier of {@link StatelessTemplate}.\n     ",
    "links" : [ "android.service.controls.templates.StatelessTemplate" ]
  }, {
    "name" : "mTemplateId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getTemplateId()",
    "returnType" : "String",
    "comment" : "\n     * @return the identifier for this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getTemplateType()",
    "returnType" : "int",
    "comment" : "\n     * The template type associated with this class.\n     ",
    "links" : [ ]
  }, {
    "name" : " Bundle getDataBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Obtain a {@link Bundle} describing this object populated with data.\n     * @return a {@link Bundle} containing the data that represents this object.\n     * @hide\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "public void prepareTemplateForBinder(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Call to prepare values for Binder transport.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static ControlTemplate createTemplateFromBundle(@Nullable Bundle bundle)",
    "returnType" : "ControlTemplate",
    "comment" : "\n     *\n     * @param bundle\n     * @return\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ControlTemplate getErrorTemplate()",
    "returnType" : "ControlTemplate",
    "comment" : "\n     * @return a singleton {@link ControlTemplate} used for indicating an error in unparceling.\n     ",
    "links" : [ "android.service.controls.templates.ControlTemplate" ]
  }, {
    "name" : "public static ControlTemplate getNoTemplateObject()",
    "returnType" : "ControlTemplate",
    "comment" : "\n     * Get a singleton {@link ControlTemplate}, which supports no direct user input.\n     *\n     * Used by {@link Control.StatelessBuilder} when there is no known state. Can also be used\n     * in {@link Control.StatefulBuilder} for conveying information to a user about the\n     * {@link Control} but direct user interaction is not desired. Since this template has no\n     * corresponding {@link ControlAction}, any user interaction will launch the\n     * {@link Control#getAppIntent()}.\n     *\n     * @return a singleton {@link ControlTemplate} to indicate no specific template is used by\n     *         this {@link Control}\n     ",
    "links" : [ "android.service.controls.Control#getAppIntent()", "Control.StatefulBuilder", "android.service.controls.templates.ControlTemplate", "Control.StatelessBuilder", "android.service.controls.Control", "android.service.controls.actions.ControlAction" ]
  } ],
  "methodNames" : [ "public String getTemplateId()", "public abstract int getTemplateType()", " Bundle getDataBundle()", "public void prepareTemplateForBinder(@NonNull Context context)", " static ControlTemplate createTemplateFromBundle(@Nullable Bundle bundle)", "public static ControlTemplate getErrorTemplate()", "public static ControlTemplate getNoTemplateObject()" ],
  "variableNames" : [ "TAG", "KEY_TEMPLATE_ID", "KEY_TEMPLATE_TYPE", "NO_TEMPLATE", "ERROR_TEMPLATE", "TYPE_ERROR", "TYPE_NO_TEMPLATE", "TYPE_TOGGLE", "TYPE_RANGE", "TYPE_THUMBNAIL", "TYPE_TOGGLE_RANGE", "TYPE_TEMPERATURE", "TYPE_STATELESS", "mTemplateId" ]
}