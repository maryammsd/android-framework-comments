{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/SequencedMap.java",
  "packageName" : "java.util",
  "className" : "SequencedMap",
  "comment" : "\n * A Map that has a well-defined encounter order, that supports operations at both ends, and\n * that is reversible. The <a href=\"SequencedCollection.html#encounter\">encounter order</a>\n * of a {@code SequencedMap} is similar to that of the elements of a {@link SequencedCollection},\n * but the ordering applies to mappings instead of individual elements.\n * <p>\n * The bulk operations on this map, including the {@link #forEach forEach} and the\n * {@link #replaceAll replaceAll} methods, operate on this map's mappings in\n * encounter order.\n * <p>\n * The view collections provided by the\n * {@link #keySet keySet},\n * {@link #values values},\n * {@link #entrySet entrySet},\n * {@link #sequencedKeySet sequencedKeySet},\n * {@link #sequencedValues sequencedValues},\n * and\n * {@link #sequencedEntrySet sequencedEntrySet} methods all reflect the encounter order\n * of this map. Even though the return values of the {@code keySet}, {@code values}, and\n * {@code entrySet} methods are not sequenced <i>types</i>, the elements\n * in those view collections do reflect the encounter order of this map. Thus, the\n * iterators returned by the statements\n * {@snippet :\n *     var it1 = sequencedMap.entrySet().iterator();\n *     var it2 = sequencedMap.sequencedEntrySet().iterator();\n * }\n * both provide the mappings of {@code sequencedMap} in that map's encounter order.\n * <p>\n * This interface provides methods to add mappings, to retrieve mappings, and to remove\n * mappings at either end of the map's encounter order.\n * <p>\n * This interface also defines the {@link #reversed} method, which provides a\n * reverse-ordered <a href=\"Collection.html#view\">view</a> of this map.\n * In the reverse-ordered view, the concepts of first and last are inverted, as\n * are the concepts of successor and predecessor. The first mapping of this map\n * is the last mapping of the reverse-ordered view, and vice-versa. The successor of some\n * mapping in this map is its predecessor in the reversed view, and vice-versa. All\n * methods that respect the encounter order of the map operate as if the encounter order\n * is inverted. For instance, the {@link #forEach forEach} method of the reversed view reports\n * the mappings in order from the last mapping of this map to the first. In addition, all of\n * the view collections of the reversed view also reflect the inverse of this map's\n * encounter order. For example,\n * {@snippet :\n *     var itr = sequencedMap.reversed().entrySet().iterator();\n * }\n * provides the mappings of this map in the inverse of the encounter order, that is, from\n * the last mapping to the first mapping. The availability of the {@code reversed} method,\n * and its impact on the ordering semantics of all applicable methods and views, allow convenient\n * iteration, searching, copying, and streaming of this map's mappings in either forward order or\n * reverse order.\n * <p>\n * A map's reverse-ordered view is generally not serializable, even if the original\n * map is serializable.\n * <p>\n * The {@link Map.Entry} instances obtained by iterating the {@link #entrySet} view, the\n * {@link #sequencedEntrySet} view, and its reverse-ordered view, maintain a connection to the\n * underlying map. This connection is guaranteed only during the iteration. It is unspecified\n * whether the connection is maintained outside of the iteration. If the underlying map permits\n * it, calling an Entry's {@link Map.Entry#setValue setValue} method will modify the value of the\n * underlying mapping. It is, however, unspecified whether modifications to the value in the\n * underlying mapping are visible in the {@code Entry} instance.\n * <p>\n * The methods\n * {@link #firstEntry},\n * {@link #lastEntry},\n * {@link #pollFirstEntry}, and\n * {@link #pollLastEntry}\n * return {@link Map.Entry} instances that represent snapshots of mappings as\n * of the time of the call. They do <em>not</em> support mutation of the\n * underlying map via the optional {@link Map.Entry#setValue setValue} method.\n * <p>\n * Depending upon the implementation, the {@code Entry} instances returned by other\n * means might or might not be connected to the underlying map. For example, consider\n * an {@code Entry} obtained in the following manner:\n * {@snippet :\n *     var entry = sequencedMap.sequencedEntrySet().getFirst();\n * }\n * It is not specified by this interface whether the {@code setValue} method of the\n * {@code Entry} thus obtained will update a mapping in the underlying map, or whether\n * it will throw an exception, or whether changes to the underlying map are visible in\n * that {@code Entry}.\n * <p>\n * This interface has the same requirements on the {@code equals} and {@code hashCode}\n * methods as defined by {@link Map#equals Map.equals} and {@link Map#hashCode Map.hashCode}.\n * Thus, a {@code Map} and a {@code SequencedMap} will compare equals if and only\n * if they have equal mappings, irrespective of ordering.\n * <p>\n * This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n * @since 21\n ",
  "links" : [ "Map.Entry", "Map.Entry#setValue", "#entrySet", "#lastEntry", "java.util.Map#hashCode", "#sequencedEntrySet", "#forEach", "#sequencedKeySet", "#reversed", "#pollFirstEntry", "#replaceAll", "#firstEntry", "#values", "java.util.Map#equals", "#sequencedValues", "java.util.SequencedCollection", "#keySet", "#pollLastEntry" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " SequencedMap<K, V> reversed()",
    "returnType" : "SequencedMap<K, V>",
    "comment" : "\n     * Returns a reverse-ordered <a href=\"Collection.html#view\">view</a> of this map.\n     * The encounter order of mappings in the returned view is the inverse of the encounter\n     * order of mappings in this map. The reverse ordering affects all order-sensitive operations,\n     * including those on the view collections of the returned view. If the implementation permits\n     * modifications to this view, the modifications \"write through\" to the underlying map.\n     * Changes to the underlying map might or might not be visible in this reversed view,\n     * depending upon the implementation.\n     *\n     * @return a reverse-ordered view of this map\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> firstEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns the first key-value mapping in this map,\n     * or {@code null} if the map is empty.\n     *\n     * @implSpec\n     * The implementation in this interface obtains the iterator of this map's entrySet.\n     * If the iterator has an element, it returns an unmodifiable copy of that element.\n     * Otherwise, it returns null.\n     *\n     * @return the first key-value mapping,\n     *         or {@code null} if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> lastEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns the last key-value mapping in this map,\n     * or {@code null} if the map is empty.\n     *\n     * @implSpec\n     * The implementation in this interface obtains the iterator of the entrySet of this map's\n     * reversed view. If the iterator has an element, it returns an unmodifiable copy of\n     * that element. Otherwise, it returns null.\n     *\n     * @return the last key-value mapping,\n     *         or {@code null} if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> pollFirstEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Removes and returns the first key-value mapping in this map,\n     * or {@code null} if the map is empty (optional operation).\n     *\n     * @implSpec\n     * The implementation in this interface obtains the iterator of this map's entrySet.\n     * If the iterator has an element, it calls {@code remove} on the iterator and\n     * then returns an unmodifiable copy of that element. Otherwise, it returns null.\n     *\n     * @return the removed first entry of this map,\n     *         or {@code null} if this map is empty\n     * @throws UnsupportedOperationException if this collection implementation does not\n     *         support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> pollLastEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Removes and returns the last key-value mapping in this map,\n     * or {@code null} if the map is empty (optional operation).\n     *\n     * @implSpec\n     * The implementation in this interface obtains the iterator of the entrySet of this map's\n     * reversed view. If the iterator has an element, it calls {@code remove} on the iterator\n     * and then returns an unmodifiable copy of that element. Otherwise, it returns null.\n     *\n     * @return the removed last entry of this map,\n     *         or {@code null} if this map is empty\n     * @throws UnsupportedOperationException if this collection implementation does not\n     *         support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " V putFirst(K k, V v)",
    "returnType" : "V",
    "comment" : "\n     * Inserts the given mapping into the map if it is not already present, or replaces the\n     * value of a mapping if it is already present (optional operation). After this operation\n     * completes normally, the given mapping will be present in this map, and it will be the\n     * first mapping in this map's encounter order.\n     *\n     * @implSpec The implementation in this interface always throws\n     * {@code UnsupportedOperationException}.\n     *\n     * @param k the key\n     * @param v the value\n     * @return the value previously associated with k, or null if none\n     * @throws UnsupportedOperationException if this collection implementation does not\n     *         support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " V putLast(K k, V v)",
    "returnType" : "V",
    "comment" : "\n     * Inserts the given mapping into the map if it is not already present, or replaces the\n     * value of a mapping if it is already present (optional operation). After this operation\n     * completes normally, the given mapping will be present in this map, and it will be the\n     * last mapping in this map's encounter order.\n     *\n     * @implSpec The implementation in this interface always throws\n     * {@code UnsupportedOperationException}.\n     *\n     * @param k the key\n     * @param v the value\n     * @return the value previously associated with k, or null if none\n     * @throws UnsupportedOperationException if this collection implementation does not\n     *         support this operation\n     ",
    "links" : [ ]
  }, {
    "name" : " SequencedSet<K> sequencedKeySet()",
    "returnType" : "SequencedSet<K>",
    "comment" : "\n     * Returns a {@code SequencedSet} view of this map's {@link #keySet keySet}.\n     *\n     * @implSpec\n     * The implementation in this interface returns a {@code SequencedSet} instance\n     * that behaves as follows. Its {@link SequencedSet#add add} and {@link\n     * SequencedSet#addAll addAll} methods throw {@link UnsupportedOperationException}.\n     * Its {@link SequencedSet#reversed reversed} method returns the {@link\n     * #sequencedKeySet sequencedKeySet} view of the {@link #reversed reversed} view of\n     * this map. Each of its other methods calls the corresponding method of the {@link\n     * #keySet keySet} view of this map.\n     *\n     * @return a {@code SequencedSet} view of this map's {@code keySet}\n     ",
    "links" : [ "#sequencedKeySet", "#reversed", "java.util.SequencedSet#reversed", "java.util.SequencedSet#addAll", "#keySet", "java.util.SequencedSet#add", "UnsupportedOperationException" ]
  }, {
    "name" : " SequencedCollection<V> sequencedValues()",
    "returnType" : "SequencedCollection<V>",
    "comment" : "\n     * Returns a {@code SequencedCollection} view of this map's {@link #values values} collection.\n     *\n     * @implSpec\n     * The implementation in this interface returns a {@code SequencedCollection} instance\n     * that behaves as follows. Its {@link SequencedCollection#add add} and {@link\n     * SequencedCollection#addAll addAll} methods throw {@link UnsupportedOperationException}.\n     * Its {@link SequencedCollection#reversed reversed} method returns the {@link\n     * #sequencedValues sequencedValues} view of the {@link #reversed reversed} view of\n     * this map. Its {@link Object#equals equals} and {@link Object#hashCode hashCode} methods\n     * are inherited from {@link Object}. Each of its other methods calls the corresponding\n     * method of the {@link #values values} view of this map.\n     *\n     * @return a {@code SequencedCollection} view of this map's {@code values} collection\n     ",
    "links" : [ "#equals", "java.util.SequencedCollection#addAll", "#reversed", "#hashCode", "java.util.SequencedCollection#add", "java.util.SequencedCollection#reversed", "#values", "Object", "#sequencedValues", "UnsupportedOperationException" ]
  }, {
    "name" : " SequencedSet<Map.Entry<K, V>> sequencedEntrySet()",
    "returnType" : "SequencedSet<Map.Entry<K, V>>",
    "comment" : "\n     * Returns a {@code SequencedSet} view of this map's {@link #entrySet entrySet}.\n     *\n     * @implSpec\n     * The implementation in this interface returns a {@code SequencedSet} instance\n     * that behaves as follows. Its {@link SequencedSet#add add} and {@link\n     * SequencedSet#addAll addAll} methods throw {@link UnsupportedOperationException}.\n     * Its {@link SequencedSet#reversed reversed} method returns the {@link\n     * #sequencedEntrySet sequencedEntrySet} view of the {@link #reversed reversed} view of\n     * this map. Each of its other methods calls the corresponding method of the {@link\n     * #entrySet entrySet} view of this map.\n     *\n     * @return a {@code SequencedSet} view of this map's {@code entrySet}\n     ",
    "links" : [ "#sequencedEntrySet", "#reversed", "#entrySet", "java.util.SequencedSet#reversed", "java.util.SequencedSet#addAll", "java.util.SequencedSet#add", "UnsupportedOperationException" ]
  } ],
  "methodNames" : [ " SequencedMap<K, V> reversed()", " Map.Entry<K, V> firstEntry()", " Map.Entry<K, V> lastEntry()", " Map.Entry<K, V> pollFirstEntry()", " Map.Entry<K, V> pollLastEntry()", " V putFirst(K k, V v)", " V putLast(K k, V v)", " SequencedSet<K> sequencedKeySet()", " SequencedCollection<V> sequencedValues()", " SequencedSet<Map.Entry<K, V>> sequencedEntrySet()" ],
  "variableNames" : [ ]
}