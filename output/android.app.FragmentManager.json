{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/FragmentManager.java",
  "packageName" : "android.app",
  "className" : "FragmentManager",
  "comment" : "\n * Interface for interacting with {@link Fragment} objects inside of an\n * {@link Activity}\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using fragments, read the\n * <a href=\"{@docRoot}guide/components/fragments.html\">Fragments</a> developer guide.</p>\n * </div>\n *\n * While the FragmentManager API was introduced in\n * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, a version of the API\n * at is also available for use on older platforms through\n * {@link androidx.fragment.app.FragmentActivity}.  See the blog post\n * <a href=\"http://android-developers.blogspot.com/2011/03/fragments-for-all.html\">\n * Fragments For All</a> for more details.\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.fragment.app.FragmentManager} for consistent behavior across all devices\n *      and access to <a href=\"{@docRoot}topic/libraries/architecture/lifecycle.html\">Lifecycle</a>.\n ",
  "links" : [ "android.app.Fragment", "androidx.fragment.app.FragmentManager", "android.os.Build.VERSION_CODES#HONEYCOMB", "android.app.Activity", "androidx.fragment.app.FragmentActivity" ],
  "variables" : [ {
    "name" : "POP_BACK_STACK_INCLUSIVE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #popBackStack(String, int)}\n     * and {@link #popBackStack(int, int)}: If set, and the name or ID of\n     * a back stack entry has been supplied, then all matching entries will\n     * be consumed until one that doesn't match is found or the bottom of\n     * the stack is reached.  Otherwise, all entries up to but not including that entry\n     * will be removed.\n     ",
    "links" : [ "#popBackStack(int", "#popBackStack(String" ]
  } ],
  "methods" : [ {
    "name" : "public abstract FragmentTransaction beginTransaction()",
    "returnType" : "FragmentTransaction",
    "comment" : "\n     * Start a series of edit operations on the Fragments associated with\n     * this FragmentManager.\n     * \n     * <p>Note: A fragment transaction can only be created/committed prior\n     * to an activity saving its state.  If you try to commit a transaction\n     * after {@link Activity#onSaveInstanceState Activity.onSaveInstanceState()}\n     * (and prior to a following {@link Activity#onStart Activity.onStart}\n     * or {@link Activity#onResume Activity.onResume()}, you will get an error.\n     * This is because the framework takes care of saving your current fragments\n     * in the state, and if changes are made after the state is saved then they\n     * will be lost.</p>\n     ",
    "links" : [ "android.app.Activity#onSaveInstanceState", "android.app.Activity#onStart", "android.app.Activity#onResume" ]
  }, {
    "name" : "public FragmentTransaction openTransaction()",
    "returnType" : "FragmentTransaction",
    "comment" : " @hide -- remove once prebuilts are in. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean executePendingTransactions()",
    "returnType" : "boolean",
    "comment" : "\n     * After a {@link FragmentTransaction} is committed with\n     * {@link FragmentTransaction#commit FragmentTransaction.commit()}, it\n     * is scheduled to be executed asynchronously on the process's main thread.\n     * If you want to immediately executing any such pending operations, you\n     * can call this function (only from the main thread) to do so.  Note that\n     * all callbacks and other related behavior will be done from within this\n     * call, so be careful about where this is called from.\n     * <p>\n     * This also forces the start of any postponed Transactions where\n     * {@link Fragment#postponeEnterTransition()} has been called.\n     *\n     * @return Returns true if there were any pending transactions to be\n     * executed.\n     ",
    "links" : [ "android.app.FragmentTransaction#commit", "android.app.FragmentTransaction", "android.app.Fragment#postponeEnterTransition()" ]
  }, {
    "name" : "public abstract Fragment findFragmentById(int id)",
    "returnType" : "Fragment",
    "comment" : "\n     * Finds a fragment that was identified by the given id either when inflated\n     * from XML or as the container ID when added in a transaction.  This first\n     * searches through fragments that are currently added to the manager's\n     * activity; if no such fragment is found, then all fragments currently\n     * on the back stack associated with this ID are searched.\n     * @return The fragment if found or null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Fragment findFragmentByTag(String tag)",
    "returnType" : "Fragment",
    "comment" : "\n     * Finds a fragment that was identified by the given tag either when inflated\n     * from XML or as supplied when added in a transaction.  This first\n     * searches through fragments that are currently added to the manager's\n     * activity; if no such fragment is found, then all fragments currently\n     * on the back stack are searched.\n     * @return The fragment if found or null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void popBackStack()",
    "returnType" : "void",
    "comment" : "\n     * Pop the top state off the back stack.  This function is asynchronous -- it\n     * enqueues the request to pop, but the action will not be performed until the\n     * application returns to its event loop.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean popBackStackImmediate()",
    "returnType" : "boolean",
    "comment" : "\n     * Like {@link #popBackStack()}, but performs the operation immediately\n     * inside of the call.  This is like calling {@link #executePendingTransactions()}\n     * afterwards without forcing the start of postponed Transactions.\n     * @return Returns true if there was something popped, else false.\n     ",
    "links" : [ "#executePendingTransactions()", "#popBackStack()" ]
  }, {
    "name" : "public abstract void popBackStack(String name, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Pop the last fragment transition from the manager's fragment\n     * back stack.  If there is nothing to pop, false is returned.\n     * This function is asynchronous -- it enqueues the\n     * request to pop, but the action will not be performed until the application\n     * returns to its event loop.\n     * \n     * @param name If non-null, this is the name of a previous back state\n     * to look for; if found, all states up to that state will be popped.  The\n     * {@link #POP_BACK_STACK_INCLUSIVE} flag can be used to control whether\n     * the named state itself is popped. If null, only the top state is popped.\n     * @param flags Either 0 or {@link #POP_BACK_STACK_INCLUSIVE}.\n     ",
    "links" : [ "#POP_BACK_STACK_INCLUSIVE" ]
  }, {
    "name" : "public abstract boolean popBackStackImmediate(String name, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Like {@link #popBackStack(String, int)}, but performs the operation immediately\n     * inside of the call.  This is like calling {@link #executePendingTransactions()}\n     * afterwards without forcing the start of postponed Transactions.\n     * @return Returns true if there was something popped, else false.\n     ",
    "links" : [ "#executePendingTransactions()", "#popBackStack(String" ]
  }, {
    "name" : "public abstract void popBackStack(int id, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Pop all back stack states up to the one with the given identifier.\n     * This function is asynchronous -- it enqueues the\n     * request to pop, but the action will not be performed until the application\n     * returns to its event loop.\n     * \n     * @param id Identifier of the stated to be popped. If no identifier exists,\n     * false is returned.\n     * The identifier is the number returned by\n     * {@link FragmentTransaction#commit() FragmentTransaction.commit()}.  The\n     * {@link #POP_BACK_STACK_INCLUSIVE} flag can be used to control whether\n     * the named state itself is popped.\n     * @param flags Either 0 or {@link #POP_BACK_STACK_INCLUSIVE}.\n     ",
    "links" : [ "#POP_BACK_STACK_INCLUSIVE", "android.app.FragmentTransaction#commit()" ]
  }, {
    "name" : "public abstract boolean popBackStackImmediate(int id, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Like {@link #popBackStack(int, int)}, but performs the operation immediately\n     * inside of the call.  This is like calling {@link #executePendingTransactions()}\n     * afterwards without forcing the start of postponed Transactions.\n     * @return Returns true if there was something popped, else false.\n     ",
    "links" : [ "#executePendingTransactions()", "#popBackStack(int" ]
  }, {
    "name" : "public abstract int getBackStackEntryCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of entries currently in the back stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract BackStackEntry getBackStackEntryAt(int index)",
    "returnType" : "BackStackEntry",
    "comment" : "\n     * Return the BackStackEntry at index <var>index</var> in the back stack;\n     * where the item on the bottom of the stack has index 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addOnBackStackChangedListener(OnBackStackChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a new listener for changes to the fragment back stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeOnBackStackChangedListener(OnBackStackChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener that was previously added with\n     * {@link #addOnBackStackChangedListener(OnBackStackChangedListener)}.\n     ",
    "links" : [ "#addOnBackStackChangedListener(OnBackStackChangedListener)" ]
  }, {
    "name" : "public abstract void putFragment(Bundle bundle, String key, Fragment fragment)",
    "returnType" : "void",
    "comment" : "\n     * Put a reference to a fragment in a Bundle.  This Bundle can be\n     * persisted as saved state, and when later restoring\n     * {@link #getFragment(Bundle, String)} will return the current\n     * instance of the same fragment.\n     *\n     * @param bundle The bundle in which to put the fragment reference.\n     * @param key The name of the entry in the bundle.\n     * @param fragment The Fragment whose reference is to be stored.\n     ",
    "links" : [ "#getFragment(Bundle" ]
  }, {
    "name" : "public abstract Fragment getFragment(Bundle bundle, String key)",
    "returnType" : "Fragment",
    "comment" : "\n     * Retrieve the current Fragment instance for a reference previously\n     * placed with {@link #putFragment(Bundle, String, Fragment)}.\n     *\n     * @param bundle The bundle from which to retrieve the fragment reference.\n     * @param key The name of the entry in the bundle.\n     * @return Returns the current Fragment instance that is associated with\n     * the given reference.\n     ",
    "links" : [ "#putFragment(Bundle" ]
  }, {
    "name" : "public abstract List<Fragment> getFragments()",
    "returnType" : "List<Fragment>",
    "comment" : "\n     * Get a list of all fragments that are currently added to the FragmentManager.\n     * This may include those that are hidden as well as those that are shown.\n     * This will not include any fragments only in the back stack, or fragments that\n     * are detached or removed.\n     * <p>\n     * The order of the fragments in the list is the order in which they were\n     * added or attached.\n     *\n     * @return A list of all fragments that are added to the FragmentManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Fragment.SavedState saveFragmentInstanceState(Fragment f)",
    "returnType" : "Fragment.SavedState",
    "comment" : "\n     * Save the current instance state of the given Fragment.  This can be\n     * used later when creating a new instance of the Fragment and adding\n     * it to the fragment manager, to have it create itself to match the\n     * current state returned here.  Note that there are limits on how\n     * this can be used:\n     *\n     * <ul>\n     * <li>The Fragment must currently be attached to the FragmentManager.\n     * <li>A new Fragment created using this saved state must be the same class\n     * type as the Fragment it was created from.\n     * <li>The saved state can not contain dependencies on other fragments --\n     * that is it can't use {@link #putFragment(Bundle, String, Fragment)} to\n     * store a fragment reference because that reference may not be valid when\n     * this saved state is later used.  Likewise the Fragment's target and\n     * result code are not included in this state.\n     * </ul>\n     *\n     * @param f The Fragment whose state is to be saved.\n     * @return The generated state.  This will be null if there was no\n     * interesting state created by the fragment.\n     ",
    "links" : [ "#putFragment(Bundle" ]
  }, {
    "name" : "public abstract boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the final {@link Activity#onDestroy() Activity.onDestroy()}\n     * call has been made on the FragmentManager's Activity, so this instance is now dead.\n     ",
    "links" : [ "android.app.Activity#onDestroy()" ]
  }, {
    "name" : "public abstract void registerFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb, boolean recursive)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link FragmentLifecycleCallbacks} to listen to fragment lifecycle events\n     * happening in this FragmentManager. All registered callbacks will be automatically\n     * unregistered when this FragmentManager is destroyed.\n     *\n     * @param cb Callbacks to register\n     * @param recursive true to automatically register this callback for all child FragmentManagers\n     ",
    "links" : [ "FragmentLifecycleCallbacks" ]
  }, {
    "name" : "public abstract void unregisterFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered {@link FragmentLifecycleCallbacks}. If the callback\n     * was not previously registered this call has no effect. All registered callbacks will be\n     * automatically unregistered when this FragmentManager is destroyed.\n     *\n     * @param cb Callbacks to unregister\n     ",
    "links" : [ "FragmentLifecycleCallbacks" ]
  }, {
    "name" : "public abstract Fragment getPrimaryNavigationFragment()",
    "returnType" : "Fragment",
    "comment" : "\n     * Return the currently active primary navigation fragment for this FragmentManager.\n     *\n     * <p>The primary navigation fragment's\n     * {@link Fragment#getChildFragmentManager() child FragmentManager} will be called first\n     * to process delegated navigation actions such as {@link #popBackStack()} if no ID\n     * or transaction name is provided to pop to.</p>\n     *\n     * @return the fragment designated as the primary navigation fragment\n     ",
    "links" : [ "android.app.Fragment#getChildFragmentManager()", "#popBackStack()" ]
  }, {
    "name" : "public abstract void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Print the FragmentManager's state into the given stream.\n     *\n     * @param prefix Text to print at the front of each line.\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param writer A PrintWriter to which the dump is to be set.\n     * @param args Additional arguments to the dump request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enableDebugLogging(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the framework's internal fragment manager debugging\n     * logs are turned on.  If enabled, you will see output in logcat as\n     * the framework performs fragment operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateOptionsMenu()",
    "returnType" : "void",
    "comment" : "\n     * Invalidate the attached activity's options menu as necessary.\n     * This may end up being deferred until we move to the resumed state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isStateSaved()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the FragmentManager's state has already been saved\n     * by its host. Any operations that would change saved state should not be performed\n     * if this method returns true. For example, any popBackStack() method, such as\n     * {@link #popBackStackImmediate()} or any FragmentTransaction using\n     * {@link FragmentTransaction#commit()} instead of\n     * {@link FragmentTransaction#commitAllowingStateLoss()} will change\n     * the state and will result in an error.\n     *\n     * @return true if this FragmentManager's state has already been saved by its host\n     ",
    "links" : [ "#popBackStackImmediate()", "android.app.FragmentTransaction#commitAllowingStateLoss()", "android.app.FragmentTransaction#commit()" ]
  } ],
  "methodNames" : [ "public abstract FragmentTransaction beginTransaction()", "public FragmentTransaction openTransaction()", "public abstract boolean executePendingTransactions()", "public abstract Fragment findFragmentById(int id)", "public abstract Fragment findFragmentByTag(String tag)", "public abstract void popBackStack()", "public abstract boolean popBackStackImmediate()", "public abstract void popBackStack(String name, int flags)", "public abstract boolean popBackStackImmediate(String name, int flags)", "public abstract void popBackStack(int id, int flags)", "public abstract boolean popBackStackImmediate(int id, int flags)", "public abstract int getBackStackEntryCount()", "public abstract BackStackEntry getBackStackEntryAt(int index)", "public abstract void addOnBackStackChangedListener(OnBackStackChangedListener listener)", "public abstract void removeOnBackStackChangedListener(OnBackStackChangedListener listener)", "public abstract void putFragment(Bundle bundle, String key, Fragment fragment)", "public abstract Fragment getFragment(Bundle bundle, String key)", "public abstract List<Fragment> getFragments()", "public abstract Fragment.SavedState saveFragmentInstanceState(Fragment f)", "public abstract boolean isDestroyed()", "public abstract void registerFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb, boolean recursive)", "public abstract void unregisterFragmentLifecycleCallbacks(FragmentLifecycleCallbacks cb)", "public abstract Fragment getPrimaryNavigationFragment()", "public abstract void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", "public static void enableDebugLogging(boolean enabled)", "public void invalidateOptionsMenu()", "public abstract boolean isStateSaved()" ],
  "variableNames" : [ "POP_BACK_STACK_INCLUSIVE" ]
}