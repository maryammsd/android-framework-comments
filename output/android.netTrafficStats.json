{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/TrafficStats.java",
  "packageName" : "android.net",
  "className" : "TrafficStats",
  "comment" : "\n * Class that provides network traffic statistics. These statistics include\n * bytes transmitted and received and network packets transmitted and received,\n * over all interfaces, over the mobile interface, and on a per-UID basis.\n * <p>\n * These statistics may not be available on all platforms. If the statistics are\n * not supported by this device, {@link #UNSUPPORTED} will be returned.\n * <p>\n * Note that the statistics returned by this class reset and start from zero\n * after every reboot. To access more robust historical network statistics data,\n * use {@link NetworkStatsManager} instead.\n ",
  "variables" : [ {
    "name" : "UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * The return value to indicate that the device does not support the statistic.\n     ",
    "links" : [ ]
  }, {
    "name" : "KB_IN_BYTES",
    "type" : "long",
    "comment" : " @hide @deprecated use {@link DataUnit} instead to clarify SI-vs-IEC ",
    "links" : [ "DataUnit" ]
  }, {
    "name" : "MB_IN_BYTES",
    "type" : "long",
    "comment" : " @hide @deprecated use {@link DataUnit} instead to clarify SI-vs-IEC ",
    "links" : [ "DataUnit" ]
  }, {
    "name" : "GB_IN_BYTES",
    "type" : "long",
    "comment" : " @hide @deprecated use {@link DataUnit} instead to clarify SI-vs-IEC ",
    "links" : [ "DataUnit" ]
  }, {
    "name" : "TB_IN_BYTES",
    "type" : "long",
    "comment" : " @hide @deprecated use {@link DataUnit} instead to clarify SI-vs-IEC ",
    "links" : [ "DataUnit" ]
  }, {
    "name" : "PB_IN_BYTES",
    "type" : "long",
    "comment" : " @hide @deprecated use {@link DataUnit} instead to clarify SI-vs-IEC ",
    "links" : [ "DataUnit" ]
  }, {
    "name" : "UID_REMOVED",
    "type" : "int",
    "comment" : "\n     * Special UID value used when collecting {@link NetworkStatsHistory} for\n     * removed applications.\n     *\n     * @hide\n     ",
    "links" : [ "NetworkStatsHistory" ]
  }, {
    "name" : "UID_TETHERING",
    "type" : "int",
    "comment" : "\n     * Special UID value used when collecting {@link NetworkStatsHistory} for\n     * tethering traffic.\n     *\n     * @hide\n     ",
    "links" : [ "NetworkStatsHistory" ]
  }, {
    "name" : "TAG_NETWORK_STACK_RANGE_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG_NETWORK_STACK_RANGE_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG_SYSTEM_IMPERSONATION_RANGE_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG_SYSTEM_IMPERSONATION_RANGE_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG_NETWORK_STACK_IMPERSONATION_RANGE_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG_NETWORK_STACK_IMPERSONATION_RANGE_END",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG_SYSTEM_DOWNLOAD",
    "type" : "int",
    "comment" : "\n     * Default tag value for {@link DownloadManager} traffic.\n     *\n     * @hide\n     ",
    "links" : [ "DownloadManager" ]
  }, {
    "name" : "TAG_SYSTEM_MEDIA",
    "type" : "int",
    "comment" : "\n     * Default tag value for {@link MediaPlayer} traffic.\n     *\n     * @hide\n     ",
    "links" : [ "MediaPlayer" ]
  }, {
    "name" : "TAG_SYSTEM_BACKUP",
    "type" : "int",
    "comment" : "\n     * Default tag value for {@link BackupManager} backup traffic; that is,\n     * traffic from the device to the storage backend.\n     *\n     * @hide\n     ",
    "links" : [ "BackupManager" ]
  }, {
    "name" : "TAG_SYSTEM_RESTORE",
    "type" : "int",
    "comment" : "\n     * Default tag value for {@link BackupManager} restore traffic; that is,\n     * app data retrieved from the storage backend at install time.\n     *\n     * @hide\n     ",
    "links" : [ "BackupManager" ]
  }, {
    "name" : "TAG_SYSTEM_APP",
    "type" : "int",
    "comment" : "\n     * Default tag value for code (typically APKs) downloaded by an app store on\n     * behalf of the app, such as updates.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_SYSTEM_PROBE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sStatsService",
    "type" : "INetworkStatsService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sActiveProfilingStart",
    "type" : "NetworkStats",
    "comment" : "\n     * Snapshot of {@link NetworkStats} when the currently active profiling\n     * session started, or {@code null} if no session active.\n     *\n     * @see #startDataProfiling(Context)\n     * @see #stopDataProfiling(Context)\n     ",
    "links" : [ "NetworkStats" ]
  }, {
    "name" : "sProfilingLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOOPBACK_IFACE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_RX_BYTES",
    "type" : "int",
    "comment" : " NOTE: keep these in sync with android_net_TrafficStats.cpp",
    "links" : [ ]
  }, {
    "name" : "TYPE_RX_PACKETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_TX_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_TX_PACKETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_TCP_RX_PACKETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_TCP_TX_PACKETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static synchronized INetworkStatsService getStatsService()",
    "returnType" : "INetworkStatsService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setThreadStatsTag(int tag)",
    "returnType" : "void",
    "comment" : "\n     * Set active tag to use when accounting {@link Socket} traffic originating\n     * from the current thread. Only one active tag per thread is supported.\n     * <p>\n     * Changes only take effect during subsequent calls to\n     * {@link #tagSocket(Socket)}.\n     * <p>\n     * Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and\n     * used internally by system services like {@link DownloadManager} when\n     * performing traffic on behalf of an application.\n     *\n     * @see #clearThreadStatsTag()\n     ",
    "links" : [ "Socket", "#tagSocket", "DownloadManager" ]
  }, {
    "name" : "public static int getAndSetThreadStatsTag(int tag)",
    "returnType" : "int",
    "comment" : "\n     * Set active tag to use when accounting {@link Socket} traffic originating\n     * from the current thread. Only one active tag per thread is supported.\n     * <p>\n     * Changes only take effect during subsequent calls to\n     * {@link #tagSocket(Socket)}.\n     * <p>\n     * Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and\n     * used internally by system services like {@link DownloadManager} when\n     * performing traffic on behalf of an application.\n     *\n     * @return the current tag for the calling thread, which can be used to\n     *         restore any existing values after a nested operation is finished\n     ",
    "links" : [ "Socket", "#tagSocket", "DownloadManager" ]
  }, {
    "name" : "public static void setThreadStatsTagBackup()",
    "returnType" : "void",
    "comment" : "\n     * Set active tag to use when accounting {@link Socket} traffic originating\n     * from the current thread. The tag used internally is well-defined to\n     * distinguish all backup-related traffic.\n     *\n     * @hide\n     ",
    "links" : [ "Socket" ]
  }, {
    "name" : "public static void setThreadStatsTagRestore()",
    "returnType" : "void",
    "comment" : "\n     * Set active tag to use when accounting {@link Socket} traffic originating\n     * from the current thread. The tag used internally is well-defined to\n     * distinguish all restore-related traffic.\n     *\n     * @hide\n     ",
    "links" : [ "Socket" ]
  }, {
    "name" : "public static void setThreadStatsTagApp()",
    "returnType" : "void",
    "comment" : "\n     * Set active tag to use when accounting {@link Socket} traffic originating\n     * from the current thread. The tag used internally is well-defined to\n     * distinguish all code (typically APKs) downloaded by an app store on\n     * behalf of the app, such as updates.\n     *\n     * @hide\n     ",
    "links" : [ "Socket" ]
  }, {
    "name" : "public static int getThreadStatsTag()",
    "returnType" : "int",
    "comment" : "\n     * Get the active tag used when accounting {@link Socket} traffic originating\n     * from the current thread. Only one active tag per thread is supported.\n     * {@link #tagSocket(Socket)}.\n     *\n     * @see #setThreadStatsTag(int)\n     ",
    "links" : [ "Socket", "#tagSocket" ]
  }, {
    "name" : "public static void clearThreadStatsTag()",
    "returnType" : "void",
    "comment" : "\n     * Clear any active tag set to account {@link Socket} traffic originating\n     * from the current thread.\n     *\n     * @see #setThreadStatsTag(int)\n     ",
    "links" : [ "Socket" ]
  }, {
    "name" : "public static void setThreadStatsUid(int uid)",
    "returnType" : "void",
    "comment" : "\n     * Set specific UID to use when accounting {@link Socket} traffic\n     * originating from the current thread. Designed for use when performing an\n     * operation on behalf of another application, or when another application\n     * is performing operations on your behalf.\n     * <p>\n     * Any app can <em>accept</em> blame for traffic performed on a socket\n     * originally created by another app by calling this method with the\n     * {@link android.system.Os#getuid()} value. However, only apps holding the\n     * {@code android.Manifest.permission#UPDATE_DEVICE_STATS} permission may\n     * <em>assign</em> blame to another UIDs.\n     * <p>\n     * Changes only take effect during subsequent calls to\n     * {@link #tagSocket(Socket)}.\n     ",
    "links" : [ "Socket", "android.system.Os#getuid", "#tagSocket" ]
  }, {
    "name" : "public static int getThreadStatsUid()",
    "returnType" : "int",
    "comment" : "\n     * Get the active UID used when accounting {@link Socket} traffic originating\n     * from the current thread. Only one active tag per thread is supported.\n     * {@link #tagSocket(Socket)}.\n     *\n     * @see #setThreadStatsUid(int)\n     ",
    "links" : [ "Socket", "#tagSocket" ]
  }, {
    "name" : "public static void setThreadStatsUidSelf()",
    "returnType" : "void",
    "comment" : "\n     * Set specific UID to use when accounting {@link Socket} traffic\n     * originating from the current thread as the calling UID. Designed for use\n     * when another application is performing operations on your behalf.\n     * <p>\n     * Changes only take effect during subsequent calls to\n     * {@link #tagSocket(Socket)}.\n     *\n     * @removed\n     * @deprecated use {@link #setThreadStatsUid(int)} instead.\n     ",
    "links" : [ "Socket", "#tagSocket", "#setThreadStatsUid" ]
  }, {
    "name" : "public static void clearThreadStatsUid()",
    "returnType" : "void",
    "comment" : "\n     * Clear any active UID set to account {@link Socket} traffic originating\n     * from the current thread.\n     *\n     * @see #setThreadStatsUid(int)\n     ",
    "links" : [ "Socket" ]
  }, {
    "name" : "public static void tagSocket(Socket socket) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Tag the given {@link Socket} with any statistics parameters active for\n     * the current thread. Subsequent calls always replace any existing\n     * parameters. When finished, call {@link #untagSocket(Socket)} to remove\n     * statistics parameters.\n     *\n     * @see #setThreadStatsTag(int)\n     ",
    "links" : [ "Socket", "#untagSocket" ]
  }, {
    "name" : "public static void untagSocket(Socket socket) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Remove any statistics parameters from the given {@link Socket}.\n     * <p>\n     * In Android 8.1 (API level 27) and lower, a socket is automatically\n     * untagged when it's sent to another process using binder IPC with a\n     * {@code ParcelFileDescriptor} container. In Android 9.0 (API level 28)\n     * and higher, the socket tag is kept when the socket is sent to another\n     * process using binder IPC. You can mimic the previous behavior by\n     * calling {@code untagSocket()} before sending the socket to another\n     * process.\n     ",
    "links" : [ "Socket" ]
  }, {
    "name" : "public static void tagDatagramSocket(DatagramSocket socket) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Tag the given {@link DatagramSocket} with any statistics parameters\n     * active for the current thread. Subsequent calls always replace any\n     * existing parameters. When finished, call\n     * {@link #untagDatagramSocket(DatagramSocket)} to remove statistics\n     * parameters.\n     *\n     * @see #setThreadStatsTag(int)\n     ",
    "links" : [ "DatagramSocket", "#untagDatagramSocket" ]
  }, {
    "name" : "public static void untagDatagramSocket(DatagramSocket socket) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Remove any statistics parameters from the given {@link DatagramSocket}.\n     ",
    "links" : [ "DatagramSocket" ]
  }, {
    "name" : "public static void tagFileDescriptor(FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Tag the given {@link FileDescriptor} socket with any statistics\n     * parameters active for the current thread. Subsequent calls always replace\n     * any existing parameters. When finished, call\n     * {@link #untagFileDescriptor(FileDescriptor)} to remove statistics\n     * parameters.\n     *\n     * @see #setThreadStatsTag(int)\n     ",
    "links" : [ "FileDescriptor", "#untagFileDescriptor" ]
  }, {
    "name" : "public static void untagFileDescriptor(FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove any statistics parameters from the given {@link FileDescriptor}\n     * socket.\n     ",
    "links" : [ "FileDescriptor" ]
  }, {
    "name" : "public static void startDataProfiling(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Start profiling data usage for current UID. Only one profiling session\n     * can be active at a time.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NetworkStats stopDataProfiling(Context context)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Stop profiling data usage for current UID.\n     *\n     * @return Detailed {@link NetworkStats} of data that occurred since last\n     *         {@link #startDataProfiling(Context)} call.\n     * @hide\n     ",
    "links" : [ "NetworkStats", "#startDataProfiling" ]
  }, {
    "name" : "public static void incrementOperationCount(int operationCount)",
    "returnType" : "void",
    "comment" : "\n     * Increment count of network operations performed under the accounting tag\n     * currently active on the calling thread. This can be used to derive\n     * bytes-per-operation.\n     *\n     * @param operationCount Number of operations to increment count by.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void incrementOperationCount(int tag, int operationCount)",
    "returnType" : "void",
    "comment" : "\n     * Increment count of network operations performed under the given\n     * accounting tag. This can be used to derive bytes-per-operation.\n     *\n     * @param tag Accounting tag used in {@link #setThreadStatsTag(int)}.\n     * @param operationCount Number of operations to increment count by.\n     ",
    "links" : [ "#setThreadStatsTag" ]
  }, {
    "name" : "public static void closeQuietly(INetworkStatsSession session)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static long addIfSupported(long stat)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long getMobileTxPackets()",
    "returnType" : "long",
    "comment" : "\n     * Return number of packets transmitted across mobile networks since device\n     * boot. Counts packets across all mobile network interfaces, and always\n     * increases monotonically since device boot. Statistics are measured at the\n     * network layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getMobileRxPackets()",
    "returnType" : "long",
    "comment" : "\n     * Return number of packets received across mobile networks since device\n     * boot. Counts packets across all mobile network interfaces, and always\n     * increases monotonically since device boot. Statistics are measured at the\n     * network layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getMobileTxBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return number of bytes transmitted across mobile networks since device\n     * boot. Counts packets across all mobile network interfaces, and always\n     * increases monotonically since device boot. Statistics are measured at the\n     * network layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getMobileRxBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return number of bytes received across mobile networks since device boot.\n     * Counts packets across all mobile network interfaces, and always increases\n     * monotonically since device boot. Statistics are measured at the network\n     * layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getMobileTcpRxPackets()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getMobileTcpTxPackets()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getTxPackets(@NonNull String iface)",
    "returnType" : "long",
    "comment" : "\n     * Return the number of packets transmitted on the specified interface since\n     * device boot. Statistics are measured at the network layer, so both TCP and\n     * UDP usage are included.\n     *\n     * @param iface The name of the interface.\n     * @return The number of transmitted packets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getRxPackets(@NonNull String iface)",
    "returnType" : "long",
    "comment" : "\n     * Return the number of packets received on the specified interface since\n     * device boot. Statistics are measured at the network layer, so both TCP\n     * and UDP usage are included.\n     *\n     * @param iface The name of the interface.\n     * @return The number of received packets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getTxBytes(String iface)",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getRxBytes(String iface)",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getLoopbackTxPackets()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getLoopbackRxPackets()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getLoopbackTxBytes()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getLoopbackRxBytes()",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getTotalTxPackets()",
    "returnType" : "long",
    "comment" : "\n     * Return number of packets transmitted since device boot. Counts packets\n     * across all network interfaces, and always increases monotonically since\n     * device boot. Statistics are measured at the network layer, so they\n     * include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getTotalRxPackets()",
    "returnType" : "long",
    "comment" : "\n     * Return number of packets received since device boot. Counts packets\n     * across all network interfaces, and always increases monotonically since\n     * device boot. Statistics are measured at the network layer, so they\n     * include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getTotalTxBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return number of bytes transmitted since device boot. Counts packets\n     * across all network interfaces, and always increases monotonically since\n     * device boot. Statistics are measured at the network layer, so they\n     * include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getTotalRxBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return number of bytes received since device boot. Counts packets across\n     * all network interfaces, and always increases monotonically since device\n     * boot. Statistics are measured at the network layer, so they include both\n     * TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidTxBytes(int uid)",
    "returnType" : "long",
    "comment" : "\n     * Return number of bytes transmitted by the given UID since device boot.\n     * Counts packets across all network interfaces, and always increases\n     * monotonically since device boot. Statistics are measured at the network\n     * layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may\n     * return {@link #UNSUPPORTED} on devices where statistics aren't available.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#N} this will only\n     * report traffic statistics for the calling UID. It will return\n     * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access\n     * historical network statistics belonging to other UIDs, use\n     * {@link NetworkStatsManager}.\n     *\n     * @see android.os.Process#myUid()\n     * @see android.content.pm.ApplicationInfo#uid\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED", "android.os.Build.VERSION_CODES#N", "#UNSUPPORTED", "NetworkStatsManager" ]
  }, {
    "name" : "public static long getUidRxBytes(int uid)",
    "returnType" : "long",
    "comment" : "\n     * Return number of bytes received by the given UID since device boot.\n     * Counts packets across all network interfaces, and always increases\n     * monotonically since device boot. Statistics are measured at the network\n     * layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return\n     * {@link #UNSUPPORTED} on devices where statistics aren't available.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#N} this will only\n     * report traffic statistics for the calling UID. It will return\n     * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access\n     * historical network statistics belonging to other UIDs, use\n     * {@link NetworkStatsManager}.\n     *\n     * @see android.os.Process#myUid()\n     * @see android.content.pm.ApplicationInfo#uid\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED", "android.os.Build.VERSION_CODES#N", "#UNSUPPORTED", "NetworkStatsManager" ]
  }, {
    "name" : "public static long getUidTxPackets(int uid)",
    "returnType" : "long",
    "comment" : "\n     * Return number of packets transmitted by the given UID since device boot.\n     * Counts packets across all network interfaces, and always increases\n     * monotonically since device boot. Statistics are measured at the network\n     * layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return\n     * {@link #UNSUPPORTED} on devices where statistics aren't available.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#N} this will only\n     * report traffic statistics for the calling UID. It will return\n     * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access\n     * historical network statistics belonging to other UIDs, use\n     * {@link NetworkStatsManager}.\n     *\n     * @see android.os.Process#myUid()\n     * @see android.content.pm.ApplicationInfo#uid\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED", "android.os.Build.VERSION_CODES#N", "#UNSUPPORTED", "NetworkStatsManager" ]
  }, {
    "name" : "public static long getUidRxPackets(int uid)",
    "returnType" : "long",
    "comment" : "\n     * Return number of packets received by the given UID since device boot.\n     * Counts packets across all network interfaces, and always increases\n     * monotonically since device boot. Statistics are measured at the network\n     * layer, so they include both TCP and UDP usage.\n     * <p>\n     * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return\n     * {@link #UNSUPPORTED} on devices where statistics aren't available.\n     * <p>\n     * Starting in {@link android.os.Build.VERSION_CODES#N} this will only\n     * report traffic statistics for the calling UID. It will return\n     * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access\n     * historical network statistics belonging to other UIDs, use\n     * {@link NetworkStatsManager}.\n     *\n     * @see android.os.Process#myUid()\n     * @see android.content.pm.ApplicationInfo#uid\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED", "android.os.Build.VERSION_CODES#N", "#UNSUPPORTED", "NetworkStatsManager" ]
  }, {
    "name" : "public static long getUidTcpTxBytes(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidTxBytes(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidTcpRxBytes(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidRxBytes(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidUdpTxBytes(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidTxBytes(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidUdpRxBytes(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidRxBytes(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidTcpTxSegments(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidTxPackets(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidTcpRxSegments(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidRxPackets(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidUdpTxPackets(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidTxPackets(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "public static long getUidUdpRxPackets(int uid)",
    "returnType" : "long",
    "comment" : "\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     *             transport layer statistics are no longer available, and will\n     *             always return {@link #UNSUPPORTED}.\n     * @see #getUidRxPackets(int)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "#UNSUPPORTED" ]
  }, {
    "name" : "private static NetworkStats getDataLayerSnapshotForUid(Context context)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Return detailed {@link NetworkStats} for the current UID. Requires no\n     * special permission.\n     ",
    "links" : [ "NetworkStats" ]
  }, {
    "name" : "private static String[] getMobileIfaces()",
    "returnType" : "String[]",
    "comment" : "\n     * Return set of any ifaces associated with mobile networks since boot.\n     * Interfaces are never removed from this list, so counters should always be\n     * monotonic.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "UNSUPPORTED", "KB_IN_BYTES", "MB_IN_BYTES", "GB_IN_BYTES", "TB_IN_BYTES", "PB_IN_BYTES", "UID_REMOVED", "UID_TETHERING", "TAG_NETWORK_STACK_RANGE_START", "TAG_NETWORK_STACK_RANGE_END", "TAG_SYSTEM_IMPERSONATION_RANGE_START", "TAG_SYSTEM_IMPERSONATION_RANGE_END", "TAG_NETWORK_STACK_IMPERSONATION_RANGE_START", "TAG_NETWORK_STACK_IMPERSONATION_RANGE_END", "TAG_SYSTEM_DOWNLOAD", "TAG_SYSTEM_MEDIA", "TAG_SYSTEM_BACKUP", "TAG_SYSTEM_RESTORE", "TAG_SYSTEM_APP", "TAG_SYSTEM_PROBE", "sStatsService", "sActiveProfilingStart", "sProfilingLock", "LOOPBACK_IFACE", "TYPE_RX_BYTES", "TYPE_RX_PACKETS", "TYPE_TX_BYTES", "TYPE_TX_PACKETS", "TYPE_TCP_RX_PACKETS", "TYPE_TCP_TX_PACKETS" ],
  "methodNames" : [ "private static synchronized INetworkStatsService getStatsService()", "public static void setThreadStatsTag(int tag)", "public static int getAndSetThreadStatsTag(int tag)", "public static void setThreadStatsTagBackup()", "public static void setThreadStatsTagRestore()", "public static void setThreadStatsTagApp()", "public static int getThreadStatsTag()", "public static void clearThreadStatsTag()", "public static void setThreadStatsUid(int uid)", "public static int getThreadStatsUid()", "public static void setThreadStatsUidSelf()", "public static void clearThreadStatsUid()", "public static void tagSocket(Socket socket) throws SocketException", "public static void untagSocket(Socket socket) throws SocketException", "public static void tagDatagramSocket(DatagramSocket socket) throws SocketException", "public static void untagDatagramSocket(DatagramSocket socket) throws SocketException", "public static void tagFileDescriptor(FileDescriptor fd) throws IOException", "public static void untagFileDescriptor(FileDescriptor fd) throws IOException", "public static void startDataProfiling(Context context)", "public static NetworkStats stopDataProfiling(Context context)", "public static void incrementOperationCount(int operationCount)", "public static void incrementOperationCount(int tag, int operationCount)", "public static void closeQuietly(INetworkStatsSession session)", "private static long addIfSupported(long stat)", "public static long getMobileTxPackets()", "public static long getMobileRxPackets()", "public static long getMobileTxBytes()", "public static long getMobileRxBytes()", "public static long getMobileTcpRxPackets()", "public static long getMobileTcpTxPackets()", "public static long getTxPackets(@NonNull String iface)", "public static long getRxPackets(@NonNull String iface)", "public static long getTxBytes(String iface)", "public static long getRxBytes(String iface)", "public static long getLoopbackTxPackets()", "public static long getLoopbackRxPackets()", "public static long getLoopbackTxBytes()", "public static long getLoopbackRxBytes()", "public static long getTotalTxPackets()", "public static long getTotalRxPackets()", "public static long getTotalTxBytes()", "public static long getTotalRxBytes()", "public static long getUidTxBytes(int uid)", "public static long getUidRxBytes(int uid)", "public static long getUidTxPackets(int uid)", "public static long getUidRxPackets(int uid)", "public static long getUidTcpTxBytes(int uid)", "public static long getUidTcpRxBytes(int uid)", "public static long getUidUdpTxBytes(int uid)", "public static long getUidUdpRxBytes(int uid)", "public static long getUidTcpTxSegments(int uid)", "public static long getUidTcpRxSegments(int uid)", "public static long getUidUdpTxPackets(int uid)", "public static long getUidUdpRxPackets(int uid)", "private static NetworkStats getDataLayerSnapshotForUid(Context context)", "private static String[] getMobileIfaces()" ]
}