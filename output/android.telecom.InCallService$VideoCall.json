{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/InCallService.java",
  "packageName" : "android.telecom",
  "className" : "VideoCall",
  "comment" : "\n     * Used to issue commands to the {@link Connection.VideoProvider} associated with a\n     * {@link Call}.\n     ",
  "links" : [ "Connection.VideoProvider", "android.telecom.Call" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void destroy()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerCallback(VideoCall.Callback callback)",
    "returnType" : "void",
    "comment" : "\n         * Registers a callback to receive commands and state changes for video calls.\n         *\n         * @param callback The video call callback.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerCallback(VideoCall.Callback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n         * Registers a callback to receive commands and state changes for video calls.\n         *\n         * @param callback The video call callback.\n         * @param handler A handler which commands and status changes will be delivered to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unregisterCallback(VideoCall.Callback callback)",
    "returnType" : "void",
    "comment" : "\n         * Clears the video call callback set via {@link #registerCallback}.\n         *\n         * @param callback The video call callback to clear.\n         ",
    "links" : [ "#registerCallback" ]
  }, {
    "name" : "public abstract void setCamera(String cameraId)",
    "returnType" : "void",
    "comment" : "\n         * Sets the camera to be used for the outgoing video.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onSetCamera(String)}.\n         *\n         * @param cameraId The id of the camera (use ids as reported by\n         * {@link CameraManager#getCameraIdList()}).\n         ",
    "links" : [ "Connection.VideoProvider#onSetCamera(String)", "android.hardware.camera2.CameraManager#getCameraIdList()" ]
  }, {
    "name" : "public abstract void setPreviewSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface to be used for displaying a preview of what the user's camera is\n         * currently capturing.  When video transmission is enabled, this is the video signal which\n         * is sent to the remote device.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onSetPreviewSurface(Surface)}.\n         *\n         * @param surface The {@link Surface}.\n         ",
    "links" : [ "android.view.Surface", "Connection.VideoProvider#onSetPreviewSurface(Surface)" ]
  }, {
    "name" : "public abstract void setDisplaySurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface to be used for displaying the video received from the remote device.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onSetDisplaySurface(Surface)}.\n         *\n         * @param surface The {@link Surface}.\n         ",
    "links" : [ "android.view.Surface", "Connection.VideoProvider#onSetDisplaySurface(Surface)" ]
  }, {
    "name" : "public abstract void setDeviceOrientation(int rotation)",
    "returnType" : "void",
    "comment" : "\n         * Sets the device orientation, in degrees.  Assumes that a standard portrait orientation of\n         * the device is 0 degrees.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onSetDeviceOrientation(int)}.\n         *\n         * @param rotation The device orientation, in degrees.\n         ",
    "links" : [ "Connection.VideoProvider#onSetDeviceOrientation(int)" ]
  }, {
    "name" : "public abstract void setZoom(float value)",
    "returnType" : "void",
    "comment" : "\n         * Sets the camera zoom ratio.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onSetZoom(float)}.\n         *\n         * @param value The camera zoom ratio; for the current camera, should be a value in the\n         * range defined by\n         * {@link android.hardware.camera2.CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE}.\n         ",
    "links" : [ "Connection.VideoProvider#onSetZoom(float)", "android.hardware.camera2.CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE" ]
  }, {
    "name" : "public abstract void sendSessionModifyRequest(VideoProfile requestProfile)",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to modify the properties of the current video session.\n         * <p>\n         * Example scenarios include: requesting an audio-only call to be upgraded to a\n         * bi-directional video call, turning on or off the user's camera, sending a pause signal\n         * when the {@link InCallService} is no longer the foreground application.\n         * <p>\n         * Handled by\n         * {@link Connection.VideoProvider#onSendSessionModifyRequest(VideoProfile, VideoProfile)}.\n         *\n         * @param requestProfile The requested call video properties.\n         ",
    "links" : [ "com.android.internal.telecom.IInCallService", "Connection.VideoProvider#onSendSessionModifyRequest(VideoProfile" ]
  }, {
    "name" : "public abstract void sendSessionModifyResponse(VideoProfile responseProfile)",
    "returnType" : "void",
    "comment" : "\n         * Provides a response to a request to change the current call video session\n         * properties.  This should be called in response to a request the {@link InCallService} has\n         * received via {@link VideoCall.Callback#onSessionModifyRequestReceived}.\n         * <p>\n         * Handled by\n         * {@link Connection.VideoProvider#onSendSessionModifyResponse(VideoProfile)}.\n         *\n         * @param responseProfile The response call video properties.\n         ",
    "links" : [ "Connection.VideoProvider#onSendSessionModifyResponse(VideoProfile)", "com.android.internal.telecom.IInCallService", "VideoCall.Callback#onSessionModifyRequestReceived" ]
  }, {
    "name" : "public abstract void requestCameraCapabilities()",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to the {@link Connection.VideoProvider} to retrieve the capabilities\n         * of the current camera.  The current camera is selected using\n         * {@link VideoCall#setCamera(String)}.\n         * <p>\n         * Camera capabilities are reported to the caller via\n         * {@link VideoCall.Callback#onCameraCapabilitiesChanged(VideoProfile.CameraCapabilities)}.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onRequestCameraCapabilities()}.\n         ",
    "links" : [ "VideoCall.Callback#onCameraCapabilitiesChanged(VideoProfile.CameraCapabilities)", "Connection.VideoProvider", "#setCamera(String)", "Connection.VideoProvider#onRequestCameraCapabilities()" ]
  }, {
    "name" : "public abstract void requestCallDataUsage()",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to the {@link Connection.VideoProvider} to retrieve the cumulative data\n         * usage for the video component of the current call (in bytes).  Data usage is reported\n         * to the caller via {@link VideoCall.Callback#onCallDataUsageChanged}.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onRequestConnectionDataUsage()}.\n         ",
    "links" : [ "Connection.VideoProvider", "Connection.VideoProvider#onRequestConnectionDataUsage()", "VideoCall.Callback#onCallDataUsageChanged" ]
  }, {
    "name" : "public abstract void setPauseImage(Uri uri)",
    "returnType" : "void",
    "comment" : "\n         * Provides the {@link Connection.VideoProvider} with the {@link Uri} of an image to be\n         * displayed to the peer device when the video signal is paused.\n         * <p>\n         * Handled by {@link Connection.VideoProvider#onSetPauseImage(Uri)}.\n         *\n         * @param uri URI of image to display.\n         ",
    "links" : [ "Connection.VideoProvider", "android.net.Uri", "Connection.VideoProvider#onSetPauseImage(Uri)" ]
  } ],
  "methodNames" : [ "public abstract void destroy()", "public abstract void registerCallback(VideoCall.Callback callback)", "public abstract void registerCallback(VideoCall.Callback callback, Handler handler)", "public abstract void unregisterCallback(VideoCall.Callback callback)", "public abstract void setCamera(String cameraId)", "public abstract void setPreviewSurface(Surface surface)", "public abstract void setDisplaySurface(Surface surface)", "public abstract void setDeviceOrientation(int rotation)", "public abstract void setZoom(float value)", "public abstract void sendSessionModifyRequest(VideoProfile requestProfile)", "public abstract void sendSessionModifyResponse(VideoProfile responseProfile)", "public abstract void requestCameraCapabilities()", "public abstract void requestCallDataUsage()", "public abstract void setPauseImage(Uri uri)" ],
  "variableNames" : [ ]
}