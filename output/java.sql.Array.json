{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Array.java",
  "packageName" : "java.sql",
  "className" : "Array",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String getBaseTypeName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n   * Retrieves the SQL type name of the elements in\n   * the array designated by this <code>Array</code> object.\n   * If the elements are a built-in type, it returns\n   * the database-specific type name of the elements.\n   * If the elements are a user-defined type (UDT),\n   * this method returns the fully-qualified SQL type name.\n   *\n   * @return a <code>String</code> that is the database-specific\n   * name for a built-in base type; or the fully-qualified SQL type\n   * name for a base type that is a UDT\n   * @exception SQLException if an error occurs while attempting\n   * to access the type name\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " int getBaseType() throws SQLException",
    "returnType" : "int",
    "comment" : "\n   * Retrieves the JDBC type of the elements in the array designated\n   * by this <code>Array</code> object.\n   *\n   * @return a constant from the class {@link java.sql.Types} that is\n   * the type code for the elements in the array designated by this\n   * <code>Array</code> object\n   * @exception SQLException if an error occurs while attempting\n   * to access the base type\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ "java.sql.Types" ]
  }, {
    "name" : " Object getArray() throws SQLException",
    "returnType" : "Object",
    "comment" : "\n   * Retrieves the contents of the SQL <code>ARRAY</code> value designated\n   * by this\n   * <code>Array</code> object in the form of an array in the Java\n   * programming language. This version of the method <code>getArray</code>\n   * uses the type map associated with the connection for customizations of\n   * the type mappings.\n   * <p>\n   * <strong>Note:</strong> When <code>getArray</code> is used to materialize\n   * a base type that maps to a primitive data type, then it is\n   * implementation-defined whether the array returned is an array of\n   * that primitive data type or an array of <code>Object</code>.\n   *\n   * @return an array in the Java programming language that contains\n   * the ordered elements of the SQL <code>ARRAY</code> value\n   * designated by this <code>Array</code> object\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " Object getArray(java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n   * Retrieves the contents of the SQL <code>ARRAY</code> value designated by this\n   * <code>Array</code> object.\n   * This method uses\n   * the specified <code>map</code> for type map customizations\n   * unless the base type of the array does not match a user-defined\n   * type in <code>map</code>, in which case it\n   * uses the standard mapping. This version of the method\n   * <code>getArray</code> uses either the given type map or the standard mapping;\n   * it never uses the type map associated with the connection.\n   * <p>\n   * <strong>Note:</strong> When <code>getArray</code> is used to materialize\n   * a base type that maps to a primitive data type, then it is\n   * implementation-defined whether the array returned is an array of\n   * that primitive data type or an array of <code>Object</code>.\n   *\n   * @param map a <code>java.util.Map</code> object that contains mappings\n   *            of SQL type names to classes in the Java programming language\n   * @return an array in the Java programming language that contains the ordered\n   *         elements of the SQL array designated by this object\n   * @exception SQLException if an error occurs while attempting to\n   *                         access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " Object getArray(long index, int count) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n   * Retrieves a slice of the SQL <code>ARRAY</code>\n   * value designated by this <code>Array</code> object, beginning with the\n   * specified <code>index</code> and containing up to <code>count</code>\n   * successive elements of the SQL array.  This method uses the type map\n   * associated with the connection for customizations of the type mappings.\n   * <p>\n   * <strong>Note:</strong> When <code>getArray</code> is used to materialize\n   * a base type that maps to a primitive data type, then it is\n   * implementation-defined whether the array returned is an array of\n   * that primitive data type or an array of <code>Object</code>.\n   *\n   * @param index the array index of the first element to retrieve;\n   *              the first element is at index 1\n   * @param count the number of successive SQL array elements to retrieve\n   * @return an array containing up to <code>count</code> consecutive elements\n   * of the SQL array, beginning with element <code>index</code>\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " Object getArray(long index, int count, java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n   * Retreives a slice of the SQL <code>ARRAY</code> value\n   * designated by this <code>Array</code> object, beginning with the specified\n   * <code>index</code> and containing up to <code>count</code>\n   * successive elements of the SQL array.\n   * <P>\n   * This method uses\n   * the specified <code>map</code> for type map customizations\n   * unless the base type of the array does not match a user-defined\n   * type in <code>map</code>, in which case it\n   * uses the standard mapping. This version of the method\n   * <code>getArray</code> uses either the given type map or the standard mapping;\n   * it never uses the type map associated with the connection.\n   * <p>\n   * <strong>Note:</strong> When <code>getArray</code> is used to materialize\n   * a base type that maps to a primitive data type, then it is\n   * implementation-defined whether the array returned is an array of\n   * that primitive data type or an array of <code>Object</code>.\n   *\n   * @param index the array index of the first element to retrieve;\n   *              the first element is at index 1\n   * @param count the number of successive SQL array elements to\n   * retrieve\n   * @param map a <code>java.util.Map</code> object\n   * that contains SQL type names and the classes in\n   * the Java programming language to which they are mapped\n   * @return an array containing up to <code>count</code>\n   * consecutive elements of the SQL <code>ARRAY</code> value designated by this\n   * <code>Array</code> object, beginning with element\n   * <code>index</code>\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getResultSet() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n   * Retrieves a result set that contains the elements of the SQL\n   * <code>ARRAY</code> value\n   * designated by this <code>Array</code> object.  If appropriate,\n   * the elements of the array are mapped using the connection's type\n   * map; otherwise, the standard mapping is used.\n   * <p>\n   * The result set contains one row for each array element, with\n   * two columns in each row.  The second column stores the element\n   * value; the first column stores the index into the array for\n   * that element (with the first array element being at index 1).\n   * The rows are in ascending order corresponding to\n   * the order of the indices.\n   *\n   * @return a {@link ResultSet} object containing one row for each\n   * of the elements in the array designated by this <code>Array</code>\n   * object, with the rows in ascending order based on the indices.\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ "java.sql.ResultSet" ]
  }, {
    "name" : " ResultSet getResultSet(java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n   * Retrieves a result set that contains the elements of the SQL\n   * <code>ARRAY</code> value designated by this <code>Array</code> object.\n   * This method uses\n   * the specified <code>map</code> for type map customizations\n   * unless the base type of the array does not match a user-defined\n   * type in <code>map</code>, in which case it\n   * uses the standard mapping. This version of the method\n   * <code>getResultSet</code> uses either the given type map or the standard mapping;\n   * it never uses the type map associated with the connection.\n   * <p>\n   * The result set contains one row for each array element, with\n   * two columns in each row.  The second column stores the element\n   * value; the first column stores the index into the array for\n   * that element (with the first array element being at index 1).\n   * The rows are in ascending order corresponding to\n   * the order of the indices.\n   *\n   * @param map contains the mapping of SQL user-defined types to\n   * classes in the Java programming language\n   * @return a <code>ResultSet</code> object containing one row for each\n   * of the elements in the array designated by this <code>Array</code>\n   * object, with the rows in ascending order based on the indices.\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getResultSet(long index, int count) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n   * Retrieves a result set holding the elements of the subarray that\n   * starts at index <code>index</code> and contains up to\n   * <code>count</code> successive elements.  This method uses\n   * the connection's type map to map the elements of the array if\n   * the map contains an entry for the base type. Otherwise, the\n   * standard mapping is used.\n   * <P>\n   * The result set has one row for each element of the SQL array\n   * designated by this object, with the first row containing the\n   * element at index <code>index</code>.  The result set has\n   * up to <code>count</code> rows in ascending order based on the\n   * indices.  Each row has two columns:  The second column stores\n   * the element value; the first column stores the index into the\n   * array for that element.\n   *\n   * @param index the array index of the first element to retrieve;\n   *              the first element is at index 1\n   * @param count the number of successive SQL array elements to retrieve\n   * @return a <code>ResultSet</code> object containing up to\n   * <code>count</code> consecutive elements of the SQL array\n   * designated by this <code>Array</code> object, starting at\n   * index <code>index</code>.\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getResultSet(long index, int count, java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n   * Retrieves a result set holding the elements of the subarray that\n   * starts at index <code>index</code> and contains up to\n   * <code>count</code> successive elements.\n   * This method uses\n   * the specified <code>map</code> for type map customizations\n   * unless the base type of the array does not match a user-defined\n   * type in <code>map</code>, in which case it\n   * uses the standard mapping. This version of the method\n   * <code>getResultSet</code> uses either the given type map or the standard mapping;\n   * it never uses the type map associated with the connection.\n   * <P>\n   * The result set has one row for each element of the SQL array\n   * designated by this object, with the first row containing the\n   * element at index <code>index</code>.  The result set has\n   * up to <code>count</code> rows in ascending order based on the\n   * indices.  Each row has two columns:  The second column stores\n   * the element value; the first column stroes the index into the\n   * array for that element.\n   *\n   * @param index the array index of the first element to retrieve;\n   *              the first element is at index 1\n   * @param count the number of successive SQL array elements to retrieve\n   * @param map the <code>Map</code> object that contains the mapping\n   * of SQL type names to classes in the Java(tm) programming language\n   * @return a <code>ResultSet</code> object containing up to\n   * <code>count</code> consecutive elements of the SQL array\n   * designated by this <code>Array</code> object, starting at\n   * index <code>index</code>.\n   * @exception SQLException if an error occurs while attempting to\n   * access the array\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " void free() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * This method frees the <code>Array</code> object and releases the resources that\n     * it holds. The object is invalid once the <code>free</code>\n     * method is called.\n     *<p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     *<p>\n     *\n     * @throws SQLException if an error occurs releasing\n     * the Array's resources\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getBaseTypeName() throws SQLException", " int getBaseType() throws SQLException", " Object getArray() throws SQLException", " Object getArray(java.util.Map<String, Class<?>> map) throws SQLException", " Object getArray(long index, int count) throws SQLException", " Object getArray(long index, int count, java.util.Map<String, Class<?>> map) throws SQLException", " ResultSet getResultSet() throws SQLException", " ResultSet getResultSet(java.util.Map<String, Class<?>> map) throws SQLException", " ResultSet getResultSet(long index, int count) throws SQLException", " ResultSet getResultSet(long index, int count, java.util.Map<String, Class<?>> map) throws SQLException", " void free() throws SQLException" ],
  "variableNames" : [ ]
}