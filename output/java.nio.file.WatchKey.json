{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/WatchKey.java",
  "packageName" : "java.nio.file",
  "className" : "WatchKey",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this watch key is valid.\n     *\n     * <p> A watch key is valid upon creation and remains until it is cancelled,\n     * or its watch service is closed.\n     *\n     * @return  {@code true} if, and only if, this watch key is valid\n     ",
    "links" : [ ]
  }, {
    "name" : " List<WatchEvent<?>> pollEvents()",
    "returnType" : "List<WatchEvent<?>>",
    "comment" : "\n     * Retrieves and removes all pending events for this watch key, returning\n     * a {@code List} of the events that were retrieved.\n     *\n     * <p> Note that this method does not wait if there are no events pending.\n     *\n     * @return  the list of the events retrieved; may be empty\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * Resets this watch key.\n     *\n     * <p> If this watch key has been cancelled or this watch key is already in\n     * the ready state then invoking this method has no effect. Otherwise\n     * if there are pending events for the object then this watch key is\n     * immediately re-queued to the watch service. If there are no pending\n     * events then the watch key is put into the ready state and will remain in\n     * that state until an event is detected or the watch key is cancelled.\n     *\n     * @return  {@code true} if the watch key is valid and has been reset, and\n     *          {@code false} if the watch key could not be reset because it is\n     *          no longer {@link #isValid valid}\n     ",
    "links" : [ "#isValid" ]
  }, {
    "name" : " void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the registration with the watch service. Upon return the watch key\n     * will be invalid. If the watch key is enqueued, waiting to be retrieved\n     * from the watch service, then it will remain in the queue until it is\n     * removed. Pending events, if any, remain pending and may be retrieved by\n     * invoking the {@link #pollEvents pollEvents} method after the key is\n     * cancelled.\n     *\n     * <p> If this watch key has already been cancelled then invoking this\n     * method has no effect.  Once cancelled, a watch key remains forever invalid.\n     ",
    "links" : [ "#pollEvents" ]
  }, {
    "name" : " Watchable watchable()",
    "returnType" : "Watchable",
    "comment" : "\n     * Returns the object for which this watch key was created. This method will\n     * continue to return the object even after the key is cancelled.\n     *\n     * <p> As the {@code WatchService} is intended to map directly on to the\n     * native file event notification facility (where available) then many of\n     * details on how registered objects are watched is highly implementation\n     * specific. When watching a directory for changes for example, and the\n     * directory is moved or renamed in the file system, there is no guarantee\n     * that the watch key will be cancelled and so the object returned by this\n     * method may no longer be a valid path to the directory.\n     *\n     * @return the object for which this watch key was created\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean isValid()", " List<WatchEvent<?>> pollEvents()", " boolean reset()", " void cancel()", " Watchable watchable()" ],
  "variableNames" : [ ]
}