{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/Criteria.java",
  "packageName" : "android.location",
  "className" : "Criteria",
  "comment" : "\n * A class indicating the application criteria for selecting a\n * location provider. Providers may be ordered according to accuracy,\n * power usage, ability to report altitude, speed, bearing, and monetary\n * cost.\n ",
  "variables" : [ {
    "name" : "NO_REQUIREMENT",
    "type" : "int",
    "comment" : "\n     * A constant indicating that the application does not choose to\n     * place requirement on a particular feature.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_LOW",
    "type" : "int",
    "comment" : "\n     * A constant indicating a low power requirement.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_MEDIUM",
    "type" : "int",
    "comment" : "\n     * A constant indicating a medium power requirement.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_HIGH",
    "type" : "int",
    "comment" : "\n     * A constant indicating a high power requirement.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCURACY_FINE",
    "type" : "int",
    "comment" : "\n     * A constant indicating a finer location accuracy requirement\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCURACY_COARSE",
    "type" : "int",
    "comment" : "\n     * A constant indicating an approximate accuracy requirement\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCURACY_LOW",
    "type" : "int",
    "comment" : "\n     * A constant indicating a low location accuracy requirement\n     * - may be used for horizontal, altitude, speed or bearing accuracy.\n     * For horizontal and vertical position this corresponds roughly to\n     * an accuracy of greater than 500 meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCURACY_MEDIUM",
    "type" : "int",
    "comment" : "\n     * A constant indicating a medium accuracy requirement\n     * - currently used only for horizontal accuracy.\n     * For horizontal position this corresponds roughly to to an accuracy\n     * of between 100 and 500 meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCURACY_HIGH",
    "type" : "int",
    "comment" : "\n     * a constant indicating a high accuracy requirement\n     * - may be used for horizontal, altitude, speed or bearing accuracy.\n     * For horizontal and vertical position this corresponds roughly to\n     * an accuracy of less than 100 meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHorizontalAccuracy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalAccuracy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpeedAccuracy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBearingAccuracy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerRequirement",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAltitudeRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBearingRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpeedRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCostAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Criteria>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setHorizontalAccuracy(@AccuracyRequirement int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the desired horizontal accuracy (latitude and longitude). Accuracy may be\n     * {@link #ACCURACY_LOW}, {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH} or\n     * {@link #NO_REQUIREMENT}. More accurate location may consume more power and may take longer.\n     *\n     * @throws IllegalArgumentException if accuracy is not one of the supported constants\n     ",
    "links" : [ "#NO_REQUIREMENT", "#ACCURACY_MEDIUM", "#ACCURACY_LOW", "#ACCURACY_HIGH" ]
  }, {
    "name" : "public int getHorizontalAccuracy()",
    "returnType" : "int",
    "comment" : "\n     * Returns a constant indicating the desired horizontal accuracy (latitude and longitude).\n     *\n     * @see #setHorizontalAccuracy(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalAccuracy(@AccuracyRequirement int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the desired vertical accuracy (altitude). Accuracy may be {@link #ACCURACY_LOW},\n     * {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH} or {@link #NO_REQUIREMENT}. More accurate\n     * location may consume more power and may take longer.\n     *\n     * @throws IllegalArgumentException if accuracy is not one of the supported constants\n     ",
    "links" : [ "#NO_REQUIREMENT", "#ACCURACY_MEDIUM", "#ACCURACY_LOW", "#ACCURACY_HIGH" ]
  }, {
    "name" : "public int getVerticalAccuracy()",
    "returnType" : "int",
    "comment" : "\n     * Returns a constant indicating the desired vertical accuracy (altitude).\n     *\n     * @see #setVerticalAccuracy(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSpeedAccuracy(@AccuracyRequirement int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the desired speed accuracy. Accuracy may be {@link #ACCURACY_LOW},\n     * {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}. More accurate\n     * location may consume more power and may take longer.\n     *\n     * @throws IllegalArgumentException if accuracy is not one of the supported constants\n     ",
    "links" : [ "#NO_REQUIREMENT", "#ACCURACY_MEDIUM", "#ACCURACY_LOW", "#ACCURACY_HIGH" ]
  }, {
    "name" : "public int getSpeedAccuracy()",
    "returnType" : "int",
    "comment" : "\n     * Returns a constant indicating the desired speed accuracy.\n     *\n     * @see #setSpeedAccuracy(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBearingAccuracy(@AccuracyRequirement int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the desired bearing accuracy. Accuracy may be {@link #ACCURACY_LOW},\n     * {@link #ACCURACY_MEDIUM}, {@link #ACCURACY_HIGH}, or {@link #NO_REQUIREMENT}. More accurate\n     * location may consume more power and may take longer.\n     *\n     * @throws IllegalArgumentException if accuracy is not one of the supported constants\n     ",
    "links" : [ "#NO_REQUIREMENT", "#ACCURACY_MEDIUM", "#ACCURACY_LOW", "#ACCURACY_HIGH" ]
  }, {
    "name" : "public int getBearingAccuracy()",
    "returnType" : "int",
    "comment" : "\n     * Returns a constant indicating the desired bearing accuracy.\n     *\n     * @see #setBearingAccuracy(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccuracy(@LocationAccuracyRequirement int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the desired accuracy for latitude and longitude. Accuracy may be\n     * {@link #ACCURACY_FINE} or {@link #ACCURACY_COARSE}. More accurate location may consume more\n     * power and may take longer.\n     *\n     * @throws IllegalArgumentException if accuracy is not one of the supported constants\n     ",
    "links" : [ "#ACCURACY_FINE", "#ACCURACY_COARSE" ]
  }, {
    "name" : "public int getAccuracy()",
    "returnType" : "int",
    "comment" : "\n     * Returns a constant indicating desired accuracy of location.\n     *\n     * @see #setAccuracy(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPowerRequirement(@PowerRequirement int powerRequirement)",
    "returnType" : "void",
    "comment" : "\n     * Indicates the desired maximum power requirement. The power requirement parameter may be\n     * {@link #NO_REQUIREMENT}, {@link #POWER_LOW}, {@link #POWER_MEDIUM}, or {@link #POWER_HIGH}.\n     ",
    "links" : [ "#POWER_LOW", "#NO_REQUIREMENT", "#POWER_MEDIUM", "#POWER_HIGH" ]
  }, {
    "name" : "public int getPowerRequirement()",
    "returnType" : "int",
    "comment" : "\n     * Returns a constant indicating the desired maximum power requirement.\n     *\n     * @see #setPowerRequirement(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCostAllowed(boolean costAllowed)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the provider is allowed to incur monetary cost.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCostAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provider is allowed to incur monetary cost.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAltitudeRequired(boolean altitudeRequired)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the provider must provide altitude information. Not all fixes are\n     * guaranteed to contain such information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAltitudeRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provider must provide altitude information.\n     *\n     * @see #setAltitudeRequired(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSpeedRequired(boolean speedRequired)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the provider must provide speed information. Not all fixes are guaranteed\n     * to contain such information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSpeedRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provider must provide speed information.\n     *\n     * @see #setSpeedRequired(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBearingRequired(boolean bearingRequired)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the provider must provide bearing information. Not all fixes are guaranteed\n     * to contain such information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBearingRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provider must provide bearing information.\n     *\n     * @see #setBearingRequired(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String requirementToString(int power)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_REQUIREMENT", "POWER_LOW", "POWER_MEDIUM", "POWER_HIGH", "ACCURACY_FINE", "ACCURACY_COARSE", "ACCURACY_LOW", "ACCURACY_MEDIUM", "ACCURACY_HIGH", "mHorizontalAccuracy", "mVerticalAccuracy", "mSpeedAccuracy", "mBearingAccuracy", "mPowerRequirement", "mAltitudeRequired", "mBearingRequired", "mSpeedRequired", "mCostAllowed", "CREATOR" ],
  "methodNames" : [ "public void setHorizontalAccuracy(@AccuracyRequirement int accuracy)", "public int getHorizontalAccuracy()", "public void setVerticalAccuracy(@AccuracyRequirement int accuracy)", "public int getVerticalAccuracy()", "public void setSpeedAccuracy(@AccuracyRequirement int accuracy)", "public int getSpeedAccuracy()", "public void setBearingAccuracy(@AccuracyRequirement int accuracy)", "public int getBearingAccuracy()", "public void setAccuracy(@LocationAccuracyRequirement int accuracy)", "public int getAccuracy()", "public void setPowerRequirement(@PowerRequirement int powerRequirement)", "public int getPowerRequirement()", "public void setCostAllowed(boolean costAllowed)", "public boolean isCostAllowed()", "public void setAltitudeRequired(boolean altitudeRequired)", "public boolean isAltitudeRequired()", "public void setSpeedRequired(boolean speedRequired)", "public boolean isSpeedRequired()", "public void setBearingRequired(boolean bearingRequired)", "public boolean isBearingRequired()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public String toString()", "private static String requirementToString(int power)" ]
}