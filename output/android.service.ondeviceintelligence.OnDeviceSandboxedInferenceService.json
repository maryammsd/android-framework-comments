{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/ondeviceintelligence/OnDeviceSandboxedInferenceService.java",
  "packageName" : "android.service.ondeviceintelligence",
  "className" : "OnDeviceSandboxedInferenceService",
  "comment" : "\n * Abstract base class for performing inference in a isolated process. This service exposes its\n * methods via {@link android.app.ondeviceintelligence.OnDeviceIntelligenceManager}.\n *\n * <p> A service that provides methods to perform on-device inference both in streaming and\n * non-streaming fashion. Also, provides a way to register a storage service that will be used to\n * read-only access files from the {@link OnDeviceIntelligenceService} counterpart. </p>\n *\n * <p> Similar to {@link OnDeviceIntelligenceManager} class, the contracts in this service are\n * defined to be open-ended in general, to allow interoperability. Therefore, it is recommended\n * that implementations of this system-service expose this API to the clients via a library which\n * has more defined contract.</p>\n *\n * <pre>\n * {@literal\n * <service android:name=\".SampleSandboxedInferenceService\"\n *          android:permission=\"android.permission.BIND_ONDEVICE_SANDBOXED_INFERENCE_SERVICE\"\n *          android:isolatedProcess=\"true\">\n * </service>}\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.app.ondeviceintelligence.OnDeviceIntelligenceManager", "android.service.ondeviceintelligence.OnDeviceIntelligenceService" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service. To be supported, the\n     * service must also require the\n     * {@link android.Manifest.permission#BIND_ON_DEVICE_SANDBOXED_INFERENCE_SERVICE}\n     * permission so that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_ON_DEVICE_SANDBOXED_INFERENCE_SERVICE" ]
  }, {
    "name" : "REGISTER_MODEL_UPDATE_CALLBACK_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODEL_LOADED_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODEL_UNLOADED_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_CONFIG_UPDATE_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mRemoteStorageService",
    "type" : "IRemoteStorageService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onTokenInfoRequest(int callerUid, @NonNull Feature feature, @NonNull @InferenceParams Bundle request, @Nullable CancellationSignal cancellationSignal, @NonNull OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Invoked when caller  wants to obtain token info related to the payload in the passed\n     * content, associated with the provided feature.\n     * The expectation from the implementation is that when processing is complete, it\n     * should provide the token info in the {@link OutcomeReceiver#onResult}.\n     *\n     * @param callerUid          UID of the caller that initiated this call chain.\n     * @param feature            feature which is associated with the request.\n     * @param request            request that requires processing.\n     * @param cancellationSignal Cancellation Signal to receive cancellation events from client and\n     *                           configure a listener to.\n     * @param callback           callback to populate failure or the token info for the provided\n     *                           request.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult" ]
  }, {
    "name" : "public abstract void onProcessRequestStreaming(int callerUid, @NonNull Feature feature, @NonNull @InferenceParams Bundle request, @OnDeviceIntelligenceManager.RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull StreamingProcessingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Invoked when caller provides a request for a particular feature to be processed in a\n     * streaming manner. The expectation from the implementation is that when processing the\n     * request,\n     * it periodically populates the {@link StreamingProcessingCallback#onPartialResult} to\n     * continuously\n     * provide partial Bundle results for the caller to utilize. Optionally the implementation can\n     * provide the complete response in the {@link StreamingProcessingCallback#onResult} upon\n     * processing completion.\n     *\n     * @param callerUid          UID of the caller that initiated this call chain.\n     * @param feature            feature which is associated with the request.\n     * @param request            request that requires processing.\n     * @param requestType        identifier representing the type of request.\n     * @param cancellationSignal Cancellation Signal to receive cancellation events from client and\n     *                           configure a listener to.\n     * @param processingSignal   Signal to receive custom action instructions from client.\n     * @param callback           callback to populate the partial responses, failure and optionally\n     *                           full response for the provided request.\n     ",
    "links" : [ "android.app.ondeviceintelligence.StreamingProcessingCallback#onResult", "android.app.ondeviceintelligence.StreamingProcessingCallback#onPartialResult" ]
  }, {
    "name" : "public abstract void onProcessRequest(int callerUid, @NonNull Feature feature, @NonNull @InferenceParams Bundle request, @OnDeviceIntelligenceManager.RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull ProcessingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Invoked when caller provides a request for a particular feature to be processed in one shot\n     * completely.\n     * The expectation from the implementation is that when processing the request is complete, it\n     * should\n     * provide the complete response in the {@link OutcomeReceiver#onResult}.\n     *\n     * @param callerUid          UID of the caller that initiated this call chain.\n     * @param feature            feature which is associated with the request.\n     * @param request            request that requires processing.\n     * @param requestType        identifier representing the type of request.\n     * @param cancellationSignal Cancellation Signal to receive cancellation events from client and\n     *                           configure a listener to.\n     * @param processingSignal   Signal to receive custom action instructions from client.\n     * @param callback           callback to populate failure and full response for the provided\n     *                           request.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult" ]
  }, {
    "name" : "public abstract void onUpdateProcessingState(@NonNull @StateParams Bundle processingState, @NonNull OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Invoked when processing environment needs to be updated or refreshed with fresh\n     * configuration, files or state.\n     *\n     * @param processingState contains updated state and params that are to be applied to the\n     *                        processing environmment,\n     * @param callback        callback to populate the update status and if there are params\n     *                        associated with the status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final FileInputStream openFileInput(@NonNull String filename) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "\n     * Overrides {@link Context#openFileInput} to read files with the given file names under the\n     * internal app storage of the {@link OnDeviceIntelligenceService}, i.e., only files stored in\n     * {@link Context#getFilesDir()} can be opened.\n     ",
    "links" : [ "android.content.Context#openFileInput", "android.service.ondeviceintelligence.OnDeviceIntelligenceService", "android.content.Context#getFilesDir()" ]
  }, {
    "name" : "public final void getReadOnlyFileDescriptor(@NonNull String fileName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<ParcelFileDescriptor> resultConsumer) throws FileNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Provides read-only access to the internal app storage via the\n     * {@link OnDeviceIntelligenceService}. This is an asynchronous alternative for\n     * {@link #openFileInput(String)}.\n     *\n     * @param fileName       File name relative to the {@link Context#getFilesDir()}.\n     * @param resultConsumer Consumer to populate the corresponding file descriptor in.\n     ",
    "links" : [ "android.service.ondeviceintelligence.OnDeviceIntelligenceService", "#openFileInput(String)", "android.content.Context#getFilesDir()" ]
  }, {
    "name" : "public final void fetchFeatureFileDescriptorMap(@NonNull Feature feature, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Map<String, ParcelFileDescriptor>> resultConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Provides access to all file streams required for feature via the\n     * {@link OnDeviceIntelligenceService}.\n     *\n     * @param feature        Feature for which the associated files should be fetched.\n     * @param executor       Executor to run the consumer callback on.\n     * @param resultConsumer Consumer to receive a map of filePath to the corresponding file input\n     *                       stream.\n     ",
    "links" : [ "android.service.ondeviceintelligence.OnDeviceIntelligenceService" ]
  }, {
    "name" : "public Executor getCallbackExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Returns the {@link Executor} to use for incoming IPC from request sender into your service\n     * implementation. For e.g. see\n     * {@link ProcessingCallback#onDataAugmentRequest(Bundle,\n     * Consumer)} where we use the executor to populate the consumer.\n     * <p>\n     * Override this method in your {@link OnDeviceSandboxedInferenceService} implementation to\n     * provide the executor you want to use for incoming IPC.\n     *\n     * @return the {@link Executor} to use for incoming IPC from {@link OnDeviceIntelligenceManager}\n     * to {@link OnDeviceSandboxedInferenceService}.\n     ",
    "links" : [ "android.service.ondeviceintelligence.OnDeviceSandboxedInferenceService", "android.app.ondeviceintelligence.OnDeviceIntelligenceManager", "android.annotation.CallbackExecutor", "android.app.ondeviceintelligence.ProcessingCallback#onDataAugmentRequest(Bundle" ]
  }, {
    "name" : "private RemoteCallback wrapAsRemoteCallback(@NonNull Consumer<Map<String, ParcelFileDescriptor>> resultConsumer, @NonNull Executor executor)",
    "returnType" : "RemoteCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ProcessingCallback wrapResponseCallback(IResponseCallback callback)",
    "returnType" : "ProcessingCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StreamingProcessingCallback wrapStreamingResponseCallback(IStreamingResponseCallback callback)",
    "returnType" : "StreamingProcessingCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RemoteCallback wrapRemoteCallback(@androidx.annotation.NonNull Consumer<Bundle> contentCallback)",
    "returnType" : "RemoteCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException> wrapTokenInfoCallback(ITokenInfoCallback tokenInfoCallback)",
    "returnType" : "OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException> wrapOutcomeReceiver(IProcessingUpdateStatusCallback callback)",
    "returnType" : "OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public abstract void onTokenInfoRequest(int callerUid, @NonNull Feature feature, @NonNull @InferenceParams Bundle request, @Nullable CancellationSignal cancellationSignal, @NonNull OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException> callback)", "public abstract void onProcessRequestStreaming(int callerUid, @NonNull Feature feature, @NonNull @InferenceParams Bundle request, @OnDeviceIntelligenceManager.RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull StreamingProcessingCallback callback)", "public abstract void onProcessRequest(int callerUid, @NonNull Feature feature, @NonNull @InferenceParams Bundle request, @OnDeviceIntelligenceManager.RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull ProcessingCallback callback)", "public abstract void onUpdateProcessingState(@NonNull @StateParams Bundle processingState, @NonNull OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException> callback)", "public final FileInputStream openFileInput(@NonNull String filename) throws FileNotFoundException", "public final void getReadOnlyFileDescriptor(@NonNull String fileName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<ParcelFileDescriptor> resultConsumer) throws FileNotFoundException", "public final void fetchFeatureFileDescriptorMap(@NonNull Feature feature, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Map<String, ParcelFileDescriptor>> resultConsumer)", "public Executor getCallbackExecutor()", "private RemoteCallback wrapAsRemoteCallback(@NonNull Consumer<Map<String, ParcelFileDescriptor>> resultConsumer, @NonNull Executor executor)", "private ProcessingCallback wrapResponseCallback(IResponseCallback callback)", "private StreamingProcessingCallback wrapStreamingResponseCallback(IStreamingResponseCallback callback)", "private RemoteCallback wrapRemoteCallback(@androidx.annotation.NonNull Consumer<Bundle> contentCallback)", "private OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException> wrapTokenInfoCallback(ITokenInfoCallback tokenInfoCallback)", "private static OutcomeReceiver<PersistableBundle, OnDeviceIntelligenceException> wrapOutcomeReceiver(IProcessingUpdateStatusCallback callback)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "REGISTER_MODEL_UPDATE_CALLBACK_BUNDLE_KEY", "MODEL_LOADED_BUNDLE_KEY", "MODEL_UNLOADED_BUNDLE_KEY", "DEVICE_CONFIG_UPDATE_BUNDLE_KEY", "mRemoteStorageService", "mHandler" ]
}