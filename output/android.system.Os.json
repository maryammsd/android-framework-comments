{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/system/Os.java",
  "packageName" : "android.system",
  "className" : "Os",
  "comment" : "\n * Access to low-level system functionality. Most of these are system calls. Most users will want\n * to use higher-level APIs where available, but this class provides access to the underlying\n * primitives used to implement the higher-level APIs.\n *\n * <p>The corresponding constants can be found in {@link OsConstants}.\n ",
  "links" : [ "android.system.OsConstants" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static FileDescriptor accept(FileDescriptor fd, InetSocketAddress peerAddress) throws ErrnoException, SocketException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/accept.2.html\">accept(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor accept(FileDescriptor fd, SocketAddress peerAddress) throws ErrnoException, SocketException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/accept.2.html\">accept(2)</a>.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean access(String path, int mode) throws ErrnoException",
    "returnType" : "boolean",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/access.2.html\">access(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress[] android_getaddrinfo(String node, StructAddrinfo hints, int netId) throws GaiException",
    "returnType" : "InetAddress[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void bind(FileDescriptor fd, InetAddress address, int port) throws ErrnoException, SocketException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/bind.2.html\">bind(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void bind(@NonNull FileDescriptor fd, @NonNull SocketAddress address) throws ErrnoException, SocketException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/bind.2.html\">bind(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructCapUserData[] capget(@NonNull StructCapUserHeader hdr) throws ErrnoException",
    "returnType" : "StructCapUserData[]",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/capget.2.html\">capget(2)</a>.\n     *\n     * @param hdr capabilities header, containing version and pid\n     * @return list of capabilities data structures, each containing effective, permitted,\n     *         and inheritable fields are bit masks of the capabilities\n     * @throws ErrnoException if {@code hdr} structure contains invalid data\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void capset(@NonNull StructCapUserHeader hdr, @NonNull StructCapUserData[] data) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/capset.2.html\">capset(2)</a>.\n     *\n     * @param hdr capabilities header, containing version and pid\n     * @param data capabilities data list, containing effective, permitted,\n     *             and inheritable fields. Must be the same length as returned value\n     * @throws ErrnoException if {@code hdr} structure contains invalid data; or\n     *                        an attempt was made to add a capability to the permitted\n     *                        set, or to set a capability in the effective set that is\n     *                        not in the permitted set; or\n     *                        the caller attempted to use\n     *                        {@link capset(StructCapUserHeader, StructCapUserData[])}\n     *                        to modify the capabilities of a thread other than itself,\n     *                        but lacked sufficient privilege;\n     *                        or there is no such thread.\n     *\n     * @hide\n     ",
    "links" : [ "capset(StructCapUserHeader" ]
  }, {
    "name" : "public static void chmod(String path, int mode) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/chmod.2.html\">chmod(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void chown(String path, int uid, int gid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/chown.2.html\">chown(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void close(FileDescriptor fd) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/close.2.html\">close(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void connect(FileDescriptor fd, InetAddress address, int port) throws ErrnoException, SocketException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/connect.2.html\">connect(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void connect(@NonNull FileDescriptor fd, @NonNull SocketAddress address) throws ErrnoException, SocketException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/connect.2.html\">connect(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor dup(FileDescriptor oldFd) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/dup.2.html\">dup(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor dup2(FileDescriptor oldFd, int newFd) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/dup2.2.html\">dup2(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] environ()",
    "returnType" : "String[]",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/environ.3.html\">environ(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void execv(String filename, String[] argv) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"https://man7.org/linux/man-pages/man3/execv.3.html\">exec(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void execve(String filename, String[] argv, String[] envp) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/execve.2.html\">execve(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void fchmod(FileDescriptor fd, int mode) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fchmod.2.html\">fchmod(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void fchown(FileDescriptor fd, int uid, int gid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fchown.2.html\">fchown(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int fcntlInt(@NonNull FileDescriptor fd, int cmd, int arg) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fcntl.2.html\">fcntl(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int fcntlVoid(FileDescriptor fd, int cmd) throws ErrnoException",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void fdatasync(FileDescriptor fd) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fdatasync.2.html\">fdatasync(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructStat fstat(FileDescriptor fd) throws ErrnoException",
    "returnType" : "StructStat",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fstat.2.html\">fstat(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructStatVfs fstatvfs(FileDescriptor fd) throws ErrnoException",
    "returnType" : "StructStatVfs",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fstatvfs.2.html\">fstatvfs(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void fsync(FileDescriptor fd) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/fsync.2.html\">fsync(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void ftruncate(FileDescriptor fd, long length) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/ftruncate.2.html\">ftruncate(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String gai_strerror(int error)",
    "returnType" : "String",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/gai_strerror.3.html\">gai_strerror(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getegid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getegid.2.html\">getegid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int geteuid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/geteuid.2.html\">geteuid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getgid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getgid.2.html\">getgid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getenv(String name)",
    "returnType" : "String",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/getenv.3.html\">getenv(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructIfaddrs[] getifaddrs() throws ErrnoException",
    "returnType" : "StructIfaddrs[]",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/getifaddrs.3.html\">getifaddrs(3)</a>.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getnameinfo(InetAddress address, int flags) throws GaiException",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static SocketAddress getpeername(FileDescriptor fd) throws ErrnoException",
    "returnType" : "SocketAddress",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getpeername.2.html\">getpeername(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getpgid(int pid) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * Gets process's pgid (process group ID).\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getpgid.2.html\">getpgid(2)</a>.\n     *\n     * @param pid process id to get the pgid of\n     * @return process's pgid\n     * @throws ErrnoException if {@code pid} does not match any process\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getpid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getpid.2.html\">getpid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getppid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getppid.2.html\">getppid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructPasswd getpwnam(String name) throws ErrnoException",
    "returnType" : "StructPasswd",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static StructPasswd getpwuid(int uid) throws ErrnoException",
    "returnType" : "StructPasswd",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static StructRlimit getrlimit(int resource) throws ErrnoException",
    "returnType" : "StructRlimit",
    "comment" : "\n     * Gets the resource limit.\n     *\n     * See <a href=\"https://man7.org/linux/man-pages/man3/vlimit.3.html\">getrlimit(2)</a>.\n     *\n     * @param resource resource id\n     * @return         the limit of the given resource\n     * @throws ErrnoException the value specified in {@code resource} is not valid\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SocketAddress getsockname(FileDescriptor fd) throws ErrnoException",
    "returnType" : "SocketAddress",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getsockname.2.html\">getsockname(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getsockoptByte(FileDescriptor fd, int level, int option) throws ErrnoException",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getsockoptInAddr(FileDescriptor fd, int level, int option) throws ErrnoException",
    "returnType" : "InetAddress",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getsockoptInt(@NonNull FileDescriptor fd, int level, int option) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * Gets socket options for the socket referred to by the file descriptor {@code fd}.\n     *\n     * See <a href=\"https://man7.org/linux/man-pages/man2/getsockopt.2.html\">getsockopt(2)</a>.\n     * For the list of available options see <a href=\"https://man7.org/linux/man-pages/man7/socket.7.html\">socket(7)</a>.\n     *\n     * @param fd    file descriptor of the socket to get options of\n     * @param level level at which the {@code option} resides. For example,\n     *              to indicate that an option is to be interpreted by the TCP protocol,\n     *              level should be set to the protocol number of TCP\n     * @param option name of the option to get\n     * @return socket options for file descriptor {@code fd}\n     * @throws ErrnoException if {@code fd} is invalid; or\n     *                        {@code option} is unknown at given {@code level}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructLinger getsockoptLinger(@NonNull FileDescriptor fd, int level, int option) throws ErrnoException",
    "returnType" : "StructLinger",
    "comment" : "\n     * Gets {@link OsConstants#SO_LINGER} option for the socket referred to by the file descriptor {@code fd}.\n     * When enabled, a {@link close(FileDescriptor) or {@link shutdown(FileDescriptor, int)} will\n     * not return until all queued messages for the socket have been successfully sent or the\n     * linger timeout has been reached. Otherwise, the call returns immediately and the closing is\n     * done in the background.\n     *\n     * See <a href=\"https://man7.org/linux/man-pages/man7/socket.7.html\">socket(7)</a>.\n     *\n     * @param fd     file descriptor of the socket to get {@code OsConstants.SO_LINGER} option of\n     * @param level  level at which the {@code option} resides\n     * @param option name of the option to get\n     * @return       {@link StructLinger} associated with given {@code fd}\n     * @throws ErrnoException\n     *\n     * @hide\n     ",
    "links" : [ "close(FileDescriptor)", "shutdown(FileDescriptor", "android.system.StructLinger", "android.system.OsConstants#SO_LINGER" ]
  }, {
    "name" : "public static StructTimeval getsockoptTimeval(@NonNull FileDescriptor fd, int level, int option) throws ErrnoException",
    "returnType" : "StructTimeval",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setsockopt.2.html\">getsockopt(2)</a>.\n     *\n     * <p>Only for use with {@code option} values that return a {@code struct timeval} such as\n     * {@link OsConstants#SO_RCVTIMEO} and {@link OsConstants#SO_SNDTIMEO}. Use with other\n     * options may throw an {@code IllegalArgumentException} or return junk values.\n     ",
    "links" : [ "android.system.OsConstants#SO_SNDTIMEO", "android.system.OsConstants#SO_RCVTIMEO" ]
  }, {
    "name" : "public static StructUcred getsockoptUcred(FileDescriptor fd, int level, int option) throws ErrnoException",
    "returnType" : "StructUcred",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int gettid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/gettid.2.html\">gettid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getuid()",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getuid.2.html\">getuid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getxattr(String path, String name) throws ErrnoException",
    "returnType" : "byte[]",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/getxattr.2.html\">getxattr(2)</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String if_indextoname(int index)",
    "returnType" : "String",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/if_indextoname.3.html\">if_indextoname(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int if_nametoindex(String name)",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/if_nametoindex.3.html\">if_nametoindex(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress inet_pton(int family, String address)",
    "returnType" : "InetAddress",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/inet_pton.3.html\">inet_pton(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress ioctlInetAddress(FileDescriptor fd, int cmd, String interfaceName) throws ErrnoException",
    "returnType" : "InetAddress",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int ioctlInt(@NonNull FileDescriptor fd, int cmd) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"https://man7.org/linux/man-pages/man2/ioctl.2.html\">ioctl(3)</a>.\n     * System call manipulates the underlying device parameters of special files. In particular,\n     * many operating characteristics of character special files.\n     *\n     * @param fd    an open file descriptor\n     * @param cmd   encoded in it whether the argument is an \"in\" parameter or \"out\" parameter\n     * @return      returns a nonnegative value on success\n     * @throws ErrnoException A checked exception thrown when {@link Os} methods fail.\n     *                        {@see android.system.ErrnoException}\n     *\n     * @hide\n     ",
    "links" : [ "android.system.Os" ]
  }, {
    "name" : "public static boolean isatty(FileDescriptor fd)",
    "returnType" : "boolean",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/isatty.3.html\">isatty(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void kill(int pid, int signal) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/kill.2.html\">kill(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void lchown(String path, int uid, int gid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/lchown.2.html\">lchown(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void link(String oldPath, String newPath) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/link.2.html\">link(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void listen(FileDescriptor fd, int backlog) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/listen.2.html\">listen(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] listxattr(String path) throws ErrnoException",
    "returnType" : "String[]",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/listxattr.2.html\">listxattr(2)</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long lseek(FileDescriptor fd, long offset, int whence) throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/lseek.2.html\">lseek(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructStat lstat(String path) throws ErrnoException",
    "returnType" : "StructStat",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/lstat.2.html\">lstat(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor memfd_create(@NonNull String name, int flags) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/memfd_create.2.html\">memfd_create(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void mincore(long address, long byteCount, byte[] vector) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/mincore.2.html\">mincore(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void mkdir(String path, int mode) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/mkdir.2.html\">mkdir(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void mkfifo(String path, int mode) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/mkfifo.3.html\">mkfifo(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void mlock(long address, long byteCount) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/mlock.2.html\">mlock(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long mmap(long address, long byteCount, int prot, int flags, FileDescriptor fd, long offset) throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/mmap.2.html\">mmap(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void msync(long address, long byteCount, int flags) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/msync.2.html\">msync(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void munlock(long address, long byteCount) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/munlock.2.html\">munlock(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void munmap(long address, long byteCount) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/munmap.2.html\">munmap(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor open(String path, int flags, int mode) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor[] pipe() throws ErrnoException",
    "returnType" : "FileDescriptor[]",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/pipe.2.html\">pipe(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor[] pipe2(int flags) throws ErrnoException",
    "returnType" : "FileDescriptor[]",
    "comment" : "\n     * Creates a pipe, a unidirectional data channel that can be used for interprocess communication.\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/pipe.2.html\">pipe(2)</a>.\n     *\n     * @param flags bitmask of options, e.g. {@link OsConstants#O_CLOEXEC}, {@link OsConstants#O_DIRECT}\n     *              or {@link OsConstants#O_NONBLOCK}.\n     *              If {@code flags} is {@code 0}, then {@link pipe2(int)} is the same as {@link pipe()}.\n     * @return array of two file descriptors referring to the ends of the pipe, where\n     *         first file descriptor is the read end of the pipe, and second is a write end\n     * @throws ErrnoException if {@code flags} contains invalid value; or\n     *                        the per-process limit on the number of open file\n     *                        descriptors has been reached; or\n     *                        the system-wide limit on the total number of open files\n     *                        has been reached; or\n     *                        the user hard limit on memory that can be allocated for\n     *                        pipes has been reached and the caller is not privileged\n     *\n     * @hide\n     ",
    "links" : [ "pipe()", "android.system.OsConstants#O_CLOEXEC", "android.system.OsConstants#O_DIRECT", "android.system.OsConstants#O_NONBLOCK", "pipe2(int)" ]
  }, {
    "name" : "public static int poll(StructPollfd[] fds, int timeoutMs) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/poll.2.html\">poll(2)</a>.\n     *\n     * <p>Note that in Lollipop this could throw an {@code ErrnoException} with {@code EINTR}.\n     * In later releases, the implementation will automatically just restart the system call with\n     * an appropriately reduced timeout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void posix_fallocate(FileDescriptor fd, long offset, long length) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/posix_fallocate.3.html\">posix_fallocate(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int prctl(int option, long arg2, long arg3, long arg4, long arg5) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/prctl.2.html\">prctl(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int pread(FileDescriptor fd, ByteBuffer buffer, long offset) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/pread.2.html\">pread(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int pread(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, long offset) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/pread.2.html\">pread(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int pwrite(FileDescriptor fd, ByteBuffer buffer, long offset) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/pwrite.2.html\">pwrite(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int pwrite(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, long offset) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/pwrite.2.html\">pwrite(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int read(FileDescriptor fd, ByteBuffer buffer) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/read.2.html\">read(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int read(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/read.2.html\">read(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String readlink(String path) throws ErrnoException",
    "returnType" : "String",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/readlink.2.html\">readlink(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String realpath(@Nullable String path) throws ErrnoException",
    "returnType" : "String",
    "comment" : "\n     * Eexpands all symbolic links and resolves references to {@code /./},\n     * {@code /../} and extra {@code /} characters string named by path\n     * to produce a canonicalized absolute pathname.\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man3/realpath.3.html\">realpath(3)</a>.\n     *\n     * @param path string to resolve\n     * @return     resolved path if no error occurred. Returns {@code null} if {@code path}\n     *             is {@code null}\n     * @throws ErrnoException read or search permission was denied for a component of\n     *                        the path prefix; or an I/O error occurred while reading\n     *                        from the filesystem; or too many symbolic links were\n     *                        encountered in translating the pathname; or\n     *                        the named file does not exist; or a component of the path\n     *                        prefix is not a directory\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int readv(FileDescriptor fd, Object[] buffers, int[] offsets, int[] byteCounts) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/readv.2.html\">readv(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int recvfrom(FileDescriptor fd, ByteBuffer buffer, int flags, InetSocketAddress srcAddress) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/recvfrom.2.html\">recvfrom(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int recvfrom(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, InetSocketAddress srcAddress) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/recvfrom.2.html\">recvfrom(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int recvmsg(@NonNull FileDescriptor fd, @NonNull StructMsghdr msg, int flags) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/recvmsg.2.html\">recvmsg(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void remove(String path) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/remove.3.html\">remove(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void removexattr(String path, String name) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/removexattr.2.html\">removexattr(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rename(String oldPath, String newPath) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/rename.2.html\">rename(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long sendfile(FileDescriptor outFd, FileDescriptor inFd, Int64Ref offset, long byteCount) throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/sendfile.2.html\">sendfile(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int sendmsg(@NonNull FileDescriptor fd, @NonNull StructMsghdr msg, int flags) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/sendmsg.2.html\">sendmsg(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int sendto(FileDescriptor fd, ByteBuffer buffer, int flags, InetAddress inetAddress, int port) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/sendto.2.html\">sendto(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int sendto(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, InetAddress inetAddress, int port) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/sendto.2.html\">sendto(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int sendto(@NonNull FileDescriptor fd, @NonNull byte[] bytes, int byteOffset, int byteCount, int flags, @Nullable SocketAddress address) throws ErrnoException, SocketException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/sendto.2.html\">sendto(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setegid(int egid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setegid.2.html\">setegid(2)</a>.\n     * @deprecated Android Applications do not have sufficient privileges to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setenv(String name, String value, boolean overwrite) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/setenv.3.html\">setenv(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void seteuid(int euid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/seteuid.2.html\">seteuid(2)</a>.\n     * @deprecated Android Applications do not have sufficient privileges to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setgid(int gid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.\n     * @deprecated Android Applications do not have sufficient privileges to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setpgid(int pid, int pgid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Sets process's pgid (process group ID).\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setpgid.2.html\">setpgid(2)</a>.\n     *\n     * @param pid  process id to set the pgid of\n     * @param pgid new pgid for process {@code pid}\n     * @throws ErrnoException an attempt was made to change the process group ID of one\n     *                        of the children of the calling process and the child had\n     *                        already performed an {@link execve(String, String[], String[])}; or\n     *                        {@code pgid} is less than {@code 0}; or\n     *                        an attempt was made to move a process into a process group\n     *                        in a different session, or to change the process group ID\n     *                        of one of the children of the calling process and the\n     *                        child was in a different session, or to change the process\n     *                        group ID of a session leader; or\n     *                        {@code pid} is not the calling process and not a child\n     *                        of the calling process\n     *\n     * @hide\n     ",
    "links" : [ "execve(String" ]
  }, {
    "name" : "public static void setregid(int rgid, int egid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Set real and/or effective group ID of the calling process.\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setregid.2.html\">setregid(2)</a>.\n     *\n     * @param rgid real group ID\n     * @param egid effective group ID\n     * @throws ErrnoException one or more of the target group IDs is not valid\n     *                        in this user namespace; or the calling process is\n     *                        not privileged\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setreuid(int ruid, int euid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Set real and/or effective user ID of the calling process.\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setreuid.2.html\">setreuid(2)</a>.\n     *\n     * @param ruid real user ID\n     * @param euid effective user ID\n     * @throws ErrnoException one or more of the target user IDs is not valid\n     *                        in this user namespace; or the calling process is\n     *                        not privileged\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int setsid() throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setsid.2.html\">setsid(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setsockoptByte(FileDescriptor fd, int level, int option, int value) throws ErrnoException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void setsockoptIfreq(@NonNull FileDescriptor fd, int level, int option, @Nullable String value) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Sets a supplied socket {@code option} to {@code value}.\n     *\n     * See <a href=\"https://man7.org/linux/man-pages/man2/getsockopt.2.html\">getsockopt(2)</a>.\n     * For the list of available options see <a href=\"https://man7.org/linux/man-pages/man7/socket.7.html\">socket(7)</a>.\n     * Corresponding socket options constants reside in {@link OsCosntants}, e.g. {@link OsConstants#SO_REUSEADDR}.\n     *\n     * @param fd    file descriptor of the socket to set options of\n     * @param level level at which the {@code option} resides. For example,\n     *              to indicate that an option is to be interpreted by the TCP protocol,\n     *              level should be set to the protocol number of TCP\n     * @param option name of the option to set\n     * @param value  interface name\n     * @return socket options for file descriptor {@code fd}\n     * @throws ErrnoException if {@code fd} is invalid; or\n     *                        {@code option} is unknown at given {@code level}\n     *\n     * @hide\n     ",
    "links" : [ "android.system.OsConstants#SO_REUSEADDR", "OsCosntants" ]
  }, {
    "name" : "public static void setsockoptInt(FileDescriptor fd, int level, int option, int value) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setsockopt.2.html\">setsockopt(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setsockoptIpMreqn(FileDescriptor fd, int level, int option, int value) throws ErrnoException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void setsockoptGroupReq(FileDescriptor fd, int level, int option, StructGroupReq value) throws ErrnoException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void setsockoptLinger(@NonNull FileDescriptor fd, int level, int option, @NonNull StructLinger value) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Sets {@link OsConstants#SO_LINGER} option for the socket referred to by the file descriptor\n     * {@code fd}.\n     *\n     * @param fd     file descriptor\n     * @param level  level at which the {@code option} resides\n     * @param option name of the option to set\n     * @param value  {@link StructLinger} to set for {@code fd}\n     * @throws ErrnoException if {@code fd} is invalid; or\n     *                        {@code option} is unknown at given {@code level}\n     *\n     * @hide\n     ",
    "links" : [ "android.system.StructLinger", "android.system.OsConstants#SO_LINGER" ]
  }, {
    "name" : "public static void setsockoptTimeval(@NonNull FileDescriptor fd, int level, int option, @NonNull StructTimeval value) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setsockopt.2.html\">setsockopt(2)</a>.\n     *\n     * <p>Only for use with {@code option} values that take a {@code struct timeval} such as\n     * {@link OsConstants#SO_RCVTIMEO} and {@link OsConstants#SO_SNDTIMEO}. Use with other\n     * options is likely to cause incorrect behavior.\n     ",
    "links" : [ "android.system.OsConstants#SO_SNDTIMEO", "android.system.OsConstants#SO_RCVTIMEO" ]
  }, {
    "name" : "public static void setuid(int uid) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.\n     * @deprecated Android Applications do not have sufficient privileges to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setxattr(String path, String name, byte[] value, int flags) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/setxattr.2.html\">setxattr(2)</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void shutdown(FileDescriptor fd, int how) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/shutdown.2.html\">shutdown(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor socket(int domain, int type, int protocol) throws ErrnoException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/socket.2.html\">socket(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void socketpair(int domain, int type, int protocol, FileDescriptor fd1, FileDescriptor fd2) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/socketpair.2.html\">socketpair(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long splice(@NonNull FileDescriptor fdIn, @Nullable Int64Ref offIn, @NonNull FileDescriptor fdOut, @Nullable Int64Ref offOut, long len, int flags) throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * Moves data between two file descriptors without copying\n     * between kernel address space and user address space. It\n     * transfers up to {@code len} bytes of data from the file descriptor {@code fdIn}\n     * to the file descriptor {@code fdOut}, where one of the file descriptors\n     * must refer to a pipe.\n     *\n     * The following semantics apply for {@code fdIn} and {@code offIn}:\n     * <ul>\n     *   <li>If {@code fdIn} refers to a pipe, then {@code offIn} must be {@code null}.</li>\n     *   <li>If {@code fdIn} does not refer to a pipe and {@code offIn} is {@code null}, then\n     *       bytes are read from {@code fdIn} starting from the file offset, and\n     *       the file offset is adjusted appropriately.</li>\n     *   <li>If {@code fdIn} does not refer to a pipe and {@code offIn} is not {@code null}, then\n     *       {@code offIn} must point to a buffer which specifies the starting\n     *       offset from which bytes will be read from {@code fdIn}; in this case,\n     *       the file offset of {@code fdIn} is not changed.</li>\n     * </ul>\n     *\n     * Analogous statements apply for {@code fdOut} and {@code offOut}.\n     *\n     * The flags argument is a bit mask that is composed by ORing\n     * together zero or more of the following values:\n     * <ul>\n     *   <li>{@link OsConstants#SPLICE_F_MOVE}\n     *       Attempt to move pages instead of copying. This is only a\n     *       hint to the kernel: pages may still be copied if the\n     *       kernel cannot move the pages from the pipe, or if the pipe\n     *       buffers don't refer to full pages.</li>\n     *   <li>{@link OsConstants#SPLICE_F_NONBLOCK}\n     *       Do not block on I/O. This makes the splice pipe\n     *       operations nonblocking, but\n     *       {@link splice(FileDescriptor, Int64Ref, FileDescriptor, Int64Ref, long, int)}\n     *       may nevertheless block because the file descriptors that are spliced\n     *       to/from may block (unless they have the {@link OsConstants#O_NONBLOCK} flag set).</li>\n     *   <li>{@link OsConstants#SPLICE_F_MORE}\n     *       More data will be coming in a subsequent splice.</li>\n     *   <li>{@link OsConstants#SPLICE_F_GIFT} Unused</li>\n     * </ul>\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/splice.2.html\">splice(2)</a>.\n     *\n     * @param fdIn   file descriptor to read from\n     * @param offIn  {@code null} for pipe; file offset; or pointer to a buffer that specifies starting offset\n     * @param fdOut  file descriptor to write to\n     * @param offOut {@code null} for pipe; file offset; or pointer to a buffer that specifies starting offset\n     * @param len    number of bytes to read/write\n     * @param flags  bitmask of options\n     * @return       number of bytes spliced on success. A return value of {@code 0} means end of input.\n     * @throws ErrnoException if target fs does not support splicing; or\n     *                        target file opened in append mode; or\n     *                        one or both file descriptors are invalid; or\n     *                        neither of file descriptors refer to a pipe; or\n     *                        {@code fdIn} and {@code fdOut} refer to a same pipe\n     *\n     * @hide\n     ",
    "links" : [ "android.system.OsConstants#SPLICE_F_MOVE", "splice(FileDescriptor", "android.system.OsConstants#SPLICE_F_NONBLOCK", "android.system.OsConstants#SPLICE_F_GIFT", "android.system.OsConstants#SPLICE_F_MORE", "android.system.OsConstants#O_NONBLOCK" ]
  }, {
    "name" : "public static StructStat stat(String path) throws ErrnoException",
    "returnType" : "StructStat",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/stat.2.html\">stat(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructStatVfs statvfs(String path) throws ErrnoException",
    "returnType" : "StructStatVfs",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/statvfs.2.html\">statvfs(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String strerror(int errno)",
    "returnType" : "String",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/strerror.3.html\">strerror(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String strsignal(int signal)",
    "returnType" : "String",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/strsignal.3.html\">strsignal(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void symlink(String oldPath, String newPath) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/symlink.2.html\">symlink(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long sysconf(int name)",
    "returnType" : "long",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/sysconf.3.html\">sysconf(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void tcdrain(FileDescriptor fd) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/tcdrain.3.html\">tcdrain(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void tcsendbreak(FileDescriptor fd, int duration) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/tcsendbreak.3.html\">tcsendbreak(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int umask(int mask)",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/umask.2.html\">umask(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StructUtsname uname()",
    "returnType" : "StructUtsname",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/uname.2.html\">uname(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unlink(@Nullable String pathname) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Deletes a name from the filesystem. If that name was the last link to a file\n     * and no processes have the file open, the file is deleted and the space it was\n     * using is made available for reuse.\n     *\n     * See <a href=\"http://man7.org/linux/man-pages/man2/unlink.2.html\">unlink(2)</a>.\n     *\n     * @param pathname name in the filesystem to delete\n     * @throws ErrnoException write access to {@code pathname} is not allowed; or\n     *                        I/O error occurred; or\n     *                        {@code pathname} refers to directory; or\n     *                        too many symbolic links were encountered in translating {@code pathname}; or\n     *                        {@code pathname} is used by the system or another process\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unsetenv(String name) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man3/unsetenv.3.html\">unsetenv(3)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int waitpid(int pid, Int32Ref status, int options) throws ErrnoException",
    "returnType" : "int",
    "comment" : "\n     * @hide See <a href=\"http://man7.org/linux/man-pages/man2/waitpid.2.html\">waitpid(2)</a>.\n     *\n     * @throws IllegalArgumentException if {@code status != null && status.length != 1}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int write(FileDescriptor fd, ByteBuffer buffer) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/write.2.html\">write(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int write(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/write.2.html\">write(2)</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int writev(FileDescriptor fd, Object[] buffers, int[] offsets, int[] byteCounts) throws ErrnoException, InterruptedIOException",
    "returnType" : "int",
    "comment" : "\n     * See <a href=\"http://man7.org/linux/man-pages/man2/writev.2.html\">writev(2)</a>.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static FileDescriptor accept(FileDescriptor fd, InetSocketAddress peerAddress) throws ErrnoException, SocketException", "public static FileDescriptor accept(FileDescriptor fd, SocketAddress peerAddress) throws ErrnoException, SocketException", "public static boolean access(String path, int mode) throws ErrnoException", "public static InetAddress[] android_getaddrinfo(String node, StructAddrinfo hints, int netId) throws GaiException", "public static void bind(FileDescriptor fd, InetAddress address, int port) throws ErrnoException, SocketException", "public static void bind(@NonNull FileDescriptor fd, @NonNull SocketAddress address) throws ErrnoException, SocketException", "public static StructCapUserData[] capget(@NonNull StructCapUserHeader hdr) throws ErrnoException", "public static void capset(@NonNull StructCapUserHeader hdr, @NonNull StructCapUserData[] data) throws ErrnoException", "public static void chmod(String path, int mode) throws ErrnoException", "public static void chown(String path, int uid, int gid) throws ErrnoException", "public static void close(FileDescriptor fd) throws ErrnoException", "public static void connect(FileDescriptor fd, InetAddress address, int port) throws ErrnoException, SocketException", "public static void connect(@NonNull FileDescriptor fd, @NonNull SocketAddress address) throws ErrnoException, SocketException", "public static FileDescriptor dup(FileDescriptor oldFd) throws ErrnoException", "public static FileDescriptor dup2(FileDescriptor oldFd, int newFd) throws ErrnoException", "public static String[] environ()", "public static void execv(String filename, String[] argv) throws ErrnoException", "public static void execve(String filename, String[] argv, String[] envp) throws ErrnoException", "public static void fchmod(FileDescriptor fd, int mode) throws ErrnoException", "public static void fchown(FileDescriptor fd, int uid, int gid) throws ErrnoException", "public static int fcntlInt(@NonNull FileDescriptor fd, int cmd, int arg) throws ErrnoException", "public static int fcntlVoid(FileDescriptor fd, int cmd) throws ErrnoException", "public static void fdatasync(FileDescriptor fd) throws ErrnoException", "public static StructStat fstat(FileDescriptor fd) throws ErrnoException", "public static StructStatVfs fstatvfs(FileDescriptor fd) throws ErrnoException", "public static void fsync(FileDescriptor fd) throws ErrnoException", "public static void ftruncate(FileDescriptor fd, long length) throws ErrnoException", "public static String gai_strerror(int error)", "public static int getegid()", "public static int geteuid()", "public static int getgid()", "public static String getenv(String name)", "public static StructIfaddrs[] getifaddrs() throws ErrnoException", "public static String getnameinfo(InetAddress address, int flags) throws GaiException", "public static SocketAddress getpeername(FileDescriptor fd) throws ErrnoException", "public static int getpgid(int pid) throws ErrnoException", "public static int getpid()", "public static int getppid()", "public static StructPasswd getpwnam(String name) throws ErrnoException", "public static StructPasswd getpwuid(int uid) throws ErrnoException", "public static StructRlimit getrlimit(int resource) throws ErrnoException", "public static SocketAddress getsockname(FileDescriptor fd) throws ErrnoException", "public static int getsockoptByte(FileDescriptor fd, int level, int option) throws ErrnoException", "public static InetAddress getsockoptInAddr(FileDescriptor fd, int level, int option) throws ErrnoException", "public static int getsockoptInt(@NonNull FileDescriptor fd, int level, int option) throws ErrnoException", "public static StructLinger getsockoptLinger(@NonNull FileDescriptor fd, int level, int option) throws ErrnoException", "public static StructTimeval getsockoptTimeval(@NonNull FileDescriptor fd, int level, int option) throws ErrnoException", "public static StructUcred getsockoptUcred(FileDescriptor fd, int level, int option) throws ErrnoException", "public static int gettid()", "public static int getuid()", "public static byte[] getxattr(String path, String name) throws ErrnoException", "public static String if_indextoname(int index)", "public static int if_nametoindex(String name)", "public static InetAddress inet_pton(int family, String address)", "public static InetAddress ioctlInetAddress(FileDescriptor fd, int cmd, String interfaceName) throws ErrnoException", "public static int ioctlInt(@NonNull FileDescriptor fd, int cmd) throws ErrnoException", "public static boolean isatty(FileDescriptor fd)", "public static void kill(int pid, int signal) throws ErrnoException", "public static void lchown(String path, int uid, int gid) throws ErrnoException", "public static void link(String oldPath, String newPath) throws ErrnoException", "public static void listen(FileDescriptor fd, int backlog) throws ErrnoException", "public static String[] listxattr(String path) throws ErrnoException", "public static long lseek(FileDescriptor fd, long offset, int whence) throws ErrnoException", "public static StructStat lstat(String path) throws ErrnoException", "public static FileDescriptor memfd_create(@NonNull String name, int flags) throws ErrnoException", "public static void mincore(long address, long byteCount, byte[] vector) throws ErrnoException", "public static void mkdir(String path, int mode) throws ErrnoException", "public static void mkfifo(String path, int mode) throws ErrnoException", "public static void mlock(long address, long byteCount) throws ErrnoException", "public static long mmap(long address, long byteCount, int prot, int flags, FileDescriptor fd, long offset) throws ErrnoException", "public static void msync(long address, long byteCount, int flags) throws ErrnoException", "public static void munlock(long address, long byteCount) throws ErrnoException", "public static void munmap(long address, long byteCount) throws ErrnoException", "public static FileDescriptor open(String path, int flags, int mode) throws ErrnoException", "public static FileDescriptor[] pipe() throws ErrnoException", "public static FileDescriptor[] pipe2(int flags) throws ErrnoException", "public static int poll(StructPollfd[] fds, int timeoutMs) throws ErrnoException", "public static void posix_fallocate(FileDescriptor fd, long offset, long length) throws ErrnoException", "public static int prctl(int option, long arg2, long arg3, long arg4, long arg5) throws ErrnoException", "public static int pread(FileDescriptor fd, ByteBuffer buffer, long offset) throws ErrnoException, InterruptedIOException", "public static int pread(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, long offset) throws ErrnoException, InterruptedIOException", "public static int pwrite(FileDescriptor fd, ByteBuffer buffer, long offset) throws ErrnoException, InterruptedIOException", "public static int pwrite(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, long offset) throws ErrnoException, InterruptedIOException", "public static int read(FileDescriptor fd, ByteBuffer buffer) throws ErrnoException, InterruptedIOException", "public static int read(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws ErrnoException, InterruptedIOException", "public static String readlink(String path) throws ErrnoException", "public static String realpath(@Nullable String path) throws ErrnoException", "public static int readv(FileDescriptor fd, Object[] buffers, int[] offsets, int[] byteCounts) throws ErrnoException, InterruptedIOException", "public static int recvfrom(FileDescriptor fd, ByteBuffer buffer, int flags, InetSocketAddress srcAddress) throws ErrnoException, SocketException", "public static int recvfrom(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, InetSocketAddress srcAddress) throws ErrnoException, SocketException", "public static int recvmsg(@NonNull FileDescriptor fd, @NonNull StructMsghdr msg, int flags) throws ErrnoException, SocketException", "public static void remove(String path) throws ErrnoException", "public static void removexattr(String path, String name) throws ErrnoException", "public static void rename(String oldPath, String newPath) throws ErrnoException", "public static long sendfile(FileDescriptor outFd, FileDescriptor inFd, Int64Ref offset, long byteCount) throws ErrnoException", "public static int sendmsg(@NonNull FileDescriptor fd, @NonNull StructMsghdr msg, int flags) throws ErrnoException, SocketException", "public static int sendto(FileDescriptor fd, ByteBuffer buffer, int flags, InetAddress inetAddress, int port) throws ErrnoException, SocketException", "public static int sendto(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, InetAddress inetAddress, int port) throws ErrnoException, SocketException", "public static int sendto(@NonNull FileDescriptor fd, @NonNull byte[] bytes, int byteOffset, int byteCount, int flags, @Nullable SocketAddress address) throws ErrnoException, SocketException", "public static void setegid(int egid) throws ErrnoException", "public static void setenv(String name, String value, boolean overwrite) throws ErrnoException", "public static void seteuid(int euid) throws ErrnoException", "public static void setgid(int gid) throws ErrnoException", "public static void setpgid(int pid, int pgid) throws ErrnoException", "public static void setregid(int rgid, int egid) throws ErrnoException", "public static void setreuid(int ruid, int euid) throws ErrnoException", "public static int setsid() throws ErrnoException", "public static void setsockoptByte(FileDescriptor fd, int level, int option, int value) throws ErrnoException", "public static void setsockoptIfreq(@NonNull FileDescriptor fd, int level, int option, @Nullable String value) throws ErrnoException", "public static void setsockoptInt(FileDescriptor fd, int level, int option, int value) throws ErrnoException", "public static void setsockoptIpMreqn(FileDescriptor fd, int level, int option, int value) throws ErrnoException", "public static void setsockoptGroupReq(FileDescriptor fd, int level, int option, StructGroupReq value) throws ErrnoException", "public static void setsockoptLinger(@NonNull FileDescriptor fd, int level, int option, @NonNull StructLinger value) throws ErrnoException", "public static void setsockoptTimeval(@NonNull FileDescriptor fd, int level, int option, @NonNull StructTimeval value) throws ErrnoException", "public static void setuid(int uid) throws ErrnoException", "public static void setxattr(String path, String name, byte[] value, int flags) throws ErrnoException", "public static void shutdown(FileDescriptor fd, int how) throws ErrnoException", "public static FileDescriptor socket(int domain, int type, int protocol) throws ErrnoException", "public static void socketpair(int domain, int type, int protocol, FileDescriptor fd1, FileDescriptor fd2) throws ErrnoException", "public static long splice(@NonNull FileDescriptor fdIn, @Nullable Int64Ref offIn, @NonNull FileDescriptor fdOut, @Nullable Int64Ref offOut, long len, int flags) throws ErrnoException", "public static StructStat stat(String path) throws ErrnoException", "public static StructStatVfs statvfs(String path) throws ErrnoException", "public static String strerror(int errno)", "public static String strsignal(int signal)", "public static void symlink(String oldPath, String newPath) throws ErrnoException", "public static long sysconf(int name)", "public static void tcdrain(FileDescriptor fd) throws ErrnoException", "public static void tcsendbreak(FileDescriptor fd, int duration) throws ErrnoException", "public static int umask(int mask)", "public static StructUtsname uname()", "public static void unlink(@Nullable String pathname) throws ErrnoException", "public static void unsetenv(String name) throws ErrnoException", "public static int waitpid(int pid, Int32Ref status, int options) throws ErrnoException", "public static int write(FileDescriptor fd, ByteBuffer buffer) throws ErrnoException, InterruptedIOException", "public static int write(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws ErrnoException, InterruptedIOException", "public static int writev(FileDescriptor fd, Object[] buffers, int[] offsets, int[] byteCounts) throws ErrnoException, InterruptedIOException" ],
  "variableNames" : [ ]
}