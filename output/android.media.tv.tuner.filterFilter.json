{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/tuner/filter/Filter.java",
  "packageName" : "android.media.tv.tuner.filter",
  "className" : "Filter",
  "comment" : "\n * Tuner data filter.\n *\n * <p>This class is used to filter wanted data according to the filter's configuration.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TYPE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Undefined filter type.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TS",
    "type" : "int",
    "comment" : "\n     * TS filter type.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MMTP",
    "type" : "int",
    "comment" : "\n     * MMTP filter type.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IP",
    "type" : "int",
    "comment" : "\n     * IP filter type.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TLV",
    "type" : "int",
    "comment" : "\n     * TLV filter type.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALP",
    "type" : "int",
    "comment" : "\n     * ALP filter type.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Filter subtype undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_SECTION",
    "type" : "int",
    "comment" : "\n     * Section filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_PES",
    "type" : "int",
    "comment" : "\n     * PES filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_AUDIO",
    "type" : "int",
    "comment" : "\n     * Audio filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_VIDEO",
    "type" : "int",
    "comment" : "\n     * Video filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_DOWNLOAD",
    "type" : "int",
    "comment" : "\n     * Download filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_RECORD",
    "type" : "int",
    "comment" : "\n     * Record filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_TS",
    "type" : "int",
    "comment" : "\n     * TS filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_PCR",
    "type" : "int",
    "comment" : "\n     * PCR filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_TEMI",
    "type" : "int",
    "comment" : "\n     * TEMI filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_MMTP",
    "type" : "int",
    "comment" : "\n     * MMTP filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_NTP",
    "type" : "int",
    "comment" : "\n     * NTP filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_IP_PAYLOAD",
    "type" : "int",
    "comment" : "\n     * Payload filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_IP",
    "type" : "int",
    "comment" : "\n     * IP filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_PAYLOAD_THROUGH",
    "type" : "int",
    "comment" : "\n     * Payload through filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_TLV",
    "type" : "int",
    "comment" : "\n     * TLV filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_PTP",
    "type" : "int",
    "comment" : "\n     * PTP filter subtype.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_DATA_READY",
    "type" : "int",
    "comment" : "\n     * The status of a filter that the data in the filter buffer is ready to be read.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_LOW_WATER",
    "type" : "int",
    "comment" : "\n     * The status of a filter that the amount of available data in the filter buffer is at low\n     * level.\n     *\n     * The value is set to 25 percent of the buffer size by default. It can be changed when\n     * configuring the filter.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_HIGH_WATER",
    "type" : "int",
    "comment" : "\n     * The status of a filter that the amount of available data in the filter buffer is at high\n     * level.\n     * The value is set to 75 percent of the buffer size by default. It can be changed when\n     * configuring the filter.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_OVERFLOW",
    "type" : "int",
    "comment" : "\n     * The status of a filter that the filter buffer is full and newly filtered data is being\n     * discarded.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "FilterCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtype",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int nativeConfigureFilter(int type, int subType, FilterConfiguration settings)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeGetId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetDataSource(Filter source)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStartFilter()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStopFilter()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeFlushFilter()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeRead(byte[] buffer, long offset, long size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onFilterStatus(int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onFilterEvent(FilterEvent[] events)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setType(@Type int mainType, @Subtype int subtype)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCallback(FilterCallback cb, Executor executor)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public FilterCallback getCallback()",
    "returnType" : "FilterCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int configure(@NonNull FilterConfiguration config)",
    "returnType" : "int",
    "comment" : "\n     * Configures the filter.\n     *\n     * @param config the configuration of the filter.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the filter Id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setDataSource(@Nullable Filter source)",
    "returnType" : "int",
    "comment" : "\n     * Sets the filter's data source.\n     *\n     * A filter uses demux as data source by default. If the data was packetized\n     * by multiple protocols, multiple filters may need to work together to\n     * extract all protocols' header. Then a filter's data source can be output\n     * from another filter.\n     *\n     * @param source the filter instance which provides data input. Switch to\n     * use demux as data source if the filter instance is NULL.\n     * @return result status of the operation.\n     * @throws IllegalStateException if the data source has been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int start()",
    "returnType" : "int",
    "comment" : "\n     * Starts filtering data.\n     *\n     * <p>Does nothing if the filter is already started.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int stop()",
    "returnType" : "int",
    "comment" : "\n     * Stops filtering data.\n     *\n     * <p>Does nothing if the filter is stopped or not started.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int flush()",
    "returnType" : "int",
    "comment" : "\n     * Flushes the filter.\n     *\n     * <p>The data which is already produced by filter but not consumed yet will\n     * be cleared.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(@NonNull byte[] buffer, @BytesLong long offset, @BytesLong long size)",
    "returnType" : "int",
    "comment" : "\n     * Copies filtered data from filter output to the given byte array.\n     *\n     * @param buffer the buffer to store the filtered data.\n     * @param offset the index of the first byte in {@code buffer} to write.\n     * @param size the maximum number of bytes to read.\n     * @return the number of bytes read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Stops filtering data and releases the Filter instance.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_UNDEFINED", "TYPE_TS", "TYPE_MMTP", "TYPE_IP", "TYPE_TLV", "TYPE_ALP", "SUBTYPE_UNDEFINED", "SUBTYPE_SECTION", "SUBTYPE_PES", "SUBTYPE_AUDIO", "SUBTYPE_VIDEO", "SUBTYPE_DOWNLOAD", "SUBTYPE_RECORD", "SUBTYPE_TS", "SUBTYPE_PCR", "SUBTYPE_TEMI", "SUBTYPE_MMTP", "SUBTYPE_NTP", "SUBTYPE_IP_PAYLOAD", "SUBTYPE_IP", "SUBTYPE_PAYLOAD_THROUGH", "SUBTYPE_TLV", "SUBTYPE_PTP", "STATUS_DATA_READY", "STATUS_LOW_WATER", "STATUS_HIGH_WATER", "STATUS_OVERFLOW", "TAG", "mNativeContext", "mCallback", "mExecutor", "mId", "mMainType", "mSubtype", "mSource", "mStarted", "mIsClosed", "mLock" ],
  "methodNames" : [ "private native int nativeConfigureFilter(int type, int subType, FilterConfiguration settings)", "private native int nativeGetId()", "private native int nativeSetDataSource(Filter source)", "private native int nativeStartFilter()", "private native int nativeStopFilter()", "private native int nativeFlushFilter()", "private native int nativeRead(byte[] buffer, long offset, long size)", "private native int nativeClose()", "private void onFilterStatus(int status)", "private void onFilterEvent(FilterEvent[] events)", "public void setType(@Type int mainType, @Subtype int subtype)", "public void setCallback(FilterCallback cb, Executor executor)", "public FilterCallback getCallback()", "public int configure(@NonNull FilterConfiguration config)", "public int getId()", "public int setDataSource(@Nullable Filter source)", "public int start()", "public int stop()", "public int flush()", "public int read(@NonNull byte[] buffer, @BytesLong long offset, @BytesLong long size)", "public void close()" ]
}