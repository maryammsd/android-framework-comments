{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/projection/MediaProjection.java",
  "packageName" : "android.media.projection",
  "className" : "MediaProjection",
  "comment" : "\n * A token granting applications the ability to capture screen contents and/or\n * record system audio. The exact capabilities granted depend on the type of\n * MediaProjection.\n *\n * <p>\n * A screen capture session can be started through {@link\n * MediaProjectionManager#createScreenCaptureIntent}. This grants the ability to\n * capture screen contents, but not system audio.\n * </p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImpl",
    "type" : "IMediaProjection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Map<Callback, CallbackRecord>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerCallback(Callback callback, Handler handler)",
    "returnType" : "void",
    "comment" : " Register a listener to receive notifications about when the {@link\n     * MediaProjection} changes state.\n     *\n     * @param callback The callback to call.\n     * @param handler The handler on which the callback should be invoked, or\n     * null if the callback should be invoked on the calling thread's looper.\n     *\n     * @see #unregisterCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(Callback callback)",
    "returnType" : "void",
    "comment" : " Unregister a MediaProjection listener.\n     *\n     * @param callback The callback to unregister.\n     *\n     * @see #registerCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, boolean isSecure, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, int flags, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * Creates a {@link android.hardware.display.VirtualDisplay} to capture the\n     * contents of the screen.\n     *\n     * @param name The name of the virtual display, must be non-empty.\n     * @param width The width of the virtual display in pixels. Must be\n     * greater than 0.\n     * @param height The height of the virtual display in pixels. Must be\n     * greater than 0.\n     * @param dpi The density of the virtual display in dpi. Must be greater\n     * than 0.\n     * @param surface The surface to which the content of the virtual display\n     * should be rendered, or null if there is none initially.\n     * @param flags A combination of virtual display flags. See {@link DisplayManager} for the full\n     * list of flags.\n     * @param callback Callback to call when the virtual display's state\n     * changes, or null if none.\n     * @param handler The {@link android.os.Handler} on which the callback should be\n     * invoked, or null if the callback should be invoked on the calling\n     * thread's main {@link android.os.Looper}.\n     *\n     * @see android.hardware.display.VirtualDisplay\n     ",
    "links" : [ "android.hardware.display.VirtualDisplay", "DisplayManager", "android.os.Handler", "android.os.Looper" ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull VirtualDisplayConfig virtualDisplayConfig, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * Creates a {@link android.hardware.display.VirtualDisplay} to capture the\n     * contents of the screen.\n     *\n     * @param virtualDisplayConfig The arguments for the virtual display configuration. See\n     * {@link VirtualDisplayConfig} for using it.\n     * @param callback Callback to call when the virtual display's state\n     * changes, or null if none.\n     * @param handler The {@link android.os.Handler} on which the callback should be\n     * invoked, or null if the callback should be invoked on the calling\n     * thread's main {@link android.os.Looper}.\n     *\n     * @see android.hardware.display.VirtualDisplay\n     * @hide\n     ",
    "links" : [ "android.hardware.display.VirtualDisplay", "VirtualDisplayConfig", "android.os.Handler", "android.os.Looper" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops projection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IMediaProjection getProjection()",
    "returnType" : "IMediaProjection",
    "comment" : "\n     * Get the underlying IMediaProjection.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mImpl", "mContext", "mCallbacks" ],
  "methodNames" : [ "public void registerCallback(Callback callback, Handler handler)", "public void unregisterCallback(Callback callback)", "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, boolean isSecure, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)", "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, int flags, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)", "public VirtualDisplay createVirtualDisplay(@NonNull VirtualDisplayConfig virtualDisplayConfig, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)", "public void stop()", "public IMediaProjection getProjection()" ]
}