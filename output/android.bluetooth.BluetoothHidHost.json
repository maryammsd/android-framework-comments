{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothHidHost.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHidHost",
  "comment" : "\n * This class provides the public APIs to control the Bluetooth Input\n * Device Profile.\n *\n * <p>BluetoothHidHost is a proxy object for controlling the Bluetooth\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get\n * the BluetoothHidHost proxy object.\n *\n * <p>Each method is protected with its appropriate permission.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Input\n     * Device profile.\n     *\n     * <p>This intent will have 3 extras:\n     * <ul>\n     * <li> {@link #EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of\n     * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},\n     * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "ACTION_PROTOCOL_MODE_CHANGED",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_HANDSHAKE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_REPORT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VIRTUAL_UNPLUG_STATUS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_IDLE_TIME_CHANGED",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_DISCONNECT_FAILED_NOT_CONNECTED",
    "type" : "int",
    "comment" : "\n     * Return codes for the connect and disconnect Bluez / Dbus calls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_CONNECT_FAILED_ALREADY_CONNECTED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_CONNECT_FAILED_ATTEMPT_FAILED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_OPERATION_GENERIC_FAILURE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_OPERATION_SUCCESS",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_REPORT_MODE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_BOOT_MODE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_UNSUPPORTED_MODE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TYPE_INPUT",
    "type" : "byte",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TYPE_OUTPUT",
    "type" : "byte",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TYPE_FEATURE",
    "type" : "byte",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VIRTUAL_UNPLUG_STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VIRTUAL_UNPLUG_STATUS_FAIL",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PROTOCOL_MODE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REPORT_TYPE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REPORT_ID",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REPORT_BUFFER_SIZE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REPORT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATUS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VIRTUAL_UNPLUG_STATUS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IDLE_TIME",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothHidHost>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHidHost getService()",
    "returnType" : "IBluetoothHidHost",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p> The system supports connection to multiple input devices.\n     *\n     * <p> This API returns false in scenarios like the profile on the\n     * device is already connected or Bluetooth is not turned on.\n     * When this API returns true, it is guaranteed that\n     * connection state intent for the profile will be broadcasted with\n     * the state. Users can get the connection state of the profile\n     * from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p> This API will return false in scenarios like the profile on the\n     * Bluetooth device is not in connected state etc. When this API returns,\n     * true, it is guaranteed that the connection state change\n     * intent will be broadcasted with the state. Users can get the\n     * disconnection state of the profile from this intent.\n     *\n     * <p> If the disconnection is initiated by a remote device, the state\n     * will transition from {@link #STATE_CONNECTED} to\n     * {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the\n     * host (local) device the state will transition from\n     * {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to\n     * state {@link #STATE_DISCONNECTED}. The transition to\n     * {@link #STATE_DISCONNECTING} can be used to distinguish between the\n     * two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p> The device should already be paired.\n     * Priority can be one of {@link #PRIORITY_ON} or {@link #PRIORITY_OFF},\n     *\n     * @param device Paired bluetooth device\n     * @param priority\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of {@link #CONNECTION_POLICY_ALLOWED},\n     * {@link #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p> The priority can be any of:\n     * {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p> The connection policy can be any of:\n     * {@link #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN},\n     * {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean virtualUnplug(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate virtual unplug for a HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean getProtocolMode(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Get_Protocol_Mode command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean setProtocolMode(BluetoothDevice device, int protocolMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Set_Protocol_Mode command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean getReport(BluetoothDevice device, byte reportType, byte reportId, int bufferSize)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Get_Report command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @param reportType Report type\n     * @param reportId Report ID\n     * @param bufferSize Report receiving buffer size\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean setReport(BluetoothDevice device, byte reportType, String report)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Set_Report command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @param reportType Report type\n     * @param report Report receiving buffer size\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean sendData(BluetoothDevice device, String report)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Send_Data command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @param report Report to send\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean getIdleTime(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Get_Idle_Time command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public boolean setIdleTime(BluetoothDevice device, byte idleTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Send Set_Idle_Time command to the connected HID input device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n     *\n     * @param device Remote Bluetooth Device\n     * @param idleTime Idle time to be set on HID Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_PROTOCOL_MODE_CHANGED", "ACTION_HANDSHAKE", "ACTION_REPORT", "ACTION_VIRTUAL_UNPLUG_STATUS", "ACTION_IDLE_TIME_CHANGED", "INPUT_DISCONNECT_FAILED_NOT_CONNECTED", "INPUT_CONNECT_FAILED_ALREADY_CONNECTED", "INPUT_CONNECT_FAILED_ATTEMPT_FAILED", "INPUT_OPERATION_GENERIC_FAILURE", "INPUT_OPERATION_SUCCESS", "PROTOCOL_REPORT_MODE", "PROTOCOL_BOOT_MODE", "PROTOCOL_UNSUPPORTED_MODE", "REPORT_TYPE_INPUT", "REPORT_TYPE_OUTPUT", "REPORT_TYPE_FEATURE", "VIRTUAL_UNPLUG_STATUS_SUCCESS", "VIRTUAL_UNPLUG_STATUS_FAIL", "EXTRA_PROTOCOL_MODE", "EXTRA_REPORT_TYPE", "EXTRA_REPORT_ID", "EXTRA_REPORT_BUFFER_SIZE", "EXTRA_REPORT", "EXTRA_STATUS", "EXTRA_VIRTUAL_UNPLUG_STATUS", "EXTRA_IDLE_TIME", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ " void close()", "private IBluetoothHidHost getService()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)", "public boolean virtualUnplug(BluetoothDevice device)", "public boolean getProtocolMode(BluetoothDevice device)", "public boolean setProtocolMode(BluetoothDevice device, int protocolMode)", "public boolean getReport(BluetoothDevice device, byte reportType, byte reportId, int bufferSize)", "public boolean setReport(BluetoothDevice device, byte reportType, String report)", "public boolean sendData(BluetoothDevice device, String report)", "public boolean getIdleTime(BluetoothDevice device)", "public boolean setIdleTime(BluetoothDevice device, byte idleTime)", "private static void log(String msg)" ]
}