{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/backup/BackupHelper.java",
  "packageName" : "android.app.backup",
  "className" : "BackupHelper",
  "comment" : "\n * Defines the calling interface that {@link BackupAgentHelper} uses\n * when dispatching backup and restore operations to the installed helpers.\n * Applications can define and install their own helpers as well as using those\n * provided as part of the Android framework.\n * <p>\n * Although multiple helper objects may be installed simultaneously, each helper\n * is responsible only for handling its own data, and will not see entities\n * created by other components within the backup system.  Invocations of multiple\n * helpers are performed sequentially by the {@link BackupAgentHelper}, with each\n * helper given a chance to access its own saved state from within the state record\n * produced during the previous backup operation.\n *\n * @see BackupAgentHelper\n * @see FileBackupHelper\n * @see SharedPreferencesBackupHelper\n ",
  "links" : [ "android.app.backup.BackupAgentHelper" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)",
    "returnType" : "void",
    "comment" : "\n     * Based on <code>oldState</code>, determine what application content\n     * needs to be backed up, write it to <code>data</code>, and fill in\n     * <code>newState</code> with the complete state as it exists now.\n     * <p>\n     * Implementing this method is much like implementing\n     * {@link BackupAgent#onBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor)\n     * onBackup()} &mdash; the method parameters are the same.  When this method is invoked the\n     * {@code oldState} descriptor points to the beginning of the state data\n     * written during this helper's previous backup operation, and the {@code newState}\n     * descriptor points to the file location at which the helper should write its\n     * new state after performing the backup operation.\n     * <p class=\"note\">\n     * <strong>Note:</strong> The helper should not close or seek either the {@code oldState} or\n     * the {@code newState} file descriptors.  It is essential that when reading the helper's\n     * saved state from the {@code oldState} file, no extra content is consumed beyond\n     * what was stored by this helper.  If more old state data is read, even accidentally,\n     * it will make it impossible for additional helpers that may be invoked after this one\n     * to properly reconstruct their prior state.</p>\n     *\n     * @param oldState An open, read-only {@link android.os.ParcelFileDescriptor} pointing to the\n     *            last backup state provided by the application. May be\n     *            <code>null</code>, in which case no prior state is being\n     *            provided and the application should perform a full backup.\n     * @param data An open, read/write {@link BackupDataOutput}\n     *            pointing to the backup data destination.\n     *            Typically the application will use backup helper classes to\n     *            write to this file.\n     * @param newState An open, read/write {@link android.os.ParcelFileDescriptor} pointing to an\n     *            empty file. The application should record the final backup\n     *            state here after writing the requested data to the <code>data</code>\n     *            output stream.\n     ",
    "links" : [ "android.app.backup.BackupAgent#onBackup(ParcelFileDescriptor", "android.app.backup.BackupDataOutput", "android.os.ParcelFileDescriptor" ]
  }, {
    "name" : "public void restoreEntity(BackupDataInputStream data)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link android.app.backup.BackupAgentHelper BackupAgentHelper}\n     * to restore a single entity from the restore data set.  This method will be\n     * called for each entity in the data set that belongs to this handler.\n     * <p class=\"note\">\n     * <strong>Note:</strong> Do not close the <code>data</code> stream.  Do not read more than\n     * {@link android.app.backup.BackupDataInputStream#size() size()} bytes from\n     * <code>data</code>.</p>\n     *\n     * @param data An open {@link BackupDataInputStream} from which the backup data can be read.\n     ",
    "links" : [ "android.app.backup.BackupDataInputStream", "android.app.backup.BackupDataInputStream#size()", "android.app.backup.BackupAgentHelper" ]
  }, {
    "name" : "public void writeNewStateDescription(ParcelFileDescriptor newState)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link android.app.backup.BackupAgentHelper BackupAgentHelper}\n     * after a restore operation to write the backup state file corresponding to\n     * the data as processed by the helper.  The data written here will be\n     * available to the helper during the next call to its\n     * {@link #performBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor)\n     * performBackup()} method.\n     * <p>\n     * This method will be called even if the handler's\n     * {@link #restoreEntity(BackupDataInputStream) restoreEntity()} method was never invoked during\n     * the restore operation.\n     * <p class=\"note\">\n     * <strong>Note:</strong> The helper should not close or seek the {@code newState}\n     * file descriptor.</p>\n     *\n     * @param newState A {@link android.os.ParcelFileDescriptor} to which the new state will be\n     * written.\n     ",
    "links" : [ "android.os.ParcelFileDescriptor", "#performBackup(ParcelFileDescriptor", "android.app.backup.BackupAgentHelper", "#restoreEntity(BackupDataInputStream)" ]
  } ],
  "methodNames" : [ "public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)", "public void restoreEntity(BackupDataInputStream data)", "public void writeNewStateDescription(ParcelFileDescriptor newState)" ],
  "variableNames" : [ ]
}