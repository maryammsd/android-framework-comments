{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/Spline.java",
  "packageName" : "android.util",
  "className" : "Spline",
  "comment" : "\n * Performs spline interpolation given a set of control points.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract float interpolate(float x)",
    "returnType" : "float",
    "comment" : "\n     * Interpolates the value of Y = f(X) for given X.\n     * Clamps X to the domain of the spline.\n     *\n     * @param x The X value.\n     * @return The interpolated Y = f(X) value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spline createSpline(float[] x, float[] y)",
    "returnType" : "Spline",
    "comment" : "\n     * Creates an appropriate spline based on the properties of the control points.\n     *\n     * If the control points are monotonic then the resulting spline will preserve that and\n     * otherwise optimize for error bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spline createMonotoneCubicSpline(float[] x, float[] y)",
    "returnType" : "Spline",
    "comment" : "\n     * Creates a monotone cubic spline from a given set of control points.\n     *\n     * The spline is guaranteed to pass through each control point exactly.\n     * Moreover, assuming the control points are monotonic (Y is non-decreasing or\n     * non-increasing) then the interpolated values will also be monotonic.\n     *\n     * This function uses the Fritsch-Carlson method for computing the spline parameters.\n     * http://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n     *\n     * @param x The X component of the control points, strictly increasing.\n     * @param y The Y component of the control points, monotonic.\n     * @return\n     *\n     * @throws IllegalArgumentException if the X or Y arrays are null, have\n     * different lengths or have fewer than 2 values.\n     * @throws IllegalArgumentException if the control points are not monotonic.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spline createLinearSpline(float[] x, float[] y)",
    "returnType" : "Spline",
    "comment" : "\n     * Creates a linear spline from a given set of control points.\n     *\n     * Like a monotone cubic spline, the interpolated curve will be monotonic if the control points\n     * are monotonic.\n     *\n     * @param x The X component of the control points, strictly increasing.\n     * @param y The Y component of the control points.\n     * @return\n     *\n     * @throws IllegalArgumentException if the X or Y arrays are null, have\n     * different lengths or have fewer than 2 values.\n     * @throws IllegalArgumentException if the X components of the control points are not strictly\n     * increasing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isStrictlyIncreasing(float[] x)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isMonotonic(float[] x)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract float interpolate(float x)", "public static Spline createSpline(float[] x, float[] y)", "public static Spline createMonotoneCubicSpline(float[] x, float[] y)", "public static Spline createLinearSpline(float[] x, float[] y)", "private static boolean isStrictlyIncreasing(float[] x)", "private static boolean isMonotonic(float[] x)" ],
  "variableNames" : [ ]
}