{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/Intent.java",
  "packageName" : "android.content",
  "className" : "Intent",
  "comment" : "\n * An intent is an abstract description of an operation to be performed.  It\n * can be used with {@link Context#startActivity(Intent) startActivity} to\n * launch an {@link android.app.Activity},\n * {@link android.content.Context#sendBroadcast(Intent) broadcastIntent} to\n * send it to any interested {@link BroadcastReceiver BroadcastReceiver} components,\n * and {@link android.content.Context#startService} or\n * {@link android.content.Context#bindService} to communicate with a\n * background {@link android.app.Service}.\n *\n * <p>An Intent provides a facility for performing late runtime binding between the code in\n * different applications. Its most significant use is in the launching of activities, where it\n * can be thought of as the glue between activities. It is basically a passive data structure\n * holding an abstract description of an action to be performed.</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about how to create and resolve intents, read the\n * <a href=\"{@docRoot}guide/topics/intents/intents-filters.html\">Intents and Intent Filters</a>\n * developer guide.</p>\n * </div>\n *\n * <a name=\"IntentStructure\"></a>\n * <h3>Intent Structure</h3>\n * <p>The primary pieces of information in an intent are:</p>\n *\n * <ul>\n *   <li> <p><b>action</b> -- The general action to be performed, such as\n *     {@link #ACTION_VIEW}, {@link #ACTION_EDIT}, {@link #ACTION_MAIN},\n *     etc.</p>\n *   </li>\n *   <li> <p><b>data</b> -- The data to operate on, such as a person record\n *     in the contacts database, expressed as a {@link android.net.Uri}.</p>\n *   </li>\n * </ul>\n *\n *\n * <p>Some examples of action/data pairs are:</p>\n *\n * <ul>\n *   <li> <p><b>{@link #ACTION_VIEW} <i>content://contacts/people/1</i></b> -- Display\n *     information about the person whose identifier is \"1\".</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_DIAL} <i>content://contacts/people/1</i></b> -- Display\n *     the phone dialer with the person filled in.</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_VIEW} <i>tel:123</i></b> -- Display\n *     the phone dialer with the given number filled in.  Note how the\n *     VIEW action does what is considered the most reasonable thing for\n *     a particular URI.</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_DIAL} <i>tel:123</i></b> -- Display\n *     the phone dialer with the given number filled in.</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_EDIT} <i>content://contacts/people/1</i></b> -- Edit\n *     information about the person whose identifier is \"1\".</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_VIEW} <i>content://contacts/people/</i></b> -- Display\n *     a list of people, which the user can browse through.  This example is a\n *     typical top-level entry into the Contacts application, showing you the\n *     list of people. Selecting a particular person to view would result in a\n *     new intent { <b>{@link #ACTION_VIEW} <i>content://contacts/people/N</i></b> }\n *     being used to start an activity to display that person.</p>\n *   </li>\n * </ul>\n *\n * <p>In addition to these primary attributes, there are a number of secondary\n * attributes that you can also include with an intent:</p>\n *\n * <ul>\n *     <li> <p><b>category</b> -- Gives additional information about the action\n *         to execute.  For example, {@link #CATEGORY_LAUNCHER} means it should\n *         appear in the Launcher as a top-level application, while\n *         {@link #CATEGORY_ALTERNATIVE} means it should be included in a list\n *         of alternative actions the user can perform on a piece of data.</p>\n *     <li> <p><b>type</b> -- Specifies an explicit type (a MIME type) of the\n *         intent data.  Normally the type is inferred from the data itself.\n *         By setting this attribute, you disable that evaluation and force\n *         an explicit type.</p>\n *     <li> <p><b>component</b> -- Specifies an explicit name of a component\n *         class to use for the intent.  Normally this is determined by looking\n *         at the other information in the intent (the action, data/type, and\n *         categories) and matching that with a component that can handle it.\n *         If this attribute is set then none of the evaluation is performed,\n *         and this component is used exactly as is.  By specifying this attribute,\n *         all of the other Intent attributes become optional.</p>\n *     <li> <p><b>extras</b> -- This is a {@link Bundle} of any additional information.\n *         This can be used to provide extended information to the component.\n *         For example, if we have a action to send an e-mail message, we could\n *         also include extra pieces of data here to supply a subject, body,\n *         etc.</p>\n * </ul>\n *\n * <p>Here are some examples of other operations you can specify as intents\n * using these additional parameters:</p>\n *\n * <ul>\n *   <li> <p><b>{@link #ACTION_MAIN} with category {@link #CATEGORY_HOME}</b> --\n *     Launch the home screen.</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_GET_CONTENT} with MIME type\n *     <i>{@link android.provider.Contacts.Phones#CONTENT_URI\n *     vnd.android.cursor.item/phone}</i></b>\n *     -- Display the list of people's phone numbers, allowing the user to\n *     browse through them and pick one and return it to the parent activity.</p>\n *   </li>\n *   <li> <p><b>{@link #ACTION_GET_CONTENT} with MIME type\n *     <i>*{@literal /}*</i> and category {@link #CATEGORY_OPENABLE}</b>\n *     -- Display all pickers for data that can be opened with\n *     {@link ContentResolver#openInputStream(Uri) ContentResolver.openInputStream()},\n *     allowing the user to pick one of them and then some data inside of it\n *     and returning the resulting URI to the caller.  This can be used,\n *     for example, in an e-mail application to allow the user to pick some\n *     data to include as an attachment.</p>\n *   </li>\n * </ul>\n *\n * <p>There are a variety of standard Intent action and category constants\n * defined in the Intent class, but applications can also define their own.\n * These strings use Java-style scoping, to ensure they are unique -- for\n * example, the standard {@link #ACTION_VIEW} is called\n * \"android.intent.action.VIEW\".</p>\n *\n * <p>Put together, the set of actions, data types, categories, and extra data\n * defines a language for the system allowing for the expression of phrases\n * such as \"call john smith's cell\".  As applications are added to the system,\n * they can extend this language by adding new actions, types, and categories, or\n * they can modify the behavior of existing phrases by supplying their own\n * activities that handle them.</p>\n *\n * <a name=\"IntentResolution\"></a>\n * <h3>Intent Resolution</h3>\n *\n * <p>There are two primary forms of intents you will use.\n *\n * <ul>\n *     <li> <p><b>Explicit Intents</b> have specified a component (via\n *     {@link #setComponent} or {@link #setClass}), which provides the exact\n *     class to be run.  Often these will not include any other information,\n *     simply being a way for an application to launch various internal\n *     activities it has as the user interacts with the application.\n *\n *     <li> <p><b>Implicit Intents</b> have not specified a component;\n *     instead, they must include enough information for the system to\n *     determine which of the available components is best to run for that\n *     intent.\n * </ul>\n *\n * <p>When using implicit intents, given such an arbitrary intent we need to\n * know what to do with it. This is handled by the process of <em>Intent\n * resolution</em>, which maps an Intent to an {@link android.app.Activity},\n * {@link BroadcastReceiver}, or {@link android.app.Service} (or sometimes two or\n * more activities/receivers) that can handle it.</p>\n *\n * <p>The intent resolution mechanism basically revolves around matching an\n * Intent against all of the &lt;intent-filter&gt; descriptions in the\n * installed application packages.  (Plus, in the case of broadcasts, any {@link BroadcastReceiver}\n * objects explicitly registered with {@link Context#registerReceiver}.)  More\n * details on this can be found in the documentation on the {@link\n * IntentFilter} class.</p>\n *\n * <p>There are three pieces of information in the Intent that are used for\n * resolution: the action, type, and category.  Using this information, a query\n * is done on the {@link PackageManager} for a component that can handle the\n * intent. The appropriate component is determined based on the intent\n * information supplied in the <code>AndroidManifest.xml</code> file as\n * follows:</p>\n *\n * <ul>\n *     <li> <p>The <b>action</b>, if given, must be listed by the component as\n *         one it handles.</p>\n *     <li> <p>The <b>type</b> is retrieved from the Intent's data, if not\n *         already supplied in the Intent.  Like the action, if a type is\n *         included in the intent (either explicitly or implicitly in its\n *         data), then this must be listed by the component as one it handles.</p>\n *     <li> For data that is not a <code>content:</code> URI and where no explicit\n *         type is included in the Intent, instead the <b>scheme</b> of the\n *         intent data (such as <code>http:</code> or <code>mailto:</code>) is\n *         considered. Again like the action, if we are matching a scheme it\n *         must be listed by the component as one it can handle.\n *     <li> <p>The <b>categories</b>, if supplied, must <em>all</em> be listed\n *         by the activity as categories it handles.  That is, if you include\n *         the categories {@link #CATEGORY_LAUNCHER} and\n *         {@link #CATEGORY_ALTERNATIVE}, then you will only resolve to components\n *         with an intent that lists <em>both</em> of those categories.\n *         Activities will very often need to support the\n *         {@link #CATEGORY_DEFAULT} so that they can be found by\n *         {@link Context#startActivity Context.startActivity()}.</p>\n * </ul>\n *\n * <p>For example, consider the Note Pad sample application that\n * allows a user to browse through a list of notes data and view details about\n * individual items.  Text in italics indicates places where you would replace a\n * name with one specific to your own package.</p>\n *\n * <pre> &lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *       package=\"<i>com.android.notepad</i>\"&gt;\n *     &lt;application android:icon=\"@drawable/app_notes\"\n *             android:label=\"@string/app_name\"&gt;\n *\n *         &lt;provider class=\".NotePadProvider\"\n *                 android:authorities=\"<i>com.google.provider.NotePad</i>\" /&gt;\n *\n *         &lt;activity class=\".NotesList\" android:label=\"@string/title_notes_list\"&gt;\n *             &lt;intent-filter&gt;\n *                 &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n *             &lt;/intent-filter&gt;\n *             &lt;intent-filter&gt;\n *                 &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n *                 &lt;action android:name=\"android.intent.action.EDIT\" /&gt;\n *                 &lt;action android:name=\"android.intent.action.PICK\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n *                 &lt;data android:mimeType=\"vnd.android.cursor.dir/<i>vnd.google.note</i>\" /&gt;\n *             &lt;/intent-filter&gt;\n *             &lt;intent-filter&gt;\n *                 &lt;action android:name=\"android.intent.action.GET_CONTENT\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n *                 &lt;data android:mimeType=\"vnd.android.cursor.item/<i>vnd.google.note</i>\" /&gt;\n *             &lt;/intent-filter&gt;\n *         &lt;/activity&gt;\n *\n *         &lt;activity class=\".NoteEditor\" android:label=\"@string/title_note\"&gt;\n *             &lt;intent-filter android:label=\"@string/resolve_edit\"&gt;\n *                 &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n *                 &lt;action android:name=\"android.intent.action.EDIT\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n *                 &lt;data android:mimeType=\"vnd.android.cursor.item/<i>vnd.google.note</i>\" /&gt;\n *             &lt;/intent-filter&gt;\n *\n *             &lt;intent-filter&gt;\n *                 &lt;action android:name=\"android.intent.action.INSERT\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n *                 &lt;data android:mimeType=\"vnd.android.cursor.dir/<i>vnd.google.note</i>\" /&gt;\n *             &lt;/intent-filter&gt;\n *\n *         &lt;/activity&gt;\n *\n *         &lt;activity class=\".TitleEditor\" android:label=\"@string/title_edit_title\"\n *                 android:theme=\"@android:style/Theme.Dialog\"&gt;\n *             &lt;intent-filter android:label=\"@string/resolve_title\"&gt;\n *                 &lt;action android:name=\"<i>com.android.notepad.action.EDIT_TITLE</i>\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.ALTERNATIVE\" /&gt;\n *                 &lt;category android:name=\"android.intent.category.SELECTED_ALTERNATIVE\" /&gt;\n *                 &lt;data android:mimeType=\"vnd.android.cursor.item/<i>vnd.google.note</i>\" /&gt;\n *             &lt;/intent-filter&gt;\n *         &lt;/activity&gt;\n *\n *     &lt;/application&gt;\n * &lt;/manifest&gt;</pre>\n *\n * <p>The first activity,\n * <code>com.android.notepad.NotesList</code>, serves as our main\n * entry into the app.  It can do three things as described by its three intent\n * templates:\n * <ol>\n * <li><pre>\n * &lt;intent-filter&gt;\n *     &lt;action android:name=\"{@link #ACTION_MAIN android.intent.action.MAIN}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_LAUNCHER android.intent.category.LAUNCHER}\" /&gt;\n * &lt;/intent-filter&gt;</pre>\n * <p>This provides a top-level entry into the NotePad application: the standard\n * MAIN action is a main entry point (not requiring any other information in\n * the Intent), and the LAUNCHER category says that this entry point should be\n * listed in the application launcher.</p>\n * <li><pre>\n * &lt;intent-filter&gt;\n *     &lt;action android:name=\"{@link #ACTION_VIEW android.intent.action.VIEW}\" /&gt;\n *     &lt;action android:name=\"{@link #ACTION_EDIT android.intent.action.EDIT}\" /&gt;\n *     &lt;action android:name=\"{@link #ACTION_PICK android.intent.action.PICK}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_DEFAULT android.intent.category.DEFAULT}\" /&gt;\n *     &lt;data android:mimeType=\"vnd.android.cursor.dir/<i>vnd.google.note</i>\" /&gt;\n * &lt;/intent-filter&gt;</pre>\n * <p>This declares the things that the activity can do on a directory of\n * notes.  The type being supported is given with the &lt;type&gt; tag, where\n * <code>vnd.android.cursor.dir/vnd.google.note</code> is a URI from which\n * a Cursor of zero or more items (<code>vnd.android.cursor.dir</code>) can\n * be retrieved which holds our note pad data (<code>vnd.google.note</code>).\n * The activity allows the user to view or edit the directory of data (via\n * the VIEW and EDIT actions), or to pick a particular note and return it\n * to the caller (via the PICK action).  Note also the DEFAULT category\n * supplied here: this is <em>required</em> for the\n * {@link Context#startActivity Context.startActivity} method to resolve your\n * activity when its component name is not explicitly specified.</p>\n * <li><pre>\n * &lt;intent-filter&gt;\n *     &lt;action android:name=\"{@link #ACTION_GET_CONTENT android.intent.action.GET_CONTENT}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_DEFAULT android.intent.category.DEFAULT}\" /&gt;\n *     &lt;data android:mimeType=\"vnd.android.cursor.item/<i>vnd.google.note</i>\" /&gt;\n * &lt;/intent-filter&gt;</pre>\n * <p>This filter describes the ability to return to the caller a note selected by\n * the user without needing to know where it came from.  The data type\n * <code>vnd.android.cursor.item/vnd.google.note</code> is a URI from which\n * a Cursor of exactly one (<code>vnd.android.cursor.item</code>) item can\n * be retrieved which contains our note pad data (<code>vnd.google.note</code>).\n * The GET_CONTENT action is similar to the PICK action, where the activity\n * will return to its caller a piece of data selected by the user.  Here,\n * however, the caller specifies the type of data they desire instead of\n * the type of data the user will be picking from.</p>\n * </ol>\n *\n * <p>Given these capabilities, the following intents will resolve to the\n * NotesList activity:</p>\n *\n * <ul>\n *     <li> <p><b>{ action=android.app.action.MAIN }</b> matches all of the\n *         activities that can be used as top-level entry points into an\n *         application.</p>\n *     <li> <p><b>{ action=android.app.action.MAIN,\n *         category=android.app.category.LAUNCHER }</b> is the actual intent\n *         used by the Launcher to populate its top-level list.</p>\n *     <li> <p><b>{ action=android.intent.action.VIEW\n *          data=content://com.google.provider.NotePad/notes }</b>\n *         displays a list of all the notes under\n *         \"content://com.google.provider.NotePad/notes\", which\n *         the user can browse through and see the details on.</p>\n *     <li> <p><b>{ action=android.app.action.PICK\n *          data=content://com.google.provider.NotePad/notes }</b>\n *         provides a list of the notes under\n *         \"content://com.google.provider.NotePad/notes\", from which\n *         the user can pick a note whose data URL is returned back to the caller.</p>\n *     <li> <p><b>{ action=android.app.action.GET_CONTENT\n *          type=vnd.android.cursor.item/vnd.google.note }</b>\n *         is similar to the pick action, but allows the caller to specify the\n *         kind of data they want back so that the system can find the appropriate\n *         activity to pick something of that data type.</p>\n * </ul>\n *\n * <p>The second activity,\n * <code>com.android.notepad.NoteEditor</code>, shows the user a single\n * note entry and allows them to edit it.  It can do two things as described\n * by its two intent templates:\n * <ol>\n * <li><pre>\n * &lt;intent-filter android:label=\"@string/resolve_edit\"&gt;\n *     &lt;action android:name=\"{@link #ACTION_VIEW android.intent.action.VIEW}\" /&gt;\n *     &lt;action android:name=\"{@link #ACTION_EDIT android.intent.action.EDIT}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_DEFAULT android.intent.category.DEFAULT}\" /&gt;\n *     &lt;data android:mimeType=\"vnd.android.cursor.item/<i>vnd.google.note</i>\" /&gt;\n * &lt;/intent-filter&gt;</pre>\n * <p>The first, primary, purpose of this activity is to let the user interact\n * with a single note, as decribed by the MIME type\n * <code>vnd.android.cursor.item/vnd.google.note</code>.  The activity can\n * either VIEW a note or allow the user to EDIT it.  Again we support the\n * DEFAULT category to allow the activity to be launched without explicitly\n * specifying its component.</p>\n * <li><pre>\n * &lt;intent-filter&gt;\n *     &lt;action android:name=\"{@link #ACTION_INSERT android.intent.action.INSERT}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_DEFAULT android.intent.category.DEFAULT}\" /&gt;\n *     &lt;data android:mimeType=\"vnd.android.cursor.dir/<i>vnd.google.note</i>\" /&gt;\n * &lt;/intent-filter&gt;</pre>\n * <p>The secondary use of this activity is to insert a new note entry into\n * an existing directory of notes.  This is used when the user creates a new\n * note: the INSERT action is executed on the directory of notes, causing\n * this activity to run and have the user create the new note data which\n * it then adds to the content provider.</p>\n * </ol>\n *\n * <p>Given these capabilities, the following intents will resolve to the\n * NoteEditor activity:</p>\n *\n * <ul>\n *     <li> <p><b>{ action=android.intent.action.VIEW\n *          data=content://com.google.provider.NotePad/notes/<var>{ID}</var> }</b>\n *         shows the user the content of note <var>{ID}</var>.</p>\n *     <li> <p><b>{ action=android.app.action.EDIT\n *          data=content://com.google.provider.NotePad/notes/<var>{ID}</var> }</b>\n *         allows the user to edit the content of note <var>{ID}</var>.</p>\n *     <li> <p><b>{ action=android.app.action.INSERT\n *          data=content://com.google.provider.NotePad/notes }</b>\n *         creates a new, empty note in the notes list at\n *         \"content://com.google.provider.NotePad/notes\"\n *         and allows the user to edit it.  If they keep their changes, the URI\n *         of the newly created note is returned to the caller.</p>\n * </ul>\n *\n * <p>The last activity,\n * <code>com.android.notepad.TitleEditor</code>, allows the user to\n * edit the title of a note.  This could be implemented as a class that the\n * application directly invokes (by explicitly setting its component in\n * the Intent), but here we show a way you can publish alternative\n * operations on existing data:</p>\n *\n * <pre>\n * &lt;intent-filter android:label=\"@string/resolve_title\"&gt;\n *     &lt;action android:name=\"<i>com.android.notepad.action.EDIT_TITLE</i>\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_DEFAULT android.intent.category.DEFAULT}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_ALTERNATIVE android.intent.category.ALTERNATIVE}\" /&gt;\n *     &lt;category android:name=\"{@link #CATEGORY_SELECTED_ALTERNATIVE android.intent.category.SELECTED_ALTERNATIVE}\" /&gt;\n *     &lt;data android:mimeType=\"vnd.android.cursor.item/<i>vnd.google.note</i>\" /&gt;\n * &lt;/intent-filter&gt;</pre>\n *\n * <p>In the single intent template here, we\n * have created our own private action called\n * <code>com.android.notepad.action.EDIT_TITLE</code> which means to\n * edit the title of a note.  It must be invoked on a specific note\n * (data type <code>vnd.android.cursor.item/vnd.google.note</code>) like the previous\n * view and edit actions, but here displays and edits the title contained\n * in the note data.\n *\n * <p>In addition to supporting the default category as usual, our title editor\n * also supports two other standard categories: ALTERNATIVE and\n * SELECTED_ALTERNATIVE.  Implementing\n * these categories allows others to find the special action it provides\n * without directly knowing about it, through the\n * {@link android.content.pm.PackageManager#queryIntentActivityOptions} method, or\n * more often to build dynamic menu items with\n * {@link android.view.Menu#addIntentOptions}.  Note that in the intent\n * template here was also supply an explicit name for the template\n * (via <code>android:label=\"@string/resolve_title\"</code>) to better control\n * what the user sees when presented with this activity as an alternative\n * action to the data they are viewing.\n *\n * <p>Given these capabilities, the following intent will resolve to the\n * TitleEditor activity:</p>\n *\n * <ul>\n *     <li> <p><b>{ action=com.android.notepad.action.EDIT_TITLE\n *          data=content://com.google.provider.NotePad/notes/<var>{ID}</var> }</b>\n *         displays and allows the user to edit the title associated\n *         with note <var>{ID}</var>.</p>\n * </ul>\n *\n * <h3>Standard Activity Actions</h3>\n *\n * <p>These are the current standard actions that Intent defines for launching\n * activities (usually through {@link Context#startActivity}.  The most\n * important, and by far most frequently used, are {@link #ACTION_MAIN} and\n * {@link #ACTION_EDIT}.\n *\n * <ul>\n *     <li> {@link #ACTION_MAIN}\n *     <li> {@link #ACTION_VIEW}\n *     <li> {@link #ACTION_ATTACH_DATA}\n *     <li> {@link #ACTION_EDIT}\n *     <li> {@link #ACTION_PICK}\n *     <li> {@link #ACTION_CHOOSER}\n *     <li> {@link #ACTION_GET_CONTENT}\n *     <li> {@link #ACTION_DIAL}\n *     <li> {@link #ACTION_CALL}\n *     <li> {@link #ACTION_SEND}\n *     <li> {@link #ACTION_SENDTO}\n *     <li> {@link #ACTION_ANSWER}\n *     <li> {@link #ACTION_INSERT}\n *     <li> {@link #ACTION_DELETE}\n *     <li> {@link #ACTION_RUN}\n *     <li> {@link #ACTION_SYNC}\n *     <li> {@link #ACTION_PICK_ACTIVITY}\n *     <li> {@link #ACTION_SEARCH}\n *     <li> {@link #ACTION_WEB_SEARCH}\n *     <li> {@link #ACTION_FACTORY_TEST}\n * </ul>\n *\n * <h3>Standard Broadcast Actions</h3>\n *\n * <p>These are the current standard actions that Intent defines for receiving\n * broadcasts (usually through {@link Context#registerReceiver} or a\n * &lt;receiver&gt; tag in a manifest).\n *\n * <ul>\n *     <li> {@link #ACTION_TIME_TICK}\n *     <li> {@link #ACTION_TIME_CHANGED}\n *     <li> {@link #ACTION_TIMEZONE_CHANGED}\n *     <li> {@link #ACTION_BOOT_COMPLETED}\n *     <li> {@link #ACTION_PACKAGE_ADDED}\n *     <li> {@link #ACTION_PACKAGE_CHANGED}\n *     <li> {@link #ACTION_PACKAGE_REMOVED}\n *     <li> {@link #ACTION_PACKAGE_RESTARTED}\n *     <li> {@link #ACTION_PACKAGE_DATA_CLEARED}\n *     <li> {@link #ACTION_PACKAGES_SUSPENDED}\n *     <li> {@link #ACTION_PACKAGES_UNSUSPENDED}\n *     <li> {@link #ACTION_UID_REMOVED}\n *     <li> {@link #ACTION_BATTERY_CHANGED}\n *     <li> {@link #ACTION_POWER_CONNECTED}\n *     <li> {@link #ACTION_POWER_DISCONNECTED}\n *     <li> {@link #ACTION_SHUTDOWN}\n * </ul>\n *\n * <h3>Standard Categories</h3>\n *\n * <p>These are the current standard categories that can be used to further\n * clarify an Intent via {@link #addCategory}.\n *\n * <ul>\n *     <li> {@link #CATEGORY_DEFAULT}\n *     <li> {@link #CATEGORY_BROWSABLE}\n *     <li> {@link #CATEGORY_TAB}\n *     <li> {@link #CATEGORY_ALTERNATIVE}\n *     <li> {@link #CATEGORY_SELECTED_ALTERNATIVE}\n *     <li> {@link #CATEGORY_LAUNCHER}\n *     <li> {@link #CATEGORY_INFO}\n *     <li> {@link #CATEGORY_HOME}\n *     <li> {@link #CATEGORY_PREFERENCE}\n *     <li> {@link #CATEGORY_TEST}\n *     <li> {@link #CATEGORY_CAR_DOCK}\n *     <li> {@link #CATEGORY_DESK_DOCK}\n *     <li> {@link #CATEGORY_LE_DESK_DOCK}\n *     <li> {@link #CATEGORY_HE_DESK_DOCK}\n *     <li> {@link #CATEGORY_CAR_MODE}\n *     <li> {@link #CATEGORY_APP_MARKET}\n *     <li> {@link #CATEGORY_VR_HOME}\n * </ul>\n *\n * <h3>Standard Extra Data</h3>\n *\n * <p>These are the current standard fields that can be used as extra data via\n * {@link #putExtra}.\n *\n * <ul>\n *     <li> {@link #EXTRA_ALARM_COUNT}\n *     <li> {@link #EXTRA_BCC}\n *     <li> {@link #EXTRA_CC}\n *     <li> {@link #EXTRA_CHANGED_COMPONENT_NAME}\n *     <li> {@link #EXTRA_DATA_REMOVED}\n *     <li> {@link #EXTRA_DOCK_STATE}\n *     <li> {@link #EXTRA_DOCK_STATE_HE_DESK}\n *     <li> {@link #EXTRA_DOCK_STATE_LE_DESK}\n *     <li> {@link #EXTRA_DOCK_STATE_CAR}\n *     <li> {@link #EXTRA_DOCK_STATE_DESK}\n *     <li> {@link #EXTRA_DOCK_STATE_UNDOCKED}\n *     <li> {@link #EXTRA_DONT_KILL_APP}\n *     <li> {@link #EXTRA_EMAIL}\n *     <li> {@link #EXTRA_INITIAL_INTENTS}\n *     <li> {@link #EXTRA_INTENT}\n *     <li> {@link #EXTRA_KEY_EVENT}\n *     <li> {@link #EXTRA_ORIGINATING_URI}\n *     <li> {@link #EXTRA_PHONE_NUMBER}\n *     <li> {@link #EXTRA_REFERRER}\n *     <li> {@link #EXTRA_REMOTE_INTENT_TOKEN}\n *     <li> {@link #EXTRA_REPLACING}\n *     <li> {@link #EXTRA_SHORTCUT_ICON}\n *     <li> {@link #EXTRA_SHORTCUT_ICON_RESOURCE}\n *     <li> {@link #EXTRA_SHORTCUT_INTENT}\n *     <li> {@link #EXTRA_STREAM}\n *     <li> {@link #EXTRA_SHORTCUT_NAME}\n *     <li> {@link #EXTRA_SUBJECT}\n *     <li> {@link #EXTRA_TEMPLATE}\n *     <li> {@link #EXTRA_TEXT}\n *     <li> {@link #EXTRA_TITLE}\n *     <li> {@link #EXTRA_UID}\n * </ul>\n *\n * <h3>Flags</h3>\n *\n * <p>These are the possible flags that can be used in the Intent via\n * {@link #setFlags} and {@link #addFlags}.  See {@link #setFlags} for a list\n * of all possible flags.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_ACTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_CATEGORIES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_CATEGORY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_EXTRA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_IDENTIFIER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_COMPONENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_FLAGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_MAIN",
    "type" : "String",
    "comment" : "\n     *  Activity Action: Start as a main entry point, does not expect to\n     *  receive data.\n     *  <p>Input: nothing\n     *  <p>Output: nothing\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VIEW",
    "type" : "String",
    "comment" : "\n     * Activity Action: Display the data to the user.  This is the most common\n     * action performed on data -- it is the generic action you can use on\n     * a piece of data to get the most reasonable thing to occur.  For example,\n     * when used on a contacts entry it will view the entry; when used on a\n     * mailto: URI it will bring up a compose window filled with the information\n     * supplied by the URI; when used with a tel: URI it will invoke the\n     * dialer.\n     * <p>Input: {@link #getData} is URI from which to retrieve data.\n     * <p>Output: nothing.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "EXTRA_FROM_STORAGE",
    "type" : "String",
    "comment" : "\n     * Extra that can be included on activity intents coming from the storage UI\n     * when it launches sub-activities to manage various types of storage.  For example,\n     * it may use {@link #ACTION_VIEW} with a \"image/*\" MIME type to have an app show\n     * the images on the device, and in that case also include this extra to tell the\n     * app it is coming from the storage UI so should help the user manage storage of\n     * this type.\n     ",
    "links" : [ "#ACTION_VIEW" ]
  }, {
    "name" : "ACTION_DEFAULT",
    "type" : "String",
    "comment" : "\n     * A synonym for {@link #ACTION_VIEW}, the \"standard\" action that is\n     * performed on a piece of data.\n     ",
    "links" : [ "#ACTION_VIEW" ]
  }, {
    "name" : "ACTION_QUICK_VIEW",
    "type" : "String",
    "comment" : "\n     * Activity Action: Quick view the data. Launches a quick viewer for\n     * a URI or a list of URIs.\n     * <p>Activities handling this intent action should handle the vast majority of\n     * MIME types rather than only specific ones.\n     * <p>Quick viewers must render the quick view image locally, and must not send\n     * file content outside current device.\n     * <p>Input: {@link #getData} is a mandatory content URI of the item to\n     * preview. {@link #getClipData} contains an optional list of content URIs\n     * if there is more than one item to preview. {@link #EXTRA_INDEX} is an\n     * optional index of the URI in the clip data to show first.\n     * {@link #EXTRA_QUICK_VIEW_FEATURES} is an optional extra indicating the features\n     * that can be shown in the quick view UI.\n     * <p>Output: nothing.\n     * @see #EXTRA_INDEX\n     * @see #EXTRA_QUICK_VIEW_FEATURES\n     ",
    "links" : [ "#getData", "#getClipData", "#EXTRA_INDEX", "#EXTRA_QUICK_VIEW_FEATURES" ]
  }, {
    "name" : "ACTION_ATTACH_DATA",
    "type" : "String",
    "comment" : "\n     * Used to indicate that some piece of data should be attached to some other\n     * place.  For example, image data could be attached to a contact.  It is up\n     * to the recipient to decide where the data should be attached; the intent\n     * does not specify the ultimate destination.\n     * <p>Input: {@link #getData} is URI of data to be attached.\n     * <p>Output: nothing.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_EDIT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Provide explicit editable access to the given data.\n     * <p>Input: {@link #getData} is URI of data to be edited.\n     * <p>Output: nothing.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_INSERT_OR_EDIT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Pick an existing item, or insert a new item, and then edit it.\n     * <p>Input: {@link #getType} is the desired MIME type of the item to create or edit.\n     * The extras can contain type specific data to pass through to the editing/creating\n     * activity.\n     * <p>Output: The URI of the item that was picked.  This must be a content:\n     * URI so that any receiver can access it.\n     ",
    "links" : [ "#getType" ]
  }, {
    "name" : "ACTION_PICK",
    "type" : "String",
    "comment" : "\n     * Activity Action: Pick an item from the data, returning what was selected.\n     * <p>Input: {@link #getData} is URI containing a directory of data\n     * (vnd.android.cursor.dir/*) from which to pick an item.\n     * <p>Output: The URI of the item that was picked.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_CREATE_REMINDER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Creates a reminder.\n     * <p>Input: {@link #EXTRA_TITLE} The title of the reminder that will be shown to the user.\n     * {@link #EXTRA_TEXT} The reminder text that will be shown to the user. The intent should at\n     * least specify a title or a text. {@link #EXTRA_TIME} The time when the reminder will be shown\n     * to the user. The time is specified in milliseconds since the Epoch (optional).\n     * </p>\n     * <p>Output: Nothing.</p>\n     *\n     * @see #EXTRA_TITLE\n     * @see #EXTRA_TEXT\n     * @see #EXTRA_TIME\n     ",
    "links" : [ "#EXTRA_TITLE", "#EXTRA_TEXT", "#EXTRA_TIME" ]
  }, {
    "name" : "ACTION_CREATE_SHORTCUT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Creates a shortcut.\n     * <p>Input: Nothing.</p>\n     * <p>Output: An Intent representing the {@link android.content.pm.ShortcutInfo} result.</p>\n     * <p>For compatibility with older versions of android the intent may also contain three\n     * extras: SHORTCUT_INTENT (value: Intent), SHORTCUT_NAME (value: String),\n     * and SHORTCUT_ICON (value: Bitmap) or SHORTCUT_ICON_RESOURCE\n     * (value: ShortcutIconResource).</p>\n     *\n     * @see android.content.pm.ShortcutManager#createShortcutResultIntent\n     * @see #EXTRA_SHORTCUT_INTENT\n     * @see #EXTRA_SHORTCUT_NAME\n     * @see #EXTRA_SHORTCUT_ICON\n     * @see #EXTRA_SHORTCUT_ICON_RESOURCE\n     * @see android.content.Intent.ShortcutIconResource\n     ",
    "links" : [ "android.content.pm.ShortcutInfo" ]
  }, {
    "name" : "EXTRA_SHORTCUT_INTENT",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define the Intent of a shortcut.\n     *\n     * @see #ACTION_CREATE_SHORTCUT\n     * @deprecated Replaced with {@link android.content.pm.ShortcutManager#createShortcutResultIntent}\n     ",
    "links" : [ "android.content.pm.ShortcutManager#createShortcutResultIntent" ]
  }, {
    "name" : "EXTRA_SHORTCUT_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define the name of a shortcut.\n     *\n     * @see #ACTION_CREATE_SHORTCUT\n     * @deprecated Replaced with {@link android.content.pm.ShortcutManager#createShortcutResultIntent}\n     ",
    "links" : [ "android.content.pm.ShortcutManager#createShortcutResultIntent" ]
  }, {
    "name" : "EXTRA_SHORTCUT_ICON",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define the icon, as a Bitmap, of a shortcut.\n     *\n     * @see #ACTION_CREATE_SHORTCUT\n     * @deprecated Replaced with {@link android.content.pm.ShortcutManager#createShortcutResultIntent}\n     ",
    "links" : [ "android.content.pm.ShortcutManager#createShortcutResultIntent" ]
  }, {
    "name" : "EXTRA_SHORTCUT_ICON_RESOURCE",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define the icon, as a ShortcutIconResource, of a shortcut.\n     *\n     * @see #ACTION_CREATE_SHORTCUT\n     * @see android.content.Intent.ShortcutIconResource\n     * @deprecated Replaced with {@link android.content.pm.ShortcutManager#createShortcutResultIntent}\n     ",
    "links" : [ "android.content.pm.ShortcutManager#createShortcutResultIntent" ]
  }, {
    "name" : "ACTION_APPLICATION_PREFERENCES",
    "type" : "String",
    "comment" : "\n     * An activity that provides a user interface for adjusting application preferences.\n     * Optional but recommended settings for all applications which have settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_APP_INFO",
    "type" : "String",
    "comment" : "\n     * Activity Action: Launch an activity showing the app information.\n     * For applications which install other applications (such as app stores), it is recommended\n     * to handle this action for providing the app information to the user.\n     *\n     * <p>Input: {@link #EXTRA_PACKAGE_NAME} specifies the package whose information needs\n     * to be displayed.\n     * <p>Output: Nothing.\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "ACTION_CHOOSER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Display an activity chooser, allowing the user to pick\n     * what they want to before proceeding.  This can be used as an alternative\n     * to the standard activity picker that is displayed by the system when\n     * you try to start an activity with multiple possible matches, with these\n     * differences in behavior:\n     * <ul>\n     * <li>You can specify the title that will appear in the activity chooser.\n     * <li>The user does not have the option to make one of the matching\n     * activities a preferred activity, and all possible activities will\n     * always be shown even if one of them is currently marked as the\n     * preferred activity.\n     * </ul>\n     * <p>\n     * This action should be used when the user will naturally expect to\n     * select an activity in order to proceed.  An example if when not to use\n     * it is when the user clicks on a \"mailto:\" link.  They would naturally\n     * expect to go directly to their mail app, so startActivity() should be\n     * called directly: it will\n     * either launch the current preferred app, or put up a dialog allowing the\n     * user to pick an app to use and optionally marking that as preferred.\n     * <p>\n     * In contrast, if the user is selecting a menu item to send a picture\n     * they are viewing to someone else, there are many different things they\n     * may want to do at this point: send it through e-mail, upload it to a\n     * web service, etc.  In this case the CHOOSER action should be used, to\n     * always present to the user a list of the things they can do, with a\n     * nice title given by the caller such as \"Send this photo with:\".\n     * <p>\n     * If you need to grant URI permissions through a chooser, you must specify\n     * the permissions to be granted on the ACTION_CHOOSER Intent\n     * <em>in addition</em> to the EXTRA_INTENT inside.  This means using\n     * {@link #setClipData} to specify the URIs to be granted as well as\n     * {@link #FLAG_GRANT_READ_URI_PERMISSION} and/or\n     * {@link #FLAG_GRANT_WRITE_URI_PERMISSION} as appropriate.\n     * <p>\n     * As a convenience, an Intent of this form can be created with the\n     * {@link #createChooser} function.\n     * <p>\n     * Input: No data should be specified.  get*Extra must have\n     * a {@link #EXTRA_INTENT} field containing the Intent being executed,\n     * and can optionally have a {@link #EXTRA_TITLE} field containing the\n     * title text to display in the chooser.\n     * <p>\n     * Output: Depends on the protocol of {@link #EXTRA_INTENT}.\n     ",
    "links" : [ "#setClipData", "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION", "#createChooser", "#EXTRA_INTENT", "#EXTRA_TITLE", "#EXTRA_INTENT" ]
  }, {
    "name" : "ACTION_GET_CONTENT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Allow the user to select a particular kind of data and\n     * return it.  This is different than {@link #ACTION_PICK} in that here we\n     * just say what kind of data is desired, not a URI of existing data from\n     * which the user can pick.  An ACTION_GET_CONTENT could allow the user to\n     * create the data as it runs (for example taking a picture or recording a\n     * sound), let them browse over the web and download the desired data,\n     * etc.\n     * <p>\n     * There are two main ways to use this action: if you want a specific kind\n     * of data, such as a person contact, you set the MIME type to the kind of\n     * data you want and launch it with {@link Context#startActivity(Intent)}.\n     * The system will then launch the best application to select that kind\n     * of data for you.\n     * <p>\n     * You may also be interested in any of a set of types of content the user\n     * can pick.  For example, an e-mail application that wants to allow the\n     * user to add an attachment to an e-mail message can use this action to\n     * bring up a list of all of the types of content the user can attach.\n     * <p>\n     * In this case, you should wrap the GET_CONTENT intent with a chooser\n     * (through {@link #createChooser}), which will give the proper interface\n     * for the user to pick how to send your data and allow you to specify\n     * a prompt indicating what they are doing.  You will usually specify a\n     * broad MIME type (such as image/* or {@literal *}/*), resulting in a\n     * broad range of content types the user can select from.\n     * <p>\n     * When using such a broad GET_CONTENT action, it is often desirable to\n     * only pick from data that can be represented as a stream.  This is\n     * accomplished by requiring the {@link #CATEGORY_OPENABLE} in the Intent.\n     * <p>\n     * Callers can optionally specify {@link #EXTRA_LOCAL_ONLY} to request that\n     * the launched content chooser only returns results representing data that\n     * is locally available on the device.  For example, if this extra is set\n     * to true then an image picker should not show any pictures that are available\n     * from a remote server but not already on the local device (thus requiring\n     * they be downloaded when opened).\n     * <p>\n     * If the caller can handle multiple returned items (the user performing\n     * multiple selection), then it can specify {@link #EXTRA_ALLOW_MULTIPLE}\n     * to indicate this.\n     * <p>\n     * Input: {@link #getType} is the desired MIME type to retrieve.  Note\n     * that no URI is supplied in the intent, as there are no constraints on\n     * where the returned data originally comes from.  You may also include the\n     * {@link #CATEGORY_OPENABLE} if you can only accept data that can be\n     * opened as a stream.  You may use {@link #EXTRA_LOCAL_ONLY} to limit content\n     * selection to local data.  You may use {@link #EXTRA_ALLOW_MULTIPLE} to\n     * allow the user to select multiple items.\n     * <p>\n     * Output: The URI of the item that was picked.  This must be a content:\n     * URI so that any receiver can access it.\n     ",
    "links" : [ "#ACTION_PICK", "Context#startActivity", "#createChooser", "#CATEGORY_OPENABLE", "#EXTRA_LOCAL_ONLY", "#EXTRA_ALLOW_MULTIPLE", "#getType", "#CATEGORY_OPENABLE", "#EXTRA_LOCAL_ONLY", "#EXTRA_ALLOW_MULTIPLE" ]
  }, {
    "name" : "ACTION_DIAL",
    "type" : "String",
    "comment" : "\n     * Activity Action: Dial a number as specified by the data.  This shows a\n     * UI with the number being dialed, allowing the user to explicitly\n     * initiate the call.\n     * <p>Input: If nothing, an empty dialer is started; else {@link #getData}\n     * is URI of a phone number to be dialed or a tel: URI of an explicit phone\n     * number.\n     * <p>Output: nothing.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_CALL",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform a call to someone specified by the data.\n     * <p>Input: If nothing, an empty dialer is started; else {@link #getData}\n     * is URI of a phone number to be dialed or a tel: URI of an explicit phone\n     * number.\n     * <p>Output: nothing.\n     *\n     * <p>Note: there will be restrictions on which applications can initiate a\n     * call; most applications should use the {@link #ACTION_DIAL}.\n     * <p>Note: this Intent <strong>cannot</strong> be used to call emergency\n     * numbers.  Applications can <strong>dial</strong> emergency numbers using\n     * {@link #ACTION_DIAL}, however.\n     *\n     * <p>Note: if you app targets {@link android.os.Build.VERSION_CODES#M M}\n     * and above and declares as using the {@link android.Manifest.permission#CALL_PHONE}\n     * permission which is not granted, then attempting to use this action will\n     * result in a {@link java.lang.SecurityException}.\n     ",
    "links" : [ "#getData", "#ACTION_DIAL", "#ACTION_DIAL", "android.os.Build.VERSION_CODES#M", "android.Manifest.permission#CALL_PHONE", "java.lang.SecurityException" ]
  }, {
    "name" : "ACTION_CALL_EMERGENCY",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform a call to an emergency number specified by the\n     * data.\n     * <p>Input: {@link #getData} is URI of a phone number to be dialed or a\n     * tel: URI of an explicit phone number.\n     * <p>Output: nothing.\n     *\n     * <p class=\"note\"><strong>Note:</strong> It is not guaranteed that the call will be placed on\n     * the {@link PhoneAccount} provided in the {@link TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE}\n     * extra (if specified) and may be placed on another {@link PhoneAccount} with the\n     * {@link PhoneAccount#CAPABILITY_PLACE_EMERGENCY_CALLS} capability, depending on external\n     * factors, such as network conditions and Modem/SIM status.\n     * @hide\n     ",
    "links" : [ "#getData", "PhoneAccount", "TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE", "PhoneAccount", "PhoneAccount#CAPABILITY_PLACE_EMERGENCY_CALLS" ]
  }, {
    "name" : "ACTION_DIAL_EMERGENCY",
    "type" : "String",
    "comment" : "\n     * Activity Action: Dial a emergency number specified by the data.  This shows a\n     * UI with the number being dialed, allowing the user to explicitly\n     * initiate the call.\n     * <p>Input: If nothing, an empty emergency dialer is started; else {@link #getData}\n     * is a tel: URI of an explicit emergency phone number.\n     * <p>Output: nothing.\n     * @hide\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_CALL_PRIVILEGED",
    "type" : "String",
    "comment" : "\n     * Activity action: Perform a call to any number (emergency or not)\n     * specified by the data.\n     * <p>Input: {@link #getData} is URI of a phone number to be dialed or a\n     * tel: URI of an explicit phone number.\n     * <p>Output: nothing.\n     * @hide\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_CARRIER_SETUP",
    "type" : "String",
    "comment" : "\n     * Activity Action: Main entry point for carrier setup apps.\n     * <p>Carrier apps that provide an implementation for this action may be invoked to configure\n     * carrier service and typically require\n     * {@link android.telephony.TelephonyManager#hasCarrierPrivileges() carrier privileges} to\n     * fulfill their duties.\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "ACTION_SENDTO",
    "type" : "String",
    "comment" : "\n     * Activity Action: Send a message to someone specified by the data.\n     * <p>Input: {@link #getData} is URI describing the target.\n     * <p>Output: nothing.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_SEND",
    "type" : "String",
    "comment" : "\n     * Activity Action: Deliver some data to someone else.  Who the data is\n     * being delivered to is not specified; it is up to the receiver of this\n     * action to ask the user where the data should be sent.\n     * <p>\n     * When launching a SEND intent, you should usually wrap it in a chooser\n     * (through {@link #createChooser}), which will give the proper interface\n     * for the user to pick how to send your data and allow you to specify\n     * a prompt indicating what they are doing.\n     * <p>\n     * Input: {@link #getType} is the MIME type of the data being sent.\n     * get*Extra can have either a {@link #EXTRA_TEXT}\n     * or {@link #EXTRA_STREAM} field, containing the data to be sent.  If\n     * using EXTRA_TEXT, the MIME type should be \"text/plain\"; otherwise it\n     * should be the MIME type of the data in EXTRA_STREAM.  Use {@literal *}/*\n     * if the MIME type is unknown (this will only allow senders that can\n     * handle generic data streams).  If using {@link #EXTRA_TEXT}, you can\n     * also optionally supply {@link #EXTRA_HTML_TEXT} for clients to retrieve\n     * your text with HTML formatting.\n     * <p>\n     * As of {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, the data\n     * being sent can be supplied through {@link #setClipData(ClipData)}.  This\n     * allows you to use {@link #FLAG_GRANT_READ_URI_PERMISSION} when sharing\n     * content: URIs and other advanced features of {@link ClipData}.  If\n     * using this approach, you still must supply the same data through the\n     * {@link #EXTRA_TEXT} or {@link #EXTRA_STREAM} fields described below\n     * for compatibility with old applications.  If you don't set a ClipData,\n     * it will be copied there for you when calling {@link Context#startActivity(Intent)}.\n     * <p>\n     * Starting from {@link android.os.Build.VERSION_CODES#O}, if\n     * {@link #CATEGORY_TYPED_OPENABLE} is passed, then the Uris passed in\n     * either {@link #EXTRA_STREAM} or via {@link #setClipData(ClipData)} may\n     * be openable only as asset typed files using\n     * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}.\n     * <p>\n     * Optional standard extras, which may be interpreted by some recipients as\n     * appropriate, are: {@link #EXTRA_EMAIL}, {@link #EXTRA_CC},\n     * {@link #EXTRA_BCC}, {@link #EXTRA_SUBJECT}.\n     * <p>\n     * Output: nothing.\n     ",
    "links" : [ "#createChooser", "#getType", "#EXTRA_TEXT", "#EXTRA_STREAM", "#EXTRA_TEXT", "#EXTRA_HTML_TEXT", "android.os.Build.VERSION_CODES#JELLY_BEAN", "#setClipData", "#FLAG_GRANT_READ_URI_PERMISSION", "ClipData", "#EXTRA_TEXT", "#EXTRA_STREAM", "Context#startActivity", "android.os.Build.VERSION_CODES#O", "#CATEGORY_TYPED_OPENABLE", "#EXTRA_STREAM", "#setClipData", "ContentResolver#openTypedAssetFileDescriptor", "#EXTRA_EMAIL", "#EXTRA_CC", "#EXTRA_BCC", "#EXTRA_SUBJECT" ]
  }, {
    "name" : "ACTION_SEND_MULTIPLE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Deliver multiple data to someone else.\n     * <p>\n     * Like {@link #ACTION_SEND}, except the data is multiple.\n     * <p>\n     * Input: {@link #getType} is the MIME type of the data being sent.\n     * get*ArrayListExtra can have either a {@link #EXTRA_TEXT} or {@link\n     * #EXTRA_STREAM} field, containing the data to be sent.  If using\n     * {@link #EXTRA_TEXT}, you can also optionally supply {@link #EXTRA_HTML_TEXT}\n     * for clients to retrieve your text with HTML formatting.\n     * <p>\n     * Multiple types are supported, and receivers should handle mixed types\n     * whenever possible. The right way for the receiver to check them is to\n     * use the content resolver on each URI. The intent sender should try to\n     * put the most concrete mime type in the intent type, but it can fall\n     * back to {@literal <type>/*} or {@literal *}/* as needed.\n     * <p>\n     * e.g. if you are sending image/jpg and image/jpg, the intent's type can\n     * be image/jpg, but if you are sending image/jpg and image/png, then the\n     * intent's type should be image/*.\n     * <p>\n     * As of {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, the data\n     * being sent can be supplied through {@link #setClipData(ClipData)}.  This\n     * allows you to use {@link #FLAG_GRANT_READ_URI_PERMISSION} when sharing\n     * content: URIs and other advanced features of {@link ClipData}.  If\n     * using this approach, you still must supply the same data through the\n     * {@link #EXTRA_TEXT} or {@link #EXTRA_STREAM} fields described below\n     * for compatibility with old applications.  If you don't set a ClipData,\n     * it will be copied there for you when calling {@link Context#startActivity(Intent)}.\n     * <p>\n     * Starting from {@link android.os.Build.VERSION_CODES#O}, if\n     * {@link #CATEGORY_TYPED_OPENABLE} is passed, then the Uris passed in\n     * either {@link #EXTRA_STREAM} or via {@link #setClipData(ClipData)} may\n     * be openable only as asset typed files using\n     * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}.\n     * <p>\n     * Optional standard extras, which may be interpreted by some recipients as\n     * appropriate, are: {@link #EXTRA_EMAIL}, {@link #EXTRA_CC},\n     * {@link #EXTRA_BCC}, {@link #EXTRA_SUBJECT}.\n     * <p>\n     * Output: nothing.\n     ",
    "links" : [ "#ACTION_SEND", "#getType", "#EXTRA_TEXT", "#EXTRA_TEXT", "#EXTRA_HTML_TEXT", "android.os.Build.VERSION_CODES#JELLY_BEAN", "#setClipData", "#FLAG_GRANT_READ_URI_PERMISSION", "ClipData", "#EXTRA_TEXT", "#EXTRA_STREAM", "Context#startActivity", "android.os.Build.VERSION_CODES#O", "#CATEGORY_TYPED_OPENABLE", "#EXTRA_STREAM", "#setClipData", "ContentResolver#openTypedAssetFileDescriptor", "#EXTRA_EMAIL", "#EXTRA_CC", "#EXTRA_BCC", "#EXTRA_SUBJECT" ]
  }, {
    "name" : "ACTION_ANSWER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Handle an incoming phone call.\n     * <p>Input: nothing.\n     * <p>Output: nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_INSERT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Insert an empty item into the given container.\n     * <p>Input: {@link #getData} is URI of the directory (vnd.android.cursor.dir/*)\n     * in which to place the data.\n     * <p>Output: URI of the new data that was created.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_PASTE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Create a new item in the given container, initializing it\n     * from the current contents of the clipboard.\n     * <p>Input: {@link #getData} is URI of the directory (vnd.android.cursor.dir/*)\n     * in which to place the data.\n     * <p>Output: URI of the new data that was created.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_DELETE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Delete the given data from its container.\n     * <p>Input: {@link #getData} is URI of data to be deleted.\n     * <p>Output: nothing.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_RUN",
    "type" : "String",
    "comment" : "\n     * Activity Action: Run the data, whatever that means.\n     * <p>Input: ?  (Note: this is currently specific to the test harness.)\n     * <p>Output: nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SYNC",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform a data synchronization.\n     * <p>Input: ?\n     * <p>Output: ?\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PICK_ACTIVITY",
    "type" : "String",
    "comment" : "\n     * Activity Action: Pick an activity given an intent, returning the class\n     * selected.\n     * <p>Input: get*Extra field {@link #EXTRA_INTENT} is an Intent\n     * used with {@link PackageManager#queryIntentActivities} to determine the\n     * set of activities from which to pick.\n     * <p>Output: Class name of the activity that was selected.\n     ",
    "links" : [ "#EXTRA_INTENT", "PackageManager#queryIntentActivities" ]
  }, {
    "name" : "ACTION_SEARCH",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform a search.\n     * <p>Input: {@link android.app.SearchManager#QUERY getStringExtra(SearchManager.QUERY)}\n     * is the text to search for.  If empty, simply\n     * enter your search results Activity with the search UI activated.\n     * <p>Output: nothing.\n     ",
    "links" : [ "android.app.SearchManager#QUERY" ]
  }, {
    "name" : "ACTION_SYSTEM_TUTORIAL",
    "type" : "String",
    "comment" : "\n     * Activity Action: Start the platform-defined tutorial\n     * <p>Input: {@link android.app.SearchManager#QUERY getStringExtra(SearchManager.QUERY)}\n     * is the text to search for.  If empty, simply\n     * enter your search results Activity with the search UI activated.\n     * <p>Output: nothing.\n     ",
    "links" : [ "android.app.SearchManager#QUERY" ]
  }, {
    "name" : "ACTION_WEB_SEARCH",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform a web search.\n     * <p>\n     * Input: {@link android.app.SearchManager#QUERY\n     * getStringExtra(SearchManager.QUERY)} is the text to search for. If it is\n     * a url starts with http or https, the site will be opened. If it is plain\n     * text, Google search will be applied.\n     * <p>\n     * Output: nothing.\n     ",
    "links" : [ "android.app.SearchManager#QUERY" ]
  }, {
    "name" : "ACTION_ASSIST",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform assist action.\n     * <p>\n     * Input: {@link #EXTRA_ASSIST_PACKAGE}, {@link #EXTRA_ASSIST_CONTEXT}, can provide\n     * additional optional contextual information about where the user was when they\n     * requested the assist; {@link #EXTRA_REFERRER} may be set with additional referrer\n     * information.\n     * Output: nothing.\n     ",
    "links" : [ "#EXTRA_ASSIST_PACKAGE", "#EXTRA_ASSIST_CONTEXT", "#EXTRA_REFERRER" ]
  }, {
    "name" : "ACTION_VOICE_ASSIST",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform voice assist action.\n     * <p>\n     * Input: {@link #EXTRA_ASSIST_PACKAGE}, {@link #EXTRA_ASSIST_CONTEXT}, can provide\n     * additional optional contextual information about where the user was when they\n     * requested the voice assist.\n     * Output: nothing.\n     * @hide\n     ",
    "links" : [ "#EXTRA_ASSIST_PACKAGE", "#EXTRA_ASSIST_CONTEXT" ]
  }, {
    "name" : "EXTRA_ASSIST_PACKAGE",
    "type" : "String",
    "comment" : "\n     * An optional field on {@link #ACTION_ASSIST} containing the name of the current foreground\n     * application package at the time the assist was invoked.\n     ",
    "links" : [ "#ACTION_ASSIST" ]
  }, {
    "name" : "EXTRA_ASSIST_UID",
    "type" : "String",
    "comment" : "\n     * An optional field on {@link #ACTION_ASSIST} containing the uid of the current foreground\n     * application package at the time the assist was invoked.\n     ",
    "links" : [ "#ACTION_ASSIST" ]
  }, {
    "name" : "EXTRA_ASSIST_CONTEXT",
    "type" : "String",
    "comment" : "\n     * An optional field on {@link #ACTION_ASSIST} and containing additional contextual\n     * information supplied by the current foreground app at the time of the assist request.\n     * This is a {@link Bundle} of additional data.\n     ",
    "links" : [ "#ACTION_ASSIST", "Bundle" ]
  }, {
    "name" : "EXTRA_ASSIST_INPUT_HINT_KEYBOARD",
    "type" : "String",
    "comment" : "\n     * An optional field on {@link #ACTION_ASSIST} suggesting that the user will likely use a\n     * keyboard as the primary input device for assistance.\n     ",
    "links" : [ "#ACTION_ASSIST" ]
  }, {
    "name" : "EXTRA_ASSIST_INPUT_DEVICE_ID",
    "type" : "String",
    "comment" : "\n     * An optional field on {@link #ACTION_ASSIST} containing the InputDevice id\n     * that was used to invoke the assist.\n     ",
    "links" : [ "#ACTION_ASSIST" ]
  }, {
    "name" : "ACTION_ALL_APPS",
    "type" : "String",
    "comment" : "\n     * Activity Action: List all available applications.\n     * <p>Input: Nothing.\n     * <p>Output: nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SET_WALLPAPER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show settings for choosing wallpaper.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_BUG_REPORT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show activity for reporting a bug.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_FACTORY_TEST",
    "type" : "String",
    "comment" : "\n     *  Activity Action: Main entry point for factory tests.  Only used when\n     *  the device is booting in factory test node.  The implementing package\n     *  must be installed in the system image.\n     *  <p>Input: nothing\n     *  <p>Output: nothing\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CALL_BUTTON",
    "type" : "String",
    "comment" : "\n     * Activity Action: The user pressed the \"call\" button to go to the dialer\n     * or other appropriate UI for placing a call.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VOICE_COMMAND",
    "type" : "String",
    "comment" : "\n     * Activity Action: Start Voice Command.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     * <p class=\"note\">\n     * In some cases, a matching Activity may not exist, so ensure you\n     * safeguard against this.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SEARCH_LONG_PRESS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Start action associated with long pressing on the\n     * search key.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_APP_ERROR",
    "type" : "String",
    "comment" : "\n     * Activity Action: The user pressed the \"Report\" button in the crash/ANR dialog.\n     * This intent is delivered to the package which installed the application, usually\n     * Google Play.\n     * <p>Input: No data is specified. The bug report is passed in using\n     * an {@link #EXTRA_BUG_REPORT} field.\n     * <p>Output: Nothing.\n     *\n     * @see #EXTRA_BUG_REPORT\n     ",
    "links" : [ "#EXTRA_BUG_REPORT" ]
  }, {
    "name" : "ACTION_PENDING_INCIDENT_REPORTS_CHANGED",
    "type" : "String",
    "comment" : "\n     * An incident or bug report has been taken, and a system app has requested it to be shared,\n     * so trigger the confirmation screen.\n     *\n     * This will be sent directly to the registered receiver with the\n     * android.permission.APPROVE_INCIDENT_REPORTS permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_INCIDENT_REPORT_READY",
    "type" : "String",
    "comment" : "\n     * An incident report has been taken, and the user has approved it for sharing.\n     * <p>\n     * This will be sent directly to the registered receiver, which must have\n     * both the DUMP and USAGE_STATS permissions.\n     * <p>\n     * After receiving this, the application should wait until a suitable time\n     * (e.g. network available), get the list of available reports with\n     * {@link IncidentManager#getIncidentReportList IncidentManager.getIncidentReportList(String)}\n     * and then when the reports have been successfully uploaded, call\n     * {@link IncidentManager#deleteIncidentReport IncidentManager.deleteIncidentReport(Uri)}.\n     *\n     * @hide\n     ",
    "links" : [ "IncidentManager#getIncidentReportList", "IncidentManager#deleteIncidentReport" ]
  }, {
    "name" : "ACTION_POWER_USAGE_SUMMARY",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show power usage information to the user.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DEVICE_INITIALIZATION_WIZARD",
    "type" : "String",
    "comment" : "\n     * Activity Action: Setup wizard action provided for OTA provisioning to determine if it needs\n     * to run.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, setup wizard can be identified\n     * using {@link #ACTION_MAIN} and {@link #CATEGORY_SETUP_WIZARD}\n     * @hide\n     * @removed\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#M", "#ACTION_MAIN", "#CATEGORY_SETUP_WIZARD" ]
  }, {
    "name" : "ACTION_UPGRADE_SETUP",
    "type" : "String",
    "comment" : "\n     * Activity Action: Setup wizard to launch after a platform update.  This\n     * activity should have a string meta-data field associated with it,\n     * {@link #METADATA_SETUP_VERSION}, which defines the current version of\n     * the platform for setup.  The activity will be launched only if\n     * {@link android.provider.Settings.Secure#LAST_SETUP_SHOWN} is not the\n     * same value.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     * @hide\n     ",
    "links" : [ "#METADATA_SETUP_VERSION", "android.provider.Settings.Secure#LAST_SETUP_SHOWN" ]
  }, {
    "name" : "ACTION_SHOW_KEYBOARD_SHORTCUTS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Start the Keyboard Shortcuts Helper screen.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DISMISS_KEYBOARD_SHORTCUTS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Dismiss the Keyboard Shortcuts Helper screen.\n     * <p>Input: Nothing.\n     * <p>Output: Nothing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MANAGE_NETWORK_USAGE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show settings for managing network data usage of a\n     * specific application. Applications should define an activity that offers\n     * options to control data usage.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_INSTALL_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Launch application installer.\n     * <p>\n     * Input: The data must be a content: URI at which the application\n     * can be retrieved.  As of {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1},\n     * you can also use \"package:<package-name>\" to install an application for the\n     * current user that is already installed for another user. You can optionally supply\n     * {@link #EXTRA_INSTALLER_PACKAGE_NAME}, {@link #EXTRA_NOT_UNKNOWN_SOURCE},\n     * {@link #EXTRA_ALLOW_REPLACE}, and {@link #EXTRA_RETURN_RESULT}.\n     * <p>\n     * Output: If {@link #EXTRA_RETURN_RESULT}, returns whether the install\n     * succeeded.\n     * <p>\n     * <strong>Note:</strong>If your app is targeting API level higher than 25 you\n     * need to hold {@link android.Manifest.permission#REQUEST_INSTALL_PACKAGES}\n     * in order to launch the application installer.\n     * </p>\n     *\n     * @see #EXTRA_INSTALLER_PACKAGE_NAME\n     * @see #EXTRA_NOT_UNKNOWN_SOURCE\n     * @see #EXTRA_RETURN_RESULT\n     *\n     * @deprecated use {@link android.content.pm.PackageInstaller} instead\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "#EXTRA_INSTALLER_PACKAGE_NAME", "#EXTRA_NOT_UNKNOWN_SOURCE", "#EXTRA_ALLOW_REPLACE", "#EXTRA_RETURN_RESULT", "#EXTRA_RETURN_RESULT", "android.Manifest.permission#REQUEST_INSTALL_PACKAGES", "android.content.pm.PackageInstaller" ]
  }, {
    "name" : "ACTION_INSTALL_FAILURE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Activity to handle split installation failures.\n     * <p>Splits may be installed dynamically. This happens when an Activity is launched,\n     * but the split that contains the application isn't installed. When a split is\n     * installed in this manner, the containing package usually doesn't know this is\n     * happening. However, if an error occurs during installation, the containing\n     * package can define a single activity handling this action to deal with such\n     * failures.\n     * <p>The activity handling this action must be in the base package.\n     * <p>\n     * Input: {@link #EXTRA_INTENT} the original intent that started split installation.\n     * {@link #EXTRA_SPLIT_NAME} the name of the split that failed to be installed.\n     ",
    "links" : [ "#EXTRA_INTENT", "#EXTRA_SPLIT_NAME" ]
  }, {
    "name" : "ACTION_INSTALL_INSTANT_APP_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Launch instant application installer.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESOLVE_INSTANT_APP_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Service Action: Resolve instant application.\n     * <p>\n     * The system will have a persistent connection to this service.\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_INSTANT_APP_RESOLVER_SETTINGS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Launch instant app settings.\n     *\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INSTALLER_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Used as a string extra field with {@link #ACTION_INSTALL_PACKAGE} to install a\n     * package.  Specifies the installer package name; this package will receive the\n     * {@link #ACTION_APP_ERROR} intent.\n     ",
    "links" : [ "#ACTION_INSTALL_PACKAGE", "#ACTION_APP_ERROR" ]
  }, {
    "name" : "EXTRA_NOT_UNKNOWN_SOURCE",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field with {@link #ACTION_INSTALL_PACKAGE} to install a\n     * package.  Specifies that the application being installed should not be\n     * treated as coming from an unknown source, but as coming from the app\n     * invoking the Intent.  For this to work you must start the installer with\n     * startActivityForResult().\n     ",
    "links" : [ "#ACTION_INSTALL_PACKAGE" ]
  }, {
    "name" : "EXTRA_ORIGINATING_URI",
    "type" : "String",
    "comment" : "\n     * Used as a URI extra field with {@link #ACTION_INSTALL_PACKAGE} and\n     * {@link #ACTION_VIEW} to indicate the URI from which the local APK in the Intent\n     * data field originated from.\n     ",
    "links" : [ "#ACTION_INSTALL_PACKAGE", "#ACTION_VIEW" ]
  }, {
    "name" : "EXTRA_REFERRER",
    "type" : "String",
    "comment" : "\n     * This extra can be used with any Intent used to launch an activity, supplying information\n     * about who is launching that activity.  This field contains a {@link android.net.Uri}\n     * object, typically an http: or https: URI of the web site that the referral came from;\n     * it can also use the {@link #URI_ANDROID_APP_SCHEME android-app:} scheme to identify\n     * a native application that it came from.\n     *\n     * <p>To retrieve this value in a client, use {@link android.app.Activity#getReferrer}\n     * instead of directly retrieving the extra.  It is also valid for applications to\n     * instead supply {@link #EXTRA_REFERRER_NAME} for cases where they can only create\n     * a string, not a Uri; the field here, if supplied, will always take precedence,\n     * however.</p>\n     *\n     * @see #EXTRA_REFERRER_NAME\n     ",
    "links" : [ "android.net.Uri", "#URI_ANDROID_APP_SCHEME", "android.app.Activity#getReferrer", "#EXTRA_REFERRER_NAME" ]
  }, {
    "name" : "EXTRA_REFERRER_NAME",
    "type" : "String",
    "comment" : "\n     * Alternate version of {@link #EXTRA_REFERRER} that supplies the URI as a String rather\n     * than a {@link android.net.Uri} object.  Only for use in cases where Uri objects can\n     * not be created, in particular when Intent extras are supplied through the\n     * {@link #URI_INTENT_SCHEME intent:} or {@link #URI_ANDROID_APP_SCHEME android-app:}\n     * schemes.\n     *\n     * @see #EXTRA_REFERRER\n     ",
    "links" : [ "#EXTRA_REFERRER", "android.net.Uri", "#URI_INTENT_SCHEME", "#URI_ANDROID_APP_SCHEME" ]
  }, {
    "name" : "EXTRA_ORIGINATING_UID",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field with {@link #ACTION_INSTALL_PACKAGE} and\n     * {@link #ACTION_VIEW} to indicate the uid of the package that initiated the install\n     * Currently only a system app that hosts the provider authority \"downloads\" or holds the\n     * permission {@link android.Manifest.permission.MANAGE_DOCUMENTS} can use this.\n     * @hide\n     ",
    "links" : [ "#ACTION_INSTALL_PACKAGE", "#ACTION_VIEW", "android.Manifest.permission.MANAGE_DOCUMENTS" ]
  }, {
    "name" : "EXTRA_ALLOW_REPLACE",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field with {@link #ACTION_INSTALL_PACKAGE} to install a\n     * package.  Tells the installer UI to skip the confirmation with the user\n     * if the .apk is replacing an existing one.\n     * @deprecated As of {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, Android\n     * will no longer show an interstitial message about updating existing\n     * applications so this is no longer needed.\n     ",
    "links" : [ "#ACTION_INSTALL_PACKAGE", "android.os.Build.VERSION_CODES#JELLY_BEAN" ]
  }, {
    "name" : "EXTRA_RETURN_RESULT",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field with {@link #ACTION_INSTALL_PACKAGE} or\n     * {@link #ACTION_UNINSTALL_PACKAGE}.  Specifies that the installer UI should\n     * return to the application the result code of the install/uninstall.  The returned result\n     * code will be {@link android.app.Activity#RESULT_OK} on success or\n     * {@link android.app.Activity#RESULT_FIRST_USER} on failure.\n     ",
    "links" : [ "#ACTION_INSTALL_PACKAGE", "#ACTION_UNINSTALL_PACKAGE", "android.app.Activity#RESULT_OK", "android.app.Activity#RESULT_FIRST_USER" ]
  }, {
    "name" : "EXTRA_INSTALL_RESULT",
    "type" : "String",
    "comment" : "\n     * Package manager install result code.  @hide because result codes are not\n     * yet ready to be exposed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_UNINSTALL_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Launch application uninstaller.\n     * <p>\n     * Input: The data must be a package: URI whose scheme specific part is\n     * the package name of the current installed package to be uninstalled.\n     * You can optionally supply {@link #EXTRA_RETURN_RESULT}.\n     * <p>\n     * Output: If {@link #EXTRA_RETURN_RESULT}, returns whether the install\n     * succeeded.\n     * <p>\n     * Requires {@link android.Manifest.permission#REQUEST_DELETE_PACKAGES}\n     * since {@link Build.VERSION_CODES#P}.\n     *\n     * @deprecated Use {@link android.content.pm.PackageInstaller#uninstall(String, IntentSender)}\n     *             instead\n     ",
    "links" : [ "#EXTRA_RETURN_RESULT", "#EXTRA_RETURN_RESULT", "android.Manifest.permission#REQUEST_DELETE_PACKAGES", "Build.VERSION_CODES#P", "android.content.pm.PackageInstaller#uninstall" ]
  }, {
    "name" : "EXTRA_UNINSTALL_ALL_USERS",
    "type" : "String",
    "comment" : "\n     * Specify whether the package should be uninstalled for all users.\n     * @hide because these should not be part of normal application flow.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_SETUP_VERSION",
    "type" : "String",
    "comment" : "\n     * A string that associates with a metadata entry, indicating the last run version of the\n     * platform that was setup.\n     *\n     * @see #ACTION_UPGRADE_SETUP\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MANAGE_APP_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage the permissions of an app.\n     * <p>\n     * Input: {@link #EXTRA_PACKAGE_NAME} specifies the package whose permissions\n     * will be managed by the launched UI.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @see #EXTRA_PACKAGE_NAME\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "ACTION_MANAGE_APP_PERMISSION",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage a specific permissions of an app.\n     * <p>\n     * Input: {@link #EXTRA_PACKAGE_NAME} specifies the package whose permission\n     * will be managed by the launched UI.\n     * </p>\n     * <p>\n     * Input: {@link #EXTRA_PERMISSION_NAME} specifies the (individual) permission\n     * that should be managed by the launched UI.\n     * </p>\n     * <p>\n     * <li> {@link #EXTRA_USER} specifies the UserHandle of the user that owns the app.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @see #EXTRA_PACKAGE_NAME\n     * @see #EXTRA_PERMISSION_NAME\n     * @see #EXTRA_USER\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME", "#EXTRA_PERMISSION_NAME", "#EXTRA_USER" ]
  }, {
    "name" : "ACTION_MANAGE_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage permissions.\n     * <p>\n     * Input: Nothing.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_AUTO_REVOKE_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage auto-revoke state.\n     *\n     * This is equivalent to Intent#ACTION_APPLICATION_DETAILS_SETTINGS\n     *\n     * <p>\n     * Input: {@link Intent#setData data} should be a {@code package}-scheme {@link Uri} with\n     * a package name, whose auto-revoke state will be reviewed (mandatory).\n     * E.g. {@code Uri.fromParts(\"package\", packageName, null) }\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     ",
    "links" : [ "Intent#setData", "Uri" ]
  }, {
    "name" : "ACTION_REVIEW_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to review permissions for an app.\n     * The system uses this intent if permission review for apps not\n     * supporting the new runtime permissions model is enabled. In\n     * this mode a permission review is required before any of the\n     * app components can run.\n     * <p>\n     * Input: {@link #EXTRA_PACKAGE_NAME} specifies the package whose\n     * permissions will be reviewed (mandatory).\n     * </p>\n     * <p>\n     * Input: {@link #EXTRA_INTENT} specifies a pending intent to\n     * be fired after the permission review (optional).\n     * </p>\n     * <p>\n     * Input: {@link #EXTRA_REMOTE_CALLBACK} specifies a callback to\n     * be invoked after the permission review (optional).\n     * </p>\n     * <p>\n     * Input: {@link #EXTRA_RESULT_NEEDED} specifies whether the intent\n     * passed via {@link #EXTRA_INTENT} needs a result (optional).\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @see #EXTRA_PACKAGE_NAME\n     * @see #EXTRA_INTENT\n     * @see #EXTRA_REMOTE_CALLBACK\n     * @see #EXTRA_RESULT_NEEDED\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME", "#EXTRA_INTENT", "#EXTRA_REMOTE_CALLBACK", "#EXTRA_RESULT_NEEDED", "#EXTRA_INTENT" ]
  }, {
    "name" : "ACTION_VIEW_PERMISSION_USAGE",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to show information about the usage\n     * of a given permission. This action would be handled by apps that\n     * want to show details about how and why given permission is being\n     * used.\n     * <p>\n     * <strong>Important:</strong>You must protect the activity that handles\n     * this action with the {@link android.Manifest.permission#START_VIEW_PERMISSION_USAGE\n     *  START_VIEW_PERMISSION_USAGE} permission to ensure that only the\n     * system can launch this activity. The system will not launch\n     * activities that are not properly protected.\n     *\n     * <p>\n     * Input: {@code android.intent.extra.PERMISSION_NAME} specifies the permission\n     * for which the launched UI would be targeted.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     ",
    "links" : [ "android.Manifest.permission#START_VIEW_PERMISSION_USAGE" ]
  }, {
    "name" : "ACTION_MANAGE_DEFAULT_APP",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage a default app.\n     * <p>\n     * Input: {@link #EXTRA_ROLE_NAME} specifies the role of the default app which will be managed\n     * by the launched UI.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_ROLE_NAME" ]
  }, {
    "name" : "EXTRA_ROLE_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra: A role name.\n     * <p>\n     * Type: String\n     * </p>\n     *\n     * @see android.app.role.RoleManager\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MANAGE_SPECIAL_APP_ACCESSES",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage special app accesses.\n     * <p>\n     * Input: Nothing.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REMOTE_CALLBACK",
    "type" : "String",
    "comment" : "\n     * Intent extra: A callback for reporting remote result as a bundle.\n     * <p>\n     * Type: IRemoteCallback\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra: An app package name.\n     * <p>\n     * Type: String\n     * </p>\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SUSPENDED_PACKAGE_EXTRAS",
    "type" : "String",
    "comment" : "\n     * Intent extra: A {@link Bundle} of extras for a package being suspended. Will be sent as an\n     * extra with {@link #ACTION_MY_PACKAGE_SUSPENDED}.\n     *\n     * <p>The contents of this {@link Bundle} are a contract between the suspended app and the\n     * suspending app, i.e. any app with the permission {@code android.permission.SUSPEND_APPS}.\n     * This is meant to enable the suspended app to better handle the state of being suspended.\n     *\n     * @see #ACTION_MY_PACKAGE_SUSPENDED\n     * @see #ACTION_MY_PACKAGE_UNSUSPENDED\n     * @see PackageManager#isPackageSuspended()\n     * @see PackageManager#getSuspendedPackageAppExtras()\n     ",
    "links" : [ "Bundle", "#ACTION_MY_PACKAGE_SUSPENDED", "Bundle" ]
  }, {
    "name" : "EXTRA_SPLIT_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra: An app split name.\n     * <p>\n     * Type: String\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_COMPONENT_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra: A {@link ComponentName} value.\n     * <p>\n     * Type: String\n     * </p>\n     ",
    "links" : [ "ComponentName" ]
  }, {
    "name" : "EXTRA_RESULT_NEEDED",
    "type" : "String",
    "comment" : "\n     * Intent extra: An extra for specifying whether a result is needed.\n     * <p>\n     * Type: boolean\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SHORTCUT_ID",
    "type" : "String",
    "comment" : "\n     * Intent extra: ID of the shortcut used to send the share intent. Will be sent with\n     * {@link #ACTION_SEND}.\n     *\n     * @see ShortcutInfo#getId()\n     *\n     * <p>\n     * Type: String\n     * </p>\n     ",
    "links" : [ "#ACTION_SEND" ]
  }, {
    "name" : "ACTION_MANAGE_PERMISSION_APPS",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to manage which apps have a given permission.\n     * <p>\n     * Input: {@link #EXTRA_PERMISSION_NAME} specifies the permission group\n     * which will be managed by the launched UI.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @see #EXTRA_PERMISSION_NAME\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_PERMISSION_NAME" ]
  }, {
    "name" : "EXTRA_PERMISSION_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra: The name of a permission.\n     * <p>\n     * Type: String\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PERMISSION_GROUP_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra: The name of a permission group.\n     * <p>\n     * Type: String\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DURATION_MILLIS",
    "type" : "String",
    "comment" : "\n     * Intent extra: The number of milliseconds.\n     * <p>\n     * Type: long\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_REVIEW_PERMISSION_USAGE",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to review app uses of permissions.\n     * <p>\n     * Input: {@link #EXTRA_PERMISSION_NAME} specifies the permission name\n     * that will be displayed by the launched UI.  Do not pass both this and\n     * {@link #EXTRA_PERMISSION_GROUP_NAME} .\n     * </p>\n     * <p>\n     * Input: {@link #EXTRA_PERMISSION_GROUP_NAME} specifies the permission group name\n     * that will be displayed by the launched UI.  Do not pass both this and\n     * {@link #EXTRA_PERMISSION_NAME}.\n     * </p>\n     * <p>\n     * Input: {@link #EXTRA_DURATION_MILLIS} specifies the minimum number of milliseconds of recent\n     * activity to show (optional).  Must be non-negative.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     * <p class=\"note\">\n     * This requires {@link android.Manifest.permission#GRANT_RUNTIME_PERMISSIONS} permission.\n     * </p>\n     *\n     * @see #EXTRA_PERMISSION_NAME\n     * @see #EXTRA_PERMISSION_GROUP_NAME\n     * @see #EXTRA_DURATION_MILLIS\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_PERMISSION_NAME", "#EXTRA_PERMISSION_GROUP_NAME", "#EXTRA_PERMISSION_GROUP_NAME", "#EXTRA_PERMISSION_NAME", "#EXTRA_DURATION_MILLIS", "android.Manifest.permission#GRANT_RUNTIME_PERMISSIONS" ]
  }, {
    "name" : "ACTION_REVIEW_ONGOING_PERMISSION_USAGE",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to review ongoing app uses of permissions.\n     * <p>\n     * Input: {@link #EXTRA_DURATION_MILLIS} specifies the minimum number of milliseconds of recent\n     * activity to show (optional).  Must be non-negative.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     * <p class=\"note\">\n     * This requires {@link android.Manifest.permission#GRANT_RUNTIME_PERMISSIONS} permission.\n     * </p>\n     *\n     * @see #EXTRA_DURATION_MILLIS\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_DURATION_MILLIS", "android.Manifest.permission#GRANT_RUNTIME_PERMISSIONS" ]
  }, {
    "name" : "ACTION_REVIEW_ACCESSIBILITY_SERVICES",
    "type" : "String",
    "comment" : "\n     * Activity action: Launch UI to review running accessibility services.\n     * <p>\n     * Input: Nothing.\n     * </p>\n     * <p>\n     * Output: Nothing.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SCREEN_OFF",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent when the device goes to sleep and becomes non-interactive.\n     * <p>\n     * For historical reasons, the name of this broadcast action refers to the power\n     * state of the screen but it is actually sent in response to changes in the\n     * overall interactive state of the device.\n     * </p><p>\n     * This broadcast is sent when the device becomes non-interactive which may have\n     * nothing to do with the screen turning off.  To determine the\n     * actual state of the screen, use {@link android.view.Display#getState}.\n     * </p><p>\n     * See {@link android.os.PowerManager#isInteractive} for details.\n     * </p>\n     * You <em>cannot</em> receive this through components declared in\n     * manifests, only by explicitly registering for it with\n     * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver()}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "android.view.Display#getState", "android.os.PowerManager#isInteractive", "Context#registerReceiver" ]
  }, {
    "name" : "ACTION_SCREEN_ON",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent when the device wakes up and becomes interactive.\n     * <p>\n     * For historical reasons, the name of this broadcast action refers to the power\n     * state of the screen but it is actually sent in response to changes in the\n     * overall interactive state of the device.\n     * </p><p>\n     * This broadcast is sent when the device becomes interactive which may have\n     * nothing to do with the screen turning on.  To determine the\n     * actual state of the screen, use {@link android.view.Display#getState}.\n     * </p><p>\n     * See {@link android.os.PowerManager#isInteractive} for details.\n     * </p>\n     * You <em>cannot</em> receive this through components declared in\n     * manifests, only by explicitly registering for it with\n     * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver()}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "android.view.Display#getState", "android.os.PowerManager#isInteractive", "Context#registerReceiver" ]
  }, {
    "name" : "ACTION_DREAMING_STOPPED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent after the system stops dreaming.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     * It is only sent to registered receivers.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DREAMING_STARTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent after the system starts dreaming.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     * It is only sent to registered receivers.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_USER_PRESENT",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent when the user is present after device wakes up (e.g when the\n     * keyguard is gone).\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_TIME_TICK",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The current time has changed.  Sent every\n     * minute.  You <em>cannot</em> receive this through components declared\n     * in manifests, only by explicitly registering for it with\n     * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver()}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "Context#registerReceiver" ]
  }, {
    "name" : "ACTION_TIME_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The time was set.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The date has changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_TIMEZONE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The timezone has changed. The intent will have the following extra values:</p>\n     * <ul>\n     *   <li>{@link #EXTRA_TIMEZONE} - The java.util.TimeZone.getID() value identifying the new\n     *   time zone.</li>\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_TIMEZONE" ]
  }, {
    "name" : "ACTION_CLEAR_DNS_CACHE",
    "type" : "String",
    "comment" : "\n     * Clear DNS Cache Action: This is broadcast when networks have changed and old\n     * DNS entries should be tossed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_ALARM_CHANGED",
    "type" : "String",
    "comment" : "\n     * Alarm Changed Action: This is broadcast when the AlarmClock\n     * application's alarm is set or unset.  It is used by the\n     * AlarmClock application and the StatusBar service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_LOCKED_BOOT_COMPLETED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: This is broadcast once, after the user has finished\n     * booting, but while still in the \"locked\" state. It can be used to perform\n     * application-specific initialization, such as installing alarms. You must\n     * hold the {@link android.Manifest.permission#RECEIVE_BOOT_COMPLETED}\n     * permission in order to receive this broadcast.\n     * <p>\n     * This broadcast is sent immediately at boot by all devices (regardless of\n     * direct boot support) running {@link android.os.Build.VERSION_CODES#N} or\n     * higher. Upon receipt of this broadcast, the user is still locked and only\n     * device-protected storage can be accessed safely. If you want to access\n     * credential-protected storage, you need to wait for the user to be\n     * unlocked (typically by entering their lock pattern or PIN for the first\n     * time), after which the {@link #ACTION_USER_UNLOCKED} and\n     * {@link #ACTION_BOOT_COMPLETED} broadcasts are sent.\n     * <p>\n     * To receive this broadcast, your receiver component must be marked as\n     * being {@link ComponentInfo#directBootAware}.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @see Context#createDeviceProtectedStorageContext()\n     ",
    "links" : [ "android.Manifest.permission#RECEIVE_BOOT_COMPLETED", "android.os.Build.VERSION_CODES#N", "#ACTION_USER_UNLOCKED", "#ACTION_BOOT_COMPLETED", "ComponentInfo#directBootAware" ]
  }, {
    "name" : "ACTION_BOOT_COMPLETED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: This is broadcast once, after the user has finished\n     * booting. It can be used to perform application-specific initialization,\n     * such as installing alarms. You must hold the\n     * {@link android.Manifest.permission#RECEIVE_BOOT_COMPLETED} permission in\n     * order to receive this broadcast.\n     * <p>\n     * This broadcast is sent at boot by all devices (both with and without\n     * direct boot support). Upon receipt of this broadcast, the user is\n     * unlocked and both device-protected and credential-protected storage can\n     * accessed safely.\n     * <p>\n     * If you need to run while the user is still locked (before they've entered\n     * their lock pattern or PIN for the first time), you can listen for the\n     * {@link #ACTION_LOCKED_BOOT_COMPLETED} broadcast.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     ",
    "links" : [ "android.Manifest.permission#RECEIVE_BOOT_COMPLETED", "#ACTION_LOCKED_BOOT_COMPLETED" ]
  }, {
    "name" : "ACTION_CLOSE_SYSTEM_DIALOGS",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: This is broadcast when a user action should request a\n     * temporary system dialog to dismiss.  Some examples of temporary system\n     * dialogs are the notification window-shade and the recent tasks dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PACKAGE_INSTALL",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Trigger the download and eventual installation\n     * of a package.\n     * <p>Input: {@link #getData} is the URI of the package file to download.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @deprecated This constant has never been used.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "ACTION_PACKAGE_ADDED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A new application package has been installed on the\n     * device. The data contains the name of the package.  Note that the\n     * newly installed package does <em>not</em> receive this broadcast.\n     * <p>May include the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid assigned to the new package.\n     * <li> {@link #EXTRA_REPLACING} is set to true if this is following\n     * an {@link #ACTION_PACKAGE_REMOVED} broadcast for the same package.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID", "#EXTRA_REPLACING", "#ACTION_PACKAGE_REMOVED" ]
  }, {
    "name" : "ACTION_PACKAGE_REPLACED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A new version of an application package has been\n     * installed, replacing an existing version that was previously installed.\n     * The data contains the name of the package.\n     * <p>May include the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid assigned to the new package.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID" ]
  }, {
    "name" : "ACTION_MY_PACKAGE_REPLACED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A new version of your application has been installed\n     * over an existing one.  This is only sent to the application that was\n     * replaced.  It does not contain any additional data; to receive it, just\n     * use an intent filter for this action.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PACKAGE_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: An existing application package has been removed from\n     * the device.  The data contains the name of the package.  The package\n     * that is being removed does <em>not</em> receive this Intent.\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid previously assigned\n     * to the package.\n     * <li> {@link #EXTRA_DATA_REMOVED} is set to true if the entire\n     * application -- data and code -- is being removed.\n     * <li> {@link #EXTRA_REPLACING} is set to true if this will be followed\n     * by an {@link #ACTION_PACKAGE_ADDED} broadcast for the same package.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID", "#EXTRA_DATA_REMOVED", "#EXTRA_REPLACING", "#ACTION_PACKAGE_ADDED" ]
  }, {
    "name" : "ACTION_PACKAGE_FULLY_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: An existing application package has been completely\n     * removed from the device.  The data contains the name of the package.\n     * This is like {@link #ACTION_PACKAGE_REMOVED}, but only set when\n     * {@link #EXTRA_DATA_REMOVED} is true and\n     * {@link #EXTRA_REPLACING} is false of that broadcast.\n     *\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid previously assigned\n     * to the package.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#ACTION_PACKAGE_REMOVED", "#EXTRA_DATA_REMOVED", "#EXTRA_REPLACING", "#EXTRA_UID" ]
  }, {
    "name" : "ACTION_PACKAGE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: An existing application package has been changed (for\n     * example, a component has been enabled or disabled).  The data contains\n     * the name of the package.\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.\n     * <li> {@link #EXTRA_CHANGED_COMPONENT_NAME_LIST} containing the class name\n     * of the changed components (or the package name itself).\n     * <li> {@link #EXTRA_DONT_KILL_APP} containing boolean field to override the\n     * default action of restarting the application.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID", "#EXTRA_CHANGED_COMPONENT_NAME_LIST", "#EXTRA_DONT_KILL_APP" ]
  }, {
    "name" : "ACTION_PACKAGE_ENABLE_ROLLBACK",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the system rollback manager when a package\n     * needs to have rollback enabled.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     *\n     * @hide This broadcast is used internally by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CANCEL_ENABLE_ROLLBACK",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the system rollback manager when the rollback for a certain\n     * package needs to be cancelled.\n     *\n     * <p class=\"note\">This intent is sent by PackageManagerService to notify RollbackManager\n     * that enabling a specific rollback has timed out.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_ROLLBACK_COMMITTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A rollback has been committed.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. The receiver must hold MANAGE_ROLLBACK permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_QUERY_PACKAGE_RESTART",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Broadcast Action: Ask system services if there is any reason to\n     * restart the given package.  The data contains the name of the\n     * package.\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.\n     * <li> {@link #EXTRA_PACKAGES} String array of all packages to check.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID", "#EXTRA_PACKAGES" ]
  }, {
    "name" : "ACTION_PACKAGE_RESTARTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The user has restarted a package, and all of its\n     * processes have been killed.  All runtime state\n     * associated with it (processes, alarms, notifications, etc) should\n     * be removed.  Note that the restarted package does <em>not</em>\n     * receive this broadcast.\n     * The data contains the name of the package.\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID" ]
  }, {
    "name" : "ACTION_PACKAGE_DATA_CLEARED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The user has cleared the data of a package.  This should\n     * be preceded by {@link #ACTION_PACKAGE_RESTARTED}, after which all of\n     * its persistent data is erased and this broadcast sent.\n     * Note that the cleared package does <em>not</em>\n     * receive this broadcast. The data contains the name of the package.\n     * <ul>\n     * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package. If the\n     *      package whose data was cleared is an uninstalled instant app, then the UID\n     *      will be -1. The platform keeps some meta-data associated with instant apps\n     *      after they are uninstalled.\n     * <li> {@link #EXTRA_PACKAGE_NAME} containing the package name only if the cleared\n     *      data was for an instant app.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#ACTION_PACKAGE_RESTARTED", "#EXTRA_UID", "#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "ACTION_PACKAGES_SUSPENDED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Packages have been suspended.\n     * <p>Includes the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages which have been suspended\n     * <li> {@link #EXTRA_CHANGED_UID_LIST} is the set of uids which have been suspended\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. It is only sent to registered receivers.\n     ",
    "links" : [ "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST" ]
  }, {
    "name" : "ACTION_PACKAGES_UNSUSPENDED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Packages have been unsuspended.\n     * <p>Includes the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages which have been unsuspended\n     * <li> {@link #EXTRA_CHANGED_UID_LIST} is the set of uids which have been unsuspended\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. It is only sent to registered receivers.\n     ",
    "links" : [ "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST" ]
  }, {
    "name" : "ACTION_DISTRACTING_PACKAGES_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Distracting packages have been changed.\n     * <p>Includes the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages which have been changed.\n     * <li> {@link #EXTRA_CHANGED_UID_LIST} is the set of uids which have been changed.\n     * <li> {@link #EXTRA_DISTRACTION_RESTRICTIONS} the new restrictions set on these packages.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. It is only sent to registered receivers.\n     *\n     * @see PackageManager#setDistractingPackageRestrictions(String[], int)\n     * @hide\n     ",
    "links" : [ "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST", "#EXTRA_DISTRACTION_RESTRICTIONS" ]
  }, {
    "name" : "ACTION_MY_PACKAGE_SUSPENDED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to a package that has been suspended by the system. This is sent\n     * whenever a package is put into a suspended state or any of its app extras change while in the\n     * suspended state.\n     * <p> Optionally includes the following extras:\n     * <ul>\n     *     <li> {@link #EXTRA_SUSPENDED_PACKAGE_EXTRAS} which is a {@link Bundle} which will contain\n     *     useful information for the app being suspended.\n     * </ul>\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. <em>This will be delivered to {@link BroadcastReceiver} components declared in\n     * the manifest.</em>\n     *\n     * @see #ACTION_MY_PACKAGE_UNSUSPENDED\n     * @see #EXTRA_SUSPENDED_PACKAGE_EXTRAS\n     * @see PackageManager#isPackageSuspended()\n     * @see PackageManager#getSuspendedPackageAppExtras()\n     ",
    "links" : [ "#EXTRA_SUSPENDED_PACKAGE_EXTRAS", "Bundle", "BroadcastReceiver" ]
  }, {
    "name" : "ACTION_SHOW_SUSPENDED_APP_DETAILS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Started to show more details about why an application was suspended.\n     *\n     * <p>Whenever the system detects an activity launch for a suspended app, this action can\n     * be used to show more details about the reason for suspension.\n     *\n     * <p>Apps holding {@link android.Manifest.permission#SUSPEND_APPS} must declare an activity\n     * handling this intent and protect it with\n     * {@link android.Manifest.permission#SEND_SHOW_SUSPENDED_APP_DETAILS}.\n     *\n     * <p>Includes an extra {@link #EXTRA_PACKAGE_NAME} which is the name of the suspended package.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see PackageManager#setPackagesSuspended(String[], boolean, PersistableBundle,\n     * PersistableBundle, String)\n     * @see PackageManager#isPackageSuspended()\n     * @see #ACTION_PACKAGES_SUSPENDED\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#SUSPEND_APPS", "android.Manifest.permission#SEND_SHOW_SUSPENDED_APP_DETAILS", "#EXTRA_PACKAGE_NAME" ]
  }, {
    "name" : "ACTION_PACKAGE_UNSUSPENDED_MANUALLY",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to indicate that the user unsuspended a package.\n     *\n     * <p>This can happen when the user taps on the neutral button of the\n     * {@linkplain SuspendDialogInfo suspend-dialog} which was created by using\n     * {@link SuspendDialogInfo#BUTTON_ACTION_UNSUSPEND}. This broadcast is only sent to the\n     * suspending app that originally specified this dialog while calling\n     * {@link PackageManager#setPackagesSuspended(String[], boolean, PersistableBundle,\n     * PersistableBundle, SuspendDialogInfo)}.\n     *\n     * <p>Includes an extra {@link #EXTRA_PACKAGE_NAME} which is the name of the package that just\n     * got unsuspended.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. <em>This will be delivered to {@link BroadcastReceiver} components declared in\n     * the manifest.</em>\n     *\n     * @see PackageManager#setPackagesSuspended(String[], boolean, PersistableBundle,\n     * PersistableBundle, SuspendDialogInfo)\n     * @see PackageManager#isPackageSuspended()\n     * @see SuspendDialogInfo#BUTTON_ACTION_MORE_DETAILS\n     * @hide\n     ",
    "links" : [ "SuspendDialogInfo#BUTTON_ACTION_UNSUSPEND", "PackageManager#setPackagesSuspended", "#EXTRA_PACKAGE_NAME", "BroadcastReceiver" ]
  }, {
    "name" : "ACTION_MY_PACKAGE_UNSUSPENDED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to a package that has been unsuspended.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system. <em>This will be delivered to {@link BroadcastReceiver} components declared in\n     * the manifest.</em>\n     *\n     * @see #ACTION_MY_PACKAGE_SUSPENDED\n     * @see #EXTRA_SUSPENDED_PACKAGE_EXTRAS\n     * @see PackageManager#isPackageSuspended()\n     * @see PackageManager#getSuspendedPackageAppExtras()\n     ",
    "links" : [ "BroadcastReceiver" ]
  }, {
    "name" : "ACTION_UID_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A user ID has been removed from the system.  The user\n     * ID number is stored in the extra data under {@link #EXTRA_UID}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_UID" ]
  }, {
    "name" : "ACTION_PACKAGE_FIRST_LAUNCH",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the installer package of an application when\n     * that application is first launched (that is the first time it is moved\n     * out of the stopped state).  The data contains the name of the package.\n     *\n     * <p>When the application is first launched, the application itself doesn't receive this\n     * broadcast.</p>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PACKAGE_NEEDS_VERIFICATION",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the system package verifier when a package\n     * needs to be verified. The data contains the package URI.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PACKAGE_VERIFIED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the system package verifier when a package is\n     * verified. The data contains the package URI.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_INTENT_FILTER_NEEDS_VERIFICATION",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the system intent filter verifier when an\n     * intent filter needs to be verified. The data contains the filter data\n     * hosts to be verified against.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_EXTERNAL_APPLICATIONS_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Resources for a set of packages (which were\n     * previously unavailable) are currently\n     * available since the media on which they exist is available.\n     * The extra data {@link #EXTRA_CHANGED_PACKAGE_LIST} contains a\n     * list of packages whose availability changed.\n     * The extra data {@link #EXTRA_CHANGED_UID_LIST} contains a\n     * list of uids of packages whose availability changed.\n     * Note that the\n     * packages in this list do <em>not</em> receive this broadcast.\n     * The specified set of packages are now available on the system.\n     * <p>Includes the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages\n     * whose resources(were previously unavailable) are currently available.\n     * {@link #EXTRA_CHANGED_UID_LIST} is the set of uids of the\n     * packages whose resources(were previously unavailable)\n     * are  currently available.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST", "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST" ]
  }, {
    "name" : "ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Resources for a set of packages are currently\n     * unavailable since the media on which they exist is unavailable.\n     * The extra data {@link #EXTRA_CHANGED_PACKAGE_LIST} contains a\n     * list of packages whose availability changed.\n     * The extra data {@link #EXTRA_CHANGED_UID_LIST} contains a\n     * list of uids of packages whose availability changed.\n     * The specified set of packages can no longer be\n     * launched and are practically unavailable on the system.\n     * <p>Inclues the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages\n     * whose resources are no longer available.\n     * {@link #EXTRA_CHANGED_UID_LIST} is the set of packages\n     * whose resources are no longer available.\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST", "#EXTRA_CHANGED_PACKAGE_LIST", "#EXTRA_CHANGED_UID_LIST" ]
  }, {
    "name" : "ACTION_PREFERRED_ACTIVITY_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: preferred activities have changed *explicitly*.\n     *\n     * <p>Note there are cases where a preferred activity is invalidated *implicitly*, e.g.\n     * when an app is installed or uninstalled, but in such cases this broadcast will *not*\n     * be sent.\n     *\n     * {@link #EXTRA_USER_HANDLE} contains the user ID in question.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_USER_HANDLE" ]
  }, {
    "name" : "ACTION_WALLPAPER_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The current system wallpaper has changed.  See\n     * {@link android.app.WallpaperManager} for retrieving the new wallpaper.\n     * This should <em>only</em> be used to determine when the wallpaper\n     * has changed to show the new wallpaper to the user.  You should certainly\n     * never, in response to this, change the wallpaper or other attributes of\n     * it such as the suggested size.  That would be crazy, right?  You'd cause\n     * all kinds of loops, especially if other apps are doing similar things,\n     * right?  Of course.  So please don't do this.\n     *\n     * @deprecated Modern applications should use\n     * {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER\n     * WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER} to have the wallpaper\n     * shown behind their UI, rather than watching for this broadcast and\n     * rendering the wallpaper on their own.\n     ",
    "links" : [ "android.app.WallpaperManager", "android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER" ]
  }, {
    "name" : "ACTION_CONFIGURATION_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The current device {@link android.content.res.Configuration}\n     * (orientation, locale, etc) has changed.  When such a change happens, the\n     * UIs (view hierarchy) will need to be rebuilt based on this new\n     * information; for the most part, applications don't need to worry about\n     * this, because the system will take care of stopping and restarting the\n     * application to make sure it sees the new changes.  Some system code that\n     * can not be restarted will need to watch for this action and handle it\n     * appropriately.\n     *\n     * <p class=\"note\">\n     * You <em>cannot</em> receive this through components declared\n     * in manifests, only by explicitly registering for it with\n     * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver()}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see android.content.res.Configuration\n     ",
    "links" : [ "android.content.res.Configuration", "Context#registerReceiver" ]
  }, {
    "name" : "ACTION_SPLIT_CONFIGURATION_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The current device {@link android.content.res.Configuration} has changed\n     * such that the device may be eligible for the installation of additional configuration splits.\n     * Configuration properties that can trigger this broadcast include locale and display density.\n     *\n     * <p class=\"note\">\n     * Unlike {@link #ACTION_CONFIGURATION_CHANGED}, you <em>can</em> receive this through\n     * components declared in manifests. However, the receiver <em>must</em> hold the\n     * {@link android.Manifest.permission#INSTALL_PACKAGES} permission.\n     *\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.res.Configuration", "#ACTION_CONFIGURATION_CHANGED", "android.Manifest.permission#INSTALL_PACKAGES" ]
  }, {
    "name" : "ACTION_LOCALE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The current device's locale has changed.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_BATTERY_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  This is a <em>sticky broadcast</em> containing the\n     * charging state, level, and other information about the battery.\n     * See {@link android.os.BatteryManager} for documentation on the\n     * contents of the Intent.\n     *\n     * <p class=\"note\">\n     * You <em>cannot</em> receive this through components declared\n     * in manifests, only by explicitly registering for it with\n     * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver()}.  See {@link #ACTION_BATTERY_LOW},\n     * {@link #ACTION_BATTERY_OKAY}, {@link #ACTION_POWER_CONNECTED},\n     * and {@link #ACTION_POWER_DISCONNECTED} for distinct battery-related\n     * broadcasts that are sent and can be received through manifest\n     * receivers.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "android.os.BatteryManager", "Context#registerReceiver", "#ACTION_BATTERY_LOW", "#ACTION_BATTERY_OKAY", "#ACTION_POWER_CONNECTED", "#ACTION_POWER_DISCONNECTED" ]
  }, {
    "name" : "ACTION_BATTERY_LEVEL_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent when the current battery level changes.\n     *\n     * It has {@link android.os.BatteryManager#EXTRA_EVENTS} that carries a list of {@link Bundle}\n     * instances representing individual battery level changes with associated\n     * extras from {@link #ACTION_BATTERY_CHANGED}.\n     *\n     * <p class=\"note\">\n     * This broadcast requires {@link android.Manifest.permission#BATTERY_STATS} permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.BatteryManager#EXTRA_EVENTS", "Bundle", "#ACTION_BATTERY_CHANGED", "android.Manifest.permission#BATTERY_STATS" ]
  }, {
    "name" : "ACTION_BATTERY_LOW",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  Indicates low battery condition on the device.\n     * This broadcast corresponds to the \"Low battery warning\" system dialog.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_BATTERY_OKAY",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  Indicates the battery is now okay after being low.\n     * This will be sent after {@link #ACTION_BATTERY_LOW} once the battery has\n     * gone back up to an okay state.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ "#ACTION_BATTERY_LOW" ]
  }, {
    "name" : "ACTION_POWER_CONNECTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External power has been connected to the device.\n     * This is intended for applications that wish to register specifically to this notification.\n     * Unlike ACTION_BATTERY_CHANGED, applications will be woken for this and so do not have to\n     * stay active to receive this notification.  This action can be used to implement actions\n     * that wait until power is available to trigger.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_POWER_DISCONNECTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External power has been removed from the device.\n     * This is intended for applications that wish to register specifically to this notification.\n     * Unlike ACTION_BATTERY_CHANGED, applications will be woken for this and so do not have to\n     * stay active to receive this notification.  This action can be used to implement actions\n     * that wait until power is available to trigger.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHUTDOWN",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  Device is shutting down.\n     * This is broadcast when the device is being shut down (completely turned\n     * off, not sleeping).  Once the broadcast is complete, the final shutdown\n     * will proceed and all unsaved data lost.  Apps will not normally need\n     * to handle this, since the foreground activity will be paused as well.\n     * <p>As of {@link Build.VERSION_CODES#P} this broadcast is only sent to receivers registered\n     * through {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     * <p>May include the following extras:\n     * <ul>\n     * <li> {@link #EXTRA_SHUTDOWN_USERSPACE_ONLY} a boolean that is set to true if this\n     * shutdown is only for userspace processes.  If not set, assumed to be false.\n     * </ul>\n     ",
    "links" : [ "Build.VERSION_CODES#P", "Context#registerReceiver", "#EXTRA_SHUTDOWN_USERSPACE_ONLY" ]
  }, {
    "name" : "ACTION_REQUEST_SHUTDOWN",
    "type" : "String",
    "comment" : "\n     * Activity Action:  Start this activity to request system shutdown.\n     * The optional boolean extra field {@link #EXTRA_KEY_CONFIRM} can be set to true\n     * to request confirmation from the user before shutting down. The optional boolean\n     * extra field {@link #EXTRA_USER_REQUESTED_SHUTDOWN} can be set to true to\n     * indicate that the shutdown is requested by the user.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * {@hide}\n     ",
    "links" : [ "#EXTRA_KEY_CONFIRM", "#EXTRA_USER_REQUESTED_SHUTDOWN" ]
  }, {
    "name" : "ACTION_DEVICE_STORAGE_LOW",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A sticky broadcast that indicates low storage space\n     * condition on the device\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @deprecated if your app targets {@link android.os.Build.VERSION_CODES#O}\n     *             or above, this broadcast will no longer be delivered to any\n     *             {@link BroadcastReceiver} defined in your manifest. Instead,\n     *             apps are strongly encouraged to use the improved\n     *             {@link Context#getCacheDir()} behavior so the system can\n     *             automatically free up storage when needed.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "BroadcastReceiver", "Context#getCacheDir" ]
  }, {
    "name" : "ACTION_DEVICE_STORAGE_OK",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates low storage space condition on the device no\n     * longer exists\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @deprecated if your app targets {@link android.os.Build.VERSION_CODES#O}\n     *             or above, this broadcast will no longer be delivered to any\n     *             {@link BroadcastReceiver} defined in your manifest. Instead,\n     *             apps are strongly encouraged to use the improved\n     *             {@link Context#getCacheDir()} behavior so the system can\n     *             automatically free up storage when needed.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "BroadcastReceiver", "Context#getCacheDir" ]
  }, {
    "name" : "ACTION_DEVICE_STORAGE_FULL",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A sticky broadcast that indicates a storage space full\n     * condition on the device. This is intended for activities that want to be\n     * able to fill the data partition completely, leaving only enough free\n     * space to prevent system-wide SQLite failures.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @deprecated if your app targets {@link android.os.Build.VERSION_CODES#O}\n     *             or above, this broadcast will no longer be delivered to any\n     *             {@link BroadcastReceiver} defined in your manifest. Instead,\n     *             apps are strongly encouraged to use the improved\n     *             {@link Context#getCacheDir()} behavior so the system can\n     *             automatically free up storage when needed.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "BroadcastReceiver", "Context#getCacheDir" ]
  }, {
    "name" : "ACTION_DEVICE_STORAGE_NOT_FULL",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates storage space full condition on the device no\n     * longer exists.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @deprecated if your app targets {@link android.os.Build.VERSION_CODES#O}\n     *             or above, this broadcast will no longer be delivered to any\n     *             {@link BroadcastReceiver} defined in your manifest. Instead,\n     *             apps are strongly encouraged to use the improved\n     *             {@link Context#getCacheDir()} behavior so the system can\n     *             automatically free up storage when needed.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "BroadcastReceiver", "Context#getCacheDir" ]
  }, {
    "name" : "ACTION_MANAGE_PACKAGE_STORAGE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  Indicates low memory condition notification acknowledged by user\n     * and package management should be started.\n     * This is triggered by the user from the ACTION_DEVICE_STORAGE_LOW\n     * notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_UMS_CONNECTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The device has entered USB Mass Storage mode.\n     * This is used mainly for the USB Settings panel.\n     * Apps should listen for ACTION_MEDIA_MOUNTED and ACTION_MEDIA_UNMOUNTED broadcasts to be notified\n     * when the SD card file system is mounted or unmounted\n     * @deprecated replaced by android.os.storage.StorageEventListener\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_UMS_DISCONNECTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The device has exited USB Mass Storage mode.\n     * This is used mainly for the USB Settings panel.\n     * Apps should listen for ACTION_MEDIA_MOUNTED and ACTION_MEDIA_UNMOUNTED broadcasts to be notified\n     * when the SD card file system is mounted or unmounted\n     * @deprecated replaced by android.os.storage.StorageEventListener\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media has been removed.\n     * The path to the mount point for the removed media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_UNMOUNTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is present, but not mounted at its mount point.\n     * The path to the mount point for the unmounted media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_CHECKING",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is present, and being disk-checked\n     * The path to the mount point for the checking media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_NOFS",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is present, but is using an incompatible fs (or is blank)\n     * The path to the mount point for the checking media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_MOUNTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is present and mounted at its mount point.\n     * The path to the mount point for the mounted media is contained in the Intent.mData field.\n     * The Intent contains an extra with name \"read-only\" and Boolean value to indicate if the\n     * media was mounted read only.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_SHARED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is unmounted because it is being shared via USB mass storage.\n     * The path to the mount point for the shared media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_UNSHARED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is no longer being shared via USB mass storage.\n     * The path to the mount point for the previously shared media is contained in the Intent.mData field.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_BAD_REMOVAL",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media was removed from SD card slot, but mount point was not unmounted.\n     * The path to the mount point for the removed media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_UNMOUNTABLE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  External media is present but cannot be mounted.\n     * The path to the mount point for the unmountable media is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_EJECT",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  User has expressed the desire to remove the external storage media.\n     * Applications should close all files they have open within the mount point when they receive this intent.\n     * The path to the mount point for the media to be ejected is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_SCANNER_STARTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The media scanner has started scanning a directory.\n     * The path to the directory being scanned is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_SCANNER_FINISHED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The media scanner has finished scanning a directory.\n     * The path to the scanned directory is contained in the Intent.mData field.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MEDIA_SCANNER_SCAN_FILE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Request the media scanner to scan a file and add it to\n     * the media database.\n     * <p>\n     * The path to the file is contained in {@link Intent#getData()}.\n     *\n     * @deprecated Callers should migrate to inserting items directly into\n     *             {@link MediaStore}, where they will be automatically scanned\n     *             after each mutation.\n     ",
    "links" : [ "Intent#getData", "MediaStore" ]
  }, {
    "name" : "ACTION_MEDIA_BUTTON",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The \"Media Button\" was pressed.  Includes a single\n     * extra field, {@link #EXTRA_KEY_EVENT}, containing the key event that\n     * caused the broadcast.\n     ",
    "links" : [ "#EXTRA_KEY_EVENT" ]
  }, {
    "name" : "ACTION_CAMERA_BUTTON",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  The \"Camera Button\" was pressed.  Includes a single\n     * extra field, {@link #EXTRA_KEY_EVENT}, containing the key event that\n     * caused the broadcast.\n     ",
    "links" : [ "#EXTRA_KEY_EVENT" ]
  }, {
    "name" : "ACTION_GTALK_SERVICE_CONNECTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A GTalk connection has been established.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_GTALK_SERVICE_DISCONNECTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A GTalk connection has been disconnected.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_INPUT_METHOD_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: An input method has been changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_AIRPLANE_MODE_CHANGED",
    "type" : "String",
    "comment" : "\n     * <p>Broadcast Action: The user has switched the phone into or out of Airplane Mode. One or\n     * more radios have been turned off or on. The intent will have the following extra value:</p>\n     * <ul>\n     *   <li><em>state</em> - A boolean value indicating whether Airplane Mode is on. If true,\n     *   then cell radio and possibly other radios such as bluetooth or WiFi may have also been\n     *   turned off</li>\n     * </ul>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PROVIDER_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Some content providers have parts of their namespace\n     * where they publish new events or items that the user may be especially\n     * interested in. For these things, they may broadcast this action when the\n     * set of interesting items change.\n     *\n     * For example, GmailProvider sends this notification when the set of unread\n     * mail in the inbox changes.\n     *\n     * <p>The data of the intent identifies which part of which provider\n     * changed. When queried through the content resolver, the data URI will\n     * return the data set in question.\n     *\n     * <p>The intent will have the following extra values:\n     * <ul>\n     *   <li><em>count</em> - The number of items in the data set. This is the\n     *       same as the number of items in the cursor returned by querying the\n     *       data URI. </li>\n     * </ul>\n     *\n     * This intent will be sent at boot (if the count is non-zero) and when the\n     * data set changes. It is possible for the data set to change without the\n     * count changing (for example, if a new unread message arrives in the same\n     * sync operation in which a message is archived). The phone should still\n     * ring/vibrate/etc as normal in this case.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_HEADSET_PLUG",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Wired Headset plugged in or unplugged.\n     *\n     * Same as {@link android.media.AudioManager#ACTION_HEADSET_PLUG}, to be consulted for value\n     *   and documentation.\n     * <p>If the minimum SDK version of your application is\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP}, it is recommended to refer\n     * to the <code>AudioManager</code> constant in your receiver registration code instead.\n     ",
    "links" : [ "android.media.AudioManager#ACTION_HEADSET_PLUG", "android.os.Build.VERSION_CODES#LOLLIPOP" ]
  }, {
    "name" : "ACTION_ADVANCED_SETTINGS_CHANGED",
    "type" : "String",
    "comment" : "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)",
    "links" : [ ]
  }, {
    "name" : "ACTION_APPLICATION_RESTRICTIONS_CHANGED",
    "type" : "String",
    "comment" : "\n     *  Broadcast Action: Sent after application restrictions are changed.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_NEW_OUTGOING_CALL",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: An outgoing call is about to be placed.\n     *\n     * <p>The Intent will have the following extra value:</p>\n     * <ul>\n     *   <li><em>{@link android.content.Intent#EXTRA_PHONE_NUMBER}</em> -\n     *       the phone number originally intended to be dialed.</li>\n     * </ul>\n     * <p>Once the broadcast is finished, the resultData is used as the actual\n     * number to call.  If  <code>null</code>, no call will be placed.</p>\n     * <p>It is perfectly acceptable for multiple receivers to process the\n     * outgoing call in turn: for example, a parental control application\n     * might verify that the user is authorized to place the call at that\n     * time, then a number-rewriting application might add an area code if\n     * one was not specified.</p>\n     * <p>For consistency, any receiver whose purpose is to prohibit phone\n     * calls should have a priority of 0, to ensure it will see the final\n     * phone number to be dialed.\n     * Any receiver whose purpose is to rewrite phone numbers to be called\n     * should have a positive priority.\n     * Negative priorities are reserved for the system for this broadcast;\n     * using them may cause problems.</p>\n     * <p>Any BroadcastReceiver receiving this Intent <em>must not</em>\n     * abort the broadcast.</p>\n     * <p>Emergency calls cannot be intercepted using this mechanism, and\n     * other calls cannot be modified to call emergency numbers using this\n     * mechanism.\n     * <p>Some apps (such as VoIP apps) may want to redirect the outgoing\n     * call to use their own service instead. Those apps should first prevent\n     * the call from being placed by setting resultData to <code>null</code>\n     * and then start their own app to make the call.\n     * <p>You must hold the\n     * {@link android.Manifest.permission#PROCESS_OUTGOING_CALLS}\n     * permission to receive this Intent.</p>\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * <p class=\"note\">If the user has chosen a {@link android.telecom.CallRedirectionService} to\n     * handle redirection of outgoing calls, this intent will NOT be sent as an ordered broadcast.\n     * This means that attempts to re-write the outgoing call by other apps using this intent will\n     * be ignored.\n     * </p>\n     *\n     * @deprecated Apps that redirect outgoing calls should use the\n     * {@link android.telecom.CallRedirectionService} API.  Apps that perform call screening\n     * should use the {@link android.telecom.CallScreeningService} API.  Apps which need to be\n     * notified of basic call state should use\n     * {@link android.telephony.PhoneStateListener#onCallStateChanged(int, String)} to determine\n     * when a new outgoing call is placed.\n     ",
    "links" : [ "android.content.Intent#EXTRA_PHONE_NUMBER", "android.Manifest.permission#PROCESS_OUTGOING_CALLS", "android.telecom.CallRedirectionService", "android.telecom.CallRedirectionService", "android.telecom.CallScreeningService", "android.telephony.PhoneStateListener#onCallStateChanged" ]
  }, {
    "name" : "ACTION_REBOOT",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Have the device reboot.  This is only for use by\n     * system code.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DOCK_EVENT",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A sticky broadcast for changes in the physical\n     * docking state of the device.\n     *\n     * <p>The intent will have the following extra values:\n     * <ul>\n     *   <li><em>{@link #EXTRA_DOCK_STATE}</em> - the current dock\n     *       state, indicating which dock the device is physically in.</li>\n     * </ul>\n     * <p>This is intended for monitoring the current physical dock state.\n     * See {@link android.app.UiModeManager} for the normal API dealing with\n     * dock mode changes.\n     ",
    "links" : [ "#EXTRA_DOCK_STATE", "android.app.UiModeManager" ]
  }, {
    "name" : "ACTION_IDLE_MAINTENANCE_START",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A broadcast when idle maintenance can be started.\n     * This means that the user is not interacting with the device and is\n     * not expected to do so soon. Typical use of the idle maintenance is\n     * to perform somehow expensive tasks that can be postponed at a moment\n     * when they will not degrade user experience.\n     * <p>\n     * <p class=\"note\">In order to keep the device responsive in case of an\n     * unexpected user interaction, implementations of a maintenance task\n     * should be interruptible. In such a scenario a broadcast with action\n     * {@link #ACTION_IDLE_MAINTENANCE_END} will be sent. In other words, you\n     * should not do the maintenance work in\n     * {@link BroadcastReceiver#onReceive(Context, Intent)}, rather start a\n     * maintenance service by {@link Context#startService(Intent)}. Also\n     * you should hold a wake lock while your maintenance service is running\n     * to prevent the device going to sleep.\n     * </p>\n     * <p>\n     * <p class=\"note\">This is a protected intent that can only be sent by\n     * the system.\n     * </p>\n     *\n     * @see #ACTION_IDLE_MAINTENANCE_END\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_IDLE_MAINTENANCE_END", "BroadcastReceiver#onReceive", "Context#startService" ]
  }, {
    "name" : "ACTION_IDLE_MAINTENANCE_END",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A broadcast when idle maintenance should be stopped.\n     * This means that the user was not interacting with the device as a result\n     * of which a broadcast with action {@link #ACTION_IDLE_MAINTENANCE_START}\n     * was sent and now the user started interacting with the device. Typical\n     * use of the idle maintenance is to perform somehow expensive tasks that\n     * can be postponed at a moment when they will not degrade user experience.\n     * <p>\n     * <p class=\"note\">In order to keep the device responsive in case of an\n     * unexpected user interaction, implementations of a maintenance task\n     * should be interruptible. Hence, on receiving a broadcast with this\n     * action, the maintenance task should be interrupted as soon as possible.\n     * In other words, you should not do the maintenance work in\n     * {@link BroadcastReceiver#onReceive(Context, Intent)}, rather stop the\n     * maintenance service that was started on receiving of\n     * {@link #ACTION_IDLE_MAINTENANCE_START}.Also you should release the wake\n     * lock you acquired when your maintenance service started.\n     * </p>\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @see #ACTION_IDLE_MAINTENANCE_START\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_IDLE_MAINTENANCE_START", "BroadcastReceiver#onReceive", "#ACTION_IDLE_MAINTENANCE_START" ]
  }, {
    "name" : "ACTION_REMOTE_INTENT",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: a remote intent is to be broadcasted.\n     *\n     * A remote intent is used for remote RPC between devices. The remote intent\n     * is serialized and sent from one device to another device. The receiving\n     * device parses the remote intent and broadcasts it. Note that anyone can\n     * broadcast a remote intent. However, if the intent receiver of the remote intent\n     * does not trust intent broadcasts from arbitrary intent senders, it should require\n     * the sender to hold certain permissions so only trusted sender's broadcast will be\n     * let through.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PRE_BOOT_COMPLETED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: This is broadcast once when the user is booting after a\n     * system update. It can be used to perform cleanup or upgrades after a\n     * system update.\n     * <p>\n     * This broadcast is sent after the {@link #ACTION_LOCKED_BOOT_COMPLETED}\n     * broadcast but before the {@link #ACTION_BOOT_COMPLETED} broadcast. It's\n     * only sent when the {@link Build#FINGERPRINT} has changed, and it's only\n     * sent to receivers in the system image.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_LOCKED_BOOT_COMPLETED", "#ACTION_BOOT_COMPLETED", "Build#FINGERPRINT" ]
  }, {
    "name" : "ACTION_GET_RESTRICTION_ENTRIES",
    "type" : "String",
    "comment" : "\n     * Broadcast to a specific application to query any supported restrictions to impose\n     * on restricted users. The broadcast intent contains an extra\n     * {@link #EXTRA_RESTRICTIONS_BUNDLE} with the currently persisted\n     * restrictions as a Bundle of key/value pairs. The value types can be Boolean, String or\n     * String[] depending on the restriction type.<p/>\n     * The response should contain an extra {@link #EXTRA_RESTRICTIONS_LIST},\n     * which is of type <code>ArrayList&lt;RestrictionEntry&gt;</code>. It can also\n     * contain an extra {@link #EXTRA_RESTRICTIONS_INTENT}, which is of type <code>Intent</code>.\n     * The activity specified by that intent will be launched for a result which must contain\n     * one of the extras {@link #EXTRA_RESTRICTIONS_LIST} or {@link #EXTRA_RESTRICTIONS_BUNDLE}.\n     * The keys and values of the returned restrictions will be persisted.\n     * @see RestrictionEntry\n     ",
    "links" : [ "#EXTRA_RESTRICTIONS_BUNDLE", "#EXTRA_RESTRICTIONS_LIST", "#EXTRA_RESTRICTIONS_INTENT", "#EXTRA_RESTRICTIONS_LIST", "#EXTRA_RESTRICTIONS_BUNDLE" ]
  }, {
    "name" : "ACTION_USER_INITIALIZE",
    "type" : "String",
    "comment" : "\n     * Sent the first time a user is starting, to allow system apps to\n     * perform one time initialization.  (This will not be seen by third\n     * party applications because a newly initialized user does not have any\n     * third party applications installed for it.)  This is sent early in\n     * starting the user, around the time the home app is started, before\n     * {@link #ACTION_BOOT_COMPLETED} is sent.  This is sent as a foreground\n     * broadcast, since it is part of a visible user interaction; be as quick\n     * as possible when handling it.\n     ",
    "links" : [ "#ACTION_BOOT_COMPLETED" ]
  }, {
    "name" : "ACTION_USER_FOREGROUND",
    "type" : "String",
    "comment" : "\n     * Sent when a user switch is happening, causing the process's user to be\n     * brought to the foreground.  This is only sent to receivers registered\n     * through {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver}.  It is sent to the user that is going to the\n     * foreground.  This is sent as a foreground\n     * broadcast, since it is part of a visible user interaction; be as quick\n     * as possible when handling it.\n     ",
    "links" : [ "Context#registerReceiver" ]
  }, {
    "name" : "ACTION_USER_BACKGROUND",
    "type" : "String",
    "comment" : "\n     * Sent when a user switch is happening, causing the process's user to be\n     * sent to the background.  This is only sent to receivers registered\n     * through {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)\n     * Context.registerReceiver}.  It is sent to the user that is going to the\n     * background.  This is sent as a foreground\n     * broadcast, since it is part of a visible user interaction; be as quick\n     * as possible when handling it.\n     ",
    "links" : [ "Context#registerReceiver" ]
  }, {
    "name" : "ACTION_USER_ADDED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the system when a user is added. Carries an extra\n     * EXTRA_USER_HANDLE that has the userHandle of the new user.  It is sent to\n     * all running users.  You must hold\n     * {@link android.Manifest.permission#MANAGE_USERS} to receive this broadcast.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_USERS" ]
  }, {
    "name" : "ACTION_USER_STARTED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent by the system when a user is started. Carries an extra\n     * EXTRA_USER_HANDLE that has the userHandle of the user.  This is only sent to\n     * registered receivers, not manifest receivers.  It is sent to the user\n     * that has been started.  This is sent as a foreground\n     * broadcast, since it is part of a visible user interaction; be as quick\n     * as possible when handling it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_USER_STARTING",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when a user is in the process of starting.  Carries an extra\n     * EXTRA_USER_HANDLE that has the userHandle of the user.  This is only\n     * sent to registered receivers, not manifest receivers.  It is sent to all\n     * users (including the one that is being started).  You must hold\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS} to receive\n     * this broadcast.  This is sent as a background broadcast, since\n     * its result is not part of the primary UX flow; to safely keep track of\n     * started/stopped state of a user you can use this in conjunction with\n     * {@link #ACTION_USER_STOPPING}.  It is <b>not</b> generally safe to use with\n     * other user state broadcasts since those are foreground broadcasts so can\n     * execute in a different order.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS", "#ACTION_USER_STOPPING" ]
  }, {
    "name" : "ACTION_USER_STOPPING",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when a user is going to be stopped.  Carries an extra\n     * EXTRA_USER_HANDLE that has the userHandle of the user.  This is only\n     * sent to registered receivers, not manifest receivers.  It is sent to all\n     * users (including the one that is being stopped).  You must hold\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS} to receive\n     * this broadcast.  The user will not stop until all receivers have\n     * handled the broadcast.  This is sent as a background broadcast, since\n     * its result is not part of the primary UX flow; to safely keep track of\n     * started/stopped state of a user you can use this in conjunction with\n     * {@link #ACTION_USER_STARTING}.  It is <b>not</b> generally safe to use with\n     * other user state broadcasts since those are foreground broadcasts so can\n     * execute in a different order.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS", "#ACTION_USER_STARTING" ]
  }, {
    "name" : "ACTION_USER_STOPPED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the system when a user is stopped. Carries an extra\n     * EXTRA_USER_HANDLE that has the userHandle of the user.  This is similar to\n     * {@link #ACTION_PACKAGE_RESTARTED}, but for an entire user instead of a\n     * specific package.  This is only sent to registered receivers, not manifest\n     * receivers.  It is sent to all running users <em>except</em> the one that\n     * has just been stopped (which is no longer running).\n     * @hide\n     ",
    "links" : [ "#ACTION_PACKAGE_RESTARTED" ]
  }, {
    "name" : "ACTION_USER_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the system when a user is removed. Carries an extra EXTRA_USER_HANDLE that has\n     * the userHandle of the user.  It is sent to all running users except the\n     * one that has been removed. The user will not be completely removed until all receivers have\n     * handled the broadcast. You must hold\n     * {@link android.Manifest.permission#MANAGE_USERS} to receive this broadcast.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_USERS" ]
  }, {
    "name" : "ACTION_USER_SWITCHED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the system when the user switches. Carries an extra EXTRA_USER_HANDLE that has\n     * the userHandle of the user to become the current one. This is only sent to\n     * registered receivers, not manifest receivers.  It is sent to all running users.\n     * You must hold\n     * {@link android.Manifest.permission#MANAGE_USERS} to receive this broadcast.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_USERS" ]
  }, {
    "name" : "ACTION_USER_UNLOCKED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent when the credential-encrypted private storage has\n     * become unlocked for the target user. This is only sent to registered\n     * receivers, not manifest receivers.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_USER_INFO_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the system when a user's information changes. Carries an extra\n     * {@link #EXTRA_USER_HANDLE} to indicate which user's information changed.\n     * This is only sent to registered receivers, not manifest receivers. It is sent to all users.\n     * @hide\n     ",
    "links" : [ "#EXTRA_USER_HANDLE" ]
  }, {
    "name" : "ACTION_MANAGED_PROFILE_ADDED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the primary user when an associated managed profile is added (the profile\n     * was created and is ready to be used). Carries an extra {@link #EXTRA_USER} that specifies\n     * the UserHandle of the profile that was added. Only applications (for example Launchers)\n     * that need to display merged content across both primary and managed profiles need to\n     * worry about this broadcast. This is only sent to registered receivers,\n     * not manifest receivers.\n     ",
    "links" : [ "#EXTRA_USER" ]
  }, {
    "name" : "ACTION_MANAGED_PROFILE_REMOVED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the primary user when an associated managed profile is removed. Carries an\n     * extra {@link #EXTRA_USER} that specifies the UserHandle of the profile that was removed.\n     * Only applications (for example Launchers) that need to display merged content across both\n     * primary and managed profiles need to worry about this broadcast. This is only sent to\n     * registered receivers, not manifest receivers.\n     ",
    "links" : [ "#EXTRA_USER" ]
  }, {
    "name" : "ACTION_MANAGED_PROFILE_UNLOCKED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the primary user when the credential-encrypted private storage for\n     * an associated managed profile is unlocked. Carries an extra {@link #EXTRA_USER} that\n     * specifies the UserHandle of the profile that was unlocked. Only applications (for example\n     * Launchers) that need to display merged content across both primary and managed profiles\n     * need to worry about this broadcast. This is only sent to registered receivers,\n     * not manifest receivers.\n     ",
    "links" : [ "#EXTRA_USER" ]
  }, {
    "name" : "ACTION_MANAGED_PROFILE_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the primary user when an associated managed profile has become available.\n     * Currently this includes when the user disables quiet mode for the profile. Carries an extra\n     * {@link #EXTRA_USER} that specifies the UserHandle of the profile. When quiet mode is changed,\n     * this broadcast will carry a boolean extra {@link #EXTRA_QUIET_MODE} indicating the new state\n     * of quiet mode. This is only sent to registered receivers, not manifest receivers.\n     ",
    "links" : [ "#EXTRA_USER", "#EXTRA_QUIET_MODE" ]
  }, {
    "name" : "ACTION_MANAGED_PROFILE_UNAVAILABLE",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the primary user when an associated managed profile has become unavailable.\n     * Currently this includes when the user enables quiet mode for the profile. Carries an extra\n     * {@link #EXTRA_USER} that specifies the UserHandle of the profile. When quiet mode is changed,\n     * this broadcast will carry a boolean extra {@link #EXTRA_QUIET_MODE} indicating the new state\n     * of quiet mode. This is only sent to registered receivers, not manifest receivers.\n     ",
    "links" : [ "#EXTRA_USER", "#EXTRA_QUIET_MODE" ]
  }, {
    "name" : "ACTION_DEVICE_LOCKED_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent to the system user when the 'device locked' state changes for any user.\n     * Carries an extra {@link #EXTRA_USER_HANDLE} that specifies the ID of the user for which\n     * the device was locked or unlocked.\n     *\n     * This is only sent to registered receivers.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_USER_HANDLE" ]
  }, {
    "name" : "ACTION_QUICK_CLOCK",
    "type" : "String",
    "comment" : "\n     * Sent when the user taps on the clock widget in the system's \"quick settings\" area.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_BRIGHTNESS_DIALOG",
    "type" : "String",
    "comment" : "\n     * Activity Action: Shows the brightness setting dialog.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_GLOBAL_BUTTON",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A global button was pressed.  Includes a single\n     * extra field, {@link #EXTRA_KEY_EVENT}, containing the key event that\n     * caused the broadcast.\n     * @hide\n     ",
    "links" : [ "#EXTRA_KEY_EVENT" ]
  }, {
    "name" : "ACTION_MEDIA_RESOURCE_GRANTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent when media resource is granted.\n     * <p>\n     * {@link #EXTRA_PACKAGES} specifies the packages on the process holding the media resource\n     * granted.\n     * </p>\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     * <p class=\"note\">\n     * This requires {@link android.Manifest.permission#RECEIVE_MEDIA_RESOURCE_USAGE} permission.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_PACKAGES", "android.Manifest.permission#RECEIVE_MEDIA_RESOURCE_USAGE" ]
  }, {
    "name" : "ACTION_OVERLAY_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: An overlay package has changed. The data contains the\n     * name of the overlay package which has changed. This is broadcast on all\n     * changes to the OverlayInfo returned by {@link\n     * android.content.om.IOverlayManager#getOverlayInfo(String, int)}. The\n     * most common change is a state change that will change whether the\n     * overlay is enabled or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_OPEN_DOCUMENT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Allow the user to select and return one or more existing\n     * documents. When invoked, the system will display the various\n     * {@link DocumentsProvider} instances installed on the device, letting the\n     * user interactively navigate through them. These documents include local\n     * media, such as photos and video, and documents provided by installed\n     * cloud storage providers.\n     * <p>\n     * Each document is represented as a {@code content://} URI backed by a\n     * {@link DocumentsProvider}, which can be opened as a stream with\n     * {@link ContentResolver#openFileDescriptor(Uri, String)}, or queried for\n     * {@link android.provider.DocumentsContract.Document} metadata.\n     * <p>\n     * All selected documents are returned to the calling application with\n     * persistable read and write permission grants. If you want to maintain\n     * access to the documents across device reboots, you need to explicitly\n     * take the persistable permissions using\n     * {@link ContentResolver#takePersistableUriPermission(Uri, int)}.\n     * <p>\n     * Callers must indicate the acceptable document MIME types through\n     * {@link #setType(String)}. For example, to select photos, use\n     * {@code image/*}. If multiple disjoint MIME types are acceptable, define\n     * them in {@link #EXTRA_MIME_TYPES} and {@link #setType(String)} to\n     * {@literal *}/*.\n     * <p>\n     * If the caller can handle multiple returned items (the user performing\n     * multiple selection), then you can specify {@link #EXTRA_ALLOW_MULTIPLE}\n     * to indicate this.\n     * <p>\n     * Callers must include {@link #CATEGORY_OPENABLE} in the Intent to obtain\n     * URIs that can be opened with\n     * {@link ContentResolver#openFileDescriptor(Uri, String)}.\n     * <p>\n     * Callers can set a document URI through\n     * {@link DocumentsContract#EXTRA_INITIAL_URI} to indicate the initial\n     * location of documents navigator. System will do its best to launch the\n     * navigator in the specified document if it's a folder, or the folder that\n     * contains the specified document if not.\n     * <p>\n     * Output: The URI of the item that was picked, returned in\n     * {@link #getData()}. This must be a {@code content://} URI so that any\n     * receiver can access it. If multiple documents were selected, they are\n     * returned in {@link #getClipData()}.\n     *\n     * @see DocumentsContract\n     * @see #ACTION_OPEN_DOCUMENT_TREE\n     * @see #ACTION_CREATE_DOCUMENT\n     * @see #FLAG_GRANT_PERSISTABLE_URI_PERMISSION\n     ",
    "links" : [ "DocumentsProvider", "DocumentsProvider", "ContentResolver#openFileDescriptor", "android.provider.DocumentsContract.Document", "ContentResolver#takePersistableUriPermission", "#setType", "#EXTRA_MIME_TYPES", "#setType", "#EXTRA_ALLOW_MULTIPLE", "#CATEGORY_OPENABLE", "ContentResolver#openFileDescriptor", "DocumentsContract#EXTRA_INITIAL_URI", "#getData", "#getClipData" ]
  }, {
    "name" : "ACTION_CREATE_DOCUMENT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Allow the user to create a new document. When invoked,\n     * the system will display the various {@link DocumentsProvider} instances\n     * installed on the device, letting the user navigate through them. The\n     * returned document may be a newly created document with no content, or it\n     * may be an existing document with the requested MIME type.\n     * <p>\n     * Each document is represented as a {@code content://} URI backed by a\n     * {@link DocumentsProvider}, which can be opened as a stream with\n     * {@link ContentResolver#openFileDescriptor(Uri, String)}, or queried for\n     * {@link android.provider.DocumentsContract.Document} metadata.\n     * <p>\n     * Callers must indicate the concrete MIME type of the document being\n     * created by setting {@link #setType(String)}. This MIME type cannot be\n     * changed after the document is created.\n     * <p>\n     * Callers can provide an initial display name through {@link #EXTRA_TITLE},\n     * but the user may change this value before creating the file.\n     * <p>\n     * Callers must include {@link #CATEGORY_OPENABLE} in the Intent to obtain\n     * URIs that can be opened with\n     * {@link ContentResolver#openFileDescriptor(Uri, String)}.\n     * <p>\n     * Callers can set a document URI through\n     * {@link DocumentsContract#EXTRA_INITIAL_URI} to indicate the initial\n     * location of documents navigator. System will do its best to launch the\n     * navigator in the specified document if it's a folder, or the folder that\n     * contains the specified document if not.\n     * <p>\n     * Output: The URI of the item that was created. This must be a\n     * {@code content://} URI so that any receiver can access it.\n     *\n     * @see DocumentsContract\n     * @see #ACTION_OPEN_DOCUMENT\n     * @see #ACTION_OPEN_DOCUMENT_TREE\n     * @see #FLAG_GRANT_PERSISTABLE_URI_PERMISSION\n     ",
    "links" : [ "DocumentsProvider", "DocumentsProvider", "ContentResolver#openFileDescriptor", "android.provider.DocumentsContract.Document", "#setType", "#EXTRA_TITLE", "#CATEGORY_OPENABLE", "ContentResolver#openFileDescriptor", "DocumentsContract#EXTRA_INITIAL_URI" ]
  }, {
    "name" : "ACTION_OPEN_DOCUMENT_TREE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Allow the user to pick a directory subtree. When\n     * invoked, the system will display the various {@link DocumentsProvider}\n     * instances installed on the device, letting the user navigate through\n     * them. Apps can fully manage documents within the returned directory.\n     * <p>\n     * To gain access to descendant (child, grandchild, etc) documents, use\n     * {@link DocumentsContract#buildDocumentUriUsingTree(Uri, String)} and\n     * {@link DocumentsContract#buildChildDocumentsUriUsingTree(Uri, String)}\n     * with the returned URI.\n     * <p>\n     * Callers can set a document URI through\n     * {@link DocumentsContract#EXTRA_INITIAL_URI} to indicate the initial\n     * location of documents navigator. System will do its best to launch the\n     * navigator in the specified document if it's a folder, or the folder that\n     * contains the specified document if not.\n     * <p>\n     * Output: The URI representing the selected directory tree.\n     *\n     * @see DocumentsContract\n     ",
    "links" : [ "DocumentsProvider", "DocumentsContract#buildDocumentUriUsingTree", "DocumentsContract#buildChildDocumentsUriUsingTree", "DocumentsContract#EXTRA_INITIAL_URI" ]
  }, {
    "name" : "ACTION_TRANSLATE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Perform text translation.\n     * <p>\n     * Input: {@link #EXTRA_TEXT getCharSequence(EXTRA_TEXT)} is the text to translate.\n     * <p>\n     * Output: nothing.\n     ",
    "links" : [ "#EXTRA_TEXT" ]
  }, {
    "name" : "ACTION_DEFINE",
    "type" : "String",
    "comment" : "\n     * Activity Action: Define the meaning of the selected word(s).\n     * <p>\n     * Input: {@link #EXTRA_TEXT getCharSequence(EXTRA_TEXT)} is the text to define.\n     * <p>\n     * Output: nothing.\n     ",
    "links" : [ "#EXTRA_TEXT" ]
  }, {
    "name" : "ACTION_DYNAMIC_SENSOR_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: List of dynamic sensor is changed due to new sensor being connected or\n     * exisiting sensor being disconnected.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.</p>\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MASTER_CLEAR",
    "type" : "String",
    "comment" : "\n     * Deprecated - use ACTION_FACTORY_RESET instead.\n     * @hide\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MASTER_CLEAR_NOTIFICATION",
    "type" : "String",
    "comment" : "\n     * Broadcast intent sent by the RecoverySystem to inform listeners that a master clear (wipe)\n     * is about to be performed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FORCE_MASTER_CLEAR",
    "type" : "String",
    "comment" : "\n     * Boolean intent extra to be used with {@link #ACTION_MASTER_CLEAR} in order to force a factory\n     * reset even if {@link android.os.UserManager#DISALLOW_FACTORY_RESET} is set.\n     *\n     * <p>Deprecated - use {@link #EXTRA_FORCE_FACTORY_RESET} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_MASTER_CLEAR", "android.os.UserManager#DISALLOW_FACTORY_RESET", "#EXTRA_FORCE_FACTORY_RESET" ]
  }, {
    "name" : "ACTION_FACTORY_RESET",
    "type" : "String",
    "comment" : "\n     * A broadcast action to trigger a factory reset.\n     *\n     * <p>The sender must hold the {@link android.Manifest.permission#MASTER_CLEAR} permission. The\n     * reason for the factory reset should be specified as {@link #EXTRA_REASON}.\n     *\n     * <p>Not for use by third-party applications.\n     *\n     * @see #EXTRA_FORCE_FACTORY_RESET\n     *\n     * {@hide}\n     ",
    "links" : [ "android.Manifest.permission#MASTER_CLEAR", "#EXTRA_REASON" ]
  }, {
    "name" : "EXTRA_FORCE_FACTORY_RESET",
    "type" : "String",
    "comment" : "\n     * Boolean intent extra to be used with {@link #ACTION_MASTER_CLEAR} in order to force a factory\n     * reset even if {@link android.os.UserManager#DISALLOW_FACTORY_RESET} is set.\n     *\n     * <p>Not for use by third-party applications.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_MASTER_CLEAR", "android.os.UserManager#DISALLOW_FACTORY_RESET" ]
  }, {
    "name" : "ACTION_SETTING_RESTORED",
    "type" : "String",
    "comment" : "\n     * Broadcast action: report that a settings element is being restored from backup. The intent\n     * contains four extras: EXTRA_SETTING_NAME is a string naming the restored setting,\n     * EXTRA_SETTING_NEW_VALUE is the value being restored, EXTRA_SETTING_PREVIOUS_VALUE\n     * is the value of that settings entry prior to the restore operation, and\n     * EXTRA_SETTING_RESTORED_FROM_SDK_INT is the version of the SDK that the setting has been\n     * restored from (corresponds to {@link android.os.Build.VERSION#SDK_INT}). The first three\n     * values are represented as strings, the fourth one as int.\n     *\n     * <p>This broadcast is sent only for settings provider entries known to require special handling\n     * around restore time.  These entries are found in the BROADCAST_ON_RESTORE table within\n     * the provider's backup agent implementation.\n     *\n     * @see #EXTRA_SETTING_NAME\n     * @see #EXTRA_SETTING_PREVIOUS_VALUE\n     * @see #EXTRA_SETTING_NEW_VALUE\n     * @see #EXTRA_SETTING_RESTORED_FROM_SDK_INT\n     * {@hide}\n     ",
    "links" : [ "android.os.Build.VERSION#SDK_INT" ]
  }, {
    "name" : "EXTRA_SETTING_NAME",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SETTING_PREVIOUS_VALUE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SETTING_NEW_VALUE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SETTING_RESTORED_FROM_SDK_INT",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ACTION_PROCESS_TEXT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Process a piece of text.\n     * <p>Input: {@link #EXTRA_PROCESS_TEXT} contains the text to be processed.\n     * {@link #EXTRA_PROCESS_TEXT_READONLY} states if the resulting text will be read-only.</p>\n     * <p>Output: {@link #EXTRA_PROCESS_TEXT} contains the processed text.</p>\n     ",
    "links" : [ "#EXTRA_PROCESS_TEXT", "#EXTRA_PROCESS_TEXT_READONLY", "#EXTRA_PROCESS_TEXT" ]
  }, {
    "name" : "ACTION_SIM_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: The sim card state has changed.\n     * For more details see TelephonyIntents.ACTION_SIM_STATE_CHANGED. This is here\n     * because TelephonyIntents is an internal class.\n     * The intent will have following extras.</p>\n     * <p>\n     * @see #EXTRA_SIM_STATE\n     * @see #EXTRA_SIM_LOCKED_REASON\n     * @see #EXTRA_REBROADCAST_ON_UNLOCK\n     *\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED} or\n     * {@link #ACTION_SIM_APPLICATION_STATE_CHANGED}\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED", "#ACTION_SIM_APPLICATION_STATE_CHANGED" ]
  }, {
    "name" : "EXTRA_SIM_STATE",
    "type" : "String",
    "comment" : "\n     * The extra used with {@link #ACTION_SIM_STATE_CHANGED} for broadcasting SIM STATE.\n     * This will have one of the following intent values.\n     * @see #SIM_STATE_UNKNOWN\n     * @see #SIM_STATE_NOT_READY\n     * @see #SIM_STATE_ABSENT\n     * @see #SIM_STATE_PRESENT\n     * @see #SIM_STATE_CARD_IO_ERROR\n     * @see #SIM_STATE_CARD_RESTRICTED\n     * @see #SIM_STATE_LOCKED\n     * @see #SIM_STATE_READY\n     * @see #SIM_STATE_IMSI\n     * @see #SIM_STATE_LOADED\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_STATE_CHANGED", "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_UNKNOWN",
    "type" : "String",
    "comment" : "\n     * The intent value UNKNOWN represents the SIM state unknown\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_NOT_READY",
    "type" : "String",
    "comment" : "\n     * The intent value NOT_READY means that the SIM is not ready eg. radio is off or powering on\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_ABSENT",
    "type" : "String",
    "comment" : "\n     * The intent value ABSENT means the SIM card is missing\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_PRESENT",
    "type" : "String",
    "comment" : "\n     * The intent value PRESENT means the device has a SIM card inserted\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_CARD_IO_ERROR",
    "type" : "String",
    "comment" : "\n     * The intent value CARD_IO_ERROR means for three consecutive times there was SIM IO error\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_CARD_RESTRICTED",
    "type" : "String",
    "comment" : "\n     * The intent value CARD_RESTRICTED means card is present but not usable due to carrier\n     * restrictions\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_LOCKED",
    "type" : "String",
    "comment" : "\n     * The intent value LOCKED means the SIM is locked by PIN or by network\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_READY",
    "type" : "String",
    "comment" : "\n     * The intent value READY means the SIM is ready to be accessed\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_IMSI",
    "type" : "String",
    "comment" : "\n     * The intent value IMSI means the SIM IMSI is ready in property\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "SIM_STATE_LOADED",
    "type" : "String",
    "comment" : "\n     * The intent value LOADED means all SIM records, including IMSI, are loaded\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_CARD_STATE_CHANGED" ]
  }, {
    "name" : "EXTRA_SIM_LOCKED_REASON",
    "type" : "String",
    "comment" : "\n     * The extra used with {@link #ACTION_SIM_STATE_CHANGED} for broadcasting SIM STATE.\n     * This extra will have one of the following intent values.\n     * <p>\n     * @see #SIM_LOCKED_ON_PIN\n     * @see #SIM_LOCKED_ON_PUK\n     * @see #SIM_LOCKED_NETWORK\n     * @see #SIM_ABSENT_ON_PERM_DISABLED\n     *\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_APPLICATION_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_STATE_CHANGED", "#ACTION_SIM_APPLICATION_STATE_CHANGED" ]
  }, {
    "name" : "SIM_LOCKED_ON_PIN",
    "type" : "String",
    "comment" : "\n     * The intent value PIN means the SIM is locked on PIN1\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_APPLICATION_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_APPLICATION_STATE_CHANGED" ]
  }, {
    "name" : "SIM_LOCKED_ON_PUK",
    "type" : "String",
    "comment" : " PUK means ICC is locked on PUK1 ",
    "links" : [ ]
  }, {
    "name" : "SIM_LOCKED_NETWORK",
    "type" : "String",
    "comment" : "\n     * The intent value NETWORK means the SIM is locked on NETWORK PERSONALIZATION\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_APPLICATION_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_APPLICATION_STATE_CHANGED" ]
  }, {
    "name" : "SIM_ABSENT_ON_PERM_DISABLED",
    "type" : "String",
    "comment" : "\n     * The intent value PERM_DISABLED means SIM is permanently disabled due to puk fails\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_APPLICATION_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_APPLICATION_STATE_CHANGED" ]
  }, {
    "name" : "EXTRA_REBROADCAST_ON_UNLOCK",
    "type" : "String",
    "comment" : "\n     * The extra used with {@link #ACTION_SIM_STATE_CHANGED} for indicating whether this broadcast\n     * is a rebroadcast on unlock. Defaults to {@code false} if not specified.\n     *\n     * @hide\n     * @deprecated Use {@link #ACTION_SIM_CARD_STATE_CHANGED} or\n     * {@link #ACTION_SIM_APPLICATION_STATE_CHANGED}\n     ",
    "links" : [ "#ACTION_SIM_STATE_CHANGED", "#ACTION_SIM_CARD_STATE_CHANGED", "#ACTION_SIM_APPLICATION_STATE_CHANGED" ]
  }, {
    "name" : "ACTION_SERVICE_STATE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: indicate that the phone service state has changed.\n     * The intent will have the following extra values:</p>\n     * <p>\n     * @see #EXTRA_VOICE_REG_STATE\n     * @see #EXTRA_DATA_REG_STATE\n     * @see #EXTRA_VOICE_ROAMING_TYPE\n     * @see #EXTRA_DATA_ROAMING_TYPE\n     * @see #EXTRA_OPERATOR_ALPHA_LONG\n     * @see #EXTRA_OPERATOR_ALPHA_SHORT\n     * @see #EXTRA_OPERATOR_NUMERIC\n     * @see #EXTRA_DATA_OPERATOR_ALPHA_LONG\n     * @see #EXTRA_DATA_OPERATOR_ALPHA_SHORT\n     * @see #EXTRA_DATA_OPERATOR_NUMERIC\n     * @see #EXTRA_MANUAL\n     * @see #EXTRA_VOICE_RADIO_TECH\n     * @see #EXTRA_DATA_RADIO_TECH\n     * @see #EXTRA_CSS_INDICATOR\n     * @see #EXTRA_NETWORK_ID\n     * @see #EXTRA_SYSTEM_ID\n     * @see #EXTRA_CDMA_ROAMING_INDICATOR\n     * @see #EXTRA_CDMA_DEFAULT_ROAMING_INDICATOR\n     * @see #EXTRA_EMERGENCY_ONLY\n     * @see #EXTRA_IS_DATA_ROAMING_FROM_REGISTRATION\n     * @see #EXTRA_IS_USING_CARRIER_AGGREGATION\n     * @see #EXTRA_LTE_EARFCN_RSRP_BOOST\n     *\n     * <p class=\"note\">\n     * Requires the READ_PHONE_STATE permission.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable} and the helper\n     * functions {@code ServiceStateTable.getUriForSubscriptionIdAndField} and\n     * {@code ServiceStateTable.getUriForSubscriptionId} to subscribe to changes to the ServiceState\n     * for a given subscription id and field with a ContentObserver or using JobScheduler.\n     ",
    "links" : [ "android.provider.Telephony.ServiceStateTable" ]
  }, {
    "name" : "ACTION_LOAD_DATA",
    "type" : "String",
    "comment" : "\n     * Used by {@link services.core.java.com.android.server.pm.DataLoaderManagerService}\n     * for querying Data Loader Service providers. Data loader service providers register this\n     * intent filter in their manifests, so that they can be looked up and bound to by\n     * {@code DataLoaderManagerService}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     *\n     * Data loader service providers must be privileged apps.\n     * See {@link com.android.server.pm.PackageManagerShellCommandDataLoader} as an example of such\n     * data loader service provider.\n     *\n     * @hide\n     ",
    "links" : [ "services.core.java.com.android.server.pm.DataLoaderManagerService", "com.android.server.pm.PackageManagerShellCommandDataLoader" ]
  }, {
    "name" : "EXTRA_VOICE_REG_STATE",
    "type" : "String",
    "comment" : "\n     * An int extra used with {@link #ACTION_SERVICE_STATE} which indicates voice registration\n     * state.\n     * @see android.telephony.ServiceState#STATE_EMERGENCY_ONLY\n     * @see android.telephony.ServiceState#STATE_IN_SERVICE\n     * @see android.telephony.ServiceState#STATE_OUT_OF_SERVICE\n     * @see android.telephony.ServiceState#STATE_POWER_OFF\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#VOICE_REG_STATE}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#VOICE_REG_STATE" ]
  }, {
    "name" : "EXTRA_DATA_REG_STATE",
    "type" : "String",
    "comment" : "\n     * An int extra used with {@link #ACTION_SERVICE_STATE} which indicates data registration state.\n     * @see android.telephony.ServiceState#STATE_EMERGENCY_ONLY\n     * @see android.telephony.ServiceState#STATE_IN_SERVICE\n     * @see android.telephony.ServiceState#STATE_OUT_OF_SERVICE\n     * @see android.telephony.ServiceState#STATE_POWER_OFF\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#DATA_REG_STATE}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#DATA_REG_STATE" ]
  }, {
    "name" : "EXTRA_VOICE_ROAMING_TYPE",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} which indicates the voice roaming\n     * type.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#VOICE_ROAMING_TYPE}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#VOICE_ROAMING_TYPE" ]
  }, {
    "name" : "EXTRA_DATA_ROAMING_TYPE",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} which indicates the data roaming\n     * type.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#DATA_ROAMING_TYPE}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#DATA_ROAMING_TYPE" ]
  }, {
    "name" : "EXTRA_OPERATOR_ALPHA_LONG",
    "type" : "String",
    "comment" : "\n     * A string extra used with {@link #ACTION_SERVICE_STATE} which represents the current\n     * registered voice operator name in long alphanumeric format.\n     * {@code null} if the operator name is not known or unregistered.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#VOICE_OPERATOR_ALPHA_LONG}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#VOICE_OPERATOR_ALPHA_LONG" ]
  }, {
    "name" : "EXTRA_OPERATOR_ALPHA_SHORT",
    "type" : "String",
    "comment" : "\n     * A string extra used with {@link #ACTION_SERVICE_STATE} which represents the current\n     * registered voice operator name in short alphanumeric format.\n     * {@code null} if the operator name is not known or unregistered.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#VOICE_OPERATOR_ALPHA_SHORT}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#VOICE_OPERATOR_ALPHA_SHORT" ]
  }, {
    "name" : "EXTRA_OPERATOR_NUMERIC",
    "type" : "String",
    "comment" : "\n     * A string extra used with {@link #ACTION_SERVICE_STATE} containing the MCC\n     * (Mobile Country Code, 3 digits) and MNC (Mobile Network code, 2-3 digits) for the mobile\n     * network.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#VOICE_OPERATOR_NUMERIC}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#VOICE_OPERATOR_NUMERIC" ]
  }, {
    "name" : "EXTRA_DATA_OPERATOR_ALPHA_LONG",
    "type" : "String",
    "comment" : "\n     * A string extra used with {@link #ACTION_SERVICE_STATE} which represents the current\n     * registered data operator name in long alphanumeric format.\n     * {@code null} if the operator name is not known or unregistered.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#DATA_OPERATOR_ALPHA_LONG}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#DATA_OPERATOR_ALPHA_LONG" ]
  }, {
    "name" : "EXTRA_DATA_OPERATOR_ALPHA_SHORT",
    "type" : "String",
    "comment" : "\n     * A string extra used with {@link #ACTION_SERVICE_STATE} which represents the current\n     * registered data operator name in short alphanumeric format.\n     * {@code null} if the operator name is not known or unregistered.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#DATA_OPERATOR_ALPHA_SHORT}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#DATA_OPERATOR_ALPHA_SHORT" ]
  }, {
    "name" : "EXTRA_DATA_OPERATOR_NUMERIC",
    "type" : "String",
    "comment" : "\n     * A string extra used with {@link #ACTION_SERVICE_STATE} containing the MCC\n     * (Mobile Country Code, 3 digits) and MNC (Mobile Network code, 2-3 digits) for the\n     * data operator.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#DATA_OPERATOR_NUMERIC}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#DATA_OPERATOR_NUMERIC" ]
  }, {
    "name" : "EXTRA_MANUAL",
    "type" : "String",
    "comment" : "\n     * A boolean extra used with {@link #ACTION_SERVICE_STATE} which indicates whether the current\n     * network selection mode is manual.\n     * Will be {@code true} if manual mode, {@code false} if automatic mode.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#IS_MANUAL_NETWORK_SELECTION}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#IS_MANUAL_NETWORK_SELECTION" ]
  }, {
    "name" : "EXTRA_VOICE_RADIO_TECH",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} which represents the current voice\n     * radio technology.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#RIL_VOICE_RADIO_TECHNOLOGY}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#RIL_VOICE_RADIO_TECHNOLOGY" ]
  }, {
    "name" : "EXTRA_DATA_RADIO_TECH",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} which represents the current data\n     * radio technology.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#RIL_DATA_RADIO_TECHNOLOGY}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#RIL_DATA_RADIO_TECHNOLOGY" ]
  }, {
    "name" : "EXTRA_CSS_INDICATOR",
    "type" : "String",
    "comment" : "\n     * A boolean extra used with {@link #ACTION_SERVICE_STATE} which represents concurrent service\n     * support on CDMA network.\n     * Will be {@code true} if support, {@code false} otherwise.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#CSS_INDICATOR}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#CSS_INDICATOR" ]
  }, {
    "name" : "EXTRA_NETWORK_ID",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} which represents the CDMA network\n     * id. {@code Integer.MAX_VALUE} if unknown.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#NETWORK_ID}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#NETWORK_ID" ]
  }, {
    "name" : "EXTRA_SYSTEM_ID",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} which represents the CDMA system id.\n     * {@code Integer.MAX_VALUE} if unknown.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#SYSTEM_ID}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#SYSTEM_ID" ]
  }, {
    "name" : "EXTRA_CDMA_ROAMING_INDICATOR",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} represents the TSB-58 roaming\n     * indicator if registered on a CDMA or EVDO system or {@code -1} if not.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#CDMA_ROAMING_INDICATOR}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#CDMA_ROAMING_INDICATOR" ]
  }, {
    "name" : "EXTRA_CDMA_DEFAULT_ROAMING_INDICATOR",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} represents the default roaming\n     * indicator from the PRL if registered on a CDMA or EVDO system {@code -1} if not.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#CDMA_DEFAULT_ROAMING_INDICATOR}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#CDMA_DEFAULT_ROAMING_INDICATOR" ]
  }, {
    "name" : "EXTRA_EMERGENCY_ONLY",
    "type" : "String",
    "comment" : "\n     * A boolean extra used with {@link #ACTION_SERVICE_STATE} which indicates if under emergency\n     * only mode.\n     * {@code true} if in emergency only mode, {@code false} otherwise.\n     * @hide\n     * @removed\n     * @deprecated Use {@link android.provider.Telephony.ServiceStateTable#IS_EMERGENCY_ONLY}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#IS_EMERGENCY_ONLY" ]
  }, {
    "name" : "EXTRA_IS_DATA_ROAMING_FROM_REGISTRATION",
    "type" : "String",
    "comment" : "\n     * A boolean extra used with {@link #ACTION_SERVICE_STATE} which indicates whether data network\n     * registration state is roaming.\n     * {@code true} if registration indicates roaming, {@code false} otherwise\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#IS_DATA_ROAMING_FROM_REGISTRATION}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#IS_DATA_ROAMING_FROM_REGISTRATION" ]
  }, {
    "name" : "EXTRA_IS_USING_CARRIER_AGGREGATION",
    "type" : "String",
    "comment" : "\n     * A boolean extra used with {@link #ACTION_SERVICE_STATE} which indicates if carrier\n     * aggregation is in use.\n     * {@code true} if carrier aggregation is in use, {@code false} otherwise.\n     * @hide\n     * @removed\n     * @deprecated Use\n     * {@link android.provider.Telephony.ServiceStateTable#IS_USING_CARRIER_AGGREGATION}.\n     ",
    "links" : [ "#ACTION_SERVICE_STATE", "android.provider.Telephony.ServiceStateTable#IS_USING_CARRIER_AGGREGATION" ]
  }, {
    "name" : "EXTRA_LTE_EARFCN_RSRP_BOOST",
    "type" : "String",
    "comment" : "\n     * An integer extra used with {@link #ACTION_SERVICE_STATE} representing the offset which\n     * is reduced from the rsrp threshold while calculating signal strength level.\n     * @hide\n     * @removed\n     ",
    "links" : [ "#ACTION_SERVICE_STATE" ]
  }, {
    "name" : "EXTRA_PROCESS_TEXT",
    "type" : "String",
    "comment" : "\n     * The name of the extra used to define the text to be processed, as a\n     * CharSequence. Note that this may be a styled CharSequence, so you must use\n     * {@link Bundle#getCharSequence(String) Bundle.getCharSequence()} to retrieve it.\n     ",
    "links" : [ "Bundle#getCharSequence" ]
  }, {
    "name" : "EXTRA_PROCESS_TEXT_READONLY",
    "type" : "String",
    "comment" : "\n     * The name of the boolean extra used to define if the processed text will be used as read-only.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_THERMAL_EVENT",
    "type" : "String",
    "comment" : "\n     * Broadcast action: reports when a new thermal event has been reached. When the device\n     * is reaching its maximum temperatue, the thermal level reported\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_THERMAL_STATE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_THERMAL_STATE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Thermal state when the device is normal. This state is sent in the\n     * {@link #ACTION_THERMAL_EVENT} broadcast as {@link #EXTRA_THERMAL_STATE}.\n     * {@hide}\n     ",
    "links" : [ "#ACTION_THERMAL_EVENT", "#EXTRA_THERMAL_STATE" ]
  }, {
    "name" : "EXTRA_THERMAL_STATE_WARNING",
    "type" : "int",
    "comment" : "\n     * Thermal state where the device is approaching its maximum threshold. This state is sent in\n     * the {@link #ACTION_THERMAL_EVENT} broadcast as {@link #EXTRA_THERMAL_STATE}.\n     * {@hide}\n     ",
    "links" : [ "#ACTION_THERMAL_EVENT", "#EXTRA_THERMAL_STATE" ]
  }, {
    "name" : "EXTRA_THERMAL_STATE_EXCEEDED",
    "type" : "int",
    "comment" : "\n     * Thermal state where the device has reached its maximum threshold. This state is sent in the\n     * {@link #ACTION_THERMAL_EVENT} broadcast as {@link #EXTRA_THERMAL_STATE}.\n     * {@hide}\n     ",
    "links" : [ "#ACTION_THERMAL_EVENT", "#EXTRA_THERMAL_STATE" ]
  }, {
    "name" : "ACTION_DOCK_IDLE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates the dock in idle state while device is docked.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DOCK_ACTIVE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates the dock in active state while device is docked.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent\n     * by the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DEVICE_CUSTOMIZATION_READY",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates that a new device customization has been\n     * downloaded and applied (packages installed, runtime resource overlays\n     * enabled, xml files copied, ...), and that it is time for components that\n     * need to for example clear their caches to do so now.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VIEW_LOCUS",
    "type" : "String",
    "comment" : "\n     * Activity Action: Display an activity state associated with an unique {@link LocusId}.\n     *\n     * <p>For example, a chat app could use the context to resume a conversation between 2 users.\n     *\n     * <p>Input: {@link #EXTRA_LOCUS_ID} specifies the unique identifier of the locus in the\n     * app domain. Should be stable across reboots and backup / restore.\n     * <p>Output: nothing.\n     ",
    "links" : [ "LocusId", "#EXTRA_LOCUS_ID" ]
  }, {
    "name" : "ACTION_PACKAGE_NEEDS_INTEGRITY_VERIFICATION",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Sent to the integrity component when a package\n     * needs to be verified. The data contains the package URI along with other relevant\n     * information.\n     *\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_DEFAULT",
    "type" : "String",
    "comment" : "\n     * Set if the activity should be an option for the default action\n     * (center press) to perform on a piece of data.  Setting this will\n     * hide from the user any activities without it set when performing an\n     * action on some data.  Note that this is normally -not- set in the\n     * Intent when initiating an action -- it is for use in intent filters\n     * specified in packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_BROWSABLE",
    "type" : "String",
    "comment" : "\n     * Activities that can be safely invoked from a browser must support this\n     * category.  For example, if the user is viewing a web page or an e-mail\n     * and clicks on a link in the text, the Intent generated execute that\n     * link will require the BROWSABLE category, so that only activities\n     * supporting this category will be considered as possible actions.  By\n     * supporting this category, you are promising that there is nothing\n     * damaging (without user intervention) that can happen by invoking any\n     * matching Intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_VOICE",
    "type" : "String",
    "comment" : "\n     * Categories for activities that can participate in voice interaction.\n     * An activity that supports this category must be prepared to run with\n     * no UI shown at all (though in some case it may have a UI shown), and\n     * rely on {@link android.app.VoiceInteractor} to interact with the user.\n     ",
    "links" : [ "android.app.VoiceInteractor" ]
  }, {
    "name" : "CATEGORY_ALTERNATIVE",
    "type" : "String",
    "comment" : "\n     * Set if the activity should be considered as an alternative action to\n     * the data the user is currently viewing.  See also\n     * {@link #CATEGORY_SELECTED_ALTERNATIVE} for an alternative action that\n     * applies to the selection in a list of items.\n     *\n     * <p>Supporting this category means that you would like your activity to be\n     * displayed in the set of alternative things the user can do, usually as\n     * part of the current activity's options menu.  You will usually want to\n     * include a specific label in the &lt;intent-filter&gt; of this action\n     * describing to the user what it does.\n     *\n     * <p>The action of IntentFilter with this category is important in that it\n     * describes the specific action the target will perform.  This generally\n     * should not be a generic action (such as {@link #ACTION_VIEW}, but rather\n     * a specific name such as \"com.android.camera.action.CROP.  Only one\n     * alternative of any particular action will be shown to the user, so using\n     * a specific action like this makes sure that your alternative will be\n     * displayed while also allowing other applications to provide their own\n     * overrides of that particular action.\n     ",
    "links" : [ "#CATEGORY_SELECTED_ALTERNATIVE", "#ACTION_VIEW" ]
  }, {
    "name" : "CATEGORY_SELECTED_ALTERNATIVE",
    "type" : "String",
    "comment" : "\n     * Set if the activity should be considered as an alternative selection\n     * action to the data the user has currently selected.  This is like\n     * {@link #CATEGORY_ALTERNATIVE}, but is used in activities showing a list\n     * of items from which the user can select, giving them alternatives to the\n     * default action that will be performed on it.\n     ",
    "links" : [ "#CATEGORY_ALTERNATIVE" ]
  }, {
    "name" : "CATEGORY_TAB",
    "type" : "String",
    "comment" : "\n     * Intended to be used as a tab inside of a containing TabActivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_LAUNCHER",
    "type" : "String",
    "comment" : "\n     * Should be displayed in the top-level launcher.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_LEANBACK_LAUNCHER",
    "type" : "String",
    "comment" : "\n     * Indicates an activity optimized for Leanback mode, and that should\n     * be displayed in the Leanback launcher.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CAR_LAUNCHER",
    "type" : "String",
    "comment" : "\n     * Indicates the preferred entry-point activity when an application is launched from a Car\n     * launcher. If not present, Car launcher can optionally use {@link #CATEGORY_LAUNCHER} as a\n     * fallback, or exclude the application entirely.\n     * @hide\n     ",
    "links" : [ "#CATEGORY_LAUNCHER" ]
  }, {
    "name" : "CATEGORY_LEANBACK_SETTINGS",
    "type" : "String",
    "comment" : "\n     * Indicates a Leanback settings activity to be displayed in the Leanback launcher.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_INFO",
    "type" : "String",
    "comment" : "\n     * Provides information about the package it is in; typically used if\n     * a package does not contain a {@link #CATEGORY_LAUNCHER} to provide\n     * a front-door to the user without having to be shown in the all apps list.\n     ",
    "links" : [ "#CATEGORY_LAUNCHER" ]
  }, {
    "name" : "CATEGORY_HOME",
    "type" : "String",
    "comment" : "\n     * This is the home activity, that is the first activity that is displayed\n     * when the device boots.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_HOME_MAIN",
    "type" : "String",
    "comment" : "\n     * This is the home activity that is displayed when the device is finished setting up and ready\n     * for use.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SECONDARY_HOME",
    "type" : "String",
    "comment" : "\n     * The home activity shown on secondary displays that support showing home activities.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SETUP_WIZARD",
    "type" : "String",
    "comment" : "\n     * This is the setup wizard activity, that is the first activity that is displayed\n     * when the user sets up the device for the first time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_LAUNCHER_APP",
    "type" : "String",
    "comment" : "\n     * This is the home activity, that is the activity that serves as the launcher app\n     * from there the user can start other apps. Often components with lower/higher\n     * priority intent filters handle the home intent, for example SetupWizard, to\n     * setup the device and we need to be able to distinguish the home app from these\n     * setup helpers.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_PREFERENCE",
    "type" : "String",
    "comment" : "\n     * This activity is a preference panel.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_DEVELOPMENT_PREFERENCE",
    "type" : "String",
    "comment" : "\n     * This activity is a development preference panel.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_EMBED",
    "type" : "String",
    "comment" : "\n     * Capable of running inside a parent activity container.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_APP_MARKET",
    "type" : "String",
    "comment" : "\n     * This activity allows the user to browse and download new applications.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_MONKEY",
    "type" : "String",
    "comment" : "\n     * This activity may be exercised by the monkey or other automated test tools.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_TEST",
    "type" : "String",
    "comment" : "\n     * To be used as a test (not part of the normal user experience).\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_UNIT_TEST",
    "type" : "String",
    "comment" : "\n     * To be used as a unit test (run through the Test Harness).\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SAMPLE_CODE",
    "type" : "String",
    "comment" : "\n     * To be used as a sample code example (not part of the normal user\n     * experience).\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_OPENABLE",
    "type" : "String",
    "comment" : "\n     * Used to indicate that an intent only wants URIs that can be opened with\n     * {@link ContentResolver#openFileDescriptor(Uri, String)}. Openable URIs\n     * must support at least the columns defined in {@link OpenableColumns} when\n     * queried.\n     *\n     * @see #ACTION_GET_CONTENT\n     * @see #ACTION_OPEN_DOCUMENT\n     * @see #ACTION_CREATE_DOCUMENT\n     ",
    "links" : [ "ContentResolver#openFileDescriptor", "OpenableColumns" ]
  }, {
    "name" : "CATEGORY_TYPED_OPENABLE",
    "type" : "String",
    "comment" : "\n     * Used to indicate that an intent filter can accept files which are not necessarily\n     * openable by {@link ContentResolver#openFileDescriptor(Uri, String)}, but\n     * at least streamable via\n     * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}\n     * using one of the stream types exposed via\n     * {@link ContentResolver#getStreamTypes(Uri, String)}.\n     *\n     * @see #ACTION_SEND\n     * @see #ACTION_SEND_MULTIPLE\n     ",
    "links" : [ "ContentResolver#openFileDescriptor", "ContentResolver#openTypedAssetFileDescriptor", "ContentResolver#getStreamTypes" ]
  }, {
    "name" : "CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST",
    "type" : "String",
    "comment" : "\n     * To be used as code under test for framework instrumentation tests.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_CAR_DOCK",
    "type" : "String",
    "comment" : "\n     * An activity to run when device is inserted into a car dock.\n     * Used with {@link #ACTION_MAIN} to launch an activity.  For more\n     * information, see {@link android.app.UiModeManager}.\n     ",
    "links" : [ "#ACTION_MAIN", "android.app.UiModeManager" ]
  }, {
    "name" : "CATEGORY_DESK_DOCK",
    "type" : "String",
    "comment" : "\n     * An activity to run when device is inserted into a car dock.\n     * Used with {@link #ACTION_MAIN} to launch an activity.  For more\n     * information, see {@link android.app.UiModeManager}.\n     ",
    "links" : [ "#ACTION_MAIN", "android.app.UiModeManager" ]
  }, {
    "name" : "CATEGORY_LE_DESK_DOCK",
    "type" : "String",
    "comment" : "\n     * An activity to run when device is inserted into a analog (low end) dock.\n     * Used with {@link #ACTION_MAIN} to launch an activity.  For more\n     * information, see {@link android.app.UiModeManager}.\n     ",
    "links" : [ "#ACTION_MAIN", "android.app.UiModeManager" ]
  }, {
    "name" : "CATEGORY_HE_DESK_DOCK",
    "type" : "String",
    "comment" : "\n     * An activity to run when device is inserted into a digital (high end) dock.\n     * Used with {@link #ACTION_MAIN} to launch an activity.  For more\n     * information, see {@link android.app.UiModeManager}.\n     ",
    "links" : [ "#ACTION_MAIN", "android.app.UiModeManager" ]
  }, {
    "name" : "CATEGORY_CAR_MODE",
    "type" : "String",
    "comment" : "\n     * Used to indicate that the activity can be used in a car environment.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_VR_HOME",
    "type" : "String",
    "comment" : "\n     * An activity to use for the launcher when the device is placed in a VR Headset viewer.\n     * Used with {@link #ACTION_MAIN} to launch an activity.  For more\n     * information, see {@link android.app.UiModeManager}.\n     ",
    "links" : [ "#ACTION_MAIN", "android.app.UiModeManager" ]
  }, {
    "name" : "CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET",
    "type" : "String",
    "comment" : "\n     * The accessibility shortcut is a global gesture for users with disabilities to trigger an\n     * important for them accessibility feature to help developers determine whether they want to\n     * make their activity a shortcut target.\n     * <p>\n     * An activity of interest to users with accessibility needs may request to be the target of\n     * the accessibility shortcut. It handles intent {@link #ACTION_MAIN} with this category,\n     * which will be dispatched by the system when the user activates the shortcut when it is\n     * configured to point at this target.\n     * </p>\n     * <p>\n     * An activity declared itself to be a target of the shortcut in AndroidManifest.xml. It must\n     * also do two things:\n     * <ul>\n     *     <ol>\n     *         Specify that it handles the <code>android.intent.action.MAIN</code>\n     *         {@link android.content.Intent}\n     *         with category <code>android.intent.category.ACCESSIBILITY_SHORTCUT_TARGET</code>.\n     *     </ol>\n     *     <ol>\n     *         Provide a meta-data entry <code>android.accessibilityshortcut.target</code> in the\n     *         manifest when declaring the activity.\n     *     </ol>\n     * </ul>\n     * If either of these items is missing, the system will ignore the accessibility shortcut\n     * target. Following is an example declaration:\n     * </p>\n     * <pre>\n     * &lt;activity android:name=\".MainActivity\"\n     * . . .\n     *   &lt;intent-filter&gt;\n     *       &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n     *       &lt;category android:name=\"android.intent.category.ACCESSIBILITY_SHORTCUT_TARGET\" /&gt;\n     *   &lt;/intent-filter&gt;\n     *   &lt;meta-data android:name=\"android.accessibilityshortcut.target\"\n     *                   android:resource=\"@xml/accessibilityshortcut\" /&gt;\n     * &lt;/activity&gt;\n     * </pre>\n     * <p> This is a sample XML file configuring a accessibility shortcut target: </p>\n     * <pre>\n     * &lt;accessibility-shortcut-target\n     *     android:description=\"@string/shortcut_target_description\"\n     *     android:summary=\"@string/shortcut_target_summary\"\n     *     android:animatedImageDrawable=\"@drawable/shortcut_target_animated_image\"\n     *     android:htmlDescription=\"@string/shortcut_target_html_description\"\n     *     android:settingsActivity=\"com.example.android.shortcut.target.SettingsActivity\" /&gt;\n     * </pre>\n     * <p>\n     * Both description and summary are necessary. The system will ignore the accessibility\n     * shortcut target if they are missing. The animated image and html description are supported\n     * to help users understand how to use the shortcut target. The settings activity is a\n     * component name that allows the user to modify the settings for this accessibility shortcut\n     * target.\n     * </p>\n     ",
    "links" : [ "#ACTION_MAIN", "android.content.Intent" ]
  }, {
    "name" : "CATEGORY_APP_BROWSER",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the browser application.\n     * The activity should be able to browse the Internet.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_CALCULATOR",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the calculator application.\n     * The activity should be able to perform standard arithmetic operations.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_CALENDAR",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the calendar application.\n     * The activity should be able to view and manipulate calendar entries.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_CONTACTS",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the contacts application.\n     * The activity should be able to view and manipulate address book entries.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_EMAIL",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the email application.\n     * The activity should be able to send and receive email.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_GALLERY",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the gallery application.\n     * The activity should be able to view and manipulate image and video files\n     * stored on the device.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_MAPS",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the maps application.\n     * The activity should be able to show the user's current location and surroundings.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_MESSAGING",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the messaging application.\n     * The activity should be able to send and receive text messages.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_MUSIC",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the music application.\n     * The activity should be able to play, browse, or manipulate music files\n     * stored on the device.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "CATEGORY_APP_FILES",
    "type" : "String",
    "comment" : "\n     * Used with {@link #ACTION_MAIN} to launch the files application.\n     * The activity should be able to browse and manage files stored on the device.\n     * <p>NOTE: This should not be used as the primary key of an Intent,\n     * since it will not result in the app launching with the correct\n     * action and category.  Instead, use this with\n     * {@link #makeMainSelectorActivity(String, String)} to generate a main\n     * Intent with this category in the selector.</p>\n     ",
    "links" : [ "#ACTION_MAIN", "#makeMainSelectorActivity" ]
  }, {
    "name" : "EXTRA_TEMPLATE",
    "type" : "String",
    "comment" : "\n     * The initial data to place in a newly created record.  Use with\n     * {@link #ACTION_INSERT}.  The data here is a Map containing the same\n     * fields as would be given to the underlying ContentProvider.insert()\n     * call.\n     ",
    "links" : [ "#ACTION_INSERT" ]
  }, {
    "name" : "EXTRA_TEXT",
    "type" : "String",
    "comment" : "\n     * A constant CharSequence that is associated with the Intent, used with\n     * {@link #ACTION_SEND} to supply the literal data to be sent.  Note that\n     * this may be a styled CharSequence, so you must use\n     * {@link Bundle#getCharSequence(String) Bundle.getCharSequence()} to\n     * retrieve it.\n     ",
    "links" : [ "#ACTION_SEND", "Bundle#getCharSequence" ]
  }, {
    "name" : "EXTRA_HTML_TEXT",
    "type" : "String",
    "comment" : "\n     * A constant String that is associated with the Intent, used with\n     * {@link #ACTION_SEND} to supply an alternative to {@link #EXTRA_TEXT}\n     * as HTML formatted text.  Note that you <em>must</em> also supply\n     * {@link #EXTRA_TEXT}.\n     ",
    "links" : [ "#ACTION_SEND", "#EXTRA_TEXT", "#EXTRA_TEXT" ]
  }, {
    "name" : "EXTRA_STREAM",
    "type" : "String",
    "comment" : "\n     * A content: URI holding a stream of data associated with the Intent,\n     * used with {@link #ACTION_SEND} to supply the data being sent.\n     ",
    "links" : [ "#ACTION_SEND" ]
  }, {
    "name" : "EXTRA_EMAIL",
    "type" : "String",
    "comment" : "\n     * A String[] holding e-mail addresses that should be delivered to.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CC",
    "type" : "String",
    "comment" : "\n     * A String[] holding e-mail addresses that should be carbon copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BCC",
    "type" : "String",
    "comment" : "\n     * A String[] holding e-mail addresses that should be blind carbon copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SUBJECT",
    "type" : "String",
    "comment" : "\n     * A constant string holding the desired subject line of a message.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INTENT",
    "type" : "String",
    "comment" : "\n     * An Intent describing the choices you would like shown with\n     * {@link #ACTION_PICK_ACTIVITY} or {@link #ACTION_CHOOSER}.\n     ",
    "links" : [ "#ACTION_PICK_ACTIVITY", "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_USER_ID",
    "type" : "String",
    "comment" : "\n     * An int representing the user id to be used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TASK_ID",
    "type" : "String",
    "comment" : "\n     * An int representing the task id to be retrieved. This is used when a launch from recents is\n     * intercepted by another action such as credentials confirmation to remember which task should\n     * be resumed when complete.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ALTERNATE_INTENTS",
    "type" : "String",
    "comment" : "\n     * An Intent[] describing additional, alternate choices you would like shown with\n     * {@link #ACTION_CHOOSER}.\n     *\n     * <p>An app may be capable of providing several different payload types to complete a\n     * user's intended action. For example, an app invoking {@link #ACTION_SEND} to share photos\n     * with another app may use EXTRA_ALTERNATE_INTENTS to have the chooser transparently offer\n     * several different supported sending mechanisms for sharing, such as the actual \"image/*\"\n     * photo data or a hosted link where the photos can be viewed.</p>\n     *\n     * <p>The intent present in {@link #EXTRA_INTENT} will be treated as the\n     * first/primary/preferred intent in the set. Additional intents specified in\n     * this extra are ordered; by default intents that appear earlier in the array will be\n     * preferred over intents that appear later in the array as matches for the same\n     * target component. To alter this preference, a calling app may also supply\n     * {@link #EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER}.</p>\n     ",
    "links" : [ "#ACTION_CHOOSER", "#ACTION_SEND", "#EXTRA_INTENT", "#EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER" ]
  }, {
    "name" : "EXTRA_EXCLUDE_COMPONENTS",
    "type" : "String",
    "comment" : "\n     * A {@link ComponentName ComponentName[]} describing components that should be filtered out\n     * and omitted from a list of components presented to the user.\n     *\n     * <p>When used with {@link #ACTION_CHOOSER}, the chooser will omit any of the components\n     * in this array if it otherwise would have shown them. Useful for omitting specific targets\n     * from your own package or other apps from your organization if the idea of sending to those\n     * targets would be redundant with other app functionality. Filtered components will not\n     * be able to present targets from an associated <code>ChooserTargetService</code>.</p>\n     ",
    "links" : [ "ComponentName", "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_CHOOSER_TARGETS",
    "type" : "String",
    "comment" : "\n     * A {@link android.service.chooser.ChooserTarget ChooserTarget[]} for {@link #ACTION_CHOOSER}\n     * describing additional high-priority deep-link targets for the chooser to present to the user.\n     *\n     * <p>Targets provided in this way will be presented inline with all other targets provided\n     * by services from other apps. They will be prioritized before other service targets, but\n     * after those targets provided by sources that the user has manually pinned to the front.</p>\n     *\n     * @see #ACTION_CHOOSER\n     ",
    "links" : [ "android.service.chooser.ChooserTarget", "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER",
    "type" : "String",
    "comment" : "\n     * An {@link IntentSender} for an Activity that will be invoked when the user makes a selection\n     * from the chooser activity presented by {@link #ACTION_CHOOSER}.\n     *\n     * <p>An app preparing an action for another app to complete may wish to allow the user to\n     * disambiguate between several options for completing the action based on the chosen target\n     * or otherwise refine the action before it is invoked.\n     * </p>\n     *\n     * <p>When sent, this IntentSender may be filled in with the following extras:</p>\n     * <ul>\n     *     <li>{@link #EXTRA_INTENT} The first intent that matched the user's chosen target</li>\n     *     <li>{@link #EXTRA_ALTERNATE_INTENTS} Any additional intents that also matched the user's\n     *     chosen target beyond the first</li>\n     *     <li>{@link #EXTRA_RESULT_RECEIVER} A {@link ResultReceiver} that the refinement activity\n     *     should fill in and send once the disambiguation is complete</li>\n     * </ul>\n     ",
    "links" : [ "IntentSender", "#ACTION_CHOOSER", "#EXTRA_INTENT", "#EXTRA_ALTERNATE_INTENTS", "#EXTRA_RESULT_RECEIVER", "ResultReceiver" ]
  }, {
    "name" : "EXTRA_CONTENT_ANNOTATIONS",
    "type" : "String",
    "comment" : "\n     * An {@code ArrayList} of {@code String} annotations describing content for\n     * {@link #ACTION_CHOOSER}.\n     *\n     * <p>If {@link #EXTRA_CONTENT_ANNOTATIONS} is present in an intent used to start a\n     * {@link #ACTION_CHOOSER} activity, the first three annotations will be used to rank apps.</p>\n     *\n     * <p>Annotations should describe the major components or topics of the content. It is up to\n     * apps initiating {@link #ACTION_CHOOSER} to learn and add annotations. Annotations should be\n     * learned in advance, e.g., when creating or saving content, to avoid increasing latency to\n     * start {@link #ACTION_CHOOSER}. Names of customized annotations should not contain the colon\n     * character. Performance on customized annotations can suffer, if they are rarely used for\n     * {@link #ACTION_CHOOSER} in the past 14 days. Therefore, it is recommended to use the\n     * following annotations when applicable.</p>\n     * <ul>\n     *     <li>\"product\" represents that the topic of the content is mainly about products, e.g.,\n     *     health & beauty, and office supplies.</li>\n     *     <li>\"emotion\" represents that the topic of the content is mainly about emotions, e.g.,\n     *     happy, and sad.</li>\n     *     <li>\"person\" represents that the topic of the content is mainly about persons, e.g.,\n     *     face, finger, standing, and walking.</li>\n     *     <li>\"child\" represents that the topic of the content is mainly about children, e.g.,\n     *     child, and baby.</li>\n     *     <li>\"selfie\" represents that the topic of the content is mainly about selfies.</li>\n     *     <li>\"crowd\" represents that the topic of the content is mainly about crowds.</li>\n     *     <li>\"party\" represents that the topic of the content is mainly about parties.</li>\n     *     <li>\"animal\" represent that the topic of the content is mainly about animals.</li>\n     *     <li>\"plant\" represents that the topic of the content is mainly about plants, e.g.,\n     *     flowers.</li>\n     *     <li>\"vacation\" represents that the topic of the content is mainly about vacations.</li>\n     *     <li>\"fashion\" represents that the topic of the content is mainly about fashion, e.g.\n     *     sunglasses, jewelry, handbags and clothing.</li>\n     *     <li>\"material\" represents that the topic of the content is mainly about materials, e.g.,\n     *     paper, and silk.</li>\n     *     <li>\"vehicle\" represents that the topic of the content is mainly about vehicles, like\n     *     cars, and boats.</li>\n     *     <li>\"document\" represents that the topic of the content is mainly about documents, e.g.\n     *     posters.</li>\n     *     <li>\"design\" represents that the topic of the content is mainly about design, e.g. arts\n     *     and designs of houses.</li>\n     *     <li>\"holiday\" represents that the topic of the content is mainly about holidays, e.g.,\n     *     Christmas and Thanksgiving.</li>\n     * </ul>\n     ",
    "links" : [ "#ACTION_CHOOSER", "#EXTRA_CONTENT_ANNOTATIONS", "#ACTION_CHOOSER", "#ACTION_CHOOSER", "#ACTION_CHOOSER", "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_RESULT_RECEIVER",
    "type" : "String",
    "comment" : "\n     * A {@link ResultReceiver} used to return data back to the sender.\n     *\n     * <p>Used to complete an app-specific\n     * {@link #EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER refinement} for {@link #ACTION_CHOOSER}.</p>\n     *\n     * <p>If {@link #EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER} is present in the intent\n     * used to start a {@link #ACTION_CHOOSER} activity this extra will be\n     * {@link #fillIn(Intent, int) filled in} to that {@link IntentSender} and sent\n     * when the user selects a target component from the chooser. It is up to the recipient\n     * to send a result to this ResultReceiver to signal that disambiguation is complete\n     * and that the chooser should invoke the user's choice.</p>\n     *\n     * <p>The disambiguator should provide a Bundle to the ResultReceiver with an intent\n     * assigned to the key {@link #EXTRA_INTENT}. This supplied intent will be used by the chooser\n     * to match and fill in the final Intent or ChooserTarget before starting it.\n     * The supplied intent must {@link #filterEquals(Intent) match} one of the intents from\n     * {@link #EXTRA_INTENT} or {@link #EXTRA_ALTERNATE_INTENTS} passed to\n     * {@link #EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER} to be accepted.</p>\n     *\n     * <p>The result code passed to the ResultReceiver should be\n     * {@link android.app.Activity#RESULT_OK} if the refinement succeeded and the supplied intent's\n     * target in the chooser should be started, or {@link android.app.Activity#RESULT_CANCELED} if\n     * the chooser should finish without starting a target.</p>\n     ",
    "links" : [ "ResultReceiver", "#EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER", "#ACTION_CHOOSER", "#EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER", "#ACTION_CHOOSER", "#fillIn", "IntentSender", "#EXTRA_INTENT", "#filterEquals", "#EXTRA_INTENT", "#EXTRA_ALTERNATE_INTENTS", "#EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER", "android.app.Activity#RESULT_OK", "android.app.Activity#RESULT_CANCELED" ]
  }, {
    "name" : "EXTRA_TITLE",
    "type" : "String",
    "comment" : "\n     * A CharSequence dialog title to provide to the user when used with a\n     * {@link #ACTION_CHOOSER}.\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_INITIAL_INTENTS",
    "type" : "String",
    "comment" : "\n     * A Parcelable[] of {@link Intent} or\n     * {@link android.content.pm.LabeledIntent} objects as set with\n     * {@link #putExtra(String, Parcelable[])} of additional activities to place\n     * a the front of the list of choices, when shown to the user with a\n     * {@link #ACTION_CHOOSER}.\n     ",
    "links" : [ "Intent", "android.content.pm.LabeledIntent", "#putExtra", "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_INSTANT_APP_SUCCESS",
    "type" : "String",
    "comment" : "\n     * A {@link IntentSender} to start after instant app installation success.\n     * @hide\n     ",
    "links" : [ "IntentSender" ]
  }, {
    "name" : "EXTRA_INSTANT_APP_FAILURE",
    "type" : "String",
    "comment" : "\n     * A {@link IntentSender} to start after instant app installation failure.\n     * @hide\n     ",
    "links" : [ "IntentSender" ]
  }, {
    "name" : "EXTRA_INSTANT_APP_HOSTNAME",
    "type" : "String",
    "comment" : "\n     * The host name that triggered an instant app resolution.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INSTANT_APP_TOKEN",
    "type" : "String",
    "comment" : "\n     * An opaque token to track instant app resolution.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INSTANT_APP_ACTION",
    "type" : "String",
    "comment" : "\n     * The action that triggered an instant application resolution.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INSTANT_APP_BUNDLES",
    "type" : "String",
    "comment" : "\n     * An array of {@link Bundle}s containing details about resolved instant apps..\n     * @hide\n     ",
    "links" : [ "Bundle" ]
  }, {
    "name" : "EXTRA_INSTANT_APP_EXTRAS",
    "type" : "String",
    "comment" : "\n     * A {@link Bundle} of metadata that describes the instant application that needs to be\n     * installed. This data is populated from the response to\n     * {@link android.content.pm.InstantAppResolveInfo#getExtras()} as provided by the registered\n     * instant application resolver.\n     * @hide\n     ",
    "links" : [ "Bundle", "android.content.pm.InstantAppResolveInfo#getExtras" ]
  }, {
    "name" : "EXTRA_UNKNOWN_INSTANT_APP",
    "type" : "String",
    "comment" : "\n     * A boolean value indicating that the instant app resolver was unable to state with certainty\n     * that it did or did not have an app for the sanitized {@link Intent} defined at\n     * {@link #EXTRA_INTENT}.\n     * @hide\n     ",
    "links" : [ "Intent", "#EXTRA_INTENT" ]
  }, {
    "name" : "EXTRA_VERSION_CODE",
    "type" : "String",
    "comment" : "\n     * The version code of the app to install components from.\n     * @deprecated Use {@link #EXTRA_LONG_VERSION_CODE).\n     * @hide\n     ",
    "links" : [ "#EXTRA_LONG_VERSION_CODE" ]
  }, {
    "name" : "EXTRA_LONG_VERSION_CODE",
    "type" : "String",
    "comment" : "\n     * The version code of the app to install components from.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALLING_PACKAGE",
    "type" : "String",
    "comment" : "\n     * The app that triggered the instant app installation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_BUNDLE",
    "type" : "String",
    "comment" : "\n     * Optional calling app provided bundle containing additional launch information the\n     * installer may use.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REPLACEMENT_EXTRAS",
    "type" : "String",
    "comment" : "\n     * A Bundle forming a mapping of potential target package names to different extras Bundles\n     * to add to the default intent extras in {@link #EXTRA_INTENT} when used with\n     * {@link #ACTION_CHOOSER}. Each key should be a package name. The package need not\n     * be currently installed on the device.\n     *\n     * <p>An application may choose to provide alternate extras for the case where a user\n     * selects an activity from a predetermined set of target packages. If the activity\n     * the user selects from the chooser belongs to a package with its package name as\n     * a key in this bundle, the corresponding extras for that package will be merged with\n     * the extras already present in the intent at {@link #EXTRA_INTENT}. If a replacement\n     * extra has the same key as an extra already present in the intent it will overwrite\n     * the extra from the intent.</p>\n     *\n     * <p><em>Examples:</em>\n     * <ul>\n     *     <li>An application may offer different {@link #EXTRA_TEXT} to an application\n     *     when sharing with it via {@link #ACTION_SEND}, augmenting a link with additional query\n     *     parameters for that target.</li>\n     *     <li>An application may offer additional metadata for known targets of a given intent\n     *     to pass along information only relevant to that target such as account or content\n     *     identifiers already known to that application.</li>\n     * </ul></p>\n     ",
    "links" : [ "#EXTRA_INTENT", "#ACTION_CHOOSER", "#EXTRA_INTENT", "#EXTRA_TEXT", "#ACTION_SEND" ]
  }, {
    "name" : "EXTRA_CHOSEN_COMPONENT_INTENT_SENDER",
    "type" : "String",
    "comment" : "\n     * An {@link IntentSender} that will be notified if a user successfully chooses a target\n     * component to handle an action in an {@link #ACTION_CHOOSER} activity. The IntentSender\n     * will have the extra {@link #EXTRA_CHOSEN_COMPONENT} appended to it containing the\n     * {@link ComponentName} of the chosen component.\n     *\n     * <p>In some situations this callback may never come, for example if the user abandons\n     * the chooser, switches to another task or any number of other reasons. Apps should not\n     * be written assuming that this callback will always occur.</p>\n     ",
    "links" : [ "IntentSender", "#ACTION_CHOOSER", "#EXTRA_CHOSEN_COMPONENT", "ComponentName" ]
  }, {
    "name" : "EXTRA_CHOSEN_COMPONENT",
    "type" : "String",
    "comment" : "\n     * The {@link ComponentName} chosen by the user to complete an action.\n     *\n     * @see #EXTRA_CHOSEN_COMPONENT_INTENT_SENDER\n     ",
    "links" : [ "ComponentName" ]
  }, {
    "name" : "EXTRA_KEY_EVENT",
    "type" : "String",
    "comment" : "\n     * A {@link android.view.KeyEvent} object containing the event that\n     * triggered the creation of the Intent it is in.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "EXTRA_KEY_CONFIRM",
    "type" : "String",
    "comment" : "\n     * Set to true in {@link #ACTION_REQUEST_SHUTDOWN} to request confirmation from the user\n     * before shutting down.\n     *\n     * {@hide}\n     ",
    "links" : [ "#ACTION_REQUEST_SHUTDOWN" ]
  }, {
    "name" : "EXTRA_USER_REQUESTED_SHUTDOWN",
    "type" : "String",
    "comment" : "\n     * Set to true in {@link #ACTION_REQUEST_SHUTDOWN} to indicate that the shutdown is\n     * requested by the user.\n     *\n     * {@hide}\n     ",
    "links" : [ "#ACTION_REQUEST_SHUTDOWN" ]
  }, {
    "name" : "EXTRA_DONT_KILL_APP",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED} or\n     * {@link android.content.Intent#ACTION_PACKAGE_CHANGED} intents to override the default action\n     * of restarting the application.\n     ",
    "links" : [ "android.content.Intent#ACTION_PACKAGE_REMOVED", "android.content.Intent#ACTION_PACKAGE_CHANGED" ]
  }, {
    "name" : "EXTRA_PHONE_NUMBER",
    "type" : "String",
    "comment" : "\n     * A String holding the phone number originally entered in\n     * {@link android.content.Intent#ACTION_NEW_OUTGOING_CALL}, or the actual\n     * number to call in a {@link android.content.Intent#ACTION_CALL}.\n     ",
    "links" : [ "android.content.Intent#ACTION_NEW_OUTGOING_CALL", "android.content.Intent#ACTION_CALL" ]
  }, {
    "name" : "EXTRA_UID",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field in {@link android.content.Intent#ACTION_UID_REMOVED}\n     * intents to supply the uid the package had been assigned.  Also an optional\n     * extra in {@link android.content.Intent#ACTION_PACKAGE_REMOVED} or\n     * {@link android.content.Intent#ACTION_PACKAGE_CHANGED} for the same\n     * purpose.\n     ",
    "links" : [ "android.content.Intent#ACTION_UID_REMOVED", "android.content.Intent#ACTION_PACKAGE_REMOVED", "android.content.Intent#ACTION_PACKAGE_CHANGED" ]
  }, {
    "name" : "EXTRA_PACKAGES",
    "type" : "String",
    "comment" : "\n     * @hide String array of package names.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DATA_REMOVED",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED}\n     * intents to indicate whether this represents a full uninstall (removing\n     * both the code and its data) or a partial uninstall (leaving its data,\n     * implying that this is an update).\n     ",
    "links" : [ "android.content.Intent#ACTION_PACKAGE_REMOVED" ]
  }, {
    "name" : "EXTRA_REMOVED_FOR_ALL_USERS",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Used as a boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED}\n     * intents to indicate that at this point the package has been removed for\n     * all users on the device.\n     ",
    "links" : [ "android.content.Intent#ACTION_PACKAGE_REMOVED" ]
  }, {
    "name" : "EXTRA_REPLACING",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED}\n     * intents to indicate that this is a replacement of the package, so this\n     * broadcast will immediately be followed by an add broadcast for a\n     * different version of the same package.\n     ",
    "links" : [ "android.content.Intent#ACTION_PACKAGE_REMOVED" ]
  }, {
    "name" : "EXTRA_ALARM_COUNT",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field in {@link android.app.AlarmManager} intents\n     * to tell the application being invoked how many pending alarms are being\n     * delievered with the intent.  For one-shot alarms this will always be 1.\n     * For recurring alarms, this might be greater than 1 if the device was\n     * asleep or powered off at the time an earlier alarm would have been\n     * delivered.\n     ",
    "links" : [ "android.app.AlarmManager" ]
  }, {
    "name" : "EXTRA_DOCK_STATE",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field in {@link android.content.Intent#ACTION_DOCK_EVENT}\n     * intents to request the dock state.  Possible values are\n     * {@link android.content.Intent#EXTRA_DOCK_STATE_UNDOCKED},\n     * {@link android.content.Intent#EXTRA_DOCK_STATE_DESK}, or\n     * {@link android.content.Intent#EXTRA_DOCK_STATE_CAR}, or\n     * {@link android.content.Intent#EXTRA_DOCK_STATE_LE_DESK}, or\n     * {@link android.content.Intent#EXTRA_DOCK_STATE_HE_DESK}.\n     ",
    "links" : [ "android.content.Intent#ACTION_DOCK_EVENT", "android.content.Intent#EXTRA_DOCK_STATE_UNDOCKED", "android.content.Intent#EXTRA_DOCK_STATE_DESK", "android.content.Intent#EXTRA_DOCK_STATE_CAR", "android.content.Intent#EXTRA_DOCK_STATE_LE_DESK", "android.content.Intent#EXTRA_DOCK_STATE_HE_DESK" ]
  }, {
    "name" : "EXTRA_DOCK_STATE_UNDOCKED",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}\n     * to represent that the phone is not in any dock.\n     ",
    "links" : [ "android.content.Intent#EXTRA_DOCK_STATE" ]
  }, {
    "name" : "EXTRA_DOCK_STATE_DESK",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}\n     * to represent that the phone is in a desk dock.\n     ",
    "links" : [ "android.content.Intent#EXTRA_DOCK_STATE" ]
  }, {
    "name" : "EXTRA_DOCK_STATE_CAR",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}\n     * to represent that the phone is in a car dock.\n     ",
    "links" : [ "android.content.Intent#EXTRA_DOCK_STATE" ]
  }, {
    "name" : "EXTRA_DOCK_STATE_LE_DESK",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}\n     * to represent that the phone is in a analog (low end) dock.\n     ",
    "links" : [ "android.content.Intent#EXTRA_DOCK_STATE" ]
  }, {
    "name" : "EXTRA_DOCK_STATE_HE_DESK",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}\n     * to represent that the phone is in a digital (high end) dock.\n     ",
    "links" : [ "android.content.Intent#EXTRA_DOCK_STATE" ]
  }, {
    "name" : "METADATA_DOCK_HOME",
    "type" : "String",
    "comment" : "\n     * Boolean that can be supplied as meta-data with a dock activity, to\n     * indicate that the dock should take over the home key when it is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BUG_REPORT",
    "type" : "String",
    "comment" : "\n     * Used as a parcelable extra field in {@link #ACTION_APP_ERROR}, containing\n     * the bug report.\n     ",
    "links" : [ "#ACTION_APP_ERROR" ]
  }, {
    "name" : "EXTRA_REMOTE_INTENT_TOKEN",
    "type" : "String",
    "comment" : "\n     * Used in the extra field in the remote intent. It's astring token passed with the\n     * remote intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CHANGED_COMPONENT_NAME",
    "type" : "String",
    "comment" : "\n     * @deprecated See {@link #EXTRA_CHANGED_COMPONENT_NAME_LIST}; this field\n     * will contain only the first name in the list.\n     ",
    "links" : [ "#EXTRA_CHANGED_COMPONENT_NAME_LIST" ]
  }, {
    "name" : "EXTRA_CHANGED_COMPONENT_NAME_LIST",
    "type" : "String",
    "comment" : "\n     * This field is part of {@link android.content.Intent#ACTION_PACKAGE_CHANGED},\n     * and contains a string array of all of the components that have changed.  If\n     * the state of the overall package has changed, then it will contain an entry\n     * with the package name itself.\n     ",
    "links" : [ "android.content.Intent#ACTION_PACKAGE_CHANGED" ]
  }, {
    "name" : "EXTRA_CHANGED_PACKAGE_LIST",
    "type" : "String",
    "comment" : "\n     * This field is part of\n     * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE},\n     * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE},\n     * {@link android.content.Intent#ACTION_PACKAGES_SUSPENDED},\n     * {@link android.content.Intent#ACTION_PACKAGES_UNSUSPENDED}\n     * and contains a string array of all of the components that have changed.\n     ",
    "links" : [ "android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE", "android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE", "android.content.Intent#ACTION_PACKAGES_SUSPENDED", "android.content.Intent#ACTION_PACKAGES_UNSUSPENDED" ]
  }, {
    "name" : "EXTRA_CHANGED_UID_LIST",
    "type" : "String",
    "comment" : "\n     * This field is part of\n     * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE},\n     * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE}\n     * and contains an integer array of uids of all of the components\n     * that have changed.\n     ",
    "links" : [ "android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE", "android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE" ]
  }, {
    "name" : "EXTRA_DISTRACTION_RESTRICTIONS",
    "type" : "String",
    "comment" : "\n     * An integer denoting a bitwise combination of restrictions set on distracting packages via\n     * {@link PackageManager#setDistractingPackageRestrictions(String[], int)}\n     *\n     * @hide\n     * @see PackageManager.DistractionRestriction\n     * @see PackageManager#setDistractingPackageRestrictions(String[], int)\n     ",
    "links" : [ "PackageManager#setDistractingPackageRestrictions" ]
  }, {
    "name" : "EXTRA_CLIENT_LABEL",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Magic extra system code can use when binding, to give a label for\n     * who it is that has bound to a service.  This is an integer giving\n     * a framework string resource that can be displayed to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CLIENT_INTENT",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Magic extra system code can use when binding, to give a PendingIntent object\n     * that can be launched for the user to disable the system's use of this\n     * service.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOCAL_ONLY",
    "type" : "String",
    "comment" : "\n     * Extra used to indicate that an intent should only return data that is on\n     * the local device. This is a boolean extra; the default is false. If true,\n     * an implementation should only allow the user to select data that is\n     * already on the device, not requiring it be downloaded from a remote\n     * service when opened.\n     *\n     * @see #ACTION_GET_CONTENT\n     * @see #ACTION_OPEN_DOCUMENT\n     * @see #ACTION_OPEN_DOCUMENT_TREE\n     * @see #ACTION_CREATE_DOCUMENT\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ALLOW_MULTIPLE",
    "type" : "String",
    "comment" : "\n     * Extra used to indicate that an intent can allow the user to select and\n     * return multiple items. This is a boolean extra; the default is false. If\n     * true, an implementation is allowed to present the user with a UI where\n     * they can pick multiple items that are all returned to the caller. When\n     * this happens, they should be returned as the {@link #getClipData()} part\n     * of the result Intent.\n     *\n     * @see #ACTION_GET_CONTENT\n     * @see #ACTION_OPEN_DOCUMENT\n     ",
    "links" : [ "#getClipData" ]
  }, {
    "name" : "EXTRA_USER_HANDLE",
    "type" : "String",
    "comment" : "\n     * The integer userHandle (i.e. userId) carried with broadcast intents related to addition,\n     * removal and switching of users and managed profiles - {@link #ACTION_USER_ADDED},\n     * {@link #ACTION_USER_REMOVED} and {@link #ACTION_USER_SWITCHED}.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USER_ADDED", "#ACTION_USER_REMOVED", "#ACTION_USER_SWITCHED" ]
  }, {
    "name" : "EXTRA_USER",
    "type" : "String",
    "comment" : "\n     * The UserHandle carried with intents.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESTRICTIONS_LIST",
    "type" : "String",
    "comment" : "\n     * Extra used in the response from a BroadcastReceiver that handles\n     * {@link #ACTION_GET_RESTRICTION_ENTRIES}. The type of the extra is\n     * <code>ArrayList&lt;RestrictionEntry&gt;</code>.\n     ",
    "links" : [ "#ACTION_GET_RESTRICTION_ENTRIES" ]
  }, {
    "name" : "EXTRA_RESTRICTIONS_BUNDLE",
    "type" : "String",
    "comment" : "\n     * Extra sent in the intent to the BroadcastReceiver that handles\n     * {@link #ACTION_GET_RESTRICTION_ENTRIES}. The type of the extra is a Bundle containing\n     * the restrictions as key/value pairs.\n     ",
    "links" : [ "#ACTION_GET_RESTRICTION_ENTRIES" ]
  }, {
    "name" : "EXTRA_RESTRICTIONS_INTENT",
    "type" : "String",
    "comment" : "\n     * Extra used in the response from a BroadcastReceiver that handles\n     * {@link #ACTION_GET_RESTRICTION_ENTRIES}.\n     ",
    "links" : [ "#ACTION_GET_RESTRICTION_ENTRIES" ]
  }, {
    "name" : "EXTRA_MIME_TYPES",
    "type" : "String",
    "comment" : "\n     * Extra used to communicate a set of acceptable MIME types. The type of the\n     * extra is {@code String[]}. Values may be a combination of concrete MIME\n     * types (such as \"image/png\") and/or partial MIME types (such as\n     * \"audio/*\").\n     *\n     * @see #ACTION_GET_CONTENT\n     * @see #ACTION_OPEN_DOCUMENT\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SHUTDOWN_USERSPACE_ONLY",
    "type" : "String",
    "comment" : "\n     * Optional extra for {@link #ACTION_SHUTDOWN} that allows the sender to qualify that\n     * this shutdown is only for the user space of the system, not a complete shutdown.\n     * When this is true, hardware devices can use this information to determine that\n     * they shouldn't do a complete shutdown of their device since this is not a\n     * complete shutdown down to the kernel, but only user space restarting.\n     * The default if not supplied is false.\n     ",
    "links" : [ "#ACTION_SHUTDOWN" ]
  }, {
    "name" : "EXTRA_TIME",
    "type" : "String",
    "comment" : "\n     * Optional extra specifying a time in milliseconds since the Epoch. The value must be\n     * non-negative.\n     * <p>\n     * Type: long\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TIMEZONE",
    "type" : "String",
    "comment" : "\n     * Extra sent with {@link #ACTION_TIMEZONE_CHANGED} specifying the new time zone of the device.\n     *\n     * <p>Type: String, the same as returned by {@link TimeZone#getID()} to identify time zones.\n     ",
    "links" : [ "#ACTION_TIMEZONE_CHANGED", "TimeZone#getID" ]
  }, {
    "name" : "EXTRA_TIME_PREF_24_HOUR_FORMAT",
    "type" : "String",
    "comment" : "\n     * Optional int extra for {@link #ACTION_TIME_CHANGED} that indicates the\n     * user has set their time format preference. See {@link #EXTRA_TIME_PREF_VALUE_USE_12_HOUR},\n     * {@link #EXTRA_TIME_PREF_VALUE_USE_24_HOUR} and\n     * {@link #EXTRA_TIME_PREF_VALUE_USE_LOCALE_DEFAULT}. The value must not be negative.\n     *\n     * @hide for internal use only.\n     ",
    "links" : [ "#ACTION_TIME_CHANGED", "#EXTRA_TIME_PREF_VALUE_USE_12_HOUR", "#EXTRA_TIME_PREF_VALUE_USE_24_HOUR", "#EXTRA_TIME_PREF_VALUE_USE_LOCALE_DEFAULT" ]
  }, {
    "name" : "EXTRA_TIME_PREF_VALUE_USE_12_HOUR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TIME_PREF_VALUE_USE_24_HOUR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TIME_PREF_VALUE_USE_LOCALE_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REASON",
    "type" : "String",
    "comment" : "\n     * Intent extra: the reason that the operation associated with this intent is being performed.\n     *\n     * <p>Type: String\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_WIPE_EXTERNAL_STORAGE",
    "type" : "String",
    "comment" : "\n     * {@hide}\n     * This extra will be send together with {@link #ACTION_FACTORY_RESET}\n     ",
    "links" : [ "#ACTION_FACTORY_RESET" ]
  }, {
    "name" : "EXTRA_WIPE_ESIMS",
    "type" : "String",
    "comment" : "\n     * {@hide}\n     * This extra will be set to true when the user choose to wipe the data on eSIM during factory\n     * reset for the device with eSIM. This extra will be sent together with\n     * {@link #ACTION_FACTORY_RESET}\n     ",
    "links" : [ "#ACTION_FACTORY_RESET" ]
  }, {
    "name" : "EXTRA_SIM_ACTIVATION_RESPONSE",
    "type" : "String",
    "comment" : "\n     * Optional {@link android.app.PendingIntent} extra used to deliver the result of the SIM\n     * activation request.\n     * TODO: Add information about the structure and response data used with the pending intent.\n     * @hide\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "EXTRA_INDEX",
    "type" : "String",
    "comment" : "\n     * Optional index with semantics depending on the intent action.\n     *\n     * <p>The value must be an integer greater or equal to 0.\n     * @see #ACTION_QUICK_VIEW\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_QUICK_VIEW_ADVANCED",
    "type" : "String",
    "comment" : "\n     * Tells the quick viewer to show additional UI actions suitable for the passed Uris,\n     * such as opening in other apps, sharing, opening, editing, printing, deleting,\n     * casting, etc.\n     *\n     * <p>The value is boolean. By default false.\n     * @see #ACTION_QUICK_VIEW\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_QUICK_VIEW_FEATURES",
    "type" : "String",
    "comment" : "\n     * An optional extra of {@code String[]} indicating which quick view features should be made\n     * available to the user in the quick view UI while handing a\n     * {@link Intent#ACTION_QUICK_VIEW} intent.\n     * <li>Enumeration of features here is not meant to restrict capabilities of the quick viewer.\n     * Quick viewer can implement features not listed below.\n     * <li>Features included at this time are: {@link QuickViewConstants#FEATURE_VIEW},\n     * {@link QuickViewConstants#FEATURE_EDIT}, {@link QuickViewConstants#FEATURE_DELETE},\n     * {@link QuickViewConstants#FEATURE_DOWNLOAD}, {@link QuickViewConstants#FEATURE_SEND},\n     * {@link QuickViewConstants#FEATURE_PRINT}.\n     * <p>\n     * Requirements:\n     * <li>Quick viewer shouldn't show a feature if the feature is absent in\n     * {@link #EXTRA_QUICK_VIEW_FEATURES}.\n     * <li>When {@link #EXTRA_QUICK_VIEW_FEATURES} is not present, quick viewer should follow\n     * internal policies.\n     * <li>Presence of an feature in {@link #EXTRA_QUICK_VIEW_FEATURES}, does not constitute a\n     * requirement that the feature be shown. Quick viewer may, according to its own policies,\n     * disable or hide features.\n     *\n     * @see #ACTION_QUICK_VIEW\n     ",
    "links" : [ "Intent#ACTION_QUICK_VIEW", "QuickViewConstants#FEATURE_VIEW", "QuickViewConstants#FEATURE_EDIT", "QuickViewConstants#FEATURE_DELETE", "QuickViewConstants#FEATURE_DOWNLOAD", "QuickViewConstants#FEATURE_SEND", "QuickViewConstants#FEATURE_PRINT", "#EXTRA_QUICK_VIEW_FEATURES", "#EXTRA_QUICK_VIEW_FEATURES", "#EXTRA_QUICK_VIEW_FEATURES" ]
  }, {
    "name" : "EXTRA_QUIET_MODE",
    "type" : "String",
    "comment" : "\n     * Optional boolean extra indicating whether quiet mode has been switched on or off.\n     * When a profile goes into quiet mode, all apps in the profile are killed and the\n     * profile user is stopped. Widgets originating from the profile are masked, and app\n     * launcher icons are grayed out.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONTENT_QUERY",
    "type" : "String",
    "comment" : "\n     * Optional CharSequence extra to provide a search query.\n     * The format of this query is dependent on the receiving application.\n     *\n     * <p>Applicable to {@link Intent} with actions:\n     * <ul>\n     *      <li>{@link Intent#ACTION_GET_CONTENT}</li>\n     *      <li>{@link Intent#ACTION_OPEN_DOCUMENT}</li>\n     * </ul>\n     ",
    "links" : [ "Intent", "Intent#ACTION_GET_CONTENT", "Intent#ACTION_OPEN_DOCUMENT" ]
  }, {
    "name" : "EXTRA_MEDIA_RESOURCE_TYPE",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field in {@link #ACTION_MEDIA_RESOURCE_GRANTED}\n     * intents to specify the resource type granted. Possible values are\n     * {@link #EXTRA_MEDIA_RESOURCE_TYPE_VIDEO_CODEC} or\n     * {@link #EXTRA_MEDIA_RESOURCE_TYPE_AUDIO_CODEC}.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_MEDIA_RESOURCE_GRANTED", "#EXTRA_MEDIA_RESOURCE_TYPE_VIDEO_CODEC", "#EXTRA_MEDIA_RESOURCE_TYPE_AUDIO_CODEC" ]
  }, {
    "name" : "EXTRA_AUTO_LAUNCH_SINGLE_CHOICE",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field in {@link #ACTION_CHOOSER} intents to specify\n     * whether to show the chooser or not when there is only one application available\n     * to choose from.\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_MEDIA_RESOURCE_TYPE_VIDEO_CODEC",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link #EXTRA_MEDIA_RESOURCE_TYPE}\n     * to represent that a video codec is allowed to use.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_MEDIA_RESOURCE_TYPE" ]
  }, {
    "name" : "EXTRA_MEDIA_RESOURCE_TYPE_AUDIO_CODEC",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link #EXTRA_MEDIA_RESOURCE_TYPE}\n     * to represent that a audio codec is allowed to use.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_MEDIA_RESOURCE_TYPE" ]
  }, {
    "name" : "EXTRA_LOCUS_ID",
    "type" : "String",
    "comment" : "\n     * Intent extra: ID of the context used on {@link #ACTION_VIEW_LOCUS}.\n     *\n     * <p>\n     * Type: {@link LocusId}\n     * </p>\n     ",
    "links" : [ "#ACTION_VIEW_LOCUS", "LocusId" ]
  }, {
    "name" : "FLAG_GRANT_READ_URI_PERMISSION",
    "type" : "int",
    "comment" : "\n     * If set, the recipient of this Intent will be granted permission to\n     * perform read operations on the URI in the Intent's data and any URIs\n     * specified in its ClipData.  When applying to an Intent's ClipData,\n     * all URIs as well as recursive traversals through data or other ClipData\n     * in Intent items will be granted; only the grant flags of the top-level\n     * Intent are used.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GRANT_WRITE_URI_PERMISSION",
    "type" : "int",
    "comment" : "\n     * If set, the recipient of this Intent will be granted permission to\n     * perform write operations on the URI in the Intent's data and any URIs\n     * specified in its ClipData.  When applying to an Intent's ClipData,\n     * all URIs as well as recursive traversals through data or other ClipData\n     * in Intent items will be granted; only the grant flags of the top-level\n     * Intent are used.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_FROM_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Can be set by the caller to indicate that this Intent is coming from\n     * a background operation, not from direct user interaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_DEBUG_LOG_RESOLUTION",
    "type" : "int",
    "comment" : "\n     * A flag you can enable for debugging: when set, log messages will be\n     * printed during the resolution of this intent to show you what has\n     * been found to create the final resolved list.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_EXCLUDE_STOPPED_PACKAGES",
    "type" : "int",
    "comment" : "\n     * If set, this intent will not match any components in packages that\n     * are currently stopped.  If this is not set, then the default behavior\n     * is to include such applications in the result.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_INCLUDE_STOPPED_PACKAGES",
    "type" : "int",
    "comment" : "\n     * If set, this intent will always match any components in packages that\n     * are currently stopped.  This is the default behavior when\n     * {@link #FLAG_EXCLUDE_STOPPED_PACKAGES} is not set.  If both of these\n     * flags are set, this one wins (it allows overriding of exclude for\n     * places where the framework may automatically set the exclude flag).\n     ",
    "links" : [ "#FLAG_EXCLUDE_STOPPED_PACKAGES" ]
  }, {
    "name" : "FLAG_GRANT_PERSISTABLE_URI_PERMISSION",
    "type" : "int",
    "comment" : "\n     * When combined with {@link #FLAG_GRANT_READ_URI_PERMISSION} and/or\n     * {@link #FLAG_GRANT_WRITE_URI_PERMISSION}, the URI permission grant can be\n     * persisted across device reboots until explicitly revoked with\n     * {@link Context#revokeUriPermission(Uri, int)}. This flag only offers the\n     * grant for possible persisting; the receiving application must call\n     * {@link ContentResolver#takePersistableUriPermission(Uri, int)} to\n     * actually persist.\n     *\n     * @see ContentResolver#takePersistableUriPermission(Uri, int)\n     * @see ContentResolver#releasePersistableUriPermission(Uri, int)\n     * @see ContentResolver#getPersistedUriPermissions()\n     * @see ContentResolver#getOutgoingPersistedUriPermissions()\n     ",
    "links" : [ "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION", "Context#revokeUriPermission", "ContentResolver#takePersistableUriPermission" ]
  }, {
    "name" : "FLAG_GRANT_PREFIX_URI_PERMISSION",
    "type" : "int",
    "comment" : "\n     * When combined with {@link #FLAG_GRANT_READ_URI_PERMISSION} and/or\n     * {@link #FLAG_GRANT_WRITE_URI_PERMISSION}, the URI permission grant\n     * applies to any URI that is a prefix match against the original granted\n     * URI. (Without this flag, the URI must match exactly for access to be\n     * granted.) Another URI is considered a prefix match only when scheme,\n     * authority, and all path segments defined by the prefix are an exact\n     * match.\n     ",
    "links" : [ "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION" ]
  }, {
    "name" : "FLAG_DIRECT_BOOT_AUTO",
    "type" : "int",
    "comment" : "\n     * Flag used to automatically match intents based on their Direct Boot\n     * awareness and the current user state.\n     * <p>\n     * Since the default behavior is to automatically apply the current user\n     * state, this is effectively a sentinel value that doesn't change the\n     * output of any queries based on its presence or absence.\n     * <p>\n     * Instead, this value can be useful in conjunction with\n     * {@link android.os.StrictMode.VmPolicy.Builder#detectImplicitDirectBoot()}\n     * to detect when a caller is relying on implicit automatic matching,\n     * instead of confirming the explicit behavior they want.\n     ",
    "links" : [ "android.os.StrictMode.VmPolicy.Builder#detectImplicitDirectBoot" ]
  }, {
    "name" : "FLAG_DEBUG_TRIAGED_MISSING",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FLAG_IGNORE_EPHEMERAL",
    "type" : "int",
    "comment" : "\n     * Internal flag used to indicate ephemeral applications should not be\n     * considered when resolving the intent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ACTIVITY_NO_HISTORY",
    "type" : "int",
    "comment" : "\n     * If set, the new activity is not kept in the history stack.  As soon as\n     * the user navigates away from it, the activity is finished.  This may also\n     * be set with the {@link android.R.styleable#AndroidManifestActivity_noHistory\n     * noHistory} attribute.\n     *\n     * <p>If set, {@link android.app.Activity#onActivityResult onActivityResult()}\n     * is never invoked when the current activity starts a new activity which\n     * sets a result and finishes.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestActivity_noHistory", "android.app.Activity#onActivityResult" ]
  }, {
    "name" : "FLAG_ACTIVITY_SINGLE_TOP",
    "type" : "int",
    "comment" : "\n     * If set, the activity will not be launched if it is already running\n     * at the top of the history stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ACTIVITY_NEW_TASK",
    "type" : "int",
    "comment" : "\n     * If set, this activity will become the start of a new task on this\n     * history stack.  A task (from the activity that started it to the\n     * next task activity) defines an atomic group of activities that the\n     * user can move to.  Tasks can be moved to the foreground and background;\n     * all of the activities inside of a particular task always remain in\n     * the same order.  See\n     * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back\n     * Stack</a> for more information about tasks.\n     *\n     * <p>This flag is generally used by activities that want\n     * to present a \"launcher\" style behavior: they give the user a list of\n     * separate things that can be done, which otherwise run completely\n     * independently of the activity launching them.\n     *\n     * <p>When using this flag, if a task is already running for the activity\n     * you are now starting, then a new activity will not be started; instead,\n     * the current task will simply be brought to the front of the screen with\n     * the state it was last in.  See {@link #FLAG_ACTIVITY_MULTIPLE_TASK} for a flag\n     * to disable this behavior.\n     *\n     * <p>This flag can not be used when the caller is requesting a result from\n     * the activity being launched.\n     ",
    "links" : [ "#FLAG_ACTIVITY_MULTIPLE_TASK" ]
  }, {
    "name" : "FLAG_ACTIVITY_MULTIPLE_TASK",
    "type" : "int",
    "comment" : "\n     * This flag is used to create a new task and launch an activity into it.\n     * This flag is always paired with either {@link #FLAG_ACTIVITY_NEW_DOCUMENT}\n     * or {@link #FLAG_ACTIVITY_NEW_TASK}. In both cases these flags alone would\n     * search through existing tasks for ones matching this Intent. Only if no such\n     * task is found would a new task be created. When paired with\n     * FLAG_ACTIVITY_MULTIPLE_TASK both of these behaviors are modified to skip\n     * the search for a matching task and unconditionally start a new task.\n     *\n     * <strong>When used with {@link #FLAG_ACTIVITY_NEW_TASK} do not use this\n     * flag unless you are implementing your own\n     * top-level application launcher.</strong>  Used in conjunction with\n     * {@link #FLAG_ACTIVITY_NEW_TASK} to disable the\n     * behavior of bringing an existing task to the foreground.  When set,\n     * a new task is <em>always</em> started to host the Activity for the\n     * Intent, regardless of whether there is already an existing task running\n     * the same thing.\n     *\n     * <p><strong>Because the default system does not include graphical task management,\n     * you should not use this flag unless you provide some way for a user to\n     * return back to the tasks you have launched.</strong>\n     *\n     * See {@link #FLAG_ACTIVITY_NEW_DOCUMENT} for details of this flag's use for\n     * creating new document tasks.\n     *\n     * <p>This flag is ignored if one of {@link #FLAG_ACTIVITY_NEW_TASK} or\n     * {@link #FLAG_ACTIVITY_NEW_DOCUMENT} is not also set.\n     *\n     * <p>See\n     * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back\n     * Stack</a> for more information about tasks.\n     *\n     * @see #FLAG_ACTIVITY_NEW_DOCUMENT\n     * @see #FLAG_ACTIVITY_NEW_TASK\n     ",
    "links" : [ "#FLAG_ACTIVITY_NEW_DOCUMENT", "#FLAG_ACTIVITY_NEW_TASK", "#FLAG_ACTIVITY_NEW_TASK", "#FLAG_ACTIVITY_NEW_TASK", "#FLAG_ACTIVITY_NEW_DOCUMENT", "#FLAG_ACTIVITY_NEW_TASK", "#FLAG_ACTIVITY_NEW_DOCUMENT" ]
  }, {
    "name" : "FLAG_ACTIVITY_CLEAR_TOP",
    "type" : "int",
    "comment" : "\n     * If set, and the activity being launched is already running in the\n     * current task, then instead of launching a new instance of that activity,\n     * all of the other activities on top of it will be closed and this Intent\n     * will be delivered to the (now on top) old activity as a new Intent.\n     *\n     * <p>For example, consider a task consisting of the activities: A, B, C, D.\n     * If D calls startActivity() with an Intent that resolves to the component\n     * of activity B, then C and D will be finished and B receive the given\n     * Intent, resulting in the stack now being: A, B.\n     *\n     * <p>The currently running instance of activity B in the above example will\n     * either receive the new intent you are starting here in its\n     * onNewIntent() method, or be itself finished and restarted with the\n     * new intent.  If it has declared its launch mode to be \"multiple\" (the\n     * default) and you have not set {@link #FLAG_ACTIVITY_SINGLE_TOP} in\n     * the same intent, then it will be finished and re-created; for all other\n     * launch modes or if {@link #FLAG_ACTIVITY_SINGLE_TOP} is set then this\n     * Intent will be delivered to the current instance's onNewIntent().\n     *\n     * <p>This launch mode can also be used to good effect in conjunction with\n     * {@link #FLAG_ACTIVITY_NEW_TASK}: if used to start the root activity\n     * of a task, it will bring any currently running instance of that task\n     * to the foreground, and then clear it to its root state.  This is\n     * especially useful, for example, when launching an activity from the\n     * notification manager.\n     *\n     * <p>See\n     * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back\n     * Stack</a> for more information about tasks.\n     ",
    "links" : [ "#FLAG_ACTIVITY_SINGLE_TOP", "#FLAG_ACTIVITY_SINGLE_TOP", "#FLAG_ACTIVITY_NEW_TASK" ]
  }, {
    "name" : "FLAG_ACTIVITY_FORWARD_RESULT",
    "type" : "int",
    "comment" : "\n     * If set and this intent is being used to launch a new activity from an\n     * existing one, then the reply target of the existing activity will be\n     * transferred to the new activity.  This way, the new activity can call\n     * {@link android.app.Activity#setResult} and have that result sent back to\n     * the reply target of the original activity.\n     ",
    "links" : [ "android.app.Activity#setResult" ]
  }, {
    "name" : "FLAG_ACTIVITY_PREVIOUS_IS_TOP",
    "type" : "int",
    "comment" : "\n     * If set and this intent is being used to launch a new activity from an\n     * existing one, the current activity will not be counted as the top\n     * activity for deciding whether the new intent should be delivered to\n     * the top instead of starting a new one.  The previous activity will\n     * be used as the top, with the assumption being that the current activity\n     * will finish itself immediately.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS",
    "type" : "int",
    "comment" : "\n     * If set, the new activity is not kept in the list of recently launched\n     * activities.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ACTIVITY_BROUGHT_TO_FRONT",
    "type" : "int",
    "comment" : "\n     * This flag is not normally set by application code, but set for you by\n     * the system as described in the\n     * {@link android.R.styleable#AndroidManifestActivity_launchMode\n     * launchMode} documentation for the singleTask mode.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestActivity_launchMode" ]
  }, {
    "name" : "FLAG_ACTIVITY_RESET_TASK_IF_NEEDED",
    "type" : "int",
    "comment" : "\n     * If set, and this activity is either being started in a new task or\n     * bringing to the top an existing task, then it will be launched as\n     * the front door of the task.  This will result in the application of\n     * any affinities needed to have that task in the proper state (either\n     * moving activities to or from it), or simply resetting that task to\n     * its initial state if needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY",
    "type" : "int",
    "comment" : "\n     * This flag is not normally set by application code, but set for you by\n     * the system if this activity is being launched from history\n     * (longpress home key).\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET",
    "type" : "int",
    "comment" : "\n     * @deprecated As of API 21 this performs identically to\n     * {@link #FLAG_ACTIVITY_NEW_DOCUMENT} which should be used instead of this.\n     ",
    "links" : [ "#FLAG_ACTIVITY_NEW_DOCUMENT" ]
  }, {
    "name" : "FLAG_ACTIVITY_NEW_DOCUMENT",
    "type" : "int",
    "comment" : "\n     * This flag is used to open a document into a new task rooted at the activity launched\n     * by this Intent. Through the use of this flag, or its equivalent attribute,\n     * {@link android.R.attr#documentLaunchMode} multiple instances of the same activity\n     * containing different documents will appear in the recent tasks list.\n     *\n     * <p>The use of the activity attribute form of this,\n     * {@link android.R.attr#documentLaunchMode}, is\n     * preferred over the Intent flag described here. The attribute form allows the\n     * Activity to specify multiple document behavior for all launchers of the Activity\n     * whereas using this flag requires each Intent that launches the Activity to specify it.\n     *\n     * <p>Note that the default semantics of this flag w.r.t. whether the recents entry for\n     * it is kept after the activity is finished is different than the use of\n     * {@link #FLAG_ACTIVITY_NEW_TASK} and {@link android.R.attr#documentLaunchMode} -- if\n     * this flag is being used to create a new recents entry, then by default that entry\n     * will be removed once the activity is finished.  You can modify this behavior with\n     * {@link #FLAG_ACTIVITY_RETAIN_IN_RECENTS}.\n     *\n     * <p>FLAG_ACTIVITY_NEW_DOCUMENT may be used in conjunction with {@link\n     * #FLAG_ACTIVITY_MULTIPLE_TASK}. When used alone it is the\n     * equivalent of the Activity manifest specifying {@link\n     * android.R.attr#documentLaunchMode}=\"intoExisting\". When used with\n     * FLAG_ACTIVITY_MULTIPLE_TASK it is the equivalent of the Activity manifest specifying\n     * {@link android.R.attr#documentLaunchMode}=\"always\".\n     *\n     * Refer to {@link android.R.attr#documentLaunchMode} for more information.\n     *\n     * @see android.R.attr#documentLaunchMode\n     * @see #FLAG_ACTIVITY_MULTIPLE_TASK\n     ",
    "links" : [ "android.R.attr#documentLaunchMode", "android.R.attr#documentLaunchMode", "#FLAG_ACTIVITY_NEW_TASK", "android.R.attr#documentLaunchMode", "#FLAG_ACTIVITY_RETAIN_IN_RECENTS", "android.R.attr#documentLaunchMode", "android.R.attr#documentLaunchMode" ]
  }, {
    "name" : "FLAG_ACTIVITY_NO_USER_ACTION",
    "type" : "int",
    "comment" : "\n     * If set, this flag will prevent the normal {@link android.app.Activity#onUserLeaveHint}\n     * callback from occurring on the current frontmost activity before it is\n     * paused as the newly-started activity is brought to the front.\n     *\n     * <p>Typically, an activity can rely on that callback to indicate that an\n     * explicit user action has caused their activity to be moved out of the\n     * foreground. The callback marks an appropriate point in the activity's\n     * lifecycle for it to dismiss any notifications that it intends to display\n     * \"until the user has seen them,\" such as a blinking LED.\n     *\n     * <p>If an activity is ever started via any non-user-driven events such as\n     * phone-call receipt or an alarm handler, this flag should be passed to {@link\n     * Context#startActivity Context.startActivity}, ensuring that the pausing\n     * activity does not think the user has acknowledged its notification.\n     ",
    "links" : [ "android.app.Activity#onUserLeaveHint" ]
  }, {
    "name" : "FLAG_ACTIVITY_REORDER_TO_FRONT",
    "type" : "int",
    "comment" : "\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will cause the launched activity to be brought to the front of its\n     * task's history stack if it is already running.\n     *\n     * <p>For example, consider a task consisting of four activities: A, B, C, D.\n     * If D calls startActivity() with an Intent that resolves to the component\n     * of activity B, then B will be brought to the front of the history stack,\n     * with this resulting order:  A, C, D, B.\n     *\n     * This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also\n     * specified.\n     ",
    "links" : [ "Context#startActivity", "#FLAG_ACTIVITY_CLEAR_TOP" ]
  }, {
    "name" : "FLAG_ACTIVITY_NO_ANIMATION",
    "type" : "int",
    "comment" : "\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will prevent the system from applying an activity transition\n     * animation to go to the next activity state.  This doesn't mean an\n     * animation will never run -- if another activity change happens that doesn't\n     * specify this flag before the activity started here is displayed, then\n     * that transition will be used.  This flag can be put to good use\n     * when you are going to do a series of activity operations but the\n     * animation seen by the user shouldn't be driven by the first activity\n     * change but rather a later one.\n     ",
    "links" : [ "Context#startActivity" ]
  }, {
    "name" : "FLAG_ACTIVITY_CLEAR_TASK",
    "type" : "int",
    "comment" : "\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will cause any existing task that would be associated with the\n     * activity to be cleared before the activity is started.  That is, the activity\n     * becomes the new root of an otherwise empty task, and any old activities\n     * are finished.  This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}.\n     ",
    "links" : [ "Context#startActivity", "#FLAG_ACTIVITY_NEW_TASK" ]
  }, {
    "name" : "FLAG_ACTIVITY_TASK_ON_HOME",
    "type" : "int",
    "comment" : "\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will cause a newly launching task to be placed on top of the current\n     * home activity task (if there is one).  That is, pressing back from the task\n     * will always return the user to home even if that was not the last activity they\n     * saw.   This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}.\n     ",
    "links" : [ "Context#startActivity", "#FLAG_ACTIVITY_NEW_TASK" ]
  }, {
    "name" : "FLAG_ACTIVITY_RETAIN_IN_RECENTS",
    "type" : "int",
    "comment" : "\n     * By default a document created by {@link #FLAG_ACTIVITY_NEW_DOCUMENT} will\n     * have its entry in recent tasks removed when the user closes it (with back\n     * or however else it may finish()). If you would like to instead allow the\n     * document to be kept in recents so that it can be re-launched, you can use\n     * this flag. When set and the task's activity is finished, the recents\n     * entry will remain in the interface for the user to re-launch it, like a\n     * recents entry for a top-level application.\n     * <p>\n     * The receiving activity can override this request with\n     * {@link android.R.attr#autoRemoveFromRecents} or by explcitly calling\n     * {@link android.app.Activity#finishAndRemoveTask()\n     * Activity.finishAndRemoveTask()}.\n     ",
    "links" : [ "#FLAG_ACTIVITY_NEW_DOCUMENT", "android.R.attr#autoRemoveFromRecents", "android.app.Activity#finishAndRemoveTask" ]
  }, {
    "name" : "FLAG_ACTIVITY_LAUNCH_ADJACENT",
    "type" : "int",
    "comment" : "\n     * This flag is only used for split-screen multi-window mode. The new activity will be displayed\n     * adjacent to the one launching it. This can only be used in conjunction with\n     * {@link #FLAG_ACTIVITY_NEW_TASK}. Also, setting {@link #FLAG_ACTIVITY_MULTIPLE_TASK} is\n     * required if you want a new instance of an existing activity to be created.\n     ",
    "links" : [ "#FLAG_ACTIVITY_NEW_TASK", "#FLAG_ACTIVITY_MULTIPLE_TASK" ]
  }, {
    "name" : "FLAG_ACTIVITY_MATCH_EXTERNAL",
    "type" : "int",
    "comment" : "\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will attempt to launch an instant app if no full app on the device can already\n     * handle the intent.\n     * <p>\n     * When attempting to resolve instant apps externally, the following {@link Intent} properties\n     * are supported:\n     * <ul>\n     *     <li>{@link Intent#setAction(String)}</li>\n     *     <li>{@link Intent#addCategory(String)}</li>\n     *     <li>{@link Intent#setData(Uri)}</li>\n     *     <li>{@link Intent#setType(String)}</li>\n     *     <li>{@link Intent#setPackage(String)}</li>\n     *     <li>{@link Intent#addFlags(int)}</li>\n     * </ul>\n     * <p>\n     * In the case that no instant app can be found, the installer will be launched to notify the\n     * user that the intent could not be resolved. On devices that do not support instant apps,\n     * the flag will be ignored.\n     ",
    "links" : [ "Context#startActivity", "Intent", "Intent#setAction", "Intent#addCategory", "Intent#setData", "Intent#setType", "Intent#setPackage", "Intent#addFlags" ]
  }, {
    "name" : "FLAG_ACTIVITY_REQUIRE_NON_BROWSER",
    "type" : "int",
    "comment" : "\n     * If set in an intent passed to {@link Context#startActivity Context.startActivity()}, this\n     * flag will only launch the intent if it resolves to a result that is not a browser. If no such\n     * result exists, an {@link ActivityNotFoundException} will be thrown.\n     ",
    "links" : [ "Context#startActivity", "ActivityNotFoundException" ]
  }, {
    "name" : "FLAG_ACTIVITY_REQUIRE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * If set in an intent passed to {@link Context#startActivity Context.startActivity()}, this\n     * flag will only launch the intent if it resolves to a single result. If no such result exists\n     * or if the system chooser would otherwise be displayed, an {@link ActivityNotFoundException}\n     * will be thrown.\n     ",
    "links" : [ "Context#startActivity", "ActivityNotFoundException" ]
  }, {
    "name" : "FLAG_RECEIVER_REGISTERED_ONLY",
    "type" : "int",
    "comment" : "\n     * If set, when sending a broadcast only registered receivers will be\n     * called -- no BroadcastReceiver components will be launched.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_REPLACE_PENDING",
    "type" : "int",
    "comment" : "\n     * If set, when sending a broadcast the new broadcast will replace\n     * any existing pending broadcast that matches it.  Matching is defined\n     * by {@link Intent#filterEquals(Intent) Intent.filterEquals} returning\n     * true for the intents of the two broadcasts.  When a match is found,\n     * the new broadcast (and receivers associated with it) will replace the\n     * existing one in the pending broadcast list, remaining at the same\n     * position in the list.\n     *\n     * <p>This flag is most typically used with sticky broadcasts, which\n     * only care about delivering the most recent values of the broadcast\n     * to their receivers.\n     ",
    "links" : [ "Intent#filterEquals" ]
  }, {
    "name" : "FLAG_RECEIVER_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * If set, when sending a broadcast the recipient is allowed to run at\n     * foreground priority, with a shorter timeout interval.  During normal\n     * broadcasts the receivers are not automatically hoisted out of the\n     * background priority class.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_OFFLOAD",
    "type" : "int",
    "comment" : "\n     * If set, when sending a broadcast the recipient will be run on the offload queue.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_NO_ABORT",
    "type" : "int",
    "comment" : "\n     * If this is an ordered broadcast, don't allow receivers to abort the broadcast.\n     * They can still propagate results through to later receivers, but they can not prevent\n     * later receivers from seeing the broadcast.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT",
    "type" : "int",
    "comment" : "\n     * If set, when sending a broadcast <i>before the system has fully booted up\n     * (which is even before {@link #ACTION_LOCKED_BOOT_COMPLETED} has been sent)\"</i> only\n     * registered receivers will be called -- no BroadcastReceiver components\n     * will be launched.  Sticky intent state will be recorded properly even\n     * if no receivers wind up being called.  If {@link #FLAG_RECEIVER_REGISTERED_ONLY}\n     * is specified in the broadcast intent, this flag is unnecessary.\n     *\n     * <p>This flag is only for use by system services (even services from mainline modules) as a\n     * convenience to avoid having to implement a more complex mechanism around detection\n     * of boot completion.\n     *\n     * <p>This is useful to system server mainline modules\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_LOCKED_BOOT_COMPLETED", "#FLAG_RECEIVER_REGISTERED_ONLY" ]
  }, {
    "name" : "FLAG_RECEIVER_BOOT_UPGRADE",
    "type" : "int",
    "comment" : "\n     * Set when this broadcast is for a boot upgrade, a special mode that\n     * allows the broadcast to be sent before the system is ready and launches\n     * the app process with no providers running in it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_INCLUDE_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * If set, the broadcast will always go to manifest receivers in background (cached\n     * or not running) apps, regardless of whether that would be done by default.  By\n     * default they will only receive broadcasts if the broadcast has specified an\n     * explicit component or package name.\n     *\n     * NOTE: dumpstate uses this flag numerically, so when its value is changed\n     * the broadcast code there must also be changed to match.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_EXCLUDE_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * If set, the broadcast will never go to manifest receivers in background (cached\n     * or not running) apps, regardless of whether that would be done by default.  By\n     * default they will receive broadcasts if the broadcast has specified an\n     * explicit component or package name.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_FROM_SHELL",
    "type" : "int",
    "comment" : "\n     * If set, this broadcast is being sent from the shell.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS",
    "type" : "int",
    "comment" : "\n     * If set, the broadcast will be visible to receivers in Instant Apps. By default Instant Apps\n     * will not receive broadcasts.\n     *\n     * <em>This flag has no effect when used by an Instant App.</em>\n     ",
    "links" : [ ]
  }, {
    "name" : "IMMUTABLE_FLAGS",
    "type" : "int",
    "comment" : "\n     * @hide Flags that can't be changed with PendingIntent.\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_INTENT_SCHEME",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #toUri} and {@link #parseUri}: the URI string\n     * always has the \"intent:\" scheme.  This syntax can be used when you want\n     * to later disambiguate between URIs that are intended to describe an\n     * Intent vs. all others that should be treated as raw URIs.  When used\n     * with {@link #parseUri}, any other scheme will result in a generic\n     * VIEW action for that raw URI.\n     ",
    "links" : [ "#toUri", "#parseUri", "#parseUri" ]
  }, {
    "name" : "URI_ANDROID_APP_SCHEME",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #toUri} and {@link #parseUri}: the URI string\n     * always has the \"android-app:\" scheme.  This is a variation of\n     * {@link #URI_INTENT_SCHEME} whose format is simpler for the case of an\n     * http/https URI being delivered to a specific package name.  The format\n     * is:\n     *\n     * <pre class=\"prettyprint\">\n     * android-app://{package_id}[/{scheme}[/{host}[/{path}]]][#Intent;{...}]</pre>\n     *\n     * <p>In this scheme, only the <code>package_id</code> is required.  If you include a host,\n     * you must also include a scheme; including a path also requires both a host and a scheme.\n     * The final #Intent; fragment can be used without a scheme, host, or path.\n     * Note that this can not be\n     * used with intents that have a {@link #setSelector}, since the base intent\n     * will always have an explicit package name.</p>\n     *\n     * <p>Some examples of how this scheme maps to Intent objects:</p>\n     * <table border=\"2\" width=\"85%\" align=\"center\" frame=\"hsides\" rules=\"rows\">\n     *     <colgroup align=\"left\" />\n     *     <colgroup align=\"left\" />\n     *     <thead>\n     *     <tr><th>URI</th> <th>Intent</th></tr>\n     *     </thead>\n     *\n     *     <tbody>\n     *     <tr><td><code>android-app://com.example.app</code></td>\n     *         <td><table style=\"margin:0;border:0;cellpadding:0;cellspacing:0\">\n     *             <tr><td>Action: </td><td>{@link #ACTION_MAIN}</td></tr>\n     *             <tr><td>Package: </td><td><code>com.example.app</code></td></tr>\n     *         </table></td>\n     *     </tr>\n     *     <tr><td><code>android-app://com.example.app/http/example.com</code></td>\n     *         <td><table style=\"margin:0;border:0;cellpadding:0;cellspacing:0\">\n     *             <tr><td>Action: </td><td>{@link #ACTION_VIEW}</td></tr>\n     *             <tr><td>Data: </td><td><code>http://example.com/</code></td></tr>\n     *             <tr><td>Package: </td><td><code>com.example.app</code></td></tr>\n     *         </table></td>\n     *     </tr>\n     *     <tr><td><code>android-app://com.example.app/http/example.com/foo?1234</code></td>\n     *         <td><table style=\"margin:0;border:0;cellpadding:0;cellspacing:0\">\n     *             <tr><td>Action: </td><td>{@link #ACTION_VIEW}</td></tr>\n     *             <tr><td>Data: </td><td><code>http://example.com/foo?1234</code></td></tr>\n     *             <tr><td>Package: </td><td><code>com.example.app</code></td></tr>\n     *         </table></td>\n     *     </tr>\n     *     <tr><td><code>android-app://com.example.app/<br />#Intent;action=com.example.MY_ACTION;end</code></td>\n     *         <td><table style=\"margin:0;border:0;cellpadding:0;cellspacing:0\">\n     *             <tr><td>Action: </td><td><code>com.example.MY_ACTION</code></td></tr>\n     *             <tr><td>Package: </td><td><code>com.example.app</code></td></tr>\n     *         </table></td>\n     *     </tr>\n     *     <tr><td><code>android-app://com.example.app/http/example.com/foo?1234<br />#Intent;action=com.example.MY_ACTION;end</code></td>\n     *         <td><table style=\"margin:0;border:0;cellpadding:0;cellspacing:0\">\n     *             <tr><td>Action: </td><td><code>com.example.MY_ACTION</code></td></tr>\n     *             <tr><td>Data: </td><td><code>http://example.com/foo?1234</code></td></tr>\n     *             <tr><td>Package: </td><td><code>com.example.app</code></td></tr>\n     *         </table></td>\n     *     </tr>\n     *     <tr><td><code>android-app://com.example.app/<br />#Intent;action=com.example.MY_ACTION;<br />i.some_int=100;S.some_str=hello;end</code></td>\n     *         <td><table border=\"\" style=\"margin:0\" >\n     *             <tr><td>Action: </td><td><code>com.example.MY_ACTION</code></td></tr>\n     *             <tr><td>Package: </td><td><code>com.example.app</code></td></tr>\n     *             <tr><td>Extras: </td><td><code>some_int=(int)100<br />some_str=(String)hello</code></td></tr>\n     *         </table></td>\n     *     </tr>\n     *     </tbody>\n     * </table>\n     ",
    "links" : [ "#toUri", "#parseUri", "#URI_INTENT_SCHEME", "#setSelector", "#ACTION_MAIN", "#ACTION_VIEW", "#ACTION_VIEW" ]
  }, {
    "name" : "URI_ALLOW_UNSAFE",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #toUri} and {@link #parseUri}: allow parsing\n     * of unsafe information.  In particular, the flags {@link #FLAG_GRANT_READ_URI_PERMISSION},\n     * {@link #FLAG_GRANT_WRITE_URI_PERMISSION}, {@link #FLAG_GRANT_PERSISTABLE_URI_PERMISSION},\n     * and {@link #FLAG_GRANT_PREFIX_URI_PERMISSION} flags can not be set, so that the\n     * generated Intent can not cause unexpected data access to happen.\n     *\n     * <p>If you do not trust the source of the URI being parsed, you should still do further\n     * processing to protect yourself from it.  In particular, when using it to start an\n     * activity you should usually add in {@link #CATEGORY_BROWSABLE} to limit the activities\n     * that can handle it.</p>\n     ",
    "links" : [ "#toUri", "#parseUri", "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION", "#FLAG_GRANT_PERSISTABLE_URI_PERMISSION", "#FLAG_GRANT_PREFIX_URI_PERMISSION", "#CATEGORY_BROWSABLE" ]
  }, {
    "name" : "mAction",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdentifier",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCategories",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelector",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentUserHint",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchToken",
    "type" : "String",
    "comment" : " Token to track instant app launches. Local only; do not copy cross-process. ",
    "links" : [ ]
  }, {
    "name" : "COPY_MODE_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COPY_MODE_FILTER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COPY_MODE_HISTORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILL_IN_ACTION",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current action value to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_DATA",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current data or type value\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_CATEGORIES",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current categories to be\n     * overwritten, even if they are already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_COMPONENT",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current component value to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current package value to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_SOURCE_BOUNDS",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current bounds rectangle to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_SELECTOR",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current selector to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_CLIP_DATA",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current ClipData to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "FILL_IN_IDENTIFIER",
    "type" : "int",
    "comment" : "\n     * Use with {@link #fillIn} to allow the current identifier value to be\n     * overwritten, even if it is already set.\n     ",
    "links" : [ "#fillIn" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Intent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Intent createChooser(Intent target, CharSequence title)",
    "returnType" : "Intent",
    "comment" : "\n     * Convenience function for creating a {@link #ACTION_CHOOSER} Intent.\n     *\n     * <p>Builds a new {@link #ACTION_CHOOSER} Intent that wraps the given\n     * target intent, also optionally supplying a title.  If the target\n     * intent has specified {@link #FLAG_GRANT_READ_URI_PERMISSION} or\n     * {@link #FLAG_GRANT_WRITE_URI_PERMISSION}, then these flags will also be\n     * set in the returned chooser intent, with its ClipData set appropriately:\n     * either a direct reflection of {@link #getClipData()} if that is non-null,\n     * or a new ClipData built from {@link #getData()}.\n     *\n     * @param target The Intent that the user will be selecting an activity\n     * to perform.\n     * @param title Optional title that will be displayed in the chooser,\n     * only when the target action is not ACTION_SEND or ACTION_SEND_MULTIPLE.\n     * @return Return a new Intent object that you can hand to\n     * {@link Context#startActivity(Intent) Context.startActivity()} and\n     * related methods.\n     ",
    "links" : [ "#ACTION_CHOOSER", "#ACTION_CHOOSER", "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION", "#getClipData", "#getData", "Context#startActivity" ]
  }, {
    "name" : "public static Intent createChooser(Intent target, CharSequence title, IntentSender sender)",
    "returnType" : "Intent",
    "comment" : "\n     * Convenience function for creating a {@link #ACTION_CHOOSER} Intent.\n     *\n     * <p>Builds a new {@link #ACTION_CHOOSER} Intent that wraps the given\n     * target intent, also optionally supplying a title.  If the target\n     * intent has specified {@link #FLAG_GRANT_READ_URI_PERMISSION} or\n     * {@link #FLAG_GRANT_WRITE_URI_PERMISSION}, then these flags will also be\n     * set in the returned chooser intent, with its ClipData set appropriately:\n     * either a direct reflection of {@link #getClipData()} if that is non-null,\n     * or a new ClipData built from {@link #getData()}.</p>\n     *\n     * <p>The caller may optionally supply an {@link IntentSender} to receive a callback\n     * when the user makes a choice. This can be useful if the calling application wants\n     * to remember the last chosen target and surface it as a more prominent or one-touch\n     * affordance elsewhere in the UI for next time.</p>\n     *\n     * @param target The Intent that the user will be selecting an activity\n     * to perform.\n     * @param title Optional title that will be displayed in the chooser,\n     * only when the target action is not ACTION_SEND or ACTION_SEND_MULTIPLE.\n     * @param sender Optional IntentSender to be called when a choice is made.\n     * @return Return a new Intent object that you can hand to\n     * {@link Context#startActivity(Intent) Context.startActivity()} and\n     * related methods.\n     ",
    "links" : [ "#ACTION_CHOOSER", "#ACTION_CHOOSER", "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION", "#getClipData", "#getData", "IntentSender", "Context#startActivity" ]
  }, {
    "name" : "public static boolean isAccessUriMode(int modeFlags)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given mode flags specify an access mode, which must be at least\n     * read and/or write.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent cloneFilter()",
    "returnType" : "Intent",
    "comment" : "\n     * Make a clone of only the parts of the Intent that are relevant for\n     * filter matching: the action, data, type, component, and categories.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Intent makeMainActivity(ComponentName mainActivity)",
    "returnType" : "Intent",
    "comment" : "\n     * Create an intent to launch the main (root) activity of a task.  This\n     * is the Intent that is started when the application's is launched from\n     * Home.  For anything else that wants to launch an application in the\n     * same way, it is important that they use an Intent structured the same\n     * way, and can use this function to ensure this is the case.\n     *\n     * <p>The returned Intent has the given Activity component as its explicit\n     * component, {@link #ACTION_MAIN} as its action, and includes the\n     * category {@link #CATEGORY_LAUNCHER}.  This does <em>not</em> have\n     * {@link #FLAG_ACTIVITY_NEW_TASK} set, though typically you will want\n     * to do that through {@link #addFlags(int)} on the returned Intent.\n     *\n     * @param mainActivity The main activity component that this Intent will\n     * launch.\n     * @return Returns a newly created Intent that can be used to launch the\n     * activity as a main application entry.\n     *\n     * @see #setClass\n     * @see #setComponent\n     ",
    "links" : [ "#ACTION_MAIN", "#CATEGORY_LAUNCHER", "#FLAG_ACTIVITY_NEW_TASK", "#addFlags" ]
  }, {
    "name" : "public static Intent makeMainSelectorActivity(String selectorAction, String selectorCategory)",
    "returnType" : "Intent",
    "comment" : "\n     * Make an Intent for the main activity of an application, without\n     * specifying a specific activity to run but giving a selector to find\n     * the activity.  This results in a final Intent that is structured\n     * the same as when the application is launched from\n     * Home.  For anything else that wants to launch an application in the\n     * same way, it is important that they use an Intent structured the same\n     * way, and can use this function to ensure this is the case.\n     *\n     * <p>The returned Intent has {@link #ACTION_MAIN} as its action, and includes the\n     * category {@link #CATEGORY_LAUNCHER}.  This does <em>not</em> have\n     * {@link #FLAG_ACTIVITY_NEW_TASK} set, though typically you will want\n     * to do that through {@link #addFlags(int)} on the returned Intent.\n     *\n     * @param selectorAction The action name of the Intent's selector.\n     * @param selectorCategory The name of a category to add to the Intent's\n     * selector.\n     * @return Returns a newly created Intent that can be used to launch the\n     * activity as a main application entry.\n     *\n     * @see #setSelector(Intent)\n     ",
    "links" : [ "#ACTION_MAIN", "#CATEGORY_LAUNCHER", "#FLAG_ACTIVITY_NEW_TASK", "#addFlags" ]
  }, {
    "name" : "public static Intent makeRestartActivityTask(ComponentName mainActivity)",
    "returnType" : "Intent",
    "comment" : "\n     * Make an Intent that can be used to re-launch an application's task\n     * in its base state.  This is like {@link #makeMainActivity(ComponentName)},\n     * but also sets the flags {@link #FLAG_ACTIVITY_NEW_TASK} and\n     * {@link #FLAG_ACTIVITY_CLEAR_TASK}.\n     *\n     * @param mainActivity The activity component that is the root of the\n     * task; this is the activity that has been published in the application's\n     * manifest as the main launcher icon.\n     *\n     * @return Returns a newly created Intent that can be used to relaunch the\n     * activity's task in its root state.\n     ",
    "links" : [ "#makeMainActivity", "#FLAG_ACTIVITY_NEW_TASK", "#FLAG_ACTIVITY_CLEAR_TASK" ]
  }, {
    "name" : "public static Intent getIntent(String uri) throws URISyntaxException",
    "returnType" : "Intent",
    "comment" : "\n     * Call {@link #parseUri} with 0 flags.\n     * @deprecated Use {@link #parseUri} instead.\n     ",
    "links" : [ "#parseUri", "#parseUri" ]
  }, {
    "name" : "public static Intent parseUri(String uri, @UriFlags int flags) throws URISyntaxException",
    "returnType" : "Intent",
    "comment" : "\n     * Create an intent from a URI.  This URI may encode the action,\n     * category, and other intent fields, if it was returned by\n     * {@link #toUri}.  If the Intent was not generate by toUri(), its data\n     * will be the entire URI and its action will be ACTION_VIEW.\n     *\n     * <p>The URI given here must not be relative -- that is, it must include\n     * the scheme and full path.\n     *\n     * @param uri The URI to turn into an Intent.\n     * @param flags Additional processing flags.\n     *\n     * @return Intent The newly created Intent object.\n     *\n     * @throws URISyntaxException Throws URISyntaxError if the basic URI syntax\n     * it bad (as parsed by the Uri class) or the Intent data within the\n     * URI is invalid.\n     *\n     * @see #toUri\n     ",
    "links" : [ "#toUri" ]
  }, {
    "name" : "public static Intent getIntentOld(String uri) throws URISyntaxException",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Intent getIntentOld(String uri, int flags) throws URISyntaxException",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Intent parseCommandArgs(ShellCommand cmd, CommandOptionHandler optionHandler) throws URISyntaxException",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void printIntentArgsHelp(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getAction()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the general action to be performed, such as\n     * {@link #ACTION_VIEW}.  The action describes the general way the rest of\n     * the information in the intent should be interpreted -- most importantly,\n     * what to do with the data returned by {@link #getData}.\n     *\n     * @return The action of this intent or null if none is specified.\n     *\n     * @see #setAction\n     ",
    "links" : [ "#ACTION_VIEW", "#getData" ]
  }, {
    "name" : "public Uri getData()",
    "returnType" : "Uri",
    "comment" : "\n     * Retrieve data this intent is operating on.  This URI specifies the name\n     * of the data; often it uses the content: scheme, specifying data in a\n     * content provider.  Other schemes may be handled by specific activities,\n     * such as http: by the web browser.\n     *\n     * @return The URI of the data this intent is targeting or null.\n     *\n     * @see #getScheme\n     * @see #setData\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDataString()",
    "returnType" : "String",
    "comment" : "\n     * The same as {@link #getData()}, but returns the URI as an encoded\n     * String.\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "public String getScheme()",
    "returnType" : "String",
    "comment" : "\n     * Return the scheme portion of the intent's data.  If the data is null or\n     * does not include a scheme, null is returned.  Otherwise, the scheme\n     * prefix without the final ':' is returned, i.e. \"http\".\n     *\n     * <p>This is the same as calling getData().getScheme() (and checking for\n     * null data).\n     *\n     * @return The scheme of this intent.\n     *\n     * @see #getData\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve any explicit MIME type included in the intent.  This is usually\n     * null, as the type is determined by the intent data.\n     *\n     * @return If a type was manually set, it is returned; else null is\n     *         returned.\n     *\n     * @see #resolveType(ContentResolver)\n     * @see #setType\n     ",
    "links" : [ ]
  }, {
    "name" : "public String resolveType(@NonNull Context context)",
    "returnType" : "String",
    "comment" : "\n     * Return the MIME data type of this intent.  If the type field is\n     * explicitly set, that is simply returned.  Otherwise, if the data is set,\n     * the type of that data is returned.  If neither fields are set, a null is\n     * returned.\n     *\n     * @return The MIME type of this intent.\n     *\n     * @see #getType\n     * @see #resolveType(ContentResolver)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String resolveType(@NonNull ContentResolver resolver)",
    "returnType" : "String",
    "comment" : "\n     * Return the MIME data type of this intent.  If the type field is\n     * explicitly set, that is simply returned.  Otherwise, if the data is set,\n     * the type of that data is returned.  If neither fields are set, a null is\n     * returned.\n     *\n     * @param resolver A ContentResolver that can be used to determine the MIME\n     *                 type of the intent's data.\n     *\n     * @return The MIME type of this intent.\n     *\n     * @see #getType\n     * @see #resolveType(Context)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String resolveTypeIfNeeded(@NonNull ContentResolver resolver)",
    "returnType" : "String",
    "comment" : "\n     * Return the MIME data type of this intent, only if it will be needed for\n     * intent resolution.  This is not generally useful for application code;\n     * it is used by the frameworks for communicating with back-end system\n     * services.\n     *\n     * @param resolver A ContentResolver that can be used to determine the MIME\n     *                 type of the intent's data.\n     *\n     * @return The MIME type of this intent, or null if it is unknown or not\n     *         needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getIdentifier()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the identifier for this Intent.  If non-null, this is an arbitrary identity\n     * of the Intent to distinguish it from other Intents.\n     *\n     * @return The identifier of this intent or null if none is specified.\n     *\n     * @see #setIdentifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCategory(String category)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a category exists in the intent.\n     *\n     * @param category The category to check.\n     *\n     * @return boolean True if the intent contains the category, else false.\n     *\n     * @see #getCategories\n     * @see #addCategory\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getCategories()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return the set of all categories in the intent.  If there are no categories,\n     * returns NULL.\n     *\n     * @return The set of categories you can examine.  Do not modify!\n     *\n     * @see #hasCategory\n     * @see #addCategory\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getSelector()",
    "returnType" : "Intent",
    "comment" : "\n     * Return the specific selector associated with this Intent.  If there is\n     * none, returns null.  See {@link #setSelector} for more information.\n     *\n     * @see #setSelector\n     ",
    "links" : [ "#setSelector" ]
  }, {
    "name" : "public ClipData getClipData()",
    "returnType" : "ClipData",
    "comment" : "\n     * Return the {@link ClipData} associated with this Intent.  If there is\n     * none, returns null.  See {@link #setClipData} for more information.\n     *\n     * @see #setClipData\n     ",
    "links" : [ "ClipData", "#setClipData" ]
  }, {
    "name" : "public int getContentUserHint()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getLaunchToken()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLaunchToken(String launchToken)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setExtrasClassLoader(@Nullable ClassLoader loader)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ClassLoader that will be used when unmarshalling\n     * any Parcelable values from the extras of this Intent.\n     *\n     * @param loader a ClassLoader, or null to use the default loader\n     * at the time of unmarshalling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasExtra(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if an extra value is associated with the given name.\n     * @param name the extra's name\n     * @return true if the given extra is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFileDescriptors()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the Intent's extras contain a parcelled file descriptor.\n     * @return true if the Intent contains a parcelled file descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowFds(boolean allowFds)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setDefusable(boolean defusable)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Object getExtra(String name)",
    "returnType" : "Object",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if none was found.\n     *\n     * @deprecated\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBooleanExtra(String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getByteExtra(String name, byte defaultValue)",
    "returnType" : "byte",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, byte)\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getShortExtra(String name, short defaultValue)",
    "returnType" : "short",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, short)\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getCharExtra(String name, char defaultValue)",
    "returnType" : "char",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, char)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntExtra(String name, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLongExtra(String name, long defaultValue)",
    "returnType" : "long",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFloatExtra(String name, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if no such item is present\n     *\n     * @see #putExtra(String, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDoubleExtra(String name, double defaultValue)",
    "returnType" : "double",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue the value to be returned if no value of the desired\n     * type is stored with the given name.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or the default value if none was found.\n     *\n     * @see #putExtra(String, double)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getStringExtra(String name)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no String value was found.\n     *\n     * @see #putExtra(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCharSequenceExtra(String name)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no CharSequence value was found.\n     *\n     * @see #putExtra(String, CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getParcelableExtra(String name)",
    "returnType" : "T",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no Parcelable value was found.\n     *\n     * @see #putExtra(String, Parcelable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parcelable[] getParcelableArrayExtra(String name)",
    "returnType" : "Parcelable[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no Parcelable[] value was found.\n     *\n     * @see #putExtra(String, Parcelable[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<T> getParcelableArrayListExtra(String name)",
    "returnType" : "ArrayList<T>",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with\n     * putParcelableArrayListExtra(), or null if no\n     * ArrayList<Parcelable> value was found.\n     *\n     * @see #putParcelableArrayListExtra(String, ArrayList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Serializable getSerializableExtra(String name)",
    "returnType" : "Serializable",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no Serializable value was found.\n     *\n     * @see #putExtra(String, Serializable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Integer> getIntegerArrayListExtra(String name)",
    "returnType" : "ArrayList<Integer>",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with\n     * putIntegerArrayListExtra(), or null if no\n     * ArrayList<Integer> value was found.\n     *\n     * @see #putIntegerArrayListExtra(String, ArrayList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<String> getStringArrayListExtra(String name)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with\n     * putStringArrayListExtra(), or null if no\n     * ArrayList<String> value was found.\n     *\n     * @see #putStringArrayListExtra(String, ArrayList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<CharSequence> getCharSequenceArrayListExtra(String name)",
    "returnType" : "ArrayList<CharSequence>",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with\n     * putCharSequenceArrayListExtra, or null if no\n     * ArrayList<CharSequence> value was found.\n     *\n     * @see #putCharSequenceArrayListExtra(String, ArrayList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getBooleanArrayExtra(String name)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no boolean array value was found.\n     *\n     * @see #putExtra(String, boolean[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getByteArrayExtra(String name)",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no byte array value was found.\n     *\n     * @see #putExtra(String, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public short[] getShortArrayExtra(String name)",
    "returnType" : "short[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no short array value was found.\n     *\n     * @see #putExtra(String, short[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] getCharArrayExtra(String name)",
    "returnType" : "char[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no char array value was found.\n     *\n     * @see #putExtra(String, char[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getIntArrayExtra(String name)",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no int array value was found.\n     *\n     * @see #putExtra(String, int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getLongArrayExtra(String name)",
    "returnType" : "long[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no long array value was found.\n     *\n     * @see #putExtra(String, long[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getFloatArrayExtra(String name)",
    "returnType" : "float[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no float array value was found.\n     *\n     * @see #putExtra(String, float[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public double[] getDoubleArrayExtra(String name)",
    "returnType" : "double[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no double array value was found.\n     *\n     * @see #putExtra(String, double[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getStringArrayExtra(String name)",
    "returnType" : "String[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no String array value was found.\n     *\n     * @see #putExtra(String, String[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getCharSequenceArrayExtra(String name)",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no CharSequence array value was found.\n     *\n     * @see #putExtra(String, CharSequence[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getBundleExtra(String name)",
    "returnType" : "Bundle",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no Bundle value was found.\n     *\n     * @see #putExtra(String, Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getIBinderExtra(String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or null if no IBinder value was found.\n     *\n     * @see #putExtra(String, IBinder)\n     *\n     * @deprecated\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getExtra(String name, Object defaultValue)",
    "returnType" : "Object",
    "comment" : "\n     * Retrieve extended data from the intent.\n     *\n     * @param name The name of the desired item.\n     * @param defaultValue The default value to return in case no item is\n     * associated with the key 'name'\n     *\n     * @return the value of an item previously added with putExtra(),\n     * or defaultValue if none was found.\n     *\n     * @see #putExtra\n     *\n     * @deprecated\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Retrieves a map of extended data from the intent.\n     *\n     * @return the map of all extras previously added with putExtra(),\n     * or null if none have been added.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeUnsafeExtras()",
    "returnType" : "void",
    "comment" : "\n     * Filter extras to only basic types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canStripForHistory()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether {@link #maybeStripForHistory} will return an lightened intent or\n     * return itself as-is.\n     * @hide\n     ",
    "links" : [ "#maybeStripForHistory" ]
  }, {
    "name" : "public Intent maybeStripForHistory()",
    "returnType" : "Intent",
    "comment" : "\n     * Call it when the system needs to keep an intent for logging purposes to remove fields\n     * that are not needed for logging.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve any special flags associated with this intent.  You will\n     * normally just set them with {@link #setFlags} and let the system\n     * take the appropriate action with them.\n     *\n     * @return The currently set flags.\n     * @see #setFlags\n     * @see #addFlags\n     * @see #removeFlags\n     ",
    "links" : [ "#setFlags" ]
  }, {
    "name" : "public boolean isExcludingStopped()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getPackage()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the application package name this Intent is limited to.  When\n     * resolving an Intent, if non-null this limits the resolution to only\n     * components in the given application package.\n     *\n     * @return The name of the application package for the Intent.\n     *\n     * @see #resolveActivity\n     * @see #setPackage\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Retrieve the concrete component associated with the intent.  When receiving\n     * an intent, this is the component that was found to best handle it (that is,\n     * yourself) and will always be non-null; in all other cases it will be\n     * null unless explicitly set.\n     *\n     * @return The name of the application component to handle the intent.\n     *\n     * @see #resolveActivity\n     * @see #setComponent\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getSourceBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Get the bounds of the sender of this intent, in screen coordinates.  This can be\n     * used as a hint to the receiver for animations and the like.  Null means that there\n     * is no source bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName resolveActivity(@NonNull PackageManager pm)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the Activity component that should be used to handle this intent.\n     * The appropriate component is determined based on the information in the\n     * intent, evaluated as follows:\n     *\n     * <p>If {@link #getComponent} returns an explicit class, that is returned\n     * without any further consideration.\n     *\n     * <p>The activity must handle the {@link Intent#CATEGORY_DEFAULT} Intent\n     * category to be considered.\n     *\n     * <p>If {@link #getAction} is non-NULL, the activity must handle this\n     * action.\n     *\n     * <p>If {@link #resolveType} returns non-NULL, the activity must handle\n     * this type.\n     *\n     * <p>If {@link #addCategory} has added any categories, the activity must\n     * handle ALL of the categories specified.\n     *\n     * <p>If {@link #getPackage} is non-NULL, only activity components in\n     * that application package will be considered.\n     *\n     * <p>If there are no activities that satisfy all of these conditions, a\n     * null string is returned.\n     *\n     * <p>If multiple activities are found to satisfy the intent, the one with\n     * the highest priority will be used.  If there are multiple activities\n     * with the same priority, the system will either pick the best activity\n     * based on user preference, or resolve to a system class that will allow\n     * the user to pick an activity and forward from there.\n     *\n     * <p>This method is implemented simply by calling\n     * {@link PackageManager#resolveActivity} with the \"defaultOnly\" parameter\n     * true.</p>\n     * <p> This API is called for you as part of starting an activity from an\n     * intent.  You do not normally need to call it yourself.</p>\n     *\n     * @param pm The package manager with which to resolve the Intent.\n     *\n     * @return Name of the component implementing an activity that can\n     *         display the intent.\n     *\n     * @see #setComponent\n     * @see #getComponent\n     * @see #resolveActivityInfo\n     ",
    "links" : [ "#getComponent", "Intent#CATEGORY_DEFAULT", "#getAction", "#resolveType", "#addCategory", "#getPackage", "PackageManager#resolveActivity" ]
  }, {
    "name" : "public ActivityInfo resolveActivityInfo(@NonNull PackageManager pm, @PackageManager.ComponentInfoFlags int flags)",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * Resolve the Intent into an {@link ActivityInfo}\n     * describing the activity that should execute the intent.  Resolution\n     * follows the same rules as described for {@link #resolveActivity}, but\n     * you get back the completely information about the resolved activity\n     * instead of just its class name.\n     *\n     * @param pm The package manager with which to resolve the Intent.\n     * @param flags Addition information to retrieve as per\n     * {@link PackageManager#getActivityInfo(ComponentName, int)\n     * PackageManager.getActivityInfo()}.\n     *\n     * @return PackageManager.ActivityInfo\n     *\n     * @see #resolveActivity\n     ",
    "links" : [ "ActivityInfo", "#resolveActivity", "PackageManager#getActivityInfo" ]
  }, {
    "name" : "public ComponentName resolveSystemService(@NonNull PackageManager pm, @PackageManager.ComponentInfoFlags int flags)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Special function for use by the system to resolve service\n     * intents to system apps.  Throws an exception if there are\n     * multiple potential matches to the Intent.  Returns null if\n     * there are no matches.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent setAction(@Nullable String action)",
    "returnType" : "Intent",
    "comment" : "\n     * Set the general action to be performed.\n     *\n     * @param action An action name, such as ACTION_VIEW.  Application-specific\n     *               actions should be prefixed with the vendor's package name.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getAction\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent setData(@Nullable Uri data)",
    "returnType" : "Intent",
    "comment" : "\n     * Set the data this intent is operating on.  This method automatically\n     * clears any type that was previously set by {@link #setType} or\n     * {@link #setTypeAndNormalize}.\n     *\n     * <p><em>Note: scheme matching in the Android framework is\n     * case-sensitive, unlike the formal RFC. As a result,\n     * you should always write your Uri with a lower case scheme,\n     * or use {@link Uri#normalizeScheme} or\n     * {@link #setDataAndNormalize}\n     * to ensure that the scheme is converted to lower case.</em>\n     *\n     * @param data The Uri of the data this intent is now targeting.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getData\n     * @see #setDataAndNormalize\n     * @see android.net.Uri#normalizeScheme()\n     ",
    "links" : [ "#setType", "#setTypeAndNormalize", "Uri#normalizeScheme", "#setDataAndNormalize" ]
  }, {
    "name" : "public Intent setDataAndNormalize(@NonNull Uri data)",
    "returnType" : "Intent",
    "comment" : "\n     * Normalize and set the data this intent is operating on.\n     *\n     * <p>This method automatically clears any type that was\n     * previously set (for example, by {@link #setType}).\n     *\n     * <p>The data Uri is normalized using\n     * {@link android.net.Uri#normalizeScheme} before it is set,\n     * so really this is just a convenience method for\n     * <pre>\n     * setData(data.normalize())\n     * </pre>\n     *\n     * @param data The Uri of the data this intent is now targeting.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getData\n     * @see #setType\n     * @see android.net.Uri#normalizeScheme\n     ",
    "links" : [ "#setType", "android.net.Uri#normalizeScheme" ]
  }, {
    "name" : "public Intent setType(@Nullable String type)",
    "returnType" : "Intent",
    "comment" : "\n     * Set an explicit MIME data type.\n     *\n     * <p>This is used to create intents that only specify a type and not data,\n     * for example to indicate the type of data to return.\n     *\n     * <p>This method automatically clears any data that was\n     * previously set (for example by {@link #setData}).\n     *\n     * <p><em>Note: MIME type matching in the Android framework is\n     * case-sensitive, unlike formal RFC MIME types.  As a result,\n     * you should always write your MIME types with lower case letters,\n     * or use {@link #normalizeMimeType} or {@link #setTypeAndNormalize}\n     * to ensure that it is converted to lower case.</em>\n     *\n     * @param type The MIME type of the data being handled by this intent.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getType\n     * @see #setTypeAndNormalize\n     * @see #setDataAndType\n     * @see #normalizeMimeType\n     ",
    "links" : [ "#setData", "#normalizeMimeType", "#setTypeAndNormalize" ]
  }, {
    "name" : "public Intent setTypeAndNormalize(@Nullable String type)",
    "returnType" : "Intent",
    "comment" : "\n     * Normalize and set an explicit MIME data type.\n     *\n     * <p>This is used to create intents that only specify a type and not data,\n     * for example to indicate the type of data to return.\n     *\n     * <p>This method automatically clears any data that was\n     * previously set (for example by {@link #setData}).\n     *\n     * <p>The MIME type is normalized using\n     * {@link #normalizeMimeType} before it is set,\n     * so really this is just a convenience method for\n     * <pre>\n     * setType(Intent.normalizeMimeType(type))\n     * </pre>\n     *\n     * @param type The MIME type of the data being handled by this intent.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getType\n     * @see #setData\n     * @see #normalizeMimeType\n     ",
    "links" : [ "#setData", "#normalizeMimeType" ]
  }, {
    "name" : "public Intent setDataAndType(@Nullable Uri data, @Nullable String type)",
    "returnType" : "Intent",
    "comment" : "\n     * (Usually optional) Set the data for the intent along with an explicit\n     * MIME data type.  This method should very rarely be used -- it allows you\n     * to override the MIME type that would ordinarily be inferred from the\n     * data with your own type given here.\n     *\n     * <p><em>Note: MIME type and Uri scheme matching in the\n     * Android framework is case-sensitive, unlike the formal RFC definitions.\n     * As a result, you should always write these elements with lower case letters,\n     * or use {@link #normalizeMimeType} or {@link android.net.Uri#normalizeScheme} or\n     * {@link #setDataAndTypeAndNormalize}\n     * to ensure that they are converted to lower case.</em>\n     *\n     * @param data The Uri of the data this intent is now targeting.\n     * @param type The MIME type of the data being handled by this intent.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #setType\n     * @see #setData\n     * @see #normalizeMimeType\n     * @see android.net.Uri#normalizeScheme\n     * @see #setDataAndTypeAndNormalize\n     ",
    "links" : [ "#normalizeMimeType", "android.net.Uri#normalizeScheme", "#setDataAndTypeAndNormalize" ]
  }, {
    "name" : "public Intent setDataAndTypeAndNormalize(@NonNull Uri data, @Nullable String type)",
    "returnType" : "Intent",
    "comment" : "\n     * (Usually optional) Normalize and set both the data Uri and an explicit\n     * MIME data type.  This method should very rarely be used -- it allows you\n     * to override the MIME type that would ordinarily be inferred from the\n     * data with your own type given here.\n     *\n     * <p>The data Uri and the MIME type are normalize using\n     * {@link android.net.Uri#normalizeScheme} and {@link #normalizeMimeType}\n     * before they are set, so really this is just a convenience method for\n     * <pre>\n     * setDataAndType(data.normalize(), Intent.normalizeMimeType(type))\n     * </pre>\n     *\n     * @param data The Uri of the data this intent is now targeting.\n     * @param type The MIME type of the data being handled by this intent.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #setType\n     * @see #setData\n     * @see #setDataAndType\n     * @see #normalizeMimeType\n     * @see android.net.Uri#normalizeScheme\n     ",
    "links" : [ "android.net.Uri#normalizeScheme", "#normalizeMimeType" ]
  }, {
    "name" : "public Intent setIdentifier(@Nullable String identifier)",
    "returnType" : "Intent",
    "comment" : "\n     * Set an identifier for this Intent.  If set, this provides a unique identity for this Intent,\n     * allowing it to be unique from other Intents that would otherwise look the same.  In\n     * particular, this will be used by {@link #filterEquals(Intent)} to determine if two\n     * Intents are the same as with other fields like {@link #setAction}.  However, unlike those\n     * fields, the identifier is <em>never</em> used for matching against an {@link IntentFilter};\n     * it is as if the identifier has not been set on the Intent.\n     *\n     * <p>This can be used, for example, to make this Intent unique from other Intents that\n     * are otherwise the same, for use in creating a {@link android.app.PendingIntent}.  (Be aware\n     * however that the receiver of the PendingIntent will see whatever you put in here.)  The\n     * structure of this string is completely undefined by the platform, however if you are going\n     * to be exposing identifier strings across different applications you may need to define\n     * your own structure if there is no central party defining the contents of this field.</p>\n     *\n     * @param identifier The identifier for this Intent.  The contents of the string have no\n     *                   meaning to the system, except whether they are exactly the same as\n     *                   another identifier.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getIdentifier\n     ",
    "links" : [ "#filterEquals", "#setAction", "IntentFilter", "android.app.PendingIntent" ]
  }, {
    "name" : "public Intent addCategory(String category)",
    "returnType" : "Intent",
    "comment" : "\n     * Add a new category to the intent.  Categories provide additional detail\n     * about the action the intent performs.  When resolving an intent, only\n     * activities that provide <em>all</em> of the requested categories will be\n     * used.\n     *\n     * @param category The desired category.  This can be either one of the\n     *               predefined Intent categories, or a custom category in your own\n     *               namespace.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #hasCategory\n     * @see #removeCategory\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeCategory(String category)",
    "returnType" : "void",
    "comment" : "\n     * Remove a category from an intent.\n     *\n     * @param category The category to remove.\n     *\n     * @see #addCategory\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelector(@Nullable Intent selector)",
    "returnType" : "void",
    "comment" : "\n     * Set a selector for this Intent.  This is a modification to the kinds of\n     * things the Intent will match.  If the selector is set, it will be used\n     * when trying to find entities that can handle the Intent, instead of the\n     * main contents of the Intent.  This allows you build an Intent containing\n     * a generic protocol while targeting it more specifically.\n     *\n     * <p>An example of where this may be used is with things like\n     * {@link #CATEGORY_APP_BROWSER}.  This category allows you to build an\n     * Intent that will launch the Browser application.  However, the correct\n     * main entry point of an application is actually {@link #ACTION_MAIN}\n     * {@link #CATEGORY_LAUNCHER} with {@link #setComponent(ComponentName)}\n     * used to specify the actual Activity to launch.  If you launch the browser\n     * with something different, undesired behavior may happen if the user has\n     * previously or later launches it the normal way, since they do not match.\n     * Instead, you can build an Intent with the MAIN action (but no ComponentName\n     * yet specified) and set a selector with {@link #ACTION_MAIN} and\n     * {@link #CATEGORY_APP_BROWSER} to point it specifically to the browser activity.\n     *\n     * <p>Setting a selector does not impact the behavior of\n     * {@link #filterEquals(Intent)} and {@link #filterHashCode()}.  This is part of the\n     * desired behavior of a selector -- it does not impact the base meaning\n     * of the Intent, just what kinds of things will be matched against it\n     * when determining who can handle it.</p>\n     *\n     * <p>You can not use both a selector and {@link #setPackage(String)} on\n     * the same base Intent.</p>\n     *\n     * @param selector The desired selector Intent; set to null to not use\n     * a special selector.\n     ",
    "links" : [ "#CATEGORY_APP_BROWSER", "#ACTION_MAIN", "#CATEGORY_LAUNCHER", "#setComponent", "#ACTION_MAIN", "#CATEGORY_APP_BROWSER", "#filterEquals", "#filterHashCode", "#setPackage" ]
  }, {
    "name" : "public void setClipData(@Nullable ClipData clip)",
    "returnType" : "void",
    "comment" : "\n     * Set a {@link ClipData} associated with this Intent.  This replaces any\n     * previously set ClipData.\n     *\n     * <p>The ClipData in an intent is not used for Intent matching or other\n     * such operations.  Semantically it is like extras, used to transmit\n     * additional data with the Intent.  The main feature of using this over\n     * the extras for data is that {@link #FLAG_GRANT_READ_URI_PERMISSION}\n     * and {@link #FLAG_GRANT_WRITE_URI_PERMISSION} will operate on any URI\n     * items included in the clip data.  This is useful, in particular, if\n     * you want to transmit an Intent containing multiple <code>content:</code>\n     * URIs for which the recipient may not have global permission to access the\n     * content provider.\n     *\n     * <p>If the ClipData contains items that are themselves Intents, any\n     * grant flags in those Intents will be ignored.  Only the top-level flags\n     * of the main Intent are respected, and will be applied to all Uri or\n     * Intent items in the clip (or sub-items of the clip).\n     *\n     * <p>The MIME type, label, and icon in the ClipData object are not\n     * directly used by Intent.  Applications should generally rely on the\n     * MIME type of the Intent itself, not what it may find in the ClipData.\n     * A common practice is to construct a ClipData for use with an Intent\n     * with a MIME type of \"*&#47;*\".\n     *\n     * @param clip The new clip to set.  May be null to clear the current clip.\n     ",
    "links" : [ "ClipData", "#FLAG_GRANT_READ_URI_PERMISSION", "#FLAG_GRANT_WRITE_URI_PERMISSION" ]
  }, {
    "name" : "public void prepareToLeaveUser(int userId)",
    "returnType" : "void",
    "comment" : "\n     * This is NOT a secure mechanism to identify the user who sent the intent.\n     * When the intent is sent to a different user, it is used to fix uris by adding the userId\n     * who sent the intent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, boolean value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The boolean data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getBooleanExtra(String, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, byte value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The byte data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getByteExtra(String, byte)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, char value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The char data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getCharExtra(String, char)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, short value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The short data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getShortExtra(String, short)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, int value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The integer data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getIntExtra(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, long value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The long data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getLongExtra(String, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, float value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The float data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getFloatExtra(String, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, double value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The double data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getDoubleExtra(String, double)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable String value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The String data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getStringExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable CharSequence value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The CharSequence data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getCharSequenceExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable Parcelable value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The Parcelable data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getParcelableExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable Parcelable[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The Parcelable[] data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getParcelableArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putParcelableArrayListExtra(String name, @Nullable ArrayList<? extends Parcelable> value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The ArrayList<Parcelable> data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getParcelableArrayListExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putIntegerArrayListExtra(String name, @Nullable ArrayList<Integer> value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The ArrayList<Integer> data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getIntegerArrayListExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putStringArrayListExtra(String name, @Nullable ArrayList<String> value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The ArrayList<String> data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getStringArrayListExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putCharSequenceArrayListExtra(String name, @Nullable ArrayList<CharSequence> value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The ArrayList<CharSequence> data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getCharSequenceArrayListExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable Serializable value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The Serializable data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getSerializableExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable boolean[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The boolean array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getBooleanArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable byte[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The byte array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getByteArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable short[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The short array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getShortArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable char[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The char array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getCharArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable int[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The int array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getIntArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable long[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The byte array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getLongArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable float[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The float array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getFloatArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable double[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The double array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getDoubleArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable String[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The String array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getStringArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable CharSequence[] value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The CharSequence array data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getCharSequenceArrayExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, @Nullable Bundle value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The Bundle data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getBundleExtra(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtra(String name, IBinder value)",
    "returnType" : "Intent",
    "comment" : "\n     * Add extended data to the intent.  The name must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param name The name of the extra data, with package prefix.\n     * @param value The IBinder data value.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #putExtras\n     * @see #removeExtra\n     * @see #getIBinderExtra(String)\n     *\n     * @deprecated\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtras(@NonNull Intent src)",
    "returnType" : "Intent",
    "comment" : "\n     * Copy all extras in 'src' in to this intent.\n     *\n     * @param src Contains the extras to copy.\n     *\n     * @see #putExtra\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent putExtras(@NonNull Bundle extras)",
    "returnType" : "Intent",
    "comment" : "\n     * Add a set of extended data to the intent.  The keys must include a package\n     * prefix, for example the app com.android.contacts would use names\n     * like \"com.android.contacts.ShowAll\".\n     *\n     * @param extras The Bundle of extras to add to this intent.\n     *\n     * @see #putExtra\n     * @see #removeExtra\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent replaceExtras(@NonNull Intent src)",
    "returnType" : "Intent",
    "comment" : "\n     * Completely replace the extras in the Intent with the extras in the\n     * given Intent.\n     *\n     * @param src The exact extras contained in this Intent are copied\n     * into the target intent, replacing any that were previously there.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent replaceExtras(@Nullable Bundle extras)",
    "returnType" : "Intent",
    "comment" : "\n     * Completely replace the extras in the Intent with the given Bundle of\n     * extras.\n     *\n     * @param extras The new set of extras in the Intent, or null to erase\n     * all extras.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeExtra(String name)",
    "returnType" : "void",
    "comment" : "\n     * Remove extended data from the intent.\n     *\n     * @see #putExtra\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent setFlags(@Flags int flags)",
    "returnType" : "Intent",
    "comment" : "\n     * Set special flags controlling how this intent is handled.  Most values\n     * here depend on the type of component being executed by the Intent,\n     * specifically the FLAG_ACTIVITY_* flags are all for use with\n     * {@link Context#startActivity Context.startActivity()} and the\n     * FLAG_RECEIVER_* flags are all for use with\n     * {@link Context#sendBroadcast(Intent) Context.sendBroadcast()}.\n     *\n     * <p>See the\n     * <a href=\"{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html\">Tasks and Back\n     * Stack</a> documentation for important information on how some of these options impact\n     * the behavior of your application.\n     *\n     * @param flags The desired flags.\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     * @see #getFlags\n     * @see #addFlags\n     * @see #removeFlags\n     ",
    "links" : [ "Context#startActivity", "Context#sendBroadcast" ]
  }, {
    "name" : "public Intent addFlags(@Flags int flags)",
    "returnType" : "Intent",
    "comment" : "\n     * Add additional flags to the intent (or with existing flags value).\n     *\n     * @param flags The new flags to set.\n     * @return Returns the same Intent object, for chaining multiple calls into\n     *         a single statement.\n     * @see #setFlags\n     * @see #getFlags\n     * @see #removeFlags\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeFlags(@Flags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Remove these flags from the intent.\n     *\n     * @param flags The flags to remove.\n     * @see #setFlags\n     * @see #getFlags\n     * @see #addFlags\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent setPackage(@Nullable String packageName)",
    "returnType" : "Intent",
    "comment" : "\n     * (Usually optional) Set an explicit application package name that limits\n     * the components this Intent will resolve to.  If left to the default\n     * value of null, all components in all applications will considered.\n     * If non-null, the Intent can only match the components in the given\n     * application package.\n     *\n     * @param packageName The name of the application package to handle the\n     * intent, or null to allow any application package.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #getPackage\n     * @see #resolveActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent setComponent(@Nullable ComponentName component)",
    "returnType" : "Intent",
    "comment" : "\n     * (Usually optional) Explicitly set the component to handle the intent.\n     * If left with the default value of null, the system will determine the\n     * appropriate class to use based on the other fields (action, data,\n     * type, categories) in the Intent.  If this class is defined, the\n     * specified class will always be used regardless of the other fields.  You\n     * should only set this value when you know you absolutely want a specific\n     * class to be used; otherwise it is better to let the system find the\n     * appropriate class so that you will respect the installed applications\n     * and user preferences.\n     *\n     * @param component The name of the application component to handle the\n     * intent, or null to let the system find one for you.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #setClass\n     * @see #setClassName(Context, String)\n     * @see #setClassName(String, String)\n     * @see #getComponent\n     * @see #resolveActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent setClassName(@NonNull Context packageContext, @NonNull String className)",
    "returnType" : "Intent",
    "comment" : "\n     * Convenience for calling {@link #setComponent} with an\n     * explicit class name.\n     *\n     * @param packageContext A Context of the application package implementing\n     * this class.\n     * @param className The name of a class inside of the application package\n     * that will be used as the component for this Intent.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #setComponent\n     * @see #setClass\n     ",
    "links" : [ "#setComponent" ]
  }, {
    "name" : "public Intent setClassName(@NonNull String packageName, @NonNull String className)",
    "returnType" : "Intent",
    "comment" : "\n     * Convenience for calling {@link #setComponent} with an\n     * explicit application package name and class name.\n     *\n     * @param packageName The name of the package implementing the desired\n     * component.\n     * @param className The name of a class inside of the application package\n     * that will be used as the component for this Intent.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #setComponent\n     * @see #setClass\n     ",
    "links" : [ "#setComponent" ]
  }, {
    "name" : "public Intent setClass(@NonNull Context packageContext, @NonNull Class<?> cls)",
    "returnType" : "Intent",
    "comment" : "\n     * Convenience for calling {@link #setComponent(ComponentName)} with the\n     * name returned by a {@link Class} object.\n     *\n     * @param packageContext A Context of the application package implementing\n     * this class.\n     * @param cls The class name to set, equivalent to\n     *            <code>setClassName(context, cls.getName())</code>.\n     *\n     * @return Returns the same Intent object, for chaining multiple calls\n     * into a single statement.\n     *\n     * @see #setComponent\n     ",
    "links" : [ "#setComponent", "Class" ]
  }, {
    "name" : "public void setSourceBounds(@Nullable Rect r)",
    "returnType" : "void",
    "comment" : "\n     * Set the bounds of the sender of this intent, in screen coordinates.  This can be\n     * used as a hint to the receiver for animations and the like.  Null means that there\n     * is no source bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int fillIn(@NonNull Intent other, @FillInFlags int flags)",
    "returnType" : "int",
    "comment" : "\n     * Copy the contents of <var>other</var> in to this object, but only\n     * where fields are not defined by this object.  For purposes of a field\n     * being defined, the following pieces of data in the Intent are\n     * considered to be separate fields:\n     *\n     * <ul>\n     * <li> action, as set by {@link #setAction}.\n     * <li> data Uri and MIME type, as set by {@link #setData(Uri)},\n     * {@link #setType(String)}, or {@link #setDataAndType(Uri, String)}.\n     * <li> identifier, as set by {@link #setIdentifier}.\n     * <li> categories, as set by {@link #addCategory}.\n     * <li> package, as set by {@link #setPackage}.\n     * <li> component, as set by {@link #setComponent(ComponentName)} or\n     * related methods.\n     * <li> source bounds, as set by {@link #setSourceBounds}.\n     * <li> selector, as set by {@link #setSelector(Intent)}.\n     * <li> clip data, as set by {@link #setClipData(ClipData)}.\n     * <li> each top-level name in the associated extras.\n     * </ul>\n     *\n     * <p>In addition, you can use the {@link #FILL_IN_ACTION},\n     * {@link #FILL_IN_DATA}, {@link #FILL_IN_IDENTIFIER}, {@link #FILL_IN_CATEGORIES},\n     * {@link #FILL_IN_PACKAGE}, {@link #FILL_IN_COMPONENT}, {@link #FILL_IN_SOURCE_BOUNDS},\n     * {@link #FILL_IN_SELECTOR}, and {@link #FILL_IN_CLIP_DATA} to override\n     * the restriction where the corresponding field will not be replaced if\n     * it is already set.\n     *\n     * <p>Note: The component field will only be copied if {@link #FILL_IN_COMPONENT}\n     * is explicitly specified.  The selector will only be copied if\n     * {@link #FILL_IN_SELECTOR} is explicitly specified.\n     *\n     * <p>For example, consider Intent A with {data=\"foo\", categories=\"bar\"}\n     * and Intent B with {action=\"gotit\", data-type=\"some/thing\",\n     * categories=\"one\",\"two\"}.\n     *\n     * <p>Calling A.fillIn(B, Intent.FILL_IN_DATA) will result in A now\n     * containing: {action=\"gotit\", data-type=\"some/thing\",\n     * categories=\"bar\"}.\n     *\n     * @param other Another Intent whose values are to be used to fill in\n     * the current one.\n     * @param flags Options to control which fields can be filled in.\n     *\n     * @return Returns a bit mask of {@link #FILL_IN_ACTION},\n     * {@link #FILL_IN_DATA}, {@link #FILL_IN_CATEGORIES}, {@link #FILL_IN_PACKAGE},\n     * {@link #FILL_IN_COMPONENT}, {@link #FILL_IN_SOURCE_BOUNDS},\n     * {@link #FILL_IN_SELECTOR} and {@link #FILL_IN_CLIP_DATA} indicating which fields were\n     * changed.\n     ",
    "links" : [ "#setAction", "#setData", "#setType", "#setDataAndType", "#setIdentifier", "#addCategory", "#setPackage", "#setComponent", "#setSourceBounds", "#setSelector", "#setClipData", "#FILL_IN_ACTION", "#FILL_IN_DATA", "#FILL_IN_IDENTIFIER", "#FILL_IN_CATEGORIES", "#FILL_IN_PACKAGE", "#FILL_IN_COMPONENT", "#FILL_IN_SOURCE_BOUNDS", "#FILL_IN_SELECTOR", "#FILL_IN_CLIP_DATA", "#FILL_IN_COMPONENT", "#FILL_IN_SELECTOR", "#FILL_IN_ACTION", "#FILL_IN_DATA", "#FILL_IN_CATEGORIES", "#FILL_IN_PACKAGE", "#FILL_IN_COMPONENT", "#FILL_IN_SOURCE_BOUNDS", "#FILL_IN_SELECTOR", "#FILL_IN_CLIP_DATA" ]
  }, {
    "name" : "public boolean filterEquals(Intent other)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if two intents are the same for the purposes of intent\n     * resolution (filtering). That is, if their action, data, type, identity,\n     * class, and categories are the same.  This does <em>not</em> compare\n     * any extra data included in the intents.  Note that technically when actually\n     * matching against an {@link IntentFilter} the identifier is ignored, while here\n     * it is directly compared for equality like the other fields.\n     *\n     * @param other The other Intent to compare against.\n     *\n     * @return Returns true if action, data, type, class, and categories\n     *         are the same.\n     ",
    "links" : [ "IntentFilter" ]
  }, {
    "name" : "private boolean hasPackageEquivalentComponent()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the component name is not null and is in the same package that this\n     * intent limited to. otherwise return {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int filterHashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generate hash code that matches semantics of filterEquals().\n     *\n     * @return Returns the hash value of the action, data, type, class, and\n     *         categories.\n     *\n     * @see #filterEquals\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toInsecureString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toInsecureStringWithClip()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toShortString(boolean secure, boolean comp, boolean extras, boolean clip)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void toShortString(StringBuilder b, boolean secure, boolean comp, boolean extras, boolean clip)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId, boolean secure, boolean comp, boolean extras, boolean clip)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void dumpDebugWithoutFieldId(ProtoOutputStream proto, boolean secure, boolean comp, boolean extras, boolean clip)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toURI()",
    "returnType" : "String",
    "comment" : "\n     * Call {@link #toUri} with 0 flags.\n     * @deprecated Use {@link #toUri} instead.\n     ",
    "links" : [ "#toUri", "#toUri" ]
  }, {
    "name" : "public String toUri(@UriFlags int flags)",
    "returnType" : "String",
    "comment" : "\n     * Convert this Intent into a String holding a URI representation of it.\n     * The returned URI string has been properly URI encoded, so it can be\n     * used with {@link Uri#parse Uri.parse(String)}.  The URI contains the\n     * Intent's data as the base URI, with an additional fragment describing\n     * the action, categories, type, flags, package, component, and extras.\n     *\n     * <p>You can convert the returned string back to an Intent with\n     * {@link #getIntent}.\n     *\n     * @param flags Additional operating flags.\n     *\n     * @return Returns a URI encoding URI string describing the entire contents\n     * of the Intent.\n     ",
    "links" : [ "Uri#parse", "#getIntent" ]
  }, {
    "name" : "private void toUriFragment(StringBuilder uri, String scheme, String defAction, String defPackage, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void toUriInner(StringBuilder uri, String scheme, String defAction, String defPackage, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Intent parseIntent(@NonNull Resources resources, @NonNull XmlPullParser parser, AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "Intent",
    "comment" : "\n     * Parses the \"intent\" element (and its children) from XML and instantiates\n     * an Intent object.  The given XML parser should be located at the tag\n     * where parsing should start (often named \"intent\"), from which the\n     * basic action, data, type, and package and class name will be\n     * retrieved.  The function will then parse in to any child elements,\n     * looking for <category android:name=\"xxx\"> tags to add categories and\n     * <extra android:name=\"xxx\" android:value=\"yyy\"> to attach extra data\n     * to the intent.\n     *\n     * @param resources The Resources to use when inflating resources.\n     * @param parser The XML parser pointing at an \"intent\" tag.\n     * @param attrs The AttributeSet interface for retrieving extended\n     * attribute data at the current <var>parser</var> location.\n     * @return An Intent object matching the XML data.\n     * @throws XmlPullParserException If there was an XML parsing error.\n     * @throws IOException If there was an I/O error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void saveToXml(XmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Intent restoreFromXml(XmlPullParser in) throws IOException, XmlPullParserException",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String normalizeMimeType(@Nullable String type)",
    "returnType" : "String",
    "comment" : "\n     * Normalize a MIME data type.\n     *\n     * <p>A normalized MIME type has white-space trimmed,\n     * content-type parameters removed, and is lower-case.\n     * This aligns the type with Android best practices for\n     * intent filtering.\n     *\n     * <p>For example, \"text/plain; charset=utf-8\" becomes \"text/plain\".\n     * \"text/x-vCard\" becomes \"text/x-vcard\".\n     *\n     * <p>All MIME types received from outside Android (such as user input,\n     * or external sources like Bluetooth, NFC, or the Internet) should\n     * be normalized before they are used to create an Intent.\n     *\n     * @param type MIME data type to normalize\n     * @return normalized MIME data type, or null if the input was null\n     * @see #setType\n     * @see #setTypeAndNormalize\n     ",
    "links" : [ ]
  }, {
    "name" : "public void prepareToLeaveProcess(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Prepare this {@link Intent} to leave an app process.\n     *\n     * @hide\n     ",
    "links" : [ "Intent" ]
  }, {
    "name" : "public void prepareToLeaveProcess(boolean leavingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Prepare this {@link Intent} to leave an app process.\n     *\n     * @hide\n     ",
    "links" : [ "Intent" ]
  }, {
    "name" : "public void prepareToEnterProcess()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasWebURI()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWebIntent()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean isImageCaptureIntent()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isImplicitImageCaptureIntent()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void fixUris(int contentUserHint)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean migrateExtraStreamToClipData()",
    "returnType" : "boolean",
    "comment" : "\n     * Migrate any {@link #EXTRA_STREAM} in {@link #ACTION_SEND} and\n     * {@link #ACTION_SEND_MULTIPLE} to {@link ClipData}. Also inspects nested\n     * intents in {@link #ACTION_CHOOSER}.\n     *\n     * @return Whether any contents were migrated.\n     * @hide\n     ",
    "links" : [ "#EXTRA_STREAM", "#ACTION_SEND", "#ACTION_SEND_MULTIPLE", "ClipData", "#ACTION_CHOOSER" ]
  }, {
    "name" : "public boolean migrateExtraStreamToClipData(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Migrate any {@link #EXTRA_STREAM} in {@link #ACTION_SEND} and\n     * {@link #ACTION_SEND_MULTIPLE} to {@link ClipData}. Also inspects nested\n     * intents in {@link #ACTION_CHOOSER}.\n     *\n     * @param context app context\n     * @return Whether any contents were migrated.\n     * @hide\n     ",
    "links" : [ "#EXTRA_STREAM", "#ACTION_SEND", "#ACTION_SEND_MULTIPLE", "ClipData", "#ACTION_CHOOSER" ]
  }, {
    "name" : "private Uri maybeConvertFileToContentUri(Context context, Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String dockStateToString(int dock)",
    "returnType" : "String",
    "comment" : "\n     * Convert the dock state to a human readable format.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ClipData.Item makeClipItem(ArrayList<Uri> streams, ArrayList<CharSequence> texts, ArrayList<String> htmlTexts, int which)",
    "returnType" : "ClipData.Item",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocument()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ATTR_ACTION", "TAG_CATEGORIES", "ATTR_CATEGORY", "TAG_EXTRA", "ATTR_TYPE", "ATTR_IDENTIFIER", "ATTR_COMPONENT", "ATTR_DATA", "ATTR_FLAGS", "ACTION_MAIN", "ACTION_VIEW", "EXTRA_FROM_STORAGE", "ACTION_DEFAULT", "ACTION_QUICK_VIEW", "ACTION_ATTACH_DATA", "ACTION_EDIT", "ACTION_INSERT_OR_EDIT", "ACTION_PICK", "ACTION_CREATE_REMINDER", "ACTION_CREATE_SHORTCUT", "EXTRA_SHORTCUT_INTENT", "EXTRA_SHORTCUT_NAME", "EXTRA_SHORTCUT_ICON", "EXTRA_SHORTCUT_ICON_RESOURCE", "ACTION_APPLICATION_PREFERENCES", "ACTION_SHOW_APP_INFO", "ACTION_CHOOSER", "ACTION_GET_CONTENT", "ACTION_DIAL", "ACTION_CALL", "ACTION_CALL_EMERGENCY", "ACTION_DIAL_EMERGENCY", "ACTION_CALL_PRIVILEGED", "ACTION_CARRIER_SETUP", "ACTION_SENDTO", "ACTION_SEND", "ACTION_SEND_MULTIPLE", "ACTION_ANSWER", "ACTION_INSERT", "ACTION_PASTE", "ACTION_DELETE", "ACTION_RUN", "ACTION_SYNC", "ACTION_PICK_ACTIVITY", "ACTION_SEARCH", "ACTION_SYSTEM_TUTORIAL", "ACTION_WEB_SEARCH", "ACTION_ASSIST", "ACTION_VOICE_ASSIST", "EXTRA_ASSIST_PACKAGE", "EXTRA_ASSIST_UID", "EXTRA_ASSIST_CONTEXT", "EXTRA_ASSIST_INPUT_HINT_KEYBOARD", "EXTRA_ASSIST_INPUT_DEVICE_ID", "ACTION_ALL_APPS", "ACTION_SET_WALLPAPER", "ACTION_BUG_REPORT", "ACTION_FACTORY_TEST", "ACTION_CALL_BUTTON", "ACTION_VOICE_COMMAND", "ACTION_SEARCH_LONG_PRESS", "ACTION_APP_ERROR", "ACTION_PENDING_INCIDENT_REPORTS_CHANGED", "ACTION_INCIDENT_REPORT_READY", "ACTION_POWER_USAGE_SUMMARY", "ACTION_DEVICE_INITIALIZATION_WIZARD", "ACTION_UPGRADE_SETUP", "ACTION_SHOW_KEYBOARD_SHORTCUTS", "ACTION_DISMISS_KEYBOARD_SHORTCUTS", "ACTION_MANAGE_NETWORK_USAGE", "ACTION_INSTALL_PACKAGE", "ACTION_INSTALL_FAILURE", "ACTION_INSTALL_INSTANT_APP_PACKAGE", "ACTION_RESOLVE_INSTANT_APP_PACKAGE", "ACTION_INSTANT_APP_RESOLVER_SETTINGS", "EXTRA_INSTALLER_PACKAGE_NAME", "EXTRA_NOT_UNKNOWN_SOURCE", "EXTRA_ORIGINATING_URI", "EXTRA_REFERRER", "EXTRA_REFERRER_NAME", "EXTRA_ORIGINATING_UID", "EXTRA_ALLOW_REPLACE", "EXTRA_RETURN_RESULT", "EXTRA_INSTALL_RESULT", "ACTION_UNINSTALL_PACKAGE", "EXTRA_UNINSTALL_ALL_USERS", "METADATA_SETUP_VERSION", "ACTION_MANAGE_APP_PERMISSIONS", "ACTION_MANAGE_APP_PERMISSION", "ACTION_MANAGE_PERMISSIONS", "ACTION_AUTO_REVOKE_PERMISSIONS", "ACTION_REVIEW_PERMISSIONS", "ACTION_VIEW_PERMISSION_USAGE", "ACTION_MANAGE_DEFAULT_APP", "EXTRA_ROLE_NAME", "ACTION_MANAGE_SPECIAL_APP_ACCESSES", "EXTRA_REMOTE_CALLBACK", "EXTRA_PACKAGE_NAME", "EXTRA_SUSPENDED_PACKAGE_EXTRAS", "EXTRA_SPLIT_NAME", "EXTRA_COMPONENT_NAME", "EXTRA_RESULT_NEEDED", "EXTRA_SHORTCUT_ID", "ACTION_MANAGE_PERMISSION_APPS", "EXTRA_PERMISSION_NAME", "EXTRA_PERMISSION_GROUP_NAME", "EXTRA_DURATION_MILLIS", "ACTION_REVIEW_PERMISSION_USAGE", "ACTION_REVIEW_ONGOING_PERMISSION_USAGE", "ACTION_REVIEW_ACCESSIBILITY_SERVICES", "ACTION_SCREEN_OFF", "ACTION_SCREEN_ON", "ACTION_DREAMING_STOPPED", "ACTION_DREAMING_STARTED", "ACTION_USER_PRESENT", "ACTION_TIME_TICK", "ACTION_TIME_CHANGED", "ACTION_DATE_CHANGED", "ACTION_TIMEZONE_CHANGED", "ACTION_CLEAR_DNS_CACHE", "ACTION_ALARM_CHANGED", "ACTION_LOCKED_BOOT_COMPLETED", "ACTION_BOOT_COMPLETED", "ACTION_CLOSE_SYSTEM_DIALOGS", "ACTION_PACKAGE_INSTALL", "ACTION_PACKAGE_ADDED", "ACTION_PACKAGE_REPLACED", "ACTION_MY_PACKAGE_REPLACED", "ACTION_PACKAGE_REMOVED", "ACTION_PACKAGE_FULLY_REMOVED", "ACTION_PACKAGE_CHANGED", "ACTION_PACKAGE_ENABLE_ROLLBACK", "ACTION_CANCEL_ENABLE_ROLLBACK", "ACTION_ROLLBACK_COMMITTED", "ACTION_QUERY_PACKAGE_RESTART", "ACTION_PACKAGE_RESTARTED", "ACTION_PACKAGE_DATA_CLEARED", "ACTION_PACKAGES_SUSPENDED", "ACTION_PACKAGES_UNSUSPENDED", "ACTION_DISTRACTING_PACKAGES_CHANGED", "ACTION_MY_PACKAGE_SUSPENDED", "ACTION_SHOW_SUSPENDED_APP_DETAILS", "ACTION_PACKAGE_UNSUSPENDED_MANUALLY", "ACTION_MY_PACKAGE_UNSUSPENDED", "ACTION_UID_REMOVED", "ACTION_PACKAGE_FIRST_LAUNCH", "ACTION_PACKAGE_NEEDS_VERIFICATION", "ACTION_PACKAGE_VERIFIED", "ACTION_INTENT_FILTER_NEEDS_VERIFICATION", "ACTION_EXTERNAL_APPLICATIONS_AVAILABLE", "ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE", "ACTION_PREFERRED_ACTIVITY_CHANGED", "ACTION_WALLPAPER_CHANGED", "ACTION_CONFIGURATION_CHANGED", "ACTION_SPLIT_CONFIGURATION_CHANGED", "ACTION_LOCALE_CHANGED", "ACTION_BATTERY_CHANGED", "ACTION_BATTERY_LEVEL_CHANGED", "ACTION_BATTERY_LOW", "ACTION_BATTERY_OKAY", "ACTION_POWER_CONNECTED", "ACTION_POWER_DISCONNECTED", "ACTION_SHUTDOWN", "ACTION_REQUEST_SHUTDOWN", "ACTION_DEVICE_STORAGE_LOW", "ACTION_DEVICE_STORAGE_OK", "ACTION_DEVICE_STORAGE_FULL", "ACTION_DEVICE_STORAGE_NOT_FULL", "ACTION_MANAGE_PACKAGE_STORAGE", "ACTION_UMS_CONNECTED", "ACTION_UMS_DISCONNECTED", "ACTION_MEDIA_REMOVED", "ACTION_MEDIA_UNMOUNTED", "ACTION_MEDIA_CHECKING", "ACTION_MEDIA_NOFS", "ACTION_MEDIA_MOUNTED", "ACTION_MEDIA_SHARED", "ACTION_MEDIA_UNSHARED", "ACTION_MEDIA_BAD_REMOVAL", "ACTION_MEDIA_UNMOUNTABLE", "ACTION_MEDIA_EJECT", "ACTION_MEDIA_SCANNER_STARTED", "ACTION_MEDIA_SCANNER_FINISHED", "ACTION_MEDIA_SCANNER_SCAN_FILE", "ACTION_MEDIA_BUTTON", "ACTION_CAMERA_BUTTON", "ACTION_GTALK_SERVICE_CONNECTED", "ACTION_GTALK_SERVICE_DISCONNECTED", "ACTION_INPUT_METHOD_CHANGED", "ACTION_AIRPLANE_MODE_CHANGED", "ACTION_PROVIDER_CHANGED", "ACTION_HEADSET_PLUG", "ACTION_ADVANCED_SETTINGS_CHANGED", "ACTION_APPLICATION_RESTRICTIONS_CHANGED", "ACTION_NEW_OUTGOING_CALL", "ACTION_REBOOT", "ACTION_DOCK_EVENT", "ACTION_IDLE_MAINTENANCE_START", "ACTION_IDLE_MAINTENANCE_END", "ACTION_REMOTE_INTENT", "ACTION_PRE_BOOT_COMPLETED", "ACTION_GET_RESTRICTION_ENTRIES", "ACTION_USER_INITIALIZE", "ACTION_USER_FOREGROUND", "ACTION_USER_BACKGROUND", "ACTION_USER_ADDED", "ACTION_USER_STARTED", "ACTION_USER_STARTING", "ACTION_USER_STOPPING", "ACTION_USER_STOPPED", "ACTION_USER_REMOVED", "ACTION_USER_SWITCHED", "ACTION_USER_UNLOCKED", "ACTION_USER_INFO_CHANGED", "ACTION_MANAGED_PROFILE_ADDED", "ACTION_MANAGED_PROFILE_REMOVED", "ACTION_MANAGED_PROFILE_UNLOCKED", "ACTION_MANAGED_PROFILE_AVAILABLE", "ACTION_MANAGED_PROFILE_UNAVAILABLE", "ACTION_DEVICE_LOCKED_CHANGED", "ACTION_QUICK_CLOCK", "ACTION_SHOW_BRIGHTNESS_DIALOG", "ACTION_GLOBAL_BUTTON", "ACTION_MEDIA_RESOURCE_GRANTED", "ACTION_OVERLAY_CHANGED", "ACTION_OPEN_DOCUMENT", "ACTION_CREATE_DOCUMENT", "ACTION_OPEN_DOCUMENT_TREE", "ACTION_TRANSLATE", "ACTION_DEFINE", "ACTION_DYNAMIC_SENSOR_CHANGED", "ACTION_MASTER_CLEAR", "ACTION_MASTER_CLEAR_NOTIFICATION", "EXTRA_FORCE_MASTER_CLEAR", "ACTION_FACTORY_RESET", "EXTRA_FORCE_FACTORY_RESET", "ACTION_SETTING_RESTORED", "EXTRA_SETTING_NAME", "EXTRA_SETTING_PREVIOUS_VALUE", "EXTRA_SETTING_NEW_VALUE", "EXTRA_SETTING_RESTORED_FROM_SDK_INT", "ACTION_PROCESS_TEXT", "ACTION_SIM_STATE_CHANGED", "EXTRA_SIM_STATE", "SIM_STATE_UNKNOWN", "SIM_STATE_NOT_READY", "SIM_STATE_ABSENT", "SIM_STATE_PRESENT", "SIM_STATE_CARD_IO_ERROR", "SIM_STATE_CARD_RESTRICTED", "SIM_STATE_LOCKED", "SIM_STATE_READY", "SIM_STATE_IMSI", "SIM_STATE_LOADED", "EXTRA_SIM_LOCKED_REASON", "SIM_LOCKED_ON_PIN", "SIM_LOCKED_ON_PUK", "SIM_LOCKED_NETWORK", "SIM_ABSENT_ON_PERM_DISABLED", "EXTRA_REBROADCAST_ON_UNLOCK", "ACTION_SERVICE_STATE", "ACTION_LOAD_DATA", "EXTRA_VOICE_REG_STATE", "EXTRA_DATA_REG_STATE", "EXTRA_VOICE_ROAMING_TYPE", "EXTRA_DATA_ROAMING_TYPE", "EXTRA_OPERATOR_ALPHA_LONG", "EXTRA_OPERATOR_ALPHA_SHORT", "EXTRA_OPERATOR_NUMERIC", "EXTRA_DATA_OPERATOR_ALPHA_LONG", "EXTRA_DATA_OPERATOR_ALPHA_SHORT", "EXTRA_DATA_OPERATOR_NUMERIC", "EXTRA_MANUAL", "EXTRA_VOICE_RADIO_TECH", "EXTRA_DATA_RADIO_TECH", "EXTRA_CSS_INDICATOR", "EXTRA_NETWORK_ID", "EXTRA_SYSTEM_ID", "EXTRA_CDMA_ROAMING_INDICATOR", "EXTRA_CDMA_DEFAULT_ROAMING_INDICATOR", "EXTRA_EMERGENCY_ONLY", "EXTRA_IS_DATA_ROAMING_FROM_REGISTRATION", "EXTRA_IS_USING_CARRIER_AGGREGATION", "EXTRA_LTE_EARFCN_RSRP_BOOST", "EXTRA_PROCESS_TEXT", "EXTRA_PROCESS_TEXT_READONLY", "ACTION_THERMAL_EVENT", "EXTRA_THERMAL_STATE", "EXTRA_THERMAL_STATE_NORMAL", "EXTRA_THERMAL_STATE_WARNING", "EXTRA_THERMAL_STATE_EXCEEDED", "ACTION_DOCK_IDLE", "ACTION_DOCK_ACTIVE", "ACTION_DEVICE_CUSTOMIZATION_READY", "ACTION_VIEW_LOCUS", "ACTION_PACKAGE_NEEDS_INTEGRITY_VERIFICATION", "CATEGORY_DEFAULT", "CATEGORY_BROWSABLE", "CATEGORY_VOICE", "CATEGORY_ALTERNATIVE", "CATEGORY_SELECTED_ALTERNATIVE", "CATEGORY_TAB", "CATEGORY_LAUNCHER", "CATEGORY_LEANBACK_LAUNCHER", "CATEGORY_CAR_LAUNCHER", "CATEGORY_LEANBACK_SETTINGS", "CATEGORY_INFO", "CATEGORY_HOME", "CATEGORY_HOME_MAIN", "CATEGORY_SECONDARY_HOME", "CATEGORY_SETUP_WIZARD", "CATEGORY_LAUNCHER_APP", "CATEGORY_PREFERENCE", "CATEGORY_DEVELOPMENT_PREFERENCE", "CATEGORY_EMBED", "CATEGORY_APP_MARKET", "CATEGORY_MONKEY", "CATEGORY_TEST", "CATEGORY_UNIT_TEST", "CATEGORY_SAMPLE_CODE", "CATEGORY_OPENABLE", "CATEGORY_TYPED_OPENABLE", "CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST", "CATEGORY_CAR_DOCK", "CATEGORY_DESK_DOCK", "CATEGORY_LE_DESK_DOCK", "CATEGORY_HE_DESK_DOCK", "CATEGORY_CAR_MODE", "CATEGORY_VR_HOME", "CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET", "CATEGORY_APP_BROWSER", "CATEGORY_APP_CALCULATOR", "CATEGORY_APP_CALENDAR", "CATEGORY_APP_CONTACTS", "CATEGORY_APP_EMAIL", "CATEGORY_APP_GALLERY", "CATEGORY_APP_MAPS", "CATEGORY_APP_MESSAGING", "CATEGORY_APP_MUSIC", "CATEGORY_APP_FILES", "EXTRA_TEMPLATE", "EXTRA_TEXT", "EXTRA_HTML_TEXT", "EXTRA_STREAM", "EXTRA_EMAIL", "EXTRA_CC", "EXTRA_BCC", "EXTRA_SUBJECT", "EXTRA_INTENT", "EXTRA_USER_ID", "EXTRA_TASK_ID", "EXTRA_ALTERNATE_INTENTS", "EXTRA_EXCLUDE_COMPONENTS", "EXTRA_CHOOSER_TARGETS", "EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER", "EXTRA_CONTENT_ANNOTATIONS", "EXTRA_RESULT_RECEIVER", "EXTRA_TITLE", "EXTRA_INITIAL_INTENTS", "EXTRA_INSTANT_APP_SUCCESS", "EXTRA_INSTANT_APP_FAILURE", "EXTRA_INSTANT_APP_HOSTNAME", "EXTRA_INSTANT_APP_TOKEN", "EXTRA_INSTANT_APP_ACTION", "EXTRA_INSTANT_APP_BUNDLES", "EXTRA_INSTANT_APP_EXTRAS", "EXTRA_UNKNOWN_INSTANT_APP", "EXTRA_VERSION_CODE", "EXTRA_LONG_VERSION_CODE", "EXTRA_CALLING_PACKAGE", "EXTRA_VERIFICATION_BUNDLE", "EXTRA_REPLACEMENT_EXTRAS", "EXTRA_CHOSEN_COMPONENT_INTENT_SENDER", "EXTRA_CHOSEN_COMPONENT", "EXTRA_KEY_EVENT", "EXTRA_KEY_CONFIRM", "EXTRA_USER_REQUESTED_SHUTDOWN", "EXTRA_DONT_KILL_APP", "EXTRA_PHONE_NUMBER", "EXTRA_UID", "EXTRA_PACKAGES", "EXTRA_DATA_REMOVED", "EXTRA_REMOVED_FOR_ALL_USERS", "EXTRA_REPLACING", "EXTRA_ALARM_COUNT", "EXTRA_DOCK_STATE", "EXTRA_DOCK_STATE_UNDOCKED", "EXTRA_DOCK_STATE_DESK", "EXTRA_DOCK_STATE_CAR", "EXTRA_DOCK_STATE_LE_DESK", "EXTRA_DOCK_STATE_HE_DESK", "METADATA_DOCK_HOME", "EXTRA_BUG_REPORT", "EXTRA_REMOTE_INTENT_TOKEN", "EXTRA_CHANGED_COMPONENT_NAME", "EXTRA_CHANGED_COMPONENT_NAME_LIST", "EXTRA_CHANGED_PACKAGE_LIST", "EXTRA_CHANGED_UID_LIST", "EXTRA_DISTRACTION_RESTRICTIONS", "EXTRA_CLIENT_LABEL", "EXTRA_CLIENT_INTENT", "EXTRA_LOCAL_ONLY", "EXTRA_ALLOW_MULTIPLE", "EXTRA_USER_HANDLE", "EXTRA_USER", "EXTRA_RESTRICTIONS_LIST", "EXTRA_RESTRICTIONS_BUNDLE", "EXTRA_RESTRICTIONS_INTENT", "EXTRA_MIME_TYPES", "EXTRA_SHUTDOWN_USERSPACE_ONLY", "EXTRA_TIME", "EXTRA_TIMEZONE", "EXTRA_TIME_PREF_24_HOUR_FORMAT", "EXTRA_TIME_PREF_VALUE_USE_12_HOUR", "EXTRA_TIME_PREF_VALUE_USE_24_HOUR", "EXTRA_TIME_PREF_VALUE_USE_LOCALE_DEFAULT", "EXTRA_REASON", "EXTRA_WIPE_EXTERNAL_STORAGE", "EXTRA_WIPE_ESIMS", "EXTRA_SIM_ACTIVATION_RESPONSE", "EXTRA_INDEX", "EXTRA_QUICK_VIEW_ADVANCED", "EXTRA_QUICK_VIEW_FEATURES", "EXTRA_QUIET_MODE", "EXTRA_CONTENT_QUERY", "EXTRA_MEDIA_RESOURCE_TYPE", "EXTRA_AUTO_LAUNCH_SINGLE_CHOICE", "EXTRA_MEDIA_RESOURCE_TYPE_VIDEO_CODEC", "EXTRA_MEDIA_RESOURCE_TYPE_AUDIO_CODEC", "EXTRA_LOCUS_ID", "FLAG_GRANT_READ_URI_PERMISSION", "FLAG_GRANT_WRITE_URI_PERMISSION", "FLAG_FROM_BACKGROUND", "FLAG_DEBUG_LOG_RESOLUTION", "FLAG_EXCLUDE_STOPPED_PACKAGES", "FLAG_INCLUDE_STOPPED_PACKAGES", "FLAG_GRANT_PERSISTABLE_URI_PERMISSION", "FLAG_GRANT_PREFIX_URI_PERMISSION", "FLAG_DIRECT_BOOT_AUTO", "FLAG_DEBUG_TRIAGED_MISSING", "FLAG_IGNORE_EPHEMERAL", "FLAG_ACTIVITY_NO_HISTORY", "FLAG_ACTIVITY_SINGLE_TOP", "FLAG_ACTIVITY_NEW_TASK", "FLAG_ACTIVITY_MULTIPLE_TASK", "FLAG_ACTIVITY_CLEAR_TOP", "FLAG_ACTIVITY_FORWARD_RESULT", "FLAG_ACTIVITY_PREVIOUS_IS_TOP", "FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS", "FLAG_ACTIVITY_BROUGHT_TO_FRONT", "FLAG_ACTIVITY_RESET_TASK_IF_NEEDED", "FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY", "FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET", "FLAG_ACTIVITY_NEW_DOCUMENT", "FLAG_ACTIVITY_NO_USER_ACTION", "FLAG_ACTIVITY_REORDER_TO_FRONT", "FLAG_ACTIVITY_NO_ANIMATION", "FLAG_ACTIVITY_CLEAR_TASK", "FLAG_ACTIVITY_TASK_ON_HOME", "FLAG_ACTIVITY_RETAIN_IN_RECENTS", "FLAG_ACTIVITY_LAUNCH_ADJACENT", "FLAG_ACTIVITY_MATCH_EXTERNAL", "FLAG_ACTIVITY_REQUIRE_NON_BROWSER", "FLAG_ACTIVITY_REQUIRE_DEFAULT", "FLAG_RECEIVER_REGISTERED_ONLY", "FLAG_RECEIVER_REPLACE_PENDING", "FLAG_RECEIVER_FOREGROUND", "FLAG_RECEIVER_OFFLOAD", "FLAG_RECEIVER_NO_ABORT", "FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT", "FLAG_RECEIVER_BOOT_UPGRADE", "FLAG_RECEIVER_INCLUDE_BACKGROUND", "FLAG_RECEIVER_EXCLUDE_BACKGROUND", "FLAG_RECEIVER_FROM_SHELL", "FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS", "IMMUTABLE_FLAGS", "URI_INTENT_SCHEME", "URI_ANDROID_APP_SCHEME", "URI_ALLOW_UNSAFE", "mAction", "mData", "mType", "mIdentifier", "mPackage", "mComponent", "mFlags", "mCategories", "mExtras", "mSourceBounds", "mSelector", "mClipData", "mContentUserHint", "mLaunchToken", "COPY_MODE_ALL", "COPY_MODE_FILTER", "COPY_MODE_HISTORY", "FILL_IN_ACTION", "FILL_IN_DATA", "FILL_IN_CATEGORIES", "FILL_IN_COMPONENT", "FILL_IN_PACKAGE", "FILL_IN_SOURCE_BOUNDS", "FILL_IN_SELECTOR", "FILL_IN_CLIP_DATA", "FILL_IN_IDENTIFIER", "CREATOR" ],
  "methodNames" : [ "public static Intent createChooser(Intent target, CharSequence title)", "public static Intent createChooser(Intent target, CharSequence title, IntentSender sender)", "public static boolean isAccessUriMode(int modeFlags)", "public Object clone()", "public Intent cloneFilter()", "public static Intent makeMainActivity(ComponentName mainActivity)", "public static Intent makeMainSelectorActivity(String selectorAction, String selectorCategory)", "public static Intent makeRestartActivityTask(ComponentName mainActivity)", "public static Intent getIntent(String uri) throws URISyntaxException", "public static Intent parseUri(String uri, @UriFlags int flags) throws URISyntaxException", "public static Intent getIntentOld(String uri) throws URISyntaxException", "private static Intent getIntentOld(String uri, int flags) throws URISyntaxException", "public static Intent parseCommandArgs(ShellCommand cmd, CommandOptionHandler optionHandler) throws URISyntaxException", "public static void printIntentArgsHelp(PrintWriter pw, String prefix)", "public String getAction()", "public Uri getData()", "public String getDataString()", "public String getScheme()", "public String getType()", "public String resolveType(@NonNull Context context)", "public String resolveType(@NonNull ContentResolver resolver)", "public String resolveTypeIfNeeded(@NonNull ContentResolver resolver)", "public String getIdentifier()", "public boolean hasCategory(String category)", "public Set<String> getCategories()", "public Intent getSelector()", "public ClipData getClipData()", "public int getContentUserHint()", "public String getLaunchToken()", "public void setLaunchToken(String launchToken)", "public void setExtrasClassLoader(@Nullable ClassLoader loader)", "public boolean hasExtra(String name)", "public boolean hasFileDescriptors()", "public void setAllowFds(boolean allowFds)", "public void setDefusable(boolean defusable)", "public Object getExtra(String name)", "public boolean getBooleanExtra(String name, boolean defaultValue)", "public byte getByteExtra(String name, byte defaultValue)", "public short getShortExtra(String name, short defaultValue)", "public char getCharExtra(String name, char defaultValue)", "public int getIntExtra(String name, int defaultValue)", "public long getLongExtra(String name, long defaultValue)", "public float getFloatExtra(String name, float defaultValue)", "public double getDoubleExtra(String name, double defaultValue)", "public String getStringExtra(String name)", "public CharSequence getCharSequenceExtra(String name)", "public T getParcelableExtra(String name)", "public Parcelable[] getParcelableArrayExtra(String name)", "public ArrayList<T> getParcelableArrayListExtra(String name)", "public Serializable getSerializableExtra(String name)", "public ArrayList<Integer> getIntegerArrayListExtra(String name)", "public ArrayList<String> getStringArrayListExtra(String name)", "public ArrayList<CharSequence> getCharSequenceArrayListExtra(String name)", "public boolean[] getBooleanArrayExtra(String name)", "public byte[] getByteArrayExtra(String name)", "public short[] getShortArrayExtra(String name)", "public char[] getCharArrayExtra(String name)", "public int[] getIntArrayExtra(String name)", "public long[] getLongArrayExtra(String name)", "public float[] getFloatArrayExtra(String name)", "public double[] getDoubleArrayExtra(String name)", "public String[] getStringArrayExtra(String name)", "public CharSequence[] getCharSequenceArrayExtra(String name)", "public Bundle getBundleExtra(String name)", "public IBinder getIBinderExtra(String name)", "public Object getExtra(String name, Object defaultValue)", "public Bundle getExtras()", "public void removeUnsafeExtras()", "public boolean canStripForHistory()", "public Intent maybeStripForHistory()", "public int getFlags()", "public boolean isExcludingStopped()", "public String getPackage()", "public ComponentName getComponent()", "public Rect getSourceBounds()", "public ComponentName resolveActivity(@NonNull PackageManager pm)", "public ActivityInfo resolveActivityInfo(@NonNull PackageManager pm, @PackageManager.ComponentInfoFlags int flags)", "public ComponentName resolveSystemService(@NonNull PackageManager pm, @PackageManager.ComponentInfoFlags int flags)", "public Intent setAction(@Nullable String action)", "public Intent setData(@Nullable Uri data)", "public Intent setDataAndNormalize(@NonNull Uri data)", "public Intent setType(@Nullable String type)", "public Intent setTypeAndNormalize(@Nullable String type)", "public Intent setDataAndType(@Nullable Uri data, @Nullable String type)", "public Intent setDataAndTypeAndNormalize(@NonNull Uri data, @Nullable String type)", "public Intent setIdentifier(@Nullable String identifier)", "public Intent addCategory(String category)", "public void removeCategory(String category)", "public void setSelector(@Nullable Intent selector)", "public void setClipData(@Nullable ClipData clip)", "public void prepareToLeaveUser(int userId)", "public Intent putExtra(String name, boolean value)", "public Intent putExtra(String name, byte value)", "public Intent putExtra(String name, char value)", "public Intent putExtra(String name, short value)", "public Intent putExtra(String name, int value)", "public Intent putExtra(String name, long value)", "public Intent putExtra(String name, float value)", "public Intent putExtra(String name, double value)", "public Intent putExtra(String name, @Nullable String value)", "public Intent putExtra(String name, @Nullable CharSequence value)", "public Intent putExtra(String name, @Nullable Parcelable value)", "public Intent putExtra(String name, @Nullable Parcelable[] value)", "public Intent putParcelableArrayListExtra(String name, @Nullable ArrayList<? extends Parcelable> value)", "public Intent putIntegerArrayListExtra(String name, @Nullable ArrayList<Integer> value)", "public Intent putStringArrayListExtra(String name, @Nullable ArrayList<String> value)", "public Intent putCharSequenceArrayListExtra(String name, @Nullable ArrayList<CharSequence> value)", "public Intent putExtra(String name, @Nullable Serializable value)", "public Intent putExtra(String name, @Nullable boolean[] value)", "public Intent putExtra(String name, @Nullable byte[] value)", "public Intent putExtra(String name, @Nullable short[] value)", "public Intent putExtra(String name, @Nullable char[] value)", "public Intent putExtra(String name, @Nullable int[] value)", "public Intent putExtra(String name, @Nullable long[] value)", "public Intent putExtra(String name, @Nullable float[] value)", "public Intent putExtra(String name, @Nullable double[] value)", "public Intent putExtra(String name, @Nullable String[] value)", "public Intent putExtra(String name, @Nullable CharSequence[] value)", "public Intent putExtra(String name, @Nullable Bundle value)", "public Intent putExtra(String name, IBinder value)", "public Intent putExtras(@NonNull Intent src)", "public Intent putExtras(@NonNull Bundle extras)", "public Intent replaceExtras(@NonNull Intent src)", "public Intent replaceExtras(@Nullable Bundle extras)", "public void removeExtra(String name)", "public Intent setFlags(@Flags int flags)", "public Intent addFlags(@Flags int flags)", "public void removeFlags(@Flags int flags)", "public Intent setPackage(@Nullable String packageName)", "public Intent setComponent(@Nullable ComponentName component)", "public Intent setClassName(@NonNull Context packageContext, @NonNull String className)", "public Intent setClassName(@NonNull String packageName, @NonNull String className)", "public Intent setClass(@NonNull Context packageContext, @NonNull Class<?> cls)", "public void setSourceBounds(@Nullable Rect r)", "public int fillIn(@NonNull Intent other, @FillInFlags int flags)", "public boolean filterEquals(Intent other)", "private boolean hasPackageEquivalentComponent()", "public int filterHashCode()", "public String toString()", "public String toInsecureString()", "public String toInsecureStringWithClip()", "public String toShortString(boolean secure, boolean comp, boolean extras, boolean clip)", "public void toShortString(StringBuilder b, boolean secure, boolean comp, boolean extras, boolean clip)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public void dumpDebug(ProtoOutputStream proto)", "public void dumpDebug(ProtoOutputStream proto, long fieldId, boolean secure, boolean comp, boolean extras, boolean clip)", "private void dumpDebugWithoutFieldId(ProtoOutputStream proto, boolean secure, boolean comp, boolean extras, boolean clip)", "public String toURI()", "public String toUri(@UriFlags int flags)", "private void toUriFragment(StringBuilder uri, String scheme, String defAction, String defPackage, int flags)", "private void toUriInner(StringBuilder uri, String scheme, String defAction, String defPackage, int flags)", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public void readFromParcel(Parcel in)", "public static Intent parseIntent(@NonNull Resources resources, @NonNull XmlPullParser parser, AttributeSet attrs) throws XmlPullParserException, IOException", "public void saveToXml(XmlSerializer out) throws IOException", "public static Intent restoreFromXml(XmlPullParser in) throws IOException, XmlPullParserException", "public static String normalizeMimeType(@Nullable String type)", "public void prepareToLeaveProcess(Context context)", "public void prepareToLeaveProcess(boolean leavingPackage)", "public void prepareToEnterProcess()", "public boolean hasWebURI()", "public boolean isWebIntent()", "private boolean isImageCaptureIntent()", "public boolean isImplicitImageCaptureIntent()", "public void fixUris(int contentUserHint)", "public boolean migrateExtraStreamToClipData()", "public boolean migrateExtraStreamToClipData(Context context)", "private Uri maybeConvertFileToContentUri(Context context, Uri uri)", "public static String dockStateToString(int dock)", "private static ClipData.Item makeClipItem(ArrayList<Uri> streams, ArrayList<CharSequence> texts, ArrayList<String> htmlTexts, int which)", "public boolean isDocument()" ]
}