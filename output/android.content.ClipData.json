{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ClipData.java",
  "packageName" : "android.content",
  "className" : "ClipData",
  "comment" : "\n * Representation of a clipped data on the clipboard.\n *\n * <p>ClipData is a complex type containing one or more Item instances,\n * each of which can hold one or more representations of an item of data.\n * For display to the user, it also has a label.</p>\n *\n * <p>A ClipData contains a {@link ClipDescription}, which describes\n * important meta-data about the clip.  In particular, its\n * {@link ClipDescription#getMimeType(int) getDescription().getMimeType(int)}\n * must return correct MIME type(s) describing the data in the clip.  For help\n * in correctly constructing a clip with the correct MIME type, use\n * {@link #newPlainText(CharSequence, CharSequence)},\n * {@link #newUri(ContentResolver, CharSequence, Uri)}, and\n * {@link #newIntent(CharSequence, Intent)}.\n *\n * <p>Each Item instance can be one of three main classes of data: a simple\n * CharSequence of text, a single Intent object, or a Uri.  See {@link Item}\n * for more details.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using the clipboard framework, read the\n * <a href=\"{@docRoot}guide/topics/clipboard/copy-paste.html\">Copy and Paste</a>\n * developer guide.</p>\n * </div>\n *\n * <a name=\"ImplementingPaste\"></a>\n * <h3>Implementing Paste or Drop</h3>\n *\n * <p>To implement a paste or drop of a ClipData object into an application,\n * the application must correctly interpret the data for its use.  If the {@link Item}\n * it contains is simple text or an Intent, there is little to be done: text\n * can only be interpreted as text, and an Intent will typically be used for\n * creating shortcuts (such as placing icons on the home screen) or other\n * actions.\n *\n * <p>If all you want is the textual representation of the clipped data, you\n * can use the convenience method {@link Item#coerceToText Item.coerceToText}.\n * In this case there is generally no need to worry about the MIME types\n * reported by {@link ClipDescription#getMimeType(int) getDescription().getMimeType(int)},\n * since any clip item can always be converted to a string.\n *\n * <p>More complicated exchanges will be done through URIs, in particular\n * \"content:\" URIs.  A content URI allows the recipient of a ClipData item\n * to interact closely with the ContentProvider holding the data in order to\n * negotiate the transfer of that data.  The clip must also be filled in with\n * the available MIME types; {@link #newUri(ContentResolver, CharSequence, Uri)}\n * will take care of correctly doing this.\n *\n * <p>For example, here is the paste function of a simple NotePad application.\n * When retrieving the data from the clipboard, it can do either two things:\n * if the clipboard contains a URI reference to an existing note, it copies\n * the entire structure of the note into a new note; otherwise, it simply\n * coerces the clip into text and uses that as the new note's contents.\n *\n * {@sample development/samples/NotePad/src/com/example/android/notepad/NoteEditor.java\n *      paste}\n *\n * <p>In many cases an application can paste various types of streams of data.  For\n * example, an e-mail application may want to allow the user to paste an image\n * or other binary data as an attachment.  This is accomplished through the\n * ContentResolver {@link ContentResolver#getStreamTypes(Uri, String)} and\n * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, android.os.Bundle)}\n * methods.  These allow a client to discover the type(s) of data that a particular\n * content URI can make available as a stream and retrieve the stream of data.\n *\n * <p>For example, the implementation of {@link Item#coerceToText Item.coerceToText}\n * itself uses this to try to retrieve a URI clip as a stream of text:\n *\n * {@sample frameworks/base/core/java/android/content/ClipData.java coerceToText}\n *\n * <a name=\"ImplementingCopy\"></a>\n * <h3>Implementing Copy or Drag</h3>\n *\n * <p>To be the source of a clip, the application must construct a ClipData\n * object that any recipient can interpret best for their context.  If the clip\n * is to contain a simple text, Intent, or URI, this is easy: an {@link Item}\n * containing the appropriate data type can be constructed and used.\n *\n * <p>More complicated data types require the implementation of support in\n * a ContentProvider for describing and generating the data for the recipient.\n * A common scenario is one where an application places on the clipboard the\n * content: URI of an object that the user has copied, with the data at that\n * URI consisting of a complicated structure that only other applications with\n * direct knowledge of the structure can use.\n *\n * <p>For applications that do not have intrinsic knowledge of the data structure,\n * the content provider holding it can make the data available as an arbitrary\n * number of types of data streams.  This is done by implementing the\n * ContentProvider {@link ContentProvider#getStreamTypes(Uri, String)} and\n * {@link ContentProvider#openTypedAssetFile(Uri, String, android.os.Bundle)}\n * methods.\n *\n * <p>Going back to our simple NotePad application, this is the implementation\n * it may have to convert a single note URI (consisting of a title and the note\n * text) into a stream of plain text data.\n *\n * {@sample development/samples/NotePad/src/com/example/android/notepad/NotePadProvider.java\n *      stream}\n *\n * <p>The copy operation in our NotePad application is now just a simple matter\n * of making a clip containing the URI of the note being copied:\n *\n * {@sample development/samples/NotePad/src/com/example/android/notepad/NotesList.java\n *      copy}\n *\n * <p>Note if a paste operation needs this clip as text (for example to paste\n * into an editor), then {@link Item#coerceToText(Context)} will ask the content\n * provider for the clip URI as text and successfully paste the entire note.\n ",
  "links" : [ "#coerceToText(Context)", "Item", "android.content.ContentProvider#openTypedAssetFile(Uri", "#newUri(ContentResolver", "#newPlainText(CharSequence", "android.content.ContentResolver#getStreamTypes(Uri", "#coerceToText", "android.content.ClipDescription", "android.content.ContentProvider#getStreamTypes(Uri", "android.content.ContentResolver#openTypedAssetFileDescriptor(Uri", "#newIntent(CharSequence", "android.content.ClipDescription#getMimeType(int)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIMETYPES_TEXT_PLAIN",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIMETYPES_TEXT_HTML",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIMETYPES_TEXT_URILIST",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIMETYPES_TEXT_INTENT",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipDescription",
    "type" : "ClipDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItems",
    "type" : "ArrayList<Item>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParcelItemActivityInfos",
    "type" : "boolean",
    "comment" : " {@link #copyForTransferWithActivityInfo}.",
    "links" : [ "#copyForTransferWithActivityInfo" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ClipData>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ClipData copyForTransferWithActivityInfo()",
    "returnType" : "ClipData",
    "comment" : "\n     * Returns a copy of the ClipData which will parcel the Item's activity infos.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean willParcelWithActivityInfo()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this clip data will parcel the Item's activity infos.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ClipData newPlainText(CharSequence label, CharSequence text)",
    "returnType" : "ClipData",
    "comment" : "\n     * Create a new ClipData holding data of the type\n     * {@link ClipDescription#MIMETYPE_TEXT_PLAIN}.\n     *\n     * @param label User-visible label for the clip data.\n     * @param text The actual text in the clip.\n     * @return Returns a new ClipData containing the specified data.\n     ",
    "links" : [ "android.content.ClipDescription#MIMETYPE_TEXT_PLAIN" ]
  }, {
    "name" : "public static ClipData newHtmlText(CharSequence label, CharSequence text, String htmlText)",
    "returnType" : "ClipData",
    "comment" : "\n     * Create a new ClipData holding data of the type\n     * {@link ClipDescription#MIMETYPE_TEXT_HTML}.\n     *\n     * @param label User-visible label for the clip data.\n     * @param text The text of clip as plain text, for receivers that don't\n     * handle HTML.  This is required.\n     * @param htmlText The actual HTML text in the clip.\n     * @return Returns a new ClipData containing the specified data.\n     ",
    "links" : [ "android.content.ClipDescription#MIMETYPE_TEXT_HTML" ]
  }, {
    "name" : "public static ClipData newIntent(CharSequence label, Intent intent)",
    "returnType" : "ClipData",
    "comment" : "\n     * Create a new ClipData holding an Intent with MIME type\n     * {@link ClipDescription#MIMETYPE_TEXT_INTENT}.\n     *\n     * @param label User-visible label for the clip data.\n     * @param intent The actual Intent in the clip.\n     * @return Returns a new ClipData containing the specified data.\n     ",
    "links" : [ "android.content.ClipDescription#MIMETYPE_TEXT_INTENT" ]
  }, {
    "name" : "public static ClipData newUri(ContentResolver resolver, CharSequence label, Uri uri)",
    "returnType" : "ClipData",
    "comment" : "\n     * Create a new ClipData holding a URI.  If the URI is a content: URI,\n     * this will query the content provider for the MIME type of its data and\n     * use that as the MIME type.  Otherwise, it will use the MIME type\n     * {@link ClipDescription#MIMETYPE_TEXT_URILIST}.\n     *\n     * @param resolver ContentResolver used to get information about the URI.\n     * @param label User-visible label for the clip data.\n     * @param uri The URI in the clip.\n     * @return Returns a new ClipData containing the specified data.\n     ",
    "links" : [ "android.content.ClipDescription#MIMETYPE_TEXT_URILIST" ]
  }, {
    "name" : "private static String[] getMimeTypes(ContentResolver resolver, Uri uri)",
    "returnType" : "String[]",
    "comment" : "\n     * Finds all applicable MIME types for a given URI.\n     *\n     * @param resolver ContentResolver used to get information about the URI.\n     * @param uri The URI.\n     * @return Returns an array of MIME types.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ClipData newRawUri(CharSequence label, Uri uri)",
    "returnType" : "ClipData",
    "comment" : "\n     * Create a new ClipData holding an URI with MIME type\n     * {@link ClipDescription#MIMETYPE_TEXT_URILIST}.\n     * Unlike {@link #newUri(ContentResolver, CharSequence, Uri)}, nothing\n     * is inferred about the URI -- if it is a content: URI holding a bitmap,\n     * the reported type will still be uri-list.  Use this with care!\n     *\n     * @param label User-visible label for the clip data.\n     * @param uri The URI in the clip.\n     * @return Returns a new ClipData containing the specified data.\n     ",
    "links" : [ "android.content.ClipDescription#MIMETYPE_TEXT_URILIST", "#newUri(ContentResolver" ]
  }, {
    "name" : "public ClipDescription getDescription()",
    "returnType" : "ClipDescription",
    "comment" : "\n     * Return the {@link ClipDescription} associated with this data, describing\n     * what it contains.\n     ",
    "links" : [ "android.content.ClipDescription" ]
  }, {
    "name" : "public void addItem(Item item)",
    "returnType" : "void",
    "comment" : "\n     * Add a new Item to the overall ClipData container.\n     * <p> This method will <em>not</em> update the list of available MIME types in the\n     * {@link ClipDescription}. It should be used only when adding items which do not add new\n     * MIME types to this clip. If this is not the case, use {@link #addItem(ContentResolver, Item)}\n     * or call {@link #ClipData(CharSequence, String[], Item)} with a complete list of MIME types.\n     * @param item Item to be added.\n     ",
    "links" : [ "android.content.ClipDescription", "#addItem(ContentResolver", "#ClipData(CharSequence" ]
  }, {
    "name" : "public void addItem(ContentResolver resolver, Item item)",
    "returnType" : "void",
    "comment" : "\n     * Add a new Item to the overall ClipData container.\n     * <p> Unlike {@link #addItem(Item)}, this method will update the list of available MIME types\n     * in the {@link ClipDescription}.\n     * @param resolver ContentResolver used to get information about the URI possibly contained in\n     * the item.\n     * @param item Item to be added.\n     ",
    "links" : [ "android.content.ClipDescription", "#addItem(Item)" ]
  }, {
    "name" : "public Bitmap getIcon()",
    "returnType" : "Bitmap",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getItemCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of items in the clip data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Item getItemAt(int index)",
    "returnType" : "Item",
    "comment" : "\n     * Return a single item inside of the clip data.  The index can range\n     * from 0 to {@link #getItemCount()}-1.\n     ",
    "links" : [ "#getItemCount()" ]
  }, {
    "name" : "public void setItemAt(int index, Item item)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void prepareToLeaveProcess(boolean leavingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Prepare this {@link ClipData} to leave an app process.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.ClipData" ]
  }, {
    "name" : "public void prepareToLeaveProcess(boolean leavingPackage, int intentFlags)",
    "returnType" : "void",
    "comment" : "\n     * Prepare this {@link ClipData} to leave an app process.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.ClipData" ]
  }, {
    "name" : "public void prepareToLeaveProcess$ravenwood(boolean leavingPackage, int intentFlags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void prepareToEnterProcess(AttributionSource source)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void fixUris(int contentUserHint)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void fixUrisLight(int contentUserHint)",
    "returnType" : "void",
    "comment" : "\n     * Only fixing the data field of the intents\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isStyledText()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toShortString(StringBuilder b, boolean redactContent)",
    "returnType" : "void",
    "comment" : "\n     * Appends this clip to the given builder.\n     * @param redactContent If true, redacts common forms of PII; otherwise appends full details.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void collectUris(List<Uri> out)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ClipData copyForTransferWithActivityInfo()", "public boolean willParcelWithActivityInfo()", "public static ClipData newPlainText(CharSequence label, CharSequence text)", "public static ClipData newHtmlText(CharSequence label, CharSequence text, String htmlText)", "public static ClipData newIntent(CharSequence label, Intent intent)", "public static ClipData newUri(ContentResolver resolver, CharSequence label, Uri uri)", "private static String[] getMimeTypes(ContentResolver resolver, Uri uri)", "public static ClipData newRawUri(CharSequence label, Uri uri)", "public ClipDescription getDescription()", "public void addItem(Item item)", "public void addItem(ContentResolver resolver, Item item)", "public Bitmap getIcon()", "public int getItemCount()", "public Item getItemAt(int index)", "public void setItemAt(int index, Item item)", "public void prepareToLeaveProcess(boolean leavingPackage)", "public void prepareToLeaveProcess(boolean leavingPackage, int intentFlags)", "public void prepareToLeaveProcess$ravenwood(boolean leavingPackage, int intentFlags)", "public void prepareToEnterProcess(AttributionSource source)", "public void fixUris(int contentUserHint)", "public void fixUrisLight(int contentUserHint)", "private boolean isStyledText()", "public String toString()", "public void toShortString(StringBuilder b, boolean redactContent)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public void collectUris(List<Uri> out)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "MIMETYPES_TEXT_PLAIN", "MIMETYPES_TEXT_HTML", "MIMETYPES_TEXT_URILIST", "MIMETYPES_TEXT_INTENT", "mClipDescription", "mIcon", "mItems", "mParcelItemActivityInfos", "CREATOR" ]
}