{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/perftests/utils/BenchmarkState.java",
  "packageName" : "android.perftests.utils",
  "className" : "BenchmarkState",
  "comment" : "\n * Provides a benchmark framework.\n *\n * Example usage:\n * // Executes the code while keepRunning returning true.\n *\n * public void sampleMethod() {\n *     BenchmarkState state = new BenchmarkState();\n *\n *     int[] src = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n *     while (state.keepRunning()) {\n *         int[] dest = new int[src.length];\n *         System.arraycopy(src, 0, dest, 0, src.length);\n *     }\n *     System.out.println(state.summaryLine());\n * }\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENABLE_PROFILING",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOT_STARTED",
    "type" : "int",
    "comment" : " The benchmark has not started yet.",
    "links" : [ ]
  }, {
    "name" : "WARMUP",
    "type" : "int",
    "comment" : " The benchmark is warming up.",
    "links" : [ ]
  }, {
    "name" : "RUNNING",
    "type" : "int",
    "comment" : " The benchmark is running.",
    "links" : [ ]
  }, {
    "name" : "FINISHED",
    "type" : "int",
    "comment" : " The benchmark has stopped.",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : " Current benchmark state.",
    "links" : [ ]
  }, {
    "name" : "WARMUP_DURATION_NS",
    "type" : "long",
    "comment" : " warm-up for at least 250ms",
    "links" : [ ]
  }, {
    "name" : "WARMUP_MIN_ITERATIONS",
    "type" : "int",
    "comment" : " minimum iterations to warm-up for",
    "links" : [ ]
  }, {
    "name" : "TARGET_TEST_DURATION_NS",
    "type" : "long",
    "comment" : " target testing for 500 ms",
    "links" : [ ]
  }, {
    "name" : "MAX_TEST_ITERATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_TEST_ITERATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REPEAT_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTimeNs",
    "type" : "long",
    "comment" : " Previously captured System.nanoTime().",
    "links" : [ ]
  }, {
    "name" : "mPaused",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPausedTimeNs",
    "type" : "long",
    "comment" : " The System.nanoTime() when the pauseTiming() is called.",
    "links" : [ ]
  }, {
    "name" : "mPausedDurationNs",
    "type" : "long",
    "comment" : " The duration of paused state in nano sec.",
    "links" : [ ]
  }, {
    "name" : "mIteration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxIterations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRepeatCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStats",
    "type" : "Stats",
    "comment" : " The computation needs double precision, but long int is fine for final reporting.",
    "links" : [ ]
  }, {
    "name" : "mResults",
    "type" : "ArrayList<Long>",
    "comment" : " Individual duration in nano seconds.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static final long ms2ns(long ms)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pauseTiming()",
    "returnType" : "void",
    "comment" : " This method can be called only when the timer is running.",
    "links" : [ ]
  }, {
    "name" : "public void resumeTiming()",
    "returnType" : "void",
    "comment" : " This method can be called only when the timer is stopped.",
    "links" : [ ]
  }, {
    "name" : "private void beginWarmup()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void beginBenchmark(long warmupDuration, int iterations)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean startNextTestRun()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean keepRunning()",
    "returnType" : "boolean",
    "comment" : "\n     * Judges whether the benchmark needs more samples.\n     *\n     * For the usage, see class comment.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long mean()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long median()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long min()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long standardDeviation()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String summaryLine()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendFullStatusReport(Instrumentation instrumentation, String key)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ENABLE_PROFILING", "NOT_STARTED", "WARMUP", "RUNNING", "FINISHED", "mState", "WARMUP_DURATION_NS", "WARMUP_MIN_ITERATIONS", "TARGET_TEST_DURATION_NS", "MAX_TEST_ITERATIONS", "MIN_TEST_ITERATIONS", "REPEAT_COUNT", "mStartTimeNs", "mPaused", "mPausedTimeNs", "mPausedDurationNs", "mIteration", "mMaxIterations", "mRepeatCount", "mStats", "mResults" ],
  "methodNames" : [ "private static final long ms2ns(long ms)", "public void pauseTiming()", "public void resumeTiming()", "private void beginWarmup()", "private void beginBenchmark(long warmupDuration, int iterations)", "private boolean startNextTestRun()", "public boolean keepRunning()", "private long mean()", "private long median()", "private long min()", "private long standardDeviation()", "private String summaryLine()", "public void sendFullStatusReport(Instrumentation instrumentation, String key)" ]
}