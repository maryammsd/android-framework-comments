{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/ip/IpClientManager.java",
  "packageName" : "android.net.ip",
  "className" : "IpClientManager",
  "comment" : "\n * A convenience wrapper for IpClient.\n *\n * Wraps IIpClient calls, making them a bit more friendly to use. Currently handles:\n * - Clearing calling identity\n * - Ignoring RemoteExceptions\n * - Converting to stable parcelables\n *\n * By design, all methods on IIpClient are asynchronous oneway IPCs and are thus void. All the\n * wrapper methods in this class return a boolean that callers can use to determine whether\n * RemoteException was thrown.\n ",
  "variables" : [ {
    "name" : "mIpClient",
    "type" : "IIpClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void log(String s, Throwable e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean completedPreDhcpAction()",
    "returnType" : "boolean",
    "comment" : "\n     * For clients using {@link ProvisioningConfiguration.Builder#withPreDhcpAction()}, must be\n     * called after {@link IIpClientCallbacks#onPreDhcpAction} to indicate that DHCP is clear to\n     * proceed.\n     ",
    "links" : [ "#onPreDhcpAction", "ProvisioningConfiguration.Builder#withPreDhcpAction()" ]
  }, {
    "name" : "public boolean confirmConfiguration()",
    "returnType" : "boolean",
    "comment" : "\n     * Confirm the provisioning configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean readPacketFilterComplete(byte[] data)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate that packet filter read is complete.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shutdown()",
    "returnType" : "boolean",
    "comment" : "\n     * Shut down this IpClient instance altogether.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startProvisioning(ProvisioningConfiguration prov)",
    "returnType" : "boolean",
    "comment" : "\n     * Start provisioning with the provided parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean stop()",
    "returnType" : "boolean",
    "comment" : "\n     * Stop this IpClient.\n     *\n     * <p>This does not shut down the StateMachine itself, which is handled by {@link #shutdown()}.\n     ",
    "links" : [ "#shutdown()" ]
  }, {
    "name" : "public boolean setTcpBufferSizes(String tcpBufferSizes)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the TCP buffer sizes to use.\n     *\n     * This may be called, repeatedly, at any time before or after a call to\n     * #startProvisioning(). The setting is cleared upon calling #stop().\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setHttpProxy(ProxyInfo proxyInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the HTTP Proxy configuration to use.\n     *\n     * This may be called, repeatedly, at any time before or after a call to\n     * #startProvisioning(). The setting is cleared upon calling #stop().\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setMulticastFilter(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable or disable the multicast filter.  Attempts to use APF to accomplish the filtering,\n     * if not, Callback.setFallbackMulticastFilter() is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addKeepalivePacketFilter(int slot, TcpKeepalivePacketData pkt)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a TCP keepalive packet filter before setting up keepalive offload.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addKeepalivePacketFilter(int slot, NattKeepalivePacketData pkt)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a NAT-T keepalive packet filter before setting up keepalive offload.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeKeepalivePacketFilter(int slot)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove a keepalive packet filter after stopping keepalive offload.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setL2KeyAndGroupHint(String l2Key, String groupHint)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the L2 key and group hint for storing info into the memory store.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean notifyPreconnectionComplete(boolean success)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify IpClient that preconnection is complete and that the link is ready for use.\n     * The success parameter indicates whether the packets passed in by 'onPreconnectionStart'\n     * were successfully sent to the network or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateLayer2Information(Layer2Information info)",
    "returnType" : "boolean",
    "comment" : "\n     * Update the bssid, L2 key and group hint layer2 information.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mIpClient", "mTag" ],
  "methodNames" : [ "private void log(String s, Throwable e)", "public boolean completedPreDhcpAction()", "public boolean confirmConfiguration()", "public boolean readPacketFilterComplete(byte[] data)", "public boolean shutdown()", "public boolean startProvisioning(ProvisioningConfiguration prov)", "public boolean stop()", "public boolean setTcpBufferSizes(String tcpBufferSizes)", "public boolean setHttpProxy(ProxyInfo proxyInfo)", "public boolean setMulticastFilter(boolean enabled)", "public boolean addKeepalivePacketFilter(int slot, TcpKeepalivePacketData pkt)", "public boolean addKeepalivePacketFilter(int slot, NattKeepalivePacketData pkt)", "public boolean removeKeepalivePacketFilter(int slot)", "public boolean setL2KeyAndGroupHint(String l2Key, String groupHint)", "public boolean notifyPreconnectionComplete(boolean success)", "public boolean updateLayer2Information(Layer2Information info)" ]
}