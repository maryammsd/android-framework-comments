{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/timezone/CountryTimeZones.java",
  "packageName" : "android.timezone",
  "className" : "CountryTimeZones",
  "comment" : "\n * Information about a country's time zones.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mDelegate",
    "type" : "libcore.timezone.CountryTimeZones",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean matchesCountryCode(@NonNull String countryIso)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the ISO code for the country is a case-insensitive match for the one\n     * supplied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultTimeZoneId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default time zone ID for the country. Can return {@code null} in cases when no\n     * data is available or the time zone ID was not recognized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone getDefaultTimeZone()",
    "returnType" : "TimeZone",
    "comment" : "\n     * Returns the default time zone for the country. Can return {@code null} in cases when no data\n     * is available or the time zone ID was not recognized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultTimeZoneBoosted()",
    "returnType" : "boolean",
    "comment" : "\n     * Qualifier for a country's default time zone. {@code true} indicates that the country's\n     * default time zone would be a good choice <em>generally</em> when there's no UTC offset\n     * information available. This will only be {@code true} in countries with multiple zones where\n     * a large majority of the population is covered by only one of them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasUtcZone(long whenMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the country has at least one time zone that uses UTC at the given\n     * time. This is an efficient check when trying to validate received UTC offset information.\n     * For example, there are situations when a detected zero UTC offset cannot be distinguished\n     * from \"no information available\" or a corrupted signal. This method is useful because checking\n     * offset information for large countries is relatively expensive but it is generally only the\n     * countries close to the prime meridian that use UTC at <em>any</em> time of the year.\n     *\n     * @param whenMillis the time the offset information is for in milliseconds since the beginning\n     *     of the Unix epoch\n     ",
    "links" : [ ]
  }, {
    "name" : "public OffsetResult lookupByOffsetWithBias(long whenMillis, @Nullable TimeZone bias, int totalOffsetMillis, boolean isDst)",
    "returnType" : "OffsetResult",
    "comment" : "\n     * Returns a time zone for the country, if there is one, that matches the supplied properties.\n     * If there are multiple matches and the {@code bias} is one of them then it is returned,\n     * otherwise an arbitrary match is returned based on the {@link\n     * #getEffectiveTimeZoneMappingsAt(long)} ordering.\n     *\n     * @param whenMillis the UTC time to match against\n     * @param bias the time zone to prefer, can be {@code null} to indicate there is no preference\n     * @param totalOffsetMillis the offset from UTC at {@code whenMillis}\n     * @param isDst the Daylight Savings Time state at {@code whenMillis}. {@code true} means DST,\n     *     {@code false} means not DST\n     * @return an {@link OffsetResult} with information about a matching zone, or {@code null} if\n     *     there is no match\n     ",
    "links" : [ "#getEffectiveTimeZoneMappingsAt(long)", "OffsetResult" ]
  }, {
    "name" : "public OffsetResult lookupByOffsetWithBias(long whenMillis, @Nullable TimeZone bias, int totalOffsetMillis)",
    "returnType" : "OffsetResult",
    "comment" : "\n     * Returns a time zone for the country, if there is one, that matches the supplied properties.\n     * If there are multiple matches and the {@code bias} is one of them then it is returned,\n     * otherwise an arbitrary match is returned based on the {@link\n     * #getEffectiveTimeZoneMappingsAt(long)} ordering.\n     *\n     * @param whenMillis the UTC time to match against\n     * @param bias the time zone to prefer, can be {@code null} to indicate there is no preference\n     * @param totalOffsetMillis the offset from UTC at {@code whenMillis}\n     * @return an {@link OffsetResult} with information about a matching zone, or {@code null} if\n     *     there is no match\n     ",
    "links" : [ "#getEffectiveTimeZoneMappingsAt(long)", "OffsetResult" ]
  }, {
    "name" : "public List<TimeZoneMapping> getEffectiveTimeZoneMappingsAt(long whenMillis)",
    "returnType" : "List<TimeZoneMapping>",
    "comment" : "\n     * Returns an immutable, ordered list of time zone mappings for the country in an undefined but\n     * \"priority\" order, filtered so that only \"effective\" time zone IDs are returned. An\n     * \"effective\" time zone is one that differs from another time zone used in the country after\n     * {@code whenMillis}. The list can be empty if there were no zones configured or the configured\n     * zone IDs were not recognized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDelegate" ],
  "methodNames" : [ "public boolean matchesCountryCode(@NonNull String countryIso)", "public String getDefaultTimeZoneId()", "public TimeZone getDefaultTimeZone()", "public boolean isDefaultTimeZoneBoosted()", "public boolean hasUtcZone(long whenMillis)", "public OffsetResult lookupByOffsetWithBias(long whenMillis, @Nullable TimeZone bias, int totalOffsetMillis, boolean isDst)", "public OffsetResult lookupByOffsetWithBias(long whenMillis, @Nullable TimeZone bias, int totalOffsetMillis)", "public List<TimeZoneMapping> getEffectiveTimeZoneMappingsAt(long whenMillis)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ]
}