{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/CharsTrie.java",
  "packageName" : "android.icu.util",
  "className" : "CharsTrie",
  "comment" : "\n * Light-weight, non-const reader class for a CharsTrie.\n * Traverses a char-serialized data structure with minimal state,\n * for mapping strings (16-bit-unit sequences) to non-negative integer values.\n *\n * <p>This class is not intended for public subclassing.\n *\n * @author Markus W. Scherer\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "valueResults_",
    "type" : "Result[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMaxBranchLinearSubNodeLength",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinLinearMatch",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxLinearMatchLength",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinValueLead",
    "type" : "int",
    "comment" : " 0x0040",
    "links" : [ ]
  }, {
    "name" : "kNodeTypeMask",
    "type" : "int",
    "comment" : " 0x003f",
    "links" : [ ]
  }, {
    "name" : "kValueIsFinal",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxOneUnitValue",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinTwoUnitValueLead",
    "type" : "int",
    "comment" : " 0x4000",
    "links" : [ ]
  }, {
    "name" : "kThreeUnitValueLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxTwoUnitValue",
    "type" : "int",
    "comment" : " 0x3ffeffff",
    "links" : [ ]
  }, {
    "name" : "kMaxOneUnitNodeValue",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinTwoUnitNodeValueLead",
    "type" : "int",
    "comment" : " 0x4040",
    "links" : [ ]
  }, {
    "name" : "kThreeUnitNodeValueLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxTwoUnitNodeValue",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxOneUnitDelta",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMinTwoUnitDeltaLead",
    "type" : "int",
    "comment" : " 0xfc00",
    "links" : [ ]
  }, {
    "name" : "kThreeUnitDeltaLead",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "kMaxTwoUnitDelta",
    "type" : "int",
    "comment" : " 0x03feffff",
    "links" : [ ]
  }, {
    "name" : "chars_",
    "type" : "CharSequence",
    "comment" : " Fixed value referencing the CharsTrie words.",
    "links" : [ ]
  }, {
    "name" : "root_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pos_",
    "type" : "int",
    "comment" : " Pointer to next trie unit to read. NULL if no more matches.",
    "links" : [ ]
  }, {
    "name" : "remainingMatchLength_",
    "type" : "int",
    "comment" : " Remaining length of a linear-match node, minus 1. Negative if not in such a node.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharsTrie clone() throws CloneNotSupportedException",
    "returnType" : "CharsTrie",
    "comment" : "\n     * Clones this trie reader object and its state,\n     * but not the char array which will be shared.\n     * @return A shallow clone of this trie.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsTrie reset()",
    "returnType" : "CharsTrie",
    "comment" : "\n     * Resets this trie to its initial state.\n     * @return this\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getState64()",
    "returnType" : "long",
    "comment" : "\n     * Returns the state of this trie as a 64-bit integer.\n     * The state value is never 0.\n     *\n     * @return opaque state value\n     * @see #resetToState64\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsTrie resetToState64(long state)",
    "returnType" : "CharsTrie",
    "comment" : "\n     * Resets this trie to the saved state.\n     * Unlike {@link #resetToState(State)}, the 64-bit state value\n     * must be from {@link #getState64()} from the same trie object or\n     * from one initialized the exact same way.\n     * Because of no validation, this method is faster.\n     *\n     * @param state The opaque trie state value from getState64().\n     * @return this\n     * @see #getState64\n     * @see #resetToState\n     * @see #reset\n     ",
    "links" : [ "#getState64()", "#resetToState(State)" ]
  }, {
    "name" : "public CharsTrie saveState(State state)",
    "returnType" : "CharsTrie",
    "comment" : "\n     * Saves the state of this trie.\n     * @param state The State object to hold the trie's state.\n     * @return this\n     * @see #resetToState\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsTrie resetToState(State state)",
    "returnType" : "CharsTrie",
    "comment" : "\n     * Resets this trie to the saved state.\n     * Slower than {@link #resetToState64(long)} which does not validate the state value.\n     *\n     * @param state The State object which holds a saved trie state.\n     * @return this\n     * @throws IllegalArgumentException if the state object contains no state,\n     *         or the state of a different trie\n     * @see #saveState\n     * @see #reset\n     ",
    "links" : [ "#resetToState64(long)" ]
  }, {
    "name" : "public Result current()",
    "returnType" : "Result",
    "comment" : "\n     * Determines whether the string so far matches, whether it has a value,\n     * and whether another input char can continue a matching string.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result first(int inUnit)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the initial state for this input char.\n     * Equivalent to reset().next(inUnit).\n     * @param inUnit Input char value. Values below 0 and above 0xffff will never match.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result firstForCodePoint(int cp)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the initial state for the\n     * one or two UTF-16 code units for this input code point.\n     * Equivalent to reset().nextForCodePoint(cp).\n     * @param cp A Unicode code point 0..0x10ffff.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result next(int inUnit)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the current state for this input char.\n     * @param inUnit Input char value. Values below 0 and above 0xffff will never match.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result nextForCodePoint(int cp)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the current state for the\n     * one or two UTF-16 code units for this input code point.\n     * @param cp A Unicode code point 0..0x10ffff.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result next(CharSequence s, int sIndex, int sLimit)",
    "returnType" : "Result",
    "comment" : "\n     * Traverses the trie from the current state for this string.\n     * Equivalent to\n     * <pre>\n     * Result result=current();\n     * for(each c in s)\n     *   if(!result.hasNext()) return Result.NO_MATCH;\n     *   result=next(c);\n     * return result;\n     * </pre>\n     * @param s Contains a string.\n     * @param sIndex The start index of the string in s.\n     * @param sLimit The (exclusive) end index of the string in s.\n     * @return The match/value Result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns a matching string's value if called immediately after\n     * current()/first()/next() returned Result.INTERMEDIATE_VALUE or Result.FINAL_VALUE.\n     * getValue() can be called multiple times.\n     *\n     * Do not call getValue() after Result.NO_MATCH or Result.NO_VALUE!\n     * @return The value for the string so far.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUniqueValue()",
    "returnType" : "long",
    "comment" : "\n     * Determines whether all strings reachable from the current state\n     * map to the same value, and if so, returns that value.\n     * @return The unique value in bits 32..1 with bit 0 set,\n     *         if all strings reachable from the current state\n     *         map to the same value; otherwise returns 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextChars(Appendable out)",
    "returnType" : "int",
    "comment" : "\n     * Finds each char which continues the string from the current state.\n     * That is, each char c for which it would be next(c)!=Result.NO_MATCH now.\n     * @param out Each next char is appended to this object.\n     *            (Only uses the out.append(c) method.)\n     * @return The number of chars which continue the string from here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator iterator()",
    "returnType" : "Iterator",
    "comment" : "\n     * Iterates from the current state of this trie.\n     * @return A new CharsTrie.Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator iterator(int maxStringLength)",
    "returnType" : "Iterator",
    "comment" : "\n     * Iterates from the current state of this trie.\n     * @param maxStringLength If 0, the iterator returns full strings.\n     *                        Otherwise, the iterator returns strings with this maximum length.\n     * @return A new CharsTrie.Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Iterator iterator(CharSequence trieChars, int offset, int maxStringLength)",
    "returnType" : "Iterator",
    "comment" : "\n     * Iterates from the root of a char-serialized BytesTrie.\n     * @param trieChars CharSequence that contains the serialized trie.\n     * @param offset Root offset of the trie in the CharSequence.\n     * @param maxStringLength If 0, the iterator returns full strings.\n     *                        Otherwise, the iterator returns strings with this maximum length.\n     * @return A new CharsTrie.Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void stop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int readValue(CharSequence chars, int pos, int leadUnit)",
    "returnType" : "int",
    "comment" : " pos is already after the leadUnit, and the lead unit has bit 15 reset.",
    "links" : [ ]
  }, {
    "name" : "private static int skipValue(int pos, int leadUnit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int skipValue(CharSequence chars, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int readNodeValue(CharSequence chars, int pos, int leadUnit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int skipNodeValue(int pos, int leadUnit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int jumpByDelta(CharSequence chars, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int skipDelta(CharSequence chars, int pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Result branchNext(int pos, int length, int inUnit)",
    "returnType" : "Result",
    "comment" : " Handles a branch node for both next(unit) and next(string).",
    "links" : [ ]
  }, {
    "name" : "private Result nextImpl(int pos, int inUnit)",
    "returnType" : "Result",
    "comment" : " Requires remainingLength_<0.",
    "links" : [ ]
  }, {
    "name" : "private static long findUniqueValueFromBranch(CharSequence chars, int pos, int length, long uniqueValue)",
    "returnType" : "long",
    "comment" : " On return, if not 0, then bits 63..33 contain the updated non-negative pos.",
    "links" : [ ]
  }, {
    "name" : "private static long findUniqueValue(CharSequence chars, int pos, long uniqueValue)",
    "returnType" : "long",
    "comment" : " Otherwise, uniqueValue is 0. Bits 63..33 are ignored.",
    "links" : [ ]
  }, {
    "name" : "private static void getNextBranchChars(CharSequence chars, int pos, int length, Appendable out)",
    "returnType" : "void",
    "comment" : " getNextChars() when pos is on a branch node.",
    "links" : [ ]
  }, {
    "name" : "private static void append(Appendable out, int c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CharsTrie clone() throws CloneNotSupportedException", "public CharsTrie reset()", "public long getState64()", "public CharsTrie resetToState64(long state)", "public CharsTrie saveState(State state)", "public CharsTrie resetToState(State state)", "public Result current()", "public Result first(int inUnit)", "public Result firstForCodePoint(int cp)", "public Result next(int inUnit)", "public Result nextForCodePoint(int cp)", "public Result next(CharSequence s, int sIndex, int sLimit)", "public int getValue()", "public long getUniqueValue()", "public int getNextChars(Appendable out)", "public Iterator iterator()", "public Iterator iterator(int maxStringLength)", "public static Iterator iterator(CharSequence trieChars, int offset, int maxStringLength)", "private void stop()", "private static int readValue(CharSequence chars, int pos, int leadUnit)", "private static int skipValue(int pos, int leadUnit)", "private static int skipValue(CharSequence chars, int pos)", "private static int readNodeValue(CharSequence chars, int pos, int leadUnit)", "private static int skipNodeValue(int pos, int leadUnit)", "private static int jumpByDelta(CharSequence chars, int pos)", "private static int skipDelta(CharSequence chars, int pos)", "private Result branchNext(int pos, int length, int inUnit)", "private Result nextImpl(int pos, int inUnit)", "private static long findUniqueValueFromBranch(CharSequence chars, int pos, int length, long uniqueValue)", "private static long findUniqueValue(CharSequence chars, int pos, long uniqueValue)", "private static void getNextBranchChars(CharSequence chars, int pos, int length, Appendable out)", "private static void append(Appendable out, int c)" ],
  "variableNames" : [ "valueResults_", "kMaxBranchLinearSubNodeLength", "kMinLinearMatch", "kMaxLinearMatchLength", "kMinValueLead", "kNodeTypeMask", "kValueIsFinal", "kMaxOneUnitValue", "kMinTwoUnitValueLead", "kThreeUnitValueLead", "kMaxTwoUnitValue", "kMaxOneUnitNodeValue", "kMinTwoUnitNodeValueLead", "kThreeUnitNodeValueLead", "kMaxTwoUnitNodeValue", "kMaxOneUnitDelta", "kMinTwoUnitDeltaLead", "kThreeUnitDeltaLead", "kMaxTwoUnitDelta", "chars_", "root_", "pos_", "remainingMatchLength_" ]
}