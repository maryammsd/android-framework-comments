{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/SipDelegateManager.java",
  "packageName" : "android.telephony.ims",
  "className" : "SipDelegateManager",
  "comment" : "\n * Manages the creation and destruction of SipDelegates for the {@link ImsService} managing IMS\n * for the subscription ID that this SipDelegateManager has been created for.\n *\n * This allows multiple IMS applications to forward SIP messages to/from their application for the\n * purposes of providing a single IMS registration to the carrier's IMS network from potentially\n * many IMS stacks implementing a subset of the supported MMTEL/RCS features.\n * <p>\n * This API is only supported if the device supports the\n * {@link PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION} feature.\n * @hide\n ",
  "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION", "android.telephony.ims.ImsService" ],
  "variables" : [ {
    "name" : "MESSAGE_FAILURE_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The SIP message has failed being sent or received for an unknown reason.\n     * <p>\n     * The caller should retry a message that failed with this response.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_DELEGATE_DEAD",
    "type" : "int",
    "comment" : "\n     * The remote service associated with this connection has died and the message was not\n     * properly sent/received.\n     * <p>\n     * This is considered a permanent error and the system will automatically begin the teardown and\n     * destruction of the SipDelegate. No further messages should be sent on this transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_DELEGATE_CLOSED",
    "type" : "int",
    "comment" : "\n     * The message has not been sent/received because the delegate is in the process of closing and\n     * has become unavailable. No further messages should be sent/received on this delegate.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_INVALID_START_LINE",
    "type" : "int",
    "comment" : "\n     * The SIP message has an invalid start line and the message can not be sent or the start line\n     * failed validation due to the request containing a restricted SIP request method.\n     * {@link SipDelegateConnection}s can not send SIP requests for the methods: REGISTER, PUBLISH,\n     * or OPTIONS.\n     ",
    "links" : [ "android.telephony.ims.SipDelegateConnection" ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_INVALID_HEADER_FIELDS",
    "type" : "int",
    "comment" : "\n     * One or more of the header fields in the header section of the outgoing SIP message is invalid\n     * or contains a restricted header value and the SIP message can not be sent.\n     * {@link SipDelegateConnection}s can not send SIP SUBSCRIBE requests for the \"Event\" header\n     * value of \"presence\".\n     ",
    "links" : [ "android.telephony.ims.SipDelegateConnection" ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_INVALID_BODY_CONTENT",
    "type" : "int",
    "comment" : "\n     * The body content of the SIP message is invalid and the message can not be sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_INVALID_FEATURE_TAG",
    "type" : "int",
    "comment" : "\n     * The feature tag associated with the outgoing message does not match any known feature tags\n     * or it matches a denied tag and this message can not be sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_TAG_NOT_ENABLED_FOR_DELEGATE",
    "type" : "int",
    "comment" : "\n     * The feature tag associated with the outgoing message is not enabled for the associated\n     * SipDelegateConnection and can not be sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_NETWORK_NOT_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * The link to the network has been lost and the outgoing message has failed to send.\n     * <p>\n     * This message should be retried when connectivity to the network is re-established. See\n     * {@link android.net.ConnectivityManager.NetworkCallback} for how this can be determined.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback" ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_NOT_REGISTERED",
    "type" : "int",
    "comment" : "\n     * The outgoing SIP message has not been sent due to the SipDelegate not being registered for\n     * IMS at this time.\n     * <p>\n     * This is considered a temporary failure, the message should not be retried until an IMS\n     * registration change callback is received via\n     * {@link DelegateConnectionStateCallback#onFeatureTagStatusChanged}\n     ",
    "links" : [ "android.telephony.ims.stub.DelegateConnectionStateCallback#onFeatureTagStatusChanged" ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_STALE_IMS_CONFIGURATION",
    "type" : "int",
    "comment" : "\n     * The outgoing SIP message has not been sent because the {@link SipDelegateConfiguration}\n     * version associated with the outgoing {@link SipMessage} is now stale and has failed\n     * validation checks.\n     * <p>\n     * The @link SipMessage} should be recreated using the newest\n     * {@link SipDelegateConfiguration} and sent again.\n     ",
    "links" : [ "android.telephony.ims.SipMessage", "android.telephony.ims.SipDelegateConfiguration" ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_INTERNAL_DELEGATE_STATE_TRANSITION",
    "type" : "int",
    "comment" : "\n     * The outgoing SIP message has not been sent because the internal state of the associated\n     * {@link SipDelegate} is changing and has temporarily brought the transport down.\n     * <p>\n     * This is considered a temporary error and the {@link SipDelegateConnection} should resend the\n     * message once {@link DelegateRegistrationState#DEREGISTERING_REASON_FEATURE_TAGS_CHANGING} is\n     * no longer reported.\n     ",
    "links" : [ "android.telephony.ims.stub.SipDelegate", "android.telephony.ims.SipDelegateConnection", "android.telephony.ims.DelegateRegistrationState#DEREGISTERING_REASON_FEATURE_TAGS_CHANGING" ]
  }, {
    "name" : "MESSAGE_FAILURE_REASON_STRING_MAP",
    "type" : "ArrayMap<Integer, String>",
    "comment" : "@hide",
    "links" : [ ]
  }, {
    "name" : "DENIED_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Access to use this feature tag has been denied for an unknown reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "DENIED_REASON_IN_USE_BY_ANOTHER_DELEGATE",
    "type" : "int",
    "comment" : "\n     * This feature tag is allowed to be used by this SipDelegateConnection, but it is in use by\n     * another SipDelegateConnection and can not be associated with this delegate. The feature tag\n     * will stay in this state until the feature tag is release by the other application.\n     ",
    "links" : [ ]
  }, {
    "name" : "DENIED_REASON_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Access to use this feature tag has been denied because this application does not have the\n     * permissions required to access this feature tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "DENIED_REASON_SINGLE_REGISTRATION_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Access to use this feature tag has been denied because single registration is not allowed by\n     * the carrier at this time. The application should fall back to dual registration if\n     * applicable.\n     ",
    "links" : [ ]
  }, {
    "name" : "DENIED_REASON_INVALID",
    "type" : "int",
    "comment" : "\n     * This feature tag is not recognized as a valid feature tag by the SipDelegate and has been\n     * denied.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIP_DELEGATE_DESTROY_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The SipDelegate has closed due to an unknown reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIP_DELEGATE_DESTROY_REASON_SERVICE_DEAD",
    "type" : "int",
    "comment" : "\n     * The SipDelegate has closed because the IMS service has died unexpectedly.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIP_DELEGATE_DESTROY_REASON_REQUESTED_BY_APP",
    "type" : "int",
    "comment" : "\n     * The SipDelegate has closed because the IMS application has requested that the connection be\n     * destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIP_DELEGATE_DESTROY_REASON_USER_DISABLED_RCS",
    "type" : "int",
    "comment" : "\n     * The SipDelegate has been closed due to the user disabling RCS.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIP_DELEGATE_DESTROY_REASON_SUBSCRIPTION_TORN_DOWN",
    "type" : "int",
    "comment" : "\n     * The SipDelegate has been closed due to the subscription associated with this delegate being\n     * torn down.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinderCache",
    "type" : "BinderCacheManager<IImsRcsController>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTelephonyBinderCache",
    "type" : "BinderCacheManager<ITelephony>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isSupported() throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if creating SIP delegates are supported for the subscription specified.\n     * <p>\n     * If SIP delegates are not supported on this device or the carrier associated with this\n     * subscription, creating a SIP delegate will always fail, as this feature is not supported.\n     * @return true if this device supports creating a SIP delegate and the carrier associated with\n     * this subscription supports single registration, false if creating SIP delegates is not\n     * supported.\n     * @throws ImsException If the remote ImsService is not available for any reason or the\n     * subscription associated with this instance is no longer active. See\n     * {@link ImsException#getCode()} for more information.\n     *\n     * @see CarrierConfigManager.Ims#KEY_IMS_SINGLE_REGISTRATION_REQUIRED_BOOL\n     * @see PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION\n     ",
    "links" : [ "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void createSipDelegate(@NonNull DelegateRequest request, @NonNull Executor executor, @NonNull DelegateConnectionStateCallback dc, @NonNull DelegateConnectionMessageCallback mc) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Request that the ImsService implementation create a SipDelegate, which will configure the\n     * ImsService to forward SIP traffic that matches the filtering criteria set in supplied\n     * {@link DelegateRequest} to the application that the supplied callbacks are registered for.\n     * <p>\n     * This API requires that the caller is running as part of a long-running process and will\n     * always be available to handle incoming messages. One mechanism that can be used for this is\n     * the {@link android.service.carrier.CarrierMessagingClientService}, which the framework keeps\n     * a persistent binding to when the app is the default SMS application.\n     * <p>\n     * Note: the ability to create SipDelegates is only available applications running as the\n     * primary user.\n     * @param request The parameters that are associated with the SipDelegate creation request that\n     *                will be used to create the SipDelegate connection.\n     * @param executor The executor that will be used to call the callbacks associated with this\n     *          SipDelegate.\n     * @param dc The callback that will be used to notify the listener of the creation/destruction\n     *           of the remote SipDelegate as well as changes to the state of the remote SipDelegate\n     *           connection.\n     * @param mc The callback that will be used to notify the listener of new incoming SIP messages\n     *           as well as the status of messages that were sent by the associated\n     *           SipDelegateConnection.\n     * @throws ImsException Thrown if there was a problem communicating with the ImsService\n     * associated with this SipDelegateManager. See {@link ImsException#getCode()}.\n     ",
    "links" : [ "android.telephony.ims.DelegateRequest", "android.service.carrier.CarrierMessagingClientService", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void destroySipDelegate(@NonNull SipDelegateConnection delegateConnection, @SipDelegateDestroyReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Destroy a previously created {@link SipDelegateConnection} that was created using\n     * {@link #createSipDelegate}.\n     * <p>\n     * This will also clean up all related callbacks in the associated ImsService.\n     * @param delegateConnection The SipDelegateConnection to destroy.\n     * @param reason The reason for why this SipDelegateConnection was destroyed.\n     ",
    "links" : [ "android.telephony.ims.SipDelegateConnection", "#createSipDelegate" ]
  }, {
    "name" : "public void triggerFullNetworkRegistration(@NonNull SipDelegateConnection connection, @IntRange(from = 100, to = 699) int sipCode, @Nullable String sipReason)",
    "returnType" : "void",
    "comment" : "\n     * Trigger a full network registration as required by receiving a SIP message containing a\n     * permanent error from the network or never receiving a response to a SIP transaction request.\n     *\n     * @param connection The {@link SipDelegateConnection} that was being used when this error was\n     *         received.\n     * @param sipCode The SIP code response associated with the SIP message request that\n     *         triggered this condition.\n     * @param sipReason The SIP reason code associated with the SIP message request that triggered\n     *         this condition. May be {@code null} if there was no reason String provided from the\n     *         network.\n     ",
    "links" : [ "android.telephony.ims.SipDelegateConnection" ]
  }, {
    "name" : "public void registerImsStateCallback(@NonNull Executor executor, @NonNull ImsStateCallback callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Register a new callback, which is used to notify the registrant of changes to\n     * the state of the underlying  IMS service that is attached to telephony to\n     * implement IMS functionality. If the manager is created for\n     * the {@link android.telephony.SubscriptionManager#DEFAULT_SUBSCRIPTION_ID},\n     * this throws an {@link ImsException}.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE READ_PRECISE_PHONE_STATE}\n     * or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param executor the Executor that will be used to call the {@link ImsStateCallback}.\n     * @param callback The callback instance being registered.\n     * @throws ImsException in the case that the callback can not be registered.\n     * See {@link ImsException#getCode} for more information on when this is called.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.ims.ImsException", "android.telephony.SubscriptionManager#DEFAULT_SUBSCRIPTION_ID", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.ImsException#getCode", "android.telephony.ims.ImsStateCallback" ]
  }, {
    "name" : "public void unregisterImsStateCallback(@NonNull ImsStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered callback.\n     *\n     * @param callback The callback instance to be unregistered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerSipDialogStateCallback(@NonNull Executor executor, @NonNull SipDialogStateCallback callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Register a new callback, which is used to notify the registrant of changes\n     * to the state of the Sip Sessions managed remotely by the IMS stack.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE}\n     *\n     * @param executor the Executor that will be used to call the {@link SipDialogStateCallback}.\n     * @param callback The callback instance being registered.\n     * @throws ImsException in the case that the callback can not be registered.\n     * See {@link ImsException#getCode} for more information on when this is called.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION", "android.telephony.ims.SipDialogStateCallback", "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE", "android.telephony.ims.ImsException#getCode" ]
  }, {
    "name" : "public void unregisterSipDialogStateCallback(@NonNull SipDialogStateCallback callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered callback.\n     *\n     *  <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE}\n     *\n     * @param callback The callback instance to be unregistered.\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION", "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE" ]
  } ],
  "methodNames" : [ "public boolean isSupported() throws ImsException", "public void createSipDelegate(@NonNull DelegateRequest request, @NonNull Executor executor, @NonNull DelegateConnectionStateCallback dc, @NonNull DelegateConnectionMessageCallback mc) throws ImsException", "public void destroySipDelegate(@NonNull SipDelegateConnection delegateConnection, @SipDelegateDestroyReason int reason)", "public void triggerFullNetworkRegistration(@NonNull SipDelegateConnection connection, @IntRange(from = 100, to = 699) int sipCode, @Nullable String sipReason)", "public void registerImsStateCallback(@NonNull Executor executor, @NonNull ImsStateCallback callback) throws ImsException", "public void unregisterImsStateCallback(@NonNull ImsStateCallback callback)", "public void registerSipDialogStateCallback(@NonNull Executor executor, @NonNull SipDialogStateCallback callback) throws ImsException", "public void unregisterSipDialogStateCallback(@NonNull SipDialogStateCallback callback) throws ImsException" ],
  "variableNames" : [ "MESSAGE_FAILURE_REASON_UNKNOWN", "MESSAGE_FAILURE_REASON_DELEGATE_DEAD", "MESSAGE_FAILURE_REASON_DELEGATE_CLOSED", "MESSAGE_FAILURE_REASON_INVALID_START_LINE", "MESSAGE_FAILURE_REASON_INVALID_HEADER_FIELDS", "MESSAGE_FAILURE_REASON_INVALID_BODY_CONTENT", "MESSAGE_FAILURE_REASON_INVALID_FEATURE_TAG", "MESSAGE_FAILURE_REASON_TAG_NOT_ENABLED_FOR_DELEGATE", "MESSAGE_FAILURE_REASON_NETWORK_NOT_AVAILABLE", "MESSAGE_FAILURE_REASON_NOT_REGISTERED", "MESSAGE_FAILURE_REASON_STALE_IMS_CONFIGURATION", "MESSAGE_FAILURE_REASON_INTERNAL_DELEGATE_STATE_TRANSITION", "MESSAGE_FAILURE_REASON_STRING_MAP", "DENIED_REASON_UNKNOWN", "DENIED_REASON_IN_USE_BY_ANOTHER_DELEGATE", "DENIED_REASON_NOT_ALLOWED", "DENIED_REASON_SINGLE_REGISTRATION_NOT_ALLOWED", "DENIED_REASON_INVALID", "SIP_DELEGATE_DESTROY_REASON_UNKNOWN", "SIP_DELEGATE_DESTROY_REASON_SERVICE_DEAD", "SIP_DELEGATE_DESTROY_REASON_REQUESTED_BY_APP", "SIP_DELEGATE_DESTROY_REASON_USER_DISABLED_RCS", "SIP_DELEGATE_DESTROY_REASON_SUBSCRIPTION_TORN_DOWN", "mContext", "mSubId", "mBinderCache", "mTelephonyBinderCache" ]
}