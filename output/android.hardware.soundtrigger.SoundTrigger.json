{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/soundtrigger/SoundTrigger.java",
  "packageName" : "android.hardware.soundtrigger",
  "className" : "SoundTrigger",
  "comment" : "\n * The SoundTrigger class provides access to the service managing the sound trigger HAL.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FAKE_HAL_ARCH",
    "type" : "String",
    "comment" : "\n     * Model architecture associated with a fake STHAL which can be injected.\n     * Used for testing purposes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_OK",
    "type" : "int",
    "comment" : "\n     * Status code used when the operation succeeded\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ERROR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PERMISSION_DENIED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NO_INIT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAD_VALUE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_DEAD_OBJECT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_INVALID_OPERATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BUSY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODEL_PARAM_INVALID",
    "type" : "int",
    "comment" : "\n     * See {@link ModelParams.INVALID}\n     * @hide\n     ",
    "links" : [ "ModelParams.INVALID" ]
  }, {
    "name" : "MODEL_PARAM_THRESHOLD_FACTOR",
    "type" : "int",
    "comment" : "\n     * See {@link ModelParams.THRESHOLD_FACTOR}\n     * @hide\n     ",
    "links" : [ "ModelParams.THRESHOLD_FACTOR" ]
  }, {
    "name" : "RECOGNITION_MODE_VOICE_TRIGGER",
    "type" : "int",
    "comment" : "\n     * Trigger on recognition of a key phrase\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_MODE_USER_IDENTIFICATION",
    "type" : "int",
    "comment" : "\n     * Trigger only if one user is identified\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_MODE_USER_AUTHENTICATION",
    "type" : "int",
    "comment" : "\n     * Trigger only if one user is authenticated\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_MODE_GENERIC",
    "type" : "int",
    "comment" : "\n     * Generic (non-speech) recognition.\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Recognition success\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_STATUS_ABORT",
    "type" : "int",
    "comment" : "\n     * Recognition aborted (e.g. capture preempted by anotehr use case\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_STATUS_FAILURE",
    "type" : "int",
    "comment" : "\n     * Recognition failure\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECOGNITION_STATUS_GET_STATE_RESPONSE",
    "type" : "int",
    "comment" : "\n     * Recognition event was triggered by a getModelState request, not by the\n     * DSP.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mServiceLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int handleException(Exception e)",
    "returnType" : "int",
    "comment" : "\n     * Translate an exception thrown from interaction with the underlying service to an error code.\n     * Throws a runtime exception for unexpected conditions.\n     * @param e The caught exception.\n     * @return The error code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int listModules(@NonNull ArrayList<ModuleProperties> modules)",
    "returnType" : "int",
    "comment" : "\n     * Returns a list of descriptors for all hardware modules loaded.\n     * @param modules A ModuleProperties array where the list will be returned.\n     * @return - {@link #STATUS_OK} in case of success\n     *         - {@link #STATUS_ERROR} in case of unspecified error\n     *         - {@link #STATUS_PERMISSION_DENIED} if the caller does not have system permission\n     *         - {@link #STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link #STATUS_BAD_VALUE} if modules is null\n     *         - {@link #STATUS_DEAD_OBJECT} if the binder transaction to the native service fails\n     *\n     * @removed Please use {@link #listModulesAsOriginator(ArrayList, Identity)} or\n     * {@link #listModulesAsMiddleman(ArrayList, Identity, Identity)}, based on whether the\n     * client is acting on behalf of its own identity or a separate identity.\n     * @hide\n     ",
    "links" : [ "#STATUS_ERROR", "#listModulesAsMiddleman(ArrayList", "#listModulesAsOriginator(ArrayList", "#STATUS_DEAD_OBJECT", "#STATUS_OK", "#STATUS_PERMISSION_DENIED", "#STATUS_BAD_VALUE", "#STATUS_NO_INIT" ]
  }, {
    "name" : "public static int listModulesAsOriginator(@NonNull ArrayList<ModuleProperties> modules, @NonNull Identity originatorIdentity)",
    "returnType" : "int",
    "comment" : "\n     * Returns a list of descriptors for all hardware modules loaded.\n     * This variant is intended for use when the caller itself is the originator of the operation.\n     * @param modules A ModuleProperties array where the list will be returned.\n     * @param originatorIdentity The identity of the originator, which will be used for permission\n     *                           purposes.\n     * @return - {@link #STATUS_OK} in case of success\n     *         - {@link #STATUS_ERROR} in case of unspecified error\n     *         - {@link #STATUS_PERMISSION_DENIED} if the caller does not have system permission\n     *         - {@link #STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link #STATUS_BAD_VALUE} if modules is null\n     *         - {@link #STATUS_DEAD_OBJECT} if the binder transaction to the native service fails\n     * @deprecated Use {@link android.media.soundtrigger.SoundTriggerManager} instead.\n     * @hide\n     ",
    "links" : [ "#STATUS_ERROR", "android.media.soundtrigger.SoundTriggerManager", "#STATUS_DEAD_OBJECT", "#STATUS_OK", "#STATUS_PERMISSION_DENIED", "#STATUS_BAD_VALUE", "#STATUS_NO_INIT" ]
  }, {
    "name" : "public static int listModulesAsMiddleman(@NonNull ArrayList<ModuleProperties> modules, @NonNull Identity middlemanIdentity, @NonNull Identity originatorIdentity)",
    "returnType" : "int",
    "comment" : "\n     * Returns a list of descriptors for all hardware modules loaded.\n     * This variant is intended for use when the caller is acting on behalf of a different identity\n     * for permission purposes.\n     * @param modules A ModuleProperties array where the list will be returned.\n     * @param middlemanIdentity The identity of the caller, acting as middleman.\n     * @param originatorIdentity The identity of the originator, which will be used for permission\n     *                           purposes.\n     * @return - {@link #STATUS_OK} in case of success\n     *         - {@link #STATUS_ERROR} in case of unspecified error\n     *         - {@link #STATUS_PERMISSION_DENIED} if the caller does not have system permission\n     *         - {@link #STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link #STATUS_BAD_VALUE} if modules is null\n     *         - {@link #STATUS_DEAD_OBJECT} if the binder transaction to the native service fails\n     *\n     * @deprecated Use {@link android.media.soundtrigger.SoundTriggerManager} instead.\n     * @hide\n     ",
    "links" : [ "#STATUS_ERROR", "android.media.soundtrigger.SoundTriggerManager", "#STATUS_DEAD_OBJECT", "#STATUS_OK", "#STATUS_PERMISSION_DENIED", "#STATUS_BAD_VALUE", "#STATUS_NO_INIT" ]
  }, {
    "name" : "private static void convertDescriptorsToModuleProperties(@NonNull SoundTriggerModuleDescriptor[] descsIn, @NonNull ArrayList<ModuleProperties> modulesOut)",
    "returnType" : "void",
    "comment" : "\n     * Converts an array of SoundTriggerModuleDescriptor into an (existing) ArrayList of\n     * ModuleProperties.\n     * @param descsIn The input descriptors.\n     * @param modulesOut The output list.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SoundTriggerModule attachModule(int moduleId, @NonNull StatusListener listener, @Nullable Handler handler)",
    "returnType" : "SoundTriggerModule",
    "comment" : "\n     * Get an interface on a hardware module to control sound models and recognition on\n     * this module.\n     * @param moduleId Sound module system identifier {@link ModuleProperties#mId}. mandatory.\n     * @param listener {@link StatusListener} interface. Mandatory.\n     * @param handler the Handler that will receive the callabcks. Can be null if default handler\n     *                is OK.\n     * @return a valid sound module in case of success or null in case of error.\n     *\n     * @removed Use {@link android.media.soundtrigger.SoundTriggerManager} instead.\n     * @hide\n     ",
    "links" : [ "#mId", "android.media.soundtrigger.SoundTriggerManager", "StatusListener" ]
  }, {
    "name" : "public static SoundTriggerModule attachModuleAsMiddleman(int moduleId, @NonNull SoundTrigger.StatusListener listener, @Nullable Handler handler, Identity middlemanIdentity, Identity originatorIdentity)",
    "returnType" : "SoundTriggerModule",
    "comment" : "\n     * Get an interface on a hardware module to control sound models and recognition on\n     * this module.\n     * This variant is intended for use when the caller is acting on behalf of a different identity\n     * for permission purposes.\n     * @param moduleId Sound module system identifier {@link ModuleProperties#mId}. mandatory.\n     * @param listener {@link StatusListener} interface. Mandatory.\n     * @param handler the Handler that will receive the callabcks. Can be null if default handler\n     *                is OK.\n     * @param middlemanIdentity The identity of the caller, acting as middleman.\n     * @param originatorIdentity The identity of the originator, which will be used for permission\n     *                           purposes.\n     * @return a valid sound module in case of success or null in case of error.\n     * @deprecated Use {@link android.media.soundtrigger.SoundTriggerManager} instead.\n     * @hide\n     ",
    "links" : [ "#mId", "android.media.soundtrigger.SoundTriggerManager", "StatusListener" ]
  }, {
    "name" : "public static SoundTriggerModule attachModuleAsOriginator(int moduleId, @NonNull SoundTrigger.StatusListener listener, @Nullable Handler handler, @NonNull Identity originatorIdentity)",
    "returnType" : "SoundTriggerModule",
    "comment" : "\n     * Get an interface on a hardware module to control sound models and recognition on\n     * this module.\n     * This variant is intended for use when the caller itself is the originator of the operation.\n     * @param moduleId Sound module system identifier {@link ModuleProperties#mId}. mandatory.\n     * @param listener {@link StatusListener} interface. Mandatory.\n     * @param handler the Handler that will receive the callabcks. Can be null if default handler\n     *                is OK.\n     * @param originatorIdentity The identity of the originator, which will be used for permission\n     *                           purposes.\n     * @return a valid sound module in case of success or null in case of error.\n     *\n     * @hide\n     ",
    "links" : [ "#mId", "StatusListener" ]
  }, {
    "name" : "private static ISoundTriggerMiddlewareService getService()",
    "returnType" : "ISoundTriggerMiddlewareService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int handleException(Exception e)", "public static int listModules(@NonNull ArrayList<ModuleProperties> modules)", "public static int listModulesAsOriginator(@NonNull ArrayList<ModuleProperties> modules, @NonNull Identity originatorIdentity)", "public static int listModulesAsMiddleman(@NonNull ArrayList<ModuleProperties> modules, @NonNull Identity middlemanIdentity, @NonNull Identity originatorIdentity)", "private static void convertDescriptorsToModuleProperties(@NonNull SoundTriggerModuleDescriptor[] descsIn, @NonNull ArrayList<ModuleProperties> modulesOut)", "private static SoundTriggerModule attachModule(int moduleId, @NonNull StatusListener listener, @Nullable Handler handler)", "public static SoundTriggerModule attachModuleAsMiddleman(int moduleId, @NonNull SoundTrigger.StatusListener listener, @Nullable Handler handler, Identity middlemanIdentity, Identity originatorIdentity)", "public static SoundTriggerModule attachModuleAsOriginator(int moduleId, @NonNull SoundTrigger.StatusListener listener, @Nullable Handler handler, @NonNull Identity originatorIdentity)", "private static ISoundTriggerMiddlewareService getService()" ],
  "variableNames" : [ "TAG", "FAKE_HAL_ARCH", "STATUS_OK", "STATUS_ERROR", "STATUS_PERMISSION_DENIED", "STATUS_NO_INIT", "STATUS_BAD_VALUE", "STATUS_DEAD_OBJECT", "STATUS_INVALID_OPERATION", "STATUS_BUSY", "MODEL_PARAM_INVALID", "MODEL_PARAM_THRESHOLD_FACTOR", "RECOGNITION_MODE_VOICE_TRIGGER", "RECOGNITION_MODE_USER_IDENTIFICATION", "RECOGNITION_MODE_USER_AUTHENTICATION", "RECOGNITION_MODE_GENERIC", "RECOGNITION_STATUS_SUCCESS", "RECOGNITION_STATUS_ABORT", "RECOGNITION_STATUS_FAILURE", "RECOGNITION_STATUS_GET_STATE_RESPONSE", "mServiceLock" ]
}