{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/InputDeviceSensorManager.java",
  "packageName" : "android.hardware.input",
  "className" : "InputDeviceSensorManager",
  "comment" : "\n * Sensor manager implementation that communicates with the input device\n * sensors.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SENSOR_ACCURACY_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SENSOR_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlobal",
    "type" : "InputManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSensors",
    "type" : "Map<Integer, List<Sensor>>",
    "comment" : " sensor map from device id to sensor list",
    "links" : [ ]
  }, {
    "name" : "mInputSensorLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputServiceSensorListener",
    "type" : "InputSensorEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputSensorEventListeners",
    "type" : "ArrayList<InputSensorEventListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSensorThread",
    "type" : "HandlerThread",
    "comment" : " The sensor thread is only initialized if there is a listener added without a handler.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " SensorManager getSensorManager(int deviceId)",
    "returnType" : "SensorManager",
    "comment" : "\n     * Get SensorManager object for specific input device\n     *\n     * @param deviceId Input device ID\n     * @return SensorManager object for input device\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateInputDeviceSensorInfoLocked(int deviceId)",
    "returnType" : "void",
    "comment" : "\n     * Update input device sensor info for specified input device ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onInputDeviceAdded(int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInputDeviceRemoved(int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInputDeviceChanged(int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean sensorEquals(@NonNull Sensor lhs, @NonNull Sensor rhs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void populateSensorsForInputDeviceLocked(int deviceId, InputSensorInfo[] sensorInfos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initializeSensors()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Sensor getInputDeviceSensorLocked(int deviceId, int sensorType)",
    "returnType" : "Sensor",
    "comment" : "\n     * Get a sensor object for input device, with specific sensor type.\n     * @param deviceId The input devicd ID\n     * @param sensorType The sensor type\n     * @return The sensor object if exists or null\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findSensorEventListenerLocked(SensorEventListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onInputSensorChanged(int deviceId, int sensorType, int accuracy, long timestamp, float[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onInputSensorAccuracyChanged(int deviceId, int sensorType, int accuracy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Sensor getSensorForInputDevice(int deviceId, int type)",
    "returnType" : "Sensor",
    "comment" : "\n     * Return the default sensor object for input device, for specific sensor type.\n     ",
    "links" : [ ]
  }, {
    "name" : "private List<Sensor> getFullSensorListForDevice(int deviceId)",
    "returnType" : "List<Sensor>",
    "comment" : "\n     * Return list of sensors that belong to an input device, specified by input device ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean registerListenerInternal(SensorEventListener listener, Sensor sensor, int delayUs, int maxBatchReportLatencyUs, Handler handler)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Looper getLooperForListenerLocked(@Nullable Handler requestedHandler)",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterListenerInternal(SensorEventListener listener, Sensor sensor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean flushInternal(SensorEventListener listener)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " SensorManager getSensorManager(int deviceId)", "private void updateInputDeviceSensorInfoLocked(int deviceId)", "public void onInputDeviceAdded(int deviceId)", "public void onInputDeviceRemoved(int deviceId)", "public void onInputDeviceChanged(int deviceId)", "private static boolean sensorEquals(@NonNull Sensor lhs, @NonNull Sensor rhs)", "private void populateSensorsForInputDeviceLocked(int deviceId, InputSensorInfo[] sensorInfos)", "private void initializeSensors()", "private Sensor getInputDeviceSensorLocked(int deviceId, int sensorType)", "private int findSensorEventListenerLocked(SensorEventListener listener)", "private void onInputSensorChanged(int deviceId, int sensorType, int accuracy, long timestamp, float[] values)", "private void onInputSensorAccuracyChanged(int deviceId, int sensorType, int accuracy)", "private Sensor getSensorForInputDevice(int deviceId, int type)", "private List<Sensor> getFullSensorListForDevice(int deviceId)", "private boolean registerListenerInternal(SensorEventListener listener, Sensor sensor, int delayUs, int maxBatchReportLatencyUs, Handler handler)", "private Looper getLooperForListenerLocked(@Nullable Handler requestedHandler)", "private void unregisterListenerInternal(SensorEventListener listener, Sensor sensor)", "private boolean flushInternal(SensorEventListener listener)" ],
  "variableNames" : [ "TAG", "DEBUG", "MSG_SENSOR_ACCURACY_CHANGED", "MSG_SENSOR_CHANGED", "mGlobal", "mSensors", "mInputSensorLock", "mInputServiceSensorListener", "mInputSensorEventListeners", "mSensorThread" ]
}