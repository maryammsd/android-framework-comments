{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Float.java",
  "packageName" : "java.lang",
  "className" : "Float",
  "comment" : "\n * The {@code Float} class wraps a value of primitive type\n * {@code float} in an object. An object of type\n * {@code Float} contains a single field whose type is\n * {@code float}.\n *\n * <p>In addition, this class provides several methods for converting a\n * {@code float} to a {@code String} and a\n * {@code String} to a {@code float}, as well as other\n * constants and methods useful when dealing with a\n * {@code float}.\n *\n * <!-- Android-removed: paragraph on ValueBased\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n * -->\n *\n * <h2><a id=equivalenceRelation>Floating-point Equality, Equivalence,\n * and Comparison</a></h2>\n *\n * The class {@code java.lang.Double} has a <a\n * href=\"Double.html#equivalenceRelation\">discussion of equality,\n * equivalence, and comparison of floating-point values</a> that is\n * equality applicable to {@code float} values.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Joseph D. Darcy\n * @since 1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "POSITIVE_INFINITY",
    "type" : "float",
    "comment" : "\n     * A constant holding the positive infinity of type\n     * {@code float}. It is equal to the value returned by\n     * {@code Float.intBitsToFloat(0x7f800000)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_INFINITY",
    "type" : "float",
    "comment" : "\n     * A constant holding the negative infinity of type\n     * {@code float}. It is equal to the value returned by\n     * {@code Float.intBitsToFloat(0xff800000)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "NaN",
    "type" : "float",
    "comment" : "\n     * A constant holding a Not-a-Number (NaN) value of type\n     * {@code float}.  It is equivalent to the value returned by\n     * {@code Float.intBitsToFloat(0x7fc00000)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VALUE",
    "type" : "float",
    "comment" : " 3.4028235e+38f",
    "links" : [ ]
  }, {
    "name" : "MIN_NORMAL",
    "type" : "float",
    "comment" : " 1.17549435E-38f",
    "links" : [ ]
  }, {
    "name" : "MIN_VALUE",
    "type" : "float",
    "comment" : " 1.4e-45f",
    "links" : [ ]
  }, {
    "name" : "MAX_EXPONENT",
    "type" : "int",
    "comment" : "\n     * Maximum exponent a finite {@code float} variable may have.  It\n     * is equal to the value returned by {@code\n     * Math.getExponent(Float.MAX_VALUE)}.\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_EXPONENT",
    "type" : "int",
    "comment" : "\n     * Minimum exponent a normalized {@code float} variable may have.\n     * It is equal to the value returned by {@code\n     * Math.getExponent(Float.MIN_NORMAL)}.\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE",
    "type" : "int",
    "comment" : "\n     * The number of bits used to represent a {@code float} value.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "PRECISION",
    "type" : "int",
    "comment" : "\n     * The number of bits in the significand of a {@code float} value.\n     * This is the parameter N in section {@jls 4.2.3} of\n     * <cite>The Java Language Specification</cite>.\n     *\n     * @since 19\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTES",
    "type" : "int",
    "comment" : "\n     * The number of bytes used to represent a {@code float} value.\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE",
    "type" : "Class<Float>",
    "comment" : "\n     * The {@code Class} instance representing the primitive type\n     * {@code float}.\n     *\n     * @since 1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "float",
    "comment" : "\n     * The value of the Float.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String toString(float f)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the {@code float}\n     * argument. All characters mentioned below are ASCII characters.\n     * <ul>\n     * <li>If the argument is NaN, the result is the string\n     * \"{@code NaN}\".\n     * <li>Otherwise, the result is a string that represents the sign and\n     *     magnitude (absolute value) of the argument. If the sign is\n     *     negative, the first character of the result is\n     *     '{@code -}' ({@code '\\u005Cu002D'}); if the sign is\n     *     positive, no sign character appears in the result. As for\n     *     the magnitude <i>m</i>:\n     * <ul>\n     * <li>If <i>m</i> is infinity, it is represented by the characters\n     *     {@code \"Infinity\"}; thus, positive infinity produces\n     *     the result {@code \"Infinity\"} and negative infinity\n     *     produces the result {@code \"-Infinity\"}.\n     * <li>If <i>m</i> is zero, it is represented by the characters\n     *     {@code \"0.0\"}; thus, negative zero produces the result\n     *     {@code \"-0.0\"} and positive zero produces the result\n     *     {@code \"0.0\"}.\n     * <li> If <i>m</i> is greater than or equal to 10<sup>-3</sup> but\n     *      less than 10<sup>7</sup>, then it is represented as the\n     *      integer part of <i>m</i>, in decimal form with no leading\n     *      zeroes, followed by '{@code .}'\n     *      ({@code '\\u005Cu002E'}), followed by one or more\n     *      decimal digits representing the fractional part of\n     *      <i>m</i>.\n     * <li> If <i>m</i> is less than 10<sup>-3</sup> or greater than or\n     *      equal to 10<sup>7</sup>, then it is represented in\n     *      so-called \"computerized scientific notation.\" Let <i>n</i>\n     *      be the unique integer such that 10<sup><i>n</i> </sup>&le;\n     *      <i>m</i> {@literal <} 10<sup><i>n</i>+1</sup>; then let <i>a</i>\n     *      be the mathematically exact quotient of <i>m</i> and\n     *      10<sup><i>n</i></sup> so that 1 &le; <i>a</i> {@literal <} 10.\n     *      The magnitude is then represented as the integer part of\n     *      <i>a</i>, as a single decimal digit, followed by\n     *      '{@code .}' ({@code '\\u005Cu002E'}), followed by\n     *      decimal digits representing the fractional part of\n     *      <i>a</i>, followed by the letter '{@code E}'\n     *      ({@code '\\u005Cu0045'}), followed by a representation\n     *      of <i>n</i> as a decimal integer, as produced by the\n     *      method {@link java.lang.Integer#toString(int)}.\n     *\n     * </ul>\n     * </ul>\n     * How many digits must be printed for the fractional part of\n     * <i>m</i> or <i>a</i>? There must be at least one digit\n     * to represent the fractional part, and beyond that as many, but\n     * only as many, more digits as are needed to uniquely distinguish\n     * the argument value from adjacent values of type\n     * {@code float}. That is, suppose that <i>x</i> is the\n     * exact mathematical value represented by the decimal\n     * representation produced by this method for a finite nonzero\n     * argument <i>f</i>. Then <i>f</i> must be the {@code float}\n     * value nearest to <i>x</i>; or, if two {@code float} values are\n     * equally close to <i>x</i>, then <i>f</i> must be one of\n     * them and the least significant bit of the significand of\n     * <i>f</i> must be {@code 0}.\n     *\n     * <p>To create localized string representations of a floating-point\n     * value, use subclasses of {@link java.text.NumberFormat}.\n     *\n     * @param   f   the float to be converted.\n     * @return a string representation of the argument.\n     ",
    "links" : [ "java.lang.Integer#toString(int)", "java.text.NumberFormat" ]
  }, {
    "name" : "public static String toHexString(float f)",
    "returnType" : "String",
    "comment" : "\n     * Returns a hexadecimal string representation of the\n     * {@code float} argument. All characters mentioned below are\n     * ASCII characters.\n     *\n     * <ul>\n     * <li>If the argument is NaN, the result is the string\n     *     \"{@code NaN}\".\n     * <li>Otherwise, the result is a string that represents the sign and\n     * magnitude (absolute value) of the argument. If the sign is negative,\n     * the first character of the result is '{@code -}'\n     * ({@code '\\u005Cu002D'}); if the sign is positive, no sign character\n     * appears in the result. As for the magnitude <i>m</i>:\n     *\n     * <ul>\n     * <li>If <i>m</i> is infinity, it is represented by the string\n     * {@code \"Infinity\"}; thus, positive infinity produces the\n     * result {@code \"Infinity\"} and negative infinity produces\n     * the result {@code \"-Infinity\"}.\n     *\n     * <li>If <i>m</i> is zero, it is represented by the string\n     * {@code \"0x0.0p0\"}; thus, negative zero produces the result\n     * {@code \"-0x0.0p0\"} and positive zero produces the result\n     * {@code \"0x0.0p0\"}.\n     *\n     * <li>If <i>m</i> is a {@code float} value with a\n     * normalized representation, substrings are used to represent the\n     * significand and exponent fields.  The significand is\n     * represented by the characters {@code \"0x1.\"}\n     * followed by a lowercase hexadecimal representation of the rest\n     * of the significand as a fraction.  Trailing zeros in the\n     * hexadecimal representation are removed unless all the digits\n     * are zero, in which case a single zero is used. Next, the\n     * exponent is represented by {@code \"p\"} followed\n     * by a decimal string of the unbiased exponent as if produced by\n     * a call to {@link Integer#toString(int) Integer.toString} on the\n     * exponent value.\n     *\n     * <li>If <i>m</i> is a {@code float} value with a subnormal\n     * representation, the significand is represented by the\n     * characters {@code \"0x0.\"} followed by a\n     * hexadecimal representation of the rest of the significand as a\n     * fraction.  Trailing zeros in the hexadecimal representation are\n     * removed. Next, the exponent is represented by\n     * {@code \"p-126\"}.  Note that there must be at\n     * least one nonzero digit in a subnormal significand.\n     *\n     * </ul>\n     *\n     * </ul>\n     *\n     * <table class=\"striped\">\n     * <caption>Examples</caption>\n     * <thead>\n     * <tr><th scope=\"col\">Floating-point Value</th><th scope=\"col\">Hexadecimal String</th>\n     * </thead>\n     * <tbody>\n     * <tr><th scope=\"row\">{@code 1.0}</th> <td>{@code 0x1.0p0}</td>\n     * <tr><th scope=\"row\">{@code -1.0}</th>        <td>{@code -0x1.0p0}</td>\n     * <tr><th scope=\"row\">{@code 2.0}</th> <td>{@code 0x1.0p1}</td>\n     * <tr><th scope=\"row\">{@code 3.0}</th> <td>{@code 0x1.8p1}</td>\n     * <tr><th scope=\"row\">{@code 0.5}</th> <td>{@code 0x1.0p-1}</td>\n     * <tr><th scope=\"row\">{@code 0.25}</th>        <td>{@code 0x1.0p-2}</td>\n     * <tr><th scope=\"row\">{@code Float.MAX_VALUE}</th>\n     *     <td>{@code 0x1.fffffep127}</td>\n     * <tr><th scope=\"row\">{@code Minimum Normal Value}</th>\n     *     <td>{@code 0x1.0p-126}</td>\n     * <tr><th scope=\"row\">{@code Maximum Subnormal Value}</th>\n     *     <td>{@code 0x0.fffffep-126}</td>\n     * <tr><th scope=\"row\">{@code Float.MIN_VALUE}</th>\n     *     <td>{@code 0x0.000002p-126}</td>\n     * </tbody>\n     * </table>\n     * @param   f   the {@code float} to be converted.\n     * @return a hex string representation of the argument.\n     * @since 1.5\n     * @author Joseph D. Darcy\n     ",
    "links" : [ "java.lang.Integer#toString(int)" ]
  }, {
    "name" : "public static Float valueOf(String s) throws NumberFormatException",
    "returnType" : "Float",
    "comment" : "\n     * Returns a {@code Float} object holding the\n     * {@code float} value represented by the argument string\n     * {@code s}.\n     *\n     * <p>If {@code s} is {@code null}, then a\n     * {@code NullPointerException} is thrown.\n     *\n     * <p>Leading and trailing whitespace characters in {@code s}\n     * are ignored.  Whitespace is removed as if by the {@link\n     * String#trim} method; that is, both ASCII space and control\n     * characters are removed. The rest of {@code s} should\n     * constitute a <i>FloatValue</i> as described by the lexical\n     * syntax rules:\n     *\n     * <blockquote>\n     * <dl>\n     * <dt><i>FloatValue:</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code NaN}\n     * <dd><i>Sign<sub>opt</sub></i> {@code Infinity}\n     * <dd><i>Sign<sub>opt</sub> FloatingPointLiteral</i>\n     * <dd><i>Sign<sub>opt</sub> HexFloatingPointLiteral</i>\n     * <dd><i>SignedInteger</i>\n     * </dl>\n     *\n     * <dl>\n     * <dt><i>HexFloatingPointLiteral</i>:\n     * <dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub></i>\n     * </dl>\n     *\n     * <dl>\n     * <dt><i>HexSignificand:</i>\n     * <dd><i>HexNumeral</i>\n     * <dd><i>HexNumeral</i> {@code .}\n     * <dd>{@code 0x} <i>HexDigits<sub>opt</sub>\n     *     </i>{@code .}<i> HexDigits</i>\n     * <dd>{@code 0X}<i> HexDigits<sub>opt</sub>\n     *     </i>{@code .} <i>HexDigits</i>\n     * </dl>\n     *\n     * <dl>\n     * <dt><i>BinaryExponent:</i>\n     * <dd><i>BinaryExponentIndicator SignedInteger</i>\n     * </dl>\n     *\n     * <dl>\n     * <dt><i>BinaryExponentIndicator:</i>\n     * <dd>{@code p}\n     * <dd>{@code P}\n     * </dl>\n     *\n     * </blockquote>\n     *\n     * where <i>Sign</i>, <i>FloatingPointLiteral</i>,\n     * <i>HexNumeral</i>, <i>HexDigits</i>, <i>SignedInteger</i> and\n     * <i>FloatTypeSuffix</i> are as defined in the lexical structure\n     * sections of\n     * <cite>The Java Language Specification</cite>,\n     * except that underscores are not accepted between digits.\n     * If {@code s} does not have the form of\n     * a <i>FloatValue</i>, then a {@code NumberFormatException}\n     * is thrown. Otherwise, {@code s} is regarded as\n     * representing an exact decimal value in the usual\n     * \"computerized scientific notation\" or as an exact\n     * hexadecimal value; this exact numerical value is then\n     * conceptually converted to an \"infinitely precise\"\n     * binary value that is then rounded to type {@code float}\n     * by the usual round-to-nearest rule of IEEE 754 floating-point\n     * arithmetic, which includes preserving the sign of a zero\n     * value.\n     *\n     * Note that the round-to-nearest rule also implies overflow and\n     * underflow behaviour; if the exact value of {@code s} is large\n     * enough in magnitude (greater than or equal to ({@link\n     * #MAX_VALUE} + {@link Math#ulp(float) ulp(MAX_VALUE)}/2),\n     * rounding to {@code float} will result in an infinity and if the\n     * exact value of {@code s} is small enough in magnitude (less\n     * than or equal to {@link #MIN_VALUE}/2), rounding to float will\n     * result in a zero.\n     *\n     * Finally, after rounding a {@code Float} object representing\n     * this {@code float} value is returned.\n     *\n     * <p>To interpret localized string representations of a\n     * floating-point value, use subclasses of {@link\n     * java.text.NumberFormat}.\n     *\n     * <p>Note that trailing format specifiers, specifiers that\n     * determine the type of a floating-point literal\n     * ({@code 1.0f} is a {@code float} value;\n     * {@code 1.0d} is a {@code double} value), do\n     * <em>not</em> influence the results of this method.  In other\n     * words, the numerical value of the input string is converted\n     * directly to the target floating-point type.  In general, the\n     * two-step sequence of conversions, string to {@code double}\n     * followed by {@code double} to {@code float}, is\n     * <em>not</em> equivalent to converting a string directly to\n     * {@code float}.  For example, if first converted to an\n     * intermediate {@code double} and then to\n     * {@code float}, the string<br>\n     * {@code \"1.00000017881393421514957253748434595763683319091796875001d\"}<br>\n     * results in the {@code float} value\n     * {@code 1.0000002f}; if the string is converted directly to\n     * {@code float}, <code>1.000000<b>1</b>f</code> results.\n     *\n     * <p>To avoid calling this method on an invalid string and having\n     * a {@code NumberFormatException} be thrown, the documentation\n     * for {@link Double#valueOf Double.valueOf} lists a regular\n     * expression which can be used to screen the input.\n     *\n     * @param   s   the string to be parsed.\n     * @return  a {@code Float} object holding the value\n     *          represented by the {@code String} argument.\n     * @throws  NumberFormatException  if the string does not contain a\n     *          parsable number.\n     ",
    "links" : [ "java.lang.String#trim", "#MIN_VALUE", "java.lang.Double#valueOf", "#MAX_VALUE", "java.lang.Math#ulp(float)", "java.text.NumberFormat" ]
  }, {
    "name" : "public static Float valueOf(float f)",
    "returnType" : "Float",
    "comment" : "\n     * Returns a {@code Float} instance representing the specified\n     * {@code float} value.\n     * If a new {@code Float} instance is not required, this method\n     * should generally be used in preference to the constructor\n     * {@link #Float(float)}, as this method is likely to yield\n     * significantly better space and time performance by caching\n     * frequently requested values.\n     *\n     * @param  f a float value.\n     * @return a {@code Float} instance representing {@code f}.\n     * @since  1.5\n     ",
    "links" : [ "#Float(float)" ]
  }, {
    "name" : "public static float parseFloat(String s) throws NumberFormatException",
    "returnType" : "float",
    "comment" : "\n     * Returns a new {@code float} initialized to the value\n     * represented by the specified {@code String}, as performed\n     * by the {@code valueOf} method of class {@code Float}.\n     *\n     * @param  s the string to be parsed.\n     * @return the {@code float} value represented by the string\n     *         argument.\n     * @throws NullPointerException  if the string is null\n     * @throws NumberFormatException if the string does not contain a\n     *               parsable {@code float}.\n     * @see    java.lang.Float#valueOf(String)\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNaN(float v)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the specified number is a\n     * Not-a-Number (NaN) value, {@code false} otherwise.\n     *\n     * @param   v   the value to be tested.\n     * @return  {@code true} if the argument is NaN;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInfinite(float v)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the specified number is infinitely\n     * large in magnitude, {@code false} otherwise.\n     *\n     * @param   v   the value to be tested.\n     * @return  {@code true} if the argument is positive infinity or\n     *          negative infinity; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFinite(float f)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the argument is a finite floating-point\n     * value; returns {@code false} otherwise (for NaN and infinity\n     * arguments).\n     *\n     * @param f the {@code float} value to be tested\n     * @return {@code true} if the argument is a finite\n     * floating-point value, {@code false} otherwise.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNaN()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this {@code Float} value is a\n     * Not-a-Number (NaN), {@code false} otherwise.\n     *\n     * @return  {@code true} if the value represented by this object is\n     *          NaN; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInfinite()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this {@code Float} value is\n     * infinitely large in magnitude, {@code false} otherwise.\n     *\n     * @return  {@code true} if the value represented by this object is\n     *          positive infinity or negative infinity;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this {@code Float} object.\n     * The primitive {@code float} value represented by this object\n     * is converted to a {@code String} exactly as if by the method\n     * {@code toString} of one argument.\n     *\n     * @return  a {@code String} representation of this object.\n     * @see java.lang.Float#toString(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte byteValue()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value of this {@code Float} as a {@code byte} after\n     * a narrowing primitive conversion.\n     *\n     * @return  the {@code float} value represented by this object\n     *          converted to type {@code byte}\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of this {@code Float} as a {@code short}\n     * after a narrowing primitive conversion.\n     *\n     * @return  the {@code float} value represented by this object\n     *          converted to type {@code short}\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     * @since 1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this {@code Float} as an {@code int} after\n     * a narrowing primitive conversion.\n     *\n     * @return  the {@code float} value represented by this object\n     *          converted to type {@code int}\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns value of this {@code Float} as a {@code long} after a\n     * narrowing primitive conversion.\n     *\n     * @return  the {@code float} value represented by this object\n     *          converted to type {@code long}\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the {@code float} value of this {@code Float} object.\n     *\n     * @return the {@code float} value represented by this object\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of this {@code Float} as a {@code double}\n     * after a widening primitive conversion.\n     *\n     * @return the {@code float} value represented by this\n     *         object converted to type {@code double}\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code Float} object. The\n     * result is the integer bit representation, exactly as produced\n     * by the method {@link #floatToIntBits(float)}, of the primitive\n     * {@code float} value represented by this {@code Float}\n     * object.\n     *\n     * @return a hash code value for this object.\n     ",
    "links" : [ "#floatToIntBits(float)" ]
  }, {
    "name" : "public static int hashCode(float value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for a {@code float} value; compatible with\n     * {@code Float.hashCode()}.\n     *\n     * @param value the value to hash\n     * @return a hash code value for a {@code float} value.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object.  The result\n     * is {@code true} if and only if the argument is not\n     * {@code null} and is a {@code Float} object that\n     * represents a {@code float} with the same value as the\n     * {@code float} represented by this object. For this\n     * purpose, two {@code float} values are considered to be the\n     * same if and only if the method {@link #floatToIntBits(float)}\n     * returns the identical {@code int} value when applied to\n     * each.\n     *\n     * @apiNote\n     * This method is defined in terms of {@link\n     * #floatToIntBits(float)} rather than the {@code ==} operator on\n     * {@code float} values since the {@code ==} operator does\n     * <em>not</em> define an equivalence relation and to satisfy the\n     * {@linkplain Object#equals equals contract} an equivalence\n     * relation must be implemented; see <a\n     * href=\"Double.html#equivalenceRelation\">this discussion</a> for\n     * details of floating-point equality and equivalence.\n     *\n     * @param obj the object to be compared\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see java.lang.Float#floatToIntBits(float)\n     * @jls 15.21.1 Numerical Equality Operators == and !=\n     ",
    "links" : [ "#floatToIntBits(float)" ]
  }, {
    "name" : "public static int floatToIntBits(float value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a representation of the specified floating-point value\n     * according to the IEEE 754 floating-point \"single format\" bit\n     * layout.\n     *\n     * <p>Bit 31 (the bit that is selected by the mask\n     * {@code 0x80000000}) represents the sign of the floating-point\n     * number.\n     * Bits 30-23 (the bits that are selected by the mask\n     * {@code 0x7f800000}) represent the exponent.\n     * Bits 22-0 (the bits that are selected by the mask\n     * {@code 0x007fffff}) represent the significand (sometimes called\n     * the mantissa) of the floating-point number.\n     *\n     * <p>If the argument is positive infinity, the result is\n     * {@code 0x7f800000}.\n     *\n     * <p>If the argument is negative infinity, the result is\n     * {@code 0xff800000}.\n     *\n     * <p>If the argument is NaN, the result is {@code 0x7fc00000}.\n     *\n     * <p>In all cases, the result is an integer that, when given to the\n     * {@link #intBitsToFloat(int)} method, will produce a floating-point\n     * value the same as the argument to {@code floatToIntBits}\n     * (except all NaN values are collapsed to a single\n     * \"canonical\" NaN value).\n     *\n     * @param   value   a floating-point number.\n     * @return the bits that represent the floating-point number.\n     ",
    "links" : [ "#intBitsToFloat(int)" ]
  }, {
    "name" : "public static native int floatToRawIntBits(float value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a representation of the specified floating-point value\n     * according to the IEEE 754 floating-point \"single format\" bit\n     * layout, preserving Not-a-Number (NaN) values.\n     *\n     * <p>Bit 31 (the bit that is selected by the mask\n     * {@code 0x80000000}) represents the sign of the floating-point\n     * number.\n     * Bits 30-23 (the bits that are selected by the mask\n     * {@code 0x7f800000}) represent the exponent.\n     * Bits 22-0 (the bits that are selected by the mask\n     * {@code 0x007fffff}) represent the significand (sometimes called\n     * the mantissa) of the floating-point number.\n     *\n     * <p>If the argument is positive infinity, the result is\n     * {@code 0x7f800000}.\n     *\n     * <p>If the argument is negative infinity, the result is\n     * {@code 0xff800000}.\n     *\n     * <p>If the argument is NaN, the result is the integer representing\n     * the actual NaN value.  Unlike the {@code floatToIntBits}\n     * method, {@code floatToRawIntBits} does not collapse all the\n     * bit patterns encoding a NaN to a single \"canonical\"\n     * NaN value.\n     *\n     * <p>In all cases, the result is an integer that, when given to the\n     * {@link #intBitsToFloat(int)} method, will produce a\n     * floating-point value the same as the argument to\n     * {@code floatToRawIntBits}.\n     *\n     * @param   value   a floating-point number.\n     * @return the bits that represent the floating-point number.\n     * @since 1.3\n     ",
    "links" : [ "#intBitsToFloat(int)" ]
  }, {
    "name" : "public static native float intBitsToFloat(int bits)",
    "returnType" : "float",
    "comment" : "\n     * Returns the {@code float} value corresponding to a given\n     * bit representation.\n     * The argument is considered to be a representation of a\n     * floating-point value according to the IEEE 754 floating-point\n     * \"single format\" bit layout.\n     *\n     * <p>If the argument is {@code 0x7f800000}, the result is positive\n     * infinity.\n     *\n     * <p>If the argument is {@code 0xff800000}, the result is negative\n     * infinity.\n     *\n     * <p>If the argument is any value in the range\n     * {@code 0x7f800001} through {@code 0x7fffffff} or in\n     * the range {@code 0xff800001} through\n     * {@code 0xffffffff}, the result is a NaN.  No IEEE 754\n     * floating-point operation provided by Java can distinguish\n     * between two NaN values of the same type with different bit\n     * patterns.  Distinct values of NaN are only distinguishable by\n     * use of the {@code Float.floatToRawIntBits} method.\n     *\n     * <p>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three\n     * values that can be computed from the argument:\n     *\n     * <blockquote><pre>{@code\n     * int s = ((bits >> 31) == 0) ? 1 : -1;\n     * int e = ((bits >> 23) & 0xff);\n     * int m = (e == 0) ?\n     *                 (bits & 0x7fffff) << 1 :\n     *                 (bits & 0x7fffff) | 0x800000;\n     * }</pre></blockquote>\n     *\n     * Then the floating-point result equals the value of the mathematical\n     * expression <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-150</sup>.\n     *\n     * <p>Note that this method may not be able to return a\n     * {@code float} NaN with exactly same bit pattern as the\n     * {@code int} argument.  IEEE 754 distinguishes between two\n     * kinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The\n     * differences between the two kinds of NaN are generally not\n     * visible in Java.  Arithmetic operations on signaling NaNs turn\n     * them into quiet NaNs with a different, but often similar, bit\n     * pattern.  However, on some processors merely copying a\n     * signaling NaN also performs that conversion.  In particular,\n     * copying a signaling NaN to return it to the calling method may\n     * perform this conversion.  So {@code intBitsToFloat} may\n     * not be able to return a {@code float} with a signaling NaN\n     * bit pattern.  Consequently, for some {@code int} values,\n     * {@code floatToRawIntBits(intBitsToFloat(start))} may\n     * <i>not</i> equal {@code start}.  Moreover, which\n     * particular bit patterns represent signaling NaNs is platform\n     * dependent; although all NaN bit patterns, quiet or signaling,\n     * must be in the NaN range identified above.\n     *\n     * @param   bits   an integer.\n     * @return  the {@code float} floating-point value with the same bit\n     *          pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Float anotherFloat)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code Float} objects numerically.\n     *\n     * This method imposes a total order on {@code Float} objects\n     * with two differences compared to the incomplete order defined by\n     * the Java language numerical comparison operators ({@code <, <=,\n     * ==, >=, >}) on {@code float} values.\n     *\n     * <ul><li> A NaN is <em>unordered</em> with respect to other\n     *          values and unequal to itself under the comparison\n     *          operators.  This method chooses to define {@code\n     *          Float.NaN} to be equal to itself and greater than all\n     *          other {@code double} values (including {@code\n     *          Float.POSITIVE_INFINITY}).\n     *\n     *      <li> Positive zero and negative zero compare equal\n     *      numerically, but are distinct and distinguishable values.\n     *      This method chooses to define positive zero ({@code +0.0f}),\n     *      to be greater than negative zero ({@code -0.0f}).\n     * </ul>\n     *\n     * This ensures that the <i>natural ordering</i> of {@code Float}\n     * objects imposed by this method is <i>consistent with\n     * equals</i>; see <a href=\"Double.html#equivalenceRelation\">this\n     * discussion</a> for details of floating-point comparison and\n     * ordering.\n     *\n     *\n     * @param   anotherFloat   the {@code Float} to be compared.\n     * @return  the value {@code 0} if {@code anotherFloat} is\n     *          numerically equal to this {@code Float}; a value\n     *          less than {@code 0} if this {@code Float}\n     *          is numerically less than {@code anotherFloat};\n     *          and a value greater than {@code 0} if this\n     *          {@code Float} is numerically greater than\n     *          {@code anotherFloat}.\n     *\n     * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}\n     * @since   1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(float f1, float f2)",
    "returnType" : "int",
    "comment" : "\n     * Compares the two specified {@code float} values. The sign\n     * of the integer value returned is the same as that of the\n     * integer that would be returned by the call:\n     * <pre>\n     *    new Float(f1).compareTo(new Float(f2))\n     * </pre>\n     *\n     * @param   f1        the first {@code float} to compare.\n     * @param   f2        the second {@code float} to compare.\n     * @return  the value {@code 0} if {@code f1} is\n     *          numerically equal to {@code f2}; a value less than\n     *          {@code 0} if {@code f1} is numerically less than\n     *          {@code f2}; and a value greater than {@code 0}\n     *          if {@code f1} is numerically greater than\n     *          {@code f2}.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float sum(float a, float b)",
    "returnType" : "float",
    "comment" : "\n     * Adds two {@code float} values together as per the + operator.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the sum of {@code a} and {@code b}\n     * @jls 4.2.4 Floating-Point Operations\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float max(float a, float b)",
    "returnType" : "float",
    "comment" : "\n     * Returns the greater of two {@code float} values\n     * as if by calling {@link Math#max(float, float) Math.max}.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the greater of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ "java.lang.Math#max(float" ]
  }, {
    "name" : "public static float min(float a, float b)",
    "returnType" : "float",
    "comment" : "\n     * Returns the smaller of two {@code float} values\n     * as if by calling {@link Math#min(float, float) Math.min}.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the smaller of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ "java.lang.Math#min(float" ]
  }, {
    "name" : "public Optional<Float> describeConstable()",
    "returnType" : "Optional<Float>",
    "comment" : "\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance, which is the instance itself.\n     *\n     * @return an {@link Optional} describing the {@linkplain Float} instance\n     * @since 12\n     * @hide\n     ",
    "links" : [ "java.util.Optional" ]
  }, {
    "name" : "public Float resolveConstantDesc(MethodHandles.Lookup lookup)",
    "returnType" : "Float",
    "comment" : "\n     * Resolves this instance as a {@link ConstantDesc}, the result of which is\n     * the instance itself.\n     *\n     * @param lookup ignored\n     * @return the {@linkplain Float} instance\n     * @since 12\n     * @hide\n     ",
    "links" : [ "java.lang.constant.ConstantDesc" ]
  } ],
  "methodNames" : [ "public static String toString(float f)", "public static String toHexString(float f)", "public static Float valueOf(String s) throws NumberFormatException", "public static Float valueOf(float f)", "public static float parseFloat(String s) throws NumberFormatException", "public static boolean isNaN(float v)", "public static boolean isInfinite(float v)", "public static boolean isFinite(float f)", "public boolean isNaN()", "public boolean isInfinite()", "public String toString()", "public byte byteValue()", "public short shortValue()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public int hashCode()", "public static int hashCode(float value)", "public boolean equals(Object obj)", "public static int floatToIntBits(float value)", "public static native int floatToRawIntBits(float value)", "public static native float intBitsToFloat(int bits)", "public int compareTo(Float anotherFloat)", "public static int compare(float f1, float f2)", "public static float sum(float a, float b)", "public static float max(float a, float b)", "public static float min(float a, float b)", "public Optional<Float> describeConstable()", "public Float resolveConstantDesc(MethodHandles.Lookup lookup)" ],
  "variableNames" : [ "POSITIVE_INFINITY", "NEGATIVE_INFINITY", "NaN", "MAX_VALUE", "MIN_NORMAL", "MIN_VALUE", "MAX_EXPONENT", "MIN_EXPONENT", "SIZE", "PRECISION", "BYTES", "TYPE", "value", "serialVersionUID" ]
}