{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/util/SocketUtils.java",
  "packageName" : "android.net.util",
  "className" : "SocketUtils",
  "comment" : "\n * Collection of utilities to interact with raw sockets.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void bindSocketToInterface(@NonNull FileDescriptor socket, @NonNull String iface) throws ErrnoException",
    "returnType" : "void",
    "comment" : "\n     * Create a raw datagram socket that is bound to an interface.\n     *\n     * <p>Data sent through the socket will go directly to the underlying network, ignoring VPNs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SocketAddress makeNetlinkSocketAddress(int portId, int groupsMask)",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Make a socket address to communicate with netlink.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SocketAddress makePacketSocketAddress(int protocol, int ifIndex)",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Make socket address that packet sockets can bind to.\n     *\n     * @param protocol the layer 2 protocol of the packets to receive. One of the {@code ETH_P_*}\n     *                 constants in {@link android.system.OsConstants}.\n     * @param ifIndex the interface index on which packets will be received.\n     ",
    "links" : [ "android.system.OsConstants" ]
  }, {
    "name" : "public static SocketAddress makePacketSocketAddress(int ifIndex, @NonNull byte[] hwAddr)",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Make a socket address that packet socket can send packets to.\n     * @deprecated Use {@link #makePacketSocketAddress(int, int, byte[])} instead.\n     *\n     * @param ifIndex the interface index on which packets will be sent.\n     * @param hwAddr the hardware address to which packets will be sent.\n     ",
    "links" : [ "#makePacketSocketAddress(int" ]
  }, {
    "name" : "public static SocketAddress makePacketSocketAddress(int protocol, int ifIndex, @NonNull byte[] hwAddr)",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Make a socket address that a packet socket can send packets to.\n     *\n     * @param protocol the layer 2 protocol of the packets to send. One of the {@code ETH_P_*}\n     *                 constants in {@link android.system.OsConstants}.\n     * @param ifIndex the interface index on which packets will be sent.\n     * @param hwAddr the hardware address to which packets will be sent.\n     ",
    "links" : [ "android.system.OsConstants" ]
  }, {
    "name" : "public static void closeSocket(@Nullable FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @see IoBridge#closeAndSignalBlockedThreads(FileDescriptor)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void bindSocketToInterface(@NonNull FileDescriptor socket, @NonNull String iface) throws ErrnoException", "public static SocketAddress makeNetlinkSocketAddress(int portId, int groupsMask)", "public static SocketAddress makePacketSocketAddress(int protocol, int ifIndex)", "public static SocketAddress makePacketSocketAddress(int ifIndex, @NonNull byte[] hwAddr)", "public static SocketAddress makePacketSocketAddress(int protocol, int ifIndex, @NonNull byte[] hwAddr)", "public static void closeSocket(@Nullable FileDescriptor fd) throws IOException" ],
  "variableNames" : [ ]
}