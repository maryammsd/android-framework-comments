{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/RemoteConference.java",
  "packageName" : "android.telecom",
  "className" : "RemoteConference",
  "comment" : "\n * A conference provided to a {@link ConnectionService} by another {@code ConnectionService} through\n * {@link ConnectionService#conferenceRemoteConnections}. Once created, a {@code RemoteConference}\n * can be used to control the conference call or monitor changes through\n * {@link RemoteConnection.Callback}.\n *\n * @see ConnectionService#onRemoteConferenceAdded\n ",
  "variables" : [ {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionService",
    "type" : "IConnectionService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackRecords",
    "type" : "Set<CallbackRecord<Callback>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildConnections",
    "type" : "List<RemoteConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableChildConnections",
    "type" : "List<RemoteConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConferenceableConnections",
    "type" : "List<RemoteConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableConferenceableConnections",
    "type" : "List<RemoteConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisconnectCause",
    "type" : "DisconnectCause",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " String getId()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setDestroyed()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setState(final int newState)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void addConnection(final RemoteConnection connection)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void removeConnection(final RemoteConnection connection)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setConnectionCapabilities(final int connectionCapabilities)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setConnectionProperties(final int connectionProperties)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setConferenceableConnections(List<RemoteConnection> conferenceableConnections)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setDisconnected(final DisconnectCause disconnectCause)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void putExtras(final Bundle extras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void removeExtras(List<String> keys)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void notifyExtrasChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final List<RemoteConnection> getConnections()",
    "returnType" : "List<RemoteConnection>",
    "comment" : "\n     * Returns the list of {@link RemoteConnection}s contained in this conference.\n     *\n     * @return A list of child connections.\n     ",
    "links" : [ "android.telecom.RemoteConnection" ]
  }, {
    "name" : "public final int getState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of the conference call. See {@link Connection} for valid values.\n     *\n     * @return A constant representing the state the conference call is currently in.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final int getConnectionCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Returns the capabilities of the conference. See {@code CAPABILITY_*} constants in class\n     * {@link Connection} for valid values.\n     *\n     * @return A bitmask of the capabilities of the conference call.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final int getConnectionProperties()",
    "returnType" : "int",
    "comment" : "\n     * Returns the properties of the conference. See {@code PROPERTY_*} constants in class\n     * {@link Connection} for valid values.\n     *\n     * @return A bitmask of the properties of the conference call.\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : "public final Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Obtain the extras associated with this {@code RemoteConnection}.\n     *\n     * @return The extras for this connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects the conference call as well as the child {@link RemoteConnection}s.\n     ",
    "links" : [ "android.telecom.RemoteConnection" ]
  }, {
    "name" : "public void separate(RemoteConnection connection)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified {@link RemoteConnection} from the conference. This causes the\n     * {@link RemoteConnection} to become a standalone connection. This is a no-op if the\n     * {@link RemoteConnection} does not belong to this conference.\n     *\n     * @param connection The remote-connection to remove.\n     ",
    "links" : [ "android.telecom.RemoteConnection" ]
  }, {
    "name" : "public void merge()",
    "returnType" : "void",
    "comment" : "\n     * Merges all {@link RemoteConnection}s of this conference into a single call. This should be\n     * invoked only if the conference contains the capability\n     * {@link Connection#CAPABILITY_MERGE_CONFERENCE}, otherwise it is a no-op. The presence of said\n     * capability indicates that the connections of this conference, despite being part of the\n     * same conference object, are yet to have their audio streams merged; this is a common pattern\n     * for CDMA conference calls, but the capability is not used for GSM and SIP conference calls.\n     * Invoking this method will cause the unmerged child connections to merge their audio\n     * streams.\n     ",
    "links" : [ "android.telecom.Connection#CAPABILITY_MERGE_CONFERENCE", "android.telecom.RemoteConnection" ]
  }, {
    "name" : "public void swap()",
    "returnType" : "void",
    "comment" : "\n     * Swaps the active audio stream between the conference's child {@link RemoteConnection}s.\n     * This should be invoked only if the conference contains the capability\n     * {@link Connection#CAPABILITY_SWAP_CONFERENCE}, otherwise it is a no-op. This is only used by\n     * {@link ConnectionService}s that create conferences for connections that do not yet have\n     * their audio streams merged; this is a common pattern for CDMA conference calls, but the\n     * capability is not used for GSM and SIP conference calls. Invoking this method will change the\n     * active audio stream to a different child connection.\n     ",
    "links" : [ "com.android.internal.telecom.IConnectionService", "android.telecom.Connection#CAPABILITY_SWAP_CONFERENCE", "android.telecom.RemoteConnection" ]
  }, {
    "name" : "public void hold()",
    "returnType" : "void",
    "comment" : "\n     * Puts the conference on hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unhold()",
    "returnType" : "void",
    "comment" : "\n     * Unholds the conference call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisconnectCause getDisconnectCause()",
    "returnType" : "DisconnectCause",
    "comment" : "\n     * Returns the {@link DisconnectCause} for the conference if it is in the state\n     * {@link Connection#STATE_DISCONNECTED}. If the conference is not disconnected, this will\n     * return null.\n     *\n     * @return The disconnect cause.\n     ",
    "links" : [ "android.telecom.Connection#STATE_DISCONNECTED", "android.telecom.DisconnectCause" ]
  }, {
    "name" : "public void playDtmfTone(char digit)",
    "returnType" : "void",
    "comment" : "\n     * Requests that the conference start playing the specified DTMF tone.\n     *\n     * @param digit The digit for which to play a DTMF tone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopDtmfTone()",
    "returnType" : "void",
    "comment" : "\n     * Stops the most recent request to play a DTMF tone.\n     *\n     * @see #playDtmfTone\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioState(AudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Request to change the conference's audio routing to the specified state. The specified state\n     * can include audio routing (Bluetooth, Speaker, etc) and muting state.\n     *\n     * @see android.telecom.AudioState\n     * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.\n     * @hide\n     ",
    "links" : [ "#setCallAudioState(CallAudioState)" ]
  }, {
    "name" : "public void setCallAudioState(CallAudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Request to change the conference's audio routing to the specified state. The specified state\n     * can include audio routing (Bluetooth, Speaker, etc) and muting state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<RemoteConnection> getConferenceableConnections()",
    "returnType" : "List<RemoteConnection>",
    "comment" : "\n     * Returns a list of independent connections that can me merged with this conference.\n     *\n     * @return A list of conferenceable connections.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void registerCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback through which to receive state updates for this conference.\n     *\n     * @param callback The callback to notify of state changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void registerCallback(Callback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback through which to receive state updates for this conference.\n     * Callbacks will be notified using the specified handler, if provided.\n     *\n     * @param callback The callback to notify of state changes.\n     * @param handler The handler on which to execute the callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void unregisterCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered callback.\n     *\n     * @see #registerCallback\n     *\n     * @param callback The callback to unregister.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mConnectionService", "mCallbackRecords", "mChildConnections", "mUnmodifiableChildConnections", "mConferenceableConnections", "mUnmodifiableConferenceableConnections", "mState", "mDisconnectCause", "mConnectionCapabilities", "mConnectionProperties", "mExtras" ],
  "methodNames" : [ " String getId()", " void setDestroyed()", " void setState(final int newState)", " void addConnection(final RemoteConnection connection)", " void removeConnection(final RemoteConnection connection)", " void setConnectionCapabilities(final int connectionCapabilities)", " void setConnectionProperties(final int connectionProperties)", " void setConferenceableConnections(List<RemoteConnection> conferenceableConnections)", " void setDisconnected(final DisconnectCause disconnectCause)", " void putExtras(final Bundle extras)", " void removeExtras(List<String> keys)", "private void notifyExtrasChanged()", "public final List<RemoteConnection> getConnections()", "public final int getState()", "public final int getConnectionCapabilities()", "public final int getConnectionProperties()", "public final Bundle getExtras()", "public void disconnect()", "public void separate(RemoteConnection connection)", "public void merge()", "public void swap()", "public void hold()", "public void unhold()", "public DisconnectCause getDisconnectCause()", "public void playDtmfTone(char digit)", "public void stopDtmfTone()", "public void setAudioState(AudioState state)", "public void setCallAudioState(CallAudioState state)", "public List<RemoteConnection> getConferenceableConnections()", "public final void registerCallback(Callback callback)", "public final void registerCallback(Callback callback, Handler handler)", "public final void unregisterCallback(Callback callback)" ]
}