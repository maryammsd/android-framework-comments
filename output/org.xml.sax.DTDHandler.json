{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/DTDHandler.java",
  "packageName" : "org.xml.sax",
  "className" : "DTDHandler",
  "comment" : "\n * Receive notification of basic DTD-related events.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>If a SAX application needs information about notations and\n * unparsed entities, then the application implements this\n * interface and registers an instance with the SAX parser using\n * the parser's setDTDHandler method.  The parser uses the\n * instance to report notation and unparsed entity declarations to\n * the application.</p>\n *\n * <p>Note that this interface includes only those DTD events that\n * the XML recommendation <em>requires</em> processors to report:\n * notation and unparsed entity declarations.</p>\n *\n * <p>The SAX parser may report these events in any order, regardless\n * of the order in which the notations and unparsed entities were\n * declared; however, all DTD events must be reported after the\n * document handler's startDocument event, and before the first\n * startElement event.\n * (If the {@link org.xml.sax.ext.LexicalHandler LexicalHandler} is\n * used, these events must also be reported before the endDTD event.)\n * </p>\n *\n * <p>It is up to the application to store the information for\n * future use (perhaps in a hash table or object tree).\n * If the application encounters attributes of type \"NOTATION\",\n * \"ENTITY\", or \"ENTITIES\", it can use the information that it\n * obtained through this interface to find the entity and/or\n * notation corresponding with the attribute value.</p>\n *\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.XMLReader#setDTDHandler\n ",
  "links" : [ "org.xml.sax.ext.LexicalHandler" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void notationDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a notation declaration event.\n     *\n     * <p>It is up to the application to record the notation for later\n     * reference, if necessary;\n     * notations may appear as attribute values and in unparsed entity\n     * declarations, and are sometime used with processing instruction\n     * target names.</p>\n     *\n     * <p>At least one of publicId and systemId must be non-null.\n     * If a system identifier is present, and it is a URL, the SAX\n     * parser must resolve it fully before passing it to the\n     * application through this event.</p>\n     *\n     * <p>There is no guarantee that the notation declaration will be\n     * reported before any unparsed entities that use it.</p>\n     *\n     * @param name The notation name.\n     * @param publicId The notation's public identifier, or null if\n     *        none was given.\n     * @param systemId The notation's system identifier, or null if\n     *        none was given.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see #unparsedEntityDecl\n     * @see org.xml.sax.Attributes\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of an unparsed entity declaration event.\n     *\n     * <p>Note that the notation name corresponds to a notation\n     * reported by the {@link #notationDecl notationDecl} event.\n     * It is up to the application to record the entity for later\n     * reference, if necessary;\n     * unparsed entities may appear as attribute values.\n     * </p>\n     *\n     * <p>If the system identifier is a URL, the parser must resolve it\n     * fully before passing it to the application.</p>\n     *\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @param name The unparsed entity's name.\n     * @param publicId The entity's public identifier, or null if none\n     *        was given.\n     * @param systemId The entity's system identifier.\n     * @param notationName The name of the associated notation.\n     * @see #notationDecl\n     * @see org.xml.sax.Attributes\n     ",
    "links" : [ "#notationDecl" ]
  } ],
  "methodNames" : [ "public abstract void notationDecl(String name, String publicId, String systemId) throws SAXException", "public abstract void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException" ],
  "variableNames" : [ ]
}