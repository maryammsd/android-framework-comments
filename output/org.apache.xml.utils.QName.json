{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/QName.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "QName",
  "comment" : "\n * Class to represent a qualified name: \"The name of an internal XSLT object,\n * specifically a named template (see [7 Named Templates]), a mode (see [6.7 Modes]),\n * an attribute set (see [8.1.4 Named Attribute Sets]), a key (see [14.2 Keys]),\n * a locale (see [14.3 Number Formatting]), a variable or a parameter (see\n * [12 Variables and Parameters]) is specified as a QName. If it has a prefix,\n * then the prefix is expanded into a URI reference using the namespace declarations\n * in effect on the attribute in which the name occurs. The expanded name\n * consisting of the local part of the name and the possibly null URI reference\n * is used as the name of the object. The default namespace is not used for\n * unprefixed names.\"\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_localName",
    "type" : "String",
    "comment" : "\n   * The local name.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "_namespaceURI",
    "type" : "String",
    "comment" : "\n   * The namespace URI.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "_prefix",
    "type" : "String",
    "comment" : "\n   * The namespace prefix.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "S_XMLNAMESPACEURI",
    "type" : "String",
    "comment" : "\n   * The XML namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_hashCode",
    "type" : "int",
    "comment" : "\n   * The cached hashcode, which is calculated at construction time.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "\n   * Returns the namespace URI. Returns null if the namespace URI\n   * is not known.\n   *\n   * @return The namespace URI, or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "\n   * Returns the namespace prefix. Returns null if the namespace\n   * prefix is not known.\n   *\n   * @return The namespace prefix, or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n   * Returns the local part of the qualified name.\n   *\n   * @return The local part of the qualified name\n   ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n   * Return the string representation of the qualified name, using the \n   * prefix if available, or the '{ns}foo' notation if not. Performs\n   * string concatenation, so beware of performance issues.\n   *\n   * @return the string representation of the namespace\n   ",
    "links" : [ ]
  }, {
    "name" : "public String toNamespacedString()",
    "returnType" : "String",
    "comment" : "\n   * Return the string representation of the qualified name using the \n   * the '{ns}foo' notation. Performs\n   * string concatenation, so beware of performance issues.\n   *\n   * @return the string representation of the namespace\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespace()",
    "returnType" : "String",
    "comment" : "\n   * Get the namespace of the qualified name.\n   *\n   * @return the namespace URI of the qualified name\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalPart()",
    "returnType" : "String",
    "comment" : "\n   * Get the local part of the qualified name.\n   *\n   * @return the local part of the qualified name\n   ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n   * Return the cached hashcode of the qualified name.\n   *\n   * @return the cached hashcode of the qualified name\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(String ns, String localPart)",
    "returnType" : "boolean",
    "comment" : "\n   * Override equals and agree that we're equal if\n   * the passed object is a string and it matches\n   * the name of the arg.\n   *\n   * @param ns Namespace URI to compare to\n   * @param localPart Local part of qualified name to compare to \n   *\n   * @return True if the local name and uri match \n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object object)",
    "returnType" : "boolean",
    "comment" : "\n   * Override equals and agree that we're equal if\n   * the passed object is a QName and it matches\n   * the name of the arg.\n   *\n   * @return True if the qualified names are equal\n   ",
    "links" : [ ]
  }, {
    "name" : "public static QName getQNameFromString(String name)",
    "returnType" : "QName",
    "comment" : "\n   * Given a string, create and return a QName object  \n   *\n   *\n   * @param name String to use to create QName\n   *\n   * @return a QName object\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isXMLNSDecl(String attRawName)",
    "returnType" : "boolean",
    "comment" : "\n   * This function tells if a raw attribute name is a\n   * xmlns attribute.\n   *\n   * @param attRawName Raw name of attribute\n   *\n   * @return True if the attribute starts with or is equal to xmlns \n   ",
    "links" : [ ]
  }, {
    "name" : "public static String getPrefixFromXMLNSDecl(String attRawName)",
    "returnType" : "String",
    "comment" : "\n   * This function tells if a raw attribute name is a\n   * xmlns attribute.\n   *\n   * @param attRawName Raw name of attribute\n   *\n   * @return Prefix of attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public static String getLocalPart(String qname)",
    "returnType" : "String",
    "comment" : "\n   * Returns the local name of the given node.\n   *\n   * @param qname Input name\n   *\n   * @return Local part of the name if prefixed, or the given name if not\n   ",
    "links" : [ ]
  }, {
    "name" : "public static String getPrefixPart(String qname)",
    "returnType" : "String",
    "comment" : "\n   * Returns the local name of the given node.\n   *\n   * @param qname Input name \n   *\n   * @return Prefix of name or empty string if none there   \n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNamespaceURI()", "public String getPrefix()", "public String getLocalName()", "public String toString()", "public String toNamespacedString()", "public String getNamespace()", "public String getLocalPart()", "public int hashCode()", "public boolean equals(String ns, String localPart)", "public boolean equals(Object object)", "public static QName getQNameFromString(String name)", "public static boolean isXMLNSDecl(String attRawName)", "public static String getPrefixFromXMLNSDecl(String attRawName)", "public static String getLocalPart(String qname)", "public static String getPrefixPart(String qname)" ],
  "variableNames" : [ "serialVersionUID", "_localName", "_namespaceURI", "_prefix", "S_XMLNAMESPACEURI", "m_hashCode" ]
}