{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BaseBundle.java",
  "packageName" : "android.os",
  "className" : "BaseBundle",
  "comment" : "\n * A mapping from String keys to values of various types. In most cases, you\n * should work directly with either the {@link Bundle} or\n * {@link PersistableBundle} subclass.\n ",
  "links" : [ "android.os.Bundle", "android.os.PersistableBundle" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_MAGIC",
    "type" : "int",
    "comment" : "\n     * Keep them in sync with frameworks/native/libs/binder/PersistableBundle.cpp.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_MAGIC_NATIVE",
    "type" : "int",
    "comment" : " 'B' 'N' 'D' 'N'",
    "links" : [ ]
  }, {
    "name" : "FLAG_DEFUSABLE",
    "type" : "int",
    "comment" : "\n     * Flag indicating that this Bundle is okay to \"defuse\", see {@link #setShouldDefuse(boolean)}\n     * for more details.\n     * <p>\n     * This should <em>only</em> be set when the Bundle reaches its final destination, otherwise a\n     * system process may clobber contents that were destined for an app that could have unparceled\n     * them.\n     ",
    "links" : [ "#setShouldDefuse(boolean)" ]
  }, {
    "name" : "LOG_DEFUSABLE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sShouldDefuse",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMap",
    "type" : "ArrayMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParcelledData",
    "type" : "Parcel",
    "comment" : "\n     * If mParcelledData is non-null, then mMap will be null and the\n     * data are stored as a Parcel containing a Bundle.  When the data\n     * are unparcelled, mParcelledData will be set to null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mParcelledByNative",
    "type" : "boolean",
    "comment" : "\n     * Whether {@link #mParcelledData} was generated by native code or not.\n     ",
    "links" : [ "#mParcelledData" ]
  }, {
    "name" : "mOwnsLazyValues",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if mParcelledData is only referenced in this bundle.\n     * mParcelledData could be referenced elsewhere if mMap contains lazy values,\n     * and bundle data is copied to another bundle using putAll or the copy constructors.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLazyValues",
    "type" : "int",
    "comment" : " Tracks how many lazy values are referenced in mMap ",
    "links" : [ ]
  }, {
    "name" : "mWeakParcelledData",
    "type" : "WeakReference<Parcel>",
    "comment" : "\n     * As mParcelledData is set to null when it is unparcelled, we keep a weak reference to\n     * it to aid in recycling it. Do not use this reference otherwise.\n     * Is non-null iff mMap contains lazy values.\n    ",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "\n     * The ClassLoader used when unparcelling data from mParcelledData.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setShouldDefuse(boolean shouldDefuse)",
    "returnType" : "void",
    "comment" : "\n     * Set global variable indicating that any Bundles parsed in this process should be \"defused\".\n     * That is, any {@link BadParcelableException} encountered will be suppressed and logged. Also:\n     * <ul>\n     *   <li>If it was the deserialization of a custom item (eg. {@link Parcelable}) that caused the\n     *   exception, {@code null} will be returned but the item will be held in the map in its\n     *   serialized form (lazy value).\n     *   <li>If the exception happened during partial deserialization, that is, during the read of\n     *   the map and its basic types (while skipping custom types), the map will be left empty.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Parcelable", "android.os.BadParcelableException" ]
  }, {
    "name" : "public String getPairValue()",
    "returnType" : "String",
    "comment" : "\n     * TODO: optimize this later (getting just the value part of a Bundle\n     * with a single pair) once Bundle.forPair() above is implemented\n     * with a special single-value Map implementation/serialization.\n     *\n     * Note: value in single-pair Bundle may be null.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClassLoader(ClassLoader loader)",
    "returnType" : "void",
    "comment" : "\n     * Changes the ClassLoader this Bundle uses when instantiating objects.\n     *\n     * @param loader An explicit ClassLoader to use when instantiating objects\n     * inside of the Bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : " ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Return the ClassLoader currently associated with this Bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void unparcel()",
    "returnType" : "void",
    "comment" : "\n     * If the underlying data are stored as a Parcel, unparcel them\n     * using the currently assigned class loader.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void unparcel(boolean itemwise)",
    "returnType" : "void",
    "comment" : " Deserializes the underlying data and each item if {@code itemwise} is true. ",
    "links" : [ ]
  }, {
    "name" : " final Object getValue(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value for key {@code key}.\n     *\n     * This call should always be made after {@link #unparcel()} or inside a lock after making sure\n     * {@code mMap} is not null.\n     *\n     * @deprecated Use {@link #getValue(String, Class, Class[])}. This method should only be used in\n     *      other deprecated APIs.\n     *\n     * @hide\n     ",
    "links" : [ "#unparcel()", "#getValue(String" ]
  }, {
    "name" : " final T getValue(String key, @Nullable Class<T> clazz)",
    "returnType" : "T",
    "comment" : " Same as {@link #getValue(String, Class, Class[])} with no item types. ",
    "links" : [ "#getValue(String" ]
  }, {
    "name" : " final T getValue(String key, @Nullable Class<T> clazz, @Nullable Class<?>... itemTypes)",
    "returnType" : "T",
    "comment" : "\n     * Returns the value for key {@code key} for expected return type {@code clazz} (or pass {@code\n     * null} for no type check).\n     *\n     * For {@code itemTypes}, see {@link Parcel#readValue(int, ClassLoader, Class, Class[])}.\n     *\n     * This call should always be made after {@link #unparcel()} or inside a lock after making sure\n     * {@code mMap} is not null.\n     *\n     * @hide\n     ",
    "links" : [ "#unparcel()", "android.os.Parcel#readValue(int" ]
  }, {
    "name" : " final T getValueAt(int i, @Nullable Class<T> clazz, @Nullable Class<?>... itemTypes)",
    "returnType" : "T",
    "comment" : "\n     * Returns the value for a certain position in the array map for expected return type {@code\n     * clazz} (or pass {@code null} for no type check).\n     *\n     * For {@code itemTypes}, see {@link Parcel#readValue(int, ClassLoader, Class, Class[])}.\n     *\n     * This call should always be made after {@link #unparcel()} or inside a lock after making sure\n     * {@code mMap} is not null.\n     *\n     * @hide\n     ",
    "links" : [ "#unparcel()", "android.os.Parcel#readValue(int" ]
  }, {
    "name" : "private Object unwrapLazyValueFromMapLocked(int i, @Nullable Class<?> clazz, @Nullable Class<?>... itemTypes)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initializeFromParcelLocked(@NonNull Parcel parcelledData, boolean ownsParcel, boolean parcelledByNative)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isParcelled()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmptyParcel()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isEmptyParcel(Parcel p)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void recycleParcel(Parcel p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ArrayMap<String, Object> getItemwiseMap()",
    "returnType" : "ArrayMap<String, Object>",
    "comment" : "\n     * Returns the backing map of this bundle after deserializing every item.\n     *\n     * <p><b>Warning:</b> This method will deserialize every item on the bundle, including custom\n     * types such as {@link Parcelable} and {@link Serializable}, so only use this when you trust\n     * the source. Specifically don't use this method on app-provided bundles.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Parcelable", "java.io.Serializable" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of mappings contained in this Bundle.\n     *\n     * @return the number of mappings as an int.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the mapping of this Bundle is empty, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefinitelyEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * This method returns true when the parcel is 'definitely' empty.\n     * That is, it may return false for an empty parcel. But will never return true for a non-empty\n     * one.\n     *\n     * @hide this should probably be the implementation of isEmpty().  To do that we\n     * need to ensure we always use the special empty parcel form when the bundle is\n     * empty.  (This may already be the case, but to be safe we'll do this later when\n     * we aren't trying to stabilize.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean kindofEquals(@Nullable BaseBundle a, @Nullable BaseBundle b)",
    "returnType" : "boolean",
    "comment" : "\n     * Does a loose equality check between two given {@link BaseBundle} objects.\n     * Returns {@code true} if both are {@code null}, or if both are equal as per\n     * {@link #kindofEquals(BaseBundle)}\n     *\n     * @param a A {@link BaseBundle} object\n     * @param b Another {@link BaseBundle} to compare with a\n     * @return {@code true} if both are the same, {@code false} otherwise\n     *\n     * @see #kindofEquals(BaseBundle)\n     *\n     * @hide\n     ",
    "links" : [ "android.os.BaseBundle", "#kindofEquals(BaseBundle)" ]
  }, {
    "name" : "public boolean kindofEquals(BaseBundle other)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs a loose equality check, which means there can be false negatives but if the method\n     * returns true than both objects are guaranteed to be equal.\n     *\n     * The point is that this method is a light-weight check in performance terms.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all elements from the mapping of this Bundle.\n     * Recycles the underlying parcel if it is still present.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object deepCopyValue(Object value)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ArrayList deepcopyArrayList(ArrayList from)",
    "returnType" : "ArrayList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given key is contained in the mapping\n     * of this Bundle.\n     *\n     * @param key a String key\n     * @return true if the key is part of the mapping, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object get(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the entry with the given key as an object.\n     *\n     * @param key a String key\n     * @return an Object, or null\n     *\n     * @deprecated Use the type-safe specific APIs depending on the type of the item to be\n     *      retrieved, eg. {@link #getString(String)}.\n     ",
    "links" : [ "#getString(String)" ]
  }, {
    "name" : " T get(@Nullable String key, @NonNull Class<T> clazz)",
    "returnType" : "T",
    "comment" : "\n     * Returns the object of type {@code clazz} for the given {@code key}, or {@code null} if:\n     * <ul>\n     *     <li>No mapping of the desired type exists for the given key.\n     *     <li>A {@code null} value is explicitly associated with the key.\n     *     <li>The object is not of type {@code clazz}.\n     * </ul>\n     *\n     * <p>Use the more specific APIs where possible, especially in the case of containers such as\n     * lists, since those APIs allow you to specify the type of the items.\n     *\n     * @param key String key\n     * @param clazz The type of the object expected\n     * @return an Object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(String key)",
    "returnType" : "void",
    "comment" : "\n     * Removes any entry with the given key from the mapping of this Bundle.\n     *\n     * @param key a String key\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putAll(PersistableBundle bundle)",
    "returnType" : "void",
    "comment" : "\n     * Inserts all mappings from the given PersistableBundle into this BaseBundle.\n     *\n     * @param bundle a PersistableBundle\n     ",
    "links" : [ ]
  }, {
    "name" : " void putAll(ArrayMap map)",
    "returnType" : "void",
    "comment" : "\n     * Inserts all mappings from the given Map into this BaseBundle.\n     *\n     * @param map a Map\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> keySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a Set containing the Strings used as keys in this Bundle.\n     *\n     * @return a Set of String keys\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putObject(@Nullable String key, @Nullable Object value)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void putBoolean(@Nullable String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a Boolean value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a boolean\n     ",
    "links" : [ ]
  }, {
    "name" : " void putByte(@Nullable String key, byte value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a byte value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a byte\n     ",
    "links" : [ ]
  }, {
    "name" : " void putChar(@Nullable String key, char value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a char value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a char\n     ",
    "links" : [ ]
  }, {
    "name" : " void putShort(@Nullable String key, short value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a short value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a short\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putInt(@Nullable String key, int value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an int value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value an int\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putLong(@Nullable String key, long value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a long value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a long\n     ",
    "links" : [ ]
  }, {
    "name" : " void putFloat(@Nullable String key, float value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a float value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a float\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putDouble(@Nullable String key, double value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a double value into the mapping of this Bundle, replacing\n     * any existing value for the given key.\n     *\n     * @param key a String, or null\n     * @param value a double\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putString(@Nullable String key, @Nullable String value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a String value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a String, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putCharSequence(@Nullable String key, @Nullable CharSequence value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a CharSequence value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a CharSequence, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putIntegerArrayList(@Nullable String key, @Nullable ArrayList<Integer> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an ArrayList<Integer> value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList<Integer> object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putStringArrayList(@Nullable String key, @Nullable ArrayList<String> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an ArrayList<String> value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList<String> object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putCharSequenceArrayList(@Nullable String key, @Nullable ArrayList<CharSequence> value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an ArrayList<CharSequence> value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an ArrayList<CharSequence> object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putSerializable(@Nullable String key, @Nullable Serializable value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a Serializable value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a Serializable object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putBooleanArray(@Nullable String key, @Nullable boolean[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a boolean array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a boolean array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putByteArray(@Nullable String key, @Nullable byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a byte array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a byte array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putShortArray(@Nullable String key, @Nullable short[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a short array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a short array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putCharArray(@Nullable String key, @Nullable char[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a char array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a char array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putIntArray(@Nullable String key, @Nullable int[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts an int array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value an int array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putLongArray(@Nullable String key, @Nullable long[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a long array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a long array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putFloatArray(@Nullable String key, @Nullable float[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a float array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a float array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putDoubleArray(@Nullable String key, @Nullable double[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a double array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a double array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putStringArray(@Nullable String key, @Nullable String[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a String array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a String array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void putCharSequenceArray(@Nullable String key, @Nullable CharSequence[] value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a CharSequence array value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a CharSequence array object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value associated with the given key, or false if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a boolean value\n     ",
    "links" : [ ]
  }, {
    "name" : " void typeWarning(String key, @Nullable Object value, String className, Object defaultValue, RuntimeException e)",
    "returnType" : "void",
    "comment" : " Log a message if the value was non-null but not of the expected type",
    "links" : [ ]
  }, {
    "name" : " void typeWarning(String key, @Nullable Object value, String className, RuntimeException e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void typeWarning(String key, String className, RuntimeException e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(String key, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a boolean value\n     ",
    "links" : [ ]
  }, {
    "name" : " byte getByte(String key)",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value associated with the given key, or (byte) 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a byte value\n     ",
    "links" : [ ]
  }, {
    "name" : " Byte getByte(String key, byte defaultValue)",
    "returnType" : "Byte",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a byte value\n     ",
    "links" : [ ]
  }, {
    "name" : " char getChar(String key)",
    "returnType" : "char",
    "comment" : "\n     * Returns the value associated with the given key, or (char) 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a char value\n     ",
    "links" : [ ]
  }, {
    "name" : " char getChar(String key, char defaultValue)",
    "returnType" : "char",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a char value\n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(String key)",
    "returnType" : "short",
    "comment" : "\n     * Returns the value associated with the given key, or (short) 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a short value\n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(String key, short defaultValue)",
    "returnType" : "short",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a short value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(String key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value associated with the given key, or 0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return an int value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(String key, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return an int value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLong(String key)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value associated with the given key, or 0L if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a long value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLong(String key, long defaultValue)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a long value\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(String key)",
    "returnType" : "float",
    "comment" : "\n     * Returns the value associated with the given key, or 0.0f if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a float value\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(String key, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a float value\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(String key)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value associated with the given key, or 0.0 if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @return a double value\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(String key, double defaultValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key.\n     *\n     * @param key a String\n     * @param defaultValue Value to return if key does not exist\n     * @return a double value\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@Nullable String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a String value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@Nullable String key, String defaultValue)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key or if a null\n     * value is explicitly associated with the given key.\n     *\n     * @param key a String, or null\n     * @param defaultValue Value to return if key does not exist or if a null\n     *     value is associated with the given key.\n     * @return the String value associated with the given key, or defaultValue\n     *     if no valid String object is currently mapped to that key.\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getCharSequence(@Nullable String key)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a CharSequence value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getCharSequence(@Nullable String key, CharSequence defaultValue)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the value associated with the given key, or defaultValue if\n     * no mapping of the desired type exists for the given key or if a null\n     * value is explicitly associated with the given key.\n     *\n     * @param key a String, or null\n     * @param defaultValue Value to return if key does not exist or if a null\n     *     value is associated with the given key.\n     * @return the CharSequence value associated with the given key, or defaultValue\n     *     if no valid CharSequence object is currently mapped to that key.\n     ",
    "links" : [ ]
  }, {
    "name" : " Serializable getSerializable(@Nullable String key)",
    "returnType" : "Serializable",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a Serializable value, or null\n     *\n     * @deprecated Use {@link #getSerializable(String, Class)}. This method should only be used in\n     *      other deprecated APIs.\n     ",
    "links" : [ "#getSerializable(String" ]
  }, {
    "name" : " T getSerializable(@Nullable String key, @NonNull Class<T> clazz)",
    "returnType" : "T",
    "comment" : "\n     * Returns the value associated with the given key, or {@code null} if:\n     * <ul>\n     *     <li>No mapping of the desired type exists for the given key.\n     *     <li>A {@code null} value is explicitly associated with the key.\n     *     <li>The object is not of type {@code clazz}.\n     * </ul>\n     *\n     * @param key a String, or null\n     * @param clazz The expected class of the returned type\n     * @return a Serializable value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " ArrayList<T> getArrayList(@Nullable String key, @NonNull Class<? extends T> clazz)",
    "returnType" : "ArrayList<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ArrayList<Integer> getIntegerArrayList(@Nullable String key)",
    "returnType" : "ArrayList<Integer>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an ArrayList<String> value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " ArrayList<String> getStringArrayList(@Nullable String key)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an ArrayList<String> value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " ArrayList<CharSequence> getCharSequenceArrayList(@Nullable String key)",
    "returnType" : "ArrayList<CharSequence>",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an ArrayList<CharSequence> value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getBooleanArray(@Nullable String key)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a boolean[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " byte[] getByteArray(@Nullable String key)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a byte[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " short[] getShortArray(@Nullable String key)",
    "returnType" : "short[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a short[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " char[] getCharArray(@Nullable String key)",
    "returnType" : "char[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a char[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getIntArray(@Nullable String key)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return an int[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getLongArray(@Nullable String key)",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a long[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " float[] getFloatArray(@Nullable String key)",
    "returnType" : "float[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a float[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public double[] getDoubleArray(@Nullable String key)",
    "returnType" : "double[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a double[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getStringArray(@Nullable String key)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a String[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence[] getCharSequenceArray(@Nullable String key)",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a CharSequence[] value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeToParcelInner(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes the Bundle contents to a Parcel, typically in order for\n     * it to be passed through an IBinder connection.\n     * @param parcel The parcel to copy this bundle to.\n     ",
    "links" : [ ]
  }, {
    "name" : " void readFromParcelInner(Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Reads the Parcel contents into this Bundle, typically in order for\n     * it to be passed through an IBinder connection.\n     * @param parcel The parcel to overwrite this bundle from.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcelInner(Parcel parcel, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpStats(IndentingPrintWriter pw, String key, Object value)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpStats(IndentingPrintWriter pw, SparseArray array)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpStats(IndentingPrintWriter pw, BaseBundle bundle)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setShouldDefuse(boolean shouldDefuse)", "public String getPairValue()", " void setClassLoader(ClassLoader loader)", " ClassLoader getClassLoader()", " final void unparcel()", " final void unparcel(boolean itemwise)", " final Object getValue(String key)", " final T getValue(String key, @Nullable Class<T> clazz)", " final T getValue(String key, @Nullable Class<T> clazz, @Nullable Class<?>... itemTypes)", " final T getValueAt(int i, @Nullable Class<T> clazz, @Nullable Class<?>... itemTypes)", "private Object unwrapLazyValueFromMapLocked(int i, @Nullable Class<?> clazz, @Nullable Class<?>... itemTypes)", "private void initializeFromParcelLocked(@NonNull Parcel parcelledData, boolean ownsParcel, boolean parcelledByNative)", "public boolean isParcelled()", "public boolean isEmptyParcel()", "private static boolean isEmptyParcel(Parcel p)", "private static void recycleParcel(Parcel p)", " ArrayMap<String, Object> getItemwiseMap()", "public int size()", "public boolean isEmpty()", "public boolean isDefinitelyEmpty()", "public static boolean kindofEquals(@Nullable BaseBundle a, @Nullable BaseBundle b)", "public boolean kindofEquals(BaseBundle other)", "public void clear()", "private Object deepCopyValue(Object value)", "private ArrayList deepcopyArrayList(ArrayList from)", "public boolean containsKey(String key)", "public Object get(String key)", " T get(@Nullable String key, @NonNull Class<T> clazz)", "public void remove(String key)", "public void putAll(PersistableBundle bundle)", " void putAll(ArrayMap map)", "public Set<String> keySet()", "public void putObject(@Nullable String key, @Nullable Object value)", "public void putBoolean(@Nullable String key, boolean value)", " void putByte(@Nullable String key, byte value)", " void putChar(@Nullable String key, char value)", " void putShort(@Nullable String key, short value)", "public void putInt(@Nullable String key, int value)", "public void putLong(@Nullable String key, long value)", " void putFloat(@Nullable String key, float value)", "public void putDouble(@Nullable String key, double value)", "public void putString(@Nullable String key, @Nullable String value)", " void putCharSequence(@Nullable String key, @Nullable CharSequence value)", " void putIntegerArrayList(@Nullable String key, @Nullable ArrayList<Integer> value)", " void putStringArrayList(@Nullable String key, @Nullable ArrayList<String> value)", " void putCharSequenceArrayList(@Nullable String key, @Nullable ArrayList<CharSequence> value)", " void putSerializable(@Nullable String key, @Nullable Serializable value)", "public void putBooleanArray(@Nullable String key, @Nullable boolean[] value)", " void putByteArray(@Nullable String key, @Nullable byte[] value)", " void putShortArray(@Nullable String key, @Nullable short[] value)", " void putCharArray(@Nullable String key, @Nullable char[] value)", "public void putIntArray(@Nullable String key, @Nullable int[] value)", "public void putLongArray(@Nullable String key, @Nullable long[] value)", " void putFloatArray(@Nullable String key, @Nullable float[] value)", "public void putDoubleArray(@Nullable String key, @Nullable double[] value)", "public void putStringArray(@Nullable String key, @Nullable String[] value)", " void putCharSequenceArray(@Nullable String key, @Nullable CharSequence[] value)", "public boolean getBoolean(String key)", " void typeWarning(String key, @Nullable Object value, String className, Object defaultValue, RuntimeException e)", " void typeWarning(String key, @Nullable Object value, String className, RuntimeException e)", " void typeWarning(String key, String className, RuntimeException e)", "public boolean getBoolean(String key, boolean defaultValue)", " byte getByte(String key)", " Byte getByte(String key, byte defaultValue)", " char getChar(String key)", " char getChar(String key, char defaultValue)", " short getShort(String key)", " short getShort(String key, short defaultValue)", "public int getInt(String key)", "public int getInt(String key, int defaultValue)", "public long getLong(String key)", "public long getLong(String key, long defaultValue)", " float getFloat(String key)", " float getFloat(String key, float defaultValue)", "public double getDouble(String key)", "public double getDouble(String key, double defaultValue)", "public String getString(@Nullable String key)", "public String getString(@Nullable String key, String defaultValue)", " CharSequence getCharSequence(@Nullable String key)", " CharSequence getCharSequence(@Nullable String key, CharSequence defaultValue)", " Serializable getSerializable(@Nullable String key)", " T getSerializable(@Nullable String key, @NonNull Class<T> clazz)", " ArrayList<T> getArrayList(@Nullable String key, @NonNull Class<? extends T> clazz)", " ArrayList<Integer> getIntegerArrayList(@Nullable String key)", " ArrayList<String> getStringArrayList(@Nullable String key)", " ArrayList<CharSequence> getCharSequenceArrayList(@Nullable String key)", "public boolean[] getBooleanArray(@Nullable String key)", " byte[] getByteArray(@Nullable String key)", " short[] getShortArray(@Nullable String key)", " char[] getCharArray(@Nullable String key)", "public int[] getIntArray(@Nullable String key)", "public long[] getLongArray(@Nullable String key)", " float[] getFloatArray(@Nullable String key)", "public double[] getDoubleArray(@Nullable String key)", "public String[] getStringArray(@Nullable String key)", " CharSequence[] getCharSequenceArray(@Nullable String key)", " void writeToParcelInner(Parcel parcel, int flags)", " void readFromParcelInner(Parcel parcel)", "private void readFromParcelInner(Parcel parcel, int length)", "public static void dumpStats(IndentingPrintWriter pw, String key, Object value)", "public static void dumpStats(IndentingPrintWriter pw, SparseArray array)", "public static void dumpStats(IndentingPrintWriter pw, BaseBundle bundle)" ],
  "variableNames" : [ "TAG", "DEBUG", "BUNDLE_MAGIC", "BUNDLE_MAGIC_NATIVE", "FLAG_DEFUSABLE", "LOG_DEFUSABLE", "sShouldDefuse", "mMap", "mParcelledData", "mParcelledByNative", "mOwnsLazyValues", "mLazyValues", "mWeakParcelledData", "mClassLoader", "mFlags" ]
}