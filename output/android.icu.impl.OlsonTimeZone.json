{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/OlsonTimeZone.java",
  "packageName" : "android.icu.impl",
  "className" : "OlsonTimeZone",
  "comment" : "\n * A time zone based on the Olson tz database.  Olson time zones change\n * behavior over time.  The raw offset, rules, presence or absence of\n * daylight savings time, and even the daylight savings amount can all\n * vary.\n *\n * This class uses a resource bundle named \"zoneinfo\".  Zoneinfo is a\n * table containing different kinds of resources.  In several places,\n * zones are referred to using integers.  A zone's integer is a number\n * from 0..n-1, where n is the number of zones, with the zones sorted\n * in lexicographic order.\n *\n * 1. Zones.  These have keys corresponding to the Olson IDs, e.g.,\n * \"Asia/Shanghai\".  Each resource describes the behavior of the given\n * zone.  Zones come in two different formats.\n *\n *   a. Zone (table).  A zone is a table resource contains several\n *   type of resources below:\n *\n *   - typeOffsets:intvector (Required)\n *\n *   Sets of UTC raw/dst offset pairs in seconds.  Entries at\n *   2n represents raw offset and 2n+1 represents dst offset\n *   paired with the raw offset at 2n.  The very first pair represents\n *   the initial zone offset (before the first transition) always.\n *\n *   - trans:intvector (Optional)\n *\n *   List of transition times represented by 32bit seconds from the\n *   epoch (1970-01-01T00:00Z) in ascending order.\n *\n *   - transPre32/transPost32:intvector (Optional)\n *\n *   List of transition times before/after 32bit minimum seconds.\n *   Each time is represented by a pair of 32bit integer.\n *\n *   - typeMap:bin (Optional)\n *\n *   Array of bytes representing the mapping between each transition\n *   time (transPre32/trans/transPost32) and its corresponding offset\n *   data (typeOffsets).\n *\n *   - finalRule:string (Optional)\n *\n *   If a recurrent transition rule is applicable to a zone forever\n *   after the final transition time, finalRule represents the rule\n *   in Rules data.\n *\n *   - finalRaw:int (Optional)\n *\n *   When finalRule is available, finalRaw is required and specifies\n *   the raw (base) offset of the rule.\n *\n *   - finalYear:int (Optional)\n *\n *   When finalRule is available, finalYear is required and specifies\n *   the start year of the rule.\n *\n *   - links:intvector (Optional)\n *\n *   When this zone data is shared with other zones, links specifies\n *   all zones including the zone itself.  Each zone is referenced by\n *   integer index.\n *\n *  b. Link (int, length 1).  A link zone is an int resource.  The\n *  integer is the zone number of the target zone.  The key of this\n *  resource is an alternate name for the target zone.  This data\n *  is corresponding to Link data in the tz database.\n *\n *\n * 2. Rules.  These have keys corresponding to the Olson rule IDs,\n * with an underscore prepended, e.g., \"_EU\".  Each resource describes\n * the behavior of the given rule using an intvector, containing the\n * onset list, the cessation list, and the DST savings.  The onset and\n * cessation lists consist of the month, dowim, dow, time, and time\n * mode.  The end result is that the 11 integers describing the rule\n * can be passed directly into the SimpleTimeZone 13-argument\n * constructor (the other two arguments will be the raw offset, taken\n * from the complex zone element 5, and the ID string, which is not\n * used), with the times and the DST savings multiplied by 1000 to\n * scale from seconds to milliseconds.\n *\n * 3. Regions.  An array specifies mapping between zones and regions.\n * Each item is either a 2-letter ISO country code or \"001\"\n * (UN M.49 - World).  This data is generated from \"zone.tab\"\n * in the tz database.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Generated by serialver from JDK 1.4.1_01",
    "links" : [ ]
  }, {
    "name" : "MAX_OFFSET_SECONDS",
    "type" : "int",
    "comment" : " 60 * 60 * 24;",
    "links" : [ ]
  }, {
    "name" : "transitionCount",
    "type" : "int",
    "comment" : "\n     * Number of transitions, 0..~370\n     ",
    "links" : [ ]
  }, {
    "name" : "typeCount",
    "type" : "int",
    "comment" : "\n     * Number of types, 1..255\n     ",
    "links" : [ ]
  }, {
    "name" : "transitionTimes64",
    "type" : "long[]",
    "comment" : "\n     * Time of each transition in seconds from 1970 epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "typeOffsets",
    "type" : "int[]",
    "comment" : "\n     * Offset from GMT in seconds for each type.\n     * Length is equal to typeCount\n     ",
    "links" : [ ]
  }, {
    "name" : "typeMapData",
    "type" : "byte[]",
    "comment" : "\n     * Type description data, consisting of transitionCount uint8_t\n     * type indices (from 0..typeCount-1).\n     * Length is equal to transitionCount\n     ",
    "links" : [ ]
  }, {
    "name" : "finalStartYear",
    "type" : "int",
    "comment" : "\n     * For year >= finalStartYear, the finalZone will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "finalStartMillis",
    "type" : "double",
    "comment" : "\n     * For date >= finalStartMillis, the finalZone will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "finalZone",
    "type" : "SimpleTimeZone",
    "comment" : " owned, may be NULL",
    "links" : [ ]
  }, {
    "name" : "canonicalID",
    "type" : "String",
    "comment" : "\n     * The canonical ID of this zone. Initialized when {@link #getCanonicalID()}\n     * is invoked first time, or {@link #setID(String)} is called.\n     ",
    "links" : [ "#setID(String)", "#getCanonicalID()" ]
  }, {
    "name" : "ZONEINFORES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_PER_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialRule",
    "type" : "InitialTimeZoneRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstTZTransition",
    "type" : "TimeZoneTransition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstTZTransitionIdx",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstFinalTZTransition",
    "type" : "TimeZoneTransition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "historicRules",
    "type" : "TimeArrayTimeZoneRule[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "finalZoneWithStartYear",
    "type" : "SimpleTimeZone",
    "comment" : " hack",
    "links" : [ ]
  }, {
    "name" : "transitionRulesInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentSerialVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionOnStream",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isFrozen",
    "type" : "boolean",
    "comment" : " Freezable stuffs",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",
    "returnType" : "int",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#getOffset(int, int, int, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(int era, int year, int month, int dom, int dow, int millis, int monthLength)",
    "returnType" : "int",
    "comment" : "\n     * TimeZone API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#setRawOffset(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOffset(long date, boolean local, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * TimeZone API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawOffset()",
    "returnType" : "int",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#getRawOffset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#useDaylightTime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#observesDaylightTime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDSTSavings()",
    "returnType" : "int",
    "comment" : "\n     * TimeZone API\n     * Returns the amount of time to be added to local standard time\n     * to get local wall clock time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#inDaylightTime(java.util.Date)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSameRules(TimeZone other)",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#hasSameRules(android.icu.util.TimeZone)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCanonicalID()",
    "returnType" : "String",
    "comment" : "\n     * Returns the canonical ID of this system time zone\n     ",
    "links" : [ ]
  }, {
    "name" : "private void constructEmpty()",
    "returnType" : "void",
    "comment" : "\n     * Construct a GMT+0 zone with no transitions.  This is done when a\n     * constructor fails so the resultant object is well-behaved.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void construct(UResourceBundle top, UResourceBundle res, String id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setID(String id)",
    "returnType" : "void",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#setID(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getHistoricalOffset(long date, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt, int[] offsets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getInt(byte val)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int zoneOffsetAt(int transIdx)",
    "returnType" : "int",
    "comment" : "\n     * Following 3 methods return an offset at the given transition time index.\n     * When the index is negative, return the initial offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int rawOffsetAt(int transIdx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int dstOffsetAt(int transIdx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int initialRawOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int initialDstOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " temp",
    "links" : [ ]
  }, {
    "name" : "private static UResourceBundle loadRule(UResourceBundle top, String ruleid)",
    "returnType" : "UResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getNextTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.BasicTimeZone#getNextTransition(long, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.BasicTimeZone#getPreviousTransition(long, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneRule[] getTimeZoneRules()",
    "returnType" : "TimeZoneRule[]",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.BasicTimeZone#getTimeZoneRules()\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void initTransitionRules()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#isFrozen()\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone freeze()",
    "returnType" : "TimeZone",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#freeze()\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone cloneAsThawed()",
    "returnType" : "TimeZone",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#cloneAsThawed()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)", "public int getOffset(int era, int year, int month, int dom, int dow, int millis, int monthLength)", "public void setRawOffset(int offsetMillis)", "public Object clone()", "public void getOffset(long date, boolean local, int[] offsets)", "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)", "public int getRawOffset()", "public boolean useDaylightTime()", "public boolean observesDaylightTime()", "public int getDSTSavings()", "public boolean inDaylightTime(Date date)", "public boolean hasSameRules(TimeZone other)", "public String getCanonicalID()", "private void constructEmpty()", "private void construct(UResourceBundle top, UResourceBundle res, String id)", "public void setID(String id)", "private void getHistoricalOffset(long date, boolean local, int NonExistingTimeOpt, int DuplicatedTimeOpt, int[] offsets)", "private int getInt(byte val)", "private int zoneOffsetAt(int transIdx)", "private int rawOffsetAt(int transIdx)", "private int dstOffsetAt(int transIdx)", "private int initialRawOffset()", "private int initialDstOffset()", "public String toString()", "private static UResourceBundle loadRule(UResourceBundle top, String ruleid)", "public boolean equals(Object obj)", "public int hashCode()", "public TimeZoneTransition getNextTransition(long base, boolean inclusive)", "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)", "public TimeZoneRule[] getTimeZoneRules()", "private synchronized void initTransitionRules()", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException", "public boolean isFrozen()", "public TimeZone freeze()", "public TimeZone cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "MAX_OFFSET_SECONDS", "transitionCount", "typeCount", "transitionTimes64", "typeOffsets", "typeMapData", "finalStartYear", "finalStartMillis", "finalZone", "canonicalID", "ZONEINFORES", "DEBUG", "SECONDS_PER_DAY", "initialRule", "firstTZTransition", "firstTZTransitionIdx", "firstFinalTZTransition", "historicRules", "finalZoneWithStartYear", "transitionRulesInitialized", "currentSerialVersion", "serialVersionOnStream", "isFrozen" ]
}