{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/BufferedInputStream.java",
  "packageName" : "java.io",
  "className" : "BufferedInputStream",
  "comment" : "\n * A {@code BufferedInputStream} adds\n * functionality to another input stream-namely,\n * the ability to buffer the input and to\n * support the {@code mark} and {@code reset}\n * methods. When  the {@code BufferedInputStream}\n * is created, an internal buffer array is\n * created. As bytes  from the stream are read\n * or skipped, the internal buffer is refilled\n * as necessary  from the contained input stream,\n * many bytes at a time. The {@code mark}\n * operation  remembers a point in the input\n * stream and the {@code reset} operation\n * causes all the  bytes read since the most\n * recent {@code mark} operation to be\n * reread before new bytes are  taken from\n * the contained input stream.\n *\n * @author  Arthur van Hoff\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_BUFFER_SIZE",
    "type" : "int",
    "comment" : " Android-changed: made final",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * The internal buffer array where the data is stored. When necessary,\n     * it may be replaced by another array of\n     * a different size.\n     ",
    "links" : [ ]
  }, {
    "name" : "bufUpdater",
    "type" : "AtomicReferenceFieldUpdater<BufferedInputStream, byte[]>",
    "comment" : "\n     * Atomic updater to provide compareAndSet for buf. This is\n     * necessary because closes can be asynchronous. We use nullness\n     * of buf[] as primary indicator that this stream is closed. (The\n     * \"in\" field is also nulled out on close.)\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * The index one greater than the index of the last valid byte in\n     * the buffer.\n     * This value is always\n     * in the range {@code 0} through {@code buf.length};\n     * elements {@code buf[0]} through {@code buf[count-1]}\n     * contain buffered input data obtained\n     * from the underlying  input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : "\n     * The current position in the buffer. This is the index of the next\n     * character to be read from the {@code buf} array.\n     * <p>\n     * This value is always in the range {@code 0}\n     * through {@code count}. If it is less\n     * than {@code count}, then  {@code buf[pos]}\n     * is the next byte to be supplied as input;\n     * if it is equal to {@code count}, then\n     * the  next {@code read} or {@code skip}\n     * operation will require more bytes to be\n     * read from the contained  input stream.\n     *\n     * @see     java.io.BufferedInputStream#buf\n     ",
    "links" : [ ]
  }, {
    "name" : "markpos",
    "type" : "int",
    "comment" : "\n     * The value of the {@code pos} field at the time the last\n     * {@code mark} method was called.\n     * <p>\n     * This value is always\n     * in the range {@code -1} through {@code pos}.\n     * If there is no marked position in  the input\n     * stream, this field is {@code -1}. If\n     * there is a marked position in the input\n     * stream,  then {@code buf[markpos]}\n     * is the first byte to be supplied as input\n     * after a {@code reset} operation. If\n     * {@code markpos} is not {@code -1},\n     * then all bytes from positions {@code buf[markpos]}\n     * through  {@code buf[pos-1]} must remain\n     * in the buffer array (though they may be\n     * moved to  another place in the buffer array,\n     * with suitable adjustments to the values\n     * of {@code count},  {@code pos},\n     * and {@code markpos}); they may not\n     * be discarded unless and until the difference\n     * between {@code pos} and {@code markpos}\n     * exceeds {@code marklimit}.\n     *\n     * @see     java.io.BufferedInputStream#mark(int)\n     * @see     java.io.BufferedInputStream#pos\n     ",
    "links" : [ ]
  }, {
    "name" : "marklimit",
    "type" : "int",
    "comment" : "\n     * The maximum read ahead allowed after a call to the\n     * {@code mark} method before subsequent calls to the\n     * {@code reset} method fail.\n     * Whenever the difference between {@code pos}\n     * and {@code markpos} exceeds {@code marklimit},\n     * then the  mark may be dropped by setting\n     * {@code markpos} to {@code -1}.\n     *\n     * @see     java.io.BufferedInputStream#mark(int)\n     * @see     java.io.BufferedInputStream#reset()\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private InputStream getInIfOpen() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Check to make sure that underlying input stream has not been\n     * nulled out due to close; if not return it;\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte[] getBufIfOpen() throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Check to make sure that buffer has not been nulled out due to\n     * close; if not return it;\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fill() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Fills the buffer with more data, taking into account\n     * shuffling and other tricks for dealing with marks.\n     * Assumes that it is being called by a synchronized method.\n     * This method also assumes that all data has already been read in,\n     * hence pos > count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * See\n     * the general contract of the {@code read}\n     * method of {@code InputStream}.\n     *\n     * @return     the next byte of data, or {@code -1} if the end of the\n     *             stream is reached.\n     * @throws     IOException  if this input stream has been closed by\n     *                          invoking its {@link #close()} method,\n     *                          or an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "private int read1(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Read characters into a portion of an array, reading from the underlying\n     * stream at most once if necessary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads bytes from this byte-input stream into the specified byte array,\n     * starting at the given offset.\n     *\n     * <p> This method implements the general contract of the corresponding\n     * {@link InputStream#read(byte[], int, int) read} method of\n     * the {@link InputStream} class.  As an additional\n     * convenience, it attempts to read as many bytes as possible by repeatedly\n     * invoking the {@code read} method of the underlying stream.  This\n     * iterated {@code read} continues until one of the following\n     * conditions becomes true: <ul>\n     *\n     *   <li> The specified number of bytes have been read,\n     *\n     *   <li> The {@code read} method of the underlying stream returns\n     *   {@code -1}, indicating end-of-file, or\n     *\n     *   <li> The {@code available} method of the underlying stream\n     *   returns zero, indicating that further input requests would block.\n     *\n     * </ul> If the first {@code read} on the underlying stream returns\n     * {@code -1} to indicate end-of-file then this method returns\n     * {@code -1}.  Otherwise this method returns the number of bytes\n     * actually read.\n     *\n     * <p> Subclasses of this class are encouraged, but not required, to\n     * attempt to read as many bytes as possible in the same fashion.\n     *\n     * @param      b     destination buffer.\n     * @param      off   offset at which to start storing bytes.\n     * @param      len   maximum number of bytes to read.\n     * @return     the number of bytes read, or {@code -1} if the end of\n     *             the stream has been reached.\n     * @throws     IOException  if this input stream has been closed by\n     *                          invoking its {@link #close()} method,\n     *                          or an I/O error occurs.\n     ",
    "links" : [ "#close()", "java.io.InputStream#read(byte", "java.io.InputStream" ]
  }, {
    "name" : "public synchronized long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * See the general contract of the {@code skip}\n     * method of {@code InputStream}.\n     *\n     * @throws IOException  if this input stream has been closed by\n     *                      invoking its {@link #close()} method,\n     *                      {@code in.skip(n)} throws an IOException,\n     *                      or an I/O error occurs.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public synchronized int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of bytes that can be read (or\n     * skipped over) from this input stream without blocking by the next\n     * invocation of a method for this input stream. The next invocation might be\n     * the same thread or another thread.  A single read or skip of this\n     * many bytes will not block, but may read or skip fewer bytes.\n     * <p>\n     * This method returns the sum of the number of bytes remaining to be read in\n     * the buffer ({@code count - pos}) and the result of calling the\n     * {@link java.io.FilterInputStream#in in}{@code .available()}.\n     *\n     * @return     an estimate of the number of bytes that can be read (or skipped\n     *             over) from this input stream without blocking.\n     * @throws     IOException  if this input stream has been closed by\n     *                          invoking its {@link #close()} method,\n     *                          or an I/O error occurs.\n     ",
    "links" : [ "#close()", "java.io.FilterInputStream#in" ]
  }, {
    "name" : "public synchronized void mark(int readlimit)",
    "returnType" : "void",
    "comment" : "\n     * See the general contract of the {@code mark}\n     * method of {@code InputStream}.\n     *\n     * @param   readlimit   the maximum limit of bytes that can be read before\n     *                      the mark position becomes invalid.\n     * @see     java.io.BufferedInputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * See the general contract of the {@code reset}\n     * method of {@code InputStream}.\n     * <p>\n     * If {@code markpos} is {@code -1}\n     * (no mark has been set or the mark has been\n     * invalidated), an {@code IOException}\n     * is thrown. Otherwise, {@code pos} is\n     * set equal to {@code markpos}.\n     *\n     * @throws     IOException  if this stream has not been marked or,\n     *                  if the mark has been invalidated, or the stream\n     *                  has been closed by invoking its {@link #close()}\n     *                  method, or an I/O error occurs.\n     * @see        java.io.BufferedInputStream#mark(int)\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this input stream supports the {@code mark}\n     * and {@code reset} methods. The {@code markSupported}\n     * method of {@code BufferedInputStream} returns\n     * {@code true}.\n     *\n     * @return  a {@code boolean} indicating if this stream type supports\n     *          the {@code mark} and {@code reset} methods.\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.InputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources\n     * associated with the stream.\n     * Once the stream has been closed, further read(), available(), reset(),\n     * or skip() invocations will throw an IOException.\n     * Closing a previously closed stream has no effect.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private InputStream getInIfOpen() throws IOException", "private byte[] getBufIfOpen() throws IOException", "private void fill() throws IOException", "public synchronized int read() throws IOException", "private int read1(byte[] b, int off, int len) throws IOException", "public synchronized int read(byte[] b, int off, int len) throws IOException", "public synchronized long skip(long n) throws IOException", "public synchronized int available() throws IOException", "public synchronized void mark(int readlimit)", "public synchronized void reset() throws IOException", "public boolean markSupported()", "public void close() throws IOException" ],
  "variableNames" : [ "DEFAULT_BUFFER_SIZE", "buf", "bufUpdater", "count", "pos", "markpos", "marklimit" ]
}