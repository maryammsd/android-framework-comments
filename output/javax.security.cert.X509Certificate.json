{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/security/cert/X509Certificate.java",
  "packageName" : "javax.security.cert",
  "className" : "X509Certificate",
  "comment" : "\n * Abstract class for X.509 v1 certificates. This provides a standard\n * way to access all the version 1 attributes of an X.509 certificate.\n * Attributes that are specific to X.509 v2 or v3 are not available\n * through this interface. Future API evolution will provide full access to\n * complete X.509 v3 attributes.\n * <p>\n * The basic X.509 format was defined by\n * ISO/IEC and ANSI X9 and is described below in ASN.1:\n * <pre>\n * Certificate  ::=  SEQUENCE  {\n *     tbsCertificate       TBSCertificate,\n *     signatureAlgorithm   AlgorithmIdentifier,\n *     signature            BIT STRING  }\n * </pre>\n * <p>\n * These certificates are widely used to support authentication and\n * other functionality in Internet security systems. Common applications\n * include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),\n * code signing for trusted software distribution, and Secure Electronic\n * Transactions (SET).\n * <p>\n * These certificates are managed and vouched for by <em>Certificate\n * Authorities</em> (CAs). CAs are services which create certificates by\n * placing data in the X.509 standard format and then digitally signing\n * that data. CAs act as trusted third parties, making introductions\n * between principals who have no direct knowledge of each other.\n * CA certificates are either signed by themselves, or by some other\n * CA such as a \"root\" CA.\n * <p>\n * The ASN.1 definition of {@code tbsCertificate} is:\n * <pre>\n * TBSCertificate  ::=  SEQUENCE  {\n *     version         [0]  EXPLICIT Version DEFAULT v1,\n *     serialNumber         CertificateSerialNumber,\n *     signature            AlgorithmIdentifier,\n *     issuer               Name,\n *     validity             Validity,\n *     subject              Name,\n *     subjectPublicKeyInfo SubjectPublicKeyInfo,\n *     }\n * </pre>\n * <p>\n * Here is sample code to instantiate an X.509 certificate:\n * <pre>\n * InputStream inStream = new FileInputStream(\"fileName-of-cert\");\n * X509Certificate cert = X509Certificate.getInstance(inStream);\n * inStream.close();\n * </pre>\n * OR\n * <pre>\n * byte[] certData = &lt;certificate read from a file, say&gt;\n * X509Certificate cert = X509Certificate.getInstance(certData);\n * </pre>\n * <p>\n * In either case, the code that instantiates an X.509 certificate\n * consults the value of the {@code cert.provider.x509v1} security property\n * to locate the actual implementation or instantiates a default implementation.\n * <p>\n * The {@code cert.provider.x509v1} property is set to a default\n * implementation for X.509 such as:\n * <pre>\n * cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl\n * </pre>\n * <p>\n * The value of this {@code cert.provider.x509v1} property has to be\n * changed to instantiate another implementation. If this security\n * property is not set, a default implementation will be used.\n * Currently, due to possible security restrictions on access to\n * Security properties, this value is looked up and cached at class\n * initialization time and will fallback on a default implementation if\n * the Security property is not accessible.\n *\n * <p><em>Note: The classes in the package {@code javax.security.cert}\n * exist for compatibility with earlier versions of the\n * Java Secure Sockets Extension (JSSE). New applications should instead\n * use the standard Java SE certificate classes located in\n * {@code java.security.cert}.</em></p>\n *\n * @author Hemma Prafullchandra\n * @since 1.4\n * @see Certificate\n * @see java.security.cert.X509Extension\n * @see java.security.Security security properties\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "X509_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Constant to lookup in the Security properties file.\n     * In the Security properties file the default implementation\n     * for X.509 v3 is given as:\n     * <pre>\n     * cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "X509Provider",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_X509_CERT_CLASS",
    "type" : "String",
    "comment" : " Android-added.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final X509Certificate getInstance(InputStream inStream) throws CertificateException",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Instantiates an X509Certificate object, and initializes it with\n     * the data read from the input stream {@code inStream}.\n     * The implementation (X509Certificate is an abstract class) is\n     * provided by the class specified as the value of the\n     * {@code cert.provider.x509v1} security property.\n     *\n     * <p>Note: Only one DER-encoded\n     * certificate is expected to be in the input stream.\n     * Also, all X509Certificate\n     * subclasses must provide a constructor of the form:\n     * <pre>{@code\n     * public <subClass>(InputStream inStream) ...\n     * }</pre>\n     *\n     * @param inStream an input stream with the data to be read to\n     *        initialize the certificate.\n     * @return an X509Certificate object initialized with the data\n     *         from the input stream.\n     * @exception CertificateException if a class initialization\n     *            or certificate parsing error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final X509Certificate getInstance(byte[] certData) throws CertificateException",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Instantiates an X509Certificate object, and initializes it with\n     * the specified byte array.\n     * The implementation (X509Certificate is an abstract class) is\n     * provided by the class specified as the value of the\n     * {@code cert.provider.x509v1} security property.\n     *\n     * <p>Note: All X509Certificate\n     * subclasses must provide a constructor of the form:\n     * <pre>{@code\n     * public <subClass>(InputStream inStream) ...\n     * }</pre>\n     *\n     * @param certData a byte array containing the DER-encoded\n     *        certificate.\n     * @return an X509Certificate object initialized with the data\n     *         from {@code certData}.\n     * @exception CertificateException if a class initialization\n     *            or certificate parsing error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final X509Certificate getInst(Object value) throws CertificateException",
    "returnType" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException",
    "returnType" : "void",
    "comment" : "\n     * Checks that the certificate is currently valid. It is if\n     * the current date and time are within the validity period given in the\n     * certificate.\n     * <p>\n     * The validity period consists of two date/time values:\n     * the first and last dates (and times) on which the certificate\n     * is valid. It is defined in\n     * ASN.1 as:\n     * <pre>\n     * validity             Validity\n     *\n     * Validity ::= SEQUENCE {\n     *     notBefore      CertificateValidityDate,\n     *     notAfter       CertificateValidityDate }\n     *\n     * CertificateValidityDate ::= CHOICE {\n     *     utcTime        UTCTime,\n     *     generalTime    GeneralizedTime }\n     * </pre>\n     *\n     * @exception CertificateExpiredException if the certificate has expired.\n     * @exception CertificateNotYetValidException if the certificate is not\n     *            yet valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException",
    "returnType" : "void",
    "comment" : "\n     * Checks that the specified date is within the certificate's\n     * validity period. In other words, this determines whether the\n     * certificate would be valid at the specified date/time.\n     *\n     * @param date the Date to check against to see if this certificate\n     *        is valid at that date/time.\n     * @exception CertificateExpiredException if the certificate has expired\n     *            with respect to the {@code date} supplied.\n     * @exception CertificateNotYetValidException if the certificate is not\n     *            yet valid with respect to the {@code date} supplied.\n     * @see #checkValidity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the {@code version} (version number) value from the\n     * certificate. The ASN.1 definition for this is:\n     * <pre>\n     * version         [0]  EXPLICIT Version DEFAULT v1\n     *\n     * Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }\n     * </pre>\n     *\n     * @return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract BigInteger getSerialNumber()",
    "returnType" : "BigInteger",
    "comment" : "\n     * Gets the {@code serialNumber} value from the certificate.\n     * The serial number is an integer assigned by the certification\n     * authority to each certificate. It must be unique for each\n     * certificate issued by a given CA (i.e., the issuer name and\n     * serial number identify a unique certificate).\n     * The ASN.1 definition for this is:\n     * <pre>\n     * serialNumber     CertificateSerialNumber\n     *\n     * CertificateSerialNumber  ::=  INTEGER\n     * </pre>\n     *\n     * @return the serial number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Principal getIssuerDN()",
    "returnType" : "Principal",
    "comment" : "\n     * Gets the {@code issuer} (issuer distinguished name) value from\n     * the certificate. The issuer name identifies the entity that signed (and\n     * issued) the certificate.\n     *\n     * <p>The issuer name field contains an\n     * X.500 distinguished name (DN).\n     * The ASN.1 definition for this is:\n     * <pre>\n     * issuer    Name\n     *\n     * Name ::= CHOICE { RDNSequence }\n     * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n     * RelativeDistinguishedName ::=\n     *     SET OF AttributeValueAssertion\n     *\n     * AttributeValueAssertion ::= SEQUENCE {\n     *                               AttributeType,\n     *                               AttributeValue }\n     * AttributeType ::= OBJECT IDENTIFIER\n     * AttributeValue ::= ANY\n     * </pre>\n     * The {@code Name} describes a hierarchical name composed of\n     * attributes, such as country name, and corresponding values, such as US.\n     * The type of the {@code AttributeValue} component is determined by\n     * the {@code AttributeType}; in general it will be a\n     * {@code directoryString}. A {@code directoryString} is usually\n     * one of {@code PrintableString},\n     * {@code TeletexString} or {@code UniversalString}.\n     *\n     * @return a Principal whose name is the issuer distinguished name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Principal getSubjectDN()",
    "returnType" : "Principal",
    "comment" : "\n     * Gets the {@code subject} (subject distinguished name) value\n     * from the certificate.\n     * The ASN.1 definition for this is:\n     * <pre>\n     * subject    Name\n     * </pre>\n     *\n     * <p>See {@link #getIssuerDN() getIssuerDN} for {@code Name}\n     * and other relevant definitions.\n     *\n     * @return a Principal whose name is the subject name.\n     * @see #getIssuerDN()\n     ",
    "links" : [ "#getIssuerDN()" ]
  }, {
    "name" : "public abstract Date getNotBefore()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the {@code notBefore} date from the validity period of\n     * the certificate.\n     * The relevant ASN.1 definitions are:\n     * <pre>\n     * validity             Validity\n     *\n     * Validity ::= SEQUENCE {\n     *     notBefore      CertificateValidityDate,\n     *     notAfter       CertificateValidityDate }\n     *\n     * CertificateValidityDate ::= CHOICE {\n     *     utcTime        UTCTime,\n     *     generalTime    GeneralizedTime }\n     * </pre>\n     *\n     * @return the start date of the validity period.\n     * @see #checkValidity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Date getNotAfter()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the {@code notAfter} date from the validity period of\n     * the certificate. See {@link #getNotBefore() getNotBefore}\n     * for relevant ASN.1 definitions.\n     *\n     * @return the end date of the validity period.\n     * @see #checkValidity()\n     ",
    "links" : [ "#getNotBefore()" ]
  }, {
    "name" : "public abstract String getSigAlgName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the signature algorithm name for the certificate\n     * signature algorithm. An example is the string \"SHA-1/DSA\".\n     * The ASN.1 definition for this is:\n     * <pre>\n     * signatureAlgorithm   AlgorithmIdentifier\n     *\n     * AlgorithmIdentifier  ::=  SEQUENCE  {\n     *     algorithm               OBJECT IDENTIFIER,\n     *     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n     *                             -- contains a value of the type\n     *                             -- registered for use with the\n     *                             -- algorithm object identifier value\n     * </pre>\n     *\n     * <p>The algorithm name is determined from the {@code algorithm}\n     * OID string.\n     *\n     * @return the signature algorithm name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSigAlgOID()",
    "returnType" : "String",
    "comment" : "\n     * Gets the signature algorithm OID string from the certificate.\n     * An OID is represented by a set of positive whole numbers separated\n     * by periods.\n     * For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1\n     * with DSA signature algorithm, as per the PKIX part I.\n     *\n     * <p>See {@link #getSigAlgName() getSigAlgName} for\n     * relevant ASN.1 definitions.\n     *\n     * @return the signature algorithm OID string.\n     ",
    "links" : [ "#getSigAlgName()" ]
  }, {
    "name" : "public abstract byte[] getSigAlgParams()",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the DER-encoded signature algorithm parameters from this\n     * certificate's signature algorithm. In most cases, the signature\n     * algorithm parameters are null; the parameters are usually\n     * supplied with the certificate's public key.\n     *\n     * <p>See {@link #getSigAlgName() getSigAlgName} for\n     * relevant ASN.1 definitions.\n     *\n     * @return the DER-encoded signature algorithm parameters, or\n     *         null if no parameters are present.\n     ",
    "links" : [ "#getSigAlgName()" ]
  } ],
  "methodNames" : [ "public static final X509Certificate getInstance(InputStream inStream) throws CertificateException", "public static final X509Certificate getInstance(byte[] certData) throws CertificateException", "private static final X509Certificate getInst(Object value) throws CertificateException", "public abstract void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException", "public abstract void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException", "public abstract int getVersion()", "public abstract BigInteger getSerialNumber()", "public abstract Principal getIssuerDN()", "public abstract Principal getSubjectDN()", "public abstract Date getNotBefore()", "public abstract Date getNotAfter()", "public abstract String getSigAlgName()", "public abstract String getSigAlgOID()", "public abstract byte[] getSigAlgParams()" ],
  "variableNames" : [ "X509_PROVIDER", "X509Provider", "DEFAULT_X509_CERT_CLASS" ]
}