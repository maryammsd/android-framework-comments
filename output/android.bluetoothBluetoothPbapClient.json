{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothPbapClient.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothPbapClient",
  "comment" : "\n * This class provides the APIs to control the Bluetooth PBAP Client Profile.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : " There was an error trying to obtain the state ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELED",
    "type" : "int",
    "comment" : " Connection canceled before completion. ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothPbapClient>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service.\n     * Other public functions of BluetoothPbapClient will return default error\n     * results once close() has been called. Multiple invocations of close()\n     * are ok.\n     ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothPbapClient getService()",
    "returnType" : "IBluetoothPbapClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection.\n     * Upon successful connection to remote PBAP server the Client will\n     * attempt to automatically download the users phonebook and call log.\n     *\n     * @param device a remote device we want connect to\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     * otherwise;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnect.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on error, true otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of connected devices.\n     * Currently at most one.\n     *\n     * @return list of connected devices\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of devices matching specified states. Currently at most one.\n     *\n     * @return list of matching devices\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get connection state of device\n     *\n     * @return device connection state\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p> The device should already be paired.\n     * Priority can be one of {@link #PRIORITY_ON} or {@link #PRIORITY_OFF},\n     *\n     * @param device Paired bluetooth device\n     * @param priority\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of {@link #CONNECTION_POLICY_ALLOWED},\n     * {@link #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p> The priority can be any of:\n     * {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_OFF", "#PRIORITY_ON", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p> The connection policy can be any of:\n     * {@link #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN},\n     * {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_UNKNOWN" ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "STATE_ERROR", "RESULT_FAILURE", "RESULT_SUCCESS", "RESULT_CANCELED", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public synchronized void close()", "private IBluetoothPbapClient getService()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "private static void log(String msg)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)" ]
}