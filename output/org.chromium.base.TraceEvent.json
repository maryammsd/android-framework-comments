{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/TraceEvent.java",
  "packageName" : "org.chromium.base",
  "className" : "TraceEvent",
  "comment" : "\n * Java mirror of Chrome trace event API. See base/trace_event/trace_event.h.\n *\n * To get scoped trace events, use the \"try with resource\" construct, for instance:\n * <pre>{@code\n * try (TraceEvent e = TraceEvent.scoped(\"MyTraceEvent\")) {\n *   // code.\n * }\n * }</pre>\n *\n * The event name of the trace events must be a string literal or a |static final String| class\n * member. Otherwise NoDynamicStringsInTraceEventCheck error will be thrown.\n *\n * It is OK to use tracing before the native library has loaded, in a slightly restricted fashion.\n * @see EarlyTraceEvent for details.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sEnabled",
    "type" : "boolean",
    "comment" : " True when tracing into Chrome's tracing service.",
    "links" : [ ]
  }, {
    "name" : "sUiThreadReady",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEventNameFilteringEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static TraceEvent scoped(String name, String arg)",
    "returnType" : "TraceEvent",
    "comment" : "\n     * Factory used to support the \"try with resource\" construct.\n     *\n     * Note that if tracing is not enabled, this will not result in allocating an object.\n     *\n     * @param name Trace event name.\n     * @param arg The arguments of the event.\n     * @return a TraceEvent, or null if tracing is not enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TraceEvent scoped(String name, int arg)",
    "returnType" : "TraceEvent",
    "comment" : "\n     * Factory used to support the \"try with resource\" construct.\n     *\n     * Note that if tracing is not enabled, this will not result in allocating an object.\n     *\n     * @param name Trace event name.\n     * @param arg An integer argument of the event.\n     * @return a TraceEvent, or null if tracing is not enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TraceEvent scoped(String name)",
    "returnType" : "TraceEvent",
    "comment" : " Similar to {@link #scoped(String, String arg)}, but uses null for |arg|. ",
    "links" : [ "#scoped(String" ]
  }, {
    "name" : "public static void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : " Notification from native that tracing is enabled/disabled. ",
    "links" : [ ]
  }, {
    "name" : "public static void setEventNameFilteringEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean eventNameFilteringEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void maybeEnableEarlyTracing(boolean readCommandLine)",
    "returnType" : "void",
    "comment" : "\n     * May enable early tracing depending on the environment.\n     *\n     * @param readCommandLine If true, also check command line flags to see\n     *                        whether tracing should be turned on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void onNativeTracingReady()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void onUiThreadReady()",
    "returnType" : "void",
    "comment" : " Called by ThreadUtils.",
    "links" : [ ]
  }, {
    "name" : "public static boolean enabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if tracing is enabled, false otherwise.\n     * It is safe to call trace methods without checking if TraceEvent\n     * is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void instant(String name)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'instant' native trace event with no arguments.\n     * @param name The name of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void instant(String name, String arg)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'instant' native trace event.\n     * @param name The name of the event.\n     * @param arg  The arguments of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void instantAndroidIPC(String name, long durMs)",
    "returnType" : "void",
    "comment" : "\n     * Triggers a 'instant' native \"AndroidIPC\" event.\n     * @param name The name of the IPC.\n     * @param durMs The duration the IPC took in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void instantAndroidToolbar(int blockReason, int allowReason, int snapshotDiff)",
    "returnType" : "void",
    "comment" : "\n     * Triggers a 'instant' native \"AndroidToolbar\" event.\n     * @param blockReason the enum TopToolbarBlockCapture (-1 if not blocked).\n     * @param allowReason the enum TopToolbarAllowCapture (-1 if not allowed).\n     * @param snapshotDiff the enum ToolbarSnapshotDifference (-1 if no diff).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void webViewStartupTotalFactoryInit(long startTimeMs, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Records a 'WebView.Startup.CreationTime.TotalFactoryInitTime' event with the\n     * 'android_webview.timeline' category starting at `startTimeMs` with the duration of\n     * `durationMs`.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void webViewStartupStage1(long startTimeMs, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Records a 'WebView.Startup.CreationTime.Stage1.FactoryInit' event with the\n     * 'android_webview.timeline' category starting at `startTimeMs` with the duration of\n     * `durationMs`.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void webViewStartupStage2(long startTimeMs, long durationMs, boolean isColdStartup)",
    "returnType" : "void",
    "comment" : "\n     * Records 'WebView.Startup.CreationTime.Stage2.ProviderInit.Warm' and\n     * 'WebView.Startup.CreationTime.Stage2.ProviderInit.Cold' events depending on the value of\n     * `isColdStartup` with the 'android_webview.timeline' category starting at `startTimeMs` with\n     * the duration of `durationMs`.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void startupLaunchCause(long activityId, int launchCause)",
    "returnType" : "void",
    "comment" : " Records 'Startup.LaunchCause' event with the 'interactions' category. ",
    "links" : [ ]
  }, {
    "name" : "public static void startupTimeToFirstVisibleContent2(long activityId, long startTimeMs, long durationMs)",
    "returnType" : "void",
    "comment" : " Records 'Startup.TimeToFirstVisibleContent2' event with the 'interactions' category. ",
    "links" : [ ]
  }, {
    "name" : "public static void snapshotViewHierarchy()",
    "returnType" : "void",
    "comment" : "\n     * Snapshots the view hierarchy state on the main thread and then finishes emitting a trace\n     * event on the threadpool.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void startAsync(String name, long id)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'start' native trace event with no arguments.\n     * @param name The name of the event.\n     * @param id   The id of the asynchronous event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void finishAsync(String name, long id)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'finish' native trace event with no arguments.\n     * @param name The name of the event.\n     * @param id   The id of the asynchronous event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void begin(String name)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'begin' native trace event with no arguments.\n     * @param name The name of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void begin(String name, String arg)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'begin' native trace event.\n     * @param name The name of the event.\n     * @param arg  The arguments of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void begin(String name, int arg)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'begin' native trace event.\n     * @param name The name of the event.\n     * @param arg An integer argument of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void end(String name)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'end' native trace event with no arguments.\n     * @param name The name of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void end(String name, String arg)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'end' native trace event.\n     * @param name The name of the event.\n     * @param arg  The arguments of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void end(String name, String arg, long flow)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the 'end' native trace event.\n     * @param name The name of the event.\n     * @param arg  The arguments of the event.\n     * @param flow The flow ID to associate with this event (0 is treated as invalid).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ArrayList<ActivityInfo> snapshotViewHierarchyState()",
    "returnType" : "ArrayList<ActivityInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpViewHierarchy(long dumpProtoPtr, Object list)",
    "returnType" : "void",
    "comment" : "\n     * A method to be called by native code that uses the ViewHierarchyDumper class to emit a trace\n     * event with views of all running activities of the app.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public static TraceEvent scoped(String name, String arg)", "public static TraceEvent scoped(String name, int arg)", "public static TraceEvent scoped(String name)", "public static void setEnabled(boolean enabled)", "public static void setEventNameFilteringEnabled(boolean enabled)", "public static boolean eventNameFilteringEnabled()", "public static void maybeEnableEarlyTracing(boolean readCommandLine)", "public static void onNativeTracingReady()", " static void onUiThreadReady()", "public static boolean enabled()", "public static void instant(String name)", "public static void instant(String name, String arg)", "public static void instantAndroidIPC(String name, long durMs)", "public static void instantAndroidToolbar(int blockReason, int allowReason, int snapshotDiff)", "public static void webViewStartupTotalFactoryInit(long startTimeMs, long durationMs)", "public static void webViewStartupStage1(long startTimeMs, long durationMs)", "public static void webViewStartupStage2(long startTimeMs, long durationMs, boolean isColdStartup)", "public static void startupLaunchCause(long activityId, int launchCause)", "public static void startupTimeToFirstVisibleContent2(long activityId, long startTimeMs, long durationMs)", "public static void snapshotViewHierarchy()", "public static void startAsync(String name, long id)", "public static void finishAsync(String name, long id)", "public static void begin(String name)", "public static void begin(String name, String arg)", "public static void begin(String name, int arg)", "public static void end(String name)", "public static void end(String name, String arg)", "public static void end(String name, String arg, long flow)", "public static ArrayList<ActivityInfo> snapshotViewHierarchyState()", "public static void dumpViewHierarchy(long dumpProtoPtr, Object list)" ],
  "variableNames" : [ "sEnabled", "sUiThreadReady", "sEventNameFilteringEnabled", "mName" ]
}