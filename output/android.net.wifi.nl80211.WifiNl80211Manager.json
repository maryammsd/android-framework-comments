{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/nl80211/WifiNl80211Manager.java",
  "packageName" : "android.net.wifi.nl80211",
  "className" : "WifiNl80211Manager",
  "comment" : "\n * This class encapsulates the interface the wificond daemon presents to the Wi-Fi framework - used\n * to encapsulate the Wi-Fi 80211nl management interface. The\n * interface is only for use by the Wi-Fi framework and access is protected by SELinux permissions.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerboseLoggingEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEND_MGMT_FRAME_TIMEOUT_MS",
    "type" : "int",
    "comment" : "\n     * The {@link #sendMgmtFrame(String, byte[], int, Executor, SendMgmtFrameCallback)}\n     * timeout, in milliseconds, after which\n     * {@link SendMgmtFrameCallback#onFailure(int)} will be called with reason\n     * {@link #SEND_MGMT_FRAME_ERROR_TIMEOUT}.\n     ",
    "links" : [ "#onFailure(int)", "#sendMgmtFrame(String", "#SEND_MGMT_FRAME_ERROR_TIMEOUT" ]
  }, {
    "name" : "TIMEOUT_ALARM_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_SINGLE_SCAN",
    "type" : "int",
    "comment" : "\n     * Specifies a scan type: single scan initiated by the framework. Can be used in\n     * {@link #getScanResults(String, int)} to specify the type of scan result to fetch.\n     ",
    "links" : [ "#getScanResults(String" ]
  }, {
    "name" : "SCAN_TYPE_PNO_SCAN",
    "type" : "int",
    "comment" : "\n     * Specifies a scan type: PNO scan. Can be used in {@link #getScanResults(String, int)} to\n     * specify the type of scan result to fetch.\n     ",
    "links" : [ "#getScanResults(String" ]
  }, {
    "name" : "mAlarmManager",
    "type" : "AlarmManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWificond",
    "type" : "IWificond",
    "comment" : " Cached wificond binder handlers.",
    "links" : [ ]
  }, {
    "name" : "mClientInterfaces",
    "type" : "HashMap<String, IClientInterface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApInterfaces",
    "type" : "HashMap<String, IApInterface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWificondScanners",
    "type" : "HashMap<String, IWifiScannerImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanEventHandlers",
    "type" : "HashMap<String, IScanEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPnoScanEventHandlers",
    "type" : "HashMap<String, IPnoScanEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApInterfaceListeners",
    "type" : "HashMap<String, IApInterfaceEventCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeathEventHandler",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSendMgmtFrameInProgress",
    "type" : "AtomicBoolean",
    "comment" : "\n     * Ensures that no more than one sendMgmtFrame operation runs concurrently.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_MGMT_FRAME_ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown error occurred during call to\n     * {@link #sendMgmtFrame(String, byte[], int, Executor, SendMgmtFrameCallback)}.\n     ",
    "links" : [ "#sendMgmtFrame(String" ]
  }, {
    "name" : "SEND_MGMT_FRAME_ERROR_MCS_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * Specifying the MCS rate in\n     * {@link #sendMgmtFrame(String, byte[], int, Executor, SendMgmtFrameCallback)} is not\n     * supported by this device.\n     ",
    "links" : [ "#sendMgmtFrame(String" ]
  }, {
    "name" : "SEND_MGMT_FRAME_ERROR_NO_ACK",
    "type" : "int",
    "comment" : "\n     * Driver reported that no ACK was received for the frame transmitted using\n     * {@link #sendMgmtFrame(String, byte[], int, Executor, SendMgmtFrameCallback)}.\n     ",
    "links" : [ "#sendMgmtFrame(String" ]
  }, {
    "name" : "SEND_MGMT_FRAME_ERROR_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Error code for when the driver fails to report on the status of the frame sent by\n     * {@link #sendMgmtFrame(String, byte[], int, Executor, SendMgmtFrameCallback)}\n     * after {@link #SEND_MGMT_FRAME_TIMEOUT_MS} milliseconds.\n     ",
    "links" : [ "#sendMgmtFrame(String", "#SEND_MGMT_FRAME_TIMEOUT_MS" ]
  }, {
    "name" : "SEND_MGMT_FRAME_ERROR_ALREADY_STARTED",
    "type" : "int",
    "comment" : "\n     * An existing call to\n     * {@link #sendMgmtFrame(String, byte[], int, Executor, SendMgmtFrameCallback)}\n     * is in progress. Another frame cannot be sent until the first call completes.\n     ",
    "links" : [ "#sendMgmtFrame(String" ]
  } ],
  "methods" : [ {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : "\n     * Called by the binder subsystem upon remote object death.\n     * Invoke all the register death handlers and clear state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableVerboseLogging(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable verbose logging of the WifiNl80211Manager module.\n     * @param enable True to enable verbose logging. False to disable verbose logging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnServiceDeadCallback(@NonNull Runnable deathEventHandler)",
    "returnType" : "void",
    "comment" : "\n     * Register a death notification for the WifiNl80211Manager which acts as a proxy for the\n     * wificond daemon (i.e. the death listener will be called when and if the wificond daemon\n     * dies).\n     *\n     * @param deathEventHandler A {@link Runnable} to be called whenever the wificond daemon dies.\n     ",
    "links" : [ "Runnable" ]
  }, {
    "name" : "private boolean retrieveWificondAndRegisterForDeath()",
    "returnType" : "boolean",
    "comment" : "\n     * Helper method to retrieve the global wificond handle and register for\n     * death notifications.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setupInterfaceForClientMode(@NonNull String ifaceName, @NonNull @CallbackExecutor Executor executor, @NonNull ScanEventCallback scanCallback, @NonNull ScanEventCallback pnoScanCallback)",
    "returnType" : "boolean",
    "comment" : "\n     * Set up an interface for client (STA) mode.\n     *\n     * @param ifaceName Name of the interface to configure.\n     * @param executor The Executor on which to execute the callbacks.\n     * @param scanCallback A callback for framework initiated scans.\n     * @param pnoScanCallback A callback for PNO (offloaded) scans.\n     * @return true on success.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean tearDownClientInterface(@NonNull String ifaceName)",
    "returnType" : "boolean",
    "comment" : "\n     * Tear down a specific client (STA) interface configured using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}.\n     *\n     * @param ifaceName Name of the interface to tear down.\n     * @return Returns true on success, false on failure (e.g. when called before an interface was\n     * set up).\n     ",
    "links" : [ "#setupInterfaceForClientMode(String" ]
  }, {
    "name" : "public boolean setupInterfaceForSoftApMode(@NonNull String ifaceName)",
    "returnType" : "boolean",
    "comment" : "\n     * Set up interface as a Soft AP.\n     *\n     * @param ifaceName Name of the interface to configure.\n     * @return true on success.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean tearDownSoftApInterface(@NonNull String ifaceName)",
    "returnType" : "boolean",
    "comment" : "\n     * Tear down a Soft AP interface configured using\n     * {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName Name of the interface to tear down.\n     * @return Returns true on success, false on failure (e.g. when called before an interface was\n     * set up).\n     ",
    "links" : [ "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public boolean tearDownInterfaces()",
    "returnType" : "boolean",
    "comment" : "\n    * Tear down all interfaces, whether clients (STA) or Soft AP.\n     *\n    * @return Returns true on success.\n    ",
    "links" : [ ]
  }, {
    "name" : "private IClientInterface getClientInterface(@NonNull String ifaceName)",
    "returnType" : "IClientInterface",
    "comment" : " Helper function to look up the interface handle using name ",
    "links" : [ ]
  }, {
    "name" : "public SignalPollResult signalPoll(@NonNull String ifaceName)",
    "returnType" : "SignalPollResult",
    "comment" : "\n     * Request signal polling.\n     *\n     * @param ifaceName Name of the interface on which to poll. The interface must have been\n     *                  already set up using\n     *{@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     *                  or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @return A {@link SignalPollResult} object containing interface statistics, or a null on\n     * error (e.g. the interface hasn't been set up yet).\n     ",
    "links" : [ "#setupInterfaceForClientMode(String", "SignalPollResult", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public TxPacketCounters getTxPacketCounters(@NonNull String ifaceName)",
    "returnType" : "TxPacketCounters",
    "comment" : "\n     * Get current transmit (Tx) packet counters of the specified interface. The interface must\n     * have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName Name of the interface.\n     * @return {@link TxPacketCounters} of the current interface or null on error (e.g. when\n     * called before the interface has been set up).\n     ",
    "links" : [ "#setupInterfaceForClientMode(String", "TxPacketCounters", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "private IWifiScannerImpl getScannerImpl(@NonNull String ifaceName)",
    "returnType" : "IWifiScannerImpl",
    "comment" : " Helper function to look up the scanner impl handle using name ",
    "links" : [ ]
  }, {
    "name" : "public List<NativeScanResult> getScanResults(@NonNull String ifaceName, @ScanResultType int scanType)",
    "returnType" : "List<NativeScanResult>",
    "comment" : "\n     * Fetch the latest scan results of the indicated type for the specified interface. Note that\n     * this method fetches the latest results - it does not initiate a scan. Initiating a scan can\n     * be done using {@link #startScan(String, int, Set, List)} or\n     * {@link #startPnoScan(String, PnoSettings, Executor, PnoScanRequestCallback)}.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName Name of the interface.\n     * @param scanType The type of scan result to be returned, can be\n     * {@link #SCAN_TYPE_SINGLE_SCAN} or {@link #SCAN_TYPE_PNO_SCAN}.\n     * @return Returns an array of {@link NativeScanResult} or an empty array on failure (e.g. when\n     * called before the interface has been set up).\n     ",
    "links" : [ "#startScan(String", "android.net.wifi.nl80211.NativeScanResult", "#setupInterfaceForClientMode(String", "#SCAN_TYPE_SINGLE_SCAN", "#SCAN_TYPE_PNO_SCAN", "#startPnoScan(String", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "private static int getScanType(@WifiAnnotations.ScanType int scanType)",
    "returnType" : "int",
    "comment" : "\n     * Return scan type for the parcelable {@link SingleScanSettings}\n     ",
    "links" : [ "android.net.wifi.nl80211.SingleScanSettings" ]
  }, {
    "name" : "public boolean startScan(@NonNull String ifaceName, @WifiAnnotations.ScanType int scanType, @Nullable Set<Integer> freqs, @Nullable List<byte[]> hiddenNetworkSSIDs)",
    "returnType" : "boolean",
    "comment" : "\n     * Start a scan using the specified parameters. A scan is an asynchronous operation. The\n     * result of the operation is returned in the {@link ScanEventCallback} registered when\n     * setting up an interface using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}.\n     * The latest scans can be obtained using {@link #getScanResults(String, int)} and using a\n     * {@link #SCAN_TYPE_SINGLE_SCAN} for the {@code scanType}.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName Name of the interface on which to initiate the scan.\n     * @param scanType Type of scan to perform, can be any of\n     * {@link WifiScanner#SCAN_TYPE_HIGH_ACCURACY}, {@link WifiScanner#SCAN_TYPE_LOW_POWER}, or\n     * {@link WifiScanner#SCAN_TYPE_LOW_LATENCY}.\n     * @param freqs list of frequencies to scan for, if null scan all supported channels.\n     * @param hiddenNetworkSSIDs List of hidden networks to be scanned for, a null indicates that\n     *                           no hidden frequencies will be scanned for.\n     * @return Returns true on success, false on failure (e.g. when called before the interface\n     * has been set up).\n     ",
    "links" : [ "#getScanResults(String", "ScanEventCallback", "android.net.wifi.WifiScanner#SCAN_TYPE_HIGH_ACCURACY", "#setupInterfaceForClientMode(String", "#SCAN_TYPE_SINGLE_SCAN", "android.net.wifi.WifiScanner#SCAN_TYPE_LOW_POWER", "#setupInterfaceForSoftApMode(String)", "android.net.wifi.WifiScanner#SCAN_TYPE_LOW_LATENCY" ]
  }, {
    "name" : "public boolean startPnoScan(@NonNull String ifaceName, @NonNull PnoSettings pnoSettings, @NonNull @CallbackExecutor Executor executor, @NonNull PnoScanRequestCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Request a PNO (Preferred Network Offload). The offload request and the scans are asynchronous\n     * operations. The result of the request are returned in the {@code callback} parameter which\n     * is an {@link PnoScanRequestCallback}. The scan results are are return in the\n     * {@link ScanEventCallback} which is registered when setting up an interface using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}.\n     * The latest PNO scans can be obtained using {@link #getScanResults(String, int)} with the\n     * {@code scanType} set to {@link #SCAN_TYPE_PNO_SCAN}.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName Name of the interface on which to request a PNO.\n     * @param pnoSettings PNO scan configuration.\n     * @param executor The Executor on which to execute the callback.\n     * @param callback Callback for the results of the offload request.\n     * @return true on success, false on failure (e.g. when called before the interface has been set\n     * up).\n     ",
    "links" : [ "#getScanResults(String", "ScanEventCallback", "PnoScanRequestCallback", "#setupInterfaceForClientMode(String", "#SCAN_TYPE_PNO_SCAN", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public boolean stopPnoScan(@NonNull String ifaceName)",
    "returnType" : "boolean",
    "comment" : "\n     * Stop PNO scan configured with\n     * {@link #startPnoScan(String, PnoSettings, Executor, PnoScanRequestCallback)}.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName Name of the interface on which the PNO scan was configured.\n     * @return true on success, false on failure (e.g. when called before the interface has been\n     * set up).\n     ",
    "links" : [ "#setupInterfaceForClientMode(String", "#startPnoScan(String", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public void abortScan(@NonNull String ifaceName)",
    "returnType" : "void",
    "comment" : "\n     * Abort ongoing single scan started with {@link #startScan(String, int, Set, List)}. No failure\n     * callback, e.g. {@link ScanEventCallback#onScanFailed()}, is triggered by this operation.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}. If the interface has not been set up then\n     * this method has no impact.\n     *\n     * @param ifaceName Name of the interface on which the scan was started.\n     ",
    "links" : [ "#startScan(String", "#onScanFailed()", "#setupInterfaceForClientMode(String", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public int[] getChannelsMhzForBand(@WifiAnnotations.WifiBandBasic int band)",
    "returnType" : "int[]",
    "comment" : "\n     * Query the list of valid frequencies (in MHz) for the provided band.\n     * The result depends on the on the country code that has been set.\n     *\n     * @param band as specified by one of the WifiScanner.WIFI_BAND_* constants.\n     * The following bands are supported:\n     * {@link WifiScanner#WIFI_BAND_24_GHZ},\n     * {@link WifiScanner#WIFI_BAND_5_GHZ},\n     * {@link WifiScanner#WIFI_BAND_5_GHZ_DFS_ONLY},\n     * {@link WifiScanner#WIFI_BAND_6_GHZ}\n     * @return frequencies vector of valid frequencies (MHz), or an empty array for error.\n     * @throws IllegalArgumentException if band is not recognized.\n     ",
    "links" : [ "android.net.wifi.WifiScanner#WIFI_BAND_6_GHZ", "android.net.wifi.WifiScanner#WIFI_BAND_24_GHZ", "android.net.wifi.WifiScanner#WIFI_BAND_5_GHZ", "android.net.wifi.WifiScanner#WIFI_BAND_5_GHZ_DFS_ONLY" ]
  }, {
    "name" : "private IApInterface getApInterface(@NonNull String ifaceName)",
    "returnType" : "IApInterface",
    "comment" : " Helper function to look up the interface handle using name ",
    "links" : [ ]
  }, {
    "name" : "public DeviceWiphyCapabilities getDeviceWiphyCapabilities(@NonNull String ifaceName)",
    "returnType" : "DeviceWiphyCapabilities",
    "comment" : "\n     * Get the device phy capabilities for a given interface.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @return DeviceWiphyCapabilities or null on error (e.g. when called on an interface which has\n     * not been set up).\n     ",
    "links" : [ "#setupInterfaceForClientMode(String", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public boolean registerApCallback(@NonNull String ifaceName, @NonNull @CallbackExecutor Executor executor, @NonNull SoftApCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Register the provided callback handler for SoftAp events. The interface must first be created\n     * using {@link #setupInterfaceForSoftApMode(String)}. The callback registration is valid until\n     * the interface is deleted using {@link #tearDownSoftApInterface(String)} (no deregistration\n     * method is provided).\n     * <p>\n     * Note that only one callback can be registered at a time - any registration overrides previous\n     * registrations.\n     *\n     * @param ifaceName Name of the interface on which to register the callback.\n     * @param executor The Executor on which to execute the callbacks.\n     * @param callback Callback for AP events.\n     * @return true on success, false on failure (e.g. when called on an interface which has not\n     * been set up).\n     ",
    "links" : [ "#tearDownSoftApInterface(String)", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "public void sendMgmtFrame(@NonNull String ifaceName, @NonNull byte[] frame, int mcs, @NonNull @CallbackExecutor Executor executor, @NonNull SendMgmtFrameCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Send a management frame on the specified interface at the specified rate. Useful for probing\n     * the link with arbitrary frames.\n     *\n     * Note: The interface must have been already set up using\n     * {@link #setupInterfaceForClientMode(String, Executor, ScanEventCallback, ScanEventCallback)}\n     * or {@link #setupInterfaceForSoftApMode(String)}.\n     *\n     * @param ifaceName The interface on which to send the frame.\n     * @param frame The raw byte array of the management frame to tramit.\n     * @param mcs The MCS (modulation and coding scheme), i.e. rate, at which to transmit the\n     *            frame. Specified per IEEE 802.11.\n     * @param executor The Executor on which to execute the callbacks.\n     * @param callback A {@link SendMgmtFrameCallback} callback for results of the operation.\n     ",
    "links" : [ "SendMgmtFrameCallback", "#setupInterfaceForClientMode(String", "#setupInterfaceForSoftApMode(String)" ]
  }, {
    "name" : "private void clearState()",
    "returnType" : "void",
    "comment" : "\n     * Clear all internal handles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static OemSecurityType parseOemSecurityTypeElement(int id, int idExt, @NonNull byte[] bytes)",
    "returnType" : "OemSecurityType",
    "comment" : "\n     * OEM information element parser for security types not parsed by the framework.\n     *\n     * The OEM method should use the method inputs {@code id}, {@code idExt}, and {@code bytes}\n     * to perform the parsing. The method should place the results in an OemSecurityType objct.\n     *\n     * @param id The information element id.\n     * @param idExt The information element extension id. This is valid only when id is\n     *        the extension id, {@code 255}.\n     * @param bytes The raw bytes of information element data, 'Element ID' and 'Length' are\n     *              stripped off already.\n     * @return an OemSecurityType object if this IE is parsed successfully, null otherwise.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mVerboseLoggingEnabled", "SEND_MGMT_FRAME_TIMEOUT_MS", "TIMEOUT_ALARM_TAG", "SCAN_TYPE_SINGLE_SCAN", "SCAN_TYPE_PNO_SCAN", "mAlarmManager", "mEventHandler", "mWificond", "mClientInterfaces", "mApInterfaces", "mWificondScanners", "mScanEventHandlers", "mPnoScanEventHandlers", "mApInterfaceListeners", "mDeathEventHandler", "mSendMgmtFrameInProgress", "SEND_MGMT_FRAME_ERROR_UNKNOWN", "SEND_MGMT_FRAME_ERROR_MCS_UNSUPPORTED", "SEND_MGMT_FRAME_ERROR_NO_ACK", "SEND_MGMT_FRAME_ERROR_TIMEOUT", "SEND_MGMT_FRAME_ERROR_ALREADY_STARTED" ],
  "methodNames" : [ "public void binderDied()", "public void enableVerboseLogging(boolean enable)", "public void setOnServiceDeadCallback(@NonNull Runnable deathEventHandler)", "private boolean retrieveWificondAndRegisterForDeath()", "public boolean setupInterfaceForClientMode(@NonNull String ifaceName, @NonNull @CallbackExecutor Executor executor, @NonNull ScanEventCallback scanCallback, @NonNull ScanEventCallback pnoScanCallback)", "public boolean tearDownClientInterface(@NonNull String ifaceName)", "public boolean setupInterfaceForSoftApMode(@NonNull String ifaceName)", "public boolean tearDownSoftApInterface(@NonNull String ifaceName)", "public boolean tearDownInterfaces()", "private IClientInterface getClientInterface(@NonNull String ifaceName)", "public SignalPollResult signalPoll(@NonNull String ifaceName)", "public TxPacketCounters getTxPacketCounters(@NonNull String ifaceName)", "private IWifiScannerImpl getScannerImpl(@NonNull String ifaceName)", "public List<NativeScanResult> getScanResults(@NonNull String ifaceName, @ScanResultType int scanType)", "private static int getScanType(@WifiAnnotations.ScanType int scanType)", "public boolean startScan(@NonNull String ifaceName, @WifiAnnotations.ScanType int scanType, @Nullable Set<Integer> freqs, @Nullable List<byte[]> hiddenNetworkSSIDs)", "public boolean startPnoScan(@NonNull String ifaceName, @NonNull PnoSettings pnoSettings, @NonNull @CallbackExecutor Executor executor, @NonNull PnoScanRequestCallback callback)", "public boolean stopPnoScan(@NonNull String ifaceName)", "public void abortScan(@NonNull String ifaceName)", "public int[] getChannelsMhzForBand(@WifiAnnotations.WifiBandBasic int band)", "private IApInterface getApInterface(@NonNull String ifaceName)", "public DeviceWiphyCapabilities getDeviceWiphyCapabilities(@NonNull String ifaceName)", "public boolean registerApCallback(@NonNull String ifaceName, @NonNull @CallbackExecutor Executor executor, @NonNull SoftApCallback callback)", "public void sendMgmtFrame(@NonNull String ifaceName, @NonNull byte[] frame, int mcs, @NonNull @CallbackExecutor Executor executor, @NonNull SendMgmtFrameCallback callback)", "private void clearState()", "public static OemSecurityType parseOemSecurityTypeElement(int id, int idExt, @NonNull byte[] bytes)" ]
}