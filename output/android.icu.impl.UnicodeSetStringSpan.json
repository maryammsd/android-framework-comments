{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UnicodeSetStringSpan.java",
  "packageName" : "android.icu.impl",
  "className" : "UnicodeSetStringSpan",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "WITH_COUNT",
    "type" : "int",
    "comment" : " spanAndCount() may be called",
    "links" : [ ]
  }, {
    "name" : "FWD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTAINED",
    "type" : "int",
    "comment" : " public static final int UTF16      = 8;",
    "links" : [ ]
  }, {
    "name" : "NOT_CONTAINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FWD_UTF16_CONTAINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FWD_UTF16_NOT_CONTAINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACK_UTF16_CONTAINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACK_UTF16_NOT_CONTAINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_CP_CONTAINED",
    "type" : "short",
    "comment" : "\n     * Special spanLength short values. (since Java has not unsigned byte type)\n     * All code points in the string are contained in the parent set.\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_SPAN",
    "type" : "short",
    "comment" : " The spanLength is >=0xfe. ",
    "links" : [ ]
  }, {
    "name" : "spanSet",
    "type" : "UnicodeSet",
    "comment" : " Set for span(). Same as parent but without strings. ",
    "links" : [ ]
  }, {
    "name" : "spanNotSet",
    "type" : "UnicodeSet",
    "comment" : "\n     * Set for span(not contained).\n     * Same as spanSet, plus characters that start or end strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "strings",
    "type" : "ArrayList<String>",
    "comment" : " The strings of the parent set. ",
    "links" : [ ]
  }, {
    "name" : "spanLengths",
    "type" : "short[]",
    "comment" : " The lengths of span(), spanBack() etc. for each string. ",
    "links" : [ ]
  }, {
    "name" : "maxLength16",
    "type" : "int",
    "comment" : " Maximum lengths of relevant strings. ",
    "links" : [ ]
  }, {
    "name" : "someRelevant",
    "type" : "boolean",
    "comment" : " Are there strings that are not fully contained in the code point set? ",
    "links" : [ ]
  }, {
    "name" : "all",
    "type" : "boolean",
    "comment" : " Set up for all variants of span()? ",
    "links" : [ ]
  }, {
    "name" : "offsets",
    "type" : "OffsetList",
    "comment" : " Span helper ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean needsStringSpanUTF16()",
    "returnType" : "boolean",
    "comment" : "\n     * Do the strings need to be checked in span() etc.?\n     *\n     * @return true if strings need to be checked (call span() here),\n     *         false if not (use a BMPSet for best performance).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int c)",
    "returnType" : "boolean",
    "comment" : " For fast UnicodeSet::contains(c). ",
    "links" : [ ]
  }, {
    "name" : "private void addToSpanNotSet(int c)",
    "returnType" : "void",
    "comment" : "\n     * Adds a starting or ending string character to the spanNotSet\n     * so that a character span ends before any string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int span(CharSequence s, int start, SpanCondition spanCondition)",
    "returnType" : "int",
    "comment" : "\n     * Spans a string.\n     *\n     * @param s The string to be spanned\n     * @param start The start index that the span begins\n     * @param spanCondition The span condition\n     * @return the limit (exclusive end) of the span\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized int spanWithStrings(CharSequence s, int start, int spanLimit, SpanCondition spanCondition)",
    "returnType" : "int",
    "comment" : "\n     * Synchronized method for complicated spans using the offsets.\n     * Avoids synchronization for simple cases.\n     *\n     * @param spanLimit = spanSet.span(s, start, CONTAINED)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int spanAndCount(CharSequence s, int start, SpanCondition spanCondition, OutputInt outCount)",
    "returnType" : "int",
    "comment" : "\n     * Spans a string and counts the smallest number of set elements on any path across the span.\n     *\n     * <p>For proper counting, we cannot ignore strings that are fully contained in code point spans.\n     *\n     * <p>If the set does not have any fully-contained strings, then we could optimize this\n     * like span(), but such sets are likely rare, and this is at least still linear.\n     *\n     * @param s The string to be spanned\n     * @param start The start index that the span begins\n     * @param spanCondition The span condition\n     * @param outCount The count\n     * @return the limit (exclusive end) of the span\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized int spanContainedAndCount(CharSequence s, int start, OutputInt outCount)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized int spanBack(CharSequence s, int length, SpanCondition spanCondition)",
    "returnType" : "int",
    "comment" : "\n     * Span a string backwards.\n     *\n     * @param s The string to be spanned\n     * @param spanCondition The span condition\n     * @return The string index which starts the span (i.e. inclusive).\n     ",
    "links" : [ ]
  }, {
    "name" : "private int spanNot(CharSequence s, int start, OutputInt outCount)",
    "returnType" : "int",
    "comment" : "\n     * Algorithm for spanNot()==span(SpanCondition.NOT_CONTAINED)\n     *\n     * Theoretical algorithm:\n     * - Iterate through the string, and at each code point boundary:\n     *   + If the code point there is in the set, then return with the current position.\n     *   + If a set string matches at the current position, then return with the current position.\n     *\n     * Optimized implementation:\n     *\n     * (Same assumption as for span() above.)\n     *\n     * Create and cache a spanNotSet which contains\n     * all of the single code points of the original set but none of its strings.\n     * For each set string add its initial code point to the spanNotSet.\n     * (Also add its final code point for spanNotBack().)\n     *\n     * - Loop:\n     *   + Do spanLength=spanNotSet.span(SpanCondition.NOT_CONTAINED).\n     *   + If the current code point is in the original set, then return the current position.\n     *   + If any set string matches at the current position, then return the current position.\n     *   + If there is no match at the current position, neither for the code point\n     *     there nor for any set string, then skip this code point and continue the loop.\n     *     This happens for set-string-initial code points that were added to spanNotSet\n     *     when there is not actually a match for such a set string.\n     *\n     * @param s The string to be spanned\n     * @param start The start index that the span begins\n     * @param outCount If not null: Receives the number of code points across the span.\n     * @return the limit (exclusive end) of the span\n     ",
    "links" : [ ]
  }, {
    "name" : "private int spanNotBack(CharSequence s, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static short makeSpanLengthByte(int spanLength)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean matches16(CharSequence s, int start, final String t, int length)",
    "returnType" : "boolean",
    "comment" : " Compare strings without any argument checks. Requires length>0.",
    "links" : [ ]
  }, {
    "name" : " static boolean matches16CPB(CharSequence s, int start, int limit, final String t, int tlength)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare 16-bit Unicode strings (which may be malformed UTF-16)\n     * at code point boundaries.\n     * That is, each edge of a match must not be in the middle of a surrogate pair.\n     * @param s       The string to match in.\n     * @param start   The start index of s.\n     * @param limit   The limit of the subsequence of s being spanned.\n     * @param t       The substring to be matched in s.\n     * @param tlength The length of t.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int spanOne(final UnicodeSet set, CharSequence s, int start, int length)",
    "returnType" : "int",
    "comment" : "\n     * Does the set contain the next code point?\n     * If so, return its length; otherwise return its negative length.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int spanOneBack(final UnicodeSet set, CharSequence s, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean needsStringSpanUTF16()", "public boolean contains(int c)", "private void addToSpanNotSet(int c)", "public int span(CharSequence s, int start, SpanCondition spanCondition)", "private synchronized int spanWithStrings(CharSequence s, int start, int spanLimit, SpanCondition spanCondition)", "public int spanAndCount(CharSequence s, int start, SpanCondition spanCondition, OutputInt outCount)", "private synchronized int spanContainedAndCount(CharSequence s, int start, OutputInt outCount)", "public synchronized int spanBack(CharSequence s, int length, SpanCondition spanCondition)", "private int spanNot(CharSequence s, int start, OutputInt outCount)", "private int spanNotBack(CharSequence s, int length)", " static short makeSpanLengthByte(int spanLength)", "private static boolean matches16(CharSequence s, int start, final String t, int length)", " static boolean matches16CPB(CharSequence s, int start, int limit, final String t, int tlength)", " static int spanOne(final UnicodeSet set, CharSequence s, int start, int length)", " static int spanOneBack(final UnicodeSet set, CharSequence s, int length)" ],
  "variableNames" : [ "WITH_COUNT", "FWD", "BACK", "CONTAINED", "NOT_CONTAINED", "ALL", "FWD_UTF16_CONTAINED", "FWD_UTF16_NOT_CONTAINED", "BACK_UTF16_CONTAINED", "BACK_UTF16_NOT_CONTAINED", "ALL_CP_CONTAINED", "LONG_SPAN", "spanSet", "spanNotSet", "strings", "spanLengths", "maxLength16", "someRelevant", "all", "offsets" ]
}