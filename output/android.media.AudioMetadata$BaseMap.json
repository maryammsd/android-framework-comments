{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioMetadata.java",
  "packageName" : "android.media",
  "className" : "BaseMap",
  "comment" : "\n     * @hide\n     *\n     * AudioMetadata is based on interfaces in order to allow multiple inheritance\n     * and maximum flexibility in implementation.\n     *\n     * Here, we provide a simple implementation of {@link Map} interface;\n     * Note that the Keys are not specific to this Map implementation.\n     *\n     * It is possible to require the keys to be of a certain class\n     * before allowing a set or get operation.\n     ",
  "links" : [ "java.util.HashMap" ],
  "variables" : [ {
    "name" : "mHashMap",
    "type" : "HashMap<Pair<String, Class<?>>, Pair<Key<?>, Object>>",
    "comment" : "\n         * Implementation specific.\n         *\n         * We use a HashMap to back the AudioMetadata BaseMap object.\n         * This is not locked, so concurrent reads are permitted if all threads\n         * have a ReadMap; this is risky with a Map.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean containsKey(@NonNull Key<T> key)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioMetadataMap dup()",
    "returnType" : "AudioMetadataMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T get(@NonNull Key<T> key)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Key<?>> keySet()",
    "returnType" : "Set<Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T remove(@NonNull Key<T> key)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T set(@NonNull Key<T> key, @NonNull T value)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if the object is a BaseMap and the content from two BaseMap are the same.\n         * Note: Need to override the equals functions of Key<T> for HashMap comparison.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Pair<String, Class<?>> pairFromKey(@NonNull Key<T> key)",
    "returnType" : "Pair<String, Class<?>>",
    "comment" : "\n         * Implementation specific.\n         *\n         * To store the value in the HashMap we need to convert the Key interface\n         * to a hashcode() / equals() compliant Pair.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static Object getValueFromValuePair(@Nullable Pair<Key<?>, Object> valuePair)",
    "returnType" : "Object",
    "comment" : "\n         * Implementation specific.\n         *\n         * We store in a Pair (valuePair) the key along with the Object value.\n         * This helper returns the Object value from the value pair.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean containsKey(@NonNull Key<T> key)", "public AudioMetadataMap dup()", "public T get(@NonNull Key<T> key)", "public Set<Key<?>> keySet()", "public T remove(@NonNull Key<T> key)", "public T set(@NonNull Key<T> key, @NonNull T value)", "public int size()", "public boolean equals(Object obj)", "public int hashCode()", "private static Pair<String, Class<?>> pairFromKey(@NonNull Key<T> key)", "private static Object getValueFromValuePair(@Nullable Pair<Key<?>, Object> valuePair)" ],
  "variableNames" : [ "mHashMap" ]
}