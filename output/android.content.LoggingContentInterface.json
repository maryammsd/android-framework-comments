{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/LoggingContentInterface.java",
  "packageName" : "android.content",
  "className" : "LoggingContentInterface",
  "comment" : "\n * Instance of {@link ContentInterface} that logs all inputs and outputs while\n * delegating to another {@link ContentInterface}.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "tag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "delegate",
    "type" : "ContentInterface",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable CancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getType(@NonNull Uri uri) throws RemoteException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getStreamTypes(@NonNull Uri uri, @NonNull String mimeTypeFilter) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri canonicalize(@NonNull Uri uri) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri uncanonicalize(@NonNull Uri uri) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(@NonNull Uri uri, @Nullable Bundle args, @Nullable CancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(@NonNull Uri uri, int uid, @Intent.AccessUriMode int modeFlags) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(@NonNull Uri uri, @Nullable ContentValues initialValues, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int bulkInsert(@NonNull Uri uri, @NonNull ContentValues[] initialValues) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int delete(@NonNull Uri uri, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openAssetFile(@NonNull Uri uri, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentProviderResult[] applyBatch(@NonNull String authority, @NonNull ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(@NonNull String authority, @NonNull String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "tag", "delegate" ],
  "methodNames" : [ "public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable CancellationSignal cancellationSignal) throws RemoteException", "public String getType(@NonNull Uri uri) throws RemoteException", "public String[] getStreamTypes(@NonNull Uri uri, @NonNull String mimeTypeFilter) throws RemoteException", "public Uri canonicalize(@NonNull Uri uri) throws RemoteException", "public Uri uncanonicalize(@NonNull Uri uri) throws RemoteException", "public boolean refresh(@NonNull Uri uri, @Nullable Bundle args, @Nullable CancellationSignal cancellationSignal) throws RemoteException", "public int checkUriPermission(@NonNull Uri uri, int uid, @Intent.AccessUriMode int modeFlags) throws RemoteException", "public Uri insert(@NonNull Uri uri, @Nullable ContentValues initialValues, @Nullable Bundle extras) throws RemoteException", "public int bulkInsert(@NonNull Uri uri, @NonNull ContentValues[] initialValues) throws RemoteException", "public int delete(@NonNull Uri uri, @Nullable Bundle extras) throws RemoteException", "public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable Bundle extras) throws RemoteException", "public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public AssetFileDescriptor openAssetFile(@NonNull Uri uri, @NonNull String mode, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws RemoteException, FileNotFoundException", "public ContentProviderResult[] applyBatch(@NonNull String authority, @NonNull ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException", "public Bundle call(@NonNull String authority, @NonNull String method, @Nullable String arg, @Nullable Bundle extras) throws RemoteException" ]
}