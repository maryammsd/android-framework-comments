{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/DualPivotQuicksort.java",
  "packageName" : "java.util",
  "className" : "DualPivotQuicksort",
  "comment" : "\n * This class implements powerful and fully optimized versions, both\n * sequential and parallel, of the Dual-Pivot Quicksort algorithm by\n * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm\n * offers O(n log(n)) performance on all data sets, and is typically\n * faster than traditional (one-pivot) Quicksort implementations.\n *\n * There are also additional algorithms, invoked from the Dual-Pivot\n * Quicksort, such as mixed insertion sort, merging of runs and heap\n * sort, counting sort and parallel merge sort.\n *\n * @author Vladimir Yaroslavskiy\n * @author Jon Bentley\n * @author Josh Bloch\n * @author Doug Lea\n *\n * @version 2018.08.18\n *\n * @since 1.7 * 14\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_MIXED_INSERTION_SORT_SIZE",
    "type" : "int",
    "comment" : "\n     * Max array size to use mixed insertion sort.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_INSERTION_SORT_SIZE",
    "type" : "int",
    "comment" : "\n     * Max array size to use insertion sort.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_PARALLEL_SORT_SIZE",
    "type" : "int",
    "comment" : "\n     * Min array size to perform sorting in parallel.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_TRY_MERGE_SIZE",
    "type" : "int",
    "comment" : "\n     * Min array size to try merging of runs.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_FIRST_RUN_SIZE",
    "type" : "int",
    "comment" : "\n     * Min size of the first run to continue with scanning.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_FIRST_RUNS_FACTOR",
    "type" : "int",
    "comment" : "\n     * Min factor for the first runs to continue scanning.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_RUN_CAPACITY",
    "type" : "int",
    "comment" : "\n     * Max capacity of the index array for tracking runs.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_RUN_COUNT",
    "type" : "int",
    "comment" : "\n     * Min number of runs, required by parallel merging.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_PARALLEL_MERGE_PARTS_SIZE",
    "type" : "int",
    "comment" : "\n     * Min array size to use parallel merging of parts.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_BYTE_COUNTING_SORT_SIZE",
    "type" : "int",
    "comment" : "\n     * Min size of a byte array to use counting sort.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_SHORT_OR_CHAR_COUNTING_SORT_SIZE",
    "type" : "int",
    "comment" : "\n     * Min size of a short or char array to use counting sort.\n     ",
    "links" : [ ]
  }, {
    "name" : "DELTA",
    "type" : "int",
    "comment" : "\n     * Threshold of mixed insertion sort is incremented by this value.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_RECURSION_DEPTH",
    "type" : "int",
    "comment" : "\n     * Max recursive partitioning depth before using heap sort.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_BYTE_VALUES",
    "type" : "int",
    "comment" : "\n     * The number of distinct byte values.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_BYTE_INDEX",
    "type" : "int",
    "comment" : "\n     * Max index of byte counter.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_CHAR_VALUES",
    "type" : "int",
    "comment" : "\n     * The number of distinct char values.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_SHORT_VALUES",
    "type" : "int",
    "comment" : "\n     * The number of distinct short values.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_SHORT_INDEX",
    "type" : "int",
    "comment" : "\n     * Max index of short counter.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int getDepth(int parallelism, int size)",
    "returnType" : "int",
    "comment" : "\n     * Calculates the double depth of parallel merging.\n     * Depth is negative, if tasks split before sorting.\n     *\n     * @param parallelism the parallelism level\n     * @param size the target size\n     * @return the depth of parallel merging\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(int[] a, int parallelism, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using parallel merge\n     * sort and/or Dual-Pivot Quicksort.\n     *\n     * To balance the faster splitting and parallelism of merge sort\n     * with the faster element partitioning of Quicksort, ranges are\n     * subdivided in tiers such that, if there is enough parallelism,\n     * the four-way parallel merge is started, still ensuring enough\n     * parallelism to process the partitions.\n     *\n     * @param a the array to be sorted\n     * @param parallelism the parallelism level\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(Sorter sorter, int[] a, int bits, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified array using the Dual-Pivot Quicksort and/or\n     * other sorts in special-cases, possibly with parallel partitions.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param bits the combination of recursion depth and bit flag, where\n     *        the right bit \"0\" indicates that array is the leftmost part\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mixedInsertionSort(int[] a, int low, int end, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using mixed insertion sort.\n     *\n     * Mixed insertion sort is combination of simple insertion sort,\n     * pin insertion sort and pair insertion sort.\n     *\n     * In the context of Dual-Pivot Quicksort, the pivot element\n     * from the left part plays the role of sentinel, because it\n     * is less than any elements from the given part. Therefore,\n     * expensive check of the left range can be skipped on each\n     * iteration unless it is the leftmost call.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param end the index of the last element for simple insertion sort\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(int[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void heapSort(int[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using heap sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void pushDown(int[] a, int p, int value, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Pushes specified element down during heap sort.\n     *\n     * @param a the given array\n     * @param p the start index\n     * @param value the given element\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean tryMergeRuns(Sorter sorter, int[] a, int low, int size)",
    "returnType" : "boolean",
    "comment" : "\n     * Tries to sort the specified range of the array.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param low the index of the first element to be sorted\n     * @param size the array size\n     * @return true if finally sorted, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] mergeRuns(int[] a, int[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)",
    "returnType" : "int[]",
    "comment" : "\n     * Merges the specified runs.\n     *\n     * @param a the source array\n     * @param b the temporary buffer used in merging\n     * @param offset the start index in the source, inclusive\n     * @param aim specifies merging: to source ( > 0), buffer ( < 0) or any ( == 0)\n     * @param parallel indicates whether merging is performed in parallel\n     * @param run the start indexes of the runs, inclusive\n     * @param lo the start index of the first run, inclusive\n     * @param hi the start index of the last run, inclusive\n     * @return the destination where runs are merged\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mergeParts(Merger merger, int[] dst, int k, int[] a1, int lo1, int hi1, int[] a2, int lo2, int hi2)",
    "returnType" : "void",
    "comment" : "\n     * Merges the sorted parts.\n     *\n     * @param merger parallel context\n     * @param dst the destination where parts are merged\n     * @param k the start index of the destination, inclusive\n     * @param a1 the first part\n     * @param lo1 the start index of the first part, inclusive\n     * @param hi1 the end index of the first part, exclusive\n     * @param a2 the second part\n     * @param lo2 the start index of the second part, inclusive\n     * @param hi2 the end index of the second part, exclusive\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(long[] a, int parallelism, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using parallel merge\n     * sort and/or Dual-Pivot Quicksort.\n     *\n     * To balance the faster splitting and parallelism of merge sort\n     * with the faster element partitioning of Quicksort, ranges are\n     * subdivided in tiers such that, if there is enough parallelism,\n     * the four-way parallel merge is started, still ensuring enough\n     * parallelism to process the partitions.\n     *\n     * @param a the array to be sorted\n     * @param parallelism the parallelism level\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(Sorter sorter, long[] a, int bits, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified array using the Dual-Pivot Quicksort and/or\n     * other sorts in special-cases, possibly with parallel partitions.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param bits the combination of recursion depth and bit flag, where\n     *        the right bit \"0\" indicates that array is the leftmost part\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mixedInsertionSort(long[] a, int low, int end, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using mixed insertion sort.\n     *\n     * Mixed insertion sort is combination of simple insertion sort,\n     * pin insertion sort and pair insertion sort.\n     *\n     * In the context of Dual-Pivot Quicksort, the pivot element\n     * from the left part plays the role of sentinel, because it\n     * is less than any elements from the given part. Therefore,\n     * expensive check of the left range can be skipped on each\n     * iteration unless it is the leftmost call.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param end the index of the last element for simple insertion sort\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(long[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void heapSort(long[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using heap sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void pushDown(long[] a, int p, long value, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Pushes specified element down during heap sort.\n     *\n     * @param a the given array\n     * @param p the start index\n     * @param value the given element\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean tryMergeRuns(Sorter sorter, long[] a, int low, int size)",
    "returnType" : "boolean",
    "comment" : "\n     * Tries to sort the specified range of the array.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param low the index of the first element to be sorted\n     * @param size the array size\n     * @return true if finally sorted, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] mergeRuns(long[] a, long[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)",
    "returnType" : "long[]",
    "comment" : "\n     * Merges the specified runs.\n     *\n     * @param a the source array\n     * @param b the temporary buffer used in merging\n     * @param offset the start index in the source, inclusive\n     * @param aim specifies merging: to source ( > 0), buffer ( < 0) or any ( == 0)\n     * @param parallel indicates whether merging is performed in parallel\n     * @param run the start indexes of the runs, inclusive\n     * @param lo the start index of the first run, inclusive\n     * @param hi the start index of the last run, inclusive\n     * @return the destination where runs are merged\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mergeParts(Merger merger, long[] dst, int k, long[] a1, int lo1, int hi1, long[] a2, int lo2, int hi2)",
    "returnType" : "void",
    "comment" : "\n     * Merges the sorted parts.\n     *\n     * @param merger parallel context\n     * @param dst the destination where parts are merged\n     * @param k the start index of the destination, inclusive\n     * @param a1 the first part\n     * @param lo1 the start index of the first part, inclusive\n     * @param hi1 the end index of the first part, exclusive\n     * @param a2 the second part\n     * @param lo2 the start index of the second part, inclusive\n     * @param hi2 the end index of the second part, exclusive\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(byte[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using\n     * counting sort or insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(byte[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void countingSort(byte[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using counting sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(char[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using\n     * counting sort or Dual-Pivot Quicksort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(char[] a, int bits, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified array using the Dual-Pivot Quicksort and/or\n     * other sorts in special-cases, possibly with parallel partitions.\n     *\n     * @param a the array to be sorted\n     * @param bits the combination of recursion depth and bit flag, where\n     *        the right bit \"0\" indicates that array is the leftmost part\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(char[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void countingSort(char[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using counting sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(short[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using\n     * counting sort or Dual-Pivot Quicksort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(short[] a, int bits, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified array using the Dual-Pivot Quicksort and/or\n     * other sorts in special-cases, possibly with parallel partitions.\n     *\n     * @param a the array to be sorted\n     * @param bits the combination of recursion depth and bit flag, where\n     *        the right bit \"0\" indicates that array is the leftmost part\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(short[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void countingSort(short[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using counting sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(float[] a, int parallelism, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using parallel merge\n     * sort and/or Dual-Pivot Quicksort.\n     *\n     * To balance the faster splitting and parallelism of merge sort\n     * with the faster element partitioning of Quicksort, ranges are\n     * subdivided in tiers such that, if there is enough parallelism,\n     * the four-way parallel merge is started, still ensuring enough\n     * parallelism to process the partitions.\n     *\n     * @param a the array to be sorted\n     * @param parallelism the parallelism level\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(Sorter sorter, float[] a, int bits, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified array using the Dual-Pivot Quicksort and/or\n     * other sorts in special-cases, possibly with parallel partitions.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param bits the combination of recursion depth and bit flag, where\n     *        the right bit \"0\" indicates that array is the leftmost part\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mixedInsertionSort(float[] a, int low, int end, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using mixed insertion sort.\n     *\n     * Mixed insertion sort is combination of simple insertion sort,\n     * pin insertion sort and pair insertion sort.\n     *\n     * In the context of Dual-Pivot Quicksort, the pivot element\n     * from the left part plays the role of sentinel, because it\n     * is less than any elements from the given part. Therefore,\n     * expensive check of the left range can be skipped on each\n     * iteration unless it is the leftmost call.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param end the index of the last element for simple insertion sort\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(float[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void heapSort(float[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using heap sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void pushDown(float[] a, int p, float value, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Pushes specified element down during heap sort.\n     *\n     * @param a the given array\n     * @param p the start index\n     * @param value the given element\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean tryMergeRuns(Sorter sorter, float[] a, int low, int size)",
    "returnType" : "boolean",
    "comment" : "\n     * Tries to sort the specified range of the array.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param low the index of the first element to be sorted\n     * @param size the array size\n     * @return true if finally sorted, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float[] mergeRuns(float[] a, float[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)",
    "returnType" : "float[]",
    "comment" : "\n     * Merges the specified runs.\n     *\n     * @param a the source array\n     * @param b the temporary buffer used in merging\n     * @param offset the start index in the source, inclusive\n     * @param aim specifies merging: to source ( > 0), buffer ( < 0) or any ( == 0)\n     * @param parallel indicates whether merging is performed in parallel\n     * @param run the start indexes of the runs, inclusive\n     * @param lo the start index of the first run, inclusive\n     * @param hi the start index of the last run, inclusive\n     * @return the destination where runs are merged\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mergeParts(Merger merger, float[] dst, int k, float[] a1, int lo1, int hi1, float[] a2, int lo2, int hi2)",
    "returnType" : "void",
    "comment" : "\n     * Merges the sorted parts.\n     *\n     * @param merger parallel context\n     * @param dst the destination where parts are merged\n     * @param k the start index of the destination, inclusive\n     * @param a1 the first part\n     * @param lo1 the start index of the first part, inclusive\n     * @param hi1 the end index of the first part, exclusive\n     * @param a2 the second part\n     * @param lo2 the start index of the second part, inclusive\n     * @param hi2 the end index of the second part, exclusive\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(double[] a, int parallelism, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using parallel merge\n     * sort and/or Dual-Pivot Quicksort.\n     *\n     * To balance the faster splitting and parallelism of merge sort\n     * with the faster element partitioning of Quicksort, ranges are\n     * subdivided in tiers such that, if there is enough parallelism,\n     * the four-way parallel merge is started, still ensuring enough\n     * parallelism to process the partitions.\n     *\n     * @param a the array to be sorted\n     * @param parallelism the parallelism level\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : " static void sort(Sorter sorter, double[] a, int bits, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified array using the Dual-Pivot Quicksort and/or\n     * other sorts in special-cases, possibly with parallel partitions.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param bits the combination of recursion depth and bit flag, where\n     *        the right bit \"0\" indicates that array is the leftmost part\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mixedInsertionSort(double[] a, int low, int end, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using mixed insertion sort.\n     *\n     * Mixed insertion sort is combination of simple insertion sort,\n     * pin insertion sort and pair insertion sort.\n     *\n     * In the context of Dual-Pivot Quicksort, the pivot element\n     * from the left part plays the role of sentinel, because it\n     * is less than any elements from the given part. Therefore,\n     * expensive check of the left range can be skipped on each\n     * iteration unless it is the leftmost call.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param end the index of the last element for simple insertion sort\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertionSort(double[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using insertion sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void heapSort(double[] a, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the specified range of the array using heap sort.\n     *\n     * @param a the array to be sorted\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void pushDown(double[] a, int p, double value, int low, int high)",
    "returnType" : "void",
    "comment" : "\n     * Pushes specified element down during heap sort.\n     *\n     * @param a the given array\n     * @param p the start index\n     * @param value the given element\n     * @param low the index of the first element, inclusive, to be sorted\n     * @param high the index of the last element, exclusive, to be sorted\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean tryMergeRuns(Sorter sorter, double[] a, int low, int size)",
    "returnType" : "boolean",
    "comment" : "\n     * Tries to sort the specified range of the array.\n     *\n     * @param sorter parallel context\n     * @param a the array to be sorted\n     * @param low the index of the first element to be sorted\n     * @param size the array size\n     * @return true if finally sorted, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static double[] mergeRuns(double[] a, double[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)",
    "returnType" : "double[]",
    "comment" : "\n     * Merges the specified runs.\n     *\n     * @param a the source array\n     * @param b the temporary buffer used in merging\n     * @param offset the start index in the source, inclusive\n     * @param aim specifies merging: to source ( > 0), buffer ( < 0) or any ( == 0)\n     * @param parallel indicates whether merging is performed in parallel\n     * @param run the start indexes of the runs, inclusive\n     * @param lo the start index of the first run, inclusive\n     * @param hi the start index of the last run, inclusive\n     * @return the destination where runs are merged\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void mergeParts(Merger merger, double[] dst, int k, double[] a1, int lo1, int hi1, double[] a2, int lo2, int hi2)",
    "returnType" : "void",
    "comment" : "\n     * Merges the sorted parts.\n     *\n     * @param merger parallel context\n     * @param dst the destination where parts are merged\n     * @param k the start index of the destination, inclusive\n     * @param a1 the first part\n     * @param lo1 the start index of the first part, inclusive\n     * @param hi1 the end index of the first part, exclusive\n     * @param a2 the second part\n     * @param lo2 the start index of the second part, inclusive\n     * @param hi2 the end index of the second part, exclusive\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int getDepth(int parallelism, int size)", " static void sort(int[] a, int parallelism, int low, int high)", " static void sort(Sorter sorter, int[] a, int bits, int low, int high)", "private static void mixedInsertionSort(int[] a, int low, int end, int high)", "private static void insertionSort(int[] a, int low, int high)", "private static void heapSort(int[] a, int low, int high)", "private static void pushDown(int[] a, int p, int value, int low, int high)", "private static boolean tryMergeRuns(Sorter sorter, int[] a, int low, int size)", "private static int[] mergeRuns(int[] a, int[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)", "private static void mergeParts(Merger merger, int[] dst, int k, int[] a1, int lo1, int hi1, int[] a2, int lo2, int hi2)", " static void sort(long[] a, int parallelism, int low, int high)", " static void sort(Sorter sorter, long[] a, int bits, int low, int high)", "private static void mixedInsertionSort(long[] a, int low, int end, int high)", "private static void insertionSort(long[] a, int low, int high)", "private static void heapSort(long[] a, int low, int high)", "private static void pushDown(long[] a, int p, long value, int low, int high)", "private static boolean tryMergeRuns(Sorter sorter, long[] a, int low, int size)", "private static long[] mergeRuns(long[] a, long[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)", "private static void mergeParts(Merger merger, long[] dst, int k, long[] a1, int lo1, int hi1, long[] a2, int lo2, int hi2)", " static void sort(byte[] a, int low, int high)", "private static void insertionSort(byte[] a, int low, int high)", "private static void countingSort(byte[] a, int low, int high)", " static void sort(char[] a, int low, int high)", " static void sort(char[] a, int bits, int low, int high)", "private static void insertionSort(char[] a, int low, int high)", "private static void countingSort(char[] a, int low, int high)", " static void sort(short[] a, int low, int high)", " static void sort(short[] a, int bits, int low, int high)", "private static void insertionSort(short[] a, int low, int high)", "private static void countingSort(short[] a, int low, int high)", " static void sort(float[] a, int parallelism, int low, int high)", " static void sort(Sorter sorter, float[] a, int bits, int low, int high)", "private static void mixedInsertionSort(float[] a, int low, int end, int high)", "private static void insertionSort(float[] a, int low, int high)", "private static void heapSort(float[] a, int low, int high)", "private static void pushDown(float[] a, int p, float value, int low, int high)", "private static boolean tryMergeRuns(Sorter sorter, float[] a, int low, int size)", "private static float[] mergeRuns(float[] a, float[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)", "private static void mergeParts(Merger merger, float[] dst, int k, float[] a1, int lo1, int hi1, float[] a2, int lo2, int hi2)", " static void sort(double[] a, int parallelism, int low, int high)", " static void sort(Sorter sorter, double[] a, int bits, int low, int high)", "private static void mixedInsertionSort(double[] a, int low, int end, int high)", "private static void insertionSort(double[] a, int low, int high)", "private static void heapSort(double[] a, int low, int high)", "private static void pushDown(double[] a, int p, double value, int low, int high)", "private static boolean tryMergeRuns(Sorter sorter, double[] a, int low, int size)", "private static double[] mergeRuns(double[] a, double[] b, int offset, int aim, boolean parallel, int[] run, int lo, int hi)", "private static void mergeParts(Merger merger, double[] dst, int k, double[] a1, int lo1, int hi1, double[] a2, int lo2, int hi2)" ],
  "variableNames" : [ "MAX_MIXED_INSERTION_SORT_SIZE", "MAX_INSERTION_SORT_SIZE", "MIN_PARALLEL_SORT_SIZE", "MIN_TRY_MERGE_SIZE", "MIN_FIRST_RUN_SIZE", "MIN_FIRST_RUNS_FACTOR", "MAX_RUN_CAPACITY", "MIN_RUN_COUNT", "MIN_PARALLEL_MERGE_PARTS_SIZE", "MIN_BYTE_COUNTING_SORT_SIZE", "MIN_SHORT_OR_CHAR_COUNTING_SORT_SIZE", "DELTA", "MAX_RECURSION_DEPTH", "NUM_BYTE_VALUES", "MAX_BYTE_INDEX", "NUM_CHAR_VALUES", "NUM_SHORT_VALUES", "MAX_SHORT_INDEX" ]
}