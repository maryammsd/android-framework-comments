{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/LoaderManager.java",
  "packageName" : "android.app",
  "className" : "LoaderManager",
  "comment" : "\n * Interface associated with an {@link Activity} or {@link Fragment} for managing\n * one or more {@link android.content.Loader} instances associated with it.  This\n * helps an application manage longer-running operations in conjunction with the\n * Activity or Fragment lifecycle; the most common use of this is with a\n * {@link android.content.CursorLoader}, however applications are free to write\n * their own loaders for loading other types of data.\n *\n * While the LoaderManager API was introduced in\n * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, a version of the API\n * at is also available for use on older platforms through\n * {@link androidx.fragment.app.FragmentActivity}.  See the blog post\n * <a href=\"http://android-developers.blogspot.com/2011/03/fragments-for-all.html\">\n * Fragments For All</a> for more details.\n *\n * <p>As an example, here is the full implementation of a {@link Fragment}\n * that displays a {@link android.widget.ListView} containing the results of\n * a query against the contacts content provider.  It uses a\n * {@link android.content.CursorLoader} to manage the query on the provider.\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/LoaderCursor.java\n *      fragment_cursor}\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using loaders, read the\n * <a href=\"{@docRoot}guide/topics/fundamentals/loaders.html\">Loaders</a> developer guide.</p>\n * </div>\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.loader.app.LoaderManager}\n ",
  "links" : [ "android.app.Fragment", "android.os.Build.VERSION_CODES#HONEYCOMB", "android.content.Loader", "android.widget.ListView", "androidx.loader.app.LoaderManager", "android.app.Activity", "android.content.CursorLoader", "androidx.fragment.app.FragmentActivity" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Loader<D> initLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)",
    "returnType" : "Loader<D>",
    "comment" : "\n     * Ensures a loader is initialized and active.  If the loader doesn't\n     * already exist, one is created and (if the activity/fragment is currently\n     * started) starts the loader.  Otherwise the last created\n     * loader is re-used.\n     *\n     * <p>In either case, the given callback is associated with the loader, and\n     * will be called as the loader state changes.  If at the point of call\n     * the caller is in its started state, and the requested loader\n     * already exists and has generated its data, then\n     * callback {@link LoaderCallbacks#onLoadFinished} will\n     * be called immediately (inside of this function), so you must be prepared\n     * for this to happen.\n     *\n     * @param id A unique identifier for this loader.  Can be whatever you want.\n     * Identifiers are scoped to a particular LoaderManager instance.\n     * @param args Optional arguments to supply to the loader at construction.\n     * If a loader already exists (a new one does not need to be created), this\n     * parameter will be ignored and the last arguments continue to be used.\n     * @param callback Interface the LoaderManager will call to report about\n     * changes in the state of the loader.  Required.\n     ",
    "links" : [ "#onLoadFinished" ]
  }, {
    "name" : "public abstract Loader<D> restartLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)",
    "returnType" : "Loader<D>",
    "comment" : "\n     * Starts a new or restarts an existing {@link android.content.Loader} in\n     * this manager, registers the callbacks to it,\n     * and (if the activity/fragment is currently started) starts loading it.\n     * If a loader with the same id has previously been\n     * started it will automatically be destroyed when the new loader completes\n     * its work. The callback will be delivered before the old loader\n     * is destroyed.\n     *\n     * @param id A unique identifier for this loader.  Can be whatever you want.\n     * Identifiers are scoped to a particular LoaderManager instance.\n     * @param args Optional arguments to supply to the loader at construction.\n     * @param callback Interface the LoaderManager will call to report about\n     * changes in the state of the loader.  Required.\n     ",
    "links" : [ "android.content.Loader" ]
  }, {
    "name" : "public abstract void destroyLoader(int id)",
    "returnType" : "void",
    "comment" : "\n     * Stops and removes the loader with the given ID.  If this loader\n     * had previously reported data to the client through\n     * {@link LoaderCallbacks#onLoadFinished(Loader, Object)}, a call\n     * will be made to {@link LoaderCallbacks#onLoaderReset(Loader)}.\n     ",
    "links" : [ "#onLoaderReset(Loader)", "#onLoadFinished(Loader" ]
  }, {
    "name" : "public abstract Loader<D> getLoader(int id)",
    "returnType" : "Loader<D>",
    "comment" : "\n     * Return the Loader with the given id or null if no matching Loader\n     * is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Print the LoaderManager's state into the given stream.\n     *\n     * @param prefix Text to print at the front of each line.\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param writer A PrintWriter to which the dump is to be set.\n     * @param args Additional arguments to the dump request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enableDebugLogging(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the framework's internal loader manager debugging\n     * logs are turned on.  If enabled, you will see output in logcat as\n     * the framework performs loader operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FragmentHostCallback getFragmentHostCallback()",
    "returnType" : "FragmentHostCallback",
    "comment" : " @hide for internal testing only ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Loader<D> initLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)", "public abstract Loader<D> restartLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)", "public abstract void destroyLoader(int id)", "public abstract Loader<D> getLoader(int id)", "public abstract void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", "public static void enableDebugLogging(boolean enabled)", "public FragmentHostCallback getFragmentHostCallback()" ],
  "variableNames" : [ ]
}