{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/math/MutableBigInteger.java",
  "packageName" : "java.math",
  "className" : "MutableBigInteger",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "value",
    "type" : "int[]",
    "comment" : "\n     * Holds the magnitude of this MutableBigInteger in big endian order.\n     * The magnitude may start at an offset into the value array, and it may\n     * end before the length of the value array.\n     ",
    "links" : [ ]
  }, {
    "name" : "intLen",
    "type" : "int",
    "comment" : "\n     * The number of ints of the value array that are currently used\n     * to hold the magnitude of this MutableBigInteger. The magnitude starts\n     * at an offset and offset + intLen may be less than value.length.\n     ",
    "links" : [ ]
  }, {
    "name" : "offset",
    "type" : "int",
    "comment" : "\n     * The offset into the value array where the magnitude of this\n     * MutableBigInteger begins.\n     ",
    "links" : [ ]
  }, {
    "name" : "ONE",
    "type" : "MutableBigInteger",
    "comment" : "\n     * MutableBigInteger with one element value array with the value 1. Used by\n     * BigDecimal divideAndRound to increment the quotient. Use this constant\n     * only when the method is not going to modify this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "KNUTH_POW2_THRESH_LEN",
    "type" : "int",
    "comment" : "\n     * The minimum {@code intLen} for cancelling powers of two before\n     * dividing.\n     * If the number of ints is less than this threshold,\n     * {@code divideKnuth} does not eliminate common powers of two from\n     * the dividend and divisor.\n     ",
    "links" : [ ]
  }, {
    "name" : "KNUTH_POW2_THRESH_ZEROS",
    "type" : "int",
    "comment" : "\n     * The minimum number of trailing zero ints for cancelling powers of two\n     * before dividing.\n     * If the dividend and divisor don't share at least this many zero ints\n     * at the end, {@code divideKnuth} does not eliminate common powers\n     * of two from the dividend and divisor.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ones(int n)",
    "returnType" : "void",
    "comment" : "\n     * Makes this number an {@code n}-int number all of whose bits are ones.\n     * Used by Burnikel-Ziegler division.\n     * @param n number of ints in the {@code value} array\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] getMagnitudeArray()",
    "returnType" : "int[]",
    "comment" : "\n     * Internal helper method to return the magnitude array. The caller is not\n     * supposed to modify the returned array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long toLong()",
    "returnType" : "long",
    "comment" : "\n     * Convert this MutableBigInteger to a long value. The caller has to make\n     * sure this MutableBigInteger can be fit into long.\n     ",
    "links" : [ ]
  }, {
    "name" : " BigInteger toBigInteger(int sign)",
    "returnType" : "BigInteger",
    "comment" : "\n     * Convert this MutableBigInteger to a BigInteger object.\n     ",
    "links" : [ ]
  }, {
    "name" : " BigInteger toBigInteger()",
    "returnType" : "BigInteger",
    "comment" : "\n     * Converts this number to a nonnegative {@code BigInteger}.\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal toBigDecimal(int sign, int scale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert this MutableBigInteger to BigDecimal object with the specified sign\n     * and scale.\n     ",
    "links" : [ ]
  }, {
    "name" : " long toCompactValue(int sign)",
    "returnType" : "long",
    "comment" : "\n     * This is for internal use in converting from a MutableBigInteger\n     * object into a long value given a specified sign.\n     * returns INFLATED if value is not fit into long\n     ",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear out a MutableBigInteger for reuse.\n     ",
    "links" : [ ]
  }, {
    "name" : " void reset()",
    "returnType" : "void",
    "comment" : "\n     * Set a MutableBigInteger to zero, removing its offset.\n     ",
    "links" : [ ]
  }, {
    "name" : " final int compare(MutableBigInteger b)",
    "returnType" : "int",
    "comment" : "\n     * Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1\n     * as this MutableBigInteger is numerically less than, equal to, or\n     * greater than {@code b}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int compareShifted(MutableBigInteger b, int ints)",
    "returnType" : "int",
    "comment" : "\n     * Returns a value equal to what {@code b.leftShift(32*ints); return compare(b);}\n     * would return, but doesn't change the value of {@code b}.\n     ",
    "links" : [ ]
  }, {
    "name" : " final int compareHalf(MutableBigInteger b)",
    "returnType" : "int",
    "comment" : "\n     * Compare this against half of a MutableBigInteger object (Needed for\n     * remainder tests).\n     * Assumes no leading unnecessary zeros, which holds for results\n     * from divide().\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int getLowestSetBit()",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the lowest set bit in this MutableBigInteger. If the\n     * magnitude of this MutableBigInteger is zero, -1 is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int getInt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Return the int in use in this MutableBigInteger at the specified\n     * index. This method is not used because it is not inlined on all\n     * platforms.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final long getLong(int index)",
    "returnType" : "long",
    "comment" : "\n     * Return a long which is equal to the unsigned value of the int in\n     * use in this MutableBigInteger at the specified index. This method is\n     * not used because it is not inlined on all platforms.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void normalize()",
    "returnType" : "void",
    "comment" : "\n     * Ensure that the MutableBigInteger is in normal form, specifically\n     * making sure that there are no leading zeros, and that if the\n     * magnitude is zero, then intLen is zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void ensureCapacity(int len)",
    "returnType" : "void",
    "comment" : "\n     * If this MutableBigInteger cannot hold len words, increase the size\n     * of the value array to len words.\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] toIntArray()",
    "returnType" : "int[]",
    "comment" : "\n     * Convert this MutableBigInteger into an int array with no leading\n     * zeros, of a length that is equal to this MutableBigInteger's intLen.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setInt(int index, int val)",
    "returnType" : "void",
    "comment" : "\n     * Sets the int at index+offset in this MutableBigInteger to val.\n     * This does not get inlined on all platforms so it is not used\n     * as often as originally intended.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setValue(int[] val, int length)",
    "returnType" : "void",
    "comment" : "\n     * Sets this MutableBigInteger's value array to the specified array.\n     * The intLen is set to the specified length.\n     ",
    "links" : [ ]
  }, {
    "name" : " void copyValue(MutableBigInteger src)",
    "returnType" : "void",
    "comment" : "\n     * Sets this MutableBigInteger's value array to a copy of the specified\n     * array. The intLen is set to the length of the new array.\n     ",
    "links" : [ ]
  }, {
    "name" : " void copyValue(int[] val)",
    "returnType" : "void",
    "comment" : "\n     * Sets this MutableBigInteger's value array to a copy of the specified\n     * array. The intLen is set to the length of the specified array.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isOne()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this MutableBigInteger has a value of one.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isZero()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this MutableBigInteger has a value of zero.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEven()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this MutableBigInteger is even.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isOdd()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this MutableBigInteger is odd.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isNormal()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff this MutableBigInteger is in normal form. A\n     * MutableBigInteger is in normal form if it has no leading zeros\n     * after the offset, and intLen + offset <= value.length.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a String representation of this MutableBigInteger in radix 10.\n     ",
    "links" : [ ]
  }, {
    "name" : " void safeRightShift(int n)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #rightShift(int)} but {@code n} can be greater than the length of the number.\n     ",
    "links" : [ "#rightShift(int)" ]
  }, {
    "name" : " void rightShift(int n)",
    "returnType" : "void",
    "comment" : "\n     * Right shift this MutableBigInteger n bits. The MutableBigInteger is left\n     * in normal form.\n     ",
    "links" : [ ]
  }, {
    "name" : " void safeLeftShift(int n)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #leftShift(int)} but {@code n} can be zero.\n     ",
    "links" : [ "#leftShift(int)" ]
  }, {
    "name" : " void leftShift(int n)",
    "returnType" : "void",
    "comment" : "\n     * Left shift this MutableBigInteger n bits.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int divadd(int[] a, int[] result, int offset)",
    "returnType" : "int",
    "comment" : "\n     * A primitive used for division. This method adds in one multiple of the\n     * divisor a back to the dividend result at a specified offset. It is used\n     * when qhat was estimated too large, and must be adjusted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int mulsub(int[] q, int[] a, int x, int len, int offset)",
    "returnType" : "int",
    "comment" : "\n     * This method is used for division. It multiplies an n word input a by one\n     * word input x, and subtracts the n word product from q. This is needed\n     * when subtracting qhat*divisor from dividend.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int mulsubBorrow(int[] q, int[] a, int x, int len, int offset)",
    "returnType" : "int",
    "comment" : "\n     * The method is the same as mulsun, except the fact that q array is not\n     * updated, the only result of the method is borrow flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void primitiveRightShift(int n)",
    "returnType" : "void",
    "comment" : "\n     * Right shift this MutableBigInteger n bits, where n is\n     * less than 32.\n     * Assumes that intLen > 0, n > 0 for speed\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void primitiveLeftShift(int n)",
    "returnType" : "void",
    "comment" : "\n     * Left shift this MutableBigInteger n bits, where n is\n     * less than 32.\n     * Assumes that intLen > 0, n > 0 for speed\n     ",
    "links" : [ ]
  }, {
    "name" : "private BigInteger getLower(int n)",
    "returnType" : "BigInteger",
    "comment" : "\n     * Returns a {@code BigInteger} equal to the {@code n}\n     * low ints of this number.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void keepLower(int n)",
    "returnType" : "void",
    "comment" : "\n     * Discards all ints whose index is greater than {@code n}.\n     ",
    "links" : [ ]
  }, {
    "name" : " void add(MutableBigInteger addend)",
    "returnType" : "void",
    "comment" : "\n     * Adds the contents of two MutableBigInteger objects.The result\n     * is placed within this MutableBigInteger.\n     * The contents of the addend are not changed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addShifted(MutableBigInteger addend, int n)",
    "returnType" : "void",
    "comment" : "\n     * Adds the value of {@code addend} shifted {@code n} ints to the left.\n     * Has the same effect as {@code addend.leftShift(32*ints); add(addend);}\n     * but doesn't change the value of {@code addend}.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addDisjoint(MutableBigInteger addend, int n)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #addShifted(MutableBigInteger, int)} but {@code this.intLen} must\n     * not be greater than {@code n}. In other words, concatenates {@code this}\n     * and {@code addend}.\n     ",
    "links" : [ "#addShifted(MutableBigInteger" ]
  }, {
    "name" : " void addLower(MutableBigInteger addend, int n)",
    "returnType" : "void",
    "comment" : "\n     * Adds the low {@code n} ints of {@code addend}.\n     ",
    "links" : [ ]
  }, {
    "name" : " int subtract(MutableBigInteger b)",
    "returnType" : "int",
    "comment" : "\n     * Subtracts the smaller of this and b from the larger and places the\n     * result into this MutableBigInteger.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int difference(MutableBigInteger b)",
    "returnType" : "int",
    "comment" : "\n     * Subtracts the smaller of a and b from the larger and places the result\n     * into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no\n     * operation was performed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void multiply(MutableBigInteger y, MutableBigInteger z)",
    "returnType" : "void",
    "comment" : "\n     * Multiply the contents of two MutableBigInteger objects. The result is\n     * placed into MutableBigInteger z. The contents of y are not changed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void mul(int y, MutableBigInteger z)",
    "returnType" : "void",
    "comment" : "\n     * Multiply the contents of this MutableBigInteger by the word y. The\n     * result is placed into z.\n     ",
    "links" : [ ]
  }, {
    "name" : " int divideOneWord(int divisor, MutableBigInteger quotient)",
    "returnType" : "int",
    "comment" : "\n     * This method is used for division of an n word dividend by a one word\n     * divisor. The quotient is placed into quotient. The one word divisor is\n     * specified by divisor.\n     *\n     * @return the remainder of the division is returned.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger divide(MutableBigInteger b, MutableBigInteger quotient)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculates the quotient of this div b and places the quotient in the\n     * provided MutableBigInteger objects and the remainder object is returned.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger divide(MutableBigInteger b, MutableBigInteger quotient, boolean needRemainder)",
    "returnType" : "MutableBigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger divideKnuth(MutableBigInteger b, MutableBigInteger quotient)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * @see #divideKnuth(MutableBigInteger, MutableBigInteger, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger divideKnuth(MutableBigInteger b, MutableBigInteger quotient, boolean needRemainder)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculates the quotient of this div b and places the quotient in the\n     * provided MutableBigInteger objects and the remainder object is returned.\n     *\n     * Uses Algorithm D from Knuth TAOCP Vol. 2, 3rd edition, section 4.3.1.\n     * Many optimizations to that algorithm have been adapted from the Colin\n     * Plumb C library.\n     * It special cases one word divisors for speed. The content of b is not\n     * changed.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger divideAndRemainderBurnikelZiegler(MutableBigInteger b, MutableBigInteger quotient)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Computes {@code this/b} and {@code this%b} using the\n     * <a href=\"http://cr.yp.to/bib/1998/burnikel.ps\"> Burnikel-Ziegler algorithm</a>.\n     * This method implements algorithm 3 from pg. 9 of the Burnikel-Ziegler paper.\n     * The parameter beta was chosen to b 2<sup>32</sup> so almost all shifts are\n     * multiples of 32 bits.<br/>\n     * {@code this} and {@code b} must be nonnegative.\n     * @param b the divisor\n     * @param quotient output parameter for {@code this/b}\n     * @return the remainder\n     ",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger divide2n1n(MutableBigInteger b, MutableBigInteger quotient)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * This method implements algorithm 1 from pg. 4 of the Burnikel-Ziegler paper.\n     * It divides a 2n-digit number by a n-digit number.<br/>\n     * The parameter beta is 2<sup>32</sup> so all shifts are multiples of 32 bits.\n     * <br/>\n     * {@code this} must be a nonnegative number such that {@code this.bitLength() <= 2*b.bitLength()}\n     * @param b a positive number such that {@code b.bitLength()} is even\n     * @param quotient output parameter for {@code this/b}\n     * @return {@code this%b}\n     ",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger divide3n2n(MutableBigInteger b, MutableBigInteger quotient)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * This method implements algorithm 2 from pg. 5 of the Burnikel-Ziegler paper.\n     * It divides a 3n-digit number by a 2n-digit number.<br/>\n     * The parameter beta is 2<sup>32</sup> so all shifts are multiples of 32 bits.<br/>\n     * <br/>\n     * {@code this} must be a nonnegative number such that {@code 2*this.bitLength() <= 3*b.bitLength()}\n     * @param quotient output parameter for {@code this/b}\n     * @return {@code this%b}\n     ",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger getBlock(int index, int numBlocks, int blockLength)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Returns a {@code MutableBigInteger} containing {@code blockLength} ints from\n     * {@code this} number, starting at {@code index*blockLength}.<br/>\n     * Used by Burnikel-Ziegler division.\n     * @param index the block index\n     * @param numBlocks the total number of blocks in {@code this} number\n     * @param blockLength length of one block in units of 32 bits\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : " long bitLength()",
    "returnType" : "long",
    "comment" : " @see BigInteger#bitLength() ",
    "links" : [ ]
  }, {
    "name" : " long divide(long v, MutableBigInteger quotient)",
    "returnType" : "long",
    "comment" : "\n     * Internally used  to calculate the quotient of this div v and places the\n     * quotient in the provided MutableBigInteger object and the remainder is\n     * returned.\n     *\n     * @return the remainder of the division will be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void copyAndShift(int[] src, int srcFrom, int srcLen, int[] dst, int dstFrom, int shift)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger divideMagnitude(MutableBigInteger div, MutableBigInteger quotient, boolean needRemainder)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Divide this MutableBigInteger by the divisor.\n     * The quotient will be placed into the provided quotient object &\n     * the remainder object is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger divideLongMagnitude(long ldivisor, MutableBigInteger quotient)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Divide this MutableBigInteger by the divisor represented by positive long\n     * value. The quotient will be placed into the provided quotient object &\n     * the remainder object is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int divaddLong(int dh, int dl, int[] result, int offset)",
    "returnType" : "int",
    "comment" : "\n     * A primitive used for division by long.\n     * Specialized version of the method divadd.\n     * dh is a high part of the divisor, dl is a low part\n     ",
    "links" : [ ]
  }, {
    "name" : "private int mulsubLong(int[] q, int dh, int dl, int x, int offset)",
    "returnType" : "int",
    "comment" : "\n     * This method is used for division by long.\n     * Specialized version of the method sulsub.\n     * dh is a high part of the divisor, dl is a low part\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean unsignedLongCompare(long one, long two)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two longs as if they were unsigned.\n     * Returns true iff one is bigger than two.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long divWord(long n, int d)",
    "returnType" : "long",
    "comment" : "\n     * This method divides a long quantity by an int to estimate\n     * qhat for two multi precision numbers. It is used when\n     * the signed value of n is less than zero.\n     * Returns long value where high 32 bits contain remainder value and\n     * low 32 bits contain quotient value.\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger sqrt()",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculate the integer square root {@code floor(sqrt(this))} where\n     * {@code sqrt(.)} denotes the mathematical square root. The contents of\n     * {@code this} are <b>not</b> changed. The value of {@code this} is assumed\n     * to be non-negative.\n     *\n     * @implNote The implementation is based on the material in Henry S. Warren,\n     * Jr., <i>Hacker's Delight (2nd ed.)</i> (Addison Wesley, 2013), 279-282.\n     *\n     * @throws ArithmeticException if the value returned by {@code bitLength()}\n     * overflows the range of {@code int}.\n     * @return the integer square root of {@code this}\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger hybridGCD(MutableBigInteger b)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculate GCD of this and b. This and b are changed by the computation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger binaryGCD(MutableBigInteger v)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculate GCD of this and v.\n     * Assumes that this and v are not zero.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int binaryGcd(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Calculate GCD of a and b interpreted as unsigned integers.\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger mutableModInverse(MutableBigInteger p)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Returns the modInverse of this mod p. This and p are not affected by\n     * the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger modInverseMP2(int k)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculate the multiplicative inverse of this mod 2^k.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int inverseMod32(int val)",
    "returnType" : "int",
    "comment" : "\n     * Returns the multiplicative inverse of val mod 2^32.  Assumes val is odd.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long inverseMod64(long val)",
    "returnType" : "long",
    "comment" : "\n     * Returns the multiplicative inverse of val mod 2^64.  Assumes val is odd.\n     ",
    "links" : [ ]
  }, {
    "name" : " static MutableBigInteger modInverseBP2(MutableBigInteger mod, int k)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.\n     ",
    "links" : [ ]
  }, {
    "name" : "private MutableBigInteger modInverse(MutableBigInteger mod)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Calculate the multiplicative inverse of this modulo mod, where the mod\n     * argument is odd.  This and mod are not changed by the calculation.\n     *\n     * This method implements an algorithm due to Richard Schroeppel, that uses\n     * the same intermediate representation as Montgomery Reduction\n     * (\"Montgomery Form\").  The algorithm is described in an unpublished\n     * manuscript entitled \"Fast Modular Reciprocals.\"\n     ",
    "links" : [ ]
  }, {
    "name" : " static MutableBigInteger fixup(MutableBigInteger c, MutableBigInteger p, int k)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * The Fixup Algorithm\n     * Calculates X such that X = C * 2^(-k) (mod P)\n     * Assumes C<P and P is odd.\n     ",
    "links" : [ ]
  }, {
    "name" : " MutableBigInteger euclidModInverse(int k)",
    "returnType" : "MutableBigInteger",
    "comment" : "\n     * Uses the extended Euclidean algorithm to compute the modInverse of base\n     * mod a modulus that is a power of 2. The modulus is 2^k.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ones(int n)", "private int[] getMagnitudeArray()", "private long toLong()", " BigInteger toBigInteger(int sign)", " BigInteger toBigInteger()", " BigDecimal toBigDecimal(int sign, int scale)", " long toCompactValue(int sign)", " void clear()", " void reset()", " final int compare(MutableBigInteger b)", "private int compareShifted(MutableBigInteger b, int ints)", " final int compareHalf(MutableBigInteger b)", "private final int getLowestSetBit()", "private final int getInt(int index)", "private final long getLong(int index)", " final void normalize()", "private final void ensureCapacity(int len)", " int[] toIntArray()", " void setInt(int index, int val)", " void setValue(int[] val, int length)", " void copyValue(MutableBigInteger src)", " void copyValue(int[] val)", " boolean isOne()", " boolean isZero()", " boolean isEven()", " boolean isOdd()", " boolean isNormal()", "public String toString()", " void safeRightShift(int n)", " void rightShift(int n)", " void safeLeftShift(int n)", " void leftShift(int n)", "private int divadd(int[] a, int[] result, int offset)", "private int mulsub(int[] q, int[] a, int x, int len, int offset)", "private int mulsubBorrow(int[] q, int[] a, int x, int len, int offset)", "private final void primitiveRightShift(int n)", "private final void primitiveLeftShift(int n)", "private BigInteger getLower(int n)", "private void keepLower(int n)", " void add(MutableBigInteger addend)", " void addShifted(MutableBigInteger addend, int n)", " void addDisjoint(MutableBigInteger addend, int n)", " void addLower(MutableBigInteger addend, int n)", " int subtract(MutableBigInteger b)", "private int difference(MutableBigInteger b)", " void multiply(MutableBigInteger y, MutableBigInteger z)", " void mul(int y, MutableBigInteger z)", " int divideOneWord(int divisor, MutableBigInteger quotient)", " MutableBigInteger divide(MutableBigInteger b, MutableBigInteger quotient)", " MutableBigInteger divide(MutableBigInteger b, MutableBigInteger quotient, boolean needRemainder)", " MutableBigInteger divideKnuth(MutableBigInteger b, MutableBigInteger quotient)", " MutableBigInteger divideKnuth(MutableBigInteger b, MutableBigInteger quotient, boolean needRemainder)", " MutableBigInteger divideAndRemainderBurnikelZiegler(MutableBigInteger b, MutableBigInteger quotient)", "private MutableBigInteger divide2n1n(MutableBigInteger b, MutableBigInteger quotient)", "private MutableBigInteger divide3n2n(MutableBigInteger b, MutableBigInteger quotient)", "private MutableBigInteger getBlock(int index, int numBlocks, int blockLength)", " long bitLength()", " long divide(long v, MutableBigInteger quotient)", "private static void copyAndShift(int[] src, int srcFrom, int srcLen, int[] dst, int dstFrom, int shift)", "private MutableBigInteger divideMagnitude(MutableBigInteger div, MutableBigInteger quotient, boolean needRemainder)", "private MutableBigInteger divideLongMagnitude(long ldivisor, MutableBigInteger quotient)", "private int divaddLong(int dh, int dl, int[] result, int offset)", "private int mulsubLong(int[] q, int dh, int dl, int x, int offset)", "private boolean unsignedLongCompare(long one, long two)", " static long divWord(long n, int d)", " MutableBigInteger sqrt()", " MutableBigInteger hybridGCD(MutableBigInteger b)", "private MutableBigInteger binaryGCD(MutableBigInteger v)", " static int binaryGcd(int a, int b)", " MutableBigInteger mutableModInverse(MutableBigInteger p)", " MutableBigInteger modInverseMP2(int k)", " static int inverseMod32(int val)", " static long inverseMod64(long val)", " static MutableBigInteger modInverseBP2(MutableBigInteger mod, int k)", "private MutableBigInteger modInverse(MutableBigInteger mod)", " static MutableBigInteger fixup(MutableBigInteger c, MutableBigInteger p, int k)", " MutableBigInteger euclidModInverse(int k)" ],
  "variableNames" : [ "value", "intLen", "offset", "ONE", "KNUTH_POW2_THRESH_LEN", "KNUTH_POW2_THRESH_ZEROS" ]
}