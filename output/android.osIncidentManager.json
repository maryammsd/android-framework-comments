{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/IncidentManager.java",
  "packageName" : "android.os",
  "className" : "IncidentManager",
  "comment" : "\n * Class to take an incident report.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "URI_SCHEME",
    "type" : "String",
    "comment" : "\n     * Authority for pending report id urls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_AUTHORITY",
    "type" : "String",
    "comment" : "\n     * Authority for pending report id urls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_PATH",
    "type" : "String",
    "comment" : "\n     * Authority for pending report id urls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_PARAM_ID",
    "type" : "String",
    "comment" : "\n     * Query parameter for the uris for the pending report id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_PARAM_REPORT_ID",
    "type" : "String",
    "comment" : "\n     * Query parameter for the uris for the incident report id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_PARAM_CALLING_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Query parameter for the uris for the pending report id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_PARAM_TIMESTAMP",
    "type" : "String",
    "comment" : "\n     * Query parameter for the uris for the pending report id, in wall clock\n     * ({@link System.currentTimeMillis()}) timebase.\n     *\n     * @hide\n     ",
    "links" : [ "System.currentTimeMillis" ]
  }, {
    "name" : "URI_PARAM_FLAGS",
    "type" : "String",
    "comment" : "\n     * Query parameter for the uris for the pending report id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "URI_PARAM_RECEIVER_CLASS",
    "type" : "String",
    "comment" : "\n     * Query parameter for the uris for the pending report id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CONFIRMATION_DIALOG",
    "type" : "int",
    "comment" : "\n     * Do the confirmation with a dialog instead of the default, which is a notification.\n     * It is possible for the dialog to be downgraded to a notification in some cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_POLICY_LOCAL",
    "type" : "int",
    "comment" : "\n     * Flag marking fields and incident reports than can be taken\n     * off the device only via adb.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_POLICY_EXPLICIT",
    "type" : "int",
    "comment" : "\n     * Flag marking fields and incident reports than can be taken\n     * off the device with contemporary consent.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVACY_POLICY_AUTO",
    "type" : "int",
    "comment" : "\n     * Flag marking fields and incident reports than can be taken\n     * off the device with prior consent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncidentService",
    "type" : "IIncidentManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompanionService",
    "type" : "IIncidentCompanion",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reportIncident(IncidentReportArgs args)",
    "returnType" : "void",
    "comment" : "\n     * Take an incident report.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestAuthorization(int callingUid, String callingPackage, int flags, AuthListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Request authorization of an incident report.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestAuthorization(int callingUid, @NonNull String callingPackage, int flags, @NonNull @CallbackExecutor Executor executor, @NonNull AuthListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Request authorization of an incident report.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancelAuthorization(AuthListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Cancel a previous request for incident report authorization.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<PendingReport> getPendingReports()",
    "returnType" : "List<PendingReport>",
    "comment" : "\n     * Get incident (and bug) reports that are pending approval to share.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void approveReport(Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Allow this report to be shared with the given app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void denyReport(Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Do not allow this report to be shared with the given app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerSection(int id, @NonNull String name, @NonNull @CallbackExecutor Executor executor, @NonNull DumpCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to dump an extended incident report section with the given id and name,\n     * running on the supplied executor.\n     *\n     * Calling <code>registerSection</code> with a duplicate id will override previous registration.\n     * However, the request must come from the same calling uid.\n     *\n     * @param id       the ID of the extended section. It should be unique system-wide, and be\n     *                 different from IDs of all existing section in\n     *                 frameworks/base/core/proto/android/os/incident.proto.\n     *                 Also see incident.proto for other rules about the ID.\n     * @param name     the name to display in logs and/or stderr when taking an incident report\n     *                 containing this section, mainly for debugging purpose\n     * @param executor the executor used to run the callback\n     * @param callback the callback function to be invoked when an incident report with all sections\n     *                 or sections matching the given id is being taken\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSection(int id)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an extended section dump function. The section must be previously registered with\n     * {@link #registerSection(int, String, DumpCallback)} by the same calling uid.\n     ",
    "links" : [ "#registerSection" ]
  }, {
    "name" : "public List<Uri> getIncidentReportList(String receiverClass)",
    "returnType" : "List<Uri>",
    "comment" : "\n     * Get the incident reports that are available for upload for the supplied\n     * broadcast recevier.\n     *\n     * @param receiverClass Class name of broadcast receiver in this package that\n     *   was registered to retrieve reports.\n     *\n     * @return A list of {@link Uri Uris} that are awaiting upload.\n     ",
    "links" : [ "Uri" ]
  }, {
    "name" : "public IncidentReport getIncidentReport(Uri uri)",
    "returnType" : "IncidentReport",
    "comment" : "\n     * Get the incident report with the given URI id.\n     *\n     * @param uri Identifier of the incident report.\n     *\n     * @return an IncidentReport object, or null if the incident report has been\n     *  expired from disk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteIncidentReports(Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Delete the incident report with the given URI id.\n     *\n     * @param uri Identifier of the incident report. Pass null to delete all\n     *              incident reports owned by this application.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reportIncidentInternal(IncidentReportArgs args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IIncidentManager getIIncidentManagerLocked() throws RemoteException",
    "returnType" : "IIncidentManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IIncidentCompanion getCompanionServiceLocked() throws RemoteException",
    "returnType" : "IIncidentCompanion",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "URI_SCHEME", "URI_AUTHORITY", "URI_PATH", "URI_PARAM_ID", "URI_PARAM_REPORT_ID", "URI_PARAM_CALLING_PACKAGE", "URI_PARAM_TIMESTAMP", "URI_PARAM_FLAGS", "URI_PARAM_RECEIVER_CLASS", "FLAG_CONFIRMATION_DIALOG", "PRIVACY_POLICY_LOCAL", "PRIVACY_POLICY_EXPLICIT", "PRIVACY_POLICY_AUTO", "mContext", "mLock", "mIncidentService", "mCompanionService" ],
  "methodNames" : [ "public void reportIncident(IncidentReportArgs args)", "public void requestAuthorization(int callingUid, String callingPackage, int flags, AuthListener listener)", "public void requestAuthorization(int callingUid, @NonNull String callingPackage, int flags, @NonNull @CallbackExecutor Executor executor, @NonNull AuthListener listener)", "public void cancelAuthorization(AuthListener listener)", "public List<PendingReport> getPendingReports()", "public void approveReport(Uri uri)", "public void denyReport(Uri uri)", "public void registerSection(int id, @NonNull String name, @NonNull @CallbackExecutor Executor executor, @NonNull DumpCallback callback)", "public void unregisterSection(int id)", "public List<Uri> getIncidentReportList(String receiverClass)", "public IncidentReport getIncidentReport(Uri uri)", "public void deleteIncidentReports(Uri uri)", "private void reportIncidentInternal(IncidentReportArgs args)", "private IIncidentManager getIIncidentManagerLocked() throws RemoteException", "private IIncidentCompanion getCompanionServiceLocked() throws RemoteException" ]
}