{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/acl/AclEntry.java",
  "packageName" : "java.security.acl",
  "className" : "AclEntry",
  "comment" : "\n * This is the interface used for representing one entry in an Access\n * Control List (ACL).<p>\n *\n * An ACL can be thought of as a data structure with multiple ACL entry\n * objects. Each ACL entry object contains a set of permissions associated\n * with a particular principal. (A principal represents an entity such as\n * an individual user or a group). Additionally, each ACL entry is specified\n * as being either positive or negative. If positive, the permissions are\n * to be granted to the associated principal. If negative, the permissions\n * are to be denied. Each principal can have at most one positive ACL entry\n * and one negative entry; that is, multiple positive or negative ACL\n * entries are not allowed for any principal.\n *\n * Note: ACL entries are by default positive. An entry becomes a\n * negative entry only if the\n * {@link #setNegativePermissions() setNegativePermissions}\n * method is called on it.\n *\n * @see java.security.acl.Acl\n *\n * @author      Satish Dharmaraj\n * @since 1.1\n *\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by {@code java.security.Policy}\n *     and related classes since 1.2.\n ",
  "links" : [ "#setNegativePermissions()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean setPrincipal(Principal user)",
    "returnType" : "boolean",
    "comment" : "\n     * Specifies the principal for which permissions are granted or denied\n     * by this ACL entry. If a principal was already set for this ACL entry,\n     * false is returned, otherwise true is returned.\n     *\n     * @param user the principal to be set for this entry.\n     *\n     * @return true if the principal is set, false if there was\n     * already a principal set for this entry.\n     *\n     * @see #getPrincipal\n     ",
    "links" : [ ]
  }, {
    "name" : "public Principal getPrincipal()",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the principal for which permissions are granted or denied by\n     * this ACL entry. Returns null if there is no principal set for this\n     * entry yet.\n     *\n     * @return the principal associated with this entry.\n     *\n     * @see #setPrincipal\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNegativePermissions()",
    "returnType" : "void",
    "comment" : "\n     * Sets this ACL entry to be a negative one. That is, the associated\n     * principal (e.g., a user or a group) will be denied the permission set\n     * specified in the entry.\n     *\n     * Note: ACL entries are by default positive. An entry becomes a\n     * negative entry only if this {@code setNegativePermissions}\n     * method is called on it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNegative()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this is a negative ACL entry (one denying the\n     * associated principal the set of permissions in the entry), false\n     * otherwise.\n     *\n     * @return true if this is a negative ACL entry, false if it's not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addPermission(Permission permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified permission to this ACL entry. Note: An entry can\n     * have multiple permissions.\n     *\n     * @param permission the permission to be associated with\n     * the principal in this entry.\n     *\n     * @return true if the permission was added, false if the\n     * permission was already part of this entry's permission set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removePermission(Permission permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified permission from this ACL entry.\n     *\n     * @param permission the permission to be removed from this entry.\n     *\n     * @return true if the permission is removed, false if the\n     * permission was not part of this entry's permission set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean checkPermission(Permission permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified permission is part of the\n     * permission set in this entry.\n     *\n     * @param permission the permission to be checked for.\n     *\n     * @return true if the permission is part of the\n     * permission set in this entry, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<Permission> permissions()",
    "returnType" : "Enumeration<Permission>",
    "comment" : "\n     * Returns an enumeration of the permissions in this ACL entry.\n     *\n     * @return an enumeration of the permissions in this ACL entry.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the contents of this ACL entry.\n     *\n     * @return a string representation of the contents.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clones this ACL entry.\n     *\n     * @return a clone of this ACL entry.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean setPrincipal(Principal user)", "public Principal getPrincipal()", "public void setNegativePermissions()", "public boolean isNegative()", "public boolean addPermission(Permission permission)", "public boolean removePermission(Permission permission)", "public boolean checkPermission(Permission permission)", "public Enumeration<Permission> permissions()", "public String toString()", "public Object clone()" ],
  "variableNames" : [ ]
}