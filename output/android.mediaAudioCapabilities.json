{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaCodecInfo.java",
  "packageName" : "android.media",
  "className" : "AudioCapabilities",
  "comment" : "\n     * A class that supports querying the audio capabilities of a codec.\n     ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "CodecCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitrateRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRates",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRateRanges",
    "type" : "Range<Integer>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxInputChannelCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_INPUT_CHANNEL_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Range<Integer> getBitrateRange()",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported bitrates in bits/second.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedSampleRates()",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the array of supported sample rates if the codec\n         * supports only discrete values.  Otherwise, it returns\n         * {@code null}.  The array is sorted in ascending order.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer>[] getSupportedSampleRateRanges()",
    "returnType" : "Range<Integer>[]",
    "comment" : "\n         * Returns the array of supported sample rate ranges.  The\n         * array is sorted in ascending order, and the ranges are\n         * distinct.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxInputChannelCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum number of input channels supported.  The codec\n         * supports any number of channels between 1 and this maximum value.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static AudioCapabilities create(MediaFormat info, CodecCapabilities parent)",
    "returnType" : "AudioCapabilities",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void init(MediaFormat info, CodecCapabilities parent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initWithPlatformLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean supports(Integer sampleRate, Integer inputChannels)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSampleRateSupported(int sampleRate)",
    "returnType" : "boolean",
    "comment" : "\n         * Query whether the sample rate is supported by the codec.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void limitSampleRates(int[] rates)",
    "returnType" : "void",
    "comment" : " modifies rates ",
    "links" : [ ]
  }, {
    "name" : "private void createDiscreteSampleRates()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void limitSampleRates(Range<Integer>[] rateRanges)",
    "returnType" : "void",
    "comment" : " modifies rateRanges ",
    "links" : [ ]
  }, {
    "name" : "private void applyLevelLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyLimits(int maxInputChannels, Range<Integer> bitRates)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseFromInfo(MediaFormat info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getDefaultFormat(MediaFormat format)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsFormat(MediaFormat format)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mParent", "mBitrateRange", "mSampleRates", "mSampleRateRanges", "mMaxInputChannelCount", "MAX_INPUT_CHANNEL_COUNT" ],
  "methodNames" : [ "public Range<Integer> getBitrateRange()", "public int[] getSupportedSampleRates()", "public Range<Integer>[] getSupportedSampleRateRanges()", "public int getMaxInputChannelCount()", "public static AudioCapabilities create(MediaFormat info, CodecCapabilities parent)", "private void init(MediaFormat info, CodecCapabilities parent)", "private void initWithPlatformLimits()", "private boolean supports(Integer sampleRate, Integer inputChannels)", "public boolean isSampleRateSupported(int sampleRate)", "private void limitSampleRates(int[] rates)", "private void createDiscreteSampleRates()", "private void limitSampleRates(Range<Integer>[] rateRanges)", "private void applyLevelLimits()", "private void applyLimits(int maxInputChannels, Range<Integer> bitRates)", "private void parseFromInfo(MediaFormat info)", "public void getDefaultFormat(MediaFormat format)", "public boolean supportsFormat(MediaFormat format)" ]
}