{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SlidingDrawer.java",
  "packageName" : "android.widget",
  "className" : "SlidingDrawer",
  "comment" : "\n * SlidingDrawer hides content out of the screen and allows the user to drag a handle\n * to bring the content on screen. SlidingDrawer can be used vertically or horizontally.\n *\n * A special widget composed of two children views: the handle, that the users drags,\n * and the content, attached to the handle and dragged with it.\n *\n * SlidingDrawer should be used as an overlay inside layouts. This means SlidingDrawer\n * should only be used inside of a FrameLayout or a RelativeLayout for instance. The\n * size of the SlidingDrawer defines how much space the content will occupy once slid\n * out so SlidingDrawer should usually use match_parent for both its dimensions.\n *\n * Inside an XML layout, SlidingDrawer must define the id of the handle and of the\n * content:\n *\n * <pre class=\"prettyprint\">\n * &lt;SlidingDrawer\n *     android:id=\"@+id/drawer\"\n *     android:layout_width=\"match_parent\"\n *     android:layout_height=\"match_parent\"\n *\n *     android:handle=\"@+id/handle\"\n *     android:content=\"@+id/content\"&gt;\n *\n *     &lt;ImageView\n *         android:id=\"@id/handle\"\n *         android:layout_width=\"88dip\"\n *         android:layout_height=\"44dip\" /&gt;\n *\n *     &lt;GridView\n *         android:id=\"@id/content\"\n *         android:layout_width=\"match_parent\"\n *         android:layout_height=\"match_parent\" /&gt;\n *\n * &lt;/SlidingDrawer&gt;\n * </pre>\n *\n * @attr ref android.R.styleable#SlidingDrawer_content\n * @attr ref android.R.styleable#SlidingDrawer_handle\n * @attr ref android.R.styleable#SlidingDrawer_topOffset\n * @attr ref android.R.styleable#SlidingDrawer_bottomOffset\n * @attr ref android.R.styleable#SlidingDrawer_orientation\n * @attr ref android.R.styleable#SlidingDrawer_allowSingleTap\n * @attr ref android.R.styleable#SlidingDrawer_animateOnClick\n * \n * @deprecated This class is not supported anymore. It is recommended you\n * base your own implementation on the source code for the Android Open\n * Source Project if you must use it in your application.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ORIENTATION_HORIZONTAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_VERTICAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAP_THRESHOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_TAP_VELOCITY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_MINOR_VELOCITY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_MAJOR_VELOCITY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_ACCELERATION",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_UNITS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_FRAME_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXPANDED_FULL_OPEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLLAPSED_FULL_CLOSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandleId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandle",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContent",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidate",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTracking",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityTracker",
    "type" : "VelocityTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVertical",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpanded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottomOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandleHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandleWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDrawerOpenListener",
    "type" : "OnDrawerOpenListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDrawerCloseListener",
    "type" : "OnDrawerCloseListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDrawerScrollListener",
    "type" : "OnDrawerScrollListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatedAcceleration",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatedVelocity",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationPosition",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationLastTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentAnimationTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchDelta",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimating",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowSingleTap",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimateOnClick",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTapThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumTapVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumMinorVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumMajorVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumAcceleration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityUnits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSlidingRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onInterceptTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void animateClose(int position, boolean notifyScrollListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void animateOpen(int position, boolean notifyScrollListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performFling(int position, float velocity, boolean always, boolean notifyScrollListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void prepareTracking(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void moveHandle(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void prepareContent()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopTracking(boolean notifyScrollListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void incrementAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toggle()",
    "returnType" : "void",
    "comment" : "\n     * Toggles the drawer open and close. Takes effect immediately.\n     *\n     * @see #open()\n     * @see #close()\n     * @see #animateClose()\n     * @see #animateOpen()\n     * @see #animateToggle()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void animateToggle()",
    "returnType" : "void",
    "comment" : "\n     * Toggles the drawer open and close with an animation.\n     *\n     * @see #open()\n     * @see #close()\n     * @see #animateClose()\n     * @see #animateOpen()\n     * @see #toggle()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void open()",
    "returnType" : "void",
    "comment" : "\n     * Opens the drawer immediately.\n     *\n     * @see #toggle()\n     * @see #close()\n     * @see #animateOpen()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the drawer immediately.\n     *\n     * @see #toggle()\n     * @see #open()\n     * @see #animateClose()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void animateClose()",
    "returnType" : "void",
    "comment" : "\n     * Closes the drawer with an animation.\n     *\n     * @see #close()\n     * @see #open()\n     * @see #animateOpen()\n     * @see #animateToggle()\n     * @see #toggle()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void animateOpen()",
    "returnType" : "void",
    "comment" : "\n     * Opens the drawer with an animation.\n     *\n     * @see #close()\n     * @see #open()\n     * @see #animateClose()\n     * @see #animateToggle()\n     * @see #toggle()\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void closeDrawer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void openDrawer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnDrawerOpenListener(OnDrawerOpenListener onDrawerOpenListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener that receives a notification when the drawer becomes open.\n     *\n     * @param onDrawerOpenListener The listener to be notified when the drawer is opened.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDrawerCloseListener(OnDrawerCloseListener onDrawerCloseListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener that receives a notification when the drawer becomes close.\n     *\n     * @param onDrawerCloseListener The listener to be notified when the drawer is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDrawerScrollListener(OnDrawerScrollListener onDrawerScrollListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener that receives a notification when the drawer starts or ends\n     * a scroll. A fling is considered as a scroll. A fling will also trigger a\n     * drawer opened or drawer closed event.\n     *\n     * @param onDrawerScrollListener The listener to be notified when scrolling\n     *        starts or stops.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getHandle()",
    "returnType" : "View",
    "comment" : "\n     * Returns the handle of the drawer.\n     *\n     * @return The View reprenseting the handle of the drawer, identified by\n     *         the \"handle\" id in XML.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getContent()",
    "returnType" : "View",
    "comment" : "\n     * Returns the content of the drawer.\n     *\n     * @return The View reprenseting the content of the drawer, identified by\n     *         the \"content\" id in XML.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unlock()",
    "returnType" : "void",
    "comment" : "\n     * Unlocks the SlidingDrawer so that touch events are processed.\n     *\n     * @see #lock() \n     ",
    "links" : [ ]
  }, {
    "name" : "public void lock()",
    "returnType" : "void",
    "comment" : "\n     * Locks the SlidingDrawer so that touch events are ignores.\n     *\n     * @see #unlock()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpened()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the drawer is currently fully opened.\n     *\n     * @return True if the drawer is opened, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMoving()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the drawer is scrolling or flinging.\n     *\n     * @return True if the drawer is scroller or flinging, false otherwise.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onFinishInflate()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void dispatchDraw(Canvas canvas)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "public boolean onInterceptTouchEvent(MotionEvent event)", "public boolean onTouchEvent(MotionEvent event)", "private void animateClose(int position, boolean notifyScrollListener)", "private void animateOpen(int position, boolean notifyScrollListener)", "private void performFling(int position, float velocity, boolean always, boolean notifyScrollListener)", "private void prepareTracking(int position)", "private void moveHandle(int position)", "private void prepareContent()", "private void stopTracking(boolean notifyScrollListener)", "private void doAnimation()", "private void incrementAnimation()", "public void toggle()", "public void animateToggle()", "public void open()", "public void close()", "public void animateClose()", "public void animateOpen()", "public CharSequence getAccessibilityClassName()", "private void closeDrawer()", "private void openDrawer()", "public void setOnDrawerOpenListener(OnDrawerOpenListener onDrawerOpenListener)", "public void setOnDrawerCloseListener(OnDrawerCloseListener onDrawerCloseListener)", "public void setOnDrawerScrollListener(OnDrawerScrollListener onDrawerScrollListener)", "public View getHandle()", "public View getContent()", "public void unlock()", "public void lock()", "public boolean isOpened()", "public boolean isMoving()" ],
  "variableNames" : [ "ORIENTATION_HORIZONTAL", "ORIENTATION_VERTICAL", "TAP_THRESHOLD", "MAXIMUM_TAP_VELOCITY", "MAXIMUM_MINOR_VELOCITY", "MAXIMUM_MAJOR_VELOCITY", "MAXIMUM_ACCELERATION", "VELOCITY_UNITS", "ANIMATION_FRAME_DURATION", "EXPANDED_FULL_OPEN", "COLLAPSED_FULL_CLOSED", "mHandleId", "mContentId", "mHandle", "mContent", "mFrame", "mInvalidate", "mTracking", "mLocked", "mVelocityTracker", "mVertical", "mExpanded", "mBottomOffset", "mTopOffset", "mHandleHeight", "mHandleWidth", "mOnDrawerOpenListener", "mOnDrawerCloseListener", "mOnDrawerScrollListener", "mAnimatedAcceleration", "mAnimatedVelocity", "mAnimationPosition", "mAnimationLastTime", "mCurrentAnimationTime", "mTouchDelta", "mAnimating", "mAllowSingleTap", "mAnimateOnClick", "mTapThreshold", "mMaximumTapVelocity", "mMaximumMinorVelocity", "mMaximumMajorVelocity", "mMaximumAcceleration", "mVelocityUnits", "mSlidingRunnable" ]
}