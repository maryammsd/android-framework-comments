{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/DisplayAddress.java",
  "packageName" : "android.view",
  "className" : "Physical",
  "comment" : "\n     * Address for a physically connected display.\n     *\n     * A {@link Physical} address is represented by a 64-bit identifier combining the port and model\n     * of a display. The port, located in the least significant byte, uniquely identifies a physical\n     * connector on the device for display output like eDP or HDMI. The model, located in the upper\n     * bits, uniquely identifies a display model across manufacturers by encoding EDID information.\n     * While the port is always stable, the model may not be available if EDID identification is not\n     * supported by the platform, in which case the address is not unique.\n     ",
  "variables" : [ {
    "name" : "UNKNOWN_MODEL",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODEL_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhysicalDisplayId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Physical>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getPhysicalDisplayId()",
    "returnType" : "long",
    "comment" : "\n         * Stable display ID combining port and model.\n         *\n         * @return An ID in the range [0, 2^64) interpreted as signed.\n         * @see SurfaceControl#getPhysicalDisplayIds\n         ",
    "links" : [ ]
  }, {
    "name" : "public byte getPort()",
    "returnType" : "byte",
    "comment" : "\n         * Physical port to which the display is connected.\n         *\n         * @return A port in the range [0, 255] interpreted as signed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Long getModel()",
    "returnType" : "Long",
    "comment" : "\n         * Model identifier unique across manufacturers.\n         *\n         * @return A positive integer, or {@code null} if the model cannot be identified.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "UNKNOWN_MODEL", "MODEL_SHIFT", "mPhysicalDisplayId", "CREATOR" ],
  "methodNames" : [ "public long getPhysicalDisplayId()", "public byte getPort()", "public Long getModel()", "public boolean equals(Object other)", "public String toString()", "public int hashCode()", "public void writeToParcel(Parcel out, int flags)" ]
}