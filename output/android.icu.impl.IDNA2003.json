{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/IDNA2003.java",
  "packageName" : "android.icu.impl",
  "className" : "IDNA2003",
  "comment" : "\n * IDNA2003 implementation code, moved out of android.icu.text.IDNA.java\n * while extending that class to support IDNA2008/UTS #46 as well.\n * @author Ram Viswanadha\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ACE_PREFIX",
    "type" : "char[]",
    "comment" : " IDNA ACE Prefix is \"xn--\" ",
    "links" : [ ]
  }, {
    "name" : "MAX_LABEL_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPITAL_A",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPITAL_Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOWER_CASE_DELTA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FULL_STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_DOMAIN_NAME_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namePrep",
    "type" : "StringPrep",
    "comment" : " The NamePrep profile object",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean startsWithPrefix(StringBuffer src)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char toASCIILower(char ch)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static StringBuffer toASCIILower(CharSequence src)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int compareCaseInsensitiveASCII(StringBuffer s1, StringBuffer s2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getSeparatorIndex(char[] src, int start, int limit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isLDHChar(int ch)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isLabelSeparator(int ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Ascertain if the given code point is a label separator as \n     * defined by the IDNA RFC\n     * \n     * @param ch The code point to be ascertained\n     * @return true if the char is a label separator\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StringBuffer convertToASCII(UCharacterIterator src, int options) throws StringPrepParseException",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static StringBuffer convertIDNToASCII(String src, int options) throws StringPrepParseException",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static StringBuffer convertToUnicode(UCharacterIterator src, int options) throws StringPrepParseException",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static StringBuffer convertIDNToUnicode(String src, int options) throws StringPrepParseException",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int compare(String s1, String s2, int options) throws StringPrepParseException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean startsWithPrefix(StringBuffer src)", "private static char toASCIILower(char ch)", "private static StringBuffer toASCIILower(CharSequence src)", "private static int compareCaseInsensitiveASCII(StringBuffer s1, StringBuffer s2)", "private static int getSeparatorIndex(char[] src, int start, int limit)", "private static boolean isLDHChar(int ch)", "private static boolean isLabelSeparator(int ch)", "public static StringBuffer convertToASCII(UCharacterIterator src, int options) throws StringPrepParseException", "public static StringBuffer convertIDNToASCII(String src, int options) throws StringPrepParseException", "public static StringBuffer convertToUnicode(UCharacterIterator src, int options) throws StringPrepParseException", "public static StringBuffer convertIDNToUnicode(String src, int options) throws StringPrepParseException", "public static int compare(String s1, String s2, int options) throws StringPrepParseException" ],
  "variableNames" : [ "ACE_PREFIX", "MAX_LABEL_LENGTH", "HYPHEN", "CAPITAL_A", "CAPITAL_Z", "LOWER_CASE_DELTA", "FULL_STOP", "MAX_DOMAIN_NAME_LENGTH", "namePrep" ]
}