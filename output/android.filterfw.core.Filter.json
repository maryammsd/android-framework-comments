{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/filterfw/core/Filter.java",
  "packageName" : "android.filterfw.core",
  "className" : "Filter",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "STATUS_PREINIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNPREPARED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_PREPARED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_PROCESSING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_SLEEPING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_FINISHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_RELEASED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputPorts",
    "type" : "HashMap<String, InputPort>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputPorts",
    "type" : "HashMap<String, OutputPort>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFramesToRelease",
    "type" : "HashSet<Frame>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFramesToSet",
    "type" : "HashMap<String, Frame>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsOpen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSleepDelay",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogVerbose",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final boolean isAvailable(String filterName)",
    "returnType" : "boolean",
    "comment" : " Tests to see if a given filter is installed on the system. Requires\n     * full filter package name, including filterpack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void initWithValueMap(KeyValueMap valueMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void initWithAssignmentString(String assignments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void initWithAssignmentList(Object... keyValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void init() throws ProtocolException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getFilterClassName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputFrame(String inputName, Frame frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setInputValue(String inputName, Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void prepare(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void parametersUpdated(Set<String> updated)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void delayNextProcess(int millisecs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setupPorts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FrameFormat getOutputFormat(String portName, FrameFormat inputFormat)",
    "returnType" : "FrameFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final FrameFormat getInputFormat(String portName)",
    "returnType" : "FrameFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void open(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void process(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getSleepDelay()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getNumberOfConnectedInputs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getNumberOfConnectedOutputs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getNumberOfInputs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getNumberOfOutputs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final InputPort getInputPort(String portName)",
    "returnType" : "InputPort",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OutputPort getOutputPort(String portName)",
    "returnType" : "OutputPort",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void pushOutput(String name, Frame frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final Frame pullInput(String name)",
    "returnType" : "Frame",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fieldPortValueUpdated(String name, FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void transferInputPortFrame(String name, FilterContext context)",
    "returnType" : "void",
    "comment" : "\n     * Transfers any frame from an input port to its destination. This is useful to force a\n     * transfer from a FieldPort or ProgramPort to its connected target (field or program variable).\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initProgramInputs(Program program, FilterContext context)",
    "returnType" : "void",
    "comment" : "\n     * Assigns all program variables to the ports they are connected to. Call this after\n     * constructing a Program instance with attached ProgramPorts.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void addInputPort(String name)",
    "returnType" : "void",
    "comment" : "\n     * Adds an input port to the filter. You should call this from within setupPorts, if your\n     * filter has input ports. No type-checking is performed on the input. If you would like to\n     * check against a type mask, use\n     * {@link #addMaskedInputPort(String, FrameFormat) addMaskedInputPort} instead.\n     *\n     * @param name the name of the input port\n     ",
    "links" : [ "#addMaskedInputPort(String" ]
  }, {
    "name" : "protected void addMaskedInputPort(String name, FrameFormat formatMask)",
    "returnType" : "void",
    "comment" : "\n     * Adds an input port to the filter. You should call this from within setupPorts, if your\n     * filter has input ports. When type-checking is performed, the input format is\n     * checked against the provided format mask. An exception is thrown in case of a conflict.\n     *\n     * @param name the name of the input port\n     * @param formatMask a format mask, which filters the allowable input types\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void addOutputPort(String name, FrameFormat format)",
    "returnType" : "void",
    "comment" : "\n     * Adds an output port to the filter with a fixed output format. You should call this from\n     * within setupPorts, if your filter has output ports. You cannot use this method, if your\n     * output format depends on the input format (e.g. in a pass-through filter). In this case, use\n     * {@link #addOutputBasedOnInput(String, String) addOutputBasedOnInput} instead.\n     *\n     * @param name the name of the output port\n     * @param format the fixed output format of this port\n     ",
    "links" : [ "#addOutputBasedOnInput(String" ]
  }, {
    "name" : "protected void addOutputBasedOnInput(String outputName, String inputName)",
    "returnType" : "void",
    "comment" : "\n     * Adds an output port to the filter. You should call this from within setupPorts, if your\n     * filter has output ports. Using this method indicates that the output format for this\n     * particular port, depends on the format of an input port. You MUST also override\n     * {@link #getOutputFormat(String, FrameFormat) getOutputFormat} to specify what format your\n     * filter will output for a given input. If the output format of your filter port does not\n     * depend on the input, use {@link #addOutputPort(String, FrameFormat) addOutputPort} instead.\n     *\n     * @param outputName the name of the output port\n     * @param inputName the name of the input port, that this output depends on\n     ",
    "links" : [ "#getOutputFormat(String", "#addOutputPort(String" ]
  }, {
    "name" : "protected void addFieldPort(String name, Field field, boolean hasDefault, boolean isFinal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void addProgramPort(String name, String varName, Field field, Class varType, boolean hasDefault)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void closeOutputPort(String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setWaitsOnInputPort(String portName, boolean waits)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the filter should not be scheduled until a frame is available on that\n     * input port. Note, that setting this to false, does not block a new frame from coming in\n     * (though there is no necessity to pull that frame for processing).\n     * @param portName the name of the input port.\n     * @param waits true, if the filter should wait for a frame on this port.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setWaitsOnOutputPort(String portName, boolean waits)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the filter should not be scheduled until the output port is free, i.e.\n     * there is no frame waiting on that output.\n     * @param portName the name of the output port.\n     * @param waits true, if the filter should wait for the port to become free.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Collection<InputPort> getInputPorts()",
    "returnType" : "Collection<InputPort>",
    "comment" : " Core internal methods ///////////////////////////////////////////////////////////////////////",
    "links" : [ ]
  }, {
    "name" : " final Collection<OutputPort> getOutputPorts()",
    "returnType" : "Collection<OutputPort>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized int getStatus()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void unsetStatus(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void performOpen(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void performProcess(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void performClose(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void performTearDown(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized boolean canProcess()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void openOutputs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void clearInputs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void clearOutputs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void notifyFieldPortValueUpdated(String name, FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void pushInputFrame(String inputName, Frame frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final synchronized void pushInputValue(String inputName, Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void initFinalPorts(KeyValueMap values)",
    "returnType" : "void",
    "comment" : " Filter internal methods /////////////////////////////////////////////////////////////////////",
    "links" : [ ]
  }, {
    "name" : "private final void initRemainingPorts(KeyValueMap values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void addAndSetFinalPorts(KeyValueMap values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void addAnnotatedPorts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void addFieldGenerator(GenerateFieldPort generator, Field field)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void addProgramGenerator(GenerateProgramPort generator, Field field)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void setInitialInputValues(KeyValueMap values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void setImmediateInputValue(String name, Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void transferInputFrames(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final Frame wrapInputValue(String inputName, Object value)",
    "returnType" : "Frame",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void releasePulledFrames(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final boolean inputConditionsMet()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final boolean outputConditionsMet()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void closePorts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final boolean filterMustClose()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final boolean isAvailable(String filterName)", "public final void initWithValueMap(KeyValueMap valueMap)", "public final void initWithAssignmentString(String assignments)", "public final void initWithAssignmentList(Object... keyValues)", "public final void init() throws ProtocolException", "public String getFilterClassName()", "public final String getName()", "public boolean isOpen()", "public void setInputFrame(String inputName, Frame frame)", "public final void setInputValue(String inputName, Object value)", "protected void prepare(FilterContext context)", "protected void parametersUpdated(Set<String> updated)", "protected void delayNextProcess(int millisecs)", "public abstract void setupPorts()", "public FrameFormat getOutputFormat(String portName, FrameFormat inputFormat)", "public final FrameFormat getInputFormat(String portName)", "public void open(FilterContext context)", "public abstract void process(FilterContext context)", "public final int getSleepDelay()", "public void close(FilterContext context)", "public void tearDown(FilterContext context)", "public final int getNumberOfConnectedInputs()", "public final int getNumberOfConnectedOutputs()", "public final int getNumberOfInputs()", "public final int getNumberOfOutputs()", "public final InputPort getInputPort(String portName)", "public final OutputPort getOutputPort(String portName)", "protected final void pushOutput(String name, Frame frame)", "protected final Frame pullInput(String name)", "public void fieldPortValueUpdated(String name, FilterContext context)", "protected void transferInputPortFrame(String name, FilterContext context)", "protected void initProgramInputs(Program program, FilterContext context)", "protected void addInputPort(String name)", "protected void addMaskedInputPort(String name, FrameFormat formatMask)", "protected void addOutputPort(String name, FrameFormat format)", "protected void addOutputBasedOnInput(String outputName, String inputName)", "protected void addFieldPort(String name, Field field, boolean hasDefault, boolean isFinal)", "protected void addProgramPort(String name, String varName, Field field, Class varType, boolean hasDefault)", "protected void closeOutputPort(String name)", "protected void setWaitsOnInputPort(String portName, boolean waits)", "protected void setWaitsOnOutputPort(String portName, boolean waits)", "public String toString()", " final Collection<InputPort> getInputPorts()", " final Collection<OutputPort> getOutputPorts()", " final synchronized int getStatus()", " final synchronized void unsetStatus(int flag)", " final synchronized void performOpen(FilterContext context)", " final synchronized void performProcess(FilterContext context)", " final synchronized void performClose(FilterContext context)", " final synchronized void performTearDown(FilterContext context)", " final synchronized boolean canProcess()", " final void openOutputs()", " final void clearInputs()", " final void clearOutputs()", " final void notifyFieldPortValueUpdated(String name, FilterContext context)", " final synchronized void pushInputFrame(String inputName, Frame frame)", " final synchronized void pushInputValue(String inputName, Object value)", "private final void initFinalPorts(KeyValueMap values)", "private final void initRemainingPorts(KeyValueMap values)", "private final void addAndSetFinalPorts(KeyValueMap values)", "private final void addAnnotatedPorts()", "private final void addFieldGenerator(GenerateFieldPort generator, Field field)", "private final void addProgramGenerator(GenerateProgramPort generator, Field field)", "private final void setInitialInputValues(KeyValueMap values)", "private final void setImmediateInputValue(String name, Object value)", "private final void transferInputFrames(FilterContext context)", "private final Frame wrapInputValue(String inputName, Object value)", "private final void releasePulledFrames(FilterContext context)", "private final boolean inputConditionsMet()", "private final boolean outputConditionsMet()", "private final void closePorts()", "private final boolean filterMustClose()" ],
  "variableNames" : [ "STATUS_PREINIT", "STATUS_UNPREPARED", "STATUS_PREPARED", "STATUS_PROCESSING", "STATUS_SLEEPING", "STATUS_FINISHED", "STATUS_ERROR", "STATUS_RELEASED", "mName", "mInputCount", "mOutputCount", "mInputPorts", "mOutputPorts", "mFramesToRelease", "mFramesToSet", "mStatus", "mIsOpen", "mSleepDelay", "mCurrentTimestamp", "mLogVerbose", "TAG" ]
}