{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "Directory",
  "comment" : "\n     * A Directory represents a contacts corpus, e.g. Local contacts,\n     * Google Apps Global Address List or Corporate Global Address List.\n     * <p>\n     * A Directory is implemented as a content provider with its unique authority and\n     * the same API as the main Contacts Provider.  However, there is no expectation that\n     * every directory provider will implement this Contract in its entirety.  If a\n     * directory provider does not have an implementation for a specific request, it\n     * should throw an UnsupportedOperationException.\n     * </p>\n     * <p>\n     * The most important use case for Directories is search.  A Directory provider is\n     * expected to support at least {@link ContactsContract.Contacts#CONTENT_FILTER_URI\n     * Contacts.CONTENT_FILTER_URI}.  If a Directory provider wants to participate\n     * in email and phone lookup functionalities, it should also implement\n     * {@link CommonDataKinds.Email#CONTENT_FILTER_URI CommonDataKinds.Email.CONTENT_FILTER_URI}\n     * and\n     * {@link CommonDataKinds.Phone#CONTENT_FILTER_URI CommonDataKinds.Phone.CONTENT_FILTER_URI}.\n     * </p>\n     * <p>\n     * A directory provider should return NULL for every projection field it does not\n     * recognize, rather than throwing an exception.  This way it will not be broken\n     * if ContactsContract is extended with new fields in the future.\n     * </p>\n     * <p>\n     * The client interacts with a directory via Contacts Provider by supplying an\n     * optional {@code directory=} query parameter.\n     * <p>\n     * <p>\n     * When the Contacts Provider receives the request, it transforms the URI and forwards\n     * the request to the corresponding directory content provider.\n     * The URI is transformed in the following fashion:\n     * <ul>\n     * <li>The URI authority is replaced with the corresponding {@link #DIRECTORY_AUTHORITY}.</li>\n     * <li>The {@code accountName=} and {@code accountType=} parameters are added or\n     * replaced using the corresponding {@link #ACCOUNT_TYPE} and {@link #ACCOUNT_NAME} values.</li>\n     * </ul>\n     * </p>\n     * <p>\n     * Clients should send directory requests to Contacts Provider and let it\n     * forward them to the respective providers rather than constructing\n     * directory provider URIs by themselves. This level of indirection allows\n     * Contacts Provider to implement additional system-level features and\n     * optimizations. Access to Contacts Provider is protected by the\n     * READ_CONTACTS permission, but access to the directory provider is protected by\n     * BIND_DIRECTORY_SEARCH. This permission was introduced at the API level 17, for previous\n     * platform versions the provider should perform the following check to make sure the call\n     * is coming from the ContactsProvider:\n     * <pre>\n     * private boolean isCallerAllowed() {\n     *   PackageManager pm = getContext().getPackageManager();\n     *   for (String packageName: pm.getPackagesForUid(Binder.getCallingUid())) {\n     *     if (packageName.equals(\"com.android.providers.contacts\")) {\n     *       return true;\n     *     }\n     *   }\n     *   return false;\n     * }\n     * </pre>\n     * </p>\n     * <p>\n     * The Directory table is read-only and is maintained by the Contacts Provider\n     * automatically.\n     * </p>\n     * <p>It always has at least these two rows:\n     * <ul>\n     * <li>\n     * The local directory. It has {@link Directory#_ID Directory._ID} =\n     * {@link Directory#DEFAULT Directory.DEFAULT}. This directory can be used to access locally\n     * stored contacts. The same can be achieved by omitting the {@code directory=}\n     * parameter altogether.\n     * </li>\n     * <li>\n     * The local invisible contacts. The corresponding directory ID is\n     * {@link Directory#LOCAL_INVISIBLE Directory.LOCAL_INVISIBLE}.\n     * </li>\n     * </ul>\n     * </p>\n     * <p>Custom Directories are discovered by the Contacts Provider following this procedure:\n     * <ul>\n     * <li>It finds all installed content providers with meta data identifying them\n     * as directory providers in AndroidManifest.xml:\n     * <code>\n     * &lt;meta-data android:name=\"android.content.ContactDirectory\"\n     *               android:value=\"true\" /&gt;\n     * </code>\n     * <p>\n     * This tag should be placed inside the corresponding content provider declaration.\n     * </p>\n     * </li>\n     * <li>\n     * Then Contacts Provider sends a {@link Directory#CONTENT_URI Directory.CONTENT_URI}\n     * query to each of the directory authorities.  A directory provider must implement\n     * this query and return a list of directories.  Each directory returned by\n     * the provider must have a unique combination for the {@link #ACCOUNT_NAME} and\n     * {@link #ACCOUNT_TYPE} columns (nulls are allowed).  Since directory IDs are assigned\n     * automatically, the _ID field will not be part of the query projection.\n     * </li>\n     * <li>Contacts Provider compiles directory lists received from all directory\n     * providers into one, assigns each individual directory a globally unique ID and\n     * stores all directory records in the Directory table.\n     * </li>\n     * </ul>\n     * </p>\n     * <p>Contacts Provider automatically interrogates newly installed or replaced packages.\n     * Thus simply installing a package containing a directory provider is sufficient\n     * to have that provider registered.  A package supplying a directory provider does\n     * not have to contain launchable activities.\n     * </p>\n     * <p>\n     * Every row in the Directory table is automatically associated with the corresponding package\n     * (apk).  If the package is later uninstalled, all corresponding directory rows\n     * are automatically removed from the Contacts Provider.\n     * </p>\n     * <p>\n     * When the list of directories handled by a directory provider changes\n     * (for instance when the user adds a new Directory account), the directory provider\n     * should call {@link #notifyDirectoryChange} to notify the Contacts Provider of the change.\n     * In response, the Contacts Provider will requery the directory provider to obtain the\n     * new list of directories.\n     * </p>\n     * <p>\n     * A directory row can be optionally associated with an existing account\n     * (see {@link android.accounts.AccountManager}). If the account is later removed,\n     * the corresponding directory rows are automatically removed from the Contacts Provider.\n     * </p>\n     ",
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table.  Requests to this URI can be\n         * performed on the UI thread because they are always unblocking.\n         ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * URI used for getting all directories from primary and managed profile.\n         * It supports the same semantics as {@link #CONTENT_URI} and returns the same columns.\n         * If the device has no managed profile that is linked to the current profile, it behaves\n         * in the exact same way as {@link #CONTENT_URI}.\n         * If there is a managed profile linked to the current profile, it will merge\n         * managed profile and current profile's results and return.\n         *\n         * Note: this query returns primary profile results before managed profile results,\n         * and this order is not affected by sorting parameter.\n         *\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "ENTERPRISE_FILE_URI",
    "type" : "Uri",
    "comment" : "\n         * Access file provided by remote directory. It allows both personal and work remote\n         * directory, but not local and invisible diretory.\n         *\n         * It's supported only by a few specific places for referring to contact pictures in the\n         * remote directory. Contact picture URIs, e.g.\n         * {@link PhoneLookup#ENTERPRISE_CONTENT_FILTER_URI}, may contain this kind of URI.\n         *\n         * @hide\n         ",
    "links" : [ "#ENTERPRISE_CONTENT_FILTER_URI" ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME-type of {@link #CONTENT_URI} providing a directory of\n         * contact directories.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a {@link #CONTENT_URI} item.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "DEFAULT",
    "type" : "long",
    "comment" : "\n         * _ID of the default directory, which represents locally stored contacts.\n         * <b>This is only supported by {@link ContactsContract.Contacts#CONTENT_URI} and\n         * {@link ContactsContract.Contacts#CONTENT_FILTER_URI}.\n         * Other URLs do not support the concept of \"visible\" or \"invisible\" contacts.\n         ",
    "links" : [ "ContactsContract.Contacts#CONTENT_FILTER_URI", "ContactsContract.Contacts#CONTENT_URI" ]
  }, {
    "name" : "LOCAL_INVISIBLE",
    "type" : "long",
    "comment" : "\n         * _ID of the directory that represents locally stored invisible contacts.\n         ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_DEFAULT",
    "type" : "long",
    "comment" : "\n         * _ID of the work profile default directory, which represents locally stored contacts.\n         ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_LOCAL_INVISIBLE",
    "type" : "long",
    "comment" : "\n         * _ID of the work profile directory that represents locally stored invisible contacts.\n         ",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n         * The name of the package that owns this directory. Contacts Provider\n         * fill it in with the name of the package containing the directory provider.\n         * If the package is later uninstalled, the directories it owns are\n         * automatically removed from this table.\n         *\n         * <p>TYPE: TEXT</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "TYPE_RESOURCE_ID",
    "type" : "String",
    "comment" : "\n         * The type of directory captured as a resource ID in the context of the\n         * package {@link #PACKAGE_NAME}, e.g. \"Corporate Directory\"\n         *\n         * <p>TYPE: INTEGER</p>\n         ",
    "links" : [ "#PACKAGE_NAME" ]
  }, {
    "name" : "DISPLAY_NAME",
    "type" : "String",
    "comment" : "\n         * An optional name that can be used in the UI to represent this directory,\n         * e.g. \"Acme Corp\"\n         * <p>TYPE: text</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "DIRECTORY_AUTHORITY",
    "type" : "String",
    "comment" : "\n         * <p>\n         * The authority of the Directory Provider. Contacts Provider will\n         * use this authority to forward requests to the directory provider.\n         * A directory provider can leave this column empty - Contacts Provider will fill it in.\n         * </p>\n         * <p>\n         * Clients of this API should not send requests directly to this authority.\n         * All directory requests must be routed through Contacts Provider.\n         * </p>\n         *\n         * <p>TYPE: text</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCOUNT_TYPE",
    "type" : "String",
    "comment" : "\n         * The account type which this directory is associated.\n         *\n         * <p>TYPE: text</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCOUNT_NAME",
    "type" : "String",
    "comment" : "\n         * The account with which this directory is associated. If the account is later\n         * removed, the directories it owns are automatically removed from this table.\n         *\n         * <p>TYPE: text</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_DIRECTORY_ID_BASE",
    "type" : "long",
    "comment" : " slightly smaller than 2 ** 30",
    "links" : [ ]
  }, {
    "name" : "EXPORT_SUPPORT",
    "type" : "String",
    "comment" : "\n         * One of {@link #EXPORT_SUPPORT_NONE}, {@link #EXPORT_SUPPORT_ANY_ACCOUNT},\n         * {@link #EXPORT_SUPPORT_SAME_ACCOUNT_ONLY}. This is the expectation the\n         * directory has for data exported from it.  Clients must obey this setting.\n         ",
    "links" : [ "#EXPORT_SUPPORT_ANY_ACCOUNT", "#EXPORT_SUPPORT_NONE", "#EXPORT_SUPPORT_SAME_ACCOUNT_ONLY" ]
  }, {
    "name" : "EXPORT_SUPPORT_NONE",
    "type" : "int",
    "comment" : "\n         * An {@link #EXPORT_SUPPORT} setting that indicates that the directory\n         * does not allow any data to be copied out of it.\n         ",
    "links" : [ "#EXPORT_SUPPORT" ]
  }, {
    "name" : "EXPORT_SUPPORT_SAME_ACCOUNT_ONLY",
    "type" : "int",
    "comment" : "\n         * An {@link #EXPORT_SUPPORT} setting that indicates that the directory\n         * allow its data copied only to the account specified by\n         * {@link #ACCOUNT_TYPE}/{@link #ACCOUNT_NAME}.\n         ",
    "links" : [ "#ACCOUNT_TYPE", "#ACCOUNT_NAME", "#EXPORT_SUPPORT" ]
  }, {
    "name" : "EXPORT_SUPPORT_ANY_ACCOUNT",
    "type" : "int",
    "comment" : "\n         * An {@link #EXPORT_SUPPORT} setting that indicates that the directory\n         * allow its data copied to any contacts account.\n         ",
    "links" : [ "#EXPORT_SUPPORT" ]
  }, {
    "name" : "SHORTCUT_SUPPORT",
    "type" : "String",
    "comment" : "\n         * One of {@link #SHORTCUT_SUPPORT_NONE}, {@link #SHORTCUT_SUPPORT_DATA_ITEMS_ONLY},\n         * {@link #SHORTCUT_SUPPORT_FULL}. This is the expectation the directory\n         * has for shortcuts created for its elements. Clients must obey this setting.\n         ",
    "links" : [ "#SHORTCUT_SUPPORT_NONE", "#SHORTCUT_SUPPORT_DATA_ITEMS_ONLY", "#SHORTCUT_SUPPORT_FULL" ]
  }, {
    "name" : "SHORTCUT_SUPPORT_NONE",
    "type" : "int",
    "comment" : "\n         * An {@link #SHORTCUT_SUPPORT} setting that indicates that the directory\n         * does not allow any shortcuts created for its contacts.\n         ",
    "links" : [ "#SHORTCUT_SUPPORT" ]
  }, {
    "name" : "SHORTCUT_SUPPORT_DATA_ITEMS_ONLY",
    "type" : "int",
    "comment" : "\n         * An {@link #SHORTCUT_SUPPORT} setting that indicates that the directory\n         * allow creation of shortcuts for data items like email, phone or postal address,\n         * but not the entire contact.\n         ",
    "links" : [ "#SHORTCUT_SUPPORT" ]
  }, {
    "name" : "SHORTCUT_SUPPORT_FULL",
    "type" : "int",
    "comment" : "\n         * An {@link #SHORTCUT_SUPPORT} setting that indicates that the directory\n         * allow creation of shortcuts for contact as well as their constituent elements.\n         ",
    "links" : [ "#SHORTCUT_SUPPORT" ]
  }, {
    "name" : "PHOTO_SUPPORT",
    "type" : "String",
    "comment" : "\n         * One of {@link #PHOTO_SUPPORT_NONE}, {@link #PHOTO_SUPPORT_THUMBNAIL_ONLY},\n         * {@link #PHOTO_SUPPORT_FULL}. This is a feature flag indicating the extent\n         * to which the directory supports contact photos.\n         ",
    "links" : [ "#PHOTO_SUPPORT_NONE", "#PHOTO_SUPPORT_FULL", "#PHOTO_SUPPORT_THUMBNAIL_ONLY" ]
  }, {
    "name" : "PHOTO_SUPPORT_NONE",
    "type" : "int",
    "comment" : "\n         * An {@link #PHOTO_SUPPORT} setting that indicates that the directory\n         * does not provide any photos.\n         ",
    "links" : [ "#PHOTO_SUPPORT" ]
  }, {
    "name" : "PHOTO_SUPPORT_THUMBNAIL_ONLY",
    "type" : "int",
    "comment" : "\n         * An {@link #PHOTO_SUPPORT} setting that indicates that the directory\n         * can only produce small size thumbnails of contact photos.\n         ",
    "links" : [ "#PHOTO_SUPPORT" ]
  }, {
    "name" : "PHOTO_SUPPORT_FULL_SIZE_ONLY",
    "type" : "int",
    "comment" : "\n         * An {@link #PHOTO_SUPPORT} setting that indicates that the directory\n         * has full-size contact photos, but cannot provide scaled thumbnails.\n         ",
    "links" : [ "#PHOTO_SUPPORT" ]
  }, {
    "name" : "PHOTO_SUPPORT_FULL",
    "type" : "int",
    "comment" : "\n         * An {@link #PHOTO_SUPPORT} setting that indicates that the directory\n         * can produce thumbnails as well as full-size contact photos.\n         ",
    "links" : [ "#PHOTO_SUPPORT" ]
  }, {
    "name" : "CALLER_PACKAGE_PARAM_KEY",
    "type" : "String",
    "comment" : "\n         * A query parameter that's passed to directory providers which indicates the client\n         * package name that has made the query requests.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isRemoteDirectoryId(long directoryId)",
    "returnType" : "boolean",
    "comment" : "\n         * Return TRUE if it is a remote stored directory.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isRemoteDirectory(long directoryId)",
    "returnType" : "boolean",
    "comment" : "\n         * Return TRUE if it is a remote stored directory. TODO: Remove this method once all\n         * internal apps are not using this API.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isEnterpriseDirectoryId(long directoryId)",
    "returnType" : "boolean",
    "comment" : "\n         * Return TRUE if a directory ID is from the contacts provider on the enterprise profile.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void notifyDirectoryChange(ContentResolver resolver)",
    "returnType" : "void",
    "comment" : "\n         * Notifies the system of a change in the list of directories handled by\n         * a particular directory provider. The Contacts provider will turn around\n         * and send a query to the directory provider for the full list of directories,\n         * which will replace the previous list.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CONTENT_URI", "ENTERPRISE_CONTENT_URI", "ENTERPRISE_FILE_URI", "CONTENT_TYPE", "CONTENT_ITEM_TYPE", "DEFAULT", "LOCAL_INVISIBLE", "ENTERPRISE_DEFAULT", "ENTERPRISE_LOCAL_INVISIBLE", "PACKAGE_NAME", "TYPE_RESOURCE_ID", "DISPLAY_NAME", "DIRECTORY_AUTHORITY", "ACCOUNT_TYPE", "ACCOUNT_NAME", "ENTERPRISE_DIRECTORY_ID_BASE", "EXPORT_SUPPORT", "EXPORT_SUPPORT_NONE", "EXPORT_SUPPORT_SAME_ACCOUNT_ONLY", "EXPORT_SUPPORT_ANY_ACCOUNT", "SHORTCUT_SUPPORT", "SHORTCUT_SUPPORT_NONE", "SHORTCUT_SUPPORT_DATA_ITEMS_ONLY", "SHORTCUT_SUPPORT_FULL", "PHOTO_SUPPORT", "PHOTO_SUPPORT_NONE", "PHOTO_SUPPORT_THUMBNAIL_ONLY", "PHOTO_SUPPORT_FULL_SIZE_ONLY", "PHOTO_SUPPORT_FULL", "CALLER_PACKAGE_PARAM_KEY" ],
  "methodNames" : [ "public static boolean isRemoteDirectoryId(long directoryId)", "public static boolean isRemoteDirectory(long directoryId)", "public static boolean isEnterpriseDirectoryId(long directoryId)", "public static void notifyDirectoryChange(ContentResolver resolver)" ]
}