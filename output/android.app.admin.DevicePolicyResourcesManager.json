{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/DevicePolicyResourcesManager.java",
  "packageName" : "android.app.admin",
  "className" : "DevicePolicyResourcesManager",
  "comment" : "\n * Class containing required APIs to set, reset, and get device policy related resources.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISABLE_RESOURCES_UPDATABILITY_FLAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DISABLE_RESOURCES_UPDATABILITY",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IDevicePolicyManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDrawables(@NonNull Set<DevicePolicyDrawableResource> drawables)",
    "returnType" : "void",
    "comment" : "\n     * For each {@link DevicePolicyDrawableResource} item in {@code drawables}, if\n     * {@link DevicePolicyDrawableResource#getDrawableSource()} is not set, it updates the drawable\n     * resource for the combination of {@link DevicePolicyDrawableResource#getDrawableId()} and\n     * {@link DevicePolicyDrawableResource#getDrawableStyle()} to the drawable with resource ID\n     * {@link DevicePolicyDrawableResource#getResourceIdInCallingPackage()},\n     * meaning any system UI surface calling {@link #getDrawable} with {@code drawableId} and\n     * {@code drawableStyle} will get the new resource after this API is called.\n     *\n     * <p>Otherwise, if {@link DevicePolicyDrawableResource#getDrawableSource()} is set, it\n     * overrides any drawables that was set for the same {@code drawableId} and\n     * {@code drawableStyle} for the provided source.\n     *\n     * <p>Sends a broadcast with action\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to registered receivers\n     * when a resource has been updated successfully.\n     *\n     * <p>Important notes to consider when using this API:\n     * <ul>\n     * <li> Updated resources are persisted over reboots.\n     * <li>{@link #getDrawable} references the resource\n     * {@link DevicePolicyDrawableResource#getResourceIdInCallingPackage()} in the\n     * calling package each time it gets called. You have to ensure that the resource is always\n     * available in the calling package as long as it is used as an updated resource.\n     * <li>You still have to re-call {@code setDrawables} even if you only make changes to the\n     * content of the resource with ID\n     * {@link DevicePolicyDrawableResource#getResourceIdInCallingPackage()} as the content might be\n     * cached and would need updating.\n     * </ul>\n     *\n     * @param drawables The list of {@link DevicePolicyDrawableResource} to update.\n     *\n     * @hide\n     ",
    "links" : [ "#getDrawable", "android.app.admin.DevicePolicyDrawableResource", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.app.admin.DevicePolicyDrawableResource#getResourceIdInCallingPackage()", "android.app.admin.DevicePolicyDrawableResource#getDrawableStyle()", "android.app.admin.DevicePolicyDrawableResource#getDrawableSource()", "android.app.admin.DevicePolicyDrawableResource#getDrawableId()" ]
  }, {
    "name" : "public void resetDrawables(@NonNull Set<String> drawableIds)",
    "returnType" : "void",
    "comment" : "\n     * Removes all updated drawables for the list of {@code drawableIds} that was previously set by\n     * calling {@link #setDrawables}, meaning any subsequent calls to {@link #getDrawable} for the\n     * provided IDs with any {@code drawableStyle} and any {@code drawableSource} will return the\n     * default drawable from {@code defaultDrawableLoader}.\n     *\n     * <p>Sends a broadcast with action\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to registered receivers\n     * when a resource has been reset successfully.\n     *\n     * @param drawableIds The list of IDs to remove.\n     *\n     * @hide\n     ",
    "links" : [ "#getDrawable", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "#setDrawables" ]
  }, {
    "name" : "public Drawable getDrawable(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull Supplier<Drawable> defaultDrawableLoader)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the appropriate updated drawable for the {@code drawableId} with style\n     * {@code drawableStyle} if one was set using {@code setDrawables}, otherwise returns the\n     * drawable from {@code defaultDrawableLoader}.\n     *\n     * <p>Also returns the drawable from {@code defaultDrawableLoader} if {@code drawableId}\n     * is {@link DevicePolicyResources#UNDEFINED}.\n     *\n     * <p>Calls to this API will not return {@code null} unless no updated drawable was found\n     * and the call to {@code defaultDrawableLoader} returned {@code null}.\n     *\n     * <p>This API uses the screen density returned from {@link Resources#getConfiguration()}, to\n     * set a different value use\n     * {@link #getDrawableForDensity(String, String, int, Supplier)}.\n     *\n     * <p>Callers should register for\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to get notified when a\n     * resource has been updated.\n     *\n     * <p>Note that each call to this API loads the resource from the package that called\n     * {@code setDrawables} to set the updated resource.\n     *\n     * @param drawableId The drawable ID to get the updated resource for.\n     * @param drawableStyle The drawable style to use.\n     * @param defaultDrawableLoader To get the default drawable if no updated drawable was set for\n     *                              the provided params.\n     ",
    "links" : [ "android.content.res.Resources#getConfiguration()", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.app.admin.DevicePolicyResources#UNDEFINED", "#getDrawableForDensity(String" ]
  }, {
    "name" : "public Drawable getDrawable(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull String drawableSource, @NonNull Supplier<Drawable> defaultDrawableLoader)",
    "returnType" : "Drawable",
    "comment" : "\n     * Similar to {@link #getDrawable(String, String, Supplier)}, but also accepts\n     * a {@code drawableSource} which could result in returning a different drawable than\n     * {@link #getDrawable(String, String, Supplier)} if an override was set for that specific\n     * source.\n     *\n     * <p> If {@code drawableSource} is {@link DevicePolicyResources#UNDEFINED}, it returns the\n     * appropriate string for {@code drawableId} and {@code drawableStyle} similar to\n     * {@link #getDrawable(String, String, Supplier)}.\n     *\n     * <p>Calls to this API will not return {@code null} unless no updated drawable was found\n     * and the call to {@code defaultDrawableLoader} returned {@code null}.\n     *\n     * <p>Callers should register for\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to get notified when a\n     * resource has been updated.\n     *\n     * @param drawableId The drawable ID to get the updated resource for.\n     * @param drawableStyle The drawable style to use.\n     * @param drawableSource The source for the caller.\n     * @param defaultDrawableLoader To get the default drawable if no updated drawable was set for\n     *                              the provided params.\n     ",
    "links" : [ "#getDrawable(String", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.app.admin.DevicePolicyResources#UNDEFINED" ]
  }, {
    "name" : "public Drawable getDrawableForDensity(@NonNull String drawableId, @NonNull String drawableStyle, int density, @NonNull Supplier<Drawable> defaultDrawableLoader)",
    "returnType" : "Drawable",
    "comment" : "\n     * Similar to {@link #getDrawable(String, String, Supplier)}, but also accepts\n     * {@code density}. See {@link Resources#getDrawableForDensity(int, int, Resources.Theme)}.\n     *\n     * <p>Calls to this API will not return {@code null} unless no updated drawable was found\n     * and the call to {@code defaultDrawableLoader} returned {@code null}.\n     *\n     * <p>Callers should register for\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to get notified when a\n     * resource has been updated.\n     *\n     * @param drawableId The drawable ID to get the updated resource for.\n     * @param drawableStyle The drawable style to use.\n     * @param density The desired screen density indicated by the resource as\n     *            found in {@link DisplayMetrics}. A value of 0 means to use the\n     *            density returned from {@link Resources#getConfiguration()}.\n     * @param defaultDrawableLoader To get the default drawable if no updated drawable was set for\n     *                              the provided params.\n     ",
    "links" : [ "android.content.res.Resources#getConfiguration()", "#getDrawable(String", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.content.res.Resources#getDrawableForDensity(int", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public Drawable getDrawableForDensity(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull String drawableSource, int density, @NonNull Supplier<Drawable> defaultDrawableLoader)",
    "returnType" : "Drawable",
    "comment" : "\n     * Similar to {@link #getDrawable(String, String, String, Supplier)}, but also accepts\n     * {@code density}. See {@link Resources#getDrawableForDensity(int, int, Resources.Theme)}.\n     *\n     * <p>Calls to this API will not return {@code null} unless no updated drawable was found\n     * and the call to {@code defaultDrawableLoader} returned {@code null}.\n     *\n     * <p>Callers should register for\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to get notified when a\n     * resource has been updated.\n     *\n     * @param drawableId The drawable ID to get the updated resource for.\n     * @param drawableStyle The drawable style to use.\n     * @param drawableSource The source for the caller.\n     * @param density The desired screen density indicated by the resource as\n     *            found in {@link DisplayMetrics}. A value of 0 means to use the\n     *            density returned from {@link Resources#getConfiguration()}.\n     * @param defaultDrawableLoader To get the default drawable if no updated drawable was set for\n     *                              the provided params.\n     ",
    "links" : [ "android.content.res.Resources#getConfiguration()", "#getDrawable(String", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.content.res.Resources#getDrawableForDensity(int", "android.util.DisplayMetrics" ]
  }, {
    "name" : "public Icon getDrawableAsIcon(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull String drawableSource, @Nullable Icon defaultIcon)",
    "returnType" : "Icon",
    "comment" : "\n     * Similar to {@link #getDrawable(String, String, String, Supplier)} but returns an\n     * {@link Icon} instead of a {@link Drawable}.\n     *\n     * @param drawableId The drawable ID to get the updated resource for.\n     * @param drawableStyle The drawable style to use.\n     * @param drawableSource The source for the caller.\n     * @param defaultIcon Returned if no updated drawable was set for the provided params.\n     ",
    "links" : [ "#getDrawable(String", "android.graphics.drawable.Icon", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public Icon getDrawableAsIcon(@NonNull String drawableId, @NonNull String drawableStyle, @Nullable Icon defaultIcon)",
    "returnType" : "Icon",
    "comment" : "\n     * Similar to {@link #getDrawable(String, String, Supplier)} but returns an {@link Icon}\n     * instead of a {@link Drawable}.\n     *\n     * @param drawableId The drawable ID to get the updated resource for.\n     * @param drawableStyle The drawable style to use.\n     * @param defaultIcon Returned if no updated drawable was set for the provided params.\n     ",
    "links" : [ "#getDrawable(String", "android.graphics.drawable.Icon", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setStrings(@NonNull Set<DevicePolicyStringResource> strings)",
    "returnType" : "void",
    "comment" : "\n     * For each {@link DevicePolicyStringResource} item in {@code strings}, it updates the string\n     * resource for {@link DevicePolicyStringResource#getStringId()} to the string with ID\n     * {@code callingPackageResourceId}, meaning any system UI surface calling {@link #getString}\n     * with {@code stringId} will get the new resource after this API is called.\n     *\n     * <p>Sends a broadcast with action\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to registered receivers\n     * when a resource has been updated successfully.\n     *\n     * <p>Important notes to consider when using this API:\n     * <ul>\n     * <li> Updated resources are persisted over reboots.\n     * <li> {@link #getString} references the resource\n     * {@link DevicePolicyStringResource#getResourceIdInCallingPackage()} in the\n     * calling package each time it gets called. You have to ensure that the resource is always\n     * available in the calling package as long as it is used as an updated resource.\n     * <li> You still have to re-call {@code setStrings} even if you only make changes to the\n     * content of the resource with ID {@code callingPackageResourceId} as the content might be\n     * cached and would need updating.\n     * </ul>\n     *\n     * @param strings The list of {@link DevicePolicyStringResource} to update.\n     *\n     * @hide\n     ",
    "links" : [ "#getString", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.app.admin.DevicePolicyStringResource#getResourceIdInCallingPackage()", "android.app.admin.DevicePolicyStringResource", "android.app.admin.DevicePolicyStringResource#getStringId()" ]
  }, {
    "name" : "public void resetStrings(@NonNull Set<String> stringIds)",
    "returnType" : "void",
    "comment" : "\n     * Removes the updated strings for the list of {@code stringIds} that was previously set by\n     * calling {@link #setStrings}, meaning any subsequent calls to {@link #getString} for the\n     * provided IDs will return the default string from {@code defaultStringLoader}.\n     *\n     * <p>Sends a broadcast with action\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to registered receivers\n     * when a resource has been reset successfully.\n     *\n     * @param stringIds The list of IDs to remove the updated resources for.\n     *\n     * @hide\n     ",
    "links" : [ "#getString", "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "#setStrings" ]
  }, {
    "name" : "public String getString(@NonNull String stringId, @NonNull Supplier<String> defaultStringLoader)",
    "returnType" : "String",
    "comment" : "\n     * Returns the appropriate updated string for the {@code stringId} (see\n     * {@code DevicePolicyResources.Strings}) if one was set using\n     * {@code setStrings}, otherwise returns the string from {@code defaultStringLoader}.\n     *\n     * <p>Also returns the string from {@code defaultStringLoader} if {@code stringId} is\n     * {@link DevicePolicyResources#UNDEFINED}.\n     *\n     * <p>Calls to this API will not return {@code null} unless no updated drawable was found\n     * and the call to {@code defaultStringLoader} returned {@code null}.\n     *\n     * <p>Callers should register for\n     * {@link DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED} to get notified when a\n     * resource has been updated.\n     *\n     * <p>Note that each call to this API loads the resource from the package that called\n     * {@code setStrings} to set the updated resource.\n     *\n     * @param stringId The IDs to get the updated resource for.\n     * @param defaultStringLoader To get the default string if no updated string was set for\n     *         {@code stringId}.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#ACTION_DEVICE_POLICY_RESOURCE_UPDATED", "android.app.admin.DevicePolicyResources#UNDEFINED" ]
  }, {
    "name" : "public String getString(@NonNull String stringId, @NonNull Supplier<String> defaultStringLoader, @NonNull Object... formatArgs)",
    "returnType" : "String",
    "comment" : "\n     * Similar to {@link #getString(String, Supplier)} but accepts {@code formatArgs} and returns a\n     * localized formatted string, substituting the format arguments as defined in\n     * {@link java.util.Formatter} and {@link java.lang.String#format}, (see\n     * {@link Resources#getString(int, Object...)}).\n     *\n     * <p>Calls to this API will not return {@code null} unless no updated drawable was found\n     * and the call to {@code defaultStringLoader} returned {@code null}.\n     *\n     * @param stringId The IDs to get the updated resource for.\n     * @param defaultStringLoader To get the default string if no updated string was set for\n     *         {@code stringId}.\n     * @param formatArgs The format arguments that will be used for substitution.\n     ",
    "links" : [ "#getString(String", "java.lang.String#format", "android.content.res.Resources#getString(int", "java.util.Formatter" ]
  } ],
  "methodNames" : [ "public void setDrawables(@NonNull Set<DevicePolicyDrawableResource> drawables)", "public void resetDrawables(@NonNull Set<String> drawableIds)", "public Drawable getDrawable(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull Supplier<Drawable> defaultDrawableLoader)", "public Drawable getDrawable(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull String drawableSource, @NonNull Supplier<Drawable> defaultDrawableLoader)", "public Drawable getDrawableForDensity(@NonNull String drawableId, @NonNull String drawableStyle, int density, @NonNull Supplier<Drawable> defaultDrawableLoader)", "public Drawable getDrawableForDensity(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull String drawableSource, int density, @NonNull Supplier<Drawable> defaultDrawableLoader)", "public Icon getDrawableAsIcon(@NonNull String drawableId, @NonNull String drawableStyle, @NonNull String drawableSource, @Nullable Icon defaultIcon)", "public Icon getDrawableAsIcon(@NonNull String drawableId, @NonNull String drawableStyle, @Nullable Icon defaultIcon)", "public void setStrings(@NonNull Set<DevicePolicyStringResource> strings)", "public void resetStrings(@NonNull Set<String> stringIds)", "public String getString(@NonNull String stringId, @NonNull Supplier<String> defaultStringLoader)", "public String getString(@NonNull String stringId, @NonNull Supplier<String> defaultStringLoader, @NonNull Object... formatArgs)" ],
  "variableNames" : [ "TAG", "DISABLE_RESOURCES_UPDATABILITY_FLAG", "DEFAULT_DISABLE_RESOURCES_UPDATABILITY", "mContext", "mService" ]
}