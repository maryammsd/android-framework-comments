{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/LongSparseLongArray.java",
  "packageName" : "android.util",
  "className" : "LongSparseLongArray",
  "comment" : "\n * Map of {@code long} to {@code long}. Unlike a normal array of longs, there\n * can be gaps in the indices. It is intended to be more memory efficient than using a\n * {@code HashMap}, both because it avoids\n * auto-boxing keys and values and its data structure doesn't rely on an extra entry object\n * for each mapping.\n *\n * <p>Note that this container keeps its mappings in an array data structure,\n * using a binary search to find keys.  The implementation is not intended to be appropriate for\n * data structures\n * that may contain large numbers of items.  It is generally slower than a traditional\n * HashMap, since lookups require a binary search and adds and removes require inserting\n * and deleting entries in the array.  For containers holding up to hundreds of items,\n * the performance difference is not significant, less than 50%.</p>\n *\n * <p>It is possible to iterate over the items in this container using\n * {@link #keyAt(int)} and {@link #valueAt(int)}. Iterating over the keys using\n * <code>keyAt(int)</code> with ascending values of the index will return the\n * keys in ascending order, or the values corresponding to the keys in ascending\n * order in the case of <code>valueAt(int)</code>.</p>\n *\n * @hide\n ",
  "links" : [ "#keyAt(int)", "#valueAt(int)" ],
  "variables" : [ {
    "name" : "mKeys",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public LongSparseLongArray clone()",
    "returnType" : "LongSparseLongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long get(long key)",
    "returnType" : "long",
    "comment" : "\n     * Gets the long mapped from the specified key, or <code>0</code>\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long get(long key, long valueIfKeyNotFound)",
    "returnType" : "long",
    "comment" : "\n     * Gets the long mapped from the specified key, or the specified value\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void delete(long key)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping from the specified key, if there was any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping at the given index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(long key, long value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a mapping from the specified key to the specified value,\n     * replacing the previous mapping from the specified key if there\n     * was one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of key-value mappings that this SparseIntArray\n     * currently stores.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long keyAt(int index)",
    "returnType" : "long",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the key from the <code>index</code>th key-value mapping that this\n     * SparseLongArray stores.\n     *\n     * <p>The keys corresponding to indices in ascending order are guaranteed to\n     * be in ascending order, e.g., <code>keyAt(0)</code> will return the\n     * smallest key and <code>keyAt(size()-1)</code> will return the largest\n     * key.</p>\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public long valueAt(int index)",
    "returnType" : "long",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the value from the <code>index</code>th key-value mapping that this\n     * SparseLongArray stores.\n     *\n     * <p>The values corresponding to indices in ascending order are guaranteed\n     * to be associated with keys in ascending order, e.g.,\n     * <code>valueAt(0)</code> will return the value associated with the\n     * smallest key and <code>valueAt(size()-1)</code> will return the value\n     * associated with the largest key.</p>\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#Q", "ArrayIndexOutOfBoundsException" ]
  }, {
    "name" : "public int indexOfKey(long key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index for which {@link #keyAt} would return the\n     * specified key, or a negative number if the specified\n     * key is not mapped.\n     ",
    "links" : [ "#keyAt" ]
  }, {
    "name" : "public int indexOfValue(long value)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index for which {@link #valueAt} would return the\n     * specified key, or a negative number if no keys map to the\n     * specified value.\n     * Beware that this is a linear search, unlike lookups by key,\n     * and that multiple keys can map to the same value and this will\n     * find only one of them.\n     ",
    "links" : [ "#valueAt" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all key-value mappings from this SparseIntArray.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void append(long key, long value)",
    "returnType" : "void",
    "comment" : "\n     * Puts a key/value pair into the array, optimizing for the case where\n     * the key is greater than all existing keys in the array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation composes a string by iterating over its mappings.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public LongSparseLongArray clone()", "public long get(long key)", "public long get(long key, long valueIfKeyNotFound)", "public void delete(long key)", "public void removeAt(int index)", "public void put(long key, long value)", "public int size()", "public long keyAt(int index)", "public long valueAt(int index)", "public int indexOfKey(long key)", "public int indexOfValue(long value)", "public void clear()", "public void append(long key, long value)", "public String toString()" ],
  "variableNames" : [ "mKeys", "mValues", "mSize" ]
}