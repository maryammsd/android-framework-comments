{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Editor.java",
  "packageName" : "android.widget",
  "className" : "Editor",
  "comment" : "\n * Helper class used by TextView to handle editable text views.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_UNDO",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_USE_MAGNIFIER",
    "type" : "boolean",
    "comment" : " Specifies whether to use the magnifier when pressing the insertion or selection handles.",
    "links" : [ ]
  }, {
    "name" : "DELAY_BEFORE_HANDLE_FADES_OUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECENT_CUT_COPY_DURATION_MS",
    "type" : "int",
    "comment" : " 15 seconds in millis",
    "links" : [ ]
  }, {
    "name" : "BLINK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DRAG_SHADOW_MAX_TEXT_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LINE_SLOP_MULTIPLIER_FOR_HANDLEVIEWS",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_X_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_LINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDO_OWNER_TAG",
    "type" : "String",
    "comment" : " Tag used when the Editor maintains its own separate UndoManager.",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_ASSIST",
    "type" : "int",
    "comment" : " Ordering constants used to place the Action Mode or context menu items in their menu.",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_UNDO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_REDO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_CUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_COPY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_PASTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_SHARE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_SELECT_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_REPLACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_AUTOFILL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_PASTE_AS_PLAIN_TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_SECONDARY_ASSIST_ACTIONS_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MENU_ITEM_ORDER_PROCESS_TEXT_INTENT_ACTIONS_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUndoManager",
    "type" : "UndoManager",
    "comment" : " Each Editor manages its own undo stack.",
    "links" : [ ]
  }, {
    "name" : "mUndoOwner",
    "type" : "UndoOwner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUndoInputFilter",
    "type" : "UndoInputFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowUndo",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetricsLogger",
    "type" : "MetricsLogger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionPointCursorController",
    "type" : "InsertionPointCursorController",
    "comment" : " Cursor Controllers.",
    "links" : [ ]
  }, {
    "name" : "mSelectionModifierCursorController",
    "type" : "SelectionModifierCursorController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextActionMode",
    "type" : "ActionMode",
    "comment" : " Action mode used when text is selected or when actions on an insertion cursor are triggered.",
    "links" : [ ]
  }, {
    "name" : "mInsertionControllerEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionControllerEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHapticTextHandleEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMagnifierAnimator",
    "type" : "MagnifierMotionAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateMagnifierRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMagnifierOnDrawListener",
    "type" : "ViewTreeObserver.OnDrawListener",
    "comment" : " RenderThread.",
    "links" : [ ]
  }, {
    "name" : "mCorrectionHighlighter",
    "type" : "CorrectionHighlighter",
    "comment" : " Used to highlight a word when it is corrected by the IME",
    "links" : [ ]
  }, {
    "name" : "mInputContentType",
    "type" : "InputContentType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputMethodState",
    "type" : "InputMethodState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextRenderNodes",
    "type" : "TextRenderNode[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrozenWithFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionMoved",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchFocusSelected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyListener",
    "type" : "KeyListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDiscardNextActionUp",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreActionUpEvent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowCursor",
    "type" : "long",
    "comment" : "\n     * To set a custom cursor, you should use {@link TextView#setTextCursorDrawable(Drawable)}\n     * or {@link TextView#setTextCursorDrawable(int)}.\n     ",
    "links" : [ "android.widget.TextView#setTextCursorDrawable(int)", "android.widget.TextView#setTextCursorDrawable(Drawable)" ]
  }, {
    "name" : "mRenderCursorRegardlessTiming",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlink",
    "type" : "Blink",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursorVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectAllOnFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextIsSelectable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mError",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorWasChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorPopup",
    "type" : "ErrorPopup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowErrorAfterAttach",
    "type" : "boolean",
    "comment" : "\n     * This flag is set if the TextView tries to display an error before it\n     * is attached to the window (so its position is still unknown).\n     * It causes the error to be shown later, when onAttachedToWindow()\n     * is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInBatchEditControllers",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowSoftInputOnFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreserveSelection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRestartActionModeOnNextRefresh",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestingLinkActionMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionActionModeHelper",
    "type" : "SelectionActionModeHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsBeingLongClicked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsBeingLongClickedByAccessibility",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuggestionsPopupWindow",
    "type" : "SuggestionsPopupWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuggestionRangeSpan",
    "type" : "SuggestionRangeSpan",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowSuggestionRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableForCursor",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectHandleLeft",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectHandleRight",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectHandleCenter",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositionListener",
    "type" : "PositionListener",
    "comment" : " Global listener that detects changes in the global position of the TextView",
    "links" : [ ]
  }, {
    "name" : "mContextMenuAnchorX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContextMenuAnchorY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomSelectionActionModeCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomInsertionActionModeCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCreatedWithASelection",
    "type" : "boolean",
    "comment" : " Set when this TextView gained focus with some text selected. Will start selection mode.",
    "links" : [ ]
  }, {
    "name" : "mLastButtonState",
    "type" : "int",
    "comment" : " The button state as of the last time #onTouchEvent is called.",
    "links" : [ ]
  }, {
    "name" : "mTouchState",
    "type" : "EditorTouchState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertionActionModeRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanController",
    "type" : "SpanController",
    "comment" : " - SelectionSpans, for which we need to call updateSelection if an IME is attached",
    "links" : [ ]
  }, {
    "name" : "mWordIterator",
    "type" : "WordIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpellChecker",
    "type" : "SpellChecker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWordIteratorWithText",
    "type" : "WordIterator",
    "comment" : " when a user is selecting text.",
    "links" : [ ]
  }, {
    "name" : "mUpdateWordIteratorText",
    "type" : "boolean",
    "comment" : " Indicate that the text in the word iterator needs to be updated.",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProcessTextIntentActionsHandler",
    "type" : "ProcessTextIntentActionsHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursorAnchorInfoNotifier",
    "type" : "CursorAnchorInfoNotifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowFloatingToolbar",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInsertionActionModeStartPending",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuggestionHelper",
    "type" : "SuggestionHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlagCursorDragFromAnywhereEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlagInsertionHandleGesturesEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNewMagnifierEnabled",
    "type" : "boolean",
    "comment" : " Specifies whether the new magnifier (with fish-eye effect) is enabled.",
    "links" : [ ]
  }, {
    "name" : "MIN_LINE_HEIGHT_FOR_MAGNIFIER",
    "type" : "int",
    "comment" : " Line height range in DP for the new magnifier.",
    "links" : [ ]
  }, {
    "name" : "MAX_LINE_HEIGHT_FOR_MAGNIFIER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinLineHeightForMagnifier",
    "type" : "int",
    "comment" : "    to make sure the text can be seen clearly.",
    "links" : [ ]
  }, {
    "name" : "mMaxLineHeightForMagnifier",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialZoom",
    "type" : "float",
    "comment" : " The actual zoom value may changes based on this initial zoom value.",
    "links" : [ ]
  }, {
    "name" : "LINE_CHANGE_SLOP_MAX_DP",
    "type" : "int",
    "comment" : " The slop max/min value include line height and the slop on the upper/lower line.",
    "links" : [ ]
  }, {
    "name" : "LINE_CHANGE_SLOP_MIN_DP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineChangeSlopMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineChangeSlopMin",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRACT_NOTHING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRACT_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnContextMenuItemClickListener",
    "type" : "MenuItem.OnMenuItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_TYPE_SELECTION_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_TYPE_SELECTION_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean getFlagCursorDragFromAnywhereEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFlagCursorDragFromAnywhereEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getFlagInsertionHandleGesturesEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFlagInsertionHandleGesturesEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MagnifierMotionAnimator getMagnifierAnimator()",
    "returnType" : "MagnifierMotionAnimator",
    "comment" : " Lazy creates the magnifier animator.",
    "links" : [ ]
  }, {
    "name" : "private Magnifier.Builder createBuilderWithInlineMagnifierDefaults()",
    "returnType" : "Magnifier.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ParcelableParcel saveInstanceState()",
    "returnType" : "ParcelableParcel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void restoreInstanceState(ParcelableParcel state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void forgetUndoRedo()",
    "returnType" : "void",
    "comment" : "\n     * Forgets all undo and redo operations for this Editor.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean canUndo()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean canRedo()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void undo()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void redo()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void replace()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void discardTextDisplayLists()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showError()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setError(CharSequence error, Drawable icon)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setErrorIcon(Drawable icon)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void hideError()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getErrorX()",
    "returnType" : "int",
    "comment" : "\n     * Returns the X offset to make the pointy top of the error point\n     * at the middle of the error icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getErrorY()",
    "returnType" : "int",
    "comment" : "\n     * Returns the Y offset to make the pointy top of the error point\n     * at the bottom of the error icon.\n     ",
    "links" : [ ]
  }, {
    "name" : " void createInputContentTypeIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createInputMethodStateIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCursorVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean shouldRenderCursor()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void prepareCursorControllers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hideInsertionPointCursorController()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hideCursorAndSpanControllers()",
    "returnType" : "void",
    "comment" : "\n     * Hides the insertion and span controllers.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void hideSpanControllers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void hideCursorControllers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSpellCheckSpans(int start, int end, boolean createSpellChecker)",
    "returnType" : "void",
    "comment" : "\n     * Create new SpellCheckSpans on the modified region.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onScreenStateChanged(int screenState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void suspendBlink()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resumeBlink()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void adjustInputType(boolean password, boolean passwordInputType, boolean webPasswordInputType, boolean numberPasswordInputType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void chooseSize(@NonNull PopupWindow pop, @NonNull CharSequence text, @NonNull TextView tv)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setFrame()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getWordStart(int offset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getWordEnd(int offset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean needsToSelectAllToSelectWordOrParagraph()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean selectCurrentWord()",
    "returnType" : "boolean",
    "comment" : "\n     * Adjusts selection to the word under last touch offset. Return true if the operation was\n     * successfully performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean selectCurrentParagraph()",
    "returnType" : "boolean",
    "comment" : "\n     * Adjusts selection to the paragraph under last touch offset. Return true if the operation was\n     * successfully performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long getParagraphsRange(int startOffset, int endOffset)",
    "returnType" : "long",
    "comment" : "\n     * Get the minimum range of paragraphs that contains startOffset and endOffset.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onLocaleChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WordIterator getWordIterator()",
    "returnType" : "WordIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WordIterator getWordIteratorWithText()",
    "returnType" : "WordIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getNextCursorOffset(int offset, boolean findAfterGivenOffset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getCharClusterRange(int offset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean touchPositionIsInSelection()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PositionListener getPositionListener()",
    "returnType" : "PositionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isOffsetVisible(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPositionOnText(float x, float y)",
    "returnType" : "boolean",
    "comment" : " Returns true if the screen coordinates position (x,y) corresponds to a character displayed\n     * in the view. Returns false when the position is in the empty space of left/right of text.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void startDragAndDrop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performLongClick(boolean handled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void toggleInsertionActionMode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " float getLastUpPositionX()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " float getLastUpPositionY()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getLastTouchOffsets()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onFocusChanged(boolean focused, int direction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureNoSelectionIfNonSelectable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void downgradeEasyCorrectionSpans()",
    "returnType" : "void",
    "comment" : "\n     * Downgrades to simple suggestions all the easy correction spans that are not a spell check\n     * span.\n     ",
    "links" : [ ]
  }, {
    "name" : " void sendOnTextChanged(int start, int before, int after)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getLastTapPosition()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldFilterOutTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTouchEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Handles touch events on an editable text view, implementing cursor movement, selection, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateFloatingToolbarVisibility(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hideFloatingToolbar(int duration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showFloatingToolbar()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private InputMethodManager getInputMethodManager()",
    "returnType" : "InputMethodManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void beginBatchEdit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endBatchEdit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void ensureEndedBatchEdit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishBatchEdit(final InputMethodState ims)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean extractText(ExtractedTextRequest request, ExtractedText outText)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean extractTextInternal(@Nullable ExtractedTextRequest request, int partialStartOffset, int partialEndOffset, int delta, @Nullable ExtractedText outText)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean reportExtractedText()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendUpdateSelection()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onDraw(Canvas canvas, Layout layout, Path highlight, Paint highlightPaint, int cursorOffsetVertical)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawHardwareAccelerated(Canvas canvas, Layout layout, Path highlight, Paint highlightPaint, int cursorOffsetVertical)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int drawHardwareAcceleratedInner(Canvas canvas, Layout layout, Path highlight, Paint highlightPaint, int cursorOffsetVertical, int[] blockEndLines, int[] blockIndices, int blockInfoIndex, int numberOfBlocks, int startIndexToFindAvailableRenderNode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getAvailableDisplayListIndex(int[] blockIndices, int numberOfBlocks, int searchStartIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawCursor(Canvas canvas, int cursorOffsetVertical)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidateHandlesAndActionMode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidateTextDisplayList(Layout layout, int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Invalidates all the sub-display lists that overlap the specified character range\n     ",
    "links" : [ ]
  }, {
    "name" : " void invalidateTextDisplayList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void updateCursorPosition()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void refreshTextActionMode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startInsertionActionMode()",
    "returnType" : "void",
    "comment" : "\n     * Start an Insertion action mode.\n     ",
    "links" : [ ]
  }, {
    "name" : " TextView getTextView()",
    "returnType" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ActionMode getTextActionMode()",
    "returnType" : "ActionMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setRestartActionModeOnNextRefresh(boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startSelectionActionModeAsync(boolean adjustSelection)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously starts a selection action mode using the TextClassifier.\n     ",
    "links" : [ ]
  }, {
    "name" : " void startLinkActionModeAsync(int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidateActionModeAsync()",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously invalidates an action mode using the TextClassifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void invalidateActionMode()",
    "returnType" : "void",
    "comment" : "\n     * Synchronously invalidates an action mode without the TextClassifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "private SelectionActionModeHelper getSelectionActionModeHelper()",
    "returnType" : "SelectionActionModeHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean selectCurrentWordAndStartDrag()",
    "returnType" : "boolean",
    "comment" : "\n     * If the TextView allows text selection, selects the current word when no existing selection\n     * was available and starts a drag.\n     *\n     * @return true if the drag was started.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean checkField()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a selection can be performed on the current TextView.\n     *\n     * @return true if a selection can be performed\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean startActionModeInternal(@TextActionMode int actionMode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean extractedTextModeWillBeStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldOfferToShowSuggestions()",
    "returnType" : "boolean",
    "comment" : "\n     * @return <code>true</code> if it's reasonable to offer to show suggestions depending on\n     * the current cursor position or selection range. This method is consistent with the\n     * method to show suggestions {@link SuggestionsPopupWindow#updateSuggestions}.\n     ",
    "links" : [ "#updateSuggestions" ]
  }, {
    "name" : "private boolean isCursorInsideEasyCorrectionSpan()",
    "returnType" : "boolean",
    "comment" : "\n     * @return <code>true</code> if the cursor is inside an {@link SuggestionSpan} with\n     * {@link SuggestionSpan#FLAG_EASY_CORRECT} set.\n     ",
    "links" : [ "android.text.style.SuggestionSpan#FLAG_EASY_CORRECT", "android.text.style.SuggestionSpan" ]
  }, {
    "name" : " void onTouchUpEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void onTextOperationUserChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called when {@link TextView#mTextOperationUser} has changed.\n     *\n     * <p>Any user-specific resources need to be refreshed here.</p>\n     ",
    "links" : [ "android.widget.TextView#mTextOperationUser" ]
  }, {
    "name" : "protected void stopTextActionMode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopTextActionModeWithPreservingSelection()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasInsertionController()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if this view supports insertion handles.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasSelectionController()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if this view supports selection handles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsertionPointCursorController getInsertionController()",
    "returnType" : "InsertionPointCursorController",
    "comment" : " Returns the controller for the insertion cursor. ",
    "links" : [ ]
  }, {
    "name" : "public SelectionModifierCursorController getSelectionController()",
    "returnType" : "SelectionModifierCursorController",
    "comment" : " Returns the controller for selection. ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCursorDrawable()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCursorPosition(int top, int bottom, float horizontal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int clampHorizontalPosition(@Nullable final Drawable drawable, float horizontal)",
    "returnType" : "int",
    "comment" : "\n     * Return clamped position for the drawable. If the drawable is within the boundaries of the\n     * view, then it is offset with the left padding of the cursor drawable. If the drawable is at\n     * the beginning or the end of the text then its drawable edge is aligned with left or right of\n     * the view boundary. If the drawable is null, horizontal parameter is aligned to left or right\n     * of the view.\n     *\n     * @param drawable Drawable. Can be null.\n     * @param horizontal Horizontal position for the drawable.\n     * @return The clamped horizontal position for the drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCommitCorrection(CorrectionInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Called by the framework in response to a text auto-correction (such as fixing a typo using a\n     * a dictionary) from the current input method, provided by it calling\n     * {@link InputConnection#commitCorrection} InputConnection.commitCorrection()}. The default\n     * implementation flashes the background of the corrected word to provide feedback to the user.\n     *\n     * @param info The auto correct info about the text that was corrected.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#commitCorrection" ]
  }, {
    "name" : " void onScrollChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldBlink()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True when the TextView isFocused and has a valid zero-length selection (cursor).\n     ",
    "links" : [ ]
  }, {
    "name" : " void makeBlink()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private DragShadowBuilder getTextThumbnailBuilder(int start, int end)",
    "returnType" : "DragShadowBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onDrop(DragEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addSpanWatchers(Spannable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setContextMenuAnchor(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onCreateContextMenu(ContextMenu menu)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SuggestionSpan findEquivalentSuggestionSpan(@NonNull SuggestionSpanInfo suggestionSpanInfo)",
    "returnType" : "SuggestionSpan",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void replaceWithSuggestion(@NonNull final SuggestionInfo suggestionInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLineChangeSlopMinMaxForTesting(final int min, final int max)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentLineAdjustedForSlop(Layout layout, int prevLine, float y)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void loadCursorDrawable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void loadHandleDrawables(final boolean overwrite)",
    "returnType" : "void",
    "comment" : "\n     * Loads the insertion and selection handle Drawables from TextView. If the handle\n     * drawables are already loaded, do not overwrite them unless the method parameter\n     * is set to true. This logic is required to avoid overwriting Drawables assigned\n     * to mSelectHandle[Center/Left/Right] by developers using reflection, unless they\n     * explicitly call the setters in TextView.\n     *\n     * @param overwrite whether to overwrite already existing nonnull Drawables\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidRange(CharSequence text, int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * @return True iff (start, end) is a valid range within the text.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void logCursor(String location, @Nullable String msgFormat, Object... msgArgs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG_UNDO", "FLAG_USE_MAGNIFIER", "DELAY_BEFORE_HANDLE_FADES_OUT", "RECENT_CUT_COPY_DURATION_MS", "BLINK", "DRAG_SHADOW_MAX_TEXT_LENGTH", "LINE_SLOP_MULTIPLIER_FOR_HANDLEVIEWS", "UNSET_X_VALUE", "UNSET_LINE", "UNDO_OWNER_TAG", "MENU_ITEM_ORDER_ASSIST", "MENU_ITEM_ORDER_UNDO", "MENU_ITEM_ORDER_REDO", "MENU_ITEM_ORDER_CUT", "MENU_ITEM_ORDER_COPY", "MENU_ITEM_ORDER_PASTE", "MENU_ITEM_ORDER_SHARE", "MENU_ITEM_ORDER_SELECT_ALL", "MENU_ITEM_ORDER_REPLACE", "MENU_ITEM_ORDER_AUTOFILL", "MENU_ITEM_ORDER_PASTE_AS_PLAIN_TEXT", "MENU_ITEM_ORDER_SECONDARY_ASSIST_ACTIONS_START", "MENU_ITEM_ORDER_PROCESS_TEXT_INTENT_ACTIONS_START", "mUndoManager", "mUndoOwner", "mUndoInputFilter", "mAllowUndo", "mMetricsLogger", "mInsertionPointCursorController", "mSelectionModifierCursorController", "mTextActionMode", "mInsertionControllerEnabled", "mSelectionControllerEnabled", "mHapticTextHandleEnabled", "mMagnifierAnimator", "mUpdateMagnifierRunnable", "mMagnifierOnDrawListener", "mCorrectionHighlighter", "mInputContentType", "mInputMethodState", "mTextRenderNodes", "mFrozenWithFocus", "mSelectionMoved", "mTouchFocusSelected", "mKeyListener", "mInputType", "mDiscardNextActionUp", "mIgnoreActionUpEvent", "mShowCursor", "mRenderCursorRegardlessTiming", "mBlink", "mCursorVisible", "mSelectAllOnFocus", "mTextIsSelectable", "mError", "mErrorWasChanged", "mErrorPopup", "mShowErrorAfterAttach", "mInBatchEditControllers", "mShowSoftInputOnFocus", "mPreserveSelection", "mRestartActionModeOnNextRefresh", "mRequestingLinkActionMode", "mSelectionActionModeHelper", "mIsBeingLongClicked", "mIsBeingLongClickedByAccessibility", "mSuggestionsPopupWindow", "mSuggestionRangeSpan", "mShowSuggestionRunnable", "mDrawableForCursor", "mSelectHandleLeft", "mSelectHandleRight", "mSelectHandleCenter", "mPositionListener", "mContextMenuAnchorX", "mContextMenuAnchorY", "mCustomSelectionActionModeCallback", "mCustomInsertionActionModeCallback", "mCreatedWithASelection", "mLastButtonState", "mTouchState", "mInsertionActionModeRunnable", "mSpanController", "mWordIterator", "mSpellChecker", "mWordIteratorWithText", "mUpdateWordIteratorText", "mTempRect", "mTextView", "mProcessTextIntentActionsHandler", "mCursorAnchorInfoNotifier", "mShowFloatingToolbar", "mIsInsertionActionModeStartPending", "mSuggestionHelper", "mFlagCursorDragFromAnywhereEnabled", "mFlagInsertionHandleGesturesEnabled", "mNewMagnifierEnabled", "MIN_LINE_HEIGHT_FOR_MAGNIFIER", "MAX_LINE_HEIGHT_FOR_MAGNIFIER", "mMinLineHeightForMagnifier", "mMaxLineHeightForMagnifier", "mInitialZoom", "LINE_CHANGE_SLOP_MAX_DP", "LINE_CHANGE_SLOP_MIN_DP", "mLineChangeSlopMax", "mLineChangeSlopMin", "EXTRACT_NOTHING", "EXTRACT_UNKNOWN", "mOnContextMenuItemClickListener", "HANDLE_TYPE_SELECTION_START", "HANDLE_TYPE_SELECTION_END" ],
  "methodNames" : [ "public boolean getFlagCursorDragFromAnywhereEnabled()", "public void setFlagCursorDragFromAnywhereEnabled(boolean enabled)", "public boolean getFlagInsertionHandleGesturesEnabled()", "public void setFlagInsertionHandleGesturesEnabled(boolean enabled)", "private MagnifierMotionAnimator getMagnifierAnimator()", "private Magnifier.Builder createBuilderWithInlineMagnifierDefaults()", " ParcelableParcel saveInstanceState()", " void restoreInstanceState(ParcelableParcel state)", " void forgetUndoRedo()", " boolean canUndo()", " boolean canRedo()", " void undo()", " void redo()", " void replace()", " void onAttachedToWindow()", " void onDetachedFromWindow()", "private void discardTextDisplayLists()", "private void showError()", "public void setError(CharSequence error, Drawable icon)", "private void setErrorIcon(Drawable icon)", "private void hideError()", "private int getErrorX()", "private int getErrorY()", " void createInputContentTypeIfNeeded()", " void createInputMethodStateIfNeeded()", "private boolean isCursorVisible()", " boolean shouldRenderCursor()", " void prepareCursorControllers()", " void hideInsertionPointCursorController()", " void hideCursorAndSpanControllers()", "private void hideSpanControllers()", "private void hideCursorControllers()", "private void updateSpellCheckSpans(int start, int end, boolean createSpellChecker)", " void onScreenStateChanged(int screenState)", "private void suspendBlink()", "private void resumeBlink()", " void adjustInputType(boolean password, boolean passwordInputType, boolean webPasswordInputType, boolean numberPasswordInputType)", "private void chooseSize(@NonNull PopupWindow pop, @NonNull CharSequence text, @NonNull TextView tv)", " void setFrame()", "private int getWordStart(int offset)", "private int getWordEnd(int offset)", "private boolean needsToSelectAllToSelectWordOrParagraph()", " boolean selectCurrentWord()", "private boolean selectCurrentParagraph()", "private long getParagraphsRange(int startOffset, int endOffset)", " void onLocaleChanged()", "public WordIterator getWordIterator()", "private WordIterator getWordIteratorWithText()", "private int getNextCursorOffset(int offset, boolean findAfterGivenOffset)", "private long getCharClusterRange(int offset)", "private boolean touchPositionIsInSelection()", "private PositionListener getPositionListener()", "private boolean isOffsetVisible(int offset)", "private boolean isPositionOnText(float x, float y)", "private void startDragAndDrop()", "public boolean performLongClick(boolean handled)", "private void toggleInsertionActionMode()", " float getLastUpPositionX()", " float getLastUpPositionY()", "private long getLastTouchOffsets()", " void onFocusChanged(boolean focused, int direction)", "private void ensureNoSelectionIfNonSelectable()", "private void downgradeEasyCorrectionSpans()", " void sendOnTextChanged(int start, int before, int after)", "private int getLastTapPosition()", " void onWindowFocusChanged(boolean hasWindowFocus)", "private boolean shouldFilterOutTouchEvent(MotionEvent event)", "public void onTouchEvent(MotionEvent event)", "private void updateFloatingToolbarVisibility(MotionEvent event)", " void hideFloatingToolbar(int duration)", "private void showFloatingToolbar()", "private InputMethodManager getInputMethodManager()", "public void beginBatchEdit()", "public void endBatchEdit()", " void ensureEndedBatchEdit()", " void finishBatchEdit(final InputMethodState ims)", " boolean extractText(ExtractedTextRequest request, ExtractedText outText)", "private boolean extractTextInternal(@Nullable ExtractedTextRequest request, int partialStartOffset, int partialEndOffset, int delta, @Nullable ExtractedText outText)", " boolean reportExtractedText()", "private void sendUpdateSelection()", " void onDraw(Canvas canvas, Layout layout, Path highlight, Paint highlightPaint, int cursorOffsetVertical)", "private void drawHardwareAccelerated(Canvas canvas, Layout layout, Path highlight, Paint highlightPaint, int cursorOffsetVertical)", "private int drawHardwareAcceleratedInner(Canvas canvas, Layout layout, Path highlight, Paint highlightPaint, int cursorOffsetVertical, int[] blockEndLines, int[] blockIndices, int blockInfoIndex, int numberOfBlocks, int startIndexToFindAvailableRenderNode)", "private int getAvailableDisplayListIndex(int[] blockIndices, int numberOfBlocks, int searchStartIndex)", "private void drawCursor(Canvas canvas, int cursorOffsetVertical)", " void invalidateHandlesAndActionMode()", " void invalidateTextDisplayList(Layout layout, int start, int end)", " void invalidateTextDisplayList()", " void updateCursorPosition()", " void refreshTextActionMode()", " void startInsertionActionMode()", " TextView getTextView()", " ActionMode getTextActionMode()", " void setRestartActionModeOnNextRefresh(boolean value)", " void startSelectionActionModeAsync(boolean adjustSelection)", " void startLinkActionModeAsync(int start, int end)", " void invalidateActionModeAsync()", "private void invalidateActionMode()", "private SelectionActionModeHelper getSelectionActionModeHelper()", "private boolean selectCurrentWordAndStartDrag()", " boolean checkField()", " boolean startActionModeInternal(@TextActionMode int actionMode)", "private boolean extractedTextModeWillBeStarted()", "private boolean shouldOfferToShowSuggestions()", "private boolean isCursorInsideEasyCorrectionSpan()", " void onTouchUpEvent(MotionEvent event)", " final void onTextOperationUserChanged()", "protected void stopTextActionMode()", "private void stopTextActionModeWithPreservingSelection()", " boolean hasInsertionController()", " boolean hasSelectionController()", "public InsertionPointCursorController getInsertionController()", "public SelectionModifierCursorController getSelectionController()", "public Drawable getCursorDrawable()", "private void updateCursorPosition(int top, int bottom, float horizontal)", "private int clampHorizontalPosition(@Nullable final Drawable drawable, float horizontal)", "public void onCommitCorrection(CorrectionInfo info)", " void onScrollChanged()", "private boolean shouldBlink()", " void makeBlink()", "private DragShadowBuilder getTextThumbnailBuilder(int start, int end)", " void onDrop(DragEvent event)", "public void addSpanWatchers(Spannable text)", " void setContextMenuAnchor(float x, float y)", " void onCreateContextMenu(ContextMenu menu)", "private SuggestionSpan findEquivalentSuggestionSpan(@NonNull SuggestionSpanInfo suggestionSpanInfo)", "private void replaceWithSuggestion(@NonNull final SuggestionInfo suggestionInfo)", "public void setLineChangeSlopMinMaxForTesting(final int min, final int max)", "public int getCurrentLineAdjustedForSlop(Layout layout, int prevLine, float y)", " void loadCursorDrawable()", " void loadHandleDrawables(final boolean overwrite)", "private static boolean isValidRange(CharSequence text, int start, int end)", " static void logCursor(String location, @Nullable String msgFormat, Object... msgArgs)" ]
}