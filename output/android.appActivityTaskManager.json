{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ActivityTaskManager.java",
  "packageName" : "android.app",
  "className" : "ActivityTaskManager",
  "comment" : "\n * This class gives information about, and interacts with activities and their containers like task,\n * stacks, and displays.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "INVALID_STACK_ID",
    "type" : "int",
    "comment" : " Invalid stack ID. ",
    "links" : [ ]
  }, {
    "name" : "INVALID_TASK_ID",
    "type" : "int",
    "comment" : "\n     * Invalid task ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT",
    "type" : "int",
    "comment" : "\n     * Parameter to {@link IActivityTaskManager#setTaskWindowingModeSplitScreenPrimary} which\n     * specifies the position of the created docked stack at the top half of the screen if\n     * in portrait mode or at the left half of the screen if in landscape mode.\n     ",
    "links" : [ "IActivityTaskManager#setTaskWindowingModeSplitScreenPrimary" ]
  }, {
    "name" : "SPLIT_SCREEN_CREATE_MODE_BOTTOM_OR_RIGHT",
    "type" : "int",
    "comment" : "\n     * Parameter to {@link IActivityTaskManager#setTaskWindowingModeSplitScreenPrimary} which\n     * specifies the position of the created docked stack at the bottom half of the screen if\n     * in portrait mode or at the right half of the screen if in landscape mode.\n     ",
    "links" : [ "IActivityTaskManager#setTaskWindowingModeSplitScreenPrimary" ]
  }, {
    "name" : "RESIZE_MODE_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize doesn't need to preserve the window, and can be skipped if bounds\n     * is unchanged. This mode is used by window manager in most cases.\n     * @hide\n     ",
    "links" : [ "IActivityTaskManager#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_PRESERVE_WINDOW",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize should preserve the window if possible.\n     * @hide\n     ",
    "links" : [ "IActivityTaskManager#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_USER",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} used when the\n     * resize is due to a drag action.\n     * @hide\n     ",
    "links" : [ "IActivityTaskManager#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_SYSTEM_SCREEN_ROTATION",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} used by window\n     * manager during a screen rotation.\n     * @hide\n     ",
    "links" : [ "IActivityTaskManager#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_FORCED",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize should be performed even if the bounds appears unchanged.\n     * @hide\n     ",
    "links" : [ "IActivityTaskManager#resizeTask" ]
  }, {
    "name" : "RESIZE_MODE_USER_FORCED",
    "type" : "int",
    "comment" : "\n     * Input parameter to {@link IActivityTaskManager#resizeTask} which indicates\n     * that the resize should preserve the window if possible, and should not be skipped\n     * even if the bounds is unchanged. Usually used to force a resizing when a drag action\n     * is ending.\n     * @hide\n     ",
    "links" : [ "IActivityTaskManager#resizeTask" ]
  }, {
    "name" : "EXTRA_PERMISSION_TOKEN",
    "type" : "String",
    "comment" : "\n     * Extra included on intents that are delegating the call to\n     * ActivityManager#startActivityAsCaller to another app.  This token is necessary for that call\n     * to succeed.  Type is IBinder.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_OPTIONS",
    "type" : "String",
    "comment" : "\n     * Extra included on intents that contain an EXTRA_INTENT, with options that the contained\n     * intent may want to be started with.  Type is Bundle.\n     * TODO: remove once the ChooserActivity moves to systemui\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IGNORE_TARGET_SECURITY",
    "type" : "String",
    "comment" : "\n     * Extra included on intents that contain an EXTRA_INTENT, use this boolean value for the\n     * parameter of the same name when starting the contained intent.\n     * TODO: remove once the ChooserActivity moves to systemui\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sMaxRecentTasks",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IActivityTaskManagerSingleton",
    "type" : "Singleton<IActivityTaskManager>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static IActivityTaskManager getService()",
    "returnType" : "IActivityTaskManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean setTaskWindowingMode(int taskId, int windowingMode, boolean toTop) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the windowing mode for a specific task. Only works on tasks of type\n     * {@link WindowConfiguration#ACTIVITY_TYPE_STANDARD}\n     * @param taskId The id of the task to set the windowing mode for.\n     * @param windowingMode The windowing mode to set for the task.\n     * @param toTop If the task should be moved to the top once the windowing mode changes.\n     * @return Whether the task was successfully put into the specified windowing mode.\n     ",
    "links" : [ "WindowConfiguration#ACTIVITY_TYPE_STANDARD" ]
  }, {
    "name" : "public boolean setTaskWindowingModeSplitScreenPrimary(int taskId, int createMode, boolean toTop, boolean animate, Rect initialBounds, boolean showRecents) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the input task to the primary-split-screen stack.\n     * @param taskId Id of task to move.\n     * @param createMode The mode the primary split screen stack should be created in if it doesn't\n     *                   exist already. See\n     *                   {@link ActivityTaskManager#SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT}\n     *                   and\n     *                   {@link android.app.ActivityManager\n     *                        #SPLIT_SCREEN_CREATE_MODE_BOTTOM_OR_RIGHT}\n     * @param toTop If the task and stack should be moved to the top.\n     * @param animate Whether we should play an animation for the moving the task\n     * @param initialBounds If the primary stack gets created, it will use these bounds for the\n     *                      docked stack. Pass {@code null} to use default bounds.\n     * @param showRecents If the recents activity should be shown on the other side of the task\n     *                    going into split-screen mode.\n     * @return Whether the task was successfully put into splitscreen.\n     ",
    "links" : [ "ActivityTaskManager#SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT", "android.app.ActivityManager" ]
  }, {
    "name" : "public void removeStacksInWindowingModes(int[] windowingModes) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Removes stacks in the windowing modes from the system if they are of activity type\n     * ACTIVITY_TYPE_STANDARD or ACTIVITY_TYPE_UNDEFINED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeStacksWithActivityTypes(int[] activityTypes) throws SecurityException",
    "returnType" : "void",
    "comment" : " Removes stack of the activity types from the system. ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllVisibleRecentTasks()",
    "returnType" : "void",
    "comment" : "\n     * Removes all visible recent tasks from the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxRecentTasksStatic()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of recents entries that we will maintain and show.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultAppRecentsLimitStatic()",
    "returnType" : "int",
    "comment" : "\n     * Return the default limit on the number of recents that an app can make.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxAppRecentsLimitStatic()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum limit on the number of recents that an app can make.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean supportsMultiWindow(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the system supports at least one form of multi-window.\n     * E.g. freeform, split-screen, picture-in-picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean supportsSplitScreenMultiWindow(Context context)",
    "returnType" : "boolean",
    "comment" : " Returns true if the system supports split screen multi-window. ",
    "links" : [ ]
  }, {
    "name" : "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the top activity in the input stackId to the pinned stack.\n     * @param stackId Id of stack to move the top activity to pinned stack.\n     * @param bounds Bounds to use for pinned stack.\n     * @return True if the top activity of stack was successfully moved to the pinned stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startSystemLockTaskMode(int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Start to enter lock task mode for given task by system(UI).\n     * @param taskId Id of task to lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopSystemLockTaskMode()",
    "returnType" : "void",
    "comment" : "\n     * Stop lock task mode by system(UI).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void moveTaskToStack(int taskId, int stackId, boolean toTop)",
    "returnType" : "void",
    "comment" : "\n     * Move task to stack with given id.\n     * @param taskId Id of the task to move.\n     * @param stackId Id of the stack for task moving.\n     * @param toTop Whether the given task should shown to top of stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resizeTask(int taskId, Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Resize task to given bounds.\n     * @param taskId Id of task to resize.\n     * @param bounds Bounds to resize task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resizeDockedStack(Rect stackBounds, Rect taskBounds)",
    "returnType" : "void",
    "comment" : "\n     * Resize docked stack & its task to given stack & task bounds.\n     * @param stackBounds Bounds to resize stack.\n     * @param taskBounds Bounds to resize task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String listAllStacks()",
    "returnType" : "String",
    "comment" : "\n     * List all activity stacks information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearLaunchParamsForPackages(List<String> packageNames)",
    "returnType" : "void",
    "comment" : "\n     * Clears launch params for the given package.\n     * @param packageNames the names of the packages of which the launch params are to be cleared\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayToSingleTaskInstance(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Makes the display with the given id a single task instance display. I.e the display can only\n     * contain one task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestPictureInPictureMode(@NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Requests that an activity should enter picture-in-picture mode if possible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Configuration config)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the UI mode of the given config supports error dialogs (ANR, crash, etc).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : " @return whether the current UI mode supports error dialogs (ANR, crash, etc). ",
    "links" : [ ]
  } ],
  "variableNames" : [ "INVALID_STACK_ID", "INVALID_TASK_ID", "SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT", "SPLIT_SCREEN_CREATE_MODE_BOTTOM_OR_RIGHT", "RESIZE_MODE_SYSTEM", "RESIZE_MODE_PRESERVE_WINDOW", "RESIZE_MODE_USER", "RESIZE_MODE_SYSTEM_SCREEN_ROTATION", "RESIZE_MODE_FORCED", "RESIZE_MODE_USER_FORCED", "EXTRA_PERMISSION_TOKEN", "EXTRA_OPTIONS", "EXTRA_IGNORE_TARGET_SECURITY", "sMaxRecentTasks", "IActivityTaskManagerSingleton" ],
  "methodNames" : [ "public static IActivityTaskManager getService()", "public boolean setTaskWindowingMode(int taskId, int windowingMode, boolean toTop) throws SecurityException", "public boolean setTaskWindowingModeSplitScreenPrimary(int taskId, int createMode, boolean toTop, boolean animate, Rect initialBounds, boolean showRecents) throws SecurityException", "public void removeStacksInWindowingModes(int[] windowingModes) throws SecurityException", "public void removeStacksWithActivityTypes(int[] activityTypes) throws SecurityException", "public void removeAllVisibleRecentTasks()", "public static int getMaxRecentTasksStatic()", "public static int getDefaultAppRecentsLimitStatic()", "public static int getMaxAppRecentsLimitStatic()", "public static boolean supportsMultiWindow(Context context)", "public static boolean supportsSplitScreenMultiWindow(Context context)", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void startSystemLockTaskMode(int taskId)", "public void stopSystemLockTaskMode()", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public void resizeTask(int taskId, Rect bounds)", "public void resizeDockedStack(Rect stackBounds, Rect taskBounds)", "public String listAllStacks()", "public void clearLaunchParamsForPackages(List<String> packageNames)", "public void setDisplayToSingleTaskInstance(int displayId)", "public void requestPictureInPictureMode(@NonNull IBinder token)", "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Configuration config)", "public static boolean currentUiModeSupportsErrorDialogs(@NonNull Context context)" ]
}