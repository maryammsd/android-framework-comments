{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/breakiter/LSTMBreakEngine.java",
  "packageName" : "android.icu.impl.breakiter",
  "className" : "LSTMBreakEngine",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_WORD",
    "type" : "byte",
    "comment" : " Minimum word size",
    "links" : [ ]
  }, {
    "name" : "MIN_WORD_SPAN",
    "type" : "byte",
    "comment" : " Minimum number of characters for two words",
    "links" : [ ]
  }, {
    "name" : "fData",
    "type" : "LSTMData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fScript",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fVectorizer",
    "type" : "Vectorizer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static float[][] make2DArray(int[] data, int start, int d1, int d2)",
    "returnType" : "float[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float[] make1DArray(int[] data, int start, int d1)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Vectorizer makeVectorizer(LSTMData data)",
    "returnType" : "Vectorizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean handles(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addDotProductTo(final float[] a, final float[][] b, float[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addTo(final float[] a, float[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void hadamardProductTo(final float[] a, float[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addHadamardProductTo(final float[] a, final float[] b, float[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void sigmoid(float[] result, int start, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void tanh(float[] result, int start, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int maxIndex(float[] data)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float[] compute(final float[][] W, final float[][] U, final float[] B, final float[] x, float[] h, float[] c)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int divideUpDictionaryRange(CharacterIterator fIter, int rangeStart, int rangeEnd, DequeI foundBreaks, boolean isPhraseBreaking)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LSTMData createData(UResourceBundle bundle)",
    "returnType" : "LSTMData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String defaultLSTM(int script)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LSTMData createData(int script)",
    "returnType" : "LSTMData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LSTMBreakEngine create(int script, LSTMData data)",
    "returnType" : "LSTMBreakEngine",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static float[][] make2DArray(int[] data, int start, int d1, int d2)", "private static float[] make1DArray(int[] data, int start, int d1)", "private Vectorizer makeVectorizer(LSTMData data)", "public int hashCode()", "public boolean handles(int c)", "private static void addDotProductTo(final float[] a, final float[][] b, float[] result)", "private static void addTo(final float[] a, float[] result)", "private static void hadamardProductTo(final float[] a, float[] result)", "private static void addHadamardProductTo(final float[] a, final float[] b, float[] result)", "private static void sigmoid(float[] result, int start, int length)", "private static void tanh(float[] result, int start, int length)", "private static int maxIndex(float[] data)", "private float[] compute(final float[][] W, final float[][] U, final float[] B, final float[] x, float[] h, float[] c)", "public int divideUpDictionaryRange(CharacterIterator fIter, int rangeStart, int rangeEnd, DequeI foundBreaks, boolean isPhraseBreaking)", "public static LSTMData createData(UResourceBundle bundle)", "private static String defaultLSTM(int script)", "public static LSTMData createData(int script)", "public static LSTMBreakEngine create(int script, LSTMData data)" ],
  "variableNames" : [ "MIN_WORD", "MIN_WORD_SPAN", "fData", "fScript", "fVectorizer" ]
}