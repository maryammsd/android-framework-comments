{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SpellChecker.java",
  "packageName" : "android.widget",
  "className" : "SpellChecker",
  "comment" : "\n * Helper class for TextView. Bridge between the TextView and the Dictionary service.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_NUMBER_OF_WORDS",
    "type" : "int",
    "comment" : " lock of the UI thread",
    "links" : [ ]
  }, {
    "name" : "AVERAGE_WORD_LENGTH",
    "type" : "int",
    "comment" : " Rough estimate, such that the word iterator interval usually does not need to be shifted",
    "links" : [ ]
  }, {
    "name" : "WORD_ITERATOR_INTERVAL",
    "type" : "int",
    "comment" : " When parsing, use a character window of that size. Will be shifted if needed",
    "links" : [ ]
  }, {
    "name" : "SPELL_PAUSE_DURATION",
    "type" : "int",
    "comment" : " milliseconds",
    "links" : [ ]
  }, {
    "name" : "MAX_SENTENCE_LENGTH",
    "type" : "int",
    "comment" : " The maximum length of sentence.",
    "links" : [ ]
  }, {
    "name" : "USE_SPAN_RANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpellCheckerSession",
    "type" : "SpellCheckerSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCookie",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIds",
    "type" : "int[]",
    "comment" : " Contains null SpellCheckSpans after index mLength.",
    "links" : [ ]
  }, {
    "name" : "mSpellCheckSpans",
    "type" : "SpellCheckSpan[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLength",
    "type" : "int",
    "comment" : " The mLength first elements of the above arrays have been initialized",
    "links" : [ ]
  }, {
    "name" : "mSpellParsers",
    "type" : "SpellParser[]",
    "comment" : " Parsers on chunk of text, cutting text into words that will be checked",
    "links" : [ ]
  }, {
    "name" : "mSpanSequenceCounter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSentenceIterator",
    "type" : "SentenceIteratorWrapper",
    "comment" : " concurrently due to the asynchronous nature of onGetSuggestions.",
    "links" : [ ]
  }, {
    "name" : "mTextServicesManager",
    "type" : "TextServicesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpellRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void resetSession()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setLocale(Locale locale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSessionActive()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if a spell checker session has successfully been created. Returns false if not,\n     * for instance when spell checking has been disabled in settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeSession()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int nextSpellCheckSpanIndex()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addSpellCheckSpan(Editable editable, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSpellCheckSpanRemoved(SpellCheckSpan spellCheckSpan)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSelectionChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onPerformSpellCheck()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void spellCheck(int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void spellCheck(int start, int end, boolean forceCheckWhenEditingWord)",
    "returnType" : "void",
    "comment" : "\n     * Requests to do spell check for text in the range (start, end).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void spellCheck()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void spellCheck(boolean forceCheckWhenEditingWord)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSeparator(int codepoint)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SpellCheckSpan onGetSuggestionsInternal(SuggestionsInfo suggestionsInfo, int offset, int length)",
    "returnType" : "SpellCheckSpan",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean removeErrorSuggestionSpan(Editable editable, int start, int end, RemoveReason reason)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onGetSuggestions(SuggestionsInfo[] results)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onGetSentenceSuggestions(SentenceSuggestionsInfo[] results)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleNewSpellCheck()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createMisspelledSuggestionSpan(Editable editable, SuggestionsInfo suggestionsInfo, SpellCheckSpan spellCheckSpan, int offset, int length)",
    "returnType" : "void",
    "comment" : " (or both) should be set in suggestionsInfo.",
    "links" : [ ]
  }, {
    "name" : "private Range<Integer> detectSentenceBoundary(CharSequence sequence, int textChangeStart, int textChangeEnd)",
    "returnType" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int roundUpToWordStart(CharSequence sequence, int position, int frontBoundary)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int findSeparator(CharSequence sequence, int start, int end)",
    "returnType" : "int",
    "comment" : "\n     * Search the range [start, end) of sequence and returns the position of the first separator.\n     * If end is smaller than start, do a reverse search.\n     * Returns `end` if no separator is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean haveWordBoundariesChanged(final Editable editable, final int start, final int end, final int spanStart, final int spanEnd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void resetSession()", "private void setLocale(Locale locale)", "private boolean isSessionActive()", "public void closeSession()", "private int nextSpellCheckSpanIndex()", "private void addSpellCheckSpan(Editable editable, int start, int end)", "public void onSpellCheckSpanRemoved(SpellCheckSpan spellCheckSpan)", "public void onSelectionChanged()", " void onPerformSpellCheck()", "public void spellCheck(int start, int end)", "public void spellCheck(int start, int end, boolean forceCheckWhenEditingWord)", "private void spellCheck()", "private void spellCheck(boolean forceCheckWhenEditingWord)", "private static boolean isSeparator(int codepoint)", "private SpellCheckSpan onGetSuggestionsInternal(SuggestionsInfo suggestionsInfo, int offset, int length)", "private static boolean removeErrorSuggestionSpan(Editable editable, int start, int end, RemoveReason reason)", "public void onGetSuggestions(SuggestionsInfo[] results)", "public void onGetSentenceSuggestions(SentenceSuggestionsInfo[] results)", "private void scheduleNewSpellCheck()", "private void createMisspelledSuggestionSpan(Editable editable, SuggestionsInfo suggestionsInfo, SpellCheckSpan spellCheckSpan, int offset, int length)", "private Range<Integer> detectSentenceBoundary(CharSequence sequence, int textChangeStart, int textChangeEnd)", "private int roundUpToWordStart(CharSequence sequence, int position, int frontBoundary)", "private static int findSeparator(CharSequence sequence, int start, int end)", "public static boolean haveWordBoundariesChanged(final Editable editable, final int start, final int end, final int spanStart, final int spanEnd)" ],
  "variableNames" : [ "TAG", "DBG", "MAX_NUMBER_OF_WORDS", "AVERAGE_WORD_LENGTH", "WORD_ITERATOR_INTERVAL", "SPELL_PAUSE_DURATION", "MAX_SENTENCE_LENGTH", "USE_SPAN_RANGE", "mTextView", "mSpellCheckerSession", "mCookie", "mIds", "mSpellCheckSpans", "mLength", "mSpellParsers", "mSpanSequenceCounter", "mCurrentLocale", "mSentenceIterator", "mTextServicesManager", "mSpellRunnable" ]
}