{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/PathMeasure.java",
  "packageName" : "android.graphics",
  "className" : "PathMeasure",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POSITION_MATRIX_FLAG",
    "type" : "int",
    "comment" : " must match flags in SkPathMeasure.h",
    "links" : [ ]
  }, {
    "name" : "TANGENT_MATRIX_FLAG",
    "type" : "int",
    "comment" : " must match flags in SkPathMeasure.h",
    "links" : [ ]
  }, {
    "name" : "native_instance",
    "type" : "long",
    "comment" : " package ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPath(Path path, boolean forceClosed)",
    "returnType" : "void",
    "comment" : "\n     * Assign a new path, or null to have none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getLength()",
    "returnType" : "float",
    "comment" : "\n     * Return the total length of the current contour, or 0 if no path is\n     * associated with this measure object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPosTan(float distance, float[] pos, float[] tan)",
    "returnType" : "boolean",
    "comment" : "\n     * Pins distance to 0 <= distance <= getLength(), and then computes the\n     * corresponding position and tangent. Returns false if there is no path,\n     * or a zero-length path was specified, in which case position and tangent\n     * are unchanged.\n     *\n     * @param distance The distance along the current contour to sample\n     * @param pos If not null, returns the sampled position (x==[0], y==[1])\n     * @param tan If not null, returns the sampled tangent (x==[0], y==[1])\n     * @return false if there was no path associated with this measure object\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean getMatrix(float distance, Matrix matrix, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Pins distance to 0 <= distance <= getLength(), and then computes the\n     * corresponding matrix. Returns false if there is no path, or a zero-length\n     * path was specified, in which case matrix is unchanged.\n     *\n     * @param distance The distance along the associated path\n     * @param matrix Allocated by the caller, this is set to the transformation\n     *        associated with the position and tangent at the specified distance\n     * @param flags Specified what aspects should be returned in the matrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSegment(float startD, float stopD, Path dst, boolean startWithMoveTo)",
    "returnType" : "boolean",
    "comment" : "\n     * Given a start and stop distance, return in dst the intervening\n     * segment(s). If the segment is zero-length, return false, else return\n     * true. startD and stopD are pinned to legal values (0..getLength()).\n     * If startD >= stopD then return false (and leave dst untouched).\n     * Begin the segment with a moveTo if startWithMoveTo is true.\n     *\n     * <p>On {@link android.os.Build.VERSION_CODES#KITKAT} and earlier\n     * releases, the resulting path may not display on a hardware-accelerated\n     * Canvas. A simple workaround is to add a single operation to this path,\n     * such as <code>dst.rLineTo(0, 0)</code>.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the current contour is closed()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean nextContour()",
    "returnType" : "boolean",
    "comment" : "\n     * Move to the next contour in the path. Return true if one exists, or\n     * false if we're done with the path.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long native_create(long native_path, boolean forceClosed)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void native_setPath(long native_instance, long native_path, boolean forceClosed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float native_getLength(long native_instance)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_getPosTan(long native_instance, float distance, float[] pos, float[] tan)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_getMatrix(long native_instance, float distance, long native_matrix, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_getSegment(long native_instance, float startD, float stopD, long native_path, boolean startWithMoveTo)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_isClosed(long native_instance)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean native_nextContour(long native_instance)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void native_destroy(long native_instance)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setPath(Path path, boolean forceClosed)", "public float getLength()", "public boolean getPosTan(float distance, float[] pos, float[] tan)", "public boolean getMatrix(float distance, Matrix matrix, int flags)", "public boolean getSegment(float startD, float stopD, Path dst, boolean startWithMoveTo)", "public boolean isClosed()", "public boolean nextContour()", "protected void finalize() throws Throwable", "private static native long native_create(long native_path, boolean forceClosed)", "private static native void native_setPath(long native_instance, long native_path, boolean forceClosed)", "private static native float native_getLength(long native_instance)", "private static native boolean native_getPosTan(long native_instance, float distance, float[] pos, float[] tan)", "private static native boolean native_getMatrix(long native_instance, float distance, long native_matrix, int flags)", "private static native boolean native_getSegment(long native_instance, float startD, float stopD, long native_path, boolean startWithMoveTo)", "private static native boolean native_isClosed(long native_instance)", "private static native boolean native_nextContour(long native_instance)", "private static native void native_destroy(long native_instance)" ],
  "variableNames" : [ "mPath", "POSITION_MATRIX_FLAG", "TANGENT_MATRIX_FLAG", "native_instance" ]
}