{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/impl/CameraConstrainedHighSpeedCaptureSessionImpl.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "CameraConstrainedHighSpeedCaptureSessionImpl",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mCharacteristics",
    "type" : "CameraCharacteristics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionImpl",
    "type" : "CameraCaptureSessionImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "ConditionVariable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<CaptureRequest> createHighSpeedRequestList(CaptureRequest request) throws CameraAccessException",
    "returnType" : "List<CaptureRequest>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isConstrainedHighSpeedRequestList(List<CaptureRequest> requestList)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraDevice getDevice()",
    "returnType" : "CameraDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(int maxCount, Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int capture(CaptureRequest request, CaptureCallback listener, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback listener) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurst(List<CaptureRequest> requests, CaptureCallback listener, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback listener) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingRequest(CaptureRequest request, CaptureCallback listener, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback listener) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback listener, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback listener) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopRepeating() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void abortCaptures() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Surface getInputSurface()",
    "returnType" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraOfflineSession switchToOffline(Collection<Surface> offlineOutputs, Executor executor, CameraOfflineSessionCallback listener) throws CameraAccessException",
    "returnType" : "CameraOfflineSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsOfflineProcessing(Surface surface)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void closeWithoutDraining()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isReprocessable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replaceSessionClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraDeviceImpl.StateCallbackKK getDeviceStateCallback()",
    "returnType" : "CameraDeviceImpl.StateCallbackKK",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAborting()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finalizeOutputConfigurations(List<OutputConfiguration> deferredOutputConfigs) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public List<CaptureRequest> createHighSpeedRequestList(CaptureRequest request) throws CameraAccessException", "private boolean isConstrainedHighSpeedRequestList(List<CaptureRequest> requestList)", "public CameraDevice getDevice()", "public void prepare(Surface surface) throws CameraAccessException", "public void prepare(int maxCount, Surface surface) throws CameraAccessException", "public void tearDown(Surface surface) throws CameraAccessException", "public int capture(CaptureRequest request, CaptureCallback listener, Handler handler) throws CameraAccessException", "public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback listener) throws CameraAccessException", "public int captureBurst(List<CaptureRequest> requests, CaptureCallback listener, Handler handler) throws CameraAccessException", "public int captureBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback listener) throws CameraAccessException", "public int setRepeatingRequest(CaptureRequest request, CaptureCallback listener, Handler handler) throws CameraAccessException", "public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback listener) throws CameraAccessException", "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback listener, Handler handler) throws CameraAccessException", "public int setRepeatingBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback listener) throws CameraAccessException", "public void stopRepeating() throws CameraAccessException", "public void abortCaptures() throws CameraAccessException", "public Surface getInputSurface()", "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException", "public CameraOfflineSession switchToOffline(Collection<Surface> offlineOutputs, Executor executor, CameraOfflineSessionCallback listener) throws CameraAccessException", "public boolean supportsOfflineProcessing(Surface surface)", "public void closeWithoutDraining()", "public void close()", "public boolean isReprocessable()", "public void replaceSessionClose()", "public CameraDeviceImpl.StateCallbackKK getDeviceStateCallback()", "public boolean isAborting()", "public void finalizeOutputConfigurations(List<OutputConfiguration> deferredOutputConfigs) throws CameraAccessException" ],
  "variableNames" : [ "mCharacteristics", "mSessionImpl", "mInitialized", "TAG" ]
}