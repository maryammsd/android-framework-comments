{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/TonemapCurve.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "TonemapCurve",
  "comment" : "\n * Immutable class for describing a {@code 2 x M x 3} tonemap curve of floats.\n *\n * <p>This defines red, green, and blue curves that the {@link CameraDevice} will\n * use as the tonemapping/contrast/gamma curve when {@link CaptureRequest#TONEMAP_MODE} is\n * set to {@link CameraMetadata#TONEMAP_MODE_CONTRAST_CURVE}.</p>\n *\n * <p>For a camera device with\n * {@link android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME\n * MONOCHROME} capability, all 3 channels will contain the same set of control points.\n *\n * <p>The total number of points {@code (Pin, Pout)} for each color channel can be no more than\n * {@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS}.</p>\n *\n * <p>The coordinate system for each point is within the inclusive range\n * [{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>\n *\n * @see CameraMetadata#TONEMAP_MODE_CONTRAST_CURVE\n * @see CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS\n ",
  "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEMONOCHROME", "android.hardware.camera2.CameraDevice", "android.hardware.camera2.CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS", "android.hardware.camera2.CaptureRequest#TONEMAP_MODE", "android.hardware.camera2.CameraMetadata#TONEMAP_MODE_CONTRAST_CURVE" ],
  "variables" : [ {
    "name" : "LEVEL_BLACK",
    "type" : "float",
    "comment" : "\n     * Lower bound tonemap value corresponding to pure black for a single color channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEVEL_WHITE",
    "type" : "float",
    "comment" : "\n     * Upper bound tonemap value corresponding to a pure white for a single color channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "POINT_SIZE",
    "type" : "int",
    "comment" : "\n     * Number of elements in a {@code (Pin, Pout)} point;\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_RED",
    "type" : "int",
    "comment" : "\n     * Index of the red color channel curve.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_GREEN",
    "type" : "int",
    "comment" : "\n     * Index of the green color channel curve.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_BLUE",
    "type" : "int",
    "comment" : "\n     * Index of the blue color channel curve.\n     ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_POINT_IN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFFSET_POINT_OUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TONEMAP_MIN_CURVE_POINTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CURVE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRed",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGreen",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlue",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHashCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHashCalculated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void checkArgumentArrayLengthDivisibleBy(float[] array, int divisible, String arrayName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int checkArgumentColorChannel(int colorChannel)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkArgumentArrayLengthNoLessThan(float[] array, int minLength, String arrayName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPointCount(int colorChannel)",
    "returnType" : "int",
    "comment" : "\n     * Get the number of points stored in this tonemap curve for the specified color channel.\n     *\n     * @param colorChannel one of {@link #CHANNEL_RED}, {@link #CHANNEL_GREEN}, {@link #CHANNEL_BLUE}\n     * @return number of points stored in this tonemap for that color's curve (>= 0)\n     *\n     * @throws IllegalArgumentException if {@code colorChannel} was out of range\n     ",
    "links" : [ "#CHANNEL_GREEN", "#CHANNEL_BLUE", "#CHANNEL_RED" ]
  }, {
    "name" : "public PointF getPoint(int colorChannel, int index)",
    "returnType" : "PointF",
    "comment" : "\n     * Get the point for a color channel at a specified index.\n     *\n     * <p>The index must be at least 0 but no greater than {@link #getPointCount(int)} for\n     * that {@code colorChannel}.</p>\n     *\n     * <p>All returned coordinates in the point are between the range of\n     * [{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>\n     *\n     * @param colorChannel {@link #CHANNEL_RED}, {@link #CHANNEL_GREEN}, or {@link #CHANNEL_BLUE}\n     * @param index at least 0 but no greater than {@code getPointCount(colorChannel)}\n     * @return the {@code (Pin, Pout)} pair mapping the tone for that index\n     *\n     * @throws IllegalArgumentException if {@code colorChannel} or {@code index} was out of range\n     *\n     * @see #LEVEL_BLACK\n     * @see #LEVEL_WHITE\n     ",
    "links" : [ "#CHANNEL_GREEN", "#CHANNEL_BLUE", "#CHANNEL_RED", "#getPointCount(int)" ]
  }, {
    "name" : "public void copyColorCurve(int colorChannel, float[] destination, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy the color curve for a single color channel from this tonemap curve into the destination.\n     *\n     * <p>\n     * <!--The output is encoded the same as in the constructor -->\n     * Values are stored as packed {@code (Pin, Pout}) points, and there are a total of\n     * {@link #getPointCount} points for that respective channel.</p>\n     *\n     * <p>All returned coordinates are between the range of\n     * [{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>\n     *\n     * @param destination\n     *          an array big enough to hold at least {@link #getPointCount} {@code *}\n     *          {@link #POINT_SIZE} elements after the {@code offset}\n     * @param offset\n     *          a non-negative offset into the array\n     * @throws NullPointerException\n     *          If {@code destination} was {@code null}\n     * @throws IllegalArgumentException\n     *          If offset was negative\n     * @throws ArrayIndexOutOfBoundsException\n     *          If there's not enough room to write the elements at the specified destination and\n     *          offset.\n     *\n     * @see #LEVEL_BLACK\n     * @see #LEVEL_WHITE\n     ",
    "links" : [ "#getPointCount", "#POINT_SIZE" ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this TonemapCurve is equal to another TonemapCurve.\n     *\n     * <p>Two matrices are equal if and only if all of their elements are\n     * {@link Object#equals equal}.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "#equals" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the TonemapCurve as a string representation.\n     *\n     * <p> {@code \"TonemapCurve{R:[(%f, %f), (%f, %f) ... (%f, %f)], G:[(%f, %f), (%f, %f) ...\n     * (%f, %f)], B:[(%f, %f), (%f, %f) ... (%f, %f)]}\"},\n     * where each {@code (%f, %f)} respectively represents one point of the corresponding\n     * tonemap curve. </p>\n     *\n     * @return string representation of {@link TonemapCurve}\n     ",
    "links" : [ "android.hardware.camera2.params.TonemapCurve" ]
  }, {
    "name" : "private String curveToString(int colorChannel)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float[] getCurve(int colorChannel)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void checkArgumentArrayLengthDivisibleBy(float[] array, int divisible, String arrayName)", "private static int checkArgumentColorChannel(int colorChannel)", "private static void checkArgumentArrayLengthNoLessThan(float[] array, int minLength, String arrayName)", "public int getPointCount(int colorChannel)", "public PointF getPoint(int colorChannel, int index)", "public void copyColorCurve(int colorChannel, float[] destination, int offset)", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public String toString()", "private String curveToString(int colorChannel)", "private float[] getCurve(int colorChannel)" ],
  "variableNames" : [ "LEVEL_BLACK", "LEVEL_WHITE", "POINT_SIZE", "CHANNEL_RED", "CHANNEL_GREEN", "CHANNEL_BLUE", "OFFSET_POINT_IN", "OFFSET_POINT_OUT", "TONEMAP_MIN_CURVE_POINTS", "MIN_CURVE_LENGTH", "mRed", "mGreen", "mBlue", "mHashCode", "mHashCalculated" ]
}