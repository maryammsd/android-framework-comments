{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/PatternProps.java",
  "packageName" : "android.icu.impl",
  "className" : "PatternProps",
  "comment" : "\n * Implements the immutable Unicode properties Pattern_Syntax and Pattern_White_Space.\n * Hardcodes these properties, does not load data, does not depend on other ICU classes.\n * <p>\n * Note: Both properties include ASCII as well as non-ASCII, non-Latin-1 code points,\n * and both properties only include BMP code points (no supplementary ones).\n * Pattern_Syntax includes some unassigned code points.\n * <p>\n * [:Pattern_White_Space:] =\n *   [\\u0009-\\u000D\\ \\u0020\\u0085\\u200E\\u200F\\u2028\\u2029]\n * <p>\n * [:Pattern_Syntax:] =\n *   [!-/\\:-@\\[-\\^`\\{-~\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\n *    \\u00B0\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\n *    \\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\n *    \\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\n *    \\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]\n * @author mscherer\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "latin1",
    "type" : "byte[]",
    "comment" : "\n     * One byte per Latin-1 character.\n     * Bit 0 is set if either Pattern property is true,\n     * bit 1 if Pattern_Syntax is true,\n     * bit 2 if Pattern_White_Space is true.\n     * That is, Pattern_Syntax is encoded as 3 and Pattern_White_Space as 5.\n     ",
    "links" : [ ]
  }, {
    "name" : "index2000",
    "type" : "byte[]",
    "comment" : "\n     * One byte per 32 characters from U+2000..U+303F indexing into\n     * a small table of 32-bit data words.\n     * The first two data words are all-zeros and all-ones.\n     ",
    "links" : [ ]
  }, {
    "name" : "syntax2000",
    "type" : "int[]",
    "comment" : "\n     * One 32-bit integer per 32 characters. Ranges of all-false and all-true\n     * are mapped to the first two values, other ranges map to appropriate bit patterns.\n     ",
    "links" : [ ]
  }, {
    "name" : "syntaxOrWhiteSpace2000",
    "type" : "int[]",
    "comment" : "\n     * Same as syntax2000, but with additional bits set for the\n     * Pattern_White_Space characters 200E 200F 2028 2029.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSyntax(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if c is a Pattern_Syntax code point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSyntaxOrWhiteSpace(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if c is a Pattern_Syntax or Pattern_White_Space code point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isWhiteSpace(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if c is a Pattern_White_Space character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int skipWhiteSpace(CharSequence s, int i)",
    "returnType" : "int",
    "comment" : "\n     * Skips over Pattern_White_Space starting at index i of the CharSequence.\n     * @return The smallest index at or after i with a non-white space character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String trimWhiteSpace(String s)",
    "returnType" : "String",
    "comment" : "\n     * @return s except with leading and trailing Pattern_White_Space removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String trimSpaceChar(String s)",
    "returnType" : "String",
    "comment" : "\n     * @return s except with leading and trailing SpaceChar characters removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdentifier(CharSequence s)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether the CharSequence contains a \"pattern identifier\", that is,\n     * whether it contains only non-Pattern_White_Space, non-Pattern_Syntax characters.\n     * @return true if there are no Pattern_White_Space or Pattern_Syntax characters in s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdentifier(CharSequence s, int start, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether the CharSequence contains a \"pattern identifier\", that is,\n     * whether it contains only non-Pattern_White_Space, non-Pattern_Syntax characters.\n     * @return true if there are no Pattern_White_Space or Pattern_Syntax characters\n     *         in s between start and (exclusive) limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int skipIdentifier(CharSequence s, int i)",
    "returnType" : "int",
    "comment" : "\n     * Skips over a \"pattern identifier\" starting at index i of the CharSequence.\n     * @return The smallest index at or after i with\n     *         a Pattern_White_Space or Pattern_Syntax character.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isSyntax(int c)", "public static boolean isSyntaxOrWhiteSpace(int c)", "public static boolean isWhiteSpace(int c)", "public static int skipWhiteSpace(CharSequence s, int i)", "public static String trimWhiteSpace(String s)", "public static String trimSpaceChar(String s)", "public static boolean isIdentifier(CharSequence s)", "public static boolean isIdentifier(CharSequence s, int start, int limit)", "public static int skipIdentifier(CharSequence s, int i)" ],
  "variableNames" : [ "latin1", "index2000", "syntax2000", "syntaxOrWhiteSpace2000" ]
}