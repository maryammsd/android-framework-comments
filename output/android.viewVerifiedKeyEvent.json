{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/VerifiedKeyEvent.java",
  "packageName" : "android.view",
  "className" : "VerifiedKeyEvent",
  "comment" : "\n * KeyEvent that has been verified by the system.\n * The data contained in this class is always a subset of a {@link KeyEvent}. Use this class to\n * check which data has been confirmed by the system to be authentic.\n *\n * Most applications do not need to use this class.\n *\n * {@see android.hardware.input.InputManager#verifyInputEvent}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "int",
    "comment" : "\n     * The action of this key event.  May be either {@link KeyEvent#ACTION_DOWN} or\n     * {@link KeyEvent#ACTION_UP}.\n     *\n     * @see KeyEvent#getAction()\n     ",
    "links" : [ "KeyEvent#ACTION_DOWN", "KeyEvent#ACTION_UP" ]
  }, {
    "name" : "mDownTimeNanos",
    "type" : "long",
    "comment" : "\n     * Retrieve the time of the most recent key down event, in the\n     * {@link android.os.SystemClock#uptimeMillis} time base, but in nanoseconds. If this\n     * is a down event, this will be the same as {@link VerifiedInputEvent#getEventTimeNanos()}.\n     *\n     * @see KeyEvent#getDownTime()\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis", "VerifiedInputEvent#getEventTimeNanos" ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "\n     * Returns the flags for this key event.\n     *\n     * @see KeyEvent#getFlags()\n     * @see KeyEvent#FLAG_CANCELED\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeyCode",
    "type" : "int",
    "comment" : "\n     * Retrieve the key code of the key event.\n     *\n     * @see KeyEvent#getKeyCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "mScanCode",
    "type" : "int",
    "comment" : "\n     * Retrieve the hardware key id of this key event. These values are not reliable\n     * and vary from device to device.\n     *\n     * @see KeyEvent#getScanCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "mMetaState",
    "type" : "int",
    "comment" : "\n     * <p>Returns the state of the meta keys.</p>\n     *\n     * @return an integer in which each bit set to 1 represents a pressed meta key\n     * @see KeyEvent#getMetaState()\n     ",
    "links" : [ ]
  }, {
    "name" : "mRepeatCount",
    "type" : "int",
    "comment" : "\n     * Retrieve the repeat count of the event.  For key down events, this is the number of times\n     * the key has repeated with the first down starting at 0 and counting up from there.\n     * For key up events, this is always equal to zero. For multiple key events,\n     * this is the number of down/up pairs that have occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VerifiedKeyEvent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Boolean getFlag(int flag)",
    "returnType" : "Boolean",
    "comment" : "\n     * Get a specific flag of this key event, if possible. Return null if the flag value could\n     * not be checked.\n     *\n     * @param flag the flag of interest\n     * @return Boolean(true) if the key event has the requested flag\n     *         Boolean(false) if the key event does not have the requested flag\n     *         null if the flag value could not be checked\n     *\n     * @see KeyEvent#getFlags()\n     * @see KeyEvent#FLAG_CANCELED\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAction()",
    "returnType" : "int",
    "comment" : "\n     * The action of this key event.  May be either {@link KeyEvent#ACTION_DOWN} or\n     * {@link KeyEvent#ACTION_UP}.\n     *\n     * @see KeyEvent#getAction()\n     ",
    "links" : [ "KeyEvent#ACTION_DOWN", "KeyEvent#ACTION_UP" ]
  }, {
    "name" : "public long getDownTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time of the most recent key down event, in the\n     * {@link android.os.SystemClock#uptimeMillis} time base, but in nanoseconds. If this\n     * is a down event, this will be the same as {@link VerifiedInputEvent#getEventTimeNanos()}.\n     *\n     * @see KeyEvent#getDownTime()\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis", "VerifiedInputEvent#getEventTimeNanos" ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags for this key event.\n     *\n     * @see KeyEvent#getFlags()\n     * @see KeyEvent#FLAG_CANCELED\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getKeyCode()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the key code of the key event.\n     *\n     * @see KeyEvent#getKeyCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScanCode()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the hardware key id of this key event. These values are not reliable\n     * and vary from device to device.\n     *\n     * @see KeyEvent#getScanCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMetaState()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns the state of the meta keys.</p>\n     *\n     * @return an integer in which each bit set to 1 represents a pressed meta key\n     * @see KeyEvent#getMetaState()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRepeatCount()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the repeat count of the event.  For key down events, this is the number of times\n     * the key has repeated with the first down starting at 0 and counting up from there.\n     * For key up events, this is always equal to zero. For multiple key events,\n     * this is the number of down/up pairs that have occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@android.annotation.NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mAction", "mDownTimeNanos", "mFlags", "mKeyCode", "mScanCode", "mMetaState", "mRepeatCount", "CREATOR" ],
  "methodNames" : [ "public Boolean getFlag(int flag)", "public int getAction()", "public long getDownTimeNanos()", "public int getFlags()", "public int getKeyCode()", "public int getScanCode()", "public int getMetaState()", "public int getRepeatCount()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@android.annotation.NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ]
}