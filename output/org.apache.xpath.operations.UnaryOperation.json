{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/operations/UnaryOperation.java",
  "packageName" : "org.apache.xpath.operations",
  "className" : "UnaryOperation",
  "comment" : "\n * The unary operation base class.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_right",
    "type" : "Expression",
    "comment" : " The operand for the operation.\n   *  @serial ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside\n   * the current subtree.\n   *\n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRight(Expression r)",
    "returnType" : "void",
    "comment" : "\n   * Set the expression operand for the operation.\n   *\n   *\n   * @param r The expression operand to which the unary operation will be \n   *          applied.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute the operand and apply the unary operation to the result.\n   *\n   *\n   * @param xctxt The runtime execution context.\n   *\n   * @return An XObject that represents the result of applying the unary \n   *         operation to the evaluated operand.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract XObject operate(XObject right) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Apply the operation to two operands, and return the result.\n   *\n   *\n   * @param right non-null reference to the evaluated right operand.\n   *\n   * @return non-null reference to the XObject that represents the result of the operation.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getOperand()",
    "returnType" : "Expression",
    "comment" : " @return the operand of unary operation, as an Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * @see ExpressionOwner#getExpression()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExpression(Expression exp)",
    "returnType" : "void",
    "comment" : "\n   * @see ExpressionOwner#setExpression(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public boolean canTraverseOutsideSubtree()", "public void setRight(Expression r)", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public abstract XObject operate(XObject right) throws javax.xml.transform.TransformerException", "public Expression getOperand()", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public Expression getExpression()", "public void setExpression(Expression exp)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_right" ]
}