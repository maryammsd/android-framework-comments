{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/MessageFormatter.java",
  "packageName" : "android.icu.message2",
  "className" : "MessageFormatter",
  "comment" : "\n * <h3>Overview of {@code MessageFormatter}</h3>\n *\n * <p>In ICU4J, the {@code MessageFormatter} class is the next iteration of {@link android.icu.text.MessageFormat}.\n * This new version will build on the lessons learned from using MessageFormat for 25 years\n * in various environments, when used directly or as a base for other public APIs.</p>\n *\n *\n * <p>The effort to design a succesor to {@code MessageFormat} will result in a specification\n * referred to as MessageFormat 2.0.\n * The reasoning for this effort is shared in the\n * <a target=\"github\" href=\"https://github.com/unicode-org/message-format-wg/blob/main/docs/why_mf_next.md\">“Why\n * MessageFormat needs a successor”</a> document.</p>\n *\n * <p>MessageFormat 2.0 will be more modular and easier to port and backport.\n * It will also provide extension points via interfaces to allow users to supply new formatters and selectors without having to modify the specification.\n * ICU will eventually include support for new formatters, such as intervals, relative time, lists, measurement units, personal names, and more,\n * as well as the ability for users to supply their own custom implementations.\n * These will potentially support use cases like grammatical gender, inflection, markup regimes (such as those require for text-to-speech),\n * and other complex message management needs.</p>\n *\n * <p>The MessageFormat Working Group, which develops the new data model, semantics, and syntax,\n * is hosted on <a target=\"github\" href=\"https://github.com/unicode-org/message-format-wg\">GitHub</a>.\n * The current specification for the syntax and data model can be found\n * <a target=\"github\" href=\"https://github.com/unicode-org/message-format-wg/blob/main/spec/syntax.md\">here</a>.</p>\n *\n * <p>This technical preview implements enough functions for {@code MessageFormatter} to be useful in many situations,\n * but the final set of functions and the parameters accepted by those functions is not yet finalized.</p>\n *\n * <h3>Examples</h3>\n *\n * <h4>Basic usage</h4>\n *\n * <blockquote><pre>\n * import static org.junit.Assert.assertEquals;\n * import java.util.Date;\n * import java.util.HashMap;\n * import java.util.Locale;\n * import java.util.Map;\n *\n * import android.icu.message2.MessageFormatter;\n *\n * &#064;Test\n * public void test() {\n *     final Locale enGb = Locale.forLanguageTag(\"en-GB\");\n *     Map<String, Object> arguments = new HashMap<>();\n *     arguments.put(\"name\", \"John\");\n *     arguments.put(\"exp\", new Date(2023 - 1900, 2, 27, 19, 42, 51));  // March 27, 2023, 7:42:51 PM\n *\n *     MessageFormatter mf2 = MessageFormatter.builder()\n *             .setPattern(\"Hello {$name}, your card expires on {$exp :datetime year=numeric month=short day=numeric weekday=short}!\")\n *             .setLocale(enGb)\n *             .build();\n *\n *     assertEquals(\n *             \"Hello John, your card expires on Mon, 27 Mar 2023!\",\n *             mf2.formatToString(arguments));\n * }\n * </pre></blockquote>\n *\n * <h4>Placeholder examples</h4>\n *\n * <table border=\"1\">\n *   <tr>\n *     <th>Code to set runtime value for placeholder</th>\n *     <th>Examples of placeholder in message pattern</th>\n *   </tr>\n *   <tr>\n *     <td><code>arguments.put(\"name\", \"John\")</code></td>\n *     <td><code>{$name}</code></td>\n *   </tr>\n *   <tr>\n *     <td><code>arguments.put(\"exp\", new Date(…))</code></td>\n *     <td><code>{$exp :datetime skeleton=year=numeric month=short day=numeric weekday=short}</code> <br>\n *         <code>{$exp :datetime dateStyle=full}</code></td>\n *   </tr>\n *   <tr>\n *     <td><code>arguments.put(\"val\", 3.141592653)</code></td>\n *     <td><code>{$val}</code> <br> <code>{$val :number minimumFractionDigits=5}</code></td>\n *   </tr>\n *   <tr>\n *     <td>No argument for fixed values known at build time</td>\n *     <td><code>{|123456789.531| :number}</code></td>\n *   </tr>\n * </table>\n *\n * <h4>Plural selection message</h4>\n *\n * <blockquote><pre>\n * &#064;Test\n * public void testSelection() {\n *    final String message = \".match {$count :number}\\n\"\n *            + \" 1 {{You have one notification.}}\\n\"\n *            + \" * {{You have {$count} notifications.}}\\n\";\n *    final Locale enGb = Locale.forLanguageTag(\"en-GB\");\n *    Map<String, Object> arguments = new HashMap<>();\n *\n *    MessageFormatter mf2 = MessageFormatter.builder()\n *        .setPattern(message)\n *        .setLocale(enGb)\n *        .build();\n *\n *    arguments.put(\"count\", 1);\n *    assertEquals(\n *        \"You have one notification.\",\n *        mf2.formatToString(arguments));\n *\n *    arguments.put(\"count\", 42);\n *    assertEquals(\n *        \"You have 42 notifications.\",\n *        mf2.formatToString(arguments));\n * }\n * </pre></blockquote>\n *\n * <h4>Built-in formatter functions</h4>\n *\n * <p>The tech preview implementation comes with formatters for numbers ({@code :number}),\n * date / time ({@code :datetime}, {@code :date}, {@code :time}),\n * plural selectors ({@code :number} with options for {@code plural} and {@code ordinal} selection),\n * and general selector ({@code :string}),\n * very similar to what {@code MessageFormat} offers.</p>\n *\n * <p>The <a target=\"github\" href=\"https://github.com/unicode-org/icu/tree/main/icu4j/main/core/src/test/java/com/ibm/icu/dev/test/message2\">ICU test code</a>\n * covers most features, and has examples of how to make custom placeholder formatters;\n * you can look for classes that implement {@code android.icu.message2.FormatterFactory}\n * (they are named {@code Custom*Test.java}).</p>\n *\n * <p>The complete list of valid options for each function, and how they infulence the results, can be found at\n * <a target=\"github\" href=\"https://github.com/unicode-org/message-format-wg/blob/main/spec/registry.md\">here</a>.<p>\n *\n * @deprecated This API is for technology preview only.\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ "android.icu.text.MessageFormat" ],
  "variables" : [ {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "functionRegistry",
    "type" : "MFFunctionRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dataModel",
    "type" : "MFDataModel.Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "modelFormatter",
    "type" : "MFDataModelFormatter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Builder builder()",
    "returnType" : "Builder",
    "comment" : "\n     * Creates a builder.\n     *\n     * @return the Builder.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Get the locale to use for all the formatting and selections in\n     * the current {@code MessageFormatter}.\n     *\n     * @return the locale.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPattern()",
    "returnType" : "String",
    "comment" : "\n     * Get the pattern (the serialized message in MessageFormat 2 syntax) of\n     * the current {@code MessageFormatter}.\n     *\n     * <p>If the {@code MessageFormatter} was created from an {@link MFDataModel}\n     * the this string is generated from that model.</p>\n     *\n     * @return the pattern.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.message2.MFDataModel" ]
  }, {
    "name" : "public MFDataModel.Message getDataModel()",
    "returnType" : "MFDataModel.Message",
    "comment" : "\n     * Give public access to the message data model.\n     *\n     * <p>This data model is similar to the functionality we have today\n     * in {@link android.icu.text.MessagePatternUtil} maybe even a bit more higher level.</p>\n     *\n     * <p>We can also imagine a model where one parses the string syntax, takes the data model,\n     * modifies it, and then uses that modified model to create a {@code MessageFormatter}.</p>\n     *\n     * @return the data model.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.text.MessagePatternUtil" ]
  }, {
    "name" : "public String formatToString(Map<String, Object> arguments)",
    "returnType" : "String",
    "comment" : "\n     * Formats a map of objects by iterating over the MessageFormat's pattern,\n     * with the plain text “as is” and the arguments replaced by the formatted objects.\n     *\n     * @param arguments a map of objects to be formatted and substituted.\n     * @return the string representing the message with parameters replaced.\n     *\n     * @throws IllegalArgumentException when something goes wrong\n     *         (for example wrong argument type, or null arguments, etc.)\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedMessage format(Map<String, Object> arguments)",
    "returnType" : "FormattedMessage",
    "comment" : "\n     * Not yet implemented: formats a map of objects by iterating over the MessageFormat's\n     * pattern, with the plain text “as is” and the arguments replaced by the formatted objects.\n     *\n     * @param arguments a map of objects to be formatted and substituted.\n     * @return the {@link FormattedMessage} class representing the message with parameters replaced.\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.message2.FormattedMessage" ]
  } ],
  "methodNames" : [ "public static Builder builder()", "public Locale getLocale()", "public String getPattern()", "public MFDataModel.Message getDataModel()", "public String formatToString(Map<String, Object> arguments)", "public FormattedMessage format(Map<String, Object> arguments)" ],
  "variableNames" : [ "locale", "pattern", "functionRegistry", "dataModel", "modelFormatter" ]
}