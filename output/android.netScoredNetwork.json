{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/ScoredNetwork.java",
  "packageName" : "android.net",
  "className" : "ScoredNetwork",
  "comment" : "\n * A network identifier along with a score for the quality of that network.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "ATTRIBUTES_KEY_BADGING_CURVE",
    "type" : "String",
    "comment" : "\n     * Key used with the {@link #attributes} bundle to define the badging curve.\n     *\n     * <p>The badging curve is a {@link RssiCurve} used to map different RSSI values to {@link\n     * NetworkBadging.Badging} enums.\n     ",
    "links" : [ "#attributes", "RssiCurve" ]
  }, {
    "name" : "ATTRIBUTES_KEY_HAS_CAPTIVE_PORTAL",
    "type" : "String",
    "comment" : "\n     * Extra used with {@link #attributes} to specify whether the\n     * network is believed to have a captive portal.\n     * <p>\n     * This data may be used, for example, to display a visual indicator\n     * in a network selection list.\n     * <p>\n     * Note that the this extra conveys the possible presence of a\n     * captive portal, not its state or the user's ability to open\n     * the portal.\n     * <p>\n     * If no value is associated with this key then it's unknown.\n     ",
    "links" : [ "#attributes" ]
  }, {
    "name" : "ATTRIBUTES_KEY_RANKING_SCORE_OFFSET",
    "type" : "String",
    "comment" : "\n     * Key used with the {@link #attributes} bundle to define the rankingScoreOffset int value.\n     *\n     * <p>The rankingScoreOffset is used when calculating the ranking score used to rank networks\n     * against one another. See {@link #calculateRankingScore} for more information.\n     ",
    "links" : [ "#attributes", "#calculateRankingScore" ]
  }, {
    "name" : "networkKey",
    "type" : "NetworkKey",
    "comment" : " A {@link NetworkKey} uniquely identifying this network. ",
    "links" : [ "NetworkKey" ]
  }, {
    "name" : "rssiCurve",
    "type" : "RssiCurve",
    "comment" : "\n     * The {@link RssiCurve} representing the scores for this network based on the RSSI.\n     *\n     * <p>This field is optional and may be set to null to indicate that no score is available for\n     * this network at this time. Such networks, along with networks for which the scorer has not\n     * responded, are always prioritized below scored networks, regardless of the score.\n     ",
    "links" : [ "RssiCurve" ]
  }, {
    "name" : "meteredHint",
    "type" : "boolean",
    "comment" : "\n     * A boolean value that indicates whether or not the network is believed to be metered.\n     *\n     * <p>A network can be classified as metered if the user would be\n     * sensitive to heavy data usage on that connection due to monetary costs,\n     * data limitations or battery/performance issues. A typical example would\n     * be a wifi connection where the user would be charged for usage.\n     ",
    "links" : [ ]
  }, {
    "name" : "attributes",
    "type" : "Bundle",
    "comment" : "\n     * An additional collection of optional attributes set by\n     * the Network Recommendation Provider.\n     *\n     * @see #ATTRIBUTES_KEY_HAS_CAPTIVE_PORTAL\n     * @see #ATTRIBUTES_KEY_RANKING_SCORE_OFFSET\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ScoredNetwork>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean bundleEquals(Bundle bundle1, Bundle bundle2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasRankingScore()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if a ranking score can be calculated for this network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int calculateRankingScore(int rssi) throws UnsupportedOperationException",
    "returnType" : "int",
    "comment" : "\n     * Returns a ranking score for a given RSSI which can be used to comparatively\n     * rank networks.\n     *\n     * <p>The score obtained by the rssiCurve is bitshifted left by 8 bits to expand it to an\n     * integer and then the offset is added. If the addition operation overflows or underflows,\n     * Integer.MAX_VALUE and Integer.MIN_VALUE will be returned respectively.\n     *\n     * <p>{@link #hasRankingScore} should be called first to ensure this network is capable\n     * of returning a ranking score.\n     *\n     * @throws UnsupportedOperationException if there is no RssiCurve and no rankingScoreOffset\n     * for this network (hasRankingScore returns false).\n     *\n     * @hide\n     ",
    "links" : [ "#hasRankingScore" ]
  }, {
    "name" : "public int calculateBadge(int rssi)",
    "returnType" : "int",
    "comment" : "\n     * Return the {@link NetworkBadging.Badging} enum for this network for the given RSSI, derived from the\n     * badging curve.\n     *\n     * <p>If no badging curve is present, {@link #BADGE_NONE} will be returned.\n     *\n     * @param rssi The rssi level for which the badge should be calculated\n     ",
    "links" : [ "NetworkBadging.Badging", "#BADGE_NONE" ]
  } ],
  "variableNames" : [ "ATTRIBUTES_KEY_BADGING_CURVE", "ATTRIBUTES_KEY_HAS_CAPTIVE_PORTAL", "ATTRIBUTES_KEY_RANKING_SCORE_OFFSET", "networkKey", "rssiCurve", "meteredHint", "attributes", "CREATOR" ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public boolean equals(@Nullable Object o)", "private boolean bundleEquals(Bundle bundle1, Bundle bundle2)", "public int hashCode()", "public String toString()", "public boolean hasRankingScore()", "public int calculateRankingScore(int rssi) throws UnsupportedOperationException", "public int calculateBadge(int rssi)" ]
}