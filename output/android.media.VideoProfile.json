{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/EncoderProfiles.java",
  "packageName" : "android.media",
  "className" : "VideoProfile",
  "comment" : "\n     * Configuration for a video encoder.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "codec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "width",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "height",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frameRate",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bitrate",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "profile",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "chromaSubsampling",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bitDepth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hdrFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HDR_NONE",
    "type" : "int",
    "comment" : " Not HDR (SDR).\n         *  <p>\n         *  An HDR format specifying SDR (Standard Dynamic\n         *  Range) recording. ",
    "links" : [ ]
  }, {
    "name" : "HDR_HLG",
    "type" : "int",
    "comment" : " HLG (Hybrid-Log Gamma).\n         *  <p>\n         *  An HDR format specifying HLG. ",
    "links" : [ ]
  }, {
    "name" : "HDR_HDR10",
    "type" : "int",
    "comment" : " HDR10.\n         *  <p>\n         *  An HDR format specifying HDR10. ",
    "links" : [ ]
  }, {
    "name" : "HDR_HDR10PLUS",
    "type" : "int",
    "comment" : " HDR10+.\n         *  <p>\n         *  An HDR format specifying HDR10+. ",
    "links" : [ ]
  }, {
    "name" : "HDR_DOLBY_VISION",
    "type" : "int",
    "comment" : "\n         *  Dolby Vision\n         *  <p>\n         *  An HDR format specifying Dolby Vision. For this format\n         *  the codec is always a Dolby Vision encoder. The encoder\n         *  profile specifies which Dolby Vision version is being\n         *  used.\n         *\n         *  @see #getProfile\n         ",
    "links" : [ ]
  }, {
    "name" : "YUV_420",
    "type" : "int",
    "comment" : " YUV 4:2:0.\n         *  <p>\n         *  A chroma subsampling where the U and V planes are subsampled\n         *  by 2 both horizontally and vertically. ",
    "links" : [ ]
  }, {
    "name" : "YUV_422",
    "type" : "int",
    "comment" : " YUV 4:2:2.\n         *  <p>\n         *  A chroma subsampling where the U and V planes are subsampled\n         *  by 2 horizontally alone. ",
    "links" : [ ]
  }, {
    "name" : "YUV_444",
    "type" : "int",
    "comment" : " YUV 4:4:4.\n         *  <p>\n         *  A chroma subsampling where the U and V planes are not\n         *  subsampled. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getCodec()",
    "returnType" : "int",
    "comment" : "\n         * The video encoder being used for the video track\n         * @see android.media.MediaRecorder.VideoEncoder\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getMediaType()",
    "returnType" : "String",
    "comment" : "\n         * The media type of the video encoder being used for the video track\n         * @see android.media.MediaFormat#KEY_MIME\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getBitrate()",
    "returnType" : "int",
    "comment" : "\n         * The target video output bitrate in bits per second\n         * <p>\n         * This is the target recorded video output bitrate if the application configures the video\n         * recording via {@link MediaRecorder#setProfile} without specifying any other\n         * {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles\n         * (from {@link CamcorderProfile#QUALITY_HIGH_SPEED_LOW} to {@link\n         * CamcorderProfile#QUALITY_HIGH_SPEED_2160P}), this is the bitrate where the video is\n         * recorded with. If the application intends to record slow motion videos with the high\n         * speed quality profiles, it must set a different video bitrate that is corresponding to\n         * the desired recording output bit rate (i.e., the encoded video bitrate during normal\n         * playback) via {@link MediaRecorder#setVideoEncodingBitRate}. For example, if {@link\n         * CamcorderProfile#QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #getFrameRate} and\n         * 64Mbps {@link #getBitrate} in the high speed VideoProfile, and the application\n         * intends to record 1/8 factor slow motion recording videos, the application must set 30fps\n         * via {@link MediaRecorder#setVideoFrameRate} and 8Mbps ( {@link #getBitrate} * slow motion\n         * factor) via {@link MediaRecorder#setVideoEncodingBitRate}. Failing to do so will result\n         * in videos with unexpected frame rate and bit rate, or {@link MediaRecorder} error if the\n         * output bit rate exceeds the encoder limit. If the application intends to do the video\n         * recording with {@link MediaCodec} encoder, it must set each individual field of {@link\n         * MediaFormat} similarly according to this VideoProfile.\n         * </p>\n         *\n         * @see #getFrameRate\n         * @see MediaRecorder\n         * @see MediaCodec\n         * @see MediaFormat\n         ",
    "links" : [ "android.media.MediaCodec", "#getBitrate", "android.media.MediaRecorder#setProfile", "android.media.MediaRecorder#setVideoEncodingBitRate", "android.media.MediaFormat", "android.media.MediaRecorder#setVideoFrameRate", "android.media.CamcorderProfile#QUALITY_HIGH_SPEED_2160P", "android.media.CamcorderProfile#QUALITY_HIGH_SPEED_LOW", "android.media.MediaRecorder", "#getFrameRate", "android.media.CamcorderProfile#QUALITY_HIGH_SPEED_720P" ]
  }, {
    "name" : "public int getFrameRate()",
    "returnType" : "int",
    "comment" : "\n         * The target video frame rate in frames per second.\n         * <p>\n         * This is the target recorded video output frame rate per second if the application\n         * configures the video recording via {@link MediaRecorder#setProfile} without specifying\n         * any other {@link MediaRecorder} encoding parameters. For example, for high speed quality\n         * profiles (from {@link CamcorderProfile#QUALITY_HIGH_SPEED_LOW} to {@link\n         * CamcorderProfile#QUALITY_HIGH_SPEED_2160P}), this is the frame rate where the video is\n         * recorded and played back with. If the application intends to create slow motion use case\n         * with the high speed quality profiles, it must set a different video frame rate that is\n         * corresponding to the desired output (playback) frame rate via {@link\n         * MediaRecorder#setVideoFrameRate}. For example, if {@link\n         * CamcorderProfile#QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #getFrameRate}\n         * in the VideoProfile, and the application intends to create 1/8 factor slow motion\n         * recording videos, the application must set 30fps via {@link\n         * MediaRecorder#setVideoFrameRate}. Failing to do so will result in high speed videos with\n         * normal speed playback frame rate (240fps for above example). If the application intends\n         * to do the video recording with {@link MediaCodec} encoder, it must set each individual\n         * field of {@link MediaFormat} similarly according to this VideoProfile.\n         * </p>\n         *\n         * @see #getBitrate\n         * @see MediaRecorder\n         * @see MediaCodec\n         * @see MediaFormat\n         ",
    "links" : [ "android.media.MediaCodec", "android.media.MediaRecorder#setProfile", "android.media.MediaFormat", "android.media.MediaRecorder#setVideoFrameRate", "android.media.CamcorderProfile#QUALITY_HIGH_SPEED_2160P", "android.media.CamcorderProfile#QUALITY_HIGH_SPEED_LOW", "android.media.MediaRecorder", "#getFrameRate", "android.media.CamcorderProfile#QUALITY_HIGH_SPEED_720P" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n         * The target video frame width in pixels\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n         * The target video frame height in pixels\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getProfile()",
    "returnType" : "int",
    "comment" : "\n         * The video encoder profile being used for the video track.\n         * <p>\n         * This value is negative if there is no profile defined for the video codec.\n         *\n         * @see MediaRecorder#setVideoEncodingProfileLevel\n         * @see MediaFormat#KEY_PROFILE\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getBitDepth()",
    "returnType" : "int",
    "comment" : "\n         * The bit depth of the encoded video.\n         * <p>\n         * This value is effectively 8 or 10, but some devices may\n         * support additional values.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getChromaSubsampling()",
    "returnType" : "int",
    "comment" : "\n         * The chroma subsampling of the encoded video.\n         * <p>\n         * For most devices this is always YUV_420 but some devices may\n         * support additional values.\n         *\n         * @see #YUV_420\n         * @see #YUV_422\n         * @see #YUV_444\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getHdrFormat()",
    "returnType" : "int",
    "comment" : "\n         * The HDR format of the encoded video.\n         * <p>\n         * This is one of the HDR_ values.\n         * @see #HDR_NONE\n         * @see #HDR_HLG\n         * @see #HDR_HDR10\n         * @see #HDR_HDR10PLUS\n         * @see #HDR_DOLBY_VISION\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getCodec()", "public String getMediaType()", "public int getBitrate()", "public int getFrameRate()", "public int getWidth()", "public int getHeight()", "public int getProfile()", "public int getBitDepth()", "public int getChromaSubsampling()", "public int getHdrFormat()" ],
  "variableNames" : [ "codec", "width", "height", "frameRate", "bitrate", "profile", "chromaSubsampling", "bitDepth", "hdrFormat", "HDR_NONE", "HDR_HLG", "HDR_HDR10", "HDR_HDR10PLUS", "HDR_DOLBY_VISION", "YUV_420", "YUV_422", "YUV_444" ]
}