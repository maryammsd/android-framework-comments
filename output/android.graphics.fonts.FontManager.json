{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/fonts/FontManager.java",
  "packageName" : "android.graphics.fonts",
  "className" : "FontManager",
  "comment" : "\n * This class gives you control of system installed font files.\n *\n * <p>\n * This class gives you the information of system font configuration and ability of changing them.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIFontManager",
    "type" : "IFontManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Indicates that the request has been processed successfully.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_FAILED_TO_WRITE_FONT_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates that a failure occurred while writing the font file to disk.\n     *\n     * This is an internal error that the system cannot place the font file for being used by\n     * application.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_VERIFICATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Indicates that a failure occurred during the verification of the font file.\n     *\n     * The system failed to verify given font file contents and signature with system installed\n     * certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_FONT_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates that a failure occurred as a result of invalid font format or content.\n     *\n     * Android only accepts OpenType compliant font files.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_FONT_NAME",
    "type" : "int",
    "comment" : "\n     * Indicates a failure due to missing PostScript name in font's name table.\n     *\n     * Indicates that a failure occurred since PostScript name in the name table(ID=6) was missing.\n     * The font is expected to have a PostScript name.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_DOWNGRADING",
    "type" : "int",
    "comment" : "\n     * Indicates that a failure occurred due to downgrading the font version.\n     *\n     * The font must have equal or newer revision in its head table.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_FAILED_UPDATE_CONFIG",
    "type" : "int",
    "comment" : "\n     * Indicates that a failure occurred while updating system font configuration.\n     *\n     * This is an internal error that the system couldn't update the {@link FontConfig}.\n     ",
    "links" : [ "android.text.FontConfig" ]
  }, {
    "name" : "RESULT_ERROR_FONT_UPDATER_DISABLED",
    "type" : "int",
    "comment" : "\n     * Indicates a failure due to disabled font updater.\n     *\n     * This is typically returned due to missing Linux kernel feature.\n     * The font updater only works with the Linux kernel that has fs-verity feature. The fs-verity\n     * is required after the device shipped with Android 11. Thus the updated device may not have\n     * fs-verity feature and font updater is disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_VERSION_MISMATCH",
    "type" : "int",
    "comment" : "\n     * Indicates that a failure occurred because provided {@code baseVersion} did not match.\n     *\n     * The {@code baseVersion} provided does not match to the current {@link FontConfig} version.\n     * Please get the latest configuration and update {@code baseVersion} accordingly.\n     ",
    "links" : [ "android.text.FontConfig" ]
  }, {
    "name" : "RESULT_ERROR_FONT_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * Indicates a failure occurred because a font with the specified PostScript name could not be\n     * found.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_FAILED_TO_OPEN_FONT_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure of opening font file.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_FAILED_TO_OPEN_SIGNATURE_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure of opening signature file.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_SHELL_ARGUMENT",
    "type" : "int",
    "comment" : "\n     * Indicates a failure of invalid shell command arguments.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_SIGNATURE_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure of reading signature file.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_SIGNATURE_TOO_LARGE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure due to exceeding allowed signature file size (8kb).\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_FAILED_TO_OPEN_XML_FILE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure of opening XML file.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_XML",
    "type" : "int",
    "comment" : "\n     * Indicates a failure due to invalid XML file.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_DEBUG_CERTIFICATE",
    "type" : "int",
    "comment" : "\n     * Indicates a failure due to invalid debug certificate file.\n     *\n     * This error code is only used with the shell command interaction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public FontConfig getFontConfig()",
    "returnType" : "FontConfig",
    "comment" : "\n     * Returns the system font configuration.\n     *\n     * This information is expected to be used by system font updater. If you are looking for APIs\n     * about drawing text and/or high-level system font information, use\n     * {@link android.graphics.Typeface} or {@link SystemFonts} instead.\n     *\n     * @return The current font configuration. null if failed to fetch information from the system\n     *         service.\n     ",
    "links" : [ "android.graphics.Typeface", "android.graphics.fonts.SystemFonts" ]
  }, {
    "name" : "public int updateFontFamily(@NonNull FontFamilyUpdateRequest request, @IntRange(from = 0) int baseVersion)",
    "returnType" : "int",
    "comment" : "\n     * Update or add system font families.\n     *\n     * <p>This method will update existing font families or add new font families. The updated\n     * font family definitions will be used when creating {@link android.graphics.Typeface} objects\n     * with using {@link android.graphics.Typeface#create(String, int)} specifying the family name,\n     * or through XML resources.\n     *\n     * To protect devices, system font updater relies on a Linux Kernel feature called fs-verity.\n     * If the device does not support fs-verity, {@link #RESULT_ERROR_FONT_UPDATER_DISABLED} will be\n     * returned.\n     *\n     * <p>Android only accepts OpenType compliant font files. If other font files are provided,\n     * {@link #RESULT_ERROR_INVALID_FONT_FILE} will be returned.\n     *\n     * <p>The font file to be updated is identified by PostScript name stored in the name table. If\n     * the font file doesn't have PostScript name entry, {@link #RESULT_ERROR_INVALID_FONT_NAME}\n     * will be returned.\n     *\n     * <p>The entire font file is verified with the given signature using system installed\n     * certificates. If the system cannot verify the font file contents,\n     * {@link #RESULT_ERROR_VERIFICATION_FAILURE} will be returned.\n     *\n     * <p>The font file must have a newer revision number in the head table. In other words, it is\n     * not allowed to downgrade a font file. If an older font file is provided,\n     * {@link #RESULT_ERROR_DOWNGRADING} will be returned.\n     *\n     * <p>The caller must specify the base config version for keeping the font configuration\n     * consistent. If the font configuration is updated for some reason between the time you get\n     * a configuration with {@link #getFontConfig()} and the time when you call this method,\n     * {@link #RESULT_ERROR_VERSION_MISMATCH} will be returned. Get the latest font configuration by\n     * calling {@link #getFontConfig()} and call this method again with the latest config version.\n     *\n     * @param request A {@link FontFamilyUpdateRequest} to execute.\n     * @param baseVersion A base config version to be updated. You can get the latest config version\n     *                    by {@link FontConfig#getConfigVersion()} via {@link #getFontConfig()}. If\n     *                    the system has a newer config version, the update will fail with\n     *                    {@link #RESULT_ERROR_VERSION_MISMATCH}.\n     * @return A result code.\n     * @see FontConfig#getConfigVersion()\n     * @see #getFontConfig()\n     * @see #RESULT_SUCCESS\n     * @see #RESULT_ERROR_FAILED_TO_WRITE_FONT_FILE\n     * @see #RESULT_ERROR_VERIFICATION_FAILURE\n     * @see #RESULT_ERROR_VERSION_MISMATCH\n     * @see #RESULT_ERROR_INVALID_FONT_FILE\n     * @see #RESULT_ERROR_INVALID_FONT_NAME\n     * @see #RESULT_ERROR_DOWNGRADING\n     * @see #RESULT_ERROR_FAILED_UPDATE_CONFIG\n     * @see #RESULT_ERROR_FONT_UPDATER_DISABLED\n     * @see #RESULT_ERROR_FONT_NOT_FOUND\n     ",
    "links" : [ "android.graphics.Typeface", "#RESULT_ERROR_INVALID_FONT_NAME", "#RESULT_ERROR_VERIFICATION_FAILURE", "android.graphics.Typeface#create(String", "#RESULT_ERROR_VERSION_MISMATCH", "#RESULT_ERROR_INVALID_FONT_FILE", "android.text.FontConfig#getConfigVersion()", "#getFontConfig()", "#RESULT_ERROR_FONT_UPDATER_DISABLED", "#RESULT_ERROR_DOWNGRADING", "android.graphics.fonts.FontFamilyUpdateRequest" ]
  }, {
    "name" : "public static FontManager create(@NonNull IFontManager iFontManager)",
    "returnType" : "FontManager",
    "comment" : "\n     * Factory method of the FontManager.\n     *\n     * Do not use this method directly. Use getSystemService(Context.FONT_SERVICE) instead.\n     *\n     * @return A new instance of FontManager\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public FontConfig getFontConfig()", "public int updateFontFamily(@NonNull FontFamilyUpdateRequest request, @IntRange(from = 0) int baseVersion)", "public static FontManager create(@NonNull IFontManager iFontManager)" ],
  "variableNames" : [ "TAG", "mIFontManager", "RESULT_SUCCESS", "RESULT_ERROR_FAILED_TO_WRITE_FONT_FILE", "RESULT_ERROR_VERIFICATION_FAILURE", "RESULT_ERROR_INVALID_FONT_FILE", "RESULT_ERROR_INVALID_FONT_NAME", "RESULT_ERROR_DOWNGRADING", "RESULT_ERROR_FAILED_UPDATE_CONFIG", "RESULT_ERROR_FONT_UPDATER_DISABLED", "RESULT_ERROR_VERSION_MISMATCH", "RESULT_ERROR_FONT_NOT_FOUND", "RESULT_ERROR_FAILED_TO_OPEN_FONT_FILE", "RESULT_ERROR_FAILED_TO_OPEN_SIGNATURE_FILE", "RESULT_ERROR_INVALID_SHELL_ARGUMENT", "RESULT_ERROR_INVALID_SIGNATURE_FILE", "RESULT_ERROR_SIGNATURE_TOO_LARGE", "RESULT_ERROR_FAILED_TO_OPEN_XML_FILE", "RESULT_ERROR_INVALID_XML", "RESULT_ERROR_INVALID_DEBUG_CERTIFICATE" ]
}