{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodec.java",
  "packageName" : "android.media",
  "className" : "LinearBlock",
  "comment" : "\n     * Section of memory that represents a linear block. Applications may\n     * acquire a block via {@link LinearBlock#obtain} and queue all or part\n     * of the block as an input buffer to a codec, or get a block allocated by\n     * codec as an output buffer from {@link OutputFrame}.\n     *\n     * {@see QueueRequest#setLinearBlock}\n     * {@see QueueRequest#setEncryptedLinearBlock}\n     * {@see OutputFrame#getLinearBlock}\n     ",
  "links" : [ "#obtain", "OutputFrame" ],
  "variables" : [ {
    "name" : "sPool",
    "type" : "BlockingQueue<LinearBlock>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMappable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMapped",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isMappable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the buffer is mappable.\n         * @throws IllegalStateException if invalid\n         ",
    "links" : [ ]
  }, {
    "name" : "public ByteBuffer map()",
    "returnType" : "ByteBuffer",
    "comment" : "\n         * Map the memory and return the mapped region.\n         * <p>\n         * The returned memory region becomes inaccessible after\n         * {@link #recycle}, or the buffer is queued to the codecs and not\n         * returned to the client yet.\n         *\n         * @return mapped memory region as {@link ByteBuffer} object\n         * @throws IllegalStateException if not mappable or invalid\n         ",
    "links" : [ "#recycle", "java.nio.ByteBuffer" ]
  }, {
    "name" : "private native ByteBuffer native_map()",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n         * Mark this block as ready to be recycled by the framework once it is\n         * no longer in use. All operations to this object after\n         * this call will cause exceptions, as well as attempt to access the\n         * previously mapped memory region. Caller should clear all references\n         * to this object after this call.\n         * <p>\n         * To avoid excessive memory consumption, it is recommended that callers\n         * recycle buffers as soon as they no longer need the buffers\n         *\n         * @throws IllegalStateException if invalid\n         ",
    "links" : [ ]
  }, {
    "name" : "private native void native_recycle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_obtain(int capacity, String[] codecNames)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isCodecCopyFreeCompatible(@NonNull String[] codecNames)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if it is possible to allocate a linear block that can be\n         * passed to all listed codecs as input buffers without copying the\n         * content.\n         * <p>\n         * Note that even if this function returns true, {@link #obtain} may\n         * still throw due to invalid arguments or allocation failure.\n         *\n         * @param codecNames  list of codecs that the client wants to use a\n         *                    linear block without copying. Null entries are\n         *                    ignored.\n         ",
    "links" : [ "#obtain" ]
  }, {
    "name" : "private static native boolean native_checkCompatible(@NonNull String[] codecNames)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LinearBlock obtain(int capacity, @NonNull String[] codecNames)",
    "returnType" : "LinearBlock",
    "comment" : "\n         * Obtain a linear block object no smaller than {@code capacity}.\n         * If {@link #isCodecCopyFreeCompatible} with the same\n         * {@code codecNames} returned true, the returned\n         * {@link LinearBlock} object can be queued to the listed codecs without\n         * copying. The returned {@link LinearBlock} object is always\n         * read/write mappable.\n         *\n         * @param capacity requested capacity of the linear block in bytes\n         * @param codecNames  list of codecs that the client wants to use this\n         *                    linear block without copying. Null entries are\n         *                    ignored.\n         * @return  a linear block object.\n         * @throws IllegalArgumentException if the capacity is invalid or\n         *                                  codecNames contains invalid name\n         * @throws IOException if an error occurred while allocating a buffer\n         ",
    "links" : [ "LinearBlock", "#isCodecCopyFreeCompatible" ]
  }, {
    "name" : "private void setInternalStateLocked(long context, boolean isMappable)",
    "returnType" : "void",
    "comment" : " Called from native",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isMappable()", "public ByteBuffer map()", "private native ByteBuffer native_map()", "public void recycle()", "private native void native_recycle()", "private native void native_obtain(int capacity, String[] codecNames)", "protected void finalize()", "public static boolean isCodecCopyFreeCompatible(@NonNull String[] codecNames)", "private static native boolean native_checkCompatible(@NonNull String[] codecNames)", "public static LinearBlock obtain(int capacity, @NonNull String[] codecNames)", "private void setInternalStateLocked(long context, boolean isMappable)" ],
  "variableNames" : [ "sPool", "mLock", "mValid", "mMappable", "mMapped", "mNativeContext", "mInternal" ]
}