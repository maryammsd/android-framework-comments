{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/KeyGenerator.java",
  "packageName" : "javax.crypto",
  "className" : "KeyGenerator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "I_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I_RANDOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I_PARAMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "I_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "spi",
    "type" : "KeyGeneratorSpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The algorithm",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serviceIterator",
    "type" : "Iterator<Service>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initKeySize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initParams",
    "type" : "AlgorithmParameterSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initRandom",
    "type" : "SecureRandom",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this <code>KeyGenerator</code> object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>KeyGenerator</code> object.\n     *\n     * @return the algorithm name of this <code>KeyGenerator</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final KeyGenerator getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "KeyGenerator",
    "comment" : "\n     * Returns a <code>KeyGenerator</code> object that generates secret keys\n     * for the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyGenerator object encapsulating the\n     * KeyGeneratorSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested key algorithm.\n     * See the KeyGenerator section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new <code>KeyGenerator</code> object.\n     *\n     * @exception NullPointerException if the specified algorithm is null.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          KeyGeneratorSpi implementation for the\n     *          specified algorithm.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final KeyGenerator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "KeyGenerator",
    "comment" : "\n     * Returns a <code>KeyGenerator</code> object that generates secret keys\n     * for the specified algorithm.\n     *\n     * <p> A new KeyGenerator object encapsulating the\n     * KeyGeneratorSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested key algorithm.\n     * See the KeyGenerator section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>KeyGenerator</code> object.\n     *\n     * @exception NullPointerException if the specified algorithm is null.\n     *\n     * @exception NoSuchAlgorithmException if a KeyGeneratorSpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null or empty.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final KeyGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "KeyGenerator",
    "comment" : "\n     * Returns a <code>KeyGenerator</code> object that generates secret keys\n     * for the specified algorithm.\n     *\n     * <p> A new KeyGenerator object encapsulating the\n     * KeyGeneratorSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested key algorithm.\n     * See the KeyGenerator section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new <code>KeyGenerator</code> object.\n     *\n     * @exception NullPointerException if the specified algorithm is null.\n     *\n     * @exception NoSuchAlgorithmException if a KeyGeneratorSpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>KeyGenerator</code> object.\n     *\n     * @return the provider of this <code>KeyGenerator</code> object\n     ",
    "links" : [ ]
  }, {
    "name" : "private KeyGeneratorSpi nextSpi(KeyGeneratorSpi oldSpi, boolean reinit)",
    "returnType" : "KeyGeneratorSpi",
    "comment" : "\n     * Update the active spi of this class and return the next\n     * implementation for failover. If no more implemenations are\n     * available, this method returns null. However, the active spi of\n     * this class is never set to null.\n     ",
    "links" : [ ]
  }, {
    "name" : " void disableFailover()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void init(SecureRandom random)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key generator.\n     *\n     * @param random the source of randomness for this generator\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key generator with the specified parameter set.\n     *\n     * <p> If this key generator requires any random bytes, it will get them\n     * using the\n     * {@link java.security.SecureRandom}\n     * implementation of the highest-priority installed\n     * provider as the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * SecureRandom, a system-provided source of randomness will be used.)\n     *\n     * @param params the key generation parameters\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key generator\n     ",
    "links" : [ "java.security.SecureRandom" ]
  }, {
    "name" : "public final void init(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key generator with the specified parameter\n     * set and a user-provided source of randomness.\n     *\n     * @param params the key generation parameters\n     * @param random the source of randomness for this key generator\n     *\n     * @exception InvalidAlgorithmParameterException if <code>params</code> is\n     * inappropriate for this key generator\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(int keysize)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key generator for a certain keysize.\n     *\n     * <p> If this key generator requires any random bytes, it will get them\n     * using the\n     * {@link java.security.SecureRandom}\n     * implementation of the highest-priority installed\n     * provider as the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * SecureRandom, a system-provided source of randomness will be used.)\n     *\n     * @param keysize the keysize. This is an algorithm-specific metric,\n     * specified in number of bits.\n     *\n     * @exception InvalidParameterException if the keysize is wrong or not\n     * supported.\n     ",
    "links" : [ "java.security.SecureRandom" ]
  }, {
    "name" : "public final void init(int keysize, SecureRandom random)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key generator for a certain keysize, using a\n     * user-provided source of randomness.\n     *\n     * @param keysize the keysize. This is an algorithm-specific metric,\n     * specified in number of bits.\n     * @param random the source of randomness for this key generator\n     *\n     * @exception InvalidParameterException if the keysize is wrong or not\n     * supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SecretKey generateKey()",
    "returnType" : "SecretKey",
    "comment" : "\n     * Generates a secret key.\n     *\n     * @return the new key\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getAlgorithm()", "public static final KeyGenerator getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final KeyGenerator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final KeyGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "private KeyGeneratorSpi nextSpi(KeyGeneratorSpi oldSpi, boolean reinit)", " void disableFailover()", "public final void init(SecureRandom random)", "public final void init(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException", "public final void init(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException", "public final void init(int keysize)", "public final void init(int keysize, SecureRandom random)", "public final SecretKey generateKey()" ],
  "variableNames" : [ "I_NONE", "I_RANDOM", "I_PARAMS", "I_SIZE", "provider", "spi", "algorithm", "lock", "serviceIterator", "initType", "initKeySize", "initParams", "initRandom" ]
}