{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/UiModeManager.java",
  "packageName" : "android.app",
  "className" : "UiModeManager",
  "comment" : "\n * This class provides access to the system uimode services.  These services\n * allow applications to control UI modes of the device.\n * It provides functionality to disable the car mode and it gives access to the\n * night mode settings.\n *\n * <p>These facilities are built on top of the underlying\n * {@link android.content.Intent#ACTION_DOCK_EVENT} broadcasts that are sent when the user\n * physical places the device into and out of a dock.  When that happens,\n * the UiModeManager switches the system {@link android.content.res.Configuration}\n * to the appropriate UI mode, sends broadcasts about the mode switch, and\n * starts the corresponding mode activity if appropriate.  See the\n * broadcasts {@link #ACTION_ENTER_CAR_MODE} and\n * {@link #ACTION_ENTER_DESK_MODE} for more information.\n *\n * <p>In addition, the user may manually switch the system to car mode without\n * physically being in a dock.  While in car mode -- whether by manual action\n * from the user or being physically placed in a dock -- a notification is\n * displayed allowing the user to exit dock mode.  Thus the dock mode\n * represented here may be different than the current state of the underlying\n * dock event broadcast.\n ",
  "links" : [ "android.content.Intent#ACTION_DOCK_EVENT", "android.content.res.Configuration", "#ACTION_ENTER_CAR_MODE", "#ACTION_ENTER_DESK_MODE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_ENTER_CAR_MODE",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when the device's UI has switched to car mode, either\n     * by being placed in a car dock or explicit action of the user.  After\n     * sending the broadcast, the system will start the intent\n     * {@link android.content.Intent#ACTION_MAIN} with category\n     * {@link android.content.Intent#CATEGORY_CAR_DOCK}\n     * to display the car UI, which typically what an application would\n     * implement to provide their own interface.  However, applications can\n     * also monitor this Intent in order to be informed of mode changes or\n     * prevent the normal car UI from being displayed by setting the result\n     * of the broadcast to {@link Activity#RESULT_CANCELED}.\n     * <p>\n     * This intent is broadcast when {@link #getCurrentModeType()} transitions to\n     * {@link Configuration#UI_MODE_TYPE_CAR} from some other ui mode.\n     ",
    "links" : [ "android.app.Activity#RESULT_CANCELED", "android.content.Intent#CATEGORY_CAR_DOCK", "android.content.Intent#ACTION_MAIN", "#getCurrentModeType()", "android.content.res.Configuration#UI_MODE_TYPE_CAR" ]
  }, {
    "name" : "ACTION_ENTER_CAR_MODE_PRIORITIZED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when an app has entered car mode using either {@link #enableCarMode(int)} or\n     * {@link #enableCarMode(int, int)}.\n     * <p>\n     * Unlike {@link #ACTION_ENTER_CAR_MODE}, which is only sent when the global car mode state\n     * (i.e. {@link #getCurrentModeType()}) transitions to {@link Configuration#UI_MODE_TYPE_CAR},\n     * this intent is sent any time an app declares it has entered car mode.  Thus, this intent is\n     * intended for use by a component which needs to know not only when the global car mode state\n     * changed, but also when the highest priority app declaring car mode has changed.\n     * <p>\n     * This broadcast includes the package name of the app which requested to enter car mode in\n     * {@link #EXTRA_CALLING_PACKAGE}.  The priority the app entered car mode at is specified in\n     * {@link #EXTRA_PRIORITY}.\n     * <p>\n     * This is primarily intended to be received by other components of the Android OS.\n     * <p>\n     * Receiver requires permission: {@link android.Manifest.permission.HANDLE_CAR_MODE_CHANGES}\n     * @hide\n     ",
    "links" : [ "#enableCarMode(int", "#EXTRA_PRIORITY", "#EXTRA_CALLING_PACKAGE", "android.Manifest.permission.HANDLE_CAR_MODE_CHANGES", "#getCurrentModeType()", "#ACTION_ENTER_CAR_MODE", "#enableCarMode(int)", "android.content.res.Configuration#UI_MODE_TYPE_CAR" ]
  }, {
    "name" : "ACTION_EXIT_CAR_MODE",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when the device's UI has switch away from car mode back\n     * to normal mode.  Typically used by a car mode app, to dismiss itself\n     * when the user exits car mode.\n     * <p>\n     * This intent is broadcast when {@link #getCurrentModeType()} transitions from\n     * {@link Configuration#UI_MODE_TYPE_CAR} to some other ui mode.\n     ",
    "links" : [ "#getCurrentModeType()", "android.content.res.Configuration#UI_MODE_TYPE_CAR" ]
  }, {
    "name" : "ACTION_EXIT_CAR_MODE_PRIORITIZED",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when an app has exited car mode using {@link #disableCarMode(int)}.\n     * <p>\n     * Unlike {@link #ACTION_EXIT_CAR_MODE}, which is only sent when the global car mode state\n     * (i.e. {@link #getCurrentModeType()}) transitions to a non-car mode state such as\n     * {@link Configuration#UI_MODE_TYPE_NORMAL}, this intent is sent any time an app declares it\n     * has exited car mode.  Thus, this intent is intended for use by a component which needs to\n     * know not only when the global car mode state changed, but also when the highest priority app\n     * declaring car mode has changed.\n     * <p>\n     * This broadcast includes the package name of the app which requested to exit car mode in\n     * {@link #EXTRA_CALLING_PACKAGE}.  The priority the app originally entered car mode at is\n     * specified in {@link #EXTRA_PRIORITY}.\n     * <p>\n     * If {@link #DISABLE_CAR_MODE_ALL_PRIORITIES} is used when disabling car mode (i.e. this is\n     * initiated by the user via the persistent car mode notification), this broadcast is sent once\n     * for each priority level for which car mode is being disabled.\n     * <p>\n     * This is primarily intended to be received by other components of the Android OS.\n     * <p>\n     * Receiver requires permission: {@link android.Manifest.permission.HANDLE_CAR_MODE_CHANGES}\n     * @hide\n     ",
    "links" : [ "#ACTION_EXIT_CAR_MODE", "#EXTRA_PRIORITY", "#EXTRA_CALLING_PACKAGE", "#DISABLE_CAR_MODE_ALL_PRIORITIES", "android.Manifest.permission.HANDLE_CAR_MODE_CHANGES", "#getCurrentModeType()", "#disableCarMode(int)", "android.content.res.Configuration#UI_MODE_TYPE_NORMAL" ]
  }, {
    "name" : "ACTION_ENTER_DESK_MODE",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when the device's UI has switched to desk mode,\n     * by being placed in a desk dock.  After\n     * sending the broadcast, the system will start the intent\n     * {@link android.content.Intent#ACTION_MAIN} with category\n     * {@link android.content.Intent#CATEGORY_DESK_DOCK}\n     * to display the desk UI, which typically what an application would\n     * implement to provide their own interface.  However, applications can\n     * also monitor this Intent in order to be informed of mode changes or\n     * prevent the normal desk UI from being displayed by setting the result\n     * of the broadcast to {@link Activity#RESULT_CANCELED}.\n     ",
    "links" : [ "android.app.Activity#RESULT_CANCELED", "android.content.Intent#ACTION_MAIN", "android.content.Intent#CATEGORY_DESK_DOCK" ]
  }, {
    "name" : "ACTION_EXIT_DESK_MODE",
    "type" : "String",
    "comment" : "\n     * Broadcast sent when the device's UI has switched away from desk mode back\n     * to normal mode.  Typically used by a desk mode app, to dismiss itself\n     * when the user exits desk mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALLING_PACKAGE",
    "type" : "String",
    "comment" : "\n     * String extra used with {@link #ACTION_ENTER_CAR_MODE_PRIORITIZED} and\n     * {@link #ACTION_EXIT_CAR_MODE_PRIORITIZED} to indicate the package name of the app which\n     * requested to enter or exit car mode.\n     * @hide\n     ",
    "links" : [ "#ACTION_EXIT_CAR_MODE_PRIORITIZED", "#ACTION_ENTER_CAR_MODE_PRIORITIZED" ]
  }, {
    "name" : "EXTRA_PRIORITY",
    "type" : "String",
    "comment" : "\n     * Integer extra used with {@link #ACTION_ENTER_CAR_MODE_PRIORITIZED} and\n     * {@link #ACTION_EXIT_CAR_MODE_PRIORITIZED} to indicate the priority level at which car mode\n     * is being disabled.\n     * @hide\n     ",
    "links" : [ "#ACTION_EXIT_CAR_MODE_PRIORITIZED", "#ACTION_ENTER_CAR_MODE_PRIORITIZED" ]
  }, {
    "name" : "MODE_NIGHT_AUTO",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:\n     * automatically switch night mode on and off based on the time.\n     ",
    "links" : [ "#getNightMode()", "#setNightMode(int)" ]
  }, {
    "name" : "MODE_NIGHT_CUSTOM",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:\n     * automatically switch night mode on and off based on the time.\n     ",
    "links" : [ "#getNightMode()", "#setNightMode(int)" ]
  }, {
    "name" : "MODE_NIGHT_NO",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:\n     * never run in night mode.\n     ",
    "links" : [ "#getNightMode()", "#setNightMode(int)" ]
  }, {
    "name" : "MODE_NIGHT_YES",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:\n     * always run in night mode.\n     ",
    "links" : [ "#getNightMode()", "#setNightMode(int)" ]
  }, {
    "name" : "MODE_ATTENTION_THEME_OVERLAY_OFF",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setAttentionModeThemeOverlay(int)} (int)} and {@link\n     * #getAttentionModeThemeOverlay()}: Keeps night mode as set by {@link #setNightMode(int)}.\n     * @hide\n     ",
    "links" : [ "#getAttentionModeThemeOverlay()", "#setAttentionModeThemeOverlay(int)", "#setNightMode(int)" ]
  }, {
    "name" : "MODE_ATTENTION_THEME_OVERLAY_NIGHT",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setAttentionModeThemeOverlay(int)} (int)} and {@link\n     * #getAttentionModeThemeOverlay()}: Maintains night mode always on.\n     * @hide\n     ",
    "links" : [ "#getAttentionModeThemeOverlay()", "#setAttentionModeThemeOverlay(int)" ]
  }, {
    "name" : "MODE_ATTENTION_THEME_OVERLAY_DAY",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setAttentionModeThemeOverlay(int)} (int)} and {@link\n     * #getAttentionModeThemeOverlay()}: Maintains night mode always off (Light).\n     * @hide\n     ",
    "links" : [ "#getAttentionModeThemeOverlay()", "#setAttentionModeThemeOverlay(int)" ]
  }, {
    "name" : "MODE_ATTENTION_THEME_OVERLAY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #getAttentionModeThemeOverlay()}: Error communication with server.\n     * @hide\n     ",
    "links" : [ "#getAttentionModeThemeOverlay()" ]
  }, {
    "name" : "MODE_NIGHT_CUSTOM_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * A granular type for {@link #MODE_NIGHT_CUSTOM} which is unknown.\n     * <p>\n     * This is the default value when the night mode is set to value other than\n     * {@link #MODE_NIGHT_CUSTOM}.\n     * @hide\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "MODE_NIGHT_CUSTOM_TYPE_SCHEDULE",
    "type" : "int",
    "comment" : "\n     * A granular type for {@link #MODE_NIGHT_CUSTOM} which is based on a custom schedule.\n     * <p>\n     * This is the default value when night mode is set to {@link #MODE_NIGHT_CUSTOM} unless the\n     * the night mode custom type is specified by calling {@link #setNightModeCustomType(int)}.\n     * @hide\n     ",
    "links" : [ "#setNightModeCustomType(int)", "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "MODE_NIGHT_CUSTOM_TYPE_BEDTIME",
    "type" : "int",
    "comment" : "\n     * A granular type for {@link #MODE_NIGHT_CUSTOM} which is based on the bedtime schedule.\n     * @hide\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "sGlobals",
    "type" : "Globals",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * Context required for getting the opPackageName of API caller; maybe be {@code null} if the\n     * old constructor marked with UnSupportedAppUsage is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjectionStateListenerMap",
    "type" : "Map<OnProjectionStateChangedListener, InnerListener>",
    "comment" : "\n     * Map that stores internally created {@link InnerListener} objects keyed by their corresponding\n     * externally provided callback objects.\n     ",
    "links" : [ "InnerListener" ]
  }, {
    "name" : "mOnProjectionStateChangedListenerResourceManager",
    "type" : "OnProjectionStateChangedListenerResourceManager",
    "comment" : "\n     * Resource manager that prevents memory leakage of Contexts via binder objects if clients\n     * fail to remove listeners.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLE_CAR_MODE_GO_CAR_HOME",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #enableCarMode(int)}: go to the car\n     * home activity as part of the enable.  Enabling this way ensures\n     * a clean transition between the current activity (in non-car-mode) and\n     * the car home activity that will serve as home while in car mode.  This\n     * will switch to the car home activity even if we are already in car mode.\n     ",
    "links" : [ "#enableCarMode(int)" ]
  }, {
    "name" : "ENABLE_CAR_MODE_ALLOW_SLEEP",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #enableCarMode(int)}: allow sleep mode while in car mode.\n     * By default, when this flag is not set, the system may hold a full wake lock to keep the\n     * screen turned on and prevent the system from entering sleep mode while in car mode.\n     * Setting this flag disables such behavior and the system may enter sleep mode\n     * if there is no other user activity and no other wake lock held.\n     * Setting this flag can be relevant for a car dock application that does not require the\n     * screen kept on.\n     ",
    "links" : [ "#enableCarMode(int)" ]
  }, {
    "name" : "DISABLE_CAR_MODE_GO_HOME",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #disableCarMode(int)}: go to the normal\n     * home activity as part of the disable.  Disabling this way ensures\n     * a clean transition between the current activity (in car mode) and\n     * the original home activity (which was typically last running without\n     * being in car mode).\n     ",
    "links" : [ "#disableCarMode(int)" ]
  }, {
    "name" : "DISABLE_CAR_MODE_ALL_PRIORITIES",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #disableCarMode(int)}: Disables car mode at ALL priority levels.\n     * Primarily intended for use from {@link com.android.internal.app.DisableCarModeActivity} to\n     * provide the user with a means to exit car mode at all priority levels.\n     * @hide\n     ",
    "links" : [ "com.android.internal.app.DisableCarModeActivity", "#disableCarMode(int)" ]
  }, {
    "name" : "DEFAULT_PRIORITY",
    "type" : "int",
    "comment" : "\n     * The default priority used for entering car mode.\n     * <p>\n     * Callers of the {@link #enableCarMode(int)} priority will be assigned the default priority.\n     * This is considered the lowest possible priority for enabling car mode.\n     * <p>\n     * System apps can specify a priority other than the default priority when using\n     * {@link #enableCarMode(int, int)} to enable car mode.\n     * @hide\n     ",
    "links" : [ "#enableCarMode(int", "#enableCarMode(int)" ]
  }, {
    "name" : "mNightModeQuery",
    "type" : "IpcDataCache.QueryHandler<Void, Integer>",
    "comment" : "\n     * Retrieve the night mode for the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_MODE_API",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNightModeCache",
    "type" : "IpcDataCache<Void, Integer>",
    "comment" : "\n     * Cache the night mode for a user.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROJECTION_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates no projection type. Can be used to compare with the {@link ProjectionType} in\n     * {@link OnProjectionStateChangedListener#onProjectionStateChanged(int, Set)}.\n     *\n     * @hide\n     ",
    "links" : [ "#onProjectionStateChanged(int", "ProjectionType" ]
  }, {
    "name" : "PROJECTION_TYPE_AUTOMOTIVE",
    "type" : "int",
    "comment" : "\n     * Automotive projection prevents degradation of GPS to save battery, routes incoming calls to\n     * the automotive role holder, etc. For use with {@link #requestProjection(int)} and\n     * {@link #clearProjectionState(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#requestProjection(int)", "#clearProjectionState(int)" ]
  }, {
    "name" : "PROJECTION_TYPE_ALL",
    "type" : "int",
    "comment" : "\n     * Indicates all projection types. For use with\n     * {@link #addOnProjectionStateChangedListener(int, Executor, OnProjectionStateChangedListener)}\n     * and {@link #getProjectingPackages(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#addOnProjectionStateChangedListener(int", "#getProjectingPackages(int)" ]
  } ],
  "methods" : [ {
    "name" : "public void enableCarMode(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Force device into car mode, like it had been placed in the car dock.\n     * This will cause the device to switch to the car home UI as part of\n     * the mode switch.\n     * @param flags Must be 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableCarMode(@IntRange(from = 0) int priority, @EnableCarMode int flags)",
    "returnType" : "void",
    "comment" : "\n     * Force device into car mode, like it had been placed in the car dock.  This will cause the\n     * device to switch to the car home UI as part of the mode switch.\n     * <p>\n     * An app may request to enter car mode when the system is already in car mode.  The app may\n     * specify a \"priority\" when entering car mode.  The device will remain in car mode\n     * (i.e. {@link #getCurrentModeType()} is {@link Configuration#UI_MODE_TYPE_CAR}) as long as\n     * there is a priority level at which car mode have been enabled.\n     * <p>\n     * Specifying a priority level when entering car mode is important in cases where multiple apps\n     * on a device implement a car-mode {@link android.telecom.InCallService} (see\n     * {@link android.telecom.TelecomManager#METADATA_IN_CALL_SERVICE_CAR_MODE_UI}).  The\n     * {@link android.telecom.InCallService} associated with the highest priority app which entered\n     * car mode will be bound to by Telecom and provided with information about ongoing calls on\n     * the device.\n     * <p>\n     * System apps holding the required permission can enable car mode when the app determines the\n     * correct conditions exist for that app to be in car mode.  The device maker should ensure that\n     * where multiple apps exist on the device which can potentially enter car mode, appropriate\n     * priorities are used to ensure that calls delivered by the\n     * {@link android.telecom.InCallService} API are sent to the highest priority app given the\n     * desired behavior of the car mode experience on the device.\n     * <p>\n     * If app A and app B both meet their own criteria to enable car mode, and it is desired that\n     * app B should be the one which should receive call information in that scenario, the priority\n     * for app B should be higher than the one for app A.  The higher priority of app B compared to\n     * A means it will be bound to during calls and app A will not.  When app B no longer meets its\n     * criteria for providing a car mode experience it uses {@link #disableCarMode(int)} to disable\n     * car mode at its priority level.  The system will then unbind from app B and bind to app A as\n     * it has the next highest priority.\n     * <p>\n     * When an app enables car mode at a certain priority, it can disable car mode at the specified\n     * priority level using {@link #disableCarMode(int)}.  An app may only enable car mode at a\n     * single priority.\n     * <p>\n     * Public apps are assumed to enter/exit car mode at the lowest priority,\n     * {@link #DEFAULT_PRIORITY}.\n     *\n     * @param priority The declared priority for the caller, where {@link #DEFAULT_PRIORITY} (0) is\n     *                 the lowest priority and higher numbers represent a higher priority.\n     *                 The priorities apps declare when entering car mode is determined by the\n     *                 device manufacturer based on the desired car mode experience.\n     * @param flags Car mode flags.\n     * @hide\n     ",
    "links" : [ "android.telecom.InCallService", "#DEFAULT_PRIORITY", "#getCurrentModeType()", "android.telecom.TelecomManager#METADATA_IN_CALL_SERVICE_CAR_MODE_UI", "#disableCarMode(int)", "android.content.res.Configuration#UI_MODE_TYPE_CAR" ]
  }, {
    "name" : "public void disableCarMode(@DisableCarMode int flags)",
    "returnType" : "void",
    "comment" : "\n     * Turn off special mode if currently in car mode.\n     * @param flags One of the disable car mode flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentModeType()",
    "returnType" : "int",
    "comment" : "\n     * Return the current running mode type.  May be one of\n     * {@link Configuration#UI_MODE_TYPE_NORMAL Configuration.UI_MODE_TYPE_NORMAL},\n     * {@link Configuration#UI_MODE_TYPE_DESK Configuration.UI_MODE_TYPE_DESK},\n     * {@link Configuration#UI_MODE_TYPE_CAR Configuration.UI_MODE_TYPE_CAR},\n     * {@link Configuration#UI_MODE_TYPE_TELEVISION Configuration.UI_MODE_TYPE_TELEVISION},\n     * {@link Configuration#UI_MODE_TYPE_APPLIANCE Configuration.UI_MODE_TYPE_APPLIANCE},\n     * {@link Configuration#UI_MODE_TYPE_WATCH Configuration.UI_MODE_TYPE_WATCH}, or\n     * {@link Configuration#UI_MODE_TYPE_VR_HEADSET Configuration.UI_MODE_TYPE_VR_HEADSET}.\n     ",
    "links" : [ "android.content.res.Configuration#UI_MODE_TYPE_DESK", "android.content.res.Configuration#UI_MODE_TYPE_VR_HEADSET", "android.content.res.Configuration#UI_MODE_TYPE_WATCH", "android.content.res.Configuration#UI_MODE_TYPE_TELEVISION", "android.content.res.Configuration#UI_MODE_TYPE_NORMAL", "android.content.res.Configuration#UI_MODE_TYPE_CAR", "android.content.res.Configuration#UI_MODE_TYPE_APPLIANCE" ]
  }, {
    "name" : "public void setNightMode(@NightMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the system-wide night mode.\n     * <p>\n     * The mode can be one of:\n     * <ul>\n     *   <li><em>{@link #MODE_NIGHT_NO}<em> sets the device into\n     *       {@code notnight} mode</li>\n     *   <li><em>{@link #MODE_NIGHT_YES}</em> sets the device into\n     *       {@code night} mode</li>\n     *   <li><em>{@link #MODE_NIGHT_CUSTOM}</em> automatically switches between\n     *       {@code night} and {@code notnight} based on the custom time set (or default)</li>\n     *   <li><em>{@link #MODE_NIGHT_AUTO}</em> automatically switches between\n     *       {@code night} and {@code notnight} based on the device's current\n     *       location and certain other sensors</li>\n     * </ul>\n     * <p>\n     * <strong>Note:</strong> On API 22 and below, changes to the night mode\n     * are only effective when the {@link Configuration#UI_MODE_TYPE_CAR car}\n     * or {@link Configuration#UI_MODE_TYPE_DESK desk} mode is enabled on a\n     * device. On API 23 through API 28, changes to night mode are always effective.\n     * <p>\n     * Starting in API 29, when the device is in car mode and this method is called, night mode\n     * will change, but the new setting is not persisted and the previously persisted setting\n     * will be restored when the device exits car mode.\n     * <p>\n     * Changes to night mode take effect globally and will result in a configuration change\n     * (and potentially an Activity lifecycle event) being applied to all running apps.\n     * Developers interested in an app-local implementation of night mode should consider using\n     * {@link #setApplicationNightMode(int)} to set and persist the -night qualifier locally or\n     * {@link androidx.appcompat.app.AppCompatDelegate#setDefaultNightMode(int)} for the\n     * backward compatible implementation.\n     *\n     * @param mode the night mode to set\n     * @see #getNightMode()\n     * @see #setApplicationNightMode(int)\n     ",
    "links" : [ "android.content.res.Configuration#UI_MODE_TYPE_DESK", "androidx.appcompat.app.AppCompatDelegate#setDefaultNightMode(int)", "#MODE_NIGHT_NO", "#MODE_NIGHT_AUTO", "#MODE_NIGHT_YES", "#MODE_NIGHT_CUSTOM", "android.content.res.Configuration#UI_MODE_TYPE_CAR", "#setApplicationNightMode(int)" ]
  }, {
    "name" : "public void setNightModeCustomType(@NightModeCustomType int nightModeCustomType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current night mode to {@link #MODE_NIGHT_CUSTOM} with the custom night mode type\n     * {@code nightModeCustomType}.\n     *\n     * @param nightModeCustomType\n     * @throws IllegalArgumentException if passed an unsupported type to\n     *         {@code nightModeCustomType}.\n     * @hide\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public int getNightModeCustomType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the custom night mode type.\n     * <p>\n     * If the current night mode is not {@link #MODE_NIGHT_CUSTOM}, returns\n     * {@link #MODE_NIGHT_CUSTOM_TYPE_UNKNOWN}.\n     * @hide\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM_TYPE_UNKNOWN", "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public void setAttentionModeThemeOverlay(@AttentionModeThemeOverlayType int attentionModeThemeOverlayType)",
    "returnType" : "void",
    "comment" : "\n     * Overlays current Attention mode Night Mode overlay.\n     * {@code attentionModeThemeOverlayType}.\n     *\n     * @throws IllegalArgumentException if passed an unsupported type to\n     *                                  {@code AttentionModeThemeOverlayType}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttentionModeThemeOverlay()",
    "returnType" : "int",
    "comment" : "\n     * Returns the currently configured Attention Mode theme overlay.\n     * <p>\n     * May be one of:\n     *   <ul>\n     *     <li>{@link #MODE_ATTENTION_THEME_OVERLAY_OFF}</li>\n     *     <li>{@link #MODE_ATTENTION_THEME_OVERLAY_NIGHT}</li>\n     *     <li>{@link #MODE_ATTENTION_THEME_OVERLAY_DAY}</li>\n     *     <li>{@link #MODE_ATTENTION_THEME_OVERLAY_UNKNOWN}</li>\n     *   </ul>\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "#MODE_ATTENTION_THEME_OVERLAY_UNKNOWN", "#MODE_ATTENTION_THEME_OVERLAY_OFF", "#MODE_ATTENTION_THEME_OVERLAY_NIGHT", "#MODE_ATTENTION_THEME_OVERLAY_DAY" ]
  }, {
    "name" : "public void setApplicationNightMode(@NightMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets and persist the night mode for this application.\n     * <p>\n     * The mode can be one of:\n     * <ul>\n     *   <li><em>{@link #MODE_NIGHT_NO}<em> sets the device into\n     *       {@code notnight} mode</li>\n     *   <li><em>{@link #MODE_NIGHT_YES}</em> sets the device into\n     *       {@code night} mode</li>\n     *   <li><em>{@link #MODE_NIGHT_CUSTOM}</em> automatically switches between\n     *       {@code night} and {@code notnight} based on the custom time set (or default)</li>\n     *   <li><em>{@link #MODE_NIGHT_AUTO}</em> automatically switches between\n     *       {@code night} and {@code notnight} based on the device's current\n     *       location and certain other sensors</li>\n     * </ul>\n     * <p>\n     * Changes to night mode take effect locally and will result in a configuration change\n     * (and potentially an Activity lifecycle event) being applied to this application. The mode\n     * is persisted for this application until it is either modified by the application, the\n     * user clears the data for the application, or this application is uninstalled.\n     * <p>\n     * Developers interested in a non-persistent app-local implementation of night mode should\n     * consider using {@link androidx.appcompat.app.AppCompatDelegate#setDefaultNightMode(int)}\n     * to manage the -night qualifier locally.\n     *\n     * @param mode the night mode to set\n     * @see #setNightMode(int)\n     ",
    "links" : [ "androidx.appcompat.app.AppCompatDelegate#setDefaultNightMode(int)", "#MODE_NIGHT_NO", "#MODE_NIGHT_AUTO", "#MODE_NIGHT_YES", "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "private Integer getNightModeFromServer()",
    "returnType" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateNightModeCache()",
    "returnType" : "void",
    "comment" : "\n     * Invalidate the night mode cache.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNightMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the currently configured night mode.\n     * <p>\n     * May be one of:\n     * <ul>\n     *   <li>{@link #MODE_NIGHT_NO}</li>\n     *   <li>{@link #MODE_NIGHT_YES}</li>\n     *   <li>{@link #MODE_NIGHT_AUTO}</li>\n     *   <li>{@link #MODE_NIGHT_CUSTOM}</li>\n     *   <li>{@code -1} on error</li>\n     * </ul>\n     *\n     * @return the current night mode, or {@code -1} on error\n     * @see #setNightMode(int)\n     ",
    "links" : [ "#MODE_NIGHT_NO", "#MODE_NIGHT_AUTO", "#MODE_NIGHT_YES", "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public boolean isUiModeLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * @return If UI mode is locked or not. When UI mode is locked, calls to change UI mode\n     *         like {@link #enableCarMode(int)} will silently fail.\n     * @hide\n     ",
    "links" : [ "#enableCarMode(int)" ]
  }, {
    "name" : "public boolean isNightModeLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether night mode is locked or not.\n     * <p>\n     * When night mode is locked, only privileged system components may change\n     * night mode and calls from non-privileged applications to change night\n     * mode will fail silently.\n     *\n     * @return {@code true} if night mode is locked or {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setNightModeActivatedForCustomMode(@NightModeCustomType int nightModeCustomType, boolean active)",
    "returnType" : "boolean",
    "comment" : "\n     * [De]activating night mode for the current user if the current night mode is custom and the\n     * custom type matches {@code nightModeCustomType}.\n     *\n     * @param nightModeCustomType the specify type of custom mode\n     * @param active {@code true} to activate night mode. Otherwise, deactivate night mode\n     * @return {@code true} if night mode has successfully activated for the requested\n     *         {@code nightModeCustomType}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setNightModeActivated(boolean active)",
    "returnType" : "boolean",
    "comment" : "\n     * Activating night mode for the current user\n     *\n     * @return {@code true} if the change is successful\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocalTime getCustomNightModeStart()",
    "returnType" : "LocalTime",
    "comment" : "\n     * Returns the time of the day Dark theme activates\n     * <p>\n     * When night mode is {@link #MODE_NIGHT_CUSTOM}, the system uses\n     * this time set to activate it automatically.\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public void setCustomNightModeStart(@NonNull LocalTime time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time of the day Dark theme activates\n     * <p>\n     * When night mode is {@link #MODE_NIGHT_CUSTOM}, the system uses\n     * this time set to activate it automatically\n     * @param time The time of the day Dark theme should activate\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public LocalTime getCustomNightModeEnd()",
    "returnType" : "LocalTime",
    "comment" : "\n     * Returns the time of the day Dark theme deactivates\n     * <p>\n     * When night mode is {@link #MODE_NIGHT_CUSTOM}, the system uses\n     * this time set to deactivate it automatically.\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public void setCustomNightModeEnd(@NonNull LocalTime time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time of the day Dark theme deactivates\n     * <p>\n     * When night mode is {@link #MODE_NIGHT_CUSTOM}, the system uses\n     * this time set to deactivate it automatically.\n     * @param time The time of the day Dark theme should deactivate\n     ",
    "links" : [ "#MODE_NIGHT_CUSTOM" ]
  }, {
    "name" : "public boolean requestProjection(@ProjectionType int projectionType)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the given {@link ProjectionType}.\n     *\n     * Caller must have {@link android.Manifest.permission.TOGGLE_AUTOMOTIVE_PROJECTION} if\n     * argument is {@link #PROJECTION_TYPE_AUTOMOTIVE}.\n     * @param projectionType the type of projection to request. This must be a single\n     * {@link ProjectionType} and cannot be a bitmask.\n     * @return true if the projection was successfully set\n     * @throws IllegalArgumentException if passed {@link #PROJECTION_TYPE_NONE},\n     * {@link #PROJECTION_TYPE_ALL}, or any combination of more than one {@link ProjectionType}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.TOGGLE_AUTOMOTIVE_PROJECTION", "#PROJECTION_TYPE_AUTOMOTIVE", "ProjectionType", "#PROJECTION_TYPE_NONE", "#PROJECTION_TYPE_ALL" ]
  }, {
    "name" : "public boolean releaseProjection(@ProjectionType int projectionType)",
    "returnType" : "boolean",
    "comment" : "\n     * Releases the given {@link ProjectionType}.\n     *\n     * Caller must have {@link android.Manifest.permission.TOGGLE_AUTOMOTIVE_PROJECTION} if\n     * argument is {@link #PROJECTION_TYPE_AUTOMOTIVE}.\n     * @param projectionType the type of projection to release. This must be a single\n     * {@link ProjectionType} and cannot be a bitmask.\n     * @return true if the package had set projection and it was successfully released\n     * @throws IllegalArgumentException if passed {@link #PROJECTION_TYPE_NONE},\n     * {@link #PROJECTION_TYPE_ALL}, or any combination of more than one {@link ProjectionType}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.TOGGLE_AUTOMOTIVE_PROJECTION", "#PROJECTION_TYPE_AUTOMOTIVE", "ProjectionType", "#PROJECTION_TYPE_NONE", "#PROJECTION_TYPE_ALL" ]
  }, {
    "name" : "public Set<String> getProjectingPackages(@ProjectionType int projectionType)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets the packages that are currently projecting.\n     *\n     * @param projectionType the {@link ProjectionType}s to consider when computing which packages\n     *                       are projecting. Use {@link #PROJECTION_TYPE_ALL} to get all projecting\n     *                       packages.\n     *\n     * @hide\n     ",
    "links" : [ "ProjectionType", "#PROJECTION_TYPE_ALL" ]
  }, {
    "name" : "public int getActiveProjectionTypes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the {@link ProjectionType}s that are currently active.\n     *\n     * @hide\n     ",
    "links" : [ "ProjectionType" ]
  }, {
    "name" : "public void addOnProjectionStateChangedListener(@ProjectionType int projectionType, @NonNull @CallbackExecutor Executor executor, @NonNull OnProjectionStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Configures the listener to receive callbacks when the packages projecting using the given\n     * {@link ProjectionType}s change.\n     *\n     * @param projectionType one or more {@link ProjectionType}s to listen for changes regarding\n     * @param executor an {@link Executor} on which to invoke the callbacks\n     * @param listener the {@link OnProjectionStateChangedListener} to add\n     *\n     * @hide\n     ",
    "links" : [ "OnProjectionStateChangedListener", "android.annotation.CallbackExecutor", "ProjectionType" ]
  }, {
    "name" : "public void removeOnProjectionStateChangedListener(@NonNull OnProjectionStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes the listener so it stops receiving updates for all {@link ProjectionType}s.\n     *\n     * @param listener the {@link OnProjectionStateChangedListener} to remove\n     *\n     * @hide\n     ",
    "links" : [ "OnProjectionStateChangedListener", "ProjectionType" ]
  }, {
    "name" : "public float getContrast()",
    "returnType" : "float",
    "comment" : "\n     * Returns the color contrast for the user.\n     * <p>\n     * <strong>Note:</strong> You need to query this only if your application is\n     * doing its own rendering and does not rely on the material rendering pipeline.\n     * </p>\n     * @return The color contrast, float in [-1, 1] where\n     * <ul>\n     *     <li> &nbsp; 0 corresponds to the default contrast </li>\n     *     <li>       -1 corresponds to the minimum contrast </li>\n     *     <li> &nbsp; 1 corresponds to the maximum contrast </li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addContrastChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull ContrastChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link ContrastChangeListener} for the current user.\n     *\n     * @param executor The executor on which the listener should be called back.\n     * @param listener The listener.\n     ",
    "links" : [ "ContrastChangeListener" ]
  }, {
    "name" : "public void removeContrastChangeListener(@NonNull ContrastChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link ContrastChangeListener} for the current user.\n     * If the listener was not registered, does nothing and returns.\n     *\n     * @param listener The listener to unregister.\n     ",
    "links" : [ "ContrastChangeListener" ]
  } ],
  "methodNames" : [ "public void enableCarMode(int flags)", "public void enableCarMode(@IntRange(from = 0) int priority, @EnableCarMode int flags)", "public void disableCarMode(@DisableCarMode int flags)", "public int getCurrentModeType()", "public void setNightMode(@NightMode int mode)", "public void setNightModeCustomType(@NightModeCustomType int nightModeCustomType)", "public int getNightModeCustomType()", "public void setAttentionModeThemeOverlay(@AttentionModeThemeOverlayType int attentionModeThemeOverlayType)", "public int getAttentionModeThemeOverlay()", "public void setApplicationNightMode(@NightMode int mode)", "private Integer getNightModeFromServer()", "public static void invalidateNightModeCache()", "public int getNightMode()", "public boolean isUiModeLocked()", "public boolean isNightModeLocked()", "public boolean setNightModeActivatedForCustomMode(@NightModeCustomType int nightModeCustomType, boolean active)", "public boolean setNightModeActivated(boolean active)", "public LocalTime getCustomNightModeStart()", "public void setCustomNightModeStart(@NonNull LocalTime time)", "public LocalTime getCustomNightModeEnd()", "public void setCustomNightModeEnd(@NonNull LocalTime time)", "public boolean requestProjection(@ProjectionType int projectionType)", "public boolean releaseProjection(@ProjectionType int projectionType)", "public Set<String> getProjectingPackages(@ProjectionType int projectionType)", "public int getActiveProjectionTypes()", "public void addOnProjectionStateChangedListener(@ProjectionType int projectionType, @NonNull @CallbackExecutor Executor executor, @NonNull OnProjectionStateChangedListener listener)", "public void removeOnProjectionStateChangedListener(@NonNull OnProjectionStateChangedListener listener)", "public float getContrast()", "public void addContrastChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull ContrastChangeListener listener)", "public void removeContrastChangeListener(@NonNull ContrastChangeListener listener)" ],
  "variableNames" : [ "TAG", "ACTION_ENTER_CAR_MODE", "ACTION_ENTER_CAR_MODE_PRIORITIZED", "ACTION_EXIT_CAR_MODE", "ACTION_EXIT_CAR_MODE_PRIORITIZED", "ACTION_ENTER_DESK_MODE", "ACTION_EXIT_DESK_MODE", "EXTRA_CALLING_PACKAGE", "EXTRA_PRIORITY", "MODE_NIGHT_AUTO", "MODE_NIGHT_CUSTOM", "MODE_NIGHT_NO", "MODE_NIGHT_YES", "MODE_ATTENTION_THEME_OVERLAY_OFF", "MODE_ATTENTION_THEME_OVERLAY_NIGHT", "MODE_ATTENTION_THEME_OVERLAY_DAY", "MODE_ATTENTION_THEME_OVERLAY_UNKNOWN", "MODE_NIGHT_CUSTOM_TYPE_UNKNOWN", "MODE_NIGHT_CUSTOM_TYPE_SCHEDULE", "MODE_NIGHT_CUSTOM_TYPE_BEDTIME", "sGlobals", "mContext", "mLock", "mProjectionStateListenerMap", "mOnProjectionStateChangedListenerResourceManager", "ENABLE_CAR_MODE_GO_CAR_HOME", "ENABLE_CAR_MODE_ALLOW_SLEEP", "DISABLE_CAR_MODE_GO_HOME", "DISABLE_CAR_MODE_ALL_PRIORITIES", "DEFAULT_PRIORITY", "mNightModeQuery", "NIGHT_MODE_API", "mNightModeCache", "PROJECTION_TYPE_NONE", "PROJECTION_TYPE_AUTOMOTIVE", "PROJECTION_TYPE_ALL" ]
}