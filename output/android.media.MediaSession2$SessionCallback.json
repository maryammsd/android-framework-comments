{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaSession2.java",
  "packageName" : "android.media",
  "className" : "SessionCallback",
  "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Callback to be called for all incoming commands from {@link MediaController2}s.\n     ",
  "links" : [ "android.media.MediaController2" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Session2CommandGroup onConnect(@NonNull MediaSession2 session, @NonNull ControllerInfo controller)",
    "returnType" : "Session2CommandGroup",
    "comment" : "\n         * Called when a controller is created for this session. Return allowed commands for\n         * controller. By default it returns {@code null}.\n         * <p>\n         * You can reject the connection by returning {@code null}. In that case, controller\n         * receives {@link MediaController2.ControllerCallback#onDisconnected(MediaController2)}\n         * and cannot be used.\n         * <p>\n         * The controller hasn't connected yet in this method, so calls to the controller\n         * (e.g. {@link #sendSessionCommand}) would be ignored. Override {@link #onPostConnect} for\n         * the custom initialization for the controller instead.\n         *\n         * @param session the session for this event\n         * @param controller controller information.\n         * @return allowed commands. Can be {@code null} to reject connection.\n         ",
    "links" : [ "#onPostConnect", "MediaController2.ControllerCallback#onDisconnected(MediaController2)", "#sendSessionCommand" ]
  }, {
    "name" : "public void onPostConnect(@NonNull MediaSession2 session, @NonNull ControllerInfo controller)",
    "returnType" : "void",
    "comment" : "\n         * Called immediately after a controller is connected. This is a convenient method to add\n         * custom initialization between the session and a controller.\n         * <p>\n         * Note that calls to the controller (e.g. {@link #sendSessionCommand}) work here but don't\n         * work in {@link #onConnect} because the controller hasn't connected yet in\n         * {@link #onConnect}.\n         *\n         * @param session the session for this event\n         * @param controller controller information.\n         ",
    "links" : [ "#sendSessionCommand", "#onConnect" ]
  }, {
    "name" : "public void onDisconnected(@NonNull MediaSession2 session, @NonNull ControllerInfo controller)",
    "returnType" : "void",
    "comment" : "\n         * Called when a controller is disconnected\n         *\n         * @param session the session for this event\n         * @param controller controller information\n         ",
    "links" : [ ]
  }, {
    "name" : "public Session2Command.Result onSessionCommand(@NonNull MediaSession2 session, @NonNull ControllerInfo controller, @NonNull Session2Command command, @Nullable Bundle args)",
    "returnType" : "Session2Command.Result",
    "comment" : "\n         * Called when a controller sent a session command.\n         *\n         * @param session the session for this event\n         * @param controller controller information\n         * @param command the session command\n         * @param args optional arguments\n         * @return the result for the session command. If {@code null}, RESULT_INFO_SKIPPED\n         *         will be sent to the session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCommandResult(@NonNull MediaSession2 session, @NonNull ControllerInfo controller, @NonNull Object token, @NonNull Session2Command command, @NonNull Session2Command.Result result)",
    "returnType" : "void",
    "comment" : "\n         * Called when the command sent to the controller is finished.\n         *\n         * @param session the session for this event\n         * @param controller controller information\n         * @param token the token got from {@link MediaSession2#sendSessionCommand}\n         * @param command the session command\n         * @param result the result of the session command\n         ",
    "links" : [ "android.media.MediaSession2#sendSessionCommand" ]
  } ],
  "methodNames" : [ "public Session2CommandGroup onConnect(@NonNull MediaSession2 session, @NonNull ControllerInfo controller)", "public void onPostConnect(@NonNull MediaSession2 session, @NonNull ControllerInfo controller)", "public void onDisconnected(@NonNull MediaSession2 session, @NonNull ControllerInfo controller)", "public Session2Command.Result onSessionCommand(@NonNull MediaSession2 session, @NonNull ControllerInfo controller, @NonNull Session2Command command, @Nullable Bundle args)", "public void onCommandResult(@NonNull MediaSession2 session, @NonNull ControllerInfo controller, @NonNull Object token, @NonNull Session2Command command, @NonNull Session2Command.Result result)" ],
  "variableNames" : [ ]
}