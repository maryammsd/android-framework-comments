{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/animation/LayoutAnimationController.java",
  "packageName" : "android.view.animation",
  "className" : "LayoutAnimationController",
  "comment" : "\n * A layout animation controller is used to animated a layout's, or a view\n * group's, children. Each child uses the same animation but for every one of\n * them, the animation starts at a different time. A layout animation controller\n * is used by {@link android.view.ViewGroup} to compute the delay by which each\n * child's animation start must be offset. The delay is computed by using\n * characteristics of each child, like its index in the view group.\n *\n * This standard implementation computes the delay by multiplying a fixed\n * amount of miliseconds by the index of the child in its parent view group.\n * Subclasses are supposed to override\n * {@link #getDelayForView(android.view.View)} to implement a different way\n * of computing the delay. For instance, a\n * {@link android.view.animation.GridLayoutAnimationController} will compute the\n * delay based on the column and row indices of the child in its parent view\n * group.\n *\n * Information used to compute the animation delay of each child are stored\n * in an instance of\n * {@link android.view.animation.LayoutAnimationController.AnimationParameters},\n * itself stored in the {@link android.view.ViewGroup.LayoutParams} of the view.\n *\n * @attr ref android.R.styleable#LayoutAnimation_delay\n * @attr ref android.R.styleable#LayoutAnimation_animationOrder\n * @attr ref android.R.styleable#LayoutAnimation_interpolator\n * @attr ref android.R.styleable#LayoutAnimation_animation\n ",
  "variables" : [ {
    "name" : "ORDER_NORMAL",
    "type" : "int",
    "comment" : "\n     * Distributes the animation delays in the order in which view were added\n     * to their view group.\n     ",
    "links" : [ ]
  }, {
    "name" : "ORDER_REVERSE",
    "type" : "int",
    "comment" : "\n     * Distributes the animation delays in the reverse order in which view were\n     * added to their view group.\n     ",
    "links" : [ ]
  }, {
    "name" : "ORDER_RANDOM",
    "type" : "int",
    "comment" : "\n     * Randomly distributes the animation delays.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimation",
    "type" : "Animation",
    "comment" : "\n     * The animation applied on each child of the view group on which this\n     * layout animation controller is set.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRandomizer",
    "type" : "Random",
    "comment" : "\n     * The randomizer used when the order is set to random. Subclasses should\n     * use this object to avoid creating their own.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "\n     * The interpolator used to interpolate the delays.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDelay",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrder",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getOrder()",
    "returnType" : "int",
    "comment" : "\n     * Returns the order used to compute the delay of each child's animation.\n     *\n     * @return one of {@link #ORDER_NORMAL}, {@link #ORDER_REVERSE} or\n     *         {@link #ORDER_RANDOM}\n     *\n     * @attr ref android.R.styleable#LayoutAnimation_animationOrder\n     ",
    "links" : [ "#ORDER_NORMAL", "#ORDER_RANDOM", "#ORDER_REVERSE" ]
  }, {
    "name" : "public void setOrder(int order)",
    "returnType" : "void",
    "comment" : "\n     * Sets the order used to compute the delay of each child's animation.\n     *\n     * @param order one of {@link #ORDER_NORMAL}, {@link #ORDER_REVERSE} or\n     *        {@link #ORDER_RANDOM}\n     *\n     * @attr ref android.R.styleable#LayoutAnimation_animationOrder\n     ",
    "links" : [ "#ORDER_NORMAL", "#ORDER_RANDOM", "#ORDER_REVERSE" ]
  }, {
    "name" : "public void setAnimation(Context context, @AnimRes int resourceID)",
    "returnType" : "void",
    "comment" : "\n     * Sets the animation to be run on each child of the view group on which\n     * this layout animation controller is .\n     *\n     * @param context the context from which the animation must be inflated\n     * @param resourceID the resource identifier of the animation\n     *\n     * @see #setAnimation(Animation)\n     * @see #getAnimation() \n     *\n     * @attr ref android.R.styleable#LayoutAnimation_animation\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnimation(Animation animation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the animation to be run on each child of the view group on which\n     * this layout animation controller is .\n     *\n     * @param animation the animation to run on each child of the view group\n\n     * @see #setAnimation(android.content.Context, int)\n     * @see #getAnimation()\n     *\n     * @attr ref android.R.styleable#LayoutAnimation_animation\n     ",
    "links" : [ ]
  }, {
    "name" : "public Animation getAnimation()",
    "returnType" : "Animation",
    "comment" : "\n     * Returns the animation applied to each child of the view group on which\n     * this controller is set.\n     *\n     * @return an {@link android.view.animation.Animation} instance\n     *\n     * @see #setAnimation(android.content.Context, int)\n     * @see #setAnimation(Animation)\n     ",
    "links" : [ "android.view.animation.Animation" ]
  }, {
    "name" : "public void setInterpolator(Context context, @InterpolatorRes int resourceID)",
    "returnType" : "void",
    "comment" : "\n     * Sets the interpolator used to interpolate the delays between the\n     * children.\n     *\n     * @param context the context from which the interpolator must be inflated\n     * @param resourceID the resource identifier of the interpolator\n     *\n     * @see #getInterpolator()\n     * @see #setInterpolator(Interpolator)\n     *\n     * @attr ref android.R.styleable#LayoutAnimation_interpolator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInterpolator(Interpolator interpolator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the interpolator used to interpolate the delays between the\n     * children.\n     *\n     * @param interpolator the interpolator\n     *\n     * @see #getInterpolator()\n     * @see #setInterpolator(Interpolator)\n     *\n     * @attr ref android.R.styleable#LayoutAnimation_interpolator\n     ",
    "links" : [ ]
  }, {
    "name" : "public Interpolator getInterpolator()",
    "returnType" : "Interpolator",
    "comment" : "\n     * Returns the interpolator used to interpolate the delays between the\n     * children.\n     *\n     * @return an {@link android.view.animation.Interpolator}\n     ",
    "links" : [ "android.view.animation.Interpolator" ]
  }, {
    "name" : "public float getDelay()",
    "returnType" : "float",
    "comment" : "\n     * Returns the delay by which the children's animation are offset. The\n     * delay is expressed as a fraction of the animation duration.\n     *\n     * @return a fraction of the animation duration\n     *\n     * @see #setDelay(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDelay(float delay)",
    "returnType" : "void",
    "comment" : "\n     * Sets the delay, as a fraction of the animation duration, by which the\n     * children's animations are offset. The general formula is:\n     *\n     * <pre>\n     * child animation delay = child index * delay * animation duration\n     * </pre>\n     *\n     * @param delay a fraction of the animation duration\n     *\n     * @see #getDelay()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean willOverlap()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether two children's animations will overlap. Animations\n     * overlap when the delay is lower than 100% (or 1.0).\n     *\n     * @return true if animations will overlap, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Animation getAnimationForView(View view)",
    "returnType" : "Animation",
    "comment" : "\n     * Returns the animation to be applied to the specified view. The returned\n     * animation is delayed by an offset computed according to the information\n     * provided by\n     * {@link android.view.animation.LayoutAnimationController.AnimationParameters}.\n     * This method is called by view groups to obtain the animation to set on\n     * a specific child.\n     *\n     * @param view the view to animate\n     * @return an animation delayed by the number of milliseconds returned by\n     *         {@link #getDelayForView(android.view.View)}\n     *\n     * @see #getDelay()\n     * @see #setDelay(float)\n     * @see #getDelayForView(android.view.View)\n     ",
    "links" : [ "#getDelayForView(android.view.View)", "android.view.animation.LayoutAnimationController.AnimationParameters" ]
  }, {
    "name" : "public boolean isDone()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the layout animation is over or not. A layout animation\n     * is considered done when the animation with the longest delay is done.\n     *\n     * @return true if all of the children's animations are over, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long getDelayForView(View view)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of milliseconds by which the specified view's\n     * animation must be delayed or offset. Subclasses should override this\n     * method to return a suitable value.\n     *\n     * This implementation returns <code>child animation delay</code>\n     * milliseconds where:\n     *\n     * <pre>\n     * child animation delay = child index * delay\n     * </pre>\n     *\n     * The index is retrieved from the\n     * {@link android.view.animation.LayoutAnimationController.AnimationParameters}\n     * found in the view's {@link android.view.ViewGroup.LayoutParams}.\n     *\n     * @param view the view for which to obtain the animation's delay\n     * @return a delay in milliseconds\n     *\n     * @see #getAnimationForView(android.view.View)\n     * @see #getDelay()\n     * @see #getTransformedIndex(android.view.animation.LayoutAnimationController.AnimationParameters)\n     * @see android.view.ViewGroup.LayoutParams\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams", "android.view.animation.LayoutAnimationController.AnimationParameters" ]
  }, {
    "name" : "protected int getTransformedIndex(AnimationParameters params)",
    "returnType" : "int",
    "comment" : "\n     * Transforms the index stored in\n     * {@link android.view.animation.LayoutAnimationController.AnimationParameters}\n     * by the order returned by {@link #getOrder()}. Subclasses should override\n     * this method to provide additional support for other types of ordering.\n     * This method should be invoked by\n     * {@link #getDelayForView(android.view.View)} prior to any computation. \n     *\n     * @param params the animation parameters containing the index\n     * @return a transformed index\n     ",
    "links" : [ "#getDelayForView(android.view.View)", "#getOrder()", "android.view.animation.LayoutAnimationController.AnimationParameters" ]
  } ],
  "variableNames" : [ "ORDER_NORMAL", "ORDER_REVERSE", "ORDER_RANDOM", "mAnimation", "mRandomizer", "mInterpolator", "mDelay", "mOrder", "mDuration", "mMaxDelay" ],
  "methodNames" : [ "public int getOrder()", "public void setOrder(int order)", "public void setAnimation(Context context, @AnimRes int resourceID)", "public void setAnimation(Animation animation)", "public Animation getAnimation()", "public void setInterpolator(Context context, @InterpolatorRes int resourceID)", "public void setInterpolator(Interpolator interpolator)", "public Interpolator getInterpolator()", "public float getDelay()", "public void setDelay(float delay)", "public boolean willOverlap()", "public void start()", "public final Animation getAnimationForView(View view)", "public boolean isDone()", "protected long getDelayForView(View view)", "protected int getTransformedIndex(AnimationParameters params)" ]
}