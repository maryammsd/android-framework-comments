{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/mock/MockContentResolver.java",
  "packageName" : "android.test.mock",
  "className" : "MockContentResolver",
  "comment" : "\n * <p>\n *      An extension of {@link android.content.ContentResolver} that is designed for\n *      testing.\n * </p>\n * <p>\n *      MockContentResolver overrides Android's normal way of resolving providers by\n *      authority. To have access to a provider based on its authority, users of\n *      MockContentResolver first instantiate the provider and\n *      use {@link MockContentResolver#addProvider(String, ContentProvider)}. Resolution of an\n *      authority occurs entirely within MockContentResolver.\n * </p>\n * <p>\n *      Users can also set an authority's entry in the map to null, so that a provider is completely\n *      mocked out.\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about application testing, read the\n * <a href=\"{@docRoot}guide/topics/testing/index.html\">Testing</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "mProviders",
    "type" : "Map<String, ContentProvider>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addProvider(String name, ContentProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Adds access to a provider based on its authority\n     *\n     * @param name The authority name associated with the provider.\n     * @param provider An instance of {@link android.content.ContentProvider} or one of its\n     * subclasses, or null.\n     ",
    "links" : [ "android.content.ContentProvider" ]
  }, {
    "name" : "protected IContentProvider acquireProvider(Context context, String name)",
    "returnType" : "IContentProvider",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected IContentProvider acquireExistingProvider(Context context, String name)",
    "returnType" : "IContentProvider",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean releaseProvider(IContentProvider provider)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected IContentProvider acquireUnstableProvider(Context c, String name)",
    "returnType" : "IContentProvider",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean releaseUnstableProvider(IContentProvider icp)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unstableProviderDied(IContentProvider icp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void notifyChange(@NonNull Uri uri, @Nullable ContentObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the behavior from the parent class to completely ignore any\n     * content notifications sent to this object. This effectively hides clients\n     * from observers elsewhere in the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyChange(@NonNull Uri uri, @Nullable ContentObserver observer, boolean syncToNetwork)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the behavior from the parent class to completely ignore any\n     * content notifications sent to this object. This effectively hides clients\n     * from observers elsewhere in the system.\n     *\n     * @deprecated callers should consider migrating to\n     *             {@link #notifyChange(Uri, ContentObserver, int)}, as it\n     *             offers support for many more options than just\n     *             {@link #NOTIFY_SYNC_TO_NETWORK}.\n     ",
    "links" : [ "#notifyChange", "#NOTIFY_SYNC_TO_NETWORK" ]
  }, {
    "name" : "public void notifyChange(@NonNull Uri uri, @Nullable ContentObserver observer, @NotifyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the behavior from the parent class to completely ignore any\n     * content notifications sent to this object. This effectively hides clients\n     * from observers elsewhere in the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyChange(@NonNull Collection<Uri> uris, @Nullable ContentObserver observer, @NotifyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the behavior from the parent class to completely ignore any\n     * content notifications sent to this object. This effectively hides clients\n     * from observers elsewhere in the system.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mProviders" ],
  "methodNames" : [ "public void addProvider(String name, ContentProvider provider)", "protected IContentProvider acquireProvider(Context context, String name)", "protected IContentProvider acquireExistingProvider(Context context, String name)", "public boolean releaseProvider(IContentProvider provider)", "protected IContentProvider acquireUnstableProvider(Context c, String name)", "public boolean releaseUnstableProvider(IContentProvider icp)", "public void unstableProviderDied(IContentProvider icp)", "public void notifyChange(@NonNull Uri uri, @Nullable ContentObserver observer)", "public void notifyChange(@NonNull Uri uri, @Nullable ContentObserver observer, boolean syncToNetwork)", "public void notifyChange(@NonNull Uri uri, @Nullable ContentObserver observer, @NotifyFlags int flags)", "public void notifyChange(@NonNull Collection<Uri> uris, @Nullable ContentObserver observer, @NotifyFlags int flags)" ]
}