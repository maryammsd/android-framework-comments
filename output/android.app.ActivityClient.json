{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ActivityClient.java",
  "packageName" : "android.app",
  "className" : "ActivityClient",
  "comment" : "\n * Provides the activity associated operations that communicate with system.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sInstance",
    "type" : "Singleton<ActivityClient>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTERFACE_SINGLETON",
    "type" : "ActivityClientControllerSingleton",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void activityIdle(IBinder token, Configuration config, boolean stopProfiling)",
    "returnType" : "void",
    "comment" : " Reports the main thread is idle after the activity is resumed. ",
    "links" : [ ]
  }, {
    "name" : "public void activityResumed(IBinder token, boolean handleSplashScreenExit)",
    "returnType" : "void",
    "comment" : " Reports {@link Activity#onResume()} is done. ",
    "links" : [ "android.app.Activity#onResume()" ]
  }, {
    "name" : "public void activityRefreshed(IBinder token)",
    "returnType" : "void",
    "comment" : " Reports {@link android.app.servertransaction.RefreshCallbackItem} is executed. ",
    "links" : [ "android.app.servertransaction.RefreshCallbackItem" ]
  }, {
    "name" : "public void activityTopResumedStateLost()",
    "returnType" : "void",
    "comment" : "\n     * Reports after {@link Activity#onTopResumedActivityChanged(boolean)} is called for losing the\n     * top most position.\n     ",
    "links" : [ "android.app.Activity#onTopResumedActivityChanged(boolean)" ]
  }, {
    "name" : "public void activityPaused(IBinder token)",
    "returnType" : "void",
    "comment" : " Reports {@link Activity#onPause()} is done. ",
    "links" : [ "android.app.Activity#onPause()" ]
  }, {
    "name" : "public void activityStopped(IBinder token, Bundle state, PersistableBundle persistentState, CharSequence description)",
    "returnType" : "void",
    "comment" : " Reports {@link Activity#onStop()} is done. ",
    "links" : [ "android.app.Activity#onStop()" ]
  }, {
    "name" : "public void activityDestroyed(IBinder token)",
    "returnType" : "void",
    "comment" : " Reports {@link Activity#onDestroy()} is done. ",
    "links" : [ "android.app.Activity#onDestroy()" ]
  }, {
    "name" : "public void activityLocalRelaunch(IBinder token)",
    "returnType" : "void",
    "comment" : " Reports the activity starts local relaunch. ",
    "links" : [ ]
  }, {
    "name" : "public void activityRelaunched(IBinder token)",
    "returnType" : "void",
    "comment" : " Reports the activity has completed relaunched. ",
    "links" : [ ]
  }, {
    "name" : " void reportSizeConfigurations(IBinder token, SizeConfigurationBuckets sizeConfigurations)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean shouldUpRecreateTask(IBinder token, String destAffinity)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean navigateUpTo(IBinder token, Intent destIntent, String resolvedType, int resultCode, Intent resultData)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean releaseActivityInstance(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean finishActivityAffinity(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishSubActivity(IBinder token, String resultWho, int requestCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setForceSendResultForMediaProjection(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isTopOfTask(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean willActivityBeVisible(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId(IBinder token)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTaskForActivity(IBinder token, boolean onlyRoot)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Configuration getTaskConfiguration(IBinder activityToken)",
    "returnType" : "Configuration",
    "comment" : "\n     * Returns the {@link Configuration} of the task which hosts the Activity, or {@code null} if\n     * the task {@link Configuration} cannot be obtained.\n     ",
    "links" : [ "android.content.res.Configuration" ]
  }, {
    "name" : "public IBinder getActivityTokenBelow(IBinder activityToken)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the non-finishing activity token below in the same task if it belongs to the same\n     * process.\n     ",
    "links" : [ ]
  }, {
    "name" : " ComponentName getCallingActivity(IBinder token)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getCallingPackage(IBinder token)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLaunchedFromUid(IBinder token)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getLaunchedFromPackage(IBinder token)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getActivityCallerUid(IBinder activityToken, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " Returns the uid of the app that launched the activity. ",
    "links" : [ ]
  }, {
    "name" : "public String getActivityCallerPackage(IBinder activityToken, IBinder callerToken)",
    "returnType" : "String",
    "comment" : " Returns the package of the app that launched the activity. ",
    "links" : [ ]
  }, {
    "name" : "public int checkActivityCallerContentUriPermission(IBinder activityToken, IBinder callerToken, Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : " Checks if the app that launched the activity has access to the URI. ",
    "links" : [ ]
  }, {
    "name" : "public void setRequestedOrientation(IBinder token, int requestedOrientation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getRequestedOrientation(IBinder token)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean convertFromTranslucent(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean convertToTranslucent(IBinder token, Bundle options)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportActivityFullyDrawn(IBinder token, boolean restoredFromBundle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isImmersive(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setImmersive(IBinder token, boolean immersive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean enterPictureInPictureMode(IBinder token, PictureInPictureParams params)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setPictureInPictureParams(IBinder token, PictureInPictureParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setShouldDockBigOverlays(IBinder token, boolean shouldDockBigOverlays)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void toggleFreeformWindowingMode(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void requestMultiwindowFullscreen(IBinder token, int request, IRemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startLockTaskModeByToken(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopLockTaskModeByToken(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void showLockTaskEscapeMessage(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean showAssistFromActivity(IBinder token, Bundle args)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isRootVoiceInteraction(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startLocalVoiceInteraction(IBinder callingActivity, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopLocalVoiceInteraction(IBinder callingActivity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setShowWhenLocked(IBinder token, boolean showWhenLocked)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setInheritShowWhenLocked(IBinder token, boolean inheritShowWhenLocked)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTurnScreenOn(IBinder token, boolean turnScreenOn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setAllowCrossUidActivitySwitchFromBelow(IBinder token, boolean allowed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int setVrMode(IBinder token, boolean enabled, ComponentName packageName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void overrideActivityTransition(IBinder token, boolean open, int enterAnim, int exitAnim, int backgroundColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void clearOverrideActivityTransition(IBinder token, boolean open)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void overridePendingTransition(IBinder token, String packageName, int enterAnim, int exitAnim, int backgroundColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setRecentsScreenshotEnabled(IBinder token, boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateHomeTaskSnapshot(IBinder homeToken)",
    "returnType" : "void",
    "comment" : "\n     * Removes the outdated snapshot of the home task.\n     *\n     * @param homeToken The token of the home task, or null if you have the\n     *                  {@link android.Manifest.permission#MANAGE_ACTIVITY_TASKS} permission and\n     *                  want us to find the home task token for you.\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_ACTIVITY_TASKS" ]
  }, {
    "name" : " void dismissKeyguard(IBinder token, IKeyguardDismissCallback callback, CharSequence message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void registerRemoteAnimations(IBinder token, RemoteAnimationDefinition definition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unregisterRemoteAnimations(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onBackPressed(IBinder token, IRequestFinishCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportSplashScreenAttached(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Reports the splash screen view has attached to client.\n     ",
    "links" : [ ]
  }, {
    "name" : " void enableTaskLocaleOverride(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequestedToLaunchInTaskFragment(IBinder activityToken, IBinder taskFragmentToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the activity was explicitly requested to be launched in the\n     * TaskFragment.\n     *\n     * @param activityToken The token of the Activity.\n     * @param taskFragmentToken The token of the TaskFragment.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setActivityRecordInputSinkEnabled(IBinder activityToken, boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void requestCompatCameraControl(Resources res, IBinder token, boolean showControl, boolean transformationApplied, ICompatCameraControlCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Shows or hides a Camera app compat toggle for stretched issues with the requested state.\n     *\n     * @param token The token for the window that needs a control.\n     * @param showControl Whether the control should be shown or hidden.\n     * @param transformationApplied Whether the treatment is already applied.\n     * @param callback The callback executed when the user clicks on a control.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityClient getInstance()",
    "returnType" : "ActivityClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IActivityClientController setActivityClientController(IActivityClientController activityClientController)",
    "returnType" : "IActivityClientController",
    "comment" : "\n     * If system server has passed the controller interface, store it so the subsequent access can\n     * speed up.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IActivityClientController getActivityClientController()",
    "returnType" : "IActivityClientController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void activityIdle(IBinder token, Configuration config, boolean stopProfiling)", "public void activityResumed(IBinder token, boolean handleSplashScreenExit)", "public void activityRefreshed(IBinder token)", "public void activityTopResumedStateLost()", "public void activityPaused(IBinder token)", "public void activityStopped(IBinder token, Bundle state, PersistableBundle persistentState, CharSequence description)", "public void activityDestroyed(IBinder token)", "public void activityLocalRelaunch(IBinder token)", "public void activityRelaunched(IBinder token)", " void reportSizeConfigurations(IBinder token, SizeConfigurationBuckets sizeConfigurations)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", " boolean shouldUpRecreateTask(IBinder token, String destAffinity)", " boolean navigateUpTo(IBinder token, Intent destIntent, String resolvedType, int resultCode, Intent resultData)", " boolean releaseActivityInstance(IBinder token)", "public boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask)", " boolean finishActivityAffinity(IBinder token)", " void finishSubActivity(IBinder token, String resultWho, int requestCode)", " void setForceSendResultForMediaProjection(IBinder token)", "public boolean isTopOfTask(IBinder token)", " boolean willActivityBeVisible(IBinder token)", "public int getDisplayId(IBinder token)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public Configuration getTaskConfiguration(IBinder activityToken)", "public IBinder getActivityTokenBelow(IBinder activityToken)", " ComponentName getCallingActivity(IBinder token)", " String getCallingPackage(IBinder token)", "public int getLaunchedFromUid(IBinder token)", "public String getLaunchedFromPackage(IBinder token)", "public int getActivityCallerUid(IBinder activityToken, IBinder callerToken)", "public String getActivityCallerPackage(IBinder activityToken, IBinder callerToken)", "public int checkActivityCallerContentUriPermission(IBinder activityToken, IBinder callerToken, Uri uri, int modeFlags)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", " int getRequestedOrientation(IBinder token)", " boolean convertFromTranslucent(IBinder token)", " boolean convertToTranslucent(IBinder token, Bundle options)", " void reportActivityFullyDrawn(IBinder token, boolean restoredFromBundle)", " boolean isImmersive(IBinder token)", " void setImmersive(IBinder token, boolean immersive)", " boolean enterPictureInPictureMode(IBinder token, PictureInPictureParams params)", " void setPictureInPictureParams(IBinder token, PictureInPictureParams params)", " void setShouldDockBigOverlays(IBinder token, boolean shouldDockBigOverlays)", " void toggleFreeformWindowingMode(IBinder token)", " void requestMultiwindowFullscreen(IBinder token, int request, IRemoteCallback callback)", " void startLockTaskModeByToken(IBinder token)", " void stopLockTaskModeByToken(IBinder token)", " void showLockTaskEscapeMessage(IBinder token)", " void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", " boolean showAssistFromActivity(IBinder token, Bundle args)", " boolean isRootVoiceInteraction(IBinder token)", " void startLocalVoiceInteraction(IBinder callingActivity, Bundle options)", " void stopLocalVoiceInteraction(IBinder callingActivity)", " void setShowWhenLocked(IBinder token, boolean showWhenLocked)", " void setInheritShowWhenLocked(IBinder token, boolean inheritShowWhenLocked)", " void setTurnScreenOn(IBinder token, boolean turnScreenOn)", " void setAllowCrossUidActivitySwitchFromBelow(IBinder token, boolean allowed)", " int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", " void overrideActivityTransition(IBinder token, boolean open, int enterAnim, int exitAnim, int backgroundColor)", " void clearOverrideActivityTransition(IBinder token, boolean open)", " void overridePendingTransition(IBinder token, String packageName, int enterAnim, int exitAnim, int backgroundColor)", " void setRecentsScreenshotEnabled(IBinder token, boolean enabled)", "public void invalidateHomeTaskSnapshot(IBinder homeToken)", " void dismissKeyguard(IBinder token, IKeyguardDismissCallback callback, CharSequence message)", " void registerRemoteAnimations(IBinder token, RemoteAnimationDefinition definition)", " void unregisterRemoteAnimations(IBinder token)", " void onBackPressed(IBinder token, IRequestFinishCallback callback)", " void reportSplashScreenAttached(IBinder token)", " void enableTaskLocaleOverride(IBinder token)", "public boolean isRequestedToLaunchInTaskFragment(IBinder activityToken, IBinder taskFragmentToken)", " void setActivityRecordInputSinkEnabled(IBinder activityToken, boolean enabled)", " void requestCompatCameraControl(Resources res, IBinder token, boolean showControl, boolean transformationApplied, ICompatCameraControlCallback callback)", "public static ActivityClient getInstance()", "public static IActivityClientController setActivityClientController(IActivityClientController activityClientController)", "private static IActivityClientController getActivityClientController()" ],
  "variableNames" : [ "sInstance", "INTERFACE_SINGLETON" ]
}