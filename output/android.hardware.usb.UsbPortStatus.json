{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/usb/UsbPortStatus.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbPortStatus",
  "comment" : "\n * Describes the status of a USB port.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentPowerRole",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentDataRole",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedRoleCombinations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContaminantProtectionStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContaminantDetectionStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerTransferLimited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsbDataStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerBrickConnectionStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComplianceWarnings",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlugState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayPortAltModeInfo",
    "type" : "DisplayPortAltModeInfo",
    "comment" : "\n     * Holds the DisplayPort Alt Mode info for the Port. This field\n     * is null if the device does not support DisplayPort Alt Mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_NONE",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port does not have a power role.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_SOURCE",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port can act as a source (provide power).\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_SINK",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port can act as a sink (receive power).\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ROLE_NONE",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port does not have a data role.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ROLE_HOST",
    "type" : "int",
    "comment" : "\n     * Data role: This USB port can act as a host (access data services).\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ROLE_DEVICE",
    "type" : "int",
    "comment" : "\n     * Data role: This USB port can act as a device (offer data services).\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_NONE",
    "type" : "int",
    "comment" : "\n     * There is currently nothing connected to this USB port.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_UFP",
    "type" : "int",
    "comment" : "\n     * This USB port can act as an upstream facing port (device).\n     *\n     * <p> Implies that the port supports the {@link #POWER_ROLE_SINK} and\n     * {@link #DATA_ROLE_DEVICE} combination of roles (and possibly others as well).\n     ",
    "links" : [ "#DATA_ROLE_DEVICE", "#POWER_ROLE_SINK" ]
  }, {
    "name" : "MODE_DFP",
    "type" : "int",
    "comment" : "\n     * This USB port can act as a downstream facing port (host).\n     *\n     * <p> Implies that the port supports the {@link #POWER_ROLE_SOURCE} and\n     * {@link #DATA_ROLE_HOST} combination of roles (and possibly others as well).\n     ",
    "links" : [ "#DATA_ROLE_HOST", "#POWER_ROLE_SOURCE" ]
  }, {
    "name" : "MODE_DUAL",
    "type" : "int",
    "comment" : "\n     * This USB port can act either as an downstream facing port (host) or as\n     * an upstream facing port (device).\n     *\n     * <p> Implies that the port supports the {@link #POWER_ROLE_SOURCE} and\n     * {@link #DATA_ROLE_HOST} combination of roles and the {@link #POWER_ROLE_SINK} and\n     * {@link #DATA_ROLE_DEVICE} combination of roles (and possibly others as well).\n     *\n     * @hide\n     ",
    "links" : [ "#DATA_ROLE_HOST", "#DATA_ROLE_DEVICE", "#POWER_ROLE_SOURCE", "#POWER_ROLE_SINK" ]
  }, {
    "name" : "MODE_AUDIO_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * This USB port can support USB Type-C Audio accessory.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DEBUG_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * This USB port can support USB Type-C debug accessory.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence detection not supported by the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_DISABLED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence detection supported but disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_NOT_DETECTED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence enabled but not detected.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_DETECTED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence enabled and detected.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_NONE",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - No action performed upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_SINK",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is forced to sink upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_SOURCE",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is forced to source upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_FORCE_DISABLE",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is disabled upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_DISABLED",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is disabled upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_STATUS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * USB data status is not known.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_STATUS_ENABLED",
    "type" : "int",
    "comment" : "\n     * USB data is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_STATUS_DISABLED_OVERHEAT",
    "type" : "int",
    "comment" : "\n     * USB data is disabled as the port is too hot.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_STATUS_DISABLED_CONTAMINANT",
    "type" : "int",
    "comment" : "\n     * USB data is disabled due to contaminated port.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_STATUS_DISABLED_DOCK",
    "type" : "int",
    "comment" : "\n     * This flag indicates that some or all data modes are disabled\n     * due to docking event, and the specific sub-statuses viz.,\n     * {@link #DATA_STATUS_DISABLED_DOCK_HOST_MODE},\n     * {@link #DATA_STATUS_DISABLED_DOCK_DEVICE_MODE}\n     * can be checked for individual modes.\n     ",
    "links" : [ "#DATA_STATUS_DISABLED_DOCK_HOST_MODE", "#DATA_STATUS_DISABLED_DOCK_DEVICE_MODE" ]
  }, {
    "name" : "DATA_STATUS_DISABLED_FORCE",
    "type" : "int",
    "comment" : "\n     * USB data is disabled by\n     * {@link UsbPort#enableUsbData UsbPort.enableUsbData}.\n     ",
    "links" : [ "android.hardware.usb.UsbPort#enableUsbData" ]
  }, {
    "name" : "DATA_STATUS_DISABLED_DEBUG",
    "type" : "int",
    "comment" : "\n     * USB data is disabled for debug.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_STATUS_DISABLED_DOCK_HOST_MODE",
    "type" : "int",
    "comment" : "\n     * USB host mode is disabled due to docking event.\n     * {@link #DATA_STATUS_DISABLED_DOCK} will be set as well.\n     ",
    "links" : [ "#DATA_STATUS_DISABLED_DOCK" ]
  }, {
    "name" : "DATA_STATUS_DISABLED_DOCK_DEVICE_MODE",
    "type" : "int",
    "comment" : "\n     * USB device mode is disabled due to docking event.\n     * {@link #DATA_STATUS_DISABLED_DOCK} will be set as well.\n     ",
    "links" : [ "#DATA_STATUS_DISABLED_DOCK" ]
  }, {
    "name" : "POWER_BRICK_STATUS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown whether a power brick is connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_BRICK_STATUS_CONNECTED",
    "type" : "int",
    "comment" : "\n     * The connected device is a power brick.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_BRICK_STATUS_DISCONNECTED",
    "type" : "int",
    "comment" : "\n     * The connected device is not power brick.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPLIANCE_WARNING_OTHER",
    "type" : "int",
    "comment" : "\n     * Used to indicate attached sources/cables/accessories/ports\n     * that do not match the other warnings below and do not meet the\n     * requirements of specifications including but not limited to\n     * USB Type-C Cable and Connector, Universal Serial Bus\n     * Power Delivery, and Universal Serial Bus 1.x/2.0/3.x/4.0.\n     * In addition, constants introduced after the target sdk will be\n     * remapped into COMPLIANCE_WARNING_OTHER.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPLIANCE_WARNING_DEBUG_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * Used to indicate Type-C port partner\n     * (cable/accessory/source) that identifies itself as debug\n     * accessory source as defined in USB Type-C Cable and\n     * Connector Specification. However, the specification states\n     * that this is meant for debug only and shall not be used for\n     * with commercial products.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPLIANCE_WARNING_BC_1_2",
    "type" : "int",
    "comment" : "\n     * Used to indicate USB ports that does not\n     * identify itself as one of the charging port types (SDP/CDP\n     * DCP etc) as defined by Battery Charging v1.2 Specification.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPLIANCE_WARNING_MISSING_RP",
    "type" : "int",
    "comment" : "\n     * Used to indicate Type-C sources/cables that are missing pull\n     * up resistors on the CC pins as required by USB Type-C Cable\n     * and Connector Specification.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPLIANCE_WARNING_INPUT_POWER_LIMITED",
    "type" : "int",
    "comment" : "\n     * Used to indicate the charging setups on the USB ports are unable to\n     * deliver negotiated power. Introduced in Android V (API level 35)\n     * and client applicantions that target API levels lower than 35 will\n     * receive {@link #COMPLIANCE_WARNING_OTHER} instead.\n     ",
    "links" : [ "#COMPLIANCE_WARNING_OTHER" ]
  }, {
    "name" : "COMPLIANCE_WARNING_MISSING_DATA_LINES",
    "type" : "int",
    "comment" : "\n     * Used to indicate the cable/connector on the USB ports are missing\n     * the required wires on the data pins to make data transfer.\n     * Introduced in Android V (API level 35) and client applicantions that\n     * target API levels lower than 35 will receive\n     * {@link #COMPLIANCE_WARNING_OTHER} instead.\n     ",
    "links" : [ "#COMPLIANCE_WARNING_OTHER" ]
  }, {
    "name" : "COMPLIANCE_WARNING_ENUMERATION_FAIL",
    "type" : "int",
    "comment" : "\n     * Used to indicate enumeration failures on the USB ports, potentially due to\n     * signal integrity issues or other causes. Introduced in Android V\n     * (API level 35) and client applicantions that target API levels lower\n     * than 35 will receive {@link #COMPLIANCE_WARNING_OTHER} instead.\n     ",
    "links" : [ "#COMPLIANCE_WARNING_OTHER" ]
  }, {
    "name" : "COMPLIANCE_WARNING_FLAKY_CONNECTION",
    "type" : "int",
    "comment" : "\n     * Used to indicate unexpected data disconnection on the USB ports,\n     * potentially due to signal integrity issues or other causes.\n     * Introduced in Android V (API level 35) and client applicantions that\n     * target API levels lower than 35 will receive\n     * {@link #COMPLIANCE_WARNING_OTHER} instead.\n     ",
    "links" : [ "#COMPLIANCE_WARNING_OTHER" ]
  }, {
    "name" : "COMPLIANCE_WARNING_UNRELIABLE_IO",
    "type" : "int",
    "comment" : "\n     * Used to indicate unreliable or slow data transfer on the USB ports,\n     * potentially due to signal integrity issues or other causes.\n     * Introduced in Android V (API level 35) and client applicantions that\n     * target API levels lower than 35 will receive\n     * {@link #COMPLIANCE_WARNING_OTHER} instead.\n     ",
    "links" : [ "#COMPLIANCE_WARNING_OTHER" ]
  }, {
    "name" : "PLUG_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the Type-C plug orientation cannot be\n     * determined because the connected state of the device is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLUG_STATE_UNPLUGGED",
    "type" : "int",
    "comment" : "\n     * Indicates no Type-C plug is inserted into the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLUG_STATE_PLUGGED_ORIENTATION_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates a Type-C plug is inserted into the device, but\n     * the orientation cannot be determined.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLUG_STATE_PLUGGED_ORIENTATION_NORMAL",
    "type" : "int",
    "comment" : "\n     * Indicates that the connected plug uses its CC1\n     * pin to manage the Source-to-Sink connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLUG_STATE_PLUGGED_ORIENTATION_FLIPPED",
    "type" : "int",
    "comment" : "\n     * Indicates that the connected plug uses its CC2\n     * pin to manage the Source-to-Sink connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<UsbPortStatus>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is anything connected to the port.\n     *\n     * @return {@code true} iff there is anything connected to the port.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current mode of the port.\n     *\n     * @return The current mode: {@link #MODE_DFP}, {@link #MODE_UFP},\n     * {@link #MODE_AUDIO_ACCESSORY}, {@link #MODE_DEBUG_ACCESSORY}, or {@link {@link #MODE_NONE} if\n     * nothing is connected.\n     ",
    "links" : [ "#MODE_AUDIO_ACCESSORY", "#MODE_DFP", "#MODE_UFP", "#MODE_DEBUG_ACCESSORY", "#MODE_NONE" ]
  }, {
    "name" : "public int getCurrentPowerRole()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current power role of the port.\n     *\n     * @return The current power role: {@link #POWER_ROLE_SOURCE}, {@link #POWER_ROLE_SINK}, or\n     * {@link #POWER_ROLE_NONE} if nothing is connected.\n     ",
    "links" : [ "#POWER_ROLE_NONE", "#POWER_ROLE_SOURCE", "#POWER_ROLE_SINK" ]
  }, {
    "name" : "public int getCurrentDataRole()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current data role of the port.\n     *\n     * @return The current data role: {@link #DATA_ROLE_HOST}, {@link #DATA_ROLE_DEVICE}, or\n     * {@link #DATA_ROLE_NONE} if nothing is connected.\n     ",
    "links" : [ "#DATA_ROLE_NONE", "#DATA_ROLE_HOST", "#DATA_ROLE_DEVICE" ]
  }, {
    "name" : "public boolean isRoleCombinationSupported(@UsbPowerRole int powerRole, @UsbDataRole int dataRole)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified power and data role combination is supported\n     * given what is currently connected to the port.\n     *\n     * @param powerRole The power role to check: {@link #POWER_ROLE_SOURCE}  or\n     *                  {@link #POWER_ROLE_SINK}, or {@link #POWER_ROLE_NONE} if no power role.\n     * @param dataRole  The data role to check: either {@link #DATA_ROLE_HOST} or\n     *                  {@link #DATA_ROLE_DEVICE}, or {@link #DATA_ROLE_NONE} if no data role.\n     ",
    "links" : [ "#DATA_ROLE_NONE", "#DATA_ROLE_HOST", "#POWER_ROLE_NONE", "#DATA_ROLE_DEVICE", "#POWER_ROLE_SOURCE", "#POWER_ROLE_SINK" ]
  }, {
    "name" : "public boolean isPdCompliant()",
    "returnType" : "boolean",
    "comment" : "\n     * This function checks if the port is USB Power Delivery (PD) compliant -\n     * https://www.usb.org/usb-charger-pd. All of the power and data roles must be supported for a\n     * port to be PD compliant.\n     *\n     * @return true if the port is PD compliant.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedRoleCombinations()",
    "returnType" : "int",
    "comment" : "\n     * Get the supported role combinations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContaminantDetectionStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns contaminant detection status.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContaminantProtectionStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns contamiant protection status.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUsbDataStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns UsbData status.\n     *\n     * @return Current USB data status of the port with one or more of the following values\n     *         {@link #DATA_STATUS_UNKNOWN}, {@link #DATA_STATUS_ENABLED},\n     *         {@link #DATA_STATUS_DISABLED_OVERHEAT}, {@link #DATA_STATUS_DISABLED_CONTAMINANT},\n     *         {@link #DATA_STATUS_DISABLED_DOCK}, {@link #DATA_STATUS_DISABLED_FORCE},\n     *         {@link #DATA_STATUS_DISABLED_DEBUG}, {@link #DATA_STATUS_DISABLED_DOCK_HOST_MODE},\n     *         {@link #DATA_STATUS_DISABLED_DOCK_DEVICE_MODE}\n     ",
    "links" : [ "#DATA_STATUS_UNKNOWN", "#DATA_STATUS_DISABLED_DOCK_HOST_MODE", "#DATA_STATUS_DISABLED_OVERHEAT", "#DATA_STATUS_DISABLED_FORCE", "#DATA_STATUS_DISABLED_DEBUG", "#DATA_STATUS_DISABLED_DOCK_DEVICE_MODE", "#DATA_STATUS_DISABLED_CONTAMINANT", "#DATA_STATUS_DISABLED_DOCK", "#DATA_STATUS_ENABLED" ]
  }, {
    "name" : "public boolean isPowerTransferLimited()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether power transfer is limited.\n     *\n     * @return true when power transfer is limited.\n     *         false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPowerBrickConnectionStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns the connection status of the power brick.\n     *\n     * @return {@link #POWER_BRICK_STATUS_UNKNOWN}\n     *         or {@link #POWER_BRICK_STATUS_CONNECTED}\n     *         or {@link #POWER_BRICK_STATUS_DISCONNECTED}\n     ",
    "links" : [ "#POWER_BRICK_STATUS_UNKNOWN", "#POWER_BRICK_STATUS_CONNECTED", "#POWER_BRICK_STATUS_DISCONNECTED" ]
  }, {
    "name" : "public int[] getComplianceWarnings()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns non compliant reasons, if any, for the connected\n     * charger/cable/accessory/USB port.\n     *\n     * @return array including {@link #COMPLIANCE_WARNING_OTHER},\n     *         {@link #COMPLIANCE_WARNING_DEBUG_ACCESSORY},\n     *         {@link #COMPLIANCE_WARNING_BC_1_2},\n     *         {@link #COMPLIANCE_WARNING_MISSING_RP}.\n     ",
    "links" : [ "#COMPLIANCE_WARNING_OTHER", "#COMPLIANCE_WARNING_MISSING_RP", "#COMPLIANCE_WARNING_BC_1_2", "#COMPLIANCE_WARNING_DEBUG_ACCESSORY" ]
  }, {
    "name" : "public int getPlugState()",
    "returnType" : "int",
    "comment" : "\n     * Returns the plug state of the attached cable/adapter.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayPortAltModeInfo getDisplayPortAltModeInfo()",
    "returnType" : "DisplayPortAltModeInfo",
    "comment" : "\n     * Returns the DisplayPortInfo of the USB Port, if applicable.\n     *\n     * @return an instance of type DisplayPortInfo\n     *         or null if not applicable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isConnected()", "public int getCurrentMode()", "public int getCurrentPowerRole()", "public int getCurrentDataRole()", "public boolean isRoleCombinationSupported(@UsbPowerRole int powerRole, @UsbDataRole int dataRole)", "public boolean isPdCompliant()", "public int getSupportedRoleCombinations()", "public int getContaminantDetectionStatus()", "public int getContaminantProtectionStatus()", "public int getUsbDataStatus()", "public boolean isPowerTransferLimited()", "public int getPowerBrickConnectionStatus()", "public int[] getComplianceWarnings()", "public int getPlugState()", "public DisplayPortAltModeInfo getDisplayPortAltModeInfo()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "mCurrentMode", "mCurrentPowerRole", "mCurrentDataRole", "mSupportedRoleCombinations", "mContaminantProtectionStatus", "mContaminantDetectionStatus", "mPowerTransferLimited", "mUsbDataStatus", "mPowerBrickConnectionStatus", "mComplianceWarnings", "mPlugState", "mDisplayPortAltModeInfo", "POWER_ROLE_NONE", "POWER_ROLE_SOURCE", "POWER_ROLE_SINK", "DATA_ROLE_NONE", "DATA_ROLE_HOST", "DATA_ROLE_DEVICE", "MODE_NONE", "MODE_UFP", "MODE_DFP", "MODE_DUAL", "MODE_AUDIO_ACCESSORY", "MODE_DEBUG_ACCESSORY", "CONTAMINANT_DETECTION_NOT_SUPPORTED", "CONTAMINANT_DETECTION_DISABLED", "CONTAMINANT_DETECTION_NOT_DETECTED", "CONTAMINANT_DETECTION_DETECTED", "CONTAMINANT_PROTECTION_NONE", "CONTAMINANT_PROTECTION_SINK", "CONTAMINANT_PROTECTION_SOURCE", "CONTAMINANT_PROTECTION_FORCE_DISABLE", "CONTAMINANT_PROTECTION_DISABLED", "DATA_STATUS_UNKNOWN", "DATA_STATUS_ENABLED", "DATA_STATUS_DISABLED_OVERHEAT", "DATA_STATUS_DISABLED_CONTAMINANT", "DATA_STATUS_DISABLED_DOCK", "DATA_STATUS_DISABLED_FORCE", "DATA_STATUS_DISABLED_DEBUG", "DATA_STATUS_DISABLED_DOCK_HOST_MODE", "DATA_STATUS_DISABLED_DOCK_DEVICE_MODE", "POWER_BRICK_STATUS_UNKNOWN", "POWER_BRICK_STATUS_CONNECTED", "POWER_BRICK_STATUS_DISCONNECTED", "COMPLIANCE_WARNING_OTHER", "COMPLIANCE_WARNING_DEBUG_ACCESSORY", "COMPLIANCE_WARNING_BC_1_2", "COMPLIANCE_WARNING_MISSING_RP", "COMPLIANCE_WARNING_INPUT_POWER_LIMITED", "COMPLIANCE_WARNING_MISSING_DATA_LINES", "COMPLIANCE_WARNING_ENUMERATION_FAIL", "COMPLIANCE_WARNING_FLAKY_CONNECTION", "COMPLIANCE_WARNING_UNRELIABLE_IO", "PLUG_STATE_UNKNOWN", "PLUG_STATE_UNPLUGGED", "PLUG_STATE_PLUGGED_ORIENTATION_UNKNOWN", "PLUG_STATE_PLUGGED_ORIENTATION_NORMAL", "PLUG_STATE_PLUGGED_ORIENTATION_FLIPPED", "CREATOR" ]
}