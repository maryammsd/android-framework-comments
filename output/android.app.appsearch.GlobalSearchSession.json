{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/GlobalSearchSession.java",
  "packageName" : "android.app.appsearch",
  "className" : "GlobalSearchSession",
  "comment" : "\n * Provides a connection to all AppSearch databases the querying application has been granted access\n * to.\n *\n * <p>This class is thread safe.\n *\n * @see AppSearchSession\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObserverCallbacksLocked",
    "type" : "Map<String, Map<ObserverCallback, IAppSearchObserverProxy>>",
    "comment" : " Management of observer callbacks. Key is observed package.",
    "links" : [ ]
  }, {
    "name" : "mIsMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void createGlobalSearchSession(@NonNull IAppSearchManager service, @NonNull UserHandle userHandle, @NonNull AppSearchAttributionSource attributionSource, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GlobalSearchSession>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Creates a search session for the client, defined by the {@code userHandle} and {@code\n     * packageName}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getByDocumentId(@NonNull String packageName, @NonNull String databaseName, @NonNull GetByDocumentIdRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull BatchResultCallback<String, GenericDocument> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves {@link GenericDocument} documents, belonging to the specified package name and\n     * database name and identified by the namespace and ids in the request, from the {@link\n     * GlobalSearchSession} database.\n     *\n     * <p>If the package or database doesn't exist or if the calling package doesn't have access,\n     * the gets will be handled as failures in an {@link AppSearchBatchResult} object in the\n     * callback.\n     *\n     * @param packageName the name of the package to get from\n     * @param databaseName the name of the database to get from\n     * @param request a request containing a namespace and IDs to get documents for.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive the pending result of performing this operation. The keys\n     *     of the returned {@link AppSearchBatchResult} are the input IDs. The values are the\n     *     returned {@link GenericDocument}s on success, or a failed {@link AppSearchResult}\n     *     otherwise. IDs that are not found will return a failed {@link AppSearchResult} with a\n     *     result code of {@link AppSearchResult#RESULT_NOT_FOUND}. If an unexpected internal error\n     *     occurs in the AppSearch service, {@link BatchResultCallback#onSystemError} will be\n     *     invoked with a {@link Throwable}.\n     ",
    "links" : [ "android.app.appsearch.AppSearchResult", "android.app.appsearch.AppSearchBatchResult", "android.app.appsearch.BatchResultCallback#onSystemError", "android.app.appsearch.AppSearchResult#RESULT_NOT_FOUND", "Throwable", "android.app.appsearch.GenericDocument", "android.app.appsearch.GlobalSearchSession" ]
  }, {
    "name" : "public SearchResults search(@NonNull String queryExpression, @NonNull SearchSpec searchSpec)",
    "returnType" : "SearchResults",
    "comment" : "\n     * Retrieves documents from all AppSearch databases that the querying application has access to.\n     *\n     * <p>Applications can be granted access to documents by specifying {@link\n     * SetSchemaRequest.Builder#setSchemaTypeVisibilityForPackage} when building a schema.\n     *\n     * <p>Document access can also be granted to system UIs by specifying {@link\n     * SetSchemaRequest.Builder#setSchemaTypeDisplayedBySystem} when building a schema.\n     *\n     * <p>See {@link AppSearchSession#search} for a detailed explanation on forming a query string.\n     *\n     * <p>This method is lightweight. The heavy work will be done in {@link\n     * SearchResults#getNextPage}.\n     *\n     * @param queryExpression query string to search.\n     * @param searchSpec spec for setting document filters, adding projection, setting term match\n     *     type, etc.\n     * @return a {@link SearchResults} object for retrieved matched documents.\n     ",
    "links" : [ "SetSchemaRequest.Builder#setSchemaTypeDisplayedBySystem", "android.app.appsearch.SearchResults", "android.app.appsearch.AppSearchSession#search", "android.app.appsearch.SearchResults#getNextPage", "SetSchemaRequest.Builder#setSchemaTypeVisibilityForPackage" ]
  }, {
    "name" : "public void getSchema(@NonNull String packageName, @NonNull String databaseName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GetSchemaResponse>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the collection of schemas most recently successfully provided to {@link\n     * AppSearchSession#setSchema} for any types belonging to the requested package and database\n     * that the caller has been granted access to.\n     *\n     * <p>If the requested package/database combination does not exist or the caller has not been\n     * granted access to it, then an empty GetSchemaResponse will be returned.\n     *\n     * @param packageName the package that owns the requested {@link AppSearchSchema} instances.\n     * @param databaseName the database that owns the requested {@link AppSearchSchema} instances.\n     * @return The pending {@link GetSchemaResponse} containing the schemas that the caller has\n     *     access to or an empty GetSchemaResponse if the request package and database does not\n     *     exist, has not set a schema or contains no schemas that are accessible to the caller.\n     ",
    "links" : [ "android.app.appsearch.AppSearchSchema", "android.app.appsearch.AppSearchSession#setSchema", "android.app.appsearch.GetSchemaResponse" ]
  }, {
    "name" : "public void reportSystemUsage(@NonNull ReportSystemUsageRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<Void>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Reports that a particular document has been used from a system surface.\n     *\n     * <p>See {@link AppSearchSession#reportUsage} for a general description of document usage, as\n     * well as an API that can be used by the app itself.\n     *\n     * <p>Usage reported via this method is accounted separately from usage reported via {@link\n     * AppSearchSession#reportUsage} and may be accessed using the constants {@link\n     * SearchSpec#RANKING_STRATEGY_SYSTEM_USAGE_COUNT} and {@link\n     * SearchSpec#RANKING_STRATEGY_SYSTEM_USAGE_LAST_USED_TIMESTAMP}.\n     *\n     * @param request The usage reporting request.\n     * @param executor Executor on which to invoke the callback.\n     * @param callback Callback to receive errors. If the operation succeeds, the callback will be\n     *     invoked with an {@link AppSearchResult} whose value is {@code null}. The callback will be\n     *     invoked with an {@link AppSearchResult} of {@link AppSearchResult#RESULT_SECURITY_ERROR}\n     *     if this API is invoked by an app which is not part of the system.\n     ",
    "links" : [ "android.app.appsearch.AppSearchResult#RESULT_SECURITY_ERROR", "android.app.appsearch.AppSearchResult", "android.app.appsearch.SearchSpec#RANKING_STRATEGY_SYSTEM_USAGE_COUNT", "android.app.appsearch.AppSearchSession#reportUsage", "android.app.appsearch.SearchSpec#RANKING_STRATEGY_SYSTEM_USAGE_LAST_USED_TIMESTAMP" ]
  }, {
    "name" : "public void registerObserverCallback(@NonNull String targetPackageName, @NonNull ObserverSpec spec, @NonNull Executor executor, @NonNull ObserverCallback observer) throws AppSearchException",
    "returnType" : "void",
    "comment" : "\n     * Adds an {@link ObserverCallback} to monitor changes within the databases owned by {@code\n     * targetPackageName} if they match the given {@link\n     * android.app.appsearch.observer.ObserverSpec}.\n     *\n     * <p>The observer callback is only triggered for data that changes after it is registered. No\n     * notification about existing data is sent as a result of registering an observer. To find out\n     * about existing data, you must use the {@link GlobalSearchSession#search} API.\n     *\n     * <p>If the data owned by {@code targetPackageName} is not visible to you, the registration\n     * call will succeed but no notifications will be dispatched. Notifications could start flowing\n     * later if {@code targetPackageName} changes its schema visibility settings.\n     *\n     * <p>If no package matching {@code targetPackageName} exists on the system, the registration\n     * call will succeed but no notifications will be dispatched. Notifications could start flowing\n     * later if {@code targetPackageName} is installed and starts indexing data.\n     *\n     * @param targetPackageName Package whose changes to monitor\n     * @param spec Specification of what types of changes to listen for\n     * @param executor Executor on which to call the {@code observer} callback methods.\n     * @param observer Callback to trigger when a schema or document changes\n     * @throws AppSearchException If an unexpected error occurs when trying to register an observer.\n     ",
    "links" : [ "android.app.appsearch.observer.ObserverSpec", "android.app.appsearch.GlobalSearchSession#search", "android.app.appsearch.observer.ObserverCallback" ]
  }, {
    "name" : "public void unregisterObserverCallback(@NonNull String targetPackageName, @NonNull ObserverCallback observer) throws AppSearchException",
    "returnType" : "void",
    "comment" : "\n     * Removes previously registered {@link ObserverCallback} instances from the system.\n     *\n     * <p>All instances of {@link ObserverCallback} which are registered to observe {@code\n     * targetPackageName} and compare equal to the provided callback using the provided argument's\n     * {@code ObserverCallback#equals} will be removed.\n     *\n     * <p>If no matching observers have been registered, this method has no effect. If multiple\n     * matching observers have been registered, all will be removed.\n     *\n     * @param targetPackageName Package which the observers to be removed are listening to.\n     * @param observer Callback to unregister.\n     * @throws AppSearchException if an error occurs trying to remove the observer, such as a\n     *     failure to communicate with the system service. Note that no error will be thrown if the\n     *     provided observer doesn't match any registered observer.\n     ",
    "links" : [ "android.app.appsearch.observer.ObserverCallback" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the {@link GlobalSearchSession}. Persists all mutations, including usage reports, to\n     * disk.\n     ",
    "links" : [ "android.app.appsearch.GlobalSearchSession" ]
  } ],
  "methodNames" : [ " static void createGlobalSearchSession(@NonNull IAppSearchManager service, @NonNull UserHandle userHandle, @NonNull AppSearchAttributionSource attributionSource, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GlobalSearchSession>> callback)", "public void getByDocumentId(@NonNull String packageName, @NonNull String databaseName, @NonNull GetByDocumentIdRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull BatchResultCallback<String, GenericDocument> callback)", "public SearchResults search(@NonNull String queryExpression, @NonNull SearchSpec searchSpec)", "public void getSchema(@NonNull String packageName, @NonNull String databaseName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<GetSchemaResponse>> callback)", "public void reportSystemUsage(@NonNull ReportSystemUsageRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<AppSearchResult<Void>> callback)", "public void registerObserverCallback(@NonNull String targetPackageName, @NonNull ObserverSpec spec, @NonNull Executor executor, @NonNull ObserverCallback observer) throws AppSearchException", "public void unregisterObserverCallback(@NonNull String targetPackageName, @NonNull ObserverCallback observer) throws AppSearchException", "public void close()" ],
  "variableNames" : [ "TAG", "mObserverCallbacksLocked", "mIsMutated", "mIsClosed" ]
}