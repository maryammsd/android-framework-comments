{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/Call.java",
  "packageName" : "android.telecom",
  "className" : "Call",
  "comment" : "\n * Represents an ongoing phone call that the in-call app should present to the user.\n ",
  "variables" : [ {
    "name" : "STATE_NEW",
    "type" : "int",
    "comment" : "\n     * The state of a {@code Call} when newly created.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DIALING",
    "type" : "int",
    "comment" : "\n     * The state of an outgoing {@code Call} when dialing the remote number, but not yet connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_RINGING",
    "type" : "int",
    "comment" : "\n     * The state of an incoming {@code Call} when ringing locally, but not yet connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_HOLDING",
    "type" : "int",
    "comment" : "\n     * The state of a {@code Call} when in a holding state.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * The state of a {@code Call} when actively supporting conversation.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISCONNECTED",
    "type" : "int",
    "comment" : "\n     * The state of a {@code Call} when no further voice or other communication is being\n     * transmitted, the remote side has been or will inevitably be informed that the {@code Call}\n     * is no longer active, and the local data transport has or inevitably will release resources\n     * associated with this {@code Call}.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SELECT_PHONE_ACCOUNT",
    "type" : "int",
    "comment" : "\n     * The state of an outgoing {@code Call} when waiting on user to select a\n     * {@link PhoneAccount} through which to place the call.\n     ",
    "links" : [ "android.telecom.PhoneAccount" ]
  }, {
    "name" : "STATE_PRE_DIAL_WAIT",
    "type" : "int",
    "comment" : "\n     * @hide\n     * @deprecated use STATE_SELECT_PHONE_ACCOUNT.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_CONNECTING",
    "type" : "int",
    "comment" : "\n     * The initial state of an outgoing {@code Call}.\n     * Common transitions are to {@link #STATE_DIALING} state for a successful call or\n     * {@link #STATE_DISCONNECTED} if it failed.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DIALING" ]
  }, {
    "name" : "STATE_DISCONNECTING",
    "type" : "int",
    "comment" : "\n     * The state of a {@code Call} when the user has initiated a disconnection of the call, but the\n     * call has not yet been disconnected by the underlying {@code ConnectionService}.  The next\n     * state of the call is (potentially) {@link #STATE_DISCONNECTED}.\n     ",
    "links" : [ "#STATE_DISCONNECTED" ]
  }, {
    "name" : "STATE_PULLING_CALL",
    "type" : "int",
    "comment" : "\n     * The state of an external call which is in the process of being pulled from a remote device to\n     * the local device.\n     * <p>\n     * A call can only be in this state if the {@link Details#PROPERTY_IS_EXTERNAL_CALL} property\n     * and {@link Details#CAPABILITY_CAN_PULL_CALL} capability are set on the call.\n     * <p>\n     * An {@link InCallService} will only see this state if it has the\n     * {@link TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS} metadata set to {@code true} in its\n     * manifest.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS", "#CAPABILITY_CAN_PULL_CALL", "#PROPERTY_IS_EXTERNAL_CALL" ]
  }, {
    "name" : "STATE_AUDIO_PROCESSING",
    "type" : "int",
    "comment" : "\n     * The state of a call that is active with the network, but the audio from the call is\n     * being intercepted by an app on the local device. Telecom does not hold audio focus in this\n     * state, and the call will be invisible to the user except for a persistent notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_SIMULATED_RINGING",
    "type" : "int",
    "comment" : "\n     * The state of a call that is being presented to the user after being in\n     * {@link #STATE_AUDIO_PROCESSING}. The call is still active with the network in this case, and\n     * Telecom will hold audio focus and play a ringtone if appropriate.\n     ",
    "links" : [ "#STATE_AUDIO_PROCESSING" ]
  }, {
    "name" : "AVAILABLE_PHONE_ACCOUNTS",
    "type" : "String",
    "comment" : "\n     * The key to retrieve the optional {@code PhoneAccount}s Telecom can bundle with its Call\n     * extras. Used to pass the phone accounts to display on the front end to the user in order to\n     * select phone accounts to (for example) place a call.\n     * @deprecated Use the list from {@link #EXTRA_SUGGESTED_PHONE_ACCOUNTS} instead.\n     ",
    "links" : [ "#EXTRA_SUGGESTED_PHONE_ACCOUNTS" ]
  }, {
    "name" : "EXTRA_SUGGESTED_PHONE_ACCOUNTS",
    "type" : "String",
    "comment" : "\n     * Key for extra used to pass along a list of {@link PhoneAccountSuggestion}s to the in-call\n     * UI when a call enters the {@link #STATE_SELECT_PHONE_ACCOUNT} state. The list included here\n     * will have the same length and be in the same order as the list passed with\n     * {@link #AVAILABLE_PHONE_ACCOUNTS}.\n     ",
    "links" : [ "android.telecom.PhoneAccountSuggestion", "#STATE_SELECT_PHONE_ACCOUNT", "#AVAILABLE_PHONE_ACCOUNTS" ]
  }, {
    "name" : "EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS",
    "type" : "String",
    "comment" : "\n     * Extra key used to indicate the time (in milliseconds since midnight, January 1, 1970 UTC)\n     * when the last outgoing emergency call was made.  This is used to identify potential emergency\n     * callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SILENT_RINGING_REQUESTED",
    "type" : "String",
    "comment" : "\n     * Extra key used to indicate whether a {@link CallScreeningService} has requested to silence\n     * the ringtone for a call.  If the {@link InCallService} declares\n     * {@link TelecomManager#METADATA_IN_CALL_SERVICE_RINGING} in its manifest, it should not\n     * play a ringtone for an incoming call with this extra key set.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.TelecomManager#METADATA_IN_CALL_SERVICE_RINGING", "android.telecom.CallScreeningService" ]
  }, {
    "name" : "EVENT_REQUEST_HANDOVER",
    "type" : "String",
    "comment" : "\n     * Call event sent from a {@link Call} via {@link #sendCallEvent(String, Bundle)} to inform\n     * Telecom that the user has requested that the current {@link Call} should be handed over\n     * to another {@link ConnectionService}.\n     * <p>\n     * The caller must specify the {@link #EXTRA_HANDOVER_PHONE_ACCOUNT_HANDLE} to indicate to\n     * Telecom which {@link PhoneAccountHandle} the {@link Call} should be handed over to.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "android.telecom.PhoneAccountHandle", "#sendCallEvent(String", "#EXTRA_HANDOVER_PHONE_ACCOUNT_HANDLE", "android.telecom.Call", "android.telecom.ConnectionService", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "EXTRA_HANDOVER_PHONE_ACCOUNT_HANDLE",
    "type" : "String",
    "comment" : "\n     * Extra key used with the {@link #EVENT_REQUEST_HANDOVER} call event.  Specifies the\n     * {@link PhoneAccountHandle} to which a call should be handed over to.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "android.telecom.PhoneAccountHandle", "#EVENT_REQUEST_HANDOVER", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "EXTRA_HANDOVER_VIDEO_STATE",
    "type" : "String",
    "comment" : "\n     * Integer extra key used with the {@link #EVENT_REQUEST_HANDOVER} call event.  Specifies the\n     * video state of the call when it is handed over to the new {@link PhoneAccount}.\n     * <p>\n     * Valid values: {@link VideoProfile#STATE_AUDIO_ONLY},\n     * {@link VideoProfile#STATE_BIDIRECTIONAL}, {@link VideoProfile#STATE_RX_ENABLED}, and\n     * {@link VideoProfile#STATE_TX_ENABLED}.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "android.telecom.PhoneAccount", "#EVENT_REQUEST_HANDOVER", "android.telecom.VideoProfile#STATE_BIDIRECTIONAL", "android.telecom.VideoProfile#STATE_RX_ENABLED", "android.telecom.VideoProfile#STATE_AUDIO_ONLY", "android.telecom.VideoProfile#STATE_TX_ENABLED", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "EXTRA_HANDOVER_EXTRAS",
    "type" : "String",
    "comment" : "\n     * Extra key used with the {@link #EVENT_REQUEST_HANDOVER} call event.  Used by the\n     * {@link InCallService} initiating a handover to provide a {@link Bundle} with extra\n     * information to the handover {@link ConnectionService} specified by\n     * {@link #EXTRA_HANDOVER_PHONE_ACCOUNT_HANDLE}.\n     * <p>\n     * This {@link Bundle} is not interpreted by Telecom, but passed as-is to the\n     * {@link ConnectionService} via the request extras when\n     * {@link ConnectionService#onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest)}\n     * is called to initate the handover.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "android.telecom.InCallService", "android.os.Bundle", "#EVENT_REQUEST_HANDOVER", "android.telecom.ConnectionService#onCreateOutgoingConnection(PhoneAccountHandle", "#EXTRA_HANDOVER_PHONE_ACCOUNT_HANDLE", "android.telecom.ConnectionService", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "EVENT_HANDOVER_COMPLETE",
    "type" : "String",
    "comment" : "\n     * Call event sent from Telecom to the handover {@link ConnectionService} via\n     * {@link Connection#onCallEvent(String, Bundle)} to inform a {@link Connection} that a handover\n     * to the {@link ConnectionService} has completed successfully.\n     * <p>\n     * A handover is initiated with the {@link #EVENT_REQUEST_HANDOVER} call event.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "#EVENT_REQUEST_HANDOVER", "android.telecom.Connection#onCallEvent(String", "android.telecom.Connection", "android.telecom.ConnectionService", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "EVENT_HANDOVER_SOURCE_DISCONNECTED",
    "type" : "String",
    "comment" : "\n     * Call event sent from Telecom to the handover destination {@link ConnectionService} via\n     * {@link Connection#onCallEvent(String, Bundle)} to inform the handover destination that the\n     * source connection has disconnected.  The {@link Bundle} parameter for the call event will be\n     * {@code null}.\n     * <p>\n     * A handover is initiated with the {@link #EVENT_REQUEST_HANDOVER} call event.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "android.os.Bundle", "#EVENT_REQUEST_HANDOVER", "android.telecom.Connection#onCallEvent(String", "android.telecom.ConnectionService", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "EVENT_HANDOVER_FAILED",
    "type" : "String",
    "comment" : "\n     * Call event sent from Telecom to the handover {@link ConnectionService} via\n     * {@link Connection#onCallEvent(String, Bundle)} to inform a {@link Connection} that a handover\n     * to the {@link ConnectionService} has failed.\n     * <p>\n     * A handover is initiated with the {@link #EVENT_REQUEST_HANDOVER} call event.\n     * @hide\n     * @deprecated Use {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} and its associated\n     * APIs instead.\n     ",
    "links" : [ "#EVENT_REQUEST_HANDOVER", "android.telecom.Connection#onCallEvent(String", "android.telecom.Connection", "android.telecom.ConnectionService", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "REJECT_REASON_DECLINED",
    "type" : "int",
    "comment" : "\n     * Reject reason used with {@link #reject(int)} to indicate that the user is rejecting this\n     * call because they have declined to answer it.  This typically means that they are unable\n     * to answer the call at this time and would prefer it be sent to voicemail.\n     ",
    "links" : [ "#reject(int)" ]
  }, {
    "name" : "REJECT_REASON_UNWANTED",
    "type" : "int",
    "comment" : "\n     * Reject reason used with {@link #reject(int)} to indicate that the user is rejecting this\n     * call because it is an unwanted call.  This allows the user to indicate that they are\n     * rejecting a call because it is likely a nuisance call.\n     ",
    "links" : [ "#reject(int)" ]
  }, {
    "name" : "mPhone",
    "type" : "Phone",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTelecomCallId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInCallAdapter",
    "type" : "InCallAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildrenIds",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildren",
    "type" : "List<Call>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableChildren",
    "type" : "List<Call>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackRecords",
    "type" : "List<CallbackRecord<Callback>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConferenceableCalls",
    "type" : "List<Call>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableConferenceableCalls",
    "type" : "List<Call>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildrenCached",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveGenericConferenceChild",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCannedTextResponses",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetSdkVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemainingPostDialSequence",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoCallImpl",
    "type" : "VideoCallImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRttCall",
    "type" : "RttCall",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetails",
    "type" : "Details",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getRemainingPostDialSequence()",
    "returnType" : "String",
    "comment" : "\n     * Obtains the post-dial sequence remaining to be emitted by this {@code Call}, if any.\n     *\n     * @return The remaining post-dial sequence, or {@code null} if there is no post-dial sequence\n     * remaining or this {@code Call} is not in a post-dial state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void answer(@VideoProfile.VideoState int videoState)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link #STATE_RINGING} {@code Call} to answer.\n     * @param videoState The video state in which to answer the call.\n     ",
    "links" : [ "#STATE_RINGING" ]
  }, {
    "name" : "public void deflect(Uri address)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link #STATE_RINGING} {@code Call} to deflect.\n     *\n     * @param address The address to which the call will be deflected.\n     ",
    "links" : [ "#STATE_RINGING" ]
  }, {
    "name" : "public void reject(boolean rejectWithMessage, String textMessage)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link #STATE_RINGING} {@code Call} to reject.\n     *\n     * @param rejectWithMessage Whether to reject with a text message.\n     * @param textMessage An optional text message with which to respond.\n     ",
    "links" : [ "#STATE_RINGING" ]
  }, {
    "name" : "public void reject(@RejectReason int rejectReason)",
    "returnType" : "void",
    "comment" : "\n     * Instructs the {@link ConnectionService} providing this {@link #STATE_RINGING} call that the\n     * user has chosen to reject the call and has indicated a reason why the call is being rejected.\n     *\n     * @param rejectReason the reason the call is being rejected.\n     ",
    "links" : [ "#STATE_RINGING", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public void transfer(@NonNull Uri targetNumber, boolean isConfirmationRequired)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to be transferred to another number.\n     *\n     * @param targetNumber The address to which the call will be transferred.\n     * @param isConfirmationRequired if {@code true} it will initiate ASSURED transfer,\n     * if {@code false}, it will initiate BLIND transfer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void transfer(@NonNull android.telecom.Call toCall)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to be transferred to another ongoing call.\n     * This will initiate CONSULTATIVE transfer.\n     * @param toCall The other ongoing {@code Call} to which this call will be transferred.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to disconnect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void hold()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to go on hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unhold()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link #STATE_HOLDING} call to release from hold.\n     ",
    "links" : [ "#STATE_HOLDING" ]
  }, {
    "name" : "public void enterBackgroundAudioProcessing()",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to put the call into the background audio processing state.\n     * <p>\n     * This method can be called either when the call is in {@link #STATE_RINGING} or\n     * {@link #STATE_ACTIVE}. After Telecom acknowledges the request by setting the call's state to\n     * {@link #STATE_AUDIO_PROCESSING}, your app may setup the audio paths with the audio stack in\n     * order to capture and play audio on the call stream.\n     * <p>\n     * This method can only be called by the default dialer app.\n     * <p>\n     * Apps built with SDK version {@link android.os.Build.VERSION_CODES#R} or later which are using\n     * the microphone as part of audio processing should specify the foreground service type using\n     * the attribute {@link android.R.attr#foregroundServiceType} in the {@link InCallService}\n     * service element of the app's manifest file.\n     * The {@link ServiceInfo#FOREGROUND_SERVICE_TYPE_MICROPHONE} attribute should be specified.\n     * @see <a href=\"https://developer.android.com/preview/privacy/foreground-service-types\">\n     * the Android Developer Site</a> for more information.\n     * @hide\n     ",
    "links" : [ "#STATE_RINGING", "#STATE_AUDIO_PROCESSING", "android.os.Build.VERSION_CODES#R", "android.telecom.InCallService", "android.R.attr#foregroundServiceType", "#STATE_ACTIVE", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MICROPHONE" ]
  }, {
    "name" : "public void exitBackgroundAudioProcessing(boolean shouldRing)",
    "returnType" : "void",
    "comment" : "\n     * Instructs Telecom to come out of the background audio processing state requested by\n     * {@link #enterBackgroundAudioProcessing()} or from the call screening service.\n     *\n     * This method can only be called when the call is in {@link #STATE_AUDIO_PROCESSING}.\n     *\n     * @param shouldRing If true, Telecom will put the call into the\n     *                   {@link #STATE_SIMULATED_RINGING} state and notify other apps that there is\n     *                   a ringing call. Otherwise, the call will go into {@link #STATE_ACTIVE}\n     *                   immediately.\n     * @hide\n     ",
    "links" : [ "#STATE_AUDIO_PROCESSING", "#enterBackgroundAudioProcessing()", "#STATE_ACTIVE", "#STATE_SIMULATED_RINGING" ]
  }, {
    "name" : "public void playDtmfTone(char digit)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to play a dual-tone multi-frequency signaling (DTMF) tone.\n     *\n     * Any other currently playing DTMF tone in the specified call is immediately stopped.\n     *\n     * @param digit A character representing the DTMF digit for which to play the tone. This\n     *         value must be one of {@code '0'} through {@code '9'}, {@code '*'} or {@code '#'}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopDtmfTone()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to stop any dual-tone multi-frequency signaling (DTMF) tone\n     * currently playing.\n     *\n     * DTMF tones are played by calling {@link #playDtmfTone(char)}. If no DTMF tone is\n     * currently playing, this method will do nothing.\n     ",
    "links" : [ "#playDtmfTone(char)" ]
  }, {
    "name" : "public void postDialContinue(boolean proceed)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to continue playing a post-dial DTMF string.\n     *\n     * A post-dial DTMF string is a string of digits entered after a phone number, when dialed,\n     * that are immediately sent as DTMF tones to the recipient as soon as the connection is made.\n     *\n     * If the DTMF string contains a {@link TelecomManager#DTMF_CHARACTER_PAUSE} symbol, this\n     * {@code Call} will temporarily pause playing the tones for a pre-defined period of time.\n     *\n     * If the DTMF string contains a {@link TelecomManager#DTMF_CHARACTER_WAIT} symbol, this\n     * {@code Call} will pause playing the tones and notify callbacks via\n     * {@link Callback#onPostDialWait(Call, String)}. At this point, the in-call app\n     * should display to the user an indication of this state and an affordance to continue\n     * the postdial sequence. When the user decides to continue the postdial sequence, the in-call\n     * app should invoke the {@link #postDialContinue(boolean)} method.\n     *\n     * @param proceed Whether or not to continue with the post-dial sequence.\n     ",
    "links" : [ "android.telecom.TelecomManager#DTMF_CHARACTER_PAUSE", "#onPostDialWait(Call", "android.telecom.TelecomManager#DTMF_CHARACTER_WAIT", "#postDialContinue(boolean)" ]
  }, {
    "name" : "public void phoneAccountSelected(PhoneAccountHandle accountHandle, boolean setDefault)",
    "returnType" : "void",
    "comment" : "\n     * Notifies this {@code Call} that an account has been selected and to proceed with placing\n     * an outgoing call. Optionally sets this account as the default account.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void conference(Call callToConferenceWith)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to enter a conference.\n     *\n     * @param callToConferenceWith The other call with which to conference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void splitFromConference()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code Call} to split from any conference call with which it may be\n     * connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mergeConference()",
    "returnType" : "void",
    "comment" : "\n     * Merges the calls within this conference. See {@link Details#CAPABILITY_MERGE_CONFERENCE}.\n     ",
    "links" : [ "#CAPABILITY_MERGE_CONFERENCE" ]
  }, {
    "name" : "public void swapConference()",
    "returnType" : "void",
    "comment" : "\n     * Swaps the calls within this conference. See {@link Details#CAPABILITY_SWAP_CONFERENCE}.\n     ",
    "links" : [ "#CAPABILITY_SWAP_CONFERENCE" ]
  }, {
    "name" : "public void addConferenceParticipants(@NonNull List<Uri> participants)",
    "returnType" : "void",
    "comment" : "\n     * Pulls participants to existing call by forming a conference call.\n     * See {@link Details#CAPABILITY_ADD_PARTICIPANT}.\n     *\n     * @param participants participants to be pulled to existing call.\n     * @hide\n     ",
    "links" : [ "#CAPABILITY_ADD_PARTICIPANT" ]
  }, {
    "name" : "public void pullExternalCall()",
    "returnType" : "void",
    "comment" : "\n     * Initiates a request to the {@link ConnectionService} to pull an external call to the local\n     * device.\n     * <p>\n     * Calls to this method are ignored if the call does not have the\n     * {@link Call.Details#PROPERTY_IS_EXTERNAL_CALL} property set.\n     * <p>\n     * An {@link InCallService} will only see calls which support this method if it has the\n     * {@link TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS} metadata set to {@code true}\n     * in its manifest.\n     ",
    "links" : [ "android.telecom.InCallService", "android.telecom.TelecomManager#METADATA_INCLUDE_EXTERNAL_CALLS", "Call.Details#PROPERTY_IS_EXTERNAL_CALL", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public void sendCallEvent(String event, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Sends a {@code Call} event from this {@code Call} to the associated {@link Connection} in\n     * the {@link ConnectionService}.\n     * <p>\n     * Call events are used to communicate point in time information from an {@link InCallService}\n     * to a {@link ConnectionService}.  A {@link ConnectionService} implementation could define\n     * events which enable the {@link InCallService}, for example, toggle a unique feature of the\n     * {@link ConnectionService}.\n     * <p>\n     * A {@link ConnectionService} can communicate to the {@link InCallService} using\n     * {@link Connection#sendConnectionEvent(String, Bundle)}.\n     * <p>\n     * Events are exposed to {@link ConnectionService} implementations via\n     * {@link android.telecom.Connection#onCallEvent(String, Bundle)}.\n     * <p>\n     * No assumptions should be made as to how a {@link ConnectionService} will handle these events.\n     * The {@link InCallService} must assume that the {@link ConnectionService} could chose to\n     * ignore some events altogether.\n     * <p>\n     * Events should be fully qualified (e.g., {@code com.example.event.MY_EVENT}) to avoid\n     * conflicts between {@link InCallService} implementations.  Further, {@link InCallService}\n     * implementations shall not re-purpose events in the {@code android.*} namespace, nor shall\n     * they define their own event types in this namespace.  When defining a custom event type,\n     * ensure the contents of the extras {@link Bundle} is clearly defined.  Extra keys for this\n     * bundle should be named similar to the event type (e.g. {@code com.example.extra.MY_EXTRA}).\n     * <p>\n     * When defining events and the associated extras, it is important to keep their behavior\n     * consistent when the associated {@link InCallService} is updated.  Support for deprecated\n     * events/extras should me maintained to ensure backwards compatibility with older\n     * {@link ConnectionService} implementations which were built to support the older behavior.\n     *\n     * @param event The connection event.\n     * @param extras Bundle containing extra information associated with the event.\n     ",
    "links" : [ "android.telecom.InCallService", "android.os.Bundle", "android.telecom.Connection#onCallEvent(String", "android.telecom.Connection#sendConnectionEvent(String", "android.telecom.Connection", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public void sendRttRequest()",
    "returnType" : "void",
    "comment" : "\n     * Sends an RTT upgrade request to the remote end of the connection. Success is not\n     * guaranteed, and notification of success will be via the\n     * {@link Callback#onRttStatusChanged(Call, boolean, RttCall)} callback.\n     ",
    "links" : [ "#onRttStatusChanged(Call" ]
  }, {
    "name" : "public void respondToRttRequest(int id, boolean accept)",
    "returnType" : "void",
    "comment" : "\n     * Responds to an RTT request received via the {@link Callback#onRttRequest(Call, int)} )}\n     * callback.\n     * The ID used here should be the same as the ID that was received via the callback.\n     * @param id The request ID received via {@link Callback#onRttRequest(Call, int)}\n     * @param accept {@code true} if the RTT request should be accepted, {@code false} otherwise.\n     ",
    "links" : [ "#onRttRequest(Call" ]
  }, {
    "name" : "public void handoverTo(PhoneAccountHandle toHandle, @VideoProfile.VideoState int videoState, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Initiates a handover of this {@link Call} to the {@link ConnectionService} identified\n     * by {@code toHandle}.  The videoState specified indicates the desired video state after the\n     * handover.\n     * <p>\n     * A call handover is the process where an ongoing call is transferred from one app (i.e.\n     * {@link ConnectionService} to another app.  The user could, for example, choose to continue a\n     * mobile network call in a video calling app.  The mobile network call via the Telephony stack\n     * is referred to as the source of the handover, and the video calling app is referred to as the\n     * destination.\n     * <p>\n     * When considering a handover scenario the device this method is called on is considered the\n     * <em>initiating</em> device (since the user initiates the handover from this device), and the\n     * other device is considered the <em>receiving</em> device.\n     * <p>\n     * When this method is called on the <em>initiating</em> device, the Telecom framework will bind\n     * to the {@link ConnectionService} defined by the {@code toHandle} {@link PhoneAccountHandle}\n     * and invoke\n     * {@link ConnectionService#onCreateOutgoingHandoverConnection(PhoneAccountHandle,\n     * ConnectionRequest)} to inform the destination app that a request has been made to handover a\n     * call to it.  The app returns an instance of {@link Connection} to represent the handover call\n     * At this point the app should display UI to indicate to the user that a call\n     * handover is in process.\n     * <p>\n     * The destination app is responsible for communicating the handover request from the\n     * <em>initiating</em> device to the <em>receiving</em> device.\n     * <p>\n     * When the app on the <em>receiving</em> device receives the handover request, it calls\n     * {@link TelecomManager#acceptHandover(Uri, int, PhoneAccountHandle)} to continue the handover\n     * process from the <em>initiating</em> device to the <em>receiving</em> device.  At this point\n     * the destination app on the <em>receiving</em> device should show UI to allow the user to\n     * choose whether they want to continue their call in the destination app.\n     * <p>\n     * When the destination app on the <em>receiving</em> device calls\n     * {@link TelecomManager#acceptHandover(Uri, int, PhoneAccountHandle)}, Telecom will bind to its\n     * {@link ConnectionService} and call\n     * {@link ConnectionService#onCreateIncomingHandoverConnection(PhoneAccountHandle,\n     * ConnectionRequest)} to inform it of the handover request.  The app returns an instance of\n     * {@link Connection} to represent the handover call.\n     * <p>\n     * If the user of the <em>receiving</em> device accepts the handover, the app calls\n     * {@link Connection#setActive()} to complete the handover process; Telecom will disconnect the\n     * original call.  If the user rejects the handover, the app calls\n     * {@link Connection#setDisconnected(DisconnectCause)} and specifies a {@link DisconnectCause}\n     * of {@link DisconnectCause#CANCELED} to indicate that the handover has been cancelled.\n     * <p>\n     * Telecom will only allow handovers from {@link PhoneAccount}s which declare\n     * {@link PhoneAccount#EXTRA_SUPPORTS_HANDOVER_FROM}.  Similarly, the {@link PhoneAccount}\n     * specified by {@code toHandle} must declare {@link PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO}.\n     * <p>\n     * Errors in the handover process are reported to the {@link InCallService} via\n     * {@link Callback#onHandoverFailed(Call, int)}.  Errors in the handover process are reported to\n     * the involved {@link ConnectionService}s via\n     * {@link ConnectionService#onHandoverFailed(ConnectionRequest, int)}.\n     *\n     * @param toHandle {@link PhoneAccountHandle} of the {@link ConnectionService} to handover\n     *                 this call to.\n     * @param videoState Indicates the video state desired after the handover (see the\n     *               {@code STATE_*} constants defined in {@link VideoProfile}).\n     * @param extras Bundle containing extra information to be passed to the\n     *               {@link ConnectionService}\n     ",
    "links" : [ "android.telecom.VideoProfile", "android.telecom.Connection#setDisconnected(DisconnectCause)", "android.telecom.ConnectionService#onCreateIncomingHandoverConnection(PhoneAccountHandle", "android.telecom.ConnectionService#onCreateOutgoingHandoverConnection(PhoneAccountHandle", "android.telecom.Connection#setActive()", "android.telecom.Connection", "android.telecom.Call", "android.telecom.DisconnectCause#CANCELED", "android.telecom.PhoneAccountHandle", "android.telecom.PhoneAccount#EXTRA_SUPPORTS_HANDOVER_FROM", "#onHandoverFailed(Call", "android.telecom.TelecomManager#acceptHandover(Uri", "android.telecom.InCallService", "android.telecom.PhoneAccount", "android.telecom.ConnectionService#onHandoverFailed(ConnectionRequest", "android.telecom.PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO", "android.telecom.ConnectionService", "android.telecom.DisconnectCause" ]
  }, {
    "name" : "public void stopRtt()",
    "returnType" : "void",
    "comment" : "\n     * Terminate the RTT session on this call. The resulting state change will be notified via\n     * the {@link Callback#onRttStatusChanged(Call, boolean, RttCall)} callback.\n     ",
    "links" : [ "#onRttStatusChanged(Call" ]
  }, {
    "name" : "public final void putExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Adds some extras to this {@link Call}.  Existing keys are replaced and new ones are\n     * added.\n     * <p>\n     * No assumptions should be made as to how an In-Call UI or service will handle these\n     * extras.  Keys should be fully qualified (e.g., com.example.MY_EXTRA) to avoid conflicts.\n     *\n     * @param extras The extras to add.\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public final void putExtra(String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a boolean extra to this {@link Call}.\n     *\n     * @param key The extra key.\n     * @param value The value.\n     * @hide\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public final void putExtra(String key, int value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an integer extra to this {@link Call}.\n     *\n     * @param key The extra key.\n     * @param value The value.\n     * @hide\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public final void putExtra(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a string extra to this {@link Call}.\n     *\n     * @param key The extra key.\n     * @param value The value.\n     * @hide\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public final void removeExtras(List<String> keys)",
    "returnType" : "void",
    "comment" : "\n     * Removes extras from this {@link Call}.\n     *\n     * @param keys The keys of the extras to remove.\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public final void removeExtras(String... keys)",
    "returnType" : "void",
    "comment" : "\n     * Removes extras from this {@link Call}.\n     *\n     * @param keys The keys of the extras to remove.\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public Call getParent()",
    "returnType" : "Call",
    "comment" : "\n     * Obtains the parent of this {@code Call} in a conference, if any.\n     *\n     * @return The parent {@code Call}, or {@code null} if this {@code Call} is not a\n     * child of any conference {@code Call}s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Call> getChildren()",
    "returnType" : "List<Call>",
    "comment" : "\n     * Obtains the children of this conference {@code Call}, if any.\n     *\n     * @return The children of this {@code Call} if this {@code Call} is a conference, or an empty\n     * {@code List} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Call> getConferenceableCalls()",
    "returnType" : "List<Call>",
    "comment" : "\n     * Returns the list of {@code Call}s with which this {@code Call} is allowed to conference.\n     *\n     * @return The list of conferenceable {@code Call}s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the state of this {@code Call}.\n     *\n     * @return A state value, chosen from the {@code STATE_*} constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Call getGenericConferenceActiveChildCall()",
    "returnType" : "Call",
    "comment" : "\n     * Returns the child {@link Call} in a generic conference that is currently active.\n     *\n     * A \"generic conference\" is the mechanism used to support two simultaneous calls on a device\n     * in CDMA networks. It is effectively equivalent to having one call active and one call on hold\n     * in GSM or IMS calls. This method returns the currently active call.\n     *\n     * In a generic conference, the network exposes the conference to us as a single call, and we\n     * switch between talking to the two participants using a CDMA flash command. Since the network\n     * exposes no additional information about the call, the only way we know which caller we're\n     * currently talking to is by keeping track of the flash commands that we've sent to the\n     * network.\n     *\n     * For calls that are not generic conferences, or when the generic conference has more than\n     * 2 children, returns {@code null}.\n     * @see Details#PROPERTY_GENERIC_CONFERENCE\n     * @return The active child call.\n     ",
    "links" : [ "android.telecom.Call" ]
  }, {
    "name" : "public List<String> getCannedTextResponses()",
    "returnType" : "List<String>",
    "comment" : "\n     * Obtains a list of canned, pre-configured message responses to present to the user as\n     * ways of rejecting this {@code Call} using via a text message.\n     *\n     * @see #reject(boolean, String)\n     *\n     * @return A list of canned text message responses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InCallService.VideoCall getVideoCall()",
    "returnType" : "InCallService.VideoCall",
    "comment" : "\n     * Obtains an object that can be used to display video from this {@code Call}.\n     *\n     * @return An {@code Call.VideoCall}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Details getDetails()",
    "returnType" : "Details",
    "comment" : "\n     * Obtains an object containing call details.\n     *\n     * @return A {@link Details} object. Depending on the state of the {@code Call}, the\n     * result may be {@code null}.\n     ",
    "links" : [ "Details" ]
  }, {
    "name" : "public RttCall getRttCall()",
    "returnType" : "RttCall",
    "comment" : "\n     * Returns this call's RttCall object. The {@link RttCall} instance is used to send and\n     * receive RTT text data, as well as to change the RTT mode.\n     * @return A {@link Call.RttCall}. {@code null} if there is no active RTT connection.\n     ",
    "links" : [ "RttCall", "Call.RttCall" ]
  }, {
    "name" : "public boolean isRttActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this call has an active RTT connection.\n     * @return true if there is a connection, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to this {@code Call}.\n     *\n     * @param callback A {@code Callback}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(Callback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to this {@code Call}.\n     *\n     * @param callback A {@code Callback}.\n     * @param handler A handler which command and status changes will be delivered to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a callback from this {@code Call}.\n     *\n     * @param callback A {@code Callback}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * @param state An integer value of a {@code STATE_*} constant.\n     * @return A string representation of the value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener to this {@code Call}.\n     *\n     * @param listener A {@code Listener}.\n     * @deprecated Use {@link #registerCallback} instead.\n     * @hide\n     ",
    "links" : [ "#registerCallback" ]
  }, {
    "name" : "public void removeListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener from this {@code Call}.\n     *\n     * @param listener A {@code Listener}.\n     * @deprecated Use {@link #unregisterCallback} instead.\n     * @hide\n     ",
    "links" : [ "#unregisterCallback" ]
  }, {
    "name" : " final String internalGetCallId()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalUpdate(ParcelableCall parcelableCall, Map<String, Call> callIdMap)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalSetPostDialWait(String remaining)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalSetDisconnected()",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalOnConnectionEvent(String event, Bundle extras)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalOnRttUpgradeRequest(final int requestId)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalOnRttInitiationFailure(int reason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " final void internalOnHandoverFailed(int error)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " final void internalOnHandoverComplete()",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private void fireStateChanged(final int newState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireParentChanged(final Call newParent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireChildrenChanged(final List<Call> children)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireDetailsChanged(final Details details)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireCannedTextResponsesLoaded(final List<String> cannedTextResponses)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireVideoCallChanged(final InCallService.VideoCall videoCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void firePostDialWait(final String remainingPostDialSequence)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireCallDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireConferenceableCallsChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireOnConnectionEvent(final String event, final Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Notifies listeners of an incoming connection event.\n     * <p>\n     * Connection events are issued via {@link Connection#sendConnectionEvent(String, Bundle)}.\n     *\n     * @param event\n     * @param extras\n     ",
    "links" : [ "android.telecom.Connection#sendConnectionEvent(String" ]
  }, {
    "name" : "private void fireOnIsRttChanged(final boolean enabled, final RttCall rttCall)",
    "returnType" : "void",
    "comment" : "\n     * Notifies listeners of an RTT on/off change\n     *\n     * @param enabled True if RTT is now enabled, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fireOnRttModeChanged(final int mode)",
    "returnType" : "void",
    "comment" : "\n     * Notifies listeners of a RTT mode change\n     *\n     * @param mode The new RTT mode\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean areBundlesEqual(Bundle bundle, Bundle newBundle)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if two bundles are equal.\n     *\n     * @param bundle The original bundle.\n     * @param newBundle The bundle to compare with.\n     * @retrun {@code true} if the bundles are equal, {@code false} otherwise.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "STATE_NEW", "STATE_DIALING", "STATE_RINGING", "STATE_HOLDING", "STATE_ACTIVE", "STATE_DISCONNECTED", "STATE_SELECT_PHONE_ACCOUNT", "STATE_PRE_DIAL_WAIT", "STATE_CONNECTING", "STATE_DISCONNECTING", "STATE_PULLING_CALL", "STATE_AUDIO_PROCESSING", "STATE_SIMULATED_RINGING", "AVAILABLE_PHONE_ACCOUNTS", "EXTRA_SUGGESTED_PHONE_ACCOUNTS", "EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS", "EXTRA_SILENT_RINGING_REQUESTED", "EVENT_REQUEST_HANDOVER", "EXTRA_HANDOVER_PHONE_ACCOUNT_HANDLE", "EXTRA_HANDOVER_VIDEO_STATE", "EXTRA_HANDOVER_EXTRAS", "EVENT_HANDOVER_COMPLETE", "EVENT_HANDOVER_SOURCE_DISCONNECTED", "EVENT_HANDOVER_FAILED", "REJECT_REASON_DECLINED", "REJECT_REASON_UNWANTED", "mPhone", "mTelecomCallId", "mInCallAdapter", "mChildrenIds", "mChildren", "mUnmodifiableChildren", "mCallbackRecords", "mConferenceableCalls", "mUnmodifiableConferenceableCalls", "mChildrenCached", "mParentId", "mActiveGenericConferenceChild", "mState", "mCannedTextResponses", "mCallingPackage", "mTargetSdkVersion", "mRemainingPostDialSequence", "mVideoCallImpl", "mRttCall", "mDetails", "mExtras" ],
  "methodNames" : [ "public String getRemainingPostDialSequence()", "public void answer(@VideoProfile.VideoState int videoState)", "public void deflect(Uri address)", "public void reject(boolean rejectWithMessage, String textMessage)", "public void reject(@RejectReason int rejectReason)", "public void transfer(@NonNull Uri targetNumber, boolean isConfirmationRequired)", "public void transfer(@NonNull android.telecom.Call toCall)", "public void disconnect()", "public void hold()", "public void unhold()", "public void enterBackgroundAudioProcessing()", "public void exitBackgroundAudioProcessing(boolean shouldRing)", "public void playDtmfTone(char digit)", "public void stopDtmfTone()", "public void postDialContinue(boolean proceed)", "public void phoneAccountSelected(PhoneAccountHandle accountHandle, boolean setDefault)", "public void conference(Call callToConferenceWith)", "public void splitFromConference()", "public void mergeConference()", "public void swapConference()", "public void addConferenceParticipants(@NonNull List<Uri> participants)", "public void pullExternalCall()", "public void sendCallEvent(String event, Bundle extras)", "public void sendRttRequest()", "public void respondToRttRequest(int id, boolean accept)", "public void handoverTo(PhoneAccountHandle toHandle, @VideoProfile.VideoState int videoState, Bundle extras)", "public void stopRtt()", "public final void putExtras(Bundle extras)", "public final void putExtra(String key, boolean value)", "public final void putExtra(String key, int value)", "public final void putExtra(String key, String value)", "public final void removeExtras(List<String> keys)", "public final void removeExtras(String... keys)", "public Call getParent()", "public List<Call> getChildren()", "public List<Call> getConferenceableCalls()", "public int getState()", "public Call getGenericConferenceActiveChildCall()", "public List<String> getCannedTextResponses()", "public InCallService.VideoCall getVideoCall()", "public Details getDetails()", "public RttCall getRttCall()", "public boolean isRttActive()", "public void registerCallback(Callback callback)", "public void registerCallback(Callback callback, Handler handler)", "public void unregisterCallback(Callback callback)", "public String toString()", "private static String stateToString(int state)", "public void addListener(Listener listener)", "public void removeListener(Listener listener)", " final String internalGetCallId()", " final void internalUpdate(ParcelableCall parcelableCall, Map<String, Call> callIdMap)", " final void internalSetPostDialWait(String remaining)", " final void internalSetDisconnected()", " final void internalOnConnectionEvent(String event, Bundle extras)", " final void internalOnRttUpgradeRequest(final int requestId)", " final void internalOnRttInitiationFailure(int reason)", " final void internalOnHandoverFailed(int error)", " final void internalOnHandoverComplete()", "private void fireStateChanged(final int newState)", "private void fireParentChanged(final Call newParent)", "private void fireChildrenChanged(final List<Call> children)", "private void fireDetailsChanged(final Details details)", "private void fireCannedTextResponsesLoaded(final List<String> cannedTextResponses)", "private void fireVideoCallChanged(final InCallService.VideoCall videoCall)", "private void firePostDialWait(final String remainingPostDialSequence)", "private void fireCallDestroyed()", "private void fireConferenceableCallsChanged()", "private void fireOnConnectionEvent(final String event, final Bundle extras)", "private void fireOnIsRttChanged(final boolean enabled, final RttCall rttCall)", "private void fireOnRttModeChanged(final int mode)", "private static boolean areBundlesEqual(Bundle bundle, Bundle newBundle)" ]
}