{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiScanner.java",
  "packageName" : "android.net.wifi",
  "className" : "ScanSettings",
  "comment" : "\n     * scan configuration parameters to be sent to {@link #startBackgroundScan}\n     ",
  "variables" : [ {
    "name" : "band",
    "type" : "int",
    "comment" : " one of the WIFI_BAND values ",
    "links" : [ ]
  }, {
    "name" : "channels",
    "type" : "ChannelSpec[]",
    "comment" : " list of channels; used when band is set to WIFI_BAND_UNSPECIFIED ",
    "links" : [ ]
  }, {
    "name" : "hiddenNetworks",
    "type" : "List<HiddenNetwork>",
    "comment" : "\n         * List of hidden networks to scan for. Explicit probe requests are sent out for such\n         * networks during scan. Only valid for single scan requests.\n         ",
    "links" : [ ]
  }, {
    "name" : "periodInMs",
    "type" : "int",
    "comment" : "\n         * period of background scan; in millisecond, 0 => single shot scan\n         * @deprecated Background scan support has always been hardware vendor dependent. This\n         * support may not be present on newer devices. Use {@link #startScan(ScanSettings,\n         * ScanListener)} instead for single scans.\n         ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "reportEvents",
    "type" : "int",
    "comment" : "\n         * must have a valid REPORT_EVENT value\n         * @deprecated Background scan support has always been hardware vendor dependent. This\n         * support may not be present on newer devices. Use {@link #startScan(ScanSettings,\n         * ScanListener)} instead for single scans.\n         ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "numBssidsPerScan",
    "type" : "int",
    "comment" : "\n         * defines number of bssids to cache from each scan\n         * @deprecated Background scan support has always been hardware vendor dependent. This\n         * support may not be present on newer devices. Use {@link #startScan(ScanSettings,\n         * ScanListener)} instead for single scans.\n         ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "maxScansToCache",
    "type" : "int",
    "comment" : "\n         * defines number of scans to cache; use it with REPORT_EVENT_AFTER_BUFFER_FULL\n         * to wake up at fixed interval\n         * @deprecated Background scan support has always been hardware vendor dependent. This\n         * support may not be present on newer devices. Use {@link #startScan(ScanSettings,\n         * ScanListener)} instead for single scans.\n         ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "maxPeriodInMs",
    "type" : "int",
    "comment" : "\n         * if maxPeriodInMs is non zero or different than period, then this bucket is\n         * a truncated binary exponential backoff bucket and the scan period will grow\n         * exponentially as per formula: actual_period(N) = period * (2 ^ (N/stepCount))\n         * to maxPeriodInMs\n         * @deprecated Background scan support has always been hardware vendor dependent. This\n         * support may not be present on newer devices. Use {@link #startScan(ScanSettings,\n         * ScanListener)} instead for single scans.\n         ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "stepCount",
    "type" : "int",
    "comment" : "\n         * for truncated binary exponential back off bucket, number of scans to perform\n         * for a given period\n         * @deprecated Background scan support has always been hardware vendor dependent. This\n         * support may not be present on newer devices. Use {@link #startScan(ScanSettings,\n         * ScanListener)} instead for single scans.\n         ",
    "links" : [ "#startScan" ]
  }, {
    "name" : "isPnoScan",
    "type" : "boolean",
    "comment" : "\n         * Flag to indicate if the scan settings are targeted for PNO scan.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "int",
    "comment" : "\n         * Indicate the type of scan to be performed by the wifi chip.\n         *\n         * On devices with multiple hardware radio chains (and hence different modes of scan),\n         * this type serves as an indication to the hardware on what mode of scan to perform.\n         * Only apps holding {@link android.Manifest.permission.NETWORK_STACK} permission can set\n         * this value.\n         *\n         * Note: This serves as an intent and not as a stipulation, the wifi chip\n         * might honor or ignore the indication based on the current radio conditions. Always\n         * use the {@link ScanResult#radioChainInfos} to figure out the radio chain configuration\n         * used to receive the corresponding scan result.\n         *\n         * One of {@link #SCAN_TYPE_LOW_LATENCY}, {@link #SCAN_TYPE_LOW_POWER},\n         * {@link #SCAN_TYPE_HIGH_ACCURACY}.\n         * Default value: {@link #SCAN_TYPE_LOW_LATENCY}.\n         ",
    "links" : [ "android.Manifest.permission.NETWORK_STACK", "ScanResult#radioChainInfos", "#SCAN_TYPE_LOW_LATENCY", "#SCAN_TYPE_LOW_POWER", "#SCAN_TYPE_HIGH_ACCURACY", "#SCAN_TYPE_LOW_LATENCY" ]
  }, {
    "name" : "ignoreLocationSettings",
    "type" : "boolean",
    "comment" : "\n         * This scan request may ignore location settings while receiving scans. This should only\n         * be used in emergency situations.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "hideFromAppOps",
    "type" : "boolean",
    "comment" : "\n         * This scan request will be hidden from app-ops noting for location information. This\n         * should only be used by FLP/NLP module on the device which is using the scan results to\n         * compute results for behalf on their clients. FLP/NLP module using this flag should ensure\n         * that they note in app-ops the eventual delivery of location information computed using\n         * these results to their client .\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ScanSettings>",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "variableNames" : [ "band", "channels", "hiddenNetworks", "periodInMs", "reportEvents", "numBssidsPerScan", "maxScansToCache", "maxPeriodInMs", "stepCount", "isPnoScan", "type", "ignoreLocationSettings", "hideFromAppOps", "CREATOR" ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}