{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/netstats/provider/NetworkStatsProvider.java",
  "packageName" : "android.net.netstats.provider",
  "className" : "NetworkStatsProvider",
  "comment" : "\n * A base class that allows external modules to implement a custom network statistics provider.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "QUOTA_UNLIMITED",
    "type" : "int",
    "comment" : "\n     * A value used by {@link #onSetLimit}, {@link #onSetAlert} and {@link #onSetWarningAndLimit}\n     * indicates there is no limit.\n     ",
    "links" : [ "#onSetWarningAndLimit", "#onSetLimit", "#onSetAlert" ]
  }, {
    "name" : "mProviderBinder",
    "type" : "INetworkStatsProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderCbBinder",
    "type" : "INetworkStatsProviderCallback",
    "comment" : " never null once non-null.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public INetworkStatsProvider getProviderBinder()",
    "returnType" : "INetworkStatsProvider",
    "comment" : "\n     * Return the binder invoked by the service and redirect function calls to the overridden\n     * methods.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProviderCallbackBinder(@NonNull INetworkStatsProviderCallback binder)",
    "returnType" : "void",
    "comment" : "\n     * Store the binder that was returned by the service when successfully registering. Note that\n     * the provider cannot be re-registered. Hence this method can only be called once per provider.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public INetworkStatsProviderCallback getProviderCallbackBinder()",
    "returnType" : "INetworkStatsProviderCallback",
    "comment" : "\n     * Get the binder that was returned by the service when successfully registering. Or null if the\n     * provider was never registered.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()",
    "returnType" : "INetworkStatsProviderCallback",
    "comment" : "\n     * Get the binder that was returned by the service when successfully registering. Throw an\n     * {@link IllegalStateException} if the provider is not registered.\n     *\n     * @hide\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "public void notifyStatsUpdated(int token, @NonNull NetworkStats ifaceStats, @NonNull NetworkStats uidStats)",
    "returnType" : "void",
    "comment" : "\n     * Notify the system of new network statistics.\n     *\n     * Send the network statistics recorded since the last call to {@link #notifyStatsUpdated}. Must\n     * be called as soon as possible after {@link NetworkStatsProvider#onRequestStatsUpdate(int)}\n     * being called. Responding later increases the probability stats will be dropped. The\n     * provider can also call this whenever it wants to reports new stats for any reason.\n     * Note that the system will not necessarily immediately propagate the statistics to\n     * reflect the update.\n     *\n     * @param token the token under which these stats were gathered. Providers can call this method\n     *              with the current token as often as they want, until the token changes.\n     *              See {@link NetworkStatsProvider#onRequestStatsUpdate(int)}\n     * @param ifaceStats the {@link NetworkStats} per interface to be reported.\n     *                   The provider should not include any traffic that is already counted by\n     *                   kernel interface counters.\n     * @param uidStats the same stats as above, but counts {@link NetworkStats}\n     *                 per uid.\n     ",
    "links" : [ "android.net.NetworkStats", "#notifyStatsUpdated", "android.net.netstats.provider.NetworkStatsProvider#onRequestStatsUpdate(int)" ]
  }, {
    "name" : "public void notifyAlertReached()",
    "returnType" : "void",
    "comment" : "\n     * Notify system that the quota set by {@code onSetAlert} has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyWarningReached()",
    "returnType" : "void",
    "comment" : "\n     * Notify system that the warning set by {@link #onSetWarningAndLimit} has been reached.\n     ",
    "links" : [ "#onSetWarningAndLimit" ]
  }, {
    "name" : "public void notifyLimitReached()",
    "returnType" : "void",
    "comment" : "\n     * Notify system that the limit set by {@link #onSetLimit} or limit set by\n     * {@link #onSetWarningAndLimit} has been reached.\n     ",
    "links" : [ "#onSetWarningAndLimit", "#onSetLimit" ]
  }, {
    "name" : "public abstract void onRequestStatsUpdate(int token)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@code NetworkStatsService} when it requires to know updated stats.\n     * The provider MUST respond by calling {@link #notifyStatsUpdated} as soon as possible.\n     * Responding later increases the probability stats will be dropped. Memory allowing, the\n     * system will try to take stats into account up to one minute after calling\n     * {@link #onRequestStatsUpdate}.\n     *\n     * @param token a positive number identifying the new state of the system under which\n     *              {@link NetworkStats} have to be gathered from now on. When this is called,\n     *              custom implementations of providers MUST tally and report the latest stats with\n     *              the previous token, under which stats were being gathered so far.\n     ",
    "links" : [ "android.net.NetworkStats", "#notifyStatsUpdated", "#onRequestStatsUpdate" ]
  }, {
    "name" : "public abstract void onSetLimit(@NonNull String iface, long quotaBytes)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@code NetworkStatsService} when setting the interface quota for the specified\n     * upstream interface. When this is called, the custom implementation should block all egress\n     * packets on the {@code iface} associated with the provider when {@code quotaBytes} bytes have\n     * been reached, and MUST respond to it by calling\n     * {@link NetworkStatsProvider#notifyLimitReached()}.\n     *\n     * @param iface the interface requiring the operation.\n     * @param quotaBytes the quota defined as the number of bytes, starting from zero and counting\n     *                   from now. A value of {@link #QUOTA_UNLIMITED} indicates there is no limit.\n     ",
    "links" : [ "android.net.netstats.provider.NetworkStatsProvider#notifyLimitReached()", "#QUOTA_UNLIMITED" ]
  }, {
    "name" : "public void onSetWarningAndLimit(@NonNull String iface, long warningBytes, long limitBytes)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@code NetworkStatsService} when setting the interface quotas for the specified\n     * upstream interface. If a provider implements {@link #onSetWarningAndLimit}, the system\n     * will not call {@link #onSetLimit}. When this method is called, the implementation\n     * should behave as follows:\n     *   1. If {@code warningBytes} is reached on {@code iface}, block all further traffic on\n     *      {@code iface} and call {@link NetworkStatsProvider@notifyWarningReached()}.\n     *   2. If {@code limitBytes} is reached on {@code iface}, block all further traffic on\n     *   {@code iface} and call {@link NetworkStatsProvider#notifyLimitReached()}.\n     *\n     * @param iface the interface requiring the operation.\n     * @param warningBytes the warning defined as the number of bytes, starting from zero and\n     *                     counting from now. A value of {@link #QUOTA_UNLIMITED} indicates\n     *                     there is no warning.\n     * @param limitBytes the limit defined as the number of bytes, starting from zero and counting\n     *                   from now. A value of {@link #QUOTA_UNLIMITED} indicates there is no limit.\n     ",
    "links" : [ "#onSetWarningAndLimit", "#onSetLimit", "android.net.netstats.provider.NetworkStatsProvider", "android.net.netstats.provider.NetworkStatsProvider#notifyLimitReached()", "#QUOTA_UNLIMITED" ]
  }, {
    "name" : "public abstract void onSetAlert(long quotaBytes)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@code NetworkStatsService} when setting the alert bytes. Custom implementations\n     * MUST call {@link NetworkStatsProvider#notifyAlertReached()} when {@code quotaBytes} bytes\n     * have been reached. Unlike {@link #onSetLimit(String, long)}, the custom implementation should\n     * not block all egress packets.\n     *\n     * @param quotaBytes the quota defined as the number of bytes, starting from zero and counting\n     *                   from now. A value of {@link #QUOTA_UNLIMITED} indicates there is no alert.\n     ",
    "links" : [ "#onSetLimit(String", "android.net.netstats.provider.NetworkStatsProvider#notifyAlertReached()", "#QUOTA_UNLIMITED" ]
  } ],
  "methodNames" : [ "public INetworkStatsProvider getProviderBinder()", "public void setProviderCallbackBinder(@NonNull INetworkStatsProviderCallback binder)", "public INetworkStatsProviderCallback getProviderCallbackBinder()", "public INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()", "public void notifyStatsUpdated(int token, @NonNull NetworkStats ifaceStats, @NonNull NetworkStats uidStats)", "public void notifyAlertReached()", "public void notifyWarningReached()", "public void notifyLimitReached()", "public abstract void onRequestStatsUpdate(int token)", "public abstract void onSetLimit(@NonNull String iface, long quotaBytes)", "public void onSetWarningAndLimit(@NonNull String iface, long warningBytes, long limitBytes)", "public abstract void onSetAlert(long quotaBytes)" ],
  "variableNames" : [ "QUOTA_UNLIMITED", "mProviderBinder", "mProviderCbBinder" ]
}