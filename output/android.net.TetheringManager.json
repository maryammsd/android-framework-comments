{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/TetheringManager.java",
  "packageName" : "android.net",
  "className" : "TetheringManager",
  "comment" : "\n * This class provides the APIs to control the tethering service.\n * <p> The primary responsibilities of this class are to provide the APIs for applications to\n * start tethering, stop tethering, query configuration and query status.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TIMEOUT_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECTOR_POLL_INTERVAL_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnector",
    "type" : "ITetheringConnector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectorWaitQueue",
    "type" : "List<ConnectorConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectorSupplier",
    "type" : "Supplier<IBinder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "TetheringCallbackInternal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTetheringEventCallbacks",
    "type" : "ArrayMap<TetheringEventCallback, ITetheringEventCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTetheringConfiguration",
    "type" : "TetheringConfigurationParcel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTetherStatesParcel",
    "type" : "TetherStatesParcel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_TETHER_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A tetherable connection has come or gone.\n     * Uses {@code TetheringManager.EXTRA_AVAILABLE_TETHER},\n     * {@code TetheringManager.EXTRA_ACTIVE_LOCAL_ONLY},\n     * {@code TetheringManager.EXTRA_ACTIVE_TETHER}, and\n     * {@code TetheringManager.EXTRA_ERRORED_TETHER} to indicate\n     * the current state of tethering.  Each include a list of\n     * interface names in that state (may be empty).\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AVAILABLE_TETHER",
    "type" : "String",
    "comment" : "\n     * gives a String[] listing all the interfaces configured for\n     * tethering and currently available for tethering.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ACTIVE_LOCAL_ONLY",
    "type" : "String",
    "comment" : "\n     * gives a String[] listing all the interfaces currently in local-only\n     * mode (ie, has DHCPv4+IPv6-ULA support and no packet forwarding)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ACTIVE_TETHER",
    "type" : "String",
    "comment" : "\n     * gives a String[] listing all the interfaces currently tethered\n     * (ie, has DHCPv4 support and packets potentially forwarded/NATed)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ERRORED_TETHER",
    "type" : "String",
    "comment" : "\n     * gives a String[] listing all the interfaces we tried to tether and\n     * failed.  Use {@link #getLastTetherError} to find the error code\n     * for any interfaces listed here.\n     ",
    "links" : [ "#getLastTetherError" ]
  }, {
    "name" : "TETHERING_INVALID",
    "type" : "int",
    "comment" : "\n     * Invalid tethering type.\n     * @see #startTethering.\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_WIFI",
    "type" : "int",
    "comment" : "\n     * Wifi tethering type.\n     * @see #startTethering.\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_USB",
    "type" : "int",
    "comment" : "\n     * USB tethering type.\n     * @see #startTethering.\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_BLUETOOTH",
    "type" : "int",
    "comment" : "\n     * Bluetooth tethering type.\n     * @see #startTethering.\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_WIFI_P2P",
    "type" : "int",
    "comment" : "\n     * Wifi P2p tethering type.\n     * Wifi P2p tethering is set through events automatically, and don't\n     * need to start from #startTethering.\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_NCM",
    "type" : "int",
    "comment" : "\n     * Ncm local tethering type.\n     * @see #startTethering(TetheringRequest, Executor, StartTetheringCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_ETHERNET",
    "type" : "int",
    "comment" : "\n     * Ethernet tethering type.\n     * @see #startTethering(TetheringRequest, Executor, StartTetheringCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHERING_WIGIG",
    "type" : "int",
    "comment" : "\n     * WIGIG tethering type. Use a separate type to prevent\n     * conflicts with TETHERING_WIFI\n     * This type is only used internally by the tethering module\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_NO_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_UNKNOWN_IFACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_SERVICE_UNAVAIL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_UNSUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_UNAVAIL_IFACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_TETHER_IFACE_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_UNTETHER_IFACE_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_ENABLE_FORWARDING_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_DISABLE_FORWARDING_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_IFACE_CFG_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_PROVISIONING_FAILED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_DHCPSERVER_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_ENTITLEMENT_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_ERROR_UNKNOWN_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TETHER_HARDWARE_OFFLOAD_STOPPED",
    "type" : "int",
    "comment" : " Tethering offload status is stopped. ",
    "links" : [ ]
  }, {
    "name" : "TETHER_HARDWARE_OFFLOAD_STARTED",
    "type" : "int",
    "comment" : " Tethering offload status is started. ",
    "links" : [ ]
  }, {
    "name" : "TETHER_HARDWARE_OFFLOAD_FAILED",
    "type" : "int",
    "comment" : " Fail to start tethering offload. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void startPollingForConnector()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onTetheringConnected(ITetheringConnector connector)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getConnector(ConnectorConsumer consumer)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously get the ITetheringConnector to execute some operation.\n     *\n     * <p>If the connector is already available, the operation will be executed on the caller's\n     * thread. Otherwise it will be queued and executed on a worker thread. The operation should be\n     * limited to performing oneway binder calls to minimize differences due to threading.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPermissionFailure(final int errorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int tether(@NonNull final String iface)",
    "returnType" : "int",
    "comment" : "\n     * Attempt to tether the named interface.  This will setup a dhcp server\n     * on the interface, forward and NAT IP v4 packets and forward DNS requests\n     * to the best active upstream network interface.  Note that if no upstream\n     * IP network interface is available, dhcp will still run and traffic will be\n     * allowed between the tethered devices and this device, though upstream net\n     * access will of course fail until an upstream network interface becomes\n     * active.\n     *\n     * @deprecated The only usages is PanService. It uses this for legacy reasons\n     * and will migrate away as soon as possible.\n     *\n     * @param iface the interface name to tether.\n     * @return error a {@code TETHER_ERROR} value indicating success or failure type\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int untether(@NonNull final String iface)",
    "returnType" : "int",
    "comment" : "\n     * Stop tethering the named interface.\n     *\n     * @deprecated The only usages is PanService. It uses this for legacy reasons\n     * and will migrate away as soon as possible.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setUsbTethering(final boolean enable)",
    "returnType" : "int",
    "comment" : "\n     * Attempt to both alter the mode of USB and Tethering of USB.\n     *\n     * @deprecated New client should not use this API anymore. All clients should use\n     * #startTethering or #stopTethering which encapsulate proper entitlement logic. If the API is\n     * used and an entitlement check is needed, downstream USB tethering will be enabled but will\n     * not have any upstream.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startTethering(@NonNull final TetheringRequest request, @NonNull final Executor executor, @NonNull final StartTetheringCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Starts tethering and runs tether provisioning for the given type if needed. If provisioning\n     * fails, stopTethering will be called automatically.\n     *\n     * <p>Without {@link android.Manifest.permission.TETHER_PRIVILEGED} permission, the call will\n     * fail if a tethering entitlement check is required.\n     *\n     * @param request a {@link TetheringRequest} which can specify the preferred configuration.\n     * @param executor {@link Executor} to specify the thread upon which the callback of\n     *         TetheringRequest will be invoked.\n     * @param callback A callback that will be called to indicate the success status of the\n     *                 tethering start request.\n     ",
    "links" : [ "android.Manifest.permission.TETHER_PRIVILEGED", "TetheringRequest", "java.util.concurrent.Executor" ]
  }, {
    "name" : "public void startTethering(int type, @NonNull final Executor executor, @NonNull final StartTetheringCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Starts tethering and runs tether provisioning for the given type if needed. If provisioning\n     * fails, stopTethering will be called automatically.\n     *\n     * <p>Without {@link android.Manifest.permission.TETHER_PRIVILEGED} permission, the call will\n     * fail if a tethering entitlement check is required.\n     *\n     * @param type The tethering type, on of the {@code TetheringManager#TETHERING_*} constants.\n     * @param executor {@link Executor} to specify the thread upon which the callback of\n     *         TetheringRequest will be invoked.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.TETHER_PRIVILEGED", "java.util.concurrent.Executor" ]
  }, {
    "name" : "public void stopTethering(@TetheringType final int type)",
    "returnType" : "void",
    "comment" : "\n     * Stops tethering for the given type. Also cancels any provisioning rechecks for that type if\n     * applicable.\n     *\n     * <p>Without {@link android.Manifest.permission.TETHER_PRIVILEGED} permission, the call will\n     * fail if a tethering entitlement check is required.\n     ",
    "links" : [ "android.Manifest.permission.TETHER_PRIVILEGED" ]
  }, {
    "name" : "public void requestLatestTetheringEntitlementResult(@TetheringType int type, boolean showEntitlementUi, @NonNull Executor executor, @NonNull final OnTetheringEntitlementResultListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Request the latest value of the tethering entitlement check.\n     *\n     * <p>This method will only return the latest entitlement result if it is available. If no\n     * cached entitlement result is available, and {@code showEntitlementUi} is false,\n     * {@link #TETHER_ERROR_ENTITLEMENT_UNKNOWN} will be returned. If {@code showEntitlementUi} is\n     * true, entitlement will be run.\n     *\n     * <p>Without {@link android.Manifest.permission.TETHER_PRIVILEGED} permission, the call will\n     * fail if a tethering entitlement check is required.\n     *\n     * @param type the downstream type of tethering. Must be one of {@code #TETHERING_*} constants.\n     * @param showEntitlementUi a boolean indicating whether to check result for the UI-based\n     *         entitlement check or the silent entitlement check.\n     * @param executor the executor on which callback will be invoked.\n     * @param listener an {@link OnTetheringEntitlementResultListener} which will be called to\n     *         notify the caller of the result of entitlement check. The listener may be called zero\n     *         or one time.\n     ",
    "links" : [ "android.Manifest.permission.TETHER_PRIVILEGED", "#TETHER_ERROR_ENTITLEMENT_UNKNOWN", "OnTetheringEntitlementResultListener" ]
  }, {
    "name" : "public void requestLatestTetheringEntitlementResult(@TetheringType final int type, @NonNull final ResultReceiver receiver, final boolean showEntitlementUi)",
    "returnType" : "void",
    "comment" : " TODO: improve the usage of ResultReceiver, b/145096122",
    "links" : [ ]
  }, {
    "name" : "public void registerTetheringEventCallback(@NonNull Executor executor, @NonNull TetheringEventCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start listening to tethering change events. Any new added callback will receive the last\n     * tethering status right away. If callback is registered,\n     * {@link TetheringEventCallback#onUpstreamChanged} will immediately be called. If tethering\n     * has no upstream or disabled, the argument of callback will be null. The same callback object\n     * cannot be registered twice.\n     *\n     * @param executor the executor on which callback will be invoked.\n     * @param callback the callback to be called when tethering has change events.\n     ",
    "links" : [ "#onUpstreamChanged" ]
  }, {
    "name" : "public void unregisterTetheringEventCallback(@NonNull final TetheringEventCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove tethering event callback previously registered with\n     * {@link #registerTetheringEventCallback}.\n     *\n     * @param callback previously registered callback.\n     ",
    "links" : [ "#registerTetheringEventCallback" ]
  }, {
    "name" : "public int getLastTetherError(@NonNull final String iface)",
    "returnType" : "int",
    "comment" : "\n     * Get a more detailed error code after a Tethering or Untethering\n     * request asynchronously failed.\n     *\n     * @param iface The name of the interface of interest\n     * @return error The error code of the last error tethering or untethering the named\n     *               interface\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTetherableUsbRegexs()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the list of regular expressions that define any tetherable\n     * USB network interfaces.  If USB tethering is not supported by the\n     * device, this list should be empty.\n     *\n     * @return an array of 0 or more regular expression Strings defining\n     *        what interfaces are considered tetherable usb interfaces.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTetherableWifiRegexs()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the list of regular expressions that define any tetherable\n     * Wifi network interfaces.  If Wifi tethering is not supported by the\n     * device, this list should be empty.\n     *\n     * @return an array of 0 or more regular expression Strings defining\n     *        what interfaces are considered tetherable wifi interfaces.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTetherableBluetoothRegexs()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the list of regular expressions that define any tetherable\n     * Bluetooth network interfaces.  If Bluetooth tethering is not supported by the\n     * device, this list should be empty.\n     *\n     * @return an array of 0 or more regular expression Strings defining\n     *        what interfaces are considered tetherable bluetooth interfaces.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTetherableIfaces()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the set of tetherable, available interfaces.  This list is limited by\n     * device configuration and current interface existence.\n     *\n     * @return an array of 0 or more Strings of tetherable interface names.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTetheredIfaces()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the set of tethered interfaces.\n     *\n     * @return an array of 0 or more String of currently tethered interface names.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTetheringErroredIfaces()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the set of interface names which attempted to tether but\n     * failed.  Re-attempting to tether may cause them to reset to the Tethered\n     * state.  Alternatively, causing the interface to be destroyed and recreated\n     * may cause them to reset to the available state.\n     * {@link TetheringManager#getLastTetherError} can be used to get more\n     * information on the cause of the errors.\n     *\n     * @return an array of 0 or more String indicating the interface names\n     *        which failed to tether.\n     * @hide\n     ",
    "links" : [ "android.net.TetheringManager#getLastTetherError" ]
  }, {
    "name" : "public String[] getTetheredDhcpRanges()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the set of tethered dhcp ranges.\n     *\n     * @deprecated This API just return the default value which is not used in DhcpServer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTetheringSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the device allows for tethering.  It may be disabled via\n     * {@code ro.tether.denied} system property, Settings.TETHER_SUPPORTED or\n     * due to device configuration.\n     *\n     * @return a boolean - {@code true} indicating Tethering is supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTetheringSupported(@NonNull final String callerPkg)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the device allows for tethering. It may be disabled via {@code ro.tether.denied}\n     * system property, Settings.TETHER_SUPPORTED or due to device configuration. This is useful\n     * for system components that query this API on behalf of an app. In particular, Bluetooth\n     * has @UnsupportedAppUsage calls that will let apps turn on bluetooth tethering if they have\n     * the right permissions, but such an app needs to know whether it can (permissions as well\n     * as support from the device) turn on tethering in the first place to show the appropriate UI.\n     *\n     * @param callerPkg The caller package name, if it is not matching the calling uid,\n     *       SecurityException would be thrown.\n     * @return a boolean - {@code true} indicating Tethering is supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopAllTethering()",
    "returnType" : "void",
    "comment" : "\n     * Stop all active tethering.\n     *\n     * <p>Without {@link android.Manifest.permission.TETHER_PRIVILEGED} permission, the call will\n     * fail if a tethering entitlement check is required.\n     ",
    "links" : [ "android.Manifest.permission.TETHER_PRIVILEGED" ]
  } ],
  "variableNames" : [ "TAG", "DEFAULT_TIMEOUT_MS", "CONNECTOR_POLL_INTERVAL_MILLIS", "mConnector", "mConnectorWaitQueue", "mConnectorSupplier", "mCallback", "mContext", "mTetheringEventCallbacks", "mTetheringConfiguration", "mTetherStatesParcel", "ACTION_TETHER_STATE_CHANGED", "EXTRA_AVAILABLE_TETHER", "EXTRA_ACTIVE_LOCAL_ONLY", "EXTRA_ACTIVE_TETHER", "EXTRA_ERRORED_TETHER", "TETHERING_INVALID", "TETHERING_WIFI", "TETHERING_USB", "TETHERING_BLUETOOTH", "TETHERING_WIFI_P2P", "TETHERING_NCM", "TETHERING_ETHERNET", "TETHERING_WIGIG", "TETHER_ERROR_NO_ERROR", "TETHER_ERROR_UNKNOWN_IFACE", "TETHER_ERROR_SERVICE_UNAVAIL", "TETHER_ERROR_UNSUPPORTED", "TETHER_ERROR_UNAVAIL_IFACE", "TETHER_ERROR_INTERNAL_ERROR", "TETHER_ERROR_TETHER_IFACE_ERROR", "TETHER_ERROR_UNTETHER_IFACE_ERROR", "TETHER_ERROR_ENABLE_FORWARDING_ERROR", "TETHER_ERROR_DISABLE_FORWARDING_ERROR", "TETHER_ERROR_IFACE_CFG_ERROR", "TETHER_ERROR_PROVISIONING_FAILED", "TETHER_ERROR_DHCPSERVER_ERROR", "TETHER_ERROR_ENTITLEMENT_UNKNOWN", "TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION", "TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION", "TETHER_ERROR_UNKNOWN_TYPE", "TETHER_HARDWARE_OFFLOAD_STOPPED", "TETHER_HARDWARE_OFFLOAD_STARTED", "TETHER_HARDWARE_OFFLOAD_FAILED" ],
  "methodNames" : [ "private void startPollingForConnector()", "private void onTetheringConnected(ITetheringConnector connector)", "private void getConnector(ConnectorConsumer consumer)", "private void throwIfPermissionFailure(final int errorCode)", "public int tether(@NonNull final String iface)", "public int untether(@NonNull final String iface)", "public int setUsbTethering(final boolean enable)", "public void startTethering(@NonNull final TetheringRequest request, @NonNull final Executor executor, @NonNull final StartTetheringCallback callback)", "public void startTethering(int type, @NonNull final Executor executor, @NonNull final StartTetheringCallback callback)", "public void stopTethering(@TetheringType final int type)", "public void requestLatestTetheringEntitlementResult(@TetheringType int type, boolean showEntitlementUi, @NonNull Executor executor, @NonNull final OnTetheringEntitlementResultListener listener)", "public void requestLatestTetheringEntitlementResult(@TetheringType final int type, @NonNull final ResultReceiver receiver, final boolean showEntitlementUi)", "public void registerTetheringEventCallback(@NonNull Executor executor, @NonNull TetheringEventCallback callback)", "public void unregisterTetheringEventCallback(@NonNull final TetheringEventCallback callback)", "public int getLastTetherError(@NonNull final String iface)", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public String[] getTetherableIfaces()", "public String[] getTetheredIfaces()", "public String[] getTetheringErroredIfaces()", "public String[] getTetheredDhcpRanges()", "public boolean isTetheringSupported()", "public boolean isTetheringSupported(@NonNull final String callerPkg)", "public void stopAllTethering()" ]
}