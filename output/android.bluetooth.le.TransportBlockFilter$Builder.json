{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/TransportBlockFilter.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link TransportBlockFilter}.\n     *\n     * @hide\n     ",
  "links" : [ "android.bluetooth.le.TransportBlockFilter" ],
  "variables" : [ {
    "name" : "mOrgId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTdsFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTdsFlagsMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportDataMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiNanHash",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setTdsFlags(int tdsFlags, int tdsFlagsMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set Transport Discovery Service (TDS) flags to filter Transport Discovery Blocks.\n         *\n         * @param tdsFlags 1 octet value that represents the role of the device and information\n         *     about its state and supported features. Negative values are invalid for this\n         *     argument. Default to 0. See Transport Discovery Service specification for more\n         *     details.\n         * @param tdsFlagsMask a bitmask to select which bits in {@code tdsFlags} to match. Default\n         *     to 0, meaning no flag match required. Negative values are invalid for this argument.\n         * @throws IllegalArgumentException if either {@code tdsFlags} or {@code tdsFlagsMask} is\n         *     invalid.\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransportData(@NonNull byte[] transportData, @NonNull byte[] transportDataMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Set data to filter Transport Discovery Blocks.\n         *\n         * <p>Cannot be used when {@code orgId} is {@link\n         * OrganizationId#WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING}\n         *\n         * @param transportData must be valid value for the particular {@code orgId}. See Transport\n         *     Discovery Service specification for more details.\n         * @param transportDataMask a byte array with matching length to {@code transportData} to\n         *     select which bit to use in filter.\n         * @throws IllegalArgumentException when {@code orgId} is {@link\n         *     OrganizationId#WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING}\n         * @throws NullPointerException if {@code transportData} or {@code transportDataMask} is\n         *     {@code null}\n         * @throws IllegalArgumentException if {@code transportData} or {@code transportDataMask} is\n         *     empty\n         * @throws IllegalArgumentException if length of {@code transportData} and {@code\n         *     transportDataMask} do not match\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothAssignedNumbers.OrganizationId#WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING" ]
  }, {
    "name" : "public Builder setWifiNanHash(@NonNull byte[] wifiNanHash)",
    "returnType" : "Builder",
    "comment" : "\n         * Set hashed bloom filter value to filter {@link OrganizationId\n         * #WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING} services in Transport Discovery Blocks.\n         *\n         * <p>Can only be used when {@code orgId} is {@link OrganizationId\n         * #WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING}.\n         *\n         * <p>Cannot be used together with {@link #setTransportData(byte[], byte[])}\n         *\n         * @param wifiNanHash 8 octets Wi-Fi NAN defined bloom filter hash\n         * @throws IllegalArgumentException when {@code orgId} is not {@link\n         *     OrganizationId#WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING}\n         * @throws IllegalArgumentException when {@code wifiNanHash} is not {@link\n         *     TransportBlockFilter#WIFI_NAN_HASH_LENGTH_BYTES} long\n         * @throws NullPointerException when {@code wifiNanHash} is null\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothAssignedNumbers.OrganizationId#WIFI_ALLIANCE_NEIGHBOR_AWARENESS_NETWORKING", "android.bluetooth.le.TransportBlockFilter#WIFI_NAN_HASH_LENGTH_BYTES", "#setTransportData(byte" ]
  }, {
    "name" : "public TransportBlockFilter build()",
    "returnType" : "TransportBlockFilter",
    "comment" : "\n         * Build {@link TransportBlockFilter}.\n         *\n         * @return {@link TransportBlockFilter}\n         * @throws IllegalStateException if the filter cannot be built\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.TransportBlockFilter" ]
  } ],
  "methodNames" : [ "public Builder setTdsFlags(int tdsFlags, int tdsFlagsMask)", "public Builder setTransportData(@NonNull byte[] transportData, @NonNull byte[] transportDataMask)", "public Builder setWifiNanHash(@NonNull byte[] wifiNanHash)", "public TransportBlockFilter build()" ],
  "variableNames" : [ "mOrgId", "mTdsFlags", "mTdsFlagsMask", "mTransportData", "mTransportDataMask", "mWifiNanHash" ]
}