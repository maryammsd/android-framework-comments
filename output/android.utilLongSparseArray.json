{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/LongSparseArray.java",
  "packageName" : "android.util",
  "className" : "LongSparseArray",
  "comment" : "\n * SparseArray mapping longs to Objects.  Unlike a normal array of Objects,\n * there can be gaps in the indices.  It is intended to be more memory efficient\n * than using a HashMap to map Longs to Objects, both because it avoids\n * auto-boxing keys and its data structure doesn't rely on an extra entry object\n * for each mapping.\n *\n * <p>Note that this container keeps its mappings in an array data structure,\n * using a binary search to find keys.  The implementation is not intended to be appropriate for\n * data structures\n * that may contain large numbers of items.  It is generally slower than a traditional\n * HashMap, since lookups require a binary search and adds and removes require inserting\n * and deleting entries in the array.  For containers holding up to hundreds of items,\n * the performance difference is not significant, less than 50%.</p>\n *\n * <p>To help with performance, the container includes an optimization when removing\n * keys: instead of compacting its array immediately, it leaves the removed entry marked\n * as deleted.  The entry can then be re-used for the same key, or compacted later in\n * a single garbage collection step of all removed entries.  This garbage collection will\n * need to be performed at any time the array needs to be grown or the the map size or\n * entry values are retrieved.</p>\n *\n * <p>It is possible to iterate over the items in this container using\n * {@link #keyAt(int)} and {@link #valueAt(int)}. Iterating over the keys using\n * <code>keyAt(int)</code> with ascending values of the index will return the\n * keys in ascending order, or the values corresponding to the keys in ascending\n * order in the case of <code>valueAt(int)</code>.</p>\n ",
  "variables" : [ {
    "name" : "DELETED",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGarbage",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeys",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public LongSparseArray<E> clone()",
    "returnType" : "LongSparseArray<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E get(long key)",
    "returnType" : "E",
    "comment" : "\n     * Gets the Object mapped from the specified key, or <code>null</code>\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E get(long key, E valueIfKeyNotFound)",
    "returnType" : "E",
    "comment" : "\n     * Gets the Object mapped from the specified key, or the specified Object\n     * if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void delete(long key)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping from the specified key, if there was any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(long key)",
    "returnType" : "void",
    "comment" : "\n     * Alias for {@link #delete(long)}.\n     ",
    "links" : [ "#delete" ]
  }, {
    "name" : "public void removeIf(@NonNull LongObjPredicate<? super E> filter)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the mapping at the specified index.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "private void gc()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void put(long key, E value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a mapping from the specified key to the specified value,\n     * replacing the previous mapping from the specified key if there\n     * was one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of key-value mappings that this LongSparseArray\n     * currently stores.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long keyAt(int index)",
    "returnType" : "long",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the key from the <code>index</code>th key-value mapping that this\n     * LongSparseArray stores.\n     *\n     * <p>The keys corresponding to indices in ascending order are guaranteed to\n     * be in ascending order, e.g., <code>keyAt(0)</code> will return the\n     * smallest key and <code>keyAt(size()-1)</code> will return the largest\n     * key.</p>\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public E valueAt(int index)",
    "returnType" : "E",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, returns\n     * the value from the <code>index</code>th key-value mapping that this\n     * LongSparseArray stores.\n     *\n     * <p>The values corresponding to indices in ascending order are guaranteed\n     * to be associated with keys in ascending order, e.g.,\n     * <code>valueAt(0)</code> will return the value associated with the\n     * smallest key and <code>valueAt(size()-1)</code> will return the value\n     * associated with the largest key.</p>\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public void setValueAt(int index, E value)",
    "returnType" : "void",
    "comment" : "\n     * Given an index in the range <code>0...size()-1</code>, sets a new\n     * value for the <code>index</code>th key-value mapping that this\n     * LongSparseArray stores.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "public int indexOfKey(long key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index for which {@link #keyAt} would return the\n     * specified key, or a negative number if the specified\n     * key is not mapped.\n     ",
    "links" : [ "#keyAt" ]
  }, {
    "name" : "public int indexOfValue(E value)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index for which {@link #valueAt} would return the\n     * specified key, or a negative number if no keys map to the\n     * specified value.\n     * Beware that this is a linear search, unlike lookups by key,\n     * and that multiple keys can map to the same value and this will\n     * find only one of them.\n     ",
    "links" : [ "#valueAt" ]
  }, {
    "name" : "public int indexOfValueByValue(E value)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index for which {@link #valueAt} would return the\n     * specified key, or a negative number if no keys map to the\n     * specified value.\n     * <p>Beware that this is a linear search, unlike lookups by key,\n     * and that multiple keys can map to the same value and this will\n     * find only one of them.\n     * <p>Note also that this method uses {@code equals} unlike {@code indexOfValue}.\n     * @hide\n     ",
    "links" : [ "#valueAt" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all key-value mappings from this LongSparseArray.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void append(long key, E value)",
    "returnType" : "void",
    "comment" : "\n     * Puts a key/value pair into the array, optimizing for the case where\n     * the key is greater than all existing keys in the array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation composes a string by iterating over its mappings. If\n     * this map contains itself as a value, the string \"(this Map)\"\n     * will appear in its place.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DELETED", "mGarbage", "mKeys", "mValues", "mSize" ],
  "methodNames" : [ "public LongSparseArray<E> clone()", "public E get(long key)", "public E get(long key, E valueIfKeyNotFound)", "public void delete(long key)", "public void remove(long key)", "public void removeIf(@NonNull LongObjPredicate<? super E> filter)", "public void removeAt(int index)", "private void gc()", "public void put(long key, E value)", "public int size()", "public long keyAt(int index)", "public E valueAt(int index)", "public void setValueAt(int index, E value)", "public int indexOfKey(long key)", "public int indexOfValue(E value)", "public int indexOfValueByValue(E value)", "public void clear()", "public void append(long key, E value)", "public String toString()" ]
}