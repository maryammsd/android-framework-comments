{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/AsyncQueryHandler.java",
  "packageName" : "android.content",
  "className" : "AsyncQueryHandler",
  "comment" : "\n * A helper class to help make handling asynchronous {@link ContentResolver}\n * queries easier.\n ",
  "links" : [ "android.content.ContentResolver" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_ARG_QUERY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_ARG_INSERT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_ARG_UPDATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_ARG_DELETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResolver",
    "type" : "WeakReference<ContentResolver>",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "sLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkerThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected Handler createHandler(Looper looper)",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startQuery(int token, Object cookie, Uri uri, String[] projection, String selection, String[] selectionArgs, String orderBy)",
    "returnType" : "void",
    "comment" : "\n     * This method begins an asynchronous query. When the query is done\n     * {@link #onQueryComplete} is called.\n     *\n     * @param token A token passed into {@link #onQueryComplete} to identify\n     *  the query.\n     * @param cookie An object that gets passed into {@link #onQueryComplete}\n     * @param uri The URI, using the content:// scheme, for the content to\n     *         retrieve.\n     * @param projection A list of which columns to return. Passing null will\n     *         return all columns, which is discouraged to prevent reading data\n     *         from storage that isn't going to be used.\n     * @param selection A filter declaring which rows to return, formatted as an\n     *         SQL WHERE clause (excluding the WHERE itself). Passing null will\n     *         return all rows for the given URI.\n     * @param selectionArgs You may include ?s in selection, which will be\n     *         replaced by the values from selectionArgs, in the order that they\n     *         appear in the selection. The values will be bound as Strings.\n     * @param orderBy How to order the rows, formatted as an SQL ORDER BY\n     *         clause (excluding the ORDER BY itself). Passing null will use the\n     *         default sort order, which may be unordered.\n     ",
    "links" : [ "#onQueryComplete" ]
  }, {
    "name" : "public final void cancelOperation(int token)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to cancel operation that has not already started. Note that\n     * there is no guarantee that the operation will be canceled. They still may\n     * result in a call to on[Query/Insert/Update/Delete]Complete after this\n     * call has completed.\n     *\n     * @param token The token representing the operation to be canceled.\n     *  If multiple operations have the same token they will all be canceled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void startInsert(int token, Object cookie, Uri uri, ContentValues initialValues)",
    "returnType" : "void",
    "comment" : "\n     * This method begins an asynchronous insert. When the insert operation is\n     * done {@link #onInsertComplete} is called.\n     *\n     * @param token A token passed into {@link #onInsertComplete} to identify\n     *  the insert operation.\n     * @param cookie An object that gets passed into {@link #onInsertComplete}\n     * @param uri the Uri passed to the insert operation.\n     * @param initialValues the ContentValues parameter passed to the insert operation.\n     ",
    "links" : [ "#onInsertComplete" ]
  }, {
    "name" : "public final void startUpdate(int token, Object cookie, Uri uri, ContentValues values, String selection, String[] selectionArgs)",
    "returnType" : "void",
    "comment" : "\n     * This method begins an asynchronous update. When the update operation is\n     * done {@link #onUpdateComplete} is called.\n     *\n     * @param token A token passed into {@link #onUpdateComplete} to identify\n     *  the update operation.\n     * @param cookie An object that gets passed into {@link #onUpdateComplete}\n     * @param uri the Uri passed to the update operation.\n     * @param values the ContentValues parameter passed to the update operation.\n     ",
    "links" : [ "#onUpdateComplete" ]
  }, {
    "name" : "public final void startDelete(int token, Object cookie, Uri uri, String selection, String[] selectionArgs)",
    "returnType" : "void",
    "comment" : "\n     * This method begins an asynchronous delete. When the delete operation is\n     * done {@link #onDeleteComplete} is called.\n     *\n     * @param token A token passed into {@link #onDeleteComplete} to identify\n     *  the delete operation.\n     * @param cookie An object that gets passed into {@link #onDeleteComplete}\n     * @param uri the Uri passed to the delete operation.\n     * @param selection the where clause.\n     ",
    "links" : [ "#onDeleteComplete" ]
  }, {
    "name" : "protected void onQueryComplete(int token, Object cookie, Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Called when an asynchronous query is completed.\n     *\n     * @param token the token to identify the query, passed in from\n     *            {@link #startQuery}.\n     * @param cookie the cookie object passed in from {@link #startQuery}.\n     * @param cursor The cursor holding the results from the query.\n     ",
    "links" : [ "#startQuery" ]
  }, {
    "name" : "protected void onInsertComplete(int token, Object cookie, Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Called when an asynchronous insert is completed.\n     *\n     * @param token the token to identify the query, passed in from\n     *        {@link #startInsert}.\n     * @param cookie the cookie object that's passed in from\n     *        {@link #startInsert}.\n     * @param uri the uri returned from the insert operation.\n     ",
    "links" : [ "#startInsert" ]
  }, {
    "name" : "protected void onUpdateComplete(int token, Object cookie, int result)",
    "returnType" : "void",
    "comment" : "\n     * Called when an asynchronous update is completed.\n     *\n     * @param token the token to identify the query, passed in from\n     *        {@link #startUpdate}.\n     * @param cookie the cookie object that's passed in from\n     *        {@link #startUpdate}.\n     * @param result the result returned from the update operation\n     ",
    "links" : [ "#startUpdate" ]
  }, {
    "name" : "protected void onDeleteComplete(int token, Object cookie, int result)",
    "returnType" : "void",
    "comment" : "\n     * Called when an asynchronous delete is completed.\n     *\n     * @param token the token to identify the query, passed in from\n     *        {@link #startDelete}.\n     * @param cookie the cookie object that's passed in from\n     *        {@link #startDelete}.\n     * @param result the result returned from the delete operation\n     ",
    "links" : [ "#startDelete" ]
  }, {
    "name" : "public void handleMessage(Message msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected Handler createHandler(Looper looper)", "public void startQuery(int token, Object cookie, Uri uri, String[] projection, String selection, String[] selectionArgs, String orderBy)", "public final void cancelOperation(int token)", "public final void startInsert(int token, Object cookie, Uri uri, ContentValues initialValues)", "public final void startUpdate(int token, Object cookie, Uri uri, ContentValues values, String selection, String[] selectionArgs)", "public final void startDelete(int token, Object cookie, Uri uri, String selection, String[] selectionArgs)", "protected void onQueryComplete(int token, Object cookie, Cursor cursor)", "protected void onInsertComplete(int token, Object cookie, Uri uri)", "protected void onUpdateComplete(int token, Object cookie, int result)", "protected void onDeleteComplete(int token, Object cookie, int result)", "public void handleMessage(Message msg)" ],
  "variableNames" : [ "TAG", "localLOGV", "EVENT_ARG_QUERY", "EVENT_ARG_INSERT", "EVENT_ARG_UPDATE", "EVENT_ARG_DELETE", "mResolver", "sLooper", "mWorkerThreadHandler" ]
}