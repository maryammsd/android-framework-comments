{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/Configuration.java",
  "packageName" : "android.content.res",
  "className" : "Configuration",
  "comment" : "\n * This class describes all device configuration information that can\n * impact the resources the application retrieves.  This includes both\n * user-specified configuration options (locale list and scaling) as well\n * as device configurations (such as input modes, screen size and screen orientation).\n * <p>You can acquire this object from {@link Resources}, using {@link\n * Resources#getConfiguration}. Thus, from an activity, you can get it by chaining the request\n * with {@link android.app.Activity#getResources}:</p>\n * <pre>Configuration config = getResources().getConfiguration();</pre>\n ",
  "links" : [ "android.app.Activity#getResources", "android.content.res.Resources#getConfiguration", "android.content.res.Resources" ],
  "variables" : [ {
    "name" : "EMPTY",
    "type" : "Configuration",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fontScale",
    "type" : "float",
    "comment" : "\n     * Current user preference for the scaling factor for fonts, relative\n     * to the base density scaling.\n     *\n     * <p>Note: Please do not use this to hardcode font size equations. The equation for font\n     * scaling is now non-linear; this coefficient is no longer used as a direct multiplier to\n     * determine font size. It exists for informational purposes only.\n     *\n     * <p>Please use {@link android.util.TypedValue#applyDimension(int, float, DisplayMetrics)} or\n     * {@link android.util.TypedValue#deriveDimension(int, float, DisplayMetrics)} to convert\n     * between scaled font size dimensions and pixels.\n     ",
    "links" : [ "android.util.TypedValue#applyDimension(int", "android.util.TypedValue#deriveDimension(int" ]
  }, {
    "name" : "mcc",
    "type" : "int",
    "comment" : "\n     * IMSI MCC (Mobile Country Code), corresponding to\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#MccQualifier\">mcc</a>\n     * resource qualifier.  0 if undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "mnc",
    "type" : "int",
    "comment" : "\n     * IMSI MNC (Mobile Network Code), corresponding to\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#MccQualifier\">mnc</a>\n     * resource qualifier.  0 if undefined. Note that the actual MNC may be 0; in order to check\n     * for this use the {@link #MNC_ZERO} symbol.\n     ",
    "links" : [ "#MNC_ZERO" ]
  }, {
    "name" : "MNC_ZERO",
    "type" : "int",
    "comment" : "\n     * Constant used to to represent MNC (Mobile Network Code) zero.\n     * 0 cannot be used, since it is used to represent an undefined MNC.\n     ",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "\n     * Current user preference for the locale, corresponding to\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#LocaleQualifier\">locale</a>\n     * resource qualifier.\n     *\n     * @deprecated Do not set or read this directly. Use {@link #getLocales()} and\n     * {@link #setLocales(LocaleList)}. If only the primary locale is needed,\n     * <code>getLocales().get(0)</code> is now the preferred accessor.\n     ",
    "links" : [ "#setLocales(LocaleList)", "#getLocales()" ]
  }, {
    "name" : "mLocaleList",
    "type" : "LocaleList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "userSetLocale",
    "type" : "boolean",
    "comment" : "\n     * Locale should persist on setting.  This is hidden because it is really\n     * questionable whether this is the right way to expose the functionality.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mGrammaticalGender",
    "type" : "int",
    "comment" : "\n     * Current user preference for the grammatical gender.\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAMMATICAL_GENDER_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Constant for grammatical gender: to indicate that the grammatical gender is undefined.\n     * Only for internal usage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAMMATICAL_GENDER_NOT_SPECIFIED",
    "type" : "int",
    "comment" : "\n     * Constant for grammatical gender: to indicate the user has not specified the terms\n     * of address for the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAMMATICAL_GENDER_NEUTRAL",
    "type" : "int",
    "comment" : "\n     * Constant for grammatical gender: to indicate the terms of address the user\n     * preferred in an application is neuter.\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAMMATICAL_GENDER_FEMININE",
    "type" : "int",
    "comment" : "\n     * Constant for grammatical gender: to indicate the terms of address the user\n         * preferred in an application is feminine.\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAMMATICAL_GENDER_MASCULINE",
    "type" : "int",
    "comment" : "\n     * Constant for grammatical gender: to indicate the terms of address the user\n     * preferred in an application is masculine.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_WIDE_COLOR_GAMUT_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #colorMode}: bits that encode whether the screen is wide gamut. ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #colorMode}: a {@link #COLOR_MODE_WIDE_COLOR_GAMUT_MASK} value\n     * indicating that it is unknown whether or not the screen is wide gamut.\n     ",
    "links" : [ "#COLOR_MODE_WIDE_COLOR_GAMUT_MASK", "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_WIDE_COLOR_GAMUT_NO",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #colorMode}: a {@link #COLOR_MODE_WIDE_COLOR_GAMUT_MASK} value\n     * indicating that the screen is not wide gamut.\n     * <p>Corresponds to the <code>-nowidecg</code> resource qualifier.</p>\n     ",
    "links" : [ "#COLOR_MODE_WIDE_COLOR_GAMUT_MASK", "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_WIDE_COLOR_GAMUT_YES",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #colorMode}: a {@link #COLOR_MODE_WIDE_COLOR_GAMUT_MASK} value\n     * indicating that the screen is wide gamut.\n     * <p>Corresponds to the <code>-widecg</code> resource qualifier.</p>\n     ",
    "links" : [ "#COLOR_MODE_WIDE_COLOR_GAMUT_MASK", "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_HDR_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #colorMode}: bits that encode the dynamic range of the screen. ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_HDR_SHIFT",
    "type" : "int",
    "comment" : " Constant for {@link #colorMode}: bits shift to get the screen dynamic range. ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_HDR_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #colorMode}: a {@link #COLOR_MODE_HDR_MASK} value\n     * indicating that it is unknown whether or not the screen is HDR.\n     ",
    "links" : [ "#COLOR_MODE_HDR_MASK", "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_HDR_NO",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #colorMode}: a {@link #COLOR_MODE_HDR_MASK} value\n     * indicating that the screen is not HDR (low/standard dynamic range).\n     * <p>Corresponds to the <code>-lowdr</code> resource qualifier.</p>\n     ",
    "links" : [ "#COLOR_MODE_HDR_MASK", "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_HDR_YES",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #colorMode}: a {@link #COLOR_MODE_HDR_MASK} value\n     * indicating that the screen is HDR (dynamic range).\n     * <p>Corresponds to the <code>-highdr</code> resource qualifier.</p>\n     ",
    "links" : [ "#COLOR_MODE_HDR_MASK", "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #colorMode}: a value indicating that the color mode is undefined ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "colorMode",
    "type" : "int",
    "comment" : "\n     * Bit mask of color capabilities of the screen. Currently there are two fields:\n     * <p>The {@link #COLOR_MODE_WIDE_COLOR_GAMUT_MASK} bits define the color gamut of\n     * the screen. They may be one of\n     * {@link #COLOR_MODE_WIDE_COLOR_GAMUT_NO} or {@link #COLOR_MODE_WIDE_COLOR_GAMUT_YES}.</p>\n     *\n     * <p>The {@link #COLOR_MODE_HDR_MASK} defines the dynamic range of the screen. They may be\n     * one of {@link #COLOR_MODE_HDR_NO} or {@link #COLOR_MODE_HDR_YES}.</p>\n     *\n     * <p>See <a href=\"{@docRoot}guide/practices/screens_support.html\">Supporting\n     * Multiple Screens</a> for more information.</p>\n     ",
    "links" : [ "#COLOR_MODE_HDR_NO", "#COLOR_MODE_WIDE_COLOR_GAMUT_MASK", "#COLOR_MODE_HDR_YES", "#COLOR_MODE_HDR_MASK", "#COLOR_MODE_WIDE_COLOR_GAMUT_YES", "#COLOR_MODE_WIDE_COLOR_GAMUT_NO" ]
  }, {
    "name" : "SCREENLAYOUT_SIZE_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: bits that encode the size. ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_SIZE_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_SIZE_MASK}\n     * value indicating that no size has been set. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_SIZE_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_SIZE_SMALL",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_SIZE_MASK}\n     * value indicating the screen is at least approximately 320x426 dp units,\n     * corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ScreenSizeQualifier\">small</a>\n     * resource qualifier.\n     * See <a href=\"{@docRoot}guide/practices/screens_support.html\">Supporting\n     * Multiple Screens</a> for more information. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_SIZE_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_SIZE_NORMAL",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_SIZE_MASK}\n     * value indicating the screen is at least approximately 320x470 dp units,\n     * corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ScreenSizeQualifier\">normal</a>\n     * resource qualifier.\n     * See <a href=\"{@docRoot}guide/practices/screens_support.html\">Supporting\n     * Multiple Screens</a> for more information. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_SIZE_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_SIZE_LARGE",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_SIZE_MASK}\n     * value indicating the screen is at least approximately 480x640 dp units,\n     * corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ScreenSizeQualifier\">large</a>\n     * resource qualifier.\n     * See <a href=\"{@docRoot}guide/practices/screens_support.html\">Supporting\n     * Multiple Screens</a> for more information. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_SIZE_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_SIZE_XLARGE",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_SIZE_MASK}\n     * value indicating the screen is at least approximately 720x960 dp units,\n     * corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ScreenSizeQualifier\">xlarge</a>\n     * resource qualifier.\n     * See <a href=\"{@docRoot}guide/practices/screens_support.html\">Supporting\n     * Multiple Screens</a> for more information.",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_SIZE_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_LONG_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: bits that encode the aspect ratio. ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_LONG_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_LONG_MASK}\n     * value indicating that no size has been set. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_LONG_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_LONG_NO",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_LONG_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ScreenAspectQualifier\">notlong</a>\n     * resource qualifier. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_LONG_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_LONG_YES",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_LONG_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ScreenAspectQualifier\">long</a>\n     * resource qualifier. ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_LONG_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_LAYOUTDIR_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: bits that encode the layout direction. ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_LAYOUTDIR_SHIFT",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: bits shift to get the layout direction. ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_LAYOUTDIR_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_LAYOUTDIR_MASK}\n     * value indicating that no layout dir has been set. ",
    "links" : [ "#SCREENLAYOUT_LAYOUTDIR_MASK", "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_LAYOUTDIR_LTR",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_LAYOUTDIR_MASK}\n     * value indicating that a layout dir has been set to LTR. ",
    "links" : [ "#SCREENLAYOUT_LAYOUTDIR_MASK", "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_LAYOUTDIR_RTL",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_LAYOUTDIR_MASK}\n     * value indicating that a layout dir has been set to RTL. ",
    "links" : [ "#SCREENLAYOUT_LAYOUTDIR_MASK", "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_ROUND_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: bits that encode roundness of the screen. ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_ROUND_SHIFT",
    "type" : "int",
    "comment" : " @hide Constant for {@link #screenLayout}: bit shift to get to screen roundness bits ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_ROUND_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_ROUND_MASK} value indicating\n     * that it is unknown whether or not the screen has a round shape.\n     ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_ROUND_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_ROUND_NO",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_ROUND_MASK} value indicating\n     * that the screen does not have a rounded shape.\n     ",
    "links" : [ "#screenLayout", "#SCREENLAYOUT_ROUND_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_ROUND_YES",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #screenLayout}: a {@link #SCREENLAYOUT_ROUND_MASK} value indicating\n     * that the screen has a rounded shape. Corners may not be visible to the user;\n     * developers should pay special attention to the {@link android.view.WindowInsets} delivered\n     * to views for more information about ensuring content is not obscured.\n     *\n     * <p>Corresponds to the <code>-round</code> resource qualifier.</p>\n     ",
    "links" : [ "android.view.WindowInsets", "#screenLayout", "#SCREENLAYOUT_ROUND_MASK" ]
  }, {
    "name" : "SCREENLAYOUT_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #screenLayout}: a value indicating that screenLayout is undefined ",
    "links" : [ "#screenLayout" ]
  }, {
    "name" : "SCREENLAYOUT_COMPAT_NEEDED",
    "type" : "int",
    "comment" : "\n     * Special flag we generate to indicate that the screen layout requires\n     * us to use a compatibility mode for apps that are not modern layout\n     * aware.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "screenLayout",
    "type" : "int",
    "comment" : "\n     * Bit mask of overall layout of the screen.  Currently there are four\n     * fields:\n     * <p>The {@link #SCREENLAYOUT_SIZE_MASK} bits define the overall size\n     * of the screen.  They may be one of\n     * {@link #SCREENLAYOUT_SIZE_SMALL}, {@link #SCREENLAYOUT_SIZE_NORMAL},\n     * {@link #SCREENLAYOUT_SIZE_LARGE}, or {@link #SCREENLAYOUT_SIZE_XLARGE}.</p>\n     *\n     * <p>The {@link #SCREENLAYOUT_LONG_MASK} defines whether the screen\n     * is wider/taller than normal.  They may be one of\n     * {@link #SCREENLAYOUT_LONG_NO} or {@link #SCREENLAYOUT_LONG_YES}.</p>\n     *\n     * <p>The {@link #SCREENLAYOUT_LAYOUTDIR_MASK} defines whether the screen layout\n     * is either LTR or RTL.  They may be one of\n     * {@link #SCREENLAYOUT_LAYOUTDIR_LTR} or {@link #SCREENLAYOUT_LAYOUTDIR_RTL}.</p>\n     *\n     * <p>The {@link #SCREENLAYOUT_ROUND_MASK} defines whether the screen has a rounded\n     * shape. They may be one of {@link #SCREENLAYOUT_ROUND_NO} or {@link #SCREENLAYOUT_ROUND_YES}.\n     * </p>\n     *\n     * <p>See <a href=\"{@docRoot}guide/practices/screens_support.html\">Supporting\n     * Multiple Screens</a> for more information.</p>\n     ",
    "links" : [ "#SCREENLAYOUT_SIZE_XLARGE", "#SCREENLAYOUT_SIZE_NORMAL", "#SCREENLAYOUT_ROUND_YES", "#SCREENLAYOUT_ROUND_NO", "#SCREENLAYOUT_LONG_NO", "#SCREENLAYOUT_SIZE_MASK", "#SCREENLAYOUT_SIZE_SMALL", "#SCREENLAYOUT_SIZE_LARGE", "#SCREENLAYOUT_LAYOUTDIR_MASK", "#SCREENLAYOUT_LONG_YES", "#SCREENLAYOUT_LAYOUTDIR_LTR", "#SCREENLAYOUT_LAYOUTDIR_RTL", "#SCREENLAYOUT_LONG_MASK", "#SCREENLAYOUT_ROUND_MASK" ]
  }, {
    "name" : "FONT_WEIGHT_ADJUSTMENT_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * An undefined fontWeightAdjustment.\n     ",
    "links" : [ ]
  }, {
    "name" : "fontWeightAdjustment",
    "type" : "int",
    "comment" : "\n     * Adjustment in text font weight. Used to reflect the current user preference for increasing\n     * font weight.\n     *\n     * <p> If the text font weight is less than the minimum of 1, 1 will be used. If the font weight\n     * exceeds the maximum of 1000, 1000 will be used.\n     *\n     * @see android.graphics.Typeface#create(Typeface, int, boolean)\n     * @see android.graphics.fonts.FontStyle#FONT_WEIGHT_MIN\n     * @see android.graphics.fonts.FontStyle#FONT_WEIGHT_MAX\n     ",
    "links" : [ ]
  }, {
    "name" : "windowConfiguration",
    "type" : "WindowConfiguration",
    "comment" : "\n     * Configuration relating to the windowing state of the object associated with this\n     * Configuration. Contents of this field are not intended to affect resources, but need to be\n     * communicated and propagated at the same time as the rest of Configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TOUCHSCREEN_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #touchscreen}: a value indicating that no value has been set. ",
    "links" : [ "#touchscreen" ]
  }, {
    "name" : "TOUCHSCREEN_NOTOUCH",
    "type" : "int",
    "comment" : " Constant for {@link #touchscreen}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#TouchscreenQualifier\">notouch</a>\n     * resource qualifier. ",
    "links" : [ "#touchscreen" ]
  }, {
    "name" : "TOUCHSCREEN_STYLUS",
    "type" : "int",
    "comment" : " @deprecated Not currently supported or used. ",
    "links" : [ ]
  }, {
    "name" : "TOUCHSCREEN_FINGER",
    "type" : "int",
    "comment" : " Constant for {@link #touchscreen}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#TouchscreenQualifier\">finger</a>\n     * resource qualifier. ",
    "links" : [ "#touchscreen" ]
  }, {
    "name" : "touchscreen",
    "type" : "int",
    "comment" : "\n     * The kind of touch screen attached to the device.\n     * One of: {@link #TOUCHSCREEN_NOTOUCH}, {@link #TOUCHSCREEN_FINGER}.\n     ",
    "links" : [ "#TOUCHSCREEN_FINGER", "#TOUCHSCREEN_NOTOUCH" ]
  }, {
    "name" : "KEYBOARD_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #keyboard}: a value indicating that no value has been set. ",
    "links" : [ "#keyboard" ]
  }, {
    "name" : "KEYBOARD_NOKEYS",
    "type" : "int",
    "comment" : " Constant for {@link #keyboard}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ImeQualifier\">nokeys</a>\n     * resource qualifier. ",
    "links" : [ "#keyboard" ]
  }, {
    "name" : "KEYBOARD_QWERTY",
    "type" : "int",
    "comment" : " Constant for {@link #keyboard}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ImeQualifier\">qwerty</a>\n     * resource qualifier. ",
    "links" : [ "#keyboard" ]
  }, {
    "name" : "KEYBOARD_12KEY",
    "type" : "int",
    "comment" : " Constant for {@link #keyboard}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#ImeQualifier\">12key</a>\n     * resource qualifier. ",
    "links" : [ "#keyboard" ]
  }, {
    "name" : "keyboard",
    "type" : "int",
    "comment" : "\n     * The kind of keyboard attached to the device.\n     * One of: {@link #KEYBOARD_NOKEYS}, {@link #KEYBOARD_QWERTY},\n     * {@link #KEYBOARD_12KEY}.\n     ",
    "links" : [ "#KEYBOARD_12KEY", "#KEYBOARD_NOKEYS", "#KEYBOARD_QWERTY" ]
  }, {
    "name" : "KEYBOARDHIDDEN_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #keyboardHidden}: a value indicating that no value has been set. ",
    "links" : [ "#keyboardHidden" ]
  }, {
    "name" : "KEYBOARDHIDDEN_NO",
    "type" : "int",
    "comment" : " Constant for {@link #keyboardHidden}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#KeyboardAvailQualifier\">keysexposed</a>\n     * resource qualifier. ",
    "links" : [ "#keyboardHidden" ]
  }, {
    "name" : "KEYBOARDHIDDEN_YES",
    "type" : "int",
    "comment" : " Constant for {@link #keyboardHidden}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#KeyboardAvailQualifier\">keyshidden</a>\n     * resource qualifier. ",
    "links" : [ "#keyboardHidden" ]
  }, {
    "name" : "KEYBOARDHIDDEN_SOFT",
    "type" : "int",
    "comment" : " Constant matching actual resource implementation. {@hide} ",
    "links" : [ ]
  }, {
    "name" : "keyboardHidden",
    "type" : "int",
    "comment" : "\n     * A flag indicating whether any keyboard is available.  Unlike\n     * {@link #hardKeyboardHidden}, this also takes into account a soft\n     * keyboard, so if the hard keyboard is hidden but there is soft\n     * keyboard available, it will be set to NO.  Value is one of:\n     * {@link #KEYBOARDHIDDEN_NO}, {@link #KEYBOARDHIDDEN_YES}.\n     ",
    "links" : [ "#KEYBOARDHIDDEN_YES", "#hardKeyboardHidden", "#KEYBOARDHIDDEN_NO" ]
  }, {
    "name" : "HARDKEYBOARDHIDDEN_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #hardKeyboardHidden}: a value indicating that no value has been set. ",
    "links" : [ "#hardKeyboardHidden" ]
  }, {
    "name" : "HARDKEYBOARDHIDDEN_NO",
    "type" : "int",
    "comment" : " Constant for {@link #hardKeyboardHidden}, value corresponding to the\n     * physical keyboard being exposed. ",
    "links" : [ "#hardKeyboardHidden" ]
  }, {
    "name" : "HARDKEYBOARDHIDDEN_YES",
    "type" : "int",
    "comment" : " Constant for {@link #hardKeyboardHidden}, value corresponding to the\n     * physical keyboard being hidden. ",
    "links" : [ "#hardKeyboardHidden" ]
  }, {
    "name" : "hardKeyboardHidden",
    "type" : "int",
    "comment" : "\n     * A flag indicating whether the hard keyboard has been hidden.  This will\n     * be set on a device with a mechanism to hide the keyboard from the\n     * user, when that mechanism is closed.  One of:\n     * {@link #HARDKEYBOARDHIDDEN_NO}, {@link #HARDKEYBOARDHIDDEN_YES}.\n     ",
    "links" : [ "#HARDKEYBOARDHIDDEN_YES", "#HARDKEYBOARDHIDDEN_NO" ]
  }, {
    "name" : "NAVIGATION_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #navigation}: a value indicating that no value has been set. ",
    "links" : [ "#navigation" ]
  }, {
    "name" : "NAVIGATION_NONAV",
    "type" : "int",
    "comment" : " Constant for {@link #navigation}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NavigationQualifier\">nonav</a>\n     * resource qualifier. ",
    "links" : [ "#navigation" ]
  }, {
    "name" : "NAVIGATION_DPAD",
    "type" : "int",
    "comment" : " Constant for {@link #navigation}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NavigationQualifier\">dpad</a>\n     * resource qualifier. ",
    "links" : [ "#navigation" ]
  }, {
    "name" : "NAVIGATION_TRACKBALL",
    "type" : "int",
    "comment" : " Constant for {@link #navigation}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NavigationQualifier\">trackball</a>\n     * resource qualifier. ",
    "links" : [ "#navigation" ]
  }, {
    "name" : "NAVIGATION_WHEEL",
    "type" : "int",
    "comment" : " Constant for {@link #navigation}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NavigationQualifier\">wheel</a>\n     * resource qualifier. ",
    "links" : [ "#navigation" ]
  }, {
    "name" : "navigation",
    "type" : "int",
    "comment" : "\n     * The kind of navigation method available on the device.\n     * One of: {@link #NAVIGATION_NONAV}, {@link #NAVIGATION_DPAD},\n     * {@link #NAVIGATION_TRACKBALL}, {@link #NAVIGATION_WHEEL}.\n     ",
    "links" : [ "#NAVIGATION_DPAD", "#NAVIGATION_NONAV", "#NAVIGATION_TRACKBALL", "#NAVIGATION_WHEEL" ]
  }, {
    "name" : "NAVIGATIONHIDDEN_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #navigationHidden}: a value indicating that no value has been set. ",
    "links" : [ "#navigationHidden" ]
  }, {
    "name" : "NAVIGATIONHIDDEN_NO",
    "type" : "int",
    "comment" : " Constant for {@link #navigationHidden}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NavAvailQualifier\">navexposed</a>\n     * resource qualifier. ",
    "links" : [ "#navigationHidden" ]
  }, {
    "name" : "NAVIGATIONHIDDEN_YES",
    "type" : "int",
    "comment" : " Constant for {@link #navigationHidden}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NavAvailQualifier\">navhidden</a>\n     * resource qualifier. ",
    "links" : [ "#navigationHidden" ]
  }, {
    "name" : "navigationHidden",
    "type" : "int",
    "comment" : "\n     * A flag indicating whether any 5-way or DPAD navigation available.\n     * This will be set on a device with a mechanism to hide the navigation\n     * controls from the user, when that mechanism is closed.  One of:\n     * {@link #NAVIGATIONHIDDEN_NO}, {@link #NAVIGATIONHIDDEN_YES}.\n     ",
    "links" : [ "#NAVIGATIONHIDDEN_NO", "#NAVIGATIONHIDDEN_YES" ]
  }, {
    "name" : "ORIENTATION_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #orientation}: a value indicating that no value has been set. ",
    "links" : [ "#orientation" ]
  }, {
    "name" : "ORIENTATION_PORTRAIT",
    "type" : "int",
    "comment" : " Constant for {@link #orientation}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#OrientationQualifier\">port</a>\n     * resource qualifier. ",
    "links" : [ "#orientation" ]
  }, {
    "name" : "ORIENTATION_LANDSCAPE",
    "type" : "int",
    "comment" : " Constant for {@link #orientation}, value corresponding to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#OrientationQualifier\">land</a>\n     * resource qualifier. ",
    "links" : [ "#orientation" ]
  }, {
    "name" : "ORIENTATION_SQUARE",
    "type" : "int",
    "comment" : " @deprecated Not currently supported or used. ",
    "links" : [ ]
  }, {
    "name" : "orientation",
    "type" : "int",
    "comment" : "\n     * Overall orientation of the screen.  May be one of\n     * {@link #ORIENTATION_LANDSCAPE}, {@link #ORIENTATION_PORTRAIT}.\n     ",
    "links" : [ "#ORIENTATION_PORTRAIT", "#ORIENTATION_LANDSCAPE" ]
  }, {
    "name" : "UI_MODE_TYPE_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: bits that encode the mode type. ",
    "links" : [ "#uiMode" ]
  }, {
    "name" : "UI_MODE_TYPE_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value indicating that no mode type has been set. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_NORMAL",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">no\n     * UI mode</a> resource qualifier specified. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_DESK",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">desk</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_CAR",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">car</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_TELEVISION",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">television</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_APPLIANCE",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">appliance</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_WATCH",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">watch</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_TYPE_VR_HEADSET",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_TYPE_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#UiModeQualifier\">vrheadset</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_TYPE_MASK" ]
  }, {
    "name" : "UI_MODE_NIGHT_MASK",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: bits that encode the night mode. ",
    "links" : [ "#uiMode" ]
  }, {
    "name" : "UI_MODE_NIGHT_UNDEFINED",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_NIGHT_MASK}\n     * value indicating that no mode type has been set. ",
    "links" : [ "#uiMode", "#UI_MODE_NIGHT_MASK" ]
  }, {
    "name" : "UI_MODE_NIGHT_NO",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_NIGHT_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NightQualifier\">notnight</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_NIGHT_MASK" ]
  }, {
    "name" : "UI_MODE_NIGHT_YES",
    "type" : "int",
    "comment" : " Constant for {@link #uiMode}: a {@link #UI_MODE_NIGHT_MASK}\n     * value that corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#NightQualifier\">night</a>\n     * resource qualifier. ",
    "links" : [ "#uiMode", "#UI_MODE_NIGHT_MASK" ]
  }, {
    "name" : "uiMode",
    "type" : "int",
    "comment" : "\n     * Bit mask of the ui mode.  Currently there are two fields:\n     * <p>The {@link #UI_MODE_TYPE_MASK} bits define the overall ui mode of the\n     * device. They may be one of {@link #UI_MODE_TYPE_UNDEFINED},\n     * {@link #UI_MODE_TYPE_NORMAL}, {@link #UI_MODE_TYPE_DESK},\n     * {@link #UI_MODE_TYPE_CAR}, {@link #UI_MODE_TYPE_TELEVISION},\n     * {@link #UI_MODE_TYPE_APPLIANCE}, {@link #UI_MODE_TYPE_WATCH},\n     * or {@link #UI_MODE_TYPE_VR_HEADSET}.\n     *\n     * <p>The {@link #UI_MODE_NIGHT_MASK} defines whether the screen\n     * is in a special mode. They may be one of {@link #UI_MODE_NIGHT_UNDEFINED},\n     * {@link #UI_MODE_NIGHT_NO} or {@link #UI_MODE_NIGHT_YES}.\n     ",
    "links" : [ "#UI_MODE_TYPE_APPLIANCE", "#UI_MODE_TYPE_WATCH", "#UI_MODE_NIGHT_YES", "#UI_MODE_NIGHT_NO", "#UI_MODE_TYPE_TELEVISION", "#UI_MODE_TYPE_UNDEFINED", "#UI_MODE_TYPE_DESK", "#UI_MODE_TYPE_VR_HEADSET", "#UI_MODE_TYPE_CAR", "#UI_MODE_TYPE_NORMAL", "#UI_MODE_NIGHT_UNDEFINED", "#UI_MODE_TYPE_MASK", "#UI_MODE_NIGHT_MASK" ]
  }, {
    "name" : "SCREEN_WIDTH_DP_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Default value for {@link #screenWidthDp} indicating that no width\n     * has been specified.\n     ",
    "links" : [ "#screenWidthDp" ]
  }, {
    "name" : "screenWidthDp",
    "type" : "int",
    "comment" : "\n     * The width of the available screen space in dp units.\n     *\n     * <aside class=\"note\"><b>Note:</b> If the app targets\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}\n     * or after, The width measurement reflects the window size without excluding insets.\n     * Otherwise, the measurement excludes window insets even when the app is displayed edge to edge\n     * using {@link android.view.Window#setDecorFitsSystemWindows(boolean)\n     * Window#setDecorFitsSystemWindows(boolean)}.</aside>\n     *\n     * Use {@link android.view.WindowMetrics#getBounds()} to always obtain the horizontal\n     * display area available to an app or embedded activity including the area\n     * occupied by window insets. A version of the API is also available for use on older platforms\n     * through {@link androidx.window.layout.WindowMetrics}.\n     *\n     * <p>Corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#AvailableWidthHeightQualifier\">\n     * available width</a> resource qualifier. Defaults to\n     * {@link #SCREEN_WIDTH_DP_UNDEFINED} if no width is specified.\n     *\n     * <p>In multi-window mode, equals the width of the available display area\n     * of the app window, not the available display area of the device screen\n     * (for example, when apps are displayed side by side in split-screen mode\n     * in landscape orientation).\n     *\n     * <p>For embedded activities, equals the width of the individual\n     * activities, not the width of the app window or the device screen.\n     *\n     * <p>In multiple-screen scenarios, the width measurement can span screens.\n     * For example, if the app is spanning both screens of a dual-screen device\n     * (with the screens side by side), {@code screenWidthDp} represents the\n     * width of both screens excluding the area occupied by window insets. When\n     * the app is restricted to a single screen in a multiple-screen\n     * environment, {@code screenWidthDp} is the width of the screen on which\n     * the app is displayed excluding window insets.\n     *\n     * <p>If the app targets {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM} or after,\n     * it is the same as {@link android.view.WindowMetrics}, but is expressed rounded to the nearest\n     * dp rather than px.\n     *\n     * <p>Otherwise, differs from {@link android.view.WindowMetrics} by not including\n     * window insets in the width measurement and by expressing the measurement\n     * in dp rather than px. Use {@code screenWidthDp} to obtain the width of\n     * the display area available to an app or embedded activity excluding the\n     * area occupied by window insets.\n     ",
    "links" : [ "android.view.WindowMetrics", "android.view.WindowMetrics#getBounds()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "#SCREEN_WIDTH_DP_UNDEFINED", "android.view.Window#setDecorFitsSystemWindows(boolean)", "androidx.window.layout.WindowMetrics" ]
  }, {
    "name" : "SCREEN_HEIGHT_DP_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Default value for {@link #screenHeightDp} indicating that no width\n     * has been specified.\n     ",
    "links" : [ "#screenHeightDp" ]
  }, {
    "name" : "screenHeightDp",
    "type" : "int",
    "comment" : "\n     * The height of the available screen space in dp units.\n     *\n     * <aside class=\"note\"><b>Note:</b> If the app targets\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}\n     * or after, the height measurement reflects the window size without excluding insets.\n     * Otherwise, the measurement excludes window insets even when the app is displayed edge to edge\n     * using {@link android.view.Window#setDecorFitsSystemWindows(boolean)\n     * Window#setDecorFitsSystemWindows(boolean)}.</aside>\n     *\n     * Use {@link android.view.WindowMetrics#getBounds()} to always obtain the vertical\n     * display area available to an app or embedded activity including the area\n     * occupied by window insets. A version of the API is also available for use on older platforms\n     * through {@link androidx.window.layout.WindowMetrics}.\n     *\n     * <p>Corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#AvailableWidthHeightQualifier\">\n     * available height</a> resource qualifier. Defaults to\n     * {@link #SCREEN_HEIGHT_DP_UNDEFINED} if no height is specified.\n     *\n     * <p>In multi-window mode, equals the height of the available display area\n     * of the app window, not the available display area of the device screen\n     * (for example, when apps are displayed one above another in split-screen\n     * mode in portrait orientation).\n     *\n     * <p>For embedded activities, equals the height of the individual\n     * activities, not the height of the app window or the device screen.\n     *\n     * <p>In multiple-screen scenarios, the height measurement can span screens.\n     * For example, if the app is spanning both screens of a dual-screen device\n     * rotated 90 degrees (one screen above the other), {@code screenHeightDp}\n     * represents the height of both screens excluding the area occupied by\n     * window insets. When the app is restricted to a single screen in a\n     * multiple-screen environment, {@code screenHeightDp} is the height of the\n     * screen on which the app is displayed excluding window insets.\n     *\n     * <p>If the app targets {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM} or after,\n     * it is the same as {@link android.view.WindowMetrics}, but is expressed rounded to the nearest\n     * dp rather than px.\n     *\n     * <p>Otherwise, differs from {@link android.view.WindowMetrics} by not including\n     * window insets in the height measurement and by expressing the measurement\n     * in dp rather than px. Use {@code screenHeightDp} to obtain the height of\n     * the display area available to an app or embedded activity excluding the\n     * area occupied by window insets.\n     ",
    "links" : [ "android.view.WindowMetrics", "android.view.WindowMetrics#getBounds()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "#SCREEN_HEIGHT_DP_UNDEFINED", "android.view.Window#setDecorFitsSystemWindows(boolean)", "androidx.window.layout.WindowMetrics" ]
  }, {
    "name" : "SMALLEST_SCREEN_WIDTH_DP_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Default value for {@link #smallestScreenWidthDp} indicating that no width\n     * has been specified.\n     ",
    "links" : [ "#smallestScreenWidthDp" ]
  }, {
    "name" : "smallestScreenWidthDp",
    "type" : "int",
    "comment" : "\n     * The smallest screen size an application will see in normal operation.\n     * Corresponds to the\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#SmallestScreenWidthQualifier\">\n     * smallest width</a> resource qualifier. This is the smallest value of\n     * {@link #screenWidthDp} and {@link #screenHeightDp} in both portrait and\n     * landscape orientations. Defaults to\n     * {@link #SMALLEST_SCREEN_WIDTH_DP_UNDEFINED} if no width is specified.\n     ",
    "links" : [ "#screenWidthDp", "#screenHeightDp", "#SMALLEST_SCREEN_WIDTH_DP_UNDEFINED" ]
  }, {
    "name" : "DENSITY_DPI_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Default value for {@link #densityDpi} indicating that no width\n     * has been specified.\n     ",
    "links" : [ "#densityDpi" ]
  }, {
    "name" : "DENSITY_DPI_ANY",
    "type" : "int",
    "comment" : "\n     * Value for {@link #densityDpi} for resources that scale to any density (vector drawables).\n     * {@hide}\n     ",
    "links" : [ "#densityDpi" ]
  }, {
    "name" : "DENSITY_DPI_NONE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #densityDpi} for resources that are not meant to be scaled.\n     * {@hide}\n     ",
    "links" : [ "#densityDpi" ]
  }, {
    "name" : "densityDpi",
    "type" : "int",
    "comment" : "\n     * The target screen density being rendered to,\n     * corresponding to\n     * <a href=\"{@docRoot}guide/topics/resources/providing-resources.html#DensityQualifier\">density</a>\n     * resource qualifier.  Set to\n     * {@link #DENSITY_DPI_UNDEFINED} if no density is specified.\n     ",
    "links" : [ "#DENSITY_DPI_UNDEFINED" ]
  }, {
    "name" : "compatScreenWidthDp",
    "type" : "int",
    "comment" : " @hide Hack to get this information from WM to app running in compat mode. ",
    "links" : [ ]
  }, {
    "name" : "compatScreenHeightDp",
    "type" : "int",
    "comment" : " @hide Hack to get this information from WM to app running in compat mode. ",
    "links" : [ ]
  }, {
    "name" : "compatSmallestScreenWidthDp",
    "type" : "int",
    "comment" : " @hide Hack to get this information from WM to app running in compat mode. ",
    "links" : [ ]
  }, {
    "name" : "ASSETS_SEQ_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * An undefined assetsSeq. This will not override an existing assetsSeq.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "assetsSeq",
    "type" : "int",
    "comment" : "\n     * Internal counter that allows us to piggyback off the configuration change mechanism to\n     * signal to apps that the the assets for an Application have changed. A difference in these\n     * between two Configurations will yield a diff flag of\n     * {@link ActivityInfo#CONFIG_ASSETS_PATHS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo#CONFIG_ASSETS_PATHS" ]
  }, {
    "name" : "seq",
    "type" : "int",
    "comment" : "\n     * @hide Internal book-keeping.\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_MCC",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for MCC config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_MNC",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for MNC config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_LOCALE",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for LOCALE config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_TOUCHSCREEN",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for TOUCHSCREEN config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_KEYBOARD",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for KEYBOARD config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_KEYBOARD_HIDDEN",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for KEYBOARD_HIDDEN config; DO NOT USE UNLESS YOU\n     * ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_NAVIGATION",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for NAVIGATION config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_ORIENTATION",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for ORIENTATION config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_DENSITY",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for DENSITY config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_SCREEN_SIZE",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for SCREEN_SIZE config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_VERSION",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for VERSION config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_SCREEN_LAYOUT",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for SCREEN_LAYOUT config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_UI_MODE",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for UI_MODE config; DO NOT USE UNLESS YOU ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_SMALLEST_SCREEN_SIZE",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for SMALLEST_SCREEN_SIZE config; DO NOT USE UNLESS YOU\n     * ARE SURE. ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_LAYOUTDIR",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for LAYOUTDIR config ; DO NOT USE UNLESS YOU ARE SURE.",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_COLOR_MODE",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for COLOR_MODE config ; DO NOT USE UNLESS YOU ARE SURE.",
    "links" : [ ]
  }, {
    "name" : "NATIVE_CONFIG_GRAMMATICAL_GENDER",
    "type" : "int",
    "comment" : " @hide Native-specific bit mask for GRAMMATICAL_GENDER config; DO NOT USE UNLESS YOU\n     * ARE SURE.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Configuration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_FONT_SCALE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_MCC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_MNC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_LOCALES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_TOUCHSCREEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_KEYBOARD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_KEYBOARD_HIDDEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_HARD_KEYBOARD_HIDDEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_NAVIGATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_NAVIGATION_HIDDEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_ORIENTATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_ROTATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_SCREEN_LAYOUT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_COLOR_MODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_UI_MODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_SCREEN_WIDTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_SCREEN_HEIGHT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_SMALLEST_WIDTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_DENSITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_APP_BOUNDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_FONT_WEIGHT_ADJUSTMENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_GRAMMATICAL_GENDER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int resetScreenLayout(int curLayout)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int reduceScreenLayout(int curLayout, int longSizeDp, int shortSizeDp)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String configurationDiffToString(int diff)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLayoutSizeAtLeast(int size)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the Configuration's current {@link #screenLayout} is at\n     * least the given size.\n     *\n     * @param size The desired size, either {@link #SCREENLAYOUT_SIZE_SMALL},\n     * {@link #SCREENLAYOUT_SIZE_NORMAL}, {@link #SCREENLAYOUT_SIZE_LARGE}, or\n     * {@link #SCREENLAYOUT_SIZE_XLARGE}.\n     * @return Returns true if the current screen layout size is at least\n     * the given size.\n     ",
    "links" : [ "#SCREENLAYOUT_SIZE_SMALL", "#SCREENLAYOUT_SIZE_XLARGE", "#SCREENLAYOUT_SIZE_NORMAL", "#SCREENLAYOUT_SIZE_LARGE", "#screenLayout" ]
  }, {
    "name" : "private void fixUpLocaleList()",
    "returnType" : "void",
    "comment" : " This brings mLocaleList in sync with locale in case a user of the older API who doesn't know\n     * about setLocales() has changed locale directly. ",
    "links" : [ ]
  }, {
    "name" : "public void setTo(Configuration o)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fields in this object to those in the given Configuration.\n     *\n     * @param o The Configuration object used to set the values of this Configuration's fields.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId, boolean persisted, boolean critical)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.content.ConfigurationProto}\n     * Has the option to ignore fields that don't need to be persisted to disk.\n     *\n     * @param protoOutputStream Stream to write the Configuration object to.\n     * @param fieldId           Field Id of the Configuration as defined in the parent message\n     * @param persisted         Note if this proto will be persisted to disk\n     * @param critical          If true, reduce amount of data written.\n     * @hide\n     ",
    "links" : [ "android.content.ConfigurationProto" ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.content.ConfigurationProto}\n     *\n     * @param protoOutputStream Stream to write the Configuration object to.\n     * @param fieldId           Field Id of the Configuration as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.content.ConfigurationProto" ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId, boolean critical)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.content.ConfigurationProto}\n     *\n     * @param protoOutputStream Stream to write the Configuration object to.\n     * @param fieldId           Field Id of the Configuration as defined in the parent message\n     * @param critical          If true, reduce amount of data written.\n     * @hide\n     ",
    "links" : [ "android.content.ConfigurationProto" ]
  }, {
    "name" : "public void readFromProto(ProtoInputStream protoInputStream, long fieldId) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Read from a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.content.ConfigurationProto}\n     *\n     * @param protoInputStream Stream to read the Configuration object from.\n     * @param fieldId          Field Id of the Configuration as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.content.ConfigurationProto" ]
  }, {
    "name" : "public void writeResConfigToProto(ProtoOutputStream protoOutputStream, long fieldId, DisplayMetrics metrics)",
    "returnType" : "void",
    "comment" : "\n     * Write full {@link android.content.ResourcesConfigurationProto} to protocol buffer output\n     * stream.\n     *\n     * @param protoOutputStream Stream to write the Configuration object to.\n     * @param fieldId           Field Id of the Configuration as defined in the parent message\n     * @param metrics           Current display information\n     * @hide\n     ",
    "links" : [ "android.content.ResourcesConfigurationProto" ]
  }, {
    "name" : "public static String uiModeToString(int uiMode)",
    "returnType" : "String",
    "comment" : "\n     * Convert the UI mode to a human readable format.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToDefaults()",
    "returnType" : "void",
    "comment" : "\n     * Set this object to the system defaults.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unset()",
    "returnType" : "void",
    "comment" : "\n     * Set this object to completely undefined.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeDefault()",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int updateFrom(@NonNull Configuration delta)",
    "returnType" : "int",
    "comment" : "\n     * Copies the fields from delta into this Configuration object, keeping\n     * track of which ones have changed. Any undefined fields in {@code delta}\n     * are ignored and not copied in to the current Configuration.\n     *\n     * @return a bit mask of the changed fields, as per {@link #diff}\n     ",
    "links" : [ "#diff" ]
  }, {
    "name" : "public void setTo(@NonNull Configuration delta, @Config int mask, @WindowConfiguration.WindowConfig int windowMask)",
    "returnType" : "void",
    "comment" : "\n     * Copies the fields specified by mask from delta into this Configuration object. This will\n     * copy anything allowed by the mask (including undefined values).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int diff(Configuration delta)",
    "returnType" : "int",
    "comment" : "\n     * Return a bit mask of the differences between this Configuration\n     * object and the given one.  Does not change the values of either.  Any\n     * undefined fields in <var>delta</var> are ignored.\n     * @return Returns a bit mask indicating which configuration\n     * values have changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int diffPublicOnly(Configuration delta)",
    "returnType" : "int",
    "comment" : "\n     * Returns the diff against the provided {@link Configuration} excluding values that would\n     * publicly be equivalent, such as appBounds.\n     * @param delta {@link Configuration} to compare to.\n     *\n     * TODO(b/36812336): Remove once appBounds has been moved out of Configuration.\n     * {@hide}\n     ",
    "links" : [ "android.app.WindowConfiguration" ]
  }, {
    "name" : "public int diff(Configuration delta, boolean compareUndefined, boolean publicOnly)",
    "returnType" : "int",
    "comment" : "\n     * Variation of {@link #diff(Configuration)} with an option to skip checks for undefined values.\n     *\n     * @hide\n     ",
    "links" : [ "#diff(Configuration)" ]
  }, {
    "name" : "public static boolean needNewResources(@Config int configChanges, @Config int interestingChanges)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if a new resource needs to be loaded from the bit set of\n     * configuration changes returned by {@link #updateFrom(Configuration)}.\n     *\n     * @param configChanges the mask of changes configurations as returned by\n     *                      {@link #updateFrom(Configuration)}\n     * @param interestingChanges the configuration changes that the resource\n     *                           can handle as given in\n     *                           {@link android.util.TypedValue#changingConfigurations}\n     * @return {@code true} if the resource needs to be loaded, {@code false}\n     *         otherwise\n     ",
    "links" : [ "#updateFrom(Configuration)", "android.util.TypedValue#changingConfigurations" ]
  }, {
    "name" : "public boolean isOtherSeqNewer(Configuration other)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide Return true if the sequence of 'other' is better than this.  Assumes\n     * that 'this' is your current sequence and 'other' is a new one you have\n     * received some how and want to compare with what you have.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Parcelable methods\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNightModeActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Retuns whether the configuration is in night mode\n     * @return true if night mode is active and false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Configuration that)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Configuration that)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object that)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getGrammaticalGender()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user preference for the grammatical gender. Will be\n     * {@link #GRAMMATICAL_GENDER_NOT_SPECIFIED} or\n     * {@link #GRAMMATICAL_GENDER_NEUTRAL} or\n     * {@link #GRAMMATICAL_GENDER_FEMININE} or\n     * {@link #GRAMMATICAL_GENDER_MASCULINE}.\n     *\n     * @return The preferred grammatical gender.\n     ",
    "links" : [ "#GRAMMATICAL_GENDER_MASCULINE", "#GRAMMATICAL_GENDER_NEUTRAL", "#GRAMMATICAL_GENDER_FEMININE", "#GRAMMATICAL_GENDER_NOT_SPECIFIED" ]
  }, {
    "name" : "public int getGrammaticalGenderRaw()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGrammaticalGender(@GrammaticalGender int grammaticalGender)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user preference for the grammatical gender. This is only for frameworks to easily\n     * override the gender in the configuration. To update the grammatical gender for an application\n     * use {@link GrammaticalInflectionManager#setRequestedApplicationGrammaticalGender(int)}.\n     *\n     * @param grammaticalGender The preferred grammatical gender.\n     * @hide\n     ",
    "links" : [ "android.app.GrammaticalInflectionManager#setRequestedApplicationGrammaticalGender(int)" ]
  }, {
    "name" : "public LocaleList getLocales()",
    "returnType" : "LocaleList",
    "comment" : "\n     * Get the locale list. This is the preferred way for getting the locales (instead of using\n     * the direct accessor to {@link #locale}, which would only provide the primary locale).\n     *\n     * @return The locale list.\n     ",
    "links" : [ "#locale" ]
  }, {
    "name" : "public void setLocales(@Nullable LocaleList locales)",
    "returnType" : "void",
    "comment" : "\n     * Set the locale list. This is the preferred way for setting up the locales (instead of using\n     * the direct accessor or {@link #setLocale(Locale)}). This will also set the layout direction\n     * according to the first locale in the list.\n     *\n     * Note that the layout direction will always come from the first locale in the locale list,\n     * even if the locale is not supported by the resources (the resources may only support\n     * another locale further down the list which has a different direction).\n     *\n     * @param locales The locale list. If null, an empty LocaleList will be assigned.\n     ",
    "links" : [ "#setLocale(Locale)" ]
  }, {
    "name" : "public void setLocale(@Nullable Locale loc)",
    "returnType" : "void",
    "comment" : "\n     * Set the locale list to a list of just one locale. This will also set the layout direction\n     * according to the locale.\n     *\n     * Note that after this is run, calling <code>.equals()</code> on the input locale and the\n     * {@link #locale} attribute would return <code>true</code> if they are not null, but there is\n     * no guarantee that they would be the same object.\n     *\n     * See also the note about layout direction in {@link #setLocales(LocaleList)}.\n     *\n     * @param loc The locale. Can be null.\n     ",
    "links" : [ "#setLocales(LocaleList)", "#locale" ]
  }, {
    "name" : "public void clearLocales()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *\n     * Clears the locale without changing layout direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayoutDirection()",
    "returnType" : "int",
    "comment" : "\n     * Return the layout direction. Will be either {@link View#LAYOUT_DIRECTION_LTR} or\n     * {@link View#LAYOUT_DIRECTION_RTL}.\n     *\n     * @return Returns {@link View#LAYOUT_DIRECTION_RTL} if the configuration\n     * is {@link #SCREENLAYOUT_LAYOUTDIR_RTL}, otherwise {@link View#LAYOUT_DIRECTION_LTR}.\n     ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR", "android.view.View#LAYOUT_DIRECTION_RTL", "#SCREENLAYOUT_LAYOUTDIR_RTL" ]
  }, {
    "name" : "public void setLayoutDirection(Locale loc)",
    "returnType" : "void",
    "comment" : "\n     * Set the layout direction from a Locale.\n     *\n     * @param loc The Locale. If null will set the layout direction to\n     * {@link View#LAYOUT_DIRECTION_LTR}. If not null will set it to the layout direction\n     * corresponding to the Locale.\n     *\n     * @see View#LAYOUT_DIRECTION_LTR\n     * @see View#LAYOUT_DIRECTION_RTL\n     ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR" ]
  }, {
    "name" : "private static int getScreenLayoutNoDirection(int screenLayout)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenRound()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the screen has a round shape. Apps may choose to change styling based\n     * on this property, such as the alignment or layout of text or informational icons.\n     *\n     * @return true if the screen is rounded, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenWideColorGamut()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the screen has a wide color gamut and wide color gamut rendering\n     * is supported by this device.\n     *\n     * When true, it implies the screen is colorspace aware but not\n     * necessarily color-managed. The final colors may still be changed by the\n     * screen depending on user settings.\n     *\n     * @return true if the screen has a wide color gamut and wide color gamut rendering\n     * is supported, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenHdr()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the screen has a high dynamic range.\n     *\n     * @return true if the screen has a high dynamic range, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String localesToResourceQualifier(LocaleList locs)",
    "returnType" : "String",
    "comment" : "\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String resourceQualifierString(Configuration config)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the configuration that can be parsed\n     * by build tools (like AAPT), without display metrics included\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String resourceQualifierString(Configuration config, DisplayMetrics metrics)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the configuration that can be parsed\n     * by build tools (like AAPT).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getUiModeTypeString(int uiModeType)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Configuration generateDelta(@NonNull Configuration base, @NonNull Configuration change)",
    "returnType" : "Configuration",
    "comment" : "\n     * Generate a delta Configuration between <code>base</code> and <code>change</code>. The\n     * resulting delta can be used with {@link #updateFrom(Configuration)}.\n     * <p />\n     * Caveat: If the any of the Configuration's members becomes undefined, then\n     * {@link #updateFrom(Configuration)} will treat it as a no-op and not update that member.\n     *\n     * This is fine for device configurations as no member is ever undefined.\n     ",
    "links" : [ "#updateFrom(Configuration)" ]
  }, {
    "name" : "public static void readXmlAttrs(XmlPullParser parser, Configuration configOut) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads the attributes corresponding to Configuration member fields from the Xml parser.\n     * The parser is expected to be on a tag which has Configuration attributes.\n     *\n     * @param parser The Xml parser from which to read attributes.\n     * @param configOut The Configuration to populate from the Xml attributes.\n     * {@hide}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int resetScreenLayout(int curLayout)", "public static int reduceScreenLayout(int curLayout, int longSizeDp, int shortSizeDp)", "public static String configurationDiffToString(int diff)", "public boolean isLayoutSizeAtLeast(int size)", "private void fixUpLocaleList()", "public void setTo(Configuration o)", "public String toString()", "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId, boolean persisted, boolean critical)", "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId)", "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId, boolean critical)", "public void readFromProto(ProtoInputStream protoInputStream, long fieldId) throws IOException", "public void writeResConfigToProto(ProtoOutputStream protoOutputStream, long fieldId, DisplayMetrics metrics)", "public static String uiModeToString(int uiMode)", "public void setToDefaults()", "public void unset()", "public void makeDefault()", "public int updateFrom(@NonNull Configuration delta)", "public void setTo(@NonNull Configuration delta, @Config int mask, @WindowConfiguration.WindowConfig int windowMask)", "public int diff(Configuration delta)", "public int diffPublicOnly(Configuration delta)", "public int diff(Configuration delta, boolean compareUndefined, boolean publicOnly)", "public static boolean needNewResources(@Config int configChanges, @Config int interestingChanges)", "public boolean isOtherSeqNewer(Configuration other)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void readFromParcel(Parcel source)", "public boolean isNightModeActive()", "public int compareTo(Configuration that)", "public boolean equals(Configuration that)", "public boolean equals(@Nullable Object that)", "public int hashCode()", "public int getGrammaticalGender()", "public int getGrammaticalGenderRaw()", "public void setGrammaticalGender(@GrammaticalGender int grammaticalGender)", "public LocaleList getLocales()", "public void setLocales(@Nullable LocaleList locales)", "public void setLocale(@Nullable Locale loc)", "public void clearLocales()", "public int getLayoutDirection()", "public void setLayoutDirection(Locale loc)", "private static int getScreenLayoutNoDirection(int screenLayout)", "public boolean isScreenRound()", "public boolean isScreenWideColorGamut()", "public boolean isScreenHdr()", "public static String localesToResourceQualifier(LocaleList locs)", "public static String resourceQualifierString(Configuration config)", "public static String resourceQualifierString(Configuration config, DisplayMetrics metrics)", "public static String getUiModeTypeString(int uiModeType)", "public static Configuration generateDelta(@NonNull Configuration base, @NonNull Configuration change)", "public static void readXmlAttrs(XmlPullParser parser, Configuration configOut) throws XmlPullParserException, IOException" ],
  "variableNames" : [ "EMPTY", "TAG", "fontScale", "mcc", "mnc", "MNC_ZERO", "locale", "mLocaleList", "userSetLocale", "mGrammaticalGender", "GRAMMATICAL_GENDER_UNDEFINED", "GRAMMATICAL_GENDER_NOT_SPECIFIED", "GRAMMATICAL_GENDER_NEUTRAL", "GRAMMATICAL_GENDER_FEMININE", "GRAMMATICAL_GENDER_MASCULINE", "COLOR_MODE_WIDE_COLOR_GAMUT_MASK", "COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED", "COLOR_MODE_WIDE_COLOR_GAMUT_NO", "COLOR_MODE_WIDE_COLOR_GAMUT_YES", "COLOR_MODE_HDR_MASK", "COLOR_MODE_HDR_SHIFT", "COLOR_MODE_HDR_UNDEFINED", "COLOR_MODE_HDR_NO", "COLOR_MODE_HDR_YES", "COLOR_MODE_UNDEFINED", "colorMode", "SCREENLAYOUT_SIZE_MASK", "SCREENLAYOUT_SIZE_UNDEFINED", "SCREENLAYOUT_SIZE_SMALL", "SCREENLAYOUT_SIZE_NORMAL", "SCREENLAYOUT_SIZE_LARGE", "SCREENLAYOUT_SIZE_XLARGE", "SCREENLAYOUT_LONG_MASK", "SCREENLAYOUT_LONG_UNDEFINED", "SCREENLAYOUT_LONG_NO", "SCREENLAYOUT_LONG_YES", "SCREENLAYOUT_LAYOUTDIR_MASK", "SCREENLAYOUT_LAYOUTDIR_SHIFT", "SCREENLAYOUT_LAYOUTDIR_UNDEFINED", "SCREENLAYOUT_LAYOUTDIR_LTR", "SCREENLAYOUT_LAYOUTDIR_RTL", "SCREENLAYOUT_ROUND_MASK", "SCREENLAYOUT_ROUND_SHIFT", "SCREENLAYOUT_ROUND_UNDEFINED", "SCREENLAYOUT_ROUND_NO", "SCREENLAYOUT_ROUND_YES", "SCREENLAYOUT_UNDEFINED", "SCREENLAYOUT_COMPAT_NEEDED", "screenLayout", "FONT_WEIGHT_ADJUSTMENT_UNDEFINED", "fontWeightAdjustment", "windowConfiguration", "TOUCHSCREEN_UNDEFINED", "TOUCHSCREEN_NOTOUCH", "TOUCHSCREEN_STYLUS", "TOUCHSCREEN_FINGER", "touchscreen", "KEYBOARD_UNDEFINED", "KEYBOARD_NOKEYS", "KEYBOARD_QWERTY", "KEYBOARD_12KEY", "keyboard", "KEYBOARDHIDDEN_UNDEFINED", "KEYBOARDHIDDEN_NO", "KEYBOARDHIDDEN_YES", "KEYBOARDHIDDEN_SOFT", "keyboardHidden", "HARDKEYBOARDHIDDEN_UNDEFINED", "HARDKEYBOARDHIDDEN_NO", "HARDKEYBOARDHIDDEN_YES", "hardKeyboardHidden", "NAVIGATION_UNDEFINED", "NAVIGATION_NONAV", "NAVIGATION_DPAD", "NAVIGATION_TRACKBALL", "NAVIGATION_WHEEL", "navigation", "NAVIGATIONHIDDEN_UNDEFINED", "NAVIGATIONHIDDEN_NO", "NAVIGATIONHIDDEN_YES", "navigationHidden", "ORIENTATION_UNDEFINED", "ORIENTATION_PORTRAIT", "ORIENTATION_LANDSCAPE", "ORIENTATION_SQUARE", "orientation", "UI_MODE_TYPE_MASK", "UI_MODE_TYPE_UNDEFINED", "UI_MODE_TYPE_NORMAL", "UI_MODE_TYPE_DESK", "UI_MODE_TYPE_CAR", "UI_MODE_TYPE_TELEVISION", "UI_MODE_TYPE_APPLIANCE", "UI_MODE_TYPE_WATCH", "UI_MODE_TYPE_VR_HEADSET", "UI_MODE_NIGHT_MASK", "UI_MODE_NIGHT_UNDEFINED", "UI_MODE_NIGHT_NO", "UI_MODE_NIGHT_YES", "uiMode", "SCREEN_WIDTH_DP_UNDEFINED", "screenWidthDp", "SCREEN_HEIGHT_DP_UNDEFINED", "screenHeightDp", "SMALLEST_SCREEN_WIDTH_DP_UNDEFINED", "smallestScreenWidthDp", "DENSITY_DPI_UNDEFINED", "DENSITY_DPI_ANY", "DENSITY_DPI_NONE", "densityDpi", "compatScreenWidthDp", "compatScreenHeightDp", "compatSmallestScreenWidthDp", "ASSETS_SEQ_UNDEFINED", "assetsSeq", "seq", "NATIVE_CONFIG_MCC", "NATIVE_CONFIG_MNC", "NATIVE_CONFIG_LOCALE", "NATIVE_CONFIG_TOUCHSCREEN", "NATIVE_CONFIG_KEYBOARD", "NATIVE_CONFIG_KEYBOARD_HIDDEN", "NATIVE_CONFIG_NAVIGATION", "NATIVE_CONFIG_ORIENTATION", "NATIVE_CONFIG_DENSITY", "NATIVE_CONFIG_SCREEN_SIZE", "NATIVE_CONFIG_VERSION", "NATIVE_CONFIG_SCREEN_LAYOUT", "NATIVE_CONFIG_UI_MODE", "NATIVE_CONFIG_SMALLEST_SCREEN_SIZE", "NATIVE_CONFIG_LAYOUTDIR", "NATIVE_CONFIG_COLOR_MODE", "NATIVE_CONFIG_GRAMMATICAL_GENDER", "CREATOR", "XML_ATTR_FONT_SCALE", "XML_ATTR_MCC", "XML_ATTR_MNC", "XML_ATTR_LOCALES", "XML_ATTR_TOUCHSCREEN", "XML_ATTR_KEYBOARD", "XML_ATTR_KEYBOARD_HIDDEN", "XML_ATTR_HARD_KEYBOARD_HIDDEN", "XML_ATTR_NAVIGATION", "XML_ATTR_NAVIGATION_HIDDEN", "XML_ATTR_ORIENTATION", "XML_ATTR_ROTATION", "XML_ATTR_SCREEN_LAYOUT", "XML_ATTR_COLOR_MODE", "XML_ATTR_UI_MODE", "XML_ATTR_SCREEN_WIDTH", "XML_ATTR_SCREEN_HEIGHT", "XML_ATTR_SMALLEST_WIDTH", "XML_ATTR_DENSITY", "XML_ATTR_APP_BOUNDS", "XML_ATTR_FONT_WEIGHT_ADJUSTMENT", "XML_ATTR_GRAMMATICAL_GENDER" ]
}