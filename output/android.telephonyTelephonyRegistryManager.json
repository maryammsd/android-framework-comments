{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/TelephonyRegistryManager.java",
  "packageName" : "android.telephony",
  "className" : "TelephonyRegistryManager",
  "comment" : "\n * A centralized place to notify telephony related status changes, e.g, {@link ServiceState} update\n * or {@link PhoneCapability} changed. This might trigger callback from applications side through\n * {@link android.telephony.PhoneStateListener}\n *\n * TODO: limit API access to only carrier apps with certain permissions or apps running on\n * privileged UID.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "ITelephonyRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionChangedListenerMap",
    "type" : "Map<SubscriptionManager.OnSubscriptionsChangedListener, IOnSubscriptionsChangedListener>",
    "comment" : "\n     * A mapping between {@link SubscriptionManager.OnSubscriptionsChangedListener} and\n     * its callback IOnSubscriptionsChangedListener.\n     ",
    "links" : [ "SubscriptionManager.OnSubscriptionsChangedListener" ]
  }, {
    "name" : "mOpportunisticSubscriptionChangedListenerMap",
    "type" : "Map<SubscriptionManager.OnOpportunisticSubscriptionsChangedListener, IOnSubscriptionsChangedListener>",
    "comment" : "\n     * A mapping between {@link SubscriptionManager.OnOpportunisticSubscriptionsChangedListener} and\n     * its callback IOnSubscriptionsChangedListener.\n     ",
    "links" : [ "SubscriptionManager.OnOpportunisticSubscriptionsChangedListener" ]
  }, {
    "name" : "LISTEN_CODE_CHANGE",
    "type" : "long",
    "comment" : "\n     * To check the SDK version for {@link #listenForSubscriber}.\n     ",
    "links" : [ "#listenForSubscriber" ]
  }, {
    "name" : "SIM_ACTIVATION_TYPE_VOICE",
    "type" : "int",
    "comment" : "\n     * Sim activation type: voice\n     * @see #notifyVoiceActivationStateChanged\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SIM_ACTIVATION_TYPE_DATA",
    "type" : "int",
    "comment" : "\n     * Sim activation type: data\n     * @see #notifyDataActivationStateChanged\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addOnSubscriptionsChangedListener(@NonNull SubscriptionManager.OnSubscriptionsChangedListener listener, @NonNull Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Register for changes to the list of active {@link SubscriptionInfo} records or to the\n     * individual records themselves. When a change occurs the onSubscriptionsChanged method of\n     * the listener will be invoked immediately if there has been a notification. The\n     * onSubscriptionChanged method will also be triggered once initially when calling this\n     * function.\n     *\n     * @param listener an instance of {@link SubscriptionManager.OnSubscriptionsChangedListener}\n     *                 with onSubscriptionsChanged overridden.\n     * @param executor the executor that will execute callbacks.\n     ",
    "links" : [ "SubscriptionInfo", "SubscriptionManager.OnSubscriptionsChangedListener" ]
  }, {
    "name" : "public void removeOnSubscriptionsChangedListener(@NonNull SubscriptionManager.OnSubscriptionsChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the {@link SubscriptionManager.OnSubscriptionsChangedListener}. This is not\n     * strictly necessary as the listener will automatically be unregistered if an attempt to\n     * invoke the listener fails.\n     *\n     * @param listener that is to be unregistered.\n     ",
    "links" : [ "SubscriptionManager.OnSubscriptionsChangedListener" ]
  }, {
    "name" : "public void addOnOpportunisticSubscriptionsChangedListener(@NonNull SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener, @NonNull Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Register for changes to the list of opportunistic subscription records or to the\n     * individual records themselves. When a change occurs the onOpportunisticSubscriptionsChanged\n     * method of the listener will be invoked immediately if there has been a notification.\n     *\n     * @param listener an instance of\n     * {@link SubscriptionManager.OnOpportunisticSubscriptionsChangedListener} with\n     *                 onOpportunisticSubscriptionsChanged overridden.\n     * @param executor an Executor that will execute callbacks.\n     ",
    "links" : [ "SubscriptionManager.OnOpportunisticSubscriptionsChangedListener" ]
  }, {
    "name" : "public void removeOnOpportunisticSubscriptionsChangedListener(@NonNull SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the {@link SubscriptionManager.OnOpportunisticSubscriptionsChangedListener}\n     * that is currently listening opportunistic subscriptions change. This is not strictly\n     * necessary as the listener will automatically be unregistered if an attempt to invoke the\n     * listener fails.\n     *\n     * @param listener that is to be unregistered.\n     ",
    "links" : [ "SubscriptionManager.OnOpportunisticSubscriptionsChangedListener" ]
  }, {
    "name" : "public void listenForSubscriber(int subId, @NonNull String pkg, @NonNull String featureId, @NonNull PhoneStateListener listener, int events, boolean notifyNow)",
    "returnType" : "void",
    "comment" : "\n     * Listen for incoming subscriptions\n     * @param subId Subscription ID\n     * @param pkg Package name\n     * @param featureId Feature ID\n     * @param listener Listener providing callback\n     * @param events Events\n     * @param notifyNow Whether to notify instantly\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyCarrierNetworkChange(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Informs the system of an intentional upcoming carrier network change by a carrier app.\n     * This call only used to allow the system to provide alternative UI while telephony is\n     * performing an action that may result in intentional, temporary network lack of connectivity.\n     * <p>\n     * Based on the active parameter passed in, this method will either show or hide the alternative\n     * UI. There is no timeout associated with showing this UX, so a carrier app must be sure to\n     * call with active set to false sometime after calling with it set to {@code true}.\n     * <p>\n     * Requires Permission: calling app has carrier privileges.\n     *\n     * @param active Whether the carrier network change is or shortly will be\n     * active. Set this value to true to begin showing alternative UI and false to stop.\n     * @see TelephonyManager#hasCarrierPrivileges\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyCallStateChanged(int subId, int slotIndex, @CallState int state, @Nullable String incomingNumber)",
    "returnType" : "void",
    "comment" : "\n     * Notify call state changed on certain subscription.\n     *\n     * @param subId for which call state changed.\n     * @param slotIndex for which call state changed. Can be derived from subId except when subId is\n     * invalid.\n     * @param state latest call state. e.g, offhook, ringing\n     * @param incomingNumber incoming phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyCallStateChangedForAllSubscriptions(@CallState int state, @Nullable String incomingNumber)",
    "returnType" : "void",
    "comment" : "\n     * Notify call state changed on all subscriptions.\n     *\n     * @param state latest call state. e.g, offhook, ringing\n     * @param incomingNumber incoming phone number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifySubscriptionInfoChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link SubscriptionInfo} change.\n     * @hide\n     ",
    "links" : [ "SubscriptionInfo" ]
  }, {
    "name" : "public void notifyOpportunisticSubscriptionInfoChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notify opportunistic {@link SubscriptionInfo} change.\n     * @hide\n     ",
    "links" : [ "SubscriptionInfo" ]
  }, {
    "name" : "public void notifyServiceStateChanged(int subId, int slotIndex, @NonNull ServiceState state)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link ServiceState} update on certain subscription.\n     *\n     * @param subId for which the service state changed.\n     * @param slotIndex for which the service state changed. Can be derived from subId except\n     * subId is invalid.\n     * @param state service state e.g, in service, out of service or roaming status.\n     ",
    "links" : [ "ServiceState" ]
  }, {
    "name" : "public void notifySignalStrengthChanged(int subId, int slotIndex, @NonNull SignalStrength signalStrength)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link SignalStrength} update on certain subscription.\n     *\n     * @param subId for which the signalstrength changed.\n     * @param slotIndex for which the signalstrength changed. Can be derived from subId except when\n     * subId is invalid.\n     * @param signalStrength e.g, signalstrength level {@see SignalStrength#getLevel()}\n     ",
    "links" : [ "SignalStrength" ]
  }, {
    "name" : "public void notifyMessageWaitingChanged(int subId, int slotIndex, boolean msgWaitingInd)",
    "returnType" : "void",
    "comment" : "\n     * Notify changes to the message-waiting indicator on certain subscription. e.g, The status bar\n     * uses message waiting indicator to determine when to display the voicemail icon.\n     *\n     * @param subId for which message waiting indicator changed.\n     * @param slotIndex for which message waiting indicator changed. Can be derived from subId\n     * except when subId is invalid.\n     * @param msgWaitingInd {@code true} indicates there is message-waiting indicator, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyCallForwardingChanged(int subId, boolean callForwardInd)",
    "returnType" : "void",
    "comment" : "\n     * Notify changes to the call-forwarding status on certain subscription.\n     *\n     * @param subId for which call forwarding status changed.\n     * @param callForwardInd {@code true} indicates there is call forwarding, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataActivityChanged(int subId, @DataActivityType int dataActivityType)",
    "returnType" : "void",
    "comment" : "\n     * Notify changes to activity state changes on certain subscription.\n     *\n     * @param subId for which data activity state changed.\n     * @param dataActivityType indicates the latest data activity type e.g, {@link\n     * TelephonyManager#DATA_ACTIVITY_IN}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataConnectionForSubscriber(int slotIndex, int subId, @ApnType int apnType, @Nullable PreciseDataConnectionState preciseState)",
    "returnType" : "void",
    "comment" : "\n     * Notify changes to default (Internet) data connection state on certain subscription.\n     *\n     * @param subId for which data connection state changed.\n     * @param slotIndex for which data connections state changed. Can be derived from subId except\n     * when subId is invalid.\n     * @param apnType the apn type bitmask, defined with {@code ApnSetting#TYPE_*} flags.\n     * @param preciseState the PreciseDataConnectionState\n     *\n     * @see android.telephony.PreciseDataConnection\n     * @see TelephonyManager#DATA_DISCONNECTED\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyCallQualityChanged(int subId, int slotIndex, @NonNull CallQuality callQuality, @NetworkType int networkType)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link CallQuality} change on certain subscription.\n     *\n     * @param subId for which call quality state changed.\n     * @param slotIndex for which call quality state changed. Can be derived from subId except when\n     * subId is invalid.\n     * @param callQuality Information about call quality e.g, call quality level\n     * @param networkType associated with this data connection. e.g, LTE\n     ",
    "links" : [ "CallQuality" ]
  }, {
    "name" : "public void notifyEmergencyNumberList(int subId, int slotIndex)",
    "returnType" : "void",
    "comment" : "\n     * Notify emergency number list changed on certain subscription.\n     *\n     * @param subId for which emergency number list changed.\n     * @param slotIndex for which emergency number list changed. Can be derived from subId except\n     * when subId is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyOutgoingEmergencyCall(int phoneId, int subId, @NonNull EmergencyNumber emergencyNumber)",
    "returnType" : "void",
    "comment" : "\n     * Notify outgoing emergency call.\n     * @param phoneId Sender phone ID.\n     * @param subId Sender subscription ID.\n     * @param emergencyNumber Emergency number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyOutgoingEmergencySms(int phoneId, int subId, @NonNull EmergencyNumber emergencyNumber)",
    "returnType" : "void",
    "comment" : "\n     * Notify outgoing emergency SMS.\n     * @param phoneId Sender phone ID.\n     * @param subId Sender subscription ID.\n     * @param emergencyNumber Emergency number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyRadioPowerStateChanged(int subId, int slotIndex, @RadioPowerState int radioPowerState)",
    "returnType" : "void",
    "comment" : "\n     * Notify radio power state changed on certain subscription.\n     *\n     * @param subId for which radio power state changed.\n     * @param slotIndex for which radio power state changed. Can be derived from subId except when\n     * subId is invalid.\n     * @param radioPowerState the current modem radio state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyPhoneCapabilityChanged(@NonNull PhoneCapability phoneCapability)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link PhoneCapability} changed.\n     *\n     * @param phoneCapability the capability of the modem group.\n     ",
    "links" : [ "PhoneCapability" ]
  }, {
    "name" : "public void notifyDataActivationStateChanged(int subId, int slotIndex, @SimActivationState int activationState)",
    "returnType" : "void",
    "comment" : "\n     * Notify data activation state changed on certain subscription.\n     * @see TelephonyManager#getDataActivationState()\n     *\n     * @param subId for which data activation state changed.\n     * @param slotIndex for which data activation state changed. Can be derived from subId except\n     * when subId is invalid.\n     * @param activationState sim activation state e.g, activated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyVoiceActivationStateChanged(int subId, int slotIndex, @SimActivationState int activationState)",
    "returnType" : "void",
    "comment" : "\n     * Notify voice activation state changed on certain subscription.\n     * @see TelephonyManager#getVoiceActivationState()\n     *\n     * @param subId for which voice activation state changed.\n     * @param slotIndex for which voice activation state changed. Can be derived from subId except\n     * subId is invalid.\n     * @param activationState sim activation state e.g, activated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyUserMobileDataStateChanged(int slotIndex, int subId, boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Notify User mobile data state changed on certain subscription. e.g, mobile data is enabled\n     * or disabled.\n     *\n     * @param subId for which mobile data state has changed.\n     * @param slotIndex for which mobile data state has changed. Can be derived from subId except\n     * when subId is invalid.\n     * @param state {@code true} indicates mobile data is enabled/on. {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDisplayInfoChanged(int slotIndex, int subscriptionId, @NonNull TelephonyDisplayInfo telephonyDisplayInfo)",
    "returnType" : "void",
    "comment" : "\n     * Notify display info changed.\n     *\n     * @param slotIndex The SIM slot index for which display info has changed. Can be\n     * derived from {@code subscriptionId} except when {@code subscriptionId} is invalid, such as\n     * when the device is in emergency-only mode.\n     * @param subscriptionId Subscription id for which display network info has changed.\n     * @param telephonyDisplayInfo The display info.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyImsDisconnectCause(int subId, @NonNull ImsReasonInfo imsReasonInfo)",
    "returnType" : "void",
    "comment" : "\n     * Notify IMS call disconnect causes which contains {@link android.telephony.ims.ImsReasonInfo}.\n     *\n     * @param subId for which ims call disconnect.\n     * @param imsReasonInfo the reason for ims call disconnect.\n     ",
    "links" : [ "android.telephony.ims.ImsReasonInfo" ]
  }, {
    "name" : "public void notifyPreciseDataConnectionFailed(int subId, int slotIndex, @ApnType int apnType, @Nullable String apn, @DataFailureCause int failCause)",
    "returnType" : "void",
    "comment" : "\n     * Notify precise data connection failed cause on certain subscription.\n     *\n     * @param subId for which data connection failed.\n     * @param slotIndex for which data conenction failed. Can be derived from subId except when\n     * subId is invalid.\n     * @param apnType the apn type bitmask, defined with {@code ApnSetting#TYPE_*} flags.\n     * @param apn the APN {@link ApnSetting#getApnName()} of this data connection.\n     * @param failCause data fail cause.\n     ",
    "links" : [ "ApnSetting#getApnName" ]
  }, {
    "name" : "public void notifySrvccStateChanged(int subId, @SrvccState int state)",
    "returnType" : "void",
    "comment" : "\n     * Notify single Radio Voice Call Continuity (SRVCC) state change for the currently active call\n     * on certain subscription.\n     *\n     * @param subId for which srvcc state changed.\n     * @param state srvcc state\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyPreciseCallState(int subId, int slotIndex, @PreciseCallStates int ringCallPreciseState, @PreciseCallStates int foregroundCallPreciseState, @PreciseCallStates int backgroundCallPreciseState)",
    "returnType" : "void",
    "comment" : "\n     * Notify precise call state changed on certain subscription, including foreground, background\n     * and ringcall states.\n     *\n     * @param subId for which precise call state changed.\n     * @param slotIndex for which precise call state changed. Can be derived from subId except when\n     * subId is invalid.\n     * @param ringCallPreciseState ringCall state.\n     * @param foregroundCallPreciseState foreground call state.\n     * @param backgroundCallPreciseState background call state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDisconnectCause(int slotIndex, int subId, @DisconnectCauses int cause, @PreciseDisconnectCauses int preciseCause)",
    "returnType" : "void",
    "comment" : "\n     * Notify call disconnect causes which contains {@link DisconnectCause} and {@link\n     * android.telephony.PreciseDisconnectCause}.\n     *\n     * @param slotIndex for which call disconnected. Can be derived from subId except when subId is\n     * invalid.\n     * @param subId for which call disconnected.\n     * @param cause {@link DisconnectCause} for the disconnected call.\n     * @param preciseCause {@link android.telephony.PreciseDisconnectCause} for the disconnected\n     * call.\n     ",
    "links" : [ "DisconnectCause", "DisconnectCause", "android.telephony.PreciseDisconnectCause" ]
  }, {
    "name" : "public void notifyCellLocation(int subId, @NonNull CellIdentity cellLocation)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link android.telephony.CellLocation} changed.\n     *\n     * <p>To be compatible with {@link TelephonyRegistry}, use {@link CellIdentity} which is\n     * parcelable, and convert to CellLocation in client code.\n     ",
    "links" : [ "android.telephony.CellLocation", "TelephonyRegistry", "CellIdentity" ]
  }, {
    "name" : "public void notifyCellInfoChanged(int subId, @NonNull List<CellInfo> cellInfo)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link CellInfo} changed on certain subscription. e.g, when an observed cell info has\n     * changed or new cells have been added or removed on the given subscription.\n     *\n     * @param subId for which cellinfo changed.\n     * @param cellInfo A list of cellInfo associated with the given subscription.\n     ",
    "links" : [ "CellInfo" ]
  }, {
    "name" : "public void notifyActiveDataSubIdChanged(int activeDataSubId)",
    "returnType" : "void",
    "comment" : "\n     * Notify that the active data subscription ID has changed.\n     * @param activeDataSubId The new subscription ID for active data\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyRegistrationFailed(int slotIndex, int subId, @NonNull CellIdentity cellIdentity, @NonNull String chosenPlmn, int domain, int causeCode, int additionalCauseCode)",
    "returnType" : "void",
    "comment" : "\n     * Report that Registration or a Location/Routing/Tracking Area update has failed.\n     *\n     * @param slotIndex for which call disconnected. Can be derived from subId except when subId is\n     * invalid.\n     * @param subId for which cellinfo changed.\n     * @param cellIdentity the CellIdentity, which must include the globally unique identifier\n     *        for the cell (for example, all components of the CGI or ECGI).\n     * @param chosenPlmn a 5 or 6 digit alphanumeric PLMN (MCC|MNC) among those broadcast by the\n     *         cell that was chosen for the failed registration attempt.\n     * @param domain DOMAIN_CS, DOMAIN_PS or both in case of a combined procedure.\n     * @param causeCode the primary failure cause code of the procedure.\n     *        For GSM/UMTS (MM), values are in TS 24.008 Sec 10.5.95\n     *        For GSM/UMTS (GMM), values are in TS 24.008 Sec 10.5.147\n     *        For LTE (EMM), cause codes are TS 24.301 Sec 9.9.3.9\n     *        For NR (5GMM), cause codes are TS 24.501 Sec 9.11.3.2\n     *        Integer.MAX_VALUE if this value is unused.\n     * @param additionalCauseCode the cause code of any secondary/combined procedure if appropriate.\n     *        For UMTS, if a combined attach succeeds for PS only, then the GMM cause code shall be\n     *        included as an additionalCauseCode. For LTE (ESM), cause codes are in\n     *        TS 24.301 9.9.4.4. Integer.MAX_VALUE if this value is unused.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyBarringInfoChanged(int slotIndex, int subId, @NonNull BarringInfo barringInfo)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link BarringInfo} has changed for a specific subscription.\n     *\n     * @param slotIndex for the phone object that got updated barring info.\n     * @param subId for which the BarringInfo changed.\n     * @param barringInfo updated BarringInfo.\n     ",
    "links" : [ "BarringInfo" ]
  } ],
  "variableNames" : [ "TAG", "sRegistry", "mContext", "mSubscriptionChangedListenerMap", "mOpportunisticSubscriptionChangedListenerMap", "LISTEN_CODE_CHANGE", "SIM_ACTIVATION_TYPE_VOICE", "SIM_ACTIVATION_TYPE_DATA" ],
  "methodNames" : [ "public void addOnSubscriptionsChangedListener(@NonNull SubscriptionManager.OnSubscriptionsChangedListener listener, @NonNull Executor executor)", "public void removeOnSubscriptionsChangedListener(@NonNull SubscriptionManager.OnSubscriptionsChangedListener listener)", "public void addOnOpportunisticSubscriptionsChangedListener(@NonNull SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener, @NonNull Executor executor)", "public void removeOnOpportunisticSubscriptionsChangedListener(@NonNull SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener)", "public void listenForSubscriber(int subId, @NonNull String pkg, @NonNull String featureId, @NonNull PhoneStateListener listener, int events, boolean notifyNow)", "public void notifyCarrierNetworkChange(boolean active)", "public void notifyCallStateChanged(int subId, int slotIndex, @CallState int state, @Nullable String incomingNumber)", "public void notifyCallStateChangedForAllSubscriptions(@CallState int state, @Nullable String incomingNumber)", "public void notifySubscriptionInfoChanged()", "public void notifyOpportunisticSubscriptionInfoChanged()", "public void notifyServiceStateChanged(int subId, int slotIndex, @NonNull ServiceState state)", "public void notifySignalStrengthChanged(int subId, int slotIndex, @NonNull SignalStrength signalStrength)", "public void notifyMessageWaitingChanged(int subId, int slotIndex, boolean msgWaitingInd)", "public void notifyCallForwardingChanged(int subId, boolean callForwardInd)", "public void notifyDataActivityChanged(int subId, @DataActivityType int dataActivityType)", "public void notifyDataConnectionForSubscriber(int slotIndex, int subId, @ApnType int apnType, @Nullable PreciseDataConnectionState preciseState)", "public void notifyCallQualityChanged(int subId, int slotIndex, @NonNull CallQuality callQuality, @NetworkType int networkType)", "public void notifyEmergencyNumberList(int subId, int slotIndex)", "public void notifyOutgoingEmergencyCall(int phoneId, int subId, @NonNull EmergencyNumber emergencyNumber)", "public void notifyOutgoingEmergencySms(int phoneId, int subId, @NonNull EmergencyNumber emergencyNumber)", "public void notifyRadioPowerStateChanged(int subId, int slotIndex, @RadioPowerState int radioPowerState)", "public void notifyPhoneCapabilityChanged(@NonNull PhoneCapability phoneCapability)", "public void notifyDataActivationStateChanged(int subId, int slotIndex, @SimActivationState int activationState)", "public void notifyVoiceActivationStateChanged(int subId, int slotIndex, @SimActivationState int activationState)", "public void notifyUserMobileDataStateChanged(int slotIndex, int subId, boolean state)", "public void notifyDisplayInfoChanged(int slotIndex, int subscriptionId, @NonNull TelephonyDisplayInfo telephonyDisplayInfo)", "public void notifyImsDisconnectCause(int subId, @NonNull ImsReasonInfo imsReasonInfo)", "public void notifyPreciseDataConnectionFailed(int subId, int slotIndex, @ApnType int apnType, @Nullable String apn, @DataFailureCause int failCause)", "public void notifySrvccStateChanged(int subId, @SrvccState int state)", "public void notifyPreciseCallState(int subId, int slotIndex, @PreciseCallStates int ringCallPreciseState, @PreciseCallStates int foregroundCallPreciseState, @PreciseCallStates int backgroundCallPreciseState)", "public void notifyDisconnectCause(int slotIndex, int subId, @DisconnectCauses int cause, @PreciseDisconnectCauses int preciseCause)", "public void notifyCellLocation(int subId, @NonNull CellIdentity cellLocation)", "public void notifyCellInfoChanged(int subId, @NonNull List<CellInfo> cellInfo)", "public void notifyActiveDataSubIdChanged(int activeDataSubId)", "public void notifyRegistrationFailed(int slotIndex, int subId, @NonNull CellIdentity cellIdentity, @NonNull String chosenPlmn, int domain, int causeCode, int additionalCauseCode)", "public void notifyBarringInfoChanged(int slotIndex, int subId, @NonNull BarringInfo barringInfo)" ]
}