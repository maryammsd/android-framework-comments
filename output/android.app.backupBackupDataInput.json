{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/BackupDataInput.java",
  "packageName" : "android.app.backup",
  "className" : "BackupDataInput",
  "comment" : "\n * Provides the structured interface through which a {@link BackupAgent} reads\n * information from the backup data set, via its\n * {@link BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}\n * method.  The data is presented as a set of \"entities,\" each\n * representing one named record as previously stored by the agent's\n * {@link BackupAgent#onBackup(ParcelFileDescriptor,BackupDataOutput,ParcelFileDescriptor)\n * onBackup()} implementation.  An entity is composed of a descriptive header plus a\n * byte array that holds the raw data saved in the remote backup.\n * <p>\n * The agent must consume every entity in the data stream, otherwise the\n * restored state of the application will be incomplete.\n * <h3>Example</h3>\n * <p>\n * A typical\n * {@link BackupAgent#onRestore(BackupDataInput,int,ParcelFileDescriptor)\n * onRestore()} implementation might be structured something like this:\n * <pre>\n * public void onRestore(BackupDataInput data, int appVersionCode,\n *                       ParcelFileDescriptor newState) {\n *     while (data.readNextHeader()) {\n *         String key = data.getKey();\n *         int dataSize = data.getDataSize();\n *\n *         if (key.equals(MY_BACKUP_KEY_ONE)) {\n *             // process this kind of record here\n *             byte[] buffer = new byte[dataSize];\n *             data.readEntityData(buffer, 0, dataSize); // reads the entire entity at once\n *\n *             // now 'buffer' holds the raw data and can be processed however\n *             // the agent wishes\n *             processBackupKeyOne(buffer);\n *         } else if (key.equals(MY_BACKUP_KEY_TO_IGNORE) {\n *             // a key we recognize but wish to discard\n *             data.skipEntityData();\n *         } // ... etc.\n *    }\n * }</pre>\n ",
  "variables" : [ {
    "name" : "mBackupReader",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeader",
    "type" : "EntityHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeaderReady",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean readNextHeader() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Extract the next entity header from the restore stream.  After this method\n     * return success, the {@link #getKey()} and {@link #getDataSize()} methods can\n     * be used to inspect the entity that is now available for processing.\n     *\n     * @return <code>true</code> when there is an entity ready for consumption from the\n     *    restore stream, <code>false</code> if the restore stream has been fully consumed.\n     * @throws IOException if an error occurred while reading the restore stream\n     ",
    "links" : [ "#getKey", "#getDataSize" ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * Report the key associated with the current entity in the restore stream\n     * @return the current entity's key string\n     * @throws IllegalStateException if the next record header has not yet been read\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataSize()",
    "returnType" : "int",
    "comment" : "\n     * Report the size in bytes of the data associated with the current entity in the\n     * restore stream.\n     *\n     * @return The size of the record's raw data, in bytes\n     * @throws IllegalStateException if the next record header has not yet been read\n     ",
    "links" : [ ]
  }, {
    "name" : "public int readEntityData(byte[] data, int offset, int size) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Read a record's raw data from the restore stream.  The record's header must first\n     * have been processed by the {@link #readNextHeader()} method.  Multiple calls to\n     * this method may be made in order to process the data in chunks; not all of it\n     * must be read in a single call.  Once all of the raw data for the current entity\n     * has been read, further calls to this method will simply return zero.\n     *\n     * @param data An allocated byte array of at least 'size' bytes\n     * @param offset Offset within the 'data' array at which the data will be placed\n     *    when read from the stream\n     * @param size The number of bytes to read in this pass\n     * @return The number of bytes of data read.  Once all of the data for this entity\n     *    has been read, further calls to this method will return zero.\n     * @throws IOException if an error occurred when trying to read the restore data stream\n     ",
    "links" : [ "#readNextHeader" ]
  }, {
    "name" : "public void skipEntityData() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Consume the current entity's data without extracting it into a buffer\n     * for further processing.  This allows a {@link android.app.backup.BackupAgent} to\n     * efficiently discard obsolete or otherwise uninteresting records during the\n     * restore operation.\n     *\n     * @throws IOException if an error occurred when trying to read the restore data stream\n     ",
    "links" : [ "android.app.backup.BackupAgent" ]
  }, {
    "name" : "private static native long ctor(FileDescriptor fd)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void dtor(long mBackupReader)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int readNextHeader_native(long mBackupReader, EntityHeader entity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int readEntityData_native(long mBackupReader, byte[] data, int offset, int size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int skipEntityData_native(long mBackupReader)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mBackupReader", "mHeader", "mHeaderReady" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public boolean readNextHeader() throws IOException", "public String getKey()", "public int getDataSize()", "public int readEntityData(byte[] data, int offset, int size) throws IOException", "public void skipEntityData() throws IOException", "private static native long ctor(FileDescriptor fd)", "private static native void dtor(long mBackupReader)", "private native int readNextHeader_native(long mBackupReader, EntityHeader entity)", "private native int readEntityData_native(long mBackupReader, byte[] data, int offset, int size)", "private native int skipEntityData_native(long mBackupReader)" ]
}