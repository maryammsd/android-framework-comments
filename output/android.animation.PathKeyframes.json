{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/PathKeyframes.java",
  "packageName" : "android.animation",
  "className" : "PathKeyframes",
  "comment" : "\n * PathKeyframes relies on approximating the Path as a series of line segments.\n * The line segments are recursively divided until there is less than 1/2 pixel error\n * between the lines and the curve. Each point of the line segment is converted\n * to a Keyframe and a linear interpolation between Keyframes creates a good approximation\n * of the curve.\n * <p>\n * PathKeyframes is optimized to reduce the number of objects created when there are\n * many keyframes for a curve.\n * </p>\n * <p>\n * Typically, the returned type is a PointF, but the individual components can be extracted\n * as either an IntKeyframes or FloatKeyframes.\n * </p>\n * @hide\n ",
  "variables" : [ {
    "name" : "FRACTION_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "X_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Y_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_COMPONENTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_KEYFRAMES",
    "type" : "ArrayList<Keyframe>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempPointF",
    "type" : "PointF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyframeData",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ArrayList<Keyframe> getKeyframes()",
    "returnType" : "ArrayList<Keyframe>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getValue(float fraction)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PointF interpolateInRange(float fraction, int startIndex, int endIndex)",
    "returnType" : "PointF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEvaluator(TypeEvaluator evaluator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Class getType()",
    "returnType" : "Class",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Keyframes clone()",
    "returnType" : "Keyframes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PointF pointForIndex(int index)",
    "returnType" : "PointF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float interpolate(float fraction, float startValue, float endValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FloatKeyframes createXFloatKeyframes()",
    "returnType" : "FloatKeyframes",
    "comment" : "\n     * Returns a FloatKeyframes for the X component of the Path.\n     * @return a FloatKeyframes for the X component of the Path.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FloatKeyframes createYFloatKeyframes()",
    "returnType" : "FloatKeyframes",
    "comment" : "\n     * Returns a FloatKeyframes for the Y component of the Path.\n     * @return a FloatKeyframes for the Y component of the Path.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntKeyframes createXIntKeyframes()",
    "returnType" : "IntKeyframes",
    "comment" : "\n     * Returns an IntKeyframes for the X component of the Path.\n     * @return an IntKeyframes for the X component of the Path.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntKeyframes createYIntKeyframes()",
    "returnType" : "IntKeyframes",
    "comment" : "\n     * Returns an IntKeyframeSet for the Y component of the Path.\n     * @return an IntKeyframeSet for the Y component of the Path.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FRACTION_OFFSET", "X_OFFSET", "Y_OFFSET", "NUM_COMPONENTS", "EMPTY_KEYFRAMES", "mTempPointF", "mKeyframeData" ],
  "methodNames" : [ "public ArrayList<Keyframe> getKeyframes()", "public Object getValue(float fraction)", "private PointF interpolateInRange(float fraction, int startIndex, int endIndex)", "public void setEvaluator(TypeEvaluator evaluator)", "public Class getType()", "public Keyframes clone()", "private PointF pointForIndex(int index)", "private static float interpolate(float fraction, float startValue, float endValue)", "public FloatKeyframes createXFloatKeyframes()", "public FloatKeyframes createYFloatKeyframes()", "public IntKeyframes createXIntKeyframes()", "public IntKeyframes createYIntKeyframes()" ]
}