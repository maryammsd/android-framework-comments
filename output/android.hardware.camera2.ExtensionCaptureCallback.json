{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraExtensionSession.java",
  "packageName" : "android.hardware.camera2",
  "className" : "ExtensionCaptureCallback",
  "comment" : "\n     * A callback object for tracking the progress of a\n     * {@link CaptureRequest} submitted to the camera device.\n     *\n     * <p>This callback is invoked when a request triggers a capture to start,\n     * and when the device-specific Extension post processing begins. In case of an\n     * error capturing an image, the error method is triggered instead of\n     * the completion method.</p>\n     *\n     * @see #capture\n     * @see #setRepeatingRequest\n     ",
  "links" : [ "android.hardware.camera2.CaptureRequest" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onCaptureStarted(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, long timestamp)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the camera device has started\n         * capturing the initial input image of the device-specific extension\n         * post-process request.\n         *\n         * <p>This callback is invoked right as the capture of a frame begins,\n         * so it is the most appropriate time for playing a shutter sound,\n         * or triggering UI indicators of capture.</p>\n         *\n         * <p>The request that is being used for this capture is provided,\n         * along with the actual timestamp for the start of exposure.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param session   the session received during\n         *                  {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param request   the request for the capture that just begun\n         * @param timestamp the timestamp at start of capture for repeating\n         *                  request or the timestamp at start of capture of the\n         *                  first frame in a multi-frame capture.\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)" ]
  }, {
    "name" : "public void onCaptureProcessStarted(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when an image (or images in case of multi-frame\n         * capture) is captured and device-specific extension\n         * processing is triggered.\n         *\n         * <p>Each request will generate at most {@code 1}\n         * {@link #onCaptureProcessStarted}.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param session the session received during\n         *                {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param request The request that was given to the CameraExtensionSession\n         *\n         * @see #capture\n         * @see #setRepeatingRequest\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)", "#onCaptureProcessStarted" ]
  }, {
    "name" : "public void onCaptureFailed(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request)",
    "returnType" : "void",
    "comment" : "\n         * This method is called instead of\n         * {@link #onCaptureProcessStarted} when the camera device failed\n         * to produce the required input for the device-specific extension. The\n         * cause could be a failed camera capture request, a failed\n         * capture result or dropped camera frame.\n         *\n         * <p>Other requests are unaffected, and some or all image buffers\n         * from the capture may have been pushed to their respective output\n         * streams.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param session the session received during\n         *                {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param request The request that was given to the CameraDevice\n         *\n         * @see #capture\n         * @see #setRepeatingRequest\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)", "#onCaptureProcessStarted" ]
  }, {
    "name" : "public void onCaptureFailed(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, @CaptureFailure.FailureReason int failure)",
    "returnType" : "void",
    "comment" : "\n         * This method is called instead of\n         * {@link #onCaptureProcessStarted} when the camera device failed\n         * to produce the required input for the device-specific extension. The\n         * cause could be a failed camera capture request, a failed\n         * capture result or dropped camera frame. More information about\n         * the reason is included in the 'failure' argument.\n         *\n         * <p>Other requests are unaffected, and some or all image buffers\n         * from the capture may have been pushed to their respective output\n         * streams.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param session the session received during\n         *                {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param request The request that was given to the CameraDevice\n         * @param failure The capture failure reason\n         *\n         * @see #capture\n         * @see #setRepeatingRequest\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)", "#onCaptureProcessStarted" ]
  }, {
    "name" : "public void onCaptureSequenceCompleted(@NonNull CameraExtensionSession session, int sequenceId)",
    "returnType" : "void",
    "comment" : "\n         * This method is called independently of the others in\n         * ExtensionCaptureCallback, when a capture sequence finishes.\n         *\n         * <p>In total, there will be at least one\n         * {@link #onCaptureProcessStarted}/{@link #onCaptureFailed}\n         * invocation before this callback is triggered. If the capture\n         * sequence is aborted before any requests have begun processing,\n         * {@link #onCaptureSequenceAborted} is invoked instead.</p>\n         *\n         * <p>The default implementation does nothing.</p>\n         *\n         * @param session    the session received during\n         *                   {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param sequenceId A sequence ID returned by the {@link #capture}\n         *                   family of functions.\n         * @see #onCaptureSequenceAborted\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)", "#onCaptureSequenceAborted", "#capture", "#onCaptureProcessStarted", "#onCaptureFailed" ]
  }, {
    "name" : "public void onCaptureSequenceAborted(@NonNull CameraExtensionSession session, int sequenceId)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when a capture sequence aborts.\n         *\n         * <p>Due to the asynchronous nature of the camera device, not all\n         * submitted captures are immediately processed. It is possible to\n         * clear out the pending requests by a variety of operations such\n         * as {@link CameraExtensionSession#stopRepeating}. When such an event\n         * happens, {@link #onCaptureProcessStarted} will not be called.</p>\n         *\n         * <p>The default implementation does nothing.</p>\n         *\n         * @param session    the session received during\n         *                   {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param sequenceId A sequence ID returned by the {@link #capture}\n         *                   family of functions.\n         * @see #onCaptureProcessStarted\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)", "#capture", "android.hardware.camera2.CameraExtensionSession#stopRepeating", "#onCaptureProcessStarted" ]
  }, {
    "name" : "public void onCaptureResultAvailable(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when an image capture has fully completed and all the\n         * result metadata is available.\n         *\n         * <p>This callback will only be called in case\n         * {@link CameraExtensionCharacteristics#getAvailableCaptureResultKeys} returns a valid\n         * non-empty list.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param session The session received during\n         *                {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param request The request that was given to the CameraDevice\n         * @param result The total output metadata from the capture, which only includes the\n         * capture result keys advertised as supported in\n         * {@link CameraExtensionCharacteristics#getAvailableCaptureResultKeys}.\n         *\n         * @see #capture\n         * @see #setRepeatingRequest\n         * @see CameraExtensionCharacteristics#getAvailableCaptureResultKeys\n         ",
    "links" : [ "#onConfigured(CameraExtensionSession)", "android.hardware.camera2.CameraExtensionCharacteristics#getAvailableCaptureResultKeys" ]
  }, {
    "name" : "public void onCaptureProcessProgressed(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, @IntRange(from = 0, to = 100) int progress)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when image capture processing is ongoing between\n         * {@link #onCaptureProcessStarted} and the processed still capture frame returning\n         * to the client surface.\n         *\n         * <p>The value included in the arguments provides clients with an estimate\n         * of the post-processing progress which could take significantly more time\n         * relative to the rest of the {@link #capture} sequence.</p>\n         *\n         * <p>The callback will be triggered only by extensions that return {@code true}\n         * from calls\n         * {@link CameraExtensionCharacteristics#isCaptureProcessProgressAvailable}.</p>\n         *\n         * <p>If support for this callback is present, then clients will be notified at least once\n         * with progress value 100.</p>\n         *\n         * <p>The callback will be triggered only for still capture requests {@link #capture} and\n         * is not supported for repeating requests {@link #setRepeatingRequest}.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param session The session received during\n         *                {@link StateCallback#onConfigured(CameraExtensionSession)}\n         * @param request The request that was given to the CameraDevice\n         * @param progress Value between 0 and 100 (inclusive) indicating the current\n         *                post-processing progress\n         *\n         * @see CameraExtensionCharacteristics#isCaptureProcessProgressAvailable\n         *\n         ",
    "links" : [ "android.hardware.camera2.CameraExtensionCharacteristics#isCaptureProcessProgressAvailable", "#onConfigured(CameraExtensionSession)", "#setRepeatingRequest", "#capture", "#onCaptureProcessStarted" ]
  } ],
  "methodNames" : [ "public void onCaptureStarted(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, long timestamp)", "public void onCaptureProcessStarted(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request)", "public void onCaptureFailed(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request)", "public void onCaptureFailed(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, @CaptureFailure.FailureReason int failure)", "public void onCaptureSequenceCompleted(@NonNull CameraExtensionSession session, int sequenceId)", "public void onCaptureSequenceAborted(@NonNull CameraExtensionSession session, int sequenceId)", "public void onCaptureResultAvailable(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result)", "public void onCaptureProcessProgressed(@NonNull CameraExtensionSession session, @NonNull CaptureRequest request, @IntRange(from = 0, to = 100) int progress)" ],
  "variableNames" : [ ]
}