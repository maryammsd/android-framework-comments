{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/transformer/KeyTable.java",
  "packageName" : "org.apache.xalan.transformer",
  "className" : "KeyTable",
  "comment" : "\n * Table of element keys, keyed by document node.  An instance of this\n * class is keyed by a Document node that should be matched with the\n * root of the current context.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_docKey",
    "type" : "int",
    "comment" : "\n   * The document key.  This table should only be used with contexts\n   * whose Document roots match this key.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_keyDeclarations",
    "type" : "Vector",
    "comment" : "\n   * Vector of KeyDeclaration instances holding the key declarations.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_refsTable",
    "type" : "Hashtable",
    "comment" : "\n   * Hold a cache of key() function result for each ref.\n   * Key is XMLString, the ref value\n   * Value is XNodeSet, the key() function result for the given ref value.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_keyNodes",
    "type" : "XNodeSet",
    "comment" : " \n   * The main iterator that will walk through the source  \n   * tree for this key.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getDocKey()",
    "returnType" : "int",
    "comment" : "\n   * Get the document root matching this key.  \n   *\n   * @return the document root matching this key\n   ",
    "links" : [ ]
  }, {
    "name" : " KeyIterator getKeyIterator()",
    "returnType" : "KeyIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public XNodeSet getNodeSetDTMByKey(QName name, XMLString ref)",
    "returnType" : "XNodeSet",
    "comment" : "\n   * Given a valid element key, return the corresponding node list.\n   * \n   * @param name The name of the key, which must match the 'name' attribute on xsl:key.\n   * @param ref The value that must match the value found by the 'match' attribute on xsl:key.\n   * @return a set of nodes referenced by the key named <CODE>name</CODE> and the reference <CODE>ref</CODE>. If no node is referenced by this key, an empty node set is returned.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getKeyTableName()",
    "returnType" : "QName",
    "comment" : "\n   * Get Key Name for this KeyTable  \n   *\n   * @return Key name\n   ",
    "links" : [ ]
  }, {
    "name" : "private Vector getKeyDeclarations()",
    "returnType" : "Vector",
    "comment" : "\n   * @return key declarations for the key associated to this KeyTable\n   ",
    "links" : [ ]
  }, {
    "name" : "private Hashtable getRefsTable()",
    "returnType" : "Hashtable",
    "comment" : "\n   * @return lazy initialized refs table associating evaluation of key function\n   *         with a XNodeSet\n   ",
    "links" : [ ]
  }, {
    "name" : "private void addValueInRefsTable(XPathContext xctxt, XMLString ref, int node)",
    "returnType" : "void",
    "comment" : "\n   * Add an association between a ref and a node in the m_refsTable.\n   * Requires that m_refsTable != null\n   * @param xctxt XPath context\n   * @param ref the value of the use clause of the current key for the given node\n   * @param node the node to reference\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getDocKey()", " KeyIterator getKeyIterator()", "public XNodeSet getNodeSetDTMByKey(QName name, XMLString ref)", "public QName getKeyTableName()", "private Vector getKeyDeclarations()", "private Hashtable getRefsTable()", "private void addValueInRefsTable(XPathContext xctxt, XMLString ref, int node)" ],
  "variableNames" : [ "m_docKey", "m_keyDeclarations", "m_refsTable", "m_keyNodes" ]
}