{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/SharedPreferences.java",
  "packageName" : "android.content",
  "className" : "SharedPreferences",
  "comment" : "\n * Interface for accessing and modifying preference data returned by {@link\n * Context#getSharedPreferences}.  For any particular set of preferences,\n * there is a single instance of this class that all clients share.\n * Modifications to the preferences must go through an {@link Editor} object\n * to ensure the preference values remain in a consistent state and control\n * when they are committed to storage.  Objects that are returned from the\n * various <code>get</code> methods must be treated as immutable by the application.\n *\n * <p>SharedPreferences is best suited to storing data about how the user prefers\n * to experience the app, for example, whether the user prefers a particular UI theme\n * or whether they prefer viewing particular content in a list vs. a grid. To this end,\n * SharedPreferences reflects changes {@link Editor#commit() committed} or\n * {@link Editor#apply() applied} by {@link Editor}s <em>immediately</em>, potentially\n * before those changes are durably persisted.\n * Under some circumstances such as app crashes or termination these changes may be lost,\n * even if an {@link OnSharedPreferenceChangeListener} reported the change was successful.\n * SharedPreferences is not recommended for storing data that is sensitive to this\n * kind of rollback to a prior state such as user security or privacy settings.\n * For other high-level data persistence options, see\n * <a href=\"https://d.android.com/room\">Room</a> or\n * <a href=\"https://d.android.com/datastore\">DataStore</a>.\n *\n * <p><em>Note:</em> Common implementations guarantee that outstanding edits to preference\n * files are persisted to disk when host Activities become stopped. In some situations\n * (e.g. performing many {@link Editor#commit()} or {@link Editor#apply()}\n * operations just prior to navigating away from the host Activity) this can lead\n * to blocking the main thread during lifecycle transition events and associated\n * ANR errors. For more details see the documentation for {@link Editor#commit()} and\n * {@link Editor#apply()}.\n *\n * <p><em>Note: This class does not support use across multiple processes.</em>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using SharedPreferences, read the\n * <a href=\"{@docRoot}guide/topics/data/data-storage.html#pref\">Data Storage</a>\n * developer guide.</p></div>\n *\n * @see Context#getSharedPreferences\n ",
  "links" : [ "OnSharedPreferenceChangeListener", "android.content.Context#getSharedPreferences", "Editor", "#apply()", "#commit()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Map<String, ?> getAll()",
    "returnType" : "Map<String, ?>",
    "comment" : "\n     * Retrieve all values from the preferences.\n     *\n     * <p>Note that you <em>must not</em> modify the collection returned\n     * by this method, or alter any of its contents.  The consistency of your\n     * stored data is not guaranteed if you do.\n     *\n     * @return Returns a map containing a list of pairs key/value representing\n     * the preferences.\n     *\n     * @throws NullPointerException\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(String key, @Nullable String defValue)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve a String value from the preferences.\n     * \n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * \n     * @return Returns the preference value if it exists, or defValue.  Throws\n     * ClassCastException if there is a preference with this name that is not\n     * a String.\n     * \n     * @throws ClassCastException\n     ",
    "links" : [ ]
  }, {
    "name" : " Set<String> getStringSet(String key, @Nullable Set<String> defValues)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Retrieve a set of String values from the preferences.\n     * \n     * <p>Note that you <em>must not</em> modify the set instance returned\n     * by this call.  The consistency of the stored data is not guaranteed\n     * if you do, nor is your ability to modify the instance at all.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValues Values to return if this preference does not exist.\n     * \n     * @return Returns the preference values if they exist, or defValues.\n     * Throws ClassCastException if there is a preference with this name\n     * that is not a Set.\n     * \n     * @throws ClassCastException\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(String key, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve an int value from the preferences.\n     * \n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * \n     * @return Returns the preference value if it exists, or defValue.  Throws\n     * ClassCastException if there is a preference with this name that is not\n     * an int.\n     * \n     * @throws ClassCastException\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(String key, long defValue)",
    "returnType" : "long",
    "comment" : "\n     * Retrieve a long value from the preferences.\n     * \n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * \n     * @return Returns the preference value if it exists, or defValue.  Throws\n     * ClassCastException if there is a preference with this name that is not\n     * a long.\n     * \n     * @throws ClassCastException\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(String key, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a float value from the preferences.\n     * \n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * \n     * @return Returns the preference value if it exists, or defValue.  Throws\n     * ClassCastException if there is a preference with this name that is not\n     * a float.\n     * \n     * @throws ClassCastException\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getBoolean(String key, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve a boolean value from the preferences.\n     * \n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * \n     * @return Returns the preference value if it exists, or defValue.  Throws\n     * ClassCastException if there is a preference with this name that is not\n     * a boolean.\n     * \n     * @throws ClassCastException\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the preferences contains a preference.\n     * \n     * @param key The name of the preference to check.\n     * @return Returns true if the preference exists in the preferences,\n     *         otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : " Editor edit()",
    "returnType" : "Editor",
    "comment" : "\n     * Create a new Editor for these preferences, through which you can make\n     * modifications to the data in the preferences and atomically commit those\n     * changes back to the SharedPreferences object.\n     * \n     * <p>Note that you <em>must</em> call {@link Editor#commit} to have any\n     * changes you perform in the Editor actually show up in the\n     * SharedPreferences.\n     * \n     * @return Returns a new instance of the {@link Editor} interface, allowing\n     * you to modify the values in this SharedPreferences object.\n     ",
    "links" : [ "#commit", "Editor" ]
  }, {
    "name" : " void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be invoked when a change happens to a preference.\n     *\n     * <p class=\"caution\"><strong>Caution:</strong> The preference manager does\n     * not currently store a strong reference to the listener. You must store a\n     * strong reference to the listener, or it will be susceptible to garbage\n     * collection. We recommend you keep a reference to the listener in the\n     * instance data of an object that will exist as long as you need the\n     * listener.</p>\n     *\n     * @param listener The callback that will run.\n     * @see #unregisterOnSharedPreferenceChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previous callback.\n     *\n     * @param listener The callback that should be unregistered.\n     * @see #registerOnSharedPreferenceChangeListener\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Map<String, ?> getAll()", " String getString(String key, @Nullable String defValue)", " Set<String> getStringSet(String key, @Nullable Set<String> defValues)", " int getInt(String key, int defValue)", " long getLong(String key, long defValue)", " float getFloat(String key, float defValue)", " boolean getBoolean(String key, boolean defValue)", " boolean contains(String key)", " Editor edit()", " void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)", " void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener)" ],
  "variableNames" : [ ]
}