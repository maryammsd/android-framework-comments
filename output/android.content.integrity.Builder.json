{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/integrity/AppInstallMetadata.java",
  "packageName" : "android.content.integrity",
  "className" : "Builder",
  "comment" : " Builder class for constructing {@link AppInstallMetadata} objects. ",
  "variables" : [ {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppCertificates",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstallerName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstallerCertificates",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVersionCode",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPreInstalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsStampPresent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsStampVerified",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsStampTrusted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStampCertificateHash",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedInstallersAndCertificates",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setAllowedInstallersAndCert(@NonNull Map<String, String> allowedInstallersAndCertificates)",
    "returnType" : "Builder",
    "comment" : "\n         * Add allowed installers and cert.\n         *\n         * @see AppInstallMetadata#getAllowedInstallersAndCertificates()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPackageName(@NonNull String packageName)",
    "returnType" : "Builder",
    "comment" : "\n         * Set package name of the app to be installed.\n         *\n         * @see AppInstallMetadata#getPackageName()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAppCertificates(@NonNull List<String> appCertificates)",
    "returnType" : "Builder",
    "comment" : "\n         * Set certificate of the app to be installed.\n         *\n         * <p>It is represented as the raw string encoding for the SHA-256 hash of the certificate\n         * of the app.\n         *\n         * @see AppInstallMetadata#getAppCertificates()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setInstallerName(@NonNull String installerName)",
    "returnType" : "Builder",
    "comment" : "\n         * Set name of the installer installing the app.\n         *\n         * @see AppInstallMetadata#getInstallerName()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setInstallerCertificates(@NonNull List<String> installerCertificates)",
    "returnType" : "Builder",
    "comment" : "\n         * Set certificate of the installer installing the app.\n         *\n         * <p>It is represented as the raw string encoding for the SHA-256 hash of the certificate\n         * of the installer.\n         *\n         * @see AppInstallMetadata#getInstallerCertificates()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setVersionCode(long versionCode)",
    "returnType" : "Builder",
    "comment" : "\n         * Set version code of the app to be installed.\n         *\n         * @see AppInstallMetadata#getVersionCode()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIsPreInstalled(boolean isPreInstalled)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the app is pre-installed on the device or not.\n         *\n         * @see AppInstallMetadata#isPreInstalled()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIsStampPresent(boolean isStampPresent)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the stamp embedded in the APK is present or not.\n         *\n         * @see AppInstallMetadata#isStampPresent()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIsStampVerified(boolean isStampVerified)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the stamp embedded in the APK is verified or not.\n         *\n         * @see AppInstallMetadata#isStampVerified()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIsStampTrusted(boolean isStampTrusted)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the stamp embedded in the APK is trusted or not.\n         *\n         * @see AppInstallMetadata#isStampTrusted()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setStampCertificateHash(@NonNull String stampCertificateHash)",
    "returnType" : "Builder",
    "comment" : "\n         * Set certificate hash of the stamp embedded in the APK.\n         *\n         * <p>It is represented as the raw string encoding for the SHA-256 hash of the certificate\n         * of the stamp.\n         *\n         * @see AppInstallMetadata#getStampCertificateHash()\n         ",
    "links" : [ ]
  }, {
    "name" : "public AppInstallMetadata build()",
    "returnType" : "AppInstallMetadata",
    "comment" : "\n         * Build {@link AppInstallMetadata}.\n         *\n         * @throws IllegalArgumentException if package name or app certificate is null\n         ",
    "links" : [ "android.content.integrity.AppInstallMetadata" ]
  } ],
  "variableNames" : [ "mPackageName", "mAppCertificates", "mInstallerName", "mInstallerCertificates", "mVersionCode", "mIsPreInstalled", "mIsStampPresent", "mIsStampVerified", "mIsStampTrusted", "mStampCertificateHash", "mAllowedInstallersAndCertificates" ],
  "methodNames" : [ "public Builder setAllowedInstallersAndCert(@NonNull Map<String, String> allowedInstallersAndCertificates)", "public Builder setPackageName(@NonNull String packageName)", "public Builder setAppCertificates(@NonNull List<String> appCertificates)", "public Builder setInstallerName(@NonNull String installerName)", "public Builder setInstallerCertificates(@NonNull List<String> installerCertificates)", "public Builder setVersionCode(long versionCode)", "public Builder setIsPreInstalled(boolean isPreInstalled)", "public Builder setIsStampPresent(boolean isStampPresent)", "public Builder setIsStampVerified(boolean isStampVerified)", "public Builder setIsStampTrusted(boolean isStampTrusted)", "public Builder setStampCertificateHash(@NonNull String stampCertificateHash)", "public AppInstallMetadata build()" ]
}