{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/Encodings.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "Encodings",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "ENCODINGS_FILE",
    "type" : "String",
    "comment" : "\n     * Standard filename for properties file with encodings data.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MIME_ENCODING",
    "type" : "String",
    "comment" : " The default encoding, ISO style, ISO style.   ",
    "links" : [ ]
  }, {
    "name" : "_encodingTableKeyJava",
    "type" : "Hashtable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_encodingTableKeyMime",
    "type" : "Hashtable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_encodings",
    "type" : "EncodingInfo[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static Writer getWriter(OutputStream output, String encoding) throws UnsupportedEncodingException",
    "returnType" : "Writer",
    "comment" : "\n     * Returns a writer for the specified encoding based on\n     * an output stream.\n     * <p>\n     * This is not a public API.\n     * @param output The output stream\n     * @param encoding The encoding MIME name, not a Java name for the encoding.\n     * @return A suitable writer\n     * @throws UnsupportedEncodingException There is no convertor\n     *  to support this encoding\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " static EncodingInfo getEncodingInfo(String encoding)",
    "returnType" : "EncodingInfo",
    "comment" : "\n     * Returns the EncodingInfo object for the specified\n     * encoding, never null, although the encoding name \n     * inside the returned EncodingInfo object will be if\n     * we can't find a \"real\" EncodingInfo for the encoding.\n     * <p>\n     * This is not a public API.\n     *\n     * @param encoding The encoding\n     * @return The object that is used to determine if \n     * characters are in the given encoding.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isRecognizedEncoding(String encoding)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the encoding specified was recognized by the\n     * serializer or not.\n     *\n     * @param encoding The encoding\n     * @return boolean - true if the encoding was recognized else false\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String toUpperCaseFast(final String s)",
    "returnType" : "String",
    "comment" : "\n     * A fast and cheap way to uppercase a String that is\n     * only made of printable ASCII characters.\n     * <p>\n     * This is not a public API.\n     * @param s a String of ASCII characters\n     * @return an uppercased version of the input String,\n     * possibly the same String.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getMimeEncoding(String encoding)",
    "returnType" : "String",
    "comment" : "\n     * Get the proper mime encoding.  From the XSLT recommendation: \"The encoding\n     * attribute specifies the preferred encoding to use for outputting the result\n     * tree. XSLT processors are required to respect values of UTF-8 and UTF-16.\n     * For other values, if the XSLT processor does not support the specified\n     * encoding it may signal an error; if it does not signal an error it should\n     * use UTF-8 or UTF-16 instead. The XSLT processor must not use an encoding\n     * whose name does not match the EncName production of the XML Recommendation\n     * [XML]. If no encoding attribute is specified, then the XSLT processor should\n     * use either UTF-8 or UTF-16.\"\n     * <p>\n     * This is not a public API.\n     *\n     * @param encoding Reference to java-style encoding string, which may be null,\n     * in which case a default will be found.\n     *\n     * @return The ISO-style encoding string, or null if failure.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String convertJava2MimeEncoding(String encoding)",
    "returnType" : "String",
    "comment" : "\n     * Try the best we can to convert a Java encoding to a XML-style encoding.\n     * <p>\n     * This is not a public API.\n     * @param encoding non-null reference to encoding string, java style.\n     *\n     * @return ISO-style encoding string.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String convertMime2JavaEncoding(String encoding)",
    "returnType" : "String",
    "comment" : "\n     * Try the best we can to convert a Java encoding to a XML-style encoding.\n     * <p>\n     * This is not a public API.\n     *\n     * @param encoding non-null reference to encoding string, java style.\n     *\n     * @return ISO-style encoding string.\n     * <p>\n     * This method is not a public API.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static EncodingInfo[] loadEncodingInfo()",
    "returnType" : "EncodingInfo[]",
    "comment" : "\n     * Load a list of all the supported encodings.\n     *\n     * System property \"encodings\" formatted using URL syntax may define an\n     * external encodings list. Thanks to Sergey Ushakov for the code\n     * contribution!\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int lengthOfMimeNames(String val)",
    "returnType" : "int",
    "comment" : "\n     * Get the length of the Mime names within the property value\n     * @param val The value of the property, which should contain a comma\n     * separated list of Mime names, followed optionally by a space and the\n     * high char value\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isHighUTF16Surrogate(char ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the character is the high member of a surrogate pair.\n     * <p>\n     * This is not a public API.\n     * @param ch the character to test\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isLowUTF16Surrogate(char ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the character is the low member of a surrogate pair.\n     * <p>\n     * This is not a public API.\n     * @param ch the character to test\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " static int toCodePoint(char highSurrogate, char lowSurrogate)",
    "returnType" : "int",
    "comment" : "\n     * Return the unicode code point represented by the high/low surrogate pair.\n     * <p>\n     * This is not a public API.\n     * @param highSurrogate the high char of the high/low pair\n     * @param lowSurrogate the low char of the high/low pair\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " static int toCodePoint(char ch)",
    "returnType" : "int",
    "comment" : "\n     * Return the unicode code point represented by the char.\n     * A bit of a dummy method, since all it does is return the char,\n     * but as an int value.\n     * <p>\n     * This is not a public API.\n     * @param ch the char.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char getHighChar(String encoding)",
    "returnType" : "char",
    "comment" : "\n     * Characters with values at or below the high code point are\n     * in the encoding. Code point values above this one may or may\n     * not be in the encoding, but lower ones certainly are.\n     * <p>\n     * This is for performance.\n     *\n     * @param encoding The encoding\n     * @return The code point for which characters at or below this code point\n     * are in the encoding. Characters with higher code point may or may not be\n     * in the encoding. A value of zero is returned if the high code point is unknown.\n     * <p>\n     * This method is not a public API.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Writer getWriter(OutputStream output, String encoding) throws UnsupportedEncodingException", " static EncodingInfo getEncodingInfo(String encoding)", "public static boolean isRecognizedEncoding(String encoding)", "private static String toUpperCaseFast(final String s)", " static String getMimeEncoding(String encoding)", "private static String convertJava2MimeEncoding(String encoding)", "public static String convertMime2JavaEncoding(String encoding)", "private static EncodingInfo[] loadEncodingInfo()", "private static int lengthOfMimeNames(String val)", " static boolean isHighUTF16Surrogate(char ch)", " static boolean isLowUTF16Surrogate(char ch)", " static int toCodePoint(char highSurrogate, char lowSurrogate)", " static int toCodePoint(char ch)", "public static char getHighChar(String encoding)" ],
  "variableNames" : [ "ENCODINGS_FILE", "DEFAULT_MIME_ENCODING", "_encodingTableKeyJava", "_encodingTableKeyMime", "_encodings" ]
}