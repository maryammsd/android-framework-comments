{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PowerWhitelistManager.java",
  "packageName" : "android.os",
  "className" : "PowerWhitelistManager",
  "comment" : "\n * Interface to access and modify the permanent and temporary power save allowlist. The two lists\n * are kept separately. Apps placed on the permanent allowlist are only removed via an explicit\n * removeFromAllowlist call. Apps whitelisted by default by the system cannot be removed. Apps\n * placed on the temporary allowlist are removed from that allowlist after a predetermined amount of\n * time.\n *\n * @deprecated Use {@link PowerExemptionManager} instead\n * @hide\n ",
  "links" : [ "android.os.PowerExemptionManager" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IDeviceIdleController",
    "comment" : " TODO: migrate to PowerWhitelistController",
    "links" : [ ]
  }, {
    "name" : "mPowerExemptionManager",
    "type" : "PowerExemptionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Indicates that an unforeseen event has occurred and the app should be allowlisted to handle\n     * it.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_SMS",
    "type" : "int",
    "comment" : "\n     * Indicates that an SMS event has occurred and the app should be allowlisted to handle it.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_MMS",
    "type" : "int",
    "comment" : "\n     * Indicates that an MMS event has occurred and the app should be allowlisted to handle it.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEMPORARY_ALLOWLIST_TYPE_FOREGROUND_SERVICE_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Allow the temp allowlist behavior, plus allow foreground service start from background.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEMPORARY_ALLOWLIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Only allow the temp allowlist behavior, not allow foreground service start from\n     * background.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_DENIED",
    "type" : "int",
    "comment" : "\n     * BG-FGS-launch is denied.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The default reason code if reason is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_OTHER",
    "type" : "int",
    "comment" : "\n     * Use REASON_OTHER if there is no better choice.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROC_STATE_PERSISTENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROC_STATE_PERSISTENT_UI",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROC_STATE_TOP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROC_STATE_BTOP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROC_STATE_FGS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROC_STATE_BFGS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_UID_VISIBLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_SYSTEM_UID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_ACTIVITY_STARTER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_START_ACTIVITY_FLAG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_FGS_BINDING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_DEVICE_OWNER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_PROFILE_OWNER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_COMPANION_DEVICE_MANAGER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_BACKGROUND_ACTIVITY_PERMISSION",
    "type" : "int",
    "comment" : "\n     * START_ACTIVITIES_FROM_BACKGROUND permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_BACKGROUND_FGS_PERMISSION",
    "type" : "int",
    "comment" : "\n     * START_FOREGROUND_SERVICES_FROM_BACKGROUND permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_INSTR_BACKGROUND_ACTIVITY_PERMISSION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_INSTR_BACKGROUND_FGS_PERMISSION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_SYSTEM_ALERT_WINDOW_PERMISSION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_DEVICE_DEMO_MODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_ALLOWLISTED_PACKAGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_APPOP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_GEOFENCING",
    "type" : "int",
    "comment" : "\n     * Set temp-allowlist for location geofence purpose.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PUSH_MESSAGING",
    "type" : "int",
    "comment" : "\n     * Set temp-allowlist for server push messaging.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PUSH_MESSAGING_OVER_QUOTA",
    "type" : "int",
    "comment" : "\n     * Set temp-allowlist for server push messaging over the quota.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_ACTIVITY_RECOGNITION",
    "type" : "int",
    "comment" : "\n     * Set temp-allowlist for activity recognition.\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_BOOT_COMPLETED",
    "type" : "int",
    "comment" : "\n     * Broadcast ACTION_BOOT_COMPLETED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PRE_BOOT_COMPLETED",
    "type" : "int",
    "comment" : "\n     * Broadcast ACTION_PRE_BOOT_COMPLETED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_LOCKED_BOOT_COMPLETED",
    "type" : "int",
    "comment" : "\n     * Broadcast ACTION_LOCKED_BOOT_COMPLETED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_SYSTEM_ALLOW_LISTED",
    "type" : "int",
    "comment" : "\n     * Device idle system allowlist, including EXCEPT-IDLE\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_ALARM_MANAGER_ALARM_CLOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_ALARM_MANAGER_WHILE_IDLE",
    "type" : "int",
    "comment" : "\n     * AlarmManagerService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_SERVICE_LAUNCH",
    "type" : "int",
    "comment" : "\n     * ActiveServices.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_KEY_CHAIN",
    "type" : "int",
    "comment" : "\n     * KeyChainSystemService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PACKAGE_VERIFIER",
    "type" : "int",
    "comment" : "\n     * PackageManagerService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_SYNC_MANAGER",
    "type" : "int",
    "comment" : "\n     * SyncManager.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_DOMAIN_VERIFICATION_V1",
    "type" : "int",
    "comment" : "\n     * DomainVerificationProxyV1.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_DOMAIN_VERIFICATION_V2",
    "type" : "int",
    "comment" : "\n     * DomainVerificationProxyV2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_VPN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "REASON_NOTIFICATION_SERVICE",
    "type" : "int",
    "comment" : "\n     * NotificationManagerService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_PACKAGE_REPLACED",
    "type" : "int",
    "comment" : "\n     * Broadcast ACTION_MY_PACKAGE_REPLACED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_LOCATION_PROVIDER",
    "type" : "int",
    "comment" : "\n     * LocationProvider.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_MEDIA_BUTTON",
    "type" : "int",
    "comment" : "\n     * MediaButtonReceiver.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_EVENT_SMS",
    "type" : "int",
    "comment" : "\n     * InboundSmsHandler.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_EVENT_MMS",
    "type" : "int",
    "comment" : "\n     * InboundSmsHandler.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_SHELL",
    "type" : "int",
    "comment" : "\n     * Shell app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_TILE_ONCLICK",
    "type" : "int",
    "comment" : "\n     * Tile onClick event\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addToWhitelist(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Add the specified package to the permanent power save allowlist.\n     *\n     * @deprecated Use {@link PowerExemptionManager#addToPermanentAllowList(String)} instead\n     ",
    "links" : [ "android.os.PowerExemptionManager#addToPermanentAllowList(String)" ]
  }, {
    "name" : "public void addToWhitelist(@NonNull List<String> packageNames)",
    "returnType" : "void",
    "comment" : "\n     * Add the specified packages to the permanent power save allowlist.\n     *\n     * @deprecated Use {@link PowerExemptionManager#addToPermanentAllowList(List)} instead\n     ",
    "links" : [ "android.os.PowerExemptionManager#addToPermanentAllowList(List)" ]
  }, {
    "name" : "public int[] getWhitelistedAppIds(boolean includingIdle)",
    "returnType" : "int[]",
    "comment" : "\n     * Get a list of app IDs of app that are allowlisted. This does not include temporarily\n     * allowlisted apps.\n     *\n     * @param includingIdle Set to true if the app should be allowlisted from device idle as well\n     *                      as other power save restrictions\n     * @deprecated Use {@link PowerExemptionManager#getAllowListedAppIds(boolean)} instead\n     * @hide\n     ",
    "links" : [ "android.os.PowerExemptionManager#getAllowListedAppIds(boolean)" ]
  }, {
    "name" : "public boolean isWhitelisted(@NonNull String packageName, boolean includingIdle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the app is allowlisted from power save restrictions. This does not include\n     * temporarily allowlisted apps.\n     *\n     * @param includingIdle Set to true if the app should be allowlisted from device\n     *                      idle as well as other power save restrictions\n     * @deprecated Use {@link PowerExemptionManager#isAllowListed(String, boolean)} instead\n     * @hide\n     ",
    "links" : [ "android.os.PowerExemptionManager#isAllowListed(String" ]
  }, {
    "name" : "public void removeFromWhitelist(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Remove an app from the permanent power save allowlist. Only apps that were added via\n     * {@link #addToWhitelist(String)} or {@link #addToWhitelist(List)} will be removed. Apps\n     * allowlisted by default by the system cannot be removed.\n     *\n     * @param packageName The app to remove from the allowlist\n     * @deprecated Use {@link PowerExemptionManager#removeFromPermanentAllowList(String)} instead\n     ",
    "links" : [ "#addToWhitelist(String)", "android.os.PowerExemptionManager#removeFromPermanentAllowList(String)", "#addToWhitelist(List)" ]
  }, {
    "name" : "public void whitelistAppTemporarily(@NonNull String packageName, long durationMs, @ReasonCode int reasonCode, @Nullable String reason)",
    "returnType" : "void",
    "comment" : "\n     * Add an app to the temporary allowlist for a short amount of time.\n     *\n     * @param packageName The package to add to the temp allowlist\n     * @param durationMs  How long to keep the app on the temp allowlist for (in milliseconds)\n     * @param reasonCode one of {@link ReasonCode}, use {@link #REASON_UNKNOWN} if not sure.\n     * @param reason a optional human readable reason string, could be null or empty string.\n     * @deprecated Use {@link PowerExemptionManager#addToTemporaryAllowList(\n     *             String, int, String, long)} instead\n     ",
    "links" : [ "#REASON_UNKNOWN", "ReasonCode", "android.os.PowerExemptionManager#addToTemporaryAllowList(" ]
  }, {
    "name" : "public void whitelistAppTemporarily(@NonNull String packageName, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Add an app to the temporary allowlist for a short amount of time.\n     *\n     * @param packageName The package to add to the temp allowlist\n     * @param durationMs  How long to keep the app on the temp allowlist for (in milliseconds)\n     * @deprecated Use {@link PowerExemptionManager#addToTemporaryAllowList(\n     *             String, int, String, long)} instead\n     ",
    "links" : [ "android.os.PowerExemptionManager#addToTemporaryAllowList(" ]
  }, {
    "name" : "public long whitelistAppTemporarilyForEvent(@NonNull String packageName, @WhitelistEvent int event, @Nullable String reason)",
    "returnType" : "long",
    "comment" : "\n     * Add an app to the temporary allowlist for a short amount of time for a specific reason. The\n     * temporary allowlist is kept separately from the permanent allowlist and apps are\n     * automatically removed from the temporary allowlist after a predetermined amount of time.\n     *\n     * @param packageName The package to add to the temp allowlist\n     * @param event       The reason to add the app to the temp allowlist\n     * @param reason      A human-readable reason explaining why the app is temp allowlisted. Only\n     *                    used for logging purposes. Could be null or empty string.\n     * @return The duration (in milliseconds) that the app is allowlisted for\n     * @deprecated Use {@link PowerExemptionManager#addToTemporaryAllowListForEvent(\n     *             String, int, String, int)} instead\n     ",
    "links" : [ "android.os.PowerExemptionManager#addToTemporaryAllowListForEvent(" ]
  }, {
    "name" : "public long whitelistAppTemporarilyForEvent(@NonNull String packageName, @WhitelistEvent int event, @ReasonCode int reasonCode, @Nullable String reason)",
    "returnType" : "long",
    "comment" : "\n     * Add an app to the temporary allowlist for a short amount of time for a specific reason. The\n     * temporary allowlist is kept separately from the permanent allowlist and apps are\n     * automatically removed from the temporary allowlist after a predetermined amount of time.\n     *\n     * @param packageName The package to add to the temp allowlist\n     * @param event       The reason to add the app to the temp allowlist\n     * @param reasonCode  one of {@link ReasonCode}, use {@link #REASON_UNKNOWN} if not sure.\n     * @param reason      A human-readable reason explaining why the app is temp allowlisted. Only\n     *                    used for logging purposes. Could be null or empty string.\n     * @return The duration (in milliseconds) that the app is allowlisted for\n     * @deprecated Use {@link PowerExemptionManager#addToTemporaryAllowListForEvent(\n     *             String, int, String, int)} instead\n     ",
    "links" : [ "#REASON_UNKNOWN", "ReasonCode", "android.os.PowerExemptionManager#addToTemporaryAllowListForEvent(" ]
  }, {
    "name" : "public static int getReasonCodeFromProcState(int procState)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     *\n     * @deprecated Use {@link PowerExemptionManager#getReasonCodeFromProcState(int)} instead\n     ",
    "links" : [ "android.os.PowerExemptionManager#getReasonCodeFromProcState(int)" ]
  }, {
    "name" : "public static String reasonCodeToString(@ReasonCode int reasonCode)",
    "returnType" : "String",
    "comment" : "\n     * Return string name of the integer reason code.\n     * @hide\n     * @param reasonCode\n     * @return string name of the reason code.\n     * @deprecated Use {@link PowerExemptionManager#reasonCodeToString(int)} instead\n     ",
    "links" : [ "android.os.PowerExemptionManager#reasonCodeToString(int)" ]
  } ],
  "methodNames" : [ "public void addToWhitelist(@NonNull String packageName)", "public void addToWhitelist(@NonNull List<String> packageNames)", "public int[] getWhitelistedAppIds(boolean includingIdle)", "public boolean isWhitelisted(@NonNull String packageName, boolean includingIdle)", "public void removeFromWhitelist(@NonNull String packageName)", "public void whitelistAppTemporarily(@NonNull String packageName, long durationMs, @ReasonCode int reasonCode, @Nullable String reason)", "public void whitelistAppTemporarily(@NonNull String packageName, long durationMs)", "public long whitelistAppTemporarilyForEvent(@NonNull String packageName, @WhitelistEvent int event, @Nullable String reason)", "public long whitelistAppTemporarilyForEvent(@NonNull String packageName, @WhitelistEvent int event, @ReasonCode int reasonCode, @Nullable String reason)", "public static int getReasonCodeFromProcState(int procState)", "public static String reasonCodeToString(@ReasonCode int reasonCode)" ],
  "variableNames" : [ "mContext", "mService", "mPowerExemptionManager", "EVENT_UNSPECIFIED", "EVENT_SMS", "EVENT_MMS", "TEMPORARY_ALLOWLIST_TYPE_FOREGROUND_SERVICE_ALLOWED", "TEMPORARY_ALLOWLIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED", "REASON_DENIED", "REASON_UNKNOWN", "REASON_OTHER", "REASON_PROC_STATE_PERSISTENT", "REASON_PROC_STATE_PERSISTENT_UI", "REASON_PROC_STATE_TOP", "REASON_PROC_STATE_BTOP", "REASON_PROC_STATE_FGS", "REASON_PROC_STATE_BFGS", "REASON_UID_VISIBLE", "REASON_SYSTEM_UID", "REASON_ACTIVITY_STARTER", "REASON_START_ACTIVITY_FLAG", "REASON_FGS_BINDING", "REASON_DEVICE_OWNER", "REASON_PROFILE_OWNER", "REASON_COMPANION_DEVICE_MANAGER", "REASON_BACKGROUND_ACTIVITY_PERMISSION", "REASON_BACKGROUND_FGS_PERMISSION", "REASON_INSTR_BACKGROUND_ACTIVITY_PERMISSION", "REASON_INSTR_BACKGROUND_FGS_PERMISSION", "REASON_SYSTEM_ALERT_WINDOW_PERMISSION", "REASON_DEVICE_DEMO_MODE", "REASON_ALLOWLISTED_PACKAGE", "REASON_APPOP", "REASON_GEOFENCING", "REASON_PUSH_MESSAGING", "REASON_PUSH_MESSAGING_OVER_QUOTA", "REASON_ACTIVITY_RECOGNITION", "REASON_BOOT_COMPLETED", "REASON_PRE_BOOT_COMPLETED", "REASON_LOCKED_BOOT_COMPLETED", "REASON_SYSTEM_ALLOW_LISTED", "REASON_ALARM_MANAGER_ALARM_CLOCK", "REASON_ALARM_MANAGER_WHILE_IDLE", "REASON_SERVICE_LAUNCH", "REASON_KEY_CHAIN", "REASON_PACKAGE_VERIFIER", "REASON_SYNC_MANAGER", "REASON_DOMAIN_VERIFICATION_V1", "REASON_DOMAIN_VERIFICATION_V2", "REASON_VPN", "REASON_NOTIFICATION_SERVICE", "REASON_PACKAGE_REPLACED", "REASON_LOCATION_PROVIDER", "REASON_MEDIA_BUTTON", "REASON_EVENT_SMS", "REASON_EVENT_MMS", "REASON_SHELL", "REASON_TILE_ONCLICK" ]
}