{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemAttribute.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemAttribute",
  "comment" : "\n * Implement xsl:attribute.\n * <pre>\n * &amp;!ELEMENT xsl:attribute %char-template;>\n * &amp;!ATTLIST xsl:attribute\n *   name %avt; #REQUIRED\n *   namespace %avt; #IMPLIED\n *   %space-att;\n * &amp;\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#creating-attributes\">creating-attributes in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element name \n   ",
    "links" : [ ]
  }, {
    "name" : "protected String resolvePrefix(SerializationHandler rhandler, String prefix, String nodeNamespace) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Resolve the namespace into a prefix.  At this level, if no prefix exists, \n   * then return a manufactured prefix.\n   *\n   * @param rhandler The current result tree handler.\n   * @param prefix The probable prefix if already known.\n   * @param nodeNamespace  The namespace, which should not be null.\n   *\n   * @return The prefix to be used.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean validateNodeName(String nodeName)",
    "returnType" : "boolean",
    "comment" : "\n   * Validate that the node name is good.\n   * \n   * @param nodeName Name of the node being constructed, which may be null.\n   * \n   * @return true if the node name is valid, false otherwise.\n   ",
    "links" : [ ]
  }, {
    "name" : " void constructNode(String nodeName, String prefix, String nodeNamespace, TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Construct a node in the result tree.  This method is overloaded by \n   * xsl:attribute. At this class level, this method creates an element.\n   *\n   * @param nodeName The name of the node, which may be null.\n   * @param prefix The prefix for the namespace, which may be null.\n   * @param nodeNamespace The namespace of the node, which may be null.\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param sourceNode non-null reference to the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current source node</a>.\n   * @param mode reference, which may be null, to the <a href=\"http://www.w3.org/TR/xslt#modes\">current mode</a>.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   * <!ELEMENT xsl:attribute %char-template;>\n   * <!ATTLIST xsl:attribute\n   *   name %avt; #REQUIRED\n   *   namespace %avt; #IMPLIED\n   *   %space-att;\n   * >\n   *\n   * @param newChild Child to append to the list of this node's children\n   *\n   * @return The node we just appended to the children list \n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setName(AVT v)",
    "returnType" : "void",
    "comment" : "\n\t * @see ElemElement#setName(AVT)\n\t ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getXSLToken()", "public String getNodeName()", "protected String resolvePrefix(SerializationHandler rhandler, String prefix, String nodeNamespace) throws TransformerException", "protected boolean validateNodeName(String nodeName)", " void constructNode(String nodeName, String prefix, String nodeNamespace, TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)", "public void setName(AVT v)" ],
  "variableNames" : [ "serialVersionUID" ]
}