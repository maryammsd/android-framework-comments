{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/TableLayout.java",
  "packageName" : "android.widget",
  "className" : "TableLayout",
  "comment" : "\n * <p>A layout that arranges its children into rows and columns.\n * A TableLayout consists of a number of {@link android.widget.TableRow} objects,\n * each defining a row (actually, you can have other children, which will be\n * explained below). TableLayout containers do not display border lines for\n * their rows, columns, or cells. Each row has zero or more cells; each cell can\n * hold one {@link android.view.View View} object. The table has as many columns\n * as the row with the most cells. A table can leave cells empty. Cells can span\n * columns, as they can in HTML.</p>\n *\n * <p>The width of a column is defined by the row with the widest cell in that\n * column. However, a TableLayout can specify certain columns as shrinkable or\n * stretchable by calling\n * {@link #setColumnShrinkable(int, boolean) setColumnShrinkable()}\n * or {@link #setColumnStretchable(int, boolean) setColumnStretchable()}. If\n * marked as shrinkable, the column width can be shrunk to fit the table into\n * its parent object. If marked as stretchable, it can expand in width to fit\n * any extra space. The total width of the table is defined by its parent\n * container. It is important to remember that a column can be both shrinkable\n * and stretchable. In such a situation, the column will change its size to\n * always use up the available space, but never more. Finally, you can hide a\n * column by calling\n * {@link #setColumnCollapsed(int,boolean) setColumnCollapsed()}.</p>\n *\n * <p>The children of a TableLayout cannot specify the <code>layout_width</code>\n * attribute. Width is always <code>MATCH_PARENT</code>. However, the\n * <code>layout_height</code> attribute can be defined by a child; default value\n * is {@link android.widget.TableLayout.LayoutParams#WRAP_CONTENT}. If the child\n * is a {@link android.widget.TableRow}, then the height is always\n * {@link android.widget.TableLayout.LayoutParams#WRAP_CONTENT}.</p>\n *\n * <p> Cells must be added to a row in increasing column order, both in code and\n * XML. Column numbers are zero-based. If you don't specify a column number for\n * a child cell, it will autoincrement to the next available column. If you skip\n * a column number, it will be considered an empty cell in that row. See the\n * TableLayout examples in ApiDemos for examples of creating tables in XML.</p>\n *\n * <p>Although the typical child of a TableLayout is a TableRow, you can\n * actually use any View subclass as a direct child of TableLayout. The View\n * will be displayed as a single row that spans all the table columns.</p>\n *\n ",
  "links" : [ "android.widget.TableLayout.LayoutParams#WRAP_CONTENT", "#setColumnStretchable(int", "android.widget.TableRow", "android.view.View", "#setColumnCollapsed(int", "#setColumnShrinkable(int" ],
  "variables" : [ {
    "name" : "mMaxWidths",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStretchableColumns",
    "type" : "SparseBooleanArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShrinkableColumns",
    "type" : "SparseBooleanArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapsedColumns",
    "type" : "SparseBooleanArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShrinkAllColumns",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStretchAllColumns",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPassThroughListener",
    "type" : "TableLayout.PassThroughHierarchyChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static SparseBooleanArray parseColumns(String sequence)",
    "returnType" : "SparseBooleanArray",
    "comment" : "\n     * <p>Parses a sequence of columns ids defined in a CharSequence with the\n     * following pattern (regex): \\d+(\\s*,\\s*\\d+)*</p>\n     *\n     * <p>Examples: \"1\" or \"13, 7, 6\" or \"\".</p>\n     *\n     * <p>The result of the parsing is stored in a sparse boolean array. The\n     * parsed column ids are used as the keys of the sparse array. The values\n     * are always true.</p>\n     *\n     * @param sequence a sequence of column ids, can be empty but not null\n     * @return a sparse array of boolean mapping column indexes to the columns\n     *         collapse state\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initTableLayout()",
    "returnType" : "void",
    "comment" : "\n     * <p>Performs initialization common to prorgrammatic use and XML use of\n     * this widget.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnHierarchyChangeListener(OnHierarchyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void requestRowsLayout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isShrinkAllColumns()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether all columns are shrinkable or not.</p>\n     *\n     * @return true if all columns are shrinkable, false otherwise\n     *\n     * @attr ref android.R.styleable#TableLayout_shrinkColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShrinkAllColumns(boolean shrinkAllColumns)",
    "returnType" : "void",
    "comment" : "\n     * <p>Convenience method to mark all columns as shrinkable.</p>\n     *\n     * @param shrinkAllColumns true to mark all columns shrinkable\n     *\n     * @attr ref android.R.styleable#TableLayout_shrinkColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStretchAllColumns()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether all columns are stretchable or not.</p>\n     *\n     * @return true if all columns are stretchable, false otherwise\n     *\n     * @attr ref android.R.styleable#TableLayout_stretchColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStretchAllColumns(boolean stretchAllColumns)",
    "returnType" : "void",
    "comment" : "\n     * <p>Convenience method to mark all columns as stretchable.</p>\n     *\n     * @param stretchAllColumns true to mark all columns stretchable\n     *\n     * @attr ref android.R.styleable#TableLayout_stretchColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColumnCollapsed(int columnIndex, boolean isCollapsed)",
    "returnType" : "void",
    "comment" : "\n     * <p>Collapses or restores a given column. When collapsed, a column\n     * does not appear on screen and the extra space is reclaimed by the\n     * other columns. A column is collapsed/restored only when it belongs to\n     * a {@link android.widget.TableRow}.</p>\n     *\n     * <p>Calling this method requests a layout operation.</p>\n     *\n     * @param columnIndex the index of the column\n     * @param isCollapsed true if the column must be collapsed, false otherwise\n     *\n     * @attr ref android.R.styleable#TableLayout_collapseColumns\n     ",
    "links" : [ "android.widget.TableRow" ]
  }, {
    "name" : "public boolean isColumnCollapsed(int columnIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns the collapsed state of the specified column.</p>\n     *\n     * @param columnIndex the index of the column\n     * @return true if the column is collapsed, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColumnStretchable(int columnIndex, boolean isStretchable)",
    "returnType" : "void",
    "comment" : "\n     * <p>Makes the given column stretchable or not. When stretchable, a column\n     * takes up as much as available space as possible in its row.</p>\n     *\n     * <p>Calling this method requests a layout operation.</p>\n     *\n     * @param columnIndex the index of the column\n     * @param isStretchable true if the column must be stretchable,\n     *                      false otherwise. Default is false.\n     *\n     * @attr ref android.R.styleable#TableLayout_stretchColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isColumnStretchable(int columnIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns whether the specified column is stretchable or not.</p>\n     *\n     * @param columnIndex the index of the column\n     * @return true if the column is stretchable, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColumnShrinkable(int columnIndex, boolean isShrinkable)",
    "returnType" : "void",
    "comment" : "\n     * <p>Makes the given column shrinkable or not. When a row is too wide, the\n     * table can reclaim extra space from shrinkable columns.</p>\n     *\n     * <p>Calling this method requests a layout operation.</p>\n     *\n     * @param columnIndex the index of the column\n     * @param isShrinkable true if the column must be shrinkable,\n     *                     false otherwise. Default is false.\n     *\n     * @attr ref android.R.styleable#TableLayout_shrinkColumns\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isColumnShrinkable(int columnIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Returns whether the specified column is shrinkable or not.</p>\n     *\n     * @param columnIndex the index of the column\n     * @return true if the column is shrinkable, false otherwise. Default is false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void trackCollapsedColumns(View child)",
    "returnType" : "void",
    "comment" : "\n     * <p>Applies the columns collapse status to a new row added to this\n     * table. This method is invoked by PassThroughHierarchyChangeListener\n     * upon child insertion.</p>\n     *\n     * <p>This method only applies to {@link android.widget.TableRow}\n     * instances.</p>\n     *\n     * @param child the newly added child\n     ",
    "links" : [ "android.widget.TableRow" ]
  }, {
    "name" : "public void addView(View child)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void measureChildBeforeLayout(View child, int childIndex, int widthMeasureSpec, int totalWidth, int heightMeasureSpec, int totalHeight)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void measureVertical(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void findLargestCells(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * <p>Finds the largest cell in each column. For each column, the width of\n     * the largest cell is applied to all the other cells.</p>\n     *\n     * @param widthMeasureSpec the measure constraint imposed by our parent\n     ",
    "links" : [ ]
  }, {
    "name" : "private void shrinkAndStretchColumns(int widthMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * <p>Shrinks the columns if their total width is greater than the\n     * width allocated by widthMeasureSpec. When the total width is less\n     * than the allocated width, this method attempts to stretch columns\n     * to fill the remaining space.</p>\n     *\n     * @param widthMeasureSpec the width measure specification as indicated\n     *                         by this widget's parent\n     ",
    "links" : [ ]
  }, {
    "name" : "private void mutateColumnsWidth(SparseBooleanArray columns, boolean allColumns, int size, int totalWidth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected LinearLayout.LayoutParams generateDefaultLayoutParams()",
    "returnType" : "LinearLayout.LayoutParams",
    "comment" : "\n     * Returns a set of layout parameters with a width of\n     * {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT},\n     * and a height of {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}.\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected LinearLayout.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "LinearLayout.LayoutParams",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static SparseBooleanArray parseColumns(String sequence)", "private void initTableLayout()", "public void setOnHierarchyChangeListener(OnHierarchyChangeListener listener)", "private void requestRowsLayout()", "public void requestLayout()", "public boolean isShrinkAllColumns()", "public void setShrinkAllColumns(boolean shrinkAllColumns)", "public boolean isStretchAllColumns()", "public void setStretchAllColumns(boolean stretchAllColumns)", "public void setColumnCollapsed(int columnIndex, boolean isCollapsed)", "public boolean isColumnCollapsed(int columnIndex)", "public void setColumnStretchable(int columnIndex, boolean isStretchable)", "public boolean isColumnStretchable(int columnIndex)", "public void setColumnShrinkable(int columnIndex, boolean isShrinkable)", "public boolean isColumnShrinkable(int columnIndex)", "private void trackCollapsedColumns(View child)", "public void addView(View child)", "public void addView(View child, int index)", "public void addView(View child, ViewGroup.LayoutParams params)", "public void addView(View child, int index, ViewGroup.LayoutParams params)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", " void measureChildBeforeLayout(View child, int childIndex, int widthMeasureSpec, int totalWidth, int heightMeasureSpec, int totalHeight)", " void measureVertical(int widthMeasureSpec, int heightMeasureSpec)", "private void findLargestCells(int widthMeasureSpec, int heightMeasureSpec)", "private void shrinkAndStretchColumns(int widthMeasureSpec)", "private void mutateColumnsWidth(SparseBooleanArray columns, boolean allColumns, int size, int totalWidth)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "protected LinearLayout.LayoutParams generateDefaultLayoutParams()", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "protected LinearLayout.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "public CharSequence getAccessibilityClassName()" ],
  "variableNames" : [ "mMaxWidths", "mStretchableColumns", "mShrinkableColumns", "mCollapsedColumns", "mShrinkAllColumns", "mStretchAllColumns", "mPassThroughListener", "mInitialized" ]
}