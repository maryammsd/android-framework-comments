{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/TvInputInfo.java",
  "packageName" : "android.media.tv",
  "className" : "TvInputInfo",
  "comment" : "\n * This class is used to specify meta information of a TV input.\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_TUNER",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service is a tuner which provides channels.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_OTHER",
    "type" : "int",
    "comment" : "\n     * TV input type: a generic hardware TV input type.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_COMPOSITE",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a composite port.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SVIDEO",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a SVIDEO port.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCART",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a SCART port.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_COMPONENT",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a component port.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VGA",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a VGA port.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DVI",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a DVI port.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HDMI",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service is HDMI. (e.g. HDMI 1)\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DISPLAY_PORT",
    "type" : "int",
    "comment" : "\n     * TV input type: the TV input service represents a display port.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INPUT_ID",
    "type" : "String",
    "comment" : "\n     * Used as a String extra field in setup intents created by {@link #createSetupIntent()} to\n     * supply the ID of a specific TV input to set up.\n     ",
    "links" : [ "#createSetupIntent()" ]
  }, {
    "name" : "mService",
    "type" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsHardwareInput",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconUri",
    "type" : "Uri",
    "comment" : " TODO: Remove mIconUri when createTvInputInfo() is removed.",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabelResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconStandby",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconDisconnected",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSetupActivity",
    "type" : "String",
    "comment" : " Attributes from XML meta data.",
    "links" : [ ]
  }, {
    "name" : "mCanRecord",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTunerCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHdmiDeviceInfo",
    "type" : "HdmiDeviceInfo",
    "comment" : " Attributes specific to HDMI",
    "links" : [ ]
  }, {
    "name" : "mIsConnectedToHdmiSwitch",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHdmiConnectionRelativePosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<TvInputInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, HdmiDeviceInfo hdmiDeviceInfo, String parentId, String label, Uri iconUri) throws XmlPullParserException, IOException",
    "returnType" : "TvInputInfo",
    "comment" : "\n     * Create a new instance of the TvInputInfo class, instantiating it from the given Context,\n     * ResolveInfo, and HdmiDeviceInfo.\n     *\n     * @param service The ResolveInfo returned from the package manager about this TV input service.\n     * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.\n     * @param parentId The ID of this TV input's parent input. {@code null} if none exists.\n     * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}\n     *            label will be loaded.\n     * @param iconUri The {@link android.net.Uri} to load the icon image. See\n     *            {@link android.content.ContentResolver#openInputStream}. If it is {@code null},\n     *            the application icon of {@code service} will be loaded.\n     * @hide\n     * @deprecated Use {@link Builder} instead.\n     ",
    "links" : [ "android.content.ContentResolver#openInputStream", "Builder", "android.net.Uri" ]
  }, {
    "name" : "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, HdmiDeviceInfo hdmiDeviceInfo, String parentId, int labelRes, Icon icon) throws XmlPullParserException, IOException",
    "returnType" : "TvInputInfo",
    "comment" : "\n     * Create a new instance of the TvInputInfo class, instantiating it from the given Context,\n     * ResolveInfo, and HdmiDeviceInfo.\n     *\n     * @param service The ResolveInfo returned from the package manager about this TV input service.\n     * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.\n     * @param parentId The ID of this TV input's parent input. {@code null} if none exists.\n     * @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0},\n     *            {@code service} label will be loaded.\n     * @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is\n     *            {@code null}, the application icon of {@code service} will be loaded.\n     * @hide\n     * @deprecated Use {@link Builder} instead.\n     ",
    "links" : [ "Builder", "android.graphics.drawable.Icon" ]
  }, {
    "name" : "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, TvInputHardwareInfo hardwareInfo, String label, Uri iconUri) throws XmlPullParserException, IOException",
    "returnType" : "TvInputInfo",
    "comment" : "\n     * Create a new instance of the TvInputInfo class, instantiating it from the given Context,\n     * ResolveInfo, and TvInputHardwareInfo.\n     *\n     * @param service The ResolveInfo returned from the package manager about this TV input service.\n     * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.\n     * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}\n     *            label will be loaded.\n     * @param iconUri The {@link android.net.Uri} to load the icon image. See\n     *            {@link android.content.ContentResolver#openInputStream}. If it is {@code null},\n     *            the application icon of {@code service} will be loaded.\n     * @hide\n     * @deprecated Use {@link Builder} instead.\n     ",
    "links" : [ "android.content.ContentResolver#openInputStream", "Builder", "android.net.Uri" ]
  }, {
    "name" : "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, TvInputHardwareInfo hardwareInfo, int labelRes, Icon icon) throws XmlPullParserException, IOException",
    "returnType" : "TvInputInfo",
    "comment" : "\n     * Create a new instance of the TvInputInfo class, instantiating it from the given Context,\n     * ResolveInfo, and TvInputHardwareInfo.\n     *\n     * @param service The ResolveInfo returned from the package manager about this TV input service.\n     * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.\n     * @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0},\n     *            {@code service} label will be loaded.\n     * @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is\n     *            {@code null}, the application icon of {@code service} will be loaded.\n     * @hide\n     * @deprecated Use {@link Builder} instead.\n     ",
    "links" : [ "Builder", "android.graphics.drawable.Icon" ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns a unique ID for this TV input. The ID is generated from the package and class name\n     * implementing the TV input service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getParentId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the parent input ID.\n     *\n     * <p>A TV input may have a parent input if the TV input is actually a logical representation of\n     * a device behind the hardware port represented by the parent input.\n     * For example, a HDMI CEC logical device, connected to a HDMI port, appears as another TV\n     * input. In this case, the parent input of this logical device is the HDMI port.\n     *\n     * <p>Applications may group inputs by parent input ID to provide an easier access to inputs\n     * sharing the same physical port. In the example of HDMI CEC, logical HDMI CEC devices behind\n     * the same HDMI port have the same parent ID, which is the ID representing the port. Thus\n     * applications can group the hardware HDMI port and the logical HDMI CEC devices behind it\n     * together using this method.\n     *\n     * @return the ID of the parent input, if exists. Returns {@code null} if the parent input is\n     *         not specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo()",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * Returns the information of the service that implements this TV input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the component of the service that implements this TV input.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent createSetupIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an intent to start the setup activity for this TV input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent createSettingsIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an intent to start the settings activity for this TV input.\n     *\n     * @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated.\n     *             Use setup activity instead to provide settings.\n     ",
    "links" : [ "#createSetupIntent()" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of this TV input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTunerCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of tuners this TV input has.\n     *\n     * <p>This method is valid only for inputs of type {@link #TYPE_TUNER}. For inputs of other\n     * types, it returns 0.\n     *\n     * <p>Tuners correspond to physical/logical resources that allow reception of TV signal. Having\n     * <i>N</i> tuners means that the TV input is capable of receiving <i>N</i> different channels\n     * concurrently.\n     ",
    "links" : [ "#TYPE_TUNER" ]
  }, {
    "name" : "public boolean canRecord()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this TV input can record TV programs, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns domain-specific extras associated with this TV input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public HdmiDeviceInfo getHdmiDeviceInfo()",
    "returnType" : "HdmiDeviceInfo",
    "comment" : "\n     * Returns the HDMI device information of this TV input.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPassthroughInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this TV input is pass-though which does not have any real channels in\n     * TvProvider. {@code false} otherwise.\n     *\n     * @see TvContract#buildChannelUriForPassthroughInput(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this TV input represents a hardware device. (e.g. built-in tuner,\n     * HDMI1) {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnectedToHdmiSwitch()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true}, if a CEC device for this TV input is connected to an HDMI switch, i.e.,\n     * the device isn't directly connected to a HDMI port.\n     * TODO(b/110094868): add @Deprecated for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHdmiConnectionRelativePosition()",
    "returnType" : "int",
    "comment" : "\n     * Returns the relative position of this HDMI input.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHidden(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this TV input is marked hidden by the user in the settings.\n     *\n     * @param context Supplies a {@link Context} used to check if this TV input is hidden.\n     * @return {@code true} if the user marked this TV input hidden in settings. {@code false}\n     *         otherwise.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public CharSequence loadLabel(@NonNull Context context)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Loads the user-displayed label for this TV input.\n     *\n     * @param context Supplies a {@link Context} used to load the label.\n     * @return a CharSequence containing the TV input's label. If the TV input does not have\n     *         a label, its name is returned.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public CharSequence loadCustomLabel(Context context)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Loads the custom label set by user in settings.\n     *\n     * @param context Supplies a {@link Context} used to load the custom label.\n     * @return a CharSequence containing the TV input's custom label. {@code null} if there is no\n     *         custom label.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public Drawable loadIcon(@NonNull Context context)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads the user-displayed icon for this TV input.\n     *\n     * @param context Supplies a {@link Context} used to load the icon.\n     * @return a Drawable containing the TV input's icon. If the TV input does not have an icon,\n     *         application's icon is returned. If it's unavailable too, {@code null} is returned.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public Drawable loadIcon(@NonNull Context context, int state)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads the user-displayed icon for this TV input per input state.\n     *\n     * @param context Supplies a {@link Context} used to load the icon.\n     * @param state The input state. Should be one of the followings.\n     *              {@link TvInputManager#INPUT_STATE_CONNECTED},\n     *              {@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} and\n     *              {@link TvInputManager#INPUT_STATE_DISCONNECTED}.\n     * @return a Drawable containing the TV input's icon for the given state or {@code null} if such\n     *         an icon is not defined.\n     * @hide\n     ",
    "links" : [ "android.content.Context", "android.media.tv.TvInputManager#INPUT_STATE_CONNECTED_STANDBY", "android.media.tv.TvInputManager#INPUT_STATE_DISCONNECTED", "android.media.tv.TvInputManager#INPUT_STATE_CONNECTED" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "private Drawable loadServiceIcon(Context context)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "TAG", "TYPE_TUNER", "TYPE_OTHER", "TYPE_COMPOSITE", "TYPE_SVIDEO", "TYPE_SCART", "TYPE_COMPONENT", "TYPE_VGA", "TYPE_DVI", "TYPE_HDMI", "TYPE_DISPLAY_PORT", "EXTRA_INPUT_ID", "mService", "mId", "mType", "mIsHardwareInput", "mIconUri", "mLabel", "mLabelResId", "mIcon", "mIconStandby", "mIconDisconnected", "mSetupActivity", "mCanRecord", "mTunerCount", "mHdmiDeviceInfo", "mIsConnectedToHdmiSwitch", "mHdmiConnectionRelativePosition", "mParentId", "mExtras", "CREATOR" ],
  "methodNames" : [ "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, HdmiDeviceInfo hdmiDeviceInfo, String parentId, String label, Uri iconUri) throws XmlPullParserException, IOException", "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, HdmiDeviceInfo hdmiDeviceInfo, String parentId, int labelRes, Icon icon) throws XmlPullParserException, IOException", "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, TvInputHardwareInfo hardwareInfo, String label, Uri iconUri) throws XmlPullParserException, IOException", "public static TvInputInfo createTvInputInfo(Context context, ResolveInfo service, TvInputHardwareInfo hardwareInfo, int labelRes, Icon icon) throws XmlPullParserException, IOException", "public String getId()", "public String getParentId()", "public ServiceInfo getServiceInfo()", "public ComponentName getComponent()", "public Intent createSetupIntent()", "public Intent createSettingsIntent()", "public int getType()", "public int getTunerCount()", "public boolean canRecord()", "public Bundle getExtras()", "public HdmiDeviceInfo getHdmiDeviceInfo()", "public boolean isPassthroughInput()", "public boolean isHardwareInput()", "public boolean isConnectedToHdmiSwitch()", "public int getHdmiConnectionRelativePosition()", "public boolean isHidden(Context context)", "public CharSequence loadLabel(@NonNull Context context)", "public CharSequence loadCustomLabel(Context context)", "public Drawable loadIcon(@NonNull Context context)", "public Drawable loadIcon(@NonNull Context context, int state)", "public int describeContents()", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private Drawable loadServiceIcon(Context context)" ]
}