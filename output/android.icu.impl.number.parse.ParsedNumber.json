{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/parse/ParsedNumber.java",
  "packageName" : "android.icu.impl.number.parse",
  "className" : "ParsedNumber",
  "comment" : "\n * Struct-like class to hold the results of a parsing routine.\n *\n * @author sffc\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "quantity",
    "type" : "DecimalQuantity_DualStorageBCD",
    "comment" : "\n     * The numerical value that was parsed.\n     ",
    "links" : [ ]
  }, {
    "name" : "charEnd",
    "type" : "int",
    "comment" : "\n     * The index of the last char consumed during parsing. If parsing started at index 0, this is equal\n     * to the number of chars consumed. This is NOT necessarily the same as the StringSegment offset;\n     * \"weak\" chars, like whitespace, change the offset, but the charsConsumed is not touched until a\n     * \"strong\" char is encountered.\n     ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Boolean flags (see constants below).\n     ",
    "links" : [ ]
  }, {
    "name" : "prefix",
    "type" : "String",
    "comment" : "\n     * The pattern string corresponding to the prefix that got consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "suffix",
    "type" : "String",
    "comment" : "\n     * The pattern string corresponding to the suffix that got consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "currencyCode",
    "type" : "String",
    "comment" : "\n     * The currency that got consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_NEGATIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERCENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMILLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_EXPONENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_DECIMAL_SEPARATOR",
    "type" : "int",
    "comment" : " public static final int FLAG_HAS_DEFAULT_CURRENCY = 0x0010; // no longer used",
    "links" : [ ]
  }, {
    "name" : "FLAG_NAN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_INFINITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_FAIL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPARATOR",
    "type" : "Comparator<ParsedNumber>",
    "comment" : " A Comparator that favors ParsedNumbers with the most chars consumed. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the data from this ParsedNumber, in effect failing the current parse.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(ParsedNumber other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCharsConsumed(StringSegment segment)",
    "returnType" : "void",
    "comment" : "\n     * Call this method to register that a \"strong\" char was consumed. This should be done after calling\n     * {@link StringSegment#setOffset} or {@link StringSegment#adjustOffset} except when the char is\n     * \"weak\", like whitespace.\n     *\n     * <p>\n     * <strong>What is a strong versus weak char?</strong> The behavior of number parsing is to \"stop\"\n     * after reading the number, even if there is other content following the number. For example, after\n     * parsing the string \"123 \" (123 followed by a space), the cursor should be set to 3, not 4, even\n     * though there are matchers that accept whitespace. In this example, the digits are strong, whereas\n     * the whitespace is weak. Grouping separators are weak, whereas decimal separators are strong. Most\n     * other chars are strong.\n     *\n     * @param segment\n     *            The current StringSegment, usually immediately following a call to setOffset.\n     ",
    "links" : [ "android.icu.impl.StringSegment#adjustOffset", "android.icu.impl.StringSegment#setOffset" ]
  }, {
    "name" : "public void postProcess()",
    "returnType" : "void",
    "comment" : " Apply certain number-related flags to the DecimalQuantity. ",
    "links" : [ ]
  }, {
    "name" : "public boolean success()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this the parse was successful. To be successful, at least one char must have been\n     * consumed, and the failure flag must not be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean seenNumber()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Number getNumber()",
    "returnType" : "Number",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Number getNumber(int parseFlags)",
    "returnType" : "Number",
    "comment" : " @param parseFlags Configuration settings from ParsingUtils.java ",
    "links" : [ ]
  }, {
    "name" : " boolean isBetterThan(ParsedNumber other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void clear()", "public void copyFrom(ParsedNumber other)", "public void setCharsConsumed(StringSegment segment)", "public void postProcess()", "public boolean success()", "public boolean seenNumber()", "public Number getNumber()", "public Number getNumber(int parseFlags)", " boolean isBetterThan(ParsedNumber other)" ],
  "variableNames" : [ "quantity", "charEnd", "flags", "prefix", "suffix", "currencyCode", "FLAG_NEGATIVE", "FLAG_PERCENT", "FLAG_PERMILLE", "FLAG_HAS_EXPONENT", "FLAG_HAS_DECIMAL_SEPARATOR", "FLAG_NAN", "FLAG_INFINITY", "FLAG_FAIL", "COMPARATOR" ]
}