{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/textservice/SpellCheckerSubtype.java",
  "packageName" : "android.view.textservice",
  "className" : "SpellCheckerSubtype",
  "comment" : "\n * This class is used to specify meta information of a subtype contained in a spell checker.\n * Subtype can describe locale (e.g. en_US, fr_FR...) used for settings.\n *\n * @see SpellCheckerInfo\n *\n * @attr ref android.R.styleable#SpellChecker_Subtype_label\n * @attr ref android.R.styleable#SpellChecker_Subtype_languageTag\n * @attr ref android.R.styleable#SpellChecker_Subtype_subtypeLocale\n * @attr ref android.R.styleable#SpellChecker_Subtype_subtypeExtraValue\n * @attr ref android.R.styleable#SpellChecker_Subtype_subtypeId\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VALUE_PAIR_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VALUE_KEY_VALUE_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_ID_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBTYPE_LANGUAGE_TAG_NONE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeHashCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeNameResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeLocale",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeLanguageTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeExtraValue",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraValueHashMapCache",
    "type" : "HashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SpellCheckerSubtype>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getNameResId()",
    "returnType" : "int",
    "comment" : "\n     * @return the name of the subtype\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocale()",
    "returnType" : "String",
    "comment" : "\n     * @return the locale of the subtype\n     *\n     * @deprecated Use {@link #getLanguageTag()} instead.\n     ",
    "links" : [ "#getLanguageTag()" ]
  }, {
    "name" : "public String getLanguageTag()",
    "returnType" : "String",
    "comment" : "\n     * @return the BCP-47 Language Tag of the subtype.  Returns an empty string when no Language Tag\n     * is specified.\n     *\n     * @see Locale#forLanguageTag(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtraValue()",
    "returnType" : "String",
    "comment" : "\n     * @return the extra value of the subtype\n     ",
    "links" : [ ]
  }, {
    "name" : "private HashMap<String, String> getExtraValueHashMap()",
    "returnType" : "HashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExtraValueKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * The string of ExtraValue in subtype should be defined as follows:\n     * example: key0,key1=value1,key2,key3,key4=value4\n     * @param key the key of extra value\n     * @return the subtype contains specified the extra value\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtraValueOf(String key)",
    "returnType" : "String",
    "comment" : "\n     * The string of ExtraValue in subtype should be defined as follows:\n     * example: key0,key1=value1,key2,key3,key4=value4\n     * @param key the key of extra value\n     * @return the value of the specified key\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocaleObject()",
    "returnType" : "Locale",
    "comment" : "\n     * @return {@link Locale} constructed from {@link #getLanguageTag()}. If the Language Tag is not\n     * specified, then try to construct from {@link #getLocale()}\n     *\n     * <p>TODO: Consider to make this a public API, or move this to support lib.</p>\n     * @hide\n     ",
    "links" : [ "#getLocale()", "#getLanguageTag()", "java.util.Locale" ]
  }, {
    "name" : "public CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @param context Context will be used for getting Locale and PackageManager.\n     * @param packageName The package name of the spell checker\n     * @param appInfo The application info of the spell checker\n     * @return a display name for this subtype. The string resource of the label (mSubtypeNameResId)\n     * can have only one %s in it. If there is, the %s part will be replaced with the locale's\n     * display name by the formatter. If there is not, this method simply returns the string\n     * specified by mSubtypeNameResId. If mSubtypeNameResId is not specified (== 0), it's up to the\n     * framework to generate an appropriate display name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int hashCodeInternal(String locale, String extraValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<SpellCheckerSubtype> sort(Context context, int flags, SpellCheckerInfo sci, List<SpellCheckerSubtype> subtypeList)",
    "returnType" : "List<SpellCheckerSubtype>",
    "comment" : "\n     * Sort the list of subtypes\n     * @param context Context will be used for getting localized strings\n     * @param flags Flags for the sort order\n     * @param sci SpellCheckerInfo of which subtypes are subject to be sorted\n     * @param subtypeList List which will be sorted\n     * @return Sorted list of subtypes\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getNameResId()", "public String getLocale()", "public String getLanguageTag()", "public String getExtraValue()", "private HashMap<String, String> getExtraValueHashMap()", "public boolean containsExtraValueKey(String key)", "public String getExtraValueOf(String key)", "public int hashCode()", "public boolean equals(@Nullable Object o)", "public Locale getLocaleObject()", "public CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo)", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)", "private static int hashCodeInternal(String locale, String extraValue)", "public static List<SpellCheckerSubtype> sort(Context context, int flags, SpellCheckerInfo sci, List<SpellCheckerSubtype> subtypeList)" ],
  "variableNames" : [ "TAG", "EXTRA_VALUE_PAIR_SEPARATOR", "EXTRA_VALUE_KEY_VALUE_SEPARATOR", "SUBTYPE_ID_NONE", "SUBTYPE_LANGUAGE_TAG_NONE", "mSubtypeId", "mSubtypeHashCode", "mSubtypeNameResId", "mSubtypeLocale", "mSubtypeLanguageTag", "mSubtypeExtraValue", "mExtraValueHashMapCache", "CREATOR" ]
}