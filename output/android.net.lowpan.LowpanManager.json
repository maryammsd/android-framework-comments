{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/lowpan/LowpanManager.java",
  "packageName" : "android.net.lowpan",
  "className" : "LowpanManager",
  "comment" : " @SystemApi",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerMap",
    "type" : "Map<Integer, ILowpanManagerListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaceCache",
    "type" : "Map<String, LowpanInterface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinderCache",
    "type" : "Map<IBinder, WeakReference<LowpanInterface>>",
    "comment" : " This is a WeakHashMap because we don't want to hold onto\n     * a strong reference to ILowpanInterface, so that it can be\n     * garbage collected if it isn't being used anymore. Since\n     * the value class holds onto this specific ILowpanInterface,\n     * we also need to have a weak reference to the value.\n     * This design pattern allows us to skip removal of items\n     * from this Map without leaking memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ILowpanManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LowpanManager from(Context context)",
    "returnType" : "LowpanManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LowpanManager getManager()",
    "returnType" : "LowpanManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public LowpanInterface getInterfaceNoCreate(@NonNull ILowpanInterface ifaceService)",
    "returnType" : "LowpanInterface",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public LowpanInterface getInterface(@NonNull ILowpanInterface ifaceService)",
    "returnType" : "LowpanInterface",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public LowpanInterface getInterface(@NonNull String name)",
    "returnType" : "LowpanInterface",
    "comment" : "\n     * Returns a reference to the requested LowpanInterface object. If the given interface doesn't\n     * exist, or it is not a LoWPAN interface, returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LowpanInterface getInterface()",
    "returnType" : "LowpanInterface",
    "comment" : "\n     * Returns a reference to the first registered LowpanInterface object. If there are no LoWPAN\n     * interfaces registered, returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getInterfaceList()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a string array containing the names of LoWPAN interfaces. This list may contain fewer\n     * interfaces if the calling process does not have permissions to see individual interfaces.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull Callback cb, @Nullable Handler handler) throws LowpanException",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback object to receive notifications when LoWPAN interfaces are added or\n     * removed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull Callback cb) throws LowpanException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback cb)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered {@link LowpanManager.Callback} object.\n     *\n     * @hide\n     ",
    "links" : [ "LowpanManager.Callback" ]
  } ],
  "variableNames" : [ "TAG", "mListenerMap", "mInterfaceCache", "mBinderCache", "mService", "mContext", "mLooper" ],
  "methodNames" : [ "public static LowpanManager from(Context context)", "public static LowpanManager getManager()", "public LowpanInterface getInterfaceNoCreate(@NonNull ILowpanInterface ifaceService)", "public LowpanInterface getInterface(@NonNull ILowpanInterface ifaceService)", "public LowpanInterface getInterface(@NonNull String name)", "public LowpanInterface getInterface()", "public String[] getInterfaceList()", "public void registerCallback(@NonNull Callback cb, @Nullable Handler handler) throws LowpanException", "public void registerCallback(@NonNull Callback cb) throws LowpanException", "public void unregisterCallback(@NonNull Callback cb)" ]
}