{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/health/PidHealthStats.java",
  "packageName" : "android.os.health",
  "className" : "PidHealthStats",
  "comment" : "\n * Keys for {@link HealthStats} returned from\n * {@link HealthStats#getStats(int) HealthStats.getStats(int)} with the\n * {@link UidHealthStats#STATS_PIDS UidHealthStats.STATS_PIDS} key.\n * <p>\n * The values coming from PidHealthStats are a little bit different from\n * the other HealthStats values.  These values are not aggregate or historical\n * values, but instead live values from when the snapshot is taken.  These\n * tend to be more useful in debugging rogue processes than in gathering\n * aggregate metrics across the fleet of devices.\n ",
  "variables" : [ {
    "name" : "MEASUREMENT_WAKE_NESTING_COUNT",
    "type" : "int",
    "comment" : "\n     * Key for a measurement of the current nesting depth of wakelocks for this process.\n     * That is to say, the number of times a nested wakelock has been started but not\n     * stopped.  A high number here indicates an improperly paired wakelock acquire/release\n     * combination.\n     * <p>\n     * More details on the individual wake locks is available\n     * by getting the {@link UidHealthStats#TIMERS_WAKELOCKS_FULL},\n     * {@link UidHealthStats#TIMERS_WAKELOCKS_PARTIAL},\n     * {@link UidHealthStats#TIMERS_WAKELOCKS_WINDOW}\n     * and {@link UidHealthStats#TIMERS_WAKELOCKS_DRAW} keys.\n     ",
    "links" : [ "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_FULL", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_PARTIAL", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_WINDOW", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_DRAW" ]
  }, {
    "name" : "MEASUREMENT_WAKE_SUM_MS",
    "type" : "int",
    "comment" : "\n     * Key for a measurement of the total number of milleseconds that this process\n     * has held a wake lock.\n     * <p>\n     * More details on the individual wake locks is available\n     * by getting the {@link UidHealthStats#TIMERS_WAKELOCKS_FULL},\n     * {@link UidHealthStats#TIMERS_WAKELOCKS_PARTIAL},\n     * {@link UidHealthStats#TIMERS_WAKELOCKS_WINDOW}\n     * and {@link UidHealthStats#TIMERS_WAKELOCKS_DRAW} keys.\n     ",
    "links" : [ "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_FULL", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_PARTIAL", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_WINDOW", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_DRAW" ]
  }, {
    "name" : "MEASUREMENT_WAKE_START_MS",
    "type" : "int",
    "comment" : "\n     * Key for a measurement of the time in the {@link android.os.SystemClock#elapsedRealtime}\n     * timebase that a wakelock was first acquired in this process.\n     * <p>\n     * More details on the individual wake locks is available\n     * by getting the {@link UidHealthStats#TIMERS_WAKELOCKS_FULL},\n     * {@link UidHealthStats#TIMERS_WAKELOCKS_PARTIAL},\n     * {@link UidHealthStats#TIMERS_WAKELOCKS_WINDOW}\n     * and {@link UidHealthStats#TIMERS_WAKELOCKS_DRAW} keys.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_FULL", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_PARTIAL", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_WINDOW", "android.os.health.UidHealthStats#TIMERS_WAKELOCKS_DRAW" ]
  }, {
    "name" : "CONSTANTS",
    "type" : "HealthKeys.Constants",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "variableNames" : [ "MEASUREMENT_WAKE_NESTING_COUNT", "MEASUREMENT_WAKE_SUM_MS", "MEASUREMENT_WAKE_START_MS", "CONSTANTS" ],
  "methodNames" : [ ]
}