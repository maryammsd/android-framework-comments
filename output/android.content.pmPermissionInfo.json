{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PermissionInfo.java",
  "packageName" : "android.content.pm",
  "className" : "PermissionInfo",
  "comment" : "\n * Information you can retrieve about a particular security permission\n * known to the system.  This corresponds to information collected from the\n * AndroidManifest.xml's &lt;permission&gt; tags.\n ",
  "variables" : [ {
    "name" : "PROTECTION_NORMAL",
    "type" : "int",
    "comment" : "\n     * A normal application value for {@link #protectionLevel}, corresponding\n     * to the <code>normal</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_DANGEROUS",
    "type" : "int",
    "comment" : "\n     * Dangerous value for {@link #protectionLevel}, corresponding\n     * to the <code>dangerous</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_SIGNATURE",
    "type" : "int",
    "comment" : "\n     * System-level value for {@link #protectionLevel}, corresponding\n     * to the <code>signature</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_SIGNATURE_OR_SYSTEM",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #PROTECTION_SIGNATURE}|{@link #PROTECTION_FLAG_PRIVILEGED}\n     * instead.\n     ",
    "links" : [ "#PROTECTION_SIGNATURE", "#PROTECTION_FLAG_PRIVILEGED" ]
  }, {
    "name" : "PROTECTION_FLAG_PRIVILEGED",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>privileged</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_SYSTEM",
    "type" : "int",
    "comment" : "\n     * @deprecated Old name for {@link #PROTECTION_FLAG_PRIVILEGED}, which\n     * is now very confusing because it only applies to privileged apps, not all\n     * apps on the system image.\n     ",
    "links" : [ "#PROTECTION_FLAG_PRIVILEGED" ]
  }, {
    "name" : "PROTECTION_FLAG_DEVELOPMENT",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>development</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_APPOP",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>appop</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_PRE23",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>pre23</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_INSTALLER",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>installer</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_VERIFIER",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>verifier</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_PREINSTALLED",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>preinstalled</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_SETUP",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>setup</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_INSTANT",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>instant</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_RUNTIME_ONLY",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>runtime</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_OEM",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>oem</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_VENDOR_PRIVILEGED",
    "type" : "int",
    "comment" : "\n     * Additional flag for {${link #protectionLevel}, corresponding\n     * to the <code>vendorPrivileged</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_SYSTEM_TEXT_CLASSIFIER",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>text_classifier</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_WELLBEING",
    "type" : "int",
    "comment" : "\n     * Additional flag for {${link #protectionLevel}, corresponding\n     * to the <code>wellbeing</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_DOCUMENTER",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding to the\n     * {@code documenter} value of {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_CONFIGURATOR",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding to the\n     * {@code configurator} value of {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_INCIDENT_REPORT_APPROVER",
    "type" : "int",
    "comment" : "\n     * Additional flag for {${link #protectionLevel}, corresponding\n     * to the <code>incident_report_approver</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_APP_PREDICTOR",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>app_predictor</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_COMPANION",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>companion</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_FLAG_RETAIL_DEMO",
    "type" : "int",
    "comment" : "\n     * Additional flag for {@link #protectionLevel}, corresponding\n     * to the <code>retailDemo</code> value of\n     * {@link android.R.attr#protectionLevel}.\n     *\n     * @hide\n     ",
    "links" : [ "#protectionLevel", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "PROTECTION_MASK_BASE",
    "type" : "int",
    "comment" : "\n     * Mask for {@link #protectionLevel}: the basic protection type.\n     *\n     * @deprecated Use #getProtection() instead.\n     ",
    "links" : [ "#protectionLevel" ]
  }, {
    "name" : "PROTECTION_MASK_FLAGS",
    "type" : "int",
    "comment" : "\n     * Mask for {@link #protectionLevel}: additional flag bits.\n     *\n     * @deprecated Use #getProtectionFlags() instead.\n     ",
    "links" : [ "#protectionLevel" ]
  }, {
    "name" : "protectionLevel",
    "type" : "int",
    "comment" : "\n     * The level of access this permission is protecting, as per\n     * {@link android.R.attr#protectionLevel}. Consists of\n     * a base permission type and zero or more flags. Use the following functions\n     * to extract them.\n     *\n     * <pre>\n     * int basePermissionType = permissionInfo.getProtection();\n     * int permissionFlags = permissionInfo.getProtectionFlags();\n     * </pre>\n     *\n     * <p></p>Base permission types are {@link #PROTECTION_NORMAL},\n     * {@link #PROTECTION_DANGEROUS}, {@link #PROTECTION_SIGNATURE}\n     * and the deprecated {@link #PROTECTION_SIGNATURE_OR_SYSTEM}.\n     * Flags are listed under {@link android.R.attr#protectionLevel}.\n     *\n     * @deprecated Use #getProtection() and #getProtectionFlags() instead.\n     ",
    "links" : [ "android.R.attr#protectionLevel", "#PROTECTION_NORMAL", "#PROTECTION_DANGEROUS", "#PROTECTION_SIGNATURE", "#PROTECTION_SIGNATURE_OR_SYSTEM", "android.R.attr#protectionLevel" ]
  }, {
    "name" : "group",
    "type" : "String",
    "comment" : "\n     * The group this permission is a part of, as per\n     * {@link android.R.attr#permissionGroup}.\n     ",
    "links" : [ "android.R.attr#permissionGroup" ]
  }, {
    "name" : "FLAG_COSTS_MONEY",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #flags}, corresponding to <code>costsMoney</code>\n     * value of {@link android.R.attr#permissionFlags}.\n     ",
    "links" : [ "#flags", "android.R.attr#permissionFlags" ]
  }, {
    "name" : "FLAG_REMOVED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #flags}, corresponding to <code>removed</code>\n     * value of {@link android.R.attr#permissionFlags}.\n     * @hide\n     ",
    "links" : [ "#flags", "android.R.attr#permissionFlags" ]
  }, {
    "name" : "FLAG_HARD_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #flags}, corresponding to <code>hardRestricted</code>\n     * value of {@link android.R.attr#permissionFlags}.\n     *\n     * <p> This permission is restricted by the platform and it would be\n     * grantable only to apps that meet special criteria per platform\n     * policy.\n     ",
    "links" : [ "#flags", "android.R.attr#permissionFlags" ]
  }, {
    "name" : "FLAG_SOFT_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #flags}, corresponding to <code>softRestricted</code>\n     * value of {@link android.R.attr#permissionFlags}.\n     *\n     * <p>This permission is restricted by the platform and it would be\n     * grantable in its full form to apps that meet special criteria\n     * per platform policy. Otherwise, a weaker form of the permission\n     * would be granted. The weak grant depends on the permission.\n     ",
    "links" : [ "#flags", "android.R.attr#permissionFlags" ]
  }, {
    "name" : "FLAG_IMMUTABLY_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #flags}, corresponding to <code>immutablyRestricted</code>\n     * value of {@link android.R.attr#permissionFlags}.\n     *\n     * <p>This permission is restricted immutably which means that its\n     * restriction state may be specified only on the first install of\n     * the app and will stay in this initial whitelist state until\n     * the app is uninstalled.\n     ",
    "links" : [ "#flags", "android.R.attr#permissionFlags" ]
  }, {
    "name" : "FLAG_INSTALLED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #flags}, indicating that this permission has been\n     * installed into the system's globally defined permissions.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Additional flags about this permission as given by\n     * {@link android.R.attr#permissionFlags}.\n     ",
    "links" : [ "android.R.attr#permissionFlags" ]
  }, {
    "name" : "descriptionRes",
    "type" : "int",
    "comment" : "\n     * A string resource identifier (in the package's resources) of this\n     * permission's description.  From the \"description\" attribute or,\n     * if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "requestRes",
    "type" : "int",
    "comment" : "\n     * A string resource identifier (in the package's resources) used to request the permissions.\n     * From the \"request\" attribute or, if not set, 0.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "backgroundPermission",
    "type" : "String",
    "comment" : "\n     * Some permissions only grant access while the app is in foreground. Some of these permissions\n     * allow to add background capabilities by adding another permission.\n     *\n     * If this is such a permission, this is the name of the permission adding the background\n     * access.\n     *\n     * From the \"backgroundPermission\" attribute or, if not set null\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "nonLocalizedDescription",
    "type" : "CharSequence",
    "comment" : "\n     * The description string provided in the AndroidManifest file, if any.  You\n     * probably don't want to use this, since it will be null if the description\n     * is in a resource.  You probably want\n     * {@link PermissionInfo#loadDescription} instead.\n     ",
    "links" : [ "PermissionInfo#loadDescription" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PermissionInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int fixProtectionLevel(int level)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String protectionToString(int level)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadDescription(@NonNull PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the textual description of this permission.  This\n     * will call back on the given PackageManager to load the description from\n     * the application.\n     *\n     * @param pm A PackageManager from which the label can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a CharSequence containing the permission's description.\n     * If there is no description, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProtection()",
    "returnType" : "int",
    "comment" : "\n     * Return the base permission type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProtectionFlags()",
    "returnType" : "int",
    "comment" : "\n     * Return the additional flags in {@link #protectionLevel}.\n     ",
    "links" : [ "#protectionLevel" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int calculateFootprint()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardRestricted()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSoftRestricted()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestricted()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAppOp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRuntime()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "PROTECTION_NORMAL", "PROTECTION_DANGEROUS", "PROTECTION_SIGNATURE", "PROTECTION_SIGNATURE_OR_SYSTEM", "PROTECTION_FLAG_PRIVILEGED", "PROTECTION_FLAG_SYSTEM", "PROTECTION_FLAG_DEVELOPMENT", "PROTECTION_FLAG_APPOP", "PROTECTION_FLAG_PRE23", "PROTECTION_FLAG_INSTALLER", "PROTECTION_FLAG_VERIFIER", "PROTECTION_FLAG_PREINSTALLED", "PROTECTION_FLAG_SETUP", "PROTECTION_FLAG_INSTANT", "PROTECTION_FLAG_RUNTIME_ONLY", "PROTECTION_FLAG_OEM", "PROTECTION_FLAG_VENDOR_PRIVILEGED", "PROTECTION_FLAG_SYSTEM_TEXT_CLASSIFIER", "PROTECTION_FLAG_WELLBEING", "PROTECTION_FLAG_DOCUMENTER", "PROTECTION_FLAG_CONFIGURATOR", "PROTECTION_FLAG_INCIDENT_REPORT_APPROVER", "PROTECTION_FLAG_APP_PREDICTOR", "PROTECTION_FLAG_COMPANION", "PROTECTION_FLAG_RETAIL_DEMO", "PROTECTION_MASK_BASE", "PROTECTION_MASK_FLAGS", "protectionLevel", "group", "FLAG_COSTS_MONEY", "FLAG_REMOVED", "FLAG_HARD_RESTRICTED", "FLAG_SOFT_RESTRICTED", "FLAG_IMMUTABLY_RESTRICTED", "FLAG_INSTALLED", "flags", "descriptionRes", "requestRes", "backgroundPermission", "nonLocalizedDescription", "CREATOR" ],
  "methodNames" : [ "public static int fixProtectionLevel(int level)", "public static String protectionToString(int level)", "public CharSequence loadDescription(@NonNull PackageManager pm)", "public int getProtection()", "public int getProtectionFlags()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)", "public int calculateFootprint()", "public boolean isHardRestricted()", "public boolean isSoftRestricted()", "public boolean isRestricted()", "public boolean isAppOp()", "public boolean isRuntime()" ]
}