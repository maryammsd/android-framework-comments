{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/RedactingFileDescriptor.java",
  "packageName" : "android.os",
  "className" : "RedactingFileDescriptor",
  "comment" : "\n * Variant of {@link FileDescriptor} that allows its creator to specify regions\n * that should be redacted.\n *\n * @hide\n ",
  "links" : [ "java.io.FileDescriptor" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRedactRanges",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreeOffsets",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInner",
    "type" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuter",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ProxyFileDescriptorCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static long[] checkRangesArgument(long[] ranges)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParcelFileDescriptor open(Context context, File file, int mode, long[] redactRanges, long[] freePositions) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Open the given {@link File} and returns a {@link ParcelFileDescriptor}\n     * that offers a redacted view of the underlying data. If a redacted region\n     * is written to, the newly written data can be read back correctly instead\n     * of continuing to be redacted.\n     *\n     * @param file The underlying file to open.\n     * @param mode The {@link ParcelFileDescriptor} mode to open with.\n     * @param redactRanges List of file ranges that should be redacted, stored\n     *            as {@code [start1, end1, start2, end2, ...]}. Start values are\n     *            inclusive and end values are exclusive.\n     * @param freePositions List of file offsets at which the four byte value 'free' should be\n     *            written instead of zeros within parts of the file covered by {@code redactRanges}.\n     *            Non-redacted bytes will not be modified even if covered by a 'free'. This is\n     *            useful for overwriting boxes in ISOBMFF files with padding data.\n     ",
    "links" : [ "android.os.ParcelFileDescriptor", "java.io.File" ]
  }, {
    "name" : "public static long[] removeRange(long[] ranges, long start, long end)",
    "returnType" : "long[]",
    "comment" : "\n     * Update the given ranges argument to remove any references to the given\n     * offset and length. This is typically used when a caller has written over\n     * a previously redacted region.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static long[] checkRangesArgument(long[] ranges)", "public static ParcelFileDescriptor open(Context context, File file, int mode, long[] redactRanges, long[] freePositions) throws IOException", "public static long[] removeRange(long[] ranges, long start, long end)" ],
  "variableNames" : [ "TAG", "DEBUG", "mRedactRanges", "mFreeOffsets", "mInner", "mOuter", "mCallback" ]
}