{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/InputSource.java",
  "packageName" : "org.xml.sax",
  "className" : "InputSource",
  "comment" : "\n * A single input source for an XML entity.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class allows a SAX application to encapsulate information\n * about an input source in a single object, which may include\n * a public identifier, a system identifier, a byte stream (possibly\n * with a specified encoding), and/or a character stream.</p>\n *\n * <p>There are two places that the application can deliver an\n * input source to the parser: as the argument to the Parser.parse\n * method, or as the return value of the EntityResolver.resolveEntity\n * method.</p>\n *\n * <p>The SAX parser will use the InputSource object to determine how\n * to read XML input.  If there is a character stream available, the\n * parser will read that stream directly, disregarding any text\n * encoding declaration found in that stream.\n * If there is no character stream, but there is\n * a byte stream, the parser will use that byte stream, using the\n * encoding specified in the InputSource or else (if no encoding is\n * specified) autodetecting the character encoding using an algorithm\n * such as the one in the XML specification.  If neither a character\n * stream nor a\n * byte stream is available, the parser will attempt to open a URI\n * connection to the resource identified by the system\n * identifier.</p>\n *\n * <p>An InputSource object belongs to the application: the SAX parser\n * shall never modify it in any way (it may modify a copy if\n * necessary).  However, standard processing of both byte and\n * character streams is to close them on as part of end-of-parse cleanup,\n * so applications should not attempt to re-use such streams after they\n * have been handed to a parser.  </p>\n *\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.XMLReader#parse(org.xml.sax.InputSource)\n * @see org.xml.sax.EntityResolver#resolveEntity\n * @see java.io.InputStream\n * @see java.io.Reader\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "publicId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "systemId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "byteStream",
    "type" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "characterStream",
    "type" : "Reader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPublicId(String publicId)",
    "returnType" : "void",
    "comment" : "\n     * Set the public identifier for this input source.\n     *\n     * <p>The public identifier is always optional: if the application\n     * writer includes one, it will be provided as part of the\n     * location information.</p>\n     *\n     * @param publicId The public identifier as a string.\n     * @see #getPublicId\n     * @see org.xml.sax.Locator#getPublicId\n     * @see org.xml.sax.SAXParseException#getPublicId\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPublicId()",
    "returnType" : "String",
    "comment" : "\n     * Get the public identifier for this input source.\n     *\n     * @return The public identifier, or null if none was supplied.\n     * @see #setPublicId\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemId(String systemId)",
    "returnType" : "void",
    "comment" : "\n     * Set the system identifier for this input source.\n     *\n     * <p>The system identifier is optional if there is a byte stream\n     * or a character stream, but it is still useful to provide one,\n     * since the application can use it to resolve relative URIs\n     * and can include it in error messages and warnings (the parser\n     * will attempt to open a connection to the URI only if\n     * there is no byte stream or character stream specified).</p>\n     *\n     * <p>If the application knows the character encoding of the\n     * object pointed to by the system identifier, it can register\n     * the encoding using the setEncoding method.</p>\n     *\n     * <p>If the system identifier is a URL, it must be fully\n     * resolved (it may not be a relative URL).</p>\n     *\n     * @param systemId The system identifier as a string.\n     * @see #setEncoding\n     * @see #getSystemId\n     * @see org.xml.sax.Locator#getSystemId\n     * @see org.xml.sax.SAXParseException#getSystemId\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n     * Get the system identifier for this input source.\n     *\n     * <p>The getEncoding method will return the character encoding\n     * of the object pointed to, or null if unknown.</p>\n     *\n     * <p>If the system ID is a URL, it will be fully resolved.</p>\n     *\n     * @return The system identifier, or null if none was supplied.\n     * @see #setSystemId\n     * @see #getEncoding\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setByteStream(InputStream byteStream)",
    "returnType" : "void",
    "comment" : "\n     * Set the byte stream for this input source.\n     *\n     * <p>The SAX parser will ignore this if there is also a character\n     * stream specified, but it will use a byte stream in preference\n     * to opening a URI connection itself.</p>\n     *\n     * <p>If the application knows the character encoding of the\n     * byte stream, it should set it with the setEncoding method.</p>\n     *\n     * @param byteStream A byte stream containing an XML document or\n     *        other entity.\n     * @see #setEncoding\n     * @see #getByteStream\n     * @see #getEncoding\n     * @see java.io.InputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream getByteStream()",
    "returnType" : "InputStream",
    "comment" : "\n     * Get the byte stream for this input source.\n     *\n     * <p>The getEncoding method will return the character\n     * encoding for this byte stream, or null if unknown.</p>\n     *\n     * @return The byte stream, or null if none was supplied.\n     * @see #getEncoding\n     * @see #setByteStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEncoding(String encoding)",
    "returnType" : "void",
    "comment" : "\n     * Set the character encoding, if known.\n     *\n     * <p>The encoding must be a string acceptable for an\n     * XML encoding declaration (see section 4.3.3 of the XML 1.0\n     * recommendation).</p>\n     *\n     * <p>This method has no effect when the application provides a\n     * character stream.</p>\n     *\n     * @param encoding A string describing the character encoding.\n     * @see #setSystemId\n     * @see #setByteStream\n     * @see #getEncoding\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Get the character encoding for a byte stream or URI.\n     * This value will be ignored when the application provides a\n     * character stream.\n     *\n     * @return The encoding, or null if none was supplied.\n     * @see #setByteStream\n     * @see #getSystemId\n     * @see #getByteStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCharacterStream(Reader characterStream)",
    "returnType" : "void",
    "comment" : "\n     * Set the character stream for this input source.\n     *\n     * <p>If there is a character stream specified, the SAX parser\n     * will ignore any byte stream and will not attempt to open\n     * a URI connection to the system identifier.</p>\n     *\n     * @param characterStream The character stream containing the\n     *        XML document or other entity.\n     * @see #getCharacterStream\n     * @see java.io.Reader\n     ",
    "links" : [ ]
  }, {
    "name" : "public Reader getCharacterStream()",
    "returnType" : "Reader",
    "comment" : "\n     * Get the character stream for this input source.\n     *\n     * @return The character stream, or null if none was supplied.\n     * @see #setCharacterStream\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setPublicId(String publicId)", "public String getPublicId()", "public void setSystemId(String systemId)", "public String getSystemId()", "public void setByteStream(InputStream byteStream)", "public InputStream getByteStream()", "public void setEncoding(String encoding)", "public String getEncoding()", "public void setCharacterStream(Reader characterStream)", "public Reader getCharacterStream()" ],
  "variableNames" : [ "publicId", "systemId", "byteStream", "encoding", "characterStream" ]
}