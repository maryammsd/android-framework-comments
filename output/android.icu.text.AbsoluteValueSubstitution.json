{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "AbsoluteValueSubstitution",
  "comment" : "\n  * A substitution that formats the absolute value of the number.\n  * This substitution is represented by &gt;&gt; in a negative-number rule.\n  ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Returns the absolute value of the number.\n     * @param number The number being formatted.\n     * @return abs(number)\n     ",
    "links" : [ ]
  }, {
    "name" : "public double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Returns the absolute value of the number.\n     * @param number The number being formatted.\n     * @return abs(number)\n     ",
    "links" : [ ]
  }, {
    "name" : "public double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns the additive inverse of the result of parsing the\n     * substitution (this supersedes the earlier partial result)\n     * @param newRuleValue The result of parsing the substitution\n     * @param oldRuleValue The partial parse result prior to calling\n     * this function\n     * @return -newRuleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "public double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * Sets the upper bound beck up to consider all rules\n     * @param oldUpperBound Ignored.\n     * @return Double.MAX_VALUE\n     ",
    "links" : [ ]
  }, {
    "name" : " char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * The token character for an AbsoluteValueSubstitution is &gt;\n     * @return '&gt;'\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long transformNumber(long number)", "public double transformNumber(double number)", "public double composeRuleValue(double newRuleValue, double oldRuleValue)", "public double calcUpperBound(double oldUpperBound)", " char tokenChar()" ],
  "variableNames" : [ ]
}