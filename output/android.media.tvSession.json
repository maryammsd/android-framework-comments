{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/TvInputManager.java",
  "packageName" : "android.media.tv",
  "className" : "Session",
  "comment" : "\n     * The Session provides the per-session functionality of TV inputs.\n     * @hide\n     ",
  "variables" : [ {
    "name" : "DISPATCH_IN_PROGRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPATCH_NOT_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPATCH_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INPUT_SESSION_NOT_RESPONDING_TIMEOUT",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ITvInputManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeq",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "InputEventHandler",
    "comment" : " protect pending input events and the input channel.",
    "links" : [ ]
  }, {
    "name" : "mPendingEventPool",
    "type" : "Pool<PendingEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingEvents",
    "type" : "SparseArray<PendingEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallbackRecordMap",
    "type" : "SparseArray<SessionCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSender",
    "type" : "TvInputEventSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannel",
    "type" : "InputChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetadataLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioTracks",
    "type" : "List<TvTrackInfo>",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mVideoTracks",
    "type" : "List<TvTrackInfo>",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mSubtitleTracks",
    "type" : "List<TvTrackInfo>",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mSelectedAudioTrackId",
    "type" : "String",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mSelectedVideoTrackId",
    "type" : "String",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mSelectedSubtitleTrackId",
    "type" : "String",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mVideoWidth",
    "type" : "int",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  }, {
    "name" : "mVideoHeight",
    "type" : "int",
    "comment" : " @GuardedBy(\"mMetadataLock\")",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Releases this session.\n         ",
    "links" : [ ]
  }, {
    "name" : " void setMain()",
    "returnType" : "void",
    "comment" : "\n         * Sets this as the main session. The main session is a session whose corresponding TV\n         * input determines the HDMI-CEC active source device.\n         *\n         * @see TvView#setMain\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the {@link android.view.Surface} for this session.\n         *\n         * @param surface A {@link android.view.Surface} used to render video.\n         ",
    "links" : [ "android.view.Surface", "android.view.Surface" ]
  }, {
    "name" : "public void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Notifies of any structural changes (format or size) of the surface passed in\n         * {@link #setSurface}.\n         *\n         * @param format The new PixelFormat of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#setSurface" ]
  }, {
    "name" : "public void setStreamVolume(float volume)",
    "returnType" : "void",
    "comment" : "\n         * Sets the relative stream volume of this session to handle a change of audio focus.\n         *\n         * @param volume A volume value between 0.0f to 1.0f.\n         * @throws IllegalArgumentException if the volume value is out of range.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void tune(Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Tunes to a given channel.\n         *\n         * @param channelUri The URI of a channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void tune(@NonNull Uri channelUri, Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Tunes to a given channel.\n         *\n         * @param channelUri The URI of a channel.\n         * @param params A set of extra parameters which might be handled with this tune event.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setCaptionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Enables or disables the caption for this session.\n         *\n         * @param enabled {@code true} to enable, {@code false} to disable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void selectTrack(int type, @Nullable String trackId)",
    "returnType" : "void",
    "comment" : "\n         * Selects a track.\n         *\n         * @param type The type of the track to select. The type can be\n         *            {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or\n         *            {@link TvTrackInfo#TYPE_SUBTITLE}.\n         * @param trackId The ID of the track to select. When {@code null}, the currently selected\n         *            track of the given type will be unselected.\n         * @see #getTracks\n         ",
    "links" : [ "TvTrackInfo#TYPE_AUDIO", "TvTrackInfo#TYPE_VIDEO", "TvTrackInfo#TYPE_SUBTITLE" ]
  }, {
    "name" : "private boolean containsTrack(List<TvTrackInfo> tracks, String trackId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<TvTrackInfo> getTracks(int type)",
    "returnType" : "List<TvTrackInfo>",
    "comment" : "\n         * Returns the list of tracks for a given type. Returns {@code null} if the information is\n         * not available.\n         *\n         * @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO},\n         *            {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}.\n         * @return the list of tracks for the given type.\n         ",
    "links" : [ "TvTrackInfo#TYPE_AUDIO", "TvTrackInfo#TYPE_VIDEO", "TvTrackInfo#TYPE_SUBTITLE" ]
  }, {
    "name" : "public String getSelectedTrack(int type)",
    "returnType" : "String",
    "comment" : "\n         * Returns the selected track for a given type. Returns {@code null} if the information is\n         * not available or any of the tracks for the given type is not selected.\n         *\n         * @return The ID of the selected track.\n         * @see #selectTrack\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean updateTracks(List<TvTrackInfo> tracks)",
    "returnType" : "boolean",
    "comment" : "\n         * Responds to onTracksChanged() and updates the internal track information. Returns true if\n         * there is an update.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean updateTrackSelection(int type, String trackId)",
    "returnType" : "boolean",
    "comment" : "\n         * Responds to onTrackSelected() and updates the internal track selection information.\n         * Returns true if there is an update.\n         ",
    "links" : [ ]
  }, {
    "name" : " TvTrackInfo getVideoTrackToNotify()",
    "returnType" : "TvTrackInfo",
    "comment" : "\n         * Returns the new/updated video track that contains new video size information. Returns\n         * null if there is no video track to notify. Subsequent calls of this method results in a\n         * non-null video track returned only by the first call and null returned by following\n         * calls. The caller should immediately notify of the video size change upon receiving the\n         * track.\n         ",
    "links" : [ ]
  }, {
    "name" : " void timeShiftPlay(Uri recordedProgramUri)",
    "returnType" : "void",
    "comment" : "\n         * Plays a given recorded TV program.\n         ",
    "links" : [ ]
  }, {
    "name" : " void timeShiftPause()",
    "returnType" : "void",
    "comment" : "\n         * Pauses the playback. Call {@link #timeShiftResume()} to restart the playback.\n         ",
    "links" : [ "#timeShiftResume" ]
  }, {
    "name" : " void timeShiftResume()",
    "returnType" : "void",
    "comment" : "\n         * Resumes the playback. No-op if it is already playing the channel.\n         ",
    "links" : [ ]
  }, {
    "name" : " void timeShiftSeekTo(long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Seeks to a specified time position.\n         *\n         * <p>Normally, the position is given within range between the start and the current time,\n         * inclusively.\n         *\n         * @param timeMs The time position to seek to, in milliseconds since the epoch.\n         * @see TvView.TimeShiftPositionCallback#onTimeShiftStartPositionChanged\n         ",
    "links" : [ ]
  }, {
    "name" : " void timeShiftSetPlaybackParams(PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n         * Sets playback rate using {@link android.media.PlaybackParams}.\n         *\n         * @param params The playback params.\n         ",
    "links" : [ "android.media.PlaybackParams" ]
  }, {
    "name" : " void timeShiftEnablePositionTracking(boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Enable/disable position tracking.\n         *\n         * @param enable {@code true} to enable tracking, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : " void startRecording(@Nullable Uri programUri)",
    "returnType" : "void",
    "comment" : "\n         * Starts TV program recording in the current recording session.\n         *\n         * @param programUri The URI for the TV program to record as a hint, built by\n         *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n         ",
    "links" : [ "TvContract#buildProgramUri" ]
  }, {
    "name" : " void startRecording(@Nullable Uri programUri, @Nullable Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Starts TV program recording in the current recording session.\n         *\n         * @param programUri The URI for the TV program to record as a hint, built by\n         *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n         * @param params A set of extra parameters which might be handled with this event.\n         ",
    "links" : [ "TvContract#buildProgramUri" ]
  }, {
    "name" : " void stopRecording()",
    "returnType" : "void",
    "comment" : "\n         * Stops TV program recording in the current recording session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendAppPrivateCommand(String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link TvInputService.Session#appPrivateCommand(String, Bundle)\n         * TvInputService.Session.appPrivateCommand()} on the current TvView.\n         *\n         * @param action Name of the command to be performed. This <em>must</em> be a scoped name,\n         *            i.e. prefixed with a package name you own, so that different developers will\n         *            not create conflicting commands.\n         * @param data Any data to include with the command.\n         ",
    "links" : [ "TvInputService.Session#appPrivateCommand" ]
  }, {
    "name" : " void createOverlayView(@NonNull View view, @NonNull Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Creates an overlay view. Once the overlay view is created, {@link #relayoutOverlayView}\n         * should be called whenever the layout of its containing view is changed.\n         * {@link #removeOverlayView()} should be called to remove the overlay view.\n         * Since a session can have only one overlay view, this method should be called only once\n         * or it can be called again after calling {@link #removeOverlayView()}.\n         *\n         * @param view A view playing TV.\n         * @param frame A position of the overlay view.\n         * @throws IllegalStateException if {@code view} is not attached to a window.\n         ",
    "links" : [ "#relayoutOverlayView", "#removeOverlayView", "#removeOverlayView" ]
  }, {
    "name" : " void relayoutOverlayView(@NonNull Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Relayouts the current overlay view.\n         *\n         * @param frame A new position of the overlay view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeOverlayView()",
    "returnType" : "void",
    "comment" : "\n         * Removes the current overlay view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void unblockContent(@NonNull TvContentRating unblockedRating)",
    "returnType" : "void",
    "comment" : "\n         * Requests to unblock content blocked by parental controls.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int dispatchInputEvent(@NonNull InputEvent event, Object token, @NonNull FinishedInputEventCallback callback, @NonNull Handler handler)",
    "returnType" : "int",
    "comment" : "\n         * Dispatches an input event to this session.\n         *\n         * @param event An {@link InputEvent} to dispatch. Cannot be {@code null}.\n         * @param token A token used to identify the input event later in the callback.\n         * @param callback A callback used to receive the dispatch result. Cannot be {@code null}.\n         * @param handler A {@link Handler} that the dispatch result will be delivered to. Cannot be\n         *            {@code null}.\n         * @return Returns {@link #DISPATCH_HANDLED} if the event was handled. Returns\n         *         {@link #DISPATCH_NOT_HANDLED} if the event was not handled. Returns\n         *         {@link #DISPATCH_IN_PROGRESS} if the event is in progress and the callback will\n         *         be invoked later.\n         * @hide\n         ",
    "links" : [ "InputEvent", "Handler", "#DISPATCH_HANDLED", "#DISPATCH_NOT_HANDLED", "#DISPATCH_IN_PROGRESS" ]
  }, {
    "name" : "private void sendInputEventAndReportResultOnMainLooper(PendingEvent p)",
    "returnType" : "void",
    "comment" : " Must be called on the main looper",
    "links" : [ ]
  }, {
    "name" : "private int sendInputEventOnMainLooperLocked(PendingEvent p)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishedInputEvent(int seq, boolean handled, boolean timeout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invokeFinishedInputEventCallback(PendingEvent p, boolean handled)",
    "returnType" : "void",
    "comment" : " Assumes the event has already been removed from the queue.",
    "links" : [ ]
  }, {
    "name" : "private void flushPendingEventsLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PendingEvent obtainPendingEventLocked(InputEvent event, Object token, FinishedInputEventCallback callback, Handler handler)",
    "returnType" : "PendingEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recyclePendingEventLocked(PendingEvent p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DISPATCH_IN_PROGRESS", "DISPATCH_NOT_HANDLED", "DISPATCH_HANDLED", "INPUT_SESSION_NOT_RESPONDING_TIMEOUT", "mService", "mUserId", "mSeq", "mHandler", "mPendingEventPool", "mPendingEvents", "mSessionCallbackRecordMap", "mToken", "mSender", "mChannel", "mMetadataLock", "mAudioTracks", "mVideoTracks", "mSubtitleTracks", "mSelectedAudioTrackId", "mSelectedVideoTrackId", "mSelectedSubtitleTrackId", "mVideoWidth", "mVideoHeight" ],
  "methodNames" : [ "public void release()", " void setMain()", "public void setSurface(Surface surface)", "public void dispatchSurfaceChanged(int format, int width, int height)", "public void setStreamVolume(float volume)", "public void tune(Uri channelUri)", "public void tune(@NonNull Uri channelUri, Bundle params)", "public void setCaptionEnabled(boolean enabled)", "public void selectTrack(int type, @Nullable String trackId)", "private boolean containsTrack(List<TvTrackInfo> tracks, String trackId)", "public List<TvTrackInfo> getTracks(int type)", "public String getSelectedTrack(int type)", " boolean updateTracks(List<TvTrackInfo> tracks)", " boolean updateTrackSelection(int type, String trackId)", " TvTrackInfo getVideoTrackToNotify()", " void timeShiftPlay(Uri recordedProgramUri)", " void timeShiftPause()", " void timeShiftResume()", " void timeShiftSeekTo(long timeMs)", " void timeShiftSetPlaybackParams(PlaybackParams params)", " void timeShiftEnablePositionTracking(boolean enable)", " void startRecording(@Nullable Uri programUri)", " void startRecording(@Nullable Uri programUri, @Nullable Bundle params)", " void stopRecording()", "public void sendAppPrivateCommand(String action, Bundle data)", " void createOverlayView(@NonNull View view, @NonNull Rect frame)", " void relayoutOverlayView(@NonNull Rect frame)", " void removeOverlayView()", " void unblockContent(@NonNull TvContentRating unblockedRating)", "public int dispatchInputEvent(@NonNull InputEvent event, Object token, @NonNull FinishedInputEventCallback callback, @NonNull Handler handler)", "private void sendInputEventAndReportResultOnMainLooper(PendingEvent p)", "private int sendInputEventOnMainLooperLocked(PendingEvent p)", " void finishedInputEvent(int seq, boolean handled, boolean timeout)", " void invokeFinishedInputEventCallback(PendingEvent p, boolean handled)", "private void flushPendingEventsLocked()", "private PendingEvent obtainPendingEventLocked(InputEvent event, Object token, FinishedInputEventCallback callback, Handler handler)", "private void recyclePendingEventLocked(PendingEvent p)", " IBinder getToken()", "private void releaseInternal()" ]
}