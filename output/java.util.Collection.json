{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Collection.java",
  "packageName" : "java.util",
  "className" : "Collection",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this collection.  If this collection\n     * contains more than {@code Integer.MAX_VALUE} elements, returns\n     * {@code Integer.MAX_VALUE}.\n     *\n     * @return the number of elements in this collection\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this collection contains no elements.\n     *\n     * @return {@code true} if this collection contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this collection contains the specified element.\n     * More formally, returns {@code true} if and only if this collection\n     * contains at least one element {@code e} such that\n     * {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this collection is to be tested\n     * @return {@code true} if this collection contains the specified\n     *         element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this collection\n     *         (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         collection does not permit null elements\n     *         (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this collection.  There are no\n     * guarantees concerning the order in which the elements are returned\n     * (unless this collection is an instance of some class that provides a\n     * guarantee).\n     *\n     * @return an {@code Iterator} over the elements in this collection\n     ",
    "links" : [ ]
  }, {
    "name" : " Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this collection.\n     * If this collection makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the elements in\n     * the same order. The returned array's {@linkplain Class#getComponentType\n     * runtime component type} is {@code Object}.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this collection.  (In other words, this method must\n     * allocate a new array even if this collection is backed by an array).\n     * The caller is thus free to modify the returned array.\n     *\n     * @apiNote\n     * This method acts as a bridge between array-based and collection-based APIs.\n     * It returns an array whose runtime type is {@code Object[]}.\n     * Use {@link #toArray(Object[]) toArray(T[])} to reuse an existing\n     * array, or use {@link #toArray(IntFunction)} to control the runtime type\n     * of the array.\n     *\n     * @return an array, whose {@linkplain Class#getComponentType runtime component\n     * type} is {@code Object}, containing all of the elements in this collection\n     ",
    "links" : [ "#toArray(IntFunction)", "#toArray(Object" ]
  }, {
    "name" : " T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this collection;\n     * the runtime type of the returned array is that of the specified array.\n     * If the collection fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of the\n     * specified array and the size of this collection.\n     *\n     * <p>If this collection fits in the specified array with room to spare\n     * (i.e., the array has more elements than this collection), the element\n     * in the array immediately following the end of the collection is set to\n     * {@code null}.  (This is useful in determining the length of this\n     * collection <i>only</i> if the caller knows that this collection does\n     * not contain any {@code null} elements.)\n     *\n     * <p>If this collection makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the elements in\n     * the same order.\n     *\n     * @apiNote\n     * This method acts as a bridge between array-based and collection-based APIs.\n     * It allows an existing array to be reused under certain circumstances.\n     * Use {@link #toArray()} to create an array whose runtime type is {@code Object[]},\n     * or use {@link #toArray(IntFunction)} to control the runtime type of\n     * the array.\n     *\n     * <p>Suppose {@code x} is a collection known to contain only strings.\n     * The following code can be used to dump the collection into a previously\n     * allocated {@code String} array:\n     *\n     * <pre>\n     *     String[] y = new String[SIZE];\n     *     ...\n     *     y = x.toArray(y);</pre>\n     *\n     * <p>The return value is reassigned to the variable {@code y}, because a\n     * new array will be allocated and returned if the collection {@code x} has\n     * too many elements to fit into the existing array {@code y}.\n     *\n     * <p>Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param <T> the component type of the array to contain the collection\n     * @param a the array into which the elements of this collection are to be\n     *        stored, if it is big enough; otherwise, a new array of the same\n     *        runtime type is allocated for this purpose.\n     * @return an array containing all of the elements in this collection\n     * @throws ArrayStoreException if the runtime type of any element in this\n     *         collection is not assignable to the {@linkplain Class#getComponentType\n     *         runtime component type} of the specified array\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray(IntFunction)", "#toArray()" ]
  }, {
    "name" : " T[] toArray(IntFunction<T[]> generator)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this collection,\n     * using the provided {@code generator} function to allocate the returned array.\n     *\n     * <p>If this collection makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the elements in\n     * the same order.\n     *\n     * @apiNote\n     * This method acts as a bridge between array-based and collection-based APIs.\n     * It allows creation of an array of a particular runtime type. Use\n     * {@link #toArray()} to create an array whose runtime type is {@code Object[]},\n     * or use {@link #toArray(Object[]) toArray(T[])} to reuse an existing array.\n     *\n     * <p>Suppose {@code x} is a collection known to contain only strings.\n     * The following code can be used to dump the collection into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre>\n     *     String[] y = x.toArray(String[]::new);</pre>\n     *\n     * @implSpec\n     * The default implementation calls the generator function with zero\n     * and then passes the resulting array to {@link #toArray(Object[]) toArray(T[])}.\n     *\n     * @param <T> the component type of the array to contain the collection\n     * @param generator a function which produces a new array of the desired\n     *                  type and the provided length\n     * @return an array containing all of the elements in this collection\n     * @throws ArrayStoreException if the runtime type of any element in this\n     *         collection is not assignable to the {@linkplain Class#getComponentType\n     *         runtime component type} of the generated array\n     * @throws NullPointerException if the generator function is null\n     * @since 11\n     ",
    "links" : [ "#toArray(Object", "#toArray()" ]
  }, {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Ensures that this collection contains the specified element (optional\n     * operation).  Returns {@code true} if this collection changed as a\n     * result of the call.  (Returns {@code false} if this collection does\n     * not permit duplicates and already contains the specified element.)<p>\n     *\n     * Collections that support this operation may place limitations on what\n     * elements may be added to this collection.  In particular, some\n     * collections will refuse to add {@code null} elements, and others will\n     * impose restrictions on the type of elements that may be added.\n     * Collection classes should clearly specify in their documentation any\n     * restrictions on what elements may be added.<p>\n     *\n     * If a collection refuses to add a particular element for any reason\n     * other than that it already contains the element, it <i>must</i> throw\n     * an exception (rather than returning {@code false}).  This preserves\n     * the invariant that a collection always contains the specified element\n     * after this call returns.\n     *\n     * @param e element whose presence in this collection is to be ensured\n     * @return {@code true} if this collection changed as a result of the\n     *         call\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this collection\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this collection\n     * @throws NullPointerException if the specified element is null and this\n     *         collection does not permit null elements\n     * @throws IllegalArgumentException if some property of the element\n     *         prevents it from being added to this collection\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to insertion restrictions\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this\n     * collection, if it is present (optional operation).  More formally,\n     * removes an element {@code e} such that\n     * {@code Objects.equals(o, e)}, if\n     * this collection contains one or more such elements.  Returns\n     * {@code true} if this collection contained the specified element (or\n     * equivalently, if this collection changed as a result of the call).\n     *\n     * @param o element to be removed from this collection, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this collection\n     *         (<a href=\"#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         collection does not permit null elements\n     *         (<a href=\"#optional-restrictions\">optional</a>)\n     * @throws UnsupportedOperationException if the <tt>remove</tt> operation\n     *         is not supported by this collection\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this collection contains all of the elements\n     * in the specified collection.\n     *\n     * @param  c collection to be checked for containment in this collection\n     * @return {@code true} if this collection contains all of the elements\n     *         in the specified collection\n     * @throws ClassCastException if the types of one or more elements\n     *         in the specified collection are incompatible with this\n     *         collection\n     *         (<a href=\"#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this collection does not permit null\n     *         elements\n     *         (<a href=\"#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null.\n     * @see    #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the elements in the specified collection to this collection\n     * (optional operation).  The behavior of this operation is undefined if\n     * the specified collection is modified while the operation is in progress.\n     * (This implies that the behavior of this call is undefined if the\n     * specified collection is this collection, and this collection is\n     * nonempty.)\n     *\n     * @param c collection containing elements to be added to this collection\n     * @return {@code true} if this collection changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code addAll} operation\n     *         is not supported by this collection\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this collection\n     * @throws NullPointerException if the specified collection contains a\n     *         null element and this collection does not permit null elements,\n     *         or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this\n     *         collection\n     * @throws IllegalStateException if not all the elements can be added at\n     *         this time due to insertion restrictions\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes all of this collection's elements that are also contained in the\n     * specified collection (optional operation).  After this call returns,\n     * this collection will contain no elements in common with the specified\n     * collection.\n     *\n     * @param c collection containing elements to be removed from this collection\n     * @return {@code true} if this collection changed as a result of the\n     *         call\n     * @throws UnsupportedOperationException if the {@code removeAll} method\n     *         is not supported by this collection\n     * @throws ClassCastException if the types of one or more elements\n     *         in this collection are incompatible with the specified\n     *         collection\n     *         (<a href=\"#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this collection contains one or more\n     *         null elements and the specified collection does not support\n     *         null elements\n     *         (<a href=\"#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes all of the elements of this collection that satisfy the given\n     * predicate.  Errors or runtime exceptions thrown during iteration or by\n     * the predicate are relayed to the caller.\n     *\n     * @implSpec\n     * The default implementation traverses all elements of the collection using\n     * its {@link #iterator}.  Each matching element is removed using\n     * {@link Iterator#remove()}.  If the collection's iterator does not\n     * support removal then an {@code UnsupportedOperationException} will be\n     * thrown on the first matching element.\n     *\n     * @param filter a predicate which returns {@code true} for elements to be\n     *        removed\n     * @return {@code true} if any elements were removed\n     * @throws NullPointerException if the specified filter is null\n     * @throws UnsupportedOperationException if elements cannot be removed\n     *         from this collection.  Implementations may throw this exception if a\n     *         matching element cannot be removed or if, in general, removal is not\n     *         supported.\n     * @since 1.8\n     ",
    "links" : [ "#iterator", "java.util.Iterator#remove()" ]
  }, {
    "name" : " boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Retains only the elements in this collection that are contained in the\n     * specified collection (optional operation).  In other words, removes from\n     * this collection all of its elements that are not contained in the\n     * specified collection.\n     *\n     * @param c collection containing elements to be retained in this collection\n     * @return {@code true} if this collection changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code retainAll} operation\n     *         is not supported by this collection\n     * @throws ClassCastException if the types of one or more elements\n     *         in this collection are incompatible with the specified\n     *         collection\n     *         (<a href=\"#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this collection contains one or more\n     *         null elements and the specified collection does not permit null\n     *         elements\n     *         (<a href=\"#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this collection (optional operation).\n     * The collection will be empty after this method returns.\n     *\n     * @throws UnsupportedOperationException if the {@code clear} operation\n     *         is not supported by this collection\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this collection for equality. <p>\n     *\n     * While the {@code Collection} interface adds no stipulations to the\n     * general contract for the {@code Object.equals}, programmers who\n     * implement the {@code Collection} interface \"directly\" (in other words,\n     * create a class that is a {@code Collection} but is not a {@code Set}\n     * or a {@code List}) must exercise care if they choose to override the\n     * {@code Object.equals}.  It is not necessary to do so, and the simplest\n     * course of action is to rely on {@code Object}'s implementation, but\n     * the implementor may wish to implement a \"value comparison\" in place of\n     * the default \"reference comparison.\"  (The {@code List} and\n     * {@code Set} interfaces mandate such value comparisons.)<p>\n     *\n     * The general contract for the {@code Object.equals} method states that\n     * equals must be symmetric (in other words, {@code a.equals(b)} if and\n     * only if {@code b.equals(a)}).  The contracts for {@code List.equals}\n     * and {@code Set.equals} state that lists are only equal to other lists,\n     * and sets to other sets.  Thus, a custom {@code equals} method for a\n     * collection class that implements neither the {@code List} nor\n     * {@code Set} interface must return {@code false} when this collection\n     * is compared to any list or set.  (By the same logic, it is not possible\n     * to write a class that correctly implements both the {@code Set} and\n     * {@code List} interfaces.)\n     *\n     * @param o object to be compared for equality with this collection\n     * @return {@code true} if the specified object is equal to this\n     * collection\n     *\n     * @see Object#equals(Object)\n     * @see Set#equals(Object)\n     * @see List#equals(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this collection.  While the\n     * {@code Collection} interface adds no stipulations to the general\n     * contract for the {@code Object.hashCode} method, programmers should\n     * take note that any class that overrides the {@code Object.equals}\n     * method must also override the {@code Object.hashCode} method in order\n     * to satisfy the general contract for the {@code Object.hashCode} method.\n     * In particular, {@code c1.equals(c2)} implies that\n     * {@code c1.hashCode()==c2.hashCode()}.\n     *\n     * @return the hash code value for this collection\n     *\n     * @see Object#hashCode()\n     * @see Object#equals(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a {@link Spliterator} over the elements in this collection.\n     *\n     * Implementations should document characteristic values reported by the\n     * spliterator.  Such characteristic values are not required to be reported\n     * if the spliterator reports {@link Spliterator#SIZED} and this collection\n     * contains no elements.\n     *\n     * <p>The default implementation should be overridden by subclasses that\n     * can return a more efficient spliterator.  In order to\n     * preserve expected laziness behavior for the {@link #stream()} and\n     * {@link #parallelStream()} methods, spliterators should either have the\n     * characteristic of {@code IMMUTABLE} or {@code CONCURRENT}, or be\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>.\n     * If none of these is practical, the overriding class should describe the\n     * spliterator's documented policy of binding and structural interference,\n     * and should override the {@link #stream()} and {@link #parallelStream()}\n     * methods to create streams using a {@code Supplier} of the spliterator,\n     * as in:\n     * <pre>{@code\n     *     Stream<E> s = StreamSupport.stream(() -> spliterator(), spliteratorCharacteristics)\n     * }</pre>\n     * <p>These requirements ensure that streams produced by the\n     * {@link #stream()} and {@link #parallelStream()} methods will reflect the\n     * contents of the collection as of initiation of the terminal stream\n     * operation.\n     *\n     * @implSpec\n     * The default implementation creates a\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em> spliterator\n     * from the collection's {@code Iterator}.  The spliterator inherits the\n     * <em>fail-fast</em> properties of the collection's iterator.\n     * <p>\n     * The created {@code Spliterator} reports {@link Spliterator#SIZED}.\n     *\n     * @implNote\n     * The created {@code Spliterator} additionally reports\n     * {@link Spliterator#SUBSIZED}.\n     *\n     * <p>If a spliterator covers no elements then the reporting of additional\n     * characteristic values, beyond that of {@code SIZED} and {@code SUBSIZED},\n     * does not aid clients to control, specialize or simplify computation.\n     * However, this does enable shared use of an immutable and empty\n     * spliterator instance (see {@link Spliterators#emptySpliterator()}) for\n     * empty collections, and enables clients to determine if such a spliterator\n     * covers no elements.\n     *\n     * @return a {@code Spliterator} over the elements in this collection\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterators#emptySpliterator()", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "#parallelStream()", "#stream()" ]
  }, {
    "name" : " Stream<E> stream()",
    "returnType" : "Stream<E>",
    "comment" : "\n     * Returns a sequential {@code Stream} with this collection as its source.\n     *\n     * <p>This method should be overridden when the {@link #spliterator()}\n     * method cannot return a spliterator that is {@code IMMUTABLE},\n     * {@code CONCURRENT}, or <em>late-binding</em>. (See {@link #spliterator()}\n     * for details.)\n     *\n     * @implSpec\n     * The default implementation creates a sequential {@code Stream} from the\n     * collection's {@code Spliterator}.\n     *\n     * @return a sequential {@code Stream} over the elements in this collection\n     * @since 1.8\n     ",
    "links" : [ "#spliterator()" ]
  }, {
    "name" : " Stream<E> parallelStream()",
    "returnType" : "Stream<E>",
    "comment" : "\n     * Returns a possibly parallel {@code Stream} with this collection as its\n     * source.  It is allowable for this method to return a sequential stream.\n     *\n     * <p>This method should be overridden when the {@link #spliterator()}\n     * method cannot return a spliterator that is {@code IMMUTABLE},\n     * {@code CONCURRENT}, or <em>late-binding</em>. (See {@link #spliterator()}\n     * for details.)\n     *\n     * @implSpec\n     * The default implementation creates a parallel {@code Stream} from the\n     * collection's {@code Spliterator}.\n     *\n     * @return a possibly parallel {@code Stream} over the elements in this\n     * collection\n     * @since 1.8\n     ",
    "links" : [ "#spliterator()" ]
  } ],
  "methodNames" : [ " int size()", " boolean isEmpty()", " boolean contains(Object o)", " Iterator<E> iterator()", " Object[] toArray()", " T[] toArray(T[] a)", " T[] toArray(IntFunction<T[]> generator)", " boolean add(E e)", " boolean remove(Object o)", " boolean containsAll(Collection<?> c)", " boolean addAll(Collection<? extends E> c)", " boolean removeAll(Collection<?> c)", " boolean removeIf(Predicate<? super E> filter)", " boolean retainAll(Collection<?> c)", " void clear()", " boolean equals(Object o)", " int hashCode()", " Spliterator<E> spliterator()", " Stream<E> stream()", " Stream<E> parallelStream()" ],
  "variableNames" : [ ]
}