{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/inputmethodservice/Keyboard.java",
  "packageName" : "android.inputmethodservice",
  "className" : "Key",
  "comment" : "\n     * Class for describing the position and characteristics of a single key in the keyboard.\n     * \n     * @attr ref android.R.styleable#Keyboard_keyWidth\n     * @attr ref android.R.styleable#Keyboard_keyHeight\n     * @attr ref android.R.styleable#Keyboard_horizontalGap\n     * @attr ref android.R.styleable#Keyboard_Key_codes\n     * @attr ref android.R.styleable#Keyboard_Key_keyIcon\n     * @attr ref android.R.styleable#Keyboard_Key_keyLabel\n     * @attr ref android.R.styleable#Keyboard_Key_iconPreview\n     * @attr ref android.R.styleable#Keyboard_Key_isSticky\n     * @attr ref android.R.styleable#Keyboard_Key_isRepeatable\n     * @attr ref android.R.styleable#Keyboard_Key_isModifier\n     * @attr ref android.R.styleable#Keyboard_Key_popupKeyboard\n     * @attr ref android.R.styleable#Keyboard_Key_popupCharacters\n     * @attr ref android.R.styleable#Keyboard_Key_keyOutputText\n     * @attr ref android.R.styleable#Keyboard_Key_keyEdgeFlags\n     ",
  "variables" : [ {
    "name" : "codes",
    "type" : "int[]",
    "comment" : " \n         * All the key codes (unicode or custom code) that this key could generate, zero'th \n         * being the most important.\n         ",
    "links" : [ ]
  }, {
    "name" : "label",
    "type" : "CharSequence",
    "comment" : " Label to display ",
    "links" : [ ]
  }, {
    "name" : "icon",
    "type" : "Drawable",
    "comment" : " Icon to display instead of a label. Icon takes precedence over a label ",
    "links" : [ ]
  }, {
    "name" : "iconPreview",
    "type" : "Drawable",
    "comment" : " Preview version of the icon, for the preview popup ",
    "links" : [ ]
  }, {
    "name" : "width",
    "type" : "int",
    "comment" : " Width of the key, not including the gap ",
    "links" : [ ]
  }, {
    "name" : "height",
    "type" : "int",
    "comment" : " Height of the key, not including the gap ",
    "links" : [ ]
  }, {
    "name" : "gap",
    "type" : "int",
    "comment" : " The horizontal gap before this key ",
    "links" : [ ]
  }, {
    "name" : "sticky",
    "type" : "boolean",
    "comment" : " Whether this key is sticky, i.e., a toggle key ",
    "links" : [ ]
  }, {
    "name" : "x",
    "type" : "int",
    "comment" : " X coordinate of the key in the keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "y",
    "type" : "int",
    "comment" : " Y coordinate of the key in the keyboard layout ",
    "links" : [ ]
  }, {
    "name" : "pressed",
    "type" : "boolean",
    "comment" : " The current pressed state of this key ",
    "links" : [ ]
  }, {
    "name" : "on",
    "type" : "boolean",
    "comment" : " If this is a sticky key, is it on? ",
    "links" : [ ]
  }, {
    "name" : "text",
    "type" : "CharSequence",
    "comment" : " Text to output when pressed. This can be multiple characters, like \".com\" ",
    "links" : [ ]
  }, {
    "name" : "popupCharacters",
    "type" : "CharSequence",
    "comment" : " Popup characters ",
    "links" : [ ]
  }, {
    "name" : "edgeFlags",
    "type" : "int",
    "comment" : " \n         * Flags that specify the anchoring to edges of the keyboard for detecting touch events\n         * that are just out of the boundary of the key. This is a bit mask of \n         * {@link Keyboard#EDGE_LEFT}, {@link Keyboard#EDGE_RIGHT}, {@link Keyboard#EDGE_TOP} and\n         * {@link Keyboard#EDGE_BOTTOM}.\n         ",
    "links" : [ "Keyboard#EDGE_LEFT", "Keyboard#EDGE_RIGHT", "Keyboard#EDGE_TOP", "Keyboard#EDGE_BOTTOM" ]
  }, {
    "name" : "modifier",
    "type" : "boolean",
    "comment" : " Whether this is a modifier key, such as Shift or Alt ",
    "links" : [ ]
  }, {
    "name" : "keyboard",
    "type" : "Keyboard",
    "comment" : " The keyboard that this key belongs to ",
    "links" : [ ]
  }, {
    "name" : "popupResId",
    "type" : "int",
    "comment" : " \n         * If this key pops up a mini keyboard, this is the resource id for the XML layout for that\n         * keyboard.\n         ",
    "links" : [ ]
  }, {
    "name" : "repeatable",
    "type" : "boolean",
    "comment" : " Whether this key repeats itself when held down ",
    "links" : [ ]
  }, {
    "name" : "KEY_STATE_NORMAL_ON",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_STATE_PRESSED_ON",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_STATE_NORMAL_OFF",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_STATE_PRESSED_OFF",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_STATE_NORMAL",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_STATE_PRESSED",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onPressed()",
    "returnType" : "void",
    "comment" : "\n         * Informs the key that it has been pressed, in case it needs to change its appearance or\n         * state.\n         * @see #onReleased(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onReleased(boolean inside)",
    "returnType" : "void",
    "comment" : "\n         * Changes the pressed state of the key.\n         *\n         * <p>Toggled state of the key will be flipped when all the following conditions are\n         * fulfilled:</p>\n         *\n         * <ul>\n         *     <li>This is a sticky key, that is, {@link #sticky} is {@code true}.\n         *     <li>The parameter {@code inside} is {@code true}.\n         *     <li>{@link android.os.Build.VERSION#SDK_INT} is greater than\n         *         {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}.\n         * </ul>\n         *\n         * @param inside whether the finger was released inside the key. Works only on Android M and\n         * later. See the method document for details.\n         * @see #onPressed()\n         ",
    "links" : [ "#sticky", "android.os.Build.VERSION#SDK_INT", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1" ]
  }, {
    "name" : " int[] parseCSV(String value)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInside(int x, int y)",
    "returnType" : "boolean",
    "comment" : "\n         * Detects if a point falls inside this key.\n         * @param x the x-coordinate of the point \n         * @param y the y-coordinate of the point\n         * @return whether or not the point falls inside the key. If the key is attached to an edge,\n         * it will assume that all points between the key and the edge are considered to be inside\n         * the key.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int squaredDistanceFrom(int x, int y)",
    "returnType" : "int",
    "comment" : "\n         * Returns the square of the distance between the center of the key and the given point.\n         * @param x the x-coordinate of the point\n         * @param y the y-coordinate of the point\n         * @return the square of the distance of the point from the center of the key\n         ",
    "links" : [ ]
  }, {
    "name" : "public int[] getCurrentDrawableState()",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the drawable state for the key, based on the current state and type of the key.\n         * @return the drawable state of the key.\n         * @see android.graphics.drawable.StateListDrawable#setState(int[])\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "codes", "label", "icon", "iconPreview", "width", "height", "gap", "sticky", "x", "y", "pressed", "on", "text", "popupCharacters", "edgeFlags", "modifier", "keyboard", "popupResId", "repeatable", "KEY_STATE_NORMAL_ON", "KEY_STATE_PRESSED_ON", "KEY_STATE_NORMAL_OFF", "KEY_STATE_PRESSED_OFF", "KEY_STATE_NORMAL", "KEY_STATE_PRESSED" ],
  "methodNames" : [ "public void onPressed()", "public void onReleased(boolean inside)", " int[] parseCSV(String value)", "public boolean isInside(int x, int y)", "public int squaredDistanceFrom(int x, int y)", "public int[] getCurrentDrawableState()" ]
}