{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/AccessibilityService.java",
  "packageName" : "android.accessibilityservice",
  "className" : "MagnificationController",
  "comment" : "\n     * Used to control and query the state of display magnification.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mService",
    "type" : "AccessibilityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<OnMagnificationChangedListener, Handler>",
    "comment" : "\n         * Map of listeners to their handlers. Lazily created when adding the\n         * first magnification listener.\n         ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void onServiceConnectedLocked()",
    "returnType" : "void",
    "comment" : "\n         * Called when the service is connected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addListener(@NonNull OnMagnificationChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Adds the specified change listener to the list of magnification\n         * change listeners. The callback will occur on the service's main\n         * thread.\n         *\n         * @param listener the listener to add, must be non-{@code null}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addListener(@NonNull OnMagnificationChangedListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n         * Adds the specified change listener to the list of magnification\n         * change listeners. The callback will occur on the specified\n         * {@link Handler}'s thread, or on the service's main thread if the\n         * handler is {@code null}.\n         *\n         * @param listener the listener to add, must be non-null\n         * @param handler the handler on which the callback should execute, or\n         *        {@code null} to execute on the service's main thread\n         ",
    "links" : [ "android.os.Handler" ]
  }, {
    "name" : "public boolean removeListener(@NonNull OnMagnificationChangedListener listener)",
    "returnType" : "boolean",
    "comment" : "\n         * Removes the specified change listener from the list of magnification change listeners.\n         *\n         * @param listener the listener to remove, must be non-null\n         * @return {@code true} if the listener was removed, {@code false} otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setMagnificationCallbackEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchMagnificationChanged(@NonNull final Region region, final MagnificationConfig config)",
    "returnType" : "void",
    "comment" : "\n         * Dispatches magnification changes to any registered listeners. This\n         * should be called on the service's main thread.\n         ",
    "links" : [ ]
  }, {
    "name" : "public MagnificationConfig getMagnificationConfig()",
    "returnType" : "MagnificationConfig",
    "comment" : "\n         * Gets the {@link MagnificationConfig} of the controlling magnifier on the display.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return null.\n         * </p>\n         *\n         * @return the magnification config that the service controls\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "android.accessibilityservice.MagnificationConfig" ]
  }, {
    "name" : "public float getScale()",
    "returnType" : "float",
    "comment" : "\n         * Returns the current magnification scale.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return a default value of {@code 1.0f}.\n         * </p>\n         * <p>\n         * <strong>Note:</strong> This legacy API gets the scale of full-screen\n         * magnification. To get the scale of the current controlling magnifier,\n         * use {@link #getMagnificationConfig} instead.\n         * </p>\n         *\n         * @return the current magnification scale\n         * @deprecated Use {@link #getMagnificationConfig()} instead\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#getMagnificationConfig", "#getMagnificationConfig()" ]
  }, {
    "name" : "public float getCenterX()",
    "returnType" : "float",
    "comment" : "\n         * Returns the unscaled screen-relative X coordinate of the focal\n         * center of the magnified region. This is the point around which\n         * zooming occurs and is guaranteed to lie within the magnified\n         * region.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return a default value of {@code 0.0f}.\n         * </p>\n         * <p>\n         * <strong>Note:</strong> This legacy API gets the center position of full-screen\n         * magnification. To get the magnification center of the current controlling magnifier,\n         * use {@link #getMagnificationConfig} instead.\n         * </p>\n         *\n         * @return the unscaled screen-relative X coordinate of the center of\n         *         the magnified region\n         * @deprecated Use {@link #getMagnificationConfig()} instead\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#getMagnificationConfig", "#getMagnificationConfig()" ]
  }, {
    "name" : "public float getCenterY()",
    "returnType" : "float",
    "comment" : "\n         * Returns the unscaled screen-relative Y coordinate of the focal\n         * center of the magnified region. This is the point around which\n         * zooming occurs and is guaranteed to lie within the magnified\n         * region.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return a default value of {@code 0.0f}.\n         * </p>\n         * <p>\n         * <strong>Note:</strong> This legacy API gets the center position of full-screen\n         * magnification. To get the magnification center of the current controlling magnifier,\n         * use {@link #getMagnificationConfig} instead.\n         * </p>\n         *\n         * @return the unscaled screen-relative Y coordinate of the center of\n         *         the magnified region\n         * @deprecated Use {@link #getMagnificationConfig()} instead\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#getMagnificationConfig", "#getMagnificationConfig()" ]
  }, {
    "name" : "public Region getMagnificationRegion()",
    "returnType" : "Region",
    "comment" : "\n         * Returns the region of the screen currently active for magnification. Changes to\n         * magnification scale and center only affect this portion of the screen. The rest of the\n         * screen, for example input methods, cannot be magnified. This region is relative to the\n         * unscaled screen and is independent of the scale and center point.\n         * <p>\n         * The returned region will be empty if magnification is not active. Magnification is active\n         * if magnification gestures are enabled or if a service is running that can control\n         * magnification.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return an empty region.\n         * </p>\n         * <p>\n         * <strong>Note:</strong> This legacy API gets the magnification region of full-screen\n         * magnification. To get the magnification region of the current controlling magnifier,\n         * use {@link #getCurrentMagnificationRegion()} instead.\n         * </p>\n         *\n         * @return the region of the screen currently active for magnification, or an empty region\n         * if magnification is not active.\n         * @deprecated Use {@link #getCurrentMagnificationRegion()} instead\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#getCurrentMagnificationRegion()" ]
  }, {
    "name" : "public Region getCurrentMagnificationRegion()",
    "returnType" : "Region",
    "comment" : "\n         * Returns the region of the screen currently active for magnification if the\n         * controlling magnification is {@link MagnificationConfig#MAGNIFICATION_MODE_FULLSCREEN}.\n         * Returns the region of screen projected on the magnification window if the\n         * controlling magnification is {@link MagnificationConfig#MAGNIFICATION_MODE_WINDOW}.\n         *\n         * <p>\n         * If the controlling mode is {@link MagnificationConfig#MAGNIFICATION_MODE_FULLSCREEN},\n         * the returned region will be empty if the magnification is\n         * not active. And the magnification is active if magnification gestures are enabled\n         * or if a service is running that can control magnification.\n         * </p><p>\n         * If the controlling mode is {@link MagnificationConfig#MAGNIFICATION_MODE_WINDOW},\n         * the returned region will be empty if the magnification is not activated.\n         * </p><p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will\n         * return an empty region.\n         * </p>\n         *\n         * @return the magnification region of the currently controlling magnification\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "android.accessibilityservice.MagnificationConfig#MAGNIFICATION_MODE_FULLSCREEN", "android.accessibilityservice.MagnificationConfig#MAGNIFICATION_MODE_WINDOW" ]
  }, {
    "name" : "public boolean reset(boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Resets magnification scale and center to their default (e.g. no\n         * magnification) values.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         * <p>\n         * <strong>Note:</strong> This legacy API reset full-screen magnification.\n         * To reset the current controlling magnifier, use\n         * {@link #resetCurrentMagnification(boolean)} ()} instead.\n         * </p>\n         *\n         * @param animate {@code true} to animate from the current scale and\n         *                center or {@code false} to reset the scale and center\n         *                immediately\n         * @return {@code true} on success, {@code false} on failure\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#resetCurrentMagnification(boolean)" ]
  }, {
    "name" : "public boolean resetCurrentMagnification(boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Resets magnification scale and center of the controlling magnification\n         * to their default (e.g. no magnification) values.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         * </p>\n         *\n         * @param animate {@code true} to animate from the current scale and\n         *                center or {@code false} to reset the scale and center\n         *                immediately\n         * @return {@code true} on success, {@code false} on failure\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public boolean setMagnificationConfig(@NonNull MagnificationConfig config, boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Sets the {@link MagnificationConfig}. The service controls the magnification by\n         * setting the config.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         * </p>\n         *\n         * @param config the magnification config\n         * @param animate {@code true} to animate from the current spec or\n         *                {@code false} to set the spec immediately\n         * @return {@code true} on success, {@code false} on failure\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "android.accessibilityservice.MagnificationConfig" ]
  }, {
    "name" : "public boolean setScale(float scale, boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Sets the magnification scale.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         * <p>\n         * <strong>Note:</strong> This legacy API sets the scale of full-screen\n         * magnification. To set the scale of the specified magnifier,\n         * use {@link #setMagnificationConfig} instead.\n         * </p>\n         *\n         * @param scale the magnification scale to set, must be >= 1 and <= 8\n         * @param animate {@code true} to animate from the current scale or\n         *                {@code false} to set the scale immediately\n         * @return {@code true} on success, {@code false} on failure\n         * @deprecated Use {@link #setMagnificationConfig(MagnificationConfig, boolean)} instead\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#setMagnificationConfig", "#setMagnificationConfig(MagnificationConfig" ]
  }, {
    "name" : "public boolean setCenter(float centerX, float centerY, boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n         * Sets the center of the magnified viewport.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been\n         * called) or the service has been disconnected, this method will have\n         * no effect and return {@code false}.\n         * </p>\n         * <p>\n         * <strong>Note:</strong> This legacy API sets the center of full-screen\n         * magnification. To set the center of the specified magnifier,\n         * use {@link #setMagnificationConfig} instead.\n         * </p>\n         *\n         * @param centerX the unscaled screen-relative X coordinate on which to\n         *                center the viewport\n         * @param centerY the unscaled screen-relative Y coordinate on which to\n         *                center the viewport\n         * @param animate {@code true} to animate from the current viewport\n         *                center or {@code false} to set the center immediately\n         * @return {@code true} on success, {@code false} on failure\n         * @deprecated Use {@link #setMagnificationConfig(MagnificationConfig, boolean)} instead\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()", "#setMagnificationConfig", "#setMagnificationConfig(MagnificationConfig" ]
  } ],
  "methodNames" : [ " void onServiceConnectedLocked()", "public void addListener(@NonNull OnMagnificationChangedListener listener)", "public void addListener(@NonNull OnMagnificationChangedListener listener, @Nullable Handler handler)", "public boolean removeListener(@NonNull OnMagnificationChangedListener listener)", "private void setMagnificationCallbackEnabled(boolean enabled)", " void dispatchMagnificationChanged(@NonNull final Region region, final MagnificationConfig config)", "public MagnificationConfig getMagnificationConfig()", "public float getScale()", "public float getCenterX()", "public float getCenterY()", "public Region getMagnificationRegion()", "public Region getCurrentMagnificationRegion()", "public boolean reset(boolean animate)", "public boolean resetCurrentMagnification(boolean animate)", "public boolean setMagnificationConfig(@NonNull MagnificationConfig config, boolean animate)", "public boolean setScale(float scale, boolean animate)", "public boolean setCenter(float centerX, float centerY, boolean animate)" ],
  "variableNames" : [ "mService", "mDisplayId", "mListeners", "mLock" ]
}