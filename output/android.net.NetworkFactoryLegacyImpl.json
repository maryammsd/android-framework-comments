{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkFactoryLegacyImpl.java",
  "packageName" : "android.net",
  "className" : "NetworkFactoryLegacyImpl",
  "comment" : " TODO(b/187083878): factor out common code between this and NetworkFactoryImpl",
  "links" : [ ],
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CMD_REQUEST_NETWORK",
    "type" : "int",
    "comment" : "\n     * Pass a network request to the bearer.  If the bearer believes it can\n     * satisfy the request it should connect to the network and create a\n     * NetworkAgent.  Once the NetworkAgent is fully functional it will\n     * register itself with ConnectivityService using registerNetworkAgent.\n     * If the bearer cannot immediately satisfy the request (no network,\n     * user disabled the radio, lower-scored network) it should remember\n     * any NetworkRequests it may be able to satisfy in the future.  It may\n     * disregard any that it will never be able to service, for example\n     * those requiring a different bearer.\n     * msg.obj = NetworkRequest\n     * msg.arg1 = score - the score of the network currently satisfying this\n     *            request.  If this bearer knows in advance it cannot\n     *            exceed this score it should not try to connect, holding the request\n     *            for the future.\n     *            Note that subsequent events may give a different (lower\n     *            or higher) score for this request, transmitted to each\n     *            NetworkFactory through additional CMD_REQUEST_NETWORK msgs\n     *            with the same NetworkRequest but an updated score.\n     *            Also, network conditions may change for this bearer\n     *            allowing for a better score in the future.\n     * msg.arg2 = the ID of the NetworkProvider currently responsible for the\n     *            NetworkAgent handling this request, or NetworkProvider.ID_NONE if none.\n     ",
    "links" : [ ]
  }, {
    "name" : "CMD_CANCEL_REQUEST",
    "type" : "int",
    "comment" : "\n     * Cancel a network request\n     * msg.obj = NetworkRequest\n     ",
    "links" : [ ]
  }, {
    "name" : "CMD_SET_SCORE",
    "type" : "int",
    "comment" : "\n     * Internally used to set our best-guess score.\n     * msg.arg1 = new score\n     ",
    "links" : [ ]
  }, {
    "name" : "CMD_SET_FILTER",
    "type" : "int",
    "comment" : "\n     * Internally used to set our current filter for coarse bandwidth changes with\n     * technology changes.\n     * msg.obj = new filter\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "NetworkFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkRequests",
    "type" : "Map<NetworkRequest, NetworkRequestInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScore",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilityFilter",
    "type" : "NetworkCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "NetworkProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void register(final String logTag)",
    "returnType" : "void",
    "comment" : " Registers this NetworkFactory with the system. May only be called once per factory. ",
    "links" : [ ]
  }, {
    "name" : "public void terminate()",
    "returnType" : "void",
    "comment" : " Unregisters this NetworkFactory. After this call, the object can no longer be used. ",
    "links" : [ ]
  }, {
    "name" : "public void handleMessage(Message msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void handleAddRequest(NetworkRequest request, int score, int servingProviderId)",
    "returnType" : "void",
    "comment" : "\n     * Add a NetworkRequest that the bearer may want to attempt to satisfy.\n     * @see #CMD_REQUEST_NETWORK\n     *\n     * @param request the request to handle.\n     * @param score the score of the NetworkAgent currently satisfying this request.\n     * @param servingProviderId the ID of the NetworkProvider that created the NetworkAgent\n     *        currently satisfying this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleRemoveRequest(NetworkRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleSetScore(int score)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleSetFilter(NetworkCapabilities netCap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean acceptRequest(NetworkRequest request)",
    "returnType" : "boolean",
    "comment" : "\n     * Overridable function to provide complex filtering.\n     * Called for every request every time a new NetworkRequest is seen\n     * and whenever the filterScore or filterNetworkCapabilities change.\n     *\n     * acceptRequest can be overridden to provide complex filter behavior\n     * for the incoming requests\n     *\n     * For output, this class will call {@link NetworkFactory#needNetworkFor} and\n     * {@link NetworkFactory#releaseNetworkFor} for every request that passes the filters.\n     * If you don't need to see every request, you can leave the base\n     * implementations of those two functions and instead override\n     * {@link NetworkFactory#startNetwork} and {@link NetworkFactory#stopNetwork}.\n     *\n     * If you want to see every score fluctuation on every request, set\n     * your score filter to a very high number and watch {@link NetworkFactory#needNetworkFor}.\n     *\n     * @return {@code true} to accept the request.\n     ",
    "links" : [ "android.net.NetworkFactory#needNetworkFor", "android.net.NetworkFactory#releaseNetworkFor", "android.net.NetworkFactory#stopNetwork", "android.net.NetworkFactory#startNetwork" ]
  }, {
    "name" : "private void evalRequest(NetworkRequestInfo n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldNeedNetworkFor(NetworkRequestInfo n)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldReleaseNetworkFor(NetworkRequestInfo n)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void evalRequests()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reevaluateAllRequests()",
    "returnType" : "void",
    "comment" : "\n     * Post a command, on this NetworkFactory Handler, to re-evaluate all\n     * outstanding requests. Can be called from a factory implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releaseRequestAsUnfulfillableByAnyFactory(NetworkRequest r)",
    "returnType" : "void",
    "comment" : "\n     * Can be called by a factory to release a request as unfulfillable: the request will be\n     * removed, and the caller will get a\n     * {@link ConnectivityManager.NetworkCallback#onUnavailable()} callback after this function\n     * returns.\n     *\n     * Note: this should only be called by factory which KNOWS that it is the ONLY factory which\n     * is able to fulfill this request!\n     ",
    "links" : [ "ConnectivityManager.NetworkCallback#onUnavailable()" ]
  }, {
    "name" : "public void setScoreFilter(int score)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScoreFilter(@NonNull final NetworkScore score)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCapabilityFilter(NetworkCapabilities netCap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRequestCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSerialNumber()",
    "returnType" : "int",
    "comment" : " TODO: delete when all callers have migrated to NetworkProvider IDs. ",
    "links" : [ ]
  }, {
    "name" : "public NetworkProvider getProvider()",
    "returnType" : "NetworkProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void register(final String logTag)", "public void terminate()", "public void handleMessage(Message msg)", "protected void handleAddRequest(NetworkRequest request, int score, int servingProviderId)", "private void handleRemoveRequest(NetworkRequest request)", "private void handleSetScore(int score)", "private void handleSetFilter(NetworkCapabilities netCap)", "public boolean acceptRequest(NetworkRequest request)", "private void evalRequest(NetworkRequestInfo n)", "private boolean shouldNeedNetworkFor(NetworkRequestInfo n)", "private boolean shouldReleaseNetworkFor(NetworkRequestInfo n)", "private void evalRequests()", "public void reevaluateAllRequests()", "public void releaseRequestAsUnfulfillableByAnyFactory(NetworkRequest r)", "public void setScoreFilter(int score)", "public void setScoreFilter(@NonNull final NetworkScore score)", "public void setCapabilityFilter(NetworkCapabilities netCap)", "public int getRequestCount()", "public int getSerialNumber()", "public NetworkProvider getProvider()", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public String toString()" ],
  "variableNames" : [ "DBG", "VDBG", "CMD_REQUEST_NETWORK", "CMD_CANCEL_REQUEST", "CMD_SET_SCORE", "CMD_SET_FILTER", "mContext", "mParent", "mNetworkRequests", "mScore", "mCapabilityFilter", "mProvider" ]
}