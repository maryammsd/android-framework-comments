{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiConfiguration.java",
  "packageName" : "android.net.wifi",
  "className" : "NetworkSelectionStatus",
  "comment" : "\n     * This class is used to contain all the information and API used for quality network selection.\n     * @hide\n     ",
  "variables" : [ {
    "name" : "NETWORK_SELECTION_ENABLED",
    "type" : "int",
    "comment" : "\n         * This network will be considered as a potential candidate to connect to during network\n         * selection.\n         ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SELECTION_TEMPORARY_DISABLED",
    "type" : "int",
    "comment" : "\n         * This network was temporary disabled. May be re-enabled after a time out.\n         ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SELECTION_PERMANENTLY_DISABLED",
    "type" : "int",
    "comment" : "\n         * This network was permanently disabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SELECTION_STATUS_MAX",
    "type" : "int",
    "comment" : "\n         * Maximum Network selection status\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_NETWORK_SELECTION_STATUS",
    "type" : "String[]",
    "comment" : "\n         * Quality network selection status String (for debug purpose). Use Quality network\n         * selection status value as index to extec the corresponding debug string\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_NONE",
    "type" : "int",
    "comment" : " Default value. Means not disabled. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SELECTION_DISABLED_STARTING_INDEX",
    "type" : "int",
    "comment" : "\n         * The starting index for network selection disabled reasons.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TEMPORARILY_DISABLED_STARTING_INDEX",
    "type" : "int",
    "comment" : "\n         * The starting index for network selection temporarily disabled reasons.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_ASSOCIATION_REJECTION",
    "type" : "int",
    "comment" : " This network is disabled because of multiple association rejections. ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_AUTHENTICATION_FAILURE",
    "type" : "int",
    "comment" : " This network is disabled because of multiple authentication failure. ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_DHCP_FAILURE",
    "type" : "int",
    "comment" : " This network is disabled because of multiple DHCP failure. ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_NO_INTERNET_TEMPORARY",
    "type" : "int",
    "comment" : " This network is temporarily disabled because it has no Internet access. ",
    "links" : [ ]
  }, {
    "name" : "PERMANENTLY_DISABLED_STARTING_INDEX",
    "type" : "int",
    "comment" : "\n         * The starting index for network selection permanently disabled reasons.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_AUTHENTICATION_NO_CREDENTIALS",
    "type" : "int",
    "comment" : " This network is disabled due to absence of user credentials ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_NO_INTERNET_PERMANENT",
    "type" : "int",
    "comment" : "\n         * This network is permanently disabled because it has no Internet access and the user does\n         * not want to stay connected.\n         ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_BY_WIFI_MANAGER",
    "type" : "int",
    "comment" : " This network is disabled due to WifiManager disabling it explicitly. ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_BY_WRONG_PASSWORD",
    "type" : "int",
    "comment" : " This network is disabled due to wrong password. ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_AUTHENTICATION_NO_SUBSCRIPTION",
    "type" : "int",
    "comment" : " This network is disabled because service is not subscribed. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_SELECTION_DISABLED_MAX",
    "type" : "int",
    "comment" : "\n         * All other disable reasons should be strictly less than this value.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_REASON_INFOS",
    "type" : "SparseArray<DisableReasonInfo>",
    "comment" : "\n         * Quality network selection disable reason infos.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INVALID_NETWORK_SELECTION_DISABLE_TIMESTAMP",
    "type" : "long",
    "comment" : "\n         * Invalid time stamp for network selection disable\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CONNECT_CHOICE_EXISTS",
    "type" : "int",
    "comment" : "\n         * This constant indicates the current configuration has connect choice set\n         ",
    "links" : [ ]
  }, {
    "name" : "CONNECT_CHOICE_NOT_EXISTS",
    "type" : "int",
    "comment" : "\n         * This constant indicates the current configuration does not have connect choice set\n         ",
    "links" : [ ]
  }, {
    "name" : "mStatus",
    "type" : "int",
    "comment" : "\n         * Network selection status, should be in one of three status: enable, temporaily disabled\n         * or permanently disabled\n         ",
    "links" : [ ]
  }, {
    "name" : "mNetworkSelectionDisableReason",
    "type" : "int",
    "comment" : "\n         * Reason for disable this network\n         ",
    "links" : [ ]
  }, {
    "name" : "mTemporarilyDisabledTimestamp",
    "type" : "long",
    "comment" : "\n         * Last time we temporarily disabled the configuration\n         ",
    "links" : [ ]
  }, {
    "name" : "mNetworkSeclectionDisableCounter",
    "type" : "int[]",
    "comment" : "\n         * counter for each Network selection disable reason\n         ",
    "links" : [ ]
  }, {
    "name" : "mConnectChoice",
    "type" : "String",
    "comment" : "\n         * Connect Choice over this configuration\n         *\n         * When current wifi configuration is visible to the user but user explicitly choose to\n         * connect to another network X, the another networks X's configure key will be stored here.\n         * We will consider user has a preference of X over this network. And in the future,\n         * network selection will always give X a higher preference over this configuration.\n         * configKey is : \"SSID\"-WEP-WPA_PSK-WPA_EAP\n         ",
    "links" : [ ]
  }, {
    "name" : "mCandidate",
    "type" : "ScanResult",
    "comment" : "\n         * Used to cache the temporary candidate during the network selection procedure. It will be\n         * kept updating once a new scan result has a higher score than current one\n         ",
    "links" : [ ]
  }, {
    "name" : "mCandidateScore",
    "type" : "int",
    "comment" : "\n         * Used to cache the score of the current temporary candidate during the network\n         * selection procedure.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSeenInLastQualifiedNetworkSelection",
    "type" : "boolean",
    "comment" : "\n         * Indicate whether this network is visible in latest Qualified Network Selection. This\n         * means there is scan result found related to this Configuration and meet the minimum\n         * requirement. The saved network need not join latest Qualified Network Selection. For\n         * example, it is disabled. True means network is visible in latest Qualified Network\n         * Selection and false means network is invisible\n         ",
    "links" : [ ]
  }, {
    "name" : "mHasEverConnected",
    "type" : "boolean",
    "comment" : "\n         * Boolean indicating if we have ever successfully connected to this network.\n         *\n         * This value will be set to true upon a successful connection.\n         * This value will be set to false if a previous value was not stored in the config or if\n         * the credentials are updated (ex. a password change).\n         ",
    "links" : [ ]
  }, {
    "name" : "mNetworkSelectionBSSID",
    "type" : "String",
    "comment" : "\n         * BSSID for connection to this network (through network selection procedure)\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getMaxNetworkSelectionDisableReason()",
    "returnType" : "int",
    "comment" : "\n         * Get an integer that is equal to the maximum integer value of all the\n         * DISABLED_* reasons\n         * e.g. {@link #DISABLED_NONE}, {@link #DISABLED_ASSOCIATION_REJECTION}, etc.\n         *\n         * All DISABLED_* constants will be contiguous in the range\n         * 0, 1, 2, 3, ..., getMaxNetworkSelectionDisableReasons()\n         *\n         * <br />\n         * For example, this can be used to iterate through all the network selection\n         * disable reasons like so:\n         * <pre>{@code\n         * for (int reason = 0; reason <= getMaxNetworkSelectionDisableReasons(); reason++) {\n         *     ...\n         * }\n         * }</pre>\n         ",
    "links" : [ "#DISABLED_NONE", "#DISABLED_ASSOCIATION_REJECTION" ]
  }, {
    "name" : "private static SparseArray<DisableReasonInfo> buildDisableReasonInfos()",
    "returnType" : "SparseArray<DisableReasonInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getDisableReasonByString(@NonNull String reasonString)",
    "returnType" : "int",
    "comment" : "\n         * Get the {@link NetworkSelectionDisableReason} int code by its string value.\n         * @return the NetworkSelectionDisableReason int code corresponding to the reason string,\n         * or -1 if the reason string is unrecognized.\n         * @hide\n         ",
    "links" : [ "NetworkSelectionDisableReason" ]
  }, {
    "name" : "public void setSeenInLastQualifiedNetworkSelection(boolean seen)",
    "returnType" : "void",
    "comment" : "\n         * set whether this network is visible in latest Qualified Network Selection\n         * @param seen value set to candidate\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSeenInLastQualifiedNetworkSelection()",
    "returnType" : "boolean",
    "comment" : "\n         * get whether this network is visible in latest Qualified Network Selection\n         * @return returns true -- network is visible in latest Qualified Network Selection\n         *         false -- network is invisible in latest Qualified Network Selection\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setCandidate(ScanResult scanCandidate)",
    "returnType" : "void",
    "comment" : "\n         * set the temporary candidate of current network selection procedure\n         * @param scanCandidate {@link ScanResult} the candidate set to mCandidate\n         * @hide\n         ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public ScanResult getCandidate()",
    "returnType" : "ScanResult",
    "comment" : "\n         * get the temporary candidate of current network selection procedure\n         * @return  returns {@link ScanResult} temporary candidate of current network selection\n         * procedure\n         * @hide\n         ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public void setCandidateScore(int score)",
    "returnType" : "void",
    "comment" : "\n         * set the score of the temporary candidate of current network selection procedure\n         * @param score value set to mCandidateScore\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCandidateScore()",
    "returnType" : "int",
    "comment" : "\n         * get the score of the temporary candidate of current network selection procedure\n         * @return returns score of the temporary candidate of current network selection procedure\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getConnectChoice()",
    "returnType" : "String",
    "comment" : "\n         * get user preferred choice over this configuration\n         * @return returns configKey of user preferred choice over this configuration\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectChoice(String newConnectChoice)",
    "returnType" : "void",
    "comment" : "\n         * set user preferred choice over this configuration\n         * @param newConnectChoice, the configKey of user preferred choice over this configuration\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getNetworkStatusString()",
    "returnType" : "String",
    "comment" : " Get the current Quality network selection status as a String (for debugging). ",
    "links" : [ ]
  }, {
    "name" : "public void setHasEverConnected(boolean value)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEverConnected()",
    "returnType" : "boolean",
    "comment" : " True if the device has ever connected to this network, false otherwise. ",
    "links" : [ ]
  }, {
    "name" : "public static String getNetworkSelectionDisableReasonString(@NetworkSelectionDisableReason int reason)",
    "returnType" : "String",
    "comment" : "\n         * Get the network disable reason string for a reason code (for debugging).\n         * @param reason specific error reason. One of the {@link #DISABLED_NONE} or\n         *               DISABLED_* constants e.g. {@link #DISABLED_ASSOCIATION_REJECTION}.\n         * @return network disable reason string, or null if the reason is invalid.\n         ",
    "links" : [ "#DISABLED_NONE", "#DISABLED_ASSOCIATION_REJECTION" ]
  }, {
    "name" : "public String getNetworkSelectionDisableReasonString()",
    "returnType" : "String",
    "comment" : "\n         * get current network disable reason\n         * @return current network disable reason in String (for debug purpose)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkSelectionStatus()",
    "returnType" : "int",
    "comment" : "\n         * Get the current network network selection status.\n         * One of:\n         * {@link #NETWORK_SELECTION_ENABLED},\n         * {@link #NETWORK_SELECTION_TEMPORARY_DISABLED},\n         * {@link #NETWORK_SELECTION_PERMANENTLY_DISABLED}\n         ",
    "links" : [ "#NETWORK_SELECTION_PERMANENTLY_DISABLED", "#NETWORK_SELECTION_ENABLED", "#NETWORK_SELECTION_TEMPORARY_DISABLED" ]
  }, {
    "name" : "public boolean isNetworkEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * True if the current network is enabled to join network selection, false otherwise.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNetworkTemporaryDisabled()",
    "returnType" : "boolean",
    "comment" : "\n         * @return whether current network is temporary disabled\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNetworkPermanentlyDisabled()",
    "returnType" : "boolean",
    "comment" : "\n         * True if the current network is permanently disabled, false otherwise.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkSelectionStatus(int status)",
    "returnType" : "void",
    "comment" : "\n         * set current network selection status\n         * @param status network selection status to set\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkSelectionDisableReason()",
    "returnType" : "int",
    "comment" : "\n         * Returns the current network's disable reason.\n         * One of the {@link #DISABLED_NONE} or DISABLED_* constants\n         * e.g. {@link #DISABLED_ASSOCIATION_REJECTION}.\n         ",
    "links" : [ "#DISABLED_NONE", "#DISABLED_ASSOCIATION_REJECTION" ]
  }, {
    "name" : "public void setNetworkSelectionDisableReason(@NetworkSelectionDisableReason int reason)",
    "returnType" : "void",
    "comment" : "\n         * set Network disable reason\n         * @param reason Network disable reason\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setDisableTime(long timeStamp)",
    "returnType" : "void",
    "comment" : "\n         * @param timeStamp Set when current network is disabled in millisecond since January 1,\n         * 1970 00:00:00.0 UTC\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getDisableTime()",
    "returnType" : "long",
    "comment" : "\n         * Returns when the current network was disabled, in milliseconds since January 1,\n         * 1970 00:00:00.0 UTC.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getDisableReasonCounter(@NetworkSelectionDisableReason int reason)",
    "returnType" : "int",
    "comment" : "\n         * Get the disable counter of a specific reason.\n         * @param reason specific failure reason. One of the {@link #DISABLED_NONE} or\n         *              DISABLED_* constants e.g. {@link #DISABLED_ASSOCIATION_REJECTION}.\n         * @exception IllegalArgumentException for invalid reason\n         * @return counter number for specific error reason.\n         ",
    "links" : [ "#DISABLED_NONE", "#DISABLED_ASSOCIATION_REJECTION" ]
  }, {
    "name" : "public void setDisableReasonCounter(int reason, int value)",
    "returnType" : "void",
    "comment" : "\n         * set the counter of a specific failure reason\n         * @param reason reason for disable error\n         * @param value the counter value for this specific reason\n         * @exception throw IllegalArgumentException for illegal input\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void incrementDisableReasonCounter(int reason)",
    "returnType" : "void",
    "comment" : "\n         * increment the counter of a specific failure reason\n         * @param reason a specific failure reason\n         * @exception throw IllegalArgumentException for illegal input\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void clearDisableReasonCounter(int reason)",
    "returnType" : "void",
    "comment" : "\n         * clear the counter of a specific failure reason\n         * @param reason a specific failure reason\n         * @exception throw IllegalArgumentException for illegal input\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void clearDisableReasonCounter()",
    "returnType" : "void",
    "comment" : "\n         * clear all the failure reason counters\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getNetworkSelectionBSSID()",
    "returnType" : "String",
    "comment" : "\n         * get current network Selection BSSID\n         * @return current network Selection BSSID\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkSelectionBSSID(String bssid)",
    "returnType" : "void",
    "comment" : "\n         * set network Selection BSSID\n         * @param bssid The target BSSID for assocaition\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void copy(NetworkSelectionStatus source)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NETWORK_SELECTION_ENABLED", "NETWORK_SELECTION_TEMPORARY_DISABLED", "NETWORK_SELECTION_PERMANENTLY_DISABLED", "NETWORK_SELECTION_STATUS_MAX", "QUALITY_NETWORK_SELECTION_STATUS", "DISABLED_NONE", "NETWORK_SELECTION_DISABLED_STARTING_INDEX", "TEMPORARILY_DISABLED_STARTING_INDEX", "DISABLED_ASSOCIATION_REJECTION", "DISABLED_AUTHENTICATION_FAILURE", "DISABLED_DHCP_FAILURE", "DISABLED_NO_INTERNET_TEMPORARY", "PERMANENTLY_DISABLED_STARTING_INDEX", "DISABLED_AUTHENTICATION_NO_CREDENTIALS", "DISABLED_NO_INTERNET_PERMANENT", "DISABLED_BY_WIFI_MANAGER", "DISABLED_BY_WRONG_PASSWORD", "DISABLED_AUTHENTICATION_NO_SUBSCRIPTION", "NETWORK_SELECTION_DISABLED_MAX", "DISABLE_REASON_INFOS", "INVALID_NETWORK_SELECTION_DISABLE_TIMESTAMP", "CONNECT_CHOICE_EXISTS", "CONNECT_CHOICE_NOT_EXISTS", "mStatus", "mNetworkSelectionDisableReason", "mTemporarilyDisabledTimestamp", "mNetworkSeclectionDisableCounter", "mConnectChoice", "mCandidate", "mCandidateScore", "mSeenInLastQualifiedNetworkSelection", "mHasEverConnected", "mNetworkSelectionBSSID" ],
  "methodNames" : [ "public static int getMaxNetworkSelectionDisableReason()", "private static SparseArray<DisableReasonInfo> buildDisableReasonInfos()", "public static int getDisableReasonByString(@NonNull String reasonString)", "public void setSeenInLastQualifiedNetworkSelection(boolean seen)", "public boolean getSeenInLastQualifiedNetworkSelection()", "public void setCandidate(ScanResult scanCandidate)", "public ScanResult getCandidate()", "public void setCandidateScore(int score)", "public int getCandidateScore()", "public String getConnectChoice()", "public void setConnectChoice(String newConnectChoice)", "public String getNetworkStatusString()", "public void setHasEverConnected(boolean value)", "public boolean hasEverConnected()", "public static String getNetworkSelectionDisableReasonString(@NetworkSelectionDisableReason int reason)", "public String getNetworkSelectionDisableReasonString()", "public int getNetworkSelectionStatus()", "public boolean isNetworkEnabled()", "public boolean isNetworkTemporaryDisabled()", "public boolean isNetworkPermanentlyDisabled()", "public void setNetworkSelectionStatus(int status)", "public int getNetworkSelectionDisableReason()", "public void setNetworkSelectionDisableReason(@NetworkSelectionDisableReason int reason)", "public void setDisableTime(long timeStamp)", "public long getDisableTime()", "public int getDisableReasonCounter(@NetworkSelectionDisableReason int reason)", "public void setDisableReasonCounter(int reason, int value)", "public void incrementDisableReasonCounter(int reason)", "public void clearDisableReasonCounter(int reason)", "public void clearDisableReasonCounter()", "public String getNetworkSelectionBSSID()", "public void setNetworkSelectionBSSID(String bssid)", "public void copy(NetworkSelectionStatus source)", "public void writeToParcel(Parcel dest)", "public void readFromParcel(Parcel in)" ]
}