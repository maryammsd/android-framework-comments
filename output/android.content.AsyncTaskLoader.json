{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/AsyncTaskLoader.java",
  "packageName" : "android.content",
  "className" : "AsyncTaskLoader",
  "comment" : "\n * Abstract Loader that provides an {@link AsyncTask} to do the work.  See\n * {@link Loader} and {@link android.app.LoaderManager} for more details.\n *\n * <p>Here is an example implementation of an AsyncTaskLoader subclass that\n * loads the currently installed applications from the package manager.  This\n * implementation takes care of retrieving the application labels and sorting\n * its result set from them, monitoring for changes to the installed\n * applications, and rebuilding the list when a change in configuration requires\n * this (such as a locale change).\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/LoaderCustom.java\n *      loader}\n *\n * <p>An example implementation of a fragment that uses the above loader to show\n * the currently installed applications in a list is below.\n *\n * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/LoaderCustom.java\n *      fragment}\n *\n * @param <D> the data type to be loaded.\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.loader.content.AsyncTaskLoader}\n ",
  "links" : [ "androidx.loader.content.AsyncTaskLoader", "android.os.AsyncTask", "android.content.Loader", "android.app.LoaderManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTask",
    "type" : "LoadTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancellingTask",
    "type" : "LoadTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateThrottle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastLoadCompleteTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUpdateThrottle(long delayMS)",
    "returnType" : "void",
    "comment" : "\n     * Set amount to throttle updates by.  This is the minimum time from\n     * when the last {@link #loadInBackground()} call has completed until\n     * a new load is scheduled.\n     *\n     * @param delayMS Amount of delay, in milliseconds.\n     ",
    "links" : [ "#loadInBackground()" ]
  }, {
    "name" : "protected void onForceLoad()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onCancelLoad()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCanceled(D data)",
    "returnType" : "void",
    "comment" : "\n     * Called if the task was canceled before it was completed.  Gives the class a chance\n     * to clean up post-cancellation and to properly dispose of the result.\n     *\n     * @param data The value that was returned by {@link #loadInBackground}, or null\n     * if the task threw {@link OperationCanceledException}.\n     ",
    "links" : [ "android.os.OperationCanceledException", "#loadInBackground" ]
  }, {
    "name" : " void executePendingTask()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnCancelled(LoadTask task, D data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnLoadComplete(LoadTask task, D data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract D loadInBackground()",
    "returnType" : "D",
    "comment" : "\n     * Called on a worker thread to perform the actual load and to return\n     * the result of the load operation.\n     *\n     * Implementations should not deliver the result directly, but should return them\n     * from this method, which will eventually end up calling {@link #deliverResult} on\n     * the UI thread.  If implementations need to process the results on the UI thread\n     * they may override {@link #deliverResult} and do so there.\n     *\n     * To support cancellation, this method should periodically check the value of\n     * {@link #isLoadInBackgroundCanceled} and terminate when it returns true.\n     * Subclasses may also override {@link #cancelLoadInBackground} to interrupt the load\n     * directly instead of polling {@link #isLoadInBackgroundCanceled}.\n     *\n     * When the load is canceled, this method may either return normally or throw\n     * {@link OperationCanceledException}.  In either case, the {@link Loader} will\n     * call {@link #onCanceled} to perform post-cancellation cleanup and to dispose of the\n     * result object, if any.\n     *\n     * @return The result of the load operation.\n     *\n     * @throws OperationCanceledException if the load is canceled during execution.\n     *\n     * @see #isLoadInBackgroundCanceled\n     * @see #cancelLoadInBackground\n     * @see #onCanceled\n     ",
    "links" : [ "#deliverResult", "android.os.OperationCanceledException", "android.content.Loader", "#onCanceled", "#isLoadInBackgroundCanceled", "#cancelLoadInBackground" ]
  }, {
    "name" : "protected D onLoadInBackground()",
    "returnType" : "D",
    "comment" : "\n     * Calls {@link #loadInBackground()}.\n     *\n     * This method is reserved for use by the loader framework.\n     * Subclasses should override {@link #loadInBackground} instead of this method.\n     *\n     * @return The result of the load operation.\n     *\n     * @throws OperationCanceledException if the load is canceled during execution.\n     *\n     * @see #loadInBackground\n     ",
    "links" : [ "#loadInBackground", "#loadInBackground()" ]
  }, {
    "name" : "public void cancelLoadInBackground()",
    "returnType" : "void",
    "comment" : "\n     * Called on the main thread to abort a load in progress.\n     *\n     * Override this method to abort the current invocation of {@link #loadInBackground}\n     * that is running in the background on a worker thread.\n     *\n     * This method should do nothing if {@link #loadInBackground} has not started\n     * running or if it has already finished.\n     *\n     * @see #loadInBackground\n     ",
    "links" : [ "#loadInBackground" ]
  }, {
    "name" : "public boolean isLoadInBackgroundCanceled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current invocation of {@link #loadInBackground} is being canceled.\n     *\n     * @return True if the current invocation of {@link #loadInBackground} is being canceled.\n     *\n     * @see #loadInBackground\n     ",
    "links" : [ "#loadInBackground" ]
  }, {
    "name" : "public void waitForLoader()",
    "returnType" : "void",
    "comment" : "\n     * Locks the current thread until the loader completes the current load\n     * operation. Returns immediately if there is no load operation running.\n     * Should not be called from the UI thread: calling it from the UI\n     * thread would cause a deadlock.\n     * <p>\n     * Use for testing only.  <b>Never</b> call this from a UI thread.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setUpdateThrottle(long delayMS)", "protected void onForceLoad()", "protected boolean onCancelLoad()", "public void onCanceled(D data)", " void executePendingTask()", " void dispatchOnCancelled(LoadTask task, D data)", " void dispatchOnLoadComplete(LoadTask task, D data)", "public abstract D loadInBackground()", "protected D onLoadInBackground()", "public void cancelLoadInBackground()", "public boolean isLoadInBackgroundCanceled()", "public void waitForLoader()", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ],
  "variableNames" : [ "TAG", "DEBUG", "mExecutor", "mTask", "mCancellingTask", "mUpdateThrottle", "mLastLoadCompleteTime", "mHandler" ]
}