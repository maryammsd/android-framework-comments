{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/lang/UCharacterNameIterator.java",
  "packageName" : "android.icu.lang",
  "className" : "UCharacterNameIterator",
  "comment" : "\n * <p>Class enabling iteration of the codepoints and their names.</p>\n * <p>Result of each iteration contains a valid codepoint that has valid\n * name.</p>\n * <p>See UCharacter.getNameIterator() for an example of use.</p>\n * @author synwee\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_name_",
    "type" : "UCharacterName",
    "comment" : "\n     * Name data\n     ",
    "links" : [ ]
  }, {
    "name" : "m_choice_",
    "type" : "int",
    "comment" : "\n     * Name choice\n     ",
    "links" : [ ]
  }, {
    "name" : "m_start_",
    "type" : "int",
    "comment" : "\n     * Start iteration range\n     ",
    "links" : [ ]
  }, {
    "name" : "m_limit_",
    "type" : "int",
    "comment" : "\n     * End + 1 iteration range\n     ",
    "links" : [ ]
  }, {
    "name" : "m_current_",
    "type" : "int",
    "comment" : "\n     * Current codepoint\n     ",
    "links" : [ ]
  }, {
    "name" : "m_groupIndex_",
    "type" : "int",
    "comment" : "\n     * Group index\n     ",
    "links" : [ ]
  }, {
    "name" : "m_algorithmIndex_",
    "type" : "int",
    "comment" : "\n     * Algorithm index\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_OFFSETS_",
    "type" : "char[]",
    "comment" : "\n    * Group use\n    ",
    "links" : [ ]
  }, {
    "name" : "GROUP_LENGTHS_",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean next(ValueIterator.Element element)",
    "returnType" : "boolean",
    "comment" : "\n    * <p>Gets the next result for this iteration and returns\n    * true if we are not at the end of the iteration, false otherwise.</p>\n    * <p>If the return boolean is a false, the contents of elements will not\n    * be updated.</p>\n    * @param element for storing the result codepoint and name\n    * @return true if we are not at the end of the iteration, false otherwise.\n    * @see android.icu.util.ValueIterator.Element\n    ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n    * <p>Resets the iterator to start iterating from the integer index\n    * UCharacter.MIN_VALUE or X if a setRange(X, Y) has been called previously.\n    * </p>\n    ",
    "links" : [ ]
  }, {
    "name" : "public void setRange(int start, int limit)",
    "returnType" : "void",
    "comment" : "\n     * <p>Restricts the range of integers to iterate and resets the iteration\n     * to begin at the index argument start.</p>\n     * <p>If setRange(start, end) is not performed before next(element) is\n     * called, the iteration will start from the integer index\n     * UCharacter.MIN_VALUE and end at UCharacter.MAX_VALUE.</p>\n     * <p>\n     * If this range is set outside the range of UCharacter.MIN_VALUE and\n     * UCharacter.MAX_VALUE, next(element) will always return false.\n     * </p>\n     * @param start first integer in range to iterate\n     * @param limit 1 integer after the last integer in range\n     * @exception IllegalArgumentException thrown when attempting to set an\n     *            illegal range. E.g limit <= start\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean iterateSingleGroup(ValueIterator.Element result, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Group name iteration, iterate all the names in the current 32-group and\n     * returns the first codepoint that has a valid name.\n     * @param result stores the result codepoint and name\n     * @param limit last codepoint + 1 in range to search\n     * @return false if a codepoint with a name is found in group and we can\n     *         bail from further iteration, true to continue on with the\n     *         iteration\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean iterateGroup(ValueIterator.Element result, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Group name iteration, iterate all the names in the current 32-group and\n     * returns the first codepoint that has a valid name.\n     * @param result stores the result codepoint and name\n     * @param limit last codepoint + 1 in range to search\n     * @return false if a codepoint with a name is found in group and we can\n     *         bail from further iteration, true to continue on with the\n     *         iteration\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean iterateExtended(ValueIterator.Element result, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Iterate extended names.\n     * @param result stores the result codepoint and name\n     * @param limit last codepoint + 1 in range to search\n     * @return false if a codepoint with a name is found and we can\n     *         bail from further iteration, true to continue on with the\n     *         iteration (this will always be false for valid codepoints)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean next(ValueIterator.Element element)", "public void reset()", "public void setRange(int start, int limit)", "private boolean iterateSingleGroup(ValueIterator.Element result, int limit)", "private boolean iterateGroup(ValueIterator.Element result, int limit)", "private boolean iterateExtended(ValueIterator.Element result, int limit)" ],
  "variableNames" : [ "m_name_", "m_choice_", "m_start_", "m_limit_", "m_current_", "m_groupIndex_", "m_algorithmIndex_", "GROUP_OFFSETS_", "GROUP_LENGTHS_" ]
}