{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/processor/TransformerFactoryImpl.java",
  "packageName" : "org.apache.xalan.processor",
  "className" : "TransformerFactoryImpl",
  "comment" : "\n * The TransformerFactoryImpl, which implements the TRaX TransformerFactory\n * interface, processes XSLT stylesheets into a Templates object\n * (a StylesheetRoot).\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "XSLT_PROPERTIES",
    "type" : "String",
    "comment" : " \n   * The path/filename of the property file: XSLTInfo.properties  \n   * Maintenance note: see also\n   * <code>org.apache.xpath.functions.FuncSystemProperty.XSLT_PROPERTIES</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isSecureProcessing",
    "type" : "boolean",
    "comment" : "\n   * <p>State of secure processing feature.</p>\n   ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_INCREMENTAL",
    "type" : "String",
    "comment" : " Static string to be used for incremental feature ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_OPTIMIZE",
    "type" : "String",
    "comment" : " Static string to be used for optimize feature ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_SOURCE_LOCATION",
    "type" : "String",
    "comment" : " Static string to be used for source_location feature ",
    "links" : [ ]
  }, {
    "name" : "m_DOMsystemID",
    "type" : "String",
    "comment" : "\n   * The systemID that was specified in\n   * processFromNode(Node node, String systemID).\n   ",
    "links" : [ ]
  }, {
    "name" : "m_optimize",
    "type" : "boolean",
    "comment" : "\n   * Flag set by FEATURE_OPTIMIZE.\n   * This feature specifies whether to Optimize stylesheet processing. By\n   * default it is set to true.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_source_location",
    "type" : "boolean",
    "comment" : " Flag set by FEATURE_SOURCE_LOCATION.\n   * This feature specifies whether the transformation phase should\n   * keep track of line and column numbers for the input source\n   * document. Note that this works only when that\n   * information is available from the source -- in other words, if you\n   * pass in a DOM, there's little we can do for you.\n   * \n   * The default is false. Setting it true may significantly\n   * increase storage cost per node. \n   ",
    "links" : [ ]
  }, {
    "name" : "m_incremental",
    "type" : "boolean",
    "comment" : "\n   * Flag set by FEATURE_INCREMENTAL.\n   * This feature specifies whether to produce output incrementally, rather than\n   * waiting to finish parsing the input before generating any output. By \n   * default this attribute is set to false. \n   ",
    "links" : [ ]
  }, {
    "name" : "m_uriResolver",
    "type" : "URIResolver",
    "comment" : "\n   * The object that implements the URIResolver interface,\n   * or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_errorListener",
    "type" : "ErrorListener",
    "comment" : " The error listener.   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public javax.xml.transform.Templates processFromNode(Node node) throws TransformerConfigurationException",
    "returnType" : "javax.xml.transform.Templates",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getDOMsystemID()",
    "returnType" : "String",
    "comment" : "\n   * The systemID that was specified in\n   * processFromNode(Node node, String systemID).\n   *\n   * @return The systemID, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : " javax.xml.transform.Templates processFromNode(Node node, String systemID) throws TransformerConfigurationException",
    "returnType" : "javax.xml.transform.Templates",
    "comment" : "\n   * Process the stylesheet from a DOM tree, if the\n   * processor supports the \"http://xml.org/trax/features/dom/input\"\n   * feature.\n   *\n   * @param node A DOM tree which must contain\n   * valid transform instructions that this processor understands.\n   * @param systemID The systemID from where xsl:includes and xsl:imports\n   * should be resolved from.\n   *\n   * @return A Templates object capable of being used for transformation purposes.\n   *\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Source getAssociatedStylesheet(Source source, String media, String title, String charset) throws TransformerConfigurationException",
    "returnType" : "Source",
    "comment" : "\n   * Get InputSource specification(s) that are associated with the\n   * given document specified in the source param,\n   * via the xml-stylesheet processing instruction\n   * (see http://www.w3.org/TR/xml-stylesheet/), and that matches\n   * the given criteria.  Note that it is possible to return several stylesheets\n   * that match the criteria, in which case they are applied as if they were\n   * a list of imports or cascades.\n   *\n   * <p>Note that DOM2 has it's own mechanism for discovering stylesheets.\n   * Therefore, there isn't a DOM version of this method.</p>\n   *\n   *\n   * @param source The XML source that is to be searched.\n   * @param media The media attribute to be matched.  May be null, in which\n   *              case the prefered templates will be used (i.e. alternate = no).\n   * @param title The value of the title attribute to match.  May be null.\n   * @param charset The value of the charset attribute to match.  May be null.\n   *\n   * @return A Source object capable of being used to create a Templates object.\n   *\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException",
    "returnType" : "TemplatesHandler",
    "comment" : "\n   * Create a new Transformer object that performs a copy\n   * of the source to the result.\n   *\n   * @return A Transformer object that may be used to perform a transformation\n   * in a single thread, never null.\n   *\n   * @throws TransformerConfigurationException May throw this during\n   *            the parse when it is constructing the\n   *            Templates object and fails.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws TransformerConfigurationException",
    "returnType" : "void",
    "comment" : "\n   * <p>Set a feature for this <code>TransformerFactory</code> and <code>Transformer</code>s\n   * or <code>Template</code>s created by this factory.</p>\n   * \n   * <p>\n   * Feature names are fully qualified {@link java.net.URI}s.\n   * Implementations may define their own features.\n   * An {@link TransformerConfigurationException} is thrown if this <code>TransformerFactory</code> or the\n   * <code>Transformer</code>s or <code>Template</code>s it creates cannot support the feature.\n   * It is possible for an <code>TransformerFactory</code> to expose a feature value but be unable to change its state.\n   * </p>\n   * \n   * <p>See {@link javax.xml.transform.TransformerFactory} for full documentation of specific features.</p>\n   * \n   * @param name Feature name.\n   * @param value Is feature state <code>true</code> or <code>false</code>.\n   *  \n   * @throws TransformerConfigurationException if this <code>TransformerFactory</code>\n   *   or the <code>Transformer</code>s or <code>Template</code>s it creates cannot support this feature.\n   * @throws NullPointerException If the <code>name</code> parameter is null.\n   ",
    "links" : [ "javax.xml.transform.TransformerConfigurationException", "java.net.URI", "javax.xml.transform.TransformerFactory" ]
  }, {
    "name" : "public boolean getFeature(String name)",
    "returnType" : "boolean",
    "comment" : "\n   * Look up the value of a feature.\n   * <p>The feature name is any fully-qualified URI.  It is\n   * possible for an TransformerFactory to recognize a feature name but\n   * to be unable to return its value; this is especially true\n   * in the case of an adapter for a SAX1 Parser, which has\n   * no way of knowing whether the underlying parser is\n   * validating, for example.</p>\n   *\n   * @param name The feature name, which is a fully-qualified URI.\n   * @return The current state of the feature (true or false).\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String name, Object value) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Allows the user to set specific attributes on the underlying\n   * implementation.\n   *\n   * @param name The name of the attribute.\n   * @param value The value of the attribute; Boolean or String=\"true\"|\"false\"\n   *\n   * @throws IllegalArgumentException thrown if the underlying\n   * implementation doesn't recognize the attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object getAttribute(String name) throws IllegalArgumentException",
    "returnType" : "Object",
    "comment" : "\n   * Allows the user to retrieve specific attributes on the underlying\n   * implementation.\n   *\n   * @param name The name of the attribute.\n   * @return value The value of the attribute.\n   *\n   * @throws IllegalArgumentException thrown if the underlying\n   * implementation doesn't recognize the attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLFilter newXMLFilter(Source src) throws TransformerConfigurationException",
    "returnType" : "XMLFilter",
    "comment" : "\n   * Create an XMLFilter that uses the given source as the\n   * transformation instructions.\n   *\n   * @param src The source of the transformation instructions.\n   *\n   * @return An XMLFilter object, or null if this feature is not supported.\n   *\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLFilter newXMLFilter(Templates templates) throws TransformerConfigurationException",
    "returnType" : "XMLFilter",
    "comment" : "\n   * Create an XMLFilter that uses the given source as the\n   * transformation instructions.\n   *\n   * @param templates non-null reference to Templates object.\n   *\n   * @return An XMLFilter object, or null if this feature is not supported.\n   *\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public TransformerHandler newTransformerHandler(Source src) throws TransformerConfigurationException",
    "returnType" : "TransformerHandler",
    "comment" : "\n   * Get a TransformerHandler object that can process SAX\n   * ContentHandler events into a Result, based on the transformation\n   * instructions specified by the argument.\n   *\n   * @param src The source of the transformation instructions.\n   *\n   * @return TransformerHandler ready to transform SAX events.\n   *\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException",
    "returnType" : "TransformerHandler",
    "comment" : "\n   * Get a TransformerHandler object that can process SAX\n   * ContentHandler events into a Result, based on the Templates argument.\n   *\n   * @param templates The source of the transformation instructions.\n   *\n   * @return TransformerHandler ready to transform SAX events.\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public TransformerHandler newTransformerHandler() throws TransformerConfigurationException",
    "returnType" : "TransformerHandler",
    "comment" : "\n   * Get a TransformerHandler object that can process SAX\n   * ContentHandler events into a Result.\n   *\n   * @return TransformerHandler ready to transform SAX events.\n   *\n   * @throws TransformerConfigurationException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Transformer newTransformer(Source source) throws TransformerConfigurationException",
    "returnType" : "Transformer",
    "comment" : "\n   * Process the source into a Transformer object.  Care must\n   * be given to know that this object can not be used concurrently\n   * in multiple threads.\n   *\n   * @param source An object that holds a URL, input stream, etc.\n   *\n   * @return A Transformer object capable of\n   * being used for transformation purposes in a single thread.\n   *\n   * @throws TransformerConfigurationException May throw this during the parse when it\n   *            is constructing the Templates object and fails.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Transformer newTransformer() throws TransformerConfigurationException",
    "returnType" : "Transformer",
    "comment" : "\n   * Create a new Transformer object that performs a copy\n   * of the source to the result.\n   *\n   * @return A Transformer object capable of\n   * being used for transformation purposes in a single thread.\n   *\n   * @throws TransformerConfigurationException May throw this during\n   *            the parse when it is constructing the\n   *            Templates object and it fails.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Templates newTemplates(Source source) throws TransformerConfigurationException",
    "returnType" : "Templates",
    "comment" : "\n   * Process the source into a Templates object, which is likely\n   * a compiled representation of the source. This Templates object\n   * may then be used concurrently across multiple threads.  Creating\n   * a Templates object allows the TransformerFactory to do detailed\n   * performance optimization of transformation instructions, without\n   * penalizing runtime transformation.\n   *\n   * @param source An object that holds a URL, input stream, etc.\n   * @return A Templates object capable of being used for transformation purposes.\n   *\n   * @throws TransformerConfigurationException May throw this during the parse when it\n   *            is constructing the Templates object and fails.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setURIResolver(URIResolver resolver)",
    "returnType" : "void",
    "comment" : "\n   * Set an object that will be used to resolve URIs used in\n   * xsl:import, etc.  This will be used as the default for the\n   * transformation.\n   * @param resolver An object that implements the URIResolver interface,\n   * or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public URIResolver getURIResolver()",
    "returnType" : "URIResolver",
    "comment" : "\n   * Get the object that will be used to resolve URIs used in\n   * xsl:import, etc.  This will be used as the default for the\n   * transformation.\n   *\n   * @return The URIResolver that was set with setURIResolver.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ErrorListener getErrorListener()",
    "returnType" : "ErrorListener",
    "comment" : "\n   * Get the error listener in effect for the TransformerFactory.\n   *\n   * @return A non-null reference to an error listener.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorListener(ErrorListener listener) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Set an error listener for the TransformerFactory.\n   *\n   * @param listener Must be a non-null reference to an ErrorListener.\n   *\n   * @throws IllegalArgumentException if the listener argument is null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSecureProcessing()",
    "returnType" : "boolean",
    "comment" : "\n   * Return the state of the secure processing feature.\n   * \n   * @return state of the secure processing feature.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public javax.xml.transform.Templates processFromNode(Node node) throws TransformerConfigurationException", " String getDOMsystemID()", " javax.xml.transform.Templates processFromNode(Node node, String systemID) throws TransformerConfigurationException", "public Source getAssociatedStylesheet(Source source, String media, String title, String charset) throws TransformerConfigurationException", "public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException", "public void setFeature(String name, boolean value) throws TransformerConfigurationException", "public boolean getFeature(String name)", "public void setAttribute(String name, Object value) throws IllegalArgumentException", "public Object getAttribute(String name) throws IllegalArgumentException", "public XMLFilter newXMLFilter(Source src) throws TransformerConfigurationException", "public XMLFilter newXMLFilter(Templates templates) throws TransformerConfigurationException", "public TransformerHandler newTransformerHandler(Source src) throws TransformerConfigurationException", "public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException", "public TransformerHandler newTransformerHandler() throws TransformerConfigurationException", "public Transformer newTransformer(Source source) throws TransformerConfigurationException", "public Transformer newTransformer() throws TransformerConfigurationException", "public Templates newTemplates(Source source) throws TransformerConfigurationException", "public void setURIResolver(URIResolver resolver)", "public URIResolver getURIResolver()", "public ErrorListener getErrorListener()", "public void setErrorListener(ErrorListener listener) throws IllegalArgumentException", "public boolean isSecureProcessing()" ],
  "variableNames" : [ "XSLT_PROPERTIES", "m_isSecureProcessing", "FEATURE_INCREMENTAL", "FEATURE_OPTIMIZE", "FEATURE_SOURCE_LOCATION", "m_DOMsystemID", "m_optimize", "m_source_location", "m_incremental", "m_uriResolver", "m_errorListener" ]
}