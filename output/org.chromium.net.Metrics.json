{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/RequestFinishedInfo.java",
  "packageName" : "org.chromium.net",
  "className" : "Metrics",
  "comment" : "\n     * Metrics collected for a single request. Most of these metrics are timestamps for events\n     * during the lifetime of the request, which can be used to build a detailed timeline for\n     * investigating performance.\n     *\n     * <p>Events happen in this order:\n     *\n     * <ol>\n     *   <li>{@link #getRequestStart request start}\n     *   <li>{@link #getDnsStart DNS start}\n     *   <li>{@link #getDnsEnd DNS end}\n     *   <li>{@link #getConnectStart connect start}\n     *   <li>{@link #getSslStart SSL start}\n     *   <li>{@link #getSslEnd SSL end}\n     *   <li>{@link #getConnectEnd connect end}\n     *   <li>{@link #getSendingStart sending start}\n     *   <li>{@link #getSendingEnd sending end}\n     *   <li>{@link #getResponseStart response start}\n     *   <li>{@link #getRequestEnd request end}\n     * </ol>\n     *\n     * Start times are reported as the time when a request started blocking on event, not when the\n     * event actually occurred, with the exception of push start and end. If a metric is not\n     * meaningful or not available, including cases when a request finished before reaching that\n     * stage, start and end times will be {@code null}. If no time was spent blocking on an event,\n     * start and end will be the same time.\n     *\n     * <p>If the system clock is adjusted during the request, some of the {@link java.util.Date}\n     * values might not match it. Timestamps are recorded using a clock that is guaranteed not to\n     * run backwards. All timestamps are correct relative to the system clock at the time of request\n     * start, and taking the difference between two timestamps will give the correct difference\n     * between the events. In order to preserve this property, timestamps for events other than\n     * request start are not guaranteed to match the system clock at the times they represent.\n     *\n     * <p>Most timing metrics are taken from <a\n     * href=\"https://cs.chromium.org/chromium/src/net/base/load_timing_info.h\">LoadTimingInfo</a>,\n     * which holds the information for <a href=\"http://w3c.github.io/navigation-timing/\"></a> and <a\n     * href=\"https://www.w3.org/TR/resource-timing/\"></a>.\n     *\n     * <p>{@hide} as it's a prototype.\n     ",
  "links" : [ "#getSendingStart", "#getSslStart", "#getConnectEnd", "#getRequestEnd", "java.util.Date", "#getDnsStart", "#getSslEnd", "#getSendingEnd", "#getConnectStart", "#getDnsEnd", "#getRequestStart", "#getResponseStart" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Date getRequestStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when the request started.\n         *\n         * @return {@link java.util.Date} representing when the native request actually started.\n         *         This\n         *     timestamp will match the system clock at the time it represents.\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract Date getDnsStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when DNS lookup started. This and {@link #getDnsEnd} will return non-null\n         * values regardless of whether the result came from a DNS server or the local cache.\n         *\n         * @return {@link java.util.Date} representing when DNS lookup started. {@code null} if the\n         *     socket was reused (see {@link #getSocketReused}).\n         ",
    "links" : [ "java.util.Date", "#getDnsEnd", "#getSocketReused" ]
  }, {
    "name" : "public abstract Date getDnsEnd()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when DNS lookup finished. This and {@link #getDnsStart} will return non-null\n         * values regardless of whether the result came from a DNS server or the local cache.\n         *\n         * @return {@link java.util.Date} representing when DNS lookup finished. {@code null} if the\n         *     socket was reused (see {@link #getSocketReused}).\n         ",
    "links" : [ "java.util.Date", "#getDnsStart", "#getSocketReused" ]
  }, {
    "name" : "public abstract Date getConnectStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when connection establishment started.\n         *\n         * @return {@link java.util.Date} representing when connection establishment started,\n         *         typically\n         *     when DNS resolution finishes. {@code null} if the socket was reused (see {@link\n         *     #getSocketReused}).\n         ",
    "links" : [ "java.util.Date", "#getSocketReused" ]
  }, {
    "name" : "public abstract Date getConnectEnd()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when connection establishment finished.\n         *\n         * @return {@link java.util.Date} representing when connection establishment finished, after\n         *         TCP\n         *     connection is established and, if using HTTPS, SSL handshake is completed. For QUIC\n         *     0-RTT, this represents the time of handshake confirmation and might happen later than\n         *     {@link #getSendingStart}. {@code null} if the socket was reused (see {@link\n         *     #getSocketReused}).\n         ",
    "links" : [ "#getSendingStart", "java.util.Date", "#getSocketReused" ]
  }, {
    "name" : "public abstract Date getSslStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when SSL handshake started. For QUIC, this will be the same time as {@link\n         * #getConnectStart}.\n         *\n         * @return {@link java.util.Date} representing when SSL handshake started. {@code null} if\n         *         SSL\n         *     is not used or if the socket was reused (see {@link #getSocketReused}).\n         ",
    "links" : [ "java.util.Date", "#getConnectStart", "#getSocketReused" ]
  }, {
    "name" : "public abstract Date getSslEnd()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when SSL handshake finished. For QUIC, this will be the same time as {@link\n         * #getConnectEnd}.\n         *\n         * @return {@link java.util.Date} representing when SSL handshake finished. {@code null} if\n         *         SSL\n         *     is not used or if the socket was reused (see {@link #getSocketReused}).\n         ",
    "links" : [ "#getConnectEnd", "java.util.Date", "#getSocketReused" ]
  }, {
    "name" : "public abstract Date getSendingStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when sending the request started.\n         *\n         * @return {@link java.util.Date} representing when sending HTTP request headers started.\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract Date getSendingEnd()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when sending the request finished.\n         *\n         * @return {@link java.util.Date} representing when sending HTTP request body finished.\n         *         (Sending\n         *     request body happens after sending request headers.)\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract Date getPushStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when first byte of HTTP/2 server push was received.\n         *\n         * @return {@link java.util.Date} representing when the first byte of an HTTP/2 server push\n         *         was\n         *     received. {@code null} if server push is not used.\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract Date getPushEnd()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when last byte of HTTP/2 server push was received.\n         *\n         * @return {@link java.util.Date} representing when the last byte of an HTTP/2 server push\n         *         was\n         *     received. {@code null} if server push is not used.\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract Date getResponseStart()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when the end of the response headers was received.\n         *\n         * @return {@link java.util.Date} representing when the end of the response headers was\n         *     received.\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract Date getRequestEnd()",
    "returnType" : "Date",
    "comment" : "\n         * Returns time when the request finished.\n         *\n         * @return {@link java.util.Date} representing when the request finished.\n         ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public abstract boolean getSocketReused()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the socket was reused from a previous request. In HTTP/2 or QUIC, if\n         * streams are multiplexed in a single connection, returns {@code true} for all streams\n         * after the first.\n         *\n         * @return whether this request reused a socket from a previous request. When {@code true},\n         *         DNS,\n         *     connection, and SSL times will be {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Long getTtfbMs()",
    "returnType" : "Long",
    "comment" : "\n         * Returns milliseconds between request initiation and first byte of response headers, or\n         * {@code null} if not collected. TODO(mgersh): Remove once new API works\n         * http://crbug.com/629194\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Long getTotalTimeMs()",
    "returnType" : "Long",
    "comment" : "\n         * Returns milliseconds between request initiation and finish, including a failure or\n         * cancellation, or {@code null} if not collected. TODO(mgersh): Remove once new API works\n         * http://crbug.com/629194 {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Long getSentByteCount()",
    "returnType" : "Long",
    "comment" : "\n         * Returns total bytes sent over the network transport layer, or {@code null} if not\n         * collected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Long getReceivedByteCount()",
    "returnType" : "Long",
    "comment" : "\n         * Returns total bytes received over the network transport layer, or {@code null} if not\n         * collected. Number of bytes does not include any previous redirects.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Date getRequestStart()", "public abstract Date getDnsStart()", "public abstract Date getDnsEnd()", "public abstract Date getConnectStart()", "public abstract Date getConnectEnd()", "public abstract Date getSslStart()", "public abstract Date getSslEnd()", "public abstract Date getSendingStart()", "public abstract Date getSendingEnd()", "public abstract Date getPushStart()", "public abstract Date getPushEnd()", "public abstract Date getResponseStart()", "public abstract Date getRequestEnd()", "public abstract boolean getSocketReused()", "public abstract Long getTtfbMs()", "public abstract Long getTotalTimeMs()", "public abstract Long getSentByteCount()", "public abstract Long getReceivedByteCount()" ],
  "variableNames" : [ ]
}