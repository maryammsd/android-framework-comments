{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/PrimitiveIterator.java",
  "packageName" : "java.util",
  "className" : "OfDouble",
  "comment" : "\n     * An Iterator specialized for {@code double} values.\n     * @since 1.8\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " double nextDouble()",
    "returnType" : "double",
    "comment" : "\n         * Returns the next {@code double} element in the iteration.\n         *\n         * @return the next {@code double} element in the iteration\n         * @throws NoSuchElementException if the iteration has no more elements\n         ",
    "links" : [ ]
  }, {
    "name" : " void forEachRemaining(DoubleConsumer action)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         * @implSpec\n         * <p>The default implementation behaves as if:\n         * <pre>{@code\n         *     while (hasNext())\n         *         action.accept(nextDouble());\n         * }</pre>\n         ",
    "links" : [ ]
  }, {
    "name" : " Double next()",
    "returnType" : "Double",
    "comment" : "\n         * {@inheritDoc}\n         * @implSpec\n         * The default implementation boxes the result of calling\n         * {@link #nextDouble()}, and returns that boxed result.\n         ",
    "links" : [ "#nextDouble()" ]
  }, {
    "name" : " void forEachRemaining(Consumer<? super Double> action)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         * @implSpec\n         * If the action is an instance of {@code DoubleConsumer} then it is\n         * cast to {@code DoubleConsumer} and passed to\n         * {@link #forEachRemaining}; otherwise the action is adapted to\n         * an instance of {@code DoubleConsumer}, by boxing the argument of\n         * {@code DoubleConsumer}, and then passed to\n         * {@link #forEachRemaining}.\n         ",
    "links" : [ "#forEachRemaining" ]
  } ],
  "methodNames" : [ " double nextDouble()", " void forEachRemaining(DoubleConsumer action)", " Double next()", " void forEachRemaining(Consumer<? super Double> action)" ],
  "variableNames" : [ ]
}