{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/privacy/DifferentialPrivacyEncoder.java",
  "packageName" : "android.privacy",
  "className" : "DifferentialPrivacyEncoder",
  "comment" : "\n * An interface for differential privacy encoder.\n * Applications can use it to convert privacy sensitive data to privacy protected report.\n * There is no decoder implemented in Android as it is not possible decode a single report by\n * design.\n *\n * <p>Each type of log should have its own encoder, otherwise it may leak\n * some information about Permanent Randomized Response(PRR, is used to create a “noisy”\n * answer which is memoized by the client and permanently reused in place of the real answer).\n *\n * <p>Some encoders may not support all encoding methods, and it will throw {@link\n * UnsupportedOperationException} if you call unsupported encoding method.\n *\n * <p><b>WARNING:</b> Privacy protection works only when encoder uses a suitable DP configuration,\n * and the configuration and algorithm that is suitable is highly dependent on the use case.\n * If the configuration is not suitable for the use case, it may hurt privacy or utility or both.\n *\n * @hide\n ",
  "links" : [ "UnsupportedOperationException" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " byte[] encodeString(String original)",
    "returnType" : "byte[]",
    "comment" : "\n     * Apply differential privacy to encode a string.\n     *\n     * @param original An arbitrary string\n     * @return Differential privacy encoded bytes derived from the string\n     ",
    "links" : [ ]
  }, {
    "name" : " byte[] encodeBoolean(boolean original)",
    "returnType" : "byte[]",
    "comment" : "\n     * Apply differential privacy to encode a boolean.\n     *\n     * @param original An arbitrary boolean.\n     * @return Differential privacy encoded bytes derived from the boolean\n     ",
    "links" : [ ]
  }, {
    "name" : " byte[] encodeBits(byte[] original)",
    "returnType" : "byte[]",
    "comment" : "\n     * Apply differential privacy to encode sequence of bytes.\n     *\n     * @param original An arbitrary byte array.\n     * @return Differential privacy encoded bytes derived from the bytes\n     ",
    "links" : [ ]
  }, {
    "name" : " DifferentialPrivacyConfig getConfig()",
    "returnType" : "DifferentialPrivacyConfig",
    "comment" : "\n     * Returns the configuration that this encoder is using.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isInsecureEncoderForTest()",
    "returnType" : "boolean",
    "comment" : "\n     * Return True if the output from encoder is NOT securely randomized, otherwise encoder should\n     * be secure to randomize input.\n     *\n     * <b> A non-secure encoder is intended only for testing only and must not be used to process\n     * real data.\n     * </b>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " byte[] encodeString(String original)", " byte[] encodeBoolean(boolean original)", " byte[] encodeBits(byte[] original)", " DifferentialPrivacyConfig getConfig()", " boolean isInsecureEncoderForTest()" ],
  "variableNames" : [ ]
}