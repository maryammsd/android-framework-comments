{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/FontListParser.java",
  "packageName" : "android.graphics",
  "className" : "FontListParser",
  "comment" : "\n * Parser for font config files.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_NAME",
    "type" : "String",
    "comment" : " XML constants for FontFamily.",
    "links" : [ ]
  }, {
    "name" : "ATTR_LANG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_VARIANT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_FONT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIANT_COMPACT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIANT_ELEGANT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_SUPPORTED_AXES",
    "type" : "String",
    "comment" : " XML constants for Font.",
    "links" : [ ]
  }, {
    "name" : "ATTR_INDEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_WEIGHT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_POSTSCRIPT_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_STYLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_FALLBACK_FOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_ITALIC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_NORMAL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_AXIS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_TAG",
    "type" : "String",
    "comment" : " XML constants for FontVariationAxis.",
    "links" : [ ]
  }, {
    "name" : "ATTR_STYLEVALUE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_WGHT",
    "type" : "String",
    "comment" : " The tag string for variable font type resolution.",
    "links" : [ ]
  }, {
    "name" : "TAG_ITAL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILENAME_WHITESPACE_PATTERN",
    "type" : "Pattern",
    "comment" : " Matches leading and trailing XML whitespace. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static FontConfig parse(InputStream in) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig",
    "comment" : " Parse fallback list (no names) ",
    "links" : [ ]
  }, {
    "name" : "public static FontConfig parse(@NonNull String fontsXmlPath, @NonNull String systemFontDir, @Nullable String oemCustomizationXmlPath, @Nullable String productFontDir, @Nullable Map<String, File> updatableFontMap, long lastModifiedDate, int configVersion) throws IOException, XmlPullParserException",
    "returnType" : "FontConfig",
    "comment" : "\n     * Parses system font config XMLs\n     *\n     * @param fontsXmlPath location of fonts.xml\n     * @param systemFontDir location of system font directory\n     * @param oemCustomizationXmlPath location of oem_customization.xml\n     * @param productFontDir location of oem customized font directory\n     * @param updatableFontMap map of updated font files.\n     * @return font configuration\n     * @throws IOException\n     * @throws XmlPullParserException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FontConfig readFamilies(@NonNull XmlPullParser parser, @NonNull String fontDir, @NonNull FontCustomizationParser.Result customization, @Nullable Map<String, File> updatableFontMap, long lastModifiedDate, int configVersion, boolean allowNonExistingFile) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig",
    "comment" : "\n     * Parses the familyset tag in font.xml\n     * @param parser a XML pull parser\n     * @param fontDir A system font directory, e.g. \"/system/fonts\"\n     * @param customization A OEM font customization\n     * @param updatableFontMap A map of updated font files\n     * @param lastModifiedDate A date that the system font is updated.\n     * @param configVersion A version of system font config.\n     * @param allowNonExistingFile true if allowing non-existing font files during parsing fonts.xml\n     * @return result of fonts.xml\n     *\n     * @throws XmlPullParserException\n     * @throws IOException\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean keepReading(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static FontConfig.FontFamily readFamily(XmlPullParser parser, String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig.FontFamily",
    "comment" : "\n     * Read family tag in fonts.xml or oem_customization.xml\n     *\n     * @param parser An XML parser.\n     * @param fontDir a font directory name.\n     * @param updatableFontMap a updated font file map.\n     * @param allowNonExistingFile true to allow font file that doesn't exist.\n     * @return a FontFamily instance. null if no font files are available in this FontFamily.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void throwIfAttributeExists(String attrName, XmlPullParser parser)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static FontConfig.NamedFamilyList readNamedFamily(@NonNull XmlPullParser parser, @NonNull String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig.NamedFamilyList",
    "comment" : "\n     * Read a font family with name attribute as a single element family-list element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FontConfig.NamedFamilyList readNamedFamilyList(@NonNull XmlPullParser parser, @NonNull String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig.NamedFamilyList",
    "comment" : "\n     * Read a family-list element\n     ",
    "links" : [ ]
  }, {
    "name" : "private static FontConfig.Font readFont(@NonNull XmlPullParser parser, @NonNull String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig.Font",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String findUpdatedFontFile(String psName, @Nullable Map<String, File> updatableFontMap)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static FontVariationAxis readAxis(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "FontVariationAxis",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static FontConfig.Alias readAlias(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "FontConfig.Alias",
    "comment" : "\n     * Reads alias elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void skip(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Skip until next element\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static FontConfig parse(InputStream in) throws XmlPullParserException, IOException", "public static FontConfig parse(@NonNull String fontsXmlPath, @NonNull String systemFontDir, @Nullable String oemCustomizationXmlPath, @Nullable String productFontDir, @Nullable Map<String, File> updatableFontMap, long lastModifiedDate, int configVersion) throws IOException, XmlPullParserException", "public static FontConfig readFamilies(@NonNull XmlPullParser parser, @NonNull String fontDir, @NonNull FontCustomizationParser.Result customization, @Nullable Map<String, File> updatableFontMap, long lastModifiedDate, int configVersion, boolean allowNonExistingFile) throws XmlPullParserException, IOException", "private static boolean keepReading(XmlPullParser parser) throws XmlPullParserException, IOException", "public static FontConfig.FontFamily readFamily(XmlPullParser parser, String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException", "private static void throwIfAttributeExists(String attrName, XmlPullParser parser)", "public static FontConfig.NamedFamilyList readNamedFamily(@NonNull XmlPullParser parser, @NonNull String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException", "public static FontConfig.NamedFamilyList readNamedFamilyList(@NonNull XmlPullParser parser, @NonNull String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException", "private static FontConfig.Font readFont(@NonNull XmlPullParser parser, @NonNull String fontDir, @Nullable Map<String, File> updatableFontMap, boolean allowNonExistingFile) throws XmlPullParserException, IOException", "private static String findUpdatedFontFile(String psName, @Nullable Map<String, File> updatableFontMap)", "private static FontVariationAxis readAxis(XmlPullParser parser) throws XmlPullParserException, IOException", "public static FontConfig.Alias readAlias(XmlPullParser parser) throws XmlPullParserException, IOException", "public static void skip(XmlPullParser parser) throws XmlPullParserException, IOException" ],
  "variableNames" : [ "TAG", "ATTR_NAME", "ATTR_LANG", "ATTR_VARIANT", "TAG_FONT", "VARIANT_COMPACT", "VARIANT_ELEGANT", "ATTR_SUPPORTED_AXES", "ATTR_INDEX", "ATTR_WEIGHT", "ATTR_POSTSCRIPT_NAME", "ATTR_STYLE", "ATTR_FALLBACK_FOR", "STYLE_ITALIC", "STYLE_NORMAL", "TAG_AXIS", "ATTR_TAG", "ATTR_STYLEVALUE", "TAG_WGHT", "TAG_ITAL", "FILENAME_WHITESPACE_PATTERN" ]
}