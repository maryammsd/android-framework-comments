{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/VirtualDeviceParams.java",
  "packageName" : "android.companion.virtual",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link VirtualDeviceParams}.\n     ",
  "links" : [ "android.companion.virtual.VirtualDeviceParams" ],
  "variables" : [ {
    "name" : "mLockState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsersWithMatchingAccounts",
    "type" : "Set<UserHandle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCrossTaskNavigationExemptions",
    "type" : "Set<ComponentName>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNavigationPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNavigationPolicyConfigured",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityPolicyExemptions",
    "type" : "Set<ComponentName>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultActivityPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultActivityPolicyConfigured",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevicePolicies",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioPlaybackSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioRecordingSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorConfigs",
    "type" : "List<VirtualSensorConfig>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorCallback",
    "type" : "VirtualSensorCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorDirectChannelCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorDirectChannelCallback",
    "type" : "VirtualSensorDirectChannelCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHomeComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputMethodComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setLockState(@LockState int lockState)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the lock state of the device. The permission {@code ADD_ALWAYS_UNLOCKED_DISPLAY}\n         * is required if this is set to {@link #LOCK_STATE_ALWAYS_UNLOCKED}.\n         * The default is {@link #LOCK_STATE_DEFAULT}.\n         *\n         * @param lockState The lock state, either {@link #LOCK_STATE_DEFAULT} or\n         *   {@link #LOCK_STATE_ALWAYS_UNLOCKED}.\n         ",
    "links" : [ "#LOCK_STATE_DEFAULT", "#LOCK_STATE_ALWAYS_UNLOCKED" ]
  }, {
    "name" : "public Builder setHomeComponent(@Nullable ComponentName homeComponent)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies a component to be used as home on all displays owned by this virtual device\n         * that support home activities.\n         * *\n         * <p>Note: Only relevant for virtual displays that support home activities.</p>\n         *\n         * @param homeComponent The component name to be used as home. If unset, then the system-\n         *   default secondary home activity will be used.\n         *\n         * @see VirtualDisplayConfig#isHomeSupported()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setInputMethodComponent(@Nullable ComponentName inputMethodComponent)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies a component to be used as input method on all displays owned by this virtual\n         * device.\n         *\n         * @param inputMethodComponent The component name to be used as input method. Must comply to\n         *   all general input method requirements described in the guide to\n         *   <a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">\n         *   Creating an Input Method</a>. If the given component is not available for any user that\n         *   may interact with the virtual device, then there will effectively be no IME on this\n         *   device's displays for that user.\n         *\n         * @see android.inputmethodservice.InputMethodService\n         * @attr ref android.R.styleable#InputMethod_isVirtualDeviceOnly\n         * @attr ref android.R.styleable#InputMethod_showInInputMethodPicker\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUsersWithMatchingAccounts(@NonNull Set<UserHandle> usersWithMatchingAccounts)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the user handles with matching managed accounts on the remote device to which\n         * this virtual device is streaming. The caller is responsible for verifying the presence\n         * and legitimacy of a matching managed account on the remote device.\n         *\n         * <p>If the app streaming policy is\n         * {@link android.app.admin.DevicePolicyManager#NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY\n         * NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY}, activities not in\n         * {@code usersWithMatchingAccounts} will be blocked from starting.\n         *\n         * <p> If {@code usersWithMatchingAccounts} is empty (the default), streaming is allowed\n         * only if there is no device policy, or if the nearby streaming policy is\n         * {@link android.app.admin.DevicePolicyManager#NEARBY_STREAMING_ENABLED\n         * NEARBY_STREAMING_ENABLED}.\n         *\n         * @param usersWithMatchingAccounts A set of user handles with matching managed\n         *   accounts on the remote device this is streaming to.\n         *\n         * @see android.app.admin.DevicePolicyManager#NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY\n         ",
    "links" : [ "android.app.admin.DevicePolicyManager#NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYNEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY", "android.app.admin.DevicePolicyManager#NEARBY_STREAMING_ENABLEDNEARBY_STREAMING_ENABLED" ]
  }, {
    "name" : "public Builder setAllowedCrossTaskNavigations(@NonNull Set<ComponentName> allowedCrossTaskNavigations)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the tasks allowed to navigate from current task in the virtual device. Tasks\n         * not in {@code allowedCrossTaskNavigations} will be blocked from navigating to a new\n         * task. Calling this method will cause {@link #getDefaultNavigationPolicy()} to be\n         * {@link #NAVIGATION_POLICY_DEFAULT_BLOCKED}, meaning tasks not in\n         * {@code allowedCrossTaskNavigations} will be blocked from navigating here.\n         *\n         * <p>This method must not be called if {@link #setBlockedCrossTaskNavigations(Set)} has\n         * been called.\n         *\n         * @throws IllegalArgumentException if {@link #setBlockedCrossTaskNavigations(Set)} has been\n         * called.\n         *\n         * @param allowedCrossTaskNavigations A set of tasks {@link ComponentName} allowed to\n         *   navigate to new tasks in the virtual device.\n         *\n         * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and\n         *   {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n         ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption", "#NAVIGATION_POLICY_DEFAULT_BLOCKED", "#POLICY_TYPE_ACTIVITY", "android.content.ComponentName", "#setBlockedCrossTaskNavigations(Set)", "#getDefaultNavigationPolicy()" ]
  }, {
    "name" : "public Builder setBlockedCrossTaskNavigations(@NonNull Set<ComponentName> blockedCrossTaskNavigations)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the tasks blocked from navigating from current task in the virtual device.\n         * Tasks are allowed to navigate unless they are in\n         * {@code blockedCrossTaskNavigations}. Calling this method will cause\n         * {@link #NAVIGATION_POLICY_DEFAULT_ALLOWED}, meaning activities are allowed to launch\n         * unless they are in {@code blockedCrossTaskNavigations}.\n         *\n         * <p>This method must not be called if {@link #setAllowedCrossTaskNavigations(Set)} has\n         * been called.\n         *\n         * @throws IllegalArgumentException if {@link #setAllowedCrossTaskNavigations(Set)} has\n         * been called.\n         *\n         * @param blockedCrossTaskNavigations A set of tasks {@link ComponentName} to be\n         * blocked from navigating to new tasks in the virtual device.\n         *\n         * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and\n         *   {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n         ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption", "#POLICY_TYPE_ACTIVITY", "#NAVIGATION_POLICY_DEFAULT_ALLOWED", "#setAllowedCrossTaskNavigations(Set)", "android.content.ComponentName" ]
  }, {
    "name" : "public Builder setAllowedActivities(@NonNull Set<ComponentName> allowedActivities)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the activities allowed to be launched in the virtual device. Calling this method\n         * will cause {@link #getDefaultActivityPolicy()} to be\n         * {@link #ACTIVITY_POLICY_DEFAULT_BLOCKED}, meaning activities not in\n         * {@code allowedActivities} will be blocked from launching here.\n         *\n         * <p>This method must not be called if {@link #setBlockedActivities(Set)} has been called.\n         *\n         * @throws IllegalArgumentException if {@link #setBlockedActivities(Set)} has been called.\n         *\n         * @param allowedActivities A set of activity {@link ComponentName} allowed to be launched\n         *   in the virtual device.\n         *\n         * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and\n         *   {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n         ",
    "links" : [ "#setBlockedActivities(Set)", "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption", "#getDefaultActivityPolicy()", "#POLICY_TYPE_ACTIVITY", "android.content.ComponentName", "#ACTIVITY_POLICY_DEFAULT_BLOCKED" ]
  }, {
    "name" : "public Builder setBlockedActivities(@NonNull Set<ComponentName> blockedActivities)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the activities blocked from launching in the virtual device. Calling this method\n         * will cause {@link #getDefaultActivityPolicy()} to be\n         * {@link #ACTIVITY_POLICY_DEFAULT_ALLOWED}, meaning activities are allowed to launch here\n         * unless they are in {@code blockedActivities}.\n         *\n         * <p>This method must not be called if {@link #setAllowedActivities(Set)} has been called.\n         *\n         * @throws IllegalArgumentException if {@link #setAllowedActivities(Set)} has been called.\n         *\n         * @param blockedActivities A set of {@link ComponentName} to be blocked launching from\n         *   virtual device.\n         *\n         * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and\n         *   {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n         ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption", "#getDefaultActivityPolicy()", "#setAllowedActivities(Set)", "#POLICY_TYPE_ACTIVITY", "#ACTIVITY_POLICY_DEFAULT_ALLOWED", "android.content.ComponentName" ]
  }, {
    "name" : "public Builder setName(@NonNull String name)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the optional virtual device name.\n         *\n         * <p>This string is not typically intended to be displayed to end users, but rather for\n         * debugging and other developer-facing purposes.\n         *\n         * <p>3rd party applications may be able to see the name (i.e. it's not private to the\n         * device owner)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDevicePolicy(@PolicyType int policyType, @DevicePolicy int devicePolicy)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies a policy for this virtual device.\n         *\n         * <p>Policies define the system behavior that may be specific for this virtual device. A\n         * policy can be defined for each {@code PolicyType}, but they are all optional.\n         *\n         * @param policyType the type of policy, i.e. which behavior to specify a policy for.\n         * @param devicePolicy the value of the policy, i.e. how to interpret the device behavior.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addVirtualSensorConfig(@NonNull VirtualSensorConfig virtualSensorConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a configuration for a sensor that should be created for this virtual device.\n         *\n         * <p>Device sensors must remain valid for the entire lifetime of the device, hence they are\n         * created together with the device itself, and removed when the device is removed.\n         *\n         * <p>Requires {@link #DEVICE_POLICY_CUSTOM} to be set for {@link #POLICY_TYPE_SENSORS}.\n         *\n         * @see android.companion.virtual.sensor.VirtualSensor\n         * @see #setDevicePolicy\n         ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#POLICY_TYPE_SENSORS" ]
  }, {
    "name" : "public Builder setVirtualSensorCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VirtualSensorCallback callback)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callback to get notified about changes in the sensor configuration.\n         *\n         * @param executor The executor where the callback is executed on.\n         * @param callback The callback to get notified when the state of the sensor\n         * configuration has changed, see {@link VirtualSensorCallback}\n         ",
    "links" : [ "android.companion.virtual.sensor.IVirtualSensorCallback" ]
  }, {
    "name" : "public Builder setVirtualSensorDirectChannelCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VirtualSensorDirectChannelCallback callback)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the callback to get notified about changes in\n         * {@link android.hardware.SensorDirectChannel} configuration.\n         *\n         * @param executor The executor where the callback is executed on.\n         * @param callback The callback to get notified when the state of the sensor\n         * configuration has changed, see {@link VirtualSensorDirectChannelCallback}\n         ",
    "links" : [ "android.companion.virtual.sensor.VirtualSensorDirectChannelCallback", "android.hardware.SensorDirectChannel" ]
  }, {
    "name" : "public Builder setAudioPlaybackSessionId(int playbackSessionId)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets audio playback session id specific for this virtual device.\n         *\n         * <p>Audio players constructed within context associated with this virtual device\n         * will be automatically assigned provided session id.\n         *\n         * <p>Requires {@link #DEVICE_POLICY_CUSTOM} to be set for {@link #POLICY_TYPE_AUDIO},\n         * otherwise {@link #build()} method will throw {@link IllegalArgumentException} if\n         * the playback session id is set to value other than\n         * {@link android.media.AudioManager#AUDIO_SESSION_ID_GENERATE}.\n         *\n         * @param playbackSessionId requested device-specific audio session id for playback\n         * @see android.media.AudioManager#generateAudioSessionId()\n         * @see android.media.AudioTrack.Builder#setContext(Context)\n         ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#build()", "#POLICY_TYPE_AUDIO", "android.media.AudioManager#AUDIO_SESSION_ID_GENERATE", "IllegalArgumentException" ]
  }, {
    "name" : "public Builder setAudioRecordingSessionId(int recordingSessionId)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets audio recording session id specific for this virtual device.\n         *\n         * <p>{@link android.media.AudioRecord} constructed within context associated with this\n         * virtual device will be automatically assigned provided session id.\n         *\n         * <p>Requires {@link #DEVICE_POLICY_CUSTOM} to be set for {@link #POLICY_TYPE_AUDIO},\n         * otherwise {@link #build()} method will throw {@link IllegalArgumentException} if\n         * the recording session id is set to value other than\n         * {@link android.media.AudioManager#AUDIO_SESSION_ID_GENERATE}.\n         *\n         * @param recordingSessionId requested device-specific audio session id for playback\n         * @see android.media.AudioManager#generateAudioSessionId()\n         * @see android.media.AudioRecord.Builder#setContext(Context)\n         ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#build()", "android.media.AudioRecord", "#POLICY_TYPE_AUDIO", "android.media.AudioManager#AUDIO_SESSION_ID_GENERATE", "IllegalArgumentException" ]
  }, {
    "name" : "public VirtualDeviceParams build()",
    "returnType" : "VirtualDeviceParams",
    "comment" : "\n         * Builds the {@link VirtualDeviceParams} instance.\n         *\n         * @throws IllegalArgumentException if there's mismatch between policy definition and\n         * the passed parameters or if there are sensor configs with the same type and name.\n         *\n         ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams" ]
  } ],
  "methodNames" : [ "public Builder setLockState(@LockState int lockState)", "public Builder setHomeComponent(@Nullable ComponentName homeComponent)", "public Builder setInputMethodComponent(@Nullable ComponentName inputMethodComponent)", "public Builder setUsersWithMatchingAccounts(@NonNull Set<UserHandle> usersWithMatchingAccounts)", "public Builder setAllowedCrossTaskNavigations(@NonNull Set<ComponentName> allowedCrossTaskNavigations)", "public Builder setBlockedCrossTaskNavigations(@NonNull Set<ComponentName> blockedCrossTaskNavigations)", "public Builder setAllowedActivities(@NonNull Set<ComponentName> allowedActivities)", "public Builder setBlockedActivities(@NonNull Set<ComponentName> blockedActivities)", "public Builder setName(@NonNull String name)", "public Builder setDevicePolicy(@PolicyType int policyType, @DevicePolicy int devicePolicy)", "public Builder addVirtualSensorConfig(@NonNull VirtualSensorConfig virtualSensorConfig)", "public Builder setVirtualSensorCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VirtualSensorCallback callback)", "public Builder setVirtualSensorDirectChannelCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VirtualSensorDirectChannelCallback callback)", "public Builder setAudioPlaybackSessionId(int playbackSessionId)", "public Builder setAudioRecordingSessionId(int recordingSessionId)", "public VirtualDeviceParams build()" ],
  "variableNames" : [ "mLockState", "mUsersWithMatchingAccounts", "mCrossTaskNavigationExemptions", "mDefaultNavigationPolicy", "mDefaultNavigationPolicyConfigured", "mActivityPolicyExemptions", "mDefaultActivityPolicy", "mDefaultActivityPolicyConfigured", "mName", "mDevicePolicies", "mAudioPlaybackSessionId", "mAudioRecordingSessionId", "mVirtualSensorConfigs", "mVirtualSensorCallbackExecutor", "mVirtualSensorCallback", "mVirtualSensorDirectChannelCallbackExecutor", "mVirtualSensorDirectChannelCallback", "mHomeComponent", "mInputMethodComponent" ]
}