{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UnicodeSetIterator.java",
  "packageName" : "android.icu.text",
  "className" : "UnicodeSetIterator",
  "comment" : "\n * UnicodeSetIterator iterates over the contents of a UnicodeSet.  It\n * iterates over either code points or code point ranges.  After all\n * code points or ranges have been returned, it returns the\n * multicharacter strings of the UnicodeSet, if any.\n *\n * <p>This class is not intended for public subclassing.\n *\n * <p>To iterate over code points and multicharacter strings,\n * use a loop like this:\n * <pre>\n * for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {\n *   processString(it.getString());\n * }\n * </pre>\n *\n * <p>To iterate over code point ranges, use a loop like this:\n * <pre>\n * for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.nextRange();) {\n *   if (it.codepoint != UnicodeSetIterator.IS_STRING) {\n *     processCodepointRange(it.codepoint, it.codepointEnd);\n *   } else {\n *     processString(it.getString());\n *   }\n * }\n * </pre>\n *\n * <p>To iterate over only the strings, start with <code>new UnicodeSetIterator(set).skipToStrings()</code>.\n *\n * <p><b>Warning: </b>For speed, UnicodeSet iteration does not check for concurrent modification.\n * Do not alter the UnicodeSet while iterating.\n * @author M. Davis\n * @see UnicodeSet#ranges()\n * @see UnicodeSet#strings()\n * @see UnicodeSet#iterator()\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "IS_STRING",
    "type" : "int",
    "comment" : "\n     * Value of <tt>codepoint</tt> if the iterator points to a string.\n     * If <tt>codepoint == IS_STRING</tt>, then examine\n     * <tt>string</tt> for the current iteration result.\n     ",
    "links" : [ ]
  }, {
    "name" : "codepoint",
    "type" : "int",
    "comment" : "\n     * Current code point, or the special value <tt>IS_STRING</tt>, if\n     * the iterator points to a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "codepointEnd",
    "type" : "int",
    "comment" : "\n     * When iterating over ranges using <tt>nextRange()</tt>,\n     * <tt>codepointEnd</tt> contains the inclusive end of the\n     * iteration range, if <tt>codepoint != IS_STRING</tt>.  If\n     * iterating over code points using <tt>next()</tt>, or if\n     * <tt>codepoint == IS_STRING</tt>, then the value of\n     * <tt>codepointEnd</tt> is undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "string",
    "type" : "String",
    "comment" : "\n     * If <tt>codepoint == IS_STRING</tt>, then <tt>string</tt> points\n     * to the current string.  If <tt>codepoint != IS_STRING</tt>, the\n     * value of <tt>string</tt> is undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "set",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "endRange",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "range",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "endElement",
    "type" : "int",
    "comment" : "\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "nextElement",
    "type" : "int",
    "comment" : "\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "stringIterator",
    "type" : "Iterator<String>",
    "comment" : "\n     * Invariant: stringIterator is null when there are no (more) strings remaining\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public UnicodeSetIterator skipToStrings()",
    "returnType" : "UnicodeSetIterator",
    "comment" : "\n     * Skips over the remaining code points/ranges, if any.\n     * A following call to next() or nextRange() will yield a string, if there is one.\n     * No-op if next() would return false, or if it would yield a string anyway.\n     *\n     * @return this\n     * @see UnicodeSet#strings()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean next()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the next element in the set, either a single code point\n     * or a string.  If there are no more elements in the set, return\n     * false.  If <tt>codepoint == IS_STRING</tt>, the value is a\n     * string in the <tt>string</tt> field.  Otherwise the value is a\n     * single code point in the <tt>codepoint</tt> field.\n     *\n     * <p>The order of iteration is all code points in sorted order,\n     * followed by all strings sorted order.  <tt>codepointEnd</tt> is\n     * undefined after calling this method.  <tt>string</tt> is\n     * undefined unless <tt>codepoint == IS_STRING</tt>.  Do not mix\n     * calls to <tt>next()</tt> and <tt>nextRange()</tt> without\n     * calling <tt>reset()</tt> between them.  The results of doing so\n     * are undefined.\n     * <p><b>Warning: </b>For speed, UnicodeSet iteration does not check for concurrent modification.\n     * Do not alter the UnicodeSet while iterating.\n     * @return true if there was another element in the set and this\n     * object contains the element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean nextRange()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the next element in the set, either a code point range\n     * or a string.  If there are no more elements in the set, return\n     * false.  If <tt>codepoint == IS_STRING</tt>, the value is a\n     * string in the <tt>string</tt> field.  Otherwise the value is a\n     * range of one or more code points from <tt>codepoint</tt> to\n     * <tt>codepointeEnd</tt> inclusive.\n     *\n     * <p>The order of iteration is all code points ranges in sorted\n     * order, followed by all strings sorted order.  Ranges are\n     * disjoint and non-contiguous.  <tt>string</tt> is undefined\n     * unless <tt>codepoint == IS_STRING</tt>.  Do not mix calls to\n     * <tt>next()</tt> and <tt>nextRange()</tt> without calling\n     * <tt>reset()</tt> between them.  The results of doing so are\n     * undefined.\n     *\n     * @return true if there was another element in the set and this\n     * object contains the element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset(UnicodeSet uset)",
    "returnType" : "void",
    "comment" : "\n     * Sets this iterator to visit the elements of the given set and\n     * resets it to the start of that set.  The iterator is valid only\n     * so long as <tt>set</tt> is valid.\n     * @param uset the set to iterate over.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this iterator to the start of the set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString()",
    "returnType" : "String",
    "comment" : "\n     * Gets the current string from the iterator. Only use after calling next(), not nextRange().\n     ",
    "links" : [ ]
  }, {
    "name" : "private void loadRange(int aRange)",
    "returnType" : "void",
    "comment" : "\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public UnicodeSetIterator skipToStrings()", "public boolean next()", "public boolean nextRange()", "public void reset(UnicodeSet uset)", "public void reset()", "public String getString()", "private void loadRange(int aRange)" ],
  "variableNames" : [ "IS_STRING", "codepoint", "codepointEnd", "string", "set", "endRange", "range", "endElement", "nextElement", "stringIterator" ]
}