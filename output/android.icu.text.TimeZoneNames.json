{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TimeZoneNames.java",
  "packageName" : "android.icu.text",
  "className" : "TimeZoneNames",
  "comment" : "\n * <code>TimeZoneNames</code> is an abstract class representing the time zone display name data model defined\n * by <a href=\"http://www.unicode.org/reports/tr35/\">UTS#35 Unicode Locale Data Markup Language (LDML)</a>.\n * The model defines meta zone, which is used for storing a set of display names. A meta zone can be shared\n * by multiple time zones. Also a time zone may have multiple meta zone historic mappings.\n * <p>\n * For example, people in the United States refer the zone used by the east part of North America as \"Eastern Time\".\n * The tz database contains multiple time zones \"America/New_York\", \"America/Detroit\", \"America/Montreal\" and some\n * others that belong to \"Eastern Time\". However, assigning different display names to these time zones does not make\n * much sense for most of people.\n * <p>\n * In <a href=\"http://cldr.unicode.org/\">CLDR</a> (which uses LDML for representing locale data), the display name\n * \"Eastern Time\" is stored as long generic display name of a meta zone identified by the ID \"America_Eastern\".\n * Then, there is another table maintaining the historic mapping to meta zones for each time zone. The time zones in\n * the above example (\"America/New_York\", \"America/Detroit\"...) are mapped to the meta zone \"America_Eastern\".\n * <p>\n * Sometimes, a time zone is mapped to a different time zone in the past. For example, \"America/Indiana/Knox\"\n * had been moving \"Eastern Time\" and \"Central Time\" back and forth. Therefore, it is necessary that time zone\n * to meta zones mapping data are stored by date range.\n *\n * <p><b>Note:</b>\n * <p>\n * {@link TimeZoneFormat} assumes an instance of <code>TimeZoneNames</code> is immutable. If you want to provide\n * your own <code>TimeZoneNames</code> implementation and use it with {@link TimeZoneFormat}, you must follow\n * the contract.\n * <p>\n * The methods in this class assume that time zone IDs are already canonicalized. For example, you may not get proper\n * result returned by a method with time zone ID \"America/Indiana/Indianapolis\", because it's not a canonical time zone\n * ID (the canonical time zone ID for the time zone is \"America/Indianapolis\". See\n * {@link TimeZone#getCanonicalID(String)} about ICU canonical time zone IDs.\n *\n * <p>\n * In CLDR, most of time zone display names except location names are provided through meta zones. But a time zone may\n * have a specific name that is not shared with other time zones.\n *\n * For example, time zone \"Europe/London\" has English long name for standard time \"Greenwich Mean Time\", which is also\n * shared with other time zones. However, the long name for daylight saving time is \"British Summer Time\", which is only\n * used for \"Europe/London\".\n *\n * <p>\n * {@link #getTimeZoneDisplayName(String, NameType)} is designed for accessing a name only used by a single time zone.\n * But is not necessarily mean that a subclass implementation use the same model with CLDR. A subclass implementation\n * may provide time zone names only through {@link #getTimeZoneDisplayName(String, NameType)}, or only through\n * {@link #getMetaZoneDisplayName(String, NameType)}, or both.\n *\n * <p>\n * The default <code>TimeZoneNames</code> implementation returned by {@link #getInstance(ULocale)} uses the locale data\n * imported from CLDR. In CLDR, set of meta zone IDs and mappings between zone IDs and meta zone IDs are shared by all\n * locales. Therefore, the behavior of {@link #getAvailableMetaZoneIDs()}, {@link #getAvailableMetaZoneIDs(String)},\n * {@link #getMetaZoneID(String, long)}, and {@link #getReferenceZoneID(String, String)} won't be changed no matter\n * what locale is used for getting an instance of <code>TimeZoneNames</code>.\n ",
  "links" : [ "android.icu.text.TimeZoneFormat", "#getReferenceZoneID(String", "#getAvailableMetaZoneIDs(String)", "#getMetaZoneDisplayName(String", "#getAvailableMetaZoneIDs()", "#getMetaZoneID(String", "#getInstance(ULocale)", "android.icu.util.TimeZone#getCanonicalID(String)", "#getTimeZoneDisplayName(String" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TZNAMES_CACHE",
    "type" : "Cache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TZNAMES_FACTORY",
    "type" : "Factory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FACTORY_NAME_PROP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FACTORY_CLASS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TimeZoneNames getInstance(ULocale locale)",
    "returnType" : "TimeZoneNames",
    "comment" : "\n     * Returns an instance of <code>TimeZoneNames</code> for the specified locale.\n     *\n     * @param locale\n     *            The locale.\n     * @return An instance of <code>TimeZoneNames</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZoneNames getInstance(Locale locale)",
    "returnType" : "TimeZoneNames",
    "comment" : "\n     * Returns an instance of <code>TimeZoneNames</code> for the specified\n     * {@link java.util.Locale}.\n     *\n     * @param locale\n     *            The {@link java.util.Locale}.\n     * @return An instance of <code>TimeZoneDisplayNames</code>\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static TimeZoneNames getTZDBInstance(ULocale locale)",
    "returnType" : "TimeZoneNames",
    "comment" : "\n     * Returns an instance of <code>TimeZoneNames</code> containing only short specific\n     * zone names ({@link NameType#SHORT_STANDARD} and {@link NameType#SHORT_DAYLIGHT}),\n     * compatible with the IANA tz database's zone abbreviations (not localized).\n     * <br>\n     * Note: The input locale is used for resolving ambiguous names (e.g. \"IST\" is parsed\n     * as Israel Standard Time for Israel, while it is parsed as India Standard Time for\n     * all other regions). The zone names returned by this instance are not localized.\n     ",
    "links" : [ "#SHORT_STANDARD", "#SHORT_DAYLIGHT" ]
  }, {
    "name" : "public abstract Set<String> getAvailableMetaZoneIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable set of all available meta zone IDs.\n     * @return An immutable set of all available meta zone IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Set<String> getAvailableMetaZoneIDs(String tzID)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable set of all available meta zone IDs used by the given time zone.\n     *\n     * @param tzID\n     *            The canonical time zone ID.\n     * @return An immutable set of all available meta zone IDs used by the given time zone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getMetaZoneID(String tzID, long date)",
    "returnType" : "String",
    "comment" : "\n     * Returns the meta zone ID for the given canonical time zone ID at the given date.\n     *\n     * @param tzID\n     *            The canonical time zone ID.\n     * @param date\n     *            The date.\n     * @return The meta zone ID for the given time zone ID at the given date. If the time zone does not have a\n     *         corresponding meta zone at the given date or the implementation does not support meta zones, null is\n     *         returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getReferenceZoneID(String mzID, String region)",
    "returnType" : "String",
    "comment" : "\n     * Returns the reference zone ID for the given meta zone ID for the region.\n     *\n     * Note: Each meta zone must have a reference zone associated with a special region \"001\" (world).\n     * Some meta zones may have region specific reference zone IDs other than the special region\n     * \"001\". When a meta zone does not have any region specific reference zone IDs, this method\n     * return the reference zone ID for the special region \"001\" (world).\n     *\n     * @param mzID\n     *            The meta zone ID.\n     * @param region\n     *            The region.\n     * @return The reference zone ID (\"golden zone\" in the LDML specification) for the given time zone ID for the\n     *         region. If the meta zone is unknown or the implementation does not support meta zones, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getMetaZoneDisplayName(String mzID, NameType type)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name of the meta zone.\n     *\n     * @param mzID\n     *            The meta zone ID.\n     * @param type\n     *            The display name type. See {@link TimeZoneNames.NameType}.\n     * @return The display name of the meta zone. When this object does not have a localized display name for the given\n     *         meta zone with the specified type or the implementation does not provide any display names associated\n     *         with meta zones, null is returned.\n     ",
    "links" : [ "TimeZoneNames.NameType" ]
  }, {
    "name" : "public final String getDisplayName(String tzID, NameType type, long date)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name of the time zone at the given date.\n     *\n     * <p>\n     * <b>Note:</b> This method calls the subclass's {@link #getTimeZoneDisplayName(String, NameType)} first. When the\n     * result is null, this method calls {@link #getMetaZoneID(String, long)} to get the meta zone ID mapped from the\n     * time zone, then calls {@link #getMetaZoneDisplayName(String, NameType)}.\n     *\n     * @param tzID\n     *            The canonical time zone ID.\n     * @param type\n     *            The display name type. See {@link TimeZoneNames.NameType}.\n     * @param date\n     *            The date\n     * @return The display name for the time zone at the given date. When this object does not have a localized display\n     *         name for the time zone with the specified type and date, null is returned.\n     ",
    "links" : [ "#getMetaZoneDisplayName(String", "#getMetaZoneID(String", "TimeZoneNames.NameType", "#getTimeZoneDisplayName(String" ]
  }, {
    "name" : "public abstract String getTimeZoneDisplayName(String tzID, NameType type)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name of the time zone. Unlike {@link #getDisplayName(String, NameType, long)},\n     * this method does not get a name from a meta zone used by the time zone.\n     *\n     * @param tzID\n     *            The canonical time zone ID.\n     * @param type\n     *            The display name type. See {@link TimeZoneNames.NameType}.\n     * @return The display name for the time zone. When this object does not have a localized display name for the given\n     *         time zone with the specified type, null is returned.\n     ",
    "links" : [ "#getDisplayName(String", "TimeZoneNames.NameType" ]
  }, {
    "name" : "public String getExemplarLocationName(String tzID)",
    "returnType" : "String",
    "comment" : "\n     * Returns the exemplar location name for the given time zone. When this object does not have a localized location\n     * name, the default implementation may still returns a programmatically generated name with the logic described\n     * below.\n     * <ol>\n     * <li>Check if the ID contains \"/\". If not, return null.\n     * <li>Check if the ID does not start with \"Etc/\" or \"SystemV/\". If it does, return null.\n     * <li>Extract a substring after the last occurrence of \"/\".\n     * <li>Replace \"_\" with \" \".\n     * </ol>\n     * For example, \"New York\" is returned for the time zone ID \"America/New_York\" when this object does not have the\n     * localized location name.\n     *\n     * @param tzID\n     *            The canonical time zone ID\n     * @return The exemplar location name for the given time zone, or null when a localized location name is not\n     *         available and the fallback logic described above cannot extract location from the ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<MatchInfo> find(CharSequence text, int start, EnumSet<NameType> types)",
    "returnType" : "Collection<MatchInfo>",
    "comment" : "\n     * Finds time zone name prefix matches for the input text at the\n     * given offset and returns a collection of the matches.\n     *\n     * @param text the text.\n     * @param start the starting offset within the text.\n     * @param types the set of name types, or <code>null</code> for all name types.\n     * @return A collection of matches.\n     * @see NameType\n     * @see MatchInfo\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void loadAllDisplayNames()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getDisplayNames(String tzID, NameType[] types, long date, String[] dest, int destOffset)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TimeZoneNames getInstance(ULocale locale)", "public static TimeZoneNames getInstance(Locale locale)", "public static TimeZoneNames getTZDBInstance(ULocale locale)", "public abstract Set<String> getAvailableMetaZoneIDs()", "public abstract Set<String> getAvailableMetaZoneIDs(String tzID)", "public abstract String getMetaZoneID(String tzID, long date)", "public abstract String getReferenceZoneID(String mzID, String region)", "public abstract String getMetaZoneDisplayName(String mzID, NameType type)", "public final String getDisplayName(String tzID, NameType type, long date)", "public abstract String getTimeZoneDisplayName(String tzID, NameType type)", "public String getExemplarLocationName(String tzID)", "public Collection<MatchInfo> find(CharSequence text, int start, EnumSet<NameType> types)", "public void loadAllDisplayNames()", "public void getDisplayNames(String tzID, NameType[] types, long date, String[] dest, int destOffset)" ],
  "variableNames" : [ "serialVersionUID", "TZNAMES_CACHE", "TZNAMES_FACTORY", "FACTORY_NAME_PROP", "DEFAULT_FACTORY_CLASS" ]
}