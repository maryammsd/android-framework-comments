{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ThreadPoolExecutor.java",
  "packageName" : "java.util.concurrent",
  "className" : "DiscardOldestPolicy",
  "comment" : "\n     * A handler for rejected tasks that discards the oldest unhandled\n     * request and then retries {@code execute}, unless the executor\n     * is shut down, in which case the task is discarded. This policy is\n     * rarely useful in cases where other threads may be waiting for\n     * tasks to terminate, or failures must be recorded. Instead consider\n     * using a handler of the form:\n     * <pre> {@code\n     * new RejectedExecutionHandler() {\n     *   public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n     *     Runnable dropped = e.getQueue().poll();\n     *     if (dropped instanceof Future<?>) {\n     *       ((Future<?>)dropped).cancel(false);\n     *       // also consider logging the failure\n     *     }\n     *     e.execute(r);  // retry\n     * }}}</pre>\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void rejectedExecution(Runnable r, ThreadPoolExecutor e)",
    "returnType" : "void",
    "comment" : "\n         * Obtains and ignores the next task that the executor\n         * would otherwise execute, if one is immediately available,\n         * and then retries execution of task r, unless the executor\n         * is shut down, in which case task r is instead discarded.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void rejectedExecution(Runnable r, ThreadPoolExecutor e)" ],
  "variableNames" : [ ]
}