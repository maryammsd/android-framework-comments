{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/MutablePatternModifier.java",
  "packageName" : "android.icu.impl.number",
  "className" : "MutablePatternModifier",
  "comment" : "\n * This class is a {@link Modifier} that wraps a decimal format pattern. It applies the pattern's affixes\n * in {@link Modifier#apply}.\n *\n * <p>\n * In addition to being a Modifier, this class contains the business logic for substituting the correct\n * locale symbols into the affixes of the decimal format pattern.\n *\n * <p>\n * In order to use this class, create a new instance and call the following four setters:\n * {@link #setPatternInfo}, {@link #setPatternAttributes}, {@link #setSymbols}, and\n * {@link #setNumberProperties}. After calling these four setters, the instance will be ready for use as\n * a Modifier.\n *\n * <p>\n * This is a MUTABLE, NON-THREAD-SAFE class designed for performance. Do NOT save references to this or\n * attempt to use it from multiple threads! Instead, you can obtain a safe, immutable decimal format\n * pattern modifier by calling {@link MutablePatternModifier#createImmutable}, in effect treating this\n * instance as a builder for the immutable variant.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "#setSymbols", "#setNumberProperties", "android.icu.impl.number.Modifier", "#setPatternInfo", "android.icu.impl.number.Modifier#apply", "android.icu.impl.number.MutablePatternModifier#createImmutable", "#setPatternAttributes" ],
  "variables" : [ {
    "name" : "isStrong",
    "type" : "boolean",
    "comment" : " Modifier details",
    "links" : [ ]
  }, {
    "name" : "patternInfo",
    "type" : "AffixPatternProvider",
    "comment" : " Pattern details",
    "links" : [ ]
  }, {
    "name" : "field",
    "type" : "Field",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signDisplay",
    "type" : "SignDisplay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "perMilleReplacesPercent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "approximately",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "symbols",
    "type" : "DecimalFormatSymbols",
    "comment" : " Symbol details",
    "links" : [ ]
  }, {
    "name" : "unitWidth",
    "type" : "UnitWidth",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currency",
    "type" : "Currency",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signum",
    "type" : "Signum",
    "comment" : " Number details",
    "links" : [ ]
  }, {
    "name" : "plural",
    "type" : "StandardPlural",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "MicroPropsGenerator",
    "comment" : " QuantityChain details",
    "links" : [ ]
  }, {
    "name" : "currentAffix",
    "type" : "StringBuilder",
    "comment" : " Transient fields for rendering",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPatternInfo(AffixPatternProvider patternInfo, Field field)",
    "returnType" : "void",
    "comment" : "\n     * Sets a reference to the parsed decimal format pattern, usually obtained from\n     * {@link PatternStringParser#parseToPatternInfo(String)}, but any implementation of\n     * {@link AffixPatternProvider} is accepted.\n     *\n     * @param field\n     *            Which field to use for literal characters in the pattern.\n     ",
    "links" : [ "android.icu.impl.number.AffixPatternProvider", "android.icu.impl.number.PatternStringParser#parseToPatternInfo(String)" ]
  }, {
    "name" : "public void setPatternAttributes(SignDisplay signDisplay, boolean perMille, boolean approximately)",
    "returnType" : "void",
    "comment" : "\n     * Sets attributes that imply changes to the literal interpretation of the pattern string affixes.\n     *\n     * @param signDisplay\n     *            Whether to force a plus sign on positive numbers.\n     * @param perMille\n     *            Whether to substitute the percent sign in the pattern with a permille sign.\n     * @param approximately\n     *            Whether to prepend approximately to the sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSymbols(DecimalFormatSymbols symbols, Currency currency, UnitWidth unitWidth, PluralRules rules)",
    "returnType" : "void",
    "comment" : "\n     * Sets locale-specific details that affect the symbols substituted into the pattern string affixes.\n     *\n     * @param symbols\n     *            The desired instance of DecimalFormatSymbols.\n     * @param currency\n     *            The currency to be used when substituting currency values into the affixes.\n     * @param unitWidth\n     *            The width used to render currencies.\n     * @param rules\n     *            Required if the triple currency sign, \"¤¤¤\", appears in the pattern, which can be\n     *            determined from the convenience method {@link #needsPlurals()}.\n     ",
    "links" : [ "#needsPlurals()" ]
  }, {
    "name" : "public void setNumberProperties(Signum signum, StandardPlural plural)",
    "returnType" : "void",
    "comment" : "\n     * Sets attributes of the current number being processed.\n     *\n     * @param signum\n     *            -1 if negative; +1 if positive; or 0 if zero.\n     * @param plural\n     *            The plural form of the number, required only if the pattern contains the triple\n     *            currency sign, \"¤¤¤\" (and as indicated by {@link #needsPlurals()}).\n     ",
    "links" : [ "#needsPlurals()" ]
  }, {
    "name" : "public boolean needsPlurals()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the pattern represented by this MurkyModifier requires a plural keyword in order\n     * to localize. This is currently true only if there is a currency long name placeholder in the\n     * pattern (\"¤¤¤\").\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImmutablePatternModifier createImmutable()",
    "returnType" : "ImmutablePatternModifier",
    "comment" : "\n     * Creates a new quantity-dependent Modifier that behaves the same as the current instance, but which\n     * is immutable and can be saved for future use. The number properties in the current instance are\n     * mutated; all other properties are left untouched.\n     *\n     * <p>\n     * The resulting modifier cannot be used in a QuantityChain.\n     *\n     * @return An immutable that supports both positive and negative numbers.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ConstantMultiFieldModifier createConstantModifier(FormattedStringBuilder a, FormattedStringBuilder b)",
    "returnType" : "ConstantMultiFieldModifier",
    "comment" : "\n     * Uses the current properties to create a single {@link ConstantMultiFieldModifier} with currency\n     * spacing support if required.\n     *\n     * @param a\n     *            A working FormattedStringBuilder object; passed from the outside to prevent the need to\n     *            create many new instances if this method is called in a loop.\n     * @param b\n     *            Another working FormattedStringBuilder object.\n     * @return The constant modifier object.\n     ",
    "links" : [ "android.icu.impl.number.ConstantMultiFieldModifier" ]
  }, {
    "name" : "public MicroPropsGenerator addToChain(MicroPropsGenerator parent)",
    "returnType" : "MicroPropsGenerator",
    "comment" : " Used by the unsafe code path. ",
    "links" : [ ]
  }, {
    "name" : "public MicroProps processQuantity(DecimalQuantity fq)",
    "returnType" : "MicroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int apply(FormattedStringBuilder output, int leftIndex, int rightIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPrefixLength()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCodePointCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStrong()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsField(java.text.Format.Field field)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parameters getParameters()",
    "returnType" : "Parameters",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean strictEquals(Modifier other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int insertPrefix(FormattedStringBuilder sb, int position)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int insertSuffix(FormattedStringBuilder sb, int position)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void prepareAffix(boolean isPrefix)",
    "returnType" : "void",
    "comment" : "\n     * Pre-processes the prefix or suffix into the currentAffix field, creating and mutating that field\n     * if necessary. Calls down to {@link PatternStringUtils#affixPatternProviderToStringBuilder}.\n     *\n     * @param isPrefix\n     *            true to prepare the prefix; false to prepare the suffix.\n     ",
    "links" : [ "android.icu.impl.number.PatternStringUtils#affixPatternProviderToStringBuilder" ]
  }, {
    "name" : "public CharSequence getSymbol(int type)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the string that substitutes a given symbol type in a pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrencySymbolForUnitWidth()",
    "returnType" : "String",
    "comment" : "\n     * Returns the currency symbol for the unit width specified in setSymbols()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setPatternInfo(AffixPatternProvider patternInfo, Field field)", "public void setPatternAttributes(SignDisplay signDisplay, boolean perMille, boolean approximately)", "public void setSymbols(DecimalFormatSymbols symbols, Currency currency, UnitWidth unitWidth, PluralRules rules)", "public void setNumberProperties(Signum signum, StandardPlural plural)", "public boolean needsPlurals()", "public ImmutablePatternModifier createImmutable()", "private ConstantMultiFieldModifier createConstantModifier(FormattedStringBuilder a, FormattedStringBuilder b)", "public MicroPropsGenerator addToChain(MicroPropsGenerator parent)", "public MicroProps processQuantity(DecimalQuantity fq)", "public int apply(FormattedStringBuilder output, int leftIndex, int rightIndex)", "public int getPrefixLength()", "public int getCodePointCount()", "public boolean isStrong()", "public boolean containsField(java.text.Format.Field field)", "public Parameters getParameters()", "public boolean strictEquals(Modifier other)", "private int insertPrefix(FormattedStringBuilder sb, int position)", "private int insertSuffix(FormattedStringBuilder sb, int position)", "private void prepareAffix(boolean isPrefix)", "public CharSequence getSymbol(int type)", "public String getCurrencySymbolForUnitWidth()" ],
  "variableNames" : [ "isStrong", "patternInfo", "field", "signDisplay", "perMilleReplacesPercent", "approximately", "symbols", "unitWidth", "currency", "rules", "signum", "plural", "parent", "currentAffix" ]
}