{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMNodeProxy.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMNodeProxy",
  "comment" : "\n * <code>DTMNodeProxy</code> presents a DOM Node API front-end to the DTM model.\n * <p>\n * It does _not_ attempt to address the \"node identity\" question; no effort\n * is made to prevent the creation of multiple proxies referring to a single\n * DTM node. Users can create a mechanism for managing this, or relinquish the\n * use of \"==\" and use the .sameNodeAs() mechanism, which is under\n * consideration for future versions of the DOM.\n * <p>\n * DTMNodeProxy may be subclassed further to present specific DOM node types.\n *\n * @see org.w3c.dom\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "dtm",
    "type" : "DTM",
    "comment" : " The DTM for this node. ",
    "links" : [ ]
  }, {
    "name" : "node",
    "type" : "int",
    "comment" : " The DTM node handle. ",
    "links" : [ ]
  }, {
    "name" : "EMPTYSTRING",
    "type" : "String",
    "comment" : " The return value as Empty String. ",
    "links" : [ ]
  }, {
    "name" : "implementation",
    "type" : "DOMImplementation",
    "comment" : " The DOMImplementation object ",
    "links" : [ ]
  }, {
    "name" : "fDocumentURI",
    "type" : "String",
    "comment" : " DOM Level 3 feature: documentURI ",
    "links" : [ ]
  }, {
    "name" : "actualEncoding",
    "type" : "String",
    "comment" : " DOM Level 3 feature: Document actualEncoding ",
    "links" : [ ]
  }, {
    "name" : "xmlEncoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlStandalone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xmlVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final DTM getDTM()",
    "returnType" : "DTM",
    "comment" : "\n   * NON-DOM: Return the DTM model\n   *\n   * @return The DTM that this proxy is a representative for.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getDTMNodeNumber()",
    "returnType" : "int",
    "comment" : "\n   * NON-DOM: Return the DTM node number\n   *\n   * @return The DTM node handle.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Node node)",
    "returnType" : "boolean",
    "comment" : "\n   * Test for equality based on node number.\n   *\n   * @param node A DTM node proxy reference.\n   *\n   * @return true if the given node has the same handle as this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object node)",
    "returnType" : "boolean",
    "comment" : "\n   * Test for equality based on node number.\n   *\n   * @param node A DTM node proxy reference.\n   *\n   * @return true if the given node has the same handle as this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean sameNodeAs(Node other)",
    "returnType" : "boolean",
    "comment" : "\n   * FUTURE DOM: Test node identity, in lieu of Node==Node\n   *\n   * @param other\n   *\n   * @return true if the given node has the same handle as this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getTarget()",
    "returnType" : "String",
    "comment" : "\n   * A PI's \"target\" states what processor channel the PI's data\n   * should be directed to. It is defined differently in HTML and XML.\n   * <p>\n   * In XML, a PI's \"target\" is the first (whitespace-delimited) token\n   * following the \"<?\" token that begins the PI.\n   * <p>\n   * In HTML, target is always null.\n   * <p>\n   * Note that getNodeName is aliased to getTarget.\n   *\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getLocalName()",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getPrefix()",
    "returnType" : "String",
    "comment" : "\n   * @return The prefix for this node.\n   * @see org.w3c.dom.Node as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setPrefix(String prefix) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param prefix\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node as of DOM Level 2 -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean supports(String feature, String version)",
    "returnType" : "boolean",
    "comment" : " Ask whether we support a given DOM feature.\n   * In fact, we do not _fully_ support any DOM feature -- we're a\n   * read-only subset -- so arguably we should always return false.\n   * Or we could say that we support DOM Core Level 2 but all nodes\n   * are read-only. Unclear which answer is least misleading.\n   * \n   * NON-DOM method. This was present in early drafts of DOM Level 2,\n   * but was renamed isSupported. It's present here only because it's\n   * cheap, harmless, and might help some poor fool who is still trying\n   * to use an early Working Draft of the DOM.\n   *\n   * @param feature\n   * @param version\n   *\n   * @return false\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isSupported(String feature, String version)",
    "returnType" : "boolean",
    "comment" : " Ask whether we support a given DOM feature.\n   * In fact, we do not _fully_ support any DOM feature -- we're a\n   * read-only subset -- so arguably we should always return false.\n   *\n   * @param feature\n   * @param version\n   *\n   * @return false\n   * @see org.w3c.dom.Node as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getNodeValue() throws DOMException",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getStringValue() throws DOMException",
    "returnType" : "String",
    "comment" : "\n   * @return The string value of the node\n   * \n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setNodeValue(String nodeValue) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param nodeValue\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final short getNodeType()",
    "returnType" : "short",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node getParentNode()",
    "returnType" : "Node",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node getOwnerNode()",
    "returnType" : "Node",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node getLastChild()",
    "returnType" : "Node",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttribute(String name)",
    "returnType" : "boolean",
    "comment" : "\n   * Method hasAttribute\n   *\n   *\n   * @param name\n   *\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributeNS(String namespaceURI, String localName)",
    "returnType" : "boolean",
    "comment" : "\n   * Method hasAttributeNS\n   *\n   *\n   * @param namespaceURI\n   * @param localName\n   *\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   *\n   * @param newChild\n   * @param refChild\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   *\n   * @param newChild\n   * @param oldChild\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node removeChild(Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   *\n   * @param oldChild\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   *\n   * @param newChild\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Node -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Node\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node cloneNode(boolean deep)",
    "returnType" : "Node",
    "comment" : "\n   *\n   * @param deep\n   *\n   *\n   * @see org.w3c.dom.Node -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final DocumentType getDoctype()",
    "returnType" : "DocumentType",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final DOMImplementation getImplementation()",
    "returnType" : "DOMImplementation",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Element getDocumentElement()",
    "returnType" : "Element",
    "comment" : " This is a bit of a problem in DTM, since a DTM may be a Document\n   * Fragment and hence not have a clear-cut Document Element. We can\n   * make it work in the well-formed cases but would that be confusing for others?\n   * \n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Element createElement(String tagName) throws DOMException",
    "returnType" : "Element",
    "comment" : "\n   *\n   * @param tagName\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final DocumentFragment createDocumentFragment()",
    "returnType" : "DocumentFragment",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Text createTextNode(String data)",
    "returnType" : "Text",
    "comment" : "\n   *\n   * @param data\n   *\n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Comment createComment(String data)",
    "returnType" : "Comment",
    "comment" : "\n   *\n   * @param data\n   *\n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final CDATASection createCDATASection(String data) throws DOMException",
    "returnType" : "CDATASection",
    "comment" : "\n   *\n   * @param data\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException",
    "returnType" : "ProcessingInstruction",
    "comment" : "\n   *\n   * @param target\n   * @param data\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr createAttribute(String name) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param name\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final EntityReference createEntityReference(String name) throws DOMException",
    "returnType" : "EntityReference",
    "comment" : "\n   *\n   * @param name\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "public final NodeList getElementsByTagName(String tagname)",
    "returnType" : "NodeList",
    "comment" : "\n   *\n   * @param tagname\n   *\n   *\n   * @see org.w3c.dom.Document\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void traverseChildren(Vector listVector, Node tempNode, String tagname, boolean isTagNameWildCard)",
    "returnType" : "void",
    "comment" : "\n   * \n   * @param listVector\n   * @param tempNode\n   * @param tagname\n   * @param isTagNameWildCard\n   * \n   * \n   * Private method to be used for recursive iterations to obtain elements by tag name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Node importNode(Node importedNode, boolean deep) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   *\n   * @param importedNode\n   * @param deep\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document as of DOM Level 2 -- DTMNodeProxy is read-only\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Element",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param qualifiedName\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param qualifiedName\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final NodeList getElementsByTagNameNS(String namespaceURI, String localName)",
    "returnType" : "NodeList",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param localName\n   *\n   *\n   * @see org.w3c.dom.Document as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void traverseChildren(Vector listVector, Node tempNode, String namespaceURI, String localname, boolean isNamespaceURIWildCard, boolean isLocalNameWildCard)",
    "returnType" : "void",
    "comment" : "\n   * \n   * @param listVector\n   * @param tempNode\n   * @param namespaceURI\n   * @param localname\n   * @param isNamespaceURIWildCard\n   * @param isLocalNameWildCard\n   * \n   * Private method to be used for recursive iterations to obtain elements by tag name \n   * and namespaceURI.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Element getElementById(String elementId)",
    "returnType" : "Element",
    "comment" : "\n   *\n   * @param elementId\n   *\n   *\n   * @see org.w3c.dom.Document as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Text splitText(int offset) throws DOMException",
    "returnType" : "Text",
    "comment" : "\n   *\n   * @param offset\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Text\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getData() throws DOMException",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setData(String data) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param data\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getLength()",
    "returnType" : "int",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String substringData(int offset, int count) throws DOMException",
    "returnType" : "String",
    "comment" : "\n   *\n   * @param offset\n   * @param count\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void appendData(String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param arg\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void insertData(int offset, String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param offset\n   * @param arg\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void deleteData(int offset, int count) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param offset\n   * @param count\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void replaceData(int offset, int count, String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param offset\n   * @param count\n   * @param arg\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.CharacterData\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getTagName()",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getAttribute(String name)",
    "returnType" : "String",
    "comment" : "\n   *\n   * @param name\n   *\n   *\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setAttribute(String name, String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param name\n   * @param value\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void removeAttribute(String name) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param name\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr getAttributeNode(String name)",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param name\n   *\n   *\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr setAttributeNode(Attr newAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param newAttr\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr removeAttributeNode(Attr oldAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param oldAttr\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributes()",
    "returnType" : "boolean",
    "comment" : "\n   * Introduced in DOM Level 2.\n   *\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void normalize()",
    "returnType" : "void",
    "comment" : " @see org.w3c.dom.Element ",
    "links" : [ ]
  }, {
    "name" : "public final String getAttributeNS(String namespaceURI, String localName)",
    "returnType" : "String",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param localName\n   *\n   *\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param qualifiedName\n   * @param value\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void removeAttributeNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param localName\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr getAttributeNodeNS(String namespaceURI, String localName)",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param namespaceURI\n   * @param localName\n   *\n   *\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Attr setAttributeNodeNS(Attr newAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n   *\n   * @param newAttr\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Element\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Attr\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getSpecified()",
    "returnType" : "boolean",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Attr\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getValue()",
    "returnType" : "String",
    "comment" : "\n   *\n   *\n   * @see org.w3c.dom.Attr\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setValue(String value)",
    "returnType" : "void",
    "comment" : "\n   *\n   * @param value\n   * @see org.w3c.dom.Attr\n   ",
    "links" : [ ]
  }, {
    "name" : "public final Element getOwnerElement()",
    "returnType" : "Element",
    "comment" : "\n   * Get the owner element of an attribute.\n   *\n   *\n   * @see org.w3c.dom.Attr as of DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node adoptNode(Node source) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * NEEDSDOC Method adoptNode \n   *\n   *\n   * NEEDSDOC @param source\n   *\n   *\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getInputEncoding()",
    "returnType" : "String",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying, as part of the XML declaration, the encoding\n   * of this document. This is <code>null</code> when unspecified.\n   * @since DOM Level 3\n   *\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getStrictErrorChecking()",
    "returnType" : "boolean",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying whether errors checking is enforced or not.\n   * When set to <code>false</code>, the implementation is free to not\n   * test every possible error case normally defined on DOM operations,\n   * and not raise any <code>DOMException</code>. In case of error, the\n   * behavior is undefined. This attribute is <code>true</code> by\n   * defaults.\n   * @since DOM Level 3\n   *\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStrictErrorChecking(boolean strictErrorChecking)",
    "returnType" : "void",
    "comment" : "\n   * <p>Based on the <a\n   * href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document\n   * Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>.\n   * <p>\n   * An attribute specifying whether errors checking is enforced or not.\n   * When set to <code>false</code>, the implementation is free to not\n   * test every possible error case normally defined on DOM operations,\n   * and not raise any <code>DOMException</code>. In case of error, the\n   * behavior is undefined. This attribute is <code>true</code> by\n   * defaults.\n   * @since DOM Level 3\n   *\n   * NEEDSDOC @param strictErrorChecking\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object setUserData(String key, Object data, UserDataHandler handler)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getUserData(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the object associated to a key on a this node. The object\n     * must first have been set to this node by calling\n     * <code>setUserData</code> with the same key.\n     * @param key The key the object is associated to.\n     * @return Returns the <code>DOMObject</code> associated to the given key\n     *   on this node, or <code>null</code> if there was none.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "\n     *  This method returns a specialized object which implements the\n     * specialized APIs of the specified feature and version. The\n     * specialized object may also be obtained by using binding-specific\n     * casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations.\n     * @param feature The name of the feature requested (case-insensitive).\n     * @param version  This is the version number of the feature to test. If\n     *   the version is <code>null</code> or the empty string, supporting\n     *   any version of the feature will cause the method to return an\n     *   object that supports at least one version of the feature.\n     * @return  Returns an object which implements the specialized APIs of\n     *   the specified feature and version, if any, or <code>null</code> if\n     *   there is no object which implements interfaces associated with that\n     *   feature. If the <code>DOMObject</code> returned by this method\n     *   implements the <code>Node</code> interface, it must delegate to the\n     *   primary core <code>Node</code> and not return results inconsistent\n     *   with the primary core <code>Node</code> such as attributes,\n     *   childNodes, etc.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEqualNode(Node arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether two nodes are equal.\n     * <br>This method tests for equality of nodes, not sameness (i.e.,\n     * whether the two nodes are references to the same object) which can be\n     * tested with <code>Node.isSameNode</code>. All nodes that are the same\n     * will also be equal, though the reverse may not be true.\n     * <br>Two nodes are equal if and only if the following conditions are\n     * satisfied: The two nodes are of the same type.The following string\n     * attributes are equal: <code>nodeName</code>, <code>localName</code>,\n     * <code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>\n     * , <code>baseURI</code>. This is: they are both <code>null</code>, or\n     * they have the same length and are character for character identical.\n     * The <code>attributes</code> <code>NamedNodeMaps</code> are equal.\n     * This is: they are both <code>null</code>, or they have the same\n     * length and for each node that exists in one map there is a node that\n     * exists in the other map and is equal, although not necessarily at the\n     * same index.The <code>childNodes</code> <code>NodeLists</code> are\n     * equal. This is: they are both <code>null</code>, or they have the\n     * same length and contain equal nodes at the same index. This is true\n     * for <code>Attr</code> nodes as for any other type of node. Note that\n     * normalization can affect equality; to avoid this, nodes should be\n     * normalized before being compared.\n     * <br>For two <code>DocumentType</code> nodes to be equal, the following\n     * conditions must also be satisfied: The following string attributes\n     * are equal: <code>publicId</code>, <code>systemId</code>,\n     * <code>internalSubset</code>.The <code>entities</code>\n     * <code>NamedNodeMaps</code> are equal.The <code>notations</code>\n     * <code>NamedNodeMaps</code> are equal.\n     * <br>On the other hand, the following do not affect equality: the\n     * <code>ownerDocument</code> attribute, the <code>specified</code>\n     * attribute for <code>Attr</code> nodes, the\n     * <code>isWhitespaceInElementContent</code> attribute for\n     * <code>Text</code> nodes, as well as any user data or event listeners\n     * registered on the nodes.\n     * @param arg The node to compare equality with.\n     * @param deep If <code>true</code>, recursively compare the subtrees; if\n     *   <code>false</code>, compare only the nodes themselves (and its\n     *   attributes, if it is an <code>Element</code>).\n     * @return If the nodes, and possibly subtrees are equal,\n     *   <code>true</code> otherwise <code>false</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupNamespaceURI(String specifiedPrefix)",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3:\n     * Look up the namespace URI associated to the given prefix, starting from this node.\n     * Use lookupNamespaceURI(null) to lookup the default namespace\n     *\n     * @param namespaceURI\n     * @return th URI for the namespace\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultNamespace(String namespaceURI)",
    "returnType" : "boolean",
    "comment" : "\n     *  DOM Level 3:\n     *  This method checks if the specified <code>namespaceURI</code> is the\n     *  default namespace or not.\n     *  @param namespaceURI The namespace URI to look for.\n     *  @return  <code>true</code> if the specified <code>namespaceURI</code>\n     *   is the default namespace, <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3:\n     * Look up the prefix associated to the given namespace URI, starting from this node.\n     *\n     * @param namespaceURI\n     * @return the prefix for the namespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameNode(Node other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this node is the same node as the given one.\n     * <br>This method provides a way to determine whether two\n     * <code>Node</code> references returned by the implementation reference\n     * the same object. When two <code>Node</code> references are references\n     * to the same object, even if through a proxy, the references may be\n     * used completely interchangably, such that all attributes have the\n     * same values and calling the same DOM method on either reference\n     * always has exactly the same effect.\n     * @param other The node to test against.\n     * @return Returns <code>true</code> if the nodes are the same,\n     *   <code>false</code> otherwise.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextContent(String textContent) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be null, setting it has no effect.\n     * When set, any possible children this node may have are removed and\n     * replaced by a single <code>Text</code> node containing the string\n     * this attribute is set to. On getting, no serialization is performed,\n     * the returned string does not contain any markup. No whitespace\n     * normalization is performed, the returned string does not contain the\n     * element content whitespaces . Similarly, on setting, no parsing is\n     * performed either, the input string is taken as pure textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * <code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * null</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * This attribute returns the text content of this node and its\n     * descendants. When it is defined to be null, setting it has no effect.\n     * When set, any possible children this node may have are removed and\n     * replaced by a single <code>Text</code> node containing the string\n     * this attribute is set to. On getting, no serialization is performed,\n     * the returned string does not contain any markup. No whitespace\n     * normalization is performed, the returned string does not contain the\n     * element content whitespaces . Similarly, on setting, no parsing is\n     * performed either, the input string is taken as pure textual content.\n     * <br>The string returned is made of the text content of this node\n     * depending on its type, as defined below:\n     * <table border='1'>\n     * <tr>\n     * <th>Node type</th>\n     * <th>Content</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n     * DOCUMENT_FRAGMENT_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>\n     * attribute value of every child node, excluding COMMENT_NODE and\n     * PROCESSING_INSTRUCTION_NODE nodes</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * <code>nodeValue</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     * null</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public short compareDocumentPosition(Node other) throws DOMException",
    "returnType" : "short",
    "comment" : "\n     * Compares a node with this node with regard to their position in the\n     * document.\n     * @param other The node to compare against this node.\n     * @return Returns how the given node is positioned relatively to this\n     *   node.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseURI()",
    "returnType" : "String",
    "comment" : "\n     * The absolute base URI of this node or <code>null</code> if undefined.\n     * This value is computed according to . However, when the\n     * <code>Document</code> supports the feature \"HTML\" , the base URI is\n     * computed using first the value of the href attribute of the HTML BASE\n     * element if any, and the value of the <code>documentURI</code>\n     * attribute from the <code>Document</code> interface otherwise.\n     * <br> When the node is an <code>Element</code>, a <code>Document</code>\n     * or a a <code>ProcessingInstruction</code>, this attribute represents\n     * the properties [base URI] defined in . When the node is a\n     * <code>Notation</code>, an <code>Entity</code>, or an\n     * <code>EntityReference</code>, this attribute represents the\n     * properties [declaration base URI] in the . How will this be affected\n     * by resolution of relative namespace URIs issue?It's not.Should this\n     * only be on Document, Element, ProcessingInstruction, Entity, and\n     * Notation nodes, according to the infoset? If not, what is it equal to\n     * on other nodes? Null? An empty string? I think it should be the\n     * parent's.No.Should this be read-only and computed or and actual\n     * read-write attribute?Read-only and computed (F2F 19 Jun 2000 and\n     * teleconference 30 May 2001).If the base HTML element is not yet\n     * attached to a document, does the insert change the Document.baseURI?\n     * Yes. (F2F 26 Sep 2001)\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node renameNode(Node n, String namespaceURI, String name) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * DOM Level 3\n     * Renaming node\n     ",
    "links" : [ ]
  }, {
    "name" : "public void normalizeDocument()",
    "returnType" : "void",
    "comment" : "\n     *  DOM Level 3\n     *  Normalize document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMConfiguration getDomConfig()",
    "returnType" : "DOMConfiguration",
    "comment" : "\n     *  The configuration used when <code>Document.normalizeDocument</code> is\n     * invoked.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentURI(String documentURI)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDocumentURI()",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3\n     * The location of the document or <code>null</code> if undefined.\n     * <br>Beware that when the <code>Document</code> supports the feature\n     * \"HTML\" , the href attribute of the HTML BASE element takes precedence\n     * over this attribute.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getActualEncoding()",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3\n     * An attribute specifying the actual encoding of this document. This is\n     * <code>null</code> otherwise.\n     * <br> This attribute represents the property [character encoding scheme]\n     * defined in .\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActualEncoding(String value)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3\n     * An attribute specifying the actual encoding of this document. This is\n     * <code>null</code> otherwise.\n     * <br> This attribute represents the property [character encoding scheme]\n     * defined in .\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Text replaceWholeText(String content) throws DOMException",
    "returnType" : "Text",
    "comment" : "\n    * DOM Level 3\n    ",
    "links" : [ ]
  }, {
    "name" : "public String getWholeText()",
    "returnType" : "String",
    "comment" : "\n     * DOM Level 3\n     * Returns all text of <code>Text</code> nodes logically-adjacent text\n     * nodes to this node, concatenated in document order.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isElementContentWhitespace()",
    "returnType" : "boolean",
    "comment" : "\n     * DOM Level 3\n     * Returns whether this text node contains whitespace in element content,\n     * often abusively called \"ignorable whitespace\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttribute(boolean id)",
    "returnType" : "void",
    "comment" : "\n     * NON-DOM: set the type of this attribute to be ID type.\n     *\n     * @param id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttribute(String name, boolean makeId)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3: register the given attribute node as an ID attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttributeNode(Attr at, boolean makeId)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3: register the given attribute node as an ID attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttributeNS(String namespaceURI, String localName, boolean makeId)",
    "returnType" : "void",
    "comment" : "\n     * DOM Level 3: register the given attribute node as an ID attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeInfo getSchemaTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isId()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getXmlEncoding()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlEncoding(String xmlEncoding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getXmlStandalone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlStandalone(boolean xmlStandalone) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getXmlVersion()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlVersion(String xmlVersion) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final DTM getDTM()", "public final int getDTMNodeNumber()", "public final boolean equals(Node node)", "public final boolean equals(Object node)", "public final boolean sameNodeAs(Node other)", "public final String getNodeName()", "public final String getTarget()", "public final String getLocalName()", "public final String getPrefix()", "public final void setPrefix(String prefix) throws DOMException", "public final String getNamespaceURI()", "public final boolean supports(String feature, String version)", "public final boolean isSupported(String feature, String version)", "public final String getNodeValue() throws DOMException", "public final String getStringValue() throws DOMException", "public final void setNodeValue(String nodeValue) throws DOMException", "public final short getNodeType()", "public final Node getParentNode()", "public final Node getOwnerNode()", "public final NodeList getChildNodes()", "public final Node getFirstChild()", "public final Node getLastChild()", "public final Node getPreviousSibling()", "public final Node getNextSibling()", "public final NamedNodeMap getAttributes()", "public boolean hasAttribute(String name)", "public boolean hasAttributeNS(String namespaceURI, String localName)", "public final Document getOwnerDocument()", "public final Node insertBefore(Node newChild, Node refChild) throws DOMException", "public final Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public final Node removeChild(Node oldChild) throws DOMException", "public final Node appendChild(Node newChild) throws DOMException", "public final boolean hasChildNodes()", "public final Node cloneNode(boolean deep)", "public final DocumentType getDoctype()", "public final DOMImplementation getImplementation()", "public final Element getDocumentElement()", "public final Element createElement(String tagName) throws DOMException", "public final DocumentFragment createDocumentFragment()", "public final Text createTextNode(String data)", "public final Comment createComment(String data)", "public final CDATASection createCDATASection(String data) throws DOMException", "public final ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException", "public final Attr createAttribute(String name) throws DOMException", "public final EntityReference createEntityReference(String name) throws DOMException", "public final NodeList getElementsByTagName(String tagname)", "private final void traverseChildren(Vector listVector, Node tempNode, String tagname, boolean isTagNameWildCard)", "public final Node importNode(Node importedNode, boolean deep) throws DOMException", "public final Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException", "public final Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException", "public final NodeList getElementsByTagNameNS(String namespaceURI, String localName)", "private final void traverseChildren(Vector listVector, Node tempNode, String namespaceURI, String localname, boolean isNamespaceURIWildCard, boolean isLocalNameWildCard)", "public final Element getElementById(String elementId)", "public final Text splitText(int offset) throws DOMException", "public final String getData() throws DOMException", "public final void setData(String data) throws DOMException", "public final int getLength()", "public final String substringData(int offset, int count) throws DOMException", "public final void appendData(String arg) throws DOMException", "public final void insertData(int offset, String arg) throws DOMException", "public final void deleteData(int offset, int count) throws DOMException", "public final void replaceData(int offset, int count, String arg) throws DOMException", "public final String getTagName()", "public final String getAttribute(String name)", "public final void setAttribute(String name, String value) throws DOMException", "public final void removeAttribute(String name) throws DOMException", "public final Attr getAttributeNode(String name)", "public final Attr setAttributeNode(Attr newAttr) throws DOMException", "public final Attr removeAttributeNode(Attr oldAttr) throws DOMException", "public boolean hasAttributes()", "public final void normalize()", "public final String getAttributeNS(String namespaceURI, String localName)", "public final void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException", "public final void removeAttributeNS(String namespaceURI, String localName) throws DOMException", "public final Attr getAttributeNodeNS(String namespaceURI, String localName)", "public final Attr setAttributeNodeNS(Attr newAttr) throws DOMException", "public final String getName()", "public final boolean getSpecified()", "public final String getValue()", "public final void setValue(String value)", "public final Element getOwnerElement()", "public Node adoptNode(Node source) throws DOMException", "public String getInputEncoding()", "public boolean getStrictErrorChecking()", "public void setStrictErrorChecking(boolean strictErrorChecking)", "public Object setUserData(String key, Object data, UserDataHandler handler)", "public Object getUserData(String key)", "public Object getFeature(String feature, String version)", "public boolean isEqualNode(Node arg)", "public String lookupNamespaceURI(String specifiedPrefix)", "public boolean isDefaultNamespace(String namespaceURI)", "public String lookupPrefix(String namespaceURI)", "public boolean isSameNode(Node other)", "public void setTextContent(String textContent) throws DOMException", "public String getTextContent() throws DOMException", "public short compareDocumentPosition(Node other) throws DOMException", "public String getBaseURI()", "public Node renameNode(Node n, String namespaceURI, String name) throws DOMException", "public void normalizeDocument()", "public DOMConfiguration getDomConfig()", "public void setDocumentURI(String documentURI)", "public String getDocumentURI()", "public String getActualEncoding()", "public void setActualEncoding(String value)", "public Text replaceWholeText(String content) throws DOMException", "public String getWholeText()", "public boolean isElementContentWhitespace()", "public void setIdAttribute(boolean id)", "public void setIdAttribute(String name, boolean makeId)", "public void setIdAttributeNode(Attr at, boolean makeId)", "public void setIdAttributeNS(String namespaceURI, String localName, boolean makeId)", "public TypeInfo getSchemaTypeInfo()", "public boolean isId()", "public String getXmlEncoding()", "public void setXmlEncoding(String xmlEncoding)", "public boolean getXmlStandalone()", "public void setXmlStandalone(boolean xmlStandalone) throws DOMException", "public String getXmlVersion()", "public void setXmlVersion(String xmlVersion) throws DOMException" ],
  "variableNames" : [ "dtm", "node", "EMPTYSTRING", "implementation", "fDocumentURI", "actualEncoding", "xmlEncoding", "xmlStandalone", "xmlVersion" ]
}