{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaCodecInfo.java",
  "packageName" : "android.media",
  "className" : "CodecCapabilities",
  "comment" : "\n     * Encapsulates the capabilities of a given codec component.\n     * For example, what profile/level combinations it supports and what colorspaces\n     * it is capable of providing the decoded data in, as well as some\n     * codec-type specific capability flags.\n     * <p>You can get an instance for a given {@link MediaCodecInfo} object with\n     * {@link MediaCodecInfo#getCapabilitiesForType getCapabilitiesForType()}, passing a MIME type.\n     ",
  "variables" : [ {
    "name" : "mMime",
    "type" : "String",
    "comment" : " CLASSIFICATION",
    "links" : [ ]
  }, {
    "name" : "mMaxSupportedInstances",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "profileLevels",
    "type" : "CodecProfileLevel[]",
    "comment" : " NOTE this array is modifiable by user",
    "links" : [ ]
  }, {
    "name" : "COLOR_FormatMonochrome",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format24bitBGR888}. ",
    "links" : [ "#COLOR_Format24bitBGR888" ]
  }, {
    "name" : "COLOR_Format8bitRGB332",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format24bitBGR888}. ",
    "links" : [ "#COLOR_Format24bitBGR888" ]
  }, {
    "name" : "COLOR_Format12bitRGB444",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format24bitBGR888}. ",
    "links" : [ "#COLOR_Format24bitBGR888" ]
  }, {
    "name" : "COLOR_Format16bitARGB4444",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format16bitARGB1555",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format16bitRGB565",
    "type" : "int",
    "comment" : "\n         * 16 bits per pixel RGB color format, with 5-bit red & blue and 6-bit green component.\n         * <p>\n         * Using 16-bit little-endian representation, colors stored as Red 15:11, Green 10:5, Blue 4:0.\n         * <pre>\n         *            byte                   byte\n         *  <--------- i --------> | <------ i + 1 ------>\n         * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n         * |     BLUE     |      GREEN      |     RED      |\n         * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n         *  0           4  5     7   0     2  3           7\n         * bit\n         * </pre>\n         *\n         * This format corresponds to {@link android.graphics.PixelFormat#RGB_565} and\n         * {@link android.graphics.ImageFormat#RGB_565}.\n         ",
    "links" : [ "android.graphics.ImageFormat#RGB_565", "android.graphics.PixelFormat#RGB_565" ]
  }, {
    "name" : "COLOR_Format16bitBGR565",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format16bitRGB565}. ",
    "links" : [ "#COLOR_Format16bitRGB565" ]
  }, {
    "name" : "COLOR_Format18bitRGB666",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format24bitBGR888}. ",
    "links" : [ "#COLOR_Format24bitBGR888" ]
  }, {
    "name" : "COLOR_Format18bitARGB1665",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format19bitARGB1666",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format24bitRGB888",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format24bitBGR888} or {@link #COLOR_FormatRGBFlexible}. ",
    "links" : [ "#COLOR_Format24bitBGR888", "#COLOR_FormatRGBFlexible" ]
  }, {
    "name" : "COLOR_Format24bitBGR888",
    "type" : "int",
    "comment" : "\n         * 24 bits per pixel RGB color format, with 8-bit red, green & blue components.\n         * <p>\n         * Using 24-bit little-endian representation, colors stored as Red 7:0, Green 15:8, Blue 23:16.\n         * <pre>\n         *         byte              byte             byte\n         *  <------ i -----> | <---- i+1 ----> | <---- i+2 ----->\n         * +-----------------+-----------------+-----------------+\n         * |       RED       |      GREEN      |       BLUE      |\n         * +-----------------+-----------------+-----------------+\n         * </pre>\n         *\n         * This format corresponds to {@link android.graphics.PixelFormat#RGB_888}, and can also be\n         * represented as a flexible format by {@link #COLOR_FormatRGBFlexible}.\n         ",
    "links" : [ "android.graphics.PixelFormat#RGB_888", "#COLOR_FormatRGBFlexible" ]
  }, {
    "name" : "COLOR_Format24bitARGB1887",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format25bitARGB1888",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format32bitBGRA8888",
    "type" : "int",
    "comment" : "\n         * @deprecated Use {@link #COLOR_Format32bitABGR8888} Or {@link #COLOR_FormatRGBAFlexible}.\n         ",
    "links" : [ "#COLOR_Format32bitABGR8888", "#COLOR_FormatRGBAFlexible" ]
  }, {
    "name" : "COLOR_Format32bitARGB8888",
    "type" : "int",
    "comment" : "\n         * @deprecated Use {@link #COLOR_Format32bitABGR8888} Or {@link #COLOR_FormatRGBAFlexible}.\n         ",
    "links" : [ "#COLOR_Format32bitABGR8888", "#COLOR_FormatRGBAFlexible" ]
  }, {
    "name" : "COLOR_FormatYUV411Planar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV411PackedPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV420Planar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV420PackedPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV420SemiPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV422Planar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV422PackedPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV422SemiPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatYCbYCr",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatYCrYCb",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatCbYCrY",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatCrYCbY",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV444Interleaved",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV444Flexible}. ",
    "links" : [ "#COLOR_FormatYUV444Flexible" ]
  }, {
    "name" : "COLOR_FormatRawBayer8bit",
    "type" : "int",
    "comment" : "\n         * SMIA 8-bit Bayer format.\n         * Each byte represents the top 8-bits of a 10-bit signal.\n         ",
    "links" : [ ]
  }, {
    "name" : "COLOR_FormatRawBayer10bit",
    "type" : "int",
    "comment" : "\n         * SMIA 10-bit Bayer format.\n         ",
    "links" : [ ]
  }, {
    "name" : "COLOR_FormatRawBayer8bitcompressed",
    "type" : "int",
    "comment" : "\n         * SMIA 8-bit compressed Bayer format.\n         * Each byte represents a sample from the 10-bit signal that is compressed into 8-bits\n         * using DPCM/PCM compression, as defined by the SMIA Functional Specification.\n         ",
    "links" : [ ]
  }, {
    "name" : "COLOR_FormatL2",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatL8}. ",
    "links" : [ "#COLOR_FormatL8" ]
  }, {
    "name" : "COLOR_FormatL4",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatL8}. ",
    "links" : [ "#COLOR_FormatL8" ]
  }, {
    "name" : "COLOR_FormatL8",
    "type" : "int",
    "comment" : "\n         * 8 bits per pixel Y color format.\n         * <p>\n         * Each byte contains a single pixel.\n         * This format corresponds to {@link android.graphics.PixelFormat#L_8}.\n         ",
    "links" : [ "android.graphics.PixelFormat#L_8" ]
  }, {
    "name" : "COLOR_FormatL16",
    "type" : "int",
    "comment" : "\n         * 16 bits per pixel, little-endian Y color format.\n         * <p>\n         * <pre>\n         *            byte                   byte\n         *  <--------- i --------> | <------ i + 1 ------>\n         * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n         * |                       Y                       |\n         * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n         *  0                    7   0                    7\n         * bit\n         * </pre>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLOR_FormatL24",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatL16}. ",
    "links" : [ "#COLOR_FormatL16" ]
  }, {
    "name" : "COLOR_FormatL32",
    "type" : "int",
    "comment" : "\n         * 32 bits per pixel, little-endian Y color format.\n         * <p>\n         * <pre>\n         *         byte              byte             byte              byte\n         *  <------ i -----> | <---- i+1 ----> | <---- i+2 ----> | <---- i+3 ----->\n         * +-----------------+-----------------+-----------------+-----------------+\n         * |                                   Y                                   |\n         * +-----------------+-----------------+-----------------+-----------------+\n         *  0               7 0               7 0               7 0               7\n         * bit\n         * </pre>\n         *\n         * @deprecated Use {@link #COLOR_FormatL16}.\n         ",
    "links" : [ "#COLOR_FormatL16" ]
  }, {
    "name" : "COLOR_FormatYUV420PackedSemiPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatYUV422PackedSemiPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV422Flexible}. ",
    "links" : [ "#COLOR_FormatYUV422Flexible" ]
  }, {
    "name" : "COLOR_Format18BitBGR666",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format24bitBGR888}. ",
    "links" : [ "#COLOR_Format24bitBGR888" ]
  }, {
    "name" : "COLOR_Format24BitARGB6666",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_Format24BitABGR6666",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_Format32bitABGR8888}. ",
    "links" : [ "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_TI_FormatYUV420PackedSemiPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "COLOR_FormatSurface",
    "type" : "int",
    "comment" : " Note: in OMX this is called OMX_COLOR_FormatAndroidOpaque.",
    "links" : [ ]
  }, {
    "name" : "COLOR_Format32bitABGR8888",
    "type" : "int",
    "comment" : "\n         * 32 bits per pixel RGBA color format, with 8-bit red, green, blue, and alpha components.\n         * <p>\n         * Using 32-bit little-endian representation, colors stored as Red 7:0, Green 15:8,\n         * Blue 23:16, and Alpha 31:24.\n         * <pre>\n         *         byte              byte             byte              byte\n         *  <------ i -----> | <---- i+1 ----> | <---- i+2 ----> | <---- i+3 ----->\n         * +-----------------+-----------------+-----------------+-----------------+\n         * |       RED       |      GREEN      |       BLUE      |      ALPHA      |\n         * +-----------------+-----------------+-----------------+-----------------+\n         * </pre>\n         *\n         * This corresponds to {@link android.graphics.PixelFormat#RGBA_8888}.\n         ",
    "links" : [ "android.graphics.PixelFormat#RGBA_8888" ]
  }, {
    "name" : "COLOR_FormatYUV420Flexible",
    "type" : "int",
    "comment" : "\n         * Flexible 12 bits per pixel, subsampled YUV color format with 8-bit chroma and luma\n         * components.\n         * <p>\n         * Chroma planes are subsampled by 2 both horizontally and vertically.\n         * Use this format with {@link Image}.\n         * This format corresponds to {@link android.graphics.ImageFormat#YUV_420_888},\n         * and can represent the {@link #COLOR_FormatYUV411Planar},\n         * {@link #COLOR_FormatYUV411PackedPlanar}, {@link #COLOR_FormatYUV420Planar},\n         * {@link #COLOR_FormatYUV420PackedPlanar}, {@link #COLOR_FormatYUV420SemiPlanar}\n         * and {@link #COLOR_FormatYUV420PackedSemiPlanar} formats.\n         *\n         * @see Image#getFormat\n         ",
    "links" : [ "#COLOR_FormatYUV420PackedPlanar", "#COLOR_FormatYUV420Planar", "android.media.Image", "android.graphics.ImageFormat#YUV_420_888", "#COLOR_FormatYUV411Planar", "#COLOR_FormatYUV411PackedPlanar", "#COLOR_FormatYUV420SemiPlanar", "#COLOR_FormatYUV420PackedSemiPlanar" ]
  }, {
    "name" : "COLOR_FormatYUV422Flexible",
    "type" : "int",
    "comment" : "\n         * Flexible 16 bits per pixel, subsampled YUV color format with 8-bit chroma and luma\n         * components.\n         * <p>\n         * Chroma planes are horizontally subsampled by 2. Use this format with {@link Image}.\n         * This format corresponds to {@link android.graphics.ImageFormat#YUV_422_888},\n         * and can represent the {@link #COLOR_FormatYCbYCr}, {@link #COLOR_FormatYCrYCb},\n         * {@link #COLOR_FormatCbYCrY}, {@link #COLOR_FormatCrYCbY},\n         * {@link #COLOR_FormatYUV422Planar}, {@link #COLOR_FormatYUV422PackedPlanar},\n         * {@link #COLOR_FormatYUV422SemiPlanar} and {@link #COLOR_FormatYUV422PackedSemiPlanar}\n         * formats.\n         *\n         * @see Image#getFormat\n         ",
    "links" : [ "android.media.Image", "android.graphics.ImageFormat#YUV_422_888", "#COLOR_FormatYUV422PackedSemiPlanar", "#COLOR_FormatYCrYCb", "#COLOR_FormatCrYCbY", "#COLOR_FormatCbYCrY", "#COLOR_FormatYUV422PackedPlanar", "#COLOR_FormatYUV422Planar", "#COLOR_FormatYCbYCr", "#COLOR_FormatYUV422SemiPlanar" ]
  }, {
    "name" : "COLOR_FormatYUV444Flexible",
    "type" : "int",
    "comment" : "\n         * Flexible 24 bits per pixel YUV color format with 8-bit chroma and luma\n         * components.\n         * <p>\n         * Chroma planes are not subsampled. Use this format with {@link Image}.\n         * This format corresponds to {@link android.graphics.ImageFormat#YUV_444_888},\n         * and can represent the {@link #COLOR_FormatYUV444Interleaved} format.\n         * @see Image#getFormat\n         ",
    "links" : [ "android.media.Image", "#COLOR_FormatYUV444Interleaved", "android.graphics.ImageFormat#YUV_444_888" ]
  }, {
    "name" : "COLOR_FormatRGBFlexible",
    "type" : "int",
    "comment" : "\n         * Flexible 24 bits per pixel RGB color format with 8-bit red, green and blue\n         * components.\n         * <p>\n         * Use this format with {@link Image}. This format corresponds to\n         * {@link android.graphics.ImageFormat#FLEX_RGB_888}, and can represent\n         * {@link #COLOR_Format24bitBGR888} and {@link #COLOR_Format24bitRGB888} formats.\n         * @see Image#getFormat()\n         ",
    "links" : [ "android.media.Image", "#COLOR_Format24bitBGR888", "android.graphics.ImageFormat#FLEX_RGB_888", "#COLOR_Format24bitRGB888" ]
  }, {
    "name" : "COLOR_FormatRGBAFlexible",
    "type" : "int",
    "comment" : "\n         * Flexible 32 bits per pixel RGBA color format with 8-bit red, green, blue, and alpha\n         * components.\n         * <p>\n         * Use this format with {@link Image}. This format corresponds to\n         * {@link android.graphics.ImageFormat#FLEX_RGBA_8888}, and can represent\n         * {@link #COLOR_Format32bitBGRA8888}, {@link #COLOR_Format32bitABGR8888} and\n         * {@link #COLOR_Format32bitARGB8888} formats.\n         *\n         * @see Image#getFormat()\n         ",
    "links" : [ "#COLOR_Format32bitARGB8888", "android.graphics.ImageFormat#FLEX_RGBA_8888", "android.media.Image", "#COLOR_Format32bitBGRA8888", "#COLOR_Format32bitABGR8888" ]
  }, {
    "name" : "COLOR_QCOM_FormatYUV420SemiPlanar",
    "type" : "int",
    "comment" : " @deprecated Use {@link #COLOR_FormatYUV420Flexible}. ",
    "links" : [ "#COLOR_FormatYUV420Flexible" ]
  }, {
    "name" : "colorFormats",
    "type" : "int[]",
    "comment" : " NOTE this array is modifiable by user",
    "links" : [ ]
  }, {
    "name" : "mFlagsSupported",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlagsRequired",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlagsVerified",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FEATURE_AdaptivePlayback",
    "type" : "String",
    "comment" : "\n         * <b>video decoder only</b>: codec supports seamless resolution changes.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_SecurePlayback",
    "type" : "String",
    "comment" : "\n         * <b>video decoder only</b>: codec supports secure decryption.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_TunneledPlayback",
    "type" : "String",
    "comment" : "\n         * <b>video or audio decoder only</b>: codec supports tunneled playback.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_DynamicTimestamp",
    "type" : "String",
    "comment" : "\n         * If true, the timestamp of each output buffer is derived from the timestamp of the input\n         * buffer that produced the output. If false, the timestamp of each output buffer is\n         * derived from the timestamp of the first input buffer.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_FrameParsing",
    "type" : "String",
    "comment" : "\n         * <b>decoder only</b>If true, the codec supports partial (including multiple) access units\n         * per input buffer.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_MultipleFrames",
    "type" : "String",
    "comment" : "\n         * If true, the codec supports multiple access units (for decoding, or to output for\n         * encoders). If false, the codec only supports single access units. Producing multiple\n         * access units for output is an optional feature.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_PartialFrame",
    "type" : "String",
    "comment" : "\n         * <b>video decoder only</b>: codec supports queuing partial frames.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_IntraRefresh",
    "type" : "String",
    "comment" : "\n         * <b>video encoder only</b>: codec supports intra refresh.\n         ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_LowLatency",
    "type" : "String",
    "comment" : "\n         * <b>decoder only</b>: codec supports low latency decoding.\n         * If supported, clients can enable the low latency mode for the decoder.\n         * When the mode is enabled, the decoder doesn't hold input and output data more than\n         * required by the codec standards.\n         ",
    "links" : [ ]
  }, {
    "name" : "decoderFeatures",
    "type" : "Feature[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encoderFeatures",
    "type" : "Feature[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mError",
    "type" : "int",
    "comment" : " errors while reading profile levels - accessed from sister capabilities",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioCaps",
    "type" : "AudioCapabilities",
    "comment" : " NEW-STYLE CAPABILITIES",
    "links" : [ ]
  }, {
    "name" : "mVideoCaps",
    "type" : "VideoCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncoderCaps",
    "type" : "EncoderCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultFormat",
    "type" : "MediaFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilitiesInfo",
    "type" : "MediaFormat",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final boolean isFeatureSupported(String name)",
    "returnType" : "boolean",
    "comment" : "\n         * Query codec feature capabilities.\n         * <p>\n         * These features are supported to be used by the codec.  These\n         * include optional features that can be turned on, as well as\n         * features that are always on.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFeatureRequired(String name)",
    "returnType" : "boolean",
    "comment" : "\n         * Query codec feature requirements.\n         * <p>\n         * These features are required to be used by the codec, and as such,\n         * they are always turned on.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String[] validFeatures()",
    "returnType" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private Feature[] getValidFeatures()",
    "returnType" : "Feature[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkFeature(String name, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRegular()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFormatSupported(MediaFormat format)",
    "returnType" : "boolean",
    "comment" : "\n         * Query whether codec supports a given {@link MediaFormat}.\n         *\n         * <p class=note>\n         * <strong>Note:</strong> On {@link android.os.Build.VERSION_CODES#LOLLIPOP},\n         * {@code format} must not contain a {@linkplain MediaFormat#KEY_FRAME_RATE\n         * frame rate}. Use\n         * <code class=prettyprint>format.setString(MediaFormat.KEY_FRAME_RATE, null)</code>\n         * to clear any existing frame rate setting in the format.\n         * <p>\n         *\n         * The following table summarizes the format keys considered by this method.\n         * This is especially important to consider when targeting a higher SDK version than the\n         * minimum SDK version, as this method will disregard some keys on devices below the target\n         * SDK version.\n         *\n         * <table style=\"width: 0%\">\n         *  <thead>\n         *   <tr>\n         *    <th rowspan=3>OS Version(s)</th>\n         *    <td colspan=3>{@code MediaFormat} keys considered for</th>\n         *   </tr><tr>\n         *    <th>Audio Codecs</th>\n         *    <th>Video Codecs</th>\n         *    <th>Encoders</th>\n         *   </tr>\n         *  </thead>\n         *  <tbody>\n         *   <tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td>\n         *    <td rowspan=3>{@link MediaFormat#KEY_MIME}<sup>*</sup>,<br>\n         *        {@link MediaFormat#KEY_SAMPLE_RATE},<br>\n         *        {@link MediaFormat#KEY_CHANNEL_COUNT},</td>\n         *    <td>{@link MediaFormat#KEY_MIME}<sup>*</sup>,<br>\n         *        {@link CodecCapabilities#FEATURE_AdaptivePlayback}<sup>D</sup>,<br>\n         *        {@link CodecCapabilities#FEATURE_SecurePlayback}<sup>D</sup>,<br>\n         *        {@link CodecCapabilities#FEATURE_TunneledPlayback}<sup>D</sup>,<br>\n         *        {@link MediaFormat#KEY_WIDTH},<br>\n         *        {@link MediaFormat#KEY_HEIGHT},<br>\n         *        <strong>no</strong> {@code KEY_FRAME_RATE}</td>\n         *    <td rowspan=10>as to the left, plus<br>\n         *        {@link MediaFormat#KEY_BITRATE_MODE},<br>\n         *        {@link MediaFormat#KEY_PROFILE}\n         *        (and/or {@link MediaFormat#KEY_AAC_PROFILE}<sup>~</sup>),<br>\n         *        <!-- {link MediaFormat#KEY_QUALITY},<br> -->\n         *        {@link MediaFormat#KEY_COMPLEXITY}\n         *        (and/or {@link MediaFormat#KEY_FLAC_COMPRESSION_LEVEL}<sup>~</sup>)</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td>\n         *    <td rowspan=2>as above, plus<br>\n         *        {@link MediaFormat#KEY_FRAME_RATE}</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#M}</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#N}</td>\n         *    <td rowspan=2>as above, plus<br>\n         *        {@link MediaFormat#KEY_PROFILE},<br>\n         *        <!-- {link MediaFormat#KEY_MAX_BIT_RATE},<br> -->\n         *        {@link MediaFormat#KEY_BIT_RATE}</td>\n         *    <td rowspan=2>as above, plus<br>\n         *        {@link MediaFormat#KEY_PROFILE},<br>\n         *        {@link MediaFormat#KEY_LEVEL}<sup>+</sup>,<br>\n         *        <!-- {link MediaFormat#KEY_MAX_BIT_RATE},<br> -->\n         *        {@link MediaFormat#KEY_BIT_RATE},<br>\n         *        {@link CodecCapabilities#FEATURE_IntraRefresh}<sup>E</sup></td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#N_MR1}</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#O}</td>\n         *    <td rowspan=3 colspan=2>as above, plus<br>\n         *        {@link CodecCapabilities#FEATURE_PartialFrame}<sup>D</sup></td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#O_MR1}</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#P}</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#Q}</td>\n         *    <td colspan=2>as above, plus<br>\n         *        {@link CodecCapabilities#FEATURE_FrameParsing}<sup>D</sup>,<br>\n         *        {@link CodecCapabilities#FEATURE_MultipleFrames},<br>\n         *        {@link CodecCapabilities#FEATURE_DynamicTimestamp}</td>\n         *   </tr><tr>\n         *    <td>{@link android.os.Build.VERSION_CODES#R}</td>\n         *    <td colspan=2>as above, plus<br>\n         *        {@link CodecCapabilities#FEATURE_LowLatency}<sup>D</sup></td>\n         *   </tr>\n         *   <tr>\n         *    <td colspan=4>\n         *     <p class=note><strong>Notes:</strong><br>\n         *      *: must be specified; otherwise, method returns {@code false}.<br>\n         *      +: method does not verify that the format parameters are supported\n         *      by the specified level.<br>\n         *      D: decoders only<br>\n         *      E: encoders only<br>\n         *      ~: if both keys are provided values must match\n         *    </td>\n         *   </tr>\n         *  </tbody>\n         * </table>\n         *\n         * @param format media format with optional feature directives.\n         * @throws IllegalArgumentException if format is not a valid media format.\n         * @return whether the codec capabilities support the given format\n         *         and feature requests.\n         ",
    "links" : [ "android.media.MediaFormat", "android.media.MediaFormat#KEY_SAMPLE_RATE", "android.media.MediaFormat#KEY_CHANNEL_COUNT", "android.media.MediaFormat#KEY_BIT_RATE", "android.media.MediaFormat#KEY_AAC_PROFILE", "#FEATURE_DynamicTimestamp", "android.media.MediaFormat#KEY_BITRATE_MODE", "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M", "#FEATURE_IntraRefresh", "android.media.MediaFormat#KEY_WIDTH", "android.media.MediaFormat#KEY_MIME", "#FEATURE_TunneledPlayback", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "android.media.MediaFormat#KEY_HEIGHT", "android.os.Build.VERSION_CODES#N_MR1", "android.os.Build.VERSION_CODES#LOLLIPOP", "#FEATURE_LowLatency", "#FEATURE_FrameParsing", "#FEATURE_PartialFrame", "android.os.Build.VERSION_CODES#O_MR1", "android.media.MediaFormat#KEY_PROFILE", "#FEATURE_AdaptivePlayback", "android.media.MediaFormat#KEY_FRAME_RATE", "android.media.MediaFormat#KEY_LEVEL", "android.os.Build.VERSION_CODES#P", "android.os.Build.VERSION_CODES#O", "#FEATURE_SecurePlayback", "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#Q", "#FEATURE_MultipleFrames", "android.media.MediaFormat#KEY_COMPLEXITY", "android.media.MediaFormat#KEY_FLAC_COMPRESSION_LEVEL" ]
  }, {
    "name" : "private static boolean supportsBitrate(Range<Integer> bitrateRange, MediaFormat format)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean supportsProfileLevel(int profile, Integer level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MediaFormat getDefaultFormat()",
    "returnType" : "MediaFormat",
    "comment" : "\n         * Returns a MediaFormat object with default values for configurations that have\n         * defaults.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getMimeType()",
    "returnType" : "String",
    "comment" : "\n         * Returns the mime type for which this codec-capability object was created.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxSupportedInstances()",
    "returnType" : "int",
    "comment" : "\n         * Returns the max number of the supported concurrent codec instances.\n         * <p>\n         * This is a hint for an upper bound. Applications should not expect to successfully\n         * operate more instances than the returned value, but the actual number of\n         * concurrently operable instances may be less as it depends on the available\n         * resources at time of use.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isAudio()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioCapabilities getAudioCapabilities()",
    "returnType" : "AudioCapabilities",
    "comment" : "\n         * Returns the audio capabilities or {@code null} if this is not an audio codec.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEncoder()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public EncoderCapabilities getEncoderCapabilities()",
    "returnType" : "EncoderCapabilities",
    "comment" : "\n         * Returns the encoding capabilities or {@code null} if this is not an encoder.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isVideo()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VideoCapabilities getVideoCapabilities()",
    "returnType" : "VideoCapabilities",
    "comment" : "\n         * Returns the video capabilities or {@code null} if this is not a video codec.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CodecCapabilities dup()",
    "returnType" : "CodecCapabilities",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static CodecCapabilities createFromProfileLevel(String mime, int profile, int level)",
    "returnType" : "CodecCapabilities",
    "comment" : "\n         * Retrieve the codec capabilities for a certain {@code mime type}, {@code\n         * profile} and {@code level}.  If the type, or profile-level combination\n         * is not understood by the framework, it returns null.\n         * <p class=note> In {@link android.os.Build.VERSION_CODES#M}, calling this\n         * method without calling any method of the {@link MediaCodecList} class beforehand\n         * results in a {@link NullPointerException}.</p>\n         ",
    "links" : [ "NullPointerException", "android.media.MediaCodecList", "android.os.Build.VERSION_CODES#M" ]
  } ],
  "variableNames" : [ "mMime", "mMaxSupportedInstances", "profileLevels", "COLOR_FormatMonochrome", "COLOR_Format8bitRGB332", "COLOR_Format12bitRGB444", "COLOR_Format16bitARGB4444", "COLOR_Format16bitARGB1555", "COLOR_Format16bitRGB565", "COLOR_Format16bitBGR565", "COLOR_Format18bitRGB666", "COLOR_Format18bitARGB1665", "COLOR_Format19bitARGB1666", "COLOR_Format24bitRGB888", "COLOR_Format24bitBGR888", "COLOR_Format24bitARGB1887", "COLOR_Format25bitARGB1888", "COLOR_Format32bitBGRA8888", "COLOR_Format32bitARGB8888", "COLOR_FormatYUV411Planar", "COLOR_FormatYUV411PackedPlanar", "COLOR_FormatYUV420Planar", "COLOR_FormatYUV420PackedPlanar", "COLOR_FormatYUV420SemiPlanar", "COLOR_FormatYUV422Planar", "COLOR_FormatYUV422PackedPlanar", "COLOR_FormatYUV422SemiPlanar", "COLOR_FormatYCbYCr", "COLOR_FormatYCrYCb", "COLOR_FormatCbYCrY", "COLOR_FormatCrYCbY", "COLOR_FormatYUV444Interleaved", "COLOR_FormatRawBayer8bit", "COLOR_FormatRawBayer10bit", "COLOR_FormatRawBayer8bitcompressed", "COLOR_FormatL2", "COLOR_FormatL4", "COLOR_FormatL8", "COLOR_FormatL16", "COLOR_FormatL24", "COLOR_FormatL32", "COLOR_FormatYUV420PackedSemiPlanar", "COLOR_FormatYUV422PackedSemiPlanar", "COLOR_Format18BitBGR666", "COLOR_Format24BitARGB6666", "COLOR_Format24BitABGR6666", "COLOR_TI_FormatYUV420PackedSemiPlanar", "COLOR_FormatSurface", "COLOR_Format32bitABGR8888", "COLOR_FormatYUV420Flexible", "COLOR_FormatYUV422Flexible", "COLOR_FormatYUV444Flexible", "COLOR_FormatRGBFlexible", "COLOR_FormatRGBAFlexible", "COLOR_QCOM_FormatYUV420SemiPlanar", "colorFormats", "mFlagsSupported", "mFlagsRequired", "mFlagsVerified", "FEATURE_AdaptivePlayback", "FEATURE_SecurePlayback", "FEATURE_TunneledPlayback", "FEATURE_DynamicTimestamp", "FEATURE_FrameParsing", "FEATURE_MultipleFrames", "FEATURE_PartialFrame", "FEATURE_IntraRefresh", "FEATURE_LowLatency", "decoderFeatures", "encoderFeatures", "mError", "TAG", "mAudioCaps", "mVideoCaps", "mEncoderCaps", "mDefaultFormat", "mCapabilitiesInfo" ],
  "methodNames" : [ "public final boolean isFeatureSupported(String name)", "public final boolean isFeatureRequired(String name)", "public String[] validFeatures()", "private Feature[] getValidFeatures()", "private boolean checkFeature(String name, int flags)", "public boolean isRegular()", "public final boolean isFormatSupported(MediaFormat format)", "private static boolean supportsBitrate(Range<Integer> bitrateRange, MediaFormat format)", "private boolean supportsProfileLevel(int profile, Integer level)", "public MediaFormat getDefaultFormat()", "public String getMimeType()", "public int getMaxSupportedInstances()", "private boolean isAudio()", "public AudioCapabilities getAudioCapabilities()", "private boolean isEncoder()", "public EncoderCapabilities getEncoderCapabilities()", "private boolean isVideo()", "public VideoCapabilities getVideoCapabilities()", "public CodecCapabilities dup()", "public static CodecCapabilities createFromProfileLevel(String mime, int profile, int level)" ]
}