{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/KeyValueListParser.java",
  "packageName" : "android.util",
  "className" : "KeyValueListParser",
  "comment" : "\n * Parses a list of key=value pairs, separated by some delimiter, and puts the results in\n * an internal Map. Values can be then queried by key, or if not found, a default value\n * can be used.\n * @hide\n ",
  "variables" : [ {
    "name" : "mValues",
    "type" : "ArrayMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitter",
    "type" : "TextUtils.StringSplitter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setString(String str) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Resets the parser with a new string to parse. The string is expected to be in the following\n     * format:\n     * <pre>key1=value,key2=value,key3=value</pre>\n     *\n     * where the delimiter is a comma.\n     *\n     * @param str the string to parse.\n     * @throws IllegalArgumentException if the string is malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(String key, int def)",
    "returnType" : "int",
    "comment" : "\n     * Get the value for key as an int.\n     * @param key The key to lookup.\n     * @param def The value to return if the key was not found, or the value was not a long.\n     * @return the int value associated with the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLong(String key, long def)",
    "returnType" : "long",
    "comment" : "\n     * Get the value for key as a long.\n     * @param key The key to lookup.\n     * @param def The value to return if the key was not found, or the value was not a long.\n     * @return the long value associated with the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(String key, float def)",
    "returnType" : "float",
    "comment" : "\n     * Get the value for key as a float.\n     * @param key The key to lookup.\n     * @param def The value to return if the key was not found, or the value was not a float.\n     * @return the float value associated with the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(String key, String def)",
    "returnType" : "String",
    "comment" : "\n     * Get the value for key as a string.\n     * @param key The key to lookup.\n     * @param def The value to return if the key was not found.\n     * @return the string value associated with the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(String key, boolean def)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the value for key as a boolean.\n     * @param key The key to lookup.\n     * @param def The value to return if the key was not found.\n     * @return the string value associated with the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getIntArray(String key, int[] def)",
    "returnType" : "int[]",
    "comment" : "\n     * Get the value for key as an integer array.\n     *\n     * The value should be encoded as \"0:1:2:3:4\"\n     *\n     * @param key The key to lookup.\n     * @param def The value to return if the key was not found.\n     * @return the int[] value associated with the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * @return the number of keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String keyAt(int index)",
    "returnType" : "String",
    "comment" : "\n     * @return the key at {@code index}. Use with {@link #size()} to enumerate all key-value pairs.\n     ",
    "links" : [ "#size()" ]
  }, {
    "name" : "public long getDurationMillis(String key, long def)",
    "returnType" : "long",
    "comment" : "\n     * {@hide}\n     * Parse a duration in millis based on java.time.Duration or just a number (millis)\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mValues", "mSplitter" ],
  "methodNames" : [ "public void setString(String str) throws IllegalArgumentException", "public int getInt(String key, int def)", "public long getLong(String key, long def)", "public float getFloat(String key, float def)", "public String getString(String key, String def)", "public boolean getBoolean(String key, boolean def)", "public int[] getIntArray(String key, int[] def)", "public int size()", "public String keyAt(int index)", "public long getDurationMillis(String key, long def)" ]
}