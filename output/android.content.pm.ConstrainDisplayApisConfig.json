{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/ConstrainDisplayApisConfig.java",
  "packageName" : "android.content.pm",
  "className" : "ConstrainDisplayApisConfig",
  "comment" : "\n * Class for processing flags in the Device Config namespace 'constrain_display_apis'.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_NEVER_CONSTRAIN_DISPLAY_APIS",
    "type" : "String",
    "comment" : "\n     * A string flag whose value holds a comma separated list of package entries in the format\n     * '<package-name>:<min-version-code>?:<max-version-code>?' for which Display APIs should never\n     * be constrained.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_NEVER_CONSTRAIN_DISPLAY_APIS_ALL_PACKAGES",
    "type" : "String",
    "comment" : "\n     * A boolean flag indicating whether Display APIs should never be constrained for all\n     * packages. If true, {@link #FLAG_NEVER_CONSTRAIN_DISPLAY_APIS} is ignored.\n     ",
    "links" : [ "#FLAG_NEVER_CONSTRAIN_DISPLAY_APIS" ]
  }, {
    "name" : "FLAG_ALWAYS_CONSTRAIN_DISPLAY_APIS",
    "type" : "String",
    "comment" : "\n     * A string flag whose value holds a comma separated list of package entries in the format\n     * '<package-name>:<min-version-code>?:<max-version-code>?' for which Display APIs should\n     * always be constrained.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNeverConstrainDisplayApisAllPackages",
    "type" : "boolean",
    "comment" : "\n     * Indicates that display APIs should never be constrained to the activity window bounds for all\n     * packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNeverConstrainConfigMap",
    "type" : "ArrayMap<String, Pair<Long, Long>>",
    "comment" : "\n     * Indicates that display APIs should never be constrained to the activity window bounds for\n     * a set of defined packages. Map keys are package names, and entries are a\n     * 'Pair(<min-version-code>, <max-version-code>)'.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAlwaysConstrainConfigMap",
    "type" : "ArrayMap<String, Pair<Long, Long>>",
    "comment" : "\n     * Indicates that display APIs should always be constrained to the activity window bounds for\n     * a set of defined packages. Map keys are package names, and entries are a\n     * 'Pair(<min-version-code>, <max-version-code>)'.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean getNeverConstrainDisplayApis(ApplicationInfo applicationInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if either the flag 'never_constrain_display_apis_all_packages' is true or the\n     * flag 'never_constrain_display_apis' contains a package entry that matches the given {@code\n     * applicationInfo}.\n     *\n     * @param applicationInfo Information about the application/package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAlwaysConstrainDisplayApis(ApplicationInfo applicationInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the flag 'always_constrain_display_apis' contains a package entry that\n     * matches the given {@code applicationInfo}.\n     *\n     * @param applicationInfo Information about the application/package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateCache()",
    "returnType" : "void",
    "comment" : "\n     * Updates {@link #mNeverConstrainDisplayApisAllPackages}, {@link #mNeverConstrainConfigMap},\n     * and {@link #mAlwaysConstrainConfigMap} from the {@link DeviceConfig}.\n     ",
    "links" : [ "#mNeverConstrainDisplayApisAllPackages", "#mNeverConstrainConfigMap", "#mAlwaysConstrainConfigMap", "android.provider.DeviceConfig" ]
  }, {
    "name" : "private static ArrayMap<String, Pair<Long, Long>> buildConfigMap(String configStr)",
    "returnType" : "ArrayMap<String, Pair<Long, Long>>",
    "comment" : "\n     * Processes the configuration string into a map of version codes, for the given\n     * configuration to be applied to the specified packages. If the given package\n     * entry string is invalid, then the map will not contain an entry for the package.\n     *\n     * @param configStr A configuration string expected to be in the format of a list of package\n     *                  entries separated by ','. A package entry expected to be in the format\n     *                  '<package-name>:<min-version-code>?:<max-version-code>?'.\n     * @return a map of configuration entries, where each key is a package name. Each value is\n     * a pair of version codes, in the format 'Pair(<min-version-code>, <max-version-code>)'.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean flagHasMatchingPackageEntry(Map<String, Pair<Long, Long>> configMap, ApplicationInfo applicationInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the flag with the given {@code flagName} contains a package entry that\n     * matches the given {@code applicationInfo}.\n     *\n     * @param configMap the map representing the current configuration value to examine\n     * @param applicationInfo Information about the application/package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean matchesApplicationInfo(Pair<Long, Long> minMaxVersionCodes, ApplicationInfo applicationInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Parses the given {@code minMaxVersionCodes} and returns true if {@code\n     * applicationInfo.longVersionCode} is within the version range in the pair.\n     * Returns false otherwise.\n     *\n     * @param minMaxVersionCodes A pair expected to be in the format\n     *                        'Pair(<min-version-code>, <max-version-code>)'.\n     * @param applicationInfo Information about the application/package.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean getNeverConstrainDisplayApis(ApplicationInfo applicationInfo)", "public boolean getAlwaysConstrainDisplayApis(ApplicationInfo applicationInfo)", "private void updateCache()", "private static ArrayMap<String, Pair<Long, Long>> buildConfigMap(String configStr)", "private static boolean flagHasMatchingPackageEntry(Map<String, Pair<Long, Long>> configMap, ApplicationInfo applicationInfo)", "private static boolean matchesApplicationInfo(Pair<Long, Long> minMaxVersionCodes, ApplicationInfo applicationInfo)" ],
  "variableNames" : [ "TAG", "FLAG_NEVER_CONSTRAIN_DISPLAY_APIS", "FLAG_NEVER_CONSTRAIN_DISPLAY_APIS_ALL_PACKAGES", "FLAG_ALWAYS_CONSTRAIN_DISPLAY_APIS", "mNeverConstrainDisplayApisAllPackages", "mNeverConstrainConfigMap", "mAlwaysConstrainConfigMap" ]
}