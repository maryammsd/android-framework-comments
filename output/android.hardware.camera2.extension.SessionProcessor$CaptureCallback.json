{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/extension/SessionProcessor.java",
  "packageName" : "android.hardware.camera2.extension",
  "className" : "CaptureCallback",
  "comment" : "\n     * Callback for notifying the status of {@link\n     * #startMultiFrameCapture} and {@link #startRepeating}.\n     * @hide\n     ",
  "links" : [ "#startMultiFrameCapture", "#startRepeating" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onCaptureStarted(int captureSequenceId, long timestamp)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the camera device has started\n         * capturing the initial input\n         * image.\n         *\n         * For a multi-frame capture, the method is called when the\n         * CameraCaptureSession.CaptureCallback onCaptureStarted of first\n         * frame is called and its timestamp is directly forwarded to\n         * timestamp parameter of this method.\n         *\n         * @param captureSequenceId id of the current capture sequence\n         * @param timestamp         the timestamp at start of capture for\n         *                          repeating request or the timestamp at\n         *                          start of capture of the\n         *                          first frame in a multi-frame capture,\n         *                          in nanoseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onCaptureProcessStarted(int captureSequenceId)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when an image (or images in case of\n         * multi-frame capture) is captured and device-specific extension\n         * processing is triggered.\n         *\n         * @param captureSequenceId id of the current capture sequence\n         ",
    "links" : [ ]
  }, {
    "name" : " void onCaptureFailed(int captureSequenceId, @CaptureFailure.FailureReason int failure)",
    "returnType" : "void",
    "comment" : "\n         * This method is called instead of\n         * {@link #onCaptureProcessStarted} when the camera device failed\n         * to produce the required input for the device-specific\n         * extension. The callback allows clients to be notified\n         * about failure reason.\n         *\n         * @param captureSequenceId id of the current capture sequence\n         * @param failure           The capture failure reason\n         ",
    "links" : [ "#onCaptureProcessStarted" ]
  }, {
    "name" : " void onCaptureSequenceCompleted(int captureSequenceId)",
    "returnType" : "void",
    "comment" : "\n         * This method is called independently of the others in the\n         * CaptureCallback, when a capture sequence finishes.\n         *\n         * <p>In total, there will be at least one\n         * {@link #onCaptureProcessStarted}/{@link #onCaptureFailed}\n         * invocation before this callback is triggered. If the capture\n         * sequence is aborted before any requests have begun processing,\n         * {@link #onCaptureSequenceAborted} is invoked instead.</p>\n         *\n         * @param captureSequenceId id of the current capture sequence\n         ",
    "links" : [ "#onCaptureSequenceAborted", "#onCaptureProcessStarted", "#onCaptureFailed" ]
  }, {
    "name" : " void onCaptureSequenceAborted(int captureSequenceId)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when a capture sequence aborts.\n         *\n         * @param captureSequenceId id of the current capture sequence\n         ",
    "links" : [ ]
  }, {
    "name" : " void onCaptureCompleted(long shutterTimestamp, int requestId, @NonNull Map<CaptureResult.Key, Object> results)",
    "returnType" : "void",
    "comment" : "\n         * Capture result callback that needs to be called when the\n         * process capture results are ready as part of frame\n         * post-processing.\n         *\n         * This callback will fire after {@link #onCaptureStarted}, {@link\n         * #onCaptureProcessStarted} and before {@link\n         * #onCaptureSequenceCompleted}. The callback is not expected to\n         * fire in case of capture failure  {@link #onCaptureFailed} or\n         * capture abort {@link #onCaptureSequenceAborted}.\n         *\n         * @param shutterTimestamp The timestamp at the start\n         *                         of capture. The same timestamp value\n         *                         passed to {@link #onCaptureStarted}.\n         * @param requestId  the capture request id that generated the\n         *                   capture results. This is the return value of\n         *                   either {@link #startRepeating} or {@link\n         *                   #startMultiFrameCapture}.\n         * @param results   Key value map of the supported capture results.\n         *                  Do note that if results 'android.jpeg.quality' and\n         *                  android.jpeg.orientation' are present in the\n         *                  process capture input results, then the values\n         *                  must also be passed as part of this callback.\n         *                  The camera framework guarantees that those two\n         *                  settings and results are always supported and\n         *                  applied by the corresponding framework.\n         ",
    "links" : [ "#onCaptureStarted", "#onCaptureSequenceCompleted", "#onCaptureSequenceAborted", "#startMultiFrameCapture", "#startRepeating", "#onCaptureProcessStarted", "#onCaptureFailed" ]
  } ],
  "methodNames" : [ " void onCaptureStarted(int captureSequenceId, long timestamp)", " void onCaptureProcessStarted(int captureSequenceId)", " void onCaptureFailed(int captureSequenceId, @CaptureFailure.FailureReason int failure)", " void onCaptureSequenceCompleted(int captureSequenceId)", " void onCaptureSequenceAborted(int captureSequenceId)", " void onCaptureCompleted(long shutterTimestamp, int requestId, @NonNull Map<CaptureResult.Key, Object> results)" ],
  "variableNames" : [ ]
}