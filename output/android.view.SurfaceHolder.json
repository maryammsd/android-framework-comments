{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceHolder.java",
  "packageName" : "android.view",
  "className" : "SurfaceHolder",
  "comment" : "\n * Abstract interface to someone holding a display surface.  Allows you to\n * control the surface size and format, edit the pixels in the surface, and\n * monitor changes to the surface.  This interface is typically available\n * through the {@link SurfaceView} class.\n *\n * <p>When using this interface from a thread other than the one running\n * its {@link SurfaceView}, you will want to carefully read the\n * methods\n * {@link #lockCanvas} and {@link Callback#surfaceCreated Callback.surfaceCreated()}.\n ",
  "links" : [ "android.view.SurfaceView", "#surfaceCreated", "#lockCanvas" ],
  "variables" : [ {
    "name" : "SURFACE_TYPE_NORMAL",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_TYPE_HARDWARE",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_TYPE_GPU",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_TYPE_PUSH_BUFFERS",
    "type" : "int",
    "comment" : " @deprecated this is ignored, this value is set automatically when needed. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Add a Callback interface for this holder.  There can several Callback\n     * interfaces associated with a holder.\n     *\n     * @param callback The new Callback interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously added Callback interface from this holder.\n     *\n     * @param callback The Callback interface to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCreating()",
    "returnType" : "boolean",
    "comment" : "\n     * Use this method to find out if the surface is in the process of being\n     * created from Callback methods. This is intended to be used with\n     * {@link Callback#surfaceChanged}.\n     *\n     * @return true if the surface is in the process of being created.\n     ",
    "links" : [ "#surfaceChanged" ]
  }, {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the surface's type.\n     *\n     * @deprecated this is ignored, this value is set automatically when needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFixedSize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Make the surface a fixed size.  It will never change from this size.\n     * When working with a {@link SurfaceView}, this must be called from the\n     * same thread running the SurfaceView's window.\n     *\n     * @param width The surface's width.\n     * @param height The surface's height.\n     ",
    "links" : [ "android.view.SurfaceView" ]
  }, {
    "name" : "public void setSizeFromLayout()",
    "returnType" : "void",
    "comment" : "\n     * Allow the surface to resized based on layout of its container (this is\n     * the default).  When this is enabled, you should monitor\n     * {@link Callback#surfaceChanged} for changes to the size of the surface.\n     * When working with a {@link SurfaceView}, this must be called from the\n     * same thread running the SurfaceView's window.\n     ",
    "links" : [ "android.view.SurfaceView", "#surfaceChanged" ]
  }, {
    "name" : "public void setFormat(int format)",
    "returnType" : "void",
    "comment" : "\n     * Set the desired PixelFormat of the surface.  The default is OPAQUE.\n     * When working with a {@link SurfaceView}, this must be called from the\n     * same thread running the SurfaceView's window.\n     *\n     * @param format A constant from PixelFormat.\n     *\n     * @see android.graphics.PixelFormat\n     ",
    "links" : [ "android.view.SurfaceView" ]
  }, {
    "name" : "public void setKeepScreenOn(boolean screenOn)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable option to keep the screen turned on while this\n     * surface is displayed.  The default is false, allowing it to turn off.\n     * This is safe to call from any thread.\n     *\n     * @param screenOn Set to true to force the screen to stay on, false\n     * to allow it to turn off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Canvas lockCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n     * Start editing the pixels in the surface.  The returned Canvas can be used\n     * to draw into the surface's bitmap.  A null is returned if the surface has\n     * not been created or otherwise cannot be edited.  You will usually need\n     * to implement {@link Callback#surfaceCreated Callback.surfaceCreated}\n     * to find out when the Surface is available for use.\n     *\n     * <p>The content of the Surface is never preserved between unlockCanvas() and\n     * lockCanvas(), for this reason, every pixel within the Surface area\n     * must be written. The only exception to this rule is when a dirty\n     * rectangle is specified, in which case, non-dirty pixels will be\n     * preserved.\n     *\n     * <p>If you call this repeatedly when the Surface is not ready (before\n     * {@link Callback#surfaceCreated Callback.surfaceCreated} or after\n     * {@link Callback#surfaceDestroyed Callback.surfaceDestroyed}), your calls\n     * will be throttled to a slow rate in order to avoid consuming CPU.\n     *\n     * <p>If null is not returned, this function internally holds a lock until\n     * the corresponding {@link #unlockCanvasAndPost} call, preventing\n     * {@link SurfaceView} from creating, destroying, or modifying the surface\n     * while it is being drawn.  This can be more convenient than accessing\n     * the Surface directly, as you do not need to do special synchronization\n     * with a drawing thread in {@link Callback#surfaceDestroyed\n     * Callback.surfaceDestroyed}.\n     *\n     * @return Canvas Use to draw into the surface.\n     ",
    "links" : [ "android.view.SurfaceView", "#surfaceDestroyed", "#surfaceCreated", "#surfaceDestroyedCallback.surfaceDestroyed", "#unlockCanvasAndPost" ]
  }, {
    "name" : "public Canvas lockCanvas(Rect dirty)",
    "returnType" : "Canvas",
    "comment" : "\n     * Just like {@link #lockCanvas()} but allows specification of a dirty rectangle.\n     * Every\n     * pixel within that rectangle must be written; however pixels outside\n     * the dirty rectangle will be preserved by the next call to lockCanvas().\n     *\n     * @see android.view.SurfaceHolder#lockCanvas\n     *\n     * @param dirty Area of the Surface that will be modified.\n     * @return Canvas Use to draw into the surface.\n     ",
    "links" : [ "#lockCanvas()" ]
  }, {
    "name" : " Canvas lockHardwareCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n     * <p>Just like {@link #lockCanvas()} but the returned canvas is hardware-accelerated.\n     *\n     * <p>See the <a href=\"{@docRoot}guide/topics/graphics/hardware-accel.html#unsupported\">\n     * unsupported drawing operations</a> for a list of what is and isn't\n     * supported in a hardware-accelerated canvas.\n     *\n     * @return Canvas Use to draw into the surface.\n     * @throws IllegalStateException If the canvas cannot be locked.\n     ",
    "links" : [ "#lockCanvas()" ]
  }, {
    "name" : "public void unlockCanvasAndPost(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Finish editing pixels in the surface.  After this call, the surface's\n     * current pixels will be shown on the screen, but its content is lost,\n     * in particular there is no guarantee that the content of the Surface\n     * will remain unchanged when lockCanvas() is called again.\n     *\n     * @see #lockCanvas()\n     *\n     * @param canvas The Canvas previously returned by lockCanvas().\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getSurfaceFrame()",
    "returnType" : "Rect",
    "comment" : "\n     * Retrieve the current size of the surface.  Note: do not modify the\n     * returned Rect.  This is only safe to call from the thread of\n     * {@link SurfaceView}'s window, or while inside of\n     * {@link #lockCanvas()}.\n     *\n     * @return Rect The surface's dimensions.  The left and top are always 0.\n     ",
    "links" : [ "android.view.SurfaceView", "#lockCanvas()" ]
  }, {
    "name" : "public Surface getSurface()",
    "returnType" : "Surface",
    "comment" : "\n     * Direct access to the surface object.  The Surface may not always be\n     * available -- for example when using a {@link SurfaceView} the holder's\n     * Surface is not created until the view has been attached to the window\n     * manager and performed a layout in order to determine the dimensions\n     * and screen position of the Surface.    You will thus usually need\n     * to implement {@link Callback#surfaceCreated Callback.surfaceCreated}\n     * to find out when the Surface is available for use.\n     *\n     * <p>Note that if you directly access the Surface from another thread,\n     * it is critical that you correctly implement\n     * {@link Callback#surfaceCreated Callback.surfaceCreated} and\n     * {@link Callback#surfaceDestroyed Callback.surfaceDestroyed} to ensure\n     * that thread only accesses the Surface while it is valid, and that the\n     * Surface does not get destroyed while the thread is using it.\n     *\n     * <p>This method is intended to be used by frameworks which often need\n     * direct access to the Surface object (usually to pass it to native code).\n     *\n     * @return Surface The surface.\n     ",
    "links" : [ "android.view.SurfaceView", "#surfaceDestroyed", "#surfaceCreated" ]
  } ],
  "methodNames" : [ "public void addCallback(Callback callback)", "public void removeCallback(Callback callback)", "public boolean isCreating()", "public void setType(int type)", "public void setFixedSize(int width, int height)", "public void setSizeFromLayout()", "public void setFormat(int format)", "public void setKeepScreenOn(boolean screenOn)", "public Canvas lockCanvas()", "public Canvas lockCanvas(Rect dirty)", " Canvas lockHardwareCanvas()", "public void unlockCanvasAndPost(Canvas canvas)", "public Rect getSurfaceFrame()", "public Surface getSurface()" ],
  "variableNames" : [ "SURFACE_TYPE_NORMAL", "SURFACE_TYPE_HARDWARE", "SURFACE_TYPE_GPU", "SURFACE_TYPE_PUSH_BUFFERS" ]
}