{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NumberFormat.java",
  "packageName" : "android.icu.text",
  "className" : "NumberFormat",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.text.NumberFormat}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p>\n * <strong>IMPORTANT:</strong> New users are strongly encouraged to see if\n * {@link NumberFormatter} fits their use case.  Although not deprecated, this\n * class, NumberFormat, is only provided for java.text.NumberFormat compatibility.\n * <hr>\n *\n * <code>NumberFormat</code> is the abstract base class for all number\n * formats. This class provides the interface for formatting and parsing\n * numbers. <code>NumberFormat</code> also provides methods for determining\n * which locales have number formats, and what their names are.\n *\n * <code>NumberFormat</code> helps you to format and parse numbers for any locale.\n * Your code can be completely independent of the locale conventions for\n * decimal points, thousands-separators, or even the particular decimal\n * digits used, or whether the number format is even decimal.\n *\n * <p>\n * To format a number for the current Locale, use one of the factory\n * class methods:\n * <blockquote>\n * <pre>\n *  myString = NumberFormat.getInstance().format(myNumber);\n * </pre>\n * </blockquote>\n * If you are formatting multiple numbers, it is\n * more efficient to get the format and use it multiple times so that\n * the system doesn't have to fetch the information about the local\n * language and country conventions multiple times.\n * <blockquote>\n * <pre>\n * NumberFormat nf = NumberFormat.getInstance();\n * for (int i = 0; i &lt; a.length; ++i) {\n *     output.println(nf.format(myNumber[i]) + \"; \");\n * }\n * </pre>\n * </blockquote>\n * To format a number for a different Locale, specify it in the\n * call to <code>getInstance</code>.\n * <blockquote>\n * <pre>\n * NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);\n * </pre>\n * </blockquote>\n * You can also use a <code>NumberFormat</code> to parse numbers:\n * <blockquote>\n * <pre>\n * myNumber = nf.parse(myString);\n * </pre>\n * </blockquote>\n * Use <code>getInstance</code> or <code>getNumberInstance</code> to get the\n * normal number format. Use <code>getIntegerInstance</code> to get an\n * integer number format. Use <code>getCurrencyInstance</code> to get the\n * currency number format. And use <code>getPercentInstance</code> to get a\n * format for displaying percentages. Some factory methods are found within\n * subclasses of NumberFormat. With this format, a fraction like\n * 0.53 is displayed as 53%.\n *\n * <p>\n * Starting from ICU 4.2, you can use getInstance() by passing in a 'style'\n * as parameter to get the correct instance.\n * For example,\n * use getInstance(...NUMBERSTYLE) to get the normal number format,\n * getInstance(...PERCENTSTYLE) to get a format for displaying percentage,\n * getInstance(...SCIENTIFICSTYLE) to get a format for displaying scientific number,\n * getInstance(...INTEGERSTYLE) to get an integer number format,\n * getInstance(...CURRENCYSTYLE) to get the currency number format,\n * in which the currency is represented by its symbol, for example, \"$3.00\".\n * getInstance(...ISOCURRENCYSTYLE)  to get the currency number format,\n * in which the currency is represented by its ISO code, for example \"USD3.00\".\n * getInstance(...PLURALCURRENCYSTYLE) to get the currency number format,\n * in which the currency is represented by its full name in plural format,\n * for example, \"3.00 US dollars\" or \"1.00 US dollar\".\n *\n *\n * <p>\n * You can also control the display of numbers with such methods as\n * <code>setMinimumFractionDigits</code>.\n * If you want even more control over the format or parsing,\n * or want to give your users more control,\n * you can try casting the <code>NumberFormat</code> you get from the factory methods\n * to a <code>DecimalFormat</code>. This will work for the vast majority\n * of locales; just remember to put it in a <code>try</code> block in case you\n * encounter an unusual one.\n *\n * <p>\n * NumberFormat is designed such that some controls\n * work for formatting and others work for parsing.  The following is\n * the detailed description for each these control methods,\n * <p>\n * setParseIntegerOnly : only affects parsing, e.g.\n * if true,  \"3456.78\" -&gt; 3456 (and leaves the parse position just after '6')\n * if false, \"3456.78\" -&gt; 3456.78 (and leaves the parse position just after '8')\n * This is independent of formatting.  If you want to not show a decimal point\n * where there might be no digits after the decimal point, use\n * setDecimalSeparatorAlwaysShown on DecimalFormat.\n * <p>\n * You can also use forms of the <code>parse</code> and <code>format</code>\n * methods with <code>ParsePosition</code> and <code>FieldPosition</code> to\n * allow you to:\n * <ul>\n * <li> progressively parse through pieces of a string\n * <li> align the decimal point and other areas\n * </ul>\n * For example, you can align numbers in two ways:\n * <ol>\n * <li> If you are using a monospaced font with spacing for alignment,\n *      you can pass the <code>FieldPosition</code> in your format call, with\n *      <code>field</code> = <code>INTEGER_FIELD</code>. On output,\n *      <code>getEndIndex</code> will be set to the offset between the\n *      last character of the integer and the decimal. Add\n *      (desiredSpaceCount - getEndIndex) spaces at the front of the string.\n *\n * <li> If you are using proportional fonts,\n *      instead of padding with spaces, measure the width\n *      of the string in pixels from the start to <code>getEndIndex</code>.\n *      Then move the pen by\n *      (desiredPixelWidth - widthToAlignmentPoint) before drawing the text.\n *      It also works where there is no decimal, but possibly additional\n *      characters at the end, e.g., with parentheses in negative\n *      numbers: \"(12)\" for -12.\n * </ol>\n *\n * <h3>Synchronization</h3>\n * <p>\n * Number formats are generally not synchronized. It is recommended to create\n * separate format instances for each thread. If multiple threads access a format\n * concurrently, it must be synchronized externally.\n *\n * <h4>DecimalFormat</h4>\n * <p>DecimalFormat is the concrete implementation of NumberFormat, and the\n * NumberFormat API is essentially an abstraction from DecimalFormat's API.\n * Refer to DecimalFormat for more information about this API.</p>\n *\n * see          DecimalFormat\n * see          java.text.ChoiceFormat\n * @author       Mark Davis\n * @author       Helena Shih\n * @author       Alan Liu\n ",
  "links" : [ "java.text.NumberFormat", "android.icu.number.NumberFormatter" ],
  "variables" : [ {
    "name" : "NUMBERSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify normal number style of format.\n     ",
    "links" : [ ]
  }, {
    "name" : "CURRENCYSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify general currency style of format. Defaults to\n     * STANDARDCURRENCYSTYLE, using currency symbol, for example \"$3.00\", with\n     * non-accounting style for negative values (e.g. minus sign).\n     * The specific style may be specified using the -cf- locale key.\n     ",
    "links" : [ ]
  }, {
    "name" : "PERCENTSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify a style of format to display percent.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCIENTIFICSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify a style of format to display scientific number.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTEGERSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify a integer number style format.\n     ",
    "links" : [ ]
  }, {
    "name" : "ISOCURRENCYSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify currency style of format which uses currency\n     * ISO code to represent currency, for example: \"USD3.00\".\n     ",
    "links" : [ ]
  }, {
    "name" : "PLURALCURRENCYSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify currency style of format which uses currency\n     * long name with plural format to represent currency, for example,\n     * \"3.00 US Dollars\".\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCOUNTINGCURRENCYSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify currency style of format which uses currency symbol\n     * to represent currency for accounting, for example: \"($3.00), instead of\n     * \"-$3.00\" ({@link #CURRENCYSTYLE}).\n     * Overrides any style specified using -cf- key in locale.\n     ",
    "links" : [ "#CURRENCYSTYLE" ]
  }, {
    "name" : "CASHCURRENCYSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify currency cash style of format which uses currency\n     * ISO code to represent currency, for example: \"NT$3\" instead of \"NT$3.23\".\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARDCURRENCYSTYLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant to specify currency style of format which uses currency symbol\n     * to represent currency, for example \"$3.00\", using non-accounting style for\n     * negative values (e.g. minus sign).\n     * Overrides any style specified using -cf- key in locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTEGER_FIELD",
    "type" : "int",
    "comment" : "\n     * Field constant used to construct a FieldPosition object. Signifies that\n     * the position of the integer part of a formatted number should be returned.\n     * @see java.text.FieldPosition\n     ",
    "links" : [ ]
  }, {
    "name" : "FRACTION_FIELD",
    "type" : "int",
    "comment" : "\n     * Field constant used to construct a FieldPosition object. Signifies that\n     * the position of the fraction part of a formatted number should be returned.\n     * @see java.text.FieldPosition\n     ",
    "links" : [ ]
  }, {
    "name" : "shim",
    "type" : "NumberFormatShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "doubleCurrencySign",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "doubleCurrencyStr",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupingUsed",
    "type" : "boolean",
    "comment" : "\n     * True if the the grouping (i.e. thousands) separator is used when\n     * formatting and parsing numbers.\n     *\n     * @serial\n     * @see #isGroupingUsed\n     ",
    "links" : [ ]
  }, {
    "name" : "maxIntegerDigits",
    "type" : "byte",
    "comment" : "\n     * The maximum number of digits allowed in the integer portion of a\n     * number.  <code>maxIntegerDigits</code> must be greater than or equal to\n     * <code>minIntegerDigits</code>.\n     * <p>\n     * <strong>Note:</strong> This field exists only for serialization\n     * compatibility with JDK 1.1.  In JDK 1.2 and higher, the new\n     * <code>int</code> field <code>maximumIntegerDigits</code> is used instead.\n     * When writing to a stream, <code>maxIntegerDigits</code> is set to\n     * <code>maximumIntegerDigits</code> or <code>Byte.MAX_VALUE</code>,\n     * whichever is smaller.  When reading from a stream, this field is used\n     * only if <code>serialVersionOnStream</code> is less than 1.\n     *\n     * @serial\n     * @see #getMaximumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "minIntegerDigits",
    "type" : "byte",
    "comment" : "\n     * The minimum number of digits allowed in the integer portion of a\n     * number.  <code>minimumIntegerDigits</code> must be less than or equal to\n     * <code>maximumIntegerDigits</code>.\n     * <p>\n     * <strong>Note:</strong> This field exists only for serialization\n     * compatibility with JDK 1.1.  In JDK 1.2 and higher, the new\n     * <code>int</code> field <code>minimumIntegerDigits</code> is used instead.\n     * When writing to a stream, <code>minIntegerDigits</code> is set to\n     * <code>minimumIntegerDigits</code> or <code>Byte.MAX_VALUE</code>,\n     * whichever is smaller.  When reading from a stream, this field is used\n     * only if <code>serialVersionOnStream</code> is less than 1.\n     *\n     * @serial\n     * @see #getMinimumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "maxFractionDigits",
    "type" : "byte",
    "comment" : " invariant, >= minFractionDigits",
    "links" : [ ]
  }, {
    "name" : "minFractionDigits",
    "type" : "byte",
    "comment" : "\n     * The minimum number of digits allowed in the fractional portion of a\n     * number.  <code>minimumFractionDigits</code> must be less than or equal to\n     * <code>maximumFractionDigits</code>.\n     * <p>\n     * <strong>Note:</strong> This field exists only for serialization\n     * compatibility with JDK 1.1.  In JDK 1.2 and higher, the new\n     * <code>int</code> field <code>minimumFractionDigits</code> is used instead.\n     * When writing to a stream, <code>minFractionDigits</code> is set to\n     * <code>minimumFractionDigits</code> or <code>Byte.MAX_VALUE</code>,\n     * whichever is smaller.  When reading from a stream, this field is used\n     * only if <code>serialVersionOnStream</code> is less than 1.\n     *\n     * @serial\n     * @see #getMinimumFractionDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "parseIntegerOnly",
    "type" : "boolean",
    "comment" : "\n     * True if this format will parse numbers as integers only.\n     *\n     * @serial\n     * @see #isParseIntegerOnly\n     ",
    "links" : [ ]
  }, {
    "name" : "maximumIntegerDigits",
    "type" : "int",
    "comment" : "\n     * The maximum number of digits allowed in the integer portion of a\n     * number.  <code>maximumIntegerDigits</code> must be greater than or equal to\n     * <code>minimumIntegerDigits</code>.\n     *\n     * @serial\n     * @see #getMaximumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "minimumIntegerDigits",
    "type" : "int",
    "comment" : "\n     * The minimum number of digits allowed in the integer portion of a\n     * number.  <code>minimumIntegerDigits</code> must be less than or equal to\n     * <code>maximumIntegerDigits</code>.\n     *\n     * @serial\n     * @see #getMinimumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "maximumFractionDigits",
    "type" : "int",
    "comment" : " invariant, >= minFractionDigits",
    "links" : [ ]
  }, {
    "name" : "minimumFractionDigits",
    "type" : "int",
    "comment" : "\n     * The minimum number of digits allowed in the fractional portion of a\n     * number.  <code>minimumFractionDigits</code> must be less than or equal to\n     * <code>maximumFractionDigits</code>.\n     *\n     * @serial\n     * @see #getMinimumFractionDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "currency",
    "type" : "Currency",
    "comment" : "\n     * Currency object used to format currencies.  Subclasses may\n     * ignore this if they are not currency formats.  This will be\n     * null unless a subclass sets it to a non-null value.\n     ",
    "links" : [ ]
  }, {
    "name" : "currentSerialVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionOnStream",
    "type" : "int",
    "comment" : "\n     * Describes the version of <code>NumberFormat</code> present on the stream.\n     * Possible values are:\n     * <ul>\n     * <li><b>0</b> (or uninitialized): the JDK 1.1 version of the stream format.\n     *     In this version, the <code>int</code> fields such as\n     *     <code>maximumIntegerDigits</code> were not present, and the <code>byte</code>\n     *     fields such as <code>maxIntegerDigits</code> are used instead.\n     *\n     * <li><b>1</b>: the JDK 1.2 version of the stream format.  The values of the\n     *     <code>byte</code> fields such as <code>maxIntegerDigits</code> are ignored,\n     *     and the <code>int</code> fields such as <code>maximumIntegerDigits</code>\n     *     are used instead.\n     *\n     * <li><b>2</b>: adds capitalizationSetting.\n     * </ul>\n     * When streaming out a <code>NumberFormat</code>, the most recent format\n     * (corresponding to the highest allowable <code>serialVersionOnStream</code>)\n     * is always written.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " ID for backward compatibility.",
    "links" : [ ]
  }, {
    "name" : "parseStrict",
    "type" : "boolean",
    "comment" : " new in ICU4J 3.6",
    "links" : [ ]
  }, {
    "name" : "capitalizationSetting",
    "type" : "DisplayContext",
    "comment" : "\n     * Capitalization context setting, new in ICU 53\n     * @serial\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats a number and appends the resulting text to the given string buffer.\n     * <strong>[icu] Note:</strong> recognizes <code>BigInteger</code>\n     * and <code>BigDecimal</code> objects.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object parseObject(String source, ParsePosition parsePosition)",
    "returnType" : "Object",
    "comment" : "\n     * Parses text from a string to produce a number.\n     * @param source the String to parse\n     * @param parsePosition the position at which to start the parse\n     * @return the parsed number, or null\n     * @see java.text.NumberFormat#parseObject(String, ParsePosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String format(double number)",
    "returnType" : "String",
    "comment" : "\n     * Specialization of format.\n     * @see java.text.Format#format(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String format(long number)",
    "returnType" : "String",
    "comment" : "\n     * Specialization of format.\n     * @see java.text.Format#format(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String format(BigInteger number)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Convenience method to format a BigInteger.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String format(java.math.BigDecimal number)",
    "returnType" : "String",
    "comment" : "\n     * Convenience method to format a BigDecimal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String format(android.icu.math.BigDecimal number)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Convenience method to format an ICU BigDecimal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String format(CurrencyAmount currAmt)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Convenience method to format a CurrencyAmount.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Specialization of format.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Specialization of format.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuffer format(BigInteger number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * <strong>[icu]</strong> Formats a BigInteger. Specialization of format.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuffer format(java.math.BigDecimal number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * <strong>[icu]</strong> Formats a BigDecimal. Specialization of format.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract StringBuffer format(android.icu.math.BigDecimal number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * <strong>[icu]</strong> Formats an ICU BigDecimal. Specialization of format.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer format(CurrencyAmount currAmt, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * <strong>[icu]</strong> Formats a CurrencyAmount. Specialization of format.\n     * @see java.text.Format#format(Object, StringBuffer, FieldPosition)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Number parse(String text, ParsePosition parsePosition)",
    "returnType" : "Number",
    "comment" : "\n     * Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,\n     * Long.MAX_VALUE] and with no decimals); otherwise, returns another type,\n     * such as a BigDecimal, BigInteger, or Double. The return type is not\n     * guaranteed other than for the Long case.\n     *\n     * <p>If IntegerOnly is set, will stop at a decimal\n     * point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop\n     * after the 1).\n     *\n     * <p>Does not throw an exception; if no object can be parsed, index is\n     * unchanged!\n     *\n     * <p>For more detail on parsing, see the \"Parsing\" header in the class\n     * documentation of {@link DecimalFormat}.\n     *\n     * @see #isParseIntegerOnly\n     * @see DecimalFormat#setParseBigDecimal\n     * @see java.text.Format#parseObject(String, ParsePosition)\n     ",
    "links" : [ "android.icu.text.DecimalFormat" ]
  }, {
    "name" : "public Number parse(String text) throws ParseException",
    "returnType" : "Number",
    "comment" : "Bug 4375399 [Richard/GCL]",
    "links" : [ ]
  }, {
    "name" : "public CurrencyAmount parseCurrency(CharSequence text, ParsePosition pos)",
    "returnType" : "CurrencyAmount",
    "comment" : "\n     * Parses text from the given string as a CurrencyAmount.  Unlike\n     * the parse() method, this method will attempt to parse a generic\n     * currency name, searching for a match of this object's locale's\n     * currency display names, or for a 3-letter ISO currency code.\n     * This method will fail if this format is not a currency format,\n     * that is, if it does not contain the currency pattern symbol\n     * (U+00A4) in its prefix or suffix.\n     *\n     * @param text the text to parse\n     * @param pos input-output position; on input, the position within\n     * text to match; must have 0 &lt;= pos.getIndex() &lt; text.length();\n     * on output, the position after the last matched character. If\n     * the parse fails, the position in unchanged upon output.\n     * @return a CurrencyAmount, or null upon failure\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isParseIntegerOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this format will parse numbers as integers only.\n     * For example in the English locale, with ParseIntegerOnly true, the\n     * string \"1234.\" would be parsed as the integer value 1234 and parsing\n     * would stop at the \".\" character.  The decimal separator accepted\n     * by the parse operation is locale-dependent and determined by the\n     * subclass.\n     *\n     * @return true if this will parse integers only\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParseIntegerOnly(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to ignore the fraction part of a number when parsing\n     * (defaults to false). If a string contains a decimal point, parsing will stop before the decimal\n     * point. Note that determining whether a character is a decimal point depends on the locale.\n     *\n     * <p>For example, in <em>en-US</em>, parsing the string \"123.45\" will return the number 123 and\n     * parse position 3.\n     *\n     * @param value true if this should parse integers only\n     * @see #isParseIntegerOnly\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParseStrict(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets whether strict parsing is in effect.  When this is true, the string\n     * is required to be a stronger match to the pattern than when lenient parsing is in\n     * effect.  More specifically, the following conditions cause a parse failure relative\n     * to lenient mode (examples use the pattern \"#,##0.#\"):<ul>\n     * <li>The presence and position of special symbols, including currency, must match the\n     * pattern.<br>\n     * '+123' fails (there is no plus sign in the pattern)</li>\n     * <li>Leading or doubled grouping separators<br>\n     * ',123' and '1,,234\" fail</li>\n     * <li>Groups of incorrect length when grouping is used<br>\n     * '1,23' and '1234,567' fail, but '1234' passes</li>\n     * <li>Grouping separators used in numbers followed by exponents<br>\n     * '1,234E5' fails, but '1234E5' and '1,234E' pass ('E' is not an exponent when\n     * not followed by a number)</li>\n     * </ul>\n     * When strict parsing is off,  all grouping separators are ignored.\n     * This is the default behavior.\n     * @param value True to enable strict parsing.  Default is false.\n     * @see #isParseStrict\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isParseStrict()",
    "returnType" : "boolean",
    "comment" : "\n     * <strong>[icu]</strong> Returns whether strict parsing is in effect.\n     * @return true if strict parsing is in effect\n     * @see #setParseStrict\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContext(DisplayContext context)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Set a particular DisplayContext value in the formatter,\n     * such as CAPITALIZATION_FOR_STANDALONE.\n     *\n     * @param context The DisplayContext value to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayContext getContext(DisplayContext.Type type)",
    "returnType" : "DisplayContext",
    "comment" : "\n     * <strong>[icu]</strong> Get the formatter's DisplayContext value for the specified DisplayContext.Type,\n     * such as CAPITALIZATION.\n     *\n     * @param type the DisplayContext.Type whose value to return\n     * @return the current DisplayContext setting for the specified type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final NumberFormat getInstance()",
    "returnType" : "NumberFormat",
    "comment" : "Bug 4408066 [Richard/GCL]",
    "links" : [ ]
  }, {
    "name" : "public static NumberFormat getInstance(Locale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns the default number format for the specified locale.\n     * The default format is one of the styles provided by the other\n     * factory methods: getNumberInstance, getCurrencyInstance or getPercentInstance.\n     * Exactly which one is locale-dependent.\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getInstance(ULocale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns the default number format for the specified locale.\n     * The default format is one of the styles provided by the other\n     * factory methods: getNumberInstance, getCurrencyInstance or getPercentInstance.\n     * Exactly which one is locale-dependent.\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static final NumberFormat getInstance(int style)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a specific style number format for default <code>FORMAT</code> locale.\n     * @param style  number format style\n     * @see Category#FORMAT\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getInstance(Locale inLocale, int style)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a specific style number format for a specific locale.\n     * @param inLocale  the specific locale.\n     * @param style     number format style\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static final NumberFormat getNumberInstance()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a general-purpose number format for the current default <code>FORMAT</code> locale.\n     * @see Category#FORMAT\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getNumberInstance(Locale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a general-purpose number format for the specified locale.\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getNumberInstance(ULocale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a general-purpose number format for the specified locale.\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static final NumberFormat getIntegerInstance()",
    "returnType" : "NumberFormat",
    "comment" : "Bug 4408066 [Richard/GCL]",
    "links" : [ ]
  }, {
    "name" : "public static NumberFormat getIntegerInstance(Locale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "Bug 4408066 [Richard/GCL]",
    "links" : [ ]
  }, {
    "name" : "public static NumberFormat getIntegerInstance(ULocale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns an integer number format for the specified locale. The\n     * returned number format is configured to round floating point numbers\n     * to the nearest integer using IEEE half-even rounding (see {@link\n     * android.icu.math.BigDecimal#ROUND_HALF_EVEN ROUND_HALF_EVEN}) for formatting,\n     * and to parse only the integer part of an input string (see {@link\n     * #isParseIntegerOnly isParseIntegerOnly}).\n     *\n     * @param inLocale the locale for which a number format is needed\n     * @return a number format for integer values\n     ",
    "links" : [ "#isParseIntegerOnly", "android.icu.math.BigDecimal#ROUND_HALF_EVEN", "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static final NumberFormat getCurrencyInstance()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a currency format for the current default <code>FORMAT</code> locale.\n     * @return a number format for currency\n     * @see Category#FORMAT\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getCurrencyInstance(Locale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a currency format for the specified locale.\n     * @return a number format for currency\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getCurrencyInstance(ULocale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a currency format for the specified locale.\n     * @return a number format for currency\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static final NumberFormat getPercentInstance()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a percentage format for the current default <code>FORMAT</code> locale.\n     * @return a number format for percents\n     * @see Category#FORMAT\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getPercentInstance(Locale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a percentage format for the specified locale.\n     * @return a number format for percents\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getPercentInstance(ULocale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a percentage format for the specified locale.\n     * @return a number format for percents\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static final NumberFormat getScientificInstance()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a scientific format for the current default <code>FORMAT</code> locale.\n     * @return a scientific number format\n     * @see Category#FORMAT\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getScientificInstance(Locale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a scientific format for the specified locale.\n     * @return a scientific number format\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "public static NumberFormat getScientificInstance(ULocale inLocale)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * <strong>[icu]</strong> Returns a scientific format for the specified locale.\n     * @return a scientific number format\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : "private static NumberFormatShim getShim()",
    "returnType" : "NumberFormatShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns the list of Locales for which NumberFormats are available.\n     * @return the available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns the list of Locales for which NumberFormats are available.\n     * @return the available locales\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object registerFactory(NumberFormatFactory factory)",
    "returnType" : "Object",
    "comment" : "\n     * <strong>[icu]</strong> Registers a new NumberFormatFactory.  The factory is adopted by\n     * the service and must not be modified.  The returned object is a\n     * key that can be used to unregister this factory.\n     *\n     * <p>Because ICU may choose to cache NumberFormat objects internally, this must\n     * be called at application startup, prior to any calls to\n     * NumberFormat.getInstance to avoid undefined behavior.\n     *\n     * @param factory the factory to register\n     * @return a key with which to unregister the factory\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean unregister(Object registryKey)",
    "returnType" : "boolean",
    "comment" : "\n     * <strong>[icu]</strong> Unregisters the factory or instance associated with this key (obtained from\n     * registerInstance or registerFactory).\n     * @param registryKey a key obtained from registerFactory\n     * @return true if the object was successfully unregistered\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides equals.\n     * Two NumberFormats are equal they are of the same class\n     * and the user-specified values for settings\n     * (groupingUsed, parseIntegerOnly, maximumIntegerDigits, etc.)\n     * are equal.\n     * @param obj the object to compare against\n     * @return true if the object is equal to this.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGroupingUsed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if grouping is used in this format. For example, in the\n     * en_US locale, with grouping on, the number 1234567 will be formatted\n     * as \"1,234,567\". The grouping separator as well as the size of each group\n     * is locale-dependent and is determined by subclasses of NumberFormat.\n     * Grouping affects both parsing and formatting.\n     * @return true if grouping is used\n     * @see #setGroupingUsed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupingUsed(boolean newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not grouping will be used in this format.  Grouping\n     * affects both parsing and formatting.\n     * @see #isGroupingUsed\n     * @param newValue true to use grouping.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumIntegerDigits()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of digits allowed in the integer portion of a\n     * number.  The default value is 40, which subclasses can override.\n     *\n     * When formatting, if the number of digits exceeds this value, the highest-\n     * significance digits are truncated until the limit is reached, in accordance\n     * with UTS#35.\n     *\n     * This setting has no effect on parsing.\n     *\n     * @return the maximum number of integer digits\n     * @see #setMaximumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaximumIntegerDigits(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum number of digits allowed in the integer portion of a\n     * number. This must be &gt;= minimumIntegerDigits.  If the\n     * new value for maximumIntegerDigits is less than the current value\n     * of minimumIntegerDigits, then minimumIntegerDigits will also be set to\n     * the new value.\n     * @param newValue the maximum number of integer digits to be shown; if\n     * less than zero, then zero is used.  Subclasses might enforce an\n     * upper limit to this value appropriate to the numeric type being formatted.\n     * @see #getMaximumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumIntegerDigits()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum number of digits allowed in the integer portion of a\n     * number.  The default value is 1, which subclasses can override.\n     * When formatting, if this value is not reached, numbers are padded on the\n     * left with the locale-specific '0' character to ensure at least this\n     * number of integer digits.  When parsing, this has no effect.\n     * @return the minimum number of integer digits\n     * @see #setMinimumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinimumIntegerDigits(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum number of digits allowed in the integer portion of a\n     * number.  This must be &lt;= maximumIntegerDigits.  If the\n     * new value for minimumIntegerDigits is more than the current value\n     * of maximumIntegerDigits, then maximumIntegerDigits will also be set to\n     * the new value.\n     * @param newValue the minimum number of integer digits to be shown; if\n     * less than zero, then zero is used. Subclasses might enforce an\n     * upper limit to this value appropriate to the numeric type being formatted.\n     * @see #getMinimumIntegerDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumFractionDigits()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of digits allowed in the fraction\n     * portion of a number.  The default value is 3, which subclasses\n     * can override.  When formatting, the exact behavior when this\n     * value is exceeded is subclass-specific.  When parsing, this has\n     * no effect.\n     * @return the maximum number of fraction digits\n     * @see #setMaximumFractionDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaximumFractionDigits(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum number of digits allowed in the fraction portion of a\n     * number. This must be &gt;= minimumFractionDigits.  If the\n     * new value for maximumFractionDigits is less than the current value\n     * of minimumFractionDigits, then minimumFractionDigits will also be set to\n     * the new value.\n     * @param newValue the maximum number of fraction digits to be shown; if\n     * less than zero, then zero is used. The concrete subclass may enforce an\n     * upper limit to this value appropriate to the numeric type being formatted.\n     * @see #getMaximumFractionDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumFractionDigits()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum number of digits allowed in the fraction portion of a\n     * number.  The default value is 0, which subclasses can override.\n     * When formatting, if this value is not reached, numbers are padded on\n     * the right with the locale-specific '0' character to ensure at least\n     * this number of fraction digits.  When parsing, this has no effect.\n     * @return the minimum number of fraction digits\n     * @see #setMinimumFractionDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinimumFractionDigits(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimum number of digits allowed in the fraction portion of a\n     * number.  This must be &lt;= maximumFractionDigits.  If the\n     * new value for minimumFractionDigits exceeds the current value\n     * of maximumFractionDigits, then maximumFractionDigits will also be set to\n     * the new value.\n     * @param newValue the minimum number of fraction digits to be shown; if\n     * less than zero, then zero is used.  Subclasses might enforce an\n     * upper limit to this value appropriate to the numeric type being formatted.\n     * @see #getMinimumFractionDigits\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrency(Currency theCurrency)",
    "returnType" : "void",
    "comment" : "\n     * Sets the <tt>Currency</tt> object used to display currency\n     * amounts.  This takes effect immediately, if this format is a\n     * currency format.  If this format is not a currency format, then\n     * the currency object is used if and when this object becomes a\n     * currency format.\n     * @param theCurrency new currency object to use.  May be null for\n     * some subclasses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Currency getCurrency()",
    "returnType" : "Currency",
    "comment" : "\n     * Returns the <tt>Currency</tt> object used to display currency\n     * amounts.  This may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Currency getEffectiveCurrency()",
    "returnType" : "Currency",
    "comment" : "\n     * Returns the currency in effect for this formatter.  Subclasses\n     * should override this method as needed.  Unlike getCurrency(),\n     * this method should never return null.\n     * @return a non-null Currency\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRoundingMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the rounding mode used in this NumberFormat.  The default implementation of\n     * tis method in NumberFormat always throws <code>UnsupportedOperationException</code>.\n     * @return A rounding mode, between <code>BigDecimal.ROUND_UP</code>\n     * and <code>BigDecimal.ROUND_UNNECESSARY</code>.\n     * @see #setRoundingMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoundingMode(int roundingMode)",
    "returnType" : "void",
    "comment" : "\n     * Set the rounding mode used in this NumberFormat.  The default implementation of\n     * tis method in NumberFormat always throws <code>UnsupportedOperationException</code>.\n     * @param roundingMode A rounding mode, between\n     * <code>BigDecimal.ROUND_UP</code> and\n     * <code>BigDecimal.ROUND_UNNECESSARY</code>.\n     * @see #getRoundingMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NumberFormat getInstance(ULocale desiredLocale, int choice)",
    "returnType" : "NumberFormat",
    "comment" : "\n     * <strong>NOTE:</strong> New users are strongly encouraged to use\n     * {@link NumberFormatter} instead of NumberFormat.\n     * <hr>\n     * Returns a specific style number format for a specific locale.\n     * @param desiredLocale  the specific locale.\n     * @param choice         number format style\n     * @throws IllegalArgumentException  if choice is not one of\n     *                                   NUMBERSTYLE, CURRENCYSTYLE,\n     *                                   PERCENTSTYLE, SCIENTIFICSTYLE,\n     *                                   INTEGERSTYLE, ISOCURRENCYSTYLE,\n     *                                   PLURALCURRENCYSTYLE, ACCOUNTINGCURRENCYSTYLE.\n     *                                   CASHCURRENCYSTYLE, STANDARDCURRENCYSTYLE.\n     ",
    "links" : [ "android.icu.number.NumberFormatter" ]
  }, {
    "name" : " static NumberFormat createInstance(ULocale desiredLocale, int choice)",
    "returnType" : "NumberFormat",
    "comment" : " Hook for service",
    "links" : [ ]
  }, {
    "name" : "protected static String getPattern(Locale forLocale, int choice)",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern for the provided locale and choice.\n     * @param forLocale the locale of the data.\n     * @param choice the pattern format.\n     * @return the pattern\n     * @deprecated ICU 3.4 subclassers should override getPattern(ULocale, int) instead of this method.\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static String getPattern(ULocale forLocale, int choice)",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern for the provided locale and choice.\n     * @param forLocale the locale of the data.\n     * @param choice the pattern format.\n     * @return the pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getPatternForStyle(ULocale forLocale, int choice)",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern for the provided locale and choice.\n     * @param forLocale the locale of the data.\n     * @param choice the pattern format.\n     * @return the pattern\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getPatternForStyleAndNumberingSystem(ULocale forLocale, String nsName, int choice)",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern for the provided locale, numbering system, and choice.\n     * @param forLocale the locale of the data.\n     * @param nsName The name of the numbering system, like \"latn\".\n     * @param choice the pattern format.\n     * @return the pattern\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * First, read in the default serializable data.\n     *\n     * Then, if <code>serialVersionOnStream</code> is less than 1, indicating that\n     * the stream was written by JDK 1.1,\n     * set the <code>int</code> fields such as <code>maximumIntegerDigits</code>\n     * to be equal to the <code>byte</code> fields such as <code>maxIntegerDigits</code>,\n     * since the <code>int</code> fields were not present in JDK 1.1.\n     * Finally, set serialVersionOnStream back to the maximum allowed value so that\n     * default serialization will work properly if this object is streamed out again.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write out the default serializable data, after first setting\n     * the <code>byte</code> fields such as <code>maxIntegerDigits</code> to be\n     * equal to the <code>int</code> fields such as <code>maximumIntegerDigits</code>\n     * (or to <code>Byte.MAX_VALUE</code>, whichever is smaller), for compatibility\n     * with the JDK 1.1 version of the stream format.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition pos)", "public final Object parseObject(String source, ParsePosition parsePosition)", "public final String format(double number)", "public final String format(long number)", "public final String format(BigInteger number)", "public final String format(java.math.BigDecimal number)", "public final String format(android.icu.math.BigDecimal number)", "public final String format(CurrencyAmount currAmt)", "public abstract StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)", "public abstract StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos)", "public abstract StringBuffer format(BigInteger number, StringBuffer toAppendTo, FieldPosition pos)", "public abstract StringBuffer format(java.math.BigDecimal number, StringBuffer toAppendTo, FieldPosition pos)", "public abstract StringBuffer format(android.icu.math.BigDecimal number, StringBuffer toAppendTo, FieldPosition pos)", "public StringBuffer format(CurrencyAmount currAmt, StringBuffer toAppendTo, FieldPosition pos)", "public abstract Number parse(String text, ParsePosition parsePosition)", "public Number parse(String text) throws ParseException", "public CurrencyAmount parseCurrency(CharSequence text, ParsePosition pos)", "public boolean isParseIntegerOnly()", "public void setParseIntegerOnly(boolean value)", "public void setParseStrict(boolean value)", "public boolean isParseStrict()", "public void setContext(DisplayContext context)", "public DisplayContext getContext(DisplayContext.Type type)", "public static final NumberFormat getInstance()", "public static NumberFormat getInstance(Locale inLocale)", "public static NumberFormat getInstance(ULocale inLocale)", "public static final NumberFormat getInstance(int style)", "public static NumberFormat getInstance(Locale inLocale, int style)", "public static final NumberFormat getNumberInstance()", "public static NumberFormat getNumberInstance(Locale inLocale)", "public static NumberFormat getNumberInstance(ULocale inLocale)", "public static final NumberFormat getIntegerInstance()", "public static NumberFormat getIntegerInstance(Locale inLocale)", "public static NumberFormat getIntegerInstance(ULocale inLocale)", "public static final NumberFormat getCurrencyInstance()", "public static NumberFormat getCurrencyInstance(Locale inLocale)", "public static NumberFormat getCurrencyInstance(ULocale inLocale)", "public static final NumberFormat getPercentInstance()", "public static NumberFormat getPercentInstance(Locale inLocale)", "public static NumberFormat getPercentInstance(ULocale inLocale)", "public static final NumberFormat getScientificInstance()", "public static NumberFormat getScientificInstance(Locale inLocale)", "public static NumberFormat getScientificInstance(ULocale inLocale)", "private static NumberFormatShim getShim()", "public static Locale[] getAvailableLocales()", "public static ULocale[] getAvailableULocales()", "public static Object registerFactory(NumberFormatFactory factory)", "public static boolean unregister(Object registryKey)", "public int hashCode()", "public boolean equals(Object obj)", "public Object clone()", "public boolean isGroupingUsed()", "public void setGroupingUsed(boolean newValue)", "public int getMaximumIntegerDigits()", "public void setMaximumIntegerDigits(int newValue)", "public int getMinimumIntegerDigits()", "public void setMinimumIntegerDigits(int newValue)", "public int getMaximumFractionDigits()", "public void setMaximumFractionDigits(int newValue)", "public int getMinimumFractionDigits()", "public void setMinimumFractionDigits(int newValue)", "public void setCurrency(Currency theCurrency)", "public Currency getCurrency()", "protected Currency getEffectiveCurrency()", "public int getRoundingMode()", "public void setRoundingMode(int roundingMode)", "public static NumberFormat getInstance(ULocale desiredLocale, int choice)", " static NumberFormat createInstance(ULocale desiredLocale, int choice)", "protected static String getPattern(Locale forLocale, int choice)", "protected static String getPattern(ULocale forLocale, int choice)", "public static String getPatternForStyle(ULocale forLocale, int choice)", "public static String getPatternForStyleAndNumberingSystem(ULocale forLocale, String nsName, int choice)", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException", "private void writeObject(ObjectOutputStream stream) throws IOException" ],
  "variableNames" : [ "NUMBERSTYLE", "CURRENCYSTYLE", "PERCENTSTYLE", "SCIENTIFICSTYLE", "INTEGERSTYLE", "ISOCURRENCYSTYLE", "PLURALCURRENCYSTYLE", "ACCOUNTINGCURRENCYSTYLE", "CASHCURRENCYSTYLE", "STANDARDCURRENCYSTYLE", "INTEGER_FIELD", "FRACTION_FIELD", "shim", "doubleCurrencySign", "doubleCurrencyStr", "groupingUsed", "maxIntegerDigits", "minIntegerDigits", "maxFractionDigits", "minFractionDigits", "parseIntegerOnly", "maximumIntegerDigits", "minimumIntegerDigits", "maximumFractionDigits", "minimumFractionDigits", "currency", "currentSerialVersion", "serialVersionOnStream", "serialVersionUID", "parseStrict", "capitalizationSetting" ]
}