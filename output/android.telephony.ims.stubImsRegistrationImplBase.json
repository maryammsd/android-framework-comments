{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/stub/ImsRegistrationImplBase.java",
  "packageName" : "android.telephony.ims.stub",
  "className" : "ImsRegistrationImplBase",
  "comment" : "\n * Controls IMS registration for this ImsService and notifies the framework when the IMS\n * registration for this ImsService has changed status.\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_TECH_NONE",
    "type" : "int",
    "comment" : "\n     * No registration technology specified, used when we are not registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_TECH_LTE",
    "type" : "int",
    "comment" : "\n     * IMS is registered to IMS via LTE.\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_TECH_IWLAN",
    "type" : "int",
    "comment" : "\n     * IMS is registered to IMS via IWLAN.\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_UNKNOWN",
    "type" : "int",
    "comment" : " yet.",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IImsRegistration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "RemoteCallbackListExt<IImsRegistrationCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionType",
    "type" : "int",
    "comment" : " Locked on mLock",
    "links" : [ ]
  }, {
    "name" : "mRegistrationState",
    "type" : "int",
    "comment" : " Locked on mLock",
    "links" : [ ]
  }, {
    "name" : "mLastDisconnectCause",
    "type" : "ImsReasonInfo",
    "comment" : " Locked on mLock, create unspecified disconnect cause.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IImsRegistration getBinder()",
    "returnType" : "IImsRegistration",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addRegistrationCallback(IImsRegistrationCallback c) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeRegistrationCallback(IImsRegistrationCallback c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void onRegistered(@ImsRegistrationTech int imsRadioTech)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the device is connected to the IMS network.\n     *\n     * @param imsRadioTech the radio access technology. Valid values are defined as\n     * {@link #REGISTRATION_TECH_LTE} and {@link #REGISTRATION_TECH_IWLAN}.\n     ",
    "links" : [ "#REGISTRATION_TECH_LTE", "#REGISTRATION_TECH_IWLAN" ]
  }, {
    "name" : "public final void onRegistering(@ImsRegistrationTech int imsRadioTech)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the device is trying to connect the IMS network.\n     *\n     * @param imsRadioTech the radio access technology. Valid values are defined as\n     * {@link #REGISTRATION_TECH_LTE} and {@link #REGISTRATION_TECH_IWLAN}.\n     ",
    "links" : [ "#REGISTRATION_TECH_LTE", "#REGISTRATION_TECH_IWLAN" ]
  }, {
    "name" : "public final void onDeregistered(ImsReasonInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the device is disconnected from the IMS network.\n     * <p>\n     * Note: Prior to calling {@link #onDeregistered(ImsReasonInfo)}, you should ensure that any\n     * changes to {@link android.telephony.ims.feature.ImsFeature} capability availability is sent\n     * to the framework.  For example,\n     * {@link android.telephony.ims.feature.MmTelFeature.MmTelCapabilities#CAPABILITY_TYPE_VIDEO}\n     * and\n     * {@link android.telephony.ims.feature.MmTelFeature.MmTelCapabilities#CAPABILITY_TYPE_VOICE}\n     * may be set to unavailable to ensure the framework knows these services are no longer\n     * available due to de-registration.  If you do not report capability changes impacted by\n     * de-registration, the framework will not know which features are no longer available as a\n     * result.\n     *\n     * @param info the {@link ImsReasonInfo} associated with why registration was disconnected.\n     ",
    "links" : [ "#onDeregistered", "android.telephony.ims.feature.ImsFeature", "android.telephony.ims.feature.MmTelFeature.MmTelCapabilities#CAPABILITY_TYPE_VIDEO", "android.telephony.ims.feature.MmTelFeature.MmTelCapabilities#CAPABILITY_TYPE_VOICE", "ImsReasonInfo" ]
  }, {
    "name" : "public final void onTechnologyChangeFailed(@ImsRegistrationTech int imsRadioTech, ImsReasonInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the handover from the current radio technology to the technology\n     * defined in {@code imsRadioTech} has failed.\n     * @param imsRadioTech The technology that has failed to be changed. Valid values are\n     * {@link #REGISTRATION_TECH_LTE} and {@link #REGISTRATION_TECH_IWLAN}.\n     * @param info The {@link ImsReasonInfo} for the failure to change technology.\n     ",
    "links" : [ "#REGISTRATION_TECH_LTE", "#REGISTRATION_TECH_IWLAN", "ImsReasonInfo" ]
  }, {
    "name" : "public final void onSubscriberAssociatedUriChanged(Uri[] uris)",
    "returnType" : "void",
    "comment" : "\n     * The this device's subscriber associated {@link Uri}s have changed, which are used to filter\n     * out this device's {@link Uri}s during conference calling.\n     * @param uris\n     ",
    "links" : [ "Uri", "Uri" ]
  }, {
    "name" : "private void updateToState(@ImsRegistrationTech int connType, int newState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateToDisconnectedState(ImsReasonInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getConnectionType()",
    "returnType" : "int",
    "comment" : "\n     * @return the current registration connection type. Valid values are\n     * {@link #REGISTRATION_TECH_LTE} and {@link #REGISTRATION_TECH_IWLAN}\n     * @hide\n     ",
    "links" : [ "#REGISTRATION_TECH_LTE", "#REGISTRATION_TECH_IWLAN" ]
  }, {
    "name" : "private void updateNewCallbackWithState(IImsRegistrationCallback c) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * @param c the newly registered callback that will be updated with the current registration\n     *         state.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "REGISTRATION_TECH_NONE", "REGISTRATION_TECH_LTE", "REGISTRATION_TECH_IWLAN", "REGISTRATION_STATE_UNKNOWN", "mBinder", "mCallbacks", "mLock", "mConnectionType", "mRegistrationState", "mLastDisconnectCause" ],
  "methodNames" : [ "public final IImsRegistration getBinder()", "private void addRegistrationCallback(IImsRegistrationCallback c) throws RemoteException", "private void removeRegistrationCallback(IImsRegistrationCallback c)", "public final void onRegistered(@ImsRegistrationTech int imsRadioTech)", "public final void onRegistering(@ImsRegistrationTech int imsRadioTech)", "public final void onDeregistered(ImsReasonInfo info)", "public final void onTechnologyChangeFailed(@ImsRegistrationTech int imsRadioTech, ImsReasonInfo info)", "public final void onSubscriberAssociatedUriChanged(Uri[] uris)", "private void updateToState(@ImsRegistrationTech int connType, int newState)", "private void updateToDisconnectedState(ImsReasonInfo info)", "public final int getConnectionType()", "private void updateNewCallbackWithState(IImsRegistrationCallback c) throws RemoteException" ]
}