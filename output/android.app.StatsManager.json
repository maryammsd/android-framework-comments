{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/StatsManager.java",
  "packageName" : "android.app",
  "className" : "StatsManager",
  "comment" : "\n * API for statsd clients to send configurations and retrieve data.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsManagerService",
    "type" : "IStatsManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATS_CONFIG_UID",
    "type" : "String",
    "comment" : "\n     * Long extra of uid that added the relevant stats config.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATS_CONFIG_KEY",
    "type" : "String",
    "comment" : "\n     * Long extra of the relevant stats config's configKey.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATS_SUBSCRIPTION_ID",
    "type" : "String",
    "comment" : "\n     * Long extra of the relevant statsd_config.proto's Subscription.id.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATS_SUBSCRIPTION_RULE_ID",
    "type" : "String",
    "comment" : "\n     * Long extra of the relevant statsd_config.proto's Subscription.rule_id.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATS_BROADCAST_SUBSCRIBER_COOKIES",
    "type" : "String",
    "comment" : "\n     *   List<String> of the relevant statsd_config.proto's BroadcastSubscriberDetails.cookie.\n     *   Obtain using {@link android.content.Intent#getStringArrayListExtra(String)}.\n     ",
    "links" : [ "android.content.Intent#getStringArrayListExtra(String)" ]
  }, {
    "name" : "EXTRA_STATS_DIMENSIONS_VALUE",
    "type" : "String",
    "comment" : "\n     * Extra of a {@link android.os.StatsDimensionsValue} representing sliced dimension value\n     * information.\n     ",
    "links" : [ "android.os.StatsDimensionsValue" ]
  }, {
    "name" : "EXTRA_STATS_ACTIVE_CONFIG_KEYS",
    "type" : "String",
    "comment" : "\n     * Long array extra of the active configs for the uid that added those configs.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_STATSD_STARTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Statsd has started.\n     * Configurations and PendingIntents can now be sent to it.\n     ",
    "links" : [ ]
  }, {
    "name" : "PULL_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Value indicating that this pull was successful and that the result should be used.\n     *\n     *",
    "links" : [ ]
  }, {
    "name" : "PULL_SKIP",
    "type" : "int",
    "comment" : "\n     * Value indicating that this pull was unsuccessful and that the result should not be used.\n     *",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_COOL_DOWN_MILLIS",
    "type" : "long",
    "comment" : " 1 second.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : " 2 seconds.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addConfig(long configKey, byte[] config) throws StatsUnavailableException",
    "returnType" : "void",
    "comment" : "\n     * Adds the given configuration and associates it with the given configKey. If a config with the\n     * given configKey already exists for the caller's uid, it is replaced with the new one.\n     *\n     * @param configKey An arbitrary integer that allows clients to track the configuration.\n     * @param config    Wire-encoded StatsdConfig proto that specifies metrics (and all\n     *                  dependencies eg, conditions and matchers).\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     * @throws IllegalArgumentException if config is not a wire-encoded StatsdConfig proto\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addConfiguration(long configKey, byte[] config)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #addConfig(long, byte[])}\n     ",
    "links" : [ "#addConfig(long" ]
  }, {
    "name" : "public void removeConfig(long configKey) throws StatsUnavailableException",
    "returnType" : "void",
    "comment" : "\n     * Remove a configuration from logging.\n     *\n     * @param configKey Configuration key to remove.\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeConfiguration(long configKey)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #removeConfig(long)}\n     ",
    "links" : [ "#removeConfig(long)" ]
  }, {
    "name" : "public void setBroadcastSubscriber(PendingIntent pendingIntent, long configKey, long subscriberId) throws StatsUnavailableException",
    "returnType" : "void",
    "comment" : "\n     * Set the PendingIntent to be used when broadcasting subscriber information to the given\n     * subscriberId within the given config.\n     * <p>\n     * Suppose that the calling uid has added a config with key configKey, and that in this config\n     * it is specified that when a particular anomaly is detected, a broadcast should be sent to\n     * a BroadcastSubscriber with id subscriberId. This function links the given pendingIntent with\n     * that subscriberId (for that config), so that this pendingIntent is used to send the broadcast\n     * when the anomaly is detected.\n     * <p>\n     * When statsd sends the broadcast, the PendingIntent will used to send an intent with\n     * information of\n     * {@link #EXTRA_STATS_CONFIG_UID},\n     * {@link #EXTRA_STATS_CONFIG_KEY},\n     * {@link #EXTRA_STATS_SUBSCRIPTION_ID},\n     * {@link #EXTRA_STATS_SUBSCRIPTION_RULE_ID},\n     * {@link #EXTRA_STATS_BROADCAST_SUBSCRIBER_COOKIES}, and\n     * {@link #EXTRA_STATS_DIMENSIONS_VALUE}.\n     * <p>\n     * This function can only be called by the owner (uid) of the config. It must be called each\n     * time statsd starts. The config must have been added first (via {@link #addConfig}).\n     *\n     * @param pendingIntent the PendingIntent to use when broadcasting info to the subscriber\n     *                      associated with the given subscriberId. May be null, in which case\n     *                      it undoes any previous setting of this subscriberId.\n     * @param configKey     The integer naming the config to which this subscriber is attached.\n     * @param subscriberId  ID of the subscriber, as used in the config.\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ "#EXTRA_STATS_CONFIG_UID", "#EXTRA_STATS_CONFIG_KEY", "#addConfig", "#EXTRA_STATS_BROADCAST_SUBSCRIBER_COOKIES", "#EXTRA_STATS_SUBSCRIPTION_RULE_ID", "#EXTRA_STATS_DIMENSIONS_VALUE", "#EXTRA_STATS_SUBSCRIPTION_ID" ]
  }, {
    "name" : "public boolean setBroadcastSubscriber(long configKey, long subscriberId, PendingIntent pendingIntent)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #setBroadcastSubscriber(PendingIntent, long, long)}\n     ",
    "links" : [ "#setBroadcastSubscriber(PendingIntent" ]
  }, {
    "name" : "public void setFetchReportsOperation(PendingIntent pendingIntent, long configKey) throws StatsUnavailableException",
    "returnType" : "void",
    "comment" : "\n     * Registers the operation that is called to retrieve the metrics data. This must be called\n     * each time statsd starts. The config must have been added first (via {@link #addConfig},\n     * although addConfig could have been called on a previous boot). This operation allows\n     * statsd to send metrics data whenever statsd determines that the metrics in memory are\n     * approaching the memory limits. The fetch operation should call {@link #getReports} to fetch\n     * the data, which also deletes the retrieved metrics from statsd's memory.\n     *\n     * @param pendingIntent the PendingIntent to use when broadcasting info to the subscriber\n     *                      associated with the given subscriberId. May be null, in which case\n     *                      it removes any associated pending intent with this configKey.\n     * @param configKey     The integer naming the config to which this operation is attached.\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ "#addConfig", "#getReports" ]
  }, {
    "name" : "public long[] setActiveConfigsChangedOperation(@Nullable PendingIntent pendingIntent) throws StatsUnavailableException",
    "returnType" : "long[]",
    "comment" : "\n     * Registers the operation that is called whenever there is a change in which configs are\n     * active. This must be called each time statsd starts. This operation allows\n     * statsd to inform clients that they should pull data of the configs that are currently\n     * active. The activeConfigsChangedOperation should set periodic alarms to pull data of configs\n     * that are active and stop pulling data of configs that are no longer active.\n     *\n     * @param pendingIntent the PendingIntent to use when broadcasting info to the subscriber\n     *                      associated with the given subscriberId. May be null, in which case\n     *                      it removes any associated pending intent for this client.\n     * @return A list of configs that are currently active for this client. If the pendingIntent is\n     *         null, this will be an empty list.\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDataFetchOperation(long configKey, PendingIntent pendingIntent)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #setFetchReportsOperation(PendingIntent, long)}\n     ",
    "links" : [ "#setFetchReportsOperation(PendingIntent" ]
  }, {
    "name" : "public byte[] getReports(long configKey) throws StatsUnavailableException",
    "returnType" : "byte[]",
    "comment" : "\n     * Request the data collected for the given configKey.\n     * This getter is destructive - it also clears the retrieved metrics from statsd's memory.\n     *\n     * @param configKey Configuration key to retrieve data from.\n     * @return Serialized ConfigMetricsReportList proto.\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getData(long configKey)",
    "returnType" : "byte[]",
    "comment" : "\n     * @deprecated Use {@link #getReports(long)}\n     ",
    "links" : [ "#getReports(long)" ]
  }, {
    "name" : "public byte[] getStatsMetadata() throws StatsUnavailableException",
    "returnType" : "byte[]",
    "comment" : "\n     * Clients can request metadata for statsd. Will contain stats across all configurations but not\n     * the actual metrics themselves (metrics must be collected via {@link #getReports(long)}.\n     * This getter is not destructive and will not reset any metrics/counters.\n     *\n     * @return Serialized StatsdStatsReport proto.\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ "#getReports(long)" ]
  }, {
    "name" : "public byte[] getMetadata()",
    "returnType" : "byte[]",
    "comment" : "\n     * @deprecated Use {@link #getStatsMetadata()}\n     ",
    "links" : [ "#getStatsMetadata()" ]
  }, {
    "name" : "public long[] getRegisteredExperimentIds() throws StatsUnavailableException",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the experiments IDs registered with statsd, or an empty array if there aren't any.\n     *\n     * @throws StatsUnavailableException if unsuccessful due to failing to connect to stats service\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPullAtomCallback(int atomTag, @Nullable PullAtomMetadata metadata, @NonNull @CallbackExecutor Executor executor, @NonNull StatsPullAtomCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a callback for an atom when that atom is to be pulled. The stats service will\n     * invoke pullData in the callback when the stats service determines that this atom needs to be\n     * pulled. This method should not be called by third-party apps.\n     *\n     * @param atomTag           The tag of the atom for this puller callback.\n     * @param metadata          Optional metadata specifying the timeout, cool down time, and\n     *                          additive fields for mapping isolated to host uids.\n     * @param executor          The executor in which to run the callback.\n     * @param callback          The callback to be invoked when the stats service pulls the atom.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearPullAtomCallback(int atomTag)",
    "returnType" : "void",
    "comment" : "\n     * Clears a callback for an atom when that atom is to be pulled. Note that any ongoing\n     * pulls will still occur. This method should not be called by third-party apps.\n     *\n     * @param atomTag           The tag of the atom of which to unregister\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private IStatsManagerService getIStatsManagerServiceLocked()",
    "returnType" : "IStatsManagerService",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "sLock", "mContext", "mStatsManagerService", "EXTRA_STATS_CONFIG_UID", "EXTRA_STATS_CONFIG_KEY", "EXTRA_STATS_SUBSCRIPTION_ID", "EXTRA_STATS_SUBSCRIPTION_RULE_ID", "EXTRA_STATS_BROADCAST_SUBSCRIBER_COOKIES", "EXTRA_STATS_DIMENSIONS_VALUE", "EXTRA_STATS_ACTIVE_CONFIG_KEYS", "ACTION_STATSD_STARTED", "PULL_SUCCESS", "PULL_SKIP", "DEFAULT_COOL_DOWN_MILLIS", "DEFAULT_TIMEOUT_MILLIS" ],
  "methodNames" : [ "public void addConfig(long configKey, byte[] config) throws StatsUnavailableException", "public boolean addConfiguration(long configKey, byte[] config)", "public void removeConfig(long configKey) throws StatsUnavailableException", "public boolean removeConfiguration(long configKey)", "public void setBroadcastSubscriber(PendingIntent pendingIntent, long configKey, long subscriberId) throws StatsUnavailableException", "public boolean setBroadcastSubscriber(long configKey, long subscriberId, PendingIntent pendingIntent)", "public void setFetchReportsOperation(PendingIntent pendingIntent, long configKey) throws StatsUnavailableException", "public long[] setActiveConfigsChangedOperation(@Nullable PendingIntent pendingIntent) throws StatsUnavailableException", "public boolean setDataFetchOperation(long configKey, PendingIntent pendingIntent)", "public byte[] getReports(long configKey) throws StatsUnavailableException", "public byte[] getData(long configKey)", "public byte[] getStatsMetadata() throws StatsUnavailableException", "public byte[] getMetadata()", "public long[] getRegisteredExperimentIds() throws StatsUnavailableException", "public void setPullAtomCallback(int atomTag, @Nullable PullAtomMetadata metadata, @NonNull @CallbackExecutor Executor executor, @NonNull StatsPullAtomCallback callback)", "public void clearPullAtomCallback(int atomTag)", "private IStatsManagerService getIStatsManagerServiceLocked()" ]
}