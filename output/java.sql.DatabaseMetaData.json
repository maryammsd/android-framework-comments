{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/DatabaseMetaData.java",
  "packageName" : "java.sql",
  "className" : "DatabaseMetaData",
  "comment" : "\n * Comprehensive information about the database as a whole.\n * <P>\n * This interface is implemented by driver vendors to let users know the capabilities\n * of a Database Management System (DBMS) in combination with\n * the driver based on JDBC<sup><font size=-2>TM</font></sup> technology\n * (\"JDBC driver\") that is used with it.  Different relational DBMSs often support\n * different features, implement features in different ways, and use different\n * data types.  In addition, a driver may implement a feature on top of what the\n * DBMS offers.  Information returned by methods in this interface applies\n * to the capabilities of a particular driver and a particular DBMS working\n * together. Note that as used in this documentation, the term \"database\" is\n * used generically to refer to both the driver and DBMS.\n * <P>\n * A user for this interface is commonly a tool that needs to discover how to\n * deal with the underlying DBMS.  This is especially true for applications\n * that are intended to be used with more than one DBMS. For example, a tool might use the method\n * <code>getTypeInfo</code> to find out what data types can be used in a\n * <code>CREATE TABLE</code> statement.  Or a user might call the method\n * <code>supportsCorrelatedSubqueries</code> to see if it is possible to use\n * a correlated subquery or <code>supportsBatchUpdates</code> to see if it is\n * possible to use batch updates.\n * <P>\n * Some <code>DatabaseMetaData</code> methods return lists of information\n * in the form of <code>ResultSet</code> objects.\n * Regular <code>ResultSet</code> methods, such as\n * <code>getString</code> and <code>getInt</code>, can be used\n * to retrieve the data from these <code>ResultSet</code> objects.  If\n * a given form of metadata is not available, an empty <code>ResultSet</code>\n * will be returned. Additional columns beyond the columns defined to be\n * returned by the <code>ResultSet</code> object for a given method\n * can be defined by the JDBC driver vendor and must be accessed\n * by their <B>column label</B>.\n * <P>\n * Some <code>DatabaseMetaData</code> methods take arguments that are\n * String patterns.  These arguments all have names such as fooPattern.\n * Within a pattern String, \"%\" means match any substring of 0 or more\n * characters, and \"_\" means match any one character. Only metadata\n * entries matching the search pattern are returned. If a search pattern\n * argument is set to <code>null</code>, that argument's criterion will\n * be dropped from the search.\n * <P>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "procedureResultUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that it is not known whether the procedure returns\n     * a result.\n     * <P>\n     * A possible value for column <code>PROCEDURE_TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getProcedures</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureNoResult",
    "type" : "int",
    "comment" : "\n     * Indicates that the procedure does not return a result.\n     * <P>\n     * A possible value for column <code>PROCEDURE_TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getProcedures</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureReturnsResult",
    "type" : "int",
    "comment" : "\n     * Indicates that the procedure returns a result.\n     * <P>\n     * A possible value for column <code>PROCEDURE_TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getProcedures</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureColumnUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that type of the column is unknown.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureColumnIn",
    "type" : "int",
    "comment" : "\n     * Indicates that the column stores IN parameters.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureColumnInOut",
    "type" : "int",
    "comment" : "\n     * Indicates that the column stores INOUT parameters.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureColumnOut",
    "type" : "int",
    "comment" : "\n     * Indicates that the column stores OUT parameters.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n    * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureColumnReturn",
    "type" : "int",
    "comment" : "\n     * Indicates that the column stores return values.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureColumnResult",
    "type" : "int",
    "comment" : "\n     * Indicates that the column stores results.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureNoNulls",
    "type" : "int",
    "comment" : "\n     * Indicates that <code>NULL</code> values are not allowed.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureNullable",
    "type" : "int",
    "comment" : "\n     * Indicates that <code>NULL</code> values are allowed.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "procedureNullableUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that whether <code>NULL</code> values are allowed\n     * is unknown.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getProcedureColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "columnNoNulls",
    "type" : "int",
    "comment" : "\n     * Indicates that the column might not allow <code>NULL</code> values.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> returned by the method\n     * <code>getColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "columnNullable",
    "type" : "int",
    "comment" : "\n     * Indicates that the column definitely allows <code>NULL</code> values.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> returned by the method\n     * <code>getColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "columnNullableUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that the nullability of columns is unknown.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> returned by the method\n     * <code>getColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "bestRowTemporary",
    "type" : "int",
    "comment" : "\n     * Indicates that the scope of the best row identifier is\n     * very temporary, lasting only while the\n     * row is being used.\n     * <P>\n     * A possible value for the column\n     * <code>SCOPE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getBestRowIdentifier</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "bestRowTransaction",
    "type" : "int",
    "comment" : "\n     * Indicates that the scope of the best row identifier is\n     * the remainder of the current transaction.\n     * <P>\n     * A possible value for the column\n     * <code>SCOPE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getBestRowIdentifier</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "bestRowSession",
    "type" : "int",
    "comment" : "\n     * Indicates that the scope of the best row identifier is\n     * the remainder of the current session.\n     * <P>\n     * A possible value for the column\n     * <code>SCOPE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getBestRowIdentifier</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "bestRowUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that the best row identifier may or may not be a pseudo column.\n     * <P>\n     * A possible value for the column\n     * <code>PSEUDO_COLUMN</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getBestRowIdentifier</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "bestRowNotPseudo",
    "type" : "int",
    "comment" : "\n     * Indicates that the best row identifier is NOT a pseudo column.\n     * <P>\n     * A possible value for the column\n     * <code>PSEUDO_COLUMN</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getBestRowIdentifier</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "bestRowPseudo",
    "type" : "int",
    "comment" : "\n     * Indicates that the best row identifier is a pseudo column.\n     * <P>\n     * A possible value for the column\n     * <code>PSEUDO_COLUMN</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getBestRowIdentifier</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "versionColumnUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that this version column may or may not be a pseudo column.\n     * <P>\n     * A possible value for the column\n     * <code>PSEUDO_COLUMN</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getVersionColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "versionColumnNotPseudo",
    "type" : "int",
    "comment" : "\n     * Indicates that this version column is NOT a pseudo column.\n     * <P>\n     * A possible value for the column\n     * <code>PSEUDO_COLUMN</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getVersionColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "versionColumnPseudo",
    "type" : "int",
    "comment" : "\n     * Indicates that this version column is a pseudo column.\n     * <P>\n     * A possible value for the column\n     * <code>PSEUDO_COLUMN</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getVersionColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeyCascade",
    "type" : "int",
    "comment" : "\n     * For the column <code>UPDATE_RULE</code>,\n     * indicates that\n     * when the primary key is updated, the foreign key (imported key)\n     * is changed to agree with it.\n     * For the column <code>DELETE_RULE</code>,\n     * it indicates that\n     * when the primary key is deleted, rows that imported that key\n     * are deleted.\n     * <P>\n     * A possible value for the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code> in the\n     * <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeyRestrict",
    "type" : "int",
    "comment" : "\n     * For the column <code>UPDATE_RULE</code>, indicates that\n     * a primary key may not be updated if it has been imported by\n     * another table as a foreign key.\n     * For the column <code>DELETE_RULE</code>, indicates that\n     * a primary key may not be deleted if it has been imported by\n     * another table as a foreign key.\n     * <P>\n     * A possible value for the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code> in the\n     * <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeySetNull",
    "type" : "int",
    "comment" : "\n     * For the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code>, indicates that\n     * when the primary key is updated or deleted, the foreign key (imported key)\n     * is changed to <code>NULL</code>.\n     * <P>\n     * A possible value for the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code> in the\n     * <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeyNoAction",
    "type" : "int",
    "comment" : "\n     * For the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code>, indicates that\n     * if the primary key has been imported, it cannot be updated or deleted.\n     * <P>\n     * A possible value for the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code> in the\n     * <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeySetDefault",
    "type" : "int",
    "comment" : "\n     * For the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code>, indicates that\n     * if the primary key is updated or deleted, the foreign key (imported key)\n     * is set to the default value.\n     * <P>\n     * A possible value for the columns <code>UPDATE_RULE</code>\n     * and <code>DELETE_RULE</code> in the\n     * <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeyInitiallyDeferred",
    "type" : "int",
    "comment" : "\n     * Indicates deferrability.  See SQL-92 for a definition.\n     * <P>\n     * A possible value for the column <code>DEFERRABILITY</code>\n     * in the <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeyInitiallyImmediate",
    "type" : "int",
    "comment" : "\n     * Indicates deferrability.  See SQL-92 for a definition.\n     * <P>\n     * A possible value for the column <code>DEFERRABILITY</code>\n     * in the <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "importedKeyNotDeferrable",
    "type" : "int",
    "comment" : "\n     * Indicates deferrability.  See SQL-92 for a definition.\n     * <P>\n     * A possible value for the column <code>DEFERRABILITY</code>\n     * in the <code>ResultSet</code> objects returned by the methods\n     * <code>getImportedKeys</code>,  <code>getExportedKeys</code>,\n     * and <code>getCrossReference</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typeNoNulls",
    "type" : "int",
    "comment" : "\n     * Indicates that a <code>NULL</code> value is NOT allowed for this\n     * data type.\n     * <P>\n     * A possible value for column <code>NULLABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typeNullable",
    "type" : "int",
    "comment" : "\n     * Indicates that a <code>NULL</code> value is allowed for this\n     * data type.\n     * <P>\n     * A possible value for column <code>NULLABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typeNullableUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that it is not known whether a <code>NULL</code> value\n     * is allowed for this data type.\n     * <P>\n     * A possible value for column <code>NULLABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typePredNone",
    "type" : "int",
    "comment" : "\n     * Indicates that <code>WHERE</code> search clauses are not supported\n     * for this type.\n     * <P>\n     * A possible value for column <code>SEARCHABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typePredChar",
    "type" : "int",
    "comment" : "\n     * Indicates that the data type\n     * can be only be used in <code>WHERE</code> search clauses\n     * that  use <code>LIKE</code> predicates.\n     * <P>\n     * A possible value for column <code>SEARCHABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typePredBasic",
    "type" : "int",
    "comment" : "\n     * Indicates that the data type can be only be used in <code>WHERE</code>\n     * search clauses\n     * that do not use <code>LIKE</code> predicates.\n     * <P>\n     * A possible value for column <code>SEARCHABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "typeSearchable",
    "type" : "int",
    "comment" : "\n     * Indicates that all <code>WHERE</code> search clauses can be\n     * based on this type.\n     * <P>\n     * A possible value for column <code>SEARCHABLE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getTypeInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "tableIndexStatistic",
    "type" : "short",
    "comment" : "\n     * Indicates that this column contains table statistics that\n     * are returned in conjunction with a table's index descriptions.\n     * <P>\n     * A possible value for column <code>TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getIndexInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "tableIndexClustered",
    "type" : "short",
    "comment" : "\n     * Indicates that this table index is a clustered index.\n     * <P>\n     * A possible value for column <code>TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getIndexInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "tableIndexHashed",
    "type" : "short",
    "comment" : "\n     * Indicates that this table index is a hashed index.\n     * <P>\n     * A possible value for column <code>TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getIndexInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "tableIndexOther",
    "type" : "short",
    "comment" : "\n     * Indicates that this table index is not a clustered\n     * index, a hashed index, or table statistics;\n     * it is something other than these.\n     * <P>\n     * A possible value for column <code>TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getIndexInfo</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "attributeNoNulls",
    "type" : "short",
    "comment" : "\n     * Indicates that <code>NULL</code> values might not be allowed.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code> in the <code>ResultSet</code> object\n     * returned by the method <code>getAttributes</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "attributeNullable",
    "type" : "short",
    "comment" : "\n     * Indicates that <code>NULL</code> values are definitely allowed.\n     * <P>\n     * A possible value for the column <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getAttributes</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "attributeNullableUnknown",
    "type" : "short",
    "comment" : "\n     * Indicates that whether <code>NULL</code> values are allowed is not\n     * known.\n     * <P>\n     * A possible value for the column <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getAttributes</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "sqlStateXOpen",
    "type" : "int",
    "comment" : "\n     *  A possible return value for the method\n     * <code>DatabaseMetaData.getSQLStateType</code> which is used to indicate\n     * whether the value returned by the method\n     * <code>SQLException.getSQLState</code> is an\n     * X/Open (now know as Open Group) SQL CLI SQLSTATE value.\n     * <P>\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "sqlStateSQL",
    "type" : "int",
    "comment" : "\n     *  A possible return value for the method\n     * <code>DatabaseMetaData.getSQLStateType</code> which is used to indicate\n     * whether the value returned by the method\n     * <code>SQLException.getSQLState</code> is an SQLSTATE value.\n     * <P>\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "sqlStateSQL99",
    "type" : "int",
    "comment" : "\n     *  A possible return value for the method\n     * <code>DatabaseMetaData.getSQLStateType</code> which is used to indicate\n     * whether the value returned by the method\n     * <code>SQLException.getSQLState</code> is an SQL99 SQLSTATE value.\n     * <P>\n     * <b>Note:</b>This constant remains only for compatibility reasons. Developers\n     * should use the constant <code>sqlStateSQL</code> instead.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "functionColumnUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that type of the parameter or column is unknown.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getFunctionColumns</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "functionColumnIn",
    "type" : "int",
    "comment" : "\n     * Indicates that the parameter or column is an IN parameter.\n     * <P>\n     *  A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionColumnInOut",
    "type" : "int",
    "comment" : "\n     * Indicates that the parameter or column is an INOUT parameter.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionColumnOut",
    "type" : "int",
    "comment" : "\n     * Indicates that the parameter or column is an OUT parameter.\n     * <P>\n     * A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionReturn",
    "type" : "int",
    "comment" : "\n     * Indicates that the parameter or column is a return value.\n     * <P>\n     *  A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionColumnResult",
    "type" : "int",
    "comment" : "\n     * Indicates that the parameter or column is a column in a result set.\n     * <P>\n     *  A possible value for the column\n     * <code>COLUMN_TYPE</code>\n     * in the <code>ResultSet</code>\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionNoNulls",
    "type" : "int",
    "comment" : "\n     * Indicates that <code>NULL</code> values are not allowed.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionNullable",
    "type" : "int",
    "comment" : "\n     * Indicates that <code>NULL</code> values are allowed.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionNullableUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that whether <code>NULL</code> values are allowed\n     * is unknown.\n     * <P>\n     * A possible value for the column\n     * <code>NULLABLE</code>\n     * in the <code>ResultSet</code> object\n     * returned by the method <code>getFunctionColumns</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionResultUnknown",
    "type" : "int",
    "comment" : "\n     * Indicates that it is not known whether the function returns\n     * a result or a table.\n     * <P>\n     * A possible value for column <code>FUNCTION_TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getFunctions</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionNoTable",
    "type" : "int",
    "comment" : "\n     * Indicates that the function  does not return a table.\n     * <P>\n     * A possible value for column <code>FUNCTION_TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getFunctions</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "functionReturnsTable",
    "type" : "int",
    "comment" : "\n     * Indicates that the function  returns a table.\n     * <P>\n     * A possible value for column <code>FUNCTION_TYPE</code> in the\n     * <code>ResultSet</code> object returned by the method\n     * <code>getFunctions</code>.\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean allProceduresAreCallable() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the current user can call all the procedures\n     * returned by the method <code>getProcedures</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean allTablesAreSelectable() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the current user can use all the tables returned\n     * by the method <code>getTables</code> in a <code>SELECT</code>\n     * statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getURL() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the URL for this DBMS.\n     *\n     * @return the URL for this DBMS or <code>null</code> if it cannot be\n     *          generated\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getUserName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the user name as known to this database.\n     *\n     * @return the database user name\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isReadOnly() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database is in read-only mode.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean nullsAreSortedHigh() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether <code>NULL</code> values are sorted high.\n     * Sorted high means that <code>NULL</code> values\n     * sort higher than any other value in a domain.  In an ascending order,\n     * if this method returns <code>true</code>,  <code>NULL</code> values\n     * will appear at the end. By contrast, the method\n     * <code>nullsAreSortedAtEnd</code> indicates whether <code>NULL</code> values\n     * are sorted at the end regardless of sort order.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean nullsAreSortedLow() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether <code>NULL</code> values are sorted low.\n     * Sorted low means that <code>NULL</code> values\n     * sort lower than any other value in a domain.  In an ascending order,\n     * if this method returns <code>true</code>,  <code>NULL</code> values\n     * will appear at the beginning. By contrast, the method\n     * <code>nullsAreSortedAtStart</code> indicates whether <code>NULL</code> values\n     * are sorted at the beginning regardless of sort order.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean nullsAreSortedAtStart() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether <code>NULL</code> values are sorted at the start regardless\n     * of sort order.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean nullsAreSortedAtEnd() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether <code>NULL</code> values are sorted at the end regardless of\n     * sort order.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getDatabaseProductName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the name of this database product.\n     *\n     * @return database product name\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getDatabaseProductVersion() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the version number of this database product.\n     *\n     * @return database version number\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getDriverName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the name of this JDBC driver.\n     *\n     * @return JDBC driver name\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getDriverVersion() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the version number of this JDBC driver as a <code>String</code>.\n     *\n     * @return JDBC driver version\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDriverMajorVersion()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this JDBC driver's major version number.\n     *\n     * @return JDBC driver major version\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDriverMinorVersion()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this JDBC driver's minor version number.\n     *\n     * @return JDBC driver minor version number\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean usesLocalFiles() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database stores tables in a local file.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean usesLocalFilePerTable() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database uses a file for each table.\n     *\n     * @return <code>true</code> if this database uses a local file for each table;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsMixedCaseIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case unquoted SQL identifiers as\n     * case sensitive and as a result stores them in mixed case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean storesUpperCaseIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case unquoted SQL identifiers as\n     * case insensitive and stores them in upper case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean storesLowerCaseIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case unquoted SQL identifiers as\n     * case insensitive and stores them in lower case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean storesMixedCaseIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case unquoted SQL identifiers as\n     * case insensitive and stores them in mixed case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsMixedCaseQuotedIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case quoted SQL identifiers as\n     * case sensitive and as a result stores them in mixed case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean storesUpperCaseQuotedIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case quoted SQL identifiers as\n     * case insensitive and stores them in upper case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean storesLowerCaseQuotedIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case quoted SQL identifiers as\n     * case insensitive and stores them in lower case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean storesMixedCaseQuotedIdentifiers() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database treats mixed case quoted SQL identifiers as\n     * case insensitive and stores them in mixed case.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getIdentifierQuoteString() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the string used to quote SQL identifiers.\n     * This method returns a space \" \" if identifier quoting is not supported.\n     *\n     * @return the quoting string or a space if quoting is not supported\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getSQLKeywords() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves a comma-separated list of all of this database's SQL keywords\n     * that are NOT also SQL:2003 keywords.\n     *\n     * @return the list of this database's keywords that are not also\n     *         SQL:2003 keywords\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getNumericFunctions() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves a comma-separated list of math functions available with\n     * this database.  These are the Open /Open CLI math function names used in\n     * the JDBC function escape clause.\n     *\n     * @return the list of math functions supported by this database\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getStringFunctions() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves a comma-separated list of string functions available with\n     * this database.  These are the  Open Group CLI string function names used\n     * in the JDBC function escape clause.\n     *\n     * @return the list of string functions supported by this database\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getSystemFunctions() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves a comma-separated list of system functions available with\n     * this database.  These are the  Open Group CLI system function names used\n     * in the JDBC function escape clause.\n     *\n     * @return a list of system functions supported by this database\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getTimeDateFunctions() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves a comma-separated list of the time and date functions available\n     * with this database.\n     *\n     * @return the list of time and date functions supported by this database\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getSearchStringEscape() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the string that can be used to escape wildcard characters.\n     * This is the string that can be used to escape '_' or '%' in\n     * the catalog search parameters that are a pattern (and therefore use one\n     * of the wildcard characters).\n     *\n     * <P>The '_' character represents any single character;\n     * the '%' character represents any sequence of zero or\n     * more characters.\n     *\n     * @return the string used to escape wildcard characters\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getExtraNameCharacters() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves all the \"extra\" characters that can be used in unquoted\n     * identifier names (those beyond a-z, A-Z, 0-9 and _).\n     *\n     * @return the string containing the extra characters\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsAlterTableWithAddColumn() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports <code>ALTER TABLE</code>\n     * with add column.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsAlterTableWithDropColumn() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports <code>ALTER TABLE</code>\n     * with drop column.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsColumnAliasing() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports column aliasing.\n     *\n     * <P>If so, the SQL AS clause can be used to provide names for\n     * computed columns or to provide alias names for columns as\n     * required.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean nullPlusNonNullIsNull() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports concatenations between\n     * <code>NULL</code> and non-<code>NULL</code> values being\n     * <code>NULL</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsConvert() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the JDBC scalar function\n     * <code>CONVERT</code> for the conversion of one JDBC type to another.\n     * The JDBC types are the generic SQL data types defined\n     * in <code>java.sql.Types</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsConvert(int fromType, int toType) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the JDBC scalar function\n     * <code>CONVERT</code> for conversions between the JDBC types <i>fromType</i>\n     * and <i>toType</i>.  The JDBC types are the generic SQL data types defined\n     * in <code>java.sql.Types</code>.\n     *\n     * @param fromType the type to convert from; one of the type codes from\n     *        the class <code>java.sql.Types</code>\n     * @param toType the type to convert to; one of the type codes from\n     *        the class <code>java.sql.Types</code>\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @see Types\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsTableCorrelationNames() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports table correlation names.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsDifferentTableCorrelationNames() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether, when table correlation names are supported, they\n     * are restricted to being different from the names of the tables.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsExpressionsInOrderBy() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports expressions in\n     * <code>ORDER BY</code> lists.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsOrderByUnrelated() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports using a column that is\n     * not in the <code>SELECT</code> statement in an\n     * <code>ORDER BY</code> clause.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsGroupBy() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports some form of\n     * <code>GROUP BY</code> clause.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsGroupByUnrelated() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports using a column that is\n     * not in the <code>SELECT</code> statement in a\n     * <code>GROUP BY</code> clause.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsGroupByBeyondSelect() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports using columns not included in\n     * the <code>SELECT</code> statement in a <code>GROUP BY</code> clause\n     * provided that all of the columns in the <code>SELECT</code> statement\n     * are included in the <code>GROUP BY</code> clause.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsLikeEscapeClause() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports specifying a\n     * <code>LIKE</code> escape clause.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsMultipleResultSets() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports getting multiple\n     * <code>ResultSet</code> objects from a single call to the\n     * method <code>execute</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsMultipleTransactions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database allows having multiple\n     * transactions open at once (on different connections).\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsNonNullableColumns() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether columns in this database may be defined as non-nullable.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsMinimumSQLGrammar() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the ODBC Minimum SQL grammar.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCoreSQLGrammar() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the ODBC Core SQL grammar.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsExtendedSQLGrammar() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the ODBC Extended SQL grammar.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsANSI92EntryLevelSQL() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the ANSI92 entry level SQL\n     * grammar.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsANSI92IntermediateSQL() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsANSI92FullSQL() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the ANSI92 full SQL grammar supported.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsIntegrityEnhancementFacility() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the SQL Integrity\n     * Enhancement Facility.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsOuterJoins() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports some form of outer join.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsFullOuterJoins() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports full nested outer joins.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsLimitedOuterJoins() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database provides limited support for outer\n     * joins.  (This will be <code>true</code> if the method\n     * <code>supportsFullOuterJoins</code> returns <code>true</code>).\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getSchemaTerm() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the database vendor's preferred term for \"schema\".\n     *\n     * @return the vendor term for \"schema\"\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getProcedureTerm() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the database vendor's preferred term for \"procedure\".\n     *\n     * @return the vendor term for \"procedure\"\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getCatalogTerm() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the database vendor's preferred term for \"catalog\".\n     *\n     * @return the vendor term for \"catalog\"\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCatalogAtStart() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a catalog appears at the start of a fully qualified\n     * table name.  If not, the catalog appears at the end.\n     *\n     * @return <code>true</code> if the catalog name appears at the beginning\n     *         of a fully qualified table name; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getCatalogSeparator() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the <code>String</code> that this database uses as the\n     * separator between a catalog and table name.\n     *\n     * @return the separator string\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSchemasInDataManipulation() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a schema name can be used in a data manipulation statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSchemasInProcedureCalls() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a schema name can be used in a procedure call statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSchemasInTableDefinitions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a schema name can be used in a table definition statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSchemasInIndexDefinitions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a schema name can be used in an index definition statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSchemasInPrivilegeDefinitions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a schema name can be used in a privilege definition statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCatalogsInDataManipulation() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a catalog name can be used in a data manipulation statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCatalogsInProcedureCalls() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a catalog name can be used in a procedure call statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCatalogsInTableDefinitions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a catalog name can be used in a table definition statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCatalogsInIndexDefinitions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a catalog name can be used in an index definition statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a catalog name can be used in a privilege definition statement.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsPositionedDelete() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports positioned <code>DELETE</code>\n     * statements.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsPositionedUpdate() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports positioned <code>UPDATE</code>\n     * statements.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSelectForUpdate() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports <code>SELECT FOR UPDATE</code>\n     * statements.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsStoredProcedures() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports stored procedure calls\n     * that use the stored procedure escape syntax.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSubqueriesInComparisons() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports subqueries in comparison\n     * expressions.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSubqueriesInExists() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports subqueries in\n     * <code>EXISTS</code> expressions.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSubqueriesInIns() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports subqueries in\n     * <code>IN</code> expressions.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSubqueriesInQuantifieds() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports subqueries in quantified\n     * expressions.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsCorrelatedSubqueries() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports correlated subqueries.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsUnion() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports SQL <code>UNION</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsUnionAll() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports SQL <code>UNION ALL</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsOpenCursorsAcrossCommit() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports keeping cursors open\n     * across commits.\n     *\n     * @return <code>true</code> if cursors always remain open;\n     *       <code>false</code> if they might not remain open\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsOpenCursorsAcrossRollback() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports keeping cursors open\n     * across rollbacks.\n     *\n     * @return <code>true</code> if cursors always remain open;\n     *       <code>false</code> if they might not remain open\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsOpenStatementsAcrossCommit() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports keeping statements open\n     * across commits.\n     *\n     * @return <code>true</code> if statements always remain open;\n     *       <code>false</code> if they might not remain open\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsOpenStatementsAcrossRollback() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports keeping statements open\n     * across rollbacks.\n     *\n     * @return <code>true</code> if statements always remain open;\n     *       <code>false</code> if they might not remain open\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxBinaryLiteralLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of hex characters this database allows in an\n     * inline binary literal.\n     *\n     * @return max the maximum length (in hex characters) for a binary literal;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxCharLiteralLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters this database allows\n     * for a character literal.\n     *\n     * @return the maximum number of characters allowed for a character literal;\n     *      a result of zero means that there is no limit or the limit is\n     *      not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxColumnNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters this database allows\n     * for a column name.\n     *\n     * @return the maximum number of characters allowed for a column name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxColumnsInGroupBy() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of columns this database allows in a\n     * <code>GROUP BY</code> clause.\n     *\n     * @return the maximum number of columns allowed;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxColumnsInIndex() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of columns this database allows in an index.\n     *\n     * @return the maximum number of columns allowed;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxColumnsInOrderBy() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of columns this database allows in an\n     * <code>ORDER BY</code> clause.\n     *\n     * @return the maximum number of columns allowed;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxColumnsInSelect() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of columns this database allows in a\n     * <code>SELECT</code> list.\n     *\n     * @return the maximum number of columns allowed;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxColumnsInTable() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of columns this database allows in a table.\n     *\n     * @return the maximum number of columns allowed;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxConnections() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of concurrent connections to this\n     * database that are possible.\n     *\n     * @return the maximum number of active connections possible at one time;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxCursorNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters that this database allows in a\n     * cursor name.\n     *\n     * @return the maximum number of characters allowed in a cursor name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxIndexLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of bytes this database allows for an\n     * index, including all of the parts of the index.\n     *\n     * @return the maximum number of bytes allowed; this limit includes the\n     *      composite of all the constituent parts of the index;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxSchemaNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters that this database allows in a\n     * schema name.\n     *\n     * @return the maximum number of characters allowed in a schema name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxProcedureNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters that this database allows in a\n     * procedure name.\n     *\n     * @return the maximum number of characters allowed in a procedure name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxCatalogNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters that this database allows in a\n     * catalog name.\n     *\n     * @return the maximum number of characters allowed in a catalog name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxRowSize() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of bytes this database allows in\n     * a single row.\n     *\n     * @return the maximum number of bytes allowed for a row; a result of\n     *         zero means that there is no limit or the limit is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean doesMaxRowSizeIncludeBlobs() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the return value for the method\n     * <code>getMaxRowSize</code> includes the SQL data types\n     * <code>LONGVARCHAR</code> and <code>LONGVARBINARY</code>.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxStatementLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters this database allows in\n     * an SQL statement.\n     *\n     * @return the maximum number of characters allowed for an SQL statement;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxStatements() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of active statements to this database\n     * that can be open at the same time.\n     *\n     * @return the maximum number of statements that can be open at one time;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxTableNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters this database allows in\n     * a table name.\n     *\n     * @return the maximum number of characters allowed for a table name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxTablesInSelect() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of tables this database allows in a\n     * <code>SELECT</code> statement.\n     *\n     * @return the maximum number of tables allowed in a <code>SELECT</code>\n     *         statement; a result of zero means that there is no limit or\n     *         the limit is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxUserNameLength() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of characters this database allows in\n     * a user name.\n     *\n     * @return the maximum number of characters allowed for a user name;\n     *      a result of zero means that there is no limit or the limit\n     *      is not known\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDefaultTransactionIsolation() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this database's default transaction isolation level.  The\n     * possible values are defined in <code>java.sql.Connection</code>.\n     *\n     * @return the default isolation level\n     * @exception SQLException if a database access error occurs\n     * @see Connection\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsTransactions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports transactions. If not, invoking the\n     * method <code>commit</code> is a noop, and the isolation level is\n     * <code>TRANSACTION_NONE</code>.\n     *\n     * @return <code>true</code> if transactions are supported;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsTransactionIsolationLevel(int level) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the given transaction isolation level.\n     *\n     * @param level one of the transaction isolation levels defined in\n     *         <code>java.sql.Connection</code>\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @see Connection\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsDataDefinitionAndDataManipulationTransactions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports both data definition and\n     * data manipulation statements within a transaction.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsDataManipulationTransactionsOnly() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports only data manipulation\n     * statements within a transaction.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean dataDefinitionCausesTransactionCommit() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a data definition statement within a transaction forces\n     * the transaction to commit.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean dataDefinitionIgnoredInTransactions() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database ignores a data definition statement\n     * within a transaction.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the stored procedures available in the given\n     * catalog.\n     * <P>\n     * Only procedure descriptions matching the schema and\n     * procedure name criteria are returned.  They are ordered by\n     * <code>PROCEDURE_CAT</code>, <code>PROCEDURE_SCHEM</code>,\n     * <code>PROCEDURE_NAME</code> and <code>SPECIFIC_ NAME</code>.\n     *\n     * <P>Each procedure description has the the following columns:\n     *  <OL>\n     *  <LI><B>PROCEDURE_CAT</B> String => procedure catalog (may be <code>null</code>)\n     *  <LI><B>PROCEDURE_SCHEM</B> String => procedure schema (may be <code>null</code>)\n     *  <LI><B>PROCEDURE_NAME</B> String => procedure name\n     *  <LI> reserved for future use\n     *  <LI> reserved for future use\n     *  <LI> reserved for future use\n     *  <LI><B>REMARKS</B> String => explanatory comment on the procedure\n     *  <LI><B>PROCEDURE_TYPE</B> short => kind of procedure:\n     *      <UL>\n     *      <LI> procedureResultUnknown - Cannot determine if  a return value\n     *       will be returned\n     *      <LI> procedureNoResult - Does not return a return value\n     *      <LI> procedureReturnsResult - Returns a return value\n     *      </UL>\n     *  <LI><B>SPECIFIC_NAME</B> String  => The name which uniquely identifies this\n     * procedure within its schema.\n     *  </OL>\n     * <p>\n     * A user may not have permissions to execute any of the procedures that are\n     * returned by <code>getProcedures</code>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param procedureNamePattern a procedure name pattern; must match the\n     *        procedure name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a procedure description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the given catalog's stored procedure parameter\n     * and result columns.\n     *\n     * <P>Only descriptions matching the schema, procedure and\n     * parameter name criteria are returned.  They are ordered by\n     * PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value,\n     * if any, is first. Next are the parameter descriptions in call\n     * order. The column descriptions follow in column number order.\n     *\n     * <P>Each row in the <code>ResultSet</code> is a parameter description or\n     * column description with the following fields:\n     *  <OL>\n     *  <LI><B>PROCEDURE_CAT</B> String => procedure catalog (may be <code>null</code>)\n     *  <LI><B>PROCEDURE_SCHEM</B> String => procedure schema (may be <code>null</code>)\n     *  <LI><B>PROCEDURE_NAME</B> String => procedure name\n     *  <LI><B>COLUMN_NAME</B> String => column/parameter name\n     *  <LI><B>COLUMN_TYPE</B> Short => kind of column/parameter:\n     *      <UL>\n     *      <LI> procedureColumnUnknown - nobody knows\n     *      <LI> procedureColumnIn - IN parameter\n     *      <LI> procedureColumnInOut - INOUT parameter\n     *      <LI> procedureColumnOut - OUT parameter\n     *      <LI> procedureColumnReturn - procedure return value\n     *      <LI> procedureColumnResult - result column in <code>ResultSet</code>\n     *      </UL>\n     *  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types\n     *  <LI><B>TYPE_NAME</B> String => SQL type name, for a UDT type the\n     *  type name is fully qualified\n     *  <LI><B>PRECISION</B> int => precision\n     *  <LI><B>LENGTH</B> int => length in bytes of data\n     *  <LI><B>SCALE</B> short => scale -  null is returned for data types where\n     * SCALE is not applicable.\n     *  <LI><B>RADIX</B> short => radix\n     *  <LI><B>NULLABLE</B> short => can it contain NULL.\n     *      <UL>\n     *      <LI> procedureNoNulls - does not allow NULL values\n     *      <LI> procedureNullable - allows NULL values\n     *      <LI> procedureNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>REMARKS</B> String => comment describing parameter/column\n     *  <LI><B>COLUMN_DEF</B> String => default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be <code>null</code>)\n     *      <UL>\n     *      <LI> The string NULL (not enclosed in quotes) - if NULL was specified as the default value\n     *      <LI> TRUNCATE (not enclosed in quotes)        - if the specified default value cannot be represented without truncation\n     *      <LI> NULL                                     - if a default value was not specified\n     *      </UL>\n     *  <LI><B>SQL_DATA_TYPE</B> int  => reserved for future use\n     *  <LI><B>SQL_DATETIME_SUB</B> int  => reserved for future use\n     *  <LI><B>CHAR_OCTET_LENGTH</B> int  => the maximum length of binary and character based columns.  For any other datatype the returned value is a\n     * NULL\n     *  <LI><B>ORDINAL_POSITION</B> int  => the ordinal position, starting from 1, for the input and output parameters for a procedure. A value of 0\n     *is returned if this row describes the procedure's return value.  For result set columns, it is the\n     *ordinal position of the column in the result set starting from 1.  If there are\n     *multiple result sets, the column ordinal positions are implementation\n     * defined.\n     *  <LI><B>IS_NULLABLE</B> String  => ISO rules are used to determine the nullability for a column.\n     *       <UL>\n     *       <LI> YES           --- if the column can include NULLs\n     *       <LI> NO            --- if the column cannot include NULLs\n     *       <LI> empty string  --- if the nullability for the\n     * column is unknown\n     *       </UL>\n     *  <LI><B>SPECIFIC_NAME</B> String  => the name which uniquely identifies this procedure within its schema.\n     *  </OL>\n     *\n     * <P><B>Note:</B> Some databases may not return the column\n     * descriptions for a procedure.\n     *\n     * <p>The PRECISION column represents the specified column size for the given column.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. Null is returned for data types where the\n     * column size is not applicable.\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param procedureNamePattern a procedure name pattern; must match the\n     *        procedure name as it is stored in the database\n     * @param columnNamePattern a column name pattern; must match the column name\n     *        as it is stored in the database\n     * @return <code>ResultSet</code> - each row describes a stored procedure parameter or\n     *      column\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the tables available in the given catalog.\n     * Only table descriptions matching the catalog, schema, table\n     * name and type criteria are returned.  They are ordered by\n     * <code>TABLE_TYPE</code>, <code>TABLE_CAT</code>,\n     * <code>TABLE_SCHEM</code> and <code>TABLE_NAME</code>.\n     * <P>\n     * Each table description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>TABLE_TYPE</B> String => table type.  Typical types are \"TABLE\",\n     *                  \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",\n     *                  \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".\n     *  <LI><B>REMARKS</B> String => explanatory comment on the table\n     *  <LI><B>TYPE_CAT</B> String => the types catalog (may be <code>null</code>)\n     *  <LI><B>TYPE_SCHEM</B> String => the types schema (may be <code>null</code>)\n     *  <LI><B>TYPE_NAME</B> String => type name (may be <code>null</code>)\n     *  <LI><B>SELF_REFERENCING_COL_NAME</B> String => name of the designated\n     *                  \"identifier\" column of a typed table (may be <code>null</code>)\n     *  <LI><B>REF_GENERATION</B> String => specifies how values in\n     *                  SELF_REFERENCING_COL_NAME are created. Values are\n     *                  \"SYSTEM\", \"USER\", \"DERIVED\". (may be <code>null</code>)\n     *  </OL>\n     *\n     * <P><B>Note:</B> Some databases may not return information for\n     * all tables.\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param tableNamePattern a table name pattern; must match the\n     *        table name as it is stored in the database\n     * @param types a list of table types, which must be from the list of table types\n     *         returned from {@link #getTableTypes},to include; <code>null</code> returns\n     * all types\n     * @return <code>ResultSet</code> - each row is a table description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     ",
    "links" : [ "#getTableTypes" ]
  }, {
    "name" : " ResultSet getSchemas() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves the schema names available in this database.  The results\n     * are ordered by <code>TABLE_CATALOG</code> and\n     * <code>TABLE_SCHEM</code>.\n     *\n     * <P>The schema columns are:\n     *  <OL>\n     *  <LI><B>TABLE_SCHEM</B> String => schema name\n     *  <LI><B>TABLE_CATALOG</B> String => catalog name (may be <code>null</code>)\n     *  </OL>\n     *\n     * @return a <code>ResultSet</code> object in which each row is a\n     *         schema description\n     * @exception SQLException if a database access error occurs\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getCatalogs() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves the catalog names available in this database.  The results\n     * are ordered by catalog name.\n     *\n     * <P>The catalog column is:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => catalog name\n     *  </OL>\n     *\n     * @return a <code>ResultSet</code> object in which each row has a\n     *         single <code>String</code> column that is a catalog name\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getTableTypes() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves the table types available in this database.  The results\n     * are ordered by table type.\n     *\n     * <P>The table type is:\n     *  <OL>\n     *  <LI><B>TABLE_TYPE</B> String => table type.  Typical types are \"TABLE\",\n     *                  \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",\n     *                  \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".\n     *  </OL>\n     *\n     * @return a <code>ResultSet</code> object in which each row has a\n     *         single <code>String</code> column that is a table type\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of table columns available in\n     * the specified catalog.\n     *\n     * <P>Only column descriptions matching the catalog, schema, table\n     * and column name criteria are returned.  They are ordered by\n     * <code>TABLE_CAT</code>,<code>TABLE_SCHEM</code>,\n     * <code>TABLE_NAME</code>, and <code>ORDINAL_POSITION</code>.\n     *\n     * <P>Each column description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types\n     *  <LI><B>TYPE_NAME</B> String => Data source dependent type name,\n     *  for a UDT the type name is fully qualified\n     *  <LI><B>COLUMN_SIZE</B> int => column size.\n     *  <LI><B>BUFFER_LENGTH</B> is not used.\n     *  <LI><B>DECIMAL_DIGITS</B> int => the number of fractional digits. Null is returned for data types where\n     * DECIMAL_DIGITS is not applicable.\n     *  <LI><B>NUM_PREC_RADIX</B> int => Radix (typically either 10 or 2)\n     *  <LI><B>NULLABLE</B> int => is NULL allowed.\n     *      <UL>\n     *      <LI> columnNoNulls - might not allow <code>NULL</code> values\n     *      <LI> columnNullable - definitely allows <code>NULL</code> values\n     *      <LI> columnNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>REMARKS</B> String => comment describing column (may be <code>null</code>)\n     *  <LI><B>COLUMN_DEF</B> String => default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be <code>null</code>)\n     *  <LI><B>SQL_DATA_TYPE</B> int => unused\n     *  <LI><B>SQL_DATETIME_SUB</B> int => unused\n     *  <LI><B>CHAR_OCTET_LENGTH</B> int => for char types the\n     *       maximum number of bytes in the column\n     *  <LI><B>ORDINAL_POSITION</B> int => index of column in table\n     *      (starting at 1)\n     *  <LI><B>IS_NULLABLE</B> String  => ISO rules are used to determine the nullability for a column.\n     *       <UL>\n     *       <LI> YES           --- if the column can include NULLs\n     *       <LI> NO            --- if the column cannot include NULLs\n     *       <LI> empty string  --- if the nullability for the\n     * column is unknown\n     *       </UL>\n     *  <LI><B>SCOPE_CATALOG</B> String => catalog of table that is the scope\n     *      of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)\n     *  <LI><B>SCOPE_SCHEMA</B> String => schema of table that is the scope\n     *      of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)\n     *  <LI><B>SCOPE_TABLE</B> String => table name that this the scope\n     *      of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)\n     *  <LI><B>SOURCE_DATA_TYPE</B> short => source type of a distinct type or user-generated\n     *      Ref type, SQL type from java.sql.Types (<code>null</code> if DATA_TYPE\n     *      isn't DISTINCT or user-generated REF)\n     *   <LI><B>IS_AUTOINCREMENT</B> String  => Indicates whether this column is auto incremented\n     *       <UL>\n     *       <LI> YES           --- if the column is auto incremented\n     *       <LI> NO            --- if the column is not auto incremented\n     *       <LI> empty string  --- if it cannot be determined whether the column is auto incremented\n     *       </UL>\n     *   <LI><B>IS_GENERATEDCOLUMN</B> String  => Indicates whether this is a generated column\n     *       <UL>\n     *       <LI> YES           --- if this a generated column\n     *       <LI> NO            --- if this not a generated column\n     *       <LI> empty string  --- if it cannot be determined whether this is a generated column\n     *       </UL>\n     *  </OL>\n     *\n     * <p>The COLUMN_SIZE column specifies the column size for the given column.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. Null is returned for data types where the\n     * column size is not applicable.\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param tableNamePattern a table name pattern; must match the\n     *        table name as it is stored in the database\n     * @param columnNamePattern a column name pattern; must match the column\n     *        name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a column description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the access rights for a table's columns.\n     *\n     * <P>Only privileges matching the column name criteria are\n     * returned.  They are ordered by COLUMN_NAME and PRIVILEGE.\n     *\n     * <P>Each privilige description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>GRANTOR</B> String => grantor of access (may be <code>null</code>)\n     *  <LI><B>GRANTEE</B> String => grantee of access\n     *  <LI><B>PRIVILEGE</B> String => name of access (SELECT,\n     *      INSERT, UPDATE, REFRENCES, ...)\n     *  <LI><B>IS_GRANTABLE</B> String => \"YES\" if grantee is permitted\n     *      to grant to others; \"NO\" if not; <code>null</code> if unknown\n     *  </OL>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name as it is\n     *        stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is\n     *        stored in the database\n     * @param columnNamePattern a column name pattern; must match the column\n     *        name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a column privilege description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the access rights for each table available\n     * in a catalog. Note that a table privilege applies to one or\n     * more columns in the table. It would be wrong to assume that\n     * this privilege applies to all columns (this may be true for\n     * some systems but is not true for all.)\n     *\n     * <P>Only privileges matching the schema and table name\n     * criteria are returned.  They are ordered by\n     * <code>TABLE_CAT</code>,\n     * <code>TABLE_SCHEM</code>, <code>TABLE_NAME</code>,\n     * and <code>PRIVILEGE</code>.\n     *\n     * <P>Each privilige description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>GRANTOR</B> String => grantor of access (may be <code>null</code>)\n     *  <LI><B>GRANTEE</B> String => grantee of access\n     *  <LI><B>PRIVILEGE</B> String => name of access (SELECT,\n     *      INSERT, UPDATE, REFRENCES, ...)\n     *  <LI><B>IS_GRANTABLE</B> String => \"YES\" if grantee is permitted\n     *      to grant to others; \"NO\" if not; <code>null</code> if unknown\n     *  </OL>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param tableNamePattern a table name pattern; must match the\n     *        table name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a table privilege description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of a table's optimal set of columns that\n     * uniquely identifies a row. They are ordered by SCOPE.\n     *\n     * <P>Each column description has the following columns:\n     *  <OL>\n     *  <LI><B>SCOPE</B> short => actual scope of result\n     *      <UL>\n     *      <LI> bestRowTemporary - very temporary, while using row\n     *      <LI> bestRowTransaction - valid for remainder of current transaction\n     *      <LI> bestRowSession - valid for remainder of current session\n     *      </UL>\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types\n     *  <LI><B>TYPE_NAME</B> String => Data source dependent type name,\n     *  for a UDT the type name is fully qualified\n     *  <LI><B>COLUMN_SIZE</B> int => precision\n     *  <LI><B>BUFFER_LENGTH</B> int => not used\n     *  <LI><B>DECIMAL_DIGITS</B> short  => scale - Null is returned for data types where\n     * DECIMAL_DIGITS is not applicable.\n     *  <LI><B>PSEUDO_COLUMN</B> short => is this a pseudo column\n     *      like an Oracle ROWID\n     *      <UL>\n     *      <LI> bestRowUnknown - may or may not be pseudo column\n     *      <LI> bestRowNotPseudo - is NOT a pseudo column\n     *      <LI> bestRowPseudo - is a pseudo column\n     *      </UL>\n     *  </OL>\n     *\n     * <p>The COLUMN_SIZE column represents the specified column size for the given column.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. Null is returned for data types where the\n     * column size is not applicable.\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in the database\n     * @param scope the scope of interest; use same values as SCOPE\n     * @param nullable include columns that are nullable.\n     * @return <code>ResultSet</code> - each row is a column description\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of a table's columns that are automatically\n     * updated when any value in a row is updated.  They are\n     * unordered.\n     *\n     * <P>Each column description has the following columns:\n     *  <OL>\n     *  <LI><B>SCOPE</B> short => is not used\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>DATA_TYPE</B> int => SQL data type from <code>java.sql.Types</code>\n     *  <LI><B>TYPE_NAME</B> String => Data source-dependent type name\n     *  <LI><B>COLUMN_SIZE</B> int => precision\n     *  <LI><B>BUFFER_LENGTH</B> int => length of column value in bytes\n     *  <LI><B>DECIMAL_DIGITS</B> short  => scale - Null is returned for data types where\n     * DECIMAL_DIGITS is not applicable.\n     *  <LI><B>PSEUDO_COLUMN</B> short => whether this is pseudo column\n     *      like an Oracle ROWID\n     *      <UL>\n     *      <LI> versionColumnUnknown - may or may not be pseudo column\n     *      <LI> versionColumnNotPseudo - is NOT a pseudo column\n     *      <LI> versionColumnPseudo - is a pseudo column\n     *      </UL>\n     *  </OL>\n     *\n     * <p>The COLUMN_SIZE column represents the specified column size for the given column.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. Null is returned for data types where the\n     * column size is not applicable.\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in the database\n     * @return a <code>ResultSet</code> object in which each row is a\n     *         column description\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the given table's primary key columns.  They\n     * are ordered by COLUMN_NAME.\n     *\n     * <P>Each primary key column description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>COLUMN_NAME</B> String => column name\n     *  <LI><B>KEY_SEQ</B> short => sequence number within primary key( a value\n     *  of 1 represents the first column of the primary key, a value of 2 would\n     *  represent the second column within the primary key).\n     *  <LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)\n     *  </OL>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in the database\n     * @return <code>ResultSet</code> - each row is a primary key column description\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the primary key columns that are\n     * referenced by the given table's foreign key columns (the primary keys\n     * imported by a table).  They are ordered by PKTABLE_CAT,\n     * PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.\n     *\n     * <P>Each primary key column description has the following columns:\n     *  <OL>\n     *  <LI><B>PKTABLE_CAT</B> String => primary key table catalog\n     *      being imported (may be <code>null</code>)\n     *  <LI><B>PKTABLE_SCHEM</B> String => primary key table schema\n     *      being imported (may be <code>null</code>)\n     *  <LI><B>PKTABLE_NAME</B> String => primary key table name\n     *      being imported\n     *  <LI><B>PKCOLUMN_NAME</B> String => primary key column name\n     *      being imported\n     *  <LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)\n     *  <LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)\n     *  <LI><B>FKTABLE_NAME</B> String => foreign key table name\n     *  <LI><B>FKCOLUMN_NAME</B> String => foreign key column name\n     *  <LI><B>KEY_SEQ</B> short => sequence number within a foreign key( a value\n     *  of 1 represents the first column of the foreign key, a value of 2 would\n     *  represent the second column within the foreign key).\n     *  <LI><B>UPDATE_RULE</B> short => What happens to a\n     *       foreign key when the primary key is updated:\n     *      <UL>\n     *      <LI> importedNoAction - do not allow update of primary\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - change imported key to agree\n     *               with primary key update\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code>\n     *               if its primary key has been updated\n     *      <LI> importedKeySetDefault - change imported key to default values\n     *               if its primary key has been updated\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      </UL>\n     *  <LI><B>DELETE_RULE</B> short => What happens to\n     *      the foreign key when primary is deleted.\n     *      <UL>\n     *      <LI> importedKeyNoAction - do not allow delete of primary\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - delete rows that import a deleted key\n     *      <LI> importedKeySetNull - change imported key to NULL if\n     *               its primary key has been deleted\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      <LI> importedKeySetDefault - change imported key to default if\n     *               its primary key has been deleted\n     *      </UL>\n     *  <LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)\n     *  <LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)\n     *  <LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key\n     *      constraints be deferred until commit\n     *      <UL>\n     *      <LI> importedKeyInitiallyDeferred - see SQL92 for definition\n     *      <LI> importedKeyInitiallyImmediate - see SQL92 for definition\n     *      <LI> importedKeyNotDeferrable - see SQL92 for definition\n     *      </UL>\n     *  </OL>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in the database\n     * @return <code>ResultSet</code> - each row is a primary key column description\n     * @exception SQLException if a database access error occurs\n     * @see #getExportedKeys\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the foreign key columns that reference the\n     * given table's primary key columns (the foreign keys exported by a\n     * table).  They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,\n     * FKTABLE_NAME, and KEY_SEQ.\n     *\n     * <P>Each foreign key column description has the following columns:\n     *  <OL>\n     *  <LI><B>PKTABLE_CAT</B> String => primary key table catalog (may be <code>null</code>)\n     *  <LI><B>PKTABLE_SCHEM</B> String => primary key table schema (may be <code>null</code>)\n     *  <LI><B>PKTABLE_NAME</B> String => primary key table name\n     *  <LI><B>PKCOLUMN_NAME</B> String => primary key column name\n     *  <LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)\n     *      being exported (may be <code>null</code>)\n     *  <LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)\n     *      being exported (may be <code>null</code>)\n     *  <LI><B>FKTABLE_NAME</B> String => foreign key table name\n     *      being exported\n     *  <LI><B>FKCOLUMN_NAME</B> String => foreign key column name\n     *      being exported\n     *  <LI><B>KEY_SEQ</B> short => sequence number within foreign key( a value\n     *  of 1 represents the first column of the foreign key, a value of 2 would\n     *  represent the second column within the foreign key).\n     *  <LI><B>UPDATE_RULE</B> short => What happens to\n     *       foreign key when primary is updated:\n     *      <UL>\n     *      <LI> importedNoAction - do not allow update of primary\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - change imported key to agree\n     *               with primary key update\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code> if\n     *               its primary key has been updated\n     *      <LI> importedKeySetDefault - change imported key to default values\n     *               if its primary key has been updated\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      </UL>\n     *  <LI><B>DELETE_RULE</B> short => What happens to\n     *      the foreign key when primary is deleted.\n     *      <UL>\n     *      <LI> importedKeyNoAction - do not allow delete of primary\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - delete rows that import a deleted key\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code> if\n     *               its primary key has been deleted\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      <LI> importedKeySetDefault - change imported key to default if\n     *               its primary key has been deleted\n     *      </UL>\n     *  <LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)\n     *  <LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)\n     *  <LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key\n     *      constraints be deferred until commit\n     *      <UL>\n     *      <LI> importedKeyInitiallyDeferred - see SQL92 for definition\n     *      <LI> importedKeyInitiallyImmediate - see SQL92 for definition\n     *      <LI> importedKeyNotDeferrable - see SQL92 for definition\n     *      </UL>\n     *  </OL>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in this database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in this database\n     * @return a <code>ResultSet</code> object in which each row is a\n     *         foreign key column description\n     * @exception SQLException if a database access error occurs\n     * @see #getImportedKeys\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getCrossReference(String parentCatalog, String parentSchema, String parentTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the foreign key columns in the given foreign key\n     * table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table).\n     * The number of columns returned from the parent table must match the number of\n     * columns that make up the foreign key.  They\n     * are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and\n     * KEY_SEQ.\n     *\n     * <P>Each foreign key column description has the following columns:\n     *  <OL>\n     *  <LI><B>PKTABLE_CAT</B> String => parent key table catalog (may be <code>null</code>)\n     *  <LI><B>PKTABLE_SCHEM</B> String => parent key table schema (may be <code>null</code>)\n     *  <LI><B>PKTABLE_NAME</B> String => parent key table name\n     *  <LI><B>PKCOLUMN_NAME</B> String => parent key column name\n     *  <LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)\n     *      being exported (may be <code>null</code>)\n     *  <LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)\n     *      being exported (may be <code>null</code>)\n     *  <LI><B>FKTABLE_NAME</B> String => foreign key table name\n     *      being exported\n     *  <LI><B>FKCOLUMN_NAME</B> String => foreign key column name\n     *      being exported\n     *  <LI><B>KEY_SEQ</B> short => sequence number within foreign key( a value\n     *  of 1 represents the first column of the foreign key, a value of 2 would\n     *  represent the second column within the foreign key).\n     *  <LI><B>UPDATE_RULE</B> short => What happens to\n     *       foreign key when parent key is updated:\n     *      <UL>\n     *      <LI> importedNoAction - do not allow update of parent\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - change imported key to agree\n     *               with parent key update\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code> if\n     *               its parent key has been updated\n     *      <LI> importedKeySetDefault - change imported key to default values\n     *               if its parent key has been updated\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      </UL>\n     *  <LI><B>DELETE_RULE</B> short => What happens to\n     *      the foreign key when parent key is deleted.\n     *      <UL>\n     *      <LI> importedKeyNoAction - do not allow delete of parent\n     *               key if it has been imported\n     *      <LI> importedKeyCascade - delete rows that import a deleted key\n     *      <LI> importedKeySetNull - change imported key to <code>NULL</code> if\n     *               its primary key has been deleted\n     *      <LI> importedKeyRestrict - same as importedKeyNoAction\n     *                                 (for ODBC 2.x compatibility)\n     *      <LI> importedKeySetDefault - change imported key to default if\n     *               its parent key has been deleted\n     *      </UL>\n     *  <LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)\n     *  <LI><B>PK_NAME</B> String => parent key name (may be <code>null</code>)\n     *  <LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key\n     *      constraints be deferred until commit\n     *      <UL>\n     *      <LI> importedKeyInitiallyDeferred - see SQL92 for definition\n     *      <LI> importedKeyInitiallyImmediate - see SQL92 for definition\n     *      <LI> importedKeyNotDeferrable - see SQL92 for definition\n     *      </UL>\n     *  </OL>\n     *\n     * @param parentCatalog a catalog name; must match the catalog name\n     * as it is stored in the database; \"\" retrieves those without a\n     * catalog; <code>null</code> means drop catalog name from the selection criteria\n     * @param parentSchema a schema name; must match the schema name as\n     * it is stored in the database; \"\" retrieves those without a schema;\n     * <code>null</code> means drop schema name from the selection criteria\n     * @param parentTable the name of the table that exports the key; must match\n     * the table name as it is stored in the database\n     * @param foreignCatalog a catalog name; must match the catalog name as\n     * it is stored in the database; \"\" retrieves those without a\n     * catalog; <code>null</code> means drop catalog name from the selection criteria\n     * @param foreignSchema a schema name; must match the schema name as it\n     * is stored in the database; \"\" retrieves those without a schema;\n     * <code>null</code> means drop schema name from the selection criteria\n     * @param foreignTable the name of the table that imports the key; must match\n     * the table name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a foreign key column description\n     * @exception SQLException if a database access error occurs\n     * @see #getImportedKeys\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getTypeInfo() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of all the data types supported by\n     * this database. They are ordered by DATA_TYPE and then by how\n     * closely the data type maps to the corresponding JDBC SQL type.\n     *\n     * <P>If the database supports SQL distinct types, then getTypeInfo() will return\n     * a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT.\n     * If the database supports SQL structured types, then getTypeInfo() will return\n     * a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT.\n     *\n     * <P>If SQL distinct or structured types are supported, then information on the\n     * individual types may be obtained from the getUDTs() method.\n     *\n\n     *\n     * <P>Each type description has the following columns:\n     *  <OL>\n     *  <LI><B>TYPE_NAME</B> String => Type name\n     *  <LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types\n     *  <LI><B>PRECISION</B> int => maximum precision\n     *  <LI><B>LITERAL_PREFIX</B> String => prefix used to quote a literal\n     *      (may be <code>null</code>)\n     *  <LI><B>LITERAL_SUFFIX</B> String => suffix used to quote a literal\n     (may be <code>null</code>)\n     *  <LI><B>CREATE_PARAMS</B> String => parameters used in creating\n     *      the type (may be <code>null</code>)\n     *  <LI><B>NULLABLE</B> short => can you use NULL for this type.\n     *      <UL>\n     *      <LI> typeNoNulls - does not allow NULL values\n     *      <LI> typeNullable - allows NULL values\n     *      <LI> typeNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>CASE_SENSITIVE</B> boolean=> is it case sensitive.\n     *  <LI><B>SEARCHABLE</B> short => can you use \"WHERE\" based on this type:\n     *      <UL>\n     *      <LI> typePredNone - No support\n     *      <LI> typePredChar - Only supported with WHERE .. LIKE\n     *      <LI> typePredBasic - Supported except for WHERE .. LIKE\n     *      <LI> typeSearchable - Supported for all WHERE ..\n     *      </UL>\n     *  <LI><B>UNSIGNED_ATTRIBUTE</B> boolean => is it unsigned.\n     *  <LI><B>FIXED_PREC_SCALE</B> boolean => can it be a money value.\n     *  <LI><B>AUTO_INCREMENT</B> boolean => can it be used for an\n     *      auto-increment value.\n     *  <LI><B>LOCAL_TYPE_NAME</B> String => localized version of type name\n     *      (may be <code>null</code>)\n     *  <LI><B>MINIMUM_SCALE</B> short => minimum scale supported\n     *  <LI><B>MAXIMUM_SCALE</B> short => maximum scale supported\n     *  <LI><B>SQL_DATA_TYPE</B> int => unused\n     *  <LI><B>SQL_DATETIME_SUB</B> int => unused\n     *  <LI><B>NUM_PREC_RADIX</B> int => usually 2 or 10\n     *  </OL>\n     *\n     * <p>The PRECISION column represents the maximum column size that the server supports for the given datatype.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. Null is returned for data types where the\n     * column size is not applicable.\n     *\n     * @return a <code>ResultSet</code> object in which each row is an SQL\n     *         type description\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the given table's indices and statistics. They are\n     * ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.\n     *\n     * <P>Each index column description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => table name\n     *  <LI><B>NON_UNIQUE</B> boolean => Can index values be non-unique.\n     *      false when TYPE is tableIndexStatistic\n     *  <LI><B>INDEX_QUALIFIER</B> String => index catalog (may be <code>null</code>);\n     *      <code>null</code> when TYPE is tableIndexStatistic\n     *  <LI><B>INDEX_NAME</B> String => index name; <code>null</code> when TYPE is\n     *      tableIndexStatistic\n     *  <LI><B>TYPE</B> short => index type:\n     *      <UL>\n     *      <LI> tableIndexStatistic - this identifies table statistics that are\n     *           returned in conjuction with a table's index descriptions\n     *      <LI> tableIndexClustered - this is a clustered index\n     *      <LI> tableIndexHashed - this is a hashed index\n     *      <LI> tableIndexOther - this is some other style of index\n     *      </UL>\n     *  <LI><B>ORDINAL_POSITION</B> short => column sequence number\n     *      within index; zero when TYPE is tableIndexStatistic\n     *  <LI><B>COLUMN_NAME</B> String => column name; <code>null</code> when TYPE is\n     *      tableIndexStatistic\n     *  <LI><B>ASC_OR_DESC</B> String => column sort sequence, \"A\" => ascending,\n     *      \"D\" => descending, may be <code>null</code> if sort sequence is not supported;\n     *      <code>null</code> when TYPE is tableIndexStatistic\n     *  <LI><B>CARDINALITY</B> int => When TYPE is tableIndexStatistic, then\n     *      this is the number of rows in the table; otherwise, it is the\n     *      number of unique values in the index.\n     *  <LI><B>PAGES</B> int => When TYPE is  tableIndexStatisic then\n     *      this is the number of pages used for the table, otherwise it\n     *      is the number of pages used for the current index.\n     *  <LI><B>FILTER_CONDITION</B> String => Filter condition, if any.\n     *      (may be <code>null</code>)\n     *  </OL>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in this database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schema a schema name; must match the schema name\n     *        as it is stored in this database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param table a table name; must match the table name as it is stored\n     *        in this database\n     * @param unique when true, return only indices for unique values;\n     *     when false, return indices regardless of whether unique or not\n     * @param approximate when true, result is allowed to reflect approximate\n     *     or out of data values; when false, results are requested to be\n     *     accurate\n     * @return <code>ResultSet</code> - each row is an index column description\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsResultSetType(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the given result set type.\n     *\n     * @param type defined in <code>java.sql.ResultSet</code>\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @see Connection\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsResultSetConcurrency(int type, int concurrency) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the given concurrency type\n     * in combination with the given result set type.\n     *\n     * @param type defined in <code>java.sql.ResultSet</code>\n     * @param concurrency type defined in <code>java.sql.ResultSet</code>\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @see Connection\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean ownUpdatesAreVisible(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     *\n     * Retrieves whether for the given type of <code>ResultSet</code> object,\n     * the result set's own updates are visible.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if updates are visible for the given result set type;\n     *        <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean ownDeletesAreVisible(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a result set's own deletes are visible.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if deletes are visible for the given result set type;\n     *        <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean ownInsertsAreVisible(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a result set's own inserts are visible.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if inserts are visible for the given result set type;\n     *        <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean othersUpdatesAreVisible(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether updates made by others are visible.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if updates made by others\n     *        are visible for the given result set type;\n     *        <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean othersDeletesAreVisible(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether deletes made by others are visible.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if deletes made by others\n     *        are visible for the given result set type;\n     *        <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean othersInsertsAreVisible(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether inserts made by others are visible.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if inserts made by others\n     *         are visible for the given result set type;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean updatesAreDetected(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether or not a visible row update can be detected by\n     * calling the method <code>ResultSet.rowUpdated</code>.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if changes are detected by the result set type;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean deletesAreDetected(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether or not a visible row delete can be detected by\n     * calling the method <code>ResultSet.rowDeleted</code>.  If the method\n     * <code>deletesAreDetected</code> returns <code>false</code>, it means that\n     * deleted rows are removed from the result set.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if deletes are detected by the given result set type;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean insertsAreDetected(int type) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether or not a visible row insert can be detected\n     * by calling the method <code>ResultSet.rowInserted</code>.\n     *\n     * @param type the <code>ResultSet</code> type; one of\n     *        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     *        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @return <code>true</code> if changes are detected by the specified result\n     *         set type; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsBatchUpdates() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports batch updates.\n     *\n     * @return <code>true</code> if this database supports batch upcates;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the user-defined types (UDTs) defined\n     * in a particular schema.  Schema-specific UDTs may have type\n     * <code>JAVA_OBJECT</code>, <code>STRUCT</code>,\n     * or <code>DISTINCT</code>.\n     *\n     * <P>Only types matching the catalog, schema, type name and type\n     * criteria are returned.  They are ordered by <code>DATA_TYPE</code>,\n     * <code>TYPE_CAT</code>, <code>TYPE_SCHEM</code>  and\n     * <code>TYPE_NAME</code>.  The type name parameter may be a fully-qualified\n     * name.  In this case, the catalog and schemaPattern parameters are\n     * ignored.\n     *\n     * <P>Each type description has the following columns:\n     *  <OL>\n     *  <LI><B>TYPE_CAT</B> String => the type's catalog (may be <code>null</code>)\n     *  <LI><B>TYPE_SCHEM</B> String => type's schema (may be <code>null</code>)\n     *  <LI><B>TYPE_NAME</B> String => type name\n     *  <LI><B>CLASS_NAME</B> String => Java class name\n     *  <LI><B>DATA_TYPE</B> int => type value defined in java.sql.Types.\n     *     One of JAVA_OBJECT, STRUCT, or DISTINCT\n     *  <LI><B>REMARKS</B> String => explanatory comment on the type\n     *  <LI><B>BASE_TYPE</B> short => type code of the source type of a\n     *     DISTINCT type or the type that implements the user-generated\n     *     reference type of the SELF_REFERENCING_COLUMN of a structured\n     *     type as defined in java.sql.Types (<code>null</code> if DATA_TYPE is not\n     *     DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)\n     *  </OL>\n     *\n     * <P><B>Note:</B> If the driver does not support UDTs, an empty\n     * result set is returned.\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema pattern name; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param typeNamePattern a type name pattern; must match the type name\n     *        as it is stored in the database; may be a fully qualified name\n     * @param types a list of user-defined types (JAVA_OBJECT,\n     *        STRUCT, or DISTINCT) to include; <code>null</code> returns all types\n     * @return <code>ResultSet</code> object in which each row describes a UDT\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Connection getConnection() throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n     * Retrieves the connection that produced this metadata object.\n     * <P>\n     * @return the connection that produced this metadata object\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsSavepoints() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports savepoints.\n     *\n     * @return <code>true</code> if savepoints are supported;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsNamedParameters() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports named parameters to callable\n     * statements.\n     *\n     * @return <code>true</code> if named parameters are supported;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsMultipleOpenResults() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether it is possible to have multiple <code>ResultSet</code> objects\n     * returned from a <code>CallableStatement</code> object\n     * simultaneously.\n     *\n     * @return <code>true</code> if a <code>CallableStatement</code> object\n     *         can return multiple <code>ResultSet</code> objects\n     *         simultaneously; <code>false</code> otherwise\n     * @exception SQLException if a datanase access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsGetGeneratedKeys() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether auto-generated keys can be retrieved after\n     * a statement has been executed\n     *\n     * @return <code>true</code> if auto-generated keys can be retrieved\n     *         after a statement has executed; <code>false</code> otherwise\n     *<p>If <code>true</code> is returned, the JDBC driver must support the\n     * returning of auto-generated keys for at least SQL INSERT statements\n     *<p>\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the user-defined type (UDT) hierarchies defined in a\n     * particular schema in this database. Only the immediate super type/\n     * sub type relationship is modeled.\n     * <P>\n     * Only supertype information for UDTs matching the catalog,\n     * schema, and type name is returned. The type name parameter\n     * may be a fully-qualified name. When the UDT name supplied is a\n     * fully-qualified name, the catalog and schemaPattern parameters are\n     * ignored.\n     * <P>\n     * If a UDT does not have a direct super type, it is not listed here.\n     * A row of the <code>ResultSet</code> object returned by this method\n     * describes the designated UDT and a direct supertype. A row has the following\n     * columns:\n     *  <OL>\n     *  <LI><B>TYPE_CAT</B> String => the UDT's catalog (may be <code>null</code>)\n     *  <LI><B>TYPE_SCHEM</B> String => UDT's schema (may be <code>null</code>)\n     *  <LI><B>TYPE_NAME</B> String => type name of the UDT\n     *  <LI><B>SUPERTYPE_CAT</B> String => the direct super type's catalog\n     *                           (may be <code>null</code>)\n     *  <LI><B>SUPERTYPE_SCHEM</B> String => the direct super type's schema\n     *                             (may be <code>null</code>)\n     *  <LI><B>SUPERTYPE_NAME</B> String => the direct super type's name\n     *  </OL>\n     *\n     * <P><B>Note:</B> If the driver does not support type hierarchies, an\n     * empty result set is returned.\n     *\n     * @param catalog a catalog name; \"\" retrieves those without a catalog;\n     *        <code>null</code> means drop catalog name from the selection criteria\n     * @param schemaPattern a schema name pattern; \"\" retrieves those\n     *        without a schema\n     * @param typeNamePattern a UDT name pattern; may be a fully-qualified\n     *        name\n     * @return a <code>ResultSet</code> object in which a row gives information\n     *         about the designated UDT\n     * @throws SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the table hierarchies defined in a particular\n     * schema in this database.\n     *\n     * <P>Only supertable information for tables matching the catalog, schema\n     * and table name are returned. The table name parameter may be a fully-\n     * qualified name, in which case, the catalog and schemaPattern parameters\n     * are ignored. If a table does not have a super table, it is not listed here.\n     * Supertables have to be defined in the same catalog and schema as the\n     * sub tables. Therefore, the type description does not need to include\n     * this information for the supertable.\n     *\n     * <P>Each type description has the following columns:\n     *  <OL>\n     *  <LI><B>TABLE_CAT</B> String => the type's catalog (may be <code>null</code>)\n     *  <LI><B>TABLE_SCHEM</B> String => type's schema (may be <code>null</code>)\n     *  <LI><B>TABLE_NAME</B> String => type name\n     *  <LI><B>SUPERTABLE_NAME</B> String => the direct super type's name\n     *  </OL>\n     *\n     * <P><B>Note:</B> If the driver does not support type hierarchies, an\n     * empty result set is returned.\n     *\n     * @param catalog a catalog name; \"\" retrieves those without a catalog;\n     *        <code>null</code> means drop catalog name from the selection criteria\n     * @param schemaPattern a schema name pattern; \"\" retrieves those\n     *        without a schema\n     * @param tableNamePattern a table name pattern; may be a fully-qualified\n     *        name\n     * @return a <code>ResultSet</code> object in which each row is a type description\n     * @throws SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the given attribute of the given type\n     * for a user-defined type (UDT) that is available in the given schema\n     * and catalog.\n     * <P>\n     * Descriptions are returned only for attributes of UDTs matching the\n     * catalog, schema, type, and attribute name criteria. They are ordered by\n     * <code>TYPE_CAT</code>, <code>TYPE_SCHEM</code>,\n     * <code>TYPE_NAME</code> and <code>ORDINAL_POSITION</code>. This description\n     * does not contain inherited attributes.\n     * <P>\n     * The <code>ResultSet</code> object that is returned has the following\n     * columns:\n     * <OL>\n     *  <LI><B>TYPE_CAT</B> String => type catalog (may be <code>null</code>)\n     *  <LI><B>TYPE_SCHEM</B> String => type schema (may be <code>null</code>)\n     *  <LI><B>TYPE_NAME</B> String => type name\n     *  <LI><B>ATTR_NAME</B> String => attribute name\n     *  <LI><B>DATA_TYPE</B> int => attribute type SQL type from java.sql.Types\n     *  <LI><B>ATTR_TYPE_NAME</B> String => Data source dependent type name.\n     *  For a UDT, the type name is fully qualified. For a REF, the type name is\n     *  fully qualified and represents the target type of the reference type.\n     *  <LI><B>ATTR_SIZE</B> int => column size.  For char or date\n     *      types this is the maximum number of characters; for numeric or\n     *      decimal types this is precision.\n     *  <LI><B>DECIMAL_DIGITS</B> int => the number of fractional digits. Null is returned for data types where\n     * DECIMAL_DIGITS is not applicable.\n     *  <LI><B>NUM_PREC_RADIX</B> int => Radix (typically either 10 or 2)\n     *  <LI><B>NULLABLE</B> int => whether NULL is allowed\n     *      <UL>\n     *      <LI> attributeNoNulls - might not allow NULL values\n     *      <LI> attributeNullable - definitely allows NULL values\n     *      <LI> attributeNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>REMARKS</B> String => comment describing column (may be <code>null</code>)\n     *  <LI><B>ATTR_DEF</B> String => default value (may be <code>null</code>)\n     *  <LI><B>SQL_DATA_TYPE</B> int => unused\n     *  <LI><B>SQL_DATETIME_SUB</B> int => unused\n     *  <LI><B>CHAR_OCTET_LENGTH</B> int => for char types the\n     *       maximum number of bytes in the column\n     *  <LI><B>ORDINAL_POSITION</B> int => index of the attribute in the UDT\n     *      (starting at 1)\n     *  <LI><B>IS_NULLABLE</B> String  => ISO rules are used to determine\n     * the nullability for a attribute.\n     *       <UL>\n     *       <LI> YES           --- if the attribute can include NULLs\n     *       <LI> NO            --- if the attribute cannot include NULLs\n     *       <LI> empty string  --- if the nullability for the\n     * attribute is unknown\n     *       </UL>\n     *  <LI><B>SCOPE_CATALOG</B> String => catalog of table that is the\n     *      scope of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)\n     *  <LI><B>SCOPE_SCHEMA</B> String => schema of table that is the\n     *      scope of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)\n     *  <LI><B>SCOPE_TABLE</B> String => table name that is the scope of a\n     *      reference attribute (<code>null</code> if the DATA_TYPE isn't REF)\n     * <LI><B>SOURCE_DATA_TYPE</B> short => source type of a distinct type or user-generated\n     *      Ref type,SQL type from java.sql.Types (<code>null</code> if DATA_TYPE\n     *      isn't DISTINCT or user-generated REF)\n     *  </OL>\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param typeNamePattern a type name pattern; must match the\n     *        type name as it is stored in the database\n     * @param attributeNamePattern an attribute name pattern; must match the attribute\n     *        name as it is declared in the database\n     * @return a <code>ResultSet</code> object in which each row is an\n     *         attribute description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsResultSetHoldability(int holdability) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports the given result set holdability.\n     *\n     * @param holdability one of the following constants:\n     *          <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *          <code>ResultSet.CLOSE_CURSORS_AT_COMMIT<code>\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @see Connection\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getResultSetHoldability() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves this database's default holdability for <code>ResultSet</code>\n     * objects.\n     *\n     * @return the default holdability; either\n     *         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDatabaseMajorVersion() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the major version number of the underlying database.\n     *\n     * @return the underlying database's major version\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDatabaseMinorVersion() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the minor version number of the underlying database.\n     *\n     * @return underlying database's minor version\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getJDBCMajorVersion() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the major JDBC version number for this\n     * driver.\n     *\n     * @return JDBC version major number\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getJDBCMinorVersion() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the minor JDBC version number for this\n     * driver.\n     *\n     * @return JDBC version minor number\n     * @exception SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSQLStateType() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Indicates whether the SQLSTATE returned by <code>SQLException.getSQLState</code>\n     * is X/Open (now known as Open Group) SQL CLI or SQL:2003.\n     * @return the type of SQLSTATE; one of:\n     *        sqlStateXOpen or\n     *        sqlStateSQL\n     * @throws SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean locatorsUpdateCopy() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether updates made to a LOB are made on a copy or directly\n     * to the LOB.\n     * @return <code>true</code> if updates are made to a copy of the LOB;\n     *         <code>false</code> if updates are made directly to the LOB\n     * @throws SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsStatementPooling() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports statement pooling.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @throws SQLException if a database access error occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " RowIdLifetime getRowIdLifetime() throws SQLException",
    "returnType" : "RowIdLifetime",
    "comment" : "\n     * Indicates whether or not this data source supports the SQL <code>ROWID</code> type,\n     * and if so  the lifetime for which a <code>RowId</code> object remains valid.\n     * <p>\n     * The returned int values have the following relationship:\n     * <pre>\n     *     ROWID_UNSUPPORTED < ROWID_VALID_OTHER < ROWID_VALID_TRANSACTION\n     *         < ROWID_VALID_SESSION < ROWID_VALID_FOREVER\n     * </pre>\n     * so conditional logic such as\n     * <pre>\n     *     if (metadata.getRowIdLifetime() > DatabaseMetaData.ROWID_VALID_TRANSACTION)\n     * </pre>\n     * can be used. Valid Forever means valid across all Sessions, and valid for\n     * a Session means valid across all its contained Transactions.\n     *\n     * @return the status indicating the lifetime of a <code>RowId</code>\n     * @throws SQLException if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getSchemas(String catalog, String schemaPattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves the schema names available in this database.  The results\n     * are ordered by <code>TABLE_CATALOG</code> and\n     * <code>TABLE_SCHEM</code>.\n     *\n     * <P>The schema columns are:\n     *  <OL>\n     *  <LI><B>TABLE_SCHEM</B> String => schema name\n     *  <LI><B>TABLE_CATALOG</B> String => catalog name (may be <code>null</code>)\n     *  </OL>\n     *\n     *\n     * @param catalog a catalog name; must match the catalog name as it is stored\n     * in the database;\"\" retrieves those without a catalog; null means catalog\n     * name should not be used to narrow down the search.\n     * @param schemaPattern a schema name; must match the schema name as it is\n     * stored in the database; null means\n     * schema name should not be used to narrow down the search.\n     * @return a <code>ResultSet</code> object in which each row is a\n     *         schema description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean supportsStoredFunctionsUsingCallSyntax() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this database supports invoking user-defined or vendor functions\n     * using the stored procedure escape syntax.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean autoCommitFailureClosesAllResultSets() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a <code>SQLException</code> while autoCommit is <code>true</code> inidcates\n     * that all open ResultSets are closed, even ones that are holdable.  When a <code>SQLException</code> occurs while\n     * autocommit is <code>true</code>, it is vendor specific whether the JDBC driver responds with a commit operation, a\n     * rollback operation, or by doing neither a commit nor a rollback.  A potential result of this difference\n     * is in whether or not holdable ResultSets are closed.\n     *\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getClientInfoProperties() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n         * Retrieves a list of the client info properties\n         * that the driver supports.  The result set contains the following columns\n         * <p>\n         * <ol>\n         * <li><b>NAME</b> String=> The name of the client info property<br>\n         * <li><b>MAX_LEN</b> int=> The maximum length of the value for the property<br>\n         * <li><b>DEFAULT_VALUE</b> String=> The default value of the property<br>\n         * <li><b>DESCRIPTION</b> String=> A description of the property.  This will typically\n         *                                              contain information as to where this property is\n         *                                              stored in the database.\n         * </ol>\n         * <p>\n         * The <code>ResultSet</code> is sorted by the NAME column\n         * <p>\n         * @return      A <code>ResultSet</code> object; each row is a supported client info\n         * property\n         * <p>\n         *  @exception SQLException if a database access error occurs\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the  system and user functions available\n     * in the given catalog.\n     * <P>\n     * Only system and user function descriptions matching the schema and\n     * function name criteria are returned.  They are ordered by\n     * <code>FUNCTION_CAT</code>, <code>FUNCTION_SCHEM</code>,\n     * <code>FUNCTION_NAME</code> and\n     * <code>SPECIFIC_ NAME</code>.\n     *\n     * <P>Each function description has the the following columns:\n     *  <OL>\n     *  <LI><B>FUNCTION_CAT</B> String => function catalog (may be <code>null</code>)\n     *  <LI><B>FUNCTION_SCHEM</B> String => function schema (may be <code>null</code>)\n     *  <LI><B>FUNCTION_NAME</B> String => function name.  This is the name\n     * used to invoke the function\n     *  <LI><B>REMARKS</B> String => explanatory comment on the function\n     * <LI><B>FUNCTION_TYPE</B> short => kind of function:\n     *      <UL>\n     *      <LI>functionResultUnknown - Cannot determine if a return value\n     *       or table will be returned\n     *      <LI> functionNoTable- Does not return a table\n     *      <LI> functionReturnsTable - Returns a table\n     *      </UL>\n     *  <LI><B>SPECIFIC_NAME</B> String  => the name which uniquely identifies\n     *  this function within its schema.  This is a user specified, or DBMS\n     * generated, name that may be different then the <code>FUNCTION_NAME</code>\n     * for example with overload functions\n     *  </OL>\n     * <p>\n     * A user may not have permission to execute any of the functions that are\n     * returned by <code>getFunctions</code>\n     *\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param functionNamePattern a function name pattern; must match the\n     *        function name as it is stored in the database\n     * @return <code>ResultSet</code> - each row is a function description\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves a description of the given catalog's system or user\n     * function parameters and return type.\n     *\n     * <P>Only descriptions matching the schema,  function and\n     * parameter name criteria are returned. They are ordered by\n     * <code>FUNCTION_CAT</code>, <code>FUNCTION_SCHEM</code>,\n     * <code>FUNCTION_NAME</code> and\n     * <code>SPECIFIC_ NAME</code>. Within this, the return value,\n     * if any, is first. Next are the parameter descriptions in call\n     * order. The column descriptions follow in column number order.\n     *\n     * <P>Each row in the <code>ResultSet</code>\n     * is a parameter description, column description or\n     * return type description with the following fields:\n     *  <OL>\n     *  <LI><B>FUNCTION_CAT</B> String => function catalog (may be <code>null</code>)\n     *  <LI><B>FUNCTION_SCHEM</B> String => function schema (may be <code>null</code>)\n     *  <LI><B>FUNCTION_NAME</B> String => function name.  This is the name\n     * used to invoke the function\n     *  <LI><B>COLUMN_NAME</B> String => column/parameter name\n     *  <LI><B>COLUMN_TYPE</B> Short => kind of column/parameter:\n     *      <UL>\n     *      <LI> functionColumnUnknown - nobody knows\n     *      <LI> functionColumnIn - IN parameter\n     *      <LI> functionColumnInOut - INOUT parameter\n     *      <LI> functionColumnOut - OUT parameter\n     *      <LI> functionColumnReturn - function return value\n     *      <LI> functionColumnResult - Indicates that the parameter or column\n     *  is a column in the <code>ResultSet</code>\n     *      </UL>\n     *  <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types\n     *  <LI><B>TYPE_NAME</B> String => SQL type name, for a UDT type the\n     *  type name is fully qualified\n     *  <LI><B>PRECISION</B> int => precision\n     *  <LI><B>LENGTH</B> int => length in bytes of data\n     *  <LI><B>SCALE</B> short => scale -  null is returned for data types where\n     * SCALE is not applicable.\n     *  <LI><B>RADIX</B> short => radix\n     *  <LI><B>NULLABLE</B> short => can it contain NULL.\n     *      <UL>\n     *      <LI> functionNoNulls - does not allow NULL values\n     *      <LI> functionNullable - allows NULL values\n     *      <LI> functionNullableUnknown - nullability unknown\n     *      </UL>\n     *  <LI><B>REMARKS</B> String => comment describing column/parameter\n     *  <LI><B>CHAR_OCTET_LENGTH</B> int  => the maximum length of binary\n     * and character based parameters or columns.  For any other datatype the returned value\n     * is a NULL\n     *  <LI><B>ORDINAL_POSITION</B> int  => the ordinal position, starting\n     * from 1, for the input and output parameters. A value of 0\n     * is returned if this row describes the function's return value.\n     * For result set columns, it is the\n     * ordinal position of the column in the result set starting from 1.\n     *  <LI><B>IS_NULLABLE</B> String  => ISO rules are used to determine\n     * the nullability for a parameter or column.\n     *       <UL>\n     *       <LI> YES           --- if the parameter or column can include NULLs\n     *       <LI> NO            --- if the parameter or column  cannot include NULLs\n     *       <LI> empty string  --- if the nullability for the\n     * parameter  or column is unknown\n     *       </UL>\n     *  <LI><B>SPECIFIC_NAME</B> String  => the name which uniquely identifies\n     * this function within its schema.  This is a user specified, or DBMS\n     * generated, name that may be different then the <code>FUNCTION_NAME</code>\n     * for example with overload functions\n     *  </OL>\n     *\n     * <p>The PRECISION column represents the specified column size for the given\n     * parameter or column.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. Null is returned for data types where the\n     * column size is not applicable.\n     * @param catalog a catalog name; must match the catalog name as it\n     *        is stored in the database; \"\" retrieves those without a catalog;\n     *        <code>null</code> means that the catalog name should not be used to narrow\n     *        the search\n     * @param schemaPattern a schema name pattern; must match the schema name\n     *        as it is stored in the database; \"\" retrieves those without a schema;\n     *        <code>null</code> means that the schema name should not be used to narrow\n     *        the search\n     * @param functionNamePattern a procedure name pattern; must match the\n     *        function name as it is stored in the database\n     * @param columnNamePattern a parameter name pattern; must match the\n     * parameter or column name as it is stored in the database\n     * @return <code>ResultSet</code> - each row describes a\n     * user function parameter, column  or return type\n     *\n     * @exception SQLException if a database access error occurs\n     * @see #getSearchStringEscape\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean allProceduresAreCallable() throws SQLException", " boolean allTablesAreSelectable() throws SQLException", " String getURL() throws SQLException", " String getUserName() throws SQLException", " boolean isReadOnly() throws SQLException", " boolean nullsAreSortedHigh() throws SQLException", " boolean nullsAreSortedLow() throws SQLException", " boolean nullsAreSortedAtStart() throws SQLException", " boolean nullsAreSortedAtEnd() throws SQLException", " String getDatabaseProductName() throws SQLException", " String getDatabaseProductVersion() throws SQLException", " String getDriverName() throws SQLException", " String getDriverVersion() throws SQLException", " int getDriverMajorVersion()", " int getDriverMinorVersion()", " boolean usesLocalFiles() throws SQLException", " boolean usesLocalFilePerTable() throws SQLException", " boolean supportsMixedCaseIdentifiers() throws SQLException", " boolean storesUpperCaseIdentifiers() throws SQLException", " boolean storesLowerCaseIdentifiers() throws SQLException", " boolean storesMixedCaseIdentifiers() throws SQLException", " boolean supportsMixedCaseQuotedIdentifiers() throws SQLException", " boolean storesUpperCaseQuotedIdentifiers() throws SQLException", " boolean storesLowerCaseQuotedIdentifiers() throws SQLException", " boolean storesMixedCaseQuotedIdentifiers() throws SQLException", " String getIdentifierQuoteString() throws SQLException", " String getSQLKeywords() throws SQLException", " String getNumericFunctions() throws SQLException", " String getStringFunctions() throws SQLException", " String getSystemFunctions() throws SQLException", " String getTimeDateFunctions() throws SQLException", " String getSearchStringEscape() throws SQLException", " String getExtraNameCharacters() throws SQLException", " boolean supportsAlterTableWithAddColumn() throws SQLException", " boolean supportsAlterTableWithDropColumn() throws SQLException", " boolean supportsColumnAliasing() throws SQLException", " boolean nullPlusNonNullIsNull() throws SQLException", " boolean supportsConvert() throws SQLException", " boolean supportsConvert(int fromType, int toType) throws SQLException", " boolean supportsTableCorrelationNames() throws SQLException", " boolean supportsDifferentTableCorrelationNames() throws SQLException", " boolean supportsExpressionsInOrderBy() throws SQLException", " boolean supportsOrderByUnrelated() throws SQLException", " boolean supportsGroupBy() throws SQLException", " boolean supportsGroupByUnrelated() throws SQLException", " boolean supportsGroupByBeyondSelect() throws SQLException", " boolean supportsLikeEscapeClause() throws SQLException", " boolean supportsMultipleResultSets() throws SQLException", " boolean supportsMultipleTransactions() throws SQLException", " boolean supportsNonNullableColumns() throws SQLException", " boolean supportsMinimumSQLGrammar() throws SQLException", " boolean supportsCoreSQLGrammar() throws SQLException", " boolean supportsExtendedSQLGrammar() throws SQLException", " boolean supportsANSI92EntryLevelSQL() throws SQLException", " boolean supportsANSI92IntermediateSQL() throws SQLException", " boolean supportsANSI92FullSQL() throws SQLException", " boolean supportsIntegrityEnhancementFacility() throws SQLException", " boolean supportsOuterJoins() throws SQLException", " boolean supportsFullOuterJoins() throws SQLException", " boolean supportsLimitedOuterJoins() throws SQLException", " String getSchemaTerm() throws SQLException", " String getProcedureTerm() throws SQLException", " String getCatalogTerm() throws SQLException", " boolean isCatalogAtStart() throws SQLException", " String getCatalogSeparator() throws SQLException", " boolean supportsSchemasInDataManipulation() throws SQLException", " boolean supportsSchemasInProcedureCalls() throws SQLException", " boolean supportsSchemasInTableDefinitions() throws SQLException", " boolean supportsSchemasInIndexDefinitions() throws SQLException", " boolean supportsSchemasInPrivilegeDefinitions() throws SQLException", " boolean supportsCatalogsInDataManipulation() throws SQLException", " boolean supportsCatalogsInProcedureCalls() throws SQLException", " boolean supportsCatalogsInTableDefinitions() throws SQLException", " boolean supportsCatalogsInIndexDefinitions() throws SQLException", " boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException", " boolean supportsPositionedDelete() throws SQLException", " boolean supportsPositionedUpdate() throws SQLException", " boolean supportsSelectForUpdate() throws SQLException", " boolean supportsStoredProcedures() throws SQLException", " boolean supportsSubqueriesInComparisons() throws SQLException", " boolean supportsSubqueriesInExists() throws SQLException", " boolean supportsSubqueriesInIns() throws SQLException", " boolean supportsSubqueriesInQuantifieds() throws SQLException", " boolean supportsCorrelatedSubqueries() throws SQLException", " boolean supportsUnion() throws SQLException", " boolean supportsUnionAll() throws SQLException", " boolean supportsOpenCursorsAcrossCommit() throws SQLException", " boolean supportsOpenCursorsAcrossRollback() throws SQLException", " boolean supportsOpenStatementsAcrossCommit() throws SQLException", " boolean supportsOpenStatementsAcrossRollback() throws SQLException", " int getMaxBinaryLiteralLength() throws SQLException", " int getMaxCharLiteralLength() throws SQLException", " int getMaxColumnNameLength() throws SQLException", " int getMaxColumnsInGroupBy() throws SQLException", " int getMaxColumnsInIndex() throws SQLException", " int getMaxColumnsInOrderBy() throws SQLException", " int getMaxColumnsInSelect() throws SQLException", " int getMaxColumnsInTable() throws SQLException", " int getMaxConnections() throws SQLException", " int getMaxCursorNameLength() throws SQLException", " int getMaxIndexLength() throws SQLException", " int getMaxSchemaNameLength() throws SQLException", " int getMaxProcedureNameLength() throws SQLException", " int getMaxCatalogNameLength() throws SQLException", " int getMaxRowSize() throws SQLException", " boolean doesMaxRowSizeIncludeBlobs() throws SQLException", " int getMaxStatementLength() throws SQLException", " int getMaxStatements() throws SQLException", " int getMaxTableNameLength() throws SQLException", " int getMaxTablesInSelect() throws SQLException", " int getMaxUserNameLength() throws SQLException", " int getDefaultTransactionIsolation() throws SQLException", " boolean supportsTransactions() throws SQLException", " boolean supportsTransactionIsolationLevel(int level) throws SQLException", " boolean supportsDataDefinitionAndDataManipulationTransactions() throws SQLException", " boolean supportsDataManipulationTransactionsOnly() throws SQLException", " boolean dataDefinitionCausesTransactionCommit() throws SQLException", " boolean dataDefinitionIgnoredInTransactions() throws SQLException", " ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException", " ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException", " ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException", " ResultSet getSchemas() throws SQLException", " ResultSet getCatalogs() throws SQLException", " ResultSet getTableTypes() throws SQLException", " ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException", " ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException", " ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException", " ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException", " ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException", " ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException", " ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException", " ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException", " ResultSet getCrossReference(String parentCatalog, String parentSchema, String parentTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException", " ResultSet getTypeInfo() throws SQLException", " ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException", " boolean supportsResultSetType(int type) throws SQLException", " boolean supportsResultSetConcurrency(int type, int concurrency) throws SQLException", " boolean ownUpdatesAreVisible(int type) throws SQLException", " boolean ownDeletesAreVisible(int type) throws SQLException", " boolean ownInsertsAreVisible(int type) throws SQLException", " boolean othersUpdatesAreVisible(int type) throws SQLException", " boolean othersDeletesAreVisible(int type) throws SQLException", " boolean othersInsertsAreVisible(int type) throws SQLException", " boolean updatesAreDetected(int type) throws SQLException", " boolean deletesAreDetected(int type) throws SQLException", " boolean insertsAreDetected(int type) throws SQLException", " boolean supportsBatchUpdates() throws SQLException", " ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException", " Connection getConnection() throws SQLException", " boolean supportsSavepoints() throws SQLException", " boolean supportsNamedParameters() throws SQLException", " boolean supportsMultipleOpenResults() throws SQLException", " boolean supportsGetGeneratedKeys() throws SQLException", " ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException", " ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException", " ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException", " boolean supportsResultSetHoldability(int holdability) throws SQLException", " int getResultSetHoldability() throws SQLException", " int getDatabaseMajorVersion() throws SQLException", " int getDatabaseMinorVersion() throws SQLException", " int getJDBCMajorVersion() throws SQLException", " int getJDBCMinorVersion() throws SQLException", " int getSQLStateType() throws SQLException", " boolean locatorsUpdateCopy() throws SQLException", " boolean supportsStatementPooling() throws SQLException", " RowIdLifetime getRowIdLifetime() throws SQLException", " ResultSet getSchemas(String catalog, String schemaPattern) throws SQLException", " boolean supportsStoredFunctionsUsingCallSyntax() throws SQLException", " boolean autoCommitFailureClosesAllResultSets() throws SQLException", " ResultSet getClientInfoProperties() throws SQLException", " ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException", " ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException" ],
  "variableNames" : [ "procedureResultUnknown", "procedureNoResult", "procedureReturnsResult", "procedureColumnUnknown", "procedureColumnIn", "procedureColumnInOut", "procedureColumnOut", "procedureColumnReturn", "procedureColumnResult", "procedureNoNulls", "procedureNullable", "procedureNullableUnknown", "columnNoNulls", "columnNullable", "columnNullableUnknown", "bestRowTemporary", "bestRowTransaction", "bestRowSession", "bestRowUnknown", "bestRowNotPseudo", "bestRowPseudo", "versionColumnUnknown", "versionColumnNotPseudo", "versionColumnPseudo", "importedKeyCascade", "importedKeyRestrict", "importedKeySetNull", "importedKeyNoAction", "importedKeySetDefault", "importedKeyInitiallyDeferred", "importedKeyInitiallyImmediate", "importedKeyNotDeferrable", "typeNoNulls", "typeNullable", "typeNullableUnknown", "typePredNone", "typePredChar", "typePredBasic", "typeSearchable", "tableIndexStatistic", "tableIndexClustered", "tableIndexHashed", "tableIndexOther", "attributeNoNulls", "attributeNullable", "attributeNullableUnknown", "sqlStateXOpen", "sqlStateSQL", "sqlStateSQL99", "functionColumnUnknown", "functionColumnIn", "functionColumnInOut", "functionColumnOut", "functionReturn", "functionColumnResult", "functionNoNulls", "functionNullable", "functionNullableUnknown", "functionResultUnknown", "functionNoTable", "functionReturnsTable" ]
}