{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/AlwaysOnHotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "EventPayload",
  "comment" : "\n     * Additional payload for {@link Callback#onDetected}.\n     ",
  "links" : [ "com.android.internal.app.IHotwordRecognitionStatusCallback#onDetected" ],
  "variables" : [ {
    "name" : "DATA_FORMAT_RAW",
    "type" : "int",
    "comment" : "\n         * Data format is not strictly defined by the framework, and the\n         * {@link android.hardware.soundtrigger.SoundTriggerModule} voice engine may populate this\n         * field in any format.\n         ",
    "links" : [ "android.hardware.soundtrigger.SoundTriggerModule" ]
  }, {
    "name" : "DATA_FORMAT_TRIGGER_AUDIO",
    "type" : "int",
    "comment" : "\n         * Data format is defined as trigger audio.\n         *\n         * <p>When this format is used, {@link #getCaptureAudioFormat()} can be used to understand\n         * further the audio format for reading the data.\n         *\n         * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n         ",
    "links" : [ "#getCaptureAudioFormat()" ]
  }, {
    "name" : "mDataFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureAvailable",
    "type" : "boolean",
    "comment" : " from the DSP hardware.",
    "links" : [ ]
  }, {
    "name" : "mCaptureSession",
    "type" : "int",
    "comment" : " The session to use when attempting to capture more audio from the DSP hardware.",
    "links" : [ ]
  }, {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : " This is the audio that triggered the keyphrase if {@code isTriggerAudio} is true.",
    "links" : [ ]
  }, {
    "name" : "mHotwordDetectedResult",
    "type" : "HotwordDetectedResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioStream",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKephraseExtras",
    "type" : "List<KeyphraseRecognitionExtra>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHalEventReceivedMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRecognitionStopped",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AudioFormat getCaptureAudioFormat()",
    "returnType" : "AudioFormat",
    "comment" : "\n         * Gets the format of the audio obtained using {@link #getTriggerAudio()}.\n         * May be null if there's no audio present.\n         ",
    "links" : [ "#getTriggerAudio()" ]
  }, {
    "name" : "public byte[] getTriggerAudio()",
    "returnType" : "byte[]",
    "comment" : "\n         * Gets the raw audio that triggered the keyphrase.\n         * This may be null if the trigger audio isn't available.\n         * If non-null, the format of the audio can be obtained by calling\n         * {@link #getCaptureAudioFormat()}.\n         *\n         * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n         * @deprecated Use {@link #getData()} instead.\n         ",
    "links" : [ "#getData()", "#getCaptureAudioFormat()" ]
  }, {
    "name" : "public int getDataFormat()",
    "returnType" : "int",
    "comment" : "\n         * Conveys the format of the additional data that is triggered with the keyphrase event.\n         *\n         * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n         * @see DataFormat\n         ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getData()",
    "returnType" : "byte[]",
    "comment" : "\n         * Gets additional raw data that is triggered with the keyphrase event.\n         *\n         * <p>A {@link android.hardware.soundtrigger.SoundTriggerModule} may populate this\n         * field with opaque data for use by system applications who know about voice\n         * engine internals. Data may be null if the field is not populated by the\n         * {@link android.hardware.soundtrigger.SoundTriggerModule}.\n         *\n         * <p>If {@link #getDataFormat()} is {@link #DATA_FORMAT_TRIGGER_AUDIO}, then the\n         * entirety of this buffer is expected to be of the format from\n         * {@link #getCaptureAudioFormat()}.\n         *\n         * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n         ",
    "links" : [ "#DATA_FORMAT_TRIGGER_AUDIO", "#getDataFormat()", "android.hardware.soundtrigger.SoundTriggerModule", "#getCaptureAudioFormat()" ]
  }, {
    "name" : "public Integer getCaptureSession()",
    "returnType" : "Integer",
    "comment" : "\n         * Gets the session ID to start a capture from the DSP.\n         * This may be null if streaming capture isn't possible.\n         * If non-null, the format of the audio that can be captured can be\n         * obtained using {@link #getCaptureAudioFormat()}.\n         *\n         * TODO: Candidate for Public API when the API to start capture with a session ID\n         * is made public.\n         *\n         * TODO: Add this to {@link #getCaptureAudioFormat()}:\n         * \"Gets the format of the audio obtained using {@link #getTriggerAudio()}\n         * or {@link #getCaptureSession()}. May be null if no audio can be obtained\n         * for either the trigger or a streaming session.\"\n         *\n         * TODO: Should this return a known invalid value instead?\n         *\n         * @hide\n         ",
    "links" : [ "#getTriggerAudio()", "#getCaptureAudioFormat()", "#getCaptureSession()" ]
  }, {
    "name" : "public HotwordDetectedResult getHotwordDetectedResult()",
    "returnType" : "HotwordDetectedResult",
    "comment" : "\n         * Returns {@link HotwordDetectedResult} associated with the hotword event, passed from\n         * {@link HotwordDetectionService}.\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetectedResult" ]
  }, {
    "name" : "public ParcelFileDescriptor getAudioStream()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n         * Returns a stream with bytes corresponding to the open audio stream with hotword data.\n         *\n         * <p>This data represents an audio stream in the format returned by\n         * {@link #getCaptureAudioFormat}.\n         *\n         * <p>Clients are expected to start consuming the stream within 1 second of receiving the\n         * event.\n         *\n         * <p>When this method returns a non-null, clients must close this stream when it's no\n         * longer needed. Failing to do so will result in microphone being open for longer periods\n         * of time, and app being attributed for microphone usage.\n         ",
    "links" : [ "#getCaptureAudioFormat" ]
  }, {
    "name" : "public List<KeyphraseRecognitionExtra> getKeyphraseRecognitionExtras()",
    "returnType" : "List<KeyphraseRecognitionExtra>",
    "comment" : "\n         * Returns the keyphrases recognized by the voice engine with additional confidence\n         * information\n         *\n         * @return List of keyphrase extras describing additional data for each keyphrase the voice\n         * engine triggered on for this event. The ordering of the list is preserved based on what\n         * the ordering provided by {@link android.hardware.soundtrigger.SoundTriggerModule}.\n         ",
    "links" : [ "android.hardware.soundtrigger.SoundTriggerModule" ]
  }, {
    "name" : "public long getHalEventReceivedMillis()",
    "returnType" : "long",
    "comment" : "\n         * Timestamp of when the trigger event from SoundTriggerHal was received by the framework.\n         *\n         * Clock monotonic including suspend time or its equivalent on the system,\n         * in the same units and timebase as {@link SystemClock#elapsedRealtime()}.\n         *\n         * @return Elapsed realtime in milliseconds when the event was received from the HAL.\n         *      Returns -1 if the event was not generated from the HAL.\n         ",
    "links" : [ "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public boolean isRecognitionStopped()",
    "returnType" : "boolean",
    "comment" : " Returns whether the system has stopped hotword recognition because of this detection. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public AudioFormat getCaptureAudioFormat()", "public byte[] getTriggerAudio()", "public int getDataFormat()", "public byte[] getData()", "public Integer getCaptureSession()", "public HotwordDetectedResult getHotwordDetectedResult()", "public ParcelFileDescriptor getAudioStream()", "public List<KeyphraseRecognitionExtra> getKeyphraseRecognitionExtras()", "public long getHalEventReceivedMillis()", "public boolean isRecognitionStopped()" ],
  "variableNames" : [ "DATA_FORMAT_RAW", "DATA_FORMAT_TRIGGER_AUDIO", "mDataFormat", "mCaptureAvailable", "mCaptureSession", "mAudioFormat", "mData", "mHotwordDetectedResult", "mAudioStream", "mKephraseExtras", "mHalEventReceivedMillis", "mIsRecognitionStopped" ]
}