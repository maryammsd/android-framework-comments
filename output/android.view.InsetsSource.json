{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InsetsSource.java",
  "packageName" : "android.view",
  "className" : "InsetsSource",
  "comment" : "\n * Represents the state of a single entity generating insets for clients.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SIDE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIDE_LEFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIDE_TOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIDE_RIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIDE_BOTTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIDE_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_IME",
    "type" : "int",
    "comment" : " The insets source ID of IME ",
    "links" : [ ]
  }, {
    "name" : "ID_IME_CAPTION_BAR",
    "type" : "int",
    "comment" : " The insets source ID of the IME caption bar (\"fake\" IME navigation bar). ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SUPPRESS_SCRIM",
    "type" : "int",
    "comment" : "\n     * Controls whether this source suppresses the scrim. If the scrim is ignored, the system won't\n     * draw a semi-transparent scrim behind the system bar area even when the bar contrast is\n     * enforced.\n     *\n     * @see android.R.styleable#Window_enforceStatusBarContrast\n     * @see android.R.styleable#Window_enforceNavigationBarContrast\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_INSETS_ROUNDED_CORNER",
    "type" : "int",
    "comment" : "\n     * Controls whether the insets frame will be used to move {@link RoundedCorner} inward with the\n     * insets frame size when calculating the rounded corner insets to other windows.\n     *\n     * For example, task bar will draw fake rounded corners above itself, so we need to move the\n     * rounded corner up by the task bar insets size to make other windows see a rounded corner\n     * above the task bar.\n     ",
    "links" : [ "android.view.RoundedCorner" ]
  }, {
    "name" : "FLAG_FORCE_CONSUMING",
    "type" : "int",
    "comment" : "\n     * Controls whether the insets provided by this source should be forcibly consumed.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ANIMATE_RESIZING",
    "type" : "int",
    "comment" : "\n     * Controls whether the insets source will play an animation when resizing.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_BOUNDING_RECTS",
    "type" : "Rect[]",
    "comment" : "\n     * Used when there are no bounding rects to describe an inset, which is only possible when the\n     * insets itself is {@link Insets#NONE}.\n     ",
    "links" : [ "android.graphics.Insets#NONE" ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * An unique integer to identify this source across processes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrame",
    "type" : "Rect",
    "comment" : " Frame of the source in screen coordinate space ",
    "links" : [ ]
  }, {
    "name" : "mVisibleFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundingRects",
    "type" : "Rect[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSideHint",
    "type" : "int",
    "comment" : "\n     * Used to decide which side of the relative frame should receive insets when the frame fully\n     * covers the relative frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTmpFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpBoundingRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<InsetsSource>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(InsetsSource other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setFrame(int left, int top, int right, int bottom)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setFrame(Rect frame)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setVisibleFrame(@Nullable Rect visibleFrame)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setVisible(boolean visible)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setFlags(@Flags int flags)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setFlags(@Flags int flags, @Flags int mask)",
    "returnType" : "InsetsSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource updateSideHint(Rect bounds)",
    "returnType" : "InsetsSource",
    "comment" : "\n     * Updates the side hint which is used to decide which side of the relative frame should receive\n     * insets when the frame fully covers the relative frame.\n     *\n     * @param bounds A rectangle which contains the frame. It will be used to calculate the hint.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource setBoundingRects(@Nullable Rect[] rects)",
    "returnType" : "InsetsSource",
    "comment" : "\n     * Set the bounding rectangles of this source. They are expected to be relative to the source\n     * frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getFrame()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getVisibleFrame()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFlags(int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect[] getBoundingRects()",
    "returnType" : "Rect[]",
    "comment" : "\n     * Returns the bounding rectangles of this source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateInsets(Rect relativeFrame, boolean ignoreVisibility)",
    "returnType" : "Insets",
    "comment" : "\n     * Calculates the insets this source will cause to a client window.\n     *\n     * @param relativeFrame The frame to calculate the insets relative to.\n     * @param ignoreVisibility If true, always reports back insets even if source isn't visible.\n     * @return The resulting insets. The contract is that only one side will be occupied by a\n     *         source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateVisibleInsets(Rect relativeFrame)",
    "returnType" : "Insets",
    "comment" : "\n     * Like {@link #calculateInsets(Rect, boolean)}, but will return visible insets.\n     ",
    "links" : [ "#calculateInsets(Rect" ]
  }, {
    "name" : "private Insets calculateInsets(Rect relativeFrame, Rect frame, boolean ignoreVisibility)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect[] calculateBoundingRects(Rect relativeFrame, boolean ignoreVisibility)",
    "returnType" : "Rect[]",
    "comment" : "\n     * Calculates the bounding rects the source will cause to a client window.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean getIntersection(@NonNull Rect a, @NonNull Rect b, @NonNull Rect out)",
    "returnType" : "boolean",
    "comment" : "\n     * Outputs the intersection of two rectangles. The shared edges will also be counted in the\n     * intersection.\n     *\n     * @param a The first rectangle being intersected with.\n     * @param b The second rectangle being intersected with.\n     * @param out The rectangle which represents the intersection.\n     * @return {@code true} if there is any intersection.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getInsetSide(Insets insets)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the side for a certain {@code insets}. It is required that only one field l/t/r/b\n     * is set in order that this method returns a meaningful result.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String sideToString(@InternalInsetsSide int side)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int createId(Object owner, @IntRange(from = 0, to = 2047) int index, @InsetsType int type)",
    "returnType" : "int",
    "comment" : "\n     * Creates an identifier of an {@link InsetsSource}.\n     *\n     * @param owner An object owned by the owner. Only the owner can modify its own sources.\n     * @param index An owner may have multiple sources with the same type. For example, the system\n     *              server might have multiple display cutout sources. This is used to identify\n     *              which one is which. The value must be in a range of [0, 2047].\n     * @param type The {@link InsetsType type} of the source.\n     * @return a unique integer as the identifier.\n     ",
    "links" : [ "android.view.WindowInsets.Type.InsetsType", "android.view.InsetsSource" ]
  }, {
    "name" : "public static int getIndex(int id)",
    "returnType" : "int",
    "comment" : "\n     * Gets the index from the ID.\n     *\n     * @see #createId(Object, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getType(int id)",
    "returnType" : "int",
    "comment" : "\n     * Gets the {@link InsetsType} from the ID.\n     *\n     * @see #createId(Object, int, int)\n     * @see WindowInsets.Type#indexOf(int)\n     ",
    "links" : [ "android.view.WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "public static String flagsToString(@Flags int flags)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Export the state of {@link InsetsSource} into a protocol buffer output stream.\n     *\n     * @param proto   Stream to write the state to\n     * @param fieldId FieldId of InsetsSource as defined in the parent message\n     ",
    "links" : [ "android.view.InsetsSource" ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o, boolean excludeInvisibleImeFrames)",
    "returnType" : "boolean",
    "comment" : "\n     * @param excludeInvisibleImeFrames If {@link WindowInsets.Type#ime()} frames should be ignored\n     *                                  when IME is not visible.\n     ",
    "links" : [ "WindowInsets.Type#ime()" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void set(InsetsSource other)", "public InsetsSource setFrame(int left, int top, int right, int bottom)", "public InsetsSource setFrame(Rect frame)", "public InsetsSource setVisibleFrame(@Nullable Rect visibleFrame)", "public InsetsSource setVisible(boolean visible)", "public InsetsSource setFlags(@Flags int flags)", "public InsetsSource setFlags(@Flags int flags, @Flags int mask)", "public InsetsSource updateSideHint(Rect bounds)", "public InsetsSource setBoundingRects(@Nullable Rect[] rects)", "public int getId()", "public int getType()", "public Rect getFrame()", "public Rect getVisibleFrame()", "public boolean isVisible()", "public int getFlags()", "public boolean hasFlags(int flags)", "public Rect[] getBoundingRects()", "public Insets calculateInsets(Rect relativeFrame, boolean ignoreVisibility)", "public Insets calculateVisibleInsets(Rect relativeFrame)", "private Insets calculateInsets(Rect relativeFrame, Rect frame, boolean ignoreVisibility)", "public Rect[] calculateBoundingRects(Rect relativeFrame, boolean ignoreVisibility)", "private static boolean getIntersection(@NonNull Rect a, @NonNull Rect b, @NonNull Rect out)", " static int getInsetSide(Insets insets)", " static String sideToString(@InternalInsetsSide int side)", "public static int createId(Object owner, @IntRange(from = 0, to = 2047) int index, @InsetsType int type)", "public static int getIndex(int id)", "public static int getType(int id)", "public static String flagsToString(@Flags int flags)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public void dump(String prefix, PrintWriter pw)", "public boolean equals(@Nullable Object o)", "public boolean equals(@Nullable Object o, boolean excludeInvisibleImeFrames)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()" ],
  "variableNames" : [ "SIDE_NONE", "SIDE_LEFT", "SIDE_TOP", "SIDE_RIGHT", "SIDE_BOTTOM", "SIDE_UNKNOWN", "ID_IME", "ID_IME_CAPTION_BAR", "FLAG_SUPPRESS_SCRIM", "FLAG_INSETS_ROUNDED_CORNER", "FLAG_FORCE_CONSUMING", "FLAG_ANIMATE_RESIZING", "NO_BOUNDING_RECTS", "mFlags", "mId", "mType", "mFrame", "mVisibleFrame", "mBoundingRects", "mVisible", "mSideHint", "mTmpFrame", "mTmpBoundingRect", "CREATOR" ]
}