{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/Metadata.java",
  "packageName" : "android.media",
  "className" : "Metadata",
  "comment" : "\n   Class to hold the media's metadata.  Metadata are used\n   for human consumption and can be embedded in the media (e.g\n   shoutcast) or available from an external source. The source can be\n   local (e.g thumbnail stored in the DB) or remote.\n\n   Metadata is like a Bundle. It is sparse and each key can occur at\n   most once. The key is an integer and the value is the actual metadata.\n\n   The caller is expected to know the type of the metadata and call\n   the right get* method to fetch its value.\n   \n   @hide\n   @deprecated Use {@link MediaMetadata}.\n ",
  "variables" : [ {
    "name" : "ANY",
    "type" : "int",
    "comment" : " Never used for metadata returned, only for filtering.",
    "links" : [ ]
  }, {
    "name" : "PAUSE_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Indicate whether the media can be paused\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEK_BACKWARD_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Indicate whether the media can be backward seeked\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEK_FORWARD_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Indicate whether the media can be forward seeked\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEK_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Indicate whether the media can be seeked\n     ",
    "links" : [ ]
  }, {
    "name" : "TITLE",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "COMMENT",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "COPYRIGHT",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "ALBUM",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "ARTIST",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "AUTHOR",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "COMPOSER",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "GENRE",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "DATE",
    "type" : "int",
    "comment" : " Date",
    "links" : [ ]
  }, {
    "name" : "DURATION",
    "type" : "int",
    "comment" : " Integer(millisec)",
    "links" : [ ]
  }, {
    "name" : "CD_TRACK_NUM",
    "type" : "int",
    "comment" : " Integer 1-based",
    "links" : [ ]
  }, {
    "name" : "CD_TRACK_MAX",
    "type" : "int",
    "comment" : " Integer",
    "links" : [ ]
  }, {
    "name" : "RATING",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "ALBUM_ART",
    "type" : "int",
    "comment" : " byte[]",
    "links" : [ ]
  }, {
    "name" : "VIDEO_FRAME",
    "type" : "int",
    "comment" : " Bitmap",
    "links" : [ ]
  }, {
    "name" : "BIT_RATE",
    "type" : "int",
    "comment" : " Integer, Aggregate rate of",
    "links" : [ ]
  }, {
    "name" : "AUDIO_BIT_RATE",
    "type" : "int",
    "comment" : " Integer, bps",
    "links" : [ ]
  }, {
    "name" : "VIDEO_BIT_RATE",
    "type" : "int",
    "comment" : " Integer, bps",
    "links" : [ ]
  }, {
    "name" : "AUDIO_SAMPLE_RATE",
    "type" : "int",
    "comment" : " Integer, Hz",
    "links" : [ ]
  }, {
    "name" : "VIDEO_FRAME_RATE",
    "type" : "int",
    "comment" : " Integer, Hz",
    "links" : [ ]
  }, {
    "name" : "MIME_TYPE",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "AUDIO_CODEC",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "VIDEO_CODEC",
    "type" : "int",
    "comment" : " String",
    "links" : [ ]
  }, {
    "name" : "VIDEO_HEIGHT",
    "type" : "int",
    "comment" : " Integer",
    "links" : [ ]
  }, {
    "name" : "VIDEO_WIDTH",
    "type" : "int",
    "comment" : " Integer",
    "links" : [ ]
  }, {
    "name" : "NUM_TRACKS",
    "type" : "int",
    "comment" : " Integer",
    "links" : [ ]
  }, {
    "name" : "DRM_CRIPPLED",
    "type" : "int",
    "comment" : " Boolean",
    "links" : [ ]
  }, {
    "name" : "LAST_SYSTEM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRST_CUSTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_NONE",
    "type" : "Set<Integer>",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_ALL",
    "type" : "Set<Integer>",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "INTEGER_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DATE_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTE_ARRAY_VAL",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_TYPE",
    "type" : "int",
    "comment" : " FIXME: misses a type for bitmaps.",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kInt32Size",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMetaHeaderSize",
    "type" : "int",
    "comment" : "  size + marker",
    "links" : [ ]
  }, {
    "name" : "kRecordHeaderSize",
    "type" : "int",
    "comment" : " size + id + type",
    "links" : [ ]
  }, {
    "name" : "kMetaMarker",
    "type" : "int",
    "comment" : " 'M' 'E' 'T' 'A'",
    "links" : [ ]
  }, {
    "name" : "mParcel",
    "type" : "Parcel",
    "comment" : " After a successful parsing, set the parcel with the serialized metadata.",
    "links" : [ ]
  }, {
    "name" : "mKeyToPosMap",
    "type" : "HashMap<Integer, Integer>",
    "comment" : " Value: Offset of the metadata type field in the record.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean scanAllRecords(Parcel parcel, int bytesLeft)",
    "returnType" : "boolean",
    "comment" : "\n     * Go over all the records, collecting metadata keys and records'\n     * type field offset in the Parcel. These are stored in\n     * mKeyToPosMap for latter retrieval.\n     * Format of a metadata record:\n     <pre>\n                         1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                     record size                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                     metadata key                              |  // TITLE\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                     metadata type                             |  // STRING_VAL\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                                                               |\n      |                .... metadata payload ....                     |\n      |                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     </pre>\n     * @param parcel With the serialized records.\n     * @param bytesLeft How many bytes in the parcel should be processed.\n     * @return false if an error occurred during parsing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean parse(Parcel parcel)",
    "returnType" : "boolean",
    "comment" : "\n     * Check a parcel containing metadata is well formed. The header\n     * is checked as well as the individual records format. However, the\n     * data inside the record is not checked because we do lazy access\n     * (we check/unmarshall only data the user asks for.)\n     *\n     * Format of a metadata parcel:\n     <pre>\n                         1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                     metadata total size                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |     'M'       |     'E'       |     'T'       |     'A'       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                                                               |\n      |                .... metadata records ....                     |\n      |                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     </pre>\n     *\n     * @param parcel With the serialized data. Metadata keeps a\n     *               reference on it to access it later on. The caller\n     *               should not modify the parcel after this call (and\n     *               not call recycle on it.)\n     * @return false if an error occurred.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> keySet()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * @return The set of metadata ID found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean has(final int metadataId)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if a value is present for the given key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(final int key)",
    "returnType" : "String",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(final int key)",
    "returnType" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(final int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the boolean value indicated by key\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLong(final int key)",
    "returnType" : "long",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(final int key)",
    "returnType" : "double",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getByteArray(final int key)",
    "returnType" : "byte[]",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getDate(final int key)",
    "returnType" : "Date",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int lastSytemId()",
    "returnType" : "int",
    "comment" : "\n     * @return the last available system metadata id. Ids are\n     *         1-indexed.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int firstCustomId()",
    "returnType" : "int",
    "comment" : "\n     * @return the first available cutom metadata id.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int lastType()",
    "returnType" : "int",
    "comment" : "\n     * @return the last value of known type. Types are 1-indexed.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkMetadataId(final int val)",
    "returnType" : "boolean",
    "comment" : "\n     * Check val is either a system id or a custom one.\n     * @param val Metadata key to test.\n     * @return true if it is in a valid range.\n     *",
    "links" : [ ]
  }, {
    "name" : "private void checkType(final int key, final int expectedType)",
    "returnType" : "void",
    "comment" : "\n     * Check the type of the data match what is expected.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ANY", "PAUSE_AVAILABLE", "SEEK_BACKWARD_AVAILABLE", "SEEK_FORWARD_AVAILABLE", "SEEK_AVAILABLE", "TITLE", "COMMENT", "COPYRIGHT", "ALBUM", "ARTIST", "AUTHOR", "COMPOSER", "GENRE", "DATE", "DURATION", "CD_TRACK_NUM", "CD_TRACK_MAX", "RATING", "ALBUM_ART", "VIDEO_FRAME", "BIT_RATE", "AUDIO_BIT_RATE", "VIDEO_BIT_RATE", "AUDIO_SAMPLE_RATE", "VIDEO_FRAME_RATE", "MIME_TYPE", "AUDIO_CODEC", "VIDEO_CODEC", "VIDEO_HEIGHT", "VIDEO_WIDTH", "NUM_TRACKS", "DRM_CRIPPLED", "LAST_SYSTEM", "FIRST_CUSTOM", "MATCH_NONE", "MATCH_ALL", "STRING_VAL", "INTEGER_VAL", "BOOLEAN_VAL", "LONG_VAL", "DOUBLE_VAL", "DATE_VAL", "BYTE_ARRAY_VAL", "LAST_TYPE", "TAG", "kInt32Size", "kMetaHeaderSize", "kRecordHeaderSize", "kMetaMarker", "mParcel", "mKeyToPosMap" ],
  "methodNames" : [ "private boolean scanAllRecords(Parcel parcel, int bytesLeft)", "public boolean parse(Parcel parcel)", "public Set<Integer> keySet()", "public boolean has(final int metadataId)", "public String getString(final int key)", "public int getInt(final int key)", "public boolean getBoolean(final int key)", "public long getLong(final int key)", "public double getDouble(final int key)", "public byte[] getByteArray(final int key)", "public Date getDate(final int key)", "public static int lastSytemId()", "public static int firstCustomId()", "public static int lastType()", "private boolean checkMetadataId(final int val)", "private void checkType(final int key, final int expectedType)" ]
}