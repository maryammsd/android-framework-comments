{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TransliteratorRegistry.java",
  "packageName" : "android.icu.text",
  "className" : "TransliteratorRegistry",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOCALE_SEP",
    "type" : "char",
    "comment" : " char constants",
    "links" : [ ]
  }, {
    "name" : "NO_VARIANT",
    "type" : "String",
    "comment" : " empty string",
    "links" : [ ]
  }, {
    "name" : "ANY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "registry",
    "type" : "Map<CaseInsensitiveString, Object[]>",
    "comment" : "\n     * Dynamic registry mapping full IDs to Entry objects.  This\n     * contains both public and internal entities.  The visibility is\n     * controlled by whether an entry is listed in availableIDs and\n     * specDAG or not.\n     *\n     * Keys are CaseInsensitiveString objects.\n     * Values are objects of class Class (subclass of Transliterator),\n     * RuleBasedTransliterator.Data, Transliterator.Factory, or one\n     * of the entry classes defined here (AliasEntry or ResourceEntry).\n     ",
    "links" : [ ]
  }, {
    "name" : "specDAG",
    "type" : "Map<CaseInsensitiveString, Map<CaseInsensitiveString, List<CaseInsensitiveString>>>",
    "comment" : "\n     * DAG of visible IDs by spec.  Hashtable: source => (Hashtable:\n     * target => (Vector: variant)) The Vector of variants is never\n     * empty.  For a source-target with no variant, the special\n     * variant NO_VARIANT (the empty string) is stored in slot zero of\n     * the UVector.\n     *\n     * Keys are CaseInsensitiveString objects.\n     * Values are Hashtable of (CaseInsensitiveString -> Vector of\n     * CaseInsensitiveString)\n     ",
    "links" : [ ]
  }, {
    "name" : "availableIDs",
    "type" : "Set<CaseInsensitiveString>",
    "comment" : "\n     * Vector of public full IDs (CaseInsensitiveString objects).\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Transliterator get(String ID, StringBuffer aliasReturn)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Given a simple ID (forward direction, no inline filter, not\n     * compound) attempt to instantiate it from the registry.  Return\n     * 0 on failure.\n     *\n     * Return a non-empty aliasReturn value if the ID points to an alias.\n     * We cannot instantiate it ourselves because the alias may contain\n     * filters or compounds, which we do not understand.  Caller should\n     * make aliasReturn empty before calling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String ID, Class<? extends Transliterator> transliteratorSubclass, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register a class.  This adds an entry to the\n     * dynamic store, or replaces an existing entry.  Any entry in the\n     * underlying static locale resource store is masked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String ID, Transliterator.Factory factory, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register an ID and a factory function pointer.  This adds an\n     * entry to the dynamic store, or replaces an existing entry.  Any\n     * entry in the underlying static locale resource store is masked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String ID, String resourceName, int dir, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register an ID and a resource name.  This adds an entry to the\n     * dynamic store, or replaces an existing entry.  Any entry in the\n     * underlying static locale resource store is masked.\n     ",
    "links" : [ ]
  }, {
    "name" : " void put(String ID, Supplier<String> resourceSupplier, int dir, boolean visible)",
    "returnType" : "void",
    "comment" : " BEGIN Android patch: Lazily load transliterator rules.",
    "links" : [ ]
  }, {
    "name" : "public void put(String ID, String alias, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register an ID and an alias ID.  This adds an entry to the\n     * dynamic store, or replaces an existing entry.  Any entry in the\n     * underlying static locale resource store is masked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String ID, Transliterator trans, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register an ID and a Transliterator object.  This adds an entry\n     * to the dynamic store, or replaces an existing entry.  Any entry\n     * in the underlying static locale resource store is masked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(String ID)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an ID.  This removes an entry from the dynamic store\n     * if there is one.  The static locale resource store is\n     * unaffected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getAvailableIDs()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over the programmatic names of visible\n     * registered transliterators.\n     *\n     * @return An <code>Enumeration</code> over <code>String</code> objects\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getAvailableSources()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over all visible source names.\n     *\n     * @return An <code>Enumeration</code> over <code>String</code> objects\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getAvailableTargets(String source)",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over visible target names for the given\n     * source.\n     *\n     * @return An <code>Enumeration</code> over <code>String</code> objects\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> getAvailableVariants(String source, String target)",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over visible variant names for the given\n     * source and target.\n     *\n     * @return An <code>Enumeration</code> over <code>String</code> objects\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerEntry(String source, String target, String variant, Object entry, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method.  Calls 6-arg registerEntry().\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerEntry(String ID, Object entry, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method.  Calls 6-arg registerEntry().\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerEntry(String ID, String source, String target, String variant, Object entry, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register an entry object (adopted) with the given ID, source,\n     * target, and variant strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerSTV(String source, String target, String variant)",
    "returnType" : "void",
    "comment" : "\n     * Register a source-target/variant in the specDAG.  Variant may be\n     * empty, but source and target must not be.  If variant is empty then\n     * the special variant NO_VARIANT is stored in slot zero of the\n     * UVector of variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeSTV(String source, String target, String variant)",
    "returnType" : "void",
    "comment" : "\n     * Remove a source-target/variant from the specDAG.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] findInDynamicStore(Spec src, Spec trg, String variant)",
    "returnType" : "Object[]",
    "comment" : "\n     * Attempt to find a source-target/variant in the dynamic registry\n     * store.  Return 0 on failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] findInStaticStore(Spec src, Spec trg, String variant)",
    "returnType" : "Object[]",
    "comment" : "\n     * Attempt to find a source-target/variant in the static locale\n     * resource store.  Do not perform fallback.  Return 0 on failure.\n     *\n     * On success, create a new entry object, register it in the dynamic\n     * store, and return a pointer to it, but do not make it public --\n     * just because someone requested something, we do not expand the\n     * available ID list (or spec DAG).\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] findInBundle(Spec specToOpen, Spec specToFind, String variant, int direction)",
    "returnType" : "Object[]",
    "comment" : "\n     * Attempt to find an entry in a single resource bundle.  This is\n     * a one-sided lookup.  findInStaticStore() performs up to two such\n     * lookups, one for the source, and one for the target.\n     *\n     * Do not perform fallback.  Return 0 on failure.\n     *\n     * On success, create a new Entry object, populate it, and return it.\n     * The caller owns the returned object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] find(String ID)",
    "returnType" : "Object[]",
    "comment" : "\n     * Convenience method.  Calls 3-arg find().\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] find(String source, String target, String variant)",
    "returnType" : "Object[]",
    "comment" : "\n     * Top-level find method.  Attempt to find a source-target/variant in\n     * either the dynamic or the static (locale resource) store.  Perform\n     * fallback.\n     *\n     * Lookup sequence for ss_SS_SSS-tt_TT_TTT/v:\n     *\n     *   ss_SS_SSS-tt_TT_TTT/v -- in hashtable\n     *   ss_SS_SSS-tt_TT_TTT/v -- in ss_SS_SSS (no fallback)\n     *\n     *     repeat with t = tt_TT_TTT, tt_TT, tt, and tscript\n     *\n     *     ss_SS_SSS-t/*\n     *     ss_SS-t/*\n     *     ss-t/*\n     *     sscript-t/*\n     *\n     * Here * matches the first variant listed.\n     *\n     * Caller does NOT own returned object.  Return 0 on failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Transliterator instantiateEntry(String ID, Object[] entryWrapper, StringBuffer aliasReturn)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Given an Entry object, instantiate it.  Caller owns result.  Return\n     * 0 on failure.\n     *\n     * Return a non-empty aliasReturn value if the ID points to an alias.\n     * We cannot instantiate it ourselves because the alias may contain\n     * filters or compounds, which we do not understand.  Caller should\n     * make aliasReturn empty before calling.\n     *\n     * The entry object is assumed to reside in the dynamic store.  It may be\n     * modified.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Transliterator get(String ID, StringBuffer aliasReturn)", "public void put(String ID, Class<? extends Transliterator> transliteratorSubclass, boolean visible)", "public void put(String ID, Transliterator.Factory factory, boolean visible)", "public void put(String ID, String resourceName, int dir, boolean visible)", " void put(String ID, Supplier<String> resourceSupplier, int dir, boolean visible)", "public void put(String ID, String alias, boolean visible)", "public void put(String ID, Transliterator trans, boolean visible)", "public void remove(String ID)", "public Enumeration<String> getAvailableIDs()", "public Enumeration<String> getAvailableSources()", "public Enumeration<String> getAvailableTargets(String source)", "public Enumeration<String> getAvailableVariants(String source, String target)", "private void registerEntry(String source, String target, String variant, Object entry, boolean visible)", "private void registerEntry(String ID, Object entry, boolean visible)", "private void registerEntry(String ID, String source, String target, String variant, Object entry, boolean visible)", "private void registerSTV(String source, String target, String variant)", "private void removeSTV(String source, String target, String variant)", "private Object[] findInDynamicStore(Spec src, Spec trg, String variant)", "private Object[] findInStaticStore(Spec src, Spec trg, String variant)", "private Object[] findInBundle(Spec specToOpen, Spec specToFind, String variant, int direction)", "private Object[] find(String ID)", "private Object[] find(String source, String target, String variant)", "private Transliterator instantiateEntry(String ID, Object[] entryWrapper, StringBuffer aliasReturn)" ],
  "variableNames" : [ "LOCALE_SEP", "NO_VARIANT", "ANY", "registry", "specDAG", "availableIDs", "DEBUG" ]
}