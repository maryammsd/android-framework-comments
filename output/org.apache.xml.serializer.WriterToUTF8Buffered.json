{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/WriterToUTF8Buffered.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "WriterToUTF8Buffered",
  "comment" : "\n * This class writes unicode characters to a byte stream (java.io.OutputStream)\n * as quickly as possible. It buffers the output in an internal\n * buffer which must be flushed to the OutputStream when done. This flushing\n * is done via the close() flush() or flushBuffer() method. \n * \n * This class is only used internally within Xalan.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "BYTES_MAX",
    "type" : "int",
    "comment" : " number of bytes that the byte buffer can hold.\n   * This is a fixed constant is used rather than m_outputBytes.lenght for performance.\n   ",
    "links" : [ ]
  }, {
    "name" : "CHARS_MAX",
    "type" : "int",
    "comment" : " number of characters that the character buffer can hold.\n   * This is 1/3 of the number of bytes because UTF-8 encoding\n   * can expand one unicode character by up to 3 bytes.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_os",
    "type" : "OutputStream",
    "comment" : " The byte stream to write to. (sc & sb remove final to compile in JDK 1.1.8) ",
    "links" : [ ]
  }, {
    "name" : "m_outputBytes",
    "type" : "byte[]",
    "comment" : "\n   * The internal buffer where data is stored.\n   * (sc & sb remove final to compile in JDK 1.1.8)\n   ",
    "links" : [ ]
  }, {
    "name" : "m_inputChars",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n   * The number of valid bytes in the buffer. This value is always\n   * in the range <tt>0</tt> through <tt>m_outputBytes.length</tt>; elements\n   * <tt>m_outputBytes[0]</tt> through <tt>m_outputBytes[count-1]</tt> contain valid\n   * byte data.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(final int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n   * Write a single character.  The character to be written is contained in\n   * the 16 low-order bits of the given integer value; the 16 high-order bits\n   * are ignored.\n   *\n   * <p> Subclasses that intend to support efficient single-character output\n   * should override this method.\n   *\n   * @param c  int specifying a character to be written.\n   * @exception  IOException  If an I/O error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : "public void write(final char[] chars, final int start, final int length) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n   * Write a portion of an array of characters.\n   *\n   * @param  chars  Array of characters\n   * @param  start   Offset from which to start writing characters\n   * @param  length   Number of characters to write\n   *\n   * @exception  IOException  If an I/O error occurs\n   *\n   * @throws java.io.IOException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void write(final String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n   * Write a string.\n   *\n   * @param  s  String to be written\n   *\n   * @exception  IOException  If an I/O error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : "public void flushBuffer() throws IOException",
    "returnType" : "void",
    "comment" : "\n   * Flush the internal buffer\n   *\n   * @throws IOException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n   * Flush the stream.  If the stream has saved any characters from the\n   * various write() methods in a buffer, write them immediately to their\n   * intended destination.  Then, if that destination is another character or\n   * byte stream, flush it.  Thus one flush() invocation will flush all the\n   * buffers in a chain of Writers and OutputStreams.\n   *\n   * @exception  IOException  If an I/O error occurs\n   *\n   * @throws java.io.IOException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n   * Close the stream, flushing it first.  Once a stream has been closed,\n   * further write() or flush() invocations will cause an IOException to be\n   * thrown.  Closing a previously-closed stream, however, has no effect.\n   *\n   * @exception  IOException  If an I/O error occurs\n   *\n   * @throws java.io.IOException\n   ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n   * Get the output stream where the events will be serialized to.\n   *\n   * @return reference to the result stream, or null of only a writer was\n   * set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(final int c) throws IOException", "public void write(final char[] chars, final int start, final int length) throws java.io.IOException", "public void write(final String s) throws IOException", "public void flushBuffer() throws IOException", "public void flush() throws java.io.IOException", "public void close() throws java.io.IOException", "public OutputStream getOutputStream()", "public Writer getWriter()" ],
  "variableNames" : [ "BYTES_MAX", "CHARS_MAX", "m_os", "m_outputBytes", "m_inputChars", "count" ]
}