{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/http/UploadDataProvider.java",
  "packageName" : "android.net.http",
  "className" : "UploadDataProvider",
  "comment" : "\n * Abstract class allowing the embedder to provide an upload body to {@link UrlRequest}. It supports\n * both non-chunked (size known in advanced) and chunked (size not known in advance) uploads. Be\n * aware that not all servers support chunked uploads.\n *\n * <p>An upload is either always chunked, across multiple uploads if the data\n * ends up being sent more than once, or never chunked.\n ",
  "links" : [ "android.net.http.UrlRequest" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract long getLength() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * If this is a non-chunked upload, returns the length of the upload. Must always return -1 if\n     * this is a chunked upload.\n     *\n     * @return the length of the upload for non-chunked uploads, -1 otherwise.\n     * @throws IOException if any IOException occurred during the process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void read(@NonNull UploadDataSink uploadDataSink, @NonNull ByteBuffer byteBuffer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads upload data into {@code byteBuffer}. Upon completion, the buffer's position is updated\n     * to the end of the bytes that were read. The buffer's limit is not changed. Each call of this\n     * method must be followed be a single call, either synchronous or asynchronous, to {@code\n     * uploadDataSink}: {@link UploadDataSink#onReadSucceeded} on success or {@link\n     * UploadDataSink#onReadError} on failure. Neither read nor rewind will be called until one of\n     * those methods or the other is called. Even if the associated {@link UrlRequest} is canceled,\n     * one or the other must still be called before resources can be safely freed. Throwing an\n     * exception will also result in resources being freed and the request being errored out.\n     *\n     * @param uploadDataSink The object to notify when the read has completed, successfully or\n     * otherwise.\n     * @param byteBuffer The buffer to copy the read bytes into. Do not change byteBuffer's limit.\n     * @throws IOException if any IOException occurred during the process. {@link\n     * UrlRequest.Callback#onFailed} will be called with the thrown exception set as the cause of\n     * the\n     * {@link CallbackException}.\n     ",
    "links" : [ "UrlRequest.Callback#onFailed", "android.net.http.UploadDataSink#onReadSucceeded", "android.net.http.UrlRequest", "android.net.http.UploadDataSink#onReadError", "android.net.http.CallbackException" ]
  }, {
    "name" : "public abstract void rewind(@NonNull UploadDataSink uploadDataSink) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Rewinds upload data. Each call must be followed be a single call, either synchronous or\n     * asynchronous, to {@code uploadDataSink}: {@link UploadDataSink#onRewindSucceeded} on success\n     * or\n     * {@link UploadDataSink#onRewindError} on failure. Neither read nor rewind will be called until\n     * one of those methods or the other is called. Even if the associated {@link UrlRequest} is\n     * canceled, one or the other must still be called before resources can be safely freed.\n     * Throwing an exception will also result in resources being freed and the request being errored\n     * out.\n     *\n     * <p>If rewinding is not supported, this should call\n     * {@link UploadDataSink#onRewindError}. Note that rewinding is required to follow redirects\n     * that preserve the upload body, and for retrying when the server times out stale sockets.\n     *\n     * @param uploadDataSink The object to notify when the rewind operation has completed,\n     * successfully or otherwise.\n     * @throws IOException if any IOException occurred during the process. {@link\n     * UrlRequest.Callback#onFailed} will be called with the thrown exception set as the cause of\n     * the\n     * {@link CallbackException}.\n     ",
    "links" : [ "UrlRequest.Callback#onFailed", "android.net.http.UrlRequest", "android.net.http.UploadDataSink#onRewindSucceeded", "android.net.http.CallbackException", "android.net.http.UploadDataSink#onRewindError" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called when this UploadDataProvider is no longer needed by a request, so that resources (like\n     * a file) can be explicitly released.\n     *\n     * @throws IOException if any IOException occurred during the process. This will cause the\n     *         request\n     * to fail if it is not yet complete; otherwise it will be logged.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract long getLength() throws IOException", "public abstract void read(@NonNull UploadDataSink uploadDataSink, @NonNull ByteBuffer byteBuffer) throws IOException", "public abstract void rewind(@NonNull UploadDataSink uploadDataSink) throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ ]
}