{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/functions/ObjectFactory.java",
  "packageName" : "org.apache.xpath.functions",
  "className" : "ObjectFactory",
  "comment" : "\n * This class is duplicated for each JAXP subpackage so keep it in sync.\n * It is package private and therefore is not exposed as part of the JAXP\n * API.\n * <p>\n * This code is designed to implement the JAXP 1.1 spec pluggability\n * feature and is designed to run on JDK version 1.1 and\n * later, and to compile on JDK 1.2 and onward.  \n * The code also runs both as part of an unbundled jar file and\n * when bundled as part of the JDK.\n * <p>\n * This class was moved from the <code>javax.xml.parsers.ObjectFactory</code>\n * class and modified to be used as a general utility for creating objects \n * dynamically.\n *\n * @version $Id: ObjectFactory.java 468655 2006-10-28 07:12:06Z minchau $\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_PROPERTIES_FILENAME",
    "type" : "String",
    "comment" : " name of default properties file to look for in JDK's jre/lib directory",
    "links" : [ ]
  }, {
    "name" : "SERVICES_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Set to true for debugging ",
    "links" : [ ]
  }, {
    "name" : "fXalanProperties",
    "type" : "Properties",
    "comment" : " cache the contents of the xalan.properties file.\n     *  Until an attempt has been made to read this file, this will\n     * be null; if the file does not exist or we encounter some other error\n     * during the read, this will be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "fLastModified",
    "type" : "long",
    "comment" : "*\n     * Cache the time stamp of the xalan.properties file so\n     * that we know if it's been modified and can invalidate\n     * the cache when necessary.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static Object createObject(String factoryId, String fallbackClassName) throws ConfigurationError",
    "returnType" : "Object",
    "comment" : "\n     * Finds the implementation Class object in the specified order.  The\n     * specified order is the following:\n     * <ol>\n     *  <li>query the system property using <code>System.getProperty</code>\n     *  <li>read <code>META-INF/services/<i>factoryId</i></code> file\n     *  <li>use fallback classname\n     * </ol>\n     *\n     * @return instance of factory, never null\n     *\n     * @param factoryId             Name of the factory to find, same as\n     *                              a property name\n     * @param fallbackClassName     Implementation class name, if nothing else\n     *                              is found.  Use null to mean no fallback.\n     *\n     * @exception ObjectFactory.ConfigurationError\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object createObject(String factoryId, String propertiesFilename, String fallbackClassName) throws ConfigurationError",
    "returnType" : "Object",
    "comment" : "\n     * Finds the implementation Class object in the specified order.  The\n     * specified order is the following:\n     * <ol>\n     *  <li>query the system property using <code>System.getProperty</code>\n     *  <li>read <code>$java.home/lib/<i>propertiesFilename</i></code> file\n     *  <li>read <code>META-INF/services/<i>factoryId</i></code> file\n     *  <li>use fallback classname\n     * </ol>\n     *\n     * @return instance of factory, never null\n     *\n     * @param factoryId             Name of the factory to find, same as\n     *                              a property name\n     * @param propertiesFilename The filename in the $java.home/lib directory\n     *                           of the properties file.  If none specified,\n     *                           ${java.home}/lib/xalan.properties will be used.\n     * @param fallbackClassName     Implementation class name, if nothing else\n     *                              is found.  Use null to mean no fallback.\n     *\n     * @exception ObjectFactory.ConfigurationError\n     ",
    "links" : [ ]
  }, {
    "name" : " static Class lookUpFactoryClass(String factoryId) throws ConfigurationError",
    "returnType" : "Class",
    "comment" : "\n     * Finds the implementation Class object in the specified order.  The\n     * specified order is the following:\n     * <ol>\n     *  <li>query the system property using <code>System.getProperty</code>\n     *  <li>read <code>$java.home/lib/<i>propertiesFilename</i></code> file\n     *  <li>read <code>META-INF/services/<i>factoryId</i></code> file\n     *  <li>use fallback classname\n     * </ol>\n     *\n     * @return Class object of factory, never null\n     *\n     * @param factoryId             Name of the factory to find, same as\n     *                              a property name\n     * @param propertiesFilename The filename in the $java.home/lib directory\n     *                           of the properties file.  If none specified,\n     *                           ${java.home}/lib/xalan.properties will be used.\n     * @param fallbackClassName     Implementation class name, if nothing else\n     *                              is found.  Use null to mean no fallback.\n     *\n     * @exception ObjectFactory.ConfigurationError\n     ",
    "links" : [ ]
  }, {
    "name" : " static Class lookUpFactoryClass(String factoryId, String propertiesFilename, String fallbackClassName) throws ConfigurationError",
    "returnType" : "Class",
    "comment" : "\n     * Finds the implementation Class object in the specified order.  The\n     * specified order is the following:\n     * <ol>\n     *  <li>query the system property using <code>System.getProperty</code>\n     *  <li>read <code>$java.home/lib/<i>propertiesFilename</i></code> file\n     *  <li>read <code>META-INF/services/<i>factoryId</i></code> file\n     *  <li>use fallback classname\n     * </ol>\n     *\n     * @return Class object that provides factory service, never null\n     *\n     * @param factoryId             Name of the factory to find, same as\n     *                              a property name\n     * @param propertiesFilename The filename in the $java.home/lib directory\n     *                           of the properties file.  If none specified,\n     *                           ${java.home}/lib/xalan.properties will be used.\n     * @param fallbackClassName     Implementation class name, if nothing else\n     *                              is found.  Use null to mean no fallback.\n     *\n     * @exception ObjectFactory.ConfigurationError\n     ",
    "links" : [ ]
  }, {
    "name" : " static String lookUpFactoryClassName(String factoryId, String propertiesFilename, String fallbackClassName)",
    "returnType" : "String",
    "comment" : "\n     * Finds the name of the required implementation class in the specified\n     * order.  The specified order is the following:\n     * <ol>\n     *  <li>query the system property using <code>System.getProperty</code>\n     *  <li>read <code>$java.home/lib/<i>propertiesFilename</i></code> file\n     *  <li>read <code>META-INF/services/<i>factoryId</i></code> file\n     *  <li>use fallback classname\n     * </ol>\n     *\n     * @return name of class that provides factory service, never null\n     *\n     * @param factoryId             Name of the factory to find, same as\n     *                              a property name\n     * @param propertiesFilename The filename in the $java.home/lib directory\n     *                           of the properties file.  If none specified,\n     *                           ${java.home}/lib/xalan.properties will be used.\n     * @param fallbackClassName     Implementation class name, if nothing else\n     *                              is found.  Use null to mean no fallback.\n     *\n     * @exception ObjectFactory.ConfigurationError\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void debugPrintln(String msg)",
    "returnType" : "void",
    "comment" : " Prints a message to standard error if debugging is enabled. ",
    "links" : [ ]
  }, {
    "name" : " static ClassLoader findClassLoader() throws ConfigurationError",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Figure out which ClassLoader to use.  For JDK 1.2 and later use\n     * the context ClassLoader.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object newInstance(String className, ClassLoader cl, boolean doFallback) throws ConfigurationError",
    "returnType" : "Object",
    "comment" : "\n     * Create an instance of a class using the specified ClassLoader\n     ",
    "links" : [ ]
  }, {
    "name" : " static Class findProviderClass(String className, ClassLoader cl, boolean doFallback) throws ClassNotFoundException, ConfigurationError",
    "returnType" : "Class",
    "comment" : "\n     * Find a Class using the specified ClassLoader\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String findJarServiceProviderName(String factoryId)",
    "returnType" : "String",
    "comment" : "\n     * Find the name of service provider using Jar Service Provider Mechanism\n     *\n     * @return instance of provider class if found or null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Object createObject(String factoryId, String fallbackClassName) throws ConfigurationError", " static Object createObject(String factoryId, String propertiesFilename, String fallbackClassName) throws ConfigurationError", " static Class lookUpFactoryClass(String factoryId) throws ConfigurationError", " static Class lookUpFactoryClass(String factoryId, String propertiesFilename, String fallbackClassName) throws ConfigurationError", " static String lookUpFactoryClassName(String factoryId, String propertiesFilename, String fallbackClassName)", "private static void debugPrintln(String msg)", " static ClassLoader findClassLoader() throws ConfigurationError", " static Object newInstance(String className, ClassLoader cl, boolean doFallback) throws ConfigurationError", " static Class findProviderClass(String className, ClassLoader cl, boolean doFallback) throws ClassNotFoundException, ConfigurationError", "private static String findJarServiceProviderName(String factoryId)" ],
  "variableNames" : [ "DEFAULT_PROPERTIES_FILENAME", "SERVICES_PATH", "DEBUG", "fXalanProperties", "fLastModified" ]
}