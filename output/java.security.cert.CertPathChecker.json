{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertPathChecker.java",
  "packageName" : "java.security.cert",
  "className" : "CertPathChecker",
  "comment" : "\n * <p>Performs one or more checks on each {@code Certificate} of a\n * {@code CertPath}.\n *\n * <p>A {@code CertPathChecker} implementation is typically created to extend\n * a certification path validation algorithm. For example, an implementation\n * may check for and process a critical private extension of each certificate\n * in a certification path.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void init(boolean forward) throws CertPathValidatorException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the internal state of this {@code CertPathChecker}.\n     *\n     * <p>The {@code forward} flag specifies the order that certificates will\n     * be passed to the {@link #check check} method (forward or reverse).\n     *\n     * @param forward the order that certificates are presented to the\n     *        {@code check} method. If {@code true}, certificates are\n     *        presented from target to trust anchor (forward); if\n     *        {@code false}, from trust anchor to target (reverse).\n     * @throws CertPathValidatorException if this {@code CertPathChecker} is\n     *         unable to check certificates in the specified order\n     ",
    "links" : [ "#check" ]
  }, {
    "name" : " boolean isForwardCheckingSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if forward checking is supported. Forward checking refers\n     * to the ability of the {@code CertPathChecker} to perform its checks\n     * when certificates are presented to the {@code check} method in the\n     * forward direction (from target to trust anchor).\n     *\n     * @return {@code true} if forward checking is supported, {@code false}\n     *         otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : " void check(Certificate cert) throws CertPathValidatorException",
    "returnType" : "void",
    "comment" : "\n     * Performs the check(s) on the specified certificate using its internal\n     * state. The certificates are presented in the order specified by the\n     * {@code init} method.\n     *\n     * @param cert the {@code Certificate} to be checked\n     * @throws CertPathValidatorException if the specified certificate does\n     *         not pass the check\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void init(boolean forward) throws CertPathValidatorException", " boolean isForwardCheckingSupported()", " void check(Certificate cert) throws CertPathValidatorException" ],
  "variableNames" : [ ]
}