{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/parsers/DocumentBuilderFactory.java",
  "packageName" : "javax.xml.parsers",
  "className" : "DocumentBuilderFactory",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "validating",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespaceAware",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "whitespace",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "expandEntityRef",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ignoreComments",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "coalescing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DocumentBuilderFactory newInstance()",
    "returnType" : "DocumentBuilderFactory",
    "comment" : "\n     * Returns Android's implementation of {@code DocumentBuilderFactory}.\n     * Unlike other Java implementations, this method does not consult system\n     * properties, property files, or the services API.\n     *\n     * @return a new DocumentBuilderFactory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DocumentBuilderFactory newInstance(String factoryClassName, ClassLoader classLoader)",
    "returnType" : "DocumentBuilderFactory",
    "comment" : "\n     * Returns an instance of the named implementation of {@code DocumentBuilderFactory}.\n     *\n     * @throws FactoryConfigurationError if {@code factoryClassName} is not available or cannot be\n     *     instantiated.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DocumentBuilder newDocumentBuilder() throws ParserConfigurationException",
    "returnType" : "DocumentBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceAware(boolean awareness)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setValidating(boolean validating)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoringElementContentWhitespace(boolean whitespace)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExpandEntityReferences(boolean expandEntityRef)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoringComments(boolean ignoreComments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCoalescing(boolean coalescing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNamespaceAware()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValidating()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isIgnoringElementContentWhitespace()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isIgnoringComments()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCoalescing()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAttribute(String name, Object value) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Allows the user to set specific attributes on the underlying\n     * implementation.\n     * @param name The name of the attribute.\n     * @param value The value of the attribute.\n     * @exception IllegalArgumentException thrown if the underlying\n     * implementation doesn't recognize the attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Object getAttribute(String name) throws IllegalArgumentException",
    "returnType" : "Object",
    "comment" : "\n     * Allows the user to retrieve specific attributes on the underlying\n     * implementation.\n     * @param name The name of the attribute.\n     * @return value The value of the attribute.\n     * @exception IllegalArgumentException thrown if the underlying\n     * implementation doesn't recognize the attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFeature(String name, boolean value) throws ParserConfigurationException",
    "returnType" : "void",
    "comment" : "\n     * <p>Set a feature for this <code>DocumentBuilderFactory</code> and <code>DocumentBuilder</code>s created by this factory.</p>\n     *\n     * <p>\n     * Feature names are fully qualified {@link java.net.URI}s.\n     * Implementations may define their own features.\n     * An {@link ParserConfigurationException} is thrown if this <code>DocumentBuilderFactory</code> or the\n     * <code>DocumentBuilder</code>s it creates cannot support the feature.\n     * It is possible for an <code>DocumentBuilderFactory</code> to expose a feature value but be unable to change its state.\n     * </p>\n     *\n     * <p>\n     * Earlier versions of this documentation have mandated support for the\n     * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature, but this is not a\n     * supported feature on any version of Android.\n     * </p>\n     *\n     * @param name Feature name.\n     * @param value Is feature state <code>true</code> or <code>false</code>.\n     *\n     * @throws ParserConfigurationException if this <code>DocumentBuilderFactory</code> or the <code>DocumentBuilder</code>s\n     *   it creates cannot support this feature.\n     * @throws NullPointerException If the <code>name</code> parameter is null.\n     ",
    "links" : [ "javax.xml.parsers.ParserConfigurationException", "java.net.URI", "javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING" ]
  }, {
    "name" : "public abstract boolean getFeature(String name) throws ParserConfigurationException",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Get the state of the named feature.</p>\n     *\n     * <p>\n     * Feature names are fully qualified {@link java.net.URI}s.\n     * Implementations may define their own features.\n     * An {@link ParserConfigurationException} is thrown if this <code>DocumentBuilderFactory</code> or the\n     * <code>DocumentBuilder</code>s it creates cannot support the feature.\n     * It is possible for an <code>DocumentBuilderFactory</code> to expose a feature value but be unable to change its state.\n     * </p>\n     *\n     * @param name Feature name.\n     *\n     * @return State of the named feature.\n     *\n     * @throws ParserConfigurationException if this <code>DocumentBuilderFactory</code>\n     *   or the <code>DocumentBuilder</code>s it creates cannot support this feature.\n     ",
    "links" : [ "javax.xml.parsers.ParserConfigurationException", "java.net.URI" ]
  }, {
    "name" : "public Schema getSchema()",
    "returnType" : "Schema",
    "comment" : "\n     * Gets the {@link Schema} object specified through\n     * the {@link #setSchema(Schema schema)} method.\n     *\n     *\n     * @throws UnsupportedOperationException\n     *      For backward compatibility, when implementations for\n     *      earlier versions of JAXP is used, this exception will be\n     *      thrown.\n     *\n     * @return\n     *      the {@link Schema} object that was last set through\n     *      the {@link #setSchema(Schema)} method, or null\n     *      if the method was not invoked since a {@link DocumentBuilderFactory}\n     *      is created.\n     *\n     * @since 1.5\n     ",
    "links" : [ "#setSchema(Schema)", "javax.xml.parsers.DocumentBuilderFactory", "#setSchema(Schema", "javax.xml.validation.Schema" ]
  }, {
    "name" : "public void setSchema(Schema schema)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the {@link Schema} to be used by parsers created\n     * from this factory.\n     *\n     * <p>\n     * When a {@link Schema} is non-null, a parser will use a validator\n     * created from it to validate documents before it passes information\n     * down to the application.\n     *\n     * <p>When errors are found by the validator, the parser is responsible\n     * to report them to the user-specified {@link org.xml.sax.ErrorHandler}\n     * (or if the error handler is not set, ignore them or throw them), just\n     * like any other errors found by the parser itself.\n     * In other words, if the user-specified {@link org.xml.sax.ErrorHandler}\n     * is set, it must receive those errors, and if not, they must be\n     * treated according to the implementation specific\n     * default error handling rules.\n     *\n     * <p>\n     * A validator may modify the outcome of a parse (for example by\n     * adding default values that were missing in documents), and a parser\n     * is responsible to make sure that the application will receive\n     * modified DOM trees.\n     *\n     * <p>\n     * Initially, null is set as the {@link Schema}.\n     *\n     * <p>\n     * This processing will take effect even if\n     * the {@link #isValidating()} method returns <tt>false</tt>.\n     *\n     * <p>It is an error to use\n     * the <code>http://java.sun.com/xml/jaxp/properties/schemaSource</code>\n     * property and/or the <code>http://java.sun.com/xml/jaxp/properties/schemaLanguage</code>\n     * property in conjunction with a {@link Schema} object.\n     * Such configuration will cause a {@link ParserConfigurationException}\n     * exception when the {@link #newDocumentBuilder()} is invoked.</p>\n     *\n     *\n     * <h4>Note for implementors</h4>\n     * <p>\n     * A parser must be able to work with any {@link Schema}\n     * implementation. However, parsers and schemas are allowed\n     * to use implementation-specific custom mechanisms\n     * as long as they yield the result described in the specification.\n     *\n     * @param schema <code>Schema</code> to use or <code>null</code> to remove a schema.\n     *\n     * @throws UnsupportedOperationException\n     *      For backward compatibility, when implementations for\n     *      earlier versions of JAXP is used, this exception will be\n     *      thrown.\n     *\n     * @since 1.5\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "#newDocumentBuilder()", "#isValidating()", "javax.xml.parsers.ParserConfigurationException", "javax.xml.validation.Schema" ]
  }, {
    "name" : "public void setXIncludeAware(final boolean state)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set state of XInclude processing.</p>\n     *\n     * <p>If XInclude markup is found in the document instance, should it be\n     * processed as specified in <a href=\"http://www.w3.org/TR/xinclude/\">\n     * XML Inclusions (XInclude) Version 1.0</a>.</p>\n     *\n     * <p>XInclude processing defaults to <code>false</code>.</p>\n     *\n     * @param state Set XInclude processing to <code>true</code> or\n     *   <code>false</code>\n     *\n     * @throws UnsupportedOperationException\n     *      For backward compatibility, when implementations for\n     *      earlier versions of JAXP is used, this exception will be\n     *      thrown.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isXIncludeAware()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Get state of XInclude processing.</p>\n     *\n     * @return current state of XInclude processing\n     *\n     * @throws UnsupportedOperationException\n     *      For backward compatibility, when implementations for\n     *      earlier versions of JAXP is used, this exception will be\n     *      thrown.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DocumentBuilderFactory newInstance()", "public static DocumentBuilderFactory newInstance(String factoryClassName, ClassLoader classLoader)", "public abstract DocumentBuilder newDocumentBuilder() throws ParserConfigurationException", "public void setNamespaceAware(boolean awareness)", "public void setValidating(boolean validating)", "public void setIgnoringElementContentWhitespace(boolean whitespace)", "public void setExpandEntityReferences(boolean expandEntityRef)", "public void setIgnoringComments(boolean ignoreComments)", "public void setCoalescing(boolean coalescing)", "public boolean isNamespaceAware()", "public boolean isValidating()", "public boolean isIgnoringElementContentWhitespace()", "public boolean isExpandEntityReferences()", "public boolean isIgnoringComments()", "public boolean isCoalescing()", "public abstract void setAttribute(String name, Object value) throws IllegalArgumentException", "public abstract Object getAttribute(String name) throws IllegalArgumentException", "public abstract void setFeature(String name, boolean value) throws ParserConfigurationException", "public abstract boolean getFeature(String name) throws ParserConfigurationException", "public Schema getSchema()", "public void setSchema(Schema schema)", "public void setXIncludeAware(final boolean state)", "public boolean isXIncludeAware()" ],
  "variableNames" : [ "validating", "namespaceAware", "whitespace", "expandEntityRef", "ignoreComments", "coalescing" ]
}