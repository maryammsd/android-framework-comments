{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/AndroidKeyStoreSignatureSpiBase.java",
  "packageName" : "android.security.keystore2",
  "className" : "AndroidKeyStoreSignatureSpiBase",
  "comment" : "\n * Base class for {@link SignatureSpi} implementations of Android KeyStore backed ciphers.\n *\n * @hide\n ",
  "links" : [ "java.security.SignatureSpi" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSigning",
    "type" : "boolean",
    "comment" : " and should be preserved after SignatureSpi.engineSign/engineVerify finishes.",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "AndroidKeyStoreKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperation",
    "type" : "KeyStoreOperation",
    "comment" : "\n     * Object representing this operation inside keystore service. It is initialized\n     * by {@code engineInit} and is invalidated when {@code engineDoFinal} succeeds and on some\n     * error conditions in between.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOperationChallenge",
    "type" : "long",
    "comment" : "\n     * The operation challenge is required when an operation needs user authorization.\n     * The challenge is subjected to an authenticator, e.g., Gatekeeper or a biometric\n     * authenticator, and included in the authentication token minted by this authenticator.\n     * It may be null, if the operation does not require authorization.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMessageStreamer",
    "type" : "KeyStoreCryptoOperationStreamer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedException",
    "type" : "Exception",
    "comment" : "\n     * Encountered exception which could not be immediately thrown because it was encountered inside\n     * a method that does not throw checked exception. This exception will be thrown from\n     * {@code engineSign} or {@code engineVerify}. Once such an exception is encountered,\n     * {@code engineUpdate} starts ignoring input data.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSignature",
    "type" : "Signature",
    "comment" : "\n     * This signature object is used for public key operations, i.e, signatrue verification.\n     * The Android Keystore backend does not perform public key operations and defers to the\n     * Highest priority provider.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected final void engineInitSign(PrivateKey key) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineInitSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineInitVerify(PublicKey publicKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void initKey(AndroidKeyStoreKey key) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Configures this signature instance to use the provided key.\n     *\n     * @throws InvalidKeyException if the {@code key} is not suitable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void abortOperation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void resetAll()",
    "returnType" : "void",
    "comment" : "\n     * Resets this cipher to its pristine pre-init state. This must be equivalent to obtaining a new\n     * cipher instance.\n     *\n     * <p>Subclasses storing additional state should override this method, reset the additional\n     * state, and then chain to superclass.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void resetWhilePreservingInitState()",
    "returnType" : "void",
    "comment" : "\n     * Resets this cipher while preserving the initialized state. This must be equivalent to\n     * rolling back the cipher's state to just after the most recent {@code engineInit} completed\n     * successfully.\n     *\n     * <p>Subclasses storing additional post-init state should override this method, reset the\n     * additional state, and then chain to superclass.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureKeystoreOperationInitialized() throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected KeyStoreCryptoOperationStreamer createMainDataStreamer(@NonNull KeyStoreOperation operation)",
    "returnType" : "KeyStoreCryptoOperationStreamer",
    "comment" : "\n     * Creates a streamer which sends the message to be signed/verified into the provided KeyStore\n     *\n     * <p>This implementation returns a working streamer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getOperationHandle()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineUpdate(byte[] b, int off, int len) throws SignatureException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineUpdate(byte b) throws SignatureException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineUpdate(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int engineSign(byte[] out, int outOffset, int outLen) throws SignatureException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final byte[] engineSign() throws SignatureException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final boolean engineVerify(byte[] signature) throws SignatureException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final boolean engineVerify(byte[] sigBytes, int offset, int len) throws SignatureException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final Object engineGetParameter(String param) throws InvalidParameterException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineSetParameter(String param, Object value) throws InvalidParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Implementations need to report the algorithm they implement so that we can delegate to the\n     * highest priority provider.\n     * @return Algorithm string.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isSigning()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this signature is initialized for signing, {@code false} if this\n     * signature is initialized for verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getAdditionalEntropyAmountForSign()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of additional entropy (in bytes) to be provided to the KeyStore's\n     * {@code finish} operation when generating a signature.\n     *\n     * <p>This value should match (or exceed) the amount of Shannon entropy of the produced\n     * signature assuming the key and the message are known. For example, for ECDSA signature this\n     * should be the size of {@code R}, whereas for the RSA signature with PKCS#1 padding this\n     * should be {@code 0}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void addAlgorithmSpecificParametersToBegin(@NonNull List<KeyParameter> parameters)",
    "returnType" : "void",
    "comment" : "\n     * Invoked to add algorithm-specific parameters for the KeyStore's {@code begin} operation.\n     *\n     * @param parameters keystore/keymaster arguments to be populated with algorithm-specific\n     *        parameters.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected final void engineInitSign(PrivateKey key) throws InvalidKeyException", "protected final void engineInitSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException", "protected final void engineInitVerify(PublicKey publicKey) throws InvalidKeyException", "protected void initKey(AndroidKeyStoreKey key) throws InvalidKeyException", "private void abortOperation()", "protected void resetAll()", "protected void resetWhilePreservingInitState()", "private void ensureKeystoreOperationInitialized() throws InvalidKeyException", "protected KeyStoreCryptoOperationStreamer createMainDataStreamer(@NonNull KeyStoreOperation operation)", "public final long getOperationHandle()", "protected final void engineUpdate(byte[] b, int off, int len) throws SignatureException", "protected final void engineUpdate(byte b) throws SignatureException", "protected final void engineUpdate(ByteBuffer input)", "protected final int engineSign(byte[] out, int outOffset, int outLen) throws SignatureException", "protected final byte[] engineSign() throws SignatureException", "protected final boolean engineVerify(byte[] signature) throws SignatureException", "protected final boolean engineVerify(byte[] sigBytes, int offset, int len) throws SignatureException", "protected final Object engineGetParameter(String param) throws InvalidParameterException", "protected final void engineSetParameter(String param, Object value) throws InvalidParameterException", "protected abstract String getAlgorithm()", "protected final boolean isSigning()", "protected abstract int getAdditionalEntropyAmountForSign()", "protected abstract void addAlgorithmSpecificParametersToBegin(@NonNull List<KeyParameter> parameters)" ],
  "variableNames" : [ "TAG", "mSigning", "mKey", "mOperation", "mOperationChallenge", "mMessageStreamer", "mCachedException", "mSignature" ]
}