{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/FrameMetrics.java",
  "packageName" : "android.view",
  "className" : "FrameMetrics",
  "comment" : "\n * Class containing timing data for various milestones in a frame\n * lifecycle reported by the rendering subsystem.\n * <p>\n * Supported metrics can be queried via their corresponding identifier.\n * </p>\n ",
  "variables" : [ {
    "name" : "UNKNOWN_DELAY_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for unknown delay.\n     * <p>\n     * Represents the number of nanoseconds elapsed waiting for the\n     * UI thread to become responsive and process the frame. This\n     * should be 0 most of the time.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_HANDLING_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for input handling duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed issuing\n     * input handling callbacks.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for animation callback duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed issuing\n     * animation callbacks.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_MEASURE_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for layout/measure duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed measuring\n     * and laying out the invalidated pieces of the view hierarchy.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "DRAW_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for draw duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed computing\n     * DisplayLists for transformations applied to the view\n     * hierarchy.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for sync duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed\n     * synchronizing the computed display lists with the render\n     * thread.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMAND_ISSUE_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for command issue duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed\n     * issuing draw commands to the GPU.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "SWAP_BUFFERS_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for swap buffers duration.\n     * <p>\n     * Represents the number of nanoseconds elapsed issuing\n     * the frame buffer for this frame to the display\n     * subsystem.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "TOTAL_DURATION",
    "type" : "int",
    "comment" : "\n     * Metric identifier for total frame duration.\n     * <p>\n     * Represents the total time in nanoseconds this frame took to render\n     * and be issued to the display subsystem.\n     * </p>\n     * <p>\n     * Equal to the sum of the values of all other time-valued metric\n     * identifiers.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_DRAW_FRAME",
    "type" : "int",
    "comment" : "\n     * Metric identifier for a boolean value determining whether this frame was\n     * the first to draw in a new Window layout.\n     * <p>\n     * {@link #getMetric(int)} will return 0 for false, 1 for true.\n     * </p>\n     * <p>\n     * First draw frames are expected to be slow and should usually be exempt\n     * from display jank calculations as they do not cause skips in animations\n     * and are usually hidden by window animations or other tricks.\n     * </p>\n     ",
    "links" : [ "#getMetric(int)" ]
  }, {
    "name" : "INTENDED_VSYNC_TIMESTAMP",
    "type" : "int",
    "comment" : "\n     * Metric identifier for the timestamp of the intended vsync for this frame.\n     * <p>\n     * The intended start point for the frame. If this value is different from\n     * {@link #VSYNC_TIMESTAMP}, there was work occurring on the UI thread that\n     * prevented it from responding to the vsync signal in a timely fashion.\n     * </p>\n     ",
    "links" : [ "#VSYNC_TIMESTAMP" ]
  }, {
    "name" : "VSYNC_TIMESTAMP",
    "type" : "int",
    "comment" : "\n     * Metric identifier for the timestamp of the actual vsync for this frame.\n     * <p>\n     * The time value that was used in all the vsync listeners and drawing for\n     * the frame (Choreographer frame callbacks, animations,\n     * {@link View#getDrawingTime()}, etcâ€¦)\n     * </p>\n     ",
    "links" : [ "android.view.View#getDrawingTime()" ]
  }, {
    "name" : "FRAME_INFO_FLAG_FIRST_DRAW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DURATIONS",
    "type" : "int[]",
    "comment" : "\n     * Bucket endpoints for each Metric defined above.\n     *\n     * Each defined metric *must* have a corresponding entry\n     * in this list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTimingData",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getMetric(@Metric int id)",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the value associated with Metric identifier {@code id}\n     * for this frame.\n     * <p>\n     * Boolean metrics are represented in [0,1], with 0 corresponding to\n     * false, and 1 corresponding to true.\n     * </p>\n     * @param id the metric to retrieve\n     * @return the value of the metric or -1 if it is not available.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "UNKNOWN_DELAY_DURATION", "INPUT_HANDLING_DURATION", "ANIMATION_DURATION", "LAYOUT_MEASURE_DURATION", "DRAW_DURATION", "SYNC_DURATION", "COMMAND_ISSUE_DURATION", "SWAP_BUFFERS_DURATION", "TOTAL_DURATION", "FIRST_DRAW_FRAME", "INTENDED_VSYNC_TIMESTAMP", "VSYNC_TIMESTAMP", "FRAME_INFO_FLAG_FIRST_DRAW", "DURATIONS", "mTimingData" ],
  "methodNames" : [ "public long getMetric(@Metric int id)" ]
}