{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/augmented/AugmentedAutofillService.java",
  "packageName" : "android.service.autofill.augmented",
  "className" : "AugmentedAutofillService",
  "comment" : "\n * A service used to augment the Autofill subsystem by potentially providing autofill data when the\n * \"standard\" workflow failed (for example, because the standard AutofillService didn't have data).\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDebug",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sVerbose",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_AUGMENTED_AUTOFILL_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_AUGMENTED_AUTOFILL_SERVICE" ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillProxies",
    "type" : "SparseArray<AutofillProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillProxyForLastRequest",
    "type" : "AutofillProxy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceComponentName",
    "type" : "ComponentName",
    "comment" : " Used for metrics / debug only",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean onUnbind(Intent intent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system connects to service.\n     *\n     * <p>You should generally do initialization here rather than in {@link #onCreate}.\n     ",
    "links" : [ "#onCreate" ]
  }, {
    "name" : "public final boolean requestAutofill(@NonNull ComponentName activityComponent, @NonNull AutofillId autofillId)",
    "returnType" : "boolean",
    "comment" : "\n     * The child class of the service can call this method to initiate a new Autofill flow. If all\n     * conditions are met, it will make a request to the client app process to explicitly cancel\n     * the current autofill session and create a new session. For example, an augmented autofill\n     * service may notice some events which make it think a good time to provide updated\n     * augmented autofill suggestions.\n     *\n     * <p> The request would be respected only if the previous augmented autofill request was\n     * made for the same {@code activityComponent} and {@code autofillId}, and the field is\n     * currently on focus.\n     *\n     * <p> The request would cancel the current session and start a new autofill flow.\n     * It doesn't guarantee that the {@link AutofillManager} will proceed with the request.\n     *\n     * @param activityComponent the client component for which the autofill is requested for\n     * @param autofillId        the client field id for which the autofill is requested for\n     * @return true if the request makes the {@link AutofillManager} start a new Autofill flow,\n     * false otherwise.\n     ",
    "links" : [ "android.view.autofill.AutofillManager" ]
  }, {
    "name" : "public void onFillRequest(@NonNull FillRequest request, @NonNull CancellationSignal cancellationSignal, @NonNull FillController controller, @NonNull FillCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Asks the service to handle an \"augmented\" autofill request.\n     *\n     * <p>This method is called when the \"stantard\" autofill service cannot handle a request, which\n     * typically occurs when:\n     * <ul>\n     *   <li>Service does not recognize what should be autofilled.\n     *   <li>Service does not have data to fill the request.\n     *   <li>Service denylisted that app (or activity) for autofill.\n     *   <li>App disabled itself for autofill.\n     * </ul>\n     *\n     * <p>Differently from the standard autofill workflow, on augmented autofill the service is\n     * responsible to generate the autofill UI and request the Android system to autofill the\n     * activity when the user taps an action in that UI (through the\n     * {@link FillController#autofill(List)} method).\n     *\n     * <p>The service <b>MUST</b> call {@link\n     * FillCallback#onSuccess(android.service.autofill.augmented.FillResponse)} as soon as possible,\n     * passing {@code null} when it cannot fulfill the request.\n     * @param request the request to handle.\n     * @param cancellationSignal signal for observing cancellation requests. The system will use\n     *     this to notify you that the fill result is no longer needed and you should stop\n     *     handling this fill request in order to save resources.\n     * @param controller object used to interact with the autofill system.\n     * @param callback object used to notify the result of the request. Service <b>must</b> call\n     * {@link FillCallback#onSuccess(android.service.autofill.augmented.FillResponse)}.\n     ",
    "links" : [ "android.service.autofill.augmented.FillController#autofill(List)", "android.service.autofill.augmented.FillCallback#onSuccess(android.service.autofill.augmented.FillResponse)" ]
  }, {
    "name" : "public void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system disconnects from the service.\n     *\n     * <p> At this point this service may no longer be an active {@link AugmentedAutofillService}.\n     * It should not make calls on {@link AutofillManager} that requires the caller to be\n     * the current service.\n     ",
    "links" : [ "android.service.autofill.augmented.AugmentedAutofillService", "android.view.autofill.AutofillManager" ]
  }, {
    "name" : "private void handleOnConnected(boolean debug, boolean verbose)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnDisconnected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnFillRequest(int sessionId, @NonNull IBinder client, int taskId, @NonNull ComponentName componentName, @NonNull AutofillId focusedId, @Nullable AutofillValue focusedValue, long requestTime, @Nullable InlineSuggestionsRequest inlineSuggestionsRequest, @NonNull IFillCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnDestroyAllFillWindowsRequest()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnUnbind()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dump(@NonNull PrintWriter pw, @SuppressWarnings(\"unused\") @NonNull String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Implementation specific {@code dump}. The child class can override the method to provide\n     * additional information about the Service's state into the dumpsys output.\n     *\n     * @param pw The PrintWriter to which you should dump your state.  This will be closed for\n     * you after you return.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final FillEventHistory getFillEventHistory()",
    "returnType" : "FillEventHistory",
    "comment" : "\n     * Gets the inline augmented autofill events that happened after the last\n     * {@link #onFillRequest(FillRequest, CancellationSignal, FillController, FillCallback)} call.\n     *\n     * <p>The history is not persisted over reboots, and it's cleared every time the service\n     * replies to a\n     * {@link #onFillRequest(FillRequest, CancellationSignal, FillController, FillCallback)}\n     * by calling {@link FillCallback#onSuccess(FillResponse)}. Hence, the service should call\n     * {@link #getFillEventHistory() before finishing the {@link FillCallback}.\n     *\n     * <p>Also note that the events from the dropdown suggestion UI is not stored in the history\n     * since the service owns the UI.\n     *\n     * @return The history or {@code null} if there are no events.\n     ",
    "links" : [ "#getFillEventHistory()", "android.service.autofill.augmented.FillCallback#onSuccess(FillResponse)", "#onFillRequest(FillRequest", "android.service.autofill.augmented.FillCallback" ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(Intent intent)", "public boolean onUnbind(Intent intent)", "public void onConnected()", "public final boolean requestAutofill(@NonNull ComponentName activityComponent, @NonNull AutofillId autofillId)", "public void onFillRequest(@NonNull FillRequest request, @NonNull CancellationSignal cancellationSignal, @NonNull FillController controller, @NonNull FillCallback callback)", "public void onDisconnected()", "private void handleOnConnected(boolean debug, boolean verbose)", "private void handleOnDisconnected()", "private void handleOnFillRequest(int sessionId, @NonNull IBinder client, int taskId, @NonNull ComponentName componentName, @NonNull AutofillId focusedId, @Nullable AutofillValue focusedValue, long requestTime, @Nullable InlineSuggestionsRequest inlineSuggestionsRequest, @NonNull IFillCallback callback)", "private void handleOnDestroyAllFillWindowsRequest()", "private void handleOnUnbind()", "protected final void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "protected void dump(@NonNull PrintWriter pw, @SuppressWarnings(\"unused\") @NonNull String[] args)", "public final FillEventHistory getFillEventHistory()" ],
  "variableNames" : [ "TAG", "sDebug", "sVerbose", "SERVICE_INTERFACE", "mHandler", "mAutofillProxies", "mAutofillProxyForLastRequest", "mServiceComponentName" ]
}