{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/OutputPropertiesFactory.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "OutputPropertiesFactory",
  "comment" : "\n * This class is a factory to generate a set of default properties\n * of key/value pairs that are used to create a serializer through the\n * factory {@link SerializerFactory SerilizerFactory}. \n * The properties generated by this factory\n * may be modified to non-default values before the SerializerFactory is used to\n * create a Serializer.\n * <p>\n * The given output types supported are \"xml\", \"text\", and \"html\". \n * These type strings can be obtained from the \n * {@link Method Method} class in this package.\n * <p>\n * Other constants defined in this class are the non-standard property keys\n * that can be used to set non-standard property values on a java.util.Properties object\n * that is used to create or configure a serializer. Here are the non-standard keys:\n * <ul>\n * <li> <b>S_KEY_INDENT_AMOUNT </b> -\n * The non-standard property key to use to set the indentation amount.\n * The \"indent\" key needs to have a value of \"yes\", and this\n * properties value is a the number of whitespaces to indent by per\n * indentation level.\n * \n * <li> <b>S_KEY_CONTENT_HANDLER </b> -\n * This non-standard property key is used to set the name of the fully qualified \n * Java class that implements the ContentHandler interface. \n * The output of the serializer will be SAX events sent to this an\n * object of this class.\n * \n * <li> <b>S_KEY_ENTITIES </b> -\n * This non-standard property key is used to specify the name of the property file\n * that specifies character to entity reference mappings. A line in such a\n * file is has the name of the entity and the numeric (base 10) value\n * of the corresponding character, like this one: <br> quot=34 <br>\n * \n * <li> <b>S_USE_URL_ESCAPING </b> -\n * This non-standard property key is used to set a value of \"yes\" if the href values for HTML serialization should\n *  use %xx escaping.\n * \n * <li> <b>S_OMIT_META_TAG </b> -\n * This non-standard property key is used to set a value of \"yes\" if the META tag should be omitted where it would\n *  otherwise be supplied.\n * </ul>\n * \n * @see SerializerFactory\n * @see Method\n * @see Serializer\n ",
  "links" : [ "org.apache.xml.serializer.SerializerFactory", "org.apache.xml.serializer.Method" ],
  "variables" : [ {
    "name" : "S_BUILTIN_EXTENSIONS_URL",
    "type" : "String",
    "comment" : " S_BUILTIN_EXTENSIONS_URL is a mnemonic for the XML Namespace \n     *(http://xml.apache.org/xalan) predefined to signify Xalan's\n     * built-in XSLT Extensions. When used in stylesheets, this is often \n     * bound to the \"xalan:\" prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_BUILTIN_OLD_EXTENSIONS_URL",
    "type" : "String",
    "comment" : "\n     * The old built-in extension url. It is still supported for\n     * backward compatibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_BUILTIN_EXTENSIONS_UNIVERSAL",
    "type" : "String",
    "comment" : " \n     * This is not a public API.\n     * This is the built-in extensions namespace, \n     * reexpressed in {namespaceURI} syntax\n     * suitable for prepending to a localname to produce a \"universal\n     * name\".\n     ",
    "links" : [ ]
  }, {
    "name" : "S_KEY_INDENT_AMOUNT",
    "type" : "String",
    "comment" : " \n     * The non-standard property key to use to set the\n     * number of whitepaces to indent by, per indentation level,\n     * if indent=\"yes\".\n     ",
    "links" : [ ]
  }, {
    "name" : "S_KEY_LINE_SEPARATOR",
    "type" : "String",
    "comment" : " \n     * The non-standard property key to use to set the\n     * characters to write out as at the end of a line,\n     * rather than the default ones from the runtime.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_KEY_CONTENT_HANDLER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_KEY_ENTITIES",
    "type" : "String",
    "comment" : "\n     * This non-standard property key is used to specify the name of the property file\n     * that specifies character to entity reference mappings.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_USE_URL_ESCAPING",
    "type" : "String",
    "comment" : " \n     * This non-standard property key is used to set a value of \"yes\" if the href values for HTML serialization should\n     *  use %xx escaping. ",
    "links" : [ ]
  }, {
    "name" : "S_OMIT_META_TAG",
    "type" : "String",
    "comment" : " \n     * This non-standard property key is used to set a value of \"yes\" if the META tag should be omitted where it would\n     *  otherwise be supplied.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL",
    "type" : "String",
    "comment" : "\n     * The old built-in extension namespace, this is not a public API.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL_LEN",
    "type" : "int",
    "comment" : "\n     * This is not a public API, it is only public because it is used\n     * by outside of this package,\n     * it is the length of the old built-in extension namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_XSLT_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_XSLT_PREFIX_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_XALAN_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_XALAN_PREFIX_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_synch_object",
    "type" : "Integer",
    "comment" : " Synchronization object for lazy initialization of the above tables. ",
    "links" : [ ]
  }, {
    "name" : "PROP_DIR",
    "type" : "String",
    "comment" : " the directory in which the various method property files are located ",
    "links" : [ ]
  }, {
    "name" : "PROP_FILE_XML",
    "type" : "String",
    "comment" : " property file for default XML properties ",
    "links" : [ ]
  }, {
    "name" : "PROP_FILE_TEXT",
    "type" : "String",
    "comment" : " property file for default TEXT properties ",
    "links" : [ ]
  }, {
    "name" : "PROP_FILE_HTML",
    "type" : "String",
    "comment" : " property file for default HTML properties ",
    "links" : [ ]
  }, {
    "name" : "PROP_FILE_UNKNOWN",
    "type" : "String",
    "comment" : " property file for default UNKNOWN (Either XML or HTML, to be determined later) properties ",
    "links" : [ ]
  }, {
    "name" : "m_xml_properties",
    "type" : "Properties",
    "comment" : " The default properties of all output files. ",
    "links" : [ ]
  }, {
    "name" : "m_html_properties",
    "type" : "Properties",
    "comment" : " The default properties when method=\"html\". ",
    "links" : [ ]
  }, {
    "name" : "m_text_properties",
    "type" : "Properties",
    "comment" : " The default properties when method=\"text\". ",
    "links" : [ ]
  }, {
    "name" : "m_unknown_properties",
    "type" : "Properties",
    "comment" : " The properties when method=\"\" for the \"unknown\" wrapper ",
    "links" : [ ]
  }, {
    "name" : "ACCESS_CONTROLLER_CLASS",
    "type" : "Class",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Class findAccessControllerClass()",
    "returnType" : "Class",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final Properties getDefaultMethodProperties(String method)",
    "returnType" : "Properties",
    "comment" : "\n     * Creates an empty OutputProperties with the property key/value defaults specified by\n     * a property file.  The method argument is used to construct a string of\n     * the form output_[method].properties (for instance, output_html.properties).\n     * The output_xml.properties file is always used as the base.\n     * \n     * <p>Anything other than 'text', 'xml', and 'html', will\n     * use the output_xml.properties file.</p>\n     *\n     * @param   method non-null reference to method name.\n     *\n     * @return Properties object that holds the defaults for the given method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Properties loadPropertiesFile(final String resourceName, Properties defaults) throws IOException",
    "returnType" : "Properties",
    "comment" : "\n     * Load the properties file from a resource stream.  If a\n     * key name such as \"org.apache.xslt.xxx\", fix up the start of\n     * string to be a curly namespace.  If a key name starts with\n     * \"xslt.output.xxx\", clip off \"xslt.output.\".  If a key name *or* a\n     * key value is discovered, check for \\u003a in the text, and\n     * fix it up to be \":\", since earlier versions of the JDK do not\n     * handle the escape sequence (at least in key names).\n     *\n     * @param resourceName non-null reference to resource name.\n     * @param defaults Default properties, which may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String fixupPropertyString(String s, boolean doClipping)",
    "returnType" : "String",
    "comment" : "\n     * Fix up a string in an output properties file according to\n     * the rules of {@link #loadPropertiesFile}.\n     *\n     * @param s non-null reference to string that may need to be fixed up.\n     * @return A new string if fixup occured, otherwise the s argument.\n     ",
    "links" : [ "#loadPropertiesFile" ]
  } ],
  "methodNames" : [ "private static Class findAccessControllerClass()", "public static final Properties getDefaultMethodProperties(String method)", "private static Properties loadPropertiesFile(final String resourceName, Properties defaults) throws IOException", "private static String fixupPropertyString(String s, boolean doClipping)" ],
  "variableNames" : [ "S_BUILTIN_EXTENSIONS_URL", "S_BUILTIN_OLD_EXTENSIONS_URL", "S_BUILTIN_EXTENSIONS_UNIVERSAL", "S_KEY_INDENT_AMOUNT", "S_KEY_LINE_SEPARATOR", "S_KEY_CONTENT_HANDLER", "S_KEY_ENTITIES", "S_USE_URL_ESCAPING", "S_OMIT_META_TAG", "S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL", "S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL_LEN", "S_XSLT_PREFIX", "S_XSLT_PREFIX_LEN", "S_XALAN_PREFIX", "S_XALAN_PREFIX_LEN", "m_synch_object", "PROP_DIR", "PROP_FILE_XML", "PROP_FILE_TEXT", "PROP_FILE_HTML", "PROP_FILE_UNKNOWN", "m_xml_properties", "m_html_properties", "m_text_properties", "m_unknown_properties", "ACCESS_CONTROLLER_CLASS" ]
}