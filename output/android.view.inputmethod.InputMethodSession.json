{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/InputMethodSession.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputMethodSession",
  "comment" : "\n * The InputMethodSession interface provides the per-client functionality\n * of {@link InputMethod} that is safe to expose to applications.\n *\n * <p>Applications will not normally use this interface themselves, instead\n * relying on the standard interaction provided by\n * {@link android.widget.TextView} and {@link android.widget.EditText}.\n ",
  "links" : [ "android.widget.TextView", "android.view.inputmethod.InputMethod", "android.widget.EditText" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void finishInput()",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the application would like to stop\n     * receiving text input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the selection or cursor in the current\n     * target input field has changed.\n     *\n     * @param oldSelStart The previous text offset of the cursor selection\n     * start position.\n     * @param oldSelEnd The previous text offset of the cursor selection\n     * end position.\n     * @param newSelStart The new text offset of the cursor selection\n     * start position.\n     * @param newSelEnd The new text offset of the cursor selection\n     * end position.\n     * @param candidatesStart The text offset of the current candidate\n     * text start position.\n     * @param candidatesEnd The text offset of the current candidate\n     * text end position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void viewClicked(boolean focusChanged)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the user tapped a text view.\n     * IMEs can't rely on this method being called because this was not part of the original IME\n     * protocol, so applications with custom text editing written before this method appeared will\n     * not call to inform the IME of this interaction.\n     * @param focusChanged true if the user changed the focused view by this click.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateCursor(Rect newCursor)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when cursor location of the target input field\n     * has changed within its window.  This is not normally called, but will\n     * only be reported if requested by the input method.\n     *\n     * @param newCursor The rectangle of the cursor currently being shown in\n     * the input field's window coordinates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void displayCompletions(CompletionInfo[] completions)",
    "returnType" : "void",
    "comment" : "\n     * Called by a text editor that performs auto completion, to tell the\n     * input method about the completions it has available.  This can be used\n     * by the input method to display them to the user to select the text to\n     * be inserted.\n     *\n     * @param completions Array of text completions that are available, starting with\n     * the best.  If this array is null, any existing completions will be\n     * removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateExtractedText(int token, ExtractedText text)",
    "returnType" : "void",
    "comment" : "\n     * Called by a text editor to report its new extracted text when its\n     * contents change.  This will only be called if the input method\n     * calls {@link InputConnection#getExtractedText(ExtractedTextRequest, int)\n     * InputConnection.getExtractedText()} with the option to report updates.\n     *\n     * @param token The input method supplied token for identifying its request.\n     * @param text The new extracted text.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#getExtractedText(ExtractedTextRequest" ]
  }, {
    "name" : "public void dispatchKeyEvent(int seq, KeyEvent event, EventCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when a key is pressed.  When done with the event,\n     * the implementation must call back on <var>callback</var> with its\n     * result.\n     *\n     * <p>\n     * If the input method wants to handle this event, return true, otherwise\n     * return false and the caller (i.e. the application) will handle the event.\n     *\n     * @param event The key event.\n     *\n     * @return Whether the input method wants to handle this event.\n     *\n     * @see android.view.KeyEvent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchTrackballEvent(int seq, MotionEvent event, EventCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when there is a track ball event.\n     *\n     * <p>\n     * If the input method wants to handle this event, return true, otherwise\n     * return false and the caller (i.e. the application) will handle the event.\n     *\n     * @param event The motion event.\n     *\n     * @return Whether the input method wants to handle this event.\n     *\n     * @see android.view.MotionEvent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchGenericMotionEvent(int seq, MotionEvent event, EventCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when there is a generic motion event.\n     *\n     * <p>\n     * If the input method wants to handle this event, return true, otherwise\n     * return false and the caller (i.e. the application) will handle the event.\n     *\n     * @param event The motion event.\n     *\n     * @return Whether the input method wants to handle this event.\n     *\n     * @see android.view.MotionEvent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void appPrivateCommand(String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * Process a private command sent from the application to the input method.\n     * This can be used to provide domain-specific features that are\n     * only known between certain input methods and their clients.\n     *\n     * @param action Name of the command to be performed.  This <em>must</em>\n     * be a scoped name, i.e. prefixed with a package name you own, so that\n     * different developers will not create conflicting commands.\n     * @param data Any data to include with the command.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void toggleSoftInput(@InputMethodManager.ShowFlags int showFlags, @InputMethodManager.HideFlags int hideFlags)",
    "returnType" : "void",
    "comment" : "\n     * Toggle the soft input window.\n     * Applications can toggle the state of the soft input window.\n     *\n     * @deprecated Starting in {@link android.os.Build.VERSION_CODES#S} the system no longer invokes\n     * this method, instead it explicitly shows or hides the IME. An {@code InputMethodService}\n     * wishing to toggle its own visibility should instead invoke {@link\n     * InputMethodService#requestShowSelf} or {@link InputMethodService#requestHideSelf}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#S", "android.inputmethodservice.InputMethodService#requestHideSelf", "android.inputmethodservice.InputMethodService#requestShowSelf" ]
  }, {
    "name" : "public void updateCursorAnchorInfo(CursorAnchorInfo cursorAnchorInfo)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the cursor and/or the character position relevant to text input\n     * is changed on the screen.  This is not called by default.  It will only be reported if\n     * requested by the input method.\n     *\n     * @param cursorAnchorInfo Positional information relevant to text input, such as text\n     * insertion point and composition string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeImeSurface()",
    "returnType" : "void",
    "comment" : "\n     * Notify IME directly to remove surface as it is no longer visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void invalidateInputInternal(EditorInfo editorInfo, IRemoteInputConnection inputConnection, int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Called when {@code inputContext} is about to be reset with {@code sessionId}.\n     *\n     * <p>The actual implementation should ignore if {@code inputContext} is no longer the current\n     * {@link InputConnection} due to a stale callback.</p>\n     *\n     * @param editorInfo {@link EditorInfo} to be used\n     * @param inputConnection specifies which {@link InputConnection} is being updated.\n     * @param sessionId the ID to be specified to\n     *                       {@link com.android.internal.inputmethod.InputConnectionCommandHeader}.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.EditorInfo", "com.android.internal.inputmethod.IRemoteInputConnection", "com.android.internal.inputmethod.InputConnectionCommandHeader" ]
  } ],
  "methodNames" : [ "public void finishInput()", "public void updateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)", "public void viewClicked(boolean focusChanged)", "public void updateCursor(Rect newCursor)", "public void displayCompletions(CompletionInfo[] completions)", "public void updateExtractedText(int token, ExtractedText text)", "public void dispatchKeyEvent(int seq, KeyEvent event, EventCallback callback)", "public void dispatchTrackballEvent(int seq, MotionEvent event, EventCallback callback)", "public void dispatchGenericMotionEvent(int seq, MotionEvent event, EventCallback callback)", "public void appPrivateCommand(String action, Bundle data)", "public void toggleSoftInput(@InputMethodManager.ShowFlags int showFlags, @InputMethodManager.HideFlags int hideFlags)", "public void updateCursorAnchorInfo(CursorAnchorInfo cursorAnchorInfo)", "public void removeImeSurface()", " void invalidateInputInternal(EditorInfo editorInfo, IRemoteInputConnection inputConnection, int sessionId)" ],
  "variableNames" : [ ]
}