{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/display/BrightnessConfiguration.java",
  "packageName" : "android.hardware.display",
  "className" : "BrightnessConfiguration",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "TAG_BRIGHTNESS_CURVE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_BRIGHTNESS_POINT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_BRIGHTNESS_CORRECTIONS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_BRIGHTNESS_CORRECTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_BRIGHTNESS_PARAMS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_LUX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_NITS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_DESCRIPTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_CATEGORY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_COLLECT_COLOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_MODEL_TIMEOUT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_MODEL_LOWER_BOUND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_MODEL_UPPER_BOUND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHORT_TERM_TIMEOUT_UNSET",
    "type" : "long",
    "comment" : "\n     * Returned from {@link #getShortTermModelTimeoutMillis()} if no timeout has been set.\n     * In this case the device will use the default timeout available in the\n     * {@link BrightnessConfiguration} returned from\n     * {@link DisplayManager#getDefaultBrightnessConfiguration()}.\n     ",
    "links" : [ "#getShortTermModelTimeoutMillis()", "android.hardware.display.BrightnessConfiguration", "android.hardware.display.DisplayManager#getDefaultBrightnessConfiguration()" ]
  }, {
    "name" : "mLux",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNits",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCorrectionsByPackageName",
    "type" : "Map<String, BrightnessCorrection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCorrectionsByCategory",
    "type" : "Map<Integer, BrightnessCorrection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldCollectColorSamples",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortTermModelTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortTermModelLowerLuxMultiplier",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortTermModelUpperLuxMultiplier",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BrightnessConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Pair<float[], float[]> getCurve()",
    "returnType" : "Pair<float[], float[]>",
    "comment" : "\n     * Gets the base brightness as curve.\n     *\n     * The curve is returned as a pair of float arrays, the first representing all of the lux\n     * points of the brightness curve and the second representing all of the nits values of the\n     * brightness curve.\n     *\n     * @return the control points for the brightness curve.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessCorrection getCorrectionByPackageName(@NonNull String packageName)",
    "returnType" : "BrightnessCorrection",
    "comment" : "\n     * Returns a brightness correction by app, or null.\n     *\n     * @param packageName\n     *      The app's package name.\n     *\n     * @return The matching brightness correction, or null.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessCorrection getCorrectionByCategory(@ApplicationInfo.Category int category)",
    "returnType" : "BrightnessCorrection",
    "comment" : "\n     * Returns a brightness correction by app category, or null.\n     *\n     * @param category\n     *      The app category.\n     *\n     * @return The matching brightness correction, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns description string.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldCollectColorSamples()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether color samples should be collected in\n     * {@link BrightnessChangeEvent#colorValueBuckets}.\n     ",
    "links" : [ "android.hardware.display.BrightnessChangeEvent#colorValueBuckets" ]
  }, {
    "name" : "public long getShortTermModelTimeoutMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the timeout for the short term model in milliseconds.\n     *\n     * If the screen is inactive for this timeout then the short term model\n     * will check the lux range defined by {@link #getShortTermModelLowerLuxMultiplier()} and\n     * {@link #getShortTermModelUpperLuxMultiplier()} to decide whether to keep any adjustment\n     * the user has made to adaptive brightness.\n     ",
    "links" : [ "#getShortTermModelLowerLuxMultiplier()", "#getShortTermModelUpperLuxMultiplier()" ]
  }, {
    "name" : "public float getShortTermModelUpperLuxMultiplier()",
    "returnType" : "float",
    "comment" : "\n     * Returns the multiplier used to calculate the upper bound for which\n     * a users adaptive brightness is considered valid.\n     *\n     * For example if a user changes the brightness when the ambient light level\n     * is 100 lux, the adjustment will be kept if the current ambient light level\n     * is {@code <= 100 + (100 * getShortTermModelUpperLuxMultiplier())}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getShortTermModelLowerLuxMultiplier()",
    "returnType" : "float",
    "comment" : "\n     * Returns the multiplier used to calculate the lower bound for which\n     * a users adaptive brightness is considered valid.\n     *\n     * For example if a user changes the brightness when the ambient light level\n     * is 100 lux, the adjustment will be kept if the current ambient light level\n     * is {@code >= 100 - (100 * getShortTermModelLowerLuxMultiplier())}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkFloatEquals(float one, float two)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void saveToXml(@NonNull XmlSerializer serializer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the configuration to an XML serializer.\n     *\n     * @param serializer\n     *      The XML serializer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BrightnessConfiguration loadFromXml(@NonNull XmlPullParser parser) throws IOException, XmlPullParserException",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n     * Read a configuration from an XML parser.\n     *\n     * @param parser\n     *      The XML parser.\n     *\n     * @throws IOException\n     *      The parser failed to read the XML file.\n     * @throws XmlPullParserException\n     *      The parser failed to parse the XML file.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float loadFloatFromXml(XmlPullParser parser, String attribute)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Long loadLongFromXml(XmlPullParser parser, String attribute)",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG_BRIGHTNESS_CURVE", "TAG_BRIGHTNESS_POINT", "TAG_BRIGHTNESS_CORRECTIONS", "TAG_BRIGHTNESS_CORRECTION", "TAG_BRIGHTNESS_PARAMS", "ATTR_LUX", "ATTR_NITS", "ATTR_DESCRIPTION", "ATTR_PACKAGE_NAME", "ATTR_CATEGORY", "ATTR_COLLECT_COLOR", "ATTR_MODEL_TIMEOUT", "ATTR_MODEL_LOWER_BOUND", "ATTR_MODEL_UPPER_BOUND", "SHORT_TERM_TIMEOUT_UNSET", "mLux", "mNits", "mCorrectionsByPackageName", "mCorrectionsByCategory", "mDescription", "mShouldCollectColorSamples", "mShortTermModelTimeout", "mShortTermModelLowerLuxMultiplier", "mShortTermModelUpperLuxMultiplier", "CREATOR" ],
  "methodNames" : [ "public Pair<float[], float[]> getCurve()", "public BrightnessCorrection getCorrectionByPackageName(@NonNull String packageName)", "public BrightnessCorrection getCorrectionByCategory(@ApplicationInfo.Category int category)", "public String getDescription()", "public boolean shouldCollectColorSamples()", "public long getShortTermModelTimeoutMillis()", "public float getShortTermModelUpperLuxMultiplier()", "public float getShortTermModelLowerLuxMultiplier()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object o)", "private boolean checkFloatEquals(float one, float two)", "public void saveToXml(@NonNull XmlSerializer serializer) throws IOException", "public static BrightnessConfiguration loadFromXml(@NonNull XmlPullParser parser) throws IOException, XmlPullParserException", "private static float loadFloatFromXml(XmlPullParser parser, String attribute)", "private static Long loadLongFromXml(XmlPullParser parser, String attribute)" ]
}