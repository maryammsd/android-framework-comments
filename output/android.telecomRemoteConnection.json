{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/RemoteConnection.java",
  "packageName" : "android.telecom",
  "className" : "RemoteConnection",
  "comment" : "\n * A connection provided to a {@link ConnectionService} by another {@code ConnectionService}\n * running in a different process.\n *\n * @see ConnectionService#createRemoteOutgoingConnection(PhoneAccountHandle, ConnectionRequest)\n * @see ConnectionService#createRemoteIncomingConnection(PhoneAccountHandle, ConnectionRequest)\n ",
  "variables" : [ {
    "name" : "mConnectionService",
    "type" : "IConnectionService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackRecords",
    "type" : "Set<CallbackRecord>",
    "comment" : "\n     * ConcurrentHashMap constructor params: 8 is initial table size, 0.9f is\n     * load factor before resizing, 1 means we only expect a single thread to\n     * access the map so make only a single shard\n     ",
    "links" : [ ]
  }, {
    "name" : "mConferenceableConnections",
    "type" : "List<RemoteConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableconferenceableConnections",
    "type" : "List<RemoteConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisconnectCause",
    "type" : "DisconnectCause",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRingbackRequested",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoProvider",
    "type" : "VideoProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsVoipAudioMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatusHints",
    "type" : "StatusHints",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddressPresentation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayNamePresentation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConference",
    "type" : "RemoteConference",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingPackageAbbreviation",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback to this {@code RemoteConnection}.\n     *\n     * @param callback A {@code Callback}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(Callback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback to this {@code RemoteConnection}.\n     *\n     * @param callback A {@code Callback}.\n     * @param handler A {@code Handler} which command and status changes will be delivered to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a callback from this {@code RemoteConnection}.\n     *\n     * @param callback A {@code Callback}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the state of this {@code RemoteConnection}.\n     *\n     * @return A state value, chosen from the {@code STATE_*} constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisconnectCause getDisconnectCause()",
    "returnType" : "DisconnectCause",
    "comment" : "\n     * Obtains the reason why this {@code RemoteConnection} may have been disconnected.\n     *\n     * @return For a {@link Connection#STATE_DISCONNECTED} {@code RemoteConnection}, the\n     *         disconnect cause expressed as a code chosen from among those declared in\n     *         {@link DisconnectCause}.\n     ",
    "links" : [ "Connection#STATE_DISCONNECTED", "DisconnectCause" ]
  }, {
    "name" : "public int getConnectionCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the capabilities of this {@code RemoteConnection}.\n     *\n     * @return A bitmask of the capabilities of the {@code RemoteConnection}, as defined in\n     *         the {@code CAPABILITY_*} constants in class {@link Connection}.\n     ",
    "links" : [ "Connection" ]
  }, {
    "name" : "public int getConnectionProperties()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the properties of this {@code RemoteConnection}.\n     *\n     * @return A bitmask of the properties of the {@code RemoteConnection}, as defined in the\n     *         {@code PROPERTY_*} constants in class {@link Connection}.\n     ",
    "links" : [ "Connection" ]
  }, {
    "name" : "public boolean isVoipAudioMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the audio mode of this {@code RemoteConnection} is VOIP.\n     *\n     * @return {@code true} if the {@code RemoteConnection}'s current audio mode is VOIP.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StatusHints getStatusHints()",
    "returnType" : "StatusHints",
    "comment" : "\n     * Obtains status hints pertaining to this {@code RemoteConnection}.\n     *\n     * @return The current {@link StatusHints} of this {@code RemoteConnection},\n     *         or {@code null} if none have been set.\n     ",
    "links" : [ "StatusHints" ]
  }, {
    "name" : "public Uri getAddress()",
    "returnType" : "Uri",
    "comment" : "\n     * Obtains the address of this {@code RemoteConnection}.\n     *\n     * @return The address (e.g., phone number) to which the {@code RemoteConnection}\n     *         is currently connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAddressPresentation()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the presentation requirements for the address of this {@code RemoteConnection}.\n     *\n     * @return The presentation requirements for the address. See\n     *         {@link TelecomManager} for valid values.\n     ",
    "links" : [ "TelecomManager" ]
  }, {
    "name" : "public CharSequence getCallerDisplayName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Obtains the display name for this {@code RemoteConnection}'s caller.\n     *\n     * @return The display name for the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCallerDisplayNamePresentation()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the presentation requirements for this {@code RemoteConnection}'s\n     * caller's display name.\n     *\n     * @return The presentation requirements for the caller display name. See\n     *         {@link TelecomManager} for valid values.\n     ",
    "links" : [ "TelecomManager" ]
  }, {
    "name" : "public int getVideoState()",
    "returnType" : "int",
    "comment" : "\n     * Obtains the video state of this {@code RemoteConnection}.\n     *\n     * @return The video state of the {@code RemoteConnection}. See {@link VideoProfile}.\n     ",
    "links" : [ "VideoProfile" ]
  }, {
    "name" : "public final VideoProvider getVideoProvider()",
    "returnType" : "VideoProvider",
    "comment" : "\n     * Obtains the video provider of this {@code RemoteConnection}.\n     * @return The video provider associated with this {@code RemoteConnection}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Obtain the extras associated with this {@code RemoteConnection}.\n     *\n     * @return The extras for this connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRingbackRequested()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether this {@code RemoteConnection} is requesting ringback.\n     *\n     * @return Whether the {@code RemoteConnection} is requesting that the framework play a\n     *         ringback tone on its behalf.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void abort()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code RemoteConnection} to abort.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void answer()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link Connection#STATE_RINGING} {@code RemoteConnection} to answer.\n     ",
    "links" : [ "Connection#STATE_RINGING" ]
  }, {
    "name" : "public void answer(int videoState)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link Connection#STATE_RINGING} {@code RemoteConnection} to answer.\n     * @param videoState The video state in which to answer the call.\n     * @hide\n     ",
    "links" : [ "Connection#STATE_RINGING" ]
  }, {
    "name" : "public void reject()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link Connection#STATE_RINGING} {@code RemoteConnection} to reject.\n     ",
    "links" : [ "Connection#STATE_RINGING" ]
  }, {
    "name" : "public void hold()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code RemoteConnection} to go on hold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unhold()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link Connection#STATE_HOLDING} call to release from hold.\n     ",
    "links" : [ "Connection#STATE_HOLDING" ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code RemoteConnection} to disconnect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void playDtmfTone(char digit)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code RemoteConnection} to play a dual-tone multi-frequency signaling\n     * (DTMF) tone.\n     *\n     * Any other currently playing DTMF tone in the specified call is immediately stopped.\n     *\n     * @param digit A character representing the DTMF digit for which to play the tone. This\n     *         value must be one of {@code '0'} through {@code '9'}, {@code '*'} or {@code '#'}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopDtmfTone()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code RemoteConnection} to stop any dual-tone multi-frequency signaling\n     * (DTMF) tone currently playing.\n     *\n     * DTMF tones are played by calling {@link #playDtmfTone(char)}. If no DTMF tone is\n     * currently playing, this method will do nothing.\n     ",
    "links" : [ "#playDtmfTone" ]
  }, {
    "name" : "public void postDialContinue(boolean proceed)",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@code RemoteConnection} to continue playing a post-dial DTMF string.\n     *\n     * A post-dial DTMF string is a string of digits following the first instance of either\n     * {@link TelecomManager#DTMF_CHARACTER_WAIT} or {@link TelecomManager#DTMF_CHARACTER_PAUSE}.\n     * These digits are immediately sent as DTMF tones to the recipient as soon as the\n     * connection is made.\n     *\n     * If the DTMF string contains a {@link TelecomManager#DTMF_CHARACTER_PAUSE} symbol, this\n     * {@code RemoteConnection} will temporarily pause playing the tones for a pre-defined period\n     * of time.\n     *\n     * If the DTMF string contains a {@link TelecomManager#DTMF_CHARACTER_WAIT} symbol, this\n     * {@code RemoteConnection} will pause playing the tones and notify callbacks via\n     * {@link Callback#onPostDialWait(RemoteConnection, String)}. At this point, the in-call app\n     * should display to the user an indication of this state and an affordance to continue\n     * the postdial sequence. When the user decides to continue the postdial sequence, the in-call\n     * app should invoke the {@link #postDialContinue(boolean)} method.\n     *\n     * @param proceed Whether or not to continue with the post-dial sequence.\n     ",
    "links" : [ "TelecomManager#DTMF_CHARACTER_WAIT", "TelecomManager#DTMF_CHARACTER_PAUSE", "TelecomManager#DTMF_CHARACTER_PAUSE", "TelecomManager#DTMF_CHARACTER_WAIT", "Callback#onPostDialWait", "#postDialContinue" ]
  }, {
    "name" : "public void pullExternalCall()",
    "returnType" : "void",
    "comment" : "\n     * Instructs this {@link RemoteConnection} to pull itself to the local device.\n     * <p>\n     * See {@link Call#pullExternalCall()} for more information.\n     ",
    "links" : [ "RemoteConnection", "Call#pullExternalCall" ]
  }, {
    "name" : "public void setAudioState(AudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Set the audio state of this {@code RemoteConnection}.\n     *\n     * @param state The audio state of this {@code RemoteConnection}.\n     * @hide\n     * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.\n     ",
    "links" : [ "#setCallAudioState" ]
  }, {
    "name" : "public void setCallAudioState(CallAudioState state)",
    "returnType" : "void",
    "comment" : "\n     * Set the audio state of this {@code RemoteConnection}.\n     *\n     * @param state The audio state of this {@code RemoteConnection}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startRtt(@NonNull Connection.RttTextStream rttTextStream)",
    "returnType" : "void",
    "comment" : "\n     * Notifies this {@link RemoteConnection} that the user has requested an RTT session.\n     * @param rttTextStream The object that should be used to send text to or receive text from\n     *                      the in-call app.\n     * @hide\n     ",
    "links" : [ "RemoteConnection" ]
  }, {
    "name" : "public void stopRtt()",
    "returnType" : "void",
    "comment" : "\n     * Notifies this {@link RemoteConnection} that it should terminate any existing RTT\n     * session. No response to Telecom is needed for this method.\n     * @hide\n     ",
    "links" : [ "RemoteConnection" ]
  }, {
    "name" : "public void sendRttUpgradeResponse(@Nullable Connection.RttTextStream rttTextStream)",
    "returnType" : "void",
    "comment" : "\n     * Notifies this {@link RemoteConnection} of a response to a previous remotely-initiated RTT\n     * upgrade request sent via {@link Connection#sendRemoteRttRequest}.\n     * Acceptance of the request is indicated by the supplied {@link RttTextStream} being non-null,\n     * and rejection is indicated by {@code rttTextStream} being {@code null}\n     * @hide\n     * @param rttTextStream The object that should be used to send text to or receive text from\n     *                      the in-call app.\n     ",
    "links" : [ "RemoteConnection", "Connection#sendRemoteRttRequest", "RttTextStream" ]
  }, {
    "name" : "public List<RemoteConnection> getConferenceableConnections()",
    "returnType" : "List<RemoteConnection>",
    "comment" : "\n     * Obtain the {@code RemoteConnection}s with which this {@code RemoteConnection} may be\n     * successfully asked to create a conference with.\n     *\n     * @return The {@code RemoteConnection}s with which this {@code RemoteConnection} may be\n     *         merged into a {@link RemoteConference}.\n     ",
    "links" : [ "RemoteConference" ]
  }, {
    "name" : "public RemoteConference getConference()",
    "returnType" : "RemoteConference",
    "comment" : "\n     * Obtain the {@code RemoteConference} that this {@code RemoteConnection} may be a part\n     * of, or {@code null} if there is no such {@code RemoteConference}.\n     *\n     * @return A {@code RemoteConference} or {@code null};\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getActiveOwnerInfo()",
    "returnType" : "String",
    "comment" : "\n     * Get the owner info for the currently active session.  We want to make sure that any owner\n     * info from the original call into the connection manager gets retained so that the full\n     * context of the calls can be traced down to Telephony.\n     * Example: Telecom will provide owner info in it's external session info that indicates\n     * 'cast' as the calling owner.\n     * @return The active owner\n     ",
    "links" : [ ]
  }, {
    "name" : " String getId()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " IConnectionService getConnectionService()",
    "returnType" : "IConnectionService",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : " void setState(final int state)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDisconnected(final DisconnectCause disconnectCause)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRingbackRequested(final boolean ringback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setConnectionCapabilities(final int connectionCapabilities)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setConnectionProperties(final int connectionProperties)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDestroyed()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setPostDialWait(final String remainingDigits)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void onPostDialChar(final char nextChar)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setVideoState(final int videoState)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setVideoProvider(final VideoProvider videoProvider)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setIsVoipAudioMode(final boolean isVoip)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setStatusHints(final StatusHints statusHints)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setAddress(final Uri address, final int presentation)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setCallerDisplayName(final String callerDisplayName, final int presentation)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setConferenceableConnections(final List<RemoteConnection> conferenceableConnections)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setConference(final RemoteConference conference)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void putExtras(final Bundle extras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void removeExtras(List<String> keys)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void notifyExtrasChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onConnectionEvent(final String event, final Bundle extras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onRttInitiationSuccess()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onRttInitiationFailure(int reason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onRttSessionRemotelyTerminated()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void onRemoteRttRequest()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static RemoteConnection failure(DisconnectCause disconnectCause)",
    "returnType" : "RemoteConnection",
    "comment" : "\n    /**\n     * Create a RemoteConnection represents a failure, and which will be in\n     * {@link Connection#STATE_DISCONNECTED}. Attempting to use it for anything will almost\n     * certainly result in bad things happening. Do not do this.\n     *\n     * @return a failed {@link RemoteConnection}\n     *\n     * @hide\n     ",
    "links" : [ "Connection#STATE_DISCONNECTED", "RemoteConnection" ]
  } ],
  "variableNames" : [ "mConnectionService", "mConnectionId", "mCallbackRecords", "mConferenceableConnections", "mUnmodifiableconferenceableConnections", "mState", "mDisconnectCause", "mRingbackRequested", "mConnected", "mConnectionCapabilities", "mConnectionProperties", "mVideoState", "mVideoProvider", "mIsVoipAudioMode", "mStatusHints", "mAddress", "mAddressPresentation", "mCallerDisplayName", "mCallerDisplayNamePresentation", "mConference", "mExtras", "mCallingPackageAbbreviation" ],
  "methodNames" : [ "public void registerCallback(Callback callback)", "public void registerCallback(Callback callback, Handler handler)", "public void unregisterCallback(Callback callback)", "public int getState()", "public DisconnectCause getDisconnectCause()", "public int getConnectionCapabilities()", "public int getConnectionProperties()", "public boolean isVoipAudioMode()", "public StatusHints getStatusHints()", "public Uri getAddress()", "public int getAddressPresentation()", "public CharSequence getCallerDisplayName()", "public int getCallerDisplayNamePresentation()", "public int getVideoState()", "public final VideoProvider getVideoProvider()", "public final Bundle getExtras()", "public boolean isRingbackRequested()", "public void abort()", "public void answer()", "public void answer(int videoState)", "public void reject()", "public void hold()", "public void unhold()", "public void disconnect()", "public void playDtmfTone(char digit)", "public void stopDtmfTone()", "public void postDialContinue(boolean proceed)", "public void pullExternalCall()", "public void setAudioState(AudioState state)", "public void setCallAudioState(CallAudioState state)", "public void startRtt(@NonNull Connection.RttTextStream rttTextStream)", "public void stopRtt()", "public void sendRttUpgradeResponse(@Nullable Connection.RttTextStream rttTextStream)", "public List<RemoteConnection> getConferenceableConnections()", "public RemoteConference getConference()", "private String getActiveOwnerInfo()", " String getId()", " IConnectionService getConnectionService()", " void setState(final int state)", " void setDisconnected(final DisconnectCause disconnectCause)", " void setRingbackRequested(final boolean ringback)", " void setConnectionCapabilities(final int connectionCapabilities)", " void setConnectionProperties(final int connectionProperties)", " void setDestroyed()", " void setPostDialWait(final String remainingDigits)", " void onPostDialChar(final char nextChar)", " void setVideoState(final int videoState)", " void setVideoProvider(final VideoProvider videoProvider)", " void setIsVoipAudioMode(final boolean isVoip)", " void setStatusHints(final StatusHints statusHints)", " void setAddress(final Uri address, final int presentation)", " void setCallerDisplayName(final String callerDisplayName, final int presentation)", " void setConferenceableConnections(final List<RemoteConnection> conferenceableConnections)", " void setConference(final RemoteConference conference)", " void putExtras(final Bundle extras)", " void removeExtras(List<String> keys)", "private void notifyExtrasChanged()", " void onConnectionEvent(final String event, final Bundle extras)", " void onRttInitiationSuccess()", " void onRttInitiationFailure(int reason)", " void onRttSessionRemotelyTerminated()", " void onRemoteRttRequest()", "public static RemoteConnection failure(DisconnectCause disconnectCause)" ]
}