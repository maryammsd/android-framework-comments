{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ActivityManagerInternal.java",
  "packageName" : "android.app",
  "className" : "ActivityManagerInternal",
  "comment" : "\n * Activity manager local system service interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ALLOW_NON_FULL",
    "type" : "int",
    "comment" : "\n     * Allows access to a caller with {@link android.Manifest.permission#INTERACT_ACROSS_USERS}.\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS" ]
  }, {
    "name" : "ALLOW_NON_FULL_IN_PROFILE",
    "type" : "int",
    "comment" : "\n     * Allows access to a caller with {@link android.Manifest.permission#INTERACT_ACROSS_USERS}\n     * if in the same profile group.\n     * Otherwise, {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} is required.\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.Manifest.permission#INTERACT_ACROSS_USERS" ]
  }, {
    "name" : "ALLOW_FULL_ONLY",
    "type" : "int",
    "comment" : "\n     * Allows access to a caller only if it has the full\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL" ]
  }, {
    "name" : "ALLOW_PROFILES_OR_NON_FULL",
    "type" : "int",
    "comment" : "\n     * Allows access to a caller with {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES}\n     * if in the same profile group.\n     * Otherwise, {@link android.Manifest.permission#INTERACT_ACROSS_USERS} is required and suffices\n     * as in {@link #ALLOW_NON_FULL}.\n     ",
    "links" : [ "#ALLOW_NON_FULL", "android.Manifest.permission#INTERACT_ACROSS_PROFILES", "android.Manifest.permission#INTERACT_ACROSS_USERS" ]
  }, {
    "name" : "OOM_ADJ_REASON_NONE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: none - internal use only, do not use it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: activity changes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_FINISH_RECEIVER",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: finishing a broadcast receiver.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_START_RECEIVER",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: starting a broadcast receiver.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_BIND_SERVICE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: binding to a service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_UNBIND_SERVICE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: unbinding from a service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_START_SERVICE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: starting a service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_GET_PROVIDER",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: connecting to a content provider.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_REMOVE_PROVIDER",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: disconnecting from a content provider.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_UI_VISIBILITY",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: UI visibility changes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_ALLOWLIST",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: device power allowlist changes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_PROCESS_BEGIN",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: starting a process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_PROCESS_END",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: ending a process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_SHORT_FGS_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: short FGS timeout.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_SYSTEM_INIT",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: system initialization.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_BACKUP",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: backup/restore.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_SHELL",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: instrumented by the SHELL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_REMOVE_TASK",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: task stack is being removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_UID_IDLE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: uid idle.\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_STOP_SERVICE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: stop service.\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_EXECUTING_SERVICE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: executing service.\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_RESTRICTION_CHANGE",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: background restriction changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "OOM_ADJ_REASON_COMPONENT_DISABLED",
    "type" : "int",
    "comment" : "\n     * Oom Adj Reason: A package or its component is disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_PROJECTION_TOKEN_EVENT_CREATED",
    "type" : "int",
    "comment" : "\n     * An instance of {@link android.media.projection.IMediaProjection} has been created\n     * by the system.\n     *\n     * @hide\n     ",
    "links" : [ "android.media.projection.IMediaProjection" ]
  }, {
    "name" : "MEDIA_PROJECTION_TOKEN_EVENT_DESTROYED",
    "type" : "int",
    "comment" : "\n     * An instance of {@link android.media.projection.IMediaProjection} has been destroyed\n     * by the system.\n     *\n     * @hide\n     ",
    "links" : [ "android.media.projection.IMediaProjection" ]
  } ],
  "methods" : [ {
    "name" : "public abstract Pair<String, String> getAppProfileStatsForDebugging(long time, int lines)",
    "returnType" : "Pair<String, String>",
    "comment" : "\n     * Returns profile information in free form string in two separate strings.\n     * See AppProfiler for the output format.\n     * The output can only be used for human consumption. The format may change\n     * in the future.\n     * Do not call it frequently.\n     * @param time uptime for the cpu state\n     * @param lines lines of the cpu state should be returned\n     * @return a pair of Strings. The first is the current cpu load, the second is the cpu state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String checkContentProviderAccess(String authority, @UserIdInt int userId)",
    "returnType" : "String",
    "comment" : "\n     * Verify that calling app has access to the given provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int checkContentProviderUriPermission(Uri uri, @UserIdInt int userId, int callingUid, int modeFlags)",
    "returnType" : "int",
    "comment" : "\n     * Verify that calling UID has access to the given provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onWakefulnessChanged(int wakefulness)",
    "returnType" : "void",
    "comment" : " Called by the power manager.",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean startIsolatedProcess(String entryPoint, String[] mainArgs, String processName, String abiOverride, int uid, Runnable crashHandler)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if process start is successful, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onUserRemoved(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a user has been deleted. This can happen during normal device usage\n     * or just at startup, when partially removed users are purged. Any state persisted by the\n     * ActivityManager should be purged now.\n     *\n     * @param userId The user being cleaned up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean startUserInBackground(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Start user, if it is not already running, but don't bring it to foreground.\n     * @param userId ID of the user to start\n     * @return true if the user has been successfully started\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void killForegroundAppsForUser(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Kill foreground apps from the specified user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setPendingIntentAllowlistDuration(IIntentSender target, IBinder allowlistToken, long duration, @TempAllowListType int type, @ReasonCode int reasonCode, @Nullable String reason)",
    "returnType" : "void",
    "comment" : "\n     * Sets how long a {@link PendingIntent} can be temporarily allowlisted to bypass restrictions\n     * such as Power Save mode.\n     * @param target\n     * @param allowlistToken\n     * @param duration temp allowlist duration in milliseconds.\n     * @param type temp allowlist type defined at {@link TempAllowListType}\n     * @param reasonCode one of {@link ReasonCode}\n     * @param reason A human-readable reason for logging purposes.\n     ",
    "links" : [ "android.os.PowerExemptionManager.ReasonCode", "android.os.PowerExemptionManager.TempAllowListType", "android.app.PendingIntent" ]
  }, {
    "name" : "public abstract int getPendingIntentFlags(IIntentSender target)",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags set for a {@link PendingIntent}.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "public abstract void setPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder allowlistToken, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Allows a {@link PendingIntent} to start activities from background.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "public abstract void clearPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder allowlistToken)",
    "returnType" : "void",
    "comment" : "\n     * Voids {@link PendingIntent}'s privilege to start activities from background.\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "public abstract void setDeviceIdleAllowlist(int[] allAppids, int[] exceptIdleAppids)",
    "returnType" : "void",
    "comment" : "\n     * Allow DeviceIdleController to tell us about what apps are allowlisted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateDeviceIdleTempAllowlist(@Nullable int[] appids, int changingUid, boolean adding, long durationMs, @TempAllowListType int type, @ReasonCode int reasonCode, @Nullable String reason, int callingUid)",
    "returnType" : "void",
    "comment" : "\n     * Update information about which app IDs are on the temp allowlist.\n     * @param appids the updated list of appIds in temp allowlist.\n     *               If null, it is to update only changingUid.\n     * @param changingUid uid to add or remove to temp allowlist.\n     * @param adding true to add to temp allowlist, false to remove from temp allowlist.\n     * @param durationMs when adding is true, the duration to be in temp allowlist.\n     * @param type temp allowlist type defined at {@link TempAllowListType}.\n     * @param reasonCode one of {@link ReasonCode}\n     * @param reason A human-readable reason for logging purposes.\n     * @param callingUid the callingUid that setup this temp allowlist, only valid when param adding\n     *                   is true.\n     ",
    "links" : [ "android.os.PowerExemptionManager.ReasonCode", "android.os.PowerExemptionManager.TempAllowListType" ]
  }, {
    "name" : "public abstract int getUidProcessState(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Get the procstate for the UID.  The return value will be between\n     * {@link ActivityManager#MIN_PROCESS_STATE} and {@link ActivityManager#MAX_PROCESS_STATE}.\n     * Note if the UID doesn't exist, it'll return {@link ActivityManager#PROCESS_STATE_NONEXISTENT}\n     * (-1).\n     ",
    "links" : [ "android.app.ActivityManager#MIN_PROCESS_STATE", "android.app.ActivityManager#PROCESS_STATE_NONEXISTENT", "android.app.ActivityManager#MAX_PROCESS_STATE" ]
  }, {
    "name" : "public abstract Map<Integer, String> getProcessesWithPendingBindMounts(int userId)",
    "returnType" : "Map<Integer, String>",
    "comment" : "\n     * Get a map of pid and package name that process of that pid Android/data and Android/obb\n     * directory is not mounted to lowerfs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isSystemReady()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if system is ready, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void enforceBroadcastOptionsPermissions(@Nullable Bundle options, int callingUid)",
    "returnType" : "void",
    "comment" : "\n     * Enforce capability restrictions on use of the given BroadcastOptions\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getPackageNameByPid(int pid)",
    "returnType" : "String",
    "comment" : "\n     * Returns package name given pid.\n     *\n     * @param pid The pid we are searching package name for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setHasOverlayUi(int pid, boolean hasOverlayUi)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the given pid has an overlay UI or not.\n     *\n     * @param pid The pid we are setting overlay UI for.\n     * @param hasOverlayUi True if the process has overlay UI.\n     * @see android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void notifyNetworkPolicyRulesUpdated(int uid, long procStateSeq)",
    "returnType" : "void",
    "comment" : "\n     * Called after the network policy rules are updated by\n     * {@link com.android.server.net.NetworkPolicyManagerService} for a specific {@param uid} and\n     * {@param procStateSeq}.\n     ",
    "links" : [ "com.android.server.net.NetworkPolicyManagerService" ]
  }, {
    "name" : "public abstract void onUidBlockedReasonsChanged(int uid, int blockedReasons)",
    "returnType" : "void",
    "comment" : "\n     * Inform ActivityManagerService about the latest {@code blockedReasons} for an uid, which\n     * can be used to understand whether the {@code uid} is allowed to access network or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isRuntimeRestarted()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if runtime was restarted, false if it's normal boot\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canStartMoreUsers()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if more users can be started without stopping currently running users.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user switcher message for switching from {@link android.os.UserHandle#SYSTEM}.\n     ",
    "links" : [ "android.os.UserHandle#SYSTEM" ]
  }, {
    "name" : "public abstract void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user switcher message for switching to {@link android.os.UserHandle#SYSTEM}.\n     ",
    "links" : [ "android.os.UserHandle#SYSTEM" ]
  }, {
    "name" : "public abstract int getMaxRunningUsers()",
    "returnType" : "int",
    "comment" : "\n     * Returns maximum number of users that can run simultaneously.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isUidActive(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether an UID is active or idle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<ProcessMemoryState> getMemoryStateForProcesses()",
    "returnType" : "List<ProcessMemoryState>",
    "comment" : "\n     * Returns a list of running processes along with corresponding uids, pids and their oom score.\n     *\n     * Only processes managed by ActivityManagerService are included.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int handleIncomingUser(int callingPid, int callingUid, @UserIdInt int userId, boolean allowAll, int allowMode, String name, String callerPackage)",
    "returnType" : "int",
    "comment" : "\n     * Checks to see if the calling pid is allowed to handle the user. Returns adjusted user id as\n     * needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void enforceCallingPermission(@PermissionName String permission, String func)",
    "returnType" : "void",
    "comment" : " Checks if the calling binder pid/uid has the given permission. ",
    "links" : [ ]
  }, {
    "name" : "public abstract Pair<Integer, Integer> getCurrentAndTargetUserIds()",
    "returnType" : "Pair<Integer, Integer>",
    "comment" : "\n     * Returns the current and target user ids as a {@link Pair}. Target user id will be\n     * {@link android.os.UserHandle#USER_NULL} if there is not an ongoing user switch.\n     ",
    "links" : [ "android.util.Pair", "android.os.UserHandle#USER_NULL" ]
  }, {
    "name" : "public abstract int getCurrentUserId()",
    "returnType" : "int",
    "comment" : " Returns the current user id. ",
    "links" : [ ]
  }, {
    "name" : "public abstract int[] getStartedUserIds()",
    "returnType" : "int[]",
    "comment" : " Returns the currently started user ids. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isUserRunning(@UserIdInt int userId, int flags)",
    "returnType" : "boolean",
    "comment" : " Returns true if the user is running. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void trimApplications()",
    "returnType" : "void",
    "comment" : " Trims memory usage in the system by removing/stopping unused application processes. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void killProcessesForRemovedTask(ArrayList<Object> procsToKill)",
    "returnType" : "void",
    "comment" : " Kill the processes in the list due to their tasks been removed. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void killProcess(String processName, int uid, String reason)",
    "returnType" : "void",
    "comment" : " Kill the process immediately. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasRunningActivity(int uid, @Nullable String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@code uid} is running an activity from {@code packageName}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateOomAdj(@OomAdjReason int oomAdjReason)",
    "returnType" : "void",
    "comment" : "\n     * Request to update oom adj.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateCpuStats()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateBatteryStats(ComponentName activity, int uid, @UserIdInt int userId, boolean resumed)",
    "returnType" : "void",
    "comment" : "\n     * Update battery stats on activity usage.\n     * @param activity\n     * @param uid\n     * @param userId\n     * @param started\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateActivityUsageStats(ComponentName activity, @UserIdInt int userId, int event, IBinder appToken, ComponentName taskRoot, ActivityId activityId)",
    "returnType" : "void",
    "comment" : "\n     * Update UsageStats of the activity.\n     * @param activity\n     * @param userId\n     * @param event\n     * @param appToken ActivityRecord's appToken.\n     * @param taskRoot Task's root\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateForegroundTimeIfOnBattery(String packageName, int uid, long cpuTimeDiff)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void sendForegroundProfileChanged(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean shouldConfirmCredentials(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given user requires credential entry at this time. This is used to\n     * intercept activity launches for apps corresponding to locked profiles due to separate\n     * challenge being triggered or when the profile user is yet to be unlocked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteAlarmFinish(PendingIntent ps, WorkSource workSource, int sourceUid, String tag)",
    "returnType" : "void",
    "comment" : "\n     * Used in conjunction with {@link #noteAlarmStart(PendingIntent, WorkSource, int, String)} to\n     * note an alarm duration for battery attribution\n     ",
    "links" : [ "#noteAlarmStart(PendingIntent" ]
  }, {
    "name" : "public abstract void noteAlarmStart(PendingIntent ps, WorkSource workSource, int sourceUid, String tag)",
    "returnType" : "void",
    "comment" : "\n     * Used in conjunction with {@link #noteAlarmFinish(PendingIntent, WorkSource, int, String)} to\n     * note an alarm duration for battery attribution\n     ",
    "links" : [ "#noteAlarmFinish(PendingIntent" ]
  }, {
    "name" : "public abstract void noteWakeupAlarm(PendingIntent ps, WorkSource workSource, int sourceUid, String sourcePkg, String tag)",
    "returnType" : "void",
    "comment" : "\n     * Used to note a wakeup alarm for battery attribution.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAppStartModeDisabled(int uid, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this app is disallowed to run in the background.\n     *\n     * @see ActivityManager#APP_START_MODE_DISABLED\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int[] getCurrentProfileIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the ids of the current user and all of its profiles (if any), regardless of the\n     * running state of the profiles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract UserInfo getCurrentUser()",
    "returnType" : "UserInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void ensureNotSpecialUser(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isCurrentProfile(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasStartedUserState(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void finishUserSwitch(Object uss)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void scheduleAppGcs()",
    "returnType" : "void",
    "comment" : " Schedule the execution of all pending app GCs. ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getTaskIdForActivity(@NonNull IBinder token, boolean onlyRoot)",
    "returnType" : "int",
    "comment" : " Gets the task id for a given activity. ",
    "links" : [ ]
  }, {
    "name" : "public abstract ActivityPresentationInfo getActivityPresentationInfo(@NonNull IBinder token)",
    "returnType" : "ActivityPresentationInfo",
    "comment" : " Gets the basic info for a given activity. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBooting(boolean booting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isBooting()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBooted(boolean booted)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isBooted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void finishBooting()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void tempAllowlistForPendingIntent(int callerPid, int callerUid, int targetUid, long duration, int type, @ReasonCode int reasonCode, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Temp allowlist a UID for PendingIntent.\n     * @param callerPid the PID that sent the PendingIntent.\n     * @param callerUid the UID that sent the PendingIntent.\n     * @param targetUid the UID that is been temp allowlisted.\n     * @param duration temp allowlist duration in milliseconds.\n     * @param type temp allowlist type defined at {@link TempAllowListType}\n     * @param reasonCode one of {@link ReasonCode}\n     * @param reason\n     ",
    "links" : [ "android.os.PowerExemptionManager.ReasonCode", "android.os.PowerExemptionManager.TempAllowListType" ]
  }, {
    "name" : "public abstract int broadcastIntentInPackage(String packageName, @Nullable String featureId, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IApplicationThread resultToThread, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, @UserIdInt int userId, BackgroundStartPrivileges backgroundStartPrivileges, @Nullable int[] broadcastAllowList)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, @Nullable String callingFeatureId, @UserIdInt int userId, BackgroundStartPrivileges backgroundStartPrivileges) throws TransactionTooLargeException",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void disconnectActivityFromServices(Object connectionHolder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void cleanUpServices(@UserIdInt int userId, ComponentName component, Intent baseIntent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, @UserIdInt int userId)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void ensureBootCompleted()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateOomLevelsForDisplay(int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isActivityStartsLoggingEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isBackgroundActivityStartsEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns true if the background activity starts is enabled. ",
    "links" : [ ]
  }, {
    "name" : "public abstract BackgroundStartPrivileges getBackgroundStartPrivileges(int uid)",
    "returnType" : "BackgroundStartPrivileges",
    "comment" : "\n     * Returns The current {@link BackgroundStartPrivileges} of the UID.\n     ",
    "links" : [ "android.app.BackgroundStartPrivileges" ]
  }, {
    "name" : "public abstract void reportCurKeyguardUsageEvent(boolean keyguardShowing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canScheduleUserInitiatedJobs(int uid, int pid, String pkgName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the app is in a state where it is allowed to schedule a\n     * {@link android.app.job.JobInfo.Builder#setUserInitiated(boolean) user-initiated job}.\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setUserInitiated(boolean)" ]
  }, {
    "name" : "public abstract void monitor()",
    "returnType" : "void",
    "comment" : " @see com.android.server.am.ActivityManagerService#monitor ",
    "links" : [ ]
  }, {
    "name" : "public abstract long inputDispatchingTimedOut(int pid, boolean aboveSystem, TimeoutRecord timeoutRecord)",
    "returnType" : "long",
    "comment" : " Input dispatch timeout to a window, start the ANR process. Return the timeout extension,\n     * in milliseconds, or 0 to abort dispatch. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean inputDispatchingTimedOut(Object proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, Object parentProc, boolean aboveSystem, TimeoutRecord timeoutRecord)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void inputDispatchingResumed(int pid)",
    "returnType" : "void",
    "comment" : "\n     * App started responding to input events. This signal can be used to abort the ANR process and\n     * hide the ANR dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void rescheduleAnrDialog(Object data)",
    "returnType" : "void",
    "comment" : "\n     * User tapped \"wait\" in the ANR dialog - reschedule the dialog to be shown again at a later\n     * time.\n     * @param data AppNotRespondingDialog.Data object\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void broadcastGlobalConfigurationChanged(int changes, boolean initLocale)",
    "returnType" : "void",
    "comment" : "\n     * Sends {@link android.content.Intent#ACTION_CONFIGURATION_CHANGED} with all the appropriate\n     * flags.\n     ",
    "links" : [ "android.content.Intent#ACTION_CONFIGURATION_CHANGED" ]
  }, {
    "name" : "public abstract void broadcastCloseSystemDialogs(String reason)",
    "returnType" : "void",
    "comment" : "\n     * Sends {@link android.content.Intent#ACTION_CLOSE_SYSTEM_DIALOGS} with all the appropriate\n     * flags.\n     ",
    "links" : [ "android.content.Intent#ACTION_CLOSE_SYSTEM_DIALOGS" ]
  }, {
    "name" : "public abstract void appNotResponding(@NonNull String processName, int uid, @NonNull TimeoutRecord timeoutRecord)",
    "returnType" : "void",
    "comment" : "\n     * Trigger an ANR for the specified process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)",
    "returnType" : "void",
    "comment" : "\n     * Kills all background processes, except those matching any of the specified properties.\n     *\n     * @param minTargetSdk the target SDK version at or above which to preserve processes,\n     *                     or {@code -1} to ignore the target SDK\n     * @param maxProcState the process state at or below which to preserve processes,\n     *                     or {@code -1} to ignore the process state\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, boolean isTop, String hostingType, ComponentName hostingName)",
    "returnType" : "void",
    "comment" : " Starts a given process. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDebugFlagsForStartingActivity(ActivityInfo aInfo, int startFlags, ProfilerInfo profilerInfo, Object wmLock)",
    "returnType" : "void",
    "comment" : " Starts up the starting activity process for debugging if needed.\n     * This function needs to be called synchronously from WindowManager context so the caller\n     * passes a lock {@code wmLock} and waits to be notified.\n     *\n     * @param wmLock calls {@code notify} on the object to wake up the caller.\n    ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getStorageMountMode(int pid, int uid)",
    "returnType" : "int",
    "comment" : " Returns mount mode for process running with given pid ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAppForeground(int uid)",
    "returnType" : "boolean",
    "comment" : " Returns true if the given uid is the app in the foreground. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAppBad(String processName, int uid)",
    "returnType" : "boolean",
    "comment" : " Returns true if the given process name and uid is currently marked 'bad' ",
    "links" : [ ]
  }, {
    "name" : "public abstract void clearPendingBackup(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : " Remove pending backup for the given userId. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void prepareForPossibleShutdown()",
    "returnType" : "void",
    "comment" : "\n     * When power button is very long pressed, call this interface to do some pre-shutdown work\n     * like persisting database etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasRunningForegroundService(int uid, int foregroundServiceType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@code uid} is running a foreground service of a specific\n     * {@code foregroundServiceType}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasForegroundServiceNotification(String pkg, @UserIdInt int userId, String channelId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given notification channel currently has a\n     * notification associated with a foreground service.  This is an AMS check\n     * because that is the source of truth for the FGS state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ServiceNotificationPolicy applyForegroundServiceNotification(Notification notification, String tag, int id, String pkg, @UserIdInt int userId)",
    "returnType" : "ServiceNotificationPolicy",
    "comment" : "\n     * Tell the service lifecycle logic that the given Notification content is now\n     * canonical for any foreground-service visibility policy purposes.\n     *\n     * Returns a description of any FGs-related policy around the given Notification:\n     * not associated with an FGS; ensure display; or only update if already displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onForegroundServiceNotificationUpdate(boolean shown, Notification notification, int id, String pkg, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Callback from the notification subsystem that the given FGS notification has\n     * been evaluated, and either shown or explicitly overlooked.  This can happen\n     * after either Service.startForeground() or NotificationManager.notify().\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void stopAppForUser(String pkg, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Fully stop the given app's processes without restoring service starts or\n     * bindings, but without the other durable effects of the full-scale\n     * \"force stop\" intervention.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerProcessObserver(IProcessObserver processObserver)",
    "returnType" : "void",
    "comment" : "\n     * Registers the specified {@code processObserver} to be notified of future changes to\n     * process state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unregisterProcessObserver(IProcessObserver processObserver)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the specified {@code processObserver}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getInstrumentationSourceUid(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Gets the uid of the instrumentation source if there is an unfinished instrumentation that\n     * targets the given uid.\n     *\n     * @param uid The uid to be checked for\n     *\n     * @return the uid of the instrumentation source, if there is an instrumentation whose target\n     * application uid matches the given uid, and {@link android.os.Process#INVALID_UID} otherwise.\n     ",
    "links" : [ "android.os.Process#INVALID_UID" ]
  }, {
    "name" : "public abstract boolean isDeviceOwner(int uid)",
    "returnType" : "boolean",
    "comment" : " Is this a device owner app? ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDeviceOwnerUid(int uid)",
    "returnType" : "void",
    "comment" : "\n     * Called by DevicePolicyManagerService to set the uid of the device owner.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isProfileOwner(int uid)",
    "returnType" : "boolean",
    "comment" : " Is this a profile owner app? ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setProfileOwnerUid(ArraySet<Integer> profileOwnerUids)",
    "returnType" : "void",
    "comment" : "\n     * Called by DevicePolicyManagerService to set the uid of the profile owner.\n     * @param profileOwnerUids The profile owner UIDs. The ownership of the array is\n     *                         passed to callee.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setCompanionAppUids(int userId, Set<Integer> companionAppUids)",
    "returnType" : "void",
    "comment" : "\n     * Set all associated companion app that belongs to a userId.\n     * @param userId\n     * @param companionAppUids  ActivityManager will take ownership of this Set, the caller\n     *                          shouldn't touch this Set after calling this interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAssociatedCompanionApp(int userId, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * is the uid an associated companion app of a userId?\n     * @param userId\n     * @param uid\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int broadcastIntent(Intent intent, IIntentReceiver resultTo, String[] requiredPermissions, boolean serialized, int userId, int[] appIdAllowList, @Nullable BiFunction<Integer, Bundle, Bundle> filterExtrasForReceiver, @Nullable Bundle bOptions)",
    "returnType" : "int",
    "comment" : "\n     * Sends a broadcast, assuming the caller to be the system and allowing the inclusion of an\n     * approved allowlist of app Ids >= {@link android.os.Process#FIRST_APPLICATION_UID} that the\n     * broadcast my be sent to; any app Ids < {@link android.os.Process#FIRST_APPLICATION_UID} are\n     * automatically allowlisted.\n     *\n     * @param filterExtrasForReceiver A function to filter intent extras for the given receiver by\n     * using the rules of package visibility. Returns extras with legitimate package info that the\n     * receiver is able to access, or {@code null} if none of the packages is visible to the\n     * receiver.\n     * @param serialized Specifies whether or not the broadcast should be delivered to the\n     *                   receivers in a serial order.\n     *\n     * @see com.android.server.am.ActivityManagerService#broadcastIntentWithFeature(\n     *      IApplicationThread, String, Intent, String, IIntentReceiver, int, String, Bundle,\n     *      String[], int, Bundle, boolean, boolean, int)\n     ",
    "links" : [ "android.os.Process#FIRST_APPLICATION_UID" ]
  }, {
    "name" : "public abstract int broadcastIntentWithCallback(Intent intent, IIntentReceiver resultTo, String[] requiredPermissions, int userId, int[] appIdAllowList, @Nullable BiFunction<Integer, Bundle, Bundle> filterExtrasForReceiver, @Nullable Bundle bOptions)",
    "returnType" : "int",
    "comment" : "\n     * Variant of\n     * {@link #broadcastIntent(Intent, IIntentReceiver, String[], boolean, int, int[], BiFunction, Bundle)}\n     * that allows sender to receive a finish callback once the broadcast delivery is completed,\n     * but provides no ordering guarantee for how the broadcast is delivered to receivers.\n     ",
    "links" : [ "#broadcastIntent(Intent" ]
  }, {
    "name" : "public abstract void addPendingTopUid(int uid, int pid, @Nullable IApplicationThread thread)",
    "returnType" : "void",
    "comment" : "\n     * Add uid to the ActivityManagerService PendingStartActivityUids list.\n     * @param uid uid\n     * @param pid pid of the ProcessRecord that is pending top.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void deletePendingTopUid(int uid, long nowElapsed)",
    "returnType" : "void",
    "comment" : "\n     * Delete uid from the ActivityManagerService PendingStartActivityUids list.\n     * @param uid uid\n     * @param nowElapsed starting time of updateOomAdj\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isPendingTopUid(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Is the uid in ActivityManagerService PendingStartActivityUids list?\n     * @param uid\n     * @return true if exists, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Intent getIntentForIntentSender(IIntentSender sender)",
    "returnType" : "Intent",
    "comment" : "\n     * @return the intent for the given intent sender.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PendingIntent getPendingIntentActivityAsApp(int requestCode, @NonNull Intent intent, int flags, Bundle options, String ownerPkgName, int ownerUid)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Effectively PendingIntent.getActivityForUser(), but the PendingIntent is\n     * owned by the given uid rather than by the caller (i.e. the system).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PendingIntent getPendingIntentActivityAsApp(int requestCode, @NonNull Intent[] intents, int flags, Bundle options, String ownerPkgName, int ownerUid)",
    "returnType" : "PendingIntent",
    "comment" : "\n     * Effectively PendingIntent.getActivityForUser(), but the PendingIntent is\n     * owned by the given uid rather than by the caller (i.e. the system).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getBootTimeTempAllowListDuration()",
    "returnType" : "long",
    "comment" : "\n     * @return mBootTimeTempAllowlistDuration of ActivityManagerConstants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerAnrController(AnrController controller)",
    "returnType" : "void",
    "comment" : " Register an {@link AnrController} to control the ANR dialog behavior ",
    "links" : [ "android.app.AnrController" ]
  }, {
    "name" : "public abstract void unregisterAnrController(AnrController controller)",
    "returnType" : "void",
    "comment" : " Unregister an {@link AnrController} ",
    "links" : [ "android.app.AnrController" ]
  }, {
    "name" : "public abstract boolean isTempAllowlistedForFgsWhileInUse(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Is the FGS started from an uid temporarily allowed to have while-in-use permission?\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPushMessagingOverQuotaBehavior()",
    "returnType" : "int",
    "comment" : "\n     * Return the temp allowlist type when server push messaging is over the quota.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getServiceStartForegroundTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Return the startForeground() grace period after calling startForegroundService().\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getUidCapability(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the capability of the given uid\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<Integer> getIsolatedProcesses(int uid)",
    "returnType" : "List<Integer>",
    "comment" : "\n     * @return The PID list of the isolated process with packages matching the given uid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int sendIntentSender(IIntentSender target, IBinder allowlistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options)",
    "returnType" : "int",
    "comment" : " @see ActivityManagerService#sendIntentSender ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setVoiceInteractionManagerProvider(@Nullable VoiceInteractionManagerProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the provider to communicate between voice interaction manager service and\n     * ActivityManagerService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setStopUserOnSwitch(@StopUserOnSwitch int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the current foreground user (and its profiles) should be stopped after switched\n     * out.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getRestrictionLevel(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Get the restriction level of the given UID, if it hosts multiple packages,\n     * return least restricted level.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getRestrictionLevel(String pkg, @UserIdInt int userId)",
    "returnType" : "int",
    "comment" : "\n     * Get the restriction level of the given package for given user id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isBgAutoRestrictedBucketFeatureFlagEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether or not apps would be put into restricted standby bucket automatically\n     * when it's background-restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addAppBackgroundRestrictionListener(@NonNull AppBackgroundRestrictionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register the background restriction listener callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addForegroundServiceStateListener(@NonNull ForegroundServiceStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register the foreground service state change listener callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addBroadcastEventListener(@NonNull BroadcastEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register the broadcast event listener callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addBindServiceEventListener(@NonNull BindServiceEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register the bind service event listener callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void restart()",
    "returnType" : "void",
    "comment" : "\n     * Restart android.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<PendingIntentStats> getPendingIntentStats()",
    "returnType" : "List<PendingIntentStats>",
    "comment" : "\n     * Returns some summary statistics of the current PendingIntent queue - sizes and counts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerNetworkPolicyUidObserver(@NonNull IUidObserver observer, int which, int cutpoint, @NonNull String callingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Register the UidObserver for NetworkPolicyManager service.\n     *\n     * This is equivalent to calling\n     * {@link IActivityManager#registerUidObserver(IUidObserver, int, int, String)} but having a\n     * separate method for NetworkPolicyManager service so that it's UidObserver can be called\n     * separately outside the usual UidObserver flow.\n     ",
    "links" : [ "#registerUidObserver(IUidObserver" ]
  }, {
    "name" : "public abstract ArraySet<String> getClientPackages(String servicePackageName)",
    "returnType" : "ArraySet<String>",
    "comment" : "\n     * Return all client package names of a service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract IUnsafeIntentStrictModeCallback getRegisteredStrictModeCallback(int callingPid)",
    "returnType" : "IUnsafeIntentStrictModeCallback",
    "comment" : "\n     * Retrieve an IUnsafeIntentStrictModeCallback matching the given callingUid.\n     * Returns null no match is found.\n     * @param callingPid The PID mapped with the callback.\n     * @return The callback, if it exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unregisterStrictModeCallback(int callingPid)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters an IUnsafeIntentStrictModeCallback matching the given callingUid.\n     * @param callingPid The PID mapped with the callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean startForegroundServiceDelegate(@NonNull ForegroundServiceDelegationOptions options, @Nullable ServiceConnection connection)",
    "returnType" : "boolean",
    "comment" : "\n     * Start a foreground service delegate.\n     * @param options foreground service delegate options.\n     * @param connection a service connection served as callback to caller.\n     * @return true if delegate is started successfully, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void stopForegroundServiceDelegate(@NonNull ForegroundServiceDelegationOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Stop a foreground service delegate.\n     * @param options the foreground service delegate options.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void stopForegroundServiceDelegate(@NonNull ServiceConnection connection)",
    "returnType" : "void",
    "comment" : "\n     * Stop a foreground service delegate by service connection.\n     * @param connection service connection used to start delegate previously.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean startProfileEvenWhenDisabled(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Same as {@link android.app.IActivityManager#startProfile(int userId)}, but it would succeed\n     * even if the profile is disabled - it should only be called by\n     * {@link com.android.server.devicepolicy.DevicePolicyManagerService} when starting a profile\n     * while it's being created.\n     ",
    "links" : [ "com.android.server.devicepolicy.DevicePolicyManagerService", "android.app.IActivityManager#startProfile(int" ]
  }, {
    "name" : "public abstract void logFgsApiBegin(int apiType, int uid, int pid)",
    "returnType" : "void",
    "comment" : "\n     * Internal method for logging foreground service API journey start.\n     * Used with FGS metrics logging\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void logFgsApiEnd(int apiType, int uid, int pid)",
    "returnType" : "void",
    "comment" : "\n     * Internal method for logging foreground service API journey end.\n     * Used with FGS metrics logging\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canStartForegroundService(int pid, int uid, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether an app will be able to start a foreground service or not.\n     *\n     * @param pid The process id belonging to the app to be checked.\n     * @param uid The UID of the app to be checked.\n     * @param packageName The package name of the app to be checked.\n     * @return whether the app will be able to start a foreground service or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canAllowWhileInUsePermissionInFgs(int pid, int uid, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if a foreground service started by an uid is allowed to have\n     * while-in-use permissions.\n     *\n     * @param pid The process id belonging to the app to be checked.\n     * @param uid The UID of the app to be checked.\n     * @param packageName The package name of the app to be checked.\n     * @return whether the foreground service is allowed to have while-in-use permissions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void tempAllowWhileInUsePermissionInFgs(int uid, long durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Temporarily allow foreground service started by an uid to have while-in-use permission\n     * for durationMs.\n     *\n     * @param uid The UID of the app that starts the foreground service.\n     * @param durationMs elapsedRealTime duration in milliseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void notifyMediaProjectionEvent(int uid, @NonNull IBinder projectionToken, @MediaProjectionTokenEvent int event)",
    "returnType" : "void",
    "comment" : "\n     * Called after the system created/destroyed a media projection for an app, if the user\n     * has granted the permission to start a media projection from this app.\n     *\n     * <p>This API is specifically for the use case of enforcing the FGS type\n     * {@code android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION},\n     * where the app who is starting this type of FGS must have been granted with the permission\n     * to start the projection via the {@link android.media.projection.MediaProjection} APIs.\n     *\n     * @param uid The uid of the app which the system created/destroyed a media projection for.\n     * @param projectionToken The {@link android.media.projection.IMediaProjection} token that\n     *                        the system created/destroyed.\n     * @param event The actual event happening to the given {@code projectionToken}.\n     ",
    "links" : [ "android.media.projection.MediaProjection", "android.media.projection.IMediaProjection" ]
  }, {
    "name" : "public abstract Object getCachedAppsHighWatermarkStats(int atomTag, boolean resetAfterPull)",
    "returnType" : "Object",
    "comment" : "\n     * @return The stats event for the cached apps high watermark since last pull.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean clearApplicationUserData(String packageName, boolean keepState, boolean isRestore, IPackageDataObserver observer, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Internal method for clearing app data, with the extra param that is used to indicate restore.\n     * Used by Backup service during restore operation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean shouldDelayHomeLaunch(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Method that checks if system is Headless (don't delay launch) case in which it\n     * should also check if ThemeOverlayController is ready (don't delay) or not (delay).\n     *\n     * @param userId\n     * @return Boolean indicating if Home launch should wait for ThemeOverlayController signal\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addStartInfoTimestamp(int key, long timestampNs, int uid, int pid, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Add a startup timestamp to the most recent start of the specified process.\n     *\n     * @param key The {@link ApplicationStartInfo} start timestamp key of the timestamp to add.\n     * @param timestampNs The clock monotonic timestamp to add in nanoseconds.\n     * @param uid The UID of the process to add this timestamp to.\n     * @param pid The process id of the process to add this timestamp to.\n     * @param userId The userId in the multi-user environment.\n     ",
    "links" : [ "android.app.ApplicationStartInfo" ]
  } ],
  "methodNames" : [ "public abstract Pair<String, String> getAppProfileStatsForDebugging(long time, int lines)", "public abstract String checkContentProviderAccess(String authority, @UserIdInt int userId)", "public abstract int checkContentProviderUriPermission(Uri uri, @UserIdInt int userId, int callingUid, int modeFlags)", "public abstract void onWakefulnessChanged(int wakefulness)", "public abstract boolean startIsolatedProcess(String entryPoint, String[] mainArgs, String processName, String abiOverride, int uid, Runnable crashHandler)", "public abstract void onUserRemoved(@UserIdInt int userId)", "public abstract boolean startUserInBackground(int userId)", "public abstract void killForegroundAppsForUser(@UserIdInt int userId)", "public abstract void setPendingIntentAllowlistDuration(IIntentSender target, IBinder allowlistToken, long duration, @TempAllowListType int type, @ReasonCode int reasonCode, @Nullable String reason)", "public abstract int getPendingIntentFlags(IIntentSender target)", "public abstract void setPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder allowlistToken, int flags)", "public abstract void clearPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder allowlistToken)", "public abstract void setDeviceIdleAllowlist(int[] allAppids, int[] exceptIdleAppids)", "public abstract void updateDeviceIdleTempAllowlist(@Nullable int[] appids, int changingUid, boolean adding, long durationMs, @TempAllowListType int type, @ReasonCode int reasonCode, @Nullable String reason, int callingUid)", "public abstract int getUidProcessState(int uid)", "public abstract Map<Integer, String> getProcessesWithPendingBindMounts(int userId)", "public abstract boolean isSystemReady()", "public abstract void enforceBroadcastOptionsPermissions(@Nullable Bundle options, int callingUid)", "public abstract String getPackageNameByPid(int pid)", "public abstract void setHasOverlayUi(int pid, boolean hasOverlayUi)", "public abstract void notifyNetworkPolicyRulesUpdated(int uid, long procStateSeq)", "public abstract void onUidBlockedReasonsChanged(int uid, int blockedReasons)", "public abstract boolean isRuntimeRestarted()", "public abstract boolean canStartMoreUsers()", "public abstract void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage)", "public abstract void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage)", "public abstract int getMaxRunningUsers()", "public abstract boolean isUidActive(int uid)", "public abstract List<ProcessMemoryState> getMemoryStateForProcesses()", "public abstract int handleIncomingUser(int callingPid, int callingUid, @UserIdInt int userId, boolean allowAll, int allowMode, String name, String callerPackage)", "public abstract void enforceCallingPermission(@PermissionName String permission, String func)", "public abstract Pair<Integer, Integer> getCurrentAndTargetUserIds()", "public abstract int getCurrentUserId()", "public abstract int[] getStartedUserIds()", "public abstract boolean isUserRunning(@UserIdInt int userId, int flags)", "public abstract void trimApplications()", "public abstract void killProcessesForRemovedTask(ArrayList<Object> procsToKill)", "public abstract void killProcess(String processName, int uid, String reason)", "public abstract boolean hasRunningActivity(int uid, @Nullable String packageName)", "public abstract void updateOomAdj(@OomAdjReason int oomAdjReason)", "public abstract void updateCpuStats()", "public abstract void updateBatteryStats(ComponentName activity, int uid, @UserIdInt int userId, boolean resumed)", "public abstract void updateActivityUsageStats(ComponentName activity, @UserIdInt int userId, int event, IBinder appToken, ComponentName taskRoot, ActivityId activityId)", "public abstract void updateForegroundTimeIfOnBattery(String packageName, int uid, long cpuTimeDiff)", "public abstract void sendForegroundProfileChanged(@UserIdInt int userId)", "public abstract boolean shouldConfirmCredentials(@UserIdInt int userId)", "public abstract void noteAlarmFinish(PendingIntent ps, WorkSource workSource, int sourceUid, String tag)", "public abstract void noteAlarmStart(PendingIntent ps, WorkSource workSource, int sourceUid, String tag)", "public abstract void noteWakeupAlarm(PendingIntent ps, WorkSource workSource, int sourceUid, String sourcePkg, String tag)", "public abstract boolean isAppStartModeDisabled(int uid, String packageName)", "public abstract int[] getCurrentProfileIds()", "public abstract UserInfo getCurrentUser()", "public abstract void ensureNotSpecialUser(@UserIdInt int userId)", "public abstract boolean isCurrentProfile(@UserIdInt int userId)", "public abstract boolean hasStartedUserState(@UserIdInt int userId)", "public abstract void finishUserSwitch(Object uss)", "public abstract void scheduleAppGcs()", "public abstract int getTaskIdForActivity(@NonNull IBinder token, boolean onlyRoot)", "public abstract ActivityPresentationInfo getActivityPresentationInfo(@NonNull IBinder token)", "public abstract void setBooting(boolean booting)", "public abstract boolean isBooting()", "public abstract void setBooted(boolean booted)", "public abstract boolean isBooted()", "public abstract void finishBooting()", "public abstract void tempAllowlistForPendingIntent(int callerPid, int callerUid, int targetUid, long duration, int type, @ReasonCode int reasonCode, String reason)", "public abstract int broadcastIntentInPackage(String packageName, @Nullable String featureId, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IApplicationThread resultToThread, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, @UserIdInt int userId, BackgroundStartPrivileges backgroundStartPrivileges, @Nullable int[] broadcastAllowList)", "public abstract ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, @Nullable String callingFeatureId, @UserIdInt int userId, BackgroundStartPrivileges backgroundStartPrivileges) throws TransactionTooLargeException", "public abstract void disconnectActivityFromServices(Object connectionHolder)", "public abstract void cleanUpServices(@UserIdInt int userId, ComponentName component, Intent baseIntent)", "public abstract ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, @UserIdInt int userId)", "public abstract void ensureBootCompleted()", "public abstract void updateOomLevelsForDisplay(int displayId)", "public abstract boolean isActivityStartsLoggingEnabled()", "public abstract boolean isBackgroundActivityStartsEnabled()", "public abstract BackgroundStartPrivileges getBackgroundStartPrivileges(int uid)", "public abstract void reportCurKeyguardUsageEvent(boolean keyguardShowing)", "public abstract boolean canScheduleUserInitiatedJobs(int uid, int pid, String pkgName)", "public abstract void monitor()", "public abstract long inputDispatchingTimedOut(int pid, boolean aboveSystem, TimeoutRecord timeoutRecord)", "public abstract boolean inputDispatchingTimedOut(Object proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, Object parentProc, boolean aboveSystem, TimeoutRecord timeoutRecord)", "public abstract void inputDispatchingResumed(int pid)", "public abstract void rescheduleAnrDialog(Object data)", "public abstract void broadcastGlobalConfigurationChanged(int changes, boolean initLocale)", "public abstract void broadcastCloseSystemDialogs(String reason)", "public abstract void appNotResponding(@NonNull String processName, int uid, @NonNull TimeoutRecord timeoutRecord)", "public abstract void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public abstract void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, boolean isTop, String hostingType, ComponentName hostingName)", "public abstract void setDebugFlagsForStartingActivity(ActivityInfo aInfo, int startFlags, ProfilerInfo profilerInfo, Object wmLock)", "public abstract int getStorageMountMode(int pid, int uid)", "public abstract boolean isAppForeground(int uid)", "public abstract boolean isAppBad(String processName, int uid)", "public abstract void clearPendingBackup(@UserIdInt int userId)", "public abstract void prepareForPossibleShutdown()", "public abstract boolean hasRunningForegroundService(int uid, int foregroundServiceType)", "public abstract boolean hasForegroundServiceNotification(String pkg, @UserIdInt int userId, String channelId)", "public abstract ServiceNotificationPolicy applyForegroundServiceNotification(Notification notification, String tag, int id, String pkg, @UserIdInt int userId)", "public abstract void onForegroundServiceNotificationUpdate(boolean shown, Notification notification, int id, String pkg, @UserIdInt int userId)", "public abstract void stopAppForUser(String pkg, @UserIdInt int userId)", "public abstract void registerProcessObserver(IProcessObserver processObserver)", "public abstract void unregisterProcessObserver(IProcessObserver processObserver)", "public abstract int getInstrumentationSourceUid(int uid)", "public abstract boolean isDeviceOwner(int uid)", "public abstract void setDeviceOwnerUid(int uid)", "public abstract boolean isProfileOwner(int uid)", "public abstract void setProfileOwnerUid(ArraySet<Integer> profileOwnerUids)", "public abstract void setCompanionAppUids(int userId, Set<Integer> companionAppUids)", "public abstract boolean isAssociatedCompanionApp(int userId, int uid)", "public abstract int broadcastIntent(Intent intent, IIntentReceiver resultTo, String[] requiredPermissions, boolean serialized, int userId, int[] appIdAllowList, @Nullable BiFunction<Integer, Bundle, Bundle> filterExtrasForReceiver, @Nullable Bundle bOptions)", "public abstract int broadcastIntentWithCallback(Intent intent, IIntentReceiver resultTo, String[] requiredPermissions, int userId, int[] appIdAllowList, @Nullable BiFunction<Integer, Bundle, Bundle> filterExtrasForReceiver, @Nullable Bundle bOptions)", "public abstract void addPendingTopUid(int uid, int pid, @Nullable IApplicationThread thread)", "public abstract void deletePendingTopUid(int uid, long nowElapsed)", "public abstract boolean isPendingTopUid(int uid)", "public abstract Intent getIntentForIntentSender(IIntentSender sender)", "public abstract PendingIntent getPendingIntentActivityAsApp(int requestCode, @NonNull Intent intent, int flags, Bundle options, String ownerPkgName, int ownerUid)", "public abstract PendingIntent getPendingIntentActivityAsApp(int requestCode, @NonNull Intent[] intents, int flags, Bundle options, String ownerPkgName, int ownerUid)", "public abstract long getBootTimeTempAllowListDuration()", "public abstract void registerAnrController(AnrController controller)", "public abstract void unregisterAnrController(AnrController controller)", "public abstract boolean isTempAllowlistedForFgsWhileInUse(int uid)", "public abstract int getPushMessagingOverQuotaBehavior()", "public abstract int getServiceStartForegroundTimeout()", "public abstract int getUidCapability(int uid)", "public abstract List<Integer> getIsolatedProcesses(int uid)", "public abstract int sendIntentSender(IIntentSender target, IBinder allowlistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options)", "public abstract void setVoiceInteractionManagerProvider(@Nullable VoiceInteractionManagerProvider provider)", "public abstract void setStopUserOnSwitch(@StopUserOnSwitch int value)", "public abstract int getRestrictionLevel(int uid)", "public abstract int getRestrictionLevel(String pkg, @UserIdInt int userId)", "public abstract boolean isBgAutoRestrictedBucketFeatureFlagEnabled()", "public abstract void addAppBackgroundRestrictionListener(@NonNull AppBackgroundRestrictionListener listener)", "public abstract void addForegroundServiceStateListener(@NonNull ForegroundServiceStateListener listener)", "public abstract void addBroadcastEventListener(@NonNull BroadcastEventListener listener)", "public abstract void addBindServiceEventListener(@NonNull BindServiceEventListener listener)", "public abstract void restart()", "public abstract List<PendingIntentStats> getPendingIntentStats()", "public abstract void registerNetworkPolicyUidObserver(@NonNull IUidObserver observer, int which, int cutpoint, @NonNull String callingPackage)", "public abstract ArraySet<String> getClientPackages(String servicePackageName)", "public abstract IUnsafeIntentStrictModeCallback getRegisteredStrictModeCallback(int callingPid)", "public abstract void unregisterStrictModeCallback(int callingPid)", "public abstract boolean startForegroundServiceDelegate(@NonNull ForegroundServiceDelegationOptions options, @Nullable ServiceConnection connection)", "public abstract void stopForegroundServiceDelegate(@NonNull ForegroundServiceDelegationOptions options)", "public abstract void stopForegroundServiceDelegate(@NonNull ServiceConnection connection)", "public abstract boolean startProfileEvenWhenDisabled(@UserIdInt int userId)", "public abstract void logFgsApiBegin(int apiType, int uid, int pid)", "public abstract void logFgsApiEnd(int apiType, int uid, int pid)", "public abstract boolean canStartForegroundService(int pid, int uid, @NonNull String packageName)", "public abstract boolean canAllowWhileInUsePermissionInFgs(int pid, int uid, @NonNull String packageName)", "public abstract void tempAllowWhileInUsePermissionInFgs(int uid, long durationMs)", "public abstract void notifyMediaProjectionEvent(int uid, @NonNull IBinder projectionToken, @MediaProjectionTokenEvent int event)", "public abstract Object getCachedAppsHighWatermarkStats(int atomTag, boolean resetAfterPull)", "public abstract boolean clearApplicationUserData(String packageName, boolean keepState, boolean isRestore, IPackageDataObserver observer, int userId)", "public abstract boolean shouldDelayHomeLaunch(int userId)", "public abstract void addStartInfoTimestamp(int key, long timestampNs, int uid, int pid, int userId)" ],
  "variableNames" : [ "ALLOW_NON_FULL", "ALLOW_NON_FULL_IN_PROFILE", "ALLOW_FULL_ONLY", "ALLOW_PROFILES_OR_NON_FULL", "OOM_ADJ_REASON_NONE", "OOM_ADJ_REASON_ACTIVITY", "OOM_ADJ_REASON_FINISH_RECEIVER", "OOM_ADJ_REASON_START_RECEIVER", "OOM_ADJ_REASON_BIND_SERVICE", "OOM_ADJ_REASON_UNBIND_SERVICE", "OOM_ADJ_REASON_START_SERVICE", "OOM_ADJ_REASON_GET_PROVIDER", "OOM_ADJ_REASON_REMOVE_PROVIDER", "OOM_ADJ_REASON_UI_VISIBILITY", "OOM_ADJ_REASON_ALLOWLIST", "OOM_ADJ_REASON_PROCESS_BEGIN", "OOM_ADJ_REASON_PROCESS_END", "OOM_ADJ_REASON_SHORT_FGS_TIMEOUT", "OOM_ADJ_REASON_SYSTEM_INIT", "OOM_ADJ_REASON_BACKUP", "OOM_ADJ_REASON_SHELL", "OOM_ADJ_REASON_REMOVE_TASK", "OOM_ADJ_REASON_UID_IDLE", "OOM_ADJ_REASON_STOP_SERVICE", "OOM_ADJ_REASON_EXECUTING_SERVICE", "OOM_ADJ_REASON_RESTRICTION_CHANGE", "OOM_ADJ_REASON_COMPONENT_DISABLED", "MEDIA_PROJECTION_TOKEN_EVENT_CREATED", "MEDIA_PROJECTION_TOKEN_EVENT_DESTROYED" ]
}