{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/NetworkTemplate.java",
  "packageName" : "android.net",
  "className" : "NetworkTemplate",
  "comment" : "\n * Predicate used to match {@link NetworkIdentity}, usually when collecting\n * statistics. (It should probably have been named {@code NetworkPredicate}.)\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACKUP_VERSION",
    "type" : "int",
    "comment" : "\n     * Current Version of the Backup Serializer.\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_MOBILE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_WIFI",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_ETHERNET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_MOBILE_WILDCARD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_WIFI_WILDCARD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_BLUETOOTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_PROXY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_ALL",
    "type" : "int",
    "comment" : "\n     * Include all network types when filtering. This is meant to merge in with the\n     * {@code TelephonyManager.NETWORK_TYPE_*} constants, and thus needs to stay in sync.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_5G_NSA",
    "type" : "int",
    "comment" : "\n     * Virtual RAT type to represent 5G NSA (Non Stand Alone) mode, where the primary cell is\n     * still LTE and network allocates a secondary 5G cell so telephony reports RAT = LTE along\n     * with NR state as connected. This should not be overlapped with any of the\n     * {@code TelephonyManager.NETWORK_TYPE_*} constants.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sForceAllNetworkTypes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchRule",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubscriberId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchSubscriberIds",
    "type" : "String[]",
    "comment" : "\n     * Ugh, templates are designed to target a single subscriber, but we might\n     * need to match several \"merged\" subscribers. These are the subscribers\n     * that should be considered to match this template.\n     * <p>\n     * Since the merge set is dynamic, it should <em>not</em> be persisted or\n     * used for determining equality.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetered",
    "type" : "int",
    "comment" : " Matches for the NetworkStats constants METERED_*, ROAMING_* and DEFAULT_NETWORK_*.",
    "links" : [ ]
  }, {
    "name" : "mRoaming",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNetwork",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkTemplate>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isKnownMatchRule(final int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void forceAllNetworkTypes()",
    "returnType" : "void",
    "comment" : "\n     * Results in matching against all mobile network types.\n     *\n     * <p>See {@link #matchesMobile} and {@link matchesMobileWildcard}.\n     ",
    "links" : [ "#matchesMobile", "matchesMobileWildcard" ]
  }, {
    "name" : "public static void resetForceAllNetworkTypes()",
    "returnType" : "void",
    "comment" : " Resets the affect of {@link #forceAllNetworkTypes}. ",
    "links" : [ "#forceAllNetworkTypes" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateMobileAll(String subscriberId)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match {@link ConnectivityManager#TYPE_MOBILE} networks with\n     * the given IMSI.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_MOBILE" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateMobileWithRatType(@Nullable String subscriberId, @NetworkType int ratType)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match cellular networks with the given IMSI and {@code ratType}.\n     * Use {@link #NETWORK_TYPE_ALL} to include all network types when filtering.\n     * See {@code TelephonyManager.NETWORK_TYPE_*}.\n     ",
    "links" : [ "#NETWORK_TYPE_ALL" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateMobileWildcard()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match metered {@link ConnectivityManager#TYPE_MOBILE} networks,\n     * regardless of IMSI.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_MOBILE" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifiWildcard()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match all metered {@link ConnectivityManager#TYPE_WIFI} networks,\n     * regardless of SSID.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_WIFI" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifi()",
    "returnType" : "NetworkTemplate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifi(String networkId)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match {@link ConnectivityManager#TYPE_WIFI} networks with the\n     * given SSID.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_WIFI" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateEthernet()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to combine all {@link ConnectivityManager#TYPE_ETHERNET} style\n     * networks together.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_ETHERNET" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateBluetooth()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to combine all {@link ConnectivityManager#TYPE_BLUETOOTH} style\n     * networks together.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_BLUETOOTH" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateProxy()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to combine all {@link ConnectivityManager#TYPE_PROXY} style\n     * networks together.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_PROXY" ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isMatchRuleMobile()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPersistable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMatchRule()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSubscriberId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNetworkId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given {@link NetworkIdentity} matches this template.\n     ",
    "links" : [ "android.net.NetworkIdentity" ]
  }, {
    "name" : "private boolean matchesMetered(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesRoaming(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesDefaultNetwork(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesCollapsedRatType(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesSubscriberId(String subscriberId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesMobile(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if mobile network with matching IMSI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getCollapsedRatType(int ratType)",
    "returnType" : "int",
    "comment" : "       3. Use TelephonyManager APIs when available.",
    "links" : [ ]
  }, {
    "name" : "public static final int[] getAllCollapsedRatTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Return all supported collapsed RAT types that could be returned by\n     * {@link #getCollapsedRatType(int)}.\n     ",
    "links" : [ "#getCollapsedRatType(int)" ]
  }, {
    "name" : "private static int[] toIntArray(@NonNull Collection<Integer> list)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesWifi(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Wi-Fi network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesEthernet(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Ethernet network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesMobileWildcard(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesWifiWildcard(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesBluetooth(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Bluetooth network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesProxy(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Proxy network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getMatchRuleName(int matchRule)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate normalize(NetworkTemplate template, String[] merged)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Examine the given template and normalize if it refers to a \"merged\"\n     * mobile subscriber. We pick the \"lowest\" merged subscriber as the primary\n     * for key purposes, and expand the template to match all other merged\n     * subscribers.\n     * <p>\n     * For example, given an incoming template matching B, and the currently\n     * active merge set [A,B], we'd return a new template that primarily matches\n     * A, but also matches B.\n     * TODO: remove and use {@link #normalize(NetworkTemplate, List)}.\n     ",
    "links" : [ "#normalize(NetworkTemplate" ]
  }, {
    "name" : "public static NetworkTemplate normalize(NetworkTemplate template, List<String[]> mergedList)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Examine the given template and normalize if it refers to a \"merged\"\n     * mobile subscriber. We pick the \"lowest\" merged subscriber as the primary\n     * for key purposes, and expand the template to match all other merged\n     * subscribers.\n     *\n     * There can be multiple merged subscriberIds for multi-SIM devices.\n     *\n     * <p>\n     * For example, given an incoming template matching B, and the currently\n     * active merge set [A,B], we'd return a new template that primarily matches\n     * A, but also matches B.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytesForBackup() throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate getNetworkTemplateFromBackup(DataInputStream in) throws IOException, BackupUtils.BadVersionException",
    "returnType" : "NetworkTemplate",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "BACKUP_VERSION", "MATCH_MOBILE", "MATCH_WIFI", "MATCH_ETHERNET", "MATCH_MOBILE_WILDCARD", "MATCH_WIFI_WILDCARD", "MATCH_BLUETOOTH", "MATCH_PROXY", "NETWORK_TYPE_ALL", "NETWORK_TYPE_5G_NSA", "sForceAllNetworkTypes", "mMatchRule", "mSubscriberId", "mMatchSubscriberIds", "mNetworkId", "mMetered", "mRoaming", "mDefaultNetwork", "mSubType", "CREATOR" ],
  "methodNames" : [ "private static boolean isKnownMatchRule(final int rule)", "public static void forceAllNetworkTypes()", "public static void resetForceAllNetworkTypes()", "public static NetworkTemplate buildTemplateMobileAll(String subscriberId)", "public static NetworkTemplate buildTemplateMobileWithRatType(@Nullable String subscriberId, @NetworkType int ratType)", "public static NetworkTemplate buildTemplateMobileWildcard()", "public static NetworkTemplate buildTemplateWifiWildcard()", "public static NetworkTemplate buildTemplateWifi()", "public static NetworkTemplate buildTemplateWifi(String networkId)", "public static NetworkTemplate buildTemplateEthernet()", "public static NetworkTemplate buildTemplateBluetooth()", "public static NetworkTemplate buildTemplateProxy()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public String toString()", "public int hashCode()", "public boolean equals(Object obj)", "public boolean isMatchRuleMobile()", "public boolean isPersistable()", "public int getMatchRule()", "public String getSubscriberId()", "public String getNetworkId()", "public boolean matches(NetworkIdentity ident)", "private boolean matchesMetered(NetworkIdentity ident)", "private boolean matchesRoaming(NetworkIdentity ident)", "private boolean matchesDefaultNetwork(NetworkIdentity ident)", "private boolean matchesCollapsedRatType(NetworkIdentity ident)", "public boolean matchesSubscriberId(String subscriberId)", "private boolean matchesMobile(NetworkIdentity ident)", "public static int getCollapsedRatType(int ratType)", "public static final int[] getAllCollapsedRatTypes()", "private static int[] toIntArray(@NonNull Collection<Integer> list)", "private boolean matchesWifi(NetworkIdentity ident)", "private boolean matchesEthernet(NetworkIdentity ident)", "private boolean matchesMobileWildcard(NetworkIdentity ident)", "private boolean matchesWifiWildcard(NetworkIdentity ident)", "private boolean matchesBluetooth(NetworkIdentity ident)", "private boolean matchesProxy(NetworkIdentity ident)", "private static String getMatchRuleName(int matchRule)", "public static NetworkTemplate normalize(NetworkTemplate template, String[] merged)", "public static NetworkTemplate normalize(NetworkTemplate template, List<String[]> mergedList)", "public byte[] getBytesForBackup() throws IOException", "public static NetworkTemplate getNetworkTemplateFromBackup(DataInputStream in) throws IOException, BackupUtils.BadVersionException" ]
}