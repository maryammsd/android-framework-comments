{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkTemplate.java",
  "packageName" : "android.net",
  "className" : "NetworkTemplate",
  "comment" : "\n * Predicate used to match {@link NetworkIdentity}, usually when collecting\n * statistics. (It should probably have been named {@code NetworkPredicate}.)\n *\n * @hide\n ",
  "links" : [ "android.net.NetworkIdentity" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_MOBILE",
    "type" : "int",
    "comment" : " Match rule to match cellular networks with given Subscriber Ids. ",
    "links" : [ ]
  }, {
    "name" : "MATCH_WIFI",
    "type" : "int",
    "comment" : " Match rule to match wifi networks. ",
    "links" : [ ]
  }, {
    "name" : "MATCH_ETHERNET",
    "type" : "int",
    "comment" : " Match rule to match ethernet networks. ",
    "links" : [ ]
  }, {
    "name" : "MATCH_BLUETOOTH",
    "type" : "int",
    "comment" : " Match rule to match bluetooth networks. ",
    "links" : [ ]
  }, {
    "name" : "MATCH_PROXY",
    "type" : "int",
    "comment" : "\n     * Match rule to match networks with {@link ConnectivityManager#TYPE_PROXY} as the legacy\n     * network type.\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_PROXY" ]
  }, {
    "name" : "MATCH_CARRIER",
    "type" : "int",
    "comment" : "\n     * Match rule to match all networks with subscriberId inside the template. Some carriers\n     * may offer non-cellular networks like WiFi, which will be matched by this rule.\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_TEST",
    "type" : "int",
    "comment" : "\n     * Match rule to match networks with {@link ConnectivityManager#TYPE_TEST} as the legacy\n     * network type.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_TEST" ]
  }, {
    "name" : "WIFI_NETWORKID_ALL",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_NETWORK_KEY_ALL",
    "type" : "String",
    "comment" : "\n     * Wi-Fi Network Key is never supposed to be null (if it is, it is a bug that\n     * should be fixed), so it's not possible to want to match null vs\n     * non-null. Therefore it's fine to use null as a sentinel for Wifi Network Key.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_ALL",
    "type" : "int",
    "comment" : "\n     * Include all network types when filtering. This is meant to merge in with the\n     * {@code TelephonyManager.NETWORK_TYPE_*} constants, and thus needs to stay in sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "OEM_MANAGED_ALL",
    "type" : "int",
    "comment" : "\n     * Value to match both OEM managed and unmanaged networks (all networks).\n     ",
    "links" : [ ]
  }, {
    "name" : "OEM_MANAGED_NO",
    "type" : "int",
    "comment" : "\n     * Value to match networks which are not OEM managed.\n     ",
    "links" : [ ]
  }, {
    "name" : "OEM_MANAGED_YES",
    "type" : "int",
    "comment" : "\n     * Value to match any OEM managed network.\n     ",
    "links" : [ ]
  }, {
    "name" : "OEM_MANAGED_PAID",
    "type" : "int",
    "comment" : "\n     * Network has {@link NetworkCapabilities#NET_CAPABILITY_OEM_PAID}.\n     ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_OEM_PAID" ]
  }, {
    "name" : "OEM_MANAGED_PRIVATE",
    "type" : "int",
    "comment" : "\n     * Network has {@link NetworkCapabilities#NET_CAPABILITY_OEM_PRIVATE}.\n     ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_OEM_PRIVATE" ]
  }, {
    "name" : "mMatchRule",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchSubscriberIds",
    "type" : "String[]",
    "comment" : "\n     * Ugh, templates are designed to target a single subscriber, but we might\n     * need to match several \"merged\" subscribers. These are the subscribers\n     * that should be considered to match this template.\n     * <p>\n     * Since the merge set is dynamic, it should <em>not</em> be persisted or\n     * used for determining equality.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMatchWifiNetworkKeys",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetered",
    "type" : "int",
    "comment" : " Matches for the NetworkStats constants METERED_*, ROAMING_* and DEFAULT_NETWORK_*.",
    "links" : [ ]
  }, {
    "name" : "mRoaming",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNetwork",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRatType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOemManaged",
    "type" : "int",
    "comment" : " Bitfield containing OEM network properties{@code NetworkIdentity#OEM_*}.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkTemplate>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isKnownMatchRule(final int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Set<String> setOf(@Nullable final String item)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void throwAtLeastU()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateMobileAll(@NonNull String subscriberId)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match {@link ConnectivityManager#TYPE_MOBILE} networks with\n     * the given IMSI.\n     *\n     * @deprecated Use {@link Builder} to build a template.\n     * @hide\n     ",
    "links" : [ "Builder", "android.net.ConnectivityManager#TYPE_MOBILE" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateMobileWildcard()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match metered {@link ConnectivityManager#TYPE_MOBILE} networks,\n     * regardless of IMSI.\n     *\n     * @deprecated Use {@link Builder} to build a template.\n     * @hide\n     ",
    "links" : [ "Builder", "android.net.ConnectivityManager#TYPE_MOBILE" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifiWildcard()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to match all metered {@link ConnectivityManager#TYPE_WIFI} networks,\n     * regardless of key of the wifi network.\n     *\n     * @deprecated Use {@link Builder} to build a template.\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_WIFI", "Builder" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifi()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * @deprecated Use {@link Builder} to build a template.\n     * @hide\n     ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateEthernet()",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Template to combine all {@link ConnectivityManager#TYPE_ETHERNET} style\n     * networks together.\n     *\n     * @deprecated Use {@link Builder} to build a template.\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager#TYPE_ETHERNET", "Builder" ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateBluetooth()",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateProxy()",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateCarrierMetered(@NonNull String subscriberId)",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateMobileWithRatType(@Nullable String subscriberId, int ratType, int metered)",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifi(@NonNull String wifiNetworkKey)",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate buildTemplateWifi(@Nullable String wifiNetworkKey, @Nullable String subscriberId)",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidMatchSubscriberIds(int matchRule, String[] matchSubscriberIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getBackwardsCompatibleMatchRule(int matchRule)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getMeterednessForBackwardsCompatibility(int matchRule)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isMatchRuleMobile()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getMatchRule()",
    "returnType" : "int",
    "comment" : "\n     * Get match rule of the template. See {@code MATCH_*}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSubscriberId()",
    "returnType" : "String",
    "comment" : "\n     * Get subscriber Id of the template.\n     *\n     * @deprecated User should use {@link #getSubscriberIds} instead.\n     * @hide\n     ",
    "links" : [ "#getSubscriberIds" ]
  }, {
    "name" : "public Set<String> getSubscriberIds()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get set of subscriber Ids of the template.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getWifiNetworkKeys()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get the set of Wifi Network Keys of the template.\n     * See {@link WifiInfo#getNetworkKey()}.\n     ",
    "links" : [ "android.net.wifi.WifiInfo#getNetworkKey()" ]
  }, {
    "name" : "public String getNetworkId()",
    "returnType" : "String",
    "comment" : " TODO: Remove this and replace all callers with {@link #getWifiNetworkKeys()}.",
    "links" : [ "#getWifiNetworkKeys()" ]
  }, {
    "name" : "public int getMeteredness()",
    "returnType" : "int",
    "comment" : "\n     * Get meteredness filter of the template.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRoaming()",
    "returnType" : "int",
    "comment" : "\n     * Get roaming filter of the template.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultNetworkStatus()",
    "returnType" : "int",
    "comment" : "\n     * Get the default network status filter of the template.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRatType()",
    "returnType" : "int",
    "comment" : "\n     * Get the Radio Access Technology(RAT) type filter of the template.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOemManaged()",
    "returnType" : "int",
    "comment" : "\n     * Get the OEM managed filter of the template. See {@code OEM_MANAGED_*} or\n     * {@code android.net.NetworkIdentity#OEM_*}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(@NonNull NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given {@link NetworkIdentity} matches this template.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkIdentity" ]
  }, {
    "name" : "private boolean matchesMetered(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesRoaming(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesDefaultNetwork(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesOemNetwork(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesCollapsedRatType(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesSubscriberId(@Nullable String subscriberId)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this template matches {@code subscriberId}. Returns true if this\n     * template was created with a {@code mMatchSubscriberIds} array that contains\n     * {@code subscriberId} or if {@code mMatchSubscriberIds} is empty.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesWifiNetworkKey(@NonNull String wifiNetworkKey)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if network matches key of the wifi network.\n     * Returns true when the key matches, or when {@code mMatchWifiNetworkKeys} is\n     * empty.\n     *\n     * @param wifiNetworkKey key of the wifi network. see {@link WifiInfo#getNetworkKey()}\n     *                  to know details about the key.\n     ",
    "links" : [ "android.net.wifi.WifiInfo#getNetworkKey()" ]
  }, {
    "name" : "private boolean matchesMobile(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if mobile network matches IMSI.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesWifi(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Wi-Fi network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesEthernet(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Ethernet network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesCarrier(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches carrier network. The carrier networks means it includes the subscriberId.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesTest(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches test network. If the wifiNetworkKeys in the template is specified, Then it\n     * will only match a network containing any of the specified the wifi network key. Otherwise,\n     * all test networks would be matched.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesBluetooth(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Bluetooth network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchesProxy(NetworkIdentity ident)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if matches Proxy network template.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getMatchRuleName(int matchRule)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getOemManagedNames(int oemManaged)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate normalize(NetworkTemplate template, String[] merged)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Examine the given template and normalize it.\n     * We pick the \"lowest\" merged subscriber as the primary\n     * for key purposes, and expand the template to match all other merged\n     * subscribers.\n     * <p>\n     * For example, given an incoming template matching B, and the currently\n     * active merge set [A,B], we'd return a new template that matches both A and B.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NetworkTemplate normalize(NetworkTemplate template, List<String[]> mergedList)",
    "returnType" : "NetworkTemplate",
    "comment" : "  including in OEM code which can access this by linking against the framework.",
    "links" : [ ]
  }, {
    "name" : "private static NetworkTemplate normalizeImpl(NetworkTemplate template, List<String[]> mergedList)",
    "returnType" : "NetworkTemplate",
    "comment" : "\n     * Examine the given template and normalize it.\n     * We pick the \"lowest\" merged subscriber as the primary\n     * for key purposes, and expand the template to match all other merged\n     * subscribers.\n     *\n     * There can be multiple merged subscriberIds for multi-SIM devices.\n     *\n     * <p>\n     * For example, given an incoming template matching B, and the currently\n     * active merge set [A,B], we'd return a new template that matches both A and B.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean isKnownMatchRule(final int rule)", "private static Set<String> setOf(@Nullable final String item)", "private static void throwAtLeastU()", "public static NetworkTemplate buildTemplateMobileAll(@NonNull String subscriberId)", "public static NetworkTemplate buildTemplateMobileWildcard()", "public static NetworkTemplate buildTemplateWifiWildcard()", "public static NetworkTemplate buildTemplateWifi()", "public static NetworkTemplate buildTemplateEthernet()", "public static NetworkTemplate buildTemplateBluetooth()", "public static NetworkTemplate buildTemplateProxy()", "public static NetworkTemplate buildTemplateCarrierMetered(@NonNull String subscriberId)", "public static NetworkTemplate buildTemplateMobileWithRatType(@Nullable String subscriberId, int ratType, int metered)", "public static NetworkTemplate buildTemplateWifi(@NonNull String wifiNetworkKey)", "public static NetworkTemplate buildTemplateWifi(@Nullable String wifiNetworkKey, @Nullable String subscriberId)", "private static void checkValidMatchSubscriberIds(int matchRule, String[] matchSubscriberIds)", "private static int getBackwardsCompatibleMatchRule(int matchRule)", "private static int getMeterednessForBackwardsCompatibility(int matchRule)", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public boolean isMatchRuleMobile()", "public int getMatchRule()", "public String getSubscriberId()", "public Set<String> getSubscriberIds()", "public Set<String> getWifiNetworkKeys()", "public String getNetworkId()", "public int getMeteredness()", "public int getRoaming()", "public int getDefaultNetworkStatus()", "public int getRatType()", "public int getOemManaged()", "public boolean matches(@NonNull NetworkIdentity ident)", "private boolean matchesMetered(NetworkIdentity ident)", "private boolean matchesRoaming(NetworkIdentity ident)", "private boolean matchesDefaultNetwork(NetworkIdentity ident)", "private boolean matchesOemNetwork(NetworkIdentity ident)", "private boolean matchesCollapsedRatType(NetworkIdentity ident)", "public boolean matchesSubscriberId(@Nullable String subscriberId)", "private boolean matchesWifiNetworkKey(@NonNull String wifiNetworkKey)", "private boolean matchesMobile(NetworkIdentity ident)", "private boolean matchesWifi(NetworkIdentity ident)", "private boolean matchesEthernet(NetworkIdentity ident)", "private boolean matchesCarrier(NetworkIdentity ident)", "private boolean matchesTest(NetworkIdentity ident)", "private boolean matchesBluetooth(NetworkIdentity ident)", "private boolean matchesProxy(NetworkIdentity ident)", "private static String getMatchRuleName(int matchRule)", "private static String getOemManagedNames(int oemManaged)", "public static NetworkTemplate normalize(NetworkTemplate template, String[] merged)", "public static NetworkTemplate normalize(NetworkTemplate template, List<String[]> mergedList)", "private static NetworkTemplate normalizeImpl(NetworkTemplate template, List<String[]> mergedList)" ],
  "variableNames" : [ "TAG", "MATCH_MOBILE", "MATCH_WIFI", "MATCH_ETHERNET", "MATCH_BLUETOOTH", "MATCH_PROXY", "MATCH_CARRIER", "MATCH_TEST", "WIFI_NETWORKID_ALL", "WIFI_NETWORK_KEY_ALL", "NETWORK_TYPE_ALL", "OEM_MANAGED_ALL", "OEM_MANAGED_NO", "OEM_MANAGED_YES", "OEM_MANAGED_PAID", "OEM_MANAGED_PRIVATE", "mMatchRule", "mMatchSubscriberIds", "mMatchWifiNetworkKeys", "mMetered", "mRoaming", "mDefaultNetwork", "mRatType", "mOemManaged", "CREATOR" ]
}