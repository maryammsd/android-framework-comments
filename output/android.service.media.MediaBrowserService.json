{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/media/MediaBrowserService.java",
  "packageName" : "android.service.media",
  "className" : "MediaBrowserService",
  "comment" : "\n * Base class for media browser services.\n * <p>\n * Media browser services enable applications to browse media content provided by an application\n * and ask the application to start playing it. They may also be used to control content that\n * is already playing by way of a {@link MediaSession}.\n * </p>\n *\n * To extend this class, you must declare the service in your manifest file with\n * an intent filter with the {@link #SERVICE_INTERFACE} action.\n *\n * For example:\n * </p><pre>\n * &lt;service android:name=\".MyMediaBrowserService\"\n *          android:label=\"&#64;string/service_name\" >\n *     &lt;intent-filter>\n *         &lt;action android:name=\"android.media.browse.MediaBrowserService\" />\n *     &lt;/intent-filter>\n * &lt;/service>\n * </pre>\n *\n ",
  "links" : [ "android.media.session.MediaSession", "#SERVICE_INTERFACE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "KEY_MEDIA_ITEM",
    "type" : "String",
    "comment" : "\n     * A key for passing the MediaItem to the ResultReceiver in getItem.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FLAG_OPTION_NOT_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_FLAG_ON_LOAD_ITEM_NOT_IMPLEMENTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_OK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "ServiceBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceState",
    "type" : "AtomicReference<ServiceState>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentConnectionOnHandler",
    "type" : "ConnectionRecord",
    "comment" : " any. See getCurrentBrowserInfo for an example. Must only be accessed on mHandler.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract BrowserRoot onGetRoot(@NonNull String clientPackageName, int clientUid, @Nullable Bundle rootHints)",
    "returnType" : "BrowserRoot",
    "comment" : "\n     * Called to get the root information for browsing by a particular client.\n     * <p>\n     * The implementation should verify that the client package has permission\n     * to access browse media information before returning the root id; it\n     * should return null if the client is not allowed to access this\n     * information.\n     * </p>\n     *\n     * @param clientPackageName The package name of the application which is\n     *            requesting access to browse media.\n     * @param clientUid The uid of the application which is requesting access to\n     *            browse media.\n     * @param rootHints An optional bundle of service-specific arguments to send\n     *            to the media browser service when connecting and retrieving the\n     *            root id for browsing, or null if none. The contents of this\n     *            bundle may affect the information returned when browsing.\n     * @return The {@link BrowserRoot} for accessing this app's content or null.\n     * @see BrowserRoot#EXTRA_RECENT\n     * @see BrowserRoot#EXTRA_OFFLINE\n     * @see BrowserRoot#EXTRA_SUGGESTED\n     ",
    "links" : [ "BrowserRoot" ]
  }, {
    "name" : "public abstract void onLoadChildren(@NonNull String parentId, @NonNull Result<List<MediaBrowser.MediaItem>> result)",
    "returnType" : "void",
    "comment" : "\n     * Called to get information about the children of a media item.\n     * <p>\n     * Implementations must call {@link Result#sendResult result.sendResult}\n     * with the list of children. If loading the children will be an expensive\n     * operation that should be performed on another thread,\n     * {@link Result#detach result.detach} may be called before returning from\n     * this function, and then {@link Result#sendResult result.sendResult}\n     * called when the loading is complete.\n     * </p><p>\n     * In case the media item does not have any children, call {@link Result#sendResult}\n     * with an empty list. When the given {@code parentId} is invalid, implementations must\n     * call {@link Result#sendResult result.sendResult} with {@code null}, which will invoke\n     * {@link MediaBrowser.SubscriptionCallback#onError}.\n     * </p>\n     *\n     * @param parentId The id of the parent media item whose children are to be\n     *            queried.\n     * @param result The Result to send the list of children to.\n     ",
    "links" : [ "MediaBrowser.SubscriptionCallback#onError", "#detach", "#sendResult" ]
  }, {
    "name" : "public void onLoadChildren(@NonNull String parentId, @NonNull Result<List<MediaBrowser.MediaItem>> result, @NonNull Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Called to get information about the children of a media item.\n     * <p>\n     * Implementations must call {@link Result#sendResult result.sendResult}\n     * with the list of children. If loading the children will be an expensive\n     * operation that should be performed on another thread,\n     * {@link Result#detach result.detach} may be called before returning from\n     * this function, and then {@link Result#sendResult result.sendResult}\n     * called when the loading is complete.\n     * </p><p>\n     * In case the media item does not have any children, call {@link Result#sendResult}\n     * with an empty list. When the given {@code parentId} is invalid, implementations must\n     * call {@link Result#sendResult result.sendResult} with {@code null}, which will invoke\n     * {@link MediaBrowser.SubscriptionCallback#onError}.\n     * </p>\n     *\n     * @param parentId The id of the parent media item whose children are to be\n     *            queried.\n     * @param result The Result to send the list of children to.\n     * @param options The bundle of service-specific arguments sent from the media\n     *            browser. The information returned through the result should be\n     *            affected by the contents of this bundle.\n     ",
    "links" : [ "MediaBrowser.SubscriptionCallback#onError", "#detach", "#sendResult" ]
  }, {
    "name" : "public void onLoadItem(String itemId, Result<MediaBrowser.MediaItem> result)",
    "returnType" : "void",
    "comment" : "\n     * Called to get information about a specific media item.\n     * <p>\n     * Implementations must call {@link Result#sendResult result.sendResult}. If\n     * loading the item will be an expensive operation {@link Result#detach\n     * result.detach} may be called before returning from this function, and\n     * then {@link Result#sendResult result.sendResult} called when the item has\n     * been loaded.\n     * </p><p>\n     * When the given {@code itemId} is invalid, implementations must call\n     * {@link Result#sendResult result.sendResult} with {@code null}.\n     * </p><p>\n     * The default implementation will invoke {@link MediaBrowser.ItemCallback#onError}.\n     * </p>\n     *\n     * @param itemId The id for the specific\n     *            {@link android.media.browse.MediaBrowser.MediaItem}.\n     * @param result The Result to send the item to.\n     ",
    "links" : [ "#detachresult.detach", "android.media.browse.MediaBrowser.MediaItem", "MediaBrowser.ItemCallback#onError", "#sendResult" ]
  }, {
    "name" : "public void setSessionToken(final MediaSession.Token token)",
    "returnType" : "void",
    "comment" : " enableNullSessionInMediaBrowserService makes it to nextfood.",
    "links" : [ ]
  }, {
    "name" : "public MediaSession.Token getSessionToken()",
    "returnType" : "MediaSession.Token",
    "comment" : "\n     * Gets the session token, or null if it has not yet been created\n     * or if it has been destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Bundle getBrowserRootHints()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets the root hints sent from the currently connected {@link MediaBrowser}.\n     * The root hints are service-specific arguments included in an optional bundle sent to the\n     * media browser service when connecting and retrieving the root id for browsing, or null if\n     * none. The contents of this bundle may affect the information returned when browsing.\n     *\n     * @throws IllegalStateException If this method is called outside of {@link #onGetRoot} or\n     *             {@link #onLoadChildren} or {@link #onLoadItem}.\n     * @see MediaBrowserService.BrowserRoot#EXTRA_RECENT\n     * @see MediaBrowserService.BrowserRoot#EXTRA_OFFLINE\n     * @see MediaBrowserService.BrowserRoot#EXTRA_SUGGESTED\n     ",
    "links" : [ "#onLoadItem", "#onGetRoot", "android.media.browse.MediaBrowser", "#onLoadChildren" ]
  }, {
    "name" : "public final RemoteUserInfo getCurrentBrowserInfo()",
    "returnType" : "RemoteUserInfo",
    "comment" : "\n     * Gets the browser information who sent the current request.\n     *\n     * @throws IllegalStateException If this method is called outside of {@link #onGetRoot} or\n     *             {@link #onLoadChildren} or {@link #onLoadItem}.\n     * @see MediaSessionManager#isTrustedForMediaControl(RemoteUserInfo)\n     ",
    "links" : [ "#onLoadItem", "#onGetRoot", "#onLoadChildren" ]
  }, {
    "name" : "public void notifyChildrenChanged(@NonNull String parentId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies all connected media browsers that the children of\n     * the specified parent id have changed in some way.\n     * This will cause browsers to fetch subscribed content again.\n     *\n     * @param parentId The id of the parent media item whose\n     * children changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyChildrenChanged(@NonNull String parentId, @NonNull Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Notifies all connected media browsers that the children of\n     * the specified parent id have changed in some way.\n     * This will cause browsers to fetch subscribed content again.\n     *\n     * @param parentId The id of the parent media item whose\n     *            children changed.\n     * @param options The bundle of service-specific arguments to send\n     *            to the media browser. The contents of this bundle may\n     *            contain the information about the change.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public IBinder onBind(Intent intent)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public abstract BrowserRoot onGetRoot(@NonNull String clientPackageName, int clientUid, @Nullable Bundle rootHints)", "public abstract void onLoadChildren(@NonNull String parentId, @NonNull Result<List<MediaBrowser.MediaItem>> result)", "public void onLoadChildren(@NonNull String parentId, @NonNull Result<List<MediaBrowser.MediaItem>> result, @NonNull Bundle options)", "public void onLoadItem(String itemId, Result<MediaBrowser.MediaItem> result)", "public void setSessionToken(final MediaSession.Token token)", "public MediaSession.Token getSessionToken()", "public final Bundle getBrowserRootHints()", "public final RemoteUserInfo getCurrentBrowserInfo()", "public void notifyChildrenChanged(@NonNull String parentId)", "public void notifyChildrenChanged(@NonNull String parentId, @NonNull Bundle options)" ],
  "variableNames" : [ "TAG", "DBG", "SERVICE_INTERFACE", "KEY_MEDIA_ITEM", "RESULT_FLAG_OPTION_NOT_HANDLED", "RESULT_FLAG_ON_LOAD_ITEM_NOT_IMPLEMENTED", "RESULT_ERROR", "RESULT_OK", "mBinder", "mHandler", "mServiceState", "mCurrentConnectionOnHandler" ]
}