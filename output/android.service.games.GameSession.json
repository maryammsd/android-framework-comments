{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/games/GameSession.java",
  "packageName" : "android.service.games",
  "className" : "GameSession",
  "comment" : "\n * An active game session, providing a facility for the implementation to interact with the game.\n *\n * A Game Service provider should extend the {@link GameSession} to provide their own implementation\n * which is then returned when a game session is created via\n * {@link GameSessionService#onNewSession(CreateGameSessionRequest)}.\n *\n * This class exposes various lifecycle methods which are guaranteed to be called in the following\n * fashion:\n *\n * {@link #onCreate()}: Will always be the first lifecycle method to be called, once the game\n * session is created.\n *\n * {@link #onGameTaskFocusChanged(boolean)}: Will be called after {@link #onCreate()} with\n * focused=true when the game task first comes into focus (if it does). If the game task is focused\n * when the game session is created, this method will be called immediately after\n * {@link #onCreate()} with focused=true. After this method is called with focused=true, it will be\n * called again with focused=false when the task goes out of focus. If this method is ever called\n * with focused=true, it is guaranteed to be called again with focused=false before\n * {@link #onDestroy()} is called. If the game task never comes into focus during the session\n * lifetime, this method will never be called.\n *\n * {@link #onDestroy()}: Will always be called after {@link #onCreate()}. If the game task ever\n * comes into focus before the game session is destroyed, then this method will be called after one\n * or more pairs of calls to {@link #onGameTaskFocusChanged(boolean)}.\n *\n * @hide\n ",
  "links" : [ "#onCreate()", "android.service.games.GameSessionService#onNewSession(CreateGameSessionRequest)", "#onGameTaskFocusChanged(boolean)", "#onDestroy()", "android.service.games.GameSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IGameSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLifecycleState",
    "type" : "LifecycleState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAreTransientInsetsVisibleDueToGesture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGameSessionController",
    "type" : "IGameSessionController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGameSessionRootView",
    "type" : "GameSessionRootView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControlViewHost",
    "type" : "SurfaceControlViewHost",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void attach(IGameSessionController gameSessionController, int taskId, @NonNull Context context, @NonNull SurfaceControlViewHost surfaceControlViewHost, int widthPx, int heightPx)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void doCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchTransientSystemBarVisibilityFromRevealGestureChanged(boolean visibleDueToGesture)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void moveToState(LifecycleState newLifecycleState)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "\n     * Initializer called when the game session is starting.\n     *\n     * This should be used perform any setup required now that the game session is created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Finalizer called when the game session is ending. This method will always be called after a\n     * call to {@link #onCreate()}. If the game task is ever in focus, this method will be called\n     * after one or more pairs of calls to {@link #onGameTaskFocusChanged(boolean)}.\n     *\n     * This should be used to perform any cleanup before the game session is destroyed.\n     ",
    "links" : [ "#onCreate()", "#onGameTaskFocusChanged(boolean)" ]
  }, {
    "name" : "public void onGameTaskFocusChanged(boolean focused)",
    "returnType" : "void",
    "comment" : "\n     * Called when the game task for this session is or unfocused. The initial call to this method\n     * will always come after a call to {@link #onCreate()} with focused=true (when the game task\n     * first comes into focus after the session is created, or immediately after the session is\n     * created if the game task is already focused).\n     *\n     * This should be used to perform any setup required when the game task comes into focus or any\n     * cleanup that is required when the game task goes out of focus.\n     *\n     * @param focused True if the game task is focused, false if the game task is unfocused.\n     ",
    "links" : [ "#onCreate()" ]
  }, {
    "name" : "public void onTransientSystemBarVisibilityFromRevealGestureChanged(boolean visibleDueToGesture)",
    "returnType" : "void",
    "comment" : "\n     * Called when the visibility of the transient system bars changed due to the user performing\n     * the reveal gesture. The reveal gesture is defined as a swipe to reveal the transient system\n     * bars that originates from the system bars.\n     *\n     * @param visibleDueToGesture if the transient bars triggered by the reveal gesture are visible.\n     *                            This is {@code true} when the transient system bars become visible\n     *                            due to user performing the reveal gesture. This is {@code false}\n     *                            when the transient system bars are hidden or become permanently\n     *                            visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTaskOverlayView(@NonNull View view, @NonNull ViewGroup.LayoutParams layoutParams)",
    "returnType" : "void",
    "comment" : "\n     * Sets the task overlay content to an explicit view. This view is placed directly into the game\n     * session's task overlay view hierarchy. It can itself be a complex view hierarchy. The size\n     * the task overlay view will always match the dimensions of the associated task's window. The\n     * {@code View} may not be cleared once set, but may be replaced by invoking\n     * {@link #setTaskOverlayView(View, ViewGroup.LayoutParams)} again.\n     *\n     * <p><b>WARNING</b>: Callers <b>must</b> ensure that only trusted views are provided.\n     *\n     * @param view         The desired content to display.\n     * @param layoutParams Layout parameters for the view.\n     ",
    "links" : [ "#setTaskOverlayView(View" ]
  }, {
    "name" : "public final boolean restartGame()",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to force stop and relaunch the game associated with the current session. This may\n     * be useful, for example, after applying settings that will not take effect until the game is\n     * restarted.\n     *\n     * @return {@code true} if the game was successfully restarted; otherwise, {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void takeScreenshot(@NonNull Executor executor, @NonNull ScreenshotCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Takes a screenshot of the associated game. For this call to succeed, the device screen\n     * must be turned on and the game task must be visible.\n     *\n     * If the callback is called with {@link ScreenshotCallback#onSuccess}, the screenshot is\n     * taken successfully.\n     *\n     * If the callback is called with {@link ScreenshotCallback#onFailure}, the provided status\n     * code should be checked.\n     *\n     * If the status code is {@link ScreenshotCallback#ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR},\n     * then the caller should verify that the conditions for calling this method are met (device\n     * screen is on and the game task is visible). To do so, the caller can monitor the lifecycle\n     * methods for this session to make sure that the game task is focused. If the conditions are\n     * met, then the caller may try again immediately.\n     *\n     * @param executor Executor on which to run the callback.\n     * @param callback The callback invoked when taking screenshot has succeeded\n     *                 or failed.\n     * @throws IllegalStateException if this method is called prior to {@link #onCreate}.\n     ",
    "links" : [ "#onSuccess", "#onFailure", "#onCreate", "#ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR" ]
  }, {
    "name" : "private void handleScreenshotResult(@NonNull ScreenshotCallback callback, @NonNull GameScreenshotResult result, @NonNull Throwable error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void startActivityFromGameSessionForResult(@NonNull Intent intent, @Nullable Bundle options, @NonNull Executor executor, @NonNull GameSessionActivityCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Launches an activity within the same activity stack as the {@link GameSession}. When the\n     * target activity exits, {@link GameSessionActivityCallback#onActivityResult(int, Intent)} will\n     * be invoked with the result code and result data directly from the target activity (in other\n     * words, the result code and data set via the target activity's\n     * {@link android.app.Activity#startActivityForResult} call). The caller is expected to handle\n     * the results that the target activity returns.\n     *\n     * <p>Any activity that an app would normally be able to start via {@link\n     * android.app.Activity#startActivityForResult} will be startable via this method.\n     *\n     * <p>Started activities may see a different calling package than the game session's package\n     * when calling {@link android.app.Activity#getCallingPackage()}.\n     *\n     * <p> If an exception is thrown while handling {@code intent},\n     * {@link GameSessionActivityCallback#onActivityStartFailed(Throwable)} will be called instead\n     * of {@link GameSessionActivityCallback#onActivityResult(int, Intent)}.\n     *\n     * @param intent   The intent to start.\n     * @param options  Additional options for how the Activity should be started. See\n     *                 {@link android.app.Activity#startActivityForResult(Intent, int, Bundle)} for\n     *                 more details. This value may be null.\n     * @param executor Executor on which {@code callback} should be invoked.\n     * @param callback Callback to be invoked once the started activity has finished.\n     ",
    "links" : [ "android.service.games.GameSessionActivityCallback#onActivityStartFailed(Throwable)", "android.service.games.GameSessionActivityCallback#onActivityResult(int", "android.app.Activity#startActivityForResult(Intent", "android.app.Activity#startActivityForResult", "android.app.Activity#getCallingPackage()", "android.service.games.GameSession" ]
  } ],
  "methodNames" : [ "public void attach(IGameSessionController gameSessionController, int taskId, @NonNull Context context, @NonNull SurfaceControlViewHost surfaceControlViewHost, int widthPx, int heightPx)", " void doCreate()", "private void doDestroy()", "public void dispatchTransientSystemBarVisibilityFromRevealGestureChanged(boolean visibleDueToGesture)", "public void moveToState(LifecycleState newLifecycleState)", "public void onCreate()", "public void onDestroy()", "public void onGameTaskFocusChanged(boolean focused)", "public void onTransientSystemBarVisibilityFromRevealGestureChanged(boolean visibleDueToGesture)", "public void setTaskOverlayView(@NonNull View view, @NonNull ViewGroup.LayoutParams layoutParams)", "public final boolean restartGame()", "public void takeScreenshot(@NonNull Executor executor, @NonNull ScreenshotCallback callback)", "private void handleScreenshotResult(@NonNull ScreenshotCallback callback, @NonNull GameScreenshotResult result, @NonNull Throwable error)", "public final void startActivityFromGameSessionForResult(@NonNull Intent intent, @Nullable Bundle options, @NonNull Executor executor, @NonNull GameSessionActivityCallback callback)" ],
  "variableNames" : [ "TAG", "DEBUG", "mInterface", "mLifecycleState", "mAreTransientInsetsVisibleDueToGesture", "mGameSessionController", "mContext", "mTaskId", "mGameSessionRootView", "mSurfaceControlViewHost" ]
}