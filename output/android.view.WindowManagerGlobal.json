{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowManagerGlobal.java",
  "packageName" : "android.view",
  "className" : "WindowManagerGlobal",
  "comment" : "\n * Provides low-level communication with the system window manager for\n * operations that are not associated with any particular context.\n *\n * This class is only used internally to implement global functions where\n * the caller already knows the display and relevant compatibility information\n * for the operation.  For most purposes, you should use {@link WindowManager} instead\n * since it is bound to a context.\n *\n * @see WindowManagerImpl\n * @hide\n ",
  "links" : [ "android.view.WindowManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_FIRST_TIME",
    "type" : "int",
    "comment" : "\n     * This is the first time the window is being drawn,\n     * so the client must call drawingFinished() when done\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_SURFACE_CHANGED",
    "type" : "int",
    "comment" : "\n     * The window manager has changed the surface from the last call.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_SURFACE_RESIZED",
    "type" : "int",
    "comment" : "\n     * The window manager has changed the size of the surface from the last call.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS",
    "type" : "int",
    "comment" : "\n     * In multi-window we force show the system bars. Because we don't want that the surface size\n     * changes in this mode, we instead have a flag whether the system bar sizes should always be\n     * consumed, so the app is treated like there is no virtual system bars at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_CANCEL_AND_REDRAW",
    "type" : "int",
    "comment" : "\n     * The window manager has told the window it cannot draw this frame and should retry again.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_INSETS_PENDING",
    "type" : "int",
    "comment" : "\n     * Flag for relayout: the client will be later giving\n     * internal insets; as a result, the window will not impact other window\n     * layouts until the insets are given.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_IN_TOUCH_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_APP_VISIBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_ALWAYS_CONSUME_SYSTEM_BARS",
    "type" : "int",
    "comment" : "\n     * Like {@link #RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS}, but as a \"hint\" when adding the\n     * window.\n     ",
    "links" : [ "#RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS" ]
  }, {
    "name" : "ADD_OKAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_BAD_APP_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_BAD_SUBWINDOW_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_NOT_APP_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_APP_EXITING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_DUPLICATE_ADD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_STARTING_NOT_NEEDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_MULTIPLE_SINGLETON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_PERMISSION_DENIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_INVALID_DISPLAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_INVALID_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_INVALID_USER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultWindowManager",
    "type" : "WindowManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWindowManagerService",
    "type" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWindowSession",
    "type" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViews",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoots",
    "type" : "ArrayList<ViewRootImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "ArrayList<WindowManager.LayoutParams>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDyingViews",
    "type" : "ArraySet<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowlessRoots",
    "type" : "ArrayList<ViewRootImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProposedRotationListenerMap",
    "type" : "WeakHashMap<IBinder, ProposedRotationListenerDelegate>",
    "comment" : " A context token only has one remote registration to system. ",
    "links" : [ ]
  }, {
    "name" : "mSystemPropertyUpdater",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustedPresentationListener",
    "type" : "TrustedPresentationListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControlInputReceivers",
    "type" : "SparseArray<SurfaceControlInputReceiverInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void initialize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static WindowManagerGlobal getInstance()",
    "returnType" : "WindowManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setWindowManagerServiceForSystemProcess(@NonNull IWindowManager wms)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@link com.android.server.wm.WindowManagerService} for the system process.\n     * <p>\n     * It is needed to prevent possible deadlock. A possible scenario is:\n     * In system process, WMS holds {@link com.android.server.wm.WindowManagerGlobalLock} to call\n     * {@code WindowManagerGlobal} APIs and wait to lock {@code WindowManagerGlobal} itself\n     * (i.e. call {@link #getWindowManagerService()} in the global lock), while\n     * another component may lock {@code WindowManagerGlobal} and wait to lock\n     * {@link com.android.server.wm.WindowManagerGlobalLock}(i.e call {@link #addView} in the\n     * system process, which calls to {@link com.android.server.wm.WindowManagerService} API\n     * directly).\n     ",
    "links" : [ "#addView", "com.android.server.wm.WindowManagerGlobalLock", "#getWindowManagerService()", "com.android.server.wm.WindowManagerService" ]
  }, {
    "name" : "public static IWindowManager getWindowManagerService()",
    "returnType" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IWindowSession getWindowSession()",
    "returnType" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IWindowSession peekWindowSession()",
    "returnType" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getViewRootNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<ViewRootImpl> getRootViews(IBinder token)",
    "returnType" : "ArrayList<ViewRootImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<View> getWindowViews()",
    "returnType" : "ArrayList<View>",
    "comment" : "\n     * @return the list of all views attached to the global window manager\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getWindowView(IBinder windowToken)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getRootView(String name)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateViewLayout(View view, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeView(View view, boolean immediate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void closeAll(IBinder token, String who, String what)",
    "returnType" : "void",
    "comment" : "\n     * Remove all roots with specified token.\n     *\n     * @param token app or window token.\n     * @param who name of caller, used in logs.\n     * @param what type of caller, used in logs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeAllExceptView(IBinder token, View view, String who, String what)",
    "returnType" : "void",
    "comment" : "\n     * Remove all roots with specified token, except maybe one view.\n     *\n     * @param token app or window token.\n     * @param view view that should be should be preserved along with it's root.\n     *             Pass null if everything should be removed.\n     * @param who name of caller, used in logs.\n     * @param what type of caller, used in logs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeViewLocked(int index, boolean immediate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doRemoveView(ViewRootImpl root)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findViewLocked(View view, boolean required)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void trimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void trimCaches(@HardwareRenderer.CacheTrimLevel int level)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpGfxInfo(FileDescriptor fd, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getWindowName(ViewRootImpl root)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStoppedState(IBinder token, boolean stopped)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportNewConfiguration(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void changeCanvasOpacity(IBinder token, boolean opaque)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public SurfaceControl mirrorWallpaperSurface(int displayId)",
    "returnType" : "SurfaceControl",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerProposedRotationListener(IBinder contextToken, Executor executor, IntConsumer listener)",
    "returnType" : "void",
    "comment" : " Registers the listener to the context token and returns the current proposed rotation. ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterProposedRotationListener(IBinder contextToken, IntConsumer listener)",
    "returnType" : "void",
    "comment" : " Unregisters the proposed rotation listener of the given token. ",
    "links" : [ ]
  }, {
    "name" : "public void registerTrustedPresentationListener(@NonNull IBinder window, @NonNull TrustedPresentationThresholds thresholds, Executor executor, @NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterTrustedPresentationListener(@NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static InputChannel createInputChannel(@NonNull IBinder clientToken, @NonNull InputTransferToken hostToken, @NonNull SurfaceControl surfaceControl, @Nullable InputTransferToken inputTransferToken)",
    "returnType" : "InputChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void removeInputChannel(IBinder clientToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InputTransferToken registerBatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostToken, @NonNull SurfaceControl surfaceControl, @NonNull Choreographer choreographer, @NonNull SurfaceControlInputReceiver receiver)",
    "returnType" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InputTransferToken registerUnbatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostToken, @NonNull SurfaceControl surfaceControl, @NonNull Looper looper, @NonNull SurfaceControlInputReceiver receiver)",
    "returnType" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unregisterSurfaceControlInputReceiver(@NonNull SurfaceControl surfaceControl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " IBinder getSurfaceControlInputClientToken(@NonNull SurfaceControl surfaceControl)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean transferTouchGesture(@NonNull InputTransferToken transferFromToken, @NonNull InputTransferToken transferToToken)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addWindowlessRoot(ViewRootImpl impl)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeWindowlessRoot(ViewRootImpl impl)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRecentsAppBehindSystemBars(boolean behindSystemBars)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void initialize()", "public static WindowManagerGlobal getInstance()", "public static void setWindowManagerServiceForSystemProcess(@NonNull IWindowManager wms)", "public static IWindowManager getWindowManagerService()", "public static IWindowSession getWindowSession()", "public static IWindowSession peekWindowSession()", "public String[] getViewRootNames()", "public ArrayList<ViewRootImpl> getRootViews(IBinder token)", "public ArrayList<View> getWindowViews()", "public View getWindowView(IBinder windowToken)", "public View getRootView(String name)", "public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow, int userId)", "public void updateViewLayout(View view, ViewGroup.LayoutParams params)", "public void removeView(View view, boolean immediate)", "public void closeAll(IBinder token, String who, String what)", "public void closeAllExceptView(IBinder token, View view, String who, String what)", "private void removeViewLocked(int index, boolean immediate)", " void doRemoveView(ViewRootImpl root)", "private int findViewLocked(View view, boolean required)", "public void trimMemory(int level)", "public void trimCaches(@HardwareRenderer.CacheTrimLevel int level)", "public void dumpGfxInfo(FileDescriptor fd, String[] args)", "private static String getWindowName(ViewRootImpl root)", "public void setStoppedState(IBinder token, boolean stopped)", "public void reportNewConfiguration(Configuration config)", "public void changeCanvasOpacity(IBinder token, boolean opaque)", "public SurfaceControl mirrorWallpaperSurface(int displayId)", "public void registerProposedRotationListener(IBinder contextToken, Executor executor, IntConsumer listener)", "public void unregisterProposedRotationListener(IBinder contextToken, IntConsumer listener)", "public void registerTrustedPresentationListener(@NonNull IBinder window, @NonNull TrustedPresentationThresholds thresholds, Executor executor, @NonNull Consumer<Boolean> listener)", "public void unregisterTrustedPresentationListener(@NonNull Consumer<Boolean> listener)", "private static InputChannel createInputChannel(@NonNull IBinder clientToken, @NonNull InputTransferToken hostToken, @NonNull SurfaceControl surfaceControl, @Nullable InputTransferToken inputTransferToken)", "private static void removeInputChannel(IBinder clientToken)", " InputTransferToken registerBatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostToken, @NonNull SurfaceControl surfaceControl, @NonNull Choreographer choreographer, @NonNull SurfaceControlInputReceiver receiver)", " InputTransferToken registerUnbatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostToken, @NonNull SurfaceControl surfaceControl, @NonNull Looper looper, @NonNull SurfaceControlInputReceiver receiver)", " void unregisterSurfaceControlInputReceiver(@NonNull SurfaceControl surfaceControl)", " IBinder getSurfaceControlInputClientToken(@NonNull SurfaceControl surfaceControl)", " boolean transferTouchGesture(@NonNull InputTransferToken transferFromToken, @NonNull InputTransferToken transferToToken)", "public void addWindowlessRoot(ViewRootImpl impl)", "public void removeWindowlessRoot(ViewRootImpl impl)", "public void setRecentsAppBehindSystemBars(boolean behindSystemBars)" ],
  "variableNames" : [ "TAG", "RELAYOUT_RES_FIRST_TIME", "RELAYOUT_RES_SURFACE_CHANGED", "RELAYOUT_RES_SURFACE_RESIZED", "RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS", "RELAYOUT_RES_CANCEL_AND_REDRAW", "RELAYOUT_INSETS_PENDING", "ADD_FLAG_IN_TOUCH_MODE", "ADD_FLAG_APP_VISIBLE", "ADD_FLAG_ALWAYS_CONSUME_SYSTEM_BARS", "ADD_OKAY", "ADD_BAD_APP_TOKEN", "ADD_BAD_SUBWINDOW_TOKEN", "ADD_NOT_APP_TOKEN", "ADD_APP_EXITING", "ADD_DUPLICATE_ADD", "ADD_STARTING_NOT_NEEDED", "ADD_MULTIPLE_SINGLETON", "ADD_PERMISSION_DENIED", "ADD_INVALID_DISPLAY", "ADD_INVALID_TYPE", "ADD_INVALID_USER", "sDefaultWindowManager", "sWindowManagerService", "sWindowSession", "mLock", "mViews", "mRoots", "mParams", "mDyingViews", "mWindowlessRoots", "mProposedRotationListenerMap", "mSystemPropertyUpdater", "mTrustedPresentationListener", "mSurfaceControlInputReceivers" ]
}