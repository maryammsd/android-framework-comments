{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/objects/XObject.java",
  "packageName" : "org.apache.xpath.objects",
  "className" : "XObject",
  "comment" : "\n * This class represents an XPath object, and is capable of\n * converting the object to various types, such as a string.\n * This class acts as the base class to other XPath type objects,\n * such as XString, and provides polymorphic casting capabilities.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_obj",
    "type" : "Object",
    "comment" : " This may be NULL!!!",
    "links" : [ ]
  }, {
    "name" : "CLASS_NULL",
    "type" : "int",
    "comment" : " Constant for NULL object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_UNKNOWN",
    "type" : "int",
    "comment" : " Constant for UNKNOWN object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_BOOLEAN",
    "type" : "int",
    "comment" : " Constant for BOOLEAN  object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_NUMBER",
    "type" : "int",
    "comment" : " Constant for NUMBER object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_STRING",
    "type" : "int",
    "comment" : " Constant for STRING object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_NODESET",
    "type" : "int",
    "comment" : " Constant for NODESET object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_RTREEFRAG",
    "type" : "int",
    "comment" : " Constant for RESULT TREE FRAGMENT object type ",
    "links" : [ ]
  }, {
    "name" : "CLASS_UNRESOLVEDVARIABLE",
    "type" : "int",
    "comment" : " Represents an unresolved variable type as an integer. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void setObject(Object obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * For support of literal objects in xpaths.\n   *\n   * @param xctxt The XPath execution context.\n   *\n   * @return This object.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void allowDetachToRelease(boolean allowRelease)",
    "returnType" : "void",
    "comment" : "\n   * Specify if it's OK for detach to release the iterator for reuse.\n   * This function should be called with a value of false for objects that are \n   * stored in variables.\n   * Calling this with a value of false on a XNodeSet will cause the nodeset \n   * to be cached.\n   *\n   * @param allowRelease true if it is OK for detach to release this iterator\n   * for pooling.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the <code>DTMIterator</code> from the set which it iterated\n   * over, releasing any computational resources and placing the iterator\n   * in the INVALID state. After <code>detach</code> has been invoked,\n   * calls to <code>nextNode</code> or <code>previousNode</code> will\n   * raise a runtime exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void destruct()",
    "returnType" : "void",
    "comment" : "\n   * Forces the object to release it's resources.  This is more harsh than\n   * detach().\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset for fresh reuse.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Directly call the\n   * characters method on the passed ContentHandler for the\n   * string-value. Multiple calls to the\n   * ContentHandler's characters methods may well occur for a single call to\n   * this method.\n   *\n   * @param ch A non-null reference to a ContentHandler.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XObject create(Object val)",
    "returnType" : "XObject",
    "comment" : "\n   * Create the right XObject based on the type of the object passed.  This \n   * function can not make an XObject that exposes DOM Nodes, NodeLists, and \n   * NodeIterators to the XSLT stylesheet as node-sets.\n   *\n   * @param val The java object which this object will wrap.\n   *\n   * @return the right XObject based on the type of the object passed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XObject create(Object val, XPathContext xctxt)",
    "returnType" : "XObject",
    "comment" : "\n   * Create the right XObject based on the type of the object passed.\n   * This function <emph>can</emph> make an XObject that exposes DOM Nodes, NodeLists, and \n   * NodeIterators to the XSLT stylesheet as node-sets.\n   *\n   * @param val The java object which this object will wrap.\n   * @param xctxt The XPath context.\n   *\n   * @return the right XObject based on the type of the object passed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n   * Tell what kind of class this is.\n   *\n   * @return CLASS_UNKNOWN\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getTypeString()",
    "returnType" : "String",
    "comment" : "\n   * Given a request type, return the equivalent string.\n   * For diagnostic purposes.\n   *\n   * @return type string \"#UNKNOWN\" + object class name\n   ",
    "links" : [ ]
  }, {
    "name" : "public double num() throws javax.xml.transform.TransformerException",
    "returnType" : "double",
    "comment" : "\n   * Cast result object to a number. Always issues an error.\n   *\n   * @return 0.0\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public double numWithSideEffects() throws javax.xml.transform.TransformerException",
    "returnType" : "double",
    "comment" : "\n   * Cast result object to a number, but allow side effects, such as the \n   * incrementing of an iterator.\n   *\n   * @return numeric value of the string conversion from the \n   * next node in the NodeSetDTM, or NAN if no node was found\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean bool() throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Cast result object to a boolean. Always issues an error.\n   *\n   * @return false\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean boolWithSideEffects() throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Cast result object to a boolean, but allow side effects, such as the \n   * incrementing of an iterator.\n   *\n   * @return True if there is a next node in the nodeset\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString xstr()",
    "returnType" : "XMLString",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public String str()",
    "returnType" : "String",
    "comment" : "\n   * Cast result object to a string.\n   *\n   * @return The object as a string\n   ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n   * Return the string representation of the object\n   *\n   *\n   * @return the string representation of the object\n   ",
    "links" : [ ]
  }, {
    "name" : "public int rtf(XPathContext support)",
    "returnType" : "int",
    "comment" : "\n   * Cast result object to a result tree fragment.\n   *\n   * @param support XPath context to use for the conversion\n   *\n   * @return the objec as a result tree fragment.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DocumentFragment rtree(XPathContext support)",
    "returnType" : "DocumentFragment",
    "comment" : "\n   * Cast result object to a result tree fragment.\n   *\n   * @param support XPath context to use for the conversion\n   *\n   * @return the objec as a result tree fragment.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DocumentFragment rtree()",
    "returnType" : "DocumentFragment",
    "comment" : "\n   * For functions to override.\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public int rtf()",
    "returnType" : "int",
    "comment" : "\n   * For functions to override.\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object object()",
    "returnType" : "Object",
    "comment" : "\n   * Return a java object that's closest to the representation\n   * that should be handed to an extension.\n   *\n   * @return The object that this class wraps\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator iter() throws javax.xml.transform.TransformerException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Cast result object to a nodelist. Always issues an error.\n   *\n   * @return null\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getFresh()",
    "returnType" : "XObject",
    "comment" : "\n   * Get a fresh copy of the object.  For use with variables.\n   *\n   * @return This object, unless overridden by subclass.\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeIterator nodeset() throws javax.xml.transform.TransformerException",
    "returnType" : "NodeIterator",
    "comment" : "\n   * Cast result object to a nodelist. Always issues an error.\n   *\n   * @return null\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList nodelist() throws javax.xml.transform.TransformerException",
    "returnType" : "NodeList",
    "comment" : "\n   * Cast result object to a nodelist. Always issues an error.\n   *\n   * @return null\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeSetDTM mutableNodeset() throws javax.xml.transform.TransformerException",
    "returnType" : "NodeSetDTM",
    "comment" : "\n   * Cast result object to a nodelist. Always issues an error.\n   *\n   * @return The object as a NodeSetDTM.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object castToType(int t, XPathContext support) throws javax.xml.transform.TransformerException",
    "returnType" : "Object",
    "comment" : "\n   * Cast object to type t.\n   *\n   * @param t Type of object to cast this to\n   * @param support XPath context to use for the conversion\n   *\n   * @return This object as the given type t\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than the other.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return True if this object is less than the given object\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is less than or equal to the other.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return True if this object is less than or equal to the given object\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is greater than the other.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return True if this object is greater than the given object\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if one object is greater than or equal to the other.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return True if this object is greater than or equal to the given object\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(XObject obj2)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are functionally equal.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return True if this object is equal to the given object\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two objects are functionally not equal.\n   *\n   * @param obj2 Object to compare this to\n   *\n   * @return True if this object is not equal to the given object\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void error(String msg) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param msg Error message to issue\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void error(String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param msg Error message to issue\n   * @param args Arguments to use in the message\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * XObjects should not normally need to fix up variables.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)",
    "returnType" : "void",
    "comment" : "\n   * Cast result object to a string.\n   *\n   *\n   * NEEDSDOC @param fsb\n   * @return The string this wraps or the empty string if null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void setObject(Object obj)", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void allowDetachToRelease(boolean allowRelease)", "public void detach()", "public void destruct()", "public void reset()", "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException", "public static XObject create(Object val)", "public static XObject create(Object val, XPathContext xctxt)", "public int getType()", "public String getTypeString()", "public double num() throws javax.xml.transform.TransformerException", "public double numWithSideEffects() throws javax.xml.transform.TransformerException", "public boolean bool() throws javax.xml.transform.TransformerException", "public boolean boolWithSideEffects() throws javax.xml.transform.TransformerException", "public XMLString xstr()", "public String str()", "public String toString()", "public int rtf(XPathContext support)", "public DocumentFragment rtree(XPathContext support)", "public DocumentFragment rtree()", "public int rtf()", "public Object object()", "public DTMIterator iter() throws javax.xml.transform.TransformerException", "public XObject getFresh()", "public NodeIterator nodeset() throws javax.xml.transform.TransformerException", "public NodeList nodelist() throws javax.xml.transform.TransformerException", "public NodeSetDTM mutableNodeset() throws javax.xml.transform.TransformerException", "public Object castToType(int t, XPathContext support) throws javax.xml.transform.TransformerException", "public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException", "public boolean equals(XObject obj2)", "public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException", "protected void error(String msg) throws javax.xml.transform.TransformerException", "protected void error(String msg, Object[] args) throws javax.xml.transform.TransformerException", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb)", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_obj", "CLASS_NULL", "CLASS_UNKNOWN", "CLASS_BOOLEAN", "CLASS_NUMBER", "CLASS_STRING", "CLASS_NODESET", "CLASS_RTREEFRAG", "CLASS_UNRESOLVEDVARIABLE" ]
}