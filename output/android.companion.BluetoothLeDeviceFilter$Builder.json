{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/BluetoothLeDeviceFilter.java",
  "packageName" : "android.companion",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link BluetoothLeDeviceFilter}\n     ",
  "links" : [ "android.companion.BluetoothLeDeviceFilter" ],
  "variables" : [ {
    "name" : "mScanFilter",
    "type" : "ScanFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNamePattern",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRawDataFilter",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRawDataFilterMask",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenamePrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenameSuffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenameBytesFrom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenameBytesLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenameNameFrom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenameNameLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenameBytesReverseOrder",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setNamePattern(@Nullable Pattern regex)",
    "returnType" : "Builder",
    "comment" : "\n         * @param regex if set, only devices with {@link BluetoothDevice#getName name} matching the\n         *              given regular expression will be shown\n         * @return self for chaining\n         ",
    "links" : [ "android.bluetooth.BluetoothDevice#getName" ]
  }, {
    "name" : "public Builder setScanFilter(@Nullable ScanFilter scanFilter)",
    "returnType" : "Builder",
    "comment" : "\n         * @param scanFilter a {@link ScanFilter} to filter devices by\n         *\n         * @return self for chaining\n         * @see ScanFilter for specific details on its various fields\n         ",
    "links" : [ "android.bluetooth.le.ScanFilter" ]
  }, {
    "name" : "public Builder setRawDataFilter(@NonNull byte[] rawDataFilter, @Nullable byte[] rawDataFilterMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Filter devices by raw advertisement data, as obtained by {@link ScanRecord#getBytes}\n         *\n         * @param rawDataFilter bit values that have to match against advertized data\n         * @param rawDataFilterMask bits that have to be matched\n         * @return self for chaining\n         ",
    "links" : [ "android.bluetooth.le.ScanRecord#getBytes" ]
  }, {
    "name" : "public Builder setRenameFromBytes(@NonNull String prefix, @NonNull String suffix, int bytesFrom, int bytesLength, ByteOrder byteOrder)",
    "returnType" : "Builder",
    "comment" : "\n         * Rename the devices shown in the list, using specific bytes from the raw advertisement\n         * data ({@link ScanRecord#getBytes}) in hexadecimal format, as well as a custom\n         * prefix/suffix around them\n         *\n         * Note that the prefix length is limited to {@link #getRenamePrefixLengthLimit} characters\n         * to ensure that there's enough space to display the byte data\n         *\n         * The range of bytes to be displayed cannot be empty\n         *\n         * @param prefix to be displayed before the byte data\n         * @param suffix to be displayed after the byte data\n         * @param bytesFrom the start byte index to be displayed (inclusive)\n         * @param bytesLength the number of bytes to be displayed from the given index\n         * @param byteOrder whether the given range of bytes is big endian (will be displayed\n         *                   in same order) or little endian (will be flipped before displaying)\n         * @return self for chaining\n         ",
    "links" : [ "android.bluetooth.le.ScanRecord#getBytes", "#getRenamePrefixLengthLimit" ]
  }, {
    "name" : "public Builder setRenameFromName(@NonNull String prefix, @NonNull String suffix, int nameFrom, int nameLength)",
    "returnType" : "Builder",
    "comment" : "\n         * Rename the devices shown in the list, using specific characters from the advertised name,\n         * as well as a custom prefix/suffix around them\n         *\n         * Note that the prefix length is limited to {@link #getRenamePrefixLengthLimit} characters\n         * to ensure that there's enough space to display the byte data\n         *\n         * The range of name characters to be displayed cannot be empty\n         *\n         * @param prefix to be displayed before the byte data\n         * @param suffix to be displayed after the byte data\n         * @param nameFrom the start name character index to be displayed (inclusive)\n         * @param nameLength the number of characters to be displayed from the given index\n         * @return self for chaining\n         ",
    "links" : [ "#getRenamePrefixLengthLimit" ]
  }, {
    "name" : "private void checkRenameNotSet()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkRangeNotEmpty(int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Builder setRename(@NonNull String prefix, @NonNull String suffix)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothLeDeviceFilter build()",
    "returnType" : "BluetoothLeDeviceFilter",
    "comment" : " @inheritDoc ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setNamePattern(@Nullable Pattern regex)", "public Builder setScanFilter(@Nullable ScanFilter scanFilter)", "public Builder setRawDataFilter(@NonNull byte[] rawDataFilter, @Nullable byte[] rawDataFilterMask)", "public Builder setRenameFromBytes(@NonNull String prefix, @NonNull String suffix, int bytesFrom, int bytesLength, ByteOrder byteOrder)", "public Builder setRenameFromName(@NonNull String prefix, @NonNull String suffix, int nameFrom, int nameLength)", "private void checkRenameNotSet()", "private void checkRangeNotEmpty(int length)", "private Builder setRename(@NonNull String prefix, @NonNull String suffix)", "public BluetoothLeDeviceFilter build()" ],
  "variableNames" : [ "mScanFilter", "mNamePattern", "mRawDataFilter", "mRawDataFilterMask", "mRenamePrefix", "mRenameSuffix", "mRenameBytesFrom", "mRenameBytesLength", "mRenameNameFrom", "mRenameNameLength", "mRenameBytesReverseOrder" ]
}