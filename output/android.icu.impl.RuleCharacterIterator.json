{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/RuleCharacterIterator.java",
  "packageName" : "android.icu.impl",
  "className" : "RuleCharacterIterator",
  "comment" : "\n * An iterator that returns 32-bit code points.  This class is deliberately\n * <em>not</em> related to any of the JDK or ICU4J character iterator classes\n * in order to minimize complexity.\n * @author Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "text",
    "type" : "String",
    "comment" : "\n     * Text being iterated.\n     ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "ParsePosition",
    "comment" : "\n     * Position of iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "sym",
    "type" : "SymbolTable",
    "comment" : "\n     * Symbol table used to parse and dereference variables.  May be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "String",
    "comment" : "\n     * Current variable expansion, or null if none.\n     ",
    "links" : [ ]
  }, {
    "name" : "bufPos",
    "type" : "int",
    "comment" : "\n     * Position within buf[].  Meaningless if buf == null.\n     ",
    "links" : [ ]
  }, {
    "name" : "isEscaped",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating whether the last character was parsed from an escape.\n     ",
    "links" : [ ]
  }, {
    "name" : "DONE",
    "type" : "int",
    "comment" : "\n     * Value returned when there are no more characters to iterate.\n     ",
    "links" : [ ]
  }, {
    "name" : "PARSE_VARIABLES",
    "type" : "int",
    "comment" : "\n     * Bitmask option to enable parsing of variable names.  If (options &\n     * PARSE_VARIABLES) != 0, then an embedded variable will be expanded to\n     * its value.  Variables are parsed using the SymbolTable API.\n     ",
    "links" : [ ]
  }, {
    "name" : "PARSE_ESCAPES",
    "type" : "int",
    "comment" : "\n     * Bitmask option to enable parsing of escape sequences.  If (options &\n     * PARSE_ESCAPES) != 0, then an embedded escape sequence will be expanded\n     * to its value.  Escapes are parsed using Utility.unescapeAndLengthAt().\n     ",
    "links" : [ ]
  }, {
    "name" : "SKIP_WHITESPACE",
    "type" : "int",
    "comment" : "\n     * Bitmask option to enable skipping of whitespace.  If (options &\n     * SKIP_WHITESPACE) != 0, then Unicode Pattern_White_Space characters will be silently\n     * skipped, as if they were not present in the input.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean atEnd()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this iterator has no more characters to return.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next(int options)",
    "returnType" : "int",
    "comment" : "\n     * Returns the next character using the given options, or DONE if there\n     * are no more characters, and advance the position to the next\n     * character.\n     * @param options one or more of the following options, bitwise-OR-ed\n     * together: PARSE_VARIABLES, PARSE_ESCAPES, SKIP_WHITESPACE.\n     * @return the current 32-bit code point, or DONE\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEscaped()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the last character returned by next() was\n     * escaped.  This will only be the case if the option passed in to\n     * next() included PARSE_ESCAPED and the next character was an\n     * escape sequence.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inVariable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this iterator is currently within a variable expansion.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Position getPos(Position p)",
    "returnType" : "Position",
    "comment" : "\n     * Returns an object which, when later passed to setPos(), will\n     * restore this iterator's position.  Usage idiom:\n     *\n     * RuleCharacterIterator iterator = ...;\n     * Position pos = iterator.getPos(null); // allocate position object\n     * for (;;) {\n     *   pos = iterator.getPos(pos); // reuse position object\n     *   int c = iterator.next(...);\n     *   ...\n     * }\n     * iterator.setPos(pos);\n     *\n     * @param p a position object previously returned by {@code getPos()},\n     * or null.  If not null, it will be updated and returned.  If\n     * null, a new position object will be allocated and returned.\n     * @return a position object which may be passed to setPos(), either\n     * {@code p}, or if {@code p} == null, a newly-allocated object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPos(Position p)",
    "returnType" : "void",
    "comment" : "\n     * Restores this iterator to the position it had when getPos()\n     * returned the given object.\n     * @param p a position object previously returned by getPos()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skipIgnored(int options)",
    "returnType" : "void",
    "comment" : "\n     * Skips ahead past any ignored characters, as indicated by the given\n     * options.  This is useful in conjunction with the lookahead() method.\n     *\n     * Currently, this only has an effect for SKIP_WHITESPACE.\n     * @param options one or more of the following options, bitwise-OR-ed\n     * together: PARSE_VARIABLES, PARSE_ESCAPES, SKIP_WHITESPACE.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentBuffer()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string containing the remainder of the characters to be\n     * returned by this iterator, without any option processing.  If the\n     * iterator is currently within a variable expansion, this will only\n     * extend to the end of the variable expansion.\n     * This method, together with getCurrentBufferPos() (which replace the former lookahead()),\n     * is provided so that iterators may interoperate with string-based APIs. The typical\n     * sequence of calls is to call skipIgnored(), then call these methods, then\n     * parse that substring, then call jumpahead() to\n     * resynchronize the iterator.\n     * @return a string containing the characters to be returned by future\n     * calls to next()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentBufferPos()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpahead(int count)",
    "returnType" : "void",
    "comment" : "\n     * Advances the position by the given number of 16-bit code units.\n     * This is useful in conjunction with getCurrentBuffer()+getCurrentBufferPos()\n     * (formerly lookahead()).\n     * @param count the number of 16-bit code units to jump over\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this object, consisting of the\n     * characters being iterated, with a '|' marking the current position.\n     * Position within an expanded variable is <em>not</em> indicated.\n     * @return a string representation of this object\n     ",
    "links" : [ ]
  }, {
    "name" : "private int _current()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current 32-bit code point without parsing escapes, parsing\n     * variables, or skipping whitespace.\n     * @return the current 32-bit code point\n     ",
    "links" : [ ]
  }, {
    "name" : "private void _advance(int count)",
    "returnType" : "void",
    "comment" : "\n     * Advances the position by the given amount.\n     * @param count the number of 16-bit code units to advance past\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean atEnd()", "public int next(int options)", "public boolean isEscaped()", "public boolean inVariable()", "public Position getPos(Position p)", "public void setPos(Position p)", "public void skipIgnored(int options)", "public String getCurrentBuffer()", "public int getCurrentBufferPos()", "public void jumpahead(int count)", "public String toString()", "private int _current()", "private void _advance(int count)" ],
  "variableNames" : [ "text", "pos", "sym", "buf", "bufPos", "isEscaped", "DONE", "PARSE_VARIABLES", "PARSE_ESCAPES", "SKIP_WHITESPACE" ]
}