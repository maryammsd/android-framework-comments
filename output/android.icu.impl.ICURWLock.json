{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICURWLock.java",
  "packageName" : "android.icu.impl",
  "className" : "ICURWLock",
  "comment" : "\n * <p>A Reader/Writer lock originally written for ICU service\n * implementation. The internal implementation was replaced\n * with the JDK's stock read write lock (ReentrantReadWriteLock)\n * for ICU 52.</p>\n *\n * <p>This assumes that there will be little writing contention.\n * It also doesn't allow active readers to acquire and release\n * a write lock, or deal with priority inversion issues.</p>\n *\n * <p>Access to the lock should be enclosed in a try/finally block\n * in order to ensure that the lock is always released in case of\n * exceptions:<br><pre>\n * try {\n *     lock.acquireRead();\n *     // use service protected by the lock\n * }\n * finally {\n *     lock.releaseRead();\n * }\n * </pre></p>\n *\n * <p>The lock provides utility methods getStats and clearStats\n * to return statistics on the use of the lock.</p>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "rwl",
    "type" : "ReentrantReadWriteLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stats",
    "type" : "Stats",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized Stats resetStats()",
    "returnType" : "Stats",
    "comment" : "\n     * Reset the stats.  Returns existing stats, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Stats clearStats()",
    "returnType" : "Stats",
    "comment" : "\n     * Clear the stats (stop collecting stats).  Returns existing stats, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Stats getStats()",
    "returnType" : "Stats",
    "comment" : "\n     * Return a snapshot of the current stats.  This does not reset the stats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void acquireRead()",
    "returnType" : "void",
    "comment" : "\n     * <p>Acquire a read lock, blocking until a read lock is\n     * available.  Multiple readers can concurrently hold the read\n     * lock.</p>\n     *\n     * <p>If there's a writer, or a waiting writer, increment the\n     * waiting reader count and block on this.  Otherwise\n     * increment the active reader count and return.  Caller must call\n     * releaseRead when done (for example, in a finally block).</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releaseRead()",
    "returnType" : "void",
    "comment" : "\n     * <p>Release a read lock and return.  An error will be thrown\n     * if a read lock is not currently held.</p>\n     *\n     * <p>If this is the last active reader, notify the oldest\n     * waiting writer.  Call when finished with work\n     * controlled by acquireRead.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void acquireWrite()",
    "returnType" : "void",
    "comment" : "\n     * <p>Acquire the write lock, blocking until the write lock is\n     * available.  Only one writer can acquire the write lock, and\n     * when held, no readers can acquire the read lock.</p>\n     *\n     * <p>If there are no readers and no waiting writers, mark as\n     * having an active writer and return.  Otherwise, add a lock to the\n     * end of the waiting writer list, and block on it.  Caller\n     * must call releaseWrite when done (for example, in a finally\n     * block).<p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releaseWrite()",
    "returnType" : "void",
    "comment" : "\n     * <p>Release the write lock and return.  An error will be thrown\n     * if the write lock is not currently held.</p>\n     *\n     * <p>If there are waiting readers, make them all active and\n     * notify all of them.  Otherwise, notify the oldest waiting\n     * writer, if any.  Call when finished with work controlled by\n     * acquireWrite.</p>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized Stats resetStats()", "public synchronized Stats clearStats()", "public synchronized Stats getStats()", "public void acquireRead()", "public void releaseRead()", "public void acquireWrite()", "public void releaseWrite()" ],
  "variableNames" : [ "rwl", "stats" ]
}