{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/BidiFormatter.java",
  "packageName" : "android.text",
  "className" : "BidiFormatter",
  "comment" : "\n * Utility class for formatting text for display in a potentially opposite-directionality context\n * without garbling. The directionality of the context is set at formatter creation and the\n * directionality of the text can be either estimated or passed in when known.\n *\n * <p>To support versions lower than {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n * you can use the support library's {@link androidx.core.text.BidiFormatter} class.\n *\n * <p>These APIs provides the following functionality:\n * <p>\n * 1. Bidi Wrapping\n * When text in one language is mixed into a document in another, opposite-directionality language,\n * e.g. when an English business name is embedded in some Hebrew text, both the inserted string\n * and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly\n * separated from the surrounding text in a \"wrapper\" that:\n * <p>\n * - Declares its directionality so that the string is displayed correctly. This can be done in\n *   Unicode bidi formatting codes by {@link #unicodeWrap} and similar methods.\n * <p>\n * - Isolates the string's directionality, so it does not unduly affect the surrounding content.\n *   Currently, this can only be done using invisible Unicode characters of the same direction as\n *   the context (LRM or RLM) in addition to the directionality declaration above, thus \"resetting\"\n *   the directionality to that of the context. The \"reset\" may need to be done at both ends of the\n *   string. Without \"reset\" after the string, the string will \"stick\" to a number or logically\n *   separate opposite-direction text that happens to follow it in-line (even if separated by\n *   neutral content like spaces and punctuation). Without \"reset\" before the string, the same can\n *   happen there, but only with more opposite-direction text, not a number. One approach is to\n *   \"reset\" the direction only after each string, on the theory that if the preceding opposite-\n *   direction text is itself bidi-wrapped, the \"reset\" after it will prevent the sticking. (Doing\n *   the \"reset\" only before each string definitely does not work because we do not want to require\n *   bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a\n *   number.) Still, the safest policy is to do the \"reset\" on both ends of each string, since RTL\n *   message translations often contain untranslated Latin-script brand names and technical terms,\n *   and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one\n *   has such a message, it is best to do the \"reset\" manually in the message translation itself,\n *   since the message's opposite-direction text could be followed by an inserted number, which we\n *   would not bidi-wrap anyway. Thus, \"reset\" only after the string is the current default. In an\n *   alternative to \"reset\", recent additions to the HTML, CSS, and Unicode standards allow the\n *   isolation to be part of the directionality declaration. This form of isolation is better than\n *   \"reset\" because it takes less space, does not require knowing the context directionality, has a\n *   gentler effect than \"reset\", and protects both ends of the string. However, we do not yet allow\n *   using it because required platforms do not yet support it.\n * <p>\n * Providing these wrapping services is the basic purpose of the bidi formatter.\n * <p>\n * 2. Directionality estimation\n * How does one know whether a string about to be inserted into surrounding text has the same\n * directionality? Well, in many cases, one knows that this must be the case when writing the code\n * doing the insertion, e.g. when a localized message is inserted into a localized page. In such\n * cases there is no need to involve the bidi formatter at all. In some other cases, it need not be\n * the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known.\n * In the remaining cases, e.g. when the string is user-entered or comes from a database, the\n * language of the string (and thus its directionality) is not known a priori, and must be\n * estimated at run-time. The bidi formatter can do this automatically using the default\n * first-strong estimation algorithm. It can also be configured to use a custom directionality\n * estimation object.\n ",
  "links" : [ "#unicodeWrap", "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "androidx.core.text.BidiFormatter" ],
  "variables" : [ {
    "name" : "DEFAULT_TEXT_DIRECTION_HEURISTIC",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * The default text direction heuristic.\n     ",
    "links" : [ ]
  }, {
    "name" : "LRE",
    "type" : "char",
    "comment" : "\n     * Unicode \"Left-To-Right Embedding\" (LRE) character.\n     ",
    "links" : [ ]
  }, {
    "name" : "RLE",
    "type" : "char",
    "comment" : "\n     * Unicode \"Right-To-Left Embedding\" (RLE) character.\n     ",
    "links" : [ ]
  }, {
    "name" : "PDF",
    "type" : "char",
    "comment" : "\n     * Unicode \"Pop Directional Formatting\" (PDF) character.\n     ",
    "links" : [ ]
  }, {
    "name" : "LRM",
    "type" : "char",
    "comment" : "\n     *  Unicode \"Left-To-Right Mark\" (LRM) character.\n     ",
    "links" : [ ]
  }, {
    "name" : "RLM",
    "type" : "char",
    "comment" : "\n     * Unicode \"Right-To-Left Mark\" (RLM) character.\n     ",
    "links" : [ ]
  }, {
    "name" : "LRM_STRING",
    "type" : "String",
    "comment" : "\n     * String representation of LRM\n     ",
    "links" : [ ]
  }, {
    "name" : "RLM_STRING",
    "type" : "String",
    "comment" : "\n     * String representation of RLM\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STRING",
    "type" : "String",
    "comment" : "\n     * Empty string constant.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_STEREO_RESET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LTR_INSTANCE",
    "type" : "BidiFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_RTL_INSTANCE",
    "type" : "BidiFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRtlContext",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultTextDirectionHeuristic",
    "type" : "TextDirectionHeuristic",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIR_LTR",
    "type" : "int",
    "comment" : "\n     * Enum for directionality type.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIR_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIR_RTL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BidiFormatter getInstance()",
    "returnType" : "BidiFormatter",
    "comment" : "\n     * Factory for creating an instance of BidiFormatter for the default locale directionality.\n     *\n     * This does not create any new objects, and returns already existing static instances.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BidiFormatter getInstance(boolean rtlContext)",
    "returnType" : "BidiFormatter",
    "comment" : "\n     * Factory for creating an instance of BidiFormatter given the context directionality.\n     *\n     * This does not create any new objects, and returns already existing static instances.\n     *\n     * @param rtlContext Whether the context directionality is RTL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BidiFormatter getInstance(Locale locale)",
    "returnType" : "BidiFormatter",
    "comment" : "\n     * Factory for creating an instance of BidiFormatter given the context locale.\n     *\n     * This does not create any new objects, and returns already existing static instances.\n     *\n     * @param locale The context locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRtlContext()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the context directionality is RTL\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getStereoReset()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether directionality \"reset\" should also be done before a string being\n     * bidi-wrapped, not just after it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String markAfter(CharSequence str, TextDirectionHeuristic heuristic)",
    "returnType" : "String",
    "comment" : "\n     * Returns a Unicode bidi mark matching the context directionality (LRM or RLM) if either the\n     * overall or the exit directionality of a given string is opposite to the context directionality.\n     * Putting this after the string (including its directionality declaration wrapping) prevents it\n     * from \"sticking\" to other opposite-directionality text or a number appearing after it inline\n     * with only neutral content in between. Otherwise returns the empty string. While the exit\n     * directionality is determined by scanning the end of the string, the overall directionality is\n     * given explicitly by a heuristic to estimate the {@code str}'s directionality.\n     *\n     * @param str CharSequence after which the mark may need to appear.\n     * @param heuristic The text direction heuristic that will be used to estimate the {@code str}'s\n     *                  directionality.\n     * @return LRM for RTL text in LTR context; RLM for LTR text in RTL context;\n     *     else, the empty string.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String markBefore(CharSequence str, TextDirectionHeuristic heuristic)",
    "returnType" : "String",
    "comment" : "\n     * Returns a Unicode bidi mark matching the context directionality (LRM or RLM) if either the\n     * overall or the entry directionality of a given string is opposite to the context\n     * directionality. Putting this before the string (including its directionality declaration\n     * wrapping) prevents it from \"sticking\" to other opposite-directionality text appearing before\n     * it inline with only neutral content in between. Otherwise returns the empty string. While the\n     * entry directionality is determined by scanning the beginning of the string, the overall\n     * directionality is given explicitly by a heuristic to estimate the {@code str}'s directionality.\n     *\n     * @param str CharSequence before which the mark may need to appear.\n     * @param heuristic The text direction heuristic that will be used to estimate the {@code str}'s\n     *                  directionality.\n     * @return LRM for RTL text in LTR context; RLM for LTR text in RTL context;\n     *     else, the empty string.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRtl(String str)",
    "returnType" : "boolean",
    "comment" : "\n     * Estimates the directionality of a string using the default text direction heuristic.\n     *\n     * @param str String whose directionality is to be estimated.\n     * @return true if {@code str}'s estimated overall directionality is RTL. Otherwise returns\n     *          false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRtl(CharSequence str)",
    "returnType" : "boolean",
    "comment" : "\n     * Operates like {@link #isRtl(String)}, but takes a CharSequence instead of a string\n     *\n     * @param str CharSequence whose directionality is to be estimated.\n     * @return true if {@code str}'s estimated overall directionality is RTL. Otherwise returns\n     *          false.\n     ",
    "links" : [ "#isRtl(String)" ]
  }, {
    "name" : "public String unicodeWrap(@Nullable String str, TextDirectionHeuristic heuristic, boolean isolate)",
    "returnType" : "String",
    "comment" : "\n     * Formats a string of given directionality for use in plain-text output of the context\n     * directionality, so an opposite-directionality string is neither garbled nor garbles its\n     * surroundings. This makes use of Unicode bidi formatting characters.\n     * <p>\n     * The algorithm: In case the given directionality doesn't match the context directionality, wraps\n     * the string with Unicode bidi formatting characters: RLE+{@code str}+PDF for RTL text, or\n     * LRE+{@code str}+PDF for LTR text.\n     * <p>\n     * If {@code isolate}, directionally isolates the string so that it does not garble its\n     * surroundings. Currently, this is done by \"resetting\" the directionality after the string by\n     * appending a trailing Unicode bidi mark matching the context directionality (LRM or RLM) when\n     * either the overall directionality or the exit directionality of the string is opposite to\n     * that of the context. Unless the formatter was built using\n     * {@link Builder#stereoReset(boolean)} with a {@code false} argument, also prepends a Unicode\n     * bidi mark matching the context directionality when either the overall directionality or the\n     * entry directionality of the string is opposite to that of the context. Note that as opposed\n     * to the overall directionality, the entry and exit directionalities are determined from the\n     * string itself.\n     * <p>\n     * Does *not* do HTML-escaping.\n     *\n     * @param str The input string.\n     * @param heuristic The algorithm to be used to estimate the string's overall direction.\n     *        See {@link TextDirectionHeuristics} for pre-defined heuristics.\n     * @param isolate Whether to directionally isolate the string to prevent it from garbling the\n     *     content around it\n     * @return Input string after applying the above processing. {@code null} if {@code str} is\n     *     {@code null}.\n     ",
    "links" : [ "android.text.TextDirectionHeuristics", "#stereoReset(boolean)" ]
  }, {
    "name" : "public CharSequence unicodeWrap(@Nullable CharSequence str, TextDirectionHeuristic heuristic, boolean isolate)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Operates like {@link #unicodeWrap(String, TextDirectionHeuristic, boolean)}, but takes a\n     * CharSequence instead of a string\n     *\n     * @param str The input CharSequence.\n     * @param heuristic The algorithm to be used to estimate the CharSequence's overall direction.\n     *        See {@link TextDirectionHeuristics} for pre-defined heuristics.\n     * @param isolate Whether to directionally isolate the CharSequence to prevent it from garbling\n     *     the content around it\n     * @return Input CharSequence after applying the above processing. {@code null} if {@code str}\n     *     is {@code null}.\n     ",
    "links" : [ "#unicodeWrap(String", "android.text.TextDirectionHeuristics" ]
  }, {
    "name" : "public String unicodeWrap(String str, TextDirectionHeuristic heuristic)",
    "returnType" : "String",
    "comment" : "\n     * Operates like {@link #unicodeWrap(String, TextDirectionHeuristic, boolean)}, but assumes\n     * {@code isolate} is true.\n     *\n     * @param str The input string.\n     * @param heuristic The algorithm to be used to estimate the string's overall direction.\n     *        See {@link TextDirectionHeuristics} for pre-defined heuristics.\n     * @return Input string after applying the above processing.\n     ",
    "links" : [ "#unicodeWrap(String", "android.text.TextDirectionHeuristics" ]
  }, {
    "name" : "public CharSequence unicodeWrap(CharSequence str, TextDirectionHeuristic heuristic)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Operates like {@link #unicodeWrap(CharSequence, TextDirectionHeuristic, boolean)}, but\n     * assumes {@code isolate} is true.\n     *\n     * @param str The input CharSequence.\n     * @param heuristic The algorithm to be used to estimate the CharSequence's overall direction.\n     *        See {@link TextDirectionHeuristics} for pre-defined heuristics.\n     * @return Input CharSequence after applying the above processing.\n     ",
    "links" : [ "android.text.TextDirectionHeuristics", "#unicodeWrap(CharSequence" ]
  }, {
    "name" : "public String unicodeWrap(String str, boolean isolate)",
    "returnType" : "String",
    "comment" : "\n     * Operates like {@link #unicodeWrap(String, TextDirectionHeuristic, boolean)}, but uses the\n     * formatter's default direction estimation algorithm.\n     *\n     * @param str The input string.\n     * @param isolate Whether to directionally isolate the string to prevent it from garbling the\n     *     content around it\n     * @return Input string after applying the above processing.\n     ",
    "links" : [ "#unicodeWrap(String" ]
  }, {
    "name" : "public CharSequence unicodeWrap(CharSequence str, boolean isolate)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Operates like {@link #unicodeWrap(CharSequence, TextDirectionHeuristic, boolean)}, but uses\n     * the formatter's default direction estimation algorithm.\n     *\n     * @param str The input CharSequence.\n     * @param isolate Whether to directionally isolate the CharSequence to prevent it from garbling\n     *     the content around it\n     * @return Input CharSequence after applying the above processing.\n     ",
    "links" : [ "#unicodeWrap(CharSequence" ]
  }, {
    "name" : "public String unicodeWrap(String str)",
    "returnType" : "String",
    "comment" : "\n     * Operates like {@link #unicodeWrap(String, TextDirectionHeuristic, boolean)}, but uses the\n     * formatter's default direction estimation algorithm and assumes {@code isolate} is true.\n     *\n     * @param str The input string.\n     * @return Input string after applying the above processing.\n     ",
    "links" : [ "#unicodeWrap(String" ]
  }, {
    "name" : "public CharSequence unicodeWrap(CharSequence str)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Operates like {@link #unicodeWrap(CharSequence, TextDirectionHeuristic, boolean)}, but uses\n     * the formatter's default direction estimation algorithm and assumes {@code isolate} is true.\n     *\n     * @param str The input CharSequence.\n     * @return Input CharSequence after applying the above processing.\n     ",
    "links" : [ "#unicodeWrap(CharSequence" ]
  }, {
    "name" : "private static BidiFormatter getDefaultInstanceFromContext(boolean isRtlContext)",
    "returnType" : "BidiFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isRtlLocale(Locale locale)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper method to return true if the Locale directionality is RTL.\n     *\n     * @param locale The Locale whose directionality will be checked to be RTL or LTR\n     * @return true if the {@code locale} directionality is RTL. False otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getExitDir(CharSequence str)",
    "returnType" : "int",
    "comment" : "\n     * Returns the directionality of the last character with strong directionality in the string, or\n     * DIR_UNKNOWN if none was encountered. For efficiency, actually scans backwards from the end of\n     * the string. Treats a non-BN character between an LRE/RLE/LRO/RLO and its matching PDF as a\n     * strong character, LTR after LRE/LRO, and RTL after RLE/RLO. The results are undefined for a\n     * string containing unbalanced LRE/RLE/LRO/RLO/PDF characters. The intended use is to check\n     * whether a logically separate item that starts with a number or a character of the string's\n     * exit directionality and follows this string inline (not counting any neutral characters in\n     * between) would \"stick\" to it in an opposite-directionality context, thus being displayed in\n     * an incorrect position. An LRM or RLM character (the one of the context's directionality)\n     * between the two will prevent such sticking.\n     *\n     * @param str the string to check.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getEntryDir(CharSequence str)",
    "returnType" : "int",
    "comment" : "\n     * Returns the directionality of the first character with strong directionality in the string,\n     * or DIR_UNKNOWN if none was encountered. Treats a non-BN character between an\n     * LRE/RLE/LRO/RLO and its matching PDF as a strong character, LTR after LRE/LRO, and RTL after\n     * RLE/RLO. The results are undefined for a string containing unbalanced LRE/RLE/LRO/RLO/PDF\n     * characters. The intended use is to check whether a logically separate item that ends with a\n     * character of the string's entry directionality and precedes the string inline (not counting\n     * any neutral characters in between) would \"stick\" to it in an opposite-directionality context,\n     * thus being displayed in an incorrect position. An LRM or RLM character (the one of the\n     * context's directionality) between the two will prevent such sticking.\n     *\n     * @param str the string to check.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static BidiFormatter getInstance()", "public static BidiFormatter getInstance(boolean rtlContext)", "public static BidiFormatter getInstance(Locale locale)", "public boolean isRtlContext()", "public boolean getStereoReset()", "public String markAfter(CharSequence str, TextDirectionHeuristic heuristic)", "public String markBefore(CharSequence str, TextDirectionHeuristic heuristic)", "public boolean isRtl(String str)", "public boolean isRtl(CharSequence str)", "public String unicodeWrap(@Nullable String str, TextDirectionHeuristic heuristic, boolean isolate)", "public CharSequence unicodeWrap(@Nullable CharSequence str, TextDirectionHeuristic heuristic, boolean isolate)", "public String unicodeWrap(String str, TextDirectionHeuristic heuristic)", "public CharSequence unicodeWrap(CharSequence str, TextDirectionHeuristic heuristic)", "public String unicodeWrap(String str, boolean isolate)", "public CharSequence unicodeWrap(CharSequence str, boolean isolate)", "public String unicodeWrap(String str)", "public CharSequence unicodeWrap(CharSequence str)", "private static BidiFormatter getDefaultInstanceFromContext(boolean isRtlContext)", "private static boolean isRtlLocale(Locale locale)", "private static int getExitDir(CharSequence str)", "private static int getEntryDir(CharSequence str)" ],
  "variableNames" : [ "DEFAULT_TEXT_DIRECTION_HEURISTIC", "LRE", "RLE", "PDF", "LRM", "RLM", "LRM_STRING", "RLM_STRING", "EMPTY_STRING", "FLAG_STEREO_RESET", "DEFAULT_FLAGS", "DEFAULT_LTR_INSTANCE", "DEFAULT_RTL_INSTANCE", "mIsRtlContext", "mFlags", "mDefaultTextDirectionHeuristic", "DIR_LTR", "DIR_UNKNOWN", "DIR_RTL" ]
}