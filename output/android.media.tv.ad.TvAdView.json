{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/ad/TvAdView.java",
  "packageName" : "android.media.tv.ad",
  "className" : "TvAdView",
  "comment" : "\n * Displays contents of TV advertisement services.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_METHOD_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the method where the error happened, if applicable. For example, if there is an\n     * error during signing, the request name is \"onRequestSigning\".\n     * @see #notifyError(String, Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_ERROR_CODE",
    "type" : "String",
    "comment" : "\n     * The error code of an error.\n     *\n     * <p>It can be {@link TvAdManager#ERROR_WEAK_SIGNAL},\n     * {@link TvAdManager#ERROR_RESOURCE_UNAVAILABLE}, etc.\n     *\n     * @see #notifyError(String, Bundle)\n     ",
    "links" : [ "android.media.tv.ad.TvAdManager#ERROR_RESOURCE_UNAVAILABLE", "android.media.tv.ad.TvAdManager#ERROR_WEAK_SIGNAL" ]
  }, {
    "name" : "mTvAdManager",
    "type" : "TvAdManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "TvAdManager.Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "MySessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "TvAdCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttrs",
    "type" : "AttributeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefStyleAttr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParser",
    "type" : "XmlResourceParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceView",
    "type" : "SurfaceView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseRequestedSurfaceLayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewLeft",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewRight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewCreated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnUnhandledInputEventListener",
    "type" : "OnUnhandledInputEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHolderCallback",
    "type" : "SurfaceHolder.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedInputEventCallback",
    "type" : "FinishedInputEventCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean setTvView(@Nullable TvView tvView)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the TvAdView to receive events from TvInputService. This method links the session of\n     * TvAdManager to TvInputManager session, so the TvAdService can get the TvInputService events.\n     *\n     * @param tvView the TvView to be linked to this TvAdView via linking of Sessions. {@code null}\n     *               to unlink the TvView.\n     * @return {@code true} if it's linked successfully; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean unsetTvView()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onVisibilityChanged(@NonNull View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetSurfaceView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this TvAdView to release its resources.\n     *\n     * <p>It can be reused by call {@link #prepareAdService(String, String)}.\n     ",
    "links" : [ "#prepareAdService(String" ]
  }, {
    "name" : "private void resetInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createSessionMediaView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeSessionMediaView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void relayoutSessionMediaView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect getViewFrameOnScreen()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSessionSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchUnhandledInputEvent(@NonNull InputEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatches an unhandled input event to the next receiver.\n     *\n     * It gives the host application a chance to dispatch the unhandled input events.\n     *\n     * @param event The input event.\n     * @return {@code true} if the event was handled by the view, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onUnhandledInputEvent(@NonNull InputEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when an unhandled input event also has not been handled by the user provided\n     * callback. This is the last chance to handle the unhandled input event in the\n     * TvAdView.\n     *\n     * @param event The input event.\n     * @return If you handled the event, return {@code true}. If you want to allow the event to be\n     *         handled by the next receiver, return {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnUnhandledInputEventListener(@NonNull OnUnhandledInputEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to be invoked when an input event is not handled by the TV AD service.\n     *\n     * @param listener The callback to be invoked when the unhandled input event is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnUnhandledInputEventListener getOnUnhandledInputEventListener()",
    "returnType" : "OnUnhandledInputEventListener",
    "comment" : "\n     * Gets the {@link OnUnhandledInputEventListener}.\n     * <p>Returns {@code null} if the listener is not set or is cleared.\n     *\n     * @see #setOnUnhandledInputEventListener(Executor, OnUnhandledInputEventListener)\n     * @see #clearOnUnhandledInputEventListener()\n     ",
    "links" : [ "OnUnhandledInputEventListener" ]
  }, {
    "name" : "public void clearOnUnhandledInputEventListener()",
    "returnType" : "void",
    "comment" : "\n     * Clears the {@link OnUnhandledInputEventListener}.\n     ",
    "links" : [ "OnUnhandledInputEventListener" ]
  }, {
    "name" : "public boolean dispatchKeyEvent(@Nullable KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepareAdService(@NonNull String serviceId, @NonNull String type)",
    "returnType" : "void",
    "comment" : "\n     * Prepares the AD service of corresponding {@link TvAdService}.\n     *\n     * <p>This should be called before calling {@link #startAdService()}. Otherwise,\n     * {@link #startAdService()} is a no-op.\n     *\n     * @param serviceId the AD service ID, which can be found in TvAdServiceInfo#getId().\n     ",
    "links" : [ "#startAdService()", "android.media.tv.ad.TvAdService" ]
  }, {
    "name" : "public void startAdService()",
    "returnType" : "void",
    "comment" : "\n     * Starts the AD service.\n     *\n     * <p>This should be called after calling {@link #prepareAdService(String, String)}. Otherwise,\n     * it's a no-op.\n     ",
    "links" : [ "#prepareAdService(String" ]
  }, {
    "name" : "public void stopAdService()",
    "returnType" : "void",
    "comment" : "\n     * Stops the AD service.\n     *\n     * <p>It's a no-op if the service is not started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetAdService()",
    "returnType" : "void",
    "comment" : "\n     * Resets the AD service.\n     *\n     * <p>This releases the resources of the corresponding {@link TvAdService.Session}.\n     ",
    "links" : [ "TvAdService.Session" ]
  }, {
    "name" : "public void sendCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Sends current video bounds to related TV AD service.\n     *\n     * @param bounds the rectangle area for rendering the current video.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n     * Sends current channel URI to related TV AD service.\n     *\n     * @param channelUri The current channel URI; {@code null} if there is no currently tuned\n     *                   channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendTrackInfoList(@Nullable List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n     * Sends track info list to related TV AD service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "\n     * Sends current TV input ID to related TV AD service.\n     *\n     * @param inputId The current TV input ID whose channel is tuned. {@code null} if no channel is\n     *                tuned.\n     * @see android.media.tv.TvInputInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)",
    "returnType" : "void",
    "comment" : "\n     * Sends signing result to related TV AD service.\n     *\n     * <p>This is used when the corresponding server of the ADs requires signing during handshaking,\n     * and the AD service doesn't have the built-in private key. The private key is provided by the\n     * content providers and pre-built in the related app, such as TV app.\n     *\n     * @param signingId the ID to identify the request. It's the same as the corresponding ID in\n     *        {@link TvAdService.Session#requestSigning(String, String, String, byte[])}\n     * @param result the signed result.\n     ",
    "links" : [ "TvAdService.Session#requestSigning(String" ]
  }, {
    "name" : "public void notifyError(@NonNull String errMsg, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the corresponding {@link TvAdService} when there is an error.\n     *\n     * @param errMsg the message of the error.\n     * @param params additional parameters of the error. For example, the signingId of {@link\n     *     TvAdView.TvAdCallback#onRequestSigning(String, String, String, String, byte[])} can be\n     *     included to identify the related signing request, and the method name \"onRequestSigning\"\n     *     can also be added to the params.\n     *\n     * @see #ERROR_KEY_METHOD_NAME\n     * @see #ERROR_KEY_ERROR_CODE\n     ",
    "links" : [ "android.media.tv.ad.TvAdService", "TvAdView.TvAdCallback#onRequestSigning(String" ]
  }, {
    "name" : "public void notifyTvMessage(@NonNull @TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * This is called to notify the corresponding TV AD service when a new TV message is received.\n     *\n     * @param type The type of message received, such as\n     * {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n     * @param data The raw data of the message. The bundle keys are:\n     *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n     *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n     *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n     *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n     *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n     *             how to parse this data.\n     ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : "public void setCallback(@NonNull @CallbackExecutor Executor executor, @NonNull TvAdCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when an event is dispatched to this TvAdView.\n     *\n     * @param callback the callback to receive events. MUST NOT be {@code null}.\n     *\n     * @see #clearCallback()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearCallback()",
    "returnType" : "void",
    "comment" : "\n     * Clears the callback.\n     *\n     * @see #setCallback(Executor, TvAdCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TvAdManager.Session getAdSession()",
    "returnType" : "TvAdManager.Session",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean setTvView(@Nullable TvView tvView)", "private boolean unsetTvView()", "public void onAttachedToWindow()", "public void onDetachedFromWindow()", "public void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public void onVisibilityChanged(@NonNull View changedView, int visibility)", "private void resetSurfaceView()", "public void reset()", "private void resetInternal()", "private void createSessionMediaView()", "private void removeSessionMediaView()", "private void relayoutSessionMediaView()", "private Rect getViewFrameOnScreen()", "private void setSessionSurface(Surface surface)", "private void dispatchSurfaceChanged(int format, int width, int height)", "public boolean dispatchUnhandledInputEvent(@NonNull InputEvent event)", "public boolean onUnhandledInputEvent(@NonNull InputEvent event)", "public void setOnUnhandledInputEventListener(@NonNull OnUnhandledInputEventListener listener)", "public OnUnhandledInputEventListener getOnUnhandledInputEventListener()", "public void clearOnUnhandledInputEventListener()", "public boolean dispatchKeyEvent(@Nullable KeyEvent event)", "public void prepareAdService(@NonNull String serviceId, @NonNull String type)", "public void startAdService()", "public void stopAdService()", "public void resetAdService()", "public void sendCurrentVideoBounds(@NonNull Rect bounds)", "public void sendCurrentChannelUri(@Nullable Uri channelUri)", "public void sendTrackInfoList(@Nullable List<TvTrackInfo> tracks)", "public void sendCurrentTvInputId(@Nullable String inputId)", "public void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)", "public void notifyError(@NonNull String errMsg, @NonNull Bundle params)", "public void notifyTvMessage(@NonNull @TvInputManager.TvMessageType int type, @NonNull Bundle data)", "public void setCallback(@NonNull @CallbackExecutor Executor executor, @NonNull TvAdCallback callback)", "public void clearCallback()", "public TvAdManager.Session getAdSession()" ],
  "variableNames" : [ "TAG", "DEBUG", "ERROR_KEY_METHOD_NAME", "ERROR_KEY_ERROR_CODE", "mTvAdManager", "mHandler", "mCallbackLock", "mSession", "mSessionCallback", "mCallback", "mCallbackExecutor", "mAttrs", "mDefStyleAttr", "mParser", "mSurfaceView", "mSurface", "mSurfaceChanged", "mSurfaceFormat", "mSurfaceWidth", "mSurfaceHeight", "mUseRequestedSurfaceLayout", "mSurfaceViewLeft", "mSurfaceViewRight", "mSurfaceViewTop", "mSurfaceViewBottom", "mMediaViewCreated", "mMediaViewFrame", "mOnUnhandledInputEventListener", "mSurfaceHolderCallback", "mFinishedInputEventCallback" ]
}