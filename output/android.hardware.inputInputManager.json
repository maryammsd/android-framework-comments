{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/input/InputManager.java",
  "packageName" : "android.hardware.input",
  "className" : "InputManager",
  "comment" : "\n * Provides information about input devices and available key layouts.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DEVICE_ADDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DEVICE_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DEVICE_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "InputManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIm",
    "type" : "IInputManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputDevicesLock",
    "type" : "Object",
    "comment" : " Guarded by mInputDevicesLock",
    "links" : [ ]
  }, {
    "name" : "mInputDevices",
    "type" : "SparseArray<InputDevice>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputDevicesChangedListener",
    "type" : "InputDevicesChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputDeviceListeners",
    "type" : "ArrayList<InputDeviceListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabletModeLock",
    "type" : "Object",
    "comment" : " Guarded by mTabletModeLock",
    "links" : [ ]
  }, {
    "name" : "mTabletModeChangedListener",
    "type" : "TabletModeChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTabletModeChangedListeners",
    "type" : "List<OnTabletModeChangedListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_QUERY_KEYBOARD_LAYOUTS",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Query available keyboard layouts.\n     * <p>\n     * The input manager service locates available keyboard layouts\n     * by querying broadcast receivers that are registered for this action.\n     * An application can offer additional keyboard layouts to the user\n     * by declaring a suitable broadcast receiver in its manifest.\n     * </p><p>\n     * Here is an example broadcast receiver declaration that an application\n     * might include in its AndroidManifest.xml to advertise keyboard layouts.\n     * The meta-data specifies a resource that contains a description of each keyboard\n     * layout that is provided by the application.\n     * <pre><code>\n     * &lt;receiver android:name=\".InputDeviceReceiver\"\n     *         android:label=\"@string/keyboard_layouts_label\">\n     *     &lt;intent-filter>\n     *         &lt;action android:name=\"android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS\" />\n     *     &lt;/intent-filter>\n     *     &lt;meta-data android:name=\"android.hardware.input.metadata.KEYBOARD_LAYOUTS\"\n     *             android:resource=\"@xml/keyboard_layouts\" />\n     * &lt;/receiver>\n     * </code></pre>\n     * </p><p>\n     * In the above example, the <code>@xml/keyboard_layouts</code> resource refers to\n     * an XML resource whose root element is <code>&lt;keyboard-layouts></code> that\n     * contains zero or more <code>&lt;keyboard-layout></code> elements.\n     * Each <code>&lt;keyboard-layout></code> element specifies the name, label, and location\n     * of a key character map for a particular keyboard layout.  The label on the receiver\n     * is used to name the collection of keyboard layouts provided by this receiver in the\n     * keyboard layout settings.\n     * <pre><code>\n     * &lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n     * &lt;keyboard-layouts xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     *     &lt;keyboard-layout android:name=\"keyboard_layout_english_us\"\n     *             android:label=\"@string/keyboard_layout_english_us_label\"\n     *             android:keyboardLayout=\"@raw/keyboard_layout_english_us\" />\n     * &lt;/keyboard-layouts>\n     * </pre></code>\n     * </p><p>\n     * The <code>android:name</code> attribute specifies an identifier by which\n     * the keyboard layout will be known in the package.\n     * The <code>android:label</code> attribute specifies a human-readable descriptive\n     * label to describe the keyboard layout in the user interface, such as \"English (US)\".\n     * The <code>android:keyboardLayout</code> attribute refers to a\n     * <a href=\"http://source.android.com/tech/input/key-character-map-files.html\">\n     * key character map</a> resource that defines the keyboard layout.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "META_DATA_KEYBOARD_LAYOUTS",
    "type" : "String",
    "comment" : "\n     * Metadata Key: Keyboard layout metadata associated with\n     * {@link #ACTION_QUERY_KEYBOARD_LAYOUTS}.\n     * <p>\n     * Specifies the resource id of a XML resource that describes the keyboard\n     * layouts that are provided by the application.\n     * </p>\n     ",
    "links" : [ "#ACTION_QUERY_KEYBOARD_LAYOUTS" ]
  }, {
    "name" : "MIN_POINTER_SPEED",
    "type" : "int",
    "comment" : "\n     * Pointer Speed: The minimum (slowest) pointer speed (-7).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_POINTER_SPEED",
    "type" : "int",
    "comment" : "\n     * Pointer Speed: The maximum (fastest) pointer speed (7).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_POINTER_SPEED",
    "type" : "int",
    "comment" : "\n     * Pointer Speed: The default pointer speed (0).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INJECT_INPUT_EVENT_MODE_ASYNC",
    "type" : "int",
    "comment" : " see InputDispatcher.h",
    "links" : [ ]
  }, {
    "name" : "INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT",
    "type" : "int",
    "comment" : " see InputDispatcher.h",
    "links" : [ ]
  }, {
    "name" : "INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH",
    "type" : "int",
    "comment" : "\n     * Input Event Injection Synchronization Mode: Wait for finish.\n     * Waits for the event to be delivered to the application and handled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SWITCH_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Switch State: Unknown.\n     *\n     * The system has yet to report a valid value for the switch.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SWITCH_STATE_OFF",
    "type" : "int",
    "comment" : "\n     * Switch State: Off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SWITCH_STATE_ON",
    "type" : "int",
    "comment" : "\n     * Switch State: On.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static InputManager getInstance()",
    "returnType" : "InputManager",
    "comment" : "\n     * Gets an instance of the input manager.\n     *\n     * @return The input manager instance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputDevice getInputDevice(int id)",
    "returnType" : "InputDevice",
    "comment" : "\n     * Gets information about the input device with the specified id.\n     * @param id The device id.\n     * @return The input device or null if not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputDevice getInputDeviceByDescriptor(String descriptor)",
    "returnType" : "InputDevice",
    "comment" : "\n     * Gets information about the input device with the specified descriptor.\n     * @param descriptor The input device descriptor.\n     * @return The input device or null if not found.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getInputDeviceIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets the ids of all input devices in the system.\n     * @return The input device ids.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInputDeviceEnabled(int id)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if an input device is enabled. Should return true for most\n     * situations. Some system apps may disable an input device, for\n     * example to prevent unwanted touch events.\n     *\n     * @param id The input device Id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableInputDevice(int id)",
    "returnType" : "void",
    "comment" : "\n     * Enables an InputDevice.\n     * <p>\n     * Requires {@link android.Manifest.permissions.DISABLE_INPUT_DEVICE}.\n     * </p>\n     *\n     * @param id The input device Id.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permissions.DISABLE_INPUT_DEVICE" ]
  }, {
    "name" : "public void disableInputDevice(int id)",
    "returnType" : "void",
    "comment" : "\n     * Disables an InputDevice.\n     * <p>\n     * Requires {@link android.Manifest.permissions.DISABLE_INPUT_DEVICE}.\n     * </p>\n     *\n     * @param id The input device Id.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permissions.DISABLE_INPUT_DEVICE" ]
  }, {
    "name" : "public void registerInputDeviceListener(InputDeviceListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers an input device listener to receive notifications about when\n     * input devices are added, removed or changed.\n     *\n     * @param listener The listener to register.\n     * @param handler The handler on which the listener should be invoked, or null\n     * if the listener should be invoked on the calling thread's looper.\n     *\n     * @see #unregisterInputDeviceListener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterInputDeviceListener(InputDeviceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters an input device listener.\n     *\n     * @param listener The listener to unregister.\n     *\n     * @see #registerInputDeviceListener\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findInputDeviceListenerLocked(InputDeviceListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int isInTabletMode()",
    "returnType" : "int",
    "comment" : "\n     * Queries whether the device is in tablet mode.\n     *\n     * @return The tablet switch state which is one of {@link #SWITCH_STATE_UNKNOWN},\n     * {@link #SWITCH_STATE_OFF} or {@link #SWITCH_STATE_ON}.\n     * @hide\n     ",
    "links" : [ "#SWITCH_STATE_UNKNOWN", "#SWITCH_STATE_OFF", "#SWITCH_STATE_ON" ]
  }, {
    "name" : "public void registerOnTabletModeChangedListener(OnTabletModeChangedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register a tablet mode changed listener.\n     *\n     * @param listener The listener to register.\n     * @param handler The handler on which the listener should be invoked, or null\n     * if the listener should be invoked on the calling thread's looper.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnTabletModeChangedListener(OnTabletModeChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a tablet mode changed listener.\n     *\n     * @param listener The listener to unregister.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeTabletModeListenerLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findOnTabletModeChangedListenerLocked(OnTabletModeChangedListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int isMicMuted()",
    "returnType" : "int",
    "comment" : "\n     * Queries whether the device's microphone is muted\n     *\n     * @return The mic mute switch state which is one of {@link #SWITCH_STATE_UNKNOWN},\n     * {@link #SWITCH_STATE_OFF} or {@link #SWITCH_STATE_ON}.\n     * @hide\n     ",
    "links" : [ "#SWITCH_STATE_UNKNOWN", "#SWITCH_STATE_OFF", "#SWITCH_STATE_ON" ]
  }, {
    "name" : "public KeyboardLayout[] getKeyboardLayouts()",
    "returnType" : "KeyboardLayout[]",
    "comment" : "\n     * Gets information about all supported keyboard layouts.\n     * <p>\n     * The input manager consults the built-in keyboard layouts as well\n     * as all keyboard layouts advertised by applications using a\n     * {@link #ACTION_QUERY_KEYBOARD_LAYOUTS} broadcast receiver.\n     * </p>\n     *\n     * @return A list of all supported keyboard layouts.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_QUERY_KEYBOARD_LAYOUTS" ]
  }, {
    "name" : "public KeyboardLayout[] getKeyboardLayoutsForInputDevice(InputDeviceIdentifier identifier)",
    "returnType" : "KeyboardLayout[]",
    "comment" : "\n     * Gets information about all supported keyboard layouts appropriate\n     * for a specific input device.\n     * <p>\n     * The input manager consults the built-in keyboard layouts as well\n     * as all keyboard layouts advertised by applications using a\n     * {@link #ACTION_QUERY_KEYBOARD_LAYOUTS} broadcast receiver.\n     * </p>\n     *\n     * @return A list of all supported keyboard layouts for a specific\n     * input device.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_QUERY_KEYBOARD_LAYOUTS" ]
  }, {
    "name" : "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)",
    "returnType" : "KeyboardLayout",
    "comment" : "\n     * Gets the keyboard layout with the specified descriptor.\n     *\n     * @param keyboardLayoutDescriptor The keyboard layout descriptor, as returned by\n     * {@link KeyboardLayout#getDescriptor()}.\n     * @return The keyboard layout, or null if it could not be loaded.\n     *\n     * @hide\n     ",
    "links" : [ "KeyboardLayout#getDescriptor" ]
  }, {
    "name" : "public String getCurrentKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier)",
    "returnType" : "String",
    "comment" : "\n     * Gets the current keyboard layout descriptor for the specified input\n     * device.\n     *\n     * @param identifier Identifier for the input device\n     * @return The keyboard layout descriptor, or null if no keyboard layout has\n     *         been set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier, String keyboardLayoutDescriptor)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current keyboard layout descriptor for the specified input\n     * device.\n     * <p>\n     * This method may have the side-effect of causing the input device in\n     * question to be reconfigured.\n     * </p>\n     *\n     * @param identifier The identifier for the input device.\n     * @param keyboardLayoutDescriptor The keyboard layout descriptor to use,\n     *            must not be null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getEnabledKeyboardLayoutsForInputDevice(InputDeviceIdentifier identifier)",
    "returnType" : "String[]",
    "comment" : "\n     * Gets all keyboard layout descriptors that are enabled for the specified\n     * input device.\n     *\n     * @param identifier The identifier for the input device.\n     * @return The keyboard layout descriptors.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier, String keyboardLayoutDescriptor)",
    "returnType" : "void",
    "comment" : "\n     * Adds the keyboard layout descriptor for the specified input device.\n     * <p>\n     * This method may have the side-effect of causing the input device in\n     * question to be reconfigured.\n     * </p>\n     *\n     * @param identifier The identifier for the input device.\n     * @param keyboardLayoutDescriptor The descriptor of the keyboard layout to\n     *            add.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier, String keyboardLayoutDescriptor)",
    "returnType" : "void",
    "comment" : "\n     * Removes the keyboard layout descriptor for the specified input device.\n     * <p>\n     * This method may have the side-effect of causing the input device in\n     * question to be reconfigured.\n     * </p>\n     *\n     * @param identifier The identifier for the input device.\n     * @param keyboardLayoutDescriptor The descriptor of the keyboard layout to\n     *            remove.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public TouchCalibration getTouchCalibration(String inputDeviceDescriptor, int surfaceRotation)",
    "returnType" : "TouchCalibration",
    "comment" : "\n     * Gets the TouchCalibration applied to the specified input device's coordinates.\n     *\n     * @param inputDeviceDescriptor The input device descriptor.\n     * @return The TouchCalibration currently assigned for use with the given\n     * input device. If none is set, an identity TouchCalibration is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTouchCalibration(String inputDeviceDescriptor, int surfaceRotation, TouchCalibration calibration)",
    "returnType" : "void",
    "comment" : "\n     * Sets the TouchCalibration to apply to the specified input device's coordinates.\n     * <p>\n     * This method may have the side-effect of causing the input device in question\n     * to be reconfigured. Requires {@link android.Manifest.permissions.SET_INPUT_CALIBRATION}.\n     * </p>\n     *\n     * @param inputDeviceDescriptor The input device descriptor.\n     * @param calibration The calibration to be applied\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permissions.SET_INPUT_CALIBRATION" ]
  }, {
    "name" : "public int getPointerSpeed(Context context)",
    "returnType" : "int",
    "comment" : "\n     * Gets the mouse pointer speed.\n     * <p>\n     * Only returns the permanent mouse pointer speed.  Ignores any temporary pointer\n     * speed set by {@link #tryPointerSpeed}.\n     * </p>\n     *\n     * @param context The application context.\n     * @return The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "#tryPointerSpeed", "#MIN_POINTER_SPEED", "#MAX_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public void setPointerSpeed(Context context, int speed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the mouse pointer speed.\n     * <p>\n     * Requires {@link android.Manifest.permissions.WRITE_SETTINGS}.\n     * </p>\n     *\n     * @param context The application context.\n     * @param speed The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permissions.WRITE_SETTINGS", "#MIN_POINTER_SPEED", "#MAX_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public void tryPointerSpeed(int speed)",
    "returnType" : "void",
    "comment" : "\n     * Changes the mouse pointer speed temporarily, but does not save the setting.\n     * <p>\n     * Requires {@link android.Manifest.permission.SET_POINTER_SPEED}.\n     * </p>\n     *\n     * @param speed The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.SET_POINTER_SPEED", "#MIN_POINTER_SPEED", "#MAX_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public boolean[] deviceHasKeys(int[] keyCodes)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Queries the framework about whether any physical keys exist on the\n     * any keyboard attached to the device that are capable of producing the given\n     * array of key codes.\n     *\n     * @param keyCodes The array of key codes to query.\n     * @return A new array of the same size as the key codes array whose elements\n     * are set to true if at least one attached keyboard supports the corresponding key code\n     * at the same index in the key codes array.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] deviceHasKeys(int id, int[] keyCodes)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Queries the framework about whether any physical keys exist on the\n     * any keyboard attached to the device that are capable of producing the given\n     * array of key codes.\n     *\n     * @param id The id of the device to query.\n     * @param keyCodes The array of key codes to query.\n     * @return A new array of the same size as the key codes array whose elements are set to true\n     * if the given device could produce the corresponding key code at the same index in the key\n     * codes array.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean injectInputEvent(InputEvent event, int mode)",
    "returnType" : "boolean",
    "comment" : "\n     * Injects an input event into the event system on behalf of an application.\n     * The synchronization mode determines whether the method blocks while waiting for\n     * input injection to proceed.\n     * <p>\n     * Requires {@link android.Manifest.permission.INJECT_EVENTS} to inject into\n     * windows that are owned by other applications.\n     * </p><p>\n     * Make sure you correctly set the event time and input source of the event\n     * before calling this method.\n     * </p>\n     *\n     * @param event The event to inject.\n     * @param mode The synchronization mode.  One of:\n     * {@link #INJECT_INPUT_EVENT_MODE_ASYNC},\n     * {@link #INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT}, or\n     * {@link #INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH}.\n     * @return True if input event injection succeeded.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.INJECT_EVENTS", "#INJECT_INPUT_EVENT_MODE_ASYNC", "#INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT", "#INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH" ]
  }, {
    "name" : "public VerifiedInputEvent verifyInputEvent(@NonNull InputEvent event)",
    "returnType" : "VerifiedInputEvent",
    "comment" : "\n     * Verify the details of an {@link android.view.InputEvent} that came from the system.\n     * If the event did not come from the system, or its details could not be verified, then this\n     * will return {@code null}. Receiving {@code null} does not mean that the event did not\n     * originate from the system, just that we were unable to verify it. This can\n     * happen for a number of reasons during normal operation.\n     *\n     * @param event The {@link android.view.InputEvent} to check\n     *\n     * @return {@link android.view.VerifiedInputEvent}, which is a subset of the provided\n     * {@link android.view.InputEvent}\n     *         {@code null} if the event could not be verified.\n     ",
    "links" : [ "android.view.InputEvent", "android.view.InputEvent", "android.view.VerifiedInputEvent", "android.view.InputEvent" ]
  }, {
    "name" : "public void setPointerIconType(int iconId)",
    "returnType" : "void",
    "comment" : "\n     * Changes the mouse pointer's icon shape into the specified id.\n     *\n     * @param iconId The id of the pointer graphic, as a value between\n     * {@link PointerIcon.TYPE_ARROW} and {@link PointerIcon.TYPE_GRABBING}.\n     *\n     * @hide\n     ",
    "links" : [ "PointerIcon.TYPE_ARROW", "PointerIcon.TYPE_GRABBING" ]
  }, {
    "name" : "public void setCustomPointerIcon(PointerIcon icon)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void requestPointerCapture(IBinder windowToken, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Request or release pointer capture.\n     * <p>\n     * When in capturing mode, the pointer icon disappears and all mouse events are dispatched to\n     * the window which has requested the capture. Relative position changes are available through\n     * {@link MotionEvent#getX} and {@link MotionEvent#getY}.\n     *\n     * @param enable true when requesting pointer capture, false when releasing.\n     *\n     * @hide\n     ",
    "links" : [ "MotionEvent#getX", "MotionEvent#getY" ]
  }, {
    "name" : "public InputMonitor monitorGestureInput(String name, int displayId)",
    "returnType" : "InputMonitor",
    "comment" : "\n     * Monitor input on the specified display for gestures.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPortAssociation(@NonNull String inputPort, int displayPort)",
    "returnType" : "void",
    "comment" : "\n     * Add a runtime association between the input port and the display port. This overrides any\n     * static associations.\n     * @param inputPort The port of the input device.\n     * @param displayPort The physical port of the associated display.\n     * <p>\n     * Requires {@link android.Manifest.permissions.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT}.\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.Manifest.permissions.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT" ]
  }, {
    "name" : "public void removePortAssociation(@NonNull String inputPort)",
    "returnType" : "void",
    "comment" : "\n     * Remove the runtime association between the input port and the display port. Any existing\n     * static association for the cleared input port will be restored.\n     * @param inputPort The port of the input device to be cleared.\n     * <p>\n     * Requires {@link android.Manifest.permissions.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT}.\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.Manifest.permissions.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT" ]
  }, {
    "name" : "private void populateInputDevicesLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onInputDevicesChanged(int[] deviceIdAndGeneration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessageToInputDeviceListenersLocked(int what, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsDeviceId(int[] deviceIdAndGeneration, int deviceId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onTabletModeChanged(long whenNanos, boolean inTabletMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Vibrator getInputDeviceVibrator(int deviceId)",
    "returnType" : "Vibrator",
    "comment" : "\n     * Gets a vibrator service associated with an input device, assuming it has one.\n     * @return The vibrator, never null.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "MSG_DEVICE_ADDED", "MSG_DEVICE_REMOVED", "MSG_DEVICE_CHANGED", "sInstance", "mIm", "mInputDevicesLock", "mInputDevices", "mInputDevicesChangedListener", "mInputDeviceListeners", "mTabletModeLock", "mTabletModeChangedListener", "mOnTabletModeChangedListeners", "ACTION_QUERY_KEYBOARD_LAYOUTS", "META_DATA_KEYBOARD_LAYOUTS", "MIN_POINTER_SPEED", "MAX_POINTER_SPEED", "DEFAULT_POINTER_SPEED", "INJECT_INPUT_EVENT_MODE_ASYNC", "INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT", "INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH", "SWITCH_STATE_UNKNOWN", "SWITCH_STATE_OFF", "SWITCH_STATE_ON" ],
  "methodNames" : [ "public static InputManager getInstance()", "public InputDevice getInputDevice(int id)", "public InputDevice getInputDeviceByDescriptor(String descriptor)", "public int[] getInputDeviceIds()", "public boolean isInputDeviceEnabled(int id)", "public void enableInputDevice(int id)", "public void disableInputDevice(int id)", "public void registerInputDeviceListener(InputDeviceListener listener, Handler handler)", "public void unregisterInputDeviceListener(InputDeviceListener listener)", "private int findInputDeviceListenerLocked(InputDeviceListener listener)", "public int isInTabletMode()", "public void registerOnTabletModeChangedListener(OnTabletModeChangedListener listener, Handler handler)", "public void unregisterOnTabletModeChangedListener(OnTabletModeChangedListener listener)", "private void initializeTabletModeListenerLocked()", "private int findOnTabletModeChangedListenerLocked(OnTabletModeChangedListener listener)", "public int isMicMuted()", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout[] getKeyboardLayoutsForInputDevice(InputDeviceIdentifier identifier)", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "public String getCurrentKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier)", "public void setCurrentKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier, String keyboardLayoutDescriptor)", "public String[] getEnabledKeyboardLayoutsForInputDevice(InputDeviceIdentifier identifier)", "public void addKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier, String keyboardLayoutDescriptor)", "public void removeKeyboardLayoutForInputDevice(InputDeviceIdentifier identifier, String keyboardLayoutDescriptor)", "public TouchCalibration getTouchCalibration(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibration(String inputDeviceDescriptor, int surfaceRotation, TouchCalibration calibration)", "public int getPointerSpeed(Context context)", "public void setPointerSpeed(Context context, int speed)", "public void tryPointerSpeed(int speed)", "public boolean[] deviceHasKeys(int[] keyCodes)", "public boolean[] deviceHasKeys(int id, int[] keyCodes)", "public boolean injectInputEvent(InputEvent event, int mode)", "public VerifiedInputEvent verifyInputEvent(@NonNull InputEvent event)", "public void setPointerIconType(int iconId)", "public void setCustomPointerIcon(PointerIcon icon)", "public void requestPointerCapture(IBinder windowToken, boolean enable)", "public InputMonitor monitorGestureInput(String name, int displayId)", "public void addPortAssociation(@NonNull String inputPort, int displayPort)", "public void removePortAssociation(@NonNull String inputPort)", "private void populateInputDevicesLocked()", "private void onInputDevicesChanged(int[] deviceIdAndGeneration)", "private void sendMessageToInputDeviceListenersLocked(int what, int deviceId)", "private static boolean containsDeviceId(int[] deviceIdAndGeneration, int deviceId)", "private void onTabletModeChanged(long whenNanos, boolean inTabletMode)", "public Vibrator getInputDeviceVibrator(int deviceId)" ]
}