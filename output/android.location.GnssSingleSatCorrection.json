{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/GnssSingleSatCorrection.java",
  "packageName" : "android.location",
  "className" : "GnssSingleSatCorrection",
  "comment" : "\n * A container with measurement corrections for a single visible satellite\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "HAS_PROB_SAT_IS_LOS_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_COMBINED_EXCESS_PATH_LENGTH_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_COMBINED_EXCESS_PATH_LENGTH_UNC_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_COMBINED_ATTENUATION_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSingleSatCorrectionFlags",
    "type" : "int",
    "comment" : " A bitmask of fields present in this object (see HAS_* constants defined above). ",
    "links" : [ ]
  }, {
    "name" : "mConstellationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSatId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierFrequencyHz",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProbSatIsLos",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCombinedExcessPathLengthMeters",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCombinedExcessPathLengthUncertaintyMeters",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCombinedAttenuationDb",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGnssExcessPathInfoList",
    "type" : "List<GnssExcessPathInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GnssSingleSatCorrection>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSingleSatelliteCorrectionFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets a bitmask of fields present in this object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConstellationType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the constellation type.\n     *\n     * <p>The return value is one of those constants with {@code CONSTELLATION_} prefix in {@link\n     * GnssStatus}.\n     ",
    "links" : [ "android.location.GnssStatus" ]
  }, {
    "name" : "public int getSatelliteId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the satellite ID.\n     *\n     * <p>Interpretation depends on {@link #getConstellationType()}. See {@link\n     * GnssStatus#getSvid(int)}.\n     ",
    "links" : [ "#getConstellationType()", "android.location.GnssStatus#getSvid(int)" ]
  }, {
    "name" : "public float getCarrierFrequencyHz()",
    "returnType" : "float",
    "comment" : "\n     * Gets the carrier frequency of the tracked signal.\n     *\n     * <p>For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60 MHz,\n     * L5 = 1176.45 MHz, varying GLO channels, etc.\n     *\n     * <p>For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two correction\n     * objects will be reported for this same satellite, in one of the correction objects, all the\n     * values related to L1 will be filled, and in the other all of the values related to L5 will be\n     * filled.\n     *\n     * @return the carrier frequency of the signal tracked in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getProbabilityLineOfSight()",
    "returnType" : "float",
    "comment" : "\n     * Returns the probability that the satellite is in line-of-sight condition at the given\n     * location.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getExcessPathLengthMeters()",
    "returnType" : "float",
    "comment" : "\n     * Returns the combined excess path length to be subtracted from pseudorange before using it in\n     * calculating location.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getExcessPathLengthUncertaintyMeters()",
    "returnType" : "float",
    "comment" : " Returns the error estimate (1-sigma) for the combined excess path length estimate. ",
    "links" : [ ]
  }, {
    "name" : "public float getCombinedAttenuationDb()",
    "returnType" : "float",
    "comment" : "\n     * Returns the combined expected reduction of signal strength for this satellite in\n     * non-negative dB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public GnssReflectingPlane getReflectingPlane()",
    "returnType" : "GnssReflectingPlane",
    "comment" : "\n     * Returns the reflecting plane characteristics at which the signal has bounced.\n     *\n     * @deprecated Combined excess path does not have a reflecting plane.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<GnssExcessPathInfo> getGnssExcessPathInfoList()",
    "returnType" : "List<GnssExcessPathInfo>",
    "comment" : "\n     * Returns the list of {@link GnssExcessPathInfo} associated with this satellite signal.\n     ",
    "links" : [ "android.location.GnssExcessPathInfo" ]
  }, {
    "name" : "public boolean hasValidSatelliteLineOfSight()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getProbabilityLineOfSight()} is valid. ",
    "links" : [ "#getProbabilityLineOfSight()" ]
  }, {
    "name" : "public boolean hasExcessPathLength()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getExcessPathLengthMeters()} is valid. ",
    "links" : [ "#getExcessPathLengthMeters()" ]
  }, {
    "name" : "public boolean hasExcessPathLengthUncertainty()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getExcessPathLengthUncertaintyMeters()} is valid. ",
    "links" : [ "#getExcessPathLengthUncertaintyMeters()" ]
  }, {
    "name" : "public boolean hasReflectingPlane()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getReflectingPlane()} is valid.\n     *\n     * @deprecated Combined excess path does not have a reflecting plane.\n     ",
    "links" : [ "#getReflectingPlane()" ]
  }, {
    "name" : "public boolean hasCombinedAttenuation()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getCombinedAttenuationDb()} is valid. ",
    "links" : [ "#getCombinedAttenuationDb()" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getSingleSatelliteCorrectionFlags()", "public int getConstellationType()", "public int getSatelliteId()", "public float getCarrierFrequencyHz()", "public float getProbabilityLineOfSight()", "public float getExcessPathLengthMeters()", "public float getExcessPathLengthUncertaintyMeters()", "public float getCombinedAttenuationDb()", "public GnssReflectingPlane getReflectingPlane()", "public List<GnssExcessPathInfo> getGnssExcessPathInfoList()", "public boolean hasValidSatelliteLineOfSight()", "public boolean hasExcessPathLength()", "public boolean hasExcessPathLengthUncertainty()", "public boolean hasReflectingPlane()", "public boolean hasCombinedAttenuation()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel parcel, int flags)", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "HAS_PROB_SAT_IS_LOS_MASK", "HAS_COMBINED_EXCESS_PATH_LENGTH_MASK", "HAS_COMBINED_EXCESS_PATH_LENGTH_UNC_MASK", "HAS_COMBINED_ATTENUATION_MASK", "mSingleSatCorrectionFlags", "mConstellationType", "mSatId", "mCarrierFrequencyHz", "mProbSatIsLos", "mCombinedExcessPathLengthMeters", "mCombinedExcessPathLengthUncertaintyMeters", "mCombinedAttenuationDb", "mGnssExcessPathInfoList", "CREATOR" ]
}