{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/ParameterUtils.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "WeightedRectangle",
  "comment" : "\n     * A weighted rectangle is an arbitrary rectangle (the coordinate system is unknown) with an\n     * arbitrary weight.\n     *\n     * <p>The user of this class must know what the coordinate system ahead of time; it's\n     * then possible to convert to a more concrete type such as a metering rectangle or a face.\n     * </p>\n     *\n     * <p>When converting to a more concrete type, out-of-range values are clipped; this prevents\n     * possible illegal argument exceptions being thrown at runtime.</p>\n     ",
  "variables" : [ {
    "name" : "rect",
    "type" : "Rect",
    "comment" : " Arbitrary rectangle (the range is user-defined); never {@code null}. ",
    "links" : [ ]
  }, {
    "name" : "weight",
    "type" : "int",
    "comment" : " Arbitrary weight (the range is user-defined). ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MeteringRectangle toMetering()",
    "returnType" : "MeteringRectangle",
    "comment" : "\n         * Convert to a metering rectangle, clipping any of the values to stay within range.\n         *\n         * <p>If values are clipped, a warning is printed to logcat.</p>\n         *\n         * @return a new metering rectangle\n         ",
    "links" : [ ]
  }, {
    "name" : "public Face toFace(int id, Point leftEyePosition, Point rightEyePosition, Point mouthPosition)",
    "returnType" : "Face",
    "comment" : "\n         * Convert to a face; the rect is considered to be the bounds, and the weight\n         * is considered to be the score.\n         *\n         * <p>If the score is out of range of {@value Face#SCORE_MIN}, {@value Face#SCORE_MAX},\n         * the score is clipped first and a warning is printed to logcat.</p>\n         *\n         * <p>If the id is negative, the id is changed to 0 and a warning is printed to\n         * logcat.</p>\n         *\n         * <p>All other parameters are passed-through as-is.</p>\n         *\n         * @return a new face with the optional features set\n         ",
    "links" : [ ]
  }, {
    "name" : "public Face toFace()",
    "returnType" : "Face",
    "comment" : "\n         * Convert to a face; the rect is considered to be the bounds, and the weight\n         * is considered to be the score.\n         *\n         * <p>If the score is out of range of {@value Face#SCORE_MIN}, {@value Face#SCORE_MAX},\n         * the score is clipped first and a warning is printed to logcat.</p>\n         *\n         * <p>All other parameters are passed-through as-is.</p>\n         *\n         * @return a new face without the optional features\n         ",
    "links" : [ ]
  }, {
    "name" : "private static int clipLower(int value, int lo, Rect rect, String name)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int clip(int value, int lo, int hi, Rect rect, String name)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "rect", "weight" ],
  "methodNames" : [ "public MeteringRectangle toMetering()", "public Face toFace(int id, Point leftEyePosition, Point rightEyePosition, Point mouthPosition)", "public Face toFace()", "private static int clipLower(int value, int lo, Rect rect, String name)", "private static int clip(int value, int lo, int hi, Rect rect, String name)" ]
}