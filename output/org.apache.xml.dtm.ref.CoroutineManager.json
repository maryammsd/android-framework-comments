{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/CoroutineManager.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "CoroutineManager",
  "comment" : "\n * <p>Support the coroutine design pattern.</p>\n * \n * <p>A coroutine set is a very simple cooperative non-preemptive\n * multitasking model, where the switch from one task to another is\n * performed via an explicit request. Coroutines interact according to\n * the following rules:</p>\n *\n * <ul>\n * <li>One coroutine in the set has control, which it retains until it\n * either exits or resumes another coroutine.</li>\n * <li>A coroutine is activated when it is resumed by some other coroutine\n * for the first time.</li>\n * <li>An active coroutine that gives up control by resuming another in\n * the set retains its context -- including call stack and local variables\n * -- so that if/when it is resumed, it will proceed from the point at which\n * it last gave up control.</li>\n * </ul>\n *\n * <p>Coroutines can be thought of as falling somewhere between pipes and\n * subroutines. Like call/return, there is an explicit flow of control\n * from one coroutine to another. Like pipes, neither coroutine is\n * actually \"in charge\", and neither must exit in order to transfer\n * control to the other. </p>\n * \n * <p>One classic application of coroutines is in compilers, where both\n * the parser and the lexer are maintaining complex state\n * information. The parser resumes the lexer to process incoming\n * characters into lexical tokens, and the lexer resumes the parser\n * when it has reached a point at which it has a reliably interpreted\n * set of tokens available for semantic processing. Structuring this\n * as call-and-return would require saving and restoring a\n * considerable amount of state each time. Structuring it as two tasks\n * connected by a queue may involve higher overhead (in systems which\n * can optimize the coroutine metaphor), isn't necessarily as clear in\n * intent, may have trouble handling cases where data flows in both\n * directions, and may not handle some of the more complex cases where\n * more than two coroutines are involved.</p>\n * \n * <p>Most coroutine systems also provide a way to pass data between the\n * source and target of a resume operation; this is sometimes referred\n * to as \"yielding\" a value.  Others rely on the fact that, since only\n * one member of a coroutine set is running at a time and does not\n * lose control until it chooses to do so, data structures may be\n * directly shared between them with only minimal precautions.</p>\n * \n * <p>\"Note: This should not be taken to mean that producer/consumer\n * problems should be always be done with coroutines.\" Queueing is\n * often a better solution when only two threads of execution are\n * involved and full two-way handshaking is not required. It's a bit\n * difficult to find short pedagogical examples that require\n * coroutines for a clear solution.</p>\n * \n * <p>The fact that only one of a group of coroutines is running at a\n * time, and the control transfer between them is explicit, simplifies\n * their possible interactions, and in some implementations permits\n * them to be implemented more efficiently than general multitasking.\n * In some situations, coroutines can be compiled out entirely;\n * in others, they may only require a few instructions more than a\n * simple function call.</p>\n *\n * <p>This version is built on top of standard Java threading, since\n * that's all we have available right now. It's been encapsulated for\n * code clarity and possible future optimization.</p>\n * \n * <p>(Two possible approaches: wait-notify based and queue-based. Some\n * folks think that a one-item queue is a cleaner solution because it's\n * more abstract -- but since coroutine _is_ an abstraction I'm not really\n * worried about that; folks should be able to switch this code without\n * concern.)</p>\n * \n * <p>%TBD% THIS SHOULD BE AN INTERFACE, to facilitate building other\n * implementations... perhaps including a true coroutine system\n * someday, rather than controlled threading. Arguably Coroutine\n * itself should be an interface much like Runnable, but I think that\n * can be built on top of this.</p>\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_activeIDs",
    "type" : "BitSet",
    "comment" : " \"Is this coroutine ID number already in use\" lookup table.\n   * Currently implemented as a bitset as a compromise between\n   * compactness and speed of access, but obviously other solutions\n   * could be applied.\n   * ",
    "links" : [ ]
  }, {
    "name" : "m_unreasonableId",
    "type" : "int",
    "comment" : " Limit on the coroutine ID numbers accepted. I didn't want the\n   * in-use table to grow without bound. If we switch to a more efficient\n   * sparse-array mechanism, it may be possible to raise or eliminate\n   * this boundary.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "m_yield",
    "type" : "Object",
    "comment" : " Internal field used to hold the data being explicitly passed\n   * from one coroutine to another during a co_resume() operation.\n   * (Of course implicit data sharing may also occur; one of the reasons\n   * for using coroutines is that you're guaranteed that none of the\n   * other coroutines in your set are using shared structures at the time\n   * you access them.)\n   *\n   * %REVIEW% It's been proposed that we be able to pass types of data\n   * other than Object -- more specific object types, or\n   * lighter-weight primitives.  This would seem to create a potential\n   * explosion of \"pass x recieve y back\" methods (or require\n   * fracturing resume into two calls, resume-other and\n   * wait-to-be-resumed), and the weight issue could be managed by\n   * reusing a mutable buffer object to contain the primitive\n   * (remember that only one coroutine runs at a time, so once the\n   * buffer's set it won't be walked on). Typechecking objects is\n   * interesting from a code-robustness point of view, but it's\n   * unclear whether it makes sense to encapsulate that in the\n   * coroutine code or let the callers do it, since it depends on RTTI\n   * either way. Restricting the parameters to objects implementing a\n   * specific CoroutineParameter interface does _not_ seem to be a net\n   * win; applications can do so if they want via front-end code, but\n   * there seem to be too many use cases involving passing an existing\n   * object type that you may not have the freedom to alter and may\n   * not want to spend time wrapping another object around.\n   * ",
    "links" : [ ]
  }, {
    "name" : "NOBODY",
    "type" : "int",
    "comment" : " Expose???",
    "links" : [ ]
  }, {
    "name" : "ANYBODY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nextCoroutine",
    "type" : "int",
    "comment" : " Internal field used to confirm that the coroutine now waking up is\n   * in fact the one we intended to resume. Some such selection mechanism\n   * is needed when more that two coroutines are operating within the same\n   * group.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized int co_joinCoroutineSet(int coroutineID)",
    "returnType" : "int",
    "comment" : " <p>Each coroutine in the set managed by a single\n   * CoroutineManager is identified by a small positive integer. This\n   * brings up the question of how to manage those integers to avoid\n   * reuse... since if two coroutines use the same ID number, resuming\n   * that ID could resume either. I can see arguments for either\n   * allowing applications to select their own numbers (they may want\n   * to declare mnemonics via manefest constants) or generating\n   * numbers on demand.  This routine's intended to support both\n   * approaches.</p>\n   *\n   * <p>%REVIEW% We could use an object as the identifier. Not sure\n   * it's a net gain, though it would allow the thread to be its own\n   * ID. Ponder.</p>\n   *\n   * @param coroutineID  If >=0, requests that we reserve this number.\n   * If <0, requests that we find, reserve, and return an available ID\n   * number.\n   *\n   * @return If >=0, the ID number to be used by this coroutine. If <0,\n   * an error occurred -- the ID requested was already in use, or we\n   * couldn't assign one without going over the \"unreasonable value\" mark\n   * ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException",
    "returnType" : "Object",
    "comment" : " In the standard coroutine architecture, coroutines are\n   * identified by their method names and are launched and run up to\n   * their first yield by simply resuming them; its's presumed that\n   * this recognizes the not-already-running case and does the right\n   * thing. We seem to need a way to achieve that same threadsafe\n   * run-up...  eg, start the coroutine with a wait.\n   *\n   * %TBD% whether this makes any sense...\n   *\n   * @param thisCoroutine the identifier of this coroutine, so we can\n   * recognize when we are being resumed.\n   * @exception java.lang.NoSuchMethodException if thisCoroutine isn't\n   * a registered member of this group. %REVIEW% whether this is the\n   * best choice.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Object co_resume(Object arg_object, int thisCoroutine, int toCoroutine) throws java.lang.NoSuchMethodException",
    "returnType" : "Object",
    "comment" : " Transfer control to another coroutine which has already been started and\n   * is waiting on this CoroutineManager. We won't return from this call\n   * until that routine has relinquished control.\n   *\n   * %TBD% What should we do if toCoroutine isn't registered? Exception?\n   *\n   * @param arg_object A value to be passed to the other coroutine.\n   * @param thisCoroutine Integer identifier for this coroutine. This is the\n   * ID we watch for to see if we're the ones being resumed.\n   * @param toCoroutine  Integer identifier for the coroutine we wish to\n   * invoke. \n   * @exception java.lang.NoSuchMethodException if toCoroutine isn't a\n   * registered member of this group. %REVIEW% whether this is the best choice.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void co_exit(int thisCoroutine)",
    "returnType" : "void",
    "comment" : " Terminate this entire set of coroutines. The others will be\n   * deregistered and have exceptions thrown at them. Note that this\n   * is intended as a panic-shutdown operation; under normal\n   * circumstances a coroutine should always end with co_exit_to() in\n   * order to politely inform at least one of its partners that it is\n   * going away.\n   *\n   * %TBD% This may need significantly more work. \n   *\n   * %TBD% Should this just be co_exit_to(,,CoroutineManager.PANIC)?\n   *\n   * @param thisCoroutine Integer identifier for the coroutine requesting exit.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void co_exit_to(Object arg_object, int thisCoroutine, int toCoroutine) throws java.lang.NoSuchMethodException",
    "returnType" : "void",
    "comment" : " Make the ID available for reuse and terminate this coroutine,\n   * transferring control to the specified coroutine. Note that this\n   * returns immediately rather than waiting for any further coroutine\n   * traffic, so the thread can proceed with other shutdown activities.\n   *\n   * @param arg_object    A value to be passed to the other coroutine.\n   * @param thisCoroutine Integer identifier for the coroutine leaving the set.\n   * @param toCoroutine   Integer identifier for the coroutine we wish to\n   * invoke. \n   * @exception java.lang.NoSuchMethodException if toCoroutine isn't a\n   * registered member of this group. %REVIEW% whether this is the best choice.\n   * ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized int co_joinCoroutineSet(int coroutineID)", "public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException", "public synchronized Object co_resume(Object arg_object, int thisCoroutine, int toCoroutine) throws java.lang.NoSuchMethodException", "public synchronized void co_exit(int thisCoroutine)", "public synchronized void co_exit_to(Object arg_object, int thisCoroutine, int toCoroutine) throws java.lang.NoSuchMethodException" ],
  "variableNames" : [ "m_activeIDs", "m_unreasonableId", "m_yield", "NOBODY", "ANYBODY", "m_nextCoroutine" ]
}