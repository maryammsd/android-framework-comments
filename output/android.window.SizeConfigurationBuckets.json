{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/SizeConfigurationBuckets.java",
  "packageName" : "android.window",
  "className" : "SizeConfigurationBuckets",
  "comment" : "\n * Contains size-configuration buckets used to prevent excessive configuration changes during\n * resize.\n *\n * These configurations are collected from application's resources based on size-sensitive\n * qualifiers. For example, layout-w800dp will be added to mHorizontalSizeConfigurations as 800\n * and drawable-sw400dp will be added to both as 400.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mHorizontal",
    "type" : "int[]",
    "comment" : " Horizontal (screenWidthDp) buckets ",
    "links" : [ ]
  }, {
    "name" : "mVertical",
    "type" : "int[]",
    "comment" : " Vertical (screenHeightDp) buckets ",
    "links" : [ ]
  }, {
    "name" : "mSmallest",
    "type" : "int[]",
    "comment" : " Smallest (smallestScreenWidthDp) buckets ",
    "links" : [ ]
  }, {
    "name" : "mScreenLayoutSize",
    "type" : "int[]",
    "comment" : " Screen Layout Size (screenLayout & SCREENLAYOUT_SIZE_MASK) buckets ",
    "links" : [ ]
  }, {
    "name" : "mScreenLayoutLongSet",
    "type" : "boolean",
    "comment" : "\n     * Screen Layout Long (screenLayout & SCREENLAYOUT_LONG_MASK) boolean. Only need to know if a\n     * value is set because only two possible buckets, SCREENLAYOUT_LONG_NO and\n     * SCREENLAYOUT_LONG_YES, so if either is set, then any change is a bucket change.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SizeConfigurationBuckets>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int filterDiff(int diff, @NonNull Configuration oldConfig, @NonNull Configuration newConfig, @Nullable SizeConfigurationBuckets buckets)",
    "returnType" : "int",
    "comment" : "\n     * Get the changes between two configurations but don't count changes in sizes if they don't\n     * cross boundaries that are important to the app.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean crossesHorizontalSizeThreshold(int firstDp, int secondDp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean crossesVerticalSizeThreshold(int firstDp, int secondDp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean crossesSmallestSizeThreshold(int firstDp, int secondDp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean crossesScreenLayoutSizeThreshold(@NonNull Configuration firstConfig, @NonNull Configuration secondConfig)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a screen layout size threshold has been crossed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean crossesScreenLayoutLongThreshold(int firstScreenLayout, int secondScreenLayout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean areNonSizeLayoutFieldsUnchanged(int oldScreenLayout, int newScreenLayout)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether non-size related screen layout attributes have changed. If true, then\n     * {@link ActivityInfo#CONFIG_SCREEN_LAYOUT} should not be filtered out in\n     * {@link SizeConfigurationBuckets#filterDiff()} because the non-size related attributes\n     * do not have a bucket range like the size-related attributes of screen layout.\n     ",
    "links" : [ "#CONFIG_SCREEN_LAYOUT", "android.window.SizeConfigurationBuckets#filterDiff()" ]
  }, {
    "name" : "public static boolean crossesSizeThreshold(int[] thresholds, int firstDp, int secondDp)",
    "returnType" : "boolean",
    "comment" : "\n     * The purpose of this method is to decide whether the activity needs to be relaunched upon\n     * changing its size. In most cases the activities don't need to be relaunched, if the resize\n     * is small, all the activity content has to do is relayout itself within new bounds. There are\n     * cases however, where the activity's content would be completely changed in the new size and\n     * the full relaunch is required.\n     *\n     * The activity will report to us vertical and horizontal thresholds after which a relaunch is\n     * required. These thresholds are collected from the application resource qualifiers. For\n     * example, if application has layout-w600dp resource directory, then it needs a relaunch when\n     * we resize from width of 650dp to 550dp, as it crosses the 600dp threshold. However, if\n     * it resizes width from 620dp to 700dp, it won't be relaunched as it stays on the same side\n     * of the threshold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getHorizontal()",
    "returnType" : "int[]",
    "comment" : "\n     * Horizontal (screenWidthDp) buckets\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getVertical()",
    "returnType" : "int[]",
    "comment" : "\n     * Vertical (screenHeightDp) buckets\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSmallest()",
    "returnType" : "int[]",
    "comment" : "\n     * Smallest (smallestScreenWidthDp) buckets\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getScreenLayoutSize()",
    "returnType" : "int[]",
    "comment" : "\n     * Screen Layout Size (screenLayout & SCREENLAYOUT_SIZE_MASK) buckets\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenLayoutLongSet()",
    "returnType" : "boolean",
    "comment" : "\n     * Screen Layout Long (screenLayout & SCREENLAYOUT_LONG_MASK) boolean. Only need to know if a\n     * value is set because only two possible buckets, SCREENLAYOUT_LONG_NO and\n     * SCREENLAYOUT_LONG_YES, so if either is set, then any change is a bucket change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull android.os.Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int filterDiff(int diff, @NonNull Configuration oldConfig, @NonNull Configuration newConfig, @Nullable SizeConfigurationBuckets buckets)", "private boolean crossesHorizontalSizeThreshold(int firstDp, int secondDp)", "private boolean crossesVerticalSizeThreshold(int firstDp, int secondDp)", "private boolean crossesSmallestSizeThreshold(int firstDp, int secondDp)", "public boolean crossesScreenLayoutSizeThreshold(@NonNull Configuration firstConfig, @NonNull Configuration secondConfig)", "private boolean crossesScreenLayoutLongThreshold(int firstScreenLayout, int secondScreenLayout)", "public static boolean areNonSizeLayoutFieldsUnchanged(int oldScreenLayout, int newScreenLayout)", "public static boolean crossesSizeThreshold(int[] thresholds, int firstDp, int secondDp)", "public String toString()", "public int[] getHorizontal()", "public int[] getVertical()", "public int[] getSmallest()", "public int[] getScreenLayoutSize()", "public boolean isScreenLayoutLongSet()", "public void writeToParcel(@NonNull android.os.Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "mHorizontal", "mVertical", "mSmallest", "mScreenLayoutSize", "mScreenLayoutLongSet", "CREATOR" ]
}