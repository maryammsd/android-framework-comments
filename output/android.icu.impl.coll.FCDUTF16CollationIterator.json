{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/FCDUTF16CollationIterator.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "FCDUTF16CollationIterator",
  "comment" : "\n * Incrementally checks the input text for FCD and normalizes where necessary.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "rawSeq",
    "type" : "CharSequence",
    "comment" : " corresponding to seq==normalized && 0==start<=pos<=limit==start+normalized.length().",
    "links" : [ ]
  }, {
    "name" : "rawStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "segmentStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "segmentLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rawLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nfcImpl",
    "type" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "normalized",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "checkDir",
    "type" : "int",
    "comment" : " Direction of incremental FCD check. See comments before rawStart.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resetToOffset(int newOffset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setText(boolean numeric, CharSequence s, int p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int nextCodePoint()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int previousCodePoint()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected long handleNextCE32()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void forwardNumCodePoints(int num)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void backwardNumCodePoints(int num)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void switchToForward()",
    "returnType" : "void",
    "comment" : "\n     * Switches to forward checking if possible.\n     * To be called when checkDir < 0 || (checkDir == 0 && pos == limit).\n     * Returns with checkDir > 0 || (checkDir == 0 && pos != limit).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void nextSegment()",
    "returnType" : "void",
    "comment" : "\n     * Extend the FCD text segment forward or normalize around pos.\n     * To be called when checkDir > 0 && pos != limit.\n     * Returns with checkDir == 0 and pos != limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void switchToBackward()",
    "returnType" : "void",
    "comment" : "\n     * Switches to backward checking.\n     * To be called when checkDir > 0 || (checkDir == 0 && pos == start).\n     * Returns with checkDir < 0 || (checkDir == 0 && pos != start).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void previousSegment()",
    "returnType" : "void",
    "comment" : "\n     * Extend the FCD text segment backward or normalize around pos.\n     * To be called when checkDir < 0 && pos != start.\n     * Returns with checkDir == 0 and pos != start.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void normalize(int from, int to)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object other)", "public int hashCode()", "public void resetToOffset(int newOffset)", "public int getOffset()", "public void setText(boolean numeric, CharSequence s, int p)", "public int nextCodePoint()", "public int previousCodePoint()", "protected long handleNextCE32()", "protected void forwardNumCodePoints(int num)", "protected void backwardNumCodePoints(int num)", "private void switchToForward()", "private void nextSegment()", "private void switchToBackward()", "private void previousSegment()", "private void normalize(int from, int to)" ],
  "variableNames" : [ "rawSeq", "rawStart", "segmentStart", "segmentLimit", "rawLimit", "nfcImpl", "normalized", "checkDir" ]
}