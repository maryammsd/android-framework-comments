{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/Precision.java",
  "packageName" : "android.icu.number",
  "className" : "Precision",
  "comment" : "\n * A class that defines the rounding precision to be used when formatting numbers in NumberFormatter.\n *\n * <p>\n * To create a Precision, use one of the factory methods.\n *\n * @see NumberFormatter\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mathContext",
    "type" : "MathContext",
    "comment" : " package-private final ",
    "links" : [ ]
  }, {
    "name" : "trailingZeroDisplay",
    "type" : "TrailingZeroDisplay",
    "comment" : " package-private final ",
    "links" : [ ]
  }, {
    "name" : "BOGUS_PRECISION",
    "type" : "BogusRounder",
    "comment" : "\n     * @deprecated ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "InfiniteRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIXED_FRAC_0",
    "type" : "FractionRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIXED_FRAC_2",
    "type" : "FractionRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_FRAC_6",
    "type" : "FractionRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIXED_SIG_2",
    "type" : "SignificantRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIXED_SIG_3",
    "type" : "SignificantRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RANGE_SIG_2_3",
    "type" : "SignificantRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPACT_STRATEGY",
    "type" : "FracSigRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NICKEL",
    "type" : "IncrementFiveRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONETARY_STANDARD",
    "type" : "CurrencyRounderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONETARY_CASH",
    "type" : "CurrencyRounderImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Precision unlimited()",
    "returnType" : "Precision",
    "comment" : "\n     * Show all available digits to full precision.\n     *\n     * <p>\n     * <strong>NOTE:</strong> When formatting a <em>double</em>, this method, along with\n     * {@link #minFraction} and {@link #minSignificantDigits}, will trigger complex algorithm similar to\n     * <em>Dragon4</em> to determine the low-order digits and the number of digits to display based on\n     * the value of the double. If the number of fraction places or significant digits can be bounded,\n     * consider using {@link #maxFraction} or {@link #maxSignificantDigits} instead to maximize performance.\n     * For more information, read the following blog post.\n     *\n     * <p>\n     * http://www.serpentine.com/blog/2011/06/29/here-be-dragons-advances-in-problems-you-didnt-even-know-you-had/\n     *\n     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ "#minSignificantDigits", "#maxSignificantDigits", "#minFraction", "#maxFraction" ]
  }, {
    "name" : "public static FractionPrecision integer()",
    "returnType" : "FractionPrecision",
    "comment" : "\n     * Show numbers rounded if necessary to the nearest integer.\n     *\n     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FractionPrecision fixedFraction(int minMaxFractionPlaces)",
    "returnType" : "FractionPrecision",
    "comment" : "\n     * Show numbers rounded if necessary to a certain number of fraction places (numerals after the\n     * decimal separator). Additionally, pad with zeros to ensure that this number of places are always\n     * shown.\n     *\n     * <p>\n     * Example output with minMaxFractionPlaces = 3:\n     *\n     * <p>\n     * 87,650.000<br>\n     * 8,765.000<br>\n     * 876.500<br>\n     * 87.650<br>\n     * 8.765<br>\n     * 0.876<br>\n     * 0.088<br>\n     * 0.009<br>\n     * 0.000 (zero)\n     *\n     * <p>\n     * This method is equivalent to {@link #minMaxFraction} with both arguments equal.\n     *\n     * @param minMaxFractionPlaces\n     *            The minimum and maximum number of numerals to display after the decimal separator\n     *            (rounding if too long or padding with zeros if too short).\n     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 0.\n     * @see NumberFormatter\n     ",
    "links" : [ "#minMaxFraction" ]
  }, {
    "name" : "public static FractionPrecision minFraction(int minFractionPlaces)",
    "returnType" : "FractionPrecision",
    "comment" : "\n     * Always show at least a certain number of fraction places after the decimal separator, padding with\n     * zeros if necessary. Do not perform rounding (display numbers to their full precision).\n     *\n     * <p>\n     * <strong>NOTE:</strong> If you are formatting <em>doubles</em>, see the performance note in\n     * {@link #unlimited}.\n     *\n     * @param minFractionPlaces\n     *            The minimum number of numerals to display after the decimal separator (padding with\n     *            zeros if necessary).\n     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 0.\n     * @see NumberFormatter\n     ",
    "links" : [ "#unlimited" ]
  }, {
    "name" : "public static FractionPrecision maxFraction(int maxFractionPlaces)",
    "returnType" : "FractionPrecision",
    "comment" : "\n     * Show numbers rounded if necessary to a certain number of fraction places (numerals after the\n     * decimal separator). Unlike the other fraction rounding strategies, this strategy does <em>not</em>\n     * pad zeros to the end of the number.\n     *\n     * @param maxFractionPlaces\n     *            The maximum number of numerals to display after the decimal mark (rounding if\n     *            necessary).\n     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 0.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FractionPrecision minMaxFraction(int minFractionPlaces, int maxFractionPlaces)",
    "returnType" : "FractionPrecision",
    "comment" : "\n     * Show numbers rounded if necessary to a certain number of fraction places (numerals after the\n     * decimal separator); in addition, always show at least a certain number of places after the decimal\n     * separator, padding with zeros if necessary.\n     *\n     * @param minFractionPlaces\n     *            The minimum number of numerals to display after the decimal separator (padding with\n     *            zeros if necessary).\n     * @param maxFractionPlaces\n     *            The maximum number of numerals to display after the decimal separator (rounding if\n     *            necessary).\n     * @return A FractionPrecision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 0.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Precision fixedSignificantDigits(int minMaxSignificantDigits)",
    "returnType" : "Precision",
    "comment" : "\n     * Show numbers rounded if necessary to a certain number of significant digits or significant\n     * figures. Additionally, pad with zeros to ensure that this number of significant digits/figures are\n     * always shown.\n     *\n     * <p>\n     * This method is equivalent to {@link #minMaxSignificantDigits} with both arguments equal.\n     *\n     * @param minMaxSignificantDigits\n     *            The minimum and maximum number of significant digits to display (rounding if too long\n     *            or padding with zeros if too short).\n     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 1.\n     * @see NumberFormatter\n     ",
    "links" : [ "#minMaxSignificantDigits" ]
  }, {
    "name" : "public static Precision minSignificantDigits(int minSignificantDigits)",
    "returnType" : "Precision",
    "comment" : "\n     * Always show at least a certain number of significant digits/figures, padding with zeros if\n     * necessary. Do not perform rounding (display numbers to their full precision).\n     *\n     * <p>\n     * <strong>NOTE:</strong> If you are formatting <em>doubles</em>, see the performance note in\n     * {@link #unlimited}.\n     *\n     * @param minSignificantDigits\n     *            The minimum number of significant digits to display (padding with zeros if too short).\n     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 1.\n     * @see NumberFormatter\n     ",
    "links" : [ "#unlimited" ]
  }, {
    "name" : "public static Precision maxSignificantDigits(int maxSignificantDigits)",
    "returnType" : "Precision",
    "comment" : "\n     * Show numbers rounded if necessary to a certain number of significant digits/figures.\n     *\n     * @param maxSignificantDigits\n     *            The maximum number of significant digits to display (rounding if too long).\n     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 1.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Precision minMaxSignificantDigits(int minSignificantDigits, int maxSignificantDigits)",
    "returnType" : "Precision",
    "comment" : "\n     * Show numbers rounded if necessary to a certain number of significant digits/figures; in addition,\n     * always show at least a certain number of significant digits, padding with zeros if necessary.\n     *\n     * @param minSignificantDigits\n     *            The minimum number of significant digits to display (padding with zeros if necessary).\n     * @param maxSignificantDigits\n     *            The maximum number of significant digits to display (rounding if necessary).\n     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 1.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Precision increment(BigDecimal roundingIncrement)",
    "returnType" : "Precision",
    "comment" : "\n     * Show numbers rounded if necessary to the closest multiple of a certain rounding increment. For\n     * example, if the rounding increment is 0.5, then round 1.2 to 1 and round 1.3 to 1.5.\n     *\n     * <p>\n     * In order to ensure that numbers are padded to the appropriate number of fraction places, set the\n     * scale on the rounding increment BigDecimal. For example, to round to the nearest 0.5 and always\n     * display 2 numerals after the decimal separator (to display 1.2 as \"1.00\" and 1.3 as \"1.50\"), you\n     * can run:\n     *\n     * <pre>\n     * Precision.increment(new BigDecimal(\"0.50\"))\n     * </pre>\n     *\n     * <p>\n     * For more information on the scale of Java BigDecimal, see {@link java.math.BigDecimal#scale()}.\n     *\n     * @param roundingIncrement\n     *            The increment to which to round numbers.\n     * @return A Precision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if the rounding increment is null or non-positive.\n     * @see NumberFormatter\n     ",
    "links" : [ "java.math.BigDecimal#scale()" ]
  }, {
    "name" : "public static CurrencyPrecision currency(CurrencyUsage currencyUsage)",
    "returnType" : "CurrencyPrecision",
    "comment" : "\n     * Show numbers rounded and padded according to the rules for the currency unit. The most common\n     * rounding precision settings for currencies include <code>Precision.fixedFraction(2)</code>,\n     * <code>Precision.integer()</code>, and <code>Precision.increment(0.05)</code> for cash transactions\n     * (\"nickel rounding\").\n     *\n     * <p>\n     * The exact rounding details will be resolved at runtime based on the currency unit specified in the\n     * NumberFormatter chain. To round according to the rules for one currency while displaying the\n     * symbol for another currency, the withCurrency() method can be called on the return value of this\n     * method.\n     *\n     * @param currencyUsage\n     *            Either STANDARD (for digital transactions) or CASH (for transactions where the rounding\n     *            increment may be limited by the available denominations of cash or coins).\n     * @return A CurrencyPrecision for chaining or passing to the NumberFormatter precision() setter.\n     * @throws IllegalArgumentException if currencyUsage is null.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public Precision trailingZeroDisplay(TrailingZeroDisplay trailingZeroDisplay)",
    "returnType" : "Precision",
    "comment" : "\n     * Configure how trailing zeros are displayed on numbers. For example, to hide trailing zeros\n     * when the number is an integer, use HIDE_IF_WHOLE.\n     *\n     * @param trailingZeroDisplay Option to configure the display of trailing zeros.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Precision withMode(MathContext mathContext)",
    "returnType" : "Precision",
    "comment" : "\n     * Sets a MathContext to use on this Precision.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract Precision createCopy()",
    "returnType" : "Precision",
    "comment" : " Package-private clone method ",
    "links" : [ ]
  }, {
    "name" : " void createCopyHelper(Precision copy)",
    "returnType" : "void",
    "comment" : " package-private ",
    "links" : [ ]
  }, {
    "name" : "public abstract void apply(DecimalQuantity value)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated ICU 60 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " static Precision constructInfinite()",
    "returnType" : "Precision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static FractionPrecision constructFraction(int minFrac, int maxFrac)",
    "returnType" : "FractionPrecision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Precision constructSignificant(int minSig, int maxSig)",
    "returnType" : "Precision",
    "comment" : " Assumes that minSig <= maxSig. ",
    "links" : [ ]
  }, {
    "name" : " static Precision constructFractionSignificant(FractionPrecision base_, int minSig, int maxSig, RoundingPriority priority, boolean retain)",
    "returnType" : "Precision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Precision constructIncrement(BigDecimal increment)",
    "returnType" : "Precision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static CurrencyPrecision constructCurrency(CurrencyUsage usage)",
    "returnType" : "CurrencyPrecision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Precision constructFromCurrency(CurrencyPrecision base_, Currency currency)",
    "returnType" : "Precision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Precision withLocaleData(Currency currency)",
    "returnType" : "Precision",
    "comment" : "\n     * Returns a valid working Rounder. If the Rounder is a CurrencyRounder, applies the given currency.\n     * Otherwise, simply passes through the argument.\n     *\n     * @param currency\n     *            A currency object to use in case the input object needs it.\n     * @return A Rounder object ready for use.\n     ",
    "links" : [ ]
  }, {
    "name" : " int chooseMultiplierAndApply(DecimalQuantity input, MultiplierProducer producer)",
    "returnType" : "int",
    "comment" : "\n     * Rounding endpoint used by Engineering and Compact notation. Chooses the most appropriate\n     * multiplier (magnitude adjustment), applies the adjustment, rounds, and returns the chosen\n     * multiplier.\n     *\n     * <p>\n     * In most cases, this is simple. However, when rounding the number causes it to cross a multiplier\n     * boundary, we need to re-do the rounding. For example, to display 999,999 in Engineering notation\n     * with 2 sigfigs, first you guess the multiplier to be -3. However, then you end up getting 1000E3,\n     * which is not the correct output. You then change your multiplier to be -6, and you get 1.0E6,\n     * which is correct.\n     *\n     * @param input\n     *            The quantity to process.\n     * @param producer\n     *            Function to call to return a multiplier based on a magnitude.\n     * @return The number of orders of magnitude the input was adjusted by this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getRoundingMagnitudeFraction(int maxFrac)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getRoundingMagnitudeSignificant(DecimalQuantity value, int maxSig)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getDisplayMagnitudeFraction(int minFrac)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setResolvedMinFraction(DecimalQuantity value, int resolvedMinFraction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getDisplayMagnitudeSignificant(DecimalQuantity value, int minSig)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Precision unlimited()", "public static FractionPrecision integer()", "public static FractionPrecision fixedFraction(int minMaxFractionPlaces)", "public static FractionPrecision minFraction(int minFractionPlaces)", "public static FractionPrecision maxFraction(int maxFractionPlaces)", "public static FractionPrecision minMaxFraction(int minFractionPlaces, int maxFractionPlaces)", "public static Precision fixedSignificantDigits(int minMaxSignificantDigits)", "public static Precision minSignificantDigits(int minSignificantDigits)", "public static Precision maxSignificantDigits(int maxSignificantDigits)", "public static Precision minMaxSignificantDigits(int minSignificantDigits, int maxSignificantDigits)", "public static Precision increment(BigDecimal roundingIncrement)", "public static CurrencyPrecision currency(CurrencyUsage currencyUsage)", "public Precision trailingZeroDisplay(TrailingZeroDisplay trailingZeroDisplay)", "public Precision withMode(MathContext mathContext)", " abstract Precision createCopy()", " void createCopyHelper(Precision copy)", "public abstract void apply(DecimalQuantity value)", " static Precision constructInfinite()", " static FractionPrecision constructFraction(int minFrac, int maxFrac)", " static Precision constructSignificant(int minSig, int maxSig)", " static Precision constructFractionSignificant(FractionPrecision base_, int minSig, int maxSig, RoundingPriority priority, boolean retain)", " static Precision constructIncrement(BigDecimal increment)", " static CurrencyPrecision constructCurrency(CurrencyUsage usage)", " static Precision constructFromCurrency(CurrencyPrecision base_, Currency currency)", " Precision withLocaleData(Currency currency)", " int chooseMultiplierAndApply(DecimalQuantity input, MultiplierProducer producer)", "private static int getRoundingMagnitudeFraction(int maxFrac)", "private static int getRoundingMagnitudeSignificant(DecimalQuantity value, int maxSig)", "private static int getDisplayMagnitudeFraction(int minFrac)", " void setResolvedMinFraction(DecimalQuantity value, int resolvedMinFraction)", "private static int getDisplayMagnitudeSignificant(DecimalQuantity value, int minSig)" ],
  "variableNames" : [ "mathContext", "trailingZeroDisplay", "BOGUS_PRECISION", "NONE", "FIXED_FRAC_0", "FIXED_FRAC_2", "DEFAULT_MAX_FRAC_6", "FIXED_SIG_2", "FIXED_SIG_3", "RANGE_SIG_2_3", "COMPACT_STRATEGY", "NICKEL", "MONETARY_STANDARD", "MONETARY_CASH" ]
}