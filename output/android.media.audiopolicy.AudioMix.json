{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiopolicy/AudioMix.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "AudioMix",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "mRule",
    "type" : "AudioMixingRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRouteFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMixType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMixState",
    "type" : "int",
    "comment" : " written by AudioPolicy",
    "links" : [ ]
  }, {
    "name" : "mCallbackFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceSystemType",
    "type" : "int",
    "comment" : " initialized in constructor, read by AudioPolicyConfig",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_FLAG_NOTIFY_ACTIVITY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_FLAGS_ALL",
    "type" : "int",
    "comment" : " when adding new MIX_FLAG_* flags, add them to this mask of authorized masks:",
    "links" : [ ]
  }, {
    "name" : "ROUTE_FLAG_RENDER",
    "type" : "int",
    "comment" : "\n     * An audio mix behavior where the output of the mix is sent to the original destination of\n     * the audio signal, i.e. an output device for an output mix, or a recording for an input mix.\n     ",
    "links" : [ ]
  }, {
    "name" : "ROUTE_FLAG_LOOP_BACK",
    "type" : "int",
    "comment" : "\n     * An audio mix behavior where the output of the mix is rerouted back to the framework and\n     * is accessible for injection or capture through the {@link AudioTrack} and {@link AudioRecord}\n     * APIs.\n     ",
    "links" : [ "AudioRecord", "AudioTrack" ]
  }, {
    "name" : "ROUTE_FLAG_LOOP_BACK_RENDER",
    "type" : "int",
    "comment" : "\n     * An audio mix behavior where the targeted audio is played unaffected but a copy is\n     * accessible for capture through {@link AudioRecord}.\n     *\n     * Only capture of playback is supported, not capture of capture.\n     * Use concurrent capture instead to capture what is captured by other apps.\n     *\n     * The captured audio is an approximation of the played audio.\n     * Effects and volume are not applied, and track are mixed with different delay then in the HAL.\n     * As a result, this API is not suitable for echo cancelling.\n     * @hide\n     ",
    "links" : [ "AudioRecord" ]
  }, {
    "name" : "ROUTE_FLAG_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIX_TYPE_INVALID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Invalid mix type, default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIX_TYPE_PLAYERS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Mix type indicating playback streams are mixed.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIX_TYPE_RECORDERS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Mix type indicating recording streams are mixed.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIX_STATE_DISABLED",
    "type" : "int",
    "comment" : "\n     * State of a mix before its policy is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIX_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * State of a mix when there is no audio to mix.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIX_STATE_MIXING",
    "type" : "int",
    "comment" : "\n     * State of a mix that is actively mixing audio.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVILEDGED_CAPTURE_MAX_SAMPLE_RATE",
    "type" : "int",
    "comment" : " Maximum sampling rate for privileged playback capture",
    "links" : [ ]
  }, {
    "name" : "PRIVILEDGED_CAPTURE_MAX_CHANNEL_NUMBER",
    "type" : "int",
    "comment" : " Maximum channel number for privileged playback capture",
    "links" : [ ]
  }, {
    "name" : "PRIVILEDGED_CAPTURE_MAX_BYTES_PER_SAMPLE",
    "type" : "int",
    "comment" : " Maximum channel number for privileged playback capture",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getMixState()",
    "returnType" : "int",
    "comment" : "\n     * The current mixing state.\n     * @return one of {@link #MIX_STATE_DISABLED}, {@link #MIX_STATE_IDLE},\n     *          {@link #MIX_STATE_MIXING}.\n     ",
    "links" : [ "#MIX_STATE_IDLE", "#MIX_STATE_MIXING", "#MIX_STATE_DISABLED" ]
  }, {
    "name" : "public int getRouteFlags()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AudioFormat getFormat()",
    "returnType" : "AudioFormat",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AudioMixingRule getRule()",
    "returnType" : "AudioMixingRule",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getMixType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void setRegistration(String regId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getRegistration()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAffectingUsage(int usage)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsMatchAttributeRuleForUsage(int usage)",
    "returnType" : "boolean",
    "comment" : "\n      * Returns {@code true} if the rule associated with this mix contains a\n      * RULE_MATCH_ATTRIBUTE_USAGE criterion for the given usage\n      *\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoutedToDevice(int deviceType, @NonNull String deviceAddress)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String canBeUsedForPrivilegedCapture(AudioFormat format)",
    "returnType" : "String",
    "comment" : " @return an error string if the format would not allow Privileged playbackCapture\n     *          null otherwise\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRule", "mFormat", "mRouteFlags", "mMixType", "mMixState", "mCallbackFlags", "mDeviceAddress", "mDeviceSystemType", "CALLBACK_FLAG_NOTIFY_ACTIVITY", "CALLBACK_FLAGS_ALL", "ROUTE_FLAG_RENDER", "ROUTE_FLAG_LOOP_BACK", "ROUTE_FLAG_LOOP_BACK_RENDER", "ROUTE_FLAG_SUPPORTED", "MIX_TYPE_INVALID", "MIX_TYPE_PLAYERS", "MIX_TYPE_RECORDERS", "MIX_STATE_DISABLED", "MIX_STATE_IDLE", "MIX_STATE_MIXING", "PRIVILEDGED_CAPTURE_MAX_SAMPLE_RATE", "PRIVILEDGED_CAPTURE_MAX_CHANNEL_NUMBER", "PRIVILEDGED_CAPTURE_MAX_BYTES_PER_SAMPLE" ],
  "methodNames" : [ "public int getMixState()", "public int getRouteFlags()", "public AudioFormat getFormat()", "public AudioMixingRule getRule()", "public int getMixType()", " void setRegistration(String regId)", "public String getRegistration()", "public boolean isAffectingUsage(int usage)", "public boolean containsMatchAttributeRuleForUsage(int usage)", "public boolean isRoutedToDevice(int deviceType, @NonNull String deviceAddress)", "public static String canBeUsedForPrivilegedCapture(AudioFormat format)", "public boolean equals(Object o)", "public int hashCode()" ]
}