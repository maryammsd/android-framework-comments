{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/TabHost.java",
  "packageName" : "android.widget",
  "className" : "TabHost",
  "comment" : "\n * Container for a tabbed window view. This object holds two children: a set of tab labels that the\n * user clicks to select a specific tab, and a FrameLayout object that displays the contents of that\n * page. The individual elements are typically controlled using this container object, rather than\n * setting values on the child elements themselves.\n *\n * @deprecated new applications should use fragment APIs instead of this class:\n * Use <a href=\"{@docRoot}guide/navigation/navigation-swipe-view\">TabLayout and ViewPager</a>\n * instead.\n ",
  "variables" : [ {
    "name" : "TABWIDGET_LOCATION_LEFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TABWIDGET_LOCATION_TOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TABWIDGET_LOCATION_RIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TABWIDGET_LOCATION_BOTTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabWidget",
    "type" : "TabWidget",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabContent",
    "type" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabSpecs",
    "type" : "List<TabSpec>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentTab",
    "type" : "int",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalActivityManager",
    "type" : "LocalActivityManager",
    "comment" : "\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnTabChangeListener",
    "type" : "OnTabChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabKeyListener",
    "type" : "OnKeyListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabLayoutId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initTabHost()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TabSpec newTabSpec(@NonNull String tag)",
    "returnType" : "TabSpec",
    "comment" : "\n     * Creates a new {@link TabSpec} associated with this tab host.\n     *\n     * @param tag tag for the tab specification, must be non-null\n     * @throws IllegalArgumentException If the passed tag is null\n     ",
    "links" : [ "TabSpec" ]
  }, {
    "name" : "public void setup()",
    "returnType" : "void",
    "comment" : "\n      * <p>Call setup() before adding tabs if loading TabHost using findViewById().\n      * <i><b>However</i></b>: You do not need to call setup() after getTabHost()\n      * in {@link android.app.TabActivity TabActivity}.\n      * Example:</p>\n<pre>mTabHost = (TabHost)findViewById(R.id.tabhost);\nmTabHost.setup();\nmTabHost.addTab(TAB_TAG_1, \"Hello, world!\", \"Tab 1\");\n      ",
    "links" : [ "android.app.TabActivity" ]
  }, {
    "name" : "public void sendAccessibilityEventInternal(int eventType)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setup(LocalActivityManager activityGroup)",
    "returnType" : "void",
    "comment" : "\n     * If you are using {@link TabSpec#setContent(android.content.Intent)}, this\n     * must be called since the activityGroup is needed to launch the local activity.\n     *\n     * This is done for you if you extend {@link android.app.TabActivity}.\n     * @param activityGroup Used to launch activities for tab content.\n     ",
    "links" : [ "android.app.TabActivity", "#setContent(android.content.Intent)" ]
  }, {
    "name" : "public void onTouchModeChanged(boolean isInTouchMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addTab(TabSpec tabSpec)",
    "returnType" : "void",
    "comment" : "\n     * Add a tab.\n     * @param tabSpec Specifies how to create the indicator and content.\n     * @throws IllegalArgumentException If the passed tab spec has null indicator strategy and / or\n     *      null content strategy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearAllTabs()",
    "returnType" : "void",
    "comment" : "\n     * Removes all tabs from the tab widget associated with this tab host.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TabWidget getTabWidget()",
    "returnType" : "TabWidget",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentTab()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current tab.\n     *\n     * @return the current tab, may be {@code null} if no tab is set as current\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentTabTag()",
    "returnType" : "String",
    "comment" : "\n     * Returns the tag for the current tab.\n     *\n     * @return the tag for the current tab, may be {@code null} if no tab is\n     *         set as current\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getCurrentTabView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the view for the current tab.\n     *\n     * @return the view for the current tab, may be {@code null} if no tab is\n     *         set as current\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getCurrentView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentTabByTag(String tag)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current tab based on its tag.\n     *\n     * @param tag the tag for the tab to set as current\n     ",
    "links" : [ ]
  }, {
    "name" : "public FrameLayout getTabContentView()",
    "returnType" : "FrameLayout",
    "comment" : "\n     * Get the FrameLayout which holds tab content\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getTabWidgetLocation()",
    "returnType" : "int",
    "comment" : "\n     * Get the location of the TabWidget.\n     *\n     * @return The TabWidget location.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentTab(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnTabChangedListener(OnTabChangeListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the selected state of any of the items\n     * in this list changes\n     * @param l\n     * The callback that will run\n     ",
    "links" : [ ]
  }, {
    "name" : "private void invokeOnTabChangeListener()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TABWIDGET_LOCATION_LEFT", "TABWIDGET_LOCATION_TOP", "TABWIDGET_LOCATION_RIGHT", "TABWIDGET_LOCATION_BOTTOM", "mTabWidget", "mTabContent", "mTabSpecs", "mCurrentTab", "mCurrentView", "mLocalActivityManager", "mOnTabChangeListener", "mTabKeyListener", "mTabLayoutId" ],
  "methodNames" : [ "private void initTabHost()", "public TabSpec newTabSpec(@NonNull String tag)", "public void setup()", "public void sendAccessibilityEventInternal(int eventType)", "public void setup(LocalActivityManager activityGroup)", "public void onTouchModeChanged(boolean isInTouchMode)", "public void addTab(TabSpec tabSpec)", "public void clearAllTabs()", "public TabWidget getTabWidget()", "public int getCurrentTab()", "public String getCurrentTabTag()", "public View getCurrentTabView()", "public View getCurrentView()", "public void setCurrentTabByTag(String tag)", "public FrameLayout getTabContentView()", "private int getTabWidgetLocation()", "public boolean dispatchKeyEvent(KeyEvent event)", "public void dispatchWindowFocusChanged(boolean hasFocus)", "public CharSequence getAccessibilityClassName()", "public void setCurrentTab(int index)", "public void setOnTabChangedListener(OnTabChangeListener l)", "private void invokeOnTabChangeListener()" ]
}