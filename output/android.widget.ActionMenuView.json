{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ActionMenuView.java",
  "packageName" : "android.widget",
  "className" : "ActionMenuView",
  "comment" : "\n * ActionMenuView is a presentation of a series of menu options as a View. It provides\n * several top level options as action buttons while spilling remaining options over as\n * items in an overflow menu. This allows applications to present packs of actions inline with\n * specific or repeating content.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CELL_SIZE",
    "type" : "int",
    "comment" : " dips",
    "links" : [ ]
  }, {
    "name" : "GENERATED_ITEM_PADDING",
    "type" : "int",
    "comment" : " dips",
    "links" : [ ]
  }, {
    "name" : "mMenu",
    "type" : "MenuBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupContext",
    "type" : "Context",
    "comment" : " Context against which to inflate popup menus. ",
    "links" : [ ]
  }, {
    "name" : "mPopupTheme",
    "type" : "int",
    "comment" : " Theme resource against which to inflate popup menus. ",
    "links" : [ ]
  }, {
    "name" : "mReserveOverflow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresenter",
    "type" : "ActionMenuPresenter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionMenuPresenterCallback",
    "type" : "MenuPresenter.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMenuBuilderCallback",
    "type" : "MenuBuilder.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatItems",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatItemsWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinCellSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGeneratedItemPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnMenuItemClickListener",
    "type" : "OnMenuItemClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPopupTheme(@StyleRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the theme to use when inflating popup menus. By default, uses\n     * the same theme as the action menu view itself.\n     *\n     * @param resId theme used to inflate popup menus\n     * @see #getPopupTheme()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPopupTheme()",
    "returnType" : "int",
    "comment" : "\n     * @return resource identifier of the theme used to inflate popup menus, or\n     *         0 if menus are inflated against the action menu view theme\n     * @see #setPopupTheme(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPresenter(ActionMenuPresenter presenter)",
    "returnType" : "void",
    "comment" : "\n     * @param presenter Menu presenter used to display popup menu\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnMenuItemClickListener(OnMenuItemClickListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onMeasureExactFormat(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int measureChildForCells(View child, int cellSize, int cellsRemaining, int parentHeightMeasureSpec, int parentHeightPadding)",
    "returnType" : "int",
    "comment" : "\n     * Measure a child view to fit within cell-based formatting. The child's width\n     * will be measured to a whole multiple of cellSize.\n     *\n     * <p>Sets the expandable and cellsUsed fields of LayoutParams.\n     *\n     * @param child Child to measure\n     * @param cellSize Size of one cell\n     * @param cellsRemaining Number of cells remaining that this view can expand to fill\n     * @param parentHeightMeasureSpec MeasureSpec used by the parent view\n     * @param parentHeightPadding Padding present in the parent view\n     * @return Number of cells this child was measured to occupy\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOverflowIcon(@Nullable Drawable icon)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to use for the overflow button.\n     *\n     * @param icon Drawable to set, may be null to clear the icon\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getOverflowIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the current drawable used as the overflow icon.\n     *\n     * @return The overflow icon drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowReserved()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setOverflowReserved(boolean reserveOverflow)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected LayoutParams generateDefaultLayoutParams()",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateOverflowButtonLayoutParams()",
    "returnType" : "LayoutParams",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean invokeItem(MenuItemImpl item)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getWindowAnimations()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void initialize(@Nullable MenuBuilder menu)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Menu getMenu()",
    "returnType" : "Menu",
    "comment" : "\n     * Returns the Menu object that this ActionMenuView is currently presenting.\n     *\n     * <p>Applications should use this method to obtain the ActionMenuView's Menu object\n     * and inflate or add content to it as necessary.</p>\n     *\n     * @return the Menu presented by this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMenuCallbacks(MenuPresenter.Callback pcb, MenuBuilder.Callback mcb)",
    "returnType" : "void",
    "comment" : "\n     * Must be called before the first call to getMenu()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuBuilder peekMenu()",
    "returnType" : "MenuBuilder",
    "comment" : "\n     * Returns the current menu or null if one has not yet been configured.\n     * @hide Internal use only for action bar integration\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean showOverflowMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Show the overflow items from the associated menu.\n     *\n     * @return true if the menu was able to be shown, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hideOverflowMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Hide the overflow items from the associated menu.\n     *\n     * @return true if the menu was able to be hidden, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowMenuShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the overflow menu is currently showing. This may not reflect\n     * a pending show operation in progress.\n     *\n     * @return true if the overflow menu is currently showing\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowMenuShowPending()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dismissPopupMenus()",
    "returnType" : "void",
    "comment" : "\n     * Dismiss any popups associated with this menu view.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean hasDividerBeforeChildAt(int childIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide Private LinearLayout (superclass) API. Un-hide if LinearLayout API is made public.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setExpandedActionViewsExclusive(boolean exclusive)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MIN_CELL_SIZE", "GENERATED_ITEM_PADDING", "mMenu", "mPopupContext", "mPopupTheme", "mReserveOverflow", "mPresenter", "mActionMenuPresenterCallback", "mMenuBuilderCallback", "mFormatItems", "mFormatItemsWidth", "mMinCellSize", "mGeneratedItemPadding", "mOnMenuItemClickListener" ],
  "methodNames" : [ "public void setPopupTheme(@StyleRes int resId)", "public int getPopupTheme()", "public void setPresenter(ActionMenuPresenter presenter)", "public void onConfigurationChanged(Configuration newConfig)", "public void setOnMenuItemClickListener(OnMenuItemClickListener listener)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "private void onMeasureExactFormat(int widthMeasureSpec, int heightMeasureSpec)", " static int measureChildForCells(View child, int cellSize, int cellsRemaining, int parentHeightMeasureSpec, int parentHeightPadding)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void onDetachedFromWindow()", "public void setOverflowIcon(@Nullable Drawable icon)", "public Drawable getOverflowIcon()", "public boolean isOverflowReserved()", "public void setOverflowReserved(boolean reserveOverflow)", "protected LayoutParams generateDefaultLayoutParams()", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "public LayoutParams generateOverflowButtonLayoutParams()", "public boolean invokeItem(MenuItemImpl item)", "public int getWindowAnimations()", "public void initialize(@Nullable MenuBuilder menu)", "public Menu getMenu()", "public void setMenuCallbacks(MenuPresenter.Callback pcb, MenuBuilder.Callback mcb)", "public MenuBuilder peekMenu()", "public boolean showOverflowMenu()", "public boolean hideOverflowMenu()", "public boolean isOverflowMenuShowing()", "public boolean isOverflowMenuShowPending()", "public void dismissPopupMenus()", "protected boolean hasDividerBeforeChildAt(int childIndex)", "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public void setExpandedActionViewsExclusive(boolean exclusive)" ]
}