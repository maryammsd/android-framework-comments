{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/text/MeasuredText.java",
  "packageName" : "android.graphics.text",
  "className" : "MeasuredText",
  "comment" : "\n * Result of text shaping of the single paragraph string.\n *\n * <p>\n * <pre>\n * <code>\n * Paint paint = new Paint();\n * Paint bigPaint = new Paint();\n * bigPaint.setTextSize(paint.getTextSize() * 2.0);\n * String text = \"Hello, Android.\";\n * MeasuredText mt = new MeasuredText.Builder(text.toCharArray())\n *      .appendStyleRun(paint, 7, false)  // Use paint for \"Hello, \"\n *      .appendStyleRun(bigPaint, 8, false)  // Use bigPaint for \"Android.\"\n *      .build();\n * </code>\n * </pre>\n * </p>\n ",
  "variables" : [ {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComputeHyphenation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComputeLayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChars",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public char[] getChars()",
    "returnType" : "char[]",
    "comment" : "\n     * Returns the characters in the paragraph used to compute this MeasuredText instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getWidth(@IntRange(from = 0) int start, @IntRange(from = 0) int end)",
    "returnType" : "float",
    "comment" : "\n     * Returns the width of a given range.\n     *\n     * @param start an inclusive start index of the range\n     * @param end an exclusive end index of the range\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMemoryUsage()",
    "returnType" : "int",
    "comment" : "\n     * Returns a memory usage of the native object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getBounds(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull Rect rect)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the boundary box of the given range\n     *\n     * @param start an inclusive start index of the range\n     * @param end an exclusive end index of the range\n     * @param rect an output parameter\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCharWidthAt(@IntRange(from = 0) int offset)",
    "returnType" : "float",
    "comment" : "\n     * Returns the width of the character at the given offset.\n     *\n     * @param offset an offset of the character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNativePtr()",
    "returnType" : "long",
    "comment" : "\n     * Returns a native pointer of the underlying native object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetWidth(long nativePtr, @IntRange(from = 0) int start, @IntRange(from = 0) int end)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetReleaseFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetMemoryUsage(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetBounds(long nativePtr, char[] buf, int start, int end, Rect rect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetCharWidthAt(long nativePtr, int offset)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mNativePtr", "mComputeHyphenation", "mComputeLayout", "mChars" ],
  "methodNames" : [ "public char[] getChars()", "public float getWidth(@IntRange(from = 0) int start, @IntRange(from = 0) int end)", "public int getMemoryUsage()", "public void getBounds(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull Rect rect)", "public float getCharWidthAt(@IntRange(from = 0) int offset)", "public long getNativePtr()", "private static native float nGetWidth(long nativePtr, @IntRange(from = 0) int start, @IntRange(from = 0) int end)", "private static native long nGetReleaseFunc()", "private static native int nGetMemoryUsage(long nativePtr)", "private static native void nGetBounds(long nativePtr, char[] buf, int start, int end, Rect rect)", "private static native float nGetCharWidthAt(long nativePtr, int offset)" ]
}