{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/hotspot2/pps/Credential.java",
  "packageName" : "android.net.wifi.hotspot2.pps",
  "className" : "UserCredential",
  "comment" : "\n     * Username-password based credential.\n     * Contains the fields under PerProviderSubscription/Credential/UsernamePassword subtree.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_USERNAME_BYTES",
    "type" : "int",
    "comment" : "\n         * Maximum string length for username.  Refer to Credential/UsernamePassword/Username\n         * node in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info.\n         ",
    "links" : [ ]
  }, {
    "name" : "MAX_PASSWORD_BYTES",
    "type" : "int",
    "comment" : "\n         * Maximum string length for password.  Refer to Credential/UsernamePassword/Password\n         * in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info.\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTH_METHOD_PAP",
    "type" : "String",
    "comment" : "\n         * Supported authentication methods.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTH_METHOD_MSCHAP",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "AUTH_METHOD_MSCHAPV2",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_AUTH",
    "type" : "Set<String>",
    "comment" : "\n         * Supported Non-EAP inner methods.  Refer to\n         * Credential/UsernamePassword/EAPMethod/InnerEAPType in Hotspot 2.0 Release 2 Technical\n         * Specification Section 9.1 for more info.\n         ",
    "links" : [ ]
  }, {
    "name" : "mUsername",
    "type" : "String",
    "comment" : "\n         * Username of the credential.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPassword",
    "type" : "String",
    "comment" : "\n         * Base64-encoded password.\n         ",
    "links" : [ ]
  }, {
    "name" : "mMachineManaged",
    "type" : "boolean",
    "comment" : "\n         * Flag indicating if the password is machine managed.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSoftTokenApp",
    "type" : "String",
    "comment" : "\n         * The name of the application used to generate the password.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAbleToShare",
    "type" : "boolean",
    "comment" : "\n         * Flag indicating if this credential is usable on other mobile devices as well.\n         ",
    "links" : [ ]
  }, {
    "name" : "mEapType",
    "type" : "int",
    "comment" : "\n         * EAP (Extensible Authentication Protocol) method type.\n         * Refer to\n         * <a href=\"http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4\">\n         * EAP Numbers</a> for valid values.\n         * Using Integer.MIN_VALUE to indicate unset value.\n         ",
    "links" : [ ]
  }, {
    "name" : "mNonEapInnerMethod",
    "type" : "String",
    "comment" : "\n         * Non-EAP inner authentication method.\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<UserCredential>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUsername(String username)",
    "returnType" : "void",
    "comment" : "\n         * Set the username associated with this user credential.\n         *\n         * @param username The username to set to\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getUsername()",
    "returnType" : "String",
    "comment" : "\n         * Get the username associated with this user credential.\n         *\n         * @return the username associated with this user credential\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPassword(String password)",
    "returnType" : "void",
    "comment" : "\n         * Set the Base64-encoded password associated with this user credential.\n         *\n         * @param password The password to set to\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getPassword()",
    "returnType" : "String",
    "comment" : "\n         * Get the Base64-encoded password associated with this user credential.\n         *\n         * @return the Base64-encoded password associated with this user credential\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setMachineManaged(boolean machineManaged)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getMachineManaged()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setSoftTokenApp(String softTokenApp)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getSoftTokenApp()",
    "returnType" : "String",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAbleToShare(boolean ableToShare)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAbleToShare()",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setEapType(int eapType)",
    "returnType" : "void",
    "comment" : "\n         * Set the EAP (Extensible Authentication Protocol) method type associated with this\n         * user credential.\n         * Refer to\n         * <a href=\"http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4\">\n         * EAP Numbers</a> for valid values.\n         *\n         * @param eapType The EAP method type associated with this user credential\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getEapType()",
    "returnType" : "int",
    "comment" : "\n         * Get the EAP (Extensible Authentication Protocol) method type associated with this\n         * user credential.\n         *\n         * @return EAP method type\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setNonEapInnerMethod(String nonEapInnerMethod)",
    "returnType" : "void",
    "comment" : "\n         * Set the inner non-EAP method associated with this user credential.\n         *\n         * @param nonEapInnerMethod The non-EAP inner method to set to\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getNonEapInnerMethod()",
    "returnType" : "String",
    "comment" : "\n         * Get the inner non-EAP method associated with this user credential.\n         *\n         * @return Non-EAP inner method associated with this user credential\n         ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object thatObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean validate()",
    "returnType" : "boolean",
    "comment" : "\n         * Validate the configuration data.\n         *\n         * @return true on success or false on failure\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getUniqueId()",
    "returnType" : "int",
    "comment" : "\n         * Get a unique identifier for UserCredential.\n         *\n         * @hide\n         * @return a Unique identifier for a UserCredential object\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setUsername(String username)", "public String getUsername()", "public void setPassword(String password)", "public String getPassword()", "public void setMachineManaged(boolean machineManaged)", "public boolean getMachineManaged()", "public void setSoftTokenApp(String softTokenApp)", "public String getSoftTokenApp()", "public void setAbleToShare(boolean ableToShare)", "public boolean getAbleToShare()", "public void setEapType(int eapType)", "public int getEapType()", "public void setNonEapInnerMethod(String nonEapInnerMethod)", "public String getNonEapInnerMethod()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object thatObject)", "public int hashCode()", "public String toString()", "public boolean validate()", "public int getUniqueId()" ],
  "variableNames" : [ "MAX_USERNAME_BYTES", "MAX_PASSWORD_BYTES", "AUTH_METHOD_PAP", "AUTH_METHOD_MSCHAP", "AUTH_METHOD_MSCHAPV2", "SUPPORTED_AUTH", "mUsername", "mPassword", "mMachineManaged", "mSoftTokenApp", "mAbleToShare", "mEapType", "mNonEapInnerMethod", "CREATOR" ]
}