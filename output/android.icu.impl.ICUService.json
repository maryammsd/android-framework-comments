{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUService.java",
  "packageName" : "android.icu.impl",
  "className" : "ICUService",
  "comment" : "\n * <p>A Service provides access to service objects that implement a\n * particular service, e.g. transliterators.  Users provide a String\n * id (for example, a locale string) to the service, and get back an\n * object for that id.  Service objects can be any kind of object.\n * The service object is cached and returned for later queries, so\n * generally it should not be mutable, or the caller should clone the\n * object before modifying it.</p>\n *\n * <p>Services 'canonicalize' the query id and use the canonical id to\n * query for the service.  The service also defines a mechanism to\n * 'fallback' the id multiple times.  Clients can optionally request\n * the actual id that was matched by a query when they use an id to\n * retrieve a service object.</p>\n *\n * <p>Service objects are instantiated by Factory objects registered with\n * the service.  The service queries each Factory in turn, from most recently\n * registered to earliest registered, until one returns a service object.\n * If none responds with a service object, a fallback id is generated,\n * and the process repeats until a service object is returned or until\n * the id has no further fallbacks.</p>\n *\n * <p>Factories can be dynamically registered and unregistered with the\n * service.  When registered, a Factory is installed at the head of\n * the factory list, and so gets 'first crack' at any keys or fallback\n * keys.  When unregistered, it is removed from the service and can no\n * longer be located through it.  Service objects generated by this\n * factory and held by the client are unaffected.</p>\n *\n * <p>ICUService uses Keys to query factories and perform\n * fallback.  The Key defines the canonical form of the id, and\n * implements the fallback strategy.  Custom Keys can be defined that\n * parse complex IDs into components that Factories can more easily\n * use.  The Key can cache the results of this parsing to save\n * repeated effort.  ICUService provides convenience APIs that\n * take Strings and generate default Keys for use in querying.</p>\n *\n * <p>ICUService provides API to get the list of ids publicly\n * supported by the service (although queries aren't restricted to\n * this list).  This list contains only 'simple' IDs, and not fully\n * unique ids.  Factories are associated with each simple ID and\n * the responsible factory can also return a human-readable localized\n * version of the simple ID, for use in user interfaces.  ICUService\n * can also provide a sorted collection of the all the localized visible\n * ids.</p>\n *\n * <p>ICUService implements ICUNotifier, so that clients can register\n * to receive notification when factories are added or removed from\n * the service.  ICUService provides a default EventListener subinterface,\n * ServiceListener, which can be registered with the service.  When\n * the service changes, the ServiceListener's serviceChanged method\n * is called, with the service as the only argument.</p>\n *\n * <p>The ICUService API is both rich and generic, and it is expected\n * that most implementations will statically 'wrap' ICUService to\n * present a more appropriate API-- for example, to declare the type\n * of the objects returned from get, to limit the factories that can\n * be registered with the service, or to define their own listener\n * interface with a custom callback method.  They might also customize\n * ICUService by overriding it, for example, to customize the Key and\n * fallback strategy.  ICULocaleService is a customized service that\n * uses Locale names as ids and uses Keys that implement the standard\n * resource bundle fallback strategy.<p>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * Name used for debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "factoryLock",
    "type" : "ICURWLock",
    "comment" : "\n     * Access to factories is protected by a read-write lock.  This is\n     * to allow multiple threads to read concurrently, but keep\n     * changes to the factory list atomic with respect to all readers.\n     ",
    "links" : [ ]
  }, {
    "name" : "factories",
    "type" : "List<Factory>",
    "comment" : "\n     * All the factories registered with this service.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultSize",
    "type" : "int",
    "comment" : "\n     * Record the default number of factories for this service.\n     * Can be set by markDefault.\n     ",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "Map<String, CacheEntry>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "idcache",
    "type" : "Map<String, Factory>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dnref",
    "type" : "LocaleRef",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object get(String descriptor)",
    "returnType" : "Object",
    "comment" : "\n     * Convenience override for get(String, String[]). This uses\n     * createKey to create a key for the provided descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object get(String descriptor, String[] actualReturn)",
    "returnType" : "Object",
    "comment" : "\n     * Convenience override for get(Key, String[]).  This uses\n     * createKey to create a key from the provided descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getKey(Key key)",
    "returnType" : "Object",
    "comment" : "\n     * Convenience override for get(Key, String[]).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getKey(Key key, String[] actualReturn)",
    "returnType" : "Object",
    "comment" : "\n     * <p>Given a key, return a service object, and, if actualReturn\n     * is not null, the descriptor with which it was found in the\n     * first element of actualReturn.  If no service object matches\n     * this key, return null, and leave actualReturn unchanged.</p>\n     *\n     * <p>This queries the cache using the key's descriptor, and if no\n     * object in the cache matches it, tries the key on each\n     * registered factory, in order.  If none generates a service\n     * object for the key, repeats the process with each fallback of\n     * the key, until either one returns a service object, or the key\n     * has no fallback.</p>\n     *\n     * <p>If key is null, just returns null.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getKey(Key key, String[] actualReturn, Factory factory)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Object handleDefault(Key key, String[] actualIDReturn)",
    "returnType" : "Object",
    "comment" : "\n     * Default handler for this service if no factory in the list\n     * handled the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getVisibleIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Convenience override for getVisibleIDs(String) that passes null\n     * as the fallback, thus returning all visible IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getVisibleIDs(String matchID)",
    "returnType" : "Set<String>",
    "comment" : "\n     * <p>Return a snapshot of the visible IDs for this service.  This\n     * set will not change as Factories are added or removed, but the\n     * supported ids will, so there is no guarantee that all and only\n     * the ids in the returned set are visible and supported by the\n     * service in subsequent calls.</p>\n     *\n     * <p>matchID is passed to createKey to create a key.  If the\n     * key is not null, it is used to filter out ids that don't have\n     * the key as a fallback.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Map<String, Factory> getVisibleIDMap()",
    "returnType" : "Map<String, Factory>",
    "comment" : "\n     * Return a map from visible ids to factories.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(String id)",
    "returnType" : "String",
    "comment" : "\n     * Convenience override for getDisplayName(String, ULocale) that\n     * uses the current default locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(String id, ULocale locale)",
    "returnType" : "String",
    "comment" : "\n     * Given a visible id, return the display name in the requested locale.\n     * If there is no directly supported id corresponding to this id, return\n     * null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SortedMap<String, String> getDisplayNames()",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n     * Convenience override of getDisplayNames(ULocale, Comparator, String) that\n     * uses the current default Locale as the locale, null as\n     * the comparator, and null for the matchID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SortedMap<String, String> getDisplayNames(ULocale locale)",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n     * Convenience override of getDisplayNames(ULocale, Comparator, String) that\n     * uses null for the comparator, and null for the matchID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SortedMap<String, String> getDisplayNames(ULocale locale, Comparator<Object> com)",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n     * Convenience override of getDisplayNames(ULocale, Comparator, String) that\n     * uses null for the matchID, thus returning all display names.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SortedMap<String, String> getDisplayNames(ULocale locale, String matchID)",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n     * Convenience override of getDisplayNames(ULocale, Comparator, String) that\n     * uses null for the comparator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SortedMap<String, String> getDisplayNames(ULocale locale, Comparator<Object> com, String matchID)",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n     * Return a snapshot of the mapping from display names to visible\n     * IDs for this service.  This set will not change as factories\n     * are added or removed, but the supported ids will, so there is\n     * no guarantee that all and only the ids in the returned map will\n     * be visible and supported by the service in subsequent calls,\n     * nor is there any guarantee that the current display names match\n     * those in the set.  The display names are sorted based on the\n     * comparator provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final List<Factory> factories()",
    "returnType" : "List<Factory>",
    "comment" : "\n     * Return a snapshot of the currently registered factories.  There\n     * is no guarantee that the list will still match the current\n     * factory list of the service subsequent to this call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Factory registerObject(Object obj, String id)",
    "returnType" : "Factory",
    "comment" : "\n     * A convenience override of registerObject(Object, String, boolean)\n     * that defaults visible to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Factory registerObject(Object obj, String id, boolean visible)",
    "returnType" : "Factory",
    "comment" : "\n     * Register an object with the provided id.  The id will be\n     * canonicalized.  The canonicalized ID will be returned by\n     * getVisibleIDs if visible is true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Factory registerFactory(Factory factory)",
    "returnType" : "Factory",
    "comment" : "\n     * Register a Factory.  Returns the factory if the service accepts\n     * the factory, otherwise returns null.  The default implementation\n     * accepts all factories.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean unregisterFactory(Factory factory)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregister a factory.  The first matching registered factory will\n     * be removed from the list.  Returns true if a matching factory was\n     * removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void reset()",
    "returnType" : "void",
    "comment" : "\n     * Reset the service to the default factories.  The factory\n     * lock is acquired and then reInitializeFactories is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void reInitializeFactories()",
    "returnType" : "void",
    "comment" : "\n     * Reinitialize the factory list to its default state.  By default\n     * this clears the list.  Subclasses can override to provide other\n     * default initialization of the factory list.  Subclasses must\n     * not call this method directly, as it must only be called while\n     * holding write access to the factory list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the service is in its default state.  The default\n     * implementation returns true if there are no factories registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void markDefault()",
    "returnType" : "void",
    "comment" : "\n     * Set the default size to the current number of registered factories.\n     * Used by subclasses to customize the behavior of isDefault.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Key createKey(String id)",
    "returnType" : "Key",
    "comment" : "\n     * Create a key from an id.  This creates a Key instance.\n     * Subclasses can override to define more useful keys appropriate\n     * to the factories they accept.  If id is null, returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void clearCaches()",
    "returnType" : "void",
    "comment" : "\n     * Clear caches maintained by this service.  Subclasses can\n     * override if they implement additional that need to be cleared\n     * when the service changes. Subclasses should generally not call\n     * this method directly, as it must only be called while\n     * synchronized on this.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void clearServiceCache()",
    "returnType" : "void",
    "comment" : "\n     * Clears only the service cache.\n     * This can be called by subclasses when a change affects the service\n     * cache but not the id caches, e.g., when the default locale changes\n     * the resolution of ids changes, but not the visible ids themselves.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean acceptsListener(EventListener l)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the listener is accepted; by default this\n     * requires a ServiceListener.  Subclasses can override to accept\n     * different listeners.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void notifyListener(EventListener l)",
    "returnType" : "void",
    "comment" : "\n     * Notify the listener, which by default is a ServiceListener.\n     * Subclasses can override to use a different listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String stats()",
    "returnType" : "String",
    "comment" : "\n     * When the statistics for this service is already enabled,\n     * return the log and resets he statistics.\n     * When the statistics is not enabled, this method enable\n     * the statistics. Used for debugging purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of this service. This will be the empty string if none was assigned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the result of super.toString, appending the name in curly braces.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object get(String descriptor)", "public Object get(String descriptor, String[] actualReturn)", "public Object getKey(Key key)", "public Object getKey(Key key, String[] actualReturn)", "public Object getKey(Key key, String[] actualReturn, Factory factory)", "protected Object handleDefault(Key key, String[] actualIDReturn)", "public Set<String> getVisibleIDs()", "public Set<String> getVisibleIDs(String matchID)", "private Map<String, Factory> getVisibleIDMap()", "public String getDisplayName(String id)", "public String getDisplayName(String id, ULocale locale)", "public SortedMap<String, String> getDisplayNames()", "public SortedMap<String, String> getDisplayNames(ULocale locale)", "public SortedMap<String, String> getDisplayNames(ULocale locale, Comparator<Object> com)", "public SortedMap<String, String> getDisplayNames(ULocale locale, String matchID)", "public SortedMap<String, String> getDisplayNames(ULocale locale, Comparator<Object> com, String matchID)", "public final List<Factory> factories()", "public Factory registerObject(Object obj, String id)", "public Factory registerObject(Object obj, String id, boolean visible)", "public final Factory registerFactory(Factory factory)", "public final boolean unregisterFactory(Factory factory)", "public final void reset()", "protected void reInitializeFactories()", "public boolean isDefault()", "protected void markDefault()", "public Key createKey(String id)", "protected void clearCaches()", "protected void clearServiceCache()", "protected boolean acceptsListener(EventListener l)", "protected void notifyListener(EventListener l)", "public String stats()", "public String getName()", "public String toString()" ],
  "variableNames" : [ "name", "DEBUG", "factoryLock", "factories", "defaultSize", "cache", "idcache", "dnref" ]
}