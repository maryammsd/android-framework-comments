{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ArrayBlockingQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "ArrayBlockingQueue",
  "comment" : "\n * A bounded {@linkplain BlockingQueue blocking queue} backed by an\n * array.  This queue orders elements FIFO (first-in-first-out).  The\n * <em>head</em> of the queue is that element that has been on the\n * queue the longest time.  The <em>tail</em> of the queue is that\n * element that has been on the queue the shortest time. New elements\n * are inserted at the tail of the queue, and the queue retrieval\n * operations obtain elements at the head of the queue.\n *\n * <p>This is a classic &quot;bounded buffer&quot;, in which a\n * fixed-sized array holds elements inserted by producers and\n * extracted by consumers.  Once created, the capacity cannot be\n * changed.  Attempts to {@code put} an element into a full queue\n * will result in the operation blocking; attempts to {@code take} an\n * element from an empty queue will similarly block.\n *\n * <p>This class supports an optional fairness policy for ordering\n * waiting producer and consumer threads.  By default, this ordering\n * is not guaranteed. However, a queue constructed with fairness set\n * to {@code true} grants threads access in FIFO order. Fairness\n * generally decreases throughput but reduces variability and avoids\n * starvation.\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Collection} and {@link Iterator} interfaces.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "java.util.Iterator", "java.util.Collection" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization ID. This class relies on default serialization\n     * even for the items array, which is default-serialized, even if\n     * it is empty. Otherwise it could not be declared final, which is\n     * necessary here.\n     ",
    "links" : [ ]
  }, {
    "name" : "items",
    "type" : "Object[]",
    "comment" : " The queued items ",
    "links" : [ ]
  }, {
    "name" : "takeIndex",
    "type" : "int",
    "comment" : " items index for next take, poll, peek or remove ",
    "links" : [ ]
  }, {
    "name" : "putIndex",
    "type" : "int",
    "comment" : " items index for next put, offer, or add ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : " Number of elements in the queue ",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : " Main lock guarding all access ",
    "links" : [ ]
  }, {
    "name" : "notEmpty",
    "type" : "Condition",
    "comment" : " Condition for waiting takes ",
    "links" : [ ]
  }, {
    "name" : "notFull",
    "type" : "Condition",
    "comment" : " Condition for waiting puts ",
    "links" : [ ]
  }, {
    "name" : "itrs",
    "type" : "Itrs",
    "comment" : "\n     * Shared state for currently active iterators, or null if there\n     * are known not to be any.  Allows queue operations to update\n     * iterator state.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static final int inc(int i, int modulus)",
    "returnType" : "int",
    "comment" : "\n     * Increments i, mod modulus.\n     * Precondition and postcondition: 0 <= i < modulus.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int dec(int i, int modulus)",
    "returnType" : "int",
    "comment" : "\n     * Decrements i, mod modulus.\n     * Precondition and postcondition: 0 <= i < modulus.\n     ",
    "links" : [ ]
  }, {
    "name" : " final E itemAt(int i)",
    "returnType" : "E",
    "comment" : "\n     * Returns item at index i.\n     ",
    "links" : [ ]
  }, {
    "name" : " static E itemAt(Object[] items, int i)",
    "returnType" : "E",
    "comment" : "\n     * Returns element at array index i.\n     * This is a slight abuse of generics, accepted by javac.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void enqueue(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts element at current put position, advances, and signals.\n     * Call only when holding lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E dequeue()",
    "returnType" : "E",
    "comment" : "\n     * Extracts element at current take position, advances, and signals.\n     * Call only when holding lock.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeAt(final int removeIndex)",
    "returnType" : "void",
    "comment" : "\n     * Deletes item at array index removeIndex.\n     * Utility for remove(Object) and iterator.remove.\n     * Call only when holding lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this queue if it is\n     * possible to do so immediately without exceeding the queue's capacity,\n     * returning {@code true} upon success and throwing an\n     * {@code IllegalStateException} if this queue is full.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if this queue is full\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this queue if it is\n     * possible to do so immediately without exceeding the queue's capacity,\n     * returning {@code true} upon success and {@code false} if this queue\n     * is full.  This method is generally preferable to method {@link #add},\n     * which can fail to insert an element only by throwing an exception.\n     *\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : "public void put(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the tail of this queue, waiting\n     * for space to become available if the queue is full.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this queue, waiting\n     * up to the specified wait time for space to become available if\n     * the queue is full.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this queue.\n     *\n     * @return the number of elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of additional elements that this queue can ideally\n     * (in the absence of memory or resource constraints) accept without\n     * blocking. This is always equal to the initial capacity of this queue\n     * less the current {@code size} of this queue.\n     *\n     * <p>Note that you <em>cannot</em> always tell if an attempt to insert\n     * an element will succeed by inspecting {@code remainingCapacity}\n     * because it may be the case that another thread is about to\n     * insert or remove an element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this queue,\n     * if it is present.  More formally, removes an element {@code e} such\n     * that {@code o.equals(e)}, if this queue contains one or more such\n     * elements.\n     * Returns {@code true} if this queue contained the specified element\n     * (or equivalently, if this queue changed as a result of the call).\n     *\n     * <p>Removal of interior elements in circular array based queues\n     * is an intrinsically slow and disruptive operation, so should\n     * be undertaken only in exceptional circumstances, ideally\n     * only when the queue is known not to be accessible by other\n     * threads.\n     *\n     * @param o element to be removed from this queue, if present\n     * @return {@code true} if this queue changed as a result of the call\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this queue contains the specified element.\n     * More formally, returns {@code true} if and only if this queue contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this queue\n     * @return {@code true} if this queue contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue, in\n     * proper sequence.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this queue.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue, in\n     * proper sequence; the runtime type of the returned array is that of\n     * the specified array.  If the queue fits in the specified array, it\n     * is returned therein.  Otherwise, a new array is allocated with the\n     * runtime type of the specified array and the size of this queue.\n     *\n     * <p>If this queue fits in the specified array with room to spare\n     * (i.e., the array has more elements than this queue), the element in\n     * the array immediately following the end of the queue is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a queue known to contain only strings.\n     * The following code can be used to dump the queue into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the queue are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this queue\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this queue\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Atomically removes all of the elements from this queue.\n     * The queue will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void circularClear(Object[] items, int i, int end)",
    "returnType" : "void",
    "comment" : "\n     * Nulls out slots starting at array index i, upto index end.\n     * Condition i == end means \"full\" - the entire array is cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this queue in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this queue in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this queue.\n     *\n     * <p>The returned spliterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},\n     * {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.\n     *\n     * @implNote\n     * The {@code Spliterator} implements {@code trySplit} to permit limited\n     * parallelism.\n     *\n     * @return a {@code Spliterator} over the elements in this queue\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#NONNULL", "java.util.Spliterator#CONCURRENT", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "private static long[] nBits(int n)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setBit(long[] bits, int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClear(long[] bits, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int distanceNonEmpty(int i, int j)",
    "returnType" : "int",
    "comment" : "\n     * Returns circular distance from i to j, disambiguating i == j to\n     * items.length; never returns 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemoveModified(Predicate<? super E> filter, final int beg)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper for bulkRemove, in case of at least one deletion.\n     * Tolerate predicates that reentrantly access the collection for\n     * read (but not write), so traverse once to find elements to\n     * delete, a second pass to physically expunge.\n     *\n     * @param beg valid index of first element to be deleted\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkInvariants()",
    "returnType" : "void",
    "comment" : " debugging ",
    "links" : [ ]
  }, {
    "name" : "private boolean invariantsSatisfied()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this queue from a stream (that is, deserializes it).\n     *\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.InvalidObjectException if invariants are violated\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static final int inc(int i, int modulus)", " static final int dec(int i, int modulus)", " final E itemAt(int i)", " static E itemAt(Object[] items, int i)", "private void enqueue(E e)", "private E dequeue()", " void removeAt(final int removeIndex)", "public boolean add(E e)", "public boolean offer(E e)", "public void put(E e) throws InterruptedException", "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException", "public E poll()", "public E take() throws InterruptedException", "public E poll(long timeout, TimeUnit unit) throws InterruptedException", "public E peek()", "public int size()", "public int remainingCapacity()", "public boolean remove(Object o)", "public boolean contains(Object o)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public String toString()", "public void clear()", "private static void circularClear(Object[] items, int i, int end)", "public int drainTo(Collection<? super E> c)", "public int drainTo(Collection<? super E> c, int maxElements)", "public Iterator<E> iterator()", "public Spliterator<E> spliterator()", "public void forEach(Consumer<? super E> action)", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "private boolean bulkRemove(Predicate<? super E> filter)", "private static long[] nBits(int n)", "private static void setBit(long[] bits, int i)", "private static boolean isClear(long[] bits, int i)", "private int distanceNonEmpty(int i, int j)", "private boolean bulkRemoveModified(Predicate<? super E> filter, final int beg)", " void checkInvariants()", "private boolean invariantsSatisfied()", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "items", "takeIndex", "putIndex", "count", "lock", "notEmpty", "notFull", "itrs" ]
}