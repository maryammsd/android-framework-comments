{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/NetworkTrafficAnnotationTag.java",
  "packageName" : "org.chromium.net",
  "className" : "NetworkTrafficAnnotationTag",
  "comment" : "\n * Network Traffic Annotations document the purpose of a particular network request, and its impact\n * on privacy.\n *\n * This documentation is typically meant for system administrators in an enterprise setting. It\n * should be easy for them to read and understand, and answer the following questions:\n *\n *   1. When and why does Chrome make this network request?\n *   2. Does this network request send any sensitive data?\n *   3. Where does the request go? (e.g. a Google server, a website the user is viewing...)\n *   4. How can I disable it if I don't like it?\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_TRAFFIC_ANNOTATION_YET",
    "type" : "NetworkTrafficAnnotationTag",
    "comment" : "\n     * For network requests that aren't documented yet. These should be\n     * accompanied with a TODO with a bug/owner to write their documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "MISSING_TRAFFIC_ANNOTATION",
    "type" : "NetworkTrafficAnnotationTag",
    "comment" : "\n     * For network requests that don't need an annotation, because they're in an\n     * allowlisted file (see tools/traffic_annotation/safe_list.txt).\n     ",
    "links" : [ ]
  }, {
    "name" : "TRAFFIC_ANNOTATION_FOR_TESTS",
    "type" : "NetworkTrafficAnnotationTag",
    "comment" : " For network requests made in tests, don't bother writing documentation. ",
    "links" : [ ]
  }, {
    "name" : "mHashCode",
    "type" : "int",
    "comment" : " tell Java, \"No, I don't actually need this string at runtime\"? We should investigate.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NetworkTrafficAnnotationTag createComplete(String uniqueId, String proto)",
    "returnType" : "NetworkTrafficAnnotationTag",
    "comment" : "\n     * Create a self-contained tag describing a network request made by Chromium. This is the most\n     * common factory method.\n     *\n     * The C++ equivalent is DefineNetworkTrafficAnnotation().\n     *\n     * @param uniqueId a String that uniquely identifies this annotations across all of Chromium\n     *         source code.\n     * @param proto a text-encoded NetworkTrafficAnnotation protobuf (see\n     *         chrome/browser/privacy/traffic_annotation.proto).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHashCode()",
    "returnType" : "int",
    "comment" : "\n     * @return the hash code of uniqueId, which uniquely identifies this annotation.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int iterativeHash(String s)",
    "returnType" : "int",
    "comment" : "\n     * Returns the hashcode of a string, as per the recursive_hash() function used in C++ code.\n     *\n     * This is NOT the same as Java's built-in hashCode() function, because we really want to\n     * produce the same hashcode that auditor.py produces.\n     *\n     * @param s the String to calculate the hash on.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static NetworkTrafficAnnotationTag createComplete(String uniqueId, String proto)", "public int getHashCode()", " static int iterativeHash(String s)" ],
  "variableNames" : [ "NO_TRAFFIC_ANNOTATION_YET", "MISSING_TRAFFIC_ANNOTATION", "TRAFFIC_ANNOTATION_FOR_TESTS", "mHashCode" ]
}