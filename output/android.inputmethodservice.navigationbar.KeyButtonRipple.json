{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/inputmethodservice/navigationbar/KeyButtonRipple.java",
  "packageName" : "android.inputmethodservice.navigationbar",
  "className" : "KeyButtonRipple",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "GLOW_MAX_SCALE_FACTOR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOW_MAX_ALPHA",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOW_MAX_ALPHA_DARK",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION_SCALE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION_FADE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALPHA_OUT_INTERPOLATOR",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxWidthResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRipplePaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftProp",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopProp",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightProp",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottomProp",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRxProp",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRyProp",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaintProp",
    "type" : "CanvasProperty<Paint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlowScale",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPressed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawingHardwareGlow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastDark",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDark",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelayTouchFeedback",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportHardware",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningAnimations",
    "type" : "HashSet<Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpArray",
    "type" : "ArrayList<Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitHwTraceAnimator",
    "type" : "TraceAnimatorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnterHwTraceAnimator",
    "type" : "TraceAnimatorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "Type",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorListener",
    "type" : "AnimatorListenerAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void updateResources()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDarkIntensity(float darkIntensity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDelayTouchFeedback(boolean delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setType(Type type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Paint getRipplePaint()",
    "returnType" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawSoftware(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isHorizontal()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawHardware(RecordingCanvas c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getGlowAlpha()",
    "returnType" : "float",
    "comment" : " Gets the glow alpha, used by {@link android.animation.ObjectAnimator} via reflection. ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "public void setGlowAlpha(float x)",
    "returnType" : "void",
    "comment" : " Sets the glow alpha, used by {@link android.animation.ObjectAnimator} via reflection. ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "public float getGlowScale()",
    "returnType" : "float",
    "comment" : " Gets the glow scale, used by {@link android.animation.ObjectAnimator} via reflection. ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "public void setGlowScale(float x)",
    "returnType" : "void",
    "comment" : " Sets the glow scale, used by {@link android.animation.ObjectAnimator} via reflection. ",
    "links" : [ "android.animation.ObjectAnimator" ]
  }, {
    "name" : "private float getMaxGlowAlpha()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPressed(boolean pressed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void abortDelayedRipple()",
    "returnType" : "void",
    "comment" : "\n     * Abort the ripple while it is delayed and before shown used only when setShouldDelayStartTouch\n     * is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void endAnimations(String reason, boolean cancel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPressedSoftware(boolean pressed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enterSoftware()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void exitSoftware()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPressedHardware(boolean pressed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setExtendStart(CanvasProperty<Float> prop)",
    "returnType" : "void",
    "comment" : "\n     * Sets the left/top property for the round rect to {@code prop} depending on whether we are\n     * horizontal or vertical mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "private CanvasProperty<Float> getExtendStart()",
    "returnType" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setExtendEnd(CanvasProperty<Float> prop)",
    "returnType" : "void",
    "comment" : "\n     * Sets the right/bottom property for the round rect to {@code prop} depending on whether we are\n     * horizontal or vertical mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "private CanvasProperty<Float> getExtendEnd()",
    "returnType" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getExtendSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getRippleSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enterHardware()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void exitHardware()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void updateResources()", "public void setDarkIntensity(float darkIntensity)", "public void setDelayTouchFeedback(boolean delay)", "public void setType(Type type)", "private Paint getRipplePaint()", "private void drawSoftware(Canvas canvas)", "public void draw(Canvas canvas)", "public void setAlpha(int alpha)", "public void setColorFilter(ColorFilter colorFilter)", "public int getOpacity()", "private boolean isHorizontal()", "private void drawHardware(RecordingCanvas c)", "public float getGlowAlpha()", "public void setGlowAlpha(float x)", "public float getGlowScale()", "public void setGlowScale(float x)", "private float getMaxGlowAlpha()", "protected boolean onStateChange(int[] state)", "public boolean setVisible(boolean visible, boolean restart)", "public void jumpToCurrentState()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public void setPressed(boolean pressed)", "public void abortDelayedRipple()", "private void endAnimations(String reason, boolean cancel)", "private void setPressedSoftware(boolean pressed)", "private void enterSoftware()", "private void exitSoftware()", "private void setPressedHardware(boolean pressed)", "private void setExtendStart(CanvasProperty<Float> prop)", "private CanvasProperty<Float> getExtendStart()", "private void setExtendEnd(CanvasProperty<Float> prop)", "private CanvasProperty<Float> getExtendEnd()", "private int getExtendSize()", "private int getRippleSize()", "private void enterHardware()", "private void exitHardware()" ],
  "variableNames" : [ "GLOW_MAX_SCALE_FACTOR", "GLOW_MAX_ALPHA", "GLOW_MAX_ALPHA_DARK", "ANIMATION_DURATION_SCALE", "ANIMATION_DURATION_FADE", "ALPHA_OUT_INTERPOLATOR", "mMaxWidthResource", "mRipplePaint", "mLeftProp", "mTopProp", "mRightProp", "mBottomProp", "mRxProp", "mRyProp", "mPaintProp", "mGlowAlpha", "mGlowScale", "mPressed", "mVisible", "mDrawingHardwareGlow", "mMaxWidth", "mLastDark", "mDark", "mDelayTouchFeedback", "mInterpolator", "mSupportHardware", "mTargetView", "mHandler", "mRunningAnimations", "mTmpArray", "mExitHwTraceAnimator", "mEnterHwTraceAnimator", "mType", "mAnimatorListener" ]
}