{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/ScanRecord.java",
  "packageName" : "android.bluetooth.le",
  "className" : "ScanRecord",
  "comment" : "\n * Represents a scan record from Bluetooth LE scan.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_FLAGS",
    "type" : "int",
    "comment" : " For more details refer to Bluetooth 4.1 specification, Volume 3, Part C, Section 18.",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LOCAL_NAME_SHORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LOCAL_NAME_COMPLETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_TX_POWER_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_DATA_16_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_DATA_32_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_DATA_128_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_MANUFACTURER_SPECIFIC_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertiseFlags",
    "type" : "int",
    "comment" : " Flags of the advertising data.",
    "links" : [ ]
  }, {
    "name" : "mServiceUuids",
    "type" : "List<ParcelUuid>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSolicitationUuids",
    "type" : "List<ParcelUuid>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerSpecificData",
    "type" : "SparseArray<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceData",
    "type" : "Map<ParcelUuid, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxPowerLevel",
    "type" : "int",
    "comment" : " Transmission power level(in dB).",
    "links" : [ ]
  }, {
    "name" : "mDeviceName",
    "type" : "String",
    "comment" : " Local name of the Bluetooth LE device.",
    "links" : [ ]
  }, {
    "name" : "mBytes",
    "type" : "byte[]",
    "comment" : " Raw bytes of scan record.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getAdvertiseFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the advertising flags indicating the discoverable mode and capability of the device.\n     * Returns -1 if the flag field is not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ParcelUuid> getServiceUuids()",
    "returnType" : "List<ParcelUuid>",
    "comment" : "\n     * Returns a list of service UUIDs within the advertisement that are used to identify the\n     * bluetooth GATT services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ParcelUuid> getServiceSolicitationUuids()",
    "returnType" : "List<ParcelUuid>",
    "comment" : "\n     * Returns a list of service solicitation UUIDs within the advertisement that are used to\n     * identify the Bluetooth GATT services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<byte[]> getManufacturerSpecificData()",
    "returnType" : "SparseArray<byte[]>",
    "comment" : "\n     * Returns a sparse array of manufacturer identifier and its corresponding manufacturer specific\n     * data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getManufacturerSpecificData(int manufacturerId)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the manufacturer specific data associated with the manufacturer id. Returns\n     * {@code null} if the {@code manufacturerId} is not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<ParcelUuid, byte[]> getServiceData()",
    "returnType" : "Map<ParcelUuid, byte[]>",
    "comment" : "\n     * Returns a map of service UUID and its corresponding service data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getServiceData(ParcelUuid serviceDataUuid)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the service data byte array associated with the {@code serviceUuid}. Returns\n     * {@code null} if the {@code serviceDataUuid} is not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTxPowerLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the transmission power level of the packet in dBm. Returns {@link Integer#MIN_VALUE}\n     * if the field is not set. This value can be used to calculate the path loss of a received\n     * packet using the following equation:\n     * <p>\n     * <code>pathloss = txPowerLevel - rssi</code>\n     ",
    "links" : [ "#MIN_VALUE" ]
  }, {
    "name" : "public String getDeviceName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the local name of the BLE device. This is a UTF-8 encoded string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns raw bytes of scan record.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScanRecord parseFromBytes(byte[] scanRecord)",
    "returnType" : "ScanRecord",
    "comment" : "\n     * Parse scan record bytes to {@link ScanRecord}.\n     * <p>\n     * The format is defined in Bluetooth 4.1 specification, Volume 3, Part C, Section 11 and 18.\n     * <p>\n     * All numerical multi-byte entities and values shall use little-endian <strong>byte</strong>\n     * order.\n     *\n     * @param scanRecord The scan record of Bluetooth LE advertisement and/or scan response.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.le.ScanRecord" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int parseServiceUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceUuids)",
    "returnType" : "int",
    "comment" : " Parse service UUIDs.",
    "links" : [ ]
  }, {
    "name" : "private static int parseServiceSolicitationUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceSolicitationUuids)",
    "returnType" : "int",
    "comment" : "\n     * Parse service Solicitation UUIDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] extractBytes(byte[] scanRecord, int start, int length)",
    "returnType" : "byte[]",
    "comment" : " Helper method to extract bytes from byte array.",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DATA_TYPE_FLAGS", "DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL", "DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE", "DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL", "DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE", "DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL", "DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE", "DATA_TYPE_LOCAL_NAME_SHORT", "DATA_TYPE_LOCAL_NAME_COMPLETE", "DATA_TYPE_TX_POWER_LEVEL", "DATA_TYPE_SERVICE_DATA_16_BIT", "DATA_TYPE_SERVICE_DATA_32_BIT", "DATA_TYPE_SERVICE_DATA_128_BIT", "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT", "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT", "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT", "DATA_TYPE_MANUFACTURER_SPECIFIC_DATA", "mAdvertiseFlags", "mServiceUuids", "mServiceSolicitationUuids", "mManufacturerSpecificData", "mServiceData", "mTxPowerLevel", "mDeviceName", "mBytes" ],
  "methodNames" : [ "public int getAdvertiseFlags()", "public List<ParcelUuid> getServiceUuids()", "public List<ParcelUuid> getServiceSolicitationUuids()", "public SparseArray<byte[]> getManufacturerSpecificData()", "public byte[] getManufacturerSpecificData(int manufacturerId)", "public Map<ParcelUuid, byte[]> getServiceData()", "public byte[] getServiceData(ParcelUuid serviceDataUuid)", "public int getTxPowerLevel()", "public String getDeviceName()", "public byte[] getBytes()", "public static ScanRecord parseFromBytes(byte[] scanRecord)", "public String toString()", "private static int parseServiceUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceUuids)", "private static int parseServiceSolicitationUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceSolicitationUuids)", "private static byte[] extractBytes(byte[] scanRecord, int start, int length)" ]
}