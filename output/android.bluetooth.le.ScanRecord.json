{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/ScanRecord.java",
  "packageName" : "android.bluetooth.le",
  "className" : "ScanRecord",
  "comment" : " Represents a scan record from Bluetooth LE scan. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_NONE",
    "type" : "int",
    "comment" : " Data type is not set for the filter. Will not filter advertising data type. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_FLAGS",
    "type" : "int",
    "comment" : " Data type is Flags, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL",
    "type" : "int",
    "comment" : "\n     * Data type is Incomplete List of 16-bit Service Class UUIDs, see the Bluetooth Generic Access\n     * Profile for the details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Data type is Complete List of 16-bit Service Class UUIDs, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL",
    "type" : "int",
    "comment" : "\n     * Data type is Incomplete List of 32-bit Service Class UUIDs, see the Bluetooth Generic Access\n     * Profile for the details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Data type is Complete List of 32-bit Service Class UUIDs, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL",
    "type" : "int",
    "comment" : "\n     * Data type is Incomplete List of 128-bit Service Class UUIDs, see the Bluetooth Generic Access\n     * Profile for the details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Data type is Complete List of 128-bit Service Class UUIDs, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LOCAL_NAME_SHORT",
    "type" : "int",
    "comment" : "\n     * Data type is Shortened Local Name, see the Bluetooth Generic Access Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LOCAL_NAME_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Data type is Complete Local Name, see the Bluetooth Generic Access Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_TX_POWER_LEVEL",
    "type" : "int",
    "comment" : " Data type is Tx Power Level, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_CLASS_OF_DEVICE",
    "type" : "int",
    "comment" : " Data type is Class of Device, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SIMPLE_PAIRING_HASH_C",
    "type" : "int",
    "comment" : "\n     * Data type is Simple Pairing Hash C, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R",
    "type" : "int",
    "comment" : "\n     * Data type is Simple Pairing Randomizer R, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_DEVICE_ID",
    "type" : "int",
    "comment" : " Data type is Device ID, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS",
    "type" : "int",
    "comment" : "\n     * Data type is Security Manager Out of Band Flags, see the Bluetooth Generic Access Profile for\n     * more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE",
    "type" : "int",
    "comment" : "\n     * Data type is Slave Connection Interval Range, see the Bluetooth Generic Access Profile for\n     * more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT",
    "type" : "int",
    "comment" : "\n     * Data type is List of 16-bit Service Solicitation UUIDs, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT",
    "type" : "int",
    "comment" : "\n     * Data type is List of 128-bit Service Solicitation UUIDs, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_DATA_16_BIT",
    "type" : "int",
    "comment" : "\n     * Data type is Service Data - 16-bit UUID, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_PUBLIC_TARGET_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Data type is Public Target Address, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_RANDOM_TARGET_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Data type is Random Target Address, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_APPEARANCE",
    "type" : "int",
    "comment" : " Data type is Appearance, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_ADVERTISING_INTERVAL",
    "type" : "int",
    "comment" : "\n     * Data type is Advertising Interval, see the Bluetooth Generic Access Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Data type is LE Bluetooth Device Address, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LE_ROLE",
    "type" : "int",
    "comment" : " Data type is LE Role, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SIMPLE_PAIRING_HASH_C_256",
    "type" : "int",
    "comment" : "\n     * Data type is Simple Pairing Hash C-256, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256",
    "type" : "int",
    "comment" : "\n     * Data type is Simple Pairing Randomizer R-256, see the Bluetooth Generic Access Profile for\n     * more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT",
    "type" : "int",
    "comment" : "\n     * Data type is List of 32-bit Service Solicitation UUIDs, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_DATA_32_BIT",
    "type" : "int",
    "comment" : "\n     * Data type is Service Data - 32-bit UUID, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_SERVICE_DATA_128_BIT",
    "type" : "int",
    "comment" : "\n     * Data type is Service Data - 128-bit UUID, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE",
    "type" : "int",
    "comment" : "\n     * Data type is LE Secure Connections Confirmation Value, see the Bluetooth Generic Access\n     * Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE",
    "type" : "int",
    "comment" : "\n     * Data type is LE Secure Connections Random Value, see the Bluetooth Generic Access Profile for\n     * more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_URI",
    "type" : "int",
    "comment" : " Data type is URI, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_INDOOR_POSITIONING",
    "type" : "int",
    "comment" : "\n     * Data type is Indoor Positioning, see the Bluetooth Generic Access Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_TRANSPORT_DISCOVERY_DATA",
    "type" : "int",
    "comment" : "\n     * Data type is Transport Discovery Data, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_LE_SUPPORTED_FEATURES",
    "type" : "int",
    "comment" : "\n     * Data type is LE Supported Features, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION",
    "type" : "int",
    "comment" : "\n     * Data type is Channel Map Update Indication, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_PB_ADV",
    "type" : "int",
    "comment" : " Data type is PB-ADV, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_MESH_MESSAGE",
    "type" : "int",
    "comment" : " Data type is Mesh Message, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_MESH_BEACON",
    "type" : "int",
    "comment" : " Data type is Mesh Beacon, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_BIG_INFO",
    "type" : "int",
    "comment" : " Data type is BIGInfo, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_BROADCAST_CODE",
    "type" : "int",
    "comment" : " Data type is Broadcast_Code, see the Bluetooth Generic Access Profile for more details. ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_RESOLVABLE_SET_IDENTIFIER",
    "type" : "int",
    "comment" : "\n     * Data type is Resolvable Set Identifier, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_ADVERTISING_INTERVAL_LONG",
    "type" : "int",
    "comment" : "\n     * Data type is Advertising Interval - long, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_3D_INFORMATION_DATA",
    "type" : "int",
    "comment" : "\n     * Data type is 3D Information Data, see the Bluetooth Generic Access Profile for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TYPE_MANUFACTURER_SPECIFIC_DATA",
    "type" : "int",
    "comment" : "\n     * Data type is Manufacturer Specific Data, see the Bluetooth Generic Access Profile for more\n     * details.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdvertiseFlags",
    "type" : "int",
    "comment" : " Flags of the advertising data.",
    "links" : [ ]
  }, {
    "name" : "mServiceUuids",
    "type" : "List<ParcelUuid>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceSolicitationUuids",
    "type" : "List<ParcelUuid>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerSpecificData",
    "type" : "SparseArray<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceData",
    "type" : "Map<ParcelUuid, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxPowerLevel",
    "type" : "int",
    "comment" : " Transmission power level(in dB).",
    "links" : [ ]
  }, {
    "name" : "mDeviceName",
    "type" : "String",
    "comment" : " Local name of the Bluetooth LE device.",
    "links" : [ ]
  }, {
    "name" : "mBytes",
    "type" : "byte[]",
    "comment" : " Raw bytes of scan record.",
    "links" : [ ]
  }, {
    "name" : "mAdvertisingDataMap",
    "type" : "Map<Integer, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportDiscoveryData",
    "type" : "TransportDiscoveryData",
    "comment" : " Transport Discovery data.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getAdvertiseFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the advertising flags indicating the discoverable mode and capability of the device.\n     * Returns -1 if the flag field is not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ParcelUuid> getServiceUuids()",
    "returnType" : "List<ParcelUuid>",
    "comment" : "\n     * Returns a list of service UUIDs within the advertisement that are used to identify the\n     * bluetooth GATT services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ParcelUuid> getServiceSolicitationUuids()",
    "returnType" : "List<ParcelUuid>",
    "comment" : "\n     * Returns a list of service solicitation UUIDs within the advertisement that are used to\n     * identify the Bluetooth GATT services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<byte[]> getManufacturerSpecificData()",
    "returnType" : "SparseArray<byte[]>",
    "comment" : "\n     * Returns a sparse array of manufacturer identifier and its corresponding manufacturer specific\n     * data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getManufacturerSpecificData(int manufacturerId)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the manufacturer specific data associated with the manufacturer id. Returns {@code\n     * null} if the {@code manufacturerId} is not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<ParcelUuid, byte[]> getServiceData()",
    "returnType" : "Map<ParcelUuid, byte[]>",
    "comment" : " Returns a map of service UUID and its corresponding service data. ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getServiceData(ParcelUuid serviceDataUuid)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the service data byte array associated with the {@code serviceUuid}. Returns {@code\n     * null} if the {@code serviceDataUuid} is not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTxPowerLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the transmission power level of the packet in dBm. Returns {@link Integer#MIN_VALUE}\n     * if the field is not set. This value can be used to calculate the path loss of a received\n     * packet using the following equation:\n     *\n     * <p><code>pathloss = txPowerLevel - rssi</code>\n     ",
    "links" : [ "#MIN_VALUE" ]
  }, {
    "name" : "public String getDeviceName()",
    "returnType" : "String",
    "comment" : " Returns the local name of the BLE device. This is a UTF-8 encoded string. ",
    "links" : [ ]
  }, {
    "name" : "public Map<Integer, byte[]> getAdvertisingDataMap()",
    "returnType" : "Map<Integer, byte[]>",
    "comment" : "\n     * Returns a map of advertising data type and its corresponding advertising data. The values of\n     * advertising data type are defined in the Bluetooth Generic Access Profile\n     * (https://www.bluetooth.com/specifications/assigned-numbers/)\n     ",
    "links" : [ ]
  }, {
    "name" : "public TransportDiscoveryData getTransportDiscoveryData()",
    "returnType" : "TransportDiscoveryData",
    "comment" : "\n     * Returns Transport Discovery data, {@code null} if Transport Discovery data is not found.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytes()",
    "returnType" : "byte[]",
    "comment" : " Returns raw bytes of scan record. ",
    "links" : [ ]
  }, {
    "name" : "public boolean matchesAnyField(@NonNull Predicate<byte[]> matcher)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if any fields contained inside this scan record are matched by the given matcher.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScanRecord parseFromBytes(byte[] scanRecord)",
    "returnType" : "ScanRecord",
    "comment" : "\n     * Parse scan record bytes to {@link ScanRecord}.\n     *\n     * <p>The format is defined in Bluetooth 4.1 specification, Volume 3, Part C, Section 11 and 18.\n     *\n     * <p>All numerical multi-byte entities and values shall use little-endian <strong>byte</strong>\n     * order.\n     *\n     * @param scanRecord The scan record of Bluetooth LE advertisement and/or scan response.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.le.ScanRecord" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int parseServiceUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceUuids)",
    "returnType" : "int",
    "comment" : " Parse service UUIDs.",
    "links" : [ ]
  }, {
    "name" : "private static int parseServiceSolicitationUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceSolicitationUuids)",
    "returnType" : "int",
    "comment" : " Parse service Solicitation UUIDs. ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] extractBytes(byte[] scanRecord, int start, int length)",
    "returnType" : "byte[]",
    "comment" : " Helper method to extract bytes from byte array.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getAdvertiseFlags()", "public List<ParcelUuid> getServiceUuids()", "public List<ParcelUuid> getServiceSolicitationUuids()", "public SparseArray<byte[]> getManufacturerSpecificData()", "public byte[] getManufacturerSpecificData(int manufacturerId)", "public Map<ParcelUuid, byte[]> getServiceData()", "public byte[] getServiceData(ParcelUuid serviceDataUuid)", "public int getTxPowerLevel()", "public String getDeviceName()", "public Map<Integer, byte[]> getAdvertisingDataMap()", "public TransportDiscoveryData getTransportDiscoveryData()", "public byte[] getBytes()", "public boolean matchesAnyField(@NonNull Predicate<byte[]> matcher)", "public static ScanRecord parseFromBytes(byte[] scanRecord)", "public String toString()", "private static int parseServiceUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceUuids)", "private static int parseServiceSolicitationUuid(byte[] scanRecord, int currentPos, int dataLength, int uuidLength, List<ParcelUuid> serviceSolicitationUuids)", "private static byte[] extractBytes(byte[] scanRecord, int start, int length)" ],
  "variableNames" : [ "TAG", "DATA_TYPE_NONE", "DATA_TYPE_FLAGS", "DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL", "DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE", "DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL", "DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE", "DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL", "DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE", "DATA_TYPE_LOCAL_NAME_SHORT", "DATA_TYPE_LOCAL_NAME_COMPLETE", "DATA_TYPE_TX_POWER_LEVEL", "DATA_TYPE_CLASS_OF_DEVICE", "DATA_TYPE_SIMPLE_PAIRING_HASH_C", "DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R", "DATA_TYPE_DEVICE_ID", "DATA_TYPE_SECURITY_MANAGER_OUT_OF_BAND_FLAGS", "DATA_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE", "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_16_BIT", "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_128_BIT", "DATA_TYPE_SERVICE_DATA_16_BIT", "DATA_TYPE_PUBLIC_TARGET_ADDRESS", "DATA_TYPE_RANDOM_TARGET_ADDRESS", "DATA_TYPE_APPEARANCE", "DATA_TYPE_ADVERTISING_INTERVAL", "DATA_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS", "DATA_TYPE_LE_ROLE", "DATA_TYPE_SIMPLE_PAIRING_HASH_C_256", "DATA_TYPE_SIMPLE_PAIRING_RANDOMIZER_R_256", "DATA_TYPE_SERVICE_SOLICITATION_UUIDS_32_BIT", "DATA_TYPE_SERVICE_DATA_32_BIT", "DATA_TYPE_SERVICE_DATA_128_BIT", "DATA_TYPE_LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE", "DATA_TYPE_LE_SECURE_CONNECTIONS_RANDOM_VALUE", "DATA_TYPE_URI", "DATA_TYPE_INDOOR_POSITIONING", "DATA_TYPE_TRANSPORT_DISCOVERY_DATA", "DATA_TYPE_LE_SUPPORTED_FEATURES", "DATA_TYPE_CHANNEL_MAP_UPDATE_INDICATION", "DATA_TYPE_PB_ADV", "DATA_TYPE_MESH_MESSAGE", "DATA_TYPE_MESH_BEACON", "DATA_TYPE_BIG_INFO", "DATA_TYPE_BROADCAST_CODE", "DATA_TYPE_RESOLVABLE_SET_IDENTIFIER", "DATA_TYPE_ADVERTISING_INTERVAL_LONG", "DATA_TYPE_3D_INFORMATION_DATA", "DATA_TYPE_MANUFACTURER_SPECIFIC_DATA", "mAdvertiseFlags", "mServiceUuids", "mServiceSolicitationUuids", "mManufacturerSpecificData", "mServiceData", "mTxPowerLevel", "mDeviceName", "mBytes", "mAdvertisingDataMap", "mTransportDiscoveryData" ]
}