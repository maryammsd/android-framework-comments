{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/LoadedApk.java",
  "packageName" : "android.app",
  "className" : "LoadedApk",
  "comment" : "\n * Local state maintained about a currently loaded .apk.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityThread",
    "type" : "ActivityThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplicationInfo",
    "type" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyOverlayDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayPaths",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLibDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataDirFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceProtectedDataDirFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCredentialProtectedDataDirFile",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityViolation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludeCode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegisterPackage",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayAdjustments",
    "type" : "DisplayAdjustments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : " WARNING: This may change. Don't hold external references to it. ",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplication",
    "type" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitAppDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitResDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitClassLoaderNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceivers",
    "type" : "ArrayMap<Context, ArrayMap<BroadcastReceiver, ReceiverDispatcher>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnregisteredReceivers",
    "type" : "ArrayMap<Context, ArrayMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServices",
    "type" : "ArrayMap<Context, ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnboundServices",
    "type" : "ArrayMap<Context, ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppComponentFactory",
    "type" : "AppComponentFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sApplications",
    "type" : "ArrayMap<String, Application>",
    "comment" : "\n     * We cache the instantiated application object for each package on this process here.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitLoader",
    "type" : "SplitDependencyLoaderImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Application getApplication()",
    "returnType" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApplicationInfo adjustNativeLibraryPaths(ApplicationInfo info)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)",
    "returnType" : "void",
    "comment" : "\n     * Sets application info about the system package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private AppComponentFactory createAppFactory(ApplicationInfo appInfo, ClassLoader cl)",
    "returnType" : "AppComponentFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AppComponentFactory getAppFactory()",
    "returnType" : "AppComponentFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTargetSdkVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSecurityViolation()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CompatibilityInfo getCompatibilityInfo()",
    "returnType" : "CompatibilityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCompatibilityInfo(CompatibilityInfo compatInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String[] getLibrariesFor(String packageName)",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the array of shared libraries that are listed as\n     * used by the given package.\n     *\n     * @param packageName the name of the package (note: not its\n     * file name)\n     * @return null-ok; the array of shared libraries, each one\n     * a fully-qualified path\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateApplicationInfo(@NonNull ApplicationInfo aInfo, @Nullable List<String> oldPaths)",
    "returnType" : "void",
    "comment" : "\n     * Update the ApplicationInfo for an app. If oldPaths is null, all the paths are considered\n     * new.\n     * @param aInfo The new ApplicationInfo to use for this LoadedApk\n     * @param oldPaths The code paths for the old ApplicationInfo object. null means no paths can\n     *                 be reused.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setApplicationInfo(ApplicationInfo aInfo)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSdkSandboxStorage(@Nullable String sdkSandboxClientAppVolumeUuid, String sdkSandboxClientAppPackage)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void makePaths(ActivityThread activityThread, ApplicationInfo aInfo, List<String> outZipPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendSharedLibrariesLibPathsIfNeeded(List<SharedLibraryInfo> sharedLibraries, ApplicationInfo aInfo, Set<String> outSeenPaths, List<String> outLibPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void makePaths(ActivityThread activityThread, boolean isBundledApp, ApplicationInfo aInfo, List<String> outZipPaths, List<String> outLibPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendApkLibPathIfNeeded(@NonNull String path, @NonNull ApplicationInfo applicationInfo, @Nullable List<String> outLibPaths)",
    "returnType" : "void",
    "comment" : "\n     * This method appends a path to the appropriate native library folder of a\n     * library if this library is hosted in an APK. This allows support for native\n     * shared libraries. The library API is determined based on the application\n     * ABI.\n     *\n     * @param path Path to the library.\n     * @param applicationInfo The application depending on the library.\n     * @param outLibPaths List to which to add the native lib path if needed.\n     ",
    "links" : [ ]
  }, {
    "name" : " ClassLoader getSplitClassLoader(String splitName) throws NameNotFoundException",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String[] getSplitPaths(String splitName) throws NameNotFoundException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ClassLoader createSharedLibraryLoader(SharedLibraryInfo sharedLibrary, boolean isBundledApp, String librarySearchPath, String libraryPermittedPath)",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Create a class loader for the {@code sharedLibrary}. Shared libraries are canonicalized,\n     * so if we already created a class loader with that shared library, we return it.\n     *\n     * Implementation notes: the canonicalization of shared libraries is something dex2oat\n     * also does.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Pair<List<ClassLoader>, List<ClassLoader>> createSharedLibrariesLoaders(List<SharedLibraryInfo> sharedLibraries, boolean isBundledApp, String librarySearchPath, String libraryPermittedPath)",
    "returnType" : "Pair<List<ClassLoader>, List<ClassLoader>>",
    "comment" : "\n     *\n     * @return a {@link Pair} of List<ClassLoader> where the first is for standard shared libraries\n     *         and the second is list for shared libraries that code should be loaded after the dex\n     ",
    "links" : [ "android.util.Pair" ]
  }, {
    "name" : "private StrictMode.ThreadPolicy allowThreadDiskReads()",
    "returnType" : "StrictMode.ThreadPolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setThreadPolicy(StrictMode.ThreadPolicy policy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StrictMode.VmPolicy allowVmViolations()",
    "returnType" : "StrictMode.VmPolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setVmPolicy(StrictMode.VmPolicy policy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createOrUpdateClassLoaderLocked(List<String> addedPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean canAccessDataDir()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether we can access the package's private data directory in order to be able to\n     * load code from it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerAppInfoToArt()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initializeJavaContextClassLoader()",
    "returnType" : "void",
    "comment" : "\n     * Setup value for Thread.getContextClassLoader(). If the\n     * package will not run in in a VM with other packages, we set\n     * the Java context ClassLoader to the\n     * PackageInfo.getClassLoader value. However, if this VM can\n     * contain multiple packages, we intead set the Java context\n     * ClassLoader to a proxy that will warn about the use of Java\n     * context ClassLoaders and then fall through to use the\n     * system ClassLoader.\n     *\n     * <p> Note that this is similar to but not the same as the\n     * android.content.Context.getClassLoader(). While both\n     * context class loaders are typically set to the\n     * PathClassLoader used to load the package archive in the\n     * single application per VM case, a single Android process\n     * may contain several Contexts executing on one thread with\n     * their own logical ClassLoaders while the Java context\n     * ClassLoader is a thread local. This is why in the case when\n     * we have multiple packages per VM we do not set the Java\n     * context ClassLoader to an arbitrary but instead warn the\n     * user to set their own if we detect that they are using a\n     * Java library that expects it to be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAppDir()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getLibDir()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getResDir()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getSplitAppDirs()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getSplitResDirs()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getOverlayDirs()",
    "returnType" : "String[]",
    "comment" : "\n     * Corresponds to {@link ApplicationInfo#resourceDirs}.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo#resourceDirs" ]
  }, {
    "name" : "public String[] getOverlayPaths()",
    "returnType" : "String[]",
    "comment" : "\n     * Corresponds to {@link ApplicationInfo#overlayPaths}.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo#overlayPaths" ]
  }, {
    "name" : "public String getDataDir()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDataDirFile()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDeviceProtectedDataDirFile()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCredentialProtectedDataDirFile()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Application makeApplication(boolean forceDefaultAppClass, Instrumentation instrumentation)",
    "returnType" : "Application",
    "comment" : "\n     * This is for 3p apps accessing this hidden API directly... in which case, we don't return\n     * the cached Application instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Application makeApplicationInner(boolean forceDefaultAppClass, Instrumentation instrumentation)",
    "returnType" : "Application",
    "comment" : "\n     * This is for all the (internal) callers, for which we do return the cached instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Application makeApplicationInner(boolean forceDefaultAppClass, Instrumentation instrumentation, boolean allowDuplicateInstances)",
    "returnType" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void rewriteRValues(ClassLoader cl, String packageName, int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeContextRegistrations(Context context, String who, String what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IIntentReceiver getReceiverDispatcher(BroadcastReceiver r, Context context, Handler handler, Instrumentation instrumentation, boolean registered)",
    "returnType" : "IIntentReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IIntentReceiver forgetReceiverDispatcher(Context context, BroadcastReceiver r)",
    "returnType" : "IIntentReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IServiceConnection getServiceDispatcher(ServiceConnection c, Context context, Handler handler, long flags)",
    "returnType" : "IServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IServiceConnection getServiceDispatcher(ServiceConnection c, Context context, Executor executor, long flags)",
    "returnType" : "IServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IServiceConnection getServiceDispatcherCommon(ServiceConnection c, Context context, Handler handler, Executor executor, long flags)",
    "returnType" : "IServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IServiceConnection lookupServiceDispatcher(ServiceConnection c, Context context)",
    "returnType" : "IServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IServiceConnection forgetServiceDispatcher(Context context, ServiceConnection c)",
    "returnType" : "IServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void checkAndUpdateApkPaths(ApplicationInfo expectedAppInfo)",
    "returnType" : "void",
    "comment" : "\n     * Check if the Apk paths in the cache are correct, and update them if they are not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkAndUpdateApkPaths(ActivityThread activityThread, ApplicationInfo expectedAppInfo, boolean cacheWithCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " Application getApplication()", "private static ApplicationInfo adjustNativeLibraryPaths(ApplicationInfo info)", " void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)", "private AppComponentFactory createAppFactory(ApplicationInfo appInfo, ClassLoader cl)", "public AppComponentFactory getAppFactory()", "public String getPackageName()", "public ApplicationInfo getApplicationInfo()", "public int getTargetSdkVersion()", "public boolean isSecurityViolation()", "public CompatibilityInfo getCompatibilityInfo()", "public void setCompatibilityInfo(CompatibilityInfo compatInfo)", "private static String[] getLibrariesFor(String packageName)", "public void updateApplicationInfo(@NonNull ApplicationInfo aInfo, @Nullable List<String> oldPaths)", "private boolean setApplicationInfo(ApplicationInfo aInfo)", " void setSdkSandboxStorage(@Nullable String sdkSandboxClientAppVolumeUuid, String sdkSandboxClientAppPackage)", "public static void makePaths(ActivityThread activityThread, ApplicationInfo aInfo, List<String> outZipPaths)", "private static void appendSharedLibrariesLibPathsIfNeeded(List<SharedLibraryInfo> sharedLibraries, ApplicationInfo aInfo, Set<String> outSeenPaths, List<String> outLibPaths)", "public static void makePaths(ActivityThread activityThread, boolean isBundledApp, ApplicationInfo aInfo, List<String> outZipPaths, List<String> outLibPaths)", "private static void appendApkLibPathIfNeeded(@NonNull String path, @NonNull ApplicationInfo applicationInfo, @Nullable List<String> outLibPaths)", " ClassLoader getSplitClassLoader(String splitName) throws NameNotFoundException", " String[] getSplitPaths(String splitName) throws NameNotFoundException", " ClassLoader createSharedLibraryLoader(SharedLibraryInfo sharedLibrary, boolean isBundledApp, String librarySearchPath, String libraryPermittedPath)", "private Pair<List<ClassLoader>, List<ClassLoader>> createSharedLibrariesLoaders(List<SharedLibraryInfo> sharedLibraries, boolean isBundledApp, String librarySearchPath, String libraryPermittedPath)", "private StrictMode.ThreadPolicy allowThreadDiskReads()", "private void setThreadPolicy(StrictMode.ThreadPolicy policy)", "private StrictMode.VmPolicy allowVmViolations()", "private void setVmPolicy(StrictMode.VmPolicy policy)", "private void createOrUpdateClassLoaderLocked(List<String> addedPaths)", "private boolean canAccessDataDir()", "public ClassLoader getClassLoader()", "private void registerAppInfoToArt()", "private void initializeJavaContextClassLoader()", "public String getAppDir()", "public String getLibDir()", "public String getResDir()", "public String[] getSplitAppDirs()", "public String[] getSplitResDirs()", "public String[] getOverlayDirs()", "public String[] getOverlayPaths()", "public String getDataDir()", "public File getDataDirFile()", "public File getDeviceProtectedDataDirFile()", "public File getCredentialProtectedDataDirFile()", "public AssetManager getAssets()", "public Resources getResources()", "public Application makeApplication(boolean forceDefaultAppClass, Instrumentation instrumentation)", "public Application makeApplicationInner(boolean forceDefaultAppClass, Instrumentation instrumentation)", "private Application makeApplicationInner(boolean forceDefaultAppClass, Instrumentation instrumentation, boolean allowDuplicateInstances)", "private void rewriteRValues(ClassLoader cl, String packageName, int id)", "public void removeContextRegistrations(Context context, String who, String what)", "public IIntentReceiver getReceiverDispatcher(BroadcastReceiver r, Context context, Handler handler, Instrumentation instrumentation, boolean registered)", "public IIntentReceiver forgetReceiverDispatcher(Context context, BroadcastReceiver r)", "public final IServiceConnection getServiceDispatcher(ServiceConnection c, Context context, Handler handler, long flags)", "public final IServiceConnection getServiceDispatcher(ServiceConnection c, Context context, Executor executor, long flags)", "private IServiceConnection getServiceDispatcherCommon(ServiceConnection c, Context context, Handler handler, Executor executor, long flags)", "public IServiceConnection lookupServiceDispatcher(ServiceConnection c, Context context)", "public final IServiceConnection forgetServiceDispatcher(Context context, ServiceConnection c)", "public static void checkAndUpdateApkPaths(ApplicationInfo expectedAppInfo)", "private static void checkAndUpdateApkPaths(ActivityThread activityThread, ApplicationInfo expectedAppInfo, boolean cacheWithCode)" ],
  "variableNames" : [ "TAG", "DEBUG", "mActivityThread", "mPackageName", "mApplicationInfo", "mAppDir", "mResDir", "mLegacyOverlayDirs", "mOverlayPaths", "mDataDir", "mLibDir", "mDataDirFile", "mDeviceProtectedDataDirFile", "mCredentialProtectedDataDirFile", "mBaseClassLoader", "mDefaultClassLoader", "mSecurityViolation", "mIncludeCode", "mRegisterPackage", "mDisplayAdjustments", "mResources", "mClassLoader", "mApplication", "mSplitNames", "mSplitAppDirs", "mSplitResDirs", "mSplitClassLoaderNames", "mReceivers", "mUnregisteredReceivers", "mServices", "mUnboundServices", "mAppComponentFactory", "sApplications", "mLock", "mSplitLoader" ]
}