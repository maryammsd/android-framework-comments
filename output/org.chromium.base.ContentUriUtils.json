{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ContentUriUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "ContentUriUtils",
  "comment" : " This class provides methods to access content URI schemes. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFileProviderUtil",
    "type" : "FileProviderUtil",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : " Guards access to sFileProviderUtil.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setFileProviderUtil(FileProviderUtil util)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Uri getContentUriFromFile(File file)",
    "returnType" : "Uri",
    "comment" : "\n     * Get a URI for |file| which has the image capture. This function assumes that path of |file|\n     * is based on the result of UiUtils.getDirectoryForImageCapture().\n     *\n     * @param file image capture file.\n     * @return URI for |file|.\n     * @throws IllegalArgumentException when the given File is outside the paths supported by the\n     *         provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int openContentUriForRead(String uriString)",
    "returnType" : "int",
    "comment" : "\n     * Opens the content URI for reading, and returns the file descriptor to\n     * the caller. The caller is responsible for closing the file descriptor.\n     *\n     * @param uriString the content URI to open\n     * @return file descriptor upon success, or -1 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean contentUriExists(String uriString)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a content URI exists.\n     *\n     * @param uriString the content URI to query.\n     * @return true if the URI exists, or false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getMimeType(String uriString)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the MIME type for the content URI.\n     *\n     * @param uriString the content URI to look up.\n     * @return MIME type or null if the input params are empty or invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static AssetFileDescriptor getAssetFileDescriptor(String uriString)",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Helper method to open a content URI and returns the ParcelFileDescriptor.\n     *\n     * @param uriString the content URI to open.\n     * @return AssetFileDescriptor of the content URI, or NULL if the file does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(Uri uri, Context context, String columnField)",
    "returnType" : "String",
    "comment" : "\n     * Method to resolve the display name of a content URI.\n     *\n     * @param uri         the content URI to be resolved.\n     * @param context     {@link Context} in interest.\n     * @param columnField the column field to query.\n     * @return the display name of the @code uri if present in the database\n     * or an empty string otherwise.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public static String maybeGetDisplayName(String uriString)",
    "returnType" : "String",
    "comment" : "\n     * Method to resolve the display name of a content URI if possible.\n     *\n     * @param uriString the content URI to look up.\n     * @return the display name of the uri if present in the database or null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isVirtualDocument(Uri uri)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the passed Uri represents a virtual document.\n     *\n     * @param uri the content URI to be resolved.\n     * @return True for virtual file, false for any other file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasVirtualFlag(Cursor cursor)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the passed cursor for a document has a virtual document flag.\n     *\n     * The called must close the passed cursor.\n     *\n     * @param cursor Cursor with COLUMN_FLAGS.\n     * @return True for virtual file, false for any other file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isContentUri(String uri)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether a Uri has content scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean delete(String uriString)",
    "returnType" : "boolean",
    "comment" : "\n     * Deletes a content uri from the system.\n     *\n     * @return True if the uri was deleted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getContentUriFromFilePath(String filePathString)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the content URI from the file path.\n     *\n     * @param filePathString the file path.\n     * @return content URI or null if the input params are invalid.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setFileProviderUtil(FileProviderUtil util)", "public static Uri getContentUriFromFile(File file)", "public static int openContentUriForRead(String uriString)", "public static boolean contentUriExists(String uriString)", "public static String getMimeType(String uriString)", "private static AssetFileDescriptor getAssetFileDescriptor(String uriString)", "public static String getDisplayName(Uri uri, Context context, String columnField)", "public static String maybeGetDisplayName(String uriString)", "private static boolean isVirtualDocument(Uri uri)", "private static boolean hasVirtualFlag(Cursor cursor)", "public static boolean isContentUri(String uri)", "public static boolean delete(String uriString)", "public static String getContentUriFromFilePath(String filePathString)" ],
  "variableNames" : [ "TAG", "sFileProviderUtil", "sLock" ]
}