{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/TouchInteractionController.java",
  "packageName" : "android.accessibilityservice",
  "className" : "TouchInteractionController",
  "comment" : "\n * This class allows a service to handle touch exploration and the detection of specialized\n * accessibility gestures. The service receives motion events and can match those motion events\n * against the gestures it supports. The service can also request the framework enter three other\n * states of operation for the duration of this interaction. Upon entering any of these states the\n * framework will take over and the service will not receive motion events until the start of a new\n * interaction. The states are as follows:\n *\n * <ul>\n *   <li>The service can tell the framework that this interaction is touch exploration. The user is\n *       trying to explore the screen rather than manipulate it. The framework will then convert the\n *       motion events to hover events to support touch exploration.\n *   <li>The service can tell the framework that this interaction is a dragging interaction where\n *       two fingers are used to execute a one-finger gesture such as scrolling the screen. The\n *       service must specify which of the two fingers should be passed through to rest of the input\n *       pipeline.\n *   <li>Finally, the service can request that the framework delegate this interaction, meaning pass\n *       it through to the rest of the input pipeline as-is.\n * </ul>\n *\n * When {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE } is enabled, this\n * controller will receive all motion events received by the framework for the specified display\n * when not touch-exploring or delegating. If the service classifies this interaction as touch\n * exploration or delegating the framework will stop sending motion events to the service for the\n * duration of this interaction. If the service classifies this interaction as a dragging\n * interaction the framework will send motion events to the service to allow the service to\n * determine if the interaction still qualifies as dragging or if it has become a delegating\n * interaction. If {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE } is disabled\n * this controller will not receive any motion events because touch interactions are being passed\n * through to the input pipeline unaltered.\n * Note that {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE }\n * requires setting {@link android.R.attr#canRequestTouchExplorationMode} as well.\n ",
  "links" : [ "android.R.attr#canRequestTouchExplorationMode", "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE" ],
  "variables" : [ {
    "name" : "STATE_CLEAR",
    "type" : "int",
    "comment" : " The state where the user is not touching the screen. ",
    "links" : [ ]
  }, {
    "name" : "STATE_TOUCH_INTERACTING",
    "type" : "int",
    "comment" : "\n     * The state where the user is touching the screen and the service is receiving motion events.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_TOUCH_EXPLORING",
    "type" : "int",
    "comment" : "\n     * The state where the user is explicitly exploring the screen. The service is not receiving\n     * motion events.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DRAGGING",
    "type" : "int",
    "comment" : "\n     * The state where the user is dragging with two fingers. The service is not receiving motion\n     * events. The selected finger is being dispatched to the rest of the input pipeline to execute\n     * the drag.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DELEGATING",
    "type" : "int",
    "comment" : "\n     * The user is performing a gesture which is being passed through to the input pipeline as-is.\n     * The service is not receiving motion events.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_POINTER_COUNT",
    "type" : "int",
    "comment" : " in frameworks/native/include/input/Input.h)",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "AccessibilityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceDetectsGestures",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "ArrayMap<Callback, Executor>",
    "comment" : " Map of callbacks to executors. Lazily created when adding the first callback. ",
    "links" : [ ]
  }, {
    "name" : "mQueuedMotionEvents",
    "type" : "Queue<MotionEvent>",
    "comment" : " A list of motion events that should be queued until a pending transition has taken place.",
    "links" : [ ]
  }, {
    "name" : "mStateChangeRequested",
    "type" : "boolean",
    "comment" : " Motion events will be queued and sent to listeners after the transition has taken place.",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : " The current state of the display.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerCallback(@Nullable Executor executor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified callback to the list of callbacks. The callback will\n     * run using on the specified {@link Executor}', or on the service's main thread if the\n     * Executor is {@code null}.\n     * @param callback the callback to add, must be non-null\n     * @param executor the executor for this callback, or {@code null} to execute on the service's\n     *     main thread\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "public boolean unregisterCallback(@NonNull Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters the specified callback.\n     *\n     * @param callback the callback to remove, must be non-null\n     * @return {@code true} if the callback was removed, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterAllCallbacks()",
    "returnType" : "void",
    "comment" : "\n     * Removes all callbacks and returns control of touch interactions to the framework.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onMotionEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches motion events to any registered callbacks. This should be called on the service's\n     * main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendEventToAllListeners(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onStateChanged(@State int state)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches motion events to any registered callbacks. This should be called on the service's\n     * main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setServiceDetectsGestures(boolean mode)",
    "returnType" : "void",
    "comment" : "\n     * When {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled, this\n     * controller will receive all motion events received by the framework for the specified display\n     * when not touch-exploring, delegating, or dragging. This allows the service to detect its own\n     * gestures, and use its own logic to judge when the framework should start touch-exploring,\n     * delegating, or dragging. If {@link\n     * AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE } is disabled this flag has no\n     * effect.\n     *\n     * @see AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE" ]
  }, {
    "name" : "public void requestTouchExploration()",
    "returnType" : "void",
    "comment" : "\n     * If {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled and at\n     * least one callback has been added for this display this function tells the framework to\n     * initiate touch exploration. Touch exploration will continue for the duration of this\n     * interaction.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE" ]
  }, {
    "name" : "public void requestDragging(int pointerId)",
    "returnType" : "void",
    "comment" : "\n     * If {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} and {@link If\n     * {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled and at least\n     * one callback has been added, this function tells the framework to initiate a dragging\n     * interaction using the specified pointer. The pointer's movements will be passed through to\n     * the rest of the input pipeline. Dragging is often used to perform two-finger scrolling.\n     *\n     * @param pointerId the pointer to be passed through to the rest of the input pipeline. If the\n     *            pointer id is valid but not actually present on the screen it will be ignored.\n     * @throws IllegalArgumentException if the pointer id is outside of the allowed range.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE", "If" ]
  }, {
    "name" : "public void requestDelegating()",
    "returnType" : "void",
    "comment" : "\n     * If {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} and {@link If\n     * {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled and at least\n     * one callback has been added, this function tells the framework to initiate a delegating\n     * interaction. Motion events will be passed through as-is to the rest of the input pipeline for\n     * the duration of this interaction.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE", "If" ]
  }, {
    "name" : "public void performClick()",
    "returnType" : "void",
    "comment" : "\n     * If {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} and {@link If\n     * {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled and at least\n     * one callback has been added, this function tells the framework to perform a click.\n     * The framework will first try to perform\n     * {@link AccessibilityNodeInfo.AccessibilityAction#ACTION_CLICK} on the item with\n     * accessibility focus. If that fails, the framework will simulate a click using motion events\n     * on the last location to have accessibility focus.\n     ",
    "links" : [ "AccessibilityNodeInfo.AccessibilityAction#ACTION_CLICK", "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE", "If" ]
  }, {
    "name" : "public void performLongClickAndStartDrag()",
    "returnType" : "void",
    "comment" : "\n     * If {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} and {@link If\n     * {@link AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled and at least\n     * one callback has been added, this function tells the framework to perform a long click.\n     * The framework will simulate a long click using motion events on the last location with\n     * accessibility focus and will delegate any movements to the rest of the input pipeline. This\n     * allows a user to double-tap and hold to trigger a drag and then execute that drag by moving\n     * their finger.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE", "If" ]
  }, {
    "name" : "private void validateTransitionRequest()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxPointerCount()",
    "returnType" : "int",
    "comment" : " @return the maximum number of pointers that this display will accept. ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : " @return the display id associated with this controller. ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * @return the current state of this controller.\n     * @see TouchInteractionController#STATE_CLEAR\n     * @see TouchInteractionController#STATE_DELEGATING\n     * @see TouchInteractionController#STATE_DRAGGING\n     * @see TouchInteractionController#STATE_TOUCH_EXPLORING\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : " Returns a string representation of the specified state. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerCallback(@Nullable Executor executor, @NonNull Callback callback)", "public boolean unregisterCallback(@NonNull Callback callback)", "public void unregisterAllCallbacks()", " void onMotionEvent(MotionEvent event)", "private void sendEventToAllListeners(MotionEvent event)", " void onStateChanged(@State int state)", "private void setServiceDetectsGestures(boolean mode)", "public void requestTouchExploration()", "public void requestDragging(int pointerId)", "public void requestDelegating()", "public void performClick()", "public void performLongClickAndStartDrag()", "private void validateTransitionRequest()", "public int getMaxPointerCount()", "public int getDisplayId()", "public int getState()", "public static String stateToString(int state)" ],
  "variableNames" : [ "STATE_CLEAR", "STATE_TOUCH_INTERACTING", "STATE_TOUCH_EXPLORING", "STATE_DRAGGING", "STATE_DELEGATING", "MAX_POINTER_COUNT", "mService", "mLock", "mDisplayId", "mServiceDetectsGestures", "mCallbacks", "mQueuedMotionEvents", "mStateChangeRequested", "mState" ]
}