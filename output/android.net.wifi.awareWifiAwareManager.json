{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/aware/WifiAwareManager.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "WifiAwareManager",
  "comment" : "\n * This class provides the primary API for managing Wi-Fi Aware operations:\n * discovery and peer-to-peer data connections.\n * <p>\n * The class provides access to:\n * <ul>\n * <li>Initialize a Aware cluster (peer-to-peer synchronization). Refer to\n * {@link #attach(AttachCallback, Handler)}.\n * <li>Create discovery sessions (publish or subscribe sessions). Refer to\n * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, Handler)} and\n * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)}.\n * <li>Create a Aware network specifier to be used with\n * {@link ConnectivityManager#requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback)}\n * to set-up a Aware connection with a peer. Refer to {@link WifiAwareNetworkSpecifier.Builder}.\n * </ul>\n * <p>\n *     Aware may not be usable when Wi-Fi is disabled (and other conditions). To validate that\n *     the functionality is available use the {@link #isAvailable()} function. To track\n *     changes in Aware usability register for the {@link #ACTION_WIFI_AWARE_STATE_CHANGED}\n *     broadcast. Note that this broadcast is not sticky - you should register for it and then\n *     check the above API to avoid a race condition.\n * <p>\n *     An application must use {@link #attach(AttachCallback, Handler)} to initialize a\n *     Aware cluster - before making any other Aware operation. Aware cluster membership is a\n *     device-wide operation - the API guarantees that the device is in a cluster or joins a\n *     Aware cluster (or starts one if none can be found). Information about attach success (or\n *     failure) are returned in callbacks of {@link AttachCallback}. Proceed with Aware\n *     discovery or connection setup only after receiving confirmation that Aware attach\n *     succeeded - {@link AttachCallback#onAttached(WifiAwareSession)}. When an\n *     application is finished using Aware it <b>must</b> use the\n *     {@link WifiAwareSession#close()} API to indicate to the Aware service that the device\n *     may detach from the Aware cluster. The device will actually disable Aware once the last\n *     application detaches.\n * <p>\n *     Once a Aware attach is confirmed use the\n *     {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, Handler)}\n *     or\n *     {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n *     Handler)} to create publish or subscribe Aware discovery sessions. Events are called on the\n *     provided callback object {@link DiscoverySessionCallback}. Specifically, the\n *     {@link DiscoverySessionCallback#onPublishStarted(PublishDiscoverySession)}\n *     and\n *     {@link DiscoverySessionCallback#onSubscribeStarted(\n *SubscribeDiscoverySession)}\n *     return {@link PublishDiscoverySession} and\n *     {@link SubscribeDiscoverySession}\n *     objects respectively on which additional session operations can be performed, e.g. updating\n *     the session {@link PublishDiscoverySession#updatePublish(PublishConfig)} and\n *     {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. Sessions can\n *     also be used to send messages using the\n *     {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} APIs. When an\n *     application is finished with a discovery session it <b>must</b> terminate it using the\n *     {@link DiscoverySession#close()} API.\n * <p>\n *    Creating connections between Aware devices is managed by the standard\n *    {@link ConnectivityManager#requestNetwork(NetworkRequest,\n *    ConnectivityManager.NetworkCallback)}.\n *    The {@link NetworkRequest} object should be constructed with:\n *    <ul>\n *        <li>{@link NetworkRequest.Builder#addTransportType(int)} of\n *        {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.\n *        <li>{@link NetworkRequest.Builder#setNetworkSpecifier(String)} using\n *        {@link WifiAwareNetworkSpecifier.Builder}.\n *    </ul>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : " STOPSHIP if true",
    "links" : [ ]
  }, {
    "name" : "ACTION_WIFI_AWARE_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action to indicate that the state of Wi-Fi Aware availability has changed.\n     * Use the {@link #isAvailable()} to query the current status.\n     * This broadcast is <b>not</b> sticky, use the {@link #isAvailable()} API after registering\n     * the broadcast to check the current state of Wi-Fi Aware.\n     * <p>Note: The broadcast is only delivered to registered receivers - no manifest registered\n     * components will be launched.\n     ",
    "links" : [ "#isAvailable", "#isAvailable" ]
  }, {
    "name" : "WIFI_AWARE_DATA_PATH_ROLE_INITIATOR",
    "type" : "int",
    "comment" : "\n     * Connection creation role is that of INITIATOR. Used to create a network specifier string\n     * when requesting a Aware network.\n     *\n     * @see WifiAwareSession#createNetworkSpecifierOpen(int, byte[])\n     * @see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_AWARE_DATA_PATH_ROLE_RESPONDER",
    "type" : "int",
    "comment" : "\n     * Connection creation role is that of RESPONDER. Used to create a network specifier string\n     * when requesting a Aware network.\n     *\n     * @see WifiAwareSession#createNetworkSpecifierOpen(int, byte[])\n     * @see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IWifiAwareManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " lock access to the following vars",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current status of Aware API: whether or not Aware is available. To track\n     * changes in the state of Aware API register for the\n     * {@link #ACTION_WIFI_AWARE_STATE_CHANGED} broadcast.\n     *\n     * @return A boolean indicating whether the app can use the Aware API at this time (true) or\n     * not (false).\n     ",
    "links" : [ "#ACTION_WIFI_AWARE_STATE_CHANGED" ]
  }, {
    "name" : "public Characteristics getCharacteristics()",
    "returnType" : "Characteristics",
    "comment" : "\n     * Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify\n     * limitations on configurations, e.g. the maximum service name length.\n     *\n     * @return An object specifying configuration limitations of Aware.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attach(@NonNull AttachCallback attachCallback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or\n     * create connections to peers. The device will attach to an existing cluster if it can find\n     * one or create a new cluster (if it is the first to enable Aware in its vicinity). Results\n     * (e.g. successful attach to a cluster) are provided to the {@code attachCallback} object.\n     * An application <b>must</b> call {@link WifiAwareSession#close()} when done with the\n     * Wi-Fi Aware object.\n     * <p>\n     * Note: a Aware cluster is a shared resource - if the device is already attached to a cluster\n     * then this function will simply indicate success immediately using the same {@code\n     * attachCallback}.\n     *\n     * @param attachCallback A callback for attach events, extended from\n     * {@link AttachCallback}.\n     * @param handler The Handler on whose thread to execute the callbacks of the {@code\n     * attachCallback} object. If a null is provided then the application's main thread will be\n     *                used.\n     ",
    "links" : [ "WifiAwareSession#close", "AttachCallback" ]
  }, {
    "name" : "public void attach(@NonNull AttachCallback attachCallback, @NonNull IdentityChangedListener identityChangedListener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or\n     * create connections to peers. The device will attach to an existing cluster if it can find\n     * one or create a new cluster (if it is the first to enable Aware in its vicinity). Results\n     * (e.g. successful attach to a cluster) are provided to the {@code attachCallback} object.\n     * An application <b>must</b> call {@link WifiAwareSession#close()} when done with the\n     * Wi-Fi Aware object.\n     * <p>\n     * Note: a Aware cluster is a shared resource - if the device is already attached to a cluster\n     * then this function will simply indicate success immediately using the same {@code\n     * attachCallback}.\n     * <p>\n     * This version of the API attaches a listener to receive the MAC address of the Aware interface\n     * on startup and whenever it is updated (it is randomized at regular intervals for privacy).\n     * The application must have the {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission to execute this attach request. Otherwise, use the\n     * {@link #attach(AttachCallback, Handler)} version. Note that aside from permission\n     * requirements this listener will wake up the host at regular intervals causing higher power\n     * consumption, do not use it unless the information is necessary (e.g. for OOB discovery).\n     *\n     * @param attachCallback A callback for attach events, extended from\n     * {@link AttachCallback}.\n     * @param identityChangedListener A listener for changed identity, extended from\n     * {@link IdentityChangedListener}.\n     * @param handler The Handler on whose thread to execute the callbacks of the {@code\n     * attachCallback} and {@code identityChangedListener} objects. If a null is provided then the\n     *                application's main thread will be used.\n     ",
    "links" : [ "WifiAwareSession#close", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#attach", "AttachCallback", "IdentityChangedListener" ]
  }, {
    "name" : "public void attach(Handler handler, ConfigRequest configRequest, AttachCallback attachCallback, IdentityChangedListener identityChangedListener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect(int clientId, Binder binder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void publish(int clientId, Looper looper, PublishConfig publishConfig, DiscoverySessionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updatePublish(int clientId, int sessionId, PublishConfig publishConfig)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void subscribe(int clientId, Looper looper, SubscribeConfig subscribeConfig, DiscoverySessionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateSubscribe(int clientId, int sessionId, SubscribeConfig subscribeConfig)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void terminateSession(int clientId, int sessionId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendMessage(int clientId, int sessionId, PeerHandle peerHandle, byte[] message, int messageId, int retryCount)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void requestMacAddresses(int uid, List<Integer> peerIds, IWifiAwareMacAddressProvider callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifier(int clientId, int role, int sessionId, @NonNull PeerHandle peerHandle, @Nullable byte[] pmk, @Nullable String passphrase)",
    "returnType" : "NetworkSpecifier",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSpecifier createNetworkSpecifier(int clientId, @DataPathRole int role, @NonNull byte[] peer, @Nullable byte[] pmk, @Nullable String passphrase)",
    "returnType" : "NetworkSpecifier",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_WIFI_AWARE_STATE_CHANGED", "WIFI_AWARE_DATA_PATH_ROLE_INITIATOR", "WIFI_AWARE_DATA_PATH_ROLE_RESPONDER", "mContext", "mService", "mLock" ],
  "methodNames" : [ "public boolean isAvailable()", "public Characteristics getCharacteristics()", "public void attach(@NonNull AttachCallback attachCallback, @Nullable Handler handler)", "public void attach(@NonNull AttachCallback attachCallback, @NonNull IdentityChangedListener identityChangedListener, @Nullable Handler handler)", "public void attach(Handler handler, ConfigRequest configRequest, AttachCallback attachCallback, IdentityChangedListener identityChangedListener)", "public void disconnect(int clientId, Binder binder)", "public void publish(int clientId, Looper looper, PublishConfig publishConfig, DiscoverySessionCallback callback)", "public void updatePublish(int clientId, int sessionId, PublishConfig publishConfig)", "public void subscribe(int clientId, Looper looper, SubscribeConfig subscribeConfig, DiscoverySessionCallback callback)", "public void updateSubscribe(int clientId, int sessionId, SubscribeConfig subscribeConfig)", "public void terminateSession(int clientId, int sessionId)", "public void sendMessage(int clientId, int sessionId, PeerHandle peerHandle, byte[] message, int messageId, int retryCount)", "public void requestMacAddresses(int uid, List<Integer> peerIds, IWifiAwareMacAddressProvider callback)", "public NetworkSpecifier createNetworkSpecifier(int clientId, int role, int sessionId, @NonNull PeerHandle peerHandle, @Nullable byte[] pmk, @Nullable String passphrase)", "public NetworkSpecifier createNetworkSpecifier(int clientId, @DataPathRole int role, @NonNull byte[] peer, @Nullable byte[] pmk, @Nullable String passphrase)" ]
}