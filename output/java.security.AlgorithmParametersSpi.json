{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/AlgorithmParametersSpi.java",
  "packageName" : "java.security",
  "className" : "AlgorithmParametersSpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected abstract void engineInit(AlgorithmParameterSpec paramSpec) throws InvalidParameterSpecException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this parameters object using the parameters\n     * specified in {@code paramSpec}.\n     *\n     * @param paramSpec the parameter specification.\n     *\n     * @exception InvalidParameterSpecException if the given parameter\n     * specification is inappropriate for the initialization of this parameter\n     * object.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineInit(byte[] params) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Imports the specified parameters and decodes them\n     * according to the primary decoding format for parameters.\n     * The primary decoding format for parameters is ASN.1, if an ASN.1\n     * specification for this type of parameters exists.\n     *\n     * @param params the encoded parameters.\n     *\n     * @exception IOException on decoding errors\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineInit(byte[] params, String format) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Imports the parameters from {@code params} and\n     * decodes them according to the specified decoding format.\n     * If {@code format} is null, the\n     * primary decoding format for parameters is used. The primary decoding\n     * format is ASN.1, if an ASN.1 specification for these parameters\n     * exists.\n     *\n     * @param params the encoded parameters.\n     *\n     * @param format the name of the decoding format.\n     *\n     * @exception IOException on decoding errors\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract T engineGetParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException",
    "returnType" : "T",
    "comment" : "\n     * Returns a (transparent) specification of this parameters\n     * object.\n     * {@code paramSpec} identifies the specification class in which\n     * the parameters should be returned. It could, for example, be\n     * {@code DSAParameterSpec.class}, to indicate that the\n     * parameters should be returned in an instance of the\n     * {@code DSAParameterSpec} class.\n     *\n     * @param <T> the type of the parameter specification to be returned\n     *\n     * @param paramSpec the specification class in which\n     * the parameters should be returned.\n     *\n     * @return the parameter specification.\n     *\n     * @exception InvalidParameterSpecException if the requested parameter\n     * specification is inappropriate for this parameter object.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte[] engineGetEncoded() throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the parameters in their primary encoding format.\n     * The primary encoding format for parameters is ASN.1, if an ASN.1\n     * specification for this type of parameters exists.\n     *\n     * @return the parameters encoded using their primary encoding format.\n     *\n     * @exception IOException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte[] engineGetEncoded(String format) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the parameters encoded in the specified format.\n     * If {@code format} is null, the\n     * primary encoding format for parameters is used. The primary encoding\n     * format is ASN.1, if an ASN.1 specification for these parameters\n     * exists.\n     *\n     * @param format the name of the encoding format.\n     *\n     * @return the parameters encoded using the specified encoding scheme.\n     *\n     * @exception IOException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract String engineToString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a formatted string describing the parameters.\n     *\n     * @return a formatted string describing the parameters.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract void engineInit(AlgorithmParameterSpec paramSpec) throws InvalidParameterSpecException", "protected abstract void engineInit(byte[] params) throws IOException", "protected abstract void engineInit(byte[] params, String format) throws IOException", "protected abstract T engineGetParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException", "protected abstract byte[] engineGetEncoded() throws IOException", "protected abstract byte[] engineGetEncoded(String format) throws IOException", "protected abstract String engineToString()" ],
  "variableNames" : [ ]
}