{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/KeyManagerFactory.java",
  "packageName" : "javax.net.ssl",
  "className" : "KeyManagerFactory",
  "comment" : "\n * This class acts as a factory for key managers based on a\n * source of key material. Each key manager manages a specific\n * type of key material for use by secure sockets. The key\n * material is based on a KeyStore and/or provider specific sources.\n *\n * <p> Android provides the following <code>KeyManagerFactory</code> algorithms:\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Algorithm</th>\n *       <th>Supported API Levels</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>PKIX</td>\n *       <td>1+</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * @since 1.4\n * @see KeyManager\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "factorySpi",
    "type" : "KeyManagerFactorySpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The name of the key management algorithm.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final String getDefaultAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Obtains the default KeyManagerFactory algorithm name.\n     *\n     * <p>The default algorithm can be changed at runtime by setting\n     * the value of the {@code ssl.KeyManagerFactory.algorithm}\n     * security property to the desired algorithm name.\n     *\n     * @see java.security.Security security properties\n     * @return the default algorithm name as specified by the\n     *          {@code ssl.KeyManagerFactory.algorithm} security property, or an\n     *          implementation-specific default if no such property exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this <code>KeyManagerFactory</code> object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>KeyManagerFactory</code> object.\n     *\n     * @return the algorithm name of this <code>KeyManagerFactory</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final KeyManagerFactory getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "KeyManagerFactory",
    "comment" : "\n     * Returns a <code>KeyManagerFactory</code> object that acts as a\n     * factory for key managers.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyManagerFactory object encapsulating the\n     * KeyManagerFactorySpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested algorithm.\n     *          See the <a href=\n     *  \"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\">\n     *          Java Secure Socket Extension Reference Guide </a>\n     *          for information about standard algorithm names.\n     *\n     * @return the new <code>KeyManagerFactory</code> object.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          KeyManagerFactorySpi implementation for the\n     *          specified algorithm.\n     * @exception NullPointerException if <code>algorithm</code> is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final KeyManagerFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "KeyManagerFactory",
    "comment" : "\n     * Returns a <code>KeyManagerFactory</code> object that acts as a\n     * factory for key managers.\n     *\n     * <p> A new KeyManagerFactory object encapsulating the\n     * KeyManagerFactorySpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n\n     * @param algorithm the standard name of the requested algorithm.\n     *          See the <a href=\n     *  \"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\">\n     *          Java Secure Socket Extension Reference Guide </a>\n     *          for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>KeyManagerFactory</code> object.\n     *\n     * @throws NoSuchAlgorithmException if a KeyManagerFactorySpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @throws IllegalArgumentException if the provider name is null or empty.\n     * @throws NullPointerException if <code>algorithm</code> is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final KeyManagerFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "KeyManagerFactory",
    "comment" : "\n     * Returns a <code>KeyManagerFactory</code> object that acts as a\n     * factory for key managers.\n     *\n     * <p> A new KeyManagerFactory object encapsulating the\n     * KeyManagerFactorySpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested algorithm.\n     *          See the <a href=\n     *  \"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\">\n     *          Java Secure Socket Extension Reference Guide </a>\n     *          for information about standard algorithm names.\n     *\n     * @param provider an instance of the provider.\n     *\n     * @return the new <code>KeyManagerFactory</code> object.\n     *\n     * @throws NoSuchAlgorithmException if a KeyManagerFactorySpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @throws IllegalArgumentException if provider is null.\n     * @throws NullPointerException if <code>algorithm</code> is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>KeyManagerFactory</code> object.\n     *\n     * @return the provider of this <code>KeyManagerFactory</code> object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(KeyStore ks, char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this factory with a source of key material.\n     * <P>\n     * The provider typically uses a KeyStore for obtaining\n     * key material for use during secure socket negotiations.\n     * The KeyStore is generally password-protected.\n     * <P>\n     * For more flexible initialization, please see\n     * {@link #init(ManagerFactoryParameters)}.\n     * <P>\n     *\n     * @param ks the key store or null\n     * @param password the password for recovering keys in the KeyStore\n     * @throws KeyStoreException if this operation fails\n     * @throws NoSuchAlgorithmException if the specified algorithm is not\n     *          available from the specified provider.\n     * @throws UnrecoverableKeyException if the key cannot be recovered\n     *          (e.g. the given password is wrong).\n     ",
    "links" : [ "#init(ManagerFactoryParameters)" ]
  }, {
    "name" : "public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this factory with a source of provider-specific\n     * key material.\n     * <P>\n     * In some cases, initialization parameters other than a keystore\n     * and password may be needed by a provider.  Users of that\n     * particular provider are expected to pass an implementation of\n     * the appropriate <CODE>ManagerFactoryParameters</CODE> as\n     * defined by the provider.  The provider can then call the\n     * specified methods in the <CODE>ManagerFactoryParameters</CODE>\n     * implementation to obtain the needed information.\n     *\n     * @param spec an implementation of a provider-specific parameter\n     *          specification\n     * @throws InvalidAlgorithmParameterException if an error is encountered\n     ",
    "links" : [ ]
  }, {
    "name" : "public final KeyManager[] getKeyManagers()",
    "returnType" : "KeyManager[]",
    "comment" : "\n     * Returns one key manager for each type of key material.\n     *\n     * @return the key managers\n     * @throws IllegalStateException if the KeyManagerFactory is not initialized\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final String getDefaultAlgorithm()", "public final String getAlgorithm()", "public static final KeyManagerFactory getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final KeyManagerFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final KeyManagerFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final void init(KeyStore ks, char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException", "public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException", "public final KeyManager[] getKeyManagers()" ],
  "variableNames" : [ "provider", "factorySpi", "algorithm" ]
}