{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcastAssistant.java",
  "packageName" : "android.bluetooth",
  "className" : "Callback",
  "comment" : "\n     * This class provides a set of callbacks that are invoked when scanning for Broadcast Sources\n     * is offloaded to a Broadcast Assistant.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onSearchStarted(@Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the implementation started searching for nearby Broadcast Sources.\n         *\n         * @param reason reason code on why search has started\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSearchStartFailed(@Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the implementation failed to start searching for nearby broadcast\n         * sources.\n         *\n         * @param reason reason for why search failed to start\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSearchStopped(@Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the implementation stopped searching for nearby Broadcast Sources.\n         *\n         * @param reason reason code on why search has stopped\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSearchStopFailed(@Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the implementation failed to stop searching for nearby broadcast\n         * sources.\n         *\n         * @param reason for why search failed to start\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSourceFound(@NonNull BluetoothLeBroadcastMetadata source)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when a new Broadcast Source is found together with the {@link\n         * BluetoothLeBroadcastMetadata}.\n         *\n         * @param source {@link BluetoothLeBroadcastMetadata} representing a Broadcast Source\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastMetadata" ]
  }, {
    "name" : " void onSourceAdded(@NonNull BluetoothDevice sink, @Reason int sourceId, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when a new Broadcast Source has been successfully added to the Broadcast\n         * Sink.\n         *\n         * <p>Broadcast audio stream may not have been started after this callback, the caller need\n         * to monitor {@link #onReceiveStateChanged(BluetoothDevice, int,\n         * BluetoothLeBroadcastReceiveState)} to see if synchronization with Broadcast Source is\n         * successful\n         *\n         * <p>When <var>isGroupOp</var> is true when {@link #addSource(BluetoothDevice,\n         * BluetoothLeBroadcastMetadata, boolean)} is called, each Broadcast Sink device in the\n         * coordinated set will trigger and individual update\n         *\n         * <p>A new source could be added by the Broadcast Sink itself or other Broadcast Assistants\n         * connected to the Broadcast Sink and in this case the reason code will be {@link\n         * BluetoothStatusCodes#REASON_REMOTE_REQUEST}\n         *\n         * @param sink Broadcast Sink device on which a new Broadcast Source has been added\n         * @param sourceId source ID as defined in the BASS specification\n         * @param reason reason of source addition\n         * @hide\n         ",
    "links" : [ "#onReceiveStateChanged(BluetoothDevice", "#addSource(BluetoothDevice", "android.bluetooth.BluetoothStatusCodes#REASON_REMOTE_REQUEST" ]
  }, {
    "name" : " void onSourceAddFailed(@NonNull BluetoothDevice sink, @NonNull BluetoothLeBroadcastMetadata source, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the new Broadcast Source failed to be added to the Broadcast Sink.\n         *\n         * @param sink Broadcast Sink device on which a new Broadcast Source has been added\n         * @param source metadata representation of the Broadcast Source\n         * @param reason reason why the addition has failed\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSourceModified(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when an existing Broadcast Source within a Broadcast Sink has been\n         * modified.\n         *\n         * <p>Actual state after the modification will be delivered via the next {@link\n         * Callback#onReceiveStateChanged(BluetoothDevice, int, BluetoothLeBroadcastReceiveState)}\n         * callback.\n         *\n         * <p>A source could be modified by the Broadcast Sink itself or other Broadcast Assistants\n         * connected to the Broadcast Sink and in this case the reason code will be {@link\n         * BluetoothStatusCodes#REASON_REMOTE_REQUEST}\n         *\n         * @param sink Broadcast Sink device on which a Broadcast Source has been modified\n         * @param sourceId source ID as defined in the BASS specification\n         * @param reason reason of source modification\n         * @hide\n         ",
    "links" : [ "#onReceiveStateChanged(BluetoothDevice", "android.bluetooth.BluetoothStatusCodes#REASON_REMOTE_REQUEST" ]
  }, {
    "name" : " void onSourceModifyFailed(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the Broadcast Assistant failed to modify an existing Broadcast\n         * Source on a Broadcast Sink.\n         *\n         * @param sink Broadcast Sink device on which a Broadcast Source has been modified\n         * @param sourceId source ID as defined in the BASS specification\n         * @param reason reason why the modification has failed\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSourceRemoved(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when a Broadcast Source has been successfully removed from the Broadcast\n         * Sink.\n         *\n         * <p>No more update for the source ID via {@link\n         * Callback#onReceiveStateChanged(BluetoothDevice, int, BluetoothLeBroadcastReceiveState)}\n         * after this callback.\n         *\n         * <p>A source could be removed by the Broadcast Sink itself or other Broadcast Assistants\n         * connected to the Broadcast Sink and in this case the reason code will be {@link\n         * BluetoothStatusCodes#REASON_REMOTE_REQUEST}\n         *\n         * @param sink Broadcast Sink device from which a Broadcast Source has been removed\n         * @param sourceId source ID as defined in the BASS specification\n         * @param reason reason why the Broadcast Source was removed\n         * @hide\n         ",
    "links" : [ "#onReceiveStateChanged(BluetoothDevice", "android.bluetooth.BluetoothStatusCodes#REASON_REMOTE_REQUEST" ]
  }, {
    "name" : " void onSourceRemoveFailed(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the Broadcast Assistant failed to remove an existing Broadcast\n         * Source on a Broadcast Sink.\n         *\n         * @param sink Broadcast Sink device on which a Broadcast Source was to be removed\n         * @param sourceId source ID as defined in the BASS specification\n         * @param reason reason why the modification has failed\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onReceiveStateChanged(@NonNull BluetoothDevice sink, int sourceId, @NonNull BluetoothLeBroadcastReceiveState state)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the Broadcast Receive State information of a Broadcast Sink device\n         * changes.\n         *\n         * @param sink BASS server device that is also a Broadcast Sink device\n         * @param sourceId source ID as defined in the BASS specification\n         * @param state latest state information between the Broadcast Sink and a Broadcast Source\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSourceLost(int broadcastId)",
    "returnType" : "void",
    "comment" : "\n         * Callback invoked when the Broadcast Source is lost together with source broadcast id.\n         *\n         * <p>This callback is to notify source lost due to periodic advertising sync lost. Callback\n         * client can know that the source notified by {@link\n         * Callback#onSourceFound(BluetoothLeBroadcastMetadata)} before is not available any more\n         * after this callback.\n         *\n         * @param broadcastId broadcast ID as defined in the BASS specification\n         * @hide\n         ",
    "links" : [ "#onSourceFound(BluetoothLeBroadcastMetadata)" ]
  } ],
  "methodNames" : [ " void onSearchStarted(@Reason int reason)", " void onSearchStartFailed(@Reason int reason)", " void onSearchStopped(@Reason int reason)", " void onSearchStopFailed(@Reason int reason)", " void onSourceFound(@NonNull BluetoothLeBroadcastMetadata source)", " void onSourceAdded(@NonNull BluetoothDevice sink, @Reason int sourceId, @Reason int reason)", " void onSourceAddFailed(@NonNull BluetoothDevice sink, @NonNull BluetoothLeBroadcastMetadata source, @Reason int reason)", " void onSourceModified(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)", " void onSourceModifyFailed(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)", " void onSourceRemoved(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)", " void onSourceRemoveFailed(@NonNull BluetoothDevice sink, int sourceId, @Reason int reason)", " void onReceiveStateChanged(@NonNull BluetoothDevice sink, int sourceId, @NonNull BluetoothLeBroadcastReceiveState state)", " void onSourceLost(int broadcastId)" ],
  "variableNames" : [ ]
}