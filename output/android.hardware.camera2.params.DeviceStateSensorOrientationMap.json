{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/DeviceStateSensorOrientationMap.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "DeviceStateSensorOrientationMap",
  "comment" : "\n * Immutable class that maps the device fold state to sensor orientation.\n *\n * <p>Some {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA logical}\n * cameras on foldables can include physical sensors with different sensor orientation\n * values. As a result, the values of the logical camera device can potentially change depending\n * on the device fold state.</p>\n *\n * <p>The device fold state to sensor orientation map will contain information about the\n * respective logical camera sensor orientation given a device state. Clients\n * can query the mapping for all possible supported folded states.\n *\n * @see CameraCharacteristics#SENSOR_ORIENTATION\n ",
  "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA" ],
  "variables" : [ {
    "name" : "NORMAL",
    "type" : "long",
    "comment" : "\n     * The device is in its normal physical configuration. This is the default if the\n     * device does not support multiple different states.\n     ",
    "links" : [ ]
  }, {
    "name" : "FOLDED",
    "type" : "long",
    "comment" : "\n     * The device is folded.  If not set, the device is unfolded or does not\n     * support folding.\n     *\n     * The exact point when this status change happens during the folding\n     * operation is device-specific.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeviceStateOrientationMap",
    "type" : "HashMap<Long, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElements",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSensorOrientation(@DeviceState long deviceState)",
    "returnType" : "int",
    "comment" : "\n     * Return the logical camera sensor orientation given a specific device fold state.\n     *\n     * @param deviceState Device fold state\n     *\n     * @return Valid {@link android.hardware.camera2.CameraCharacteristics#SENSOR_ORIENTATION} for\n     *         any supported device fold state\n     *\n     * @throws IllegalArgumentException if the given device state is invalid\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_ORIENTATION" ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this DeviceStateSensorOrientationMap is equal to another\n     * DeviceStateSensorOrientationMap.\n     *\n     * <p>Two device state orientation maps are equal if and only if all of their elements are\n     * {@link Object#equals equal}.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "#equals" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getSensorOrientation(@DeviceState long deviceState)", "public boolean equals(final Object obj)", "public int hashCode()" ],
  "variableNames" : [ "NORMAL", "FOLDED", "mDeviceStateOrientationMap", "mElements" ]
}