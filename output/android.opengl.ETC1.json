{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/opengl/ETC1.java",
  "packageName" : "android.opengl",
  "className" : "ETC1",
  "comment" : "\n * Methods for encoding and decoding ETC1 textures.\n * <p>\n * The standard for the ETC1 texture format can be found at\n * http://www.khronos.org/registry/gles/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt\n * <p>\n * The PKM file format is of a 16-byte header that describes the image bounds\n * followed by the encoded ETC1 texture data.\n * <p>\n * @see ETC1Util\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ENCODED_BLOCK_SIZE",
    "type" : "int",
    "comment" : "\n     * Size in bytes of an encoded block.\n     ",
    "links" : [ ]
  }, {
    "name" : "DECODED_BLOCK_SIZE",
    "type" : "int",
    "comment" : "\n     * Size in bytes of a decoded block.\n     ",
    "links" : [ ]
  }, {
    "name" : "ETC_PKM_HEADER_SIZE",
    "type" : "int",
    "comment" : "\n     * Size of a PKM file header, in bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "ETC1_RGB8_OES",
    "type" : "int",
    "comment" : "\n     * Accepted by the internalformat parameter of glCompressedTexImage2D.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native void encodeBlock(Buffer in, int validPixelMask, Buffer out)",
    "returnType" : "void",
    "comment" : "\n     * Encode a block of pixels.\n     *\n     * @param in a native order direct buffer of size DECODED_BLOCK_SIZE that represent a\n     * 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R\n     * value of pixel (x, y).\n     *\n     * @param validPixelMask is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether\n     * the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing.\n     *\n     * @param out a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the\n     * ETC1 compressed version of the data.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void decodeBlock(Buffer in, Buffer out)",
    "returnType" : "void",
    "comment" : "\n     * Decode a block of pixels.\n     *\n     * @param in a native order direct buffer of size ENCODED_BLOCK_SIZE that contains the\n     * ETC1 compressed version of the data.\n     *\n     * @param out a native order direct buffer of size DECODED_BLOCK_SIZE that will receive\n     * the decoded data. The data represents a\n     * 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R\n     * value of pixel (x, y).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getEncodedDataSize(int width, int height)",
    "returnType" : "int",
    "comment" : "\n     * Return the size of the encoded image data (does not include size of PKM header).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void encodeImage(Buffer in, int width, int height, int pixelSize, int stride, Buffer out)",
    "returnType" : "void",
    "comment" : "\n     * Encode an entire image.\n     * @param in a native order direct buffer of the image data. Formatted such that\n     *           pixel (x,y) is at pIn + pixelSize * x + stride * y;\n     * @param out a native order direct buffer of the encoded data.\n     * Must be large enough to store entire encoded image.\n     * @param pixelSize must be 2 or 3. 2 is an GL_UNSIGNED_SHORT_5_6_5 image,\n     * 3 is a GL_BYTE RGB image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void decodeImage(Buffer in, Buffer out, int width, int height, int pixelSize, int stride)",
    "returnType" : "void",
    "comment" : "\n     * Decode an entire image.\n     * @param in native order direct buffer of the encoded data.\n     * @param out native order direct buffer of the image data. Will be written such that\n     * pixel (x,y) is at pIn + pixelSize * x + stride * y. Must be\n     * large enough to store entire image.\n     * @param pixelSize must be 2 or 3. 2 is an GL_UNSIGNED_SHORT_5_6_5 image,\n     * 3 is a GL_BYTE RGB image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void formatHeader(Buffer header, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Format a PKM header\n     * @param header native order direct buffer of the header.\n     * @param width the width of the image in pixels.\n     * @param height the height of the image in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native boolean isValid(Buffer header)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a PKM header is correctly formatted.\n     * @param header native order direct buffer of the header.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getWidth(Buffer header)",
    "returnType" : "int",
    "comment" : "\n     * Read the image width from a PKM header\n     * @param header native order direct buffer of the header.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getHeight(Buffer header)",
    "returnType" : "int",
    "comment" : "\n     * Read the image height from a PKM header\n     * @param header native order direct buffer of the header.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static native void encodeBlock(Buffer in, int validPixelMask, Buffer out)", "public static native void decodeBlock(Buffer in, Buffer out)", "public static native int getEncodedDataSize(int width, int height)", "public static native void encodeImage(Buffer in, int width, int height, int pixelSize, int stride, Buffer out)", "public static native void decodeImage(Buffer in, Buffer out, int width, int height, int pixelSize, int stride)", "public static native void formatHeader(Buffer header, int width, int height)", "public static native boolean isValid(Buffer header)", "public static native int getWidth(Buffer header)", "public static native int getHeight(Buffer header)" ],
  "variableNames" : [ "ENCODED_BLOCK_SIZE", "DECODED_BLOCK_SIZE", "ETC_PKM_HEADER_SIZE", "ETC1_RGB8_OES" ]
}