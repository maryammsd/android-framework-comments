{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Norm2AllModes.java",
  "packageName" : "android.icu.impl",
  "className" : "ComposeNormalizer2",
  "comment" : "\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "onlyContiguous",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void normalize(CharSequence src, Normalizer2Impl.ReorderingBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void normalizeAndAppend(CharSequence src, boolean doNormalize, Normalizer2Impl.ReorderingBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNormalized(CharSequence s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Normalizer.QuickCheckResult quickCheck(CharSequence s)",
    "returnType" : "Normalizer.QuickCheckResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int spanQuickCheckYes(CharSequence s)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getQuickCheck(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBoundaryBefore(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBoundaryAfter(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInert(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void normalize(CharSequence src, Normalizer2Impl.ReorderingBuffer buffer)", "protected void normalizeAndAppend(CharSequence src, boolean doNormalize, Normalizer2Impl.ReorderingBuffer buffer)", "public boolean isNormalized(CharSequence s)", "public Normalizer.QuickCheckResult quickCheck(CharSequence s)", "public int spanQuickCheckYes(CharSequence s)", "public int getQuickCheck(int c)", "public boolean hasBoundaryBefore(int c)", "public boolean hasBoundaryAfter(int c)", "public boolean isInert(int c)" ],
  "variableNames" : [ "onlyContiguous" ]
}