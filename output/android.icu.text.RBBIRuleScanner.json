{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RBBIRuleScanner.java",
  "packageName" : "android.icu.text",
  "className" : "RBBIRuleScanner",
  "comment" : "\n  *  This class is part of the Rule Based Break Iterator rule compiler.\n  *  It scans the rules and builds the parse tree.\n  *  There is no public API here.\n  ",
  "links" : [ ],
  "variables" : [ {
    "name" : "kStackSize",
    "type" : "int",
    "comment" : " The size of the state stack for",
    "links" : [ ]
  }, {
    "name" : "fRB",
    "type" : "RBBIRuleBuilder",
    "comment" : " The rule builder that we are part of.",
    "links" : [ ]
  }, {
    "name" : "fScanIndex",
    "type" : "int",
    "comment" : " Index of current character being processed",
    "links" : [ ]
  }, {
    "name" : "fNextIndex",
    "type" : "int",
    "comment" : " Index of the next character, which",
    "links" : [ ]
  }, {
    "name" : "fQuoteMode",
    "type" : "boolean",
    "comment" : " Scan is in a 'quoted region'",
    "links" : [ ]
  }, {
    "name" : "fLineNum",
    "type" : "int",
    "comment" : " Line number in input file.",
    "links" : [ ]
  }, {
    "name" : "fCharNum",
    "type" : "int",
    "comment" : " Char position within the line.",
    "links" : [ ]
  }, {
    "name" : "fLastChar",
    "type" : "int",
    "comment" : " Previous char, needed to count CR-LF",
    "links" : [ ]
  }, {
    "name" : "fC",
    "type" : "RBBIRuleChar",
    "comment" : " Current char for parse state machine",
    "links" : [ ]
  }, {
    "name" : "fStack",
    "type" : "short[]",
    "comment" : " State stack, holds state pushes",
    "links" : [ ]
  }, {
    "name" : "fStackPtr",
    "type" : "int",
    "comment" : "  and pops as specified in the state",
    "links" : [ ]
  }, {
    "name" : "fNodeStack",
    "type" : "RBBINode[]",
    "comment" : " Node stack, holds nodes created",
    "links" : [ ]
  }, {
    "name" : "fNodeStackPtr",
    "type" : "int",
    "comment" : "  during the parse of a rule",
    "links" : [ ]
  }, {
    "name" : "fReverseRule",
    "type" : "boolean",
    "comment" : " True if the rule currently being scanned",
    "links" : [ ]
  }, {
    "name" : "fLookAheadRule",
    "type" : "boolean",
    "comment" : " True if the rule includes a '/'",
    "links" : [ ]
  }, {
    "name" : "fNoChainInRule",
    "type" : "boolean",
    "comment" : " True if the current rule starts with a '^'.",
    "links" : [ ]
  }, {
    "name" : "fSymbolTable",
    "type" : "RBBISymbolTable",
    "comment" : " symbol table, holds definitions of",
    "links" : [ ]
  }, {
    "name" : "fSetTable",
    "type" : "HashMap<String, RBBISetTableEl>",
    "comment" : " UnicocodeSet hash table, holds indexes to",
    "links" : [ ]
  }, {
    "name" : "fRuleSets",
    "type" : "UnicodeSet[]",
    "comment" : " Unicode Sets that are needed during",
    "links" : [ ]
  }, {
    "name" : "fRuleNum",
    "type" : "int",
    "comment" : " Counts each rule as it is scanned.",
    "links" : [ ]
  }, {
    "name" : "fOptionStart",
    "type" : "int",
    "comment" : " Input index of start of a !!option",
    "links" : [ ]
  }, {
    "name" : "gRuleSet_rule_char_pattern",
    "type" : "String",
    "comment" : " gRuleSet_rule_char_pattern is characters that may appear as literals in patterns without escaping or quoting.",
    "links" : [ ]
  }, {
    "name" : "gRuleSet_name_char_pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRuleSet_digit_char_pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRuleSet_name_start_char_pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gRuleSet_white_space_pattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kAny",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "chNEL",
    "type" : "int",
    "comment" : "    NEL newline variant",
    "links" : [ ]
  }, {
    "name" : "chLS",
    "type" : "int",
    "comment" : "    Unicode Line Separator",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean doParseActions(int action)",
    "returnType" : "boolean",
    "comment" : "----------------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void error(int e)",
    "returnType" : "void",
    "comment" : "----------------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void fixOpStack(int p)",
    "returnType" : "void",
    "comment" : "----------------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void findSetFor(String s, RBBINode node, UnicodeSet setToAdopt)",
    "returnType" : "void",
    "comment" : "----------------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " static String stripRules(String rules)",
    "returnType" : "String",
    "comment" : "----------------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " int nextCharLL()",
    "returnType" : "int",
    "comment" : "----------------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void nextChar(RBBIRuleChar c)",
    "returnType" : "void",
    "comment" : "---------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void parse()",
    "returnType" : "void",
    "comment" : "---------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void printNodeStack(String title)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : " RBBINode pushNewNode(int nodeType)",
    "returnType" : "RBBINode",
    "comment" : "---------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void scanSet()",
    "returnType" : "void",
    "comment" : "---------------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " int numRules()",
    "returnType" : "int",
    "comment" : "\n     * @return  the number of rules that have been seen.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean doParseActions(int action)", " void error(int e)", " void fixOpStack(int p)", " void findSetFor(String s, RBBINode node, UnicodeSet setToAdopt)", " static String stripRules(String rules)", " int nextCharLL()", " void nextChar(RBBIRuleChar c)", " void parse()", " void printNodeStack(String title)", " RBBINode pushNewNode(int nodeType)", " void scanSet()", " int numRules()" ],
  "variableNames" : [ "kStackSize", "fRB", "fScanIndex", "fNextIndex", "fQuoteMode", "fLineNum", "fCharNum", "fLastChar", "fC", "fStack", "fStackPtr", "fNodeStack", "fNodeStackPtr", "fReverseRule", "fLookAheadRule", "fNoChainInRule", "fSymbolTable", "fSetTable", "fRuleSets", "fRuleNum", "fOptionStart", "gRuleSet_rule_char_pattern", "gRuleSet_name_char_pattern", "gRuleSet_digit_char_pattern", "gRuleSet_name_start_char_pattern", "gRuleSet_white_space_pattern", "kAny", "chNEL", "chLS" ]
}