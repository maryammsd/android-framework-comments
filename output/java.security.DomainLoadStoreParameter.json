{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/DomainLoadStoreParameter.java",
  "packageName" : "java.security",
  "className" : "DomainLoadStoreParameter",
  "comment" : "\n * Configuration data that specifies the keystores in a keystore domain.\n * A keystore domain is a collection of keystores that are presented as a\n * single logical keystore. The configuration data is used during\n * {@code KeyStore}\n * {@link KeyStore#load(KeyStore.LoadStoreParameter) load} and\n * {@link KeyStore#store(KeyStore.LoadStoreParameter) store} operations.\n * <p>\n * The following syntax is supported for configuration data:\n * <pre>{@code\n *     domain <domainName> [<property> ...] {\n *         keystore <keystoreName> [<property> ...] ;\n *         ...\n *     };\n *     ...\n * }</pre>\n * where {@code domainName} and {@code keystoreName} are identifiers\n * and {@code property} is a key/value pairing. The key and value are\n * separated by an 'equals' symbol and the value is enclosed in double\n * quotes. A property value may be either a printable string or a binary\n * string of colon-separated pairs of hexadecimal digits. Multi-valued\n * properties are represented as a comma-separated list of values,\n * enclosed in square brackets.\n * See {@link Arrays#toString(java.lang.Object[])}.\n * <p>\n * To ensure that keystore entries are uniquely identified, each\n * entry's alias is prefixed by its {@code keystoreName} followed\n * by the entry name separator and each {@code keystoreName} must be\n * unique within its domain. Entry name prefixes are omitted when\n * storing a keystore.\n * <p>\n * Properties are context-sensitive: properties that apply to\n * all the keystores in a domain are located in the domain clause,\n * and properties that apply only to a specific keystore are located\n * in that keystore's clause.\n * Unless otherwise specified, a property in a keystore clause overrides\n * a property of the same name in the domain clause. All property names\n * are case-insensitive. The following properties are supported:\n * <dl>\n * <dt> {@code keystoreType=\"<type>\"} </dt>\n *     <dd> The keystore type. </dd>\n * <dt> {@code keystoreURI=\"<url>\"} </dt>\n *     <dd> The keystore location. </dd>\n * <dt> {@code keystoreProviderName=\"<name>\"} </dt>\n *     <dd> The name of the keystore's JCE provider. </dd>\n * <dt> {@code keystorePasswordEnv=\"<environment-variable>\"} </dt>\n *     <dd> The environment variable that stores a keystore password.\n *          Alternatively, passwords may be supplied to the constructor\n *          method in a {@code Map<String, ProtectionParameter>}. </dd>\n * <dt> {@code entryNameSeparator=\"<separator>\"} </dt>\n *     <dd> The separator between a keystore name prefix and an entry name.\n *          When specified, it applies to all the entries in a domain.\n *          Its default value is a space. </dd>\n * </dl>\n * <p>\n * For example, configuration data for a simple keystore domain\n * comprising three keystores is shown below:\n * <pre>\n *\n * domain app1 {\n *     keystore app1-truststore\n *         keystoreURI=\"file:///app1/etc/truststore.jks\";\n *\n *     keystore system-truststore\n *         keystoreURI=\"${java.home}/lib/security/cacerts\";\n *\n *     keystore app1-keystore\n *         keystoreType=\"PKCS12\"\n *         keystoreURI=\"file:///app1/etc/keystore.p12\";\n * };\n *\n * </pre>\n * @since 1.8\n ",
  "links" : [ "java.security.KeyStore#store(KeyStore.LoadStoreParameter)", "#toString(java.lang.Object", "java.security.KeyStore#load(KeyStore.LoadStoreParameter)" ],
  "variables" : [ {
    "name" : "configuration",
    "type" : "URI",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protectionParams",
    "type" : "Map<String, ProtectionParameter>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public URI getConfiguration()",
    "returnType" : "URI",
    "comment" : "\n     * Gets the identifier for the domain configuration data.\n     *\n     * @return the identifier for the configuration data\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, ProtectionParameter> getProtectionParams()",
    "returnType" : "Map<String, ProtectionParameter>",
    "comment" : "\n     * Gets the keystore protection parameters for keystores in this\n     * domain.\n     *\n     * @return an unmodifiable map of keystore names to protection\n     *     parameters\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyStore.ProtectionParameter getProtectionParameter()",
    "returnType" : "KeyStore.ProtectionParameter",
    "comment" : "\n     * Gets the keystore protection parameters for this domain.\n     * Keystore domains do not support a protection parameter.\n     *\n     * @return always returns {@code null}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public URI getConfiguration()", "public Map<String, ProtectionParameter> getProtectionParams()", "public KeyStore.ProtectionParameter getProtectionParameter()" ],
  "variableNames" : [ "configuration", "protectionParams" ]
}