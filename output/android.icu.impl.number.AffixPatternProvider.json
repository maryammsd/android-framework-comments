{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/AffixPatternProvider.java",
  "packageName" : "android.icu.impl.number",
  "className" : "AffixPatternProvider",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FLAG_POS_PREFIX",
    "type" : "int",
    "comment" : " Convenience compound flags",
    "links" : [ ]
  }, {
    "name" : "FLAG_POS_SUFFIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_NEG_PREFIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_NEG_SUFFIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public char charAt(int flags, int i)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length(int flags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getString(int flags)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCurrencySign()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean positiveHasPlusSign()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNegativeSubpattern()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean negativeHasMinusSign()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsSymbolType(int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBody()",
    "returnType" : "boolean",
    "comment" : "\n     * True if the pattern has a number placeholder like \"0\" or \"#,##0.00\"; false if the pattern does not\n     * have one. This is used in cases like compact notation, where the pattern replaces the entire\n     * number instead of rendering the number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean currencyAsDecimal()",
    "returnType" : "boolean",
    "comment" : "\n     * True if the currency symbol should replace the decimal separator.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public char charAt(int flags, int i)", "public int length(int flags)", "public String getString(int flags)", "public boolean hasCurrencySign()", "public boolean positiveHasPlusSign()", "public boolean hasNegativeSubpattern()", "public boolean negativeHasMinusSign()", "public boolean containsSymbolType(int type)", "public boolean hasBody()", "public boolean currencyAsDecimal()" ],
  "variableNames" : [ "FLAG_POS_PREFIX", "FLAG_POS_SUFFIX", "FLAG_NEG_PREFIX", "FLAG_NEG_SUFFIX" ]
}