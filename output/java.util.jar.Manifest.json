{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/Manifest.java",
  "packageName" : "java.util.jar",
  "className" : "Manifest",
  "comment" : "\n * The Manifest class is used to maintain Manifest entry names and their\n * associated Attributes. There are main Manifest Attributes as well as\n * per-entry Attributes. For information on the Manifest format, please\n * see the\n * <a href=\"{@docRoot}/../specs/jar/jar.html\">\n * Manifest format specification</a>.\n *\n * @author  David Connelly\n * @see     Attributes\n * @since   1.2\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "attr",
    "type" : "Attributes",
    "comment" : " manifest main attributes",
    "links" : [ ]
  }, {
    "name" : "entries",
    "type" : "Map<String, Attributes>",
    "comment" : " manifest entries",
    "links" : [ ]
  }, {
    "name" : "jv",
    "type" : "JarVerifier",
    "comment" : " associated JarVerifier, not null when called by JarFile::getManifest.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Attributes getMainAttributes()",
    "returnType" : "Attributes",
    "comment" : "\n     * Returns the main Attributes for the Manifest.\n     * @return the main Attributes for the Manifest\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Attributes> getEntries()",
    "returnType" : "Map<String, Attributes>",
    "comment" : "\n     * Returns a Map of the entries contained in this Manifest. Each entry\n     * is represented by a String name (key) and associated Attributes (value).\n     * The Map permits the {@code null} key, but no entry with a null key is\n     * created by {@link #read}, nor is such an entry written by using {@link\n     * #write}.\n     *\n     * @return a Map of the entries contained in this Manifest\n     ",
    "links" : [ "#write", "#read" ]
  }, {
    "name" : "public Attributes getAttributes(String name)",
    "returnType" : "Attributes",
    "comment" : "\n     * Returns the Attributes for the specified entry name.\n     * This method is defined as:\n     * <pre>\n     *      return (Attributes)getEntries().get(name)\n     * </pre>\n     * Though {@code null} is a valid {@code name}, when\n     * {@code getAttributes(null)} is invoked on a {@code Manifest}\n     * obtained from a jar file, {@code null} will be returned.  While jar\n     * files themselves do not allow {@code null}-named attributes, it is\n     * possible to invoke {@link #getEntries} on a {@code Manifest}, and\n     * on that result, invoke {@code put} with a null key and an\n     * arbitrary value.  Subsequent invocations of\n     * {@code getAttributes(null)} will return the just-{@code put}\n     * value.\n     * <p>\n     * Note that this method does not return the manifest's main attributes;\n     * see {@link #getMainAttributes}.\n     *\n     * @param name entry name\n     * @return the Attributes for the specified entry name\n     ",
    "links" : [ "#getEntries", "#getMainAttributes" ]
  }, {
    "name" : " Attributes getTrustedAttributes(String name)",
    "returnType" : "Attributes",
    "comment" : "\n     * Returns the Attributes for the specified entry name, if trusted.\n     *\n     * @param name entry name\n     * @return returns the same result as {@link #getAttributes(String)}\n     * @throws SecurityException if the associated jar is signed but this entry\n     *      has been modified after signing (i.e. the section in the manifest\n     *      does not exist in SF files of all signers).\n     ",
    "links" : [ "#getAttributes(String)" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the main Attributes as well as the entries in this Manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the Manifest to the specified OutputStream.\n     * Attributes.Name.MANIFEST_VERSION must be set in\n     * MainAttributes prior to invoking this method.\n     *\n     * @param out the output stream\n     * @throws    IOException if an I/O error has occurred\n     * @see #getMainAttributes\n     ",
    "links" : [ ]
  }, {
    "name" : " static void make72Safe(StringBuffer line)",
    "returnType" : "void",
    "comment" : "\n     * Adds line breaks to enforce a maximum of 72 bytes per line.\n     *\n     * @deprecation Replaced with {@link #println72}.\n     ",
    "links" : [ "#println72" ]
  }, {
    "name" : " static void println72(OutputStream out, String line) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code line} to {@code out} with line breaks and continuation\n     * spaces within the limits of 72 bytes of contents per line followed\n     * by a line break.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void println(OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a line break to {@code out}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getErrorPosition(String filename, final int lineNumber)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void read(InputStream is) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Reads the Manifest from the specified InputStream. The entry\n     * names and attributes read will be merged in with the current\n     * manifest entries.\n     *\n     * @param is the input stream\n     * @throws    IOException if an I/O error has occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "private void read(InputStream is, String jarFilename) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String parseName(byte[] lbuf, int len)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int toLower(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified Object is also a Manifest and has\n     * the same main Attributes and entries.\n     *\n     * @param o the object to be compared\n     * @return true if the specified Object is also a Manifest and has\n     * the same main Attributes and entries\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code for this Manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a shallow copy of this Manifest.  The shallow copy is\n     * implemented as follows:\n     * <pre>\n     *     public Object clone() { return new Manifest(this); }\n     * </pre>\n     * @return a shallow copy of this Manifest\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Attributes getMainAttributes()", "public Map<String, Attributes> getEntries()", "public Attributes getAttributes(String name)", " Attributes getTrustedAttributes(String name)", "public void clear()", "public void write(OutputStream out) throws IOException", " static void make72Safe(StringBuffer line)", " static void println72(OutputStream out, String line) throws IOException", " static void println(OutputStream out) throws IOException", " static String getErrorPosition(String filename, final int lineNumber)", "public void read(InputStream is) throws IOException", "private void read(InputStream is, String jarFilename) throws IOException", "private String parseName(byte[] lbuf, int len)", "private int toLower(int c)", "public boolean equals(Object o)", "public int hashCode()", "public Object clone()" ],
  "variableNames" : [ "attr", "entries", "jv" ]
}