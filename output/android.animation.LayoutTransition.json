{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/LayoutTransition.java",
  "packageName" : "android.animation",
  "className" : "LayoutTransition",
  "comment" : "\n * This class enables automatic animations on layout changes in ViewGroup objects. To enable\n * transitions for a layout container, create a LayoutTransition object and set it on any\n * ViewGroup by calling {@link ViewGroup#setLayoutTransition(LayoutTransition)}. This will cause\n * default animations to run whenever items are added to or removed from that container. To specify\n * custom animations, use the {@link LayoutTransition#setAnimator(int, Animator)\n * setAnimator()} method.\n *\n * <p>One of the core concepts of these transition animations is that there are two types of\n * changes that cause the transition and four different animations that run because of\n * those changes. The changes that trigger the transition are items being added to a container\n * (referred to as an \"appearing\" transition) or removed from a container (also known as\n * \"disappearing\"). Setting the visibility of views (between GONE and VISIBLE) will trigger\n * the same add/remove logic. The animations that run due to those events are one that animates\n * items being added, one that animates items being removed, and two that animate the other\n * items in the container that change due to the add/remove occurrence. Users of\n * the transition may want different animations for the changing items depending on whether\n * they are changing due to an appearing or disappearing event, so there is one animation for\n * each of these variations of the changing event. Most of the API of this class is concerned\n * with setting up the basic properties of the animations used in these four situations,\n * or with setting up custom animations for any or all of the four.</p>\n *\n * <p>By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING\n * animation. The other animations begin after a delay that is set to the default duration\n * of the animations. This behavior facilitates a sequence of animations in transitions as\n * follows: when an item is being added to a layout, the other children of that container will\n * move first (thus creating space for the new item), then the appearing animation will run to\n * animate the item being added. Conversely, when an item is removed from a container, the\n * animation to remove it will run first, then the animations of the other children in the\n * layout will run (closing the gap created in the layout when the item was removed). If this\n * default choreography behavior is not desired, the {@link #setDuration(int, long)} and\n * {@link #setStartDelay(int, long)} of any or all of the animations can be changed as\n * appropriate. Keep in mind, however, that if you start an APPEARING animation before a\n * DISAPPEARING animation is completed, the DISAPPEARING animation stops, and any effects from\n * the DISAPPEARING animation are reverted. If you instead start a DISAPPEARING animation\n * before an APPEARING animation is completed, a similar set of effects occurs for the\n * APPEARING animation.</p>\n *\n * <p>The animations specified for the transition, both the defaults and any custom animations\n * set on the transition object, are templates only. That is, these animations exist to hold the\n * basic animation properties, such as the duration, start delay, and properties being animated.\n * But the actual target object, as well as the start and end values for those properties, are\n * set automatically in the process of setting up the transition each time it runs. Each of the\n * animations is cloned from the original copy and the clone is then populated with the dynamic\n * values of the target being animated (such as one of the items in a layout container that is\n * moving as a result of the layout event) as well as the values that are changing (such as the\n * position and size of that object). The actual values that are pushed to each animation\n * depends on what properties are specified for the animation. For example, the default\n * CHANGE_APPEARING animation animates the <code>left</code>, <code>top</code>, <code>right</code>,\n * <code>bottom</code>, <code>scrollX</code>, and <code>scrollY</code> properties.\n * Values for these properties are updated with the pre- and post-layout\n * values when the transition begins. Custom animations will be similarly populated with\n * the target and values being animated, assuming they use ObjectAnimator objects with\n * property names that are known on the target object.</p>\n *\n * <p>This class, and the associated XML flag for containers, animateLayoutChanges=\"true\",\n * provides a simple utility meant for automating changes in straightforward situations.\n * Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the\n * interrelationship of the various levels of layout. Also, a container that is being scrolled\n * at the same time as items are being added or removed is probably not a good candidate for\n * this utility, because the before/after locations calculated by LayoutTransition\n * may not match the actual locations when the animations finish due to the container\n * being scrolled as the animations are running. You can work around that\n * particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING\n * and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the\n * other animations appropriately.</p>\n ",
  "links" : [ "android.animation.LayoutTransition#setAnimator(int", "#setStartDelay(int", "#setDuration(int", "android.view.ViewGroup#setLayoutTransition(LayoutTransition)" ],
  "variables" : [ {
    "name" : "CHANGE_APPEARING",
    "type" : "int",
    "comment" : "\n     * A flag indicating the animation that runs on those items that are changing\n     * due to a new item appearing in the container.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGE_DISAPPEARING",
    "type" : "int",
    "comment" : "\n     * A flag indicating the animation that runs on those items that are changing\n     * due to an item disappearing from the container.\n     ",
    "links" : [ ]
  }, {
    "name" : "APPEARING",
    "type" : "int",
    "comment" : "\n     * A flag indicating the animation that runs on those items that are appearing\n     * in the container.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISAPPEARING",
    "type" : "int",
    "comment" : "\n     * A flag indicating the animation that runs on those items that are disappearing\n     * from the container.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGING",
    "type" : "int",
    "comment" : "\n     * A flag indicating the animation that runs on those items that are changing\n     * due to a layout change not caused by items being added to or removed\n     * from the container. This transition type is not enabled by default; it can be\n     * enabled via {@link #enableTransitionType(int)}.\n     ",
    "links" : [ "#enableTransitionType(int)" ]
  }, {
    "name" : "FLAG_APPEARING",
    "type" : "int",
    "comment" : "\n     * Private bit fields used to set the collection of enabled transition types for\n     * mTransitionTypes.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_DISAPPEARING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHANGE_APPEARING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHANGE_DISAPPEARING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHANGING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisappearingAnim",
    "type" : "Animator",
    "comment" : "\n     * These variables hold the animations that are currently used to run the transition effects.\n     * These animations are set to defaults, but can be changed to custom animations by\n     * calls to setAnimator().\n     ",
    "links" : [ ]
  }, {
    "name" : "mAppearingAnim",
    "type" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingAppearingAnim",
    "type" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingDisappearingAnim",
    "type" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingAnim",
    "type" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultChange",
    "type" : "ObjectAnimator",
    "comment" : "\n     * These are the default animations, defined in the constructor, that will be used\n     * unless the user specifies custom animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultChangeIn",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultChangeOut",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultFadeIn",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultFadeOut",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DURATION",
    "type" : "long",
    "comment" : "\n     * The default duration used by all animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChangingAppearingDuration",
    "type" : "long",
    "comment" : "\n     * The durations of the different animations\n     ",
    "links" : [ ]
  }, {
    "name" : "mChangingDisappearingDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppearingDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisappearingDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppearingDelay",
    "type" : "long",
    "comment" : "\n     * The start delays of the different animations. Note that the default behavior of\n     * the appearing item is the default duration, since it should wait for the items to move\n     * before fading it. Same for the changing animation when disappearing; it waits for the item\n     * to fade out before moving the other items.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisappearingDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingAppearingDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingDisappearingDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingAppearingStagger",
    "type" : "long",
    "comment" : "\n     * The inter-animation delays used on the changing animations\n     ",
    "links" : [ ]
  }, {
    "name" : "mChangingDisappearingStagger",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingStagger",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACCEL_DECEL_INTERPOLATOR",
    "type" : "TimeInterpolator",
    "comment" : "\n     * Static interpolators - these are stateless and can be shared across the instances\n     ",
    "links" : [ ]
  }, {
    "name" : "DECEL_INTERPOLATOR",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAppearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDisappearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sChangingAppearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sChangingDisappearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sChangingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "\n     * The default interpolators used for the animations\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisappearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingAppearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingDisappearingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pendingAnimations",
    "type" : "HashMap<View, Animator>",
    "comment" : "\n     * These hashmaps are used to store the animations that are currently running as part of\n     * the transition. The reason for this is that a further layout event should cause\n     * existing animations to stop where they are prior to starting new animations. So\n     * we cache all of the current animations in this map for possible cancellation on\n     * another layout event. LinkedHashMaps are used to preserve the order in which animations\n     * are inserted, so that we process events (such as setting up start values) in the same order.\n     ",
    "links" : [ ]
  }, {
    "name" : "currentChangingAnimations",
    "type" : "LinkedHashMap<View, Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentAppearingAnimations",
    "type" : "LinkedHashMap<View, Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentDisappearingAnimations",
    "type" : "LinkedHashMap<View, Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "layoutChangeListenerMap",
    "type" : "HashMap<View, View.OnLayoutChangeListener>",
    "comment" : "\n     * This hashmap is used to track the listeners that have been added to the children of\n     * a container. When a layout change occurs, an animation is created for each View, so that\n     * the pre-layout values can be cached in that animation. Then a listener is added to the\n     * view to see whether the layout changes the bounds of that view. If so, the animation\n     * is set with the final values and then run. If not, the animation is not started. When\n     * the process of setting up and running all appropriate animations is done, we need to\n     * remove these listeners and clear out the map.\n     ",
    "links" : [ ]
  }, {
    "name" : "staggerDelay",
    "type" : "long",
    "comment" : "\n     * Used to track the current delay being assigned to successive animations as they are\n     * started. This value is incremented for each new animation, then zeroed before the next\n     * transition begins.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransitionTypes",
    "type" : "int",
    "comment" : "\n     * These are the types of transition animations that the LayoutTransition is reacting\n     * to. By default, appearing/disappearing and the change animations related to them are\n     * enabled (not CHANGING).\n     ",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayList<TransitionListener>",
    "comment" : "\n     * The set of listeners that should be notified when APPEARING/DISAPPEARING transitions\n     * start and end.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimateParentHierarchy",
    "type" : "boolean",
    "comment" : "\n     * Controls whether changing animations automatically animate the parent hierarchy as well.\n     * This behavior prevents artifacts when wrap_content layouts snap to the end state as the\n     * transition begins, causing visual glitches and clipping.\n     * Default value is true.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDuration(long duration)",
    "returnType" : "void",
    "comment" : "\n     * Sets the duration to be used by all animations of this transition object. If you want to\n     * set the duration of just one of the animations in particular, use the\n     * {@link #setDuration(int, long)} method.\n     *\n     * @param duration The length of time, in milliseconds, that the transition animations\n     * should last.\n     ",
    "links" : [ "#setDuration(int" ]
  }, {
    "name" : "public void enableTransitionType(int transitionType)",
    "returnType" : "void",
    "comment" : "\n     * Enables the specified transitionType for this LayoutTransition object.\n     * By default, a LayoutTransition listens for changes in children being\n     * added/remove/hidden/shown in the container, and runs the animations associated with\n     * those events. That is, all transition types besides {@link #CHANGING} are enabled by default.\n     * You can also enable {@link #CHANGING} animations by calling this method with the\n     * {@link #CHANGING} transitionType.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public void disableTransitionType(int transitionType)",
    "returnType" : "void",
    "comment" : "\n     * Disables the specified transitionType for this LayoutTransition object.\n     * By default, all transition types except {@link #CHANGING} are enabled.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public boolean isTransitionTypeEnabled(int transitionType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the specified transitionType is enabled for this LayoutTransition object.\n     * By default, all transition types except {@link #CHANGING} are enabled.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.\n     * @return true if the specified transitionType is currently enabled, false otherwise.\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public void setStartDelay(int transitionType, long delay)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start delay on one of the animation objects used by this transition. The\n     * <code>transitionType</code> parameter determines the animation whose start delay\n     * is being set.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose start delay is being set.\n     * @param delay The length of time, in milliseconds, to delay before starting the animation.\n     * @see Animator#setStartDelay(long)\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public long getStartDelay(int transitionType)",
    "returnType" : "long",
    "comment" : "\n     * Gets the start delay on one of the animation objects used by this transition. The\n     * <code>transitionType</code> parameter determines the animation whose start delay\n     * is returned.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose start delay is returned.\n     * @return long The start delay of the specified animation.\n     * @see Animator#getStartDelay()\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public void setDuration(int transitionType, long duration)",
    "returnType" : "void",
    "comment" : "\n     * Sets the duration on one of the animation objects used by this transition. The\n     * <code>transitionType</code> parameter determines the animation whose duration\n     * is being set.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose duration is being set.\n     * @param duration The length of time, in milliseconds, that the specified animation should run.\n     * @see Animator#setDuration(long)\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public long getDuration(int transitionType)",
    "returnType" : "long",
    "comment" : "\n     * Gets the duration on one of the animation objects used by this transition. The\n     * <code>transitionType</code> parameter determines the animation whose duration\n     * is returned.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose duration is returned.\n     * @return long The duration of the specified animation.\n     * @see Animator#getDuration()\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public void setStagger(int transitionType, long duration)",
    "returnType" : "void",
    "comment" : "\n     * Sets the length of time to delay between starting each animation during one of the\n     * change animations.\n     *\n     * @param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or\n     * {@link #CHANGING}.\n     * @param duration The length of time, in milliseconds, to delay before launching the next\n     * animation in the sequence.\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#CHANGE_APPEARING" ]
  }, {
    "name" : "public long getStagger(int transitionType)",
    "returnType" : "long",
    "comment" : "\n     * Gets the length of time to delay between starting each animation during one of the\n     * change animations.\n     *\n     * @param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or\n     * {@link #CHANGING}.\n     * @return long The length of time, in milliseconds, to delay before launching the next\n     * animation in the sequence.\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#CHANGE_APPEARING" ]
  }, {
    "name" : "public void setInterpolator(int transitionType, TimeInterpolator interpolator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the interpolator on one of the animation objects used by this transition. The\n     * <code>transitionType</code> parameter determines the animation whose interpolator\n     * is being set.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose interpolator is being set.\n     * @param interpolator The interpolator that the specified animation should use.\n     * @see Animator#setInterpolator(TimeInterpolator)\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public TimeInterpolator getInterpolator(int transitionType)",
    "returnType" : "TimeInterpolator",
    "comment" : "\n     * Gets the interpolator on one of the animation objects used by this transition. The\n     * <code>transitionType</code> parameter determines the animation whose interpolator\n     * is returned.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose interpolator is being returned.\n     * @return TimeInterpolator The interpolator that the specified animation uses.\n     * @see Animator#setInterpolator(TimeInterpolator)\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public void setAnimator(int transitionType, Animator animator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the animation used during one of the transition types that may run. Any\n     * Animator object can be used, but to be most useful in the context of layout\n     * transitions, the animation should either be a ObjectAnimator or a AnimatorSet\n     * of animations including PropertyAnimators. Also, these ObjectAnimator objects\n     * should be able to get and set values on their target objects automatically. For\n     * example, a ObjectAnimator that animates the property \"left\" is able to set and get the\n     * <code>left</code> property from the View objects being animated by the layout\n     * transition. The transition works by setting target objects and properties\n     * dynamically, according to the pre- and post-layoout values of those objects, so\n     * having animations that can handle those properties appropriately will work best\n     * for custom animation. The dynamic setting of values is only the case for the\n     * CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with\n     * the values they have.\n     *\n     * <p>It is also worth noting that any and all animations (and their underlying\n     * PropertyValuesHolder objects) will have their start and end values set according\n     * to the pre- and post-layout values. So, for example, a custom animation on \"alpha\"\n     * as the CHANGE_APPEARING animation will inherit the real value of alpha on the target\n     * object (presumably 1) as its starting and ending value when the animation begins.\n     * Animations which need to use values at the beginning and end that may not match the\n     * values queried when the transition begins may need to use a different mechanism\n     * than a standard ObjectAnimator object.</p>\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the\n     * animation whose animator is being set.\n     * @param animator The animation being assigned. A value of <code>null</code> means that no\n     * animation will be run for the specified transitionType.\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "public Animator getAnimator(int transitionType)",
    "returnType" : "Animator",
    "comment" : "\n     * Gets the animation used during one of the transition types that may run.\n     *\n     * @param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},\n     * {@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines\n     * the animation whose animator is being returned.\n     * @return Animator The animation being used for the given transition type.\n     * @see #setAnimator(int, Animator)\n     ",
    "links" : [ "#CHANGING", "#CHANGE_DISAPPEARING", "#APPEARING", "#CHANGE_APPEARING", "#DISAPPEARING" ]
  }, {
    "name" : "private void runChangeTransition(final ViewGroup parent, View newView, final int changeReason)",
    "returnType" : "void",
    "comment" : "\n     * This function sets up animations on all of the views that change during layout.\n     * For every child in the parent, we create a change animation of the appropriate\n     * type (appearing, disappearing, or changing) and ask it to populate its start values from its\n     * target view. We add layout listeners to all child views and listen for changes. For\n     * those views that change, we populate the end values for those animations and start them.\n     * Animations are not run on unchanging views.\n     *\n     * @param parent The container which is undergoing a change.\n     * @param newView The view being added to or removed from the parent. May be null if the\n     * changeReason is CHANGING.\n     * @param changeReason A value of APPEARING, DISAPPEARING, or CHANGING, indicating whether the\n     * transition is occurring because an item is being added to or removed from the parent, or\n     * if it is running in response to a layout operation (that is, if the value is CHANGING).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnimateParentHierarchy(boolean animateParentHierarchy)",
    "returnType" : "void",
    "comment" : "\n     * This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will\n     * cause the default changing animation to be run on the parent hierarchy as well. This allows\n     * containers of transitioning views to also transition, which may be necessary in situations\n     * where the containers bounds change between the before/after states and may clip their\n     * children during the transition animations. For example, layouts with wrap_content will\n     * adjust their bounds according to the dimensions of their children.\n     *\n     * <p>The default changing transitions animate the bounds and scroll positions of the\n     * target views. These are the animations that will run on the parent hierarchy, not\n     * the custom animations that happen to be set on the transition. This allows custom\n     * behavior for the children of the transitioning container, but uses standard behavior\n     * of resizing/rescrolling on any changing parents.\n     *\n     * @param animateParentHierarchy A boolean value indicating whether the parents of\n     * transitioning views should also be animated during the transition. Default value is true.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupChangeAnimation(final ViewGroup parent, final int changeReason, Animator baseAnimator, final long duration, final View child)",
    "returnType" : "void",
    "comment" : "\n     * Utility function called by runChangingTransition for both the children and the parent\n     * hierarchy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startChangingAnimations()",
    "returnType" : "void",
    "comment" : "\n     * Starts the animations set up for a CHANGING transition. We separate the setup of these\n     * animations from actually starting them, to avoid side-effects that starting the animations\n     * may have on the properties of the affected objects. After setup, we tell the affected parent\n     * that this transition should be started. The parent informs its ViewAncestor, which then\n     * starts the transition after the current layout/measurement phase, just prior to drawing\n     * the view hierarchy.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endChangingAnimations()",
    "returnType" : "void",
    "comment" : "\n     * Ends the animations that are set up for a CHANGING transition. This is a variant of\n     * startChangingAnimations() which is called when the window the transition is playing in\n     * is not visible. We need to make sure the animations put their targets in their end states\n     * and that the transition finishes to remove any mid-process state (such as isRunning()).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isChangingLayout()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if animations are running which animate layout-related properties. This\n     * essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations\n     * are running, since these animations operate on layout-related properties.\n     *\n     * @return true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently\n     * running.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if any of the animations in this transition are currently running.\n     *\n     * @return true if any animations in the transition are running.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the currently running transition. Note that we cancel() the changing animations\n     * but end() the visibility animations. This is because this method is currently called\n     * in the context of starting a new transition, so we want to move things from their mid-\n     * transition positions, but we want them to have their end-transition visibility.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel(int transitionType)",
    "returnType" : "void",
    "comment" : "\n     * Cancels the specified type of transition. Note that we cancel() the changing animations\n     * but end() the visibility animations. This is because this method is currently called\n     * in the context of starting a new transition, so we want to move things from their mid-\n     * transition positions, but we want them to have their end-transition visibility.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void runAppearingTransition(final ViewGroup parent, final View child)",
    "returnType" : "void",
    "comment" : "\n     * This method runs the animation that makes an added item appear.\n     *\n     * @param parent The ViewGroup to which the View is being added.\n     * @param child The View being added to the ViewGroup.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void runDisappearingTransition(final ViewGroup parent, final View child)",
    "returnType" : "void",
    "comment" : "\n     * This method runs the animation that makes a removed item disappear.\n     *\n     * @param parent The ViewGroup from which the View is being removed.\n     * @param child The View being removed from the ViewGroup.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addChild(ViewGroup parent, View child, boolean changesLayout)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when a child view is about to be added to the\n     * container. This callback starts the process of a transition; we grab the starting\n     * values, listen for changes to all of the children of the container, and start appropriate\n     * animations.\n     *\n     * @param parent The ViewGroup to which the View is being added.\n     * @param child The View being added to the ViewGroup.\n     * @param changesLayout Whether the removal will cause changes in the layout of other views\n     * in the container. INVISIBLE views becoming VISIBLE will not cause changes and thus will not\n     * affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasListeners()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void layoutChange(ViewGroup parent)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when there is a call to layout() on the container\n     * with this LayoutTransition. If the CHANGING transition is enabled and if there is no other\n     * transition currently running on the container, then this call runs a CHANGING transition.\n     * The transition does not start immediately; it just sets up the mechanism to run if any\n     * of the children of the container change their layout parameters (similar to\n     * the CHANGE_APPEARING and CHANGE_DISAPPEARING transitions).\n     *\n     * @param parent The ViewGroup whose layout() method has been called.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addChild(ViewGroup parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when a child view is about to be added to the\n     * container. This callback starts the process of a transition; we grab the starting\n     * values, listen for changes to all of the children of the container, and start appropriate\n     * animations.\n     *\n     * @param parent The ViewGroup to which the View is being added.\n     * @param child The View being added to the ViewGroup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showChild(ViewGroup parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.\n     ",
    "links" : [ "#showChild(android.view.ViewGroup" ]
  }, {
    "name" : "public void showChild(ViewGroup parent, View child, int oldVisibility)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when a child view is about to be made visible in the\n     * container. This callback starts the process of a transition; we grab the starting\n     * values, listen for changes to all of the children of the container, and start appropriate\n     * animations.\n     *\n     * @param parent The ViewGroup in which the View is being made visible.\n     * @param child The View being made visible.\n     * @param oldVisibility The previous visibility value of the child View, either\n     * {@link View#GONE} or {@link View#INVISIBLE}.\n     ",
    "links" : [ "android.view.View#INVISIBLE", "android.view.View#GONE" ]
  }, {
    "name" : "private void removeChild(ViewGroup parent, View child, boolean changesLayout)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when a child view is about to be removed from the\n     * container. This callback starts the process of a transition; we grab the starting\n     * values, listen for changes to all of the children of the container, and start appropriate\n     * animations.\n     *\n     * @param parent The ViewGroup from which the View is being removed.\n     * @param child The View being removed from the ViewGroup.\n     * @param changesLayout Whether the removal will cause changes in the layout of other views\n     * in the container. Views becoming INVISIBLE will not cause changes and thus will not\n     * affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeChild(ViewGroup parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when a child view is about to be removed from the\n     * container. This callback starts the process of a transition; we grab the starting\n     * values, listen for changes to all of the children of the container, and start appropriate\n     * animations.\n     *\n     * @param parent The ViewGroup from which the View is being removed.\n     * @param child The View being removed from the ViewGroup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void hideChild(ViewGroup parent, View child)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.\n     ",
    "links" : [ "#hideChild(android.view.ViewGroup" ]
  }, {
    "name" : "public void hideChild(ViewGroup parent, View child, int newVisibility)",
    "returnType" : "void",
    "comment" : "\n     * This method is called by ViewGroup when a child view is about to be hidden in\n     * container. This callback starts the process of a transition; we grab the starting\n     * values, listen for changes to all of the children of the container, and start appropriate\n     * animations.\n     *\n     * @param parent The parent ViewGroup of the View being hidden.\n     * @param child The View being hidden.\n     * @param newVisibility The new visibility value of the child View, either\n     * {@link View#GONE} or {@link View#INVISIBLE}.\n     ",
    "links" : [ "android.view.View#INVISIBLE", "android.view.View#GONE" ]
  }, {
    "name" : "public void addTransitionListener(TransitionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener that will be called when the bounds of the view change due to\n     * layout processing.\n     *\n     * @param listener The listener that will be called when layout bounds change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeTransitionListener(TransitionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener for layout changes.\n     *\n     * @param listener The listener for layout bounds change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<TransitionListener> getTransitionListeners()",
    "returnType" : "List<TransitionListener>",
    "comment" : "\n     * Gets the current list of listeners for layout changes.\n     * @return\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDuration(long duration)", "public void enableTransitionType(int transitionType)", "public void disableTransitionType(int transitionType)", "public boolean isTransitionTypeEnabled(int transitionType)", "public void setStartDelay(int transitionType, long delay)", "public long getStartDelay(int transitionType)", "public void setDuration(int transitionType, long duration)", "public long getDuration(int transitionType)", "public void setStagger(int transitionType, long duration)", "public long getStagger(int transitionType)", "public void setInterpolator(int transitionType, TimeInterpolator interpolator)", "public TimeInterpolator getInterpolator(int transitionType)", "public void setAnimator(int transitionType, Animator animator)", "public Animator getAnimator(int transitionType)", "private void runChangeTransition(final ViewGroup parent, View newView, final int changeReason)", "public void setAnimateParentHierarchy(boolean animateParentHierarchy)", "private void setupChangeAnimation(final ViewGroup parent, final int changeReason, Animator baseAnimator, final long duration, final View child)", "public void startChangingAnimations()", "public void endChangingAnimations()", "public boolean isChangingLayout()", "public boolean isRunning()", "public void cancel()", "public void cancel(int transitionType)", "private void runAppearingTransition(final ViewGroup parent, final View child)", "private void runDisappearingTransition(final ViewGroup parent, final View child)", "private void addChild(ViewGroup parent, View child, boolean changesLayout)", "private boolean hasListeners()", "public void layoutChange(ViewGroup parent)", "public void addChild(ViewGroup parent, View child)", "public void showChild(ViewGroup parent, View child)", "public void showChild(ViewGroup parent, View child, int oldVisibility)", "private void removeChild(ViewGroup parent, View child, boolean changesLayout)", "public void removeChild(ViewGroup parent, View child)", "public void hideChild(ViewGroup parent, View child)", "public void hideChild(ViewGroup parent, View child, int newVisibility)", "public void addTransitionListener(TransitionListener listener)", "public void removeTransitionListener(TransitionListener listener)", "public List<TransitionListener> getTransitionListeners()" ],
  "variableNames" : [ "CHANGE_APPEARING", "CHANGE_DISAPPEARING", "APPEARING", "DISAPPEARING", "CHANGING", "FLAG_APPEARING", "FLAG_DISAPPEARING", "FLAG_CHANGE_APPEARING", "FLAG_CHANGE_DISAPPEARING", "FLAG_CHANGING", "mDisappearingAnim", "mAppearingAnim", "mChangingAppearingAnim", "mChangingDisappearingAnim", "mChangingAnim", "defaultChange", "defaultChangeIn", "defaultChangeOut", "defaultFadeIn", "defaultFadeOut", "DEFAULT_DURATION", "mChangingAppearingDuration", "mChangingDisappearingDuration", "mChangingDuration", "mAppearingDuration", "mDisappearingDuration", "mAppearingDelay", "mDisappearingDelay", "mChangingAppearingDelay", "mChangingDisappearingDelay", "mChangingDelay", "mChangingAppearingStagger", "mChangingDisappearingStagger", "mChangingStagger", "ACCEL_DECEL_INTERPOLATOR", "DECEL_INTERPOLATOR", "sAppearingInterpolator", "sDisappearingInterpolator", "sChangingAppearingInterpolator", "sChangingDisappearingInterpolator", "sChangingInterpolator", "mAppearingInterpolator", "mDisappearingInterpolator", "mChangingAppearingInterpolator", "mChangingDisappearingInterpolator", "mChangingInterpolator", "pendingAnimations", "currentChangingAnimations", "currentAppearingAnimations", "currentDisappearingAnimations", "layoutChangeListenerMap", "staggerDelay", "mTransitionTypes", "mListeners", "mAnimateParentHierarchy" ]
}