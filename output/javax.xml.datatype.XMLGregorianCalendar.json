{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/datatype/XMLGregorianCalendar.java",
  "packageName" : "javax.xml.datatype",
  "className" : "XMLGregorianCalendar",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void clear()",
    "returnType" : "void",
    "comment" : "\n     * <p>Unset all fields to undefined.</p>\n     *\n     * <p>Set all int fields to {@link DatatypeConstants#FIELD_UNDEFINED} and reference fields\n     * to null.</p>\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void reset()",
    "returnType" : "void",
    "comment" : "\n     * <p>Reset this <code>XMLGregorianCalendar</code> to its original values.</p>\n     *\n     * <p><code>XMLGregorianCalendar</code> is reset to the same values as when it was created with\n     * {@link DatatypeFactory#newXMLGregorianCalendar()},\n     * {@link DatatypeFactory#newXMLGregorianCalendar(String lexicalRepresentation)},\n     * {@link DatatypeFactory#newXMLGregorianCalendar(\n     *   BigInteger year,\n     *   int month,\n     *   int day,\n     *   int hour,\n     *   int minute,\n     *   int second,\n     *   BigDecimal fractionalSecond,\n     *   int timezone)},\n     * {@link DatatypeFactory#newXMLGregorianCalendar(\n     *   int year,\n     *   int month,\n     *   int day,\n     *   int hour,\n     *   int minute,\n     *   int second,\n     *   int millisecond,\n     *   int timezone)},\n     * {@link DatatypeFactory#newXMLGregorianCalendar(GregorianCalendar cal)},\n     * {@link DatatypeFactory#newXMLGregorianCalendarDate(\n     *   int year,\n     *   int month,\n     *   int day,\n     *   int timezone)},\n     * {@link DatatypeFactory#newXMLGregorianCalendarTime(\n     *   int hours,\n     *   int minutes,\n     *   int seconds,\n     *   int timezone)},\n     * {@link DatatypeFactory#newXMLGregorianCalendarTime(\n     *   int hours,\n     *   int minutes,\n     *   int seconds,\n     *   BigDecimal fractionalSecond,\n     *   int timezone)} or\n     * {@link DatatypeFactory#newXMLGregorianCalendarTime(\n     *   int hours,\n     *   int minutes,\n     *   int seconds,\n     *   int milliseconds,\n     *   int timezone)}.\n     * </p>\n     *\n     * <p><code>reset()</code> is designed to allow the reuse of existing <code>XMLGregorianCalendar</code>s\n     * thus saving resources associated with the creation of new <code>XMLGregorianCalendar</code>s.</p>\n     ",
    "links" : [ "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarTime(", "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarDate(", "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar(GregorianCalendar", "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar(", "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar(String", "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar()" ]
  }, {
    "name" : "public abstract void setYear(BigInteger year)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set low and high order component of XSD <code>dateTime</code> year field.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of <code>null</code>.</p>\n     *\n     * @param year value constraints summarized in <a href=\"#datetimefield-year\">year field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>year</code> parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setYear(int year)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set year of XSD <code>dateTime</code> year field.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of\n     * {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>Note: if the absolute value of the <code>year</code> parameter\n     * is less than 10^9, the eon component of the XSD year field is set to\n     * <code>null</code> by this method.</p>\n     *\n     * @param year value constraints are summarized in <a href=\"#datetimefield-year\">year field of date/time field mapping table</a>.\n     *   If year is {@link DatatypeConstants#FIELD_UNDEFINED}, then eon is set to <code>null</code>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setMonth(int month)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set month.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @param month value constraints summarized in <a href=\"#datetimefield-month\">month field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>month</code> parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setDay(int day)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set days in month.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @param day value constraints summarized in <a href=\"#datetimefield-day\">day field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>day</code> parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setTimezone(int offset)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the number of minutes in the timezone offset.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @param offset value constraints summarized in <a href=\"#datetimefield-timezone\">\n     *   timezone field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>offset</code> parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public void setTime(int hour, int minute, int second)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set time as one unit.</p>\n     *\n     * @param hour value constraints are summarized in\n     * <a href=\"#datetimefield-hour\">hour field of date/time field mapping table</a>.\n     * @param minute value constraints are summarized in\n     * <a href=\"#datetimefield-minute\">minute field of date/time field mapping table</a>.\n     * @param second value constraints are summarized in\n     * <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.\n     *\n     * @see #setTime(int, int, int, BigDecimal)\n     *\n     * @throws IllegalArgumentException if any parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setHour(int hour)",
    "returnType" : "void",
    "comment" : "\n      * <p>Set hours.</p>\n      *\n      * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n      *\n      * @param hour value constraints summarized in <a href=\"#datetimefield-hour\">hour field of date/time field mapping table</a>.\n      *\n      * @throws IllegalArgumentException if <code>hour</code> parameter is outside value constraints for the field as specified in\n      *   <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setMinute(int minute)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set minutes.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @param minute value constraints summarized in <a href=\"#datetimefield-minute\">minute field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>minute</code> parameter is outside value constraints for the field as specified in\n     *   <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n    ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setSecond(int second)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set seconds.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @param second value constraints summarized in <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>second</code> parameter is outside value constraints for the field as specified in\n     *   <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n    ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setMillisecond(int millisecond)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set milliseconds.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @param millisecond value constraints summarized in\n     *   <a href=\"#datetimefield-millisecond\">millisecond field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>millisecond</code> parameter is outside value constraints for the field as specified\n     *   in <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n    ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract void setFractionalSecond(BigDecimal fractional)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set fractional seconds.</p>\n     *\n     * <p>Unset this field by invoking the setter with a parameter value of <code>null</code>.</p>\n     *\n     * @param fractional value constraints summarized in\n     *   <a href=\"#datetimefield-fractional\">fractional field of date/time field mapping table</a>.\n     *\n     * @throws IllegalArgumentException if <code>fractional</code> parameter is outside value constraints for the field as specified\n     *   in <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n    ",
    "links" : [ ]
  }, {
    "name" : "public void setTime(int hour, int minute, int second, BigDecimal fractional)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set time as one unit, including the optional infinite precision\n     * fractional seconds.</p>\n     *\n     * @param hour value constraints are summarized in\n     * <a href=\"#datetimefield-hour\">hour field of date/time field mapping table</a>.\n     * @param minute value constraints are summarized in\n     * <a href=\"#datetimefield-minute\">minute field of date/time field mapping table</a>.\n     * @param second value constraints are summarized in\n     * <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.\n     * @param fractional value of <code>null</code> indicates this optional\n     *   field is not set.\n     *\n     * @throws IllegalArgumentException if any parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTime(int hour, int minute, int second, int millisecond)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set time as one unit, including optional milliseconds.</p>\n     *\n     * @param hour value constraints are summarized in\n     * <a href=\"#datetimefield-hour\">hour field of date/time field mapping table</a>.\n     * @param minute value constraints are summarized in\n     * <a href=\"#datetimefield-minute\">minute field of date/time field mapping table</a>.\n     * @param second value constraints are summarized in\n     * <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.\n     * @param millisecond value of {@link DatatypeConstants#FIELD_UNDEFINED} indicates this\n     *                    optional field is not set.\n     *\n     * @throws IllegalArgumentException if any parameter is\n     * outside value constraints for the field as specified in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract BigInteger getEon()",
    "returnType" : "BigInteger",
    "comment" : "\n     * <p>Return high order component for XML Schema 1.0 dateTime datatype field for\n     * <code>year</code>.\n     * <code>null</code> if this optional part of the year field is not defined.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-year\">year field of date/time field mapping table</a>.</p>\n     * @return eon of this <code>XMLGregorianCalendar</code>. The value\n     * returned is an integer multiple of 10^9.\n     *\n     * @see #getYear()\n     * @see #getEonAndYear()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getYear()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return low order component for XML Schema 1.0 dateTime datatype field for\n     * <code>year</code> or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-year\">year field of date/time field mapping table</a>.</p>\n     *\n     * @return year  of this <code>XMLGregorianCalendar</code>.\n     *\n     * @see #getEon()\n     * @see #getEonAndYear()\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract BigInteger getEonAndYear()",
    "returnType" : "BigInteger",
    "comment" : "\n     * <p>Return XML Schema 1.0 dateTime datatype field for\n     * <code>year</code>.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-year\">year field of date/time field mapping table</a>.</p>\n     *\n     * @return sum of <code>eon</code> and <code>BigInteger.valueOf(year)</code>\n     * when both fields are defined. When only <code>year</code> is defined,\n     * return it. When both <code>eon</code> and <code>year</code> are not\n     * defined, return <code>null</code>.\n     *\n     * @see #getEon()\n     * @see #getYear()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMonth()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return number of month or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-month\">month field of date/time field mapping table</a>.</p>\n     *\n     * @return year  of this <code>XMLGregorianCalendar</code>.\n     *\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract int getDay()",
    "returnType" : "int",
    "comment" : "\n     * Return day in month or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-day\">day field of date/time field mapping table</a>.</p>\n     *\n     * @see #setDay(int)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract int getTimezone()",
    "returnType" : "int",
    "comment" : "\n     * Return timezone offset in minutes or\n     * {@link DatatypeConstants#FIELD_UNDEFINED} if this optional field is not defined.\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-timezone\">timezone field of date/time field mapping table</a>.</p>\n     *\n     * @see #setTimezone(int)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract int getHour()",
    "returnType" : "int",
    "comment" : "\n     * Return hours or {@link DatatypeConstants#FIELD_UNDEFINED}.\n     * Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-hour\">hour field of date/time field mapping table</a>.</p>\n     * @see #setTime(int, int, int)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract int getMinute()",
    "returnType" : "int",
    "comment" : "\n     * Return minutes or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     * Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-minute\">minute field of date/time field mapping table</a>.</p>\n     * @see #setTime(int, int, int)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract int getSecond()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return seconds or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.\n     * When this field is not defined, the optional xs:dateTime\n     * fractional seconds field, represented by\n     * {@link #getFractionalSecond()} and {@link #getMillisecond()},\n     * must not be defined.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.</p>\n     *\n     * @return Second  of this <code>XMLGregorianCalendar</code>.\n     *\n     * @see #getFractionalSecond()\n     * @see #getMillisecond()\n     * @see #setTime(int, int, int)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "#getMillisecond()", "#getFractionalSecond()" ]
  }, {
    "name" : "public int getMillisecond()",
    "returnType" : "int",
    "comment" : "\n     * <p>Return millisecond precision of {@link #getFractionalSecond()}.</p>\n     *\n     * <p>This method represents a convenience accessor to infinite\n     * precision fractional second value returned by\n     * {@link #getFractionalSecond()}. The returned value is the rounded\n     * down to milliseconds value of\n     * {@link #getFractionalSecond()}. When {@link #getFractionalSecond()}\n     * returns <code>null</code>, this method must return\n     * {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * <p>Value constraints for this value are summarized in\n     * <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.</p>\n     *\n     * @return Millisecond  of this <code>XMLGregorianCalendar</code>.\n     *\n     * @see #getFractionalSecond()\n     * @see #setTime(int, int, int)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "#getFractionalSecond()" ]
  }, {
    "name" : "public abstract BigDecimal getFractionalSecond()",
    "returnType" : "BigDecimal",
    "comment" : "\n     * <p>Return fractional seconds.</p>\n     *\n     * <p><code>null</code> is returned when this optional field is not defined.</p>\n     *\n     * <p>Value constraints are detailed in\n     * <a href=\"#datetimefield-second\">second field of date/time field mapping table</a>.</p>\n     *\n     * <p>This optional field can only have a defined value when the\n     * xs:dateTime second field, represented by {@link #getSecond()},\n     * does not return {@link DatatypeConstants#FIELD_UNDEFINED}.</p>\n     *\n     * @return fractional seconds  of this <code>XMLGregorianCalendar</code>.\n     *\n     * @see #getSecond()\n     * @see #setTime(int, int, int, BigDecimal)\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED", "#getSecond()" ]
  }, {
    "name" : "public abstract int compare(XMLGregorianCalendar xmlGregorianCalendar)",
    "returnType" : "int",
    "comment" : "\n     * <p>Compare two instances of W3C XML Schema 1.0 date/time datatypes\n     * according to partial order relation defined in\n     * <a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime-order\">W3C XML Schema 1.0 Part 2, Section 3.2.7.3,\n     * <i>Order relation on dateTime</i></a>.</p>\n     *\n     * <p><code>xsd:dateTime</code> datatype field mapping to accessors of\n     * this class are defined in\n     * <a href=\"#datetimefieldmapping\">date/time field mapping table</a>.</p>\n     *\n     * @param xmlGregorianCalendar Instance of <code>XMLGregorianCalendar</code> to compare\n     *\n     * @return The relationship between <code>this</code> <code>XMLGregorianCalendar</code> and\n     *   the specified <code>xmlGregorianCalendar</code> as\n     *   {@link DatatypeConstants#LESSER},\n     *   {@link DatatypeConstants#EQUAL},\n     *   {@link DatatypeConstants#GREATER} or\n     *   {@link DatatypeConstants#INDETERMINATE}.\n     *\n     * @throws NullPointerException if <code>xmlGregorianCalendar</code> is null.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#GREATER", "javax.xml.datatype.DatatypeConstants#LESSER", "javax.xml.datatype.DatatypeConstants#INDETERMINATE", "javax.xml.datatype.DatatypeConstants#EQUAL" ]
  }, {
    "name" : "public abstract XMLGregorianCalendar normalize()",
    "returnType" : "XMLGregorianCalendar",
    "comment" : "\n     * <p>Normalize this instance to UTC.</p>\n     *\n     * <p>2000-03-04T23:00:00+03:00 normalizes to 2000-03-04T20:00:00Z</p>\n     * <p>Implements W3C XML Schema Part 2, Section 3.2.7.3 (A).</p>\n     *\n     * @return <code>this</code> <code>XMLGregorianCalendar</code> normalized to UTC.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicates whether parameter <code>obj</code> is \"equal to\" this one.</p>\n     *\n     * @param obj to compare.\n     *\n     * @return <code>true</code> when <code>obj</code> is an instance of <code>XMLGregorianCalendar</code>\n     *   and  {@link #compare(XMLGregorianCalendar obj)} returns {@link DatatypeConstants#EQUAL}, otherwise <code>false</code>.\n     ",
    "links" : [ "#compare(XMLGregorianCalendar", "javax.xml.datatype.DatatypeConstants#EQUAL" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * <p>Returns a hash code consistent with the definition of the equals method.</p>\n     *\n     * @return hash code of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toXMLFormat()",
    "returnType" : "String",
    "comment" : "\n     * <p>Return the lexical representation of <code>this</code> instance.\n     * The format is specified in\n     * <a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime-order\">XML Schema 1.0 Part 2, Section 3.2.[7-14].1,\n     * <i>Lexical Representation</i>\".</a></p>\n     *\n     * <p>Specific target lexical representation format is determined by\n     * {@link #getXMLSchemaType()}.</p>\n     *\n     * @return XML, as <code>String</code>, representation of this <code>XMLGregorianCalendar</code>\n     *\n     * @throws IllegalStateException if the combination of set fields\n     *    does not match one of the eight defined XML Schema builtin date/time datatypes.\n     ",
    "links" : [ "#getXMLSchemaType()" ]
  }, {
    "name" : "public abstract QName getXMLSchemaType()",
    "returnType" : "QName",
    "comment" : "\n     * <p>Return the name of the XML Schema date/time type that this instance\n     * maps to. Type is computed based on fields that are set.</p>\n     *\n     * <table border=\"2\" rules=\"all\" cellpadding=\"2\">\n     *   <thead>\n     *     <tr>\n     *       <th align=\"center\" colspan=\"7\">\n     *         Required fields for XML Schema 1.0 Date/Time Datatypes.<br/>\n     *         <i>(timezone is optional for all date/time datatypes)</i>\n     *       </th>\n     *     </tr>\n     *   </thead>\n     *   <tbody>\n     *     <tr>\n     *       <td>Datatype</td>\n     *       <td>year</td>\n     *       <td>month</td>\n     *       <td>day</td>\n     *       <td>hour</td>\n     *       <td>minute</td>\n     *       <td>second</td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#DATETIME}</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#DATE}</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#TIME}</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#GYEARMONTH}</td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#GMONTHDAY}</td>\n     *       <td></td>\n     *       <td>X</td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#GYEAR}</td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#GMONTH}</td>\n     *       <td></td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *     <tr>\n     *       <td>{@link DatatypeConstants#GDAY}</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td>X</td>\n     *       <td></td>\n     *       <td></td>\n     *       <td></td>\n     *     </tr>\n     *   </tbody>\n     * </table>\n     *\n     * @throws java.lang.IllegalStateException if the combination of set fields\n     *    does not match one of the eight defined XML Schema builtin\n     *    date/time datatypes.\n     * @return One of the following class constants:\n     *   {@link DatatypeConstants#DATETIME},\n     *   {@link DatatypeConstants#TIME},\n     *   {@link DatatypeConstants#DATE},\n     *   {@link DatatypeConstants#GYEARMONTH},\n     *   {@link DatatypeConstants#GMONTHDAY},\n     *   {@link DatatypeConstants#GYEAR},\n     *   {@link DatatypeConstants#GMONTH} or\n     *   {@link DatatypeConstants#GDAY}.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#GMONTHDAY", "javax.xml.datatype.DatatypeConstants#DATE", "javax.xml.datatype.DatatypeConstants#GYEARMONTH", "javax.xml.datatype.DatatypeConstants#TIME", "javax.xml.datatype.DatatypeConstants#GYEAR", "javax.xml.datatype.DatatypeConstants#GMONTH", "javax.xml.datatype.DatatypeConstants#GDAY", "javax.xml.datatype.DatatypeConstants#DATETIME" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * <p>Returns a <code>String</code> representation of this <code>XMLGregorianCalendar</code> <code>Object</code>.</p>\n     *\n     * <p>The result is a lexical representation generated by {@link #toXMLFormat()}.</p>\n     *\n     * @return A non-<code>null</code> valid <code>String</code> representation of this <code>XMLGregorianCalendar</code>.\n     *\n     * @throws IllegalStateException if the combination of set fields\n     *    does not match one of the eight defined XML Schema builtin date/time datatypes.\n     *\n     * @see #toXMLFormat()\n     ",
    "links" : [ "#toXMLFormat()" ]
  }, {
    "name" : "public abstract boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Validate instance by <code>getXMLSchemaType()</code> constraints.\n     * @return true if data values are valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void add(Duration duration)",
    "returnType" : "void",
    "comment" : "\n     * <p>Add <code>duration</code> to this instance.</p>\n     *\n     * <p>The computation is specified in\n     * <a href=\"http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes\">XML Schema 1.0 Part 2, Appendix E,\n     * <i>Adding durations to dateTimes</i>></a>.\n     * <a href=\"#datetimefieldsmapping\">date/time field mapping table</a>\n     * defines the mapping from XML Schema 1.0 <code>dateTime</code> fields\n     * to this class' representation of those fields.</p>\n     *\n     * @param duration Duration to add to this <code>XMLGregorianCalendar</code>.\n     *\n     * @throws NullPointerException  when <code>duration</code> parameter is <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract GregorianCalendar toGregorianCalendar()",
    "returnType" : "GregorianCalendar",
    "comment" : "\n     * <p>Convert this <code>XMLGregorianCalendar</code> to a {@link GregorianCalendar}.</p>\n     *\n     * <p>When <code>this</code> instance has an undefined field, this\n     * conversion relies on the <code>java.util.GregorianCalendar</code> default\n     * for its corresponding field. A notable difference between\n     * XML Schema 1.0 date/time datatypes and <code>java.util.GregorianCalendar</code>\n     * is that Timezone value is optional for date/time datatypes and it is\n     * a required field for <code>java.util.GregorianCalendar</code>. See javadoc\n     * for <code>java.util.TimeZone.getDefault()</code> on how the default\n     * is determined. To explicitly specify the <code>TimeZone</code>\n     * instance, see\n     * {@link #toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)}.</p>\n     *\n     * <table border=\"2\" rules=\"all\" cellpadding=\"2\">\n     *   <thead>\n     *     <tr>\n     *       <th align=\"center\" colspan=\"2\">\n     *          Field by Field Conversion from this class to\n     *          <code>java.util.GregorianCalendar</code>\n     *       </th>\n     *     </tr>\n     *   </thead>\n     *   <tbody>\n     *     <tr>\n     *        <td><code>java.util.GregorianCalendar</code> field</td>\n     *        <td><code>javax.xml.datatype.XMLGregorianCalendar</code> field</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>ERA</code></td>\n     *       <td>{@link #getEonAndYear()}<code>.signum() < 0 ? GregorianCalendar.BC : GregorianCalendar.AD</code></td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>YEAR</code></td>\n     *       <td>{@link #getEonAndYear()}<code>.abs().intValue()</code><i>*</i></td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>MONTH</code></td>\n     *       <td>{@link #getMonth()} - {@link DatatypeConstants#JANUARY} + {@link GregorianCalendar#JANUARY}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>DAY_OF_MONTH</code></td>\n     *       <td>{@link #getDay()}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>HOUR_OF_DAY</code></td>\n     *       <td>{@link #getHour()}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>MINUTE</code></td>\n     *       <td>{@link #getMinute()}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>SECOND</code></td>\n     *       <td>{@link #getSecond()}</td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>MILLISECOND</code></td>\n     *       <td>get millisecond order from {@link #getFractionalSecond()}<i>*</i> </td>\n     *     </tr>\n     *     <tr>\n     *       <td><code>GregorianCalendar.setTimeZone(TimeZone)</code></td>\n     *       <td>{@link #getTimezone()} formatted into Custom timezone id</td>\n     *     </tr>\n     *   </tbody>\n     * </table>\n     * <i>*</i> designates possible loss of precision during the conversion due\n     * to source datatype having higher precision than target datatype.\n     *\n     * <p>To ensure consistency in conversion implementations, the new\n     * <code>GregorianCalendar</code> should be instantiated in following\n     * manner.\n     * <ul>\n     *   <li>Using <code>timeZone</code> value as defined above, create a new\n     * <code>java.util.GregorianCalendar(timeZone,Locale.getDefault())</code>.\n     *   </li>\n     *   <li>Initialize all GregorianCalendar fields by calling {(@link GegorianCalendar#clear()}.</li>\n     *   <li>Obtain a pure Gregorian Calendar by invoking\n     *   <code>GregorianCalendar.setGregorianChange(\n     *   new Date(Long.MIN_VALUE))</code>.</li>\n     *   <li>Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,\n     *       MINUTE, SECOND and MILLISECOND are set using the method\n     *       <code>Calendar.set(int,int)</code></li>\n     * </ul>\n     * </p>\n     *\n     * @see #toGregorianCalendar(java.util.TimeZone, java.util.Locale, XMLGregorianCalendar)\n     ",
    "links" : [ "java.util.GregorianCalendar", "java.util.GregorianCalendar#JANUARY", "#getMinute()", "#toGregorianCalendar(TimeZone", "#getMonth()", "javax.xml.datatype.DatatypeConstants#JANUARY", "#getDay()", "#getTimezone()", "#getFractionalSecond()", "#clear()", "#getHour()", "#getSecond()", "#getEonAndYear()" ]
  }, {
    "name" : "public abstract GregorianCalendar toGregorianCalendar(java.util.TimeZone timezone, java.util.Locale aLocale, XMLGregorianCalendar defaults)",
    "returnType" : "GregorianCalendar",
    "comment" : "\n     * <p>Convert this <code>XMLGregorianCalendar</code> along with provided parameters\n     * to a {@link GregorianCalendar} instance.</p>\n     *\n     * <p> Since XML Schema 1.0 date/time datetypes has no concept of\n     * timezone ids or daylight savings timezone ids, this conversion operation\n     * allows the user to explicitly specify one with\n     * <code>timezone</code> parameter.</p>\n     *\n     * <p>To compute the return value's <code>TimeZone</code> field,\n     * <ul>\n     * <li>when parameter <code>timeZone</code> is non-null,\n     * it is the timezone field.</li>\n     * <li>else when <code>this.getTimezone() != FIELD_UNDEFINED</code>,\n     * create a <code>java.util.TimeZone</code> with a custom timezone id\n     * using the <code>this.getTimezone()</code>.</li>\n     * <li>else when <code>defaults.getTimezone() != FIELD_UNDEFINED</code>,\n     * create a <code>java.util.TimeZone</code> with a custom timezone id\n     * using <code>defaults.getTimezone()</code>.</li>\n     * <li>else use the <code>GregorianCalendar</code> default timezone value\n     * for the host is defined as specified by\n     * <code>java.util.TimeZone.getDefault()</code>.</li></ul></p>\n     *\n     * <p>To ensure consistency in conversion implementations, the new\n     * <code>GregorianCalendar</code> should be instantiated in following\n     * manner.\n     * <ul>\n     *   <li>Create a new <code>java.util.GregorianCalendar(TimeZone,\n     *       Locale)</code> with TimeZone set as specified above and the\n     *       <code>Locale</code> parameter.\n     *   </li>\n     *   <li>Initialize all GregorianCalendar fields by calling {@link GregorianCalendar#clear()}</li>\n     *   <li>Obtain a pure Gregorian Calendar by invoking\n     *   <code>GregorianCalendar.setGregorianChange(\n     *   new Date(Long.MIN_VALUE))</code>.</li>\n     *   <li>Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,\n     *       MINUTE, SECOND and MILLISECOND are set using the method\n     *       <code>Calendar.set(int,int)</code></li>\n     * </ul></p>\n     *\n     * @param timezone provide Timezone. <code>null</code> is a legal value.\n     * @param aLocale  provide explicit Locale. Use default GregorianCalendar locale if\n     *                 value is <code>null</code>.\n     * @param defaults provide default field values to use when corresponding\n     *                 field for this instance is FIELD_UNDEFINED or null.\n     *                 If <code>defaults</code>is <code>null</code> or a field\n     *                 within the specified <code>defaults</code> is undefined,\n     *                 just use <code>java.util.GregorianCalendar</code> defaults.\n     * @return a java.util.GregorianCalendar conversion of this instance.\n     ",
    "links" : [ "java.util.GregorianCalendar", "java.util.GregorianCalendar#clear()" ]
  }, {
    "name" : "public abstract TimeZone getTimeZone(int defaultZoneoffset)",
    "returnType" : "TimeZone",
    "comment" : "\n     * <p>Returns a <code>java.util.TimeZone</code> for this class.</p>\n     *\n     * <p>If timezone field is defined for this instance,\n     * returns TimeZone initialized with custom timezone id\n     * of zoneoffset. If timezone field is undefined,\n     * try the defaultZoneoffset that was passed in.\n     * If defaultZoneoffset is FIELD_UNDEFINED, return\n     * default timezone for this host.\n     * (Same default as java.util.GregorianCalendar).</p>\n     *\n     * @param defaultZoneoffset default zoneoffset if this zoneoffset is\n     * {@link DatatypeConstants#FIELD_UNDEFINED}.\n     *\n     * @return TimeZone for this.\n     ",
    "links" : [ "javax.xml.datatype.DatatypeConstants#FIELD_UNDEFINED" ]
  }, {
    "name" : "public abstract Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * <p>Creates and returns a copy of this object.</p>\n     *\n     * @return copy of this <code>Object</code>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void clear()", "public abstract void reset()", "public abstract void setYear(BigInteger year)", "public abstract void setYear(int year)", "public abstract void setMonth(int month)", "public abstract void setDay(int day)", "public abstract void setTimezone(int offset)", "public void setTime(int hour, int minute, int second)", "public abstract void setHour(int hour)", "public abstract void setMinute(int minute)", "public abstract void setSecond(int second)", "public abstract void setMillisecond(int millisecond)", "public abstract void setFractionalSecond(BigDecimal fractional)", "public void setTime(int hour, int minute, int second, BigDecimal fractional)", "public void setTime(int hour, int minute, int second, int millisecond)", "public abstract BigInteger getEon()", "public abstract int getYear()", "public abstract BigInteger getEonAndYear()", "public abstract int getMonth()", "public abstract int getDay()", "public abstract int getTimezone()", "public abstract int getHour()", "public abstract int getMinute()", "public abstract int getSecond()", "public int getMillisecond()", "public abstract BigDecimal getFractionalSecond()", "public abstract int compare(XMLGregorianCalendar xmlGregorianCalendar)", "public abstract XMLGregorianCalendar normalize()", "public boolean equals(Object obj)", "public int hashCode()", "public abstract String toXMLFormat()", "public abstract QName getXMLSchemaType()", "public String toString()", "public abstract boolean isValid()", "public abstract void add(Duration duration)", "public abstract GregorianCalendar toGregorianCalendar()", "public abstract GregorianCalendar toGregorianCalendar(java.util.TimeZone timezone, java.util.Locale aLocale, XMLGregorianCalendar defaults)", "public abstract TimeZone getTimeZone(int defaultZoneoffset)", "public abstract Object clone()" ],
  "variableNames" : [ ]
}