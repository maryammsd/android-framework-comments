{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/ExpatReader.java",
  "packageName" : "org.apache.harmony.xml",
  "className" : "ExpatReader",
  "comment" : "\n * SAX wrapper around Expat. Interns strings. Does not support validation.\n * Does not support {@link DTDHandler}.\n ",
  "links" : [ "org.xml.sax.DTDHandler" ],
  "variables" : [ {
    "name" : "contentHandler",
    "type" : "ContentHandler",
    "comment" : "\n     * ExpatParser accesses these fields directly during parsing. The user\n     * should be able to safely change them during parsing.\n     ",
    "links" : [ ]
  }, {
    "name" : "dtdHandler",
    "type" : "DTDHandler",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "entityResolver",
    "type" : "EntityResolver",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "errorHandler",
    "type" : "ErrorHandler",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "lexicalHandler",
    "type" : "LexicalHandler",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "processNamespaces",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "processNamespacePrefixes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEXICAL_HANDLER_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public EntityResolver getEntityResolver()",
    "returnType" : "EntityResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDTDHandler(DTDHandler dtdHandler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DTDHandler getDTDHandler()",
    "returnType" : "DTDHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentHandler getContentHandler()",
    "returnType" : "ContentHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ErrorHandler getErrorHandler()",
    "returnType" : "ErrorHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LexicalHandler getLexicalHandler()",
    "returnType" : "LexicalHandler",
    "comment" : "\n     * Returns the current lexical handler.\n     *\n     * @return the current lexical handler, or null if none has been registered\n     * @see #setLexicalHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLexicalHandler(LexicalHandler lexicalHandler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a lexical event handler. Supports neither\n     * {@link LexicalHandler#startEntity(String)} nor\n     * {@link LexicalHandler#endEntity(String)}.\n     *\n     * <p>If the application does not register a lexical handler, all\n     * lexical events reported by the SAX parser will be silently\n     * ignored.</p>\n     *\n     * <p>Applications may register a new or different handler in the\n     * middle of a parse, and the SAX parser must begin using the new\n     * handler immediately.</p>\n     *\n     * @param lexicalHandler listens for lexical events\n     * @see #getLexicalHandler()\n     ",
    "links" : [ "org.xml.sax.ext.LexicalHandler#startEntity(String)", "org.xml.sax.ext.LexicalHandler#endEntity(String)" ]
  }, {
    "name" : "public boolean isNamespaceProcessingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this SAX parser processes namespaces.\n     *\n     * @see #setNamespaceProcessingEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceProcessingEnabled(boolean processNamespaces)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables namespace processing. Set to true by default. If you\n     * enable namespace processing, the parser will invoke\n     * {@link ContentHandler#startPrefixMapping(String, String)} and\n     * {@link ContentHandler#endPrefixMapping(String)}, and it will filter\n     * out namespace declarations from element attributes.\n     *\n     * @see #isNamespaceProcessingEnabled()\n     ",
    "links" : [ "org.xml.sax.ContentHandler#startPrefixMapping(String", "org.xml.sax.ContentHandler#endPrefixMapping(String)" ]
  }, {
    "name" : "public void parse(InputSource input) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parse(Reader in, String publicId, String systemId) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parse(InputStream in, String charsetName, String publicId, String systemId) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parse(String systemId) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException", "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setEntityResolver(EntityResolver resolver)", "public EntityResolver getEntityResolver()", "public void setDTDHandler(DTDHandler dtdHandler)", "public DTDHandler getDTDHandler()", "public void setContentHandler(ContentHandler handler)", "public ContentHandler getContentHandler()", "public void setErrorHandler(ErrorHandler handler)", "public ErrorHandler getErrorHandler()", "public LexicalHandler getLexicalHandler()", "public void setLexicalHandler(LexicalHandler lexicalHandler)", "public boolean isNamespaceProcessingEnabled()", "public void setNamespaceProcessingEnabled(boolean processNamespaces)", "public void parse(InputSource input) throws IOException, SAXException", "private void parse(Reader in, String publicId, String systemId) throws IOException, SAXException", "private void parse(InputStream in, String charsetName, String publicId, String systemId) throws IOException, SAXException", "public void parse(String systemId) throws IOException, SAXException" ],
  "variableNames" : [ "contentHandler", "dtdHandler", "entityResolver", "errorHandler", "lexicalHandler", "processNamespaces", "processNamespacePrefixes", "LEXICAL_HANDLER_PROPERTY" ]
}