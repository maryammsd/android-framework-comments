{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/TableRow.java",
  "packageName" : "android.widget",
  "className" : "TableRow",
  "comment" : "\n * <p>A layout that arranges its children horizontally. A TableRow should\n * always be used as a child of a {@link android.widget.TableLayout}. If a\n * TableRow's parent is not a TableLayout, the TableRow will behave as\n * an horizontal {@link android.widget.LinearLayout}.</p>\n *\n * <p>The children of a TableRow do not need to specify the\n * <code>layout_width</code> and <code>layout_height</code> attributes in the\n * XML file. TableRow always enforces those values to be respectively\n * {@link android.widget.TableLayout.LayoutParams#MATCH_PARENT} and\n * {@link android.widget.TableLayout.LayoutParams#WRAP_CONTENT}.</p>\n *\n * <p>\n * Also see {@link TableRow.LayoutParams android.widget.TableRow.LayoutParams}\n * for layout attributes </p>\n ",
  "variables" : [ {
    "name" : "mNumColumns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnWidths",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstrainedColumnWidths",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnToChildIndex",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildrenTracker",
    "type" : "ChildrenTracker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initTableRow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnHierarchyChangeListener(OnHierarchyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void setColumnCollapsed(int columnIndex, boolean collapsed)",
    "returnType" : "void",
    "comment" : "\n     * <p>Collapses or restores a given column.</p>\n     *\n     * @param columnIndex the index of the column\n     * @param collapsed true if the column must be collapsed, false otherwise\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getVirtualChildAt(int i)",
    "returnType" : "View",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVirtualChildCount()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void mapIndexAndColumns()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int measureNullChild(int childIndex)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void measureChildBeforeLayout(View child, int childIndex, int widthMeasureSpec, int totalWidth, int heightMeasureSpec, int totalHeight)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " int getChildrenSkipCount(View child, int index)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " int getLocationOffset(View child)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " int getNextLocationOffset(View child)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] getColumnsWidths(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "int[]",
    "comment" : "\n     * <p>Measures the preferred width of each child, including its margins.</p>\n     *\n     * @param widthMeasureSpec the width constraint imposed by our parent\n     *\n     * @return an array of integers corresponding to the width of each cell, or\n     *         column, in this row\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : " void setColumnsWidthConstraints(int[] columnWidths)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the width of all of the columns in this row. At layout time,\n     * this row sets a fixed width, as defined by <code>columnWidths</code>,\n     * on each child (or cell, or column.)</p>\n     *\n     * @param columnWidths the fixed width of each column that this row must\n     *                     honor\n     * @throws IllegalArgumentException when columnWidths' length is smaller\n     *         than the number of children in this row\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected LinearLayout.LayoutParams generateDefaultLayoutParams()",
    "returnType" : "LinearLayout.LayoutParams",
    "comment" : "\n     * Returns a set of layout parameters with a width of\n     * {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT},\n     * a height of {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT} and no spanning.\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected LinearLayout.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "LinearLayout.LayoutParams",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mNumColumns", "mColumnWidths", "mConstrainedColumnWidths", "mColumnToChildIndex", "mChildrenTracker" ],
  "methodNames" : [ "private void initTableRow()", "public void setOnHierarchyChangeListener(OnHierarchyChangeListener listener)", " void setColumnCollapsed(int columnIndex, boolean collapsed)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "public View getVirtualChildAt(int i)", "public int getVirtualChildCount()", "private void mapIndexAndColumns()", " int measureNullChild(int childIndex)", " void measureChildBeforeLayout(View child, int childIndex, int widthMeasureSpec, int totalWidth, int heightMeasureSpec, int totalHeight)", " int getChildrenSkipCount(View child, int index)", " int getLocationOffset(View child)", " int getNextLocationOffset(View child)", " int[] getColumnsWidths(int widthMeasureSpec, int heightMeasureSpec)", " void setColumnsWidthConstraints(int[] columnWidths)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "protected LinearLayout.LayoutParams generateDefaultLayoutParams()", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "protected LinearLayout.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "public CharSequence getAccessibilityClassName()" ]
}