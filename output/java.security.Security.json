{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/Security.java",
  "packageName" : "java.security",
  "className" : "Security",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "version",
    "type" : "AtomicInteger",
    "comment" : " Android-added: Track the version to allow callers know when something has changed.",
    "links" : [ ]
  }, {
    "name" : "props",
    "type" : "Properties",
    "comment" : " Android-changed: Added final.",
    "links" : [ ]
  }, {
    "name" : "spiMap",
    "type" : "Map<String, Class<?>>",
    "comment" : " Map containing cached Spi Class objects of the specified type",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void initializeStatic()",
    "returnType" : "void",
    "comment" : "\n     * Initialize to default values, if <java.home>/lib/java.security\n     * is not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ProviderProperty getProviderProperty(String key)",
    "returnType" : "ProviderProperty",
    "comment" : "\n     * Looks up providers, and returns the property (and its associated\n     * provider) mapping the key, if any.\n     * The order in which the providers are looked up is the\n     * provider-preference order, as specificed in the security\n     * properties file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getProviderProperty(String key, Provider provider)",
    "returnType" : "String",
    "comment" : "\n     * Returns the property (if any) mapping the key for the given provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getAlgorithmProperty(String algName, String propName)",
    "returnType" : "String",
    "comment" : "\n     * Gets a specified property for an algorithm. The algorithm name\n     * should be a standard name. See the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * One possible use is by specialized algorithm parsers, which may map\n     * classes to algorithms which they understand (much like Key parsers\n     * do).\n     *\n     * @param algName the algorithm name.\n     *\n     * @param propName the name of the property to get.\n     *\n     * @return the value of the specified property.\n     *\n     * @deprecated This method used to return the value of a proprietary\n     * property in the master file of the \"SUN\" Cryptographic Service\n     * Provider in order to determine how to parse algorithm-specific\n     * parameters. Use the new provider-based and algorithm-independent\n     * {@code AlgorithmParameters} and {@code KeyFactory} engine\n     * classes (introduced in the J2SE version 1.2 platform) instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized int insertProviderAt(Provider provider, int position)",
    "returnType" : "int",
    "comment" : "\n     * Adds a new provider, at a specified position. The position is\n     * the preference order in which providers are searched for\n     * requested algorithms.  The position is 1-based, that is,\n     * 1 is most preferred, followed by 2, and so on.\n     *\n     * <p>If the given provider is installed at the requested position,\n     * the provider that used to be at that position, and all providers\n     * with a position greater than {@code position}, are shifted up\n     * one position (towards the end of the list of installed providers).\n     *\n     * <p>A provider cannot be added if it is already installed.\n     *\n     * <p>If there is a security manager, the\n     * {@link java.lang.SecurityManager#checkSecurityAccess} method is called\n     * with the {@code \"insertProvider\"} permission target name to see if\n     * it's ok to add a new provider. If this permission check is denied,\n     * {@code checkSecurityAccess} is called again with the\n     * {@code \"insertProvider.\"+provider.getName()} permission target name. If\n     * both checks are denied, a {@code SecurityException} is thrown.\n     *\n     * @param provider the provider to be added.\n     *\n     * @param position the preference position that the caller would\n     * like for this provider.\n     *\n     * @return the actual preference position in which the provider was\n     * added, or -1 if the provider was not added because it is\n     * already installed.\n     *\n     * @throws  NullPointerException if provider is null\n     * @throws  SecurityException\n     *          if a security manager exists and its {@link\n     *          java.lang.SecurityManager#checkSecurityAccess} method\n     *          denies access to add a new provider\n     *\n     * @see #getProvider\n     * @see #removeProvider\n     * @see java.security.SecurityPermission\n     ",
    "links" : [ "java.lang.SecurityManager#checkSecurityAccess" ]
  }, {
    "name" : "public static int addProvider(Provider provider)",
    "returnType" : "int",
    "comment" : "\n     * Adds a provider to the next position available.\n     *\n     * <p>If there is a security manager, the\n     * {@link java.lang.SecurityManager#checkSecurityAccess} method is called\n     * with the {@code \"insertProvider\"} permission target name to see if\n     * it's ok to add a new provider. If this permission check is denied,\n     * {@code checkSecurityAccess} is called again with the\n     * {@code \"insertProvider.\"+provider.getName()} permission target name. If\n     * both checks are denied, a {@code SecurityException} is thrown.\n     *\n     * @param provider the provider to be added.\n     *\n     * @return the preference position in which the provider was\n     * added, or -1 if the provider was not added because it is\n     * already installed.\n     *\n     * @throws  NullPointerException if provider is null\n     * @throws  SecurityException\n     *          if a security manager exists and its {@link\n     *          java.lang.SecurityManager#checkSecurityAccess} method\n     *          denies access to add a new provider\n     *\n     * @see #getProvider\n     * @see #removeProvider\n     * @see java.security.SecurityPermission\n     ",
    "links" : [ "java.lang.SecurityManager#checkSecurityAccess" ]
  }, {
    "name" : "public static synchronized void removeProvider(String name)",
    "returnType" : "void",
    "comment" : "\n     * Removes the provider with the specified name.\n     *\n     * <p>When the specified provider is removed, all providers located\n     * at a position greater than where the specified provider was are shifted\n     * down one position (towards the head of the list of installed\n     * providers).\n     *\n     * <p>This method returns silently if the provider is not installed or\n     * if name is null.\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkSecurityAccess}\n     * method is called with the string {@code \"removeProvider.\"+name}\n     * to see if it's ok to remove the provider.\n     * If the default implementation of {@code checkSecurityAccess}\n     * is used (i.e., that method is not overriden), then this will result in\n     * a call to the security manager's {@code checkPermission} method\n     * with a {@code SecurityPermission(\"removeProvider.\"+name)}\n     * permission.\n     *\n     * @param name the name of the provider to remove.\n     *\n     * @throws  SecurityException\n     *          if a security manager exists and its {@link\n     *          java.lang.SecurityManager#checkSecurityAccess} method\n     *          denies\n     *          access to remove the provider\n     *\n     * @see #getProvider\n     * @see #addProvider\n     ",
    "links" : [ "java.lang.SecurityManager#checkSecurityAccess" ]
  }, {
    "name" : "public static Provider[] getProviders()",
    "returnType" : "Provider[]",
    "comment" : "\n     * Returns an array containing all the installed providers. The order of\n     * the providers in the array is their preference order.\n     *\n     * @return an array of all the installed providers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Provider getProvider(String name)",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider installed with the specified name, if\n     * any. Returns null if no provider with the specified name is\n     * installed or if name is null.\n     *\n     * @param name the name of the provider to get.\n     *\n     * @return the provider of the specified name.\n     *\n     * @see #removeProvider\n     * @see #addProvider\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Provider[] getProviders(String filter)",
    "returnType" : "Provider[]",
    "comment" : "\n     * Returns an array containing all installed providers that satisfy the\n     * specified selection criterion, or null if no such providers have been\n     * installed. The returned providers are ordered\n     * according to their\n     * {@linkplain #insertProviderAt(java.security.Provider, int) preference order}.\n     *\n     * <p> A cryptographic service is always associated with a particular\n     * algorithm or type. For example, a digital signature service is\n     * always associated with a particular algorithm (e.g., DSA),\n     * and a CertificateFactory service is always associated with\n     * a particular certificate type (e.g., X.509).\n     *\n     * <p>The selection criterion must be specified in one of the following two\n     * formats:\n     * <ul>\n     * <li> <i>{@literal <crypto_service>.<algorithm_or_type>}</i>\n     * <p> The cryptographic service name must not contain any dots.\n     * <p> A\n     * provider satisfies the specified selection criterion iff the provider\n     * implements the\n     * specified algorithm or type for the specified cryptographic service.\n     * <p> For example, \"CertificateFactory.X.509\"\n     * would be satisfied by any provider that supplied\n     * a CertificateFactory implementation for X.509 certificates.\n     * <li> <i>{@literal <crypto_service>.<algorithm_or_type>\n     * <attribute_name>:<attribute_value>}</i>\n     * <p> The cryptographic service name must not contain any dots. There\n     * must be one or more space characters between the\n     * <i>{@literal <algorithm_or_type>}</i> and the\n     * <i>{@literal <attribute_name>}</i>.\n     *  <p> A provider satisfies this selection criterion iff the\n     * provider implements the specified algorithm or type for the specified\n     * cryptographic service and its implementation meets the\n     * constraint expressed by the specified attribute name/value pair.\n     * <p> For example, \"Signature.SHA1withDSA KeySize:1024\" would be\n     * satisfied by any provider that implemented\n     * the SHA1withDSA signature algorithm with a keysize of 1024 (or larger).\n     *\n     * </ul>\n     *\n     * <p> See the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard cryptographic service names, standard\n     * algorithm names and standard attribute names.\n     *\n     * @param filter the criterion for selecting\n     * providers. The filter is case-insensitive.\n     *\n     * @return all the installed providers that satisfy the selection\n     * criterion, or null if no such providers have been installed.\n     *\n     * @throws InvalidParameterException\n     *         if the filter is not in the required format\n     * @throws NullPointerException if filter is null\n     *\n     * @see #getProviders(java.util.Map)\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Provider[] getProviders(Map<String, String> filter)",
    "returnType" : "Provider[]",
    "comment" : "\n     * Returns an array containing all installed providers that satisfy the\n     * specified* selection criteria, or null if no such providers have been\n     * installed. The returned providers are ordered\n     * according to their\n     * {@linkplain #insertProviderAt(java.security.Provider, int)\n     * preference order}.\n     *\n     * <p>The selection criteria are represented by a map.\n     * Each map entry represents a selection criterion.\n     * A provider is selected iff it satisfies all selection\n     * criteria. The key for any entry in such a map must be in one of the\n     * following two formats:\n     * <ul>\n     * <li> <i>{@literal <crypto_service>.<algorithm_or_type>}</i>\n     * <p> The cryptographic service name must not contain any dots.\n     * <p> The value associated with the key must be an empty string.\n     * <p> A provider\n     * satisfies this selection criterion iff the provider implements the\n     * specified algorithm or type for the specified cryptographic service.\n     * <li>  <i>{@literal <crypto_service>}.\n     * {@literal <algorithm_or_type> <attribute_name>}</i>\n     * <p> The cryptographic service name must not contain any dots. There\n     * must be one or more space characters between the\n     * <i>{@literal <algorithm_or_type>}</i>\n     * and the <i>{@literal <attribute_name>}</i>.\n     * <p> The value associated with the key must be a non-empty string.\n     * A provider satisfies this selection criterion iff the\n     * provider implements the specified algorithm or type for the specified\n     * cryptographic service and its implementation meets the\n     * constraint expressed by the specified attribute name/value pair.\n     * </ul>\n     *\n     * <p> See the <a href=\n     * \"../../../technotes/guides/security/StandardNames.html\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard cryptographic service names, standard\n     * algorithm names and standard attribute names.\n     *\n     * @param filter the criteria for selecting\n     * providers. The filter is case-insensitive.\n     *\n     * @return all the installed providers that satisfy the selection\n     * criteria, or null if no such providers have been installed.\n     *\n     * @throws InvalidParameterException\n     *         if the filter is not in the required format\n     * @throws NullPointerException if filter is null\n     *\n     * @see #getProviders(java.lang.String)\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Class<?> getSpiClass(String type)",
    "returnType" : "Class<?>",
    "comment" : "\n     * Return the Class object for the given engine type\n     * (e.g. \"MessageDigest\"). Works for Spis in the java.security package\n     * only.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object[] getImpl(String algorithm, String type, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array of objects: the first object in the array is\n     * an instance of an implementation of the requested algorithm\n     * and type, and the second object in the array identifies the provider\n     * of that implementation.\n     * The {@code provider} argument can be null, in which case all\n     * configured providers will be searched in order of preference.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object[] getImpl(String algorithm, String type, String provider, Object params) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Object[] getImpl(String algorithm, String type, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array of objects: the first object in the array is\n     * an instance of an implementation of the requested algorithm\n     * and type, and the second object in the array identifies the provider\n     * of that implementation.\n     * The {@code provider} argument cannot be null.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object[] getImpl(String algorithm, String type, Provider provider, Object params) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getProperty(String key)",
    "returnType" : "String",
    "comment" : "\n     * Gets a security property value.\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkPermission}  method is called with a\n     * {@code java.security.SecurityPermission(\"getProperty.\"+key)}\n     * permission to see if it's ok to retrieve the specified\n     * security property value..\n     *\n     * @param key the key of the property being retrieved.\n     *\n     * @return the value of the security property corresponding to key.\n     *\n     * @throws  SecurityException\n     *          if a security manager exists and its {@link\n     *          java.lang.SecurityManager#checkPermission} method\n     *          denies\n     *          access to retrieve the specified security property value\n     * @throws  NullPointerException is key is null\n     *\n     * @see #setProperty\n     * @see java.security.SecurityPermission\n     ",
    "links" : [ "java.lang.SecurityManager#checkPermission" ]
  }, {
    "name" : "public static void setProperty(String key, String datum)",
    "returnType" : "void",
    "comment" : "\n     * Sets a security property value.\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkPermission} method is called with a\n     * {@code java.security.SecurityPermission(\"setProperty.\"+key)}\n     * permission to see if it's ok to set the specified\n     * security property value.\n     *\n     * @param key the name of the property to be set.\n     *\n     * @param datum the value of the property to be set.\n     *\n     * @throws  SecurityException\n     *          if a security manager exists and its {@link\n     *          java.lang.SecurityManager#checkPermission} method\n     *          denies access to set the specified security property value\n     * @throws  NullPointerException if key or datum is null\n     *\n     * @see #getProperty\n     * @see java.security.SecurityPermission\n     ",
    "links" : [ "java.lang.SecurityManager#checkPermission" ]
  }, {
    "name" : "private static void invalidateSMCache(String key)",
    "returnType" : "void",
    "comment" : "\n     * Implementation detail:  If the property we just set in\n     * setProperty() was either \"package.access\" or\n     * \"package.definition\", we need to signal to the SecurityManager\n     * class that the value has just changed, and that it should\n     * invalidate it's local cache values.\n     *\n     * Rather than create a new API entry for this function,\n     * we use reflection to set a private variable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static LinkedHashSet<Provider> getAllQualifyingCandidates(String filterKey, String filterValue, Provider[] allProviders)",
    "returnType" : "LinkedHashSet<Provider>",
    "comment" : "\n    * Returns all providers who satisfy the specified\n    * criterion.\n    ",
    "links" : [ ]
  }, {
    "name" : "private static LinkedHashSet<Provider> getProvidersNotUsingCache(String serviceName, String algName, String attrName, String filterValue, Provider[] allProviders)",
    "returnType" : "LinkedHashSet<Provider>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCriterionSatisfied(Provider prov, String serviceName, String algName, String attrName, String filterValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given provider satisfies\n     * the selection criterion key:value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isStandardAttr(String attribute)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the attribute is a standard attribute;\n     * otherwise, returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isConstraintSatisfied(String attribute, String value, String prop)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the requested attribute value is supported;\n     * otherwise, returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String[] getFilterComponents(String filterKey, String filterValue)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getAlgorithms(String serviceName)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a Set of Strings containing the names of all available\n     * algorithms or types for the specified Java cryptographic service\n     * (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns\n     * an empty Set if there is no provider that supports the\n     * specified service or if serviceName is null. For a complete list\n     * of Java cryptographic services, please see the\n     * <a href=\"../../../technotes/guides/security/crypto/CryptoSpec.html\">Java\n     * Cryptography Architecture API Specification &amp; Reference</a>.\n     * Note: the returned set is immutable.\n     *\n     * @param serviceName the name of the Java cryptographic\n     * service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore).\n     * Note: this parameter is case-insensitive.\n     *\n     * @return a Set of Strings containing the names of all available\n     * algorithms or types for the specified Java cryptographic service\n     * or an empty set if no provider supports the specified service.\n     *\n     * @since 1.4\n     *",
    "links" : [ ]
  }, {
    "name" : "public static void increaseVersion()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void initializeStatic()", "private static ProviderProperty getProviderProperty(String key)", "private static String getProviderProperty(String key, Provider provider)", "public static String getAlgorithmProperty(String algName, String propName)", "public static synchronized int insertProviderAt(Provider provider, int position)", "public static int addProvider(Provider provider)", "public static synchronized void removeProvider(String name)", "public static Provider[] getProviders()", "public static Provider getProvider(String name)", "public static Provider[] getProviders(String filter)", "public static Provider[] getProviders(Map<String, String> filter)", "private static Class<?> getSpiClass(String type)", " static Object[] getImpl(String algorithm, String type, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", " static Object[] getImpl(String algorithm, String type, String provider, Object params) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException", " static Object[] getImpl(String algorithm, String type, Provider provider) throws NoSuchAlgorithmException", " static Object[] getImpl(String algorithm, String type, Provider provider, Object params) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException", "public static String getProperty(String key)", "public static void setProperty(String key, String datum)", "private static void invalidateSMCache(String key)", "private static LinkedHashSet<Provider> getAllQualifyingCandidates(String filterKey, String filterValue, Provider[] allProviders)", "private static LinkedHashSet<Provider> getProvidersNotUsingCache(String serviceName, String algName, String attrName, String filterValue, Provider[] allProviders)", "private static boolean isCriterionSatisfied(Provider prov, String serviceName, String algName, String attrName, String filterValue)", "private static boolean isStandardAttr(String attribute)", "private static boolean isConstraintSatisfied(String attribute, String value, String prop)", " static String[] getFilterComponents(String filterKey, String filterValue)", "public static Set<String> getAlgorithms(String serviceName)", "public static void increaseVersion()", "public static int getVersion()" ],
  "variableNames" : [ "version", "props", "spiMap" ]
}