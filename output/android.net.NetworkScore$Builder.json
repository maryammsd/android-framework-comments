{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkScore.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : "\n     * A builder for NetworkScore.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "POLICY_NONE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_LEGACY_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacyInt",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeepConnectedReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPolicies",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setLegacyInt(final int score)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the legacy int for this score.\n         *\n         * This will be used for measurements and logs, but will no longer be used for ranking\n         * networks against each other. Callers that existed before Android S should send what\n         * they used to send as the int score.\n         *\n         * @param score the legacy int\n         * @return this\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShouldYieldToBadWifi(final boolean val)",
    "returnType" : "Builder",
    "comment" : " In the mean time this is handled by Connectivity in a backward-compatible manner.",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransportPrimary(final boolean val)",
    "returnType" : "Builder",
    "comment" : "\n         * Set for a network that is primary for this transport.\n         *\n         * When multiple networks of the same transport are active, the device prefers the ones that\n         * are primary. This is meant in particular for DS-DA devices with a user setting to choose\n         * the default SIM card, or for WiFi STA+STA and make-before-break cases.\n         *\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setExiting(final boolean val)",
    "returnType" : "Builder",
    "comment" : "\n         * Set for a network that will likely disconnect in a few seconds.\n         *\n         * If this policy is set, the device will expect this network to disconnect within seconds.\n         * It will try to migrate to some other network if any is available, policy permitting, to\n         * avoid service disruption.\n         * This is useful in particular when a good cellular network is available and WiFi is\n         * getting weak and risks disconnecting soon. The WiFi network should be marked as exiting\n         * so that the device will prefer the reliable mobile network over this soon-to-be-lost\n         * WiFi.\n         *\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setKeepConnectedReason(@KeepConnectedReason final int reason)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the keep-connected reason.\n         *\n         * This can be reset by calling it again with {@link KEEP_CONNECTED_NONE}.\n         ",
    "links" : [ "KEEP_CONNECTED_NONE" ]
  }, {
    "name" : "public NetworkScore build()",
    "returnType" : "NetworkScore",
    "comment" : "\n         * Builds this NetworkScore.\n         * @return The built NetworkScore object.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setLegacyInt(final int score)", "public Builder setShouldYieldToBadWifi(final boolean val)", "public Builder setTransportPrimary(final boolean val)", "public Builder setExiting(final boolean val)", "public Builder setKeepConnectedReason(@KeepConnectedReason final int reason)", "public NetworkScore build()" ],
  "variableNames" : [ "POLICY_NONE", "INVALID_LEGACY_INT", "mLegacyInt", "mKeepConnectedReason", "mPolicies" ]
}