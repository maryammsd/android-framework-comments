{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ImageButton.java",
  "packageName" : "android.widget",
  "className" : "ImageButton",
  "comment" : "\n * <p>\n * Displays a button with an image (instead of text) that can be pressed \n * or clicked by the user. By default, an ImageButton looks like a regular \n * {@link android.widget.Button}, with the standard button background\n * that changes color during different button states. The image on the surface\n * of the button is defined either by the {@code android:src} attribute in the\n * {@code <ImageButton>} XML element or by the\n * {@link #setImageResource(int)} method.</p>\n * \n * <p>To remove the standard button background image, define your own \n * background image or set the background color to be transparent.</p>\n * <p>To indicate the different button states (focused, selected, etc.), you can\n * define a different image for each state. E.g., a blue image by default, an\n * orange one for when focused, and a yellow one for when pressed. An easy way to\n * do this is with an XML drawable \"selector.\" For example:</p>\n * <pre>\n * &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n * &lt;selector xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n *     &lt;item android:state_pressed=\"true\"\n *           android:drawable=\"@drawable/button_pressed\" /&gt; &lt;!-- pressed --&gt;\n *     &lt;item android:state_focused=\"true\"\n *           android:drawable=\"@drawable/button_focused\" /&gt; &lt;!-- focused --&gt;\n *     &lt;item android:drawable=\"@drawable/button_normal\" /&gt; &lt;!-- default --&gt;\n * &lt;/selector&gt;</pre>\n *\n * <p>Save the XML file in your project {@code res/drawable/} folder and then \n * reference it as a drawable for the source of your ImageButton (in the \n * {@code android:src} attribute). Android will automatically change the image \n * based on the state of the button and the corresponding images\n * defined in the XML.</p>\n *\n * <p>The order of the {@code <item>} elements is important because they are\n * evaluated in order. This is why the \"normal\" button image comes last, because\n * it will only be applied after {@code android:state_pressed} and {@code\n * android:state_focused} have both evaluated false.</p>\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/controls/button.html\">Buttons</a>\n * guide.</p>\n *\n * <p><strong>XML attributes</strong></p>\n * <p>\n * See {@link android.R.styleable#ImageView Button Attributes},\n * {@link android.R.styleable#View View Attributes}\n * </p>\n ",
  "links" : [ "#setImageResource(int)", "android.widget.Button", "android.R.styleable#ImageView", "android.R.styleable#View" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected boolean onSetAlpha(int alpha)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected boolean onSetAlpha(int alpha)", "public CharSequence getAccessibilityClassName()", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)" ],
  "variableNames" : [ ]
}