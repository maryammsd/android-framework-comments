{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/spi/SelectorProvider.java",
  "packageName" : "java.nio.channels.spi",
  "className" : "SelectorProvider",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "lock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "SelectorProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Void checkPermission()",
    "returnType" : "Void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean loadProviderFromProperty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean loadProviderAsService()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SelectorProvider provider()",
    "returnType" : "SelectorProvider",
    "comment" : "\n     * Returns the system-wide default selector provider for this invocation of\n     * the Java virtual machine.\n     *\n     * <p> The first invocation of this method locates the default provider\n     * object as follows: </p>\n     *\n     * <ol>\n     *\n     *   <li><p> If the system property\n     *   {@code java.nio.channels.spi.SelectorProvider} is defined then it is\n     *   taken to be the fully-qualified name of a concrete provider class.\n     *   The class is loaded and instantiated; if this process fails then an\n     *   unspecified error is thrown.  </p></li>\n     *\n     *   <li><p> If a provider class has been installed in a jar file that is\n     *   visible to the system class loader, and that jar file contains a\n     *   provider-configuration file named\n     *   {@code java.nio.channels.spi.SelectorProvider} in the resource\n     *   directory {@code META-INF/services}, then the first class name\n     *   specified in that file is taken.  The class is loaded and\n     *   instantiated; if this process fails then an unspecified error is\n     *   thrown.  </p></li>\n     *\n     *   <li><p> Finally, if no provider has been specified by any of the above\n     *   means then the system-default provider class is instantiated and the\n     *   result is returned.  </p></li>\n     *\n     * </ol>\n     *\n     * <p> Subsequent invocations of this method return the provider that was\n     * returned by the first invocation.  </p>\n     *\n     * @return  The system-wide default selector provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DatagramChannel openDatagramChannel() throws IOException",
    "returnType" : "DatagramChannel",
    "comment" : "\n     * Opens a datagram channel.\n     *\n     * @return  The new channel\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DatagramChannel openDatagramChannel(ProtocolFamily family) throws IOException",
    "returnType" : "DatagramChannel",
    "comment" : "\n     * Opens a datagram channel.\n     *\n     * @param   family\n     *          The protocol family\n     *\n     * @return  A new datagram channel\n     *\n     * @throws  UnsupportedOperationException\n     *          If the specified protocol family is not supported\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Pipe openPipe() throws IOException",
    "returnType" : "Pipe",
    "comment" : "\n     * Opens a pipe.\n     *\n     * @return  The new pipe\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract AbstractSelector openSelector() throws IOException",
    "returnType" : "AbstractSelector",
    "comment" : "\n     * Opens a selector.\n     *\n     * @return  The new selector\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ServerSocketChannel openServerSocketChannel() throws IOException",
    "returnType" : "ServerSocketChannel",
    "comment" : "\n     * Opens a server-socket channel.\n     *\n     * @return  The new channel\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SocketChannel openSocketChannel() throws IOException",
    "returnType" : "SocketChannel",
    "comment" : "\n     * Opens a socket channel.\n     *\n     * @return  The new channel\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public Channel inheritedChannel() throws IOException",
    "returnType" : "Channel",
    "comment" : "\n     * Returns the channel inherited from the entity that created this\n     * Java virtual machine.\n     *\n     * <p> On many operating systems a process, such as a Java virtual\n     * machine, can be started in a manner that allows the process to\n     * inherit a channel from the entity that created the process. The\n     * manner in which this is done is system dependent, as are the\n     * possible entities to which the channel may be connected. For example,\n     * on UNIX systems, the Internet services daemon (<i>inetd</i>) is used to\n     * start programs to service requests when a request arrives on an\n     * associated network port. In this example, the process that is started,\n     * inherits a channel representing a network socket.\n     *\n     * <p> In cases where the inherited channel represents a network socket\n     * then the {@link java.nio.channels.Channel Channel} type returned\n     * by this method is determined as follows:\n     *\n     * <ul>\n     *\n     *  <li><p> If the inherited channel represents a stream-oriented connected\n     *  socket then a {@link java.nio.channels.SocketChannel SocketChannel} is\n     *  returned. The socket channel is, at least initially, in blocking\n     *  mode, bound to a socket address, and connected to a peer.\n     *  </p></li>\n     *\n     *  <li><p> If the inherited channel represents a stream-oriented listening\n     *  socket then a {@link java.nio.channels.ServerSocketChannel\n     *  ServerSocketChannel} is returned. The server-socket channel is, at\n     *  least initially, in blocking mode, and bound to a socket address.\n     *  </p></li>\n     *\n     *  <li><p> If the inherited channel is a datagram-oriented socket\n     *  then a {@link java.nio.channels.DatagramChannel DatagramChannel} is\n     *  returned. The datagram channel is, at least initially, in blocking\n     *  mode, and bound to a socket address.\n     *  </p></li>\n     *\n     * </ul>\n     *\n     * <p> In addition to the network-oriented channels described, this method\n     * may return other kinds of channels in the future.\n     *\n     * <p> The first invocation of this method creates the channel that is\n     * returned. Subsequent invocations of this method return the same\n     * channel. </p>\n     *\n     * @return  The inherited channel, if any, otherwise {@code null}.\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed and it denies\n     *          {@link RuntimePermission}{@code (\"inheritedChannel\")}\n     *\n     * @since 1.5\n     ",
    "links" : [ "java.nio.channels.ServerSocketChannelServerSocketChannel", "java.nio.channels.SocketChannel", "java.nio.channels.DatagramChannel", "RuntimePermission", "java.nio.channels.Channel" ]
  } ],
  "methodNames" : [ "private static Void checkPermission()", "private static boolean loadProviderFromProperty()", "private static boolean loadProviderAsService()", "public static SelectorProvider provider()", "public abstract DatagramChannel openDatagramChannel() throws IOException", "public abstract DatagramChannel openDatagramChannel(ProtocolFamily family) throws IOException", "public abstract Pipe openPipe() throws IOException", "public abstract AbstractSelector openSelector() throws IOException", "public abstract ServerSocketChannel openServerSocketChannel() throws IOException", "public abstract SocketChannel openSocketChannel() throws IOException", "public Channel inheritedChannel() throws IOException" ],
  "variableNames" : [ "lock", "provider" ]
}