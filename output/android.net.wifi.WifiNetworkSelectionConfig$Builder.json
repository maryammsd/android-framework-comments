{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiNetworkSelectionConfig.java",
  "packageName" : "android.net.wifi",
  "className" : "Builder",
  "comment" : "\n     * Used to create a {@link WifiNetworkSelectionConfig} Object.\n     ",
  "links" : [ "android.net.wifi.WifiNetworkSelectionConfig" ],
  "variables" : [ {
    "name" : "mWifiNetworkSelectionConfig",
    "type" : "WifiNetworkSelectionConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSufficiencyCheckEnabledWhenScreenOff(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * This setting affects wifi network selection behavior while already connected to a\n         * network, and is only relevant if associated network selection\n         * (see {@link #setAssociatedNetworkSelectionOverride(int)}) is enabled. Enable or disable\n         * network sufficiency check when wifi is connected and the screen is off.\n         * <p>\n         * If the sufficiency check is enabled, multiple parameters such as the RSSI and estimated\n         * throughput will be used to determine if the current network is sufficient. When the\n         * current network is found sufficient, the wifi framework will not attempt a network switch\n         * even if a potentially better network is available. When the current network is found\n         * insufficient, the wifi framework will keep trying to score other networks against the\n         * current network attempting to find and connect to a better alternative.\n         * <p>\n         * If the sufficiency check is disabled, then the currently connected network will always\n         * be considered insufficient. See the previous paragraph on the wifi framework's behavior\n         * when the current network is insufficient.\n         * <p>\n         * By default, network sufficiency check is enabled for both screen on and screen off cases.\n         * @param enabled Set to true to enable sufficiency check, and false to disable sufficiency\n         *                check.\n         ",
    "links" : [ "#setAssociatedNetworkSelectionOverride(int)" ]
  }, {
    "name" : "public Builder setSufficiencyCheckEnabledWhenScreenOn(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * This setting affects wifi network selection behavior while already connected to a\n         * network, and is only relevant if associated network selection\n         * (see {@link #setAssociatedNetworkSelectionOverride(int)}) is enabled. Enable or disable\n         * network sufficiency check when wifi is connected and the screen is on.\n         * <p>\n         * If the sufficiency check is enabled, multiple parameters such as the RSSI and estimated\n         * throughput will be used to determine if the current network is sufficient. When the\n         * current network is found sufficient, the wifi framework will not attempt a network switch\n         * even if a potentially better network is available. When the current network is found\n         * insufficient, the wifi framework will keep trying to score other networks against the\n         * current network attempting to find and connect to a better alternative.\n         * <p>\n         * If the sufficiency check is disabled, then the currently connected network will always\n         * be considered insufficient. See the previous paragraph on the wifi framework's behavior\n         * when the current network is insufficient.\n         * <p>\n         * By default, network sufficiency check is enabled for both screen on and screen off cases.\n         * @param enabled Set to true to enable sufficiency check, and false to disable sufficiency\n         *                check.\n         ",
    "links" : [ "#setAssociatedNetworkSelectionOverride(int)" ]
  }, {
    "name" : "public Builder setAssociatedNetworkSelectionOverride(@AssociatedNetworkSelectionOverride int override) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Override the value programmed by the\n         * {@code config_wifi_framework_enable_associated_network_selection} overlay with one of the\n         * {@code ASSOCIATED_NETWORK_SELECTION_OVERRIDE_} values. When the overlay is enabled,\n         * the wifi framework is allowed to automatically select and switch to a better wifi\n         * network while already connected. When the overlay is disabled, the wifi framework will\n         * simply stay connected to the connected network and will not attempt to automatically\n         * switch to another network.\n         * <p>\n         * By default, there is no override, and the framework will use the value set in the\n         * overlay.\n         * @param override the value to override the overlay as.\n         * @throws IllegalArgumentException if the input is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUserConnectChoiceOverrideEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Enable or disable candidate override with the user connect choice.\n         * <p>\n         * If the override is enabled, the network selector overrides any selected candidate\n         * with a network previously chosen by the user over the candidate (i.e. when the\n         * candidate was connected the user explicitly selected another network), if one exists.\n         * <p>\n         * If the override is disabled, network selector uses the network nominator candidate\n         * and does not override it with the user chosen configuration.\n         * <p>\n         * By default, user connect choice override is enabled.\n         * @param enabled Set to true to enable candidate override with the user connect choice,\n         *                and false to disable the override.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLastSelectionWeightEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Enable or disable last selection weight.\n         * <p>\n         * If the last selection weight is enabled, network selector prefers the latest\n         * user selected network over all other networks for a limited duration.\n         * This duration is configurable via {@code config_wifiFrameworkLastSelectionMinutes}.\n         * <p>\n         * If the last selection weight is disabled, network selector does not prefer a\n         * recently selected network over other networks.\n         * <p>\n         * By default, last selection weight is enabled.\n         * @param enabled Set to true to enable the last selection weight,\n         *                and false to disable it.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRssiThresholds(@WifiBand int band, @NonNull int[] thresholds) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the RSSI thresholds for the input band.\n         * <p>\n         * If the RSSI thresholds are set, network selector uses these values over the\n         * following overlay configured values for the specified input band.\n         * For {@code ScanResult.WIFI_BAND_24_GHZ}:\n         * <ul>\n         *     <li>{@code config_wifi_framework_wifi_score_bad_rssi_threshold_24GHz}</li>\n         *     <li>{@code config_wifi_framework_wifi_score_entry_rssi_threshold_24GHz}</li>\n         *     <li>{@code config_wifi_framework_wifi_score_low_rssi_threshold_24GHz}</li>\n         *     <li>{@code config_wifi_framework_wifi_score_good_rssi_threshold_24GHz}</li>\n         * </ul>\n         * For {@code ScanResult.WIFI_BAND_5_GHZ}:\n         * <ul>\n         *     <li>{@code config_wifi_framework_wifi_score_bad_rssi_threshold_5GHz}</li>\n         *     <li>{@code config_wifi_framework_wifi_score_entry_rssi_threshold_5GHz}</li>\n         *     <li>{@code config_wifi_framework_wifi_score_low_rssi_threshold_5GHz}</li>\n         *     <li>{@code config_wifi_framework_wifi_score_good_rssi_threshold_5GHz}</li>\n         * </ul>\n         * For {@code ScanResult.WIFI_BAND_6_GHZ}:\n         * <ul>\n         *     <li>{@code config_wifiFrameworkScoreBadRssiThreshold6ghz}</li>\n         *     <li>{@code config_wifiFrameworkScoreEntryRssiThreshold6ghz}</li>\n         *     <li>{@code config_wifiFrameworkScoreLowRssiThreshold6ghz}</li>\n         *     <li>{@code config_wifiFrameworkScoreGoodRssiThreshold6ghz}</li>\n         * </ul>\n         * <p>\n         * The input thresholds override the overlays listed above in the respective order\n         * so it must be an int array with 4 values.\n         * The values must be between -126 and -1 and the array must be strictly increasing.\n         * For example, [-80, -70, -60, -50] is a valid input while [-70, -70, -60, -50] is not\n         * since the array is not strictly increasing.\n         * The only exception to these rules is [0, 0, 0, 0], which is used to remove any\n         * RSSI thresholds set.\n         * <p>\n         * The input band must be one of the following {@link WifiBand}:\n         * <ul>\n         *     <li>{@code ScanResult.WIFI_BAND_24_GHZ}</li>\n         *     <li>{@code ScanResult.WIFI_BAND_5_GHZ}</li>\n         *     <li>{@code ScanResult.WIFI_BAND_6_GHZ}</li>\n         * </ul>\n         * <p>\n         * To remove the RSSI thresholds set, pass in an array with 0s as the thresholds.\n         * The network selector will go back to using the overlay configured values.\n         * @param band {@link WifiBand} you want to set the RSSI thresholds for\n         * @param thresholds RSSI thresholds\n         * @throws IllegalArgumentException if the input is invalid.\n         ",
    "links" : [ "android.net.wifi.ScanResult.WifiBand" ]
  }, {
    "name" : "public Builder setFrequencyWeights(@NonNull SparseArray<Integer> weights) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the frequency weights that will be used by the network selector to provide\n         * a bonus or penalty to the specified frequencies in the list.\n         * <p>\n         * The input SparseArray has to adhere to the following (key, value) format.\n         * Key: frequency the weight needs to be applied to in MHz (ex. 5201MHz -> 5201)\n         * Value: one of {@link FrequencyWeight}\n         * <ul>\n         *      <li>{@link #FREQUENCY_WEIGHT_LOW}</li>\n         *      <li>{@link #FREQUENCY_WEIGHT_HIGH}</li>\n         * </ul>\n         * <p>\n         * By default, all frequencies not present in the list will not have any frequency weight.\n         * <p>\n         * To removed the frequency weights set, pass in an empty SparseArray.\n         * The network selector will go back to treating all the frequencies with\n         * an equal preference.\n         * @param weights frequency weights\n         * @throws IllegalArgumentException if the input is invalid.\n         ",
    "links" : [ "#FREQUENCY_WEIGHT_LOW", "FrequencyWeight", "#FREQUENCY_WEIGHT_HIGH" ]
  }, {
    "name" : "public WifiNetworkSelectionConfig build()",
    "returnType" : "WifiNetworkSelectionConfig",
    "comment" : "\n         * Creates a WifiNetworkSelectionConfig for use in\n         * {@link WifiManager#setNetworkSelectionConfig(WifiNetworkSelectionConfig, Consumer)}\n         ",
    "links" : [ "android.net.wifi.WifiManager#setNetworkSelectionConfig(WifiNetworkSelectionConfig" ]
  } ],
  "methodNames" : [ "public Builder setSufficiencyCheckEnabledWhenScreenOff(boolean enabled)", "public Builder setSufficiencyCheckEnabledWhenScreenOn(boolean enabled)", "public Builder setAssociatedNetworkSelectionOverride(@AssociatedNetworkSelectionOverride int override) throws IllegalArgumentException", "public Builder setUserConnectChoiceOverrideEnabled(boolean enabled)", "public Builder setLastSelectionWeightEnabled(boolean enabled)", "public Builder setRssiThresholds(@WifiBand int band, @NonNull int[] thresholds) throws IllegalArgumentException", "public Builder setFrequencyWeights(@NonNull SparseArray<Integer> weights) throws IllegalArgumentException", "public WifiNetworkSelectionConfig build()" ],
  "variableNames" : [ "mWifiNetworkSelectionConfig" ]
}