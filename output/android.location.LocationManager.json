{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/LocationManager.java",
  "packageName" : "android.location",
  "className" : "LocationManager",
  "comment" : "\n * This class provides access to the system location services. These services allow applications to\n * obtain periodic updates of the device's geographical location, or to be notified when the device\n * enters the proximity of a given geographical location.\n *\n * <p class=\"note\">Unless noted, all Location API methods require the {@link\n * android.Manifest.permission#ACCESS_COARSE_LOCATION} or {@link\n * android.Manifest.permission#ACCESS_FINE_LOCATION} permissions. If your application only has the\n * coarse permission then it will not have access to fine location providers. Other providers will\n * still return location results, but the exact location will be obfuscated to a coarse level of\n * accuracy.\n ",
  "variables" : [ {
    "name" : "mLocationEnabledCache",
    "type" : "PropertyInvalidatedCache<Integer, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_PROVIDER_SECURITY_EXCEPTIONS",
    "type" : "long",
    "comment" : "\n     * For apps targeting Android R and above, {@link #getProvider(String)} will no longer throw any\n     * security exceptions.\n     *\n     * @hide\n     ",
    "links" : [ "#getProvider(String)" ]
  }, {
    "name" : "TARGETED_PENDING_INTENT",
    "type" : "long",
    "comment" : "\n     * For apps targeting Android K and above, supplied {@link PendingIntent}s must be targeted to a\n     * specific package.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "INCOMPLETE_LOCATION",
    "type" : "long",
    "comment" : "\n     * For apps targeting Android K and above, incomplete locations may not be passed to\n     * {@link #setTestProviderLocation}.\n     *\n     * @hide\n     ",
    "links" : [ "#setTestProviderLocation" ]
  }, {
    "name" : "GPS_STATUS_USAGE",
    "type" : "long",
    "comment" : "\n     * For apps targeting Android S and above, all {@link GpsStatus} API usage must be replaced with\n     * {@link GnssStatus} APIs.\n     *\n     * @hide\n     ",
    "links" : [ "android.location.GpsStatus", "android.location.GnssStatus" ]
  }, {
    "name" : "NETWORK_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Name of the network location provider.\n     *\n     * <p>This provider determines location based on nearby of cell tower and WiFi access points.\n     * Results are retrieved by means of a network lookup.\n     ",
    "links" : [ ]
  }, {
    "name" : "GPS_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Name of the GNSS location provider.\n     *\n     * <p>This provider determines location using GNSS satellites. Depending on conditions, this\n     * provider may take a while to return a location fix. Requires the\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission.\n     *\n     * <p>The extras Bundle for the GPS location provider can contain the following key/value pairs:\n     * <ul>\n     * <li> satellites - the number of satellites used to derive the fix\n     * </ul>\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "PASSIVE_PROVIDER",
    "type" : "String",
    "comment" : "\n     * A special location provider for receiving locations without actually initiating a location\n     * fix.\n     *\n     * <p>This provider can be used to passively receive location updates when other applications or\n     * services request them without actually requesting the locations yourself. This provider will\n     * only return locations generated by other providers.  You can query the\n     * {@link Location#getProvider()} method to determine the actual provider that supplied the\n     * location update. Requires the {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission, although there is no guarantee of fine locations.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.location.Location#getProvider()" ]
  }, {
    "name" : "FUSED_PROVIDER",
    "type" : "String",
    "comment" : "\n     * The fused location provider.\n     *\n     * <p>This provider combines may combine inputs from several location sources to provide the\n     * best possible location fix. It is implicitly used for all API's that involve the\n     * {@link LocationRequest} object.\n     *\n     * @hide\n     ",
    "links" : [ "android.location.LocationRequest" ]
  }, {
    "name" : "KEY_PROXIMITY_ENTERING",
    "type" : "String",
    "comment" : "\n     * Key used for the Bundle extra holding a boolean indicating whether\n     * a proximity alert is entering (true) or exiting (false)..\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_STATUS_CHANGED",
    "type" : "String",
    "comment" : "\n     * This key is no longer in use.\n     *\n     * <p>Key used for a Bundle extra holding an Integer status value when a status change is\n     * broadcast using a PendingIntent.\n     *\n     * @deprecated Status changes are deprecated and no longer broadcast from Android Q onwards.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PROVIDER_ENABLED",
    "type" : "String",
    "comment" : "\n     * Key used for an extra holding a boolean enabled/disabled status value when a provider\n     * enabled/disabled event is broadcast using a PendingIntent.\n     *\n     * @see #requestLocationUpdates(String, long, float, PendingIntent)\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LOCATION_CHANGED",
    "type" : "String",
    "comment" : "\n     * Key used for an extra holding a {@link Location} value when a location change is broadcast\n     * using a PendingIntent.\n     *\n     * @see #requestLocationUpdates(String, long, float, PendingIntent)\n     ",
    "links" : [ "android.location.Location" ]
  }, {
    "name" : "PROVIDERS_CHANGED_ACTION",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action when the set of enabled location providers changes. To check the\n     * status of a provider, use {@link #isProviderEnabled(String)}. From Android Q and above, will\n     * include a string intent extra, {@link #EXTRA_PROVIDER_NAME}, with the name of the provider\n     * whose state has changed. From Android R and above, will include a boolean intent extra,\n     * {@link #EXTRA_PROVIDER_ENABLED}, with the enabled state of the provider.\n     *\n     * @see #EXTRA_PROVIDER_NAME\n     * @see #EXTRA_PROVIDER_ENABLED\n     * @see #isProviderEnabled(String)\n     ",
    "links" : [ "#EXTRA_PROVIDER_ENABLED", "#EXTRA_PROVIDER_NAME", "#isProviderEnabled(String)" ]
  }, {
    "name" : "EXTRA_PROVIDER_NAME",
    "type" : "String",
    "comment" : "\n     * Intent extra included with {@link #PROVIDERS_CHANGED_ACTION} broadcasts, containing the name\n     * of the location provider that has changed.\n     *\n     * @see #PROVIDERS_CHANGED_ACTION\n     * @see #EXTRA_PROVIDER_ENABLED\n     ",
    "links" : [ "#PROVIDERS_CHANGED_ACTION" ]
  }, {
    "name" : "EXTRA_PROVIDER_ENABLED",
    "type" : "String",
    "comment" : "\n     * Intent extra included with {@link #PROVIDERS_CHANGED_ACTION} broadcasts, containing the\n     * boolean enabled state of the location provider that has changed.\n     *\n     * @see #PROVIDERS_CHANGED_ACTION\n     * @see #EXTRA_PROVIDER_NAME\n     ",
    "links" : [ "#PROVIDERS_CHANGED_ACTION" ]
  }, {
    "name" : "MODE_CHANGED_ACTION",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action when the device location enabled state changes. From Android R and\n     * above, will include a boolean intent extra, {@link #EXTRA_LOCATION_ENABLED}, with the enabled\n     * state of location.\n     *\n     * @see #EXTRA_LOCATION_ENABLED\n     * @see #isLocationEnabled()\n     ",
    "links" : [ "#EXTRA_LOCATION_ENABLED" ]
  }, {
    "name" : "EXTRA_LOCATION_ENABLED",
    "type" : "String",
    "comment" : "\n     * Intent extra included with {@link #MODE_CHANGED_ACTION} broadcasts, containing the boolean\n     * enabled state of location.\n     *\n     * @see #MODE_CHANGED_ACTION\n     ",
    "links" : [ "#MODE_CHANGED_ACTION" ]
  }, {
    "name" : "HIGH_POWER_REQUEST_CHANGE_ACTION",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action indicating that a high power location requests\n     * has either started or stopped being active.  The current state of\n     * active location requests should be read from AppOpsManager using\n     * {@code OP_MONITOR_HIGH_POWER_LOCATION}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SETTINGS_FOOTER_DISPLAYED_ACTION",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action for Settings app to inject a footer at the bottom of location\n     * settings. This is for use only by apps that are included in the system image.\n     *\n     * <p>To inject a footer to location settings, you must declare a broadcast receiver for\n     * this action in the manifest:\n     * <pre>\n     *     &lt;receiver android:name=\"com.example.android.footer.MyFooterInjector\"&gt;\n     *         &lt;intent-filter&gt;\n     *             &lt;action android:name=\"com.android.settings.location.INJECT_FOOTER\" /&gt;\n     *         &lt;/intent-filter&gt;\n     *         &lt;meta-data\n     *             android:name=\"com.android.settings.location.FOOTER_STRING\"\n     *             android:resource=\"@string/my_injected_footer_string\" /&gt;\n     *     &lt;/receiver&gt;\n     * </pre>\n     *\n     * <p>This broadcast receiver will never actually be invoked. See also\n     * {#METADATA_SETTINGS_FOOTER_STRING}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_SETTINGS_FOOTER_STRING",
    "type" : "String",
    "comment" : "\n     * Metadata name for {@link LocationManager#SETTINGS_FOOTER_DISPLAYED_ACTION} broadcast\n     * receivers to specify a string resource id as location settings footer text. This is for use\n     * only by apps that are included in the system image.\n     *\n     * <p>See {@link #SETTINGS_FOOTER_DISPLAYED_ACTION} for more detail on how to use.\n     *\n     * @hide\n     ",
    "links" : [ "#SETTINGS_FOOTER_DISPLAYED_ACTION", "android.location.LocationManager#SETTINGS_FOOTER_DISPLAYED_ACTION" ]
  }, {
    "name" : "GET_CURRENT_LOCATION_MAX_TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ILocationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<LocationListener, LocationListenerTransport>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatchedLocationCallbackManager",
    "type" : "BatchedLocationCallbackManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGnssStatusListenerManager",
    "type" : "GnssStatusListenerManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGnssMeasurementsListenerManager",
    "type" : "GnssMeasurementsListenerManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGnssNavigationMessageListenerTransport",
    "type" : "GnssNavigationMessageListenerManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGnssAntennaInfoListenerManager",
    "type" : "GnssAntennaInfoListenerManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_LOCATION_ENABLED_PROPERTY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String[] getBackgroundThrottlingWhitelist()",
    "returnType" : "String[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getIgnoreSettingsWhitelist()",
    "returnType" : "String[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtraLocationControllerPackage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the extra location controller package on the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExtraLocationControllerPackage(@Nullable String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Set the extra location controller package for location services on the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExtraLocationControllerPackageEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the extra location controller package is currently enabled on the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExtraLocationControllerPackageEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether extra location controller package is currently enabled on the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocationControllerExtraPackage(String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Set the extra location controller package for location services on the device.\n     *\n     * @removed\n     * @deprecated Use {@link #setExtraLocationControllerPackage} instead.\n     * @hide\n     ",
    "links" : [ "#setExtraLocationControllerPackage" ]
  }, {
    "name" : "public void setLocationControllerExtraPackageEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the extra location controller package is currently enabled on the device.\n     *\n     * @removed\n     * @deprecated Use {@link #setExtraLocationControllerPackageEnabled} instead.\n     * @hide\n     ",
    "links" : [ "#setExtraLocationControllerPackageEnabled" ]
  }, {
    "name" : "public boolean isLocationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current enabled/disabled state of location. To listen for changes, see\n     * {@link #MODE_CHANGED_ACTION}.\n     *\n     * @return true if location is enabled and false if location is disabled.\n     ",
    "links" : [ "#MODE_CHANGED_ACTION" ]
  }, {
    "name" : "public boolean isLocationEnabledForUser(@NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current enabled/disabled state of location for the given user.\n     *\n     * @param userHandle the user to query\n     * @return true if location is enabled and false if location is disabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocationEnabledForUser(boolean enabled, @NonNull UserHandle userHandle)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables location for the given user.\n     *\n     * @param enabled true to enable location and false to disable location.\n     * @param userHandle the user to set\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProviderEnabled(@NonNull String provider)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current enabled/disabled status of the given provider. To listen for changes, see\n     * {@link #PROVIDERS_CHANGED_ACTION}.\n     *\n     * Before API version {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method would throw\n     * {@link SecurityException} if the location permissions were not sufficient to use the\n     * specified provider.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @return true if the provider exists and is enabled\n     *\n     * @throws IllegalArgumentException if provider is null\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP", "#getAllProviders()", "SecurityException", "#PROVIDERS_CHANGED_ACTION" ]
  }, {
    "name" : "public boolean isProviderEnabledForUser(@NonNull String provider, @NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current enabled/disabled status of the given provider and user. Callers should\n     * prefer {@link #isLocationEnabledForUser(UserHandle)} unless they depend on provider-specific\n     * APIs.\n     *\n     * Before API version {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method would throw\n     * {@link SecurityException} if the location permissions were not sufficient to use the\n     * specified provider.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @param userHandle the user to query\n     * @return true if the provider exists and is enabled\n     *\n     * @throws IllegalArgumentException if provider is null\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP", "#getAllProviders()", "SecurityException", "#isLocationEnabledForUser(UserHandle)" ]
  }, {
    "name" : "public boolean setProviderEnabledForUser(@NonNull String provider, boolean enabled, @NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Method for enabling or disabling a single location provider. This method is deprecated and\n     * functions as a best effort. It should not be relied on in any meaningful sense as providers\n     * may no longer be enabled or disabled by clients.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @param enabled whether to enable or disable the provider\n     * @param userHandle the user to set\n     * @return true if the value was set, false otherwise\n     *\n     * @throws IllegalArgumentException if provider is null\n     * @deprecated Do not manipulate providers individually, use\n     * {@link #setLocationEnabledForUser(boolean, UserHandle)} instead.\n     * @hide\n     ",
    "links" : [ "#getAllProviders()", "#setLocationEnabledForUser(boolean" ]
  }, {
    "name" : "public Location getLastLocation()",
    "returnType" : "Location",
    "comment" : "\n     * Gets the last known location from the fused provider, or null if there is no last known\n     * location. The returned location may be quite old in some circumstances, so the age of the\n     * location should always be checked.\n     *\n     * @return the last known location, or null if not available\n     * @throws SecurityException if no suitable location permission is present\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Location getLastKnownLocation(@NonNull String provider)",
    "returnType" : "Location",
    "comment" : "\n     * Gets the last known location from the given provider, or null if there is no last known\n     * location. The returned location may be quite old in some circumstances, so the age of the\n     * location should always be checked.\n     *\n     * <p>This will never activate sensors to compute a new location, and will only ever return a\n     * cached location.\n     *\n     * <p>See also {@link #getCurrentLocation(String, CancellationSignal, Executor, Consumer)} which\n     * will always attempt to return a current location, but will potentially use additional power\n     * in the course of the attempt as compared to this method.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @return the last known location for the given provider, or null if not available\n     * @throws SecurityException if no suitable permission is present\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     ",
    "links" : [ "#getAllProviders()", "#getCurrentLocation(String" ]
  }, {
    "name" : "public void getCurrentLocation(@NonNull String provider, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Location> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously returns a single current location fix. This may activate sensors in order to\n     * compute a new location, unlike {@link #getLastKnownLocation(String)}, which will only return\n     * a cached fix if available. The given callback will be invoked once and only once, either with\n     * a valid location fix or with a null location fix if the provider was unable to generate a\n     * valid location.\n     *\n     * <p>A client may supply an optional {@link CancellationSignal}. If this is used to cancel the\n     * operation, no callback should be expected after the cancellation.\n     *\n     * <p>This method may return locations from the very recent past (on the order of several\n     * seconds), but will never return older locations (for example, several minutes old or older).\n     * Clients may rely upon the guarantee that if this method returns a location, it will represent\n     * the best estimation of the location of the device in the present moment.\n     *\n     * <p>Clients calling this method from the background may notice that the method fails to\n     * determine a valid location fix more often than while in the foreground. Background\n     * applications may be throttled in their location accesses to some degree.\n     *\n     * @param provider           a provider listed by {@link #getAllProviders()}\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor           the callback will take place on this {@link Executor}\n     * @param consumer           the callback invoked with either a {@link Location} or null\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if consumer is null\n     * @throws SecurityException        if no suitable permission is present\n     ",
    "links" : [ "#getAllProviders()", "#getLastKnownLocation(String)", "android.os.CancellationSignal", "android.annotation.CallbackExecutor", "android.location.Location" ]
  }, {
    "name" : "public void getCurrentLocation(@NonNull LocationRequest locationRequest, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Location> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously returns a single current location fix based on the given\n     * {@link LocationRequest}.\n     *\n     * <p>See {@link #getCurrentLocation(String, CancellationSignal, Executor, Consumer)} for more\n     * information.\n     *\n     * @param locationRequest    the location request containing location parameters\n     * @param cancellationSignal an optional signal that allows for cancelling this call\n     * @param executor           the callback will take place on this {@link Executor}\n     * @param consumer           the callback invoked with either a {@link Location} or null\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if consumer is null\n     * @throws SecurityException        if no suitable permission is present\n     * @hide\n     ",
    "links" : [ "android.location.LocationRequest", "android.annotation.CallbackExecutor", "android.location.Location", "#getCurrentLocation(String" ]
  }, {
    "name" : "public void requestSingleUpdate(@NonNull String provider, @NonNull LocationListener listener, @Nullable Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Register for a single location update using the named provider and a callback.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener, Looper)} for\n     * more detail on how to use this method.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @param listener the listener to receive location updates\n     * @param looper   the looper handling listener callbacks, or null to use the looper of the\n     *                 calling thread\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException        if no suitable permission is present\n     * @deprecated Use {@link #getCurrentLocation(String, CancellationSignal, Executor, Consumer)}\n     * instead as it does not carry a risk of extreme battery drain.\n     ",
    "links" : [ "#getAllProviders()", "#requestLocationUpdates(String", "#getCurrentLocation(String" ]
  }, {
    "name" : "public void requestSingleUpdate(@NonNull Criteria criteria, @NonNull LocationListener listener, @Nullable Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Register for a single location update using a Criteria and a callback.\n     *\n     * <p>See {@link #requestLocationUpdates(long, float, Criteria, PendingIntent)} for more detail\n     * on how to use this method.\n     *\n     * @param criteria contains parameters to choose the appropriate provider for location updates\n     * @param listener the listener to receive location updates\n     * @param looper   the looper handling listener callbacks, or null to use the looper of the\n     *                 calling thread\n     *\n     * @throws IllegalArgumentException if criteria is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException        if no suitable permission is present\n     * @deprecated Use {@link #getCurrentLocation(String, CancellationSignal, Executor, Consumer)}\n     * instead as it does not carry a risk of extreme battery drain.\n     ",
    "links" : [ "#requestLocationUpdates(long", "#getCurrentLocation(String" ]
  }, {
    "name" : "public void requestSingleUpdate(@NonNull String provider, @NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Register for a single location update using a named provider and pending intent.\n     *\n     * <p>See {@link #requestLocationUpdates(long, float, Criteria, PendingIntent)} for more detail\n     * on how to use this method.\n     *\n     * @param provider      a provider listed by {@link #getAllProviders()}\n     * @param pendingIntent the pending intent to send location updates\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if intent is null\n     * @throws SecurityException        if no suitable permission is present\n     * @deprecated Use {@link #getCurrentLocation(String, CancellationSignal, Executor, Consumer)}\n     * instead as it does not carry a risk of extreme battery drain.\n     ",
    "links" : [ "#getAllProviders()", "#requestLocationUpdates(long", "#getCurrentLocation(String" ]
  }, {
    "name" : "public void requestSingleUpdate(@NonNull Criteria criteria, @NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Register for a single location update using a Criteria and pending intent.\n     *\n     * <p>See {@link #requestLocationUpdates(long, float, Criteria, PendingIntent)} for more detail\n     * on how to use this method.\n     *\n     * @param criteria      contains parameters to choose the appropriate provider for location\n     *                      updates\n     * @param pendingIntent the pending intent to send location updates\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if intent is null\n     * @throws SecurityException        if no suitable permission is present\n     * @deprecated Use {@link #getCurrentLocation(String, CancellationSignal, Executor, Consumer)}\n     * instead as it does not carry a risk of extreme battery drain.\n     ",
    "links" : [ "#requestLocationUpdates(long", "#getCurrentLocation(String" ]
  }, {
    "name" : "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull LocationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates from the given provider with the given arguments. {@link\n     * LocationListener} callbacks will take place on the given {@link Looper} or {@link Executor}.\n     * If a null {@link Looper} is supplied, the Looper of the calling thread will be used instead.\n     * Only one request can be registered for each unique listener, so any subsequent requests with\n     * the same listener will overwrite all associated arguments.\n     *\n     * <p> It may take a while to receive the first location update. If an immediate location is\n     * required, applications may use the {@link #getLastKnownLocation(String)} method.\n     *\n     * <p> The location update interval can be controlled using the minimum time parameter. The\n     * elapsed time between location updates will never be less than this parameter, although it may\n     * be more depending on location availability and other factors. Choosing a sensible value for\n     * the minimum time parameter is important to conserve battery life. Every location update\n     * requires power from a variety of sensors. Select a minimum time parameter as high as possible\n     * while still providing a reasonable user experience. If your application is not in the\n     * foreground and showing location to the user then your application should consider switching\n     * to the {@link #PASSIVE_PROVIDER} instead.\n     *\n     * <p> The minimum distance parameter can also be used to control the frequency of location\n     * updates. If it is greater than 0 then the location provider will only send your application\n     * an update when the location has changed by at least minDistance meters, AND when the minimum\n     * time has elapsed. However it is more difficult for location providers to save power using the\n     * minimum distance parameter, so the minimum time parameter should be the primary tool for\n     * conserving battery life.\n     *\n     * <p> If your application wants to passively observe location updates triggered by other\n     * applications, but not consume any additional power otherwise, then use the {@link\n     * #PASSIVE_PROVIDER}. This provider does not turn on or modify active location providers, so\n     * you do not need to be as careful about minimum time and minimum distance parameters. However,\n     * if your application performs heavy work on a location update (such as network activity) then\n     * you should select non-zero values for the parameters to rate-limit your update frequency in\n     * the case another application enables a location provider with extremely fast updates.\n     *\n     * <p>In case the provider you have selected is disabled, location updates will cease, and a\n     * provider availability update will be sent. As soon as the provider is enabled again, another\n     * provider availability update will be sent and location updates will immediately resume.\n     *\n     * <p> When location callbacks are invoked, the system will hold a wakelock on your\n     * application's behalf for some period of time, but not indefinitely. If your application\n     * requires a long running wakelock within the location callback, you should acquire it\n     * yourself.\n     *\n     * <p class=\"note\"> Prior to Jellybean, the minTime parameter was only a hint, and some location\n     * provider implementations ignored it. For Jellybean and onwards however, it is mandatory for\n     * Android compatible devices to observe both the minTime and minDistance parameters.\n     *\n     * <p>To unregister for location updates, use {@link #removeUpdates(LocationListener)}.\n     *\n     * @param provider     a provider listed by {@link #getAllProviders()}\n     * @param minTimeMs    minimum time interval between location updates in milliseconds\n     * @param minDistanceM minimum distance between location updates in meters\n     * @param listener     the listener to receive location updates\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if listener is null\n     * @throws RuntimeException if the calling thread has no Looper\n     * @throws SecurityException if no suitable permission is present\n     ",
    "links" : [ "#PASSIVE_PROVIDER", "#getAllProviders()", "android.os.Looper", "#getLastKnownLocation(String)", "android.annotation.CallbackExecutor", "android.location.LocationListener", "#removeUpdates(LocationListener)" ]
  }, {
    "name" : "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull LocationListener listener, @Nullable Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using the named provider, and a callback on\n     * the specified {@link Looper}.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener)}\n     * for more detail on how this method works.\n     *\n     * @param provider     a provider listed by {@link #getAllProviders()}\n     * @param minTimeMs    minimum time interval between location updates in milliseconds\n     * @param minDistanceM minimum distance between location updates in meters\n     * @param listener     the listener to receive location updates\n     * @param looper       the looper handling listener callbacks, or null to use the looper of the\n     *                     calling thread\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if no suitable permission is present\n     ",
    "links" : [ "#getAllProviders()", "android.os.Looper", "#requestLocationUpdates(String" ]
  }, {
    "name" : "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull @CallbackExecutor Executor executor, @NonNull LocationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using the named provider, and a callback on\n     * the specified {@link Executor}.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener)}\n     * for more detail on how this method works.\n     *\n     * @param provider     a provider listed by {@link #getAllProviders()}\n     * @param minTimeMs    minimum time interval between location updates in milliseconds\n     * @param minDistanceM minimum distance between location updates in meters\n     * @param executor     the executor handling listener callbacks\n     * @param listener     the listener to receive location updates\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if no suitable permission is present\n     ",
    "links" : [ "#getAllProviders()", "#requestLocationUpdates(String", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void requestLocationUpdates(long minTimeMs, float minDistanceM, @NonNull Criteria criteria, @NonNull LocationListener listener, @Nullable Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using a provider selected through the given Criteria, and a\n     * callback on the specified {@link Looper}.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener)}\n     * for more detail on how this method works.\n     *\n     * @param minTimeMs minimum time interval between location updates in milliseconds\n     * @param minDistanceM minimum distance between location updates in meters\n     * @param criteria contains parameters to choose the appropriate provider for location updates\n     * @param listener the listener to receive location updates\n     *\n     * @throws IllegalArgumentException if criteria is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if no suitable permission is present\n     ",
    "links" : [ "android.os.Looper", "#requestLocationUpdates(String" ]
  }, {
    "name" : "public void requestLocationUpdates(long minTimeMs, float minDistanceM, @NonNull Criteria criteria, @NonNull @CallbackExecutor Executor executor, @NonNull LocationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using a provider selected through the given Criteria, and a\n     * callback on the specified {@link Executor}.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener)}\n     * for more detail on how this method works.\n     *\n     * @param minTimeMs minimum time interval between location updates in milliseconds\n     * @param minDistanceM minimum distance between location updates in meters\n     * @param criteria contains parameters to choose the appropriate provider for location updates\n     * @param executor the executor handling listener callbacks\n     * @param listener the listener to receive location updates\n     *\n     * @throws IllegalArgumentException if criteria is null\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException        if no suitable permission is present\n     ",
    "links" : [ "#requestLocationUpdates(String", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using the named provider, and callbacks delivered via the\n     * provided {@link PendingIntent}.\n     *\n     * <p>The delivered pending intents will contain extras with the callback information. The keys\n     * used for the extras are {@link #KEY_LOCATION_CHANGED} and {@link #KEY_PROVIDER_ENABLED}. See\n     * the documentation for each respective extra key for information on the values.\n     *\n     * <p>To unregister for location updates, use {@link #removeUpdates(PendingIntent)}.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener)}\n     * for more detail on how this method works.\n     *\n     * @param provider      a provider listed by {@link #getAllProviders()}\n     * @param minTimeMs     minimum time interval between location updates in milliseconds\n     * @param minDistanceM  minimum distance between location updates in meters\n     * @param pendingIntent the pending intent to send location updates\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if pendingIntent is null\n     * @throws SecurityException if no suitable permission is present\n     ",
    "links" : [ "#getAllProviders()", "#KEY_PROVIDER_ENABLED", "#removeUpdates(PendingIntent)", "#requestLocationUpdates(String", "android.app.PendingIntent", "#KEY_LOCATION_CHANGED" ]
  }, {
    "name" : "public void requestLocationUpdates(long minTimeMs, float minDistanceM, @NonNull Criteria criteria, @NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using a provider selected through the given Criteria, and\n     * callbacks delivered via the provided {@link PendingIntent}.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, PendingIntent)} for more detail on\n     * how this method works.\n     *\n     * @param minTimeMs minimum time interval between location updates in milliseconds\n     * @param minDistanceM minimum distance between location updates in meters\n     * @param criteria contains parameters to choose the appropriate provider for location updates\n     * @param pendingIntent the pending intent to send location updates\n     *\n     * @throws IllegalArgumentException if provider is null or doesn't exist\n     * @throws IllegalArgumentException if pendingIntent is null\n     * @throws SecurityException if no suitable permission is present\n     ",
    "links" : [ "#requestLocationUpdates(String", "android.app.PendingIntent" ]
  }, {
    "name" : "public void requestLocationUpdates(@Nullable LocationRequest locationRequest, @NonNull LocationListener listener, @Nullable Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using a {@link LocationRequest}, and a callback on the\n     * specified {@link Looper}.\n     *\n     * <p>The system will automatically select and enable the best provider based on the given\n     * {@link LocationRequest}. The LocationRequest can be null, in which case the system will\n     * choose default low power parameters for location updates, but this is heavily discouraged,\n     * and an explicit LocationRequest should always be provided.\n     *\n     * <p>See {@link #requestLocationUpdates(String, long, float, LocationListener)}\n     * for more detail on how this method works.\n     *\n     * @param locationRequest the location request containing location parameters\n     * @param listener the listener to receive location updates\n     * @param looper the looper handling listener callbacks, or null to use the looper of the\n     *               calling thread\n     *\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if no suitable permission is present\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Looper", "android.location.LocationRequest", "#requestLocationUpdates(String" ]
  }, {
    "name" : "public void requestLocationUpdates(@Nullable LocationRequest locationRequest, @NonNull @CallbackExecutor Executor executor, @NonNull LocationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using a {@link LocationRequest}, and a callback on the\n     * specified {@link Executor}.\n     *\n     * <p>See {@link #requestLocationUpdates(LocationRequest, LocationListener, Looper)} for more\n     * detail on how this method works.\n     *\n     * @param locationRequest the location request containing location parameters\n     * @param executor the executor handling listener callbacks\n     * @param listener the listener to receive location updates\n     *\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if no suitable permission is present\n     *\n     * @hide\n     ",
    "links" : [ "#requestLocationUpdates(LocationRequest", "android.location.LocationRequest", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void requestLocationUpdates(@Nullable LocationRequest locationRequest, @NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Register for location updates using a {@link LocationRequest}, and callbacks delivered via\n     * the provided {@link PendingIntent}.\n     *\n     * <p>See {@link #requestLocationUpdates(LocationRequest, LocationListener, Looper)} and\n     * {@link #requestLocationUpdates(String, long, float, PendingIntent)} for more detail on how\n     * this method works.\n     *\n     * @param locationRequest the location request containing location parameters\n     * @param pendingIntent the pending intent to send location updates\n     *\n     * @throws IllegalArgumentException if pendingIntent is null\n     * @throws SecurityException if no suitable permission is present\n     *\n     * @hide\n     ",
    "links" : [ "#requestLocationUpdates(LocationRequest", "android.location.LocationRequest", "#requestLocationUpdates(String", "android.app.PendingIntent" ]
  }, {
    "name" : "public boolean injectLocation(@NonNull Location location)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the last known location with a new location.\n     *\n     * <p>A privileged client can inject a {@link Location} if it has a better estimate of what\n     * the recent location is.  This is especially useful when the device boots up and the GPS\n     * chipset is in the process of getting the first fix.  If the client has cached the location,\n     * it can inject the {@link Location}, so if an app requests for a {@link Location} from {@link\n     * #getLastKnownLocation(String)}, the location information is still useful before getting\n     * the first fix.\n     *\n     * @param location newly available {@link Location} object\n     * @return true if the location was injected, false otherwise\n     *\n     * @throws IllegalArgumentException if location is null\n     * @throws SecurityException if permissions are not present\n     *\n     * @hide\n     ",
    "links" : [ "#getLastKnownLocation(String)", "android.location.Location" ]
  }, {
    "name" : "public void removeUpdates(@NonNull LocationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes location updates for the specified {@link LocationListener}. Following this call,\n     * the listener will no longer receive location updates.\n     *\n     * @param listener listener that no longer needs location updates\n     *\n     * @throws IllegalArgumentException if listener is null\n     ",
    "links" : [ "android.location.LocationListener" ]
  }, {
    "name" : "public void removeUpdates(@NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Removes location updates for the specified {@link PendingIntent}. Following this call, the\n     * PendingIntent will no longer receive location updates.\n     *\n     * @param pendingIntent pending intent that no longer needs location updates\n     *\n     * @throws IllegalArgumentException if pendingIntent is null\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "public List<String> getAllProviders()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of the names of all known location providers. All providers are returned,\n     * including ones that are not permitted to be accessed by the calling activity or are currently\n     * disabled.\n     *\n     * @return list of provider names\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getProviders(boolean enabledOnly)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of the names of location providers. Only providers that the caller has\n     * permission to access will be returned.\n     *\n     * @param enabledOnly if true then only enabled providers are included\n     * @return list of provider names\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getProviders(@NonNull Criteria criteria, boolean enabledOnly)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of the names of providers that satisfy the given criteria. Only providers that\n     * the caller has permission to access will be returned.\n     *\n     * @param criteria the criteria that providers must match\n     * @param enabledOnly if true then only enabled providers are included\n     * @return list of provider names\n     *\n     * @throws IllegalArgumentException if criteria is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBestProvider(@NonNull Criteria criteria, boolean enabledOnly)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the provider that best meets the given criteria. Only providers that are\n     * permitted to be accessed by the caller will be returned. If several providers meet the\n     * criteria, the one with the best accuracy is returned. If no provider meets the criteria, the\n     * criteria are loosened in the following order:\n     *\n     * <ul>\n     * <li> power requirement\n     * <li> accuracy\n     * <li> bearing\n     * <li> speed\n     * <li> altitude\n     * </ul>\n     *\n     * <p> Note that the requirement on monetary cost is not removed in this process.\n     *\n     * @param criteria the criteria that need to be matched\n     * @param enabledOnly if true then only enabled providers are included\n     * @return name of the provider that best matches the criteria, or null if none match\n     *\n     * @throws IllegalArgumentException if criteria is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationProvider getProvider(@NonNull String provider)",
    "returnType" : "LocationProvider",
    "comment" : "\n     * Returns the information about the location provider with the given name, or null if no\n     * provider exists by that name.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @return location provider information, or null if provider does not exist\n     *\n     * @throws IllegalArgumentException if provider is null\n     ",
    "links" : [ "#getAllProviders()" ]
  }, {
    "name" : "public boolean isProviderPackage(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given package name matches a location provider package, and false\n     * otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getProviderPackages(@NonNull String provider)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of packages associated with the given provider,\n     * and an empty list if no package is associated with the provider.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendExtraCommand(@NonNull String provider, @NonNull String command, @Nullable Bundle extras)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends additional commands to a location provider. Can be used to support provider specific\n     * extensions to the Location Manager API.\n     *\n     * @param provider a provider listed by {@link #getAllProviders()}\n     * @param command  name of the command to send to the provider\n     * @param extras   optional arguments for the command, or null\n     * @return true always, the return value may be ignored\n     ",
    "links" : [ "#getAllProviders()" ]
  }, {
    "name" : "public void addTestProvider(@NonNull String provider, boolean requiresNetwork, boolean requiresSatellite, boolean requiresCell, boolean hasMonetaryCost, boolean supportsAltitude, boolean supportsSpeed, boolean supportsBearing, int powerRequirement, int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Creates a test location provider and adds it to the set of active providers. This provider\n     * will replace any provider with the same name that exists prior to this call.\n     *\n     * @param provider the provider name\n     *\n     * @throws IllegalArgumentException if provider is null\n     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION\n     * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED\n     * allowed} for your app.\n     ",
    "links" : [ "android.app.AppOpsManager#OPSTR_MOCK_LOCATIONmock", "android.app.AppOpsManager#MODE_ALLOWEDallowed" ]
  }, {
    "name" : "public void removeTestProvider(@NonNull String provider)",
    "returnType" : "void",
    "comment" : "\n     * Removes the test location provider with the given name or does nothing if no such test\n     * location provider exists.\n     *\n     * @param provider the provider name\n     *\n     * @throws IllegalArgumentException if provider is null\n     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION\n     * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED\n     * allowed} for your app.\n     ",
    "links" : [ "android.app.AppOpsManager#OPSTR_MOCK_LOCATIONmock", "android.app.AppOpsManager#MODE_ALLOWEDallowed" ]
  }, {
    "name" : "public void setTestProviderLocation(@NonNull String provider, @NonNull Location location)",
    "returnType" : "void",
    "comment" : "\n     * Sets a new location for the given test provider. This location will be identiable as a mock\n     * location to all clients via {@link Location#isFromMockProvider()}.\n     *\n     * <p>The location object must have a minimum number of fields set to be considered valid, as\n     * per documentation on {@link Location} class.\n     *\n     * @param provider the provider name\n     * @param location the mock location\n     *\n     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION\n     * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED\n     * allowed} for your app.\n     * @throws IllegalArgumentException if the provider is null or not a test provider\n     * @throws IllegalArgumentException if the location is null or incomplete\n     ",
    "links" : [ "android.app.AppOpsManager#OPSTR_MOCK_LOCATIONmock", "android.app.AppOpsManager#MODE_ALLOWEDallowed", "android.location.Location#isFromMockProvider()", "android.location.Location" ]
  }, {
    "name" : "public void clearTestProviderLocation(@NonNull String provider)",
    "returnType" : "void",
    "comment" : "\n     * Does nothing.\n     *\n     * @deprecated This method has always been a no-op, and may be removed in the future.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTestProviderEnabled(@NonNull String provider, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the given test provider to be enabled or disabled.\n     *\n     * @param provider the provider name\n     * @param enabled the mock enabled value\n     *\n     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION\n     * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED\n     * allowed} for your app.\n     * @throws IllegalArgumentException if provider is null or not a test provider\n     ",
    "links" : [ "android.app.AppOpsManager#OPSTR_MOCK_LOCATIONmock", "android.app.AppOpsManager#MODE_ALLOWEDallowed" ]
  }, {
    "name" : "public void clearTestProviderEnabled(@NonNull String provider)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link #setTestProviderEnabled(String, boolean)} to disable a test\n     * provider.\n     *\n     * @deprecated Use {@link #setTestProviderEnabled(String, boolean)} instead.\n     ",
    "links" : [ "#setTestProviderEnabled(String" ]
  }, {
    "name" : "public void setTestProviderStatus(@NonNull String provider, int status, @Nullable Bundle extras, long updateTime)",
    "returnType" : "void",
    "comment" : "\n     * This method has no effect as provider status has been deprecated and is no longer supported.\n     *\n     * @deprecated This method has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearTestProviderStatus(@NonNull String provider)",
    "returnType" : "void",
    "comment" : "\n     * This method has no effect as provider status has been deprecated and is no longer supported.\n     *\n     * @deprecated This method has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<LocationRequest> getTestProviderCurrentRequests(String providerName)",
    "returnType" : "List<LocationRequest>",
    "comment" : "\n     * Get the last list of {@link LocationRequest}s sent to the provider.\n     *\n     * @hide\n     ",
    "links" : [ "android.location.LocationRequest" ]
  }, {
    "name" : "public void addProximityAlert(double latitude, double longitude, float radius, long expiration, @NonNull PendingIntent intent)",
    "returnType" : "void",
    "comment" : "\n     * Set a proximity alert for the location given by the position\n     * (latitude, longitude) and the given radius.\n     *\n     * <p> When the device\n     * detects that it has entered or exited the area surrounding the\n     * location, the given PendingIntent will be used to create an Intent\n     * to be fired.\n     *\n     * <p> The fired Intent will have a boolean extra added with key\n     * {@link #KEY_PROXIMITY_ENTERING}. If the value is true, the device is\n     * entering the proximity region; if false, it is exiting.\n     *\n     * <p> Due to the approximate nature of position estimation, if the\n     * device passes through the given area briefly, it is possible\n     * that no Intent will be fired.  Similarly, an Intent could be\n     * fired if the device passes very close to the given area but\n     * does not actually enter it.\n     *\n     * <p> After the number of milliseconds given by the expiration\n     * parameter, the location manager will delete this proximity\n     * alert and no longer monitor it.  A value of -1 indicates that\n     * there should be no expiration time.\n     *\n     * <p> Internally, this method uses both {@link #NETWORK_PROVIDER}\n     * and {@link #GPS_PROVIDER}.\n     *\n     * <p>Before API version 17, this method could be used with\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} or\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION}.\n     * From API version 17 and onwards, this method requires\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission.\n     *\n     * @param latitude the latitude of the central point of the\n     * alert region\n     * @param longitude the longitude of the central point of the\n     * alert region\n     * @param radius the radius of the central point of the\n     * alert region, in meters\n     * @param expiration time for this proximity alert, in milliseconds,\n     * or -1 to indicate no expiration\n     * @param intent a PendingIntent that will be used to generate an Intent to\n     * fire when entry to or exit from the alert region is detected\n     *\n     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission is not present\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#NETWORK_PROVIDER", "#KEY_PROXIMITY_ENTERING", "#GPS_PROVIDER" ]
  }, {
    "name" : "public void removeProximityAlert(@NonNull PendingIntent intent)",
    "returnType" : "void",
    "comment" : "\n     * Removes the proximity alert with the given PendingIntent.\n     *\n     * <p>Before API version 17, this method could be used with\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} or\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION}.\n     * From API version 17 and onwards, this method requires\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission.\n     *\n     * @param intent the PendingIntent that no longer needs to be notified of\n     * proximity alerts\n     *\n     * @throws IllegalArgumentException if intent is null\n     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission is not present\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "public void addGeofence(@NonNull LocationRequest request, @NonNull Geofence fence, @NonNull PendingIntent intent)",
    "returnType" : "void",
    "comment" : "\n     * Add a geofence with the specified LocationRequest quality of service.\n     *\n     * <p> When the device\n     * detects that it has entered or exited the area surrounding the\n     * location, the given PendingIntent will be used to create an Intent\n     * to be fired.\n     *\n     * <p> The fired Intent will have a boolean extra added with key\n     * {@link #KEY_PROXIMITY_ENTERING}. If the value is true, the device is\n     * entering the proximity region; if false, it is exiting.\n     *\n     * <p> The geofence engine fuses results from all location providers to\n     * provide the best balance between accuracy and power. Applications\n     * can choose the quality of service required using the\n     * {@link LocationRequest} object. If it is null then a default,\n     * low power geo-fencing implementation is used. It is possible to cross\n     * a geo-fence without notification, but the system will do its best\n     * to detect, using {@link LocationRequest} as a hint to trade-off\n     * accuracy and power.\n     *\n     * <p> The power required by the geofence engine can depend on many factors,\n     * such as quality and interval requested in {@link LocationRequest},\n     * distance to nearest geofence and current device velocity.\n     *\n     * @param request quality of service required, null for default low power\n     * @param fence a geographical description of the geofence area\n     * @param intent pending intent to receive geofence updates\n     *\n     * @throws IllegalArgumentException if fence is null\n     * @throws IllegalArgumentException if intent is null\n     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission is not present\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.location.LocationRequest", "#KEY_PROXIMITY_ENTERING" ]
  }, {
    "name" : "public void removeGeofence(@NonNull Geofence fence, @NonNull PendingIntent intent)",
    "returnType" : "void",
    "comment" : "\n     * Remove a single geofence.\n     *\n     * <p>This removes only the specified geofence associated with the\n     * specified pending intent. All other geofences remain unchanged.\n     *\n     * @param fence a geofence previously passed to {@link #addGeofence}\n     * @param intent a pending intent previously passed to {@link #addGeofence}\n     *\n     * @throws IllegalArgumentException if fence is null\n     * @throws IllegalArgumentException if intent is null\n     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission is not present\n     *\n     * @hide\n     ",
    "links" : [ "#addGeofence", "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "public void removeAllGeofences(@NonNull PendingIntent intent)",
    "returnType" : "void",
    "comment" : "\n     * Remove all geofences registered to the specified pending intent.\n     *\n     * @param intent a pending intent previously passed to {@link #addGeofence}\n     *\n     * @throws IllegalArgumentException if intent is null\n     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission is not present\n     *\n     * @hide\n     ",
    "links" : [ "#addGeofence", "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "public GnssCapabilities getGnssCapabilities()",
    "returnType" : "GnssCapabilities",
    "comment" : "\n     * Returns the supported capabilities of the GNSS chipset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGnssYearOfHardware()",
    "returnType" : "int",
    "comment" : "\n     * Returns the model year of the GNSS hardware and software build. More details, such as build\n     * date, may be available in {@link #getGnssHardwareModelName()}. May return 0 if the model year\n     * is less than 2016.\n     ",
    "links" : [ "#getGnssHardwareModelName()" ]
  }, {
    "name" : "public String getGnssHardwareModelName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the Model Name (including Vendor and Hardware/Software Version) of the GNSS hardware\n     * driver.\n     *\n     * <p> No device-specific serial number or ID is returned from this API.\n     *\n     * <p> Will return null when the GNSS hardware abstraction layer does not support providing\n     * this value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public GpsStatus getGpsStatus(@Nullable GpsStatus status)",
    "returnType" : "GpsStatus",
    "comment" : "\n     * Retrieves information about the current status of the GPS engine. This should only be called\n     * from within the {@link GpsStatus.Listener#onGpsStatusChanged} callback to ensure that the\n     * data is copied atomically.\n     *\n     * The caller may either pass in an existing {@link GpsStatus} object to be overwritten, or pass\n     * null to create a new {@link GpsStatus} object.\n     *\n     * @param status object containing GPS status details, or null.\n     * @return status object containing updated GPS status.\n     *\n     * @deprecated GpsStatus APIs are deprecated, use {@link GnssStatus} APIs instead. No longer\n     * supported in apps targeting S and above.\n     ",
    "links" : [ "android.location.GpsStatus", "GpsStatus.Listener#onGpsStatusChanged", "android.location.GnssStatus" ]
  }, {
    "name" : "public boolean addGpsStatusListener(GpsStatus.Listener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a GPS status listener.\n     *\n     * @param listener GPS status listener object to register\n     * @return true if the listener was successfully added\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     *\n     * @deprecated use {@link #registerGnssStatusCallback(GnssStatus.Callback)} instead. No longer\n     * supported in apps targeting S and above.\n     ",
    "links" : [ "#registerGnssStatusCallback(GnssStatus.Callback)" ]
  }, {
    "name" : "public void removeGpsStatusListener(GpsStatus.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a GPS status listener.\n     *\n     * @param listener GPS status listener object to remove\n     *\n     * @deprecated use {@link #unregisterGnssStatusCallback(GnssStatus.Callback)} instead. No longer\n     * supported in apps targeting S and above.\n     ",
    "links" : [ "#unregisterGnssStatusCallback(GnssStatus.Callback)" ]
  }, {
    "name" : "public boolean registerGnssStatusCallback(@NonNull GnssStatus.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS status callback.\n     *\n     * @param callback GNSS status callback object to register\n     * @return true if the listener was successfully added\n     *\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     *\n     * @deprecated Use {@link #registerGnssStatusCallback(GnssStatus.Callback, Handler)} or {@link\n     * #registerGnssStatusCallback(Executor, GnssStatus.Callback)} instead.\n     ",
    "links" : [ "#registerGnssStatusCallback(GnssStatus.Callback", "#registerGnssStatusCallback(Executor" ]
  }, {
    "name" : "public boolean registerGnssStatusCallback(@NonNull GnssStatus.Callback callback, @Nullable Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS status callback.\n     *\n     * @param callback GNSS status callback object to register\n     * @param handler  a handler with a looper that the callback runs on\n     * @return true if the listener was successfully added\n     *\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerGnssStatusCallback(@NonNull @CallbackExecutor Executor executor, @NonNull GnssStatus.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS status callback.\n     *\n     * @param executor the executor that the callback runs on\n     * @param callback GNSS status callback object to register\n     * @return true if the listener was successfully added\n     *\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterGnssStatusCallback(@NonNull GnssStatus.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a GNSS status callback.\n     *\n     * @param callback GNSS status callback object to remove\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addNmeaListener(@NonNull GpsStatus.NmeaListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * No-op method to keep backward-compatibility.\n     *\n     * @deprecated Use {@link #addNmeaListener} instead.\n     ",
    "links" : [ "#addNmeaListener" ]
  }, {
    "name" : "public void removeNmeaListener(@NonNull GpsStatus.NmeaListener listener)",
    "returnType" : "void",
    "comment" : "\n     * No-op method to keep backward-compatibility.\n     *\n     * @deprecated Use {@link #removeNmeaListener(OnNmeaMessageListener)} instead.\n     ",
    "links" : [ "#removeNmeaListener(OnNmeaMessageListener)" ]
  }, {
    "name" : "public boolean addNmeaListener(@NonNull OnNmeaMessageListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an NMEA listener.\n     *\n     * @param listener a {@link OnNmeaMessageListener} object to register\n     * @return true if the listener was successfully added\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     * @deprecated Use {@link #addNmeaListener(OnNmeaMessageListener, Handler)} or {@link\n     * #addNmeaListener(Executor, OnNmeaMessageListener)} instead.\n     ",
    "links" : [ "#addNmeaListener(Executor", "android.location.OnNmeaMessageListener", "#addNmeaListener(OnNmeaMessageListener" ]
  }, {
    "name" : "public boolean addNmeaListener(@NonNull OnNmeaMessageListener listener, @Nullable Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an NMEA listener.\n     *\n     * @param listener a {@link OnNmeaMessageListener} object to register\n     * @param handler  a handler with the looper that the listener runs on.\n     * @return true if the listener was successfully added\n     *\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "android.location.OnNmeaMessageListener" ]
  }, {
    "name" : "public boolean addNmeaListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnNmeaMessageListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds an NMEA listener.\n     *\n     * @param listener a {@link OnNmeaMessageListener} object to register\n     * @param executor the {@link Executor} that the listener runs on.\n     * @return true if the listener was successfully added\n     *\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "android.annotation.CallbackExecutor", "android.location.OnNmeaMessageListener" ]
  }, {
    "name" : "public void removeNmeaListener(@NonNull OnNmeaMessageListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes an NMEA listener.\n     *\n     * @param listener a {@link OnNmeaMessageListener} object to remove\n     ",
    "links" : [ "android.location.OnNmeaMessageListener" ]
  }, {
    "name" : "public boolean addGpsMeasurementListener(GpsMeasurementsEvent.Listener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * No-op method to keep backward-compatibility.\n     *\n     * @hide\n     * @deprecated Use {@link #registerGnssMeasurementsCallback} instead.\n     * @removed\n     ",
    "links" : [ "#registerGnssMeasurementsCallback" ]
  }, {
    "name" : "public void removeGpsMeasurementListener(GpsMeasurementsEvent.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * No-op method to keep backward-compatibility.\n     *\n     * @hide\n     * @deprecated Use {@link #unregisterGnssMeasurementsCallback} instead.\n     * @removed\n     ",
    "links" : [ "#unregisterGnssMeasurementsCallback" ]
  }, {
    "name" : "public boolean registerGnssMeasurementsCallback(@NonNull GnssMeasurementsEvent.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GPS Measurement callback which will run on a binder thread.\n     *\n     * @param callback a {@link GnssMeasurementsEvent.Callback} object to register.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     * @deprecated Use {@link\n     * #registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback, Handler)} or {@link\n     * #registerGnssMeasurementsCallback(Executor, GnssMeasurementsEvent.Callback)} instead.\n     ",
    "links" : [ "GnssMeasurementsEvent.Callback", "#registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback", "#registerGnssMeasurementsCallback(Executor" ]
  }, {
    "name" : "public boolean registerGnssMeasurementsCallback(@NonNull GnssMeasurementsEvent.Callback callback, @Nullable Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GPS Measurement callback.\n     *\n     * @param callback a {@link GnssMeasurementsEvent.Callback} object to register.\n     * @param handler  the handler that the callback runs on.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     *\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "GnssMeasurementsEvent.Callback" ]
  }, {
    "name" : "public boolean registerGnssMeasurementsCallback(@NonNull @CallbackExecutor Executor executor, @NonNull GnssMeasurementsEvent.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GPS Measurement callback.\n     *\n     * @param callback a {@link GnssMeasurementsEvent.Callback} object to register.\n     * @param executor the executor that the callback runs on.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     *\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "GnssMeasurementsEvent.Callback" ]
  }, {
    "name" : "public boolean registerGnssMeasurementsCallback(@NonNull GnssRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull GnssMeasurementsEvent.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS Measurement callback.\n     *\n     * @param request  extra parameters to pass to GNSS measurement provider. For example, if {@link\n     *                 GnssRequest#isFullTracking()} is true, GNSS chipset switches off duty\n     *                 cycling.\n     * @param executor the executor that the callback runs on.\n     * @param callback a {@link GnssMeasurementsEvent.Callback} object to register.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     * @throws IllegalArgumentException if request is null\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException        if the ACCESS_FINE_LOCATION permission is not present\n     * @hide\n     ",
    "links" : [ "android.location.GnssRequest#isFullTracking()", "GnssMeasurementsEvent.Callback" ]
  }, {
    "name" : "public void injectGnssMeasurementCorrections(@NonNull GnssMeasurementCorrections measurementCorrections)",
    "returnType" : "void",
    "comment" : "\n     * Injects GNSS measurement corrections into the GNSS chipset.\n     *\n     * @param measurementCorrections a {@link GnssMeasurementCorrections} object with the GNSS\n     *     measurement corrections to be injected into the GNSS chipset.\n     *\n     * @throws IllegalArgumentException if measurementCorrections is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     * @hide\n     ",
    "links" : [ "android.location.GnssMeasurementCorrections" ]
  }, {
    "name" : "public void unregisterGnssMeasurementsCallback(@NonNull GnssMeasurementsEvent.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a GPS Measurement callback.\n     *\n     * @param callback a {@link GnssMeasurementsEvent.Callback} object to remove.\n     ",
    "links" : [ "GnssMeasurementsEvent.Callback" ]
  }, {
    "name" : "public boolean registerAntennaInfoListener(@NonNull @CallbackExecutor Executor executor, @NonNull GnssAntennaInfo.Listener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a Gnss Antenna Info listener. Only expect results if\n     * {@link GnssCapabilities#hasGnssAntennaInfo()} shows that antenna info is supported.\n     *\n     * @param executor the executor that the listener runs on.\n     * @param listener a {@link GnssAntennaInfo.Listener} object to register.\n     * @return {@code true} if the listener was added successfully, {@code false} otherwise.\n     *\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if listener is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "android.location.GnssCapabilities#hasGnssAntennaInfo()", "GnssAntennaInfo.Listener" ]
  }, {
    "name" : "public void unregisterAntennaInfoListener(@NonNull GnssAntennaInfo.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a GNSS Antenna Info listener.\n     *\n     * @param listener a {@link GnssAntennaInfo.Listener} object to remove.\n     ",
    "links" : [ "GnssAntennaInfo.Listener" ]
  }, {
    "name" : "public boolean addGpsNavigationMessageListener(GpsNavigationMessageEvent.Listener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * No-op method to keep backward-compatibility.\n     *\n     * @hide\n     * @deprecated Use {@link #registerGnssNavigationMessageCallback} instead.\n     * @removed\n     ",
    "links" : [ "#registerGnssNavigationMessageCallback" ]
  }, {
    "name" : "public void removeGpsNavigationMessageListener(GpsNavigationMessageEvent.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * No-op method to keep backward-compatibility.\n     *\n     * @hide\n     * @deprecated Use {@link #unregisterGnssNavigationMessageCallback} instead.\n     * @removed\n     ",
    "links" : [ "#unregisterGnssNavigationMessageCallback" ]
  }, {
    "name" : "public boolean registerGnssNavigationMessageCallback(@NonNull GnssNavigationMessage.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS Navigation Message callback which will run on a binder thread.\n     *\n     * @param callback a {@link GnssNavigationMessage.Callback} object to register.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     * @deprecated Use {@link\n     * #registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback, Handler)} or {@link\n     * #registerGnssNavigationMessageCallback(Executor, GnssNavigationMessage.Callback)} instead.\n     ",
    "links" : [ "GnssNavigationMessage.Callback", "#registerGnssNavigationMessageCallback(Executor", "#registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback" ]
  }, {
    "name" : "public boolean registerGnssNavigationMessageCallback(@NonNull GnssNavigationMessage.Callback callback, @Nullable Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS Navigation Message callback.\n     *\n     * @param callback a {@link GnssNavigationMessage.Callback} object to register.\n     * @param handler  the handler that the callback runs on.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     *\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "GnssNavigationMessage.Callback" ]
  }, {
    "name" : "public boolean registerGnssNavigationMessageCallback(@NonNull @CallbackExecutor Executor executor, @NonNull GnssNavigationMessage.Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a GNSS Navigation Message callback.\n     *\n     * @param callback a {@link GnssNavigationMessage.Callback} object to register.\n     * @param executor the looper that the callback runs on.\n     * @return {@code true} if the callback was added successfully, {@code false} otherwise.\n     *\n     * @throws IllegalArgumentException if executor is null\n     * @throws IllegalArgumentException if callback is null\n     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n     ",
    "links" : [ "GnssNavigationMessage.Callback" ]
  }, {
    "name" : "public void unregisterGnssNavigationMessageCallback(@NonNull GnssNavigationMessage.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a GNSS Navigation Message callback.\n     *\n     * @param callback a {@link GnssNavigationMessage.Callback} object to remove.\n     ",
    "links" : [ "GnssNavigationMessage.Callback" ]
  }, {
    "name" : "public int getGnssBatchSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the batch size (in number of Location objects) that are supported by the batching\n     * interface.\n     *\n     * @return Maximum number of location objects that can be returned\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerGnssBatchedLocationCallback(long periodNanos, boolean wakeOnFifoFull, @NonNull BatchedLocationCallback callback, @Nullable Handler handler)",
    "returnType" : "boolean",
    "comment" : "\n     * Start hardware-batching of GNSS locations. This API is primarily used when the AP is\n     * asleep and the device can batch GNSS locations in the hardware.\n     *\n     * Note this is designed (as was the fused location interface before it) for a single user\n     * SystemApi - requests are not consolidated.  Care should be taken when the System switches\n     * users that may have different batching requests, to stop hardware batching for one user, and\n     * restart it for the next.\n     *\n     * @param periodNanos Time interval, in nanoseconds, that the GNSS locations are requested\n     *                    within the batch\n     * @param wakeOnFifoFull True if the hardware batching should flush the locations in a\n     *                       a callback to the listener, when it's internal buffer is full.  If\n     *                       set to false, the oldest location information is, instead,\n     *                       dropped when the buffer is full.\n     * @param callback The listener on which to return the batched locations\n     * @param handler The handler on which to process the callback\n     *\n     * @return True if batching was successfully started\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flushGnssBatch()",
    "returnType" : "void",
    "comment" : "\n     * Flush the batched GNSS locations.\n     * All GNSS locations currently ready in the batch are returned via the callback sent in\n     * startGnssBatch(), and the buffer containing the batched locations is cleared.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterGnssBatchedLocationCallback(@NonNull BatchedLocationCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Stop batching locations. This API is primarily used when the AP is\n     * asleep and the device can batch locations in the hardware.\n     *\n     * @param callback the specific callback class to remove from the transport layer\n     *\n     * @return True if batching was successfully started\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateLocalLocationEnabledCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableLocalLocationEnabledCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mLocationEnabledCache", "mLock", "GET_PROVIDER_SECURITY_EXCEPTIONS", "TARGETED_PENDING_INTENT", "INCOMPLETE_LOCATION", "GPS_STATUS_USAGE", "NETWORK_PROVIDER", "GPS_PROVIDER", "PASSIVE_PROVIDER", "FUSED_PROVIDER", "KEY_PROXIMITY_ENTERING", "KEY_STATUS_CHANGED", "KEY_PROVIDER_ENABLED", "KEY_LOCATION_CHANGED", "PROVIDERS_CHANGED_ACTION", "EXTRA_PROVIDER_NAME", "EXTRA_PROVIDER_ENABLED", "MODE_CHANGED_ACTION", "EXTRA_LOCATION_ENABLED", "HIGH_POWER_REQUEST_CHANGE_ACTION", "SETTINGS_FOOTER_DISPLAYED_ACTION", "METADATA_SETTINGS_FOOTER_STRING", "GET_CURRENT_LOCATION_MAX_TIMEOUT_MS", "mContext", "mService", "mListeners", "mBatchedLocationCallbackManager", "mGnssStatusListenerManager", "mGnssMeasurementsListenerManager", "mGnssNavigationMessageListenerTransport", "mGnssAntennaInfoListenerManager", "CACHE_KEY_LOCATION_ENABLED_PROPERTY" ],
  "methodNames" : [ "public String[] getBackgroundThrottlingWhitelist()", "public String[] getIgnoreSettingsWhitelist()", "public String getExtraLocationControllerPackage()", "public void setExtraLocationControllerPackage(@Nullable String packageName)", "public void setExtraLocationControllerPackageEnabled(boolean enabled)", "public boolean isExtraLocationControllerPackageEnabled()", "public void setLocationControllerExtraPackage(String packageName)", "public void setLocationControllerExtraPackageEnabled(boolean enabled)", "public boolean isLocationEnabled()", "public boolean isLocationEnabledForUser(@NonNull UserHandle userHandle)", "public void setLocationEnabledForUser(boolean enabled, @NonNull UserHandle userHandle)", "public boolean isProviderEnabled(@NonNull String provider)", "public boolean isProviderEnabledForUser(@NonNull String provider, @NonNull UserHandle userHandle)", "public boolean setProviderEnabledForUser(@NonNull String provider, boolean enabled, @NonNull UserHandle userHandle)", "public Location getLastLocation()", "public Location getLastKnownLocation(@NonNull String provider)", "public void getCurrentLocation(@NonNull String provider, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Location> consumer)", "public void getCurrentLocation(@NonNull LocationRequest locationRequest, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Location> consumer)", "public void requestSingleUpdate(@NonNull String provider, @NonNull LocationListener listener, @Nullable Looper looper)", "public void requestSingleUpdate(@NonNull Criteria criteria, @NonNull LocationListener listener, @Nullable Looper looper)", "public void requestSingleUpdate(@NonNull String provider, @NonNull PendingIntent pendingIntent)", "public void requestSingleUpdate(@NonNull Criteria criteria, @NonNull PendingIntent pendingIntent)", "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull LocationListener listener)", "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull LocationListener listener, @Nullable Looper looper)", "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull @CallbackExecutor Executor executor, @NonNull LocationListener listener)", "public void requestLocationUpdates(long minTimeMs, float minDistanceM, @NonNull Criteria criteria, @NonNull LocationListener listener, @Nullable Looper looper)", "public void requestLocationUpdates(long minTimeMs, float minDistanceM, @NonNull Criteria criteria, @NonNull @CallbackExecutor Executor executor, @NonNull LocationListener listener)", "public void requestLocationUpdates(@NonNull String provider, long minTimeMs, float minDistanceM, @NonNull PendingIntent pendingIntent)", "public void requestLocationUpdates(long minTimeMs, float minDistanceM, @NonNull Criteria criteria, @NonNull PendingIntent pendingIntent)", "public void requestLocationUpdates(@Nullable LocationRequest locationRequest, @NonNull LocationListener listener, @Nullable Looper looper)", "public void requestLocationUpdates(@Nullable LocationRequest locationRequest, @NonNull @CallbackExecutor Executor executor, @NonNull LocationListener listener)", "public void requestLocationUpdates(@Nullable LocationRequest locationRequest, @NonNull PendingIntent pendingIntent)", "public boolean injectLocation(@NonNull Location location)", "public void removeUpdates(@NonNull LocationListener listener)", "public void removeUpdates(@NonNull PendingIntent pendingIntent)", "public List<String> getAllProviders()", "public List<String> getProviders(boolean enabledOnly)", "public List<String> getProviders(@NonNull Criteria criteria, boolean enabledOnly)", "public String getBestProvider(@NonNull Criteria criteria, boolean enabledOnly)", "public LocationProvider getProvider(@NonNull String provider)", "public boolean isProviderPackage(@NonNull String packageName)", "public List<String> getProviderPackages(@NonNull String provider)", "public boolean sendExtraCommand(@NonNull String provider, @NonNull String command, @Nullable Bundle extras)", "public void addTestProvider(@NonNull String provider, boolean requiresNetwork, boolean requiresSatellite, boolean requiresCell, boolean hasMonetaryCost, boolean supportsAltitude, boolean supportsSpeed, boolean supportsBearing, int powerRequirement, int accuracy)", "public void removeTestProvider(@NonNull String provider)", "public void setTestProviderLocation(@NonNull String provider, @NonNull Location location)", "public void clearTestProviderLocation(@NonNull String provider)", "public void setTestProviderEnabled(@NonNull String provider, boolean enabled)", "public void clearTestProviderEnabled(@NonNull String provider)", "public void setTestProviderStatus(@NonNull String provider, int status, @Nullable Bundle extras, long updateTime)", "public void clearTestProviderStatus(@NonNull String provider)", "public List<LocationRequest> getTestProviderCurrentRequests(String providerName)", "public void addProximityAlert(double latitude, double longitude, float radius, long expiration, @NonNull PendingIntent intent)", "public void removeProximityAlert(@NonNull PendingIntent intent)", "public void addGeofence(@NonNull LocationRequest request, @NonNull Geofence fence, @NonNull PendingIntent intent)", "public void removeGeofence(@NonNull Geofence fence, @NonNull PendingIntent intent)", "public void removeAllGeofences(@NonNull PendingIntent intent)", "public GnssCapabilities getGnssCapabilities()", "public int getGnssYearOfHardware()", "public String getGnssHardwareModelName()", "public GpsStatus getGpsStatus(@Nullable GpsStatus status)", "public boolean addGpsStatusListener(GpsStatus.Listener listener)", "public void removeGpsStatusListener(GpsStatus.Listener listener)", "public boolean registerGnssStatusCallback(@NonNull GnssStatus.Callback callback)", "public boolean registerGnssStatusCallback(@NonNull GnssStatus.Callback callback, @Nullable Handler handler)", "public boolean registerGnssStatusCallback(@NonNull @CallbackExecutor Executor executor, @NonNull GnssStatus.Callback callback)", "public void unregisterGnssStatusCallback(@NonNull GnssStatus.Callback callback)", "public boolean addNmeaListener(@NonNull GpsStatus.NmeaListener listener)", "public void removeNmeaListener(@NonNull GpsStatus.NmeaListener listener)", "public boolean addNmeaListener(@NonNull OnNmeaMessageListener listener)", "public boolean addNmeaListener(@NonNull OnNmeaMessageListener listener, @Nullable Handler handler)", "public boolean addNmeaListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnNmeaMessageListener listener)", "public void removeNmeaListener(@NonNull OnNmeaMessageListener listener)", "public boolean addGpsMeasurementListener(GpsMeasurementsEvent.Listener listener)", "public void removeGpsMeasurementListener(GpsMeasurementsEvent.Listener listener)", "public boolean registerGnssMeasurementsCallback(@NonNull GnssMeasurementsEvent.Callback callback)", "public boolean registerGnssMeasurementsCallback(@NonNull GnssMeasurementsEvent.Callback callback, @Nullable Handler handler)", "public boolean registerGnssMeasurementsCallback(@NonNull @CallbackExecutor Executor executor, @NonNull GnssMeasurementsEvent.Callback callback)", "public boolean registerGnssMeasurementsCallback(@NonNull GnssRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull GnssMeasurementsEvent.Callback callback)", "public void injectGnssMeasurementCorrections(@NonNull GnssMeasurementCorrections measurementCorrections)", "public void unregisterGnssMeasurementsCallback(@NonNull GnssMeasurementsEvent.Callback callback)", "public boolean registerAntennaInfoListener(@NonNull @CallbackExecutor Executor executor, @NonNull GnssAntennaInfo.Listener listener)", "public void unregisterAntennaInfoListener(@NonNull GnssAntennaInfo.Listener listener)", "public boolean addGpsNavigationMessageListener(GpsNavigationMessageEvent.Listener listener)", "public void removeGpsNavigationMessageListener(GpsNavigationMessageEvent.Listener listener)", "public boolean registerGnssNavigationMessageCallback(@NonNull GnssNavigationMessage.Callback callback)", "public boolean registerGnssNavigationMessageCallback(@NonNull GnssNavigationMessage.Callback callback, @Nullable Handler handler)", "public boolean registerGnssNavigationMessageCallback(@NonNull @CallbackExecutor Executor executor, @NonNull GnssNavigationMessage.Callback callback)", "public void unregisterGnssNavigationMessageCallback(@NonNull GnssNavigationMessage.Callback callback)", "public int getGnssBatchSize()", "public boolean registerGnssBatchedLocationCallback(long periodNanos, boolean wakeOnFifoFull, @NonNull BatchedLocationCallback callback, @Nullable Handler handler)", "public void flushGnssBatch()", "public boolean unregisterGnssBatchedLocationCallback(@NonNull BatchedLocationCallback callback)", "public static void invalidateLocalLocationEnabledCaches()", "public void disableLocalLocationEnabledCaches()" ]
}