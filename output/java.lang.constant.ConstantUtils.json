{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/constant/ConstantUtils.java",
  "packageName" : "java.lang.constant",
  "className" : "ConstantUtils",
  "comment" : "\n * Helper methods for the implementation of {@code java.lang.constant}.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EMPTY_CONSTANTDESC",
    "type" : "ConstantDesc[]",
    "comment" : " an empty constant descriptor ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_CONSTABLE",
    "type" : "Constable[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ARRAY_TYPE_DESC_DIMENSIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pointyNames",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_ARRAY",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_BYTE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_CLASS",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_ENDCLASS",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_ENUM",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_FLOAT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_DOUBLE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_FUNC",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_ENDFUNC",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_INT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_LONG",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_SHORT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_VOID",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JVM_SIGNATURE_BOOLEAN",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static String validateBinaryClassName(String name)",
    "returnType" : "String",
    "comment" : "\n     * Validates the correctness of a binary class name. In particular checks for the presence of\n     * invalid characters in the name.\n     *\n     * @param name the class name\n     * @return the class name passed if valid\n     * @throws IllegalArgumentException if the class name is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String validateMemberName(String name, boolean method)",
    "returnType" : "String",
    "comment" : "\n     * Validates a member name\n     *\n     * @param name the name of the member\n     * @return the name passed if valid\n     * @throws IllegalArgumentException if the member name is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : " static void validateClassOrInterface(ClassDesc classDesc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int arrayDepth(String descriptorString)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String binaryToInternal(String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String internalToBinary(String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String dropLastChar(String s)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String dropFirstAndLastChar(String s)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static List<String> parseMethodDescriptor(String descriptor)",
    "returnType" : "List<String>",
    "comment" : "\n     * Parses a method descriptor string, and return a list of field descriptor\n     * strings, return type first, then parameter types\n     *\n     * @param descriptor the descriptor string\n     * @return the list of types\n     * @throws IllegalArgumentException if the descriptor string is not valid\n     ",
    "links" : [ ]
  }, {
    "name" : " static int skipOverFieldSignature(String descriptor, int start, int end, boolean voidOK)",
    "returnType" : "int",
    "comment" : "\n     * Validates that the characters at [start, end) within the provided string\n     * describe a valid field type descriptor.\n     * @param descriptor the descriptor string\n     * @param start the starting index into the string\n     * @param end the ending index within the string\n     * @param voidOK is void acceptable?\n     * @return the length of the descriptor, or 0 if it is not a descriptor\n     * @throws IllegalArgumentException if the descriptor string is not valid\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean verifyUnqualifiedClassName(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static String validateBinaryClassName(String name)", "public static String validateMemberName(String name, boolean method)", " static void validateClassOrInterface(ClassDesc classDesc)", " static int arrayDepth(String descriptorString)", " static String binaryToInternal(String name)", " static String internalToBinary(String name)", " static String dropLastChar(String s)", " static String dropFirstAndLastChar(String s)", " static List<String> parseMethodDescriptor(String descriptor)", " static int skipOverFieldSignature(String descriptor, int start, int end, boolean voidOK)", " static boolean verifyUnqualifiedClassName(String name)" ],
  "variableNames" : [ "EMPTY_CONSTANTDESC", "EMPTY_CONSTABLE", "MAX_ARRAY_TYPE_DESC_DIMENSIONS", "pointyNames", "JVM_SIGNATURE_ARRAY", "JVM_SIGNATURE_BYTE", "JVM_SIGNATURE_CHAR", "JVM_SIGNATURE_CLASS", "JVM_SIGNATURE_ENDCLASS", "JVM_SIGNATURE_ENUM", "JVM_SIGNATURE_FLOAT", "JVM_SIGNATURE_DOUBLE", "JVM_SIGNATURE_FUNC", "JVM_SIGNATURE_ENDFUNC", "JVM_SIGNATURE_INT", "JVM_SIGNATURE_LONG", "JVM_SIGNATURE_SHORT", "JVM_SIGNATURE_VOID", "JVM_SIGNATURE_BOOLEAN" ]
}