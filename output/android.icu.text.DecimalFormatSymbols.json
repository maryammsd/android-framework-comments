{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/DecimalFormatSymbols.java",
  "packageName" : "android.icu.text",
  "className" : "DecimalFormatSymbols",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.text.DecimalFormatSymbols}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * This class represents the set of symbols (such as the decimal separator, the grouping\n * separator, and so on) needed by <code>DecimalFormat</code> to format\n * numbers. <code>DecimalFormat</code> creates for itself an instance of\n * <code>DecimalFormatSymbols</code> from its locale data.  If you need to change any of\n * these symbols, you can get the <code>DecimalFormatSymbols</code> object from your\n * <code>DecimalFormat</code> and modify it.\n *\n * @see          java.util.Locale\n * @see          DecimalFormat\n * @author       Mark Davis\n * @author       Alan Liu\n ",
  "links" : [ "java.text.DecimalFormatSymbols" ],
  "variables" : [ {
    "name" : "CURRENCY_SPC_CURRENCY_MATCH",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Indicates the currency match pattern used in {@link #getPatternForCurrencySpacing}.\n     ",
    "links" : [ "#getPatternForCurrencySpacing" ]
  }, {
    "name" : "CURRENCY_SPC_SURROUNDING_MATCH",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Indicates the surrounding match pattern used in {@link\n     * #getPatternForCurrencySpacing}.\n     ",
    "links" : [ "#getPatternForCurrencySpacing" ]
  }, {
    "name" : "CURRENCY_SPC_INSERT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Indicates the insertion value used in {@link #getPatternForCurrencySpacing}.\n     ",
    "links" : [ "#getPatternForCurrencySpacing" ]
  }, {
    "name" : "currencySpcBeforeSym",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currencySpcAfterSym",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYMBOL_KEYS",
    "type" : "String[]",
    "comment" : "\n     * List of field names to be loaded from the data files.\n     * The indices of each name into the array correspond to the position of that item in the\n     * numberElements array.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEF_DIGIT_STRINGS_ARRAY",
    "type" : "String[]",
    "comment" : "\n     * Default digits\n     ",
    "links" : [ ]
  }, {
    "name" : "DEF_DIGIT_CHARS_ARRAY",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEF_DECIMAL_SEPARATOR",
    "type" : "char",
    "comment" : "\n     *  Default symbol characters, used for fallbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEF_GROUPING_SEPARATOR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEF_PERCENT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEF_MINUS_SIGN",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEF_PLUS_SIGN",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEF_PERMILL",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYMBOL_DEFAULTS",
    "type" : "String[]",
    "comment" : "\n     * List of default values for the symbols.\n     ",
    "links" : [ ]
  }, {
    "name" : "LATIN_NUMBERING_SYSTEM",
    "type" : "String",
    "comment" : "\n     * Constants for path names in the data bundles.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUMBER_ELEMENTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYMBOLS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "zeroDigit",
    "type" : "char",
    "comment" : "\n     * Character used for zero.  This remains only for backward compatibility\n     * purposes.  The digits array below is now used to actively store the digits.\n     *\n     * @serial\n     * @see #getZeroDigit\n     ",
    "links" : [ ]
  }, {
    "name" : "digits",
    "type" : "char[]",
    "comment" : "\n     * Array of characters used for the digits 0-9 in order.\n     ",
    "links" : [ ]
  }, {
    "name" : "digitStrings",
    "type" : "String[]",
    "comment" : "\n     * Array of Strings used for the digits 0-9 in order.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "codePointZero",
    "type" : "int",
    "comment" : "\n     * Dealing with code points is faster than dealing with strings when formatting. Because of\n     * this, we maintain a value containing the zero code point that is used whenever digitStrings\n     * represents a sequence of ten code points in order.\n     *\n     * <p>If the value stored here is positive, it means that the code point stored in this value\n     * corresponds to the digitStrings array, and codePointZero can be used instead of the\n     * digitStrings array for the purposes of efficient formatting; if -1, then digitStrings does\n     * *not* contain a sequence of code points, and it must be used directly.\n     *\n     * <p>It is assumed that codePointZero always shadows the value in digitStrings. codePointZero\n     * should never be set directly; rather, it should be updated only when digitStrings mutates.\n     * That is, the flow of information is digitStrings -> codePointZero, not the other way.\n     ",
    "links" : [ ]
  }, {
    "name" : "groupingSeparator",
    "type" : "char",
    "comment" : "\n     * Character used for thousands separator.\n     *\n     * @serial\n     * @see #getGroupingSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "groupingSeparatorString",
    "type" : "String",
    "comment" : "\n     * String used for thousands separator.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "decimalSeparator",
    "type" : "char",
    "comment" : "\n     * Character used for decimal sign.\n     *\n     * @serial\n     * @see #getDecimalSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "decimalSeparatorString",
    "type" : "String",
    "comment" : "\n     * String used for decimal sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "perMill",
    "type" : "char",
    "comment" : "\n     * Character used for mille percent sign.\n     *\n     * @serial\n     * @see #getPerMill\n     ",
    "links" : [ ]
  }, {
    "name" : "perMillString",
    "type" : "String",
    "comment" : "\n     * String used for mille percent sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "percent",
    "type" : "char",
    "comment" : "\n     * Character used for percent sign.\n     * @serial\n     * @see #getPercent\n     ",
    "links" : [ ]
  }, {
    "name" : "percentString",
    "type" : "String",
    "comment" : "\n     * String used for percent sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "digit",
    "type" : "char",
    "comment" : "\n     * Character used for a digit in a pattern.\n     *\n     * @serial\n     * @see #getDigit\n     ",
    "links" : [ ]
  }, {
    "name" : "sigDigit",
    "type" : "char",
    "comment" : "\n     * Character used for a significant digit in a pattern.\n     *\n     * @serial\n     * @see #getSignificantDigit\n     ",
    "links" : [ ]
  }, {
    "name" : "patternSeparator",
    "type" : "char",
    "comment" : "\n     * Character used to separate positive and negative subpatterns\n     * in a pattern.\n     *\n     * @serial\n     * @see #getPatternSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "infinity",
    "type" : "String",
    "comment" : "\n     * Character used to represent infinity.\n     * @serial\n     * @see #getInfinity\n     ",
    "links" : [ ]
  }, {
    "name" : "NaN",
    "type" : "String",
    "comment" : "\n     * Character used to represent NaN.\n     * @serial\n     * @see #getNaN\n     ",
    "links" : [ ]
  }, {
    "name" : "minusSign",
    "type" : "char",
    "comment" : "\n     * Character used to represent minus sign.\n     * @serial\n     * @see #getMinusSign\n     ",
    "links" : [ ]
  }, {
    "name" : "minusString",
    "type" : "String",
    "comment" : "\n     * String versions of minus sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "plusSign",
    "type" : "char",
    "comment" : "\n     * The character used to indicate a plus sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "plusString",
    "type" : "String",
    "comment" : "\n     * String versions of plus sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "approximatelyString",
    "type" : "String",
    "comment" : "\n     * The string used to indicate an approximately sign.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "currencySymbol",
    "type" : "String",
    "comment" : "\n     * String denoting the local currency, e.g. \"$\".\n     * @serial\n     * @see #getCurrencySymbol\n     ",
    "links" : [ ]
  }, {
    "name" : "intlCurrencySymbol",
    "type" : "String",
    "comment" : "\n     * International string denoting the local currency, e.g. \"USD\".\n     * @serial\n     * @see #getInternationalCurrencySymbol\n     ",
    "links" : [ ]
  }, {
    "name" : "monetarySeparator",
    "type" : "char",
    "comment" : " Field new in JDK 1.1.6",
    "links" : [ ]
  }, {
    "name" : "monetarySeparatorString",
    "type" : "String",
    "comment" : "\n     * The decimal separator string used when formatting currency values.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "monetaryGroupingSeparator",
    "type" : "char",
    "comment" : " Field new in JDK 1.1.6",
    "links" : [ ]
  }, {
    "name" : "monetaryGroupingSeparatorString",
    "type" : "String",
    "comment" : "\n     * The grouping separator string used when formatting currency values.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "exponential",
    "type" : "char",
    "comment" : " Field new in JDK 1.1.6",
    "links" : [ ]
  }, {
    "name" : "exponentSeparator",
    "type" : "String",
    "comment" : "\n     * The string used to separate the mantissa from the exponent.\n     * Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\n     * <p>\n     * Note that this supersedes the <code>exponential</code> field.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "padEscape",
    "type" : "char",
    "comment" : "\n     * The character used to indicate a padding character in a format,\n     * e.g., '*' in a pattern such as \"$*_#,##0.00\".\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "requestedLocale",
    "type" : "Locale",
    "comment" : "\n     * The locale for which this object was constructed.  Set to the\n     * default locale for objects resurrected from old streams.\n     ",
    "links" : [ ]
  }, {
    "name" : "ulocale",
    "type" : "ULocale",
    "comment" : "\n     * The requested ULocale.  We keep the old locale for serialization compatibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "exponentMultiplicationSign",
    "type" : "String",
    "comment" : "\n     * Exponent multiplication sign. e.g \"x\"\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Proclaim JDK 1.1 FCS compatibility",
    "links" : [ ]
  }, {
    "name" : "currentSerialVersion",
    "type" : "int",
    "comment" : " - 10 for ICU 69, which includes the approximatelyString field.",
    "links" : [ ]
  }, {
    "name" : "serialVersionOnStream",
    "type" : "int",
    "comment" : "\n     * Describes the version of <code>DecimalFormatSymbols</code> present on the stream.\n     * Possible values are:\n     * <ul>\n     * <li><b>0</b> (or uninitialized): versions prior to JDK 1.1.6.\n     *\n     * <li><b>1</b>: Versions written by JDK 1.1.6 or later, which includes\n     *      two new fields: <code>monetarySeparator</code> and <code>exponential</code>.\n     * <li><b>2</b>: Version for AlphaWorks.  Adds padEscape, exponentSeparator,\n     *      and plusSign.\n     * <li><b>3</b>: Version for ICU 2.2, which adds locale.\n     * <li><b>4</b>: Version for ICU 3.2, which adds ulocale.\n     * <li><b>5</b>: Version for ICU 3.6, which adds monetaryGroupingSeparator.\n     * <li><b>6</b>: Version for ICU 4.2, which adds currencySpcBeforeSym and\n     *      currencySpcAfterSym.\n     * <li><b>7</b>: Version for ICU 52, which adds minusString and plusString.\n     * </ul>\n     * When streaming out a <code>DecimalFormatSymbols</code>, the most recent format\n     * (corresponding to the highest allowable <code>serialVersionOnStream</code>)\n     * is always written.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "cachedLocaleData",
    "type" : "CacheBase<ULocale, CacheData, Void>",
    "comment" : "\n     * cache to hold the NumberElements of a Locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "currencyPattern",
    "type" : "String",
    "comment" : "\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "validLocale",
    "type" : "ULocale",
    "comment" : "\n     * The most specific locale containing any resource data, or null.\n     * @see android.icu.util.ULocale\n     ",
    "links" : [ ]
  }, {
    "name" : "actualLocale",
    "type" : "ULocale",
    "comment" : "\n     * The locale containing data used to construct this object, or\n     * null.\n     * @see android.icu.util.ULocale\n     ",
    "links" : [ ]
  }, {
    "name" : "currency",
    "type" : "Currency",
    "comment" : " not serialized, reconstructed from intlCurrencyCode",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DecimalFormatSymbols getInstance()",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * Returns a DecimalFormatSymbols instance for the default locale.\n     *\n     * <p><strong>Note:</strong> Unlike\n     * <code>java.text.DecimalFormatSymbols#getInstance</code>, this method simply returns\n     * <code>new android.icu.text.DecimalFormatSymbols()</code>.  ICU currently does not\n     * support <code>DecimalFormatSymbolsProvider</code>, which was introduced in Java 6.\n     *\n     * @return A DecimalFormatSymbols instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DecimalFormatSymbols getInstance(Locale locale)",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * Returns a DecimalFormatSymbols instance for the given locale.\n     *\n     * <p><strong>Note:</strong> Unlike\n     * <code>java.text.DecimalFormatSymbols#getInstance</code>, this method simply returns\n     * <code>new android.icu.text.DecimalFormatSymbols(locale)</code>.  ICU currently does\n     * not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in Java\n     * 6.\n     *\n     * @param locale the locale.\n     * @return A DecimalFormatSymbols instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DecimalFormatSymbols getInstance(ULocale locale)",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * Returns a DecimalFormatSymbols instance for the given locale.\n     *\n     * <p><strong>Note:</strong> Unlike\n     * <code>java.text.DecimalFormatSymbols#getInstance</code>, this method simply returns\n     * <code>new android.icu.text.DecimalFormatSymbols(locale)</code>.  ICU currently does\n     * not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in Java\n     * 6.\n     *\n     * @param locale the locale.\n     * @return A DecimalFormatSymbols instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DecimalFormatSymbols forNumberingSystem(Locale locale, NumberingSystem ns)",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * <strong>[icu]</strong> Returns a DecimalFormatSymbols instance for the given locale with digits and symbols\n     * corresponding to the given {@link NumberingSystem}.\n     *\n     * <p>This method behaves equivalently to {@link #getInstance} called with a locale having a\n     * \"numbers=xxxx\" keyword specifying the numbering system by name.\n     *\n     * <p>In this method, the NumberingSystem argument will be used even if the locale has its own\n     * \"numbers=xxxx\" keyword.\n     *\n     * @param locale the locale.\n     * @param ns the numbering system.\n     * @return A DecimalFormatSymbols instance.\n     ",
    "links" : [ "android.icu.text.NumberingSystem", "#getInstance" ]
  }, {
    "name" : "public static DecimalFormatSymbols forNumberingSystem(ULocale locale, NumberingSystem ns)",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * <strong>[icu]</strong> Returns a DecimalFormatSymbols instance for the given locale with digits and symbols\n     * corresponding to the given {@link NumberingSystem}.\n     *\n     * <p>This method behaves equivalently to {@link #getInstance} called with a locale having a\n     * \"numbers=xxxx\" keyword specifying the numbering system by name.\n     *\n     * <p>In this method, the NumberingSystem argument will be used even if the locale has its own\n     * \"numbers=xxxx\" keyword.\n     *\n     * @param locale the locale.\n     * @param ns the numbering system.\n     * @return A DecimalFormatSymbols instance.\n     ",
    "links" : [ "android.icu.text.NumberingSystem", "#getInstance" ]
  }, {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the <code>getInstance</code> methods of\n     * this class can return localized instances.\n     *\n     * <p><strong>Note:</strong> Unlike\n     * <code>java.text.DecimalFormatSymbols#getAvailableLocales</code>, this method simply\n     * returns the array of <code>Locale</code>s available for this class.  ICU currently\n     * does not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in\n     * Java 6.\n     *\n     * @return An array of <code>Locale</code>s for which localized\n     * <code>DecimalFormatSymbols</code> instances are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns an array of all locales for which the <code>getInstance</code>\n     * methods of this class can return localized instances.\n     *\n     * <p><strong>Note:</strong> Unlike\n     * <code>java.text.DecimalFormatSymbols#getAvailableLocales</code>, this method simply\n     * returns the array of <code>ULocale</code>s available in this class.  ICU currently\n     * does not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in\n     * Java 6.\n     *\n     * @return An array of <code>ULocale</code>s for which localized\n     * <code>DecimalFormatSymbols</code> instances are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getZeroDigit()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used for zero. Different for Arabic, etc.\n     * @return the character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getDigitStrings()} instead.\n     ",
    "links" : [ "#getDigitStrings()" ]
  }, {
    "name" : "public char[] getDigits()",
    "returnType" : "char[]",
    "comment" : "\n     * Returns the array of characters used as digits, in order from 0 through 9\n     * @return The array\n     * @see #getDigitStrings()\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getDigitStrings()} instead.\n     ",
    "links" : [ "#getDigitStrings()" ]
  }, {
    "name" : "public void setZeroDigit(char zeroDigit)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for zero.\n     * <p>\n     * <b>Note:</b> This method propagates digit 1 to\n     * digit 9 by incrementing code point one by one.\n     *\n     * @param zeroDigit the zero character.\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #setDigitStrings(String[])} instead.\n     ",
    "links" : [ "#setDigitStrings(String" ]
  }, {
    "name" : "public String[] getDigitStrings()",
    "returnType" : "String[]",
    "comment" : "\n    * <strong>[icu]</strong> Returns the array of strings used as digits, in order from 0 through 9\n    * @return The array of ten digit strings\n    * @see #setDigitStrings(String[])\n    ",
    "links" : [ ]
  }, {
    "name" : "public String[] getDigitStringsLocal()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the array of strings used as digits, in order from 0 through 9\n     * Package private method - doesn't create a defensively copy.\n     *\n     * <p><strong>WARNING:</strong> Mutating the returned array will cause undefined behavior.\n     * If you need to change the value of the array, use {@link #getDigitStrings} and {@link\n     * #setDigitStrings} instead.\n     *\n     * @return the array of digit strings\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "#setDigitStrings", "#getDigitStrings" ]
  }, {
    "name" : "public int getCodePointZero()",
    "returnType" : "int",
    "comment" : "\n     * If the digit strings array corresponds to a sequence of increasing code points, this method\n     * returns the code point corresponding to the first entry in the digit strings array. If the\n     * digit strings array is <em>not</em> a sequence of increasing code points, returns -1.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDigitStrings(String[] digitStrings)",
    "returnType" : "void",
    "comment" : "\n    * <strong>[icu]</strong> Sets the array of strings used as digits, in order from 0 through 9\n    * <p>\n    * <b>Note:</b>\n    * <p>\n    * When the input array of digit strings contains any strings\n    * represented by multiple Java chars, then {@link #getDigits()} will return\n    * the default digits ('0' - '9') and {@link #getZeroDigit()} will return the\n    * default zero digit ('0').\n    *\n    * @param digitStrings The array of digit strings. The length of the array must be exactly 10.\n    * @throws NullPointerException if the <code>digitStrings</code> is null.\n    * @throws IllegalArgumentException if the length of the array is not 10.\n    * @see #getDigitStrings()\n    ",
    "links" : [ "#getDigits()", "#getZeroDigit()" ]
  }, {
    "name" : "public char getSignificantDigit()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used to represent a significant digit in a pattern.\n     * @return the significant digit pattern character\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSignificantDigit(char sigDigit)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used to represent a significant digit in a pattern.\n     * @param sigDigit the significant digit pattern character\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getGroupingSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used for grouping separator. Different for French, etc.\n     * @return the thousands character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getGroupingSeparatorString()} instead.\n     ",
    "links" : [ "#getGroupingSeparatorString()" ]
  }, {
    "name" : "public void setGroupingSeparator(char groupingSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for grouping separator. Different for French, etc.\n     * @param groupingSeparator the thousands character\n     * @see #setGroupingSeparatorString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGroupingSeparatorString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used for grouping separator. Different for French, etc.\n     * @return the grouping separator string\n     * @see #setGroupingSeparatorString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupingSeparatorString(String groupingSeparatorString)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the string used for grouping separator.\n     * <p>\n     * <b>Note:</b> When the input grouping separator String is represented\n     * by multiple Java chars, then {@link #getGroupingSeparator()} will\n     * return the default grouping separator character (',').\n     *\n     * @param groupingSeparatorString the grouping separator string\n     * @throws NullPointerException if <code>groupingSeparatorString</code> is null.\n     * @see #getGroupingSeparatorString()\n     ",
    "links" : [ "#getGroupingSeparator()" ]
  }, {
    "name" : "public char getDecimalSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used for decimal sign. Different for French, etc.\n     * @return the decimal character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getDecimalSeparatorString()} instead.\n     ",
    "links" : [ "#getDecimalSeparatorString()" ]
  }, {
    "name" : "public void setDecimalSeparator(char decimalSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for decimal sign. Different for French, etc.\n     * @param decimalSeparator the decimal character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDecimalSeparatorString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used for decimal sign.\n     * @return the decimal sign string\n     * @see #setDecimalSeparatorString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalSeparatorString(String decimalSeparatorString)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the string used for decimal sign.\n     * <p>\n     * <b>Note:</b> When the input decimal separator String is represented\n     * by multiple Java chars, then {@link #getDecimalSeparator()} will\n     * return the default decimal separator character ('.').\n     *\n     * @param decimalSeparatorString the decimal sign string\n     * @throws NullPointerException if <code>decimalSeparatorString</code> is null.\n     * @see #getDecimalSeparatorString()\n     ",
    "links" : [ "#getDecimalSeparator()" ]
  }, {
    "name" : "public char getPerMill()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used for mille percent sign. Different for Arabic, etc.\n     * @return the mille percent character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getPerMillString()} instead.\n     ",
    "links" : [ "#getPerMillString()" ]
  }, {
    "name" : "public void setPerMill(char perMill)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for mille percent sign. Different for Arabic, etc.\n     * @param perMill the mille percent character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPerMillString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used for permille sign.\n     * @return the permille string\n     * @see #setPerMillString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPerMillString(String perMillString)",
    "returnType" : "void",
    "comment" : "\n    * <strong>[icu]</strong> Sets the string used for permille sign.\n     * <p>\n     * <b>Note:</b> When the input permille String is represented\n     * by multiple Java chars, then {@link #getPerMill()} will\n     * return the default permille character ('&#x2030;').\n     *\n     * @param perMillString the permille string\n     * @throws NullPointerException if <code>perMillString</code> is null.\n     * @see #getPerMillString()\n     ",
    "links" : [ "#getPerMill()" ]
  }, {
    "name" : "public char getPercent()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used for percent sign. Different for Arabic, etc.\n     * @return the percent character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getPercentString()} instead.\n     ",
    "links" : [ "#getPercentString()" ]
  }, {
    "name" : "public void setPercent(char percent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for percent sign. Different for Arabic, etc.\n     * @param percent the percent character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPercentString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used for percent sign.\n     * @return the percent string\n     * @see #setPercentString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPercentString(String percentString)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the string used for percent sign.\n     * <p>\n     * <b>Note:</b> When the input grouping separator String is represented\n     * by multiple Java chars, then {@link #getPercent()} will\n     * return the default percent sign character ('%').\n     *\n     * @param percentString the percent string\n     * @throws NullPointerException if <code>percentString</code> is null.\n     * @see #getPercentString()\n     ",
    "links" : [ "#getPercent()" ]
  }, {
    "name" : "public char getDigit()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used for a digit in a pattern.\n     * @return the digit pattern character\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDigit(char digit)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for a digit in a pattern.\n     * @param digit the digit pattern character\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getPatternSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used to separate positive and negative subpatterns\n     * in a pattern.\n     * @return the pattern separator character\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPatternSeparator(char patternSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used to separate positive and negative subpatterns\n     * in a pattern.\n     * @param patternSeparator the pattern separator character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInfinity()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInfinity(String infinity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the String used to represent infinity. Almost always left\n     * unchanged.\n     * @param infinity the Infinity String\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNaN()",
    "returnType" : "String",
    "comment" : "Bug 4194173 [Richard/GCL]",
    "links" : [ ]
  }, {
    "name" : "public void setNaN(String NaN)",
    "returnType" : "void",
    "comment" : "\n     * Sets the String used to represent NaN. Almost always left\n     * unchanged.\n     * @param NaN the NaN String\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getMinusSign()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used to represent minus sign. If no explicit\n     * negative format is specified, one is formed by prefixing\n     * minusSign to the positive format.\n     * @return the minus sign character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getMinusSignString()} instead.\n     ",
    "links" : [ "#getMinusSignString()" ]
  }, {
    "name" : "public void setMinusSign(char minusSign)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used to represent minus sign. If no explicit\n     * negative format is specified, one is formed by prefixing\n     * minusSign to the positive format.\n     * @param minusSign the minus sign character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMinusSignString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used to represent minus sign.\n     * @return the minus sign string\n     * @see #setMinusSignString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinusSignString(String minusSignString)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the string used to represent minus sign.\n     * <p>\n     * <b>Note:</b> When the input minus sign String is represented\n     * by multiple Java chars, then {@link #getMinusSign()} will\n     * return the default minus sign character ('-').\n     *\n     * @param minusSignString the minus sign string\n     * @throws NullPointerException if <code>minusSignString</code> is null.\n     * @see #getGroupingSeparatorString()\n     ",
    "links" : [ "#getMinusSign()" ]
  }, {
    "name" : "public char getPlusSign()",
    "returnType" : "char",
    "comment" : "\n     * <strong>[icu]</strong> Returns the localized plus sign.\n     * @return the plus sign, used in localized patterns and formatted\n     * strings\n     * @see #setPlusSign\n     * @see #setMinusSign\n     * @see #getMinusSign\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getPlusSignString()} instead.\n     ",
    "links" : [ "#getPlusSignString()" ]
  }, {
    "name" : "public void setPlusSign(char plus)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the localized plus sign.\n     * @param plus the plus sign, used in localized patterns and formatted\n     * strings\n     * @see #getPlusSign\n     * @see #setMinusSign\n     * @see #getMinusSign\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPlusSignString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used to represent plus sign.\n     * @return the plus sign string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPlusSignString(String plusSignString)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the localized plus sign string.\n     * <p>\n     * <b>Note:</b> When the input plus sign String is represented\n     * by multiple Java chars, then {@link #getPlusSign()} will\n     * return the default plus sign character ('+').\n     *\n     * @param plusSignString the plus sign string, used in localized patterns and formatted\n     * strings\n     * @throws NullPointerException if <code>plusSignString</code> is null.\n     * @see #getPlusSignString()\n     ",
    "links" : [ "#getPlusSign()" ]
  }, {
    "name" : "public String getApproximatelySignString()",
    "returnType" : "String",
    "comment" : "\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setApproximatelySignString(String approximatelySignString)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrencySymbol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string denoting the local currency.\n     * @return the local currency String.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrencySymbol(String currency)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string denoting the local currency.\n     * @param currency the local currency String.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInternationalCurrencySymbol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the international string denoting the local currency.\n     * @return the international string denoting the local currency\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInternationalCurrencySymbol(String currency)",
    "returnType" : "void",
    "comment" : "\n     * Sets the international string denoting the local currency.\n     * @param currency the international string denoting the local currency.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Currency getCurrency()",
    "returnType" : "Currency",
    "comment" : "\n     * Returns the currency symbol, for {@link DecimalFormatSymbols#getCurrency()} API\n     * compatibility only. ICU clients should use the Currency API directly.\n     * @return the currency used, or null\n     ",
    "links" : [ "android.icu.text.DecimalFormatSymbols#getCurrency()" ]
  }, {
    "name" : "public void setCurrency(Currency currency)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currency.\n     *\n     * <p><strong>Note:</strong> ICU does not use the DecimalFormatSymbols for the currency\n     * any more.  This API is present for API compatibility only.\n     *\n     * <p>This also sets the currency symbol attribute to the currency's symbol\n     * in the DecimalFormatSymbols' locale, and the international currency\n     * symbol attribute to the currency's ISO 4217 currency code.\n     *\n     * @param currency the new currency to be used\n     * @throws NullPointerException if <code>currency</code> is null\n     * @see #setCurrencySymbol\n     * @see #setInternationalCurrencySymbol\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setCurrencyOrNull(Currency currency, CurrencyDisplayInfo displayInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char getMonetaryDecimalSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Returns the monetary decimal separator.\n     * @return the monetary decimal separator character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getMonetaryDecimalSeparatorString()} instead.\n     ",
    "links" : [ "#getMonetaryDecimalSeparatorString()" ]
  }, {
    "name" : "public void setMonetaryDecimalSeparator(char sep)",
    "returnType" : "void",
    "comment" : "\n     * Sets the monetary decimal separator.\n     * @param sep the monetary decimal separator character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMonetaryDecimalSeparatorString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the monetary decimal separator string.\n     * @return the monetary decimal separator string\n     * @see #setMonetaryDecimalSeparatorString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonetaryDecimalSeparatorString(String sep)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the monetary decimal separator string.\n     * <p>\n     * <b>Note:</b> When the input monetary decimal separator String is represented\n     * by multiple Java chars, then {@link #getMonetaryDecimalSeparatorString()} will\n     * return the default monetary decimal separator character ('.').\n     *\n     * @param sep the monetary decimal separator string\n     * @throws NullPointerException if <code>sep</code> is null.\n     * @see #getMonetaryDecimalSeparatorString()\n     ",
    "links" : [ "#getMonetaryDecimalSeparatorString()" ]
  }, {
    "name" : "public char getMonetaryGroupingSeparator()",
    "returnType" : "char",
    "comment" : "\n     * <strong>[icu]</strong> Returns the monetary grouping separator.\n     * @return the monetary grouping separator character\n     * @apiNote <strong>Discouraged:</strong> ICU 58 use {@link #getMonetaryGroupingSeparatorString()} instead.\n     ",
    "links" : [ "#getMonetaryGroupingSeparatorString()" ]
  }, {
    "name" : "public void setMonetaryGroupingSeparator(char sep)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the monetary grouping separator.\n     * @param sep the monetary grouping separator character\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMonetaryGroupingSeparatorString()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the monetary grouping separator.\n     * @return the monetary grouping separator string\n     * @see #setMonetaryGroupingSeparatorString(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonetaryGroupingSeparatorString(String sep)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the monetary grouping separator string.\n     * <p>\n     * <b>Note:</b> When the input grouping separator String is represented\n     * by multiple Java chars, then {@link #getMonetaryGroupingSeparator()} will\n     * return the default monetary grouping separator character (',').\n     *\n     * @param sep the monetary grouping separator string\n     * @throws NullPointerException if <code>sep</code> is null.\n     * @see #getMonetaryGroupingSeparatorString()\n     ",
    "links" : [ "#getMonetaryGroupingSeparator()" ]
  }, {
    "name" : "public String getCurrencyPattern()",
    "returnType" : "String",
    "comment" : "\n     * Internal API for NumberFormat\n     * @return String currency pattern string\n     * @deprecated This API is for ICU internal use only\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExponentMultiplicationSign()",
    "returnType" : "String",
    "comment" : "\n    * Returns the multiplication sign\n    ",
    "links" : [ ]
  }, {
    "name" : "public void setExponentMultiplicationSign(String exponentMultiplicationSign)",
    "returnType" : "void",
    "comment" : "\n    * Sets the multiplication sign\n    ",
    "links" : [ ]
  }, {
    "name" : "public String getExponentSeparator()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the string used to separate the mantissa from the exponent.\n     * Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\n     * @return the localized exponent symbol, used in localized patterns\n     * and formatted strings\n     * @see #setExponentSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExponentSeparator(String exp)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the string used to separate the mantissa from the exponent.\n     * Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\n     * @param exp the localized exponent symbol, used in localized patterns\n     * and formatted strings\n     * @see #getExponentSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getPadEscape()",
    "returnType" : "char",
    "comment" : "\n     * <strong>[icu]</strong> Returns the character used to pad numbers out to a specified width.  This is\n     * not the pad character itself; rather, it is the special pattern character\n     * <em>preceding</em> the pad character.  In the pattern \"*_#,##0\", '*' is the pad\n     * escape, and '_' is the pad character.\n     * @return the character\n     * @see #setPadEscape\n     * @see DecimalFormat#getFormatWidth\n     * @see DecimalFormat#getPadPosition\n     * @see DecimalFormat#getPadCharacter\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPadEscape(char c)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the character used to pad numbers out to a specified width.  This is not\n     * the pad character itself; rather, it is the special pattern character\n     * <em>preceding</em> the pad character.  In the pattern \"*_#,##0\", '*' is the pad\n     * escape, and '_' is the pad character.\n     * @see #getPadEscape\n     * @see DecimalFormat#setFormatWidth\n     * @see DecimalFormat#setPadPosition\n     * @see DecimalFormat#setPadCharacter\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPatternForCurrencySpacing(int itemType, boolean beforeCurrency)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the desired currency spacing value. Original values come from ICU's\n     * CLDR data based on the locale provided during construction, and can be null.  These\n     * values govern what and when text is inserted between a currency code/name/symbol\n     * and the currency amount when formatting money.\n     *\n     * <p>For more information, see <a href=\"http://www.unicode.org/reports/tr35/#Currencies\"\n     * >UTS#35 section 5.10.2</a>.\n     *\n     * @param itemType one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH\n     * or CURRENCY_SPC_INSERT\n     * @param beforeCurrency true to get the <code>beforeCurrency</code> values, false\n     * to get the <code>afterCurrency</code> values.\n     * @return the value, or null.\n     * @see #setPatternForCurrencySpacing(int, boolean, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPatternForCurrencySpacing(int itemType, boolean beforeCurrency, String pattern)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the indicated currency spacing pattern or value. See {@link\n     * #getPatternForCurrencySpacing} for more information.\n     *\n     * <p>Values for currency match and surrounding match must be {@link\n     * android.icu.text.UnicodeSet} patterns. Values for insert can be any string.\n     *\n     * <p><strong>Note:</strong> ICU4J does not currently use this information.\n     *\n     * @param itemType one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH\n     * or CURRENCY_SPC_INSERT\n     * @param beforeCurrency true if the pattern is for before the currency symbol.\n     * false if the pattern is for after it.\n     * @param  pattern string to override current setting; can be null.\n     * @see #getPatternForCurrencySpacing(int, boolean)\n     ",
    "links" : [ "android.icu.text.UnicodeSet", "#getPatternForCurrencySpacing" ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the locale for which this object was constructed.\n     * @return the locale for which this object was constructed\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale getULocale()",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the locale for which this object was constructed.\n     * @return the locale for which this object was constructed\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getLocalizedPatternSeparator(ULocale locale, NumberingSystem ns)",
    "returnType" : "String",
    "comment" : "\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static CacheData getCachedLocaleData(ULocale locale, NumberingSystem ns)",
    "returnType" : "CacheData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initialize(ULocale locale, NumberingSystem ns)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the symbols from the locale data.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static CacheData loadData(ULocale locale)",
    "returnType" : "CacheData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initSpacingInfo(CurrencySpacingInfo spcInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reads the default serializable fields, then if <code>serialVersionOnStream</code>\n     * is less than 1, initialize <code>monetarySeparator</code> to be\n     * the same as <code>decimalSeparator</code> and <code>exponential</code>\n     * to be 'E'.\n     * Finally, sets serialVersionOnStream back to the maximum allowed value so that\n     * default serialization will work properly if this object is streamed out again.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ULocale getLocale(ULocale.Type type)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale that was used to create this object, or null.\n     * This may may differ from the locale requested at the time of\n     * this object's creation.  For example, if an object is created\n     * for locale <tt>en_US_CALIFORNIA</tt>, the actual data may be\n     * drawn from <tt>en</tt> (the <i>actual</i> locale), and\n     * <tt>en_US</tt> may be the most specific locale that exists (the\n     * <i>valid</i> locale).\n     *\n     * <p>Note: The <i>actual</i> locale is returned correctly, but the <i>valid</i>\n     * locale is not, in most cases.\n     * @param type type of information requested, either {@link\n     * android.icu.util.ULocale#VALID_LOCALE} or {@link\n     * android.icu.util.ULocale#ACTUAL_LOCALE}.\n     * @return the information specified by <i>type</i>, or null if\n     * this object was not constructed from locale data.\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.util.ULocale#ACTUAL_LOCALE", "android.icu.util.ULocale#VALID_LOCALE" ]
  }, {
    "name" : " final void setLocale(ULocale valid, ULocale actual)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets information about the locales that were used to create this\n     * object.  If the object was not constructed from locale data,\n     * both arguments should be set to null.  Otherwise, neither\n     * should be null.  The actual locale must be at the same level or\n     * less specific than the valid locale.  This method is intended\n     * for use by factories or other entities that create objects of\n     * this class.\n     * @param valid the most specific locale containing any resource\n     * data, or null\n     * @param actual the locale containing data used to construct this\n     * object, or null\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DecimalFormatSymbols getInstance()", "public static DecimalFormatSymbols getInstance(Locale locale)", "public static DecimalFormatSymbols getInstance(ULocale locale)", "public static DecimalFormatSymbols forNumberingSystem(Locale locale, NumberingSystem ns)", "public static DecimalFormatSymbols forNumberingSystem(ULocale locale, NumberingSystem ns)", "public static Locale[] getAvailableLocales()", "public static ULocale[] getAvailableULocales()", "public char getZeroDigit()", "public char[] getDigits()", "public void setZeroDigit(char zeroDigit)", "public String[] getDigitStrings()", "public String[] getDigitStringsLocal()", "public int getCodePointZero()", "public void setDigitStrings(String[] digitStrings)", "public char getSignificantDigit()", "public void setSignificantDigit(char sigDigit)", "public char getGroupingSeparator()", "public void setGroupingSeparator(char groupingSeparator)", "public String getGroupingSeparatorString()", "public void setGroupingSeparatorString(String groupingSeparatorString)", "public char getDecimalSeparator()", "public void setDecimalSeparator(char decimalSeparator)", "public String getDecimalSeparatorString()", "public void setDecimalSeparatorString(String decimalSeparatorString)", "public char getPerMill()", "public void setPerMill(char perMill)", "public String getPerMillString()", "public void setPerMillString(String perMillString)", "public char getPercent()", "public void setPercent(char percent)", "public String getPercentString()", "public void setPercentString(String percentString)", "public char getDigit()", "public void setDigit(char digit)", "public char getPatternSeparator()", "public void setPatternSeparator(char patternSeparator)", "public String getInfinity()", "public void setInfinity(String infinity)", "public String getNaN()", "public void setNaN(String NaN)", "public char getMinusSign()", "public void setMinusSign(char minusSign)", "public String getMinusSignString()", "public void setMinusSignString(String minusSignString)", "public char getPlusSign()", "public void setPlusSign(char plus)", "public String getPlusSignString()", "public void setPlusSignString(String plusSignString)", "public String getApproximatelySignString()", "public void setApproximatelySignString(String approximatelySignString)", "public String getCurrencySymbol()", "public void setCurrencySymbol(String currency)", "public String getInternationalCurrencySymbol()", "public void setInternationalCurrencySymbol(String currency)", "public Currency getCurrency()", "public void setCurrency(Currency currency)", "private void setCurrencyOrNull(Currency currency, CurrencyDisplayInfo displayInfo)", "public char getMonetaryDecimalSeparator()", "public void setMonetaryDecimalSeparator(char sep)", "public String getMonetaryDecimalSeparatorString()", "public void setMonetaryDecimalSeparatorString(String sep)", "public char getMonetaryGroupingSeparator()", "public void setMonetaryGroupingSeparator(char sep)", "public String getMonetaryGroupingSeparatorString()", "public void setMonetaryGroupingSeparatorString(String sep)", "public String getCurrencyPattern()", "public String getExponentMultiplicationSign()", "public void setExponentMultiplicationSign(String exponentMultiplicationSign)", "public String getExponentSeparator()", "public void setExponentSeparator(String exp)", "public char getPadEscape()", "public void setPadEscape(char c)", "public String getPatternForCurrencySpacing(int itemType, boolean beforeCurrency)", "public void setPatternForCurrencySpacing(int itemType, boolean beforeCurrency, String pattern)", "public Locale getLocale()", "public ULocale getULocale()", "public Object clone()", "public boolean equals(Object obj)", "public int hashCode()", "public static String getLocalizedPatternSeparator(ULocale locale, NumberingSystem ns)", "private static CacheData getCachedLocaleData(ULocale locale, NumberingSystem ns)", "private void initialize(ULocale locale, NumberingSystem ns)", "private static CacheData loadData(ULocale locale)", "private void initSpacingInfo(CurrencySpacingInfo spcInfo)", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException", "public final ULocale getLocale(ULocale.Type type)", " final void setLocale(ULocale valid, ULocale actual)" ],
  "variableNames" : [ "CURRENCY_SPC_CURRENCY_MATCH", "CURRENCY_SPC_SURROUNDING_MATCH", "CURRENCY_SPC_INSERT", "currencySpcBeforeSym", "currencySpcAfterSym", "SYMBOL_KEYS", "DEF_DIGIT_STRINGS_ARRAY", "DEF_DIGIT_CHARS_ARRAY", "DEF_DECIMAL_SEPARATOR", "DEF_GROUPING_SEPARATOR", "DEF_PERCENT", "DEF_MINUS_SIGN", "DEF_PLUS_SIGN", "DEF_PERMILL", "SYMBOL_DEFAULTS", "LATIN_NUMBERING_SYSTEM", "NUMBER_ELEMENTS", "SYMBOLS", "zeroDigit", "digits", "digitStrings", "codePointZero", "groupingSeparator", "groupingSeparatorString", "decimalSeparator", "decimalSeparatorString", "perMill", "perMillString", "percent", "percentString", "digit", "sigDigit", "patternSeparator", "infinity", "NaN", "minusSign", "minusString", "plusSign", "plusString", "approximatelyString", "currencySymbol", "intlCurrencySymbol", "monetarySeparator", "monetarySeparatorString", "monetaryGroupingSeparator", "monetaryGroupingSeparatorString", "exponential", "exponentSeparator", "padEscape", "requestedLocale", "ulocale", "exponentMultiplicationSign", "serialVersionUID", "currentSerialVersion", "serialVersionOnStream", "cachedLocaleData", "currencyPattern", "validLocale", "actualLocale", "currency" ]
}