{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/attestationverification/AttestationVerificationService.java",
  "packageName" : "android.security.attestationverification",
  "className" : "AttestationVerificationService",
  "comment" : "\n * A verifier which can be implemented by apps to verify an attestation (as described in {@link\n * AttestationVerificationManager}).\n *\n * In the manifest for this service, specify the profile and local binding type this verifier\n * supports. Create a new service for each combination of profile & local binding type that your app\n * supports. Each service must declare an {@code intent-filter} action of {@link #SERVICE_INTERFACE}\n * and permission of {@link android.Manifest.permission#BIND_ATTESTATION_VERIFICATION_SERVICE}.\n *\n * <p>Example:\n * {@code\n * <pre>\n * <service android:name=\".MyAttestationVerificationService\"\n *          android:permission=\"android.permission.BIND_ATTESTATION_VERIFICATION_SERVICE\"\n *          android:exported=\"true\">\n *   <intent-filter>\n *     <action\n *         android:name=\"android.security.attestationverification.AttestationVerificationService\" />\n *   </intent-filter>\n *   <meta-data android:name=\"android.security.attestationverification.PROFILE_ID\"\n *              android:value=\"PROFILE_PLACEHOLDER_0\" />\n *   <meta-data android:name=\"android.security.attestationverification.LOCAL_BINDING_TYPE\"\n *              android:value=\"TYPE_PLACEHOLDER_0\" />\n * </service>\n * </pre>\n * }\n *\n * <p>For app-defined profiles, an example of the {@code <meta-data>}:\n * {@code\n * <pre>\n *   <meta-data android:name=\"android.security.attestation.PROFILE_PACKAGE_NAME\"\n *              android:value=\"com.example\" />\n *   <meta-data android:name=\"android.security.attestation.PROFILE_NAME\"\n *              android:value=\"com.example.profile.PROFILE_FOO\" />\n * </pre>\n * }\n *\n * @hide\n ",
  "links" : [ "#SERVICE_INTERFACE", "android.security.attestationverification.AttestationVerificationManager", "android.Manifest.permission#BIND_ATTESTATION_VERIFICATION_SERVICE" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * An intent action for a service to be bound and act as an attestation verifier.\n     *\n     * <p>The app will be kept alive for a short duration between verification calls after which\n     * the system will unbind from this service making the app eligible for cleanup.\n     *\n     * <p>The service must also require permission\n     * {@link android.Manifest.permission#BIND_ATTESTATION_VERIFICATION_SERVICE}.\n     ",
    "links" : [ "android.Manifest.permission#BIND_ATTESTATION_VERIFICATION_SERVICE" ]
  } ],
  "methods" : [ {
    "name" : "public abstract int onVerifyPeerDeviceAttestation(@NonNull Bundle requirements, @NonNull byte[] attestation)",
    "returnType" : "int",
    "comment" : "\n     * Verifies that {@code attestation} attests that the device identified by the local binding\n     * data in {@code requirements} meets the minimum requirements of this verifier for this\n     * verifier's profile.\n     *\n     * <p>Called by the system to verify an attestation.\n     *\n     * <p>The data passed into this method comes directly from apps and should be treated as\n     * potentially dangerous user input.\n     *\n     * @param requirements a {@link Bundle} containing locally-known data which must match {@code\n     *                     attestation}\n     * @param attestation  the attestation to verify\n     * @return whether the verification passed\n     * @see AttestationVerificationManager#verifyAttestation(AttestationProfile, int, Bundle,\n     * byte[], java.util.concurrent.Executor, java.util.function.BiConsumer)\n     ",
    "links" : [ "android.os.Bundle" ]
  } ],
  "methodNames" : [ "public abstract int onVerifyPeerDeviceAttestation(@NonNull Bundle requirements, @NonNull byte[] attestation)" ],
  "variableNames" : [ "SERVICE_INTERFACE" ]
}