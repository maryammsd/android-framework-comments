{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/pdf/PdfDocument.java",
  "packageName" : "android.graphics.pdf",
  "className" : "PdfDocument",
  "comment" : "\n * <p>\n * This class enables generating a PDF document from native Android content. You\n * create a new document and then for every page you want to add you start a page,\n * write content to the page, and finish the page. After you are done with all\n * pages, you write the document to an output stream and close the document.\n * After a document is closed you should not use it anymore. Note that pages are\n * created one by one, i.e. you can have only a single page to which you are\n * writing at any given time. This class is not thread safe.\n * </p>\n * <p>\n * A typical use of the APIs looks like this:\n * </p>\n * <pre>\n * // create a new document\n * PdfDocument document = new PdfDocument();\n *\n * // create a page description\n * PageInfo pageInfo = new PageInfo.Builder(100, 100, 1).create();\n *\n * // start a page\n * Page page = document.startPage(pageInfo);\n *\n * // draw something on the page\n * View content = getContentView();\n * content.draw(page.getCanvas());\n *\n * // finish the page\n * document.finishPage(page);\n * . . .\n * // add more pages\n * . . .\n * // write the document content\n * document.writeTo(getOutputStream());\n *\n * // close the document\n * document.close();\n * </pre>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mChunk",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPages",
    "type" : "List<PageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeDocument",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentPage",
    "type" : "Page",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Page startPage(PageInfo pageInfo)",
    "returnType" : "Page",
    "comment" : "\n     * Starts a page using the provided {@link PageInfo}. After the page\n     * is created you can draw arbitrary content on the page's canvas which\n     * you can get by calling {@link Page#getCanvas()}. After you are done\n     * drawing the content you should finish the page by calling\n     * {@link #finishPage(Page)}. After the page is finished you should\n     * no longer access the page or its canvas.\n     * <p>\n     * <strong>Note:</strong> Do not call this method after {@link #close()}.\n     * Also do not call this method if the last page returned by this method\n     * is not finished by calling {@link #finishPage(Page)}.\n     * </p>\n     *\n     * @param pageInfo The page info. Cannot be null.\n     * @return A blank page.\n     *\n     * @see #finishPage(Page)\n     ",
    "links" : [ "PageInfo", "#close()", "#getCanvas()", "#finishPage(Page)" ]
  }, {
    "name" : "public void finishPage(Page page)",
    "returnType" : "void",
    "comment" : "\n     * Finishes a started page. You should always finish the last started page.\n     * <p>\n     * <strong>Note:</strong> Do not call this method after {@link #close()}.\n     * You should not finish the same page more than once.\n     * </p>\n     *\n     * @param page The page. Cannot be null.\n     *\n     * @see #startPage(PageInfo)\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public void writeTo(OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the document to an output stream. You can call this method\n     * multiple times.\n     * <p>\n     * <strong>Note:</strong> Do not call this method after {@link #close()}.\n     * Also do not call this method if a page returned by {@link #startPage(\n     * PageInfo)} is not finished by calling {@link #finishPage(Page)}.\n     * </p>\n     *\n     * @param out The output stream. Cannot be null.\n     *\n     * @throws IOException If an error occurs while writing.\n     ",
    "links" : [ "#close()", "#finishPage(Page)", "#startPage(" ]
  }, {
    "name" : "public List<PageInfo> getPages()",
    "returnType" : "List<PageInfo>",
    "comment" : "\n     * Gets the pages of the document.\n     *\n     * @return The pages or an empty list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this document. This method should be called after you\n     * are done working with the document. After this call the document\n     * is considered closed and none of its methods should be called.\n     * <p>\n     * <strong>Note:</strong> Do not call this method if the page\n     * returned by {@link #startPage(PageInfo)} is not finished by\n     * calling {@link #finishPage(Page)}.\n     * </p>\n     ",
    "links" : [ "#finishPage(Page)", "#startPage(PageInfo)" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfClosed()",
    "returnType" : "void",
    "comment" : "\n     * Throws an exception if the document is already closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void throwIfCurrentPageNotFinished()",
    "returnType" : "void",
    "comment" : "\n     * Throws an exception if the last started page is not finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native long nativeCreateDocument()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeClose(long nativeDocument)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeFinishPage(long nativeDocument)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeWriteTo(long nativeDocument, OutputStream out, byte[] chunk)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeStartPage(long nativeDocument, int pageWidth, int pageHeight, int contentLeft, int contentTop, int contentRight, int contentBottom)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Page startPage(PageInfo pageInfo)", "public void finishPage(Page page)", "public void writeTo(OutputStream out) throws IOException", "public List<PageInfo> getPages()", "public void close()", "protected void finalize() throws Throwable", "private void dispose()", "private void throwIfClosed()", "private void throwIfCurrentPageNotFinished()", "private native long nativeCreateDocument()", "private native void nativeClose(long nativeDocument)", "private native void nativeFinishPage(long nativeDocument)", "private native void nativeWriteTo(long nativeDocument, OutputStream out, byte[] chunk)", "private static native long nativeStartPage(long nativeDocument, int pageWidth, int pageHeight, int contentLeft, int contentTop, int contentRight, int contentBottom)" ],
  "variableNames" : [ "mChunk", "mCloseGuard", "mPages", "mNativeDocument", "mCurrentPage" ]
}