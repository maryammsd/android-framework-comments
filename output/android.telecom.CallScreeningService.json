{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/CallScreeningService.java",
  "packageName" : "android.telecom",
  "className" : "CallScreeningService",
  "comment" : "\n * This service can be implemented by the default dialer (see\n * {@link TelecomManager#getDefaultDialerPackage()}) or a third party app to allow or disallow\n * incoming calls before they are shown to a user. A {@link CallScreeningService} can also see\n * outgoing calls for the purpose of providing caller ID services for those calls.\n * <p>\n * Below is an example manifest registration for a {@code CallScreeningService}.\n * <pre>\n * {@code\n * <service android:name=\"your.package.YourCallScreeningServiceImplementation\"\n *          android:permission=\"android.permission.BIND_SCREENING_SERVICE\">\n *      <intent-filter>\n *          <action android:name=\"android.telecom.CallScreeningService\"/>\n *      </intent-filter>\n * </service>\n * }\n * </pre>\n * <p>\n * A CallScreeningService performs two functions:\n * <ol>\n *     <li>Call blocking/screening - the service can choose which calls will ring on the user's\n *     device, and which will be silently sent to voicemail.</li>\n *     <li>Call identification - services which provide call identification functionality can\n *     display a user-interface of their choosing which contains identifying information for a call.\n *     </li>\n * </ol>\n * <p>\n * <h2>Becoming the CallScreeningService</h2>\n * Telecom will bind to a single app chosen by the user which implements the\n * {@link CallScreeningService} API when there are new incoming and outgoing calls.\n * <p>\n * The code snippet below illustrates how your app can request that it fills the call screening\n * role.\n * <pre>\n * {@code\n * private static final int REQUEST_ID = 1;\n *\n * public void requestRole() {\n *     RoleManager roleManager = (RoleManager) getSystemService(ROLE_SERVICE);\n *     Intent intent = roleManager.createRequestRoleIntent(RoleManager.ROLE_CALL_SCREENING);\n *     startActivityForResult(intent, REQUEST_ID);\n * }\n *\n * &#64;Override\n * public void onActivityResult(int requestCode, int resultCode, Intent data) {\n *     if (requestCode == REQUEST_ID) {\n *         if (resultCode == android.app.Activity.RESULT_OK) {\n *             // Your app is now the call screening app\n *         } else {\n *             // Your app is not the call screening app\n *         }\n *     }\n * }\n * }\n * </pre>\n *\n * <h2>CallScreeningService Lifecycle</h2>\n *\n * The framework binds to the {@link CallScreeningService} implemented by the user-chosen app\n * filling the {@link android.app.role.RoleManager#ROLE_CALL_SCREENING} role when incoming calls are\n * received (prior to ringing) and when outgoing calls are placed.  The platform calls the\n * {@link #onScreenCall(Call.Details)} method to provide your service with details about the call.\n * <p>\n * For incoming calls, the {@link CallScreeningService} must call\n * {@link #respondToCall(Call.Details, CallResponse)} within 5 seconds of being bound to indicate to\n * the platform whether the call should be blocked or not.  Your app must do this even if it is\n * primarily performing caller ID operations and not screening calls.  It is important to perform\n * screening operations in a timely matter as the user's device will not begin ringing until the\n * response is received (or the timeout is hit).  A {@link CallScreeningService} may choose to\n * perform local database lookups to help determine if a call should be screened or not; care should\n * be taken to ensure the timeout is not repeatedly hit, causing delays in the incoming call flow.\n * <p>\n * If your app provides a caller ID experience, it should launch an activity to show the caller ID\n * information from {@link #onScreenCall(Call.Details)}.\n ",
  "links" : [ "android.telecom.TelecomManager#getDefaultDialerPackage()", "com.android.internal.telecom.ICallScreeningService", "android.app.role.RoleManager#ROLE_CALL_SCREENING", "#onScreenCall(Call.Details)", "#respondToCall(Call.Details" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "MSG_SCREEN_CALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallScreeningAdapter",
    "type" : "ICallScreeningAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onUnbind(Intent intent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onScreenCall(@NonNull Call.Details callDetails)",
    "returnType" : "void",
    "comment" : "\n     * Called when a new incoming or outgoing call is added.\n     * <p>\n     * A {@link CallScreeningService} must indicate whether an incoming call is allowed or not by\n     * calling\n     * {@link CallScreeningService#respondToCall(Call.Details, CallScreeningService.CallResponse)}.\n     * Your app can tell if a call is an incoming call by checking to see if\n     * {@link Call.Details#getCallDirection()} is {@link Call.Details#DIRECTION_INCOMING}.\n     * <p>\n     * <em>Note:</em> A {@link CallScreeningService} must respond to a call within 5 seconds.  After\n     * this time, the framework will unbind from the {@link CallScreeningService} and ignore its\n     * response.\n     * <p>\n     * <em>Note:</em> The {@link Call.Details} instance provided to a call screening service will\n     * only have the following properties set.  The rest of the {@link Call.Details} properties will\n     * be set to their default value or {@code null}.\n     * <ul>\n     *     <li>{@link Call.Details#getCallDirection()}</li>\n     *     <li>{@link Call.Details#getCallerNumberVerificationStatus()}</li>\n     *     <li>{@link Call.Details#getConnectTimeMillis()}</li>\n     *     <li>{@link Call.Details#getCreationTimeMillis()}</li>\n     *     <li>{@link Call.Details#getHandle()}</li>\n     * </ul>\n     * <p>\n     * Only calls where the {@link Call.Details#getHandle() handle} {@link Uri#getScheme() scheme}\n     * is {@link PhoneAccount#SCHEME_TEL} are passed for call\n     * screening.  Further, only calls which are not in the user's contacts are passed for\n     * screening, unless the {@link CallScreeningService} has been granted\n     * {@link Manifest.permission#READ_CONTACTS} permission by the user.  For outgoing calls, no\n     * post-dial digits are passed.\n     * <p>\n     * Calls with a {@link Call.Details#getHandlePresentation()} of\n     * {@link TelecomManager#PRESENTATION_RESTRICTED}, {@link TelecomManager#PRESENTATION_UNKNOWN},\n     * {@link TelecomManager#PRESENTATION_UNAVAILABLE} or\n     * {@link TelecomManager#PRESENTATION_PAYPHONE} presentation are not provided to the\n     * {@link CallScreeningService}.\n     *\n     * @param callDetails Information about a new call, see {@link Call.Details}.\n     ",
    "links" : [ "android.telecom.TelecomManager#PRESENTATION_UNAVAILABLE", "android.net.Uri#getScheme()", "Call.Details#getCallDirection()", "android.telecom.TelecomManager#PRESENTATION_PAYPHONE", "Manifest.permission#READ_CONTACTS", "Call.Details#getHandlePresentation()", "Call.Details#DIRECTION_INCOMING", "Call.Details#getCallerNumberVerificationStatus()", "android.telecom.TelecomManager#PRESENTATION_UNKNOWN", "com.android.internal.telecom.ICallScreeningService", "Call.Details#getConnectTimeMillis()", "android.telecom.TelecomManager#PRESENTATION_RESTRICTED", "Call.Details#getHandle()", "Call.Details", "Call.Details#getCreationTimeMillis()", "com.android.internal.telecom.ICallScreeningService#respondToCall(Call.Details", "android.telecom.PhoneAccount#SCHEME_TEL" ]
  }, {
    "name" : "public final void respondToCall(@NonNull Call.Details callDetails, @NonNull CallResponse response)",
    "returnType" : "void",
    "comment" : "\n     * Responds to the given incoming call, either allowing it, silencing it or disallowing it.\n     * <p>\n     * The {@link CallScreeningService} calls this method to inform the system whether the call\n     * should be silently blocked or not. In the event that it should not be blocked, it may\n     * also be requested to ring silently.\n     * <p>\n     * Calls to this method are ignored unless the {@link Call.Details#getCallDirection()} is\n     * {@link Call.Details#DIRECTION_INCOMING}.\n     * <p>\n     * For incoming calls, a {@link CallScreeningService} MUST call this method within 5 seconds of\n     * {@link #onScreenCall(Call.Details)} being invoked by the platform.\n     * <p>\n     * Calls which are blocked/rejected will be logged to the system call log with a call type of\n     * {@link android.provider.CallLog.Calls#BLOCKED_TYPE} and\n     * {@link android.provider.CallLog.Calls#BLOCK_REASON_CALL_SCREENING_SERVICE} block reason.\n     *\n     * @param callDetails The call to allow.\n     *                    <p>\n     *                    Must be the same {@link Call.Details call} which was provided to the\n     *                    {@link CallScreeningService} via {@link #onScreenCall(Call.Details)}.\n     * @param response The {@link CallScreeningService.CallResponse} which contains information\n     * about how to respond to a call.\n     ",
    "links" : [ "android.provider.CallLog.Calls#BLOCK_REASON_CALL_SCREENING_SERVICE", "CallScreeningService.CallResponse", "Call.Details#getCallDirection()", "com.android.internal.telecom.ICallScreeningService", "android.provider.CallLog.Calls#BLOCKED_TYPE", "Call.Details", "#onScreenCall(Call.Details)", "Call.Details#DIRECTION_INCOMING" ]
  } ],
  "methodNames" : [ "public IBinder onBind(Intent intent)", "public boolean onUnbind(Intent intent)", "public abstract void onScreenCall(@NonNull Call.Details callDetails)", "public final void respondToCall(@NonNull Call.Details callDetails, @NonNull CallResponse response)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "MSG_SCREEN_CALL", "mHandler", "mCallScreeningAdapter" ]
}