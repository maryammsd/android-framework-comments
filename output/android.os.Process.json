{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Process.java",
  "packageName" : "android.os",
  "className" : "Process",
  "comment" : "\n * Tools for managing OS processes.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_UID",
    "type" : "int",
    "comment" : "\n     * An invalid UID value.\n     ",
    "links" : [ ]
  }, {
    "name" : "ROOT_UID",
    "type" : "int",
    "comment" : "\n     * Defines the root UID.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID under which system code runs.\n     ",
    "links" : [ ]
  }, {
    "name" : "PHONE_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID under which the telephony code runs.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHELL_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the user shell.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOG_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the log group.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the WIFI native processes like wificond, supplicant, hostapd,\n     * vendor HAL, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the mediaserver process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DRM_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the DRM process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SDCARD_RW_GID",
    "type" : "int",
    "comment" : "\n     * Defines the GID for the group that allows write access to the internal media storage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VPN_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the group that controls VPN services.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEYSTORE_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for keystore.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREDSTORE_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for credstore.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NFC_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the NFC service process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CLAT_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the clatd process.\n     * @hide\n     * ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the Bluetooth service process.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_RW_GID",
    "type" : "int",
    "comment" : "\n     * Defines the GID for the group that allows write access to the internal media storage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_INFO_GID",
    "type" : "int",
    "comment" : "\n     * Access to installed package details\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHARED_RELRO_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the shared RELRO file updater process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIOSERVER_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the audioserver process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAMERASERVER_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the cameraserver process\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DNS_TETHER_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the tethering DNS resolver (currently dnsmasq).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WEBVIEW_ZYGOTE_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the WebView zygote process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OTA_UPDATE_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID used for resource tracking for OTA updates.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATSD_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID used for statsd\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INCIDENTD_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID used for incidentd.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SE_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the Secure Element service process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_STACK_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the NetworkStack app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FSVERITY_CERT_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for fs-verity certificate ownership in keystore.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_STORAGE_GID",
    "type" : "int",
    "comment" : "\n     * GID that gives access to USB OTG (unreliable) volumes on /mnt/media_rw/<vol name>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXT_DATA_RW_GID",
    "type" : "int",
    "comment" : "\n     * GID that gives write access to app-private data directories on external\n     * storage (used on devices without sdcardfs only).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXT_OBB_RW_GID",
    "type" : "int",
    "comment" : "\n     * GID that gives write access to app-private OBB directories on external\n     * storage (used on devices without sdcardfs only).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UWB_UID",
    "type" : "int",
    "comment" : "\n     * Defines the UID/GID for the Uwb service process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SDK_SANDBOX_VIRTUAL_UID",
    "type" : "int",
    "comment" : "\n     * Defines a virtual UID that is used to aggregate data related to SDK sandbox UIDs.\n     * {@see SdkSandboxManager}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INET_GID",
    "type" : "int",
    "comment" : "\n     * GID that corresponds to the INTERNET permission.\n     * Must match the value of AID_INET.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOBODY_UID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FIRST_APPLICATION_UID",
    "type" : "int",
    "comment" : "\n     * Defines the start of a range of UIDs (and GIDs), going from this\n     * number to {@link #LAST_APPLICATION_UID} that are reserved for assigning\n     * to applications.\n     ",
    "links" : [ "#LAST_APPLICATION_UID" ]
  }, {
    "name" : "LAST_APPLICATION_UID",
    "type" : "int",
    "comment" : "\n     * Last of application-specific UIDs starting at\n     * {@link #FIRST_APPLICATION_UID}.\n     ",
    "links" : [ "#FIRST_APPLICATION_UID" ]
  }, {
    "name" : "FIRST_SDK_SANDBOX_UID",
    "type" : "int",
    "comment" : "\n     * Defines the start of a range of UIDs going from this number to\n     * {@link #LAST_SDK_SANDBOX_UID} that are reserved for assigning to\n     * sdk sandbox processes. There is a 1-1 mapping between a sdk sandbox\n     * process UID and the app that it belongs to, which can be computed by\n     * subtracting (FIRST_SDK_SANDBOX_UID - FIRST_APPLICATION_UID) from the\n     * uid of a sdk sandbox process.\n     *\n     * Note that there are no GIDs associated with these processes; storage\n     * attribution for them will be done using project IDs.\n     * @hide\n     ",
    "links" : [ "#LAST_SDK_SANDBOX_UID" ]
  }, {
    "name" : "LAST_SDK_SANDBOX_UID",
    "type" : "int",
    "comment" : "\n     * Last UID that is used for sdk sandbox processes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_APP_ZYGOTE_ISOLATED_UID",
    "type" : "int",
    "comment" : "\n     * First uid used for fully isolated sandboxed processes spawned from an app zygote\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_UIDS_PER_APP_ZYGOTE",
    "type" : "int",
    "comment" : "\n     * Number of UIDs we allocate per application zygote\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_APP_ZYGOTE_ISOLATED_UID",
    "type" : "int",
    "comment" : "\n     * Last uid used for fully isolated sandboxed processes spawned from an app zygote\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_ISOLATED_UID",
    "type" : "int",
    "comment" : "\n     * First uid used for fully isolated sandboxed processes (with no permissions of their own)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_ISOLATED_UID",
    "type" : "int",
    "comment" : "\n     * Last uid used for fully isolated sandboxed processes (with no permissions of their own)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHARED_USER_GID",
    "type" : "int",
    "comment" : "\n     * Defines the gid shared by all applications running under the same profile.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_SHARED_APPLICATION_GID",
    "type" : "int",
    "comment" : "\n     * First gid for applications to share resources. Used when forward-locking\n     * is enabled but all UserHandles need to be able to read the resources.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_SHARED_APPLICATION_GID",
    "type" : "int",
    "comment" : "\n     * Last gid for applications to share resources. Used when forward-locking\n     * is enabled but all UserHandles need to be able to read the resources.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_APPLICATION_CACHE_GID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "LAST_APPLICATION_CACHE_GID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INVALID_PID",
    "type" : "int",
    "comment" : "\n     * An invalid PID value.\n     ",
    "links" : [ ]
  }, {
    "name" : "THREAD_PRIORITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Standard priority of application threads.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_LOWEST",
    "type" : "int",
    "comment" : "\n     * Lowest available thread priority.  Only for those who really, really\n     * don't want to run if anything else is happening.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Standard priority background threads.  This gives your thread a slightly\n     * lower than normal priority, so that it will have less chance of impacting\n     * the responsiveness of the user interface.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Standard priority of threads that are currently running a user interface\n     * that the user is interacting with.  Applications can not normally\n     * change to this priority; the system will automatically adjust your\n     * application threads as the user moves through the UI.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_DISPLAY",
    "type" : "int",
    "comment" : "\n     * Standard priority of system display threads, involved in updating\n     * the user interface.  Applications can not\n     * normally change to this priority.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_URGENT_DISPLAY",
    "type" : "int",
    "comment" : "\n     * Standard priority of the most important display threads, for compositing\n     * the screen and retrieving input events.  Applications can not normally\n     * change to this priority.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_VIDEO",
    "type" : "int",
    "comment" : "\n     * Standard priority of video threads.  Applications can not normally\n     * change to this priority.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_TOP_APP_BOOST",
    "type" : "int",
    "comment" : "\n     * Priority we boost main thread and RT of top app to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "THREAD_PRIORITY_AUDIO",
    "type" : "int",
    "comment" : "\n     * Standard priority of audio threads.  Applications can not normally\n     * change to this priority.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_URGENT_AUDIO",
    "type" : "int",
    "comment" : "\n     * Standard priority of the most important audio threads.\n     * Applications can not normally change to this priority.\n     * Use with {@link #setThreadPriority(int)} and\n     * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal\n     * {@link java.lang.Thread} class.\n     ",
    "links" : [ "#setThreadPriority(int", "#setThreadPriority(int)", "java.lang.Thread" ]
  }, {
    "name" : "THREAD_PRIORITY_MORE_FAVORABLE",
    "type" : "int",
    "comment" : "\n     * Minimum increment to make a priority more favorable.\n     ",
    "links" : [ ]
  }, {
    "name" : "THREAD_PRIORITY_LESS_FAVORABLE",
    "type" : "int",
    "comment" : "\n     * Minimum increment to make a priority less favorable.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHED_OTHER",
    "type" : "int",
    "comment" : "\n     * Default scheduling policy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHED_FIFO",
    "type" : "int",
    "comment" : "\n     * First-In First-Out scheduling policy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHED_RR",
    "type" : "int",
    "comment" : "\n     * Round-Robin scheduling policy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHED_BATCH",
    "type" : "int",
    "comment" : "\n     * Batch scheduling policy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHED_IDLE",
    "type" : "int",
    "comment" : "\n     * Idle scheduling policy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCHED_RESET_ON_FORK",
    "type" : "int",
    "comment" : "\n     * Reset scheduler choice on fork.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default thread group -\n     * has meaning with setProcessGroup() only, cannot be used with setThreadGroup().\n     * When used with setProcessGroup(), the group of each thread in the process\n     * is conditionally changed based on that thread's current priority, as follows:\n     * threads with priority numerically less than THREAD_PRIORITY_BACKGROUND\n     * are moved to foreground thread group.  All other threads are left unchanged.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Background thread group - All threads in\n     * this group are scheduled with a reduced share of the CPU.\n     * Value is same as constant SP_BACKGROUND of enum SchedPolicy.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Foreground thread group - All threads in\n     * this group are scheduled with a normal share of the CPU.\n     * Value is same as constant SP_FOREGROUND of enum SchedPolicy.\n     * Not used at this level.\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_SYSTEM",
    "type" : "int",
    "comment" : "\n     * System thread group.\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_AUDIO_APP",
    "type" : "int",
    "comment" : "\n     * Application audio thread group.\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_AUDIO_SYS",
    "type" : "int",
    "comment" : "\n     * System audio thread group.\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_TOP_APP",
    "type" : "int",
    "comment" : "\n     * Thread group for top foreground app.\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_RT_APP",
    "type" : "int",
    "comment" : "\n     * Thread group for RT app.\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "THREAD_GROUP_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Thread group for bound foreground services that should\n     * have additional CPU restrictions during screen off\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_QUIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_KILL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_USR1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStartElapsedRealtime",
    "type" : "long",
    "comment" : "\n     * When the process started and ActivityThread.handleBindApplication() was executed.\n     ",
    "links" : [ ]
  }, {
    "name" : "sStartUptimeMillis",
    "type" : "long",
    "comment" : "\n     * When the process started and ActivityThread.handleBindApplication() was executed.\n     ",
    "links" : [ ]
  }, {
    "name" : "sStartRequestedElapsedRealtime",
    "type" : "long",
    "comment" : "\n     * When the activity manager was about to ask zygote to fork.\n     ",
    "links" : [ ]
  }, {
    "name" : "sStartRequestedUptimeMillis",
    "type" : "long",
    "comment" : "\n     * When the activity manager was about to ask zygote to fork.\n     ",
    "links" : [ ]
  }, {
    "name" : "PIDFD_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PIDFD_SUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PIDFD_UNSUPPORTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPidFdSupported",
    "type" : "int",
    "comment" : "\n     * Whether or not the underlying OS supports pidfd\n     ",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_POLICY_FLAG_EMPTY",
    "type" : "int",
    "comment" : "\n     * Value used to indicate that there is no special information about an application launch.  App\n     * launches with this policy will occur through the primary or secondary Zygote with no special\n     * treatment.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE",
    "type" : "int",
    "comment" : "\n     * Flag used to indicate that an application launch is user-visible and latency sensitive.  Any\n     * launch with this policy will use a Unspecialized App Process Pool if the target Zygote\n     * supports it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_POLICY_FLAG_BATCH_LAUNCH",
    "type" : "int",
    "comment" : "\n     * Flag used to indicate that the launch is one in a series of app launches that will be\n     * performed in quick succession.  For future use.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_POLICY_FLAG_SYSTEM_PROCESS",
    "type" : "int",
    "comment" : "\n     * Flag used to indicate that the current launch event is for a system process.  All system\n     * processes are equally important, so none of them should be prioritized over the others.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ZYGOTE_PROCESS",
    "type" : "ZygoteProcess",
    "comment" : "\n     * State associated with the zygote process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sArgV0",
    "type" : "String",
    "comment" : "\n     * The process name set via {@link #setArgV0(String)}.\n     ",
    "links" : [ "#setArgV0(String)" ]
  }, {
    "name" : "sIdentity$ravenwood",
    "type" : "ThreadLocal<SomeArgs>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROC_TERM_MASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_ZERO_TERM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_SPACE_TERM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_TAB_TERM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_NEWLINE_TERM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_COMBINE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_PARENS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_QUOTES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_CHAR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_OUT_STRING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_OUT_LONG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROC_OUT_FLOAT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ProcessStartResult start(@NonNull final String processClass, @Nullable final String niceName, int uid, int gid, @Nullable int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, @Nullable String packageName, int zygotePolicyFlags, boolean isTopApp, @Nullable long[] disabledCompatChanges, @Nullable Map<String, Pair<String, Long>> pkgDataInfoMap, @Nullable Map<String, Pair<String, Long>> whitelistedDataInfoMap, boolean bindMountAppsData, boolean bindMountAppStorageDirs, boolean bindMountSystemOverrides, @Nullable String[] zygoteArgs)",
    "returnType" : "ProcessStartResult",
    "comment" : "\n     * Start a new process.\n     *\n     * <p>If processes are enabled, a new process is created and the\n     * static main() function of a <var>processClass</var> is executed there.\n     * The process will continue running after this function returns.\n     *\n     * <p>If processes are not enabled, a new thread in the caller's\n     * process is created and main() of <var>processClass</var> called there.\n     *\n     * <p>The niceName parameter, if not an empty string, is a custom name to\n     * give to the process instead of using processClass.  This allows you to\n     * make easily identifyable processes even if you are using the same base\n     * <var>processClass</var> to start them.\n     *\n     * When invokeWith is not null, the process will be started as a fresh app\n     * and not a zygote fork. Note that this is only allowed for uid 0 or when\n     * runtimeFlags contains DEBUG_ENABLE_DEBUGGER.\n     *\n     * @param processClass The class to use as the process's main entry\n     *                     point.\n     * @param niceName A more readable name to use for the process.\n     * @param uid The user-id under which the process will run.\n     * @param gid The group-id under which the process will run.\n     * @param gids Additional group-ids associated with the process.\n     * @param runtimeFlags Additional flags for the runtime.\n     * @param targetSdkVersion The target SDK version for the app.\n     * @param seInfo null-ok SELinux information for the new process.\n     * @param abi non-null the ABI this app should be started with.\n     * @param instructionSet null-ok the instruction set to use.\n     * @param appDataDir null-ok the data directory of the app.\n     * @param invokeWith null-ok the command to invoke with.\n     * @param packageName null-ok the name of the package this process belongs to.\n     * @param zygotePolicyFlags Flags used to determine how to launch the application\n     * @param isTopApp whether the process starts for high priority application.\n     * @param disabledCompatChanges null-ok list of disabled compat changes for the process being\n     *                             started.\n     * @param pkgDataInfoMap Map from related package names to private data directory\n     *                       volume UUID and inode number.\n     * @param whitelistedDataInfoMap Map from allowlisted package names to private data directory\n     *                       volume UUID and inode number.\n     * @param bindMountAppsData whether zygote needs to mount CE and DE data.\n     * @param bindMountAppStorageDirs whether zygote needs to mount Android/obb and Android/data.\n     * @param zygoteArgs Additional arguments to supply to the zygote process.\n     * @return An object that describes the result of the attempt to start the process.\n     * @throws RuntimeException on fatal start failure\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ProcessStartResult startWebView(@NonNull final String processClass, @Nullable final String niceName, int uid, int gid, @Nullable int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, @Nullable String packageName, @Nullable long[] disabledCompatChanges, @Nullable String[] zygoteArgs)",
    "returnType" : "ProcessStartResult",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native long getElapsedCpuTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns elapsed milliseconds of the time this process has run.\n     * @return  Returns the number of milliseconds this process has return.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getStartElapsedRealtime()",
    "returnType" : "long",
    "comment" : "\n     * Return the {@link SystemClock#elapsedRealtime()} at which this process was started,\n     * but before any of the application code was executed.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public static long getStartUptimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Return the {@link SystemClock#uptimeMillis()} at which this process was started,\n     * but before any of the application code was executed.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()" ]
  }, {
    "name" : "public static long getStartRequestedElapsedRealtime()",
    "returnType" : "long",
    "comment" : "\n     * Return the {@link SystemClock#elapsedRealtime()} at which the system was about to\n     * start this process. i.e. before a zygote fork.\n     *\n     * <p>More precisely, the system may start app processes before there's a start request,\n     * in order to reduce the process start up latency, in which case this is set when the system\n     * decides to \"specialize\" the process into a requested app.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public static long getStartRequestedUptimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Return the {@link SystemClock#uptimeMillis()} at which the system was about to\n     * start this process. i.e. before a zygote fork.\n     *\n     * <p>More precisely, the system may start app processes before there's a start request,\n     * in order to reduce the process start up latency, in which case this is set when the system\n     * decides to \"specialize\" the process into a requested app.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()" ]
  }, {
    "name" : "public static final void setStartTimes(long elapsedRealtime, long uptimeMillis, long startRequestedElapsedRealtime, long startRequestedUptime)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean is64Bit()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current process is a 64-bit runtime.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean is64Bit$ravenwood()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void init$ravenwood(final int uid, final int pid)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void reset$ravenwood()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final int myPid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the identifier of this process, which can be used with\n     * {@link #killProcess} and {@link #sendSignal}.\n     ",
    "links" : [ "#killProcess", "#sendSignal" ]
  }, {
    "name" : "public static final int myPid$ravenwood()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final int myPpid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the identifier of this process' parent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int myTid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the identifier of the calling thread, which be used with\n     * {@link #setThreadPriority(int, int)}.\n     ",
    "links" : [ "#setThreadPriority(int" ]
  }, {
    "name" : "public static final int myTid$ravenwood()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final int myUid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the identifier of this process's uid.  This is the kernel uid\n     * that the process is running under, which is the identity of its\n     * app-specific sandbox.  It is different from {@link #myUserHandle} in that\n     * a uid identifies a specific app sandbox in a specific user.\n     ",
    "links" : [ "#myUserHandle" ]
  }, {
    "name" : "public static final int myUid$ravenwood()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static UserHandle myUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "\n     * Returns this process's user handle.  This is the\n     * user the process is running under.  It is distinct from\n     * {@link #myUid()} in that a particular user will have multiple\n     * distinct apps running under it each with their own uid.\n     ",
    "links" : [ "#myUid()" ]
  }, {
    "name" : "public static boolean isCoreUid(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given uid belongs to a system core component or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isApplicationUid(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given uid belongs to an application.\n     * @param uid A kernel uid.\n     * @return Whether the uid corresponds to an application sandbox running in\n     *     a specific user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isIsolated()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current process is in an isolated sandbox.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isIsolated(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #isIsolatedUid(int)} instead.\n     * {@hide}\n     ",
    "links" : [ "#isIsolatedUid(int)" ]
  }, {
    "name" : "public static final boolean isIsolatedUid(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the process with the given {@code uid} is an isolated sandbox.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isSdkSandboxUid(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provided UID belongs to an  sdk sandbox process\n     * @see android.app.sdksandbox.SdkSandboxManager\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getAppUidForSdkSandboxUid(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the app uid corresponding to an sdk sandbox uid.\n     * @see android.app.sdksandbox.SdkSandboxManager\n     *\n     * @param uid the sdk sandbox uid\n     * @return the app uid for the given sdk sandbox uid\n     *\n     * @throws IllegalArgumentException if input is not an sdk sandbox uid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int toSdkSandboxUid(int uid)",
    "returnType" : "int",
    "comment" : "\n     *\n     * Returns the sdk sandbox process corresponding to an app process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getSdkSandboxUidForAppUid(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the sdk sandbox uid corresponding to an app uid.\n     * @see android.app.sdksandbox.SdkSandboxManager\n     *\n     * @param uid the app uid\n     * @return the sdk sandbox uid for the given app uid\n     *\n     * @throws IllegalArgumentException if input is not an app uid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isSdkSandbox()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current process is a sdk sandbox process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getUidForName(String name)",
    "returnType" : "int",
    "comment" : "\n     * Returns the UID assigned to a particular user name, or -1 if there is\n     * none.  If the given string consists of only numbers, it is converted\n     * directly to a uid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getGidForName(String name)",
    "returnType" : "int",
    "comment" : "\n     * Returns the GID assigned to a particular user name, or -1 if there is\n     * none.  If the given string consists of only numbers, it is converted\n     * directly to a gid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getUidForPid(int pid)",
    "returnType" : "int",
    "comment" : "\n     * Returns a uid for a currently running process.\n     * @param pid the process id\n     * @return the uid of the process, or -1 if the process is not running.\n     * @hide pending API council review\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getParentPid(int pid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the parent process id for a currently running process.\n     * @param pid the process id\n     * @return the parent process id of the process, or -1 if the process is not running.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getThreadGroupLeader(int tid)",
    "returnType" : "int",
    "comment" : "\n     * Returns the thread group leader id for a currently running thread.\n     * @param tid the thread id\n     * @return the thread group leader id of the thread, or -1 if the thread is not running.\n     *         This is same as what getpid(2) would return if called by tid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setThreadPriority(int tid, @IntRange(from = -20, to = THREAD_PRIORITY_LOWEST) int priority) throws IllegalArgumentException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set the priority of a thread, based on Linux priorities.\n     *\n     * @param tid The identifier of the thread/process to change.\n     * @param priority A Linux priority level, from -20 for highest scheduling\n     * priority to 19 for lowest scheduling priority.\n     *\n     * @throws IllegalArgumentException Throws IllegalArgumentException if\n     * <var>tid</var> does not exist.\n     * @throws SecurityException Throws SecurityException if your process does\n     * not have permission to modify the given thread, or to use the given\n     * priority.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void setThreadPriority$ravenwood(int tid, int priority)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setCanSelfBackground(boolean backgroundOk)",
    "returnType" : "void",
    "comment" : "\n     * Call with 'false' to cause future calls to {@link #setThreadPriority(int)} to\n     * throw an exception if passed a background-level thread priority.  This is only\n     * effective if the JNI layer is built with GUARD_THREAD_PRIORITY defined to 1.\n     *\n     * @hide\n     ",
    "links" : [ "#setThreadPriority(int)" ]
  }, {
    "name" : "public static final void setCanSelfBackground$ravenwood(boolean backgroundOk)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setThreadGroup(int tid, int group) throws IllegalArgumentException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Sets the scheduling group for a thread.\n     * @hide\n     * @param tid The identifier of the thread to change.\n     * @param group The target group for this thread from THREAD_GROUP_*.\n     *\n     * @throws IllegalArgumentException Throws IllegalArgumentException if\n     * <var>tid</var> does not exist.\n     * @throws SecurityException Throws SecurityException if your process does\n     * not have permission to modify the given thread, or to use the given\n     * priority.\n     * If the thread is a thread group leader, that is it's gettid() == getpid(),\n     * then the other threads in the same thread group are _not_ affected.\n     *\n     * Does not set cpuset for some historical reason, just calls\n     * libcutils::set_sched_policy().\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setThreadGroupAndCpuset(int tid, int group) throws IllegalArgumentException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Sets the scheduling group and the corresponding cpuset group\n     * @hide\n     * @param tid The identifier of the thread to change.\n     * @param group The target group for this thread from THREAD_GROUP_*.\n     *\n     * @throws IllegalArgumentException Throws IllegalArgumentException if\n     * <var>tid</var> does not exist.\n     * @throws SecurityException Throws SecurityException if your process does\n     * not have permission to modify the given thread, or to use the given\n     * priority.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setProcessGroup(int pid, int group) throws IllegalArgumentException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Sets the scheduling group for a process and all child threads\n     * @hide\n     * @param pid The identifier of the process to change.\n     * @param group The target group for this process from THREAD_GROUP_*.\n     *\n     * @throws IllegalArgumentException Throws IllegalArgumentException if\n     * <var>tid</var> does not exist.\n     * @throws SecurityException Throws SecurityException if your process does\n     * not have permission to modify the given thread, or to use the given\n     * priority.\n     *\n     * group == THREAD_GROUP_DEFAULT means to move all non-background priority\n     * threads to the foreground scheduling group, but to leave background\n     * priority threads alone.  group == THREAD_GROUP_BACKGROUND moves all\n     * threads, regardless of priority, to the background scheduling group.\n     * group == THREAD_GROUP_FOREGROUND is not allowed.\n     *\n     * Always sets cpusets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setProcessFrozen(int pid, int uid, boolean frozen)",
    "returnType" : "void",
    "comment" : "\n     * Freeze or unfreeze the specified process.\n     *\n     * @param pid Identifier of the process to freeze or unfreeze.\n     * @param uid Identifier of the user the process is running under.\n     * @param frozen Specify whether to free (true) or unfreeze (false).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getProcessGroup(int pid) throws IllegalArgumentException, SecurityException",
    "returnType" : "int",
    "comment" : "\n     * Return the scheduling group of requested process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int createProcessGroup(int uid, int pid)",
    "returnType" : "int",
    "comment" : "\n     *\n     * Create a new process group in the cgroup uid/pid hierarchy\n     *\n     * @return <0 in case of error\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int[] getExclusiveCores()",
    "returnType" : "int[]",
    "comment" : "\n     * On some devices, the foreground process may have one or more CPU\n     * cores exclusively reserved for it. This method can be used to\n     * retrieve which cores that are (if any), so the calling process\n     * can then use sched_setaffinity() to lock a thread to these cores.\n     * Note that the calling process must currently be running in the\n     * foreground for this method to return any cores.\n     *\n     * The CPU core(s) exclusively reserved for the foreground process will\n     * stay reserved for as long as the process stays in the foreground.\n     *\n     * As soon as a process leaves the foreground, those CPU cores will\n     * no longer be reserved for it, and will most likely be reserved for\n     * the new foreground process. It's not necessary to change the affinity\n     * of your process when it leaves the foreground (if you had previously\n     * set it to use a reserved core); the OS will automatically take care\n     * of resetting the affinity at that point.\n     *\n     * @return an array of integers, indicating the CPU cores exclusively\n     * reserved for this process. The array will have length zero if no\n     * CPU cores are exclusively reserved for this process at this point\n     * in time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void setThreadPriority(@IntRange(from = -20, to = THREAD_PRIORITY_LOWEST) int priority) throws IllegalArgumentException, SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set the priority of the calling thread, based on Linux priorities.  See\n     * {@link #setThreadPriority(int, int)} for more information.\n     *\n     * @param priority A Linux priority level, from -20 for highest scheduling\n     * priority to 19 for lowest scheduling priority.\n     *\n     * @throws IllegalArgumentException Throws IllegalArgumentException if\n     * <var>tid</var> does not exist.\n     * @throws SecurityException Throws SecurityException if your process does\n     * not have permission to modify the given thread, or to use the given\n     * priority.\n     *\n     * @see #setThreadPriority(int, int)\n     ",
    "links" : [ "#setThreadPriority(int" ]
  }, {
    "name" : "public static final void setThreadPriority$ravenwood(int priority)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getThreadPriority(int tid) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "\n     * Return the current priority of a thread, based on Linux priorities.\n     *\n     * @param tid The identifier of the thread/process. If tid equals zero, the priority of the\n     * calling process/thread will be returned.\n     *\n     * @return Returns the current priority, as a Linux priority level,\n     * from -20 for highest scheduling priority to 19 for lowest scheduling\n     * priority.\n     *\n     * @throws IllegalArgumentException Throws IllegalArgumentException if\n     * <var>tid</var> does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getThreadPriority$ravenwood(int tid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native int getThreadScheduler(int tid) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final native void setThreadScheduler(int tid, int policy, int priority) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final boolean supportsProcesses()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether the current environment supports multiple processes.\n     *\n     * @return Returns true if the system can run in multiple processes, else\n     * false if everything is running in a single process.\n     *\n     * @deprecated This method always returns true.  Do not use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean setSwappiness(int pid, boolean is_increased)",
    "returnType" : "boolean",
    "comment" : "\n     * Adjust the swappiness level for a process.\n     *\n     * @param pid The process identifier to set.\n     * @param is_increased Whether swappiness should be increased or default.\n     *\n     * @return Returns true if the underlying system supports this\n     *         feature, else false.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setArgV0(@NonNull String text)",
    "returnType" : "void",
    "comment" : "\n     * Change this process's argv[0] parameter.  This can be useful to show\n     * more descriptive information in things like the 'ps' command.\n     *\n     * @param text The new name of this process.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void setArgV0Native(String text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String myProcessName()",
    "returnType" : "String",
    "comment" : "\n     * Return the name of this process. By default, the process name is the same as the app's\n     * package name, but this can be changed using {@code android:process}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void killProcess(int pid)",
    "returnType" : "void",
    "comment" : "\n     * Kill the process with the given PID.\n     * Note that, though this API allows us to request to\n     * kill any process based on its PID, the kernel will\n     * still impose standard restrictions on which PIDs you\n     * are actually able to kill.  Typically this means only\n     * the process running the caller's packages/application\n     * and any additional processes created by that app; packages\n     * sharing a common UID will also be able to kill each\n     * other's processes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void checkTid(int tgid, int tid) throws IllegalArgumentException, SecurityException, NoSuchElementException",
    "returnType" : "void",
    "comment" : "\n     * Check the tgid and tid pair to see if the tid still exists and belong to the tgid.\n     *\n     * TOCTOU warning: the status of the tid can change at the time this method returns. This should\n     * be used in very rare cases such as checking if a (tid, tgid) pair that is known to exist\n     * recently no longer exists now. As the possibility of the same tid to be reused under the same\n     * tgid during a short window is rare. And even if it happens the caller logic should be robust\n     * to handle it without error.\n     *\n     * @throws IllegalArgumentException if tgid or tid is not positive.\n     * @throws SecurityException if the caller doesn't have the permission, this method is expected\n     *                           to be used by system process with {@link #SYSTEM_UID} because it\n     *                           internally uses tkill(2).\n     * @throws NoSuchElementException if the Linux process with pid as the tid has exited or it\n     *                                doesn't belong to the tgid.\n     * @hide\n     ",
    "links" : [ "#SYSTEM_UID" ]
  }, {
    "name" : "public static final void checkPid(int pid) throws IllegalArgumentException, SecurityException, NoSuchElementException",
    "returnType" : "void",
    "comment" : "\n     * Check if the pid still exists.\n     *\n     * TOCTOU warning: the status of the pid can change at the time this method returns. This should\n     * be used in very rare cases such as checking if a pid that belongs to an isolated process of a\n     * uid known to exist recently no longer exists now. As the possibility of the same pid to be\n     * reused again under the same uid during a short window is rare. And even if it happens the\n     * caller logic should be robust to handle it without error.\n     *\n     * @throws IllegalArgumentException if pid is not positive.\n     * @throws SecurityException if the caller doesn't have the permission, this method is expected\n     *                           to be used by system process with {@link #SYSTEM_UID} because it\n     *                           internally uses kill(2).\n     * @throws NoSuchElementException if the Linux process with the pid has exited.\n     * @hide\n     ",
    "links" : [ "#SYSTEM_UID" ]
  }, {
    "name" : "public static final native int setUid(int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native int setGid(int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native void sendSignal(int pid, int signal)",
    "returnType" : "void",
    "comment" : "\n     * Send a signal to the given process.\n     *\n     * @param pid The pid of the target process.\n     * @param signal The signal to send.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void sendSignalThrows(int pid, int signal) throws IllegalArgumentException, SecurityException, NoSuchElementException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void sendTgSignalThrows(int pid, int tgid, int signal) throws IllegalArgumentException, SecurityException, NoSuchElementException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void killProcessQuiet(int pid)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Private impl for avoiding a log message...  DO NOT USE without doing\n     * your own log, or the Android Illuminati will find you some night and\n     * beat you up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void sendSignalQuiet(int pid, int signal)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Private impl for avoiding a log message...  DO NOT USE without doing\n     * your own log, or the Android Illuminati will find you some night and\n     * beat you up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final long getAdvertisedMem()",
    "returnType" : "long",
    "comment" : "\n     * @return The advertised memory of the system, as the end user would encounter in a retail\n     * display environment. If the advertised memory is not defined, it returns\n     * {@code getTotalMemory()} rounded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native long getFreeMemory()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native long getTotalMemory()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native void readProcLines(String path, String[] reqFields, long[] outSizes)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native int[] getPids(String path, int[] lastArray)",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean readProcFile(String file, int[] format, String[] outStrings, long[] outLongs, float[] outFloats)",
    "returnType" : "boolean",
    "comment" : "\n     * Read and parse a {@code proc} file in the given format.\n     *\n     * <p>The format is a list of integers, where every integer describes a variable in the file. It\n     * specifies how the variable is syntactically terminated (e.g. {@link Process#PROC_SPACE_TERM},\n     * {@link Process#PROC_TAB_TERM}, {@link Process#PROC_ZERO_TERM}, {@link\n     * Process#PROC_NEWLINE_TERM}).\n     *\n     * <p>If the variable should be parsed and returned to the caller, the termination type should\n     * be binary OR'd with the type of output (e.g. {@link Process#PROC_OUT_STRING}, {@link\n     * Process#PROC_OUT_LONG}, {@link Process#PROC_OUT_FLOAT}.\n     *\n     * <p>If the variable is wrapped in quotation marks it should be binary OR'd with {@link\n     * Process#PROC_QUOTES}. If the variable is wrapped in parentheses it should be binary OR'd with\n     * {@link Process#PROC_PARENS}.\n     *\n     * <p>If the variable is not formatted as a string and should be cast directly from characters\n     * to a long, the {@link Process#PROC_CHAR} integer should be binary OR'd.\n     *\n     * <p>If the terminating character can be repeated, the {@link Process#PROC_COMBINE} integer\n     * should be binary OR'd.\n     *\n     * @param file the path of the {@code proc} file to read\n     * @param format the format of the file\n     * @param outStrings the parsed {@code String}s from the file\n     * @param outLongs the parsed {@code long}s from the file\n     * @param outFloats the parsed {@code float}s from the file\n     * @hide\n     ",
    "links" : [ "android.os.Process#PROC_TAB_TERM", "android.os.Process#PROC_CHAR", "android.os.Process#PROC_SPACE_TERM", "android.os.Process#PROC_COMBINE", "android.os.Process#PROC_OUT_STRING", "android.os.Process#PROC_ZERO_TERM", "android.os.Process#PROC_OUT_FLOAT", "android.os.Process#PROC_OUT_LONG", "android.os.Process#PROC_QUOTES", "android.os.Process#PROC_PARENS", "android.os.Process#PROC_NEWLINE_TERM" ]
  }, {
    "name" : "public static final native boolean parseProcLine(byte[] buffer, int startIndex, int endIndex, int[] format, String[] outStrings, long[] outLongs, float[] outFloats)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native int[] getPidsForCommands(String[] cmds)",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static final native long getPss(int pid)",
    "returnType" : "long",
    "comment" : "\n     * Gets the total Pss value for a given process, in bytes.\n     *\n     * @param pid the process to the Pss for\n     * @return the total Pss value for the given process in bytes,\n     *  or -1 if the value cannot be determined\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native long[] getRss(int pid)",
    "returnType" : "long[]",
    "comment" : "\n     * Gets the total Rss value for a given process, in bytes.\n     *\n     * @param pid the process to the Rss for\n     * @return an ordered array containing multiple values, they are:\n     *  [total_rss, file, anon, swap, shmem].\n     *  or NULL if the value cannot be determined\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native int killProcessGroup(int uid, int pid)",
    "returnType" : "int",
    "comment" : "\n     * Kill all processes in a process group started for the given\n     * pid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native boolean sendSignalToProcessGroup(int uid, int pid, int signal)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a signal to all processes in a group under the given PID, but do not wait for the\n     * processes to be fully cleaned up, or for the cgroup to be removed before returning.\n     * Callers should also ensure that killProcessGroup is called later to ensure the cgroup is\n     * fully removed, otherwise system resources may leak.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final native void freezeCgroupUid(int uid, boolean freeze)",
    "returnType" : "void",
    "comment" : "\n      * Freeze the cgroup for the given UID.\n      * This cgroup may contain child cgroups which will also be frozen. If this cgroup or its\n      * children contain processes with Binder interfaces, those interfaces should be frozen before\n      * the cgroup to avoid blocking synchronous callers indefinitely.\n      *\n      * @param uid The UID to be frozen\n      * @param freeze true = freeze; false = unfreeze\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "public static final native void removeAllProcessGroups()",
    "returnType" : "void",
    "comment" : "\n     * Remove all process groups.  Expected to be called when ActivityManager\n     * is restarted.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean isThreadInProcess(int tid, int pid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check to see if a thread belongs to a given process. This may require\n     * more permissions than apps generally have.\n     * @return true if this thread belongs to a process\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void waitForProcessDeath(int pid, int timeout) throws InterruptedException, TimeoutException",
    "returnType" : "void",
    "comment" : "\n     * Wait for the death of the given process.\n     *\n     * @param pid The process ID to be waited on\n     * @param timeout The maximum time to wait in milliseconds, or -1 to wait forever\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean supportsPidFd()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether the system supports pidfd APIs\n     *\n     * @return Returns true if the system supports pidfd APIs\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static FileDescriptor openPidFd(int pid, int flags) throws IOException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Open process file descriptor for given pid.\n     *\n     * @param pid The process ID to open for\n     * @param flags Reserved, unused now, must be 0\n     * @return The process file descriptor for given pid\n     * @throws IOException if it can't be opened\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int nativePidFdOpen(int pid, int flags) throws ErrnoException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ProcessStartResult start(@NonNull final String processClass, @Nullable final String niceName, int uid, int gid, @Nullable int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, @Nullable String packageName, int zygotePolicyFlags, boolean isTopApp, @Nullable long[] disabledCompatChanges, @Nullable Map<String, Pair<String, Long>> pkgDataInfoMap, @Nullable Map<String, Pair<String, Long>> whitelistedDataInfoMap, boolean bindMountAppsData, boolean bindMountAppStorageDirs, boolean bindMountSystemOverrides, @Nullable String[] zygoteArgs)", "public static ProcessStartResult startWebView(@NonNull final String processClass, @Nullable final String niceName, int uid, int gid, @Nullable int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, @Nullable String seInfo, @NonNull String abi, @Nullable String instructionSet, @Nullable String appDataDir, @Nullable String invokeWith, @Nullable String packageName, @Nullable long[] disabledCompatChanges, @Nullable String[] zygoteArgs)", "public static final native long getElapsedCpuTime()", "public static long getStartElapsedRealtime()", "public static long getStartUptimeMillis()", "public static long getStartRequestedElapsedRealtime()", "public static long getStartRequestedUptimeMillis()", "public static final void setStartTimes(long elapsedRealtime, long uptimeMillis, long startRequestedElapsedRealtime, long startRequestedUptime)", "public static final boolean is64Bit()", "public static final boolean is64Bit$ravenwood()", "public static void init$ravenwood(final int uid, final int pid)", "public static void reset$ravenwood()", "public static final int myPid()", "public static final int myPid$ravenwood()", "public static final int myPpid()", "public static final int myTid()", "public static final int myTid$ravenwood()", "public static final int myUid()", "public static final int myUid$ravenwood()", "public static UserHandle myUserHandle()", "public static boolean isCoreUid(int uid)", "public static boolean isApplicationUid(int uid)", "public static final boolean isIsolated()", "public static final boolean isIsolated(int uid)", "public static final boolean isIsolatedUid(int uid)", "public static final boolean isSdkSandboxUid(int uid)", "public static final int getAppUidForSdkSandboxUid(int uid)", "public static final int toSdkSandboxUid(int uid)", "public static final int getSdkSandboxUidForAppUid(int uid)", "public static final boolean isSdkSandbox()", "public static final native int getUidForName(String name)", "public static final native int getGidForName(String name)", "public static final int getUidForPid(int pid)", "public static final int getParentPid(int pid)", "public static final int getThreadGroupLeader(int tid)", "public static final native void setThreadPriority(int tid, @IntRange(from = -20, to = THREAD_PRIORITY_LOWEST) int priority) throws IllegalArgumentException, SecurityException", "public static final void setThreadPriority$ravenwood(int tid, int priority)", "public static final native void setCanSelfBackground(boolean backgroundOk)", "public static final void setCanSelfBackground$ravenwood(boolean backgroundOk)", "public static final native void setThreadGroup(int tid, int group) throws IllegalArgumentException, SecurityException", "public static final native void setThreadGroupAndCpuset(int tid, int group) throws IllegalArgumentException, SecurityException", "public static final native void setProcessGroup(int pid, int group) throws IllegalArgumentException, SecurityException", "public static final native void setProcessFrozen(int pid, int uid, boolean frozen)", "public static final native int getProcessGroup(int pid) throws IllegalArgumentException, SecurityException", "public static final native int createProcessGroup(int uid, int pid)", "public static final native int[] getExclusiveCores()", "public static final native void setThreadPriority(@IntRange(from = -20, to = THREAD_PRIORITY_LOWEST) int priority) throws IllegalArgumentException, SecurityException", "public static final void setThreadPriority$ravenwood(int priority)", "public static final native int getThreadPriority(int tid) throws IllegalArgumentException", "public static final int getThreadPriority$ravenwood(int tid)", "public static final native int getThreadScheduler(int tid) throws IllegalArgumentException", "public static final native void setThreadScheduler(int tid, int policy, int priority) throws IllegalArgumentException", "public static final boolean supportsProcesses()", "public static final native boolean setSwappiness(int pid, boolean is_increased)", "public static void setArgV0(@NonNull String text)", "private static native void setArgV0Native(String text)", "public static String myProcessName()", "public static final void killProcess(int pid)", "public static final void checkTid(int tgid, int tid) throws IllegalArgumentException, SecurityException, NoSuchElementException", "public static final void checkPid(int pid) throws IllegalArgumentException, SecurityException, NoSuchElementException", "public static final native int setUid(int uid)", "public static final native int setGid(int uid)", "public static final native void sendSignal(int pid, int signal)", "private static native void sendSignalThrows(int pid, int signal) throws IllegalArgumentException, SecurityException, NoSuchElementException", "private static native void sendTgSignalThrows(int pid, int tgid, int signal) throws IllegalArgumentException, SecurityException, NoSuchElementException", "public static final void killProcessQuiet(int pid)", "public static final native void sendSignalQuiet(int pid, int signal)", "public static final long getAdvertisedMem()", "public static final native long getFreeMemory()", "public static final native long getTotalMemory()", "public static final native void readProcLines(String path, String[] reqFields, long[] outSizes)", "public static final native int[] getPids(String path, int[] lastArray)", "public static final native boolean readProcFile(String file, int[] format, String[] outStrings, long[] outLongs, float[] outFloats)", "public static final native boolean parseProcLine(byte[] buffer, int startIndex, int endIndex, int[] format, String[] outStrings, long[] outLongs, float[] outFloats)", "public static final native int[] getPidsForCommands(String[] cmds)", "public static final native long getPss(int pid)", "public static final native long[] getRss(int pid)", "public static final native int killProcessGroup(int uid, int pid)", "public static final native boolean sendSignalToProcessGroup(int uid, int pid, int signal)", "public static final native void freezeCgroupUid(int uid, boolean freeze)", "public static final native void removeAllProcessGroups()", "public static final boolean isThreadInProcess(int tid, int pid)", "public static void waitForProcessDeath(int pid, int timeout) throws InterruptedException, TimeoutException", "public static boolean supportsPidFd()", "public static FileDescriptor openPidFd(int pid, int flags) throws IOException", "private static native int nativePidFdOpen(int pid, int flags) throws ErrnoException" ],
  "variableNames" : [ "LOG_TAG", "INVALID_UID", "ROOT_UID", "SYSTEM_UID", "PHONE_UID", "SHELL_UID", "LOG_UID", "WIFI_UID", "MEDIA_UID", "DRM_UID", "SDCARD_RW_GID", "VPN_UID", "KEYSTORE_UID", "CREDSTORE_UID", "NFC_UID", "CLAT_UID", "BLUETOOTH_UID", "MEDIA_RW_GID", "PACKAGE_INFO_GID", "SHARED_RELRO_UID", "AUDIOSERVER_UID", "CAMERASERVER_UID", "DNS_TETHER_UID", "WEBVIEW_ZYGOTE_UID", "OTA_UPDATE_UID", "STATSD_UID", "INCIDENTD_UID", "SE_UID", "NETWORK_STACK_UID", "FSVERITY_CERT_UID", "EXTERNAL_STORAGE_GID", "EXT_DATA_RW_GID", "EXT_OBB_RW_GID", "UWB_UID", "SDK_SANDBOX_VIRTUAL_UID", "INET_GID", "NOBODY_UID", "FIRST_APPLICATION_UID", "LAST_APPLICATION_UID", "FIRST_SDK_SANDBOX_UID", "LAST_SDK_SANDBOX_UID", "FIRST_APP_ZYGOTE_ISOLATED_UID", "NUM_UIDS_PER_APP_ZYGOTE", "LAST_APP_ZYGOTE_ISOLATED_UID", "FIRST_ISOLATED_UID", "LAST_ISOLATED_UID", "SHARED_USER_GID", "FIRST_SHARED_APPLICATION_GID", "LAST_SHARED_APPLICATION_GID", "FIRST_APPLICATION_CACHE_GID", "LAST_APPLICATION_CACHE_GID", "INVALID_PID", "THREAD_PRIORITY_DEFAULT", "THREAD_PRIORITY_LOWEST", "THREAD_PRIORITY_BACKGROUND", "THREAD_PRIORITY_FOREGROUND", "THREAD_PRIORITY_DISPLAY", "THREAD_PRIORITY_URGENT_DISPLAY", "THREAD_PRIORITY_VIDEO", "THREAD_PRIORITY_TOP_APP_BOOST", "THREAD_PRIORITY_AUDIO", "THREAD_PRIORITY_URGENT_AUDIO", "THREAD_PRIORITY_MORE_FAVORABLE", "THREAD_PRIORITY_LESS_FAVORABLE", "SCHED_OTHER", "SCHED_FIFO", "SCHED_RR", "SCHED_BATCH", "SCHED_IDLE", "SCHED_RESET_ON_FORK", "THREAD_GROUP_DEFAULT", "THREAD_GROUP_BACKGROUND", "THREAD_GROUP_FOREGROUND", "THREAD_GROUP_SYSTEM", "THREAD_GROUP_AUDIO_APP", "THREAD_GROUP_AUDIO_SYS", "THREAD_GROUP_TOP_APP", "THREAD_GROUP_RT_APP", "THREAD_GROUP_RESTRICTED", "SIGNAL_DEFAULT", "SIGNAL_QUIT", "SIGNAL_KILL", "SIGNAL_USR1", "sStartElapsedRealtime", "sStartUptimeMillis", "sStartRequestedElapsedRealtime", "sStartRequestedUptimeMillis", "PIDFD_UNKNOWN", "PIDFD_SUPPORTED", "PIDFD_UNSUPPORTED", "sPidFdSupported", "ZYGOTE_POLICY_FLAG_EMPTY", "ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE", "ZYGOTE_POLICY_FLAG_BATCH_LAUNCH", "ZYGOTE_POLICY_FLAG_SYSTEM_PROCESS", "ZYGOTE_PROCESS", "sArgV0", "sIdentity$ravenwood", "PROC_TERM_MASK", "PROC_ZERO_TERM", "PROC_SPACE_TERM", "PROC_TAB_TERM", "PROC_NEWLINE_TERM", "PROC_COMBINE", "PROC_PARENS", "PROC_QUOTES", "PROC_CHAR", "PROC_OUT_STRING", "PROC_OUT_LONG", "PROC_OUT_FLOAT" ]
}