{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Picture.java",
  "packageName" : "android.graphics",
  "className" : "Picture",
  "comment" : "\n * A Picture records drawing calls (via the canvas returned by beginRecording)\n * and can then play them back into Canvas (via {@link Picture#draw(Canvas)} or\n * {@link Canvas#drawPicture(Picture)}).For most content (e.g. text, lines, rectangles),\n * drawing a sequence from a picture can be faster than the equivalent API\n * calls, since the picture performs its playback without incurring any\n * method-call overhead.\n *\n * <p class=\"note\"><strong>Note:</strong> Prior to API level 23 a picture cannot\n * be replayed on a hardware accelerated canvas.</p>\n ",
  "variables" : [ {
    "name" : "mRecordingCanvas",
    "type" : "PictureCanvas",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePicture",
    "type" : "long",
    "comment" : " TODO: Figure out if this was a false-positive",
    "links" : [ ]
  }, {
    "name" : "mRequiresHwAcceleration",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WORKING_STREAM_STORAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Immediately releases the backing data of the Picture. This object will no longer\n     * be usable after calling this, and any further calls on the Picture will throw an\n     * IllegalStateException.\n     * // TODO: Support?\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyValid()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Canvas beginRecording(int width, int height)",
    "returnType" : "Canvas",
    "comment" : "\n     * To record a picture, call beginRecording() and then draw into the Canvas\n     * that is returned. Nothing we appear on screen, but all of the draw\n     * commands (e.g. {@link Canvas#drawRect(Rect, Paint)}) will be recorded.\n     * To stop recording, call endRecording(). After endRecording() the Canvas\n     * that was returned must no longer be used, and nothing should be drawn\n     * into it.\n     ",
    "links" : [ "android.graphics.Canvas#drawRect(Rect" ]
  }, {
    "name" : "public void endRecording()",
    "returnType" : "void",
    "comment" : "\n     * Call endRecording when the picture is built. After this call, the picture\n     * may be drawn, but the canvas that was returned by beginRecording must not\n     * be used anymore. This is automatically called if {@link Picture#draw}\n     * or {@link Canvas#drawPicture(Picture)} is called.\n     ",
    "links" : [ "android.graphics.Picture#draw", "android.graphics.Canvas#drawPicture(Picture)" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Get the width of the picture as passed to beginRecording. This\n     * does not reflect (per se) the content of the picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Get the height of the picture as passed to beginRecording. This\n     * does not reflect (per se) the content of the picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requiresHardwareAcceleration()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether or not this Picture contains recorded commands that only work when\n     * drawn to a hardware-accelerated canvas. If this returns true then this Picture can only\n     * be drawn to another Picture or to a Canvas where canvas.isHardwareAccelerated() is true.\n     *\n     * Note this value is only updated after recording has finished by a call to\n     * {@link #endRecording()}. Prior to that it will be the default value of false.\n     *\n     * @return true if the Picture can only be drawn to a hardware-accelerated canvas,\n     *         false otherwise.\n     ",
    "links" : [ "#endRecording()" ]
  }, {
    "name" : "public void draw(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draw this picture on the canvas.\n     * <p>\n     * Prior to {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this call could\n     * have the side effect of changing the matrix and clip of the canvas\n     * if this picture had imbalanced saves/restores.\n     *\n     * <p>\n     * <strong>Note:</strong> This forces the picture to internally call\n     * {@link Picture#endRecording()} in order to prepare for playback.\n     *\n     * @param canvas  The picture is drawn to this canvas\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP", "android.graphics.Picture#endRecording()" ]
  }, {
    "name" : "public static Picture createFromStream(@NonNull InputStream stream)",
    "returnType" : "Picture",
    "comment" : "\n     * Create a new picture (already recorded) from the data in the stream. This\n     * data was generated by a previous call to writeToStream(). Pictures that\n     * have been persisted across device restarts are not guaranteed to decode\n     * properly and are highly discouraged.\n     *\n     * @see #writeToStream(java.io.OutputStream)\n     * @removed\n     * @deprecated The recommended alternative is to not use writeToStream and\n     * instead draw the picture into a Bitmap from which you can persist it as\n     * raw or compressed pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToStream(@NonNull OutputStream stream)",
    "returnType" : "void",
    "comment" : "\n     * Write the picture contents to a stream. The data can be used to recreate\n     * the picture in this or another process by calling createFromStream(...)\n     * The resulting stream is NOT to be persisted across device restarts as\n     * there is no guarantee that the Picture can be successfully reconstructed.\n     *\n     * @see #createFromStream(java.io.InputStream)\n     * @removed\n     * @deprecated The recommended alternative is to draw the picture into a\n     * Bitmap from which you can persist it as raw or compressed pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeConstructor(long nativeSrcOr0)",
    "returnType" : "long",
    "comment" : " return empty picture if src is 0, or a copy of the native src",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromStream(InputStream stream, byte[] storage)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetWidth(long nativePicture)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetHeight(long nativePicture)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeBeginRecording(long nativeCanvas, int w, int h)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeEndRecording(long nativeCanvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDraw(long nativeCanvas, long nativePicture)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeWriteToStream(long nativePicture, OutputStream stream, byte[] storage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestructor(long nativePicture)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRecordingCanvas", "mNativePicture", "mRequiresHwAcceleration", "WORKING_STREAM_STORAGE" ],
  "methodNames" : [ "public void close()", "protected void finalize() throws Throwable", "private void verifyValid()", "public Canvas beginRecording(int width, int height)", "public void endRecording()", "public int getWidth()", "public int getHeight()", "public boolean requiresHardwareAcceleration()", "public void draw(@NonNull Canvas canvas)", "public static Picture createFromStream(@NonNull InputStream stream)", "public void writeToStream(@NonNull OutputStream stream)", "private static native long nativeConstructor(long nativeSrcOr0)", "private static native long nativeCreateFromStream(InputStream stream, byte[] storage)", "private static native int nativeGetWidth(long nativePicture)", "private static native int nativeGetHeight(long nativePicture)", "private static native long nativeBeginRecording(long nativeCanvas, int w, int h)", "private static native void nativeEndRecording(long nativeCanvas)", "private static native void nativeDraw(long nativeCanvas, long nativePicture)", "private static native boolean nativeWriteToStream(long nativePicture, OutputStream stream, byte[] storage)", "private static native void nativeDestructor(long nativePicture)" ]
}