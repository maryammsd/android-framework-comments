{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/usb/UsbPortStatus.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbPortStatus",
  "comment" : "\n * Describes the status of a USB port.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mCurrentMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentPowerRole",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentDataRole",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedRoleCombinations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContaminantProtectionStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContaminantDetectionStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_NONE",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port does not have a power role.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_SOURCE",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port can act as a source (provide power).\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_SINK",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port can act as a sink (receive power).\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ROLE_NONE",
    "type" : "int",
    "comment" : "\n     * Power role: This USB port does not have a data role.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ROLE_HOST",
    "type" : "int",
    "comment" : "\n     * Data role: This USB port can act as a host (access data services).\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_ROLE_DEVICE",
    "type" : "int",
    "comment" : "\n     * Data role: This USB port can act as a device (offer data services).\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_NONE",
    "type" : "int",
    "comment" : "\n     * There is currently nothing connected to this USB port.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DFP",
    "type" : "int",
    "comment" : "\n     * This USB port can act as a downstream facing port (host).\n     *\n     * <p> Implies that the port supports the {@link #POWER_ROLE_SOURCE} and\n     * {@link #DATA_ROLE_HOST} combination of roles (and possibly others as well).\n     ",
    "links" : [ "#POWER_ROLE_SOURCE", "#DATA_ROLE_HOST" ]
  }, {
    "name" : "MODE_UFP",
    "type" : "int",
    "comment" : "\n     * This USB port can act as an upstream facing port (device).\n     *\n     * <p> Implies that the port supports the {@link #POWER_ROLE_SINK} and\n     * {@link #DATA_ROLE_DEVICE} combination of roles (and possibly others as well).\n     ",
    "links" : [ "#POWER_ROLE_SINK", "#DATA_ROLE_DEVICE" ]
  }, {
    "name" : "MODE_DUAL",
    "type" : "int",
    "comment" : "\n     * This USB port can act either as an downstream facing port (host) or as\n     * an upstream facing port (device).\n     *\n     * <p> Implies that the port supports the {@link #POWER_ROLE_SOURCE} and\n     * {@link #DATA_ROLE_HOST} combination of roles and the {@link #POWER_ROLE_SINK} and\n     * {@link #DATA_ROLE_DEVICE} combination of roles (and possibly others as well).\n     *\n     * @hide\n     ",
    "links" : [ "#POWER_ROLE_SOURCE", "#DATA_ROLE_HOST", "#POWER_ROLE_SINK", "#DATA_ROLE_DEVICE" ]
  }, {
    "name" : "MODE_AUDIO_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * This USB port can support USB Type-C Audio accessory.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DEBUG_ACCESSORY",
    "type" : "int",
    "comment" : "\n     * This USB port can support USB Type-C debug accessory.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence detection not supported by the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_DISABLED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence detection supported but disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_NOT_DETECTED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence enabled but not detected.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_DETECTION_DETECTED",
    "type" : "int",
    "comment" : "\n     * Contaminant presence enabled and detected.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_NONE",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - No action performed upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_SINK",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is forced to sink upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_SOURCE",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is forced to source upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_FORCE_DISABLE",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is disabled upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTAMINANT_PROTECTION_DISABLED",
    "type" : "int",
    "comment" : "\n     * Contaminant protection - Port is disabled upon detection of\n     * contaminant presence.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<UsbPortStatus>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is anything connected to the port.\n     *\n     * @return {@code true} iff there is anything connected to the port.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current mode of the port.\n     *\n     * @return The current mode: {@link #MODE_DFP}, {@link #MODE_UFP},\n     * {@link #MODE_AUDIO_ACCESSORY}, {@link #MODE_DEBUG_ACCESSORY}, or {@link {@link #MODE_NONE} if\n     * nothing is connected.\n     ",
    "links" : [ "#MODE_DFP", "#MODE_UFP", "#MODE_AUDIO_ACCESSORY", "#MODE_DEBUG_ACCESSORY", "#MODE_NONE" ]
  }, {
    "name" : "public int getCurrentPowerRole()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current power role of the port.\n     *\n     * @return The current power role: {@link #POWER_ROLE_SOURCE}, {@link #POWER_ROLE_SINK}, or\n     * {@link #POWER_ROLE_NONE} if nothing is connected.\n     ",
    "links" : [ "#POWER_ROLE_SOURCE", "#POWER_ROLE_SINK", "#POWER_ROLE_NONE" ]
  }, {
    "name" : "public int getCurrentDataRole()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current data role of the port.\n     *\n     * @return The current data role: {@link #DATA_ROLE_HOST}, {@link #DATA_ROLE_DEVICE}, or\n     * {@link #DATA_ROLE_NONE} if nothing is connected.\n     ",
    "links" : [ "#DATA_ROLE_HOST", "#DATA_ROLE_DEVICE", "#DATA_ROLE_NONE" ]
  }, {
    "name" : "public boolean isRoleCombinationSupported(@UsbPowerRole int powerRole, @UsbDataRole int dataRole)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified power and data role combination is supported\n     * given what is currently connected to the port.\n     *\n     * @param powerRole The power role to check: {@link #POWER_ROLE_SOURCE}  or\n     *                  {@link #POWER_ROLE_SINK}, or {@link #POWER_ROLE_NONE} if no power role.\n     * @param dataRole  The data role to check: either {@link #DATA_ROLE_HOST} or\n     *                  {@link #DATA_ROLE_DEVICE}, or {@link #DATA_ROLE_NONE} if no data role.\n     ",
    "links" : [ "#POWER_ROLE_SOURCE", "#POWER_ROLE_SINK", "#POWER_ROLE_NONE", "#DATA_ROLE_HOST", "#DATA_ROLE_DEVICE", "#DATA_ROLE_NONE" ]
  }, {
    "name" : "public int getSupportedRoleCombinations()",
    "returnType" : "int",
    "comment" : "\n     * Get the supported role combinations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContaminantDetectionStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns contaminant detection status.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContaminantProtectionStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns contamiant protection status.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mCurrentMode", "mCurrentPowerRole", "mCurrentDataRole", "mSupportedRoleCombinations", "mContaminantProtectionStatus", "mContaminantDetectionStatus", "POWER_ROLE_NONE", "POWER_ROLE_SOURCE", "POWER_ROLE_SINK", "DATA_ROLE_NONE", "DATA_ROLE_HOST", "DATA_ROLE_DEVICE", "MODE_NONE", "MODE_DFP", "MODE_UFP", "MODE_DUAL", "MODE_AUDIO_ACCESSORY", "MODE_DEBUG_ACCESSORY", "CONTAMINANT_DETECTION_NOT_SUPPORTED", "CONTAMINANT_DETECTION_DISABLED", "CONTAMINANT_DETECTION_NOT_DETECTED", "CONTAMINANT_DETECTION_DETECTED", "CONTAMINANT_PROTECTION_NONE", "CONTAMINANT_PROTECTION_SINK", "CONTAMINANT_PROTECTION_SOURCE", "CONTAMINANT_PROTECTION_FORCE_DISABLE", "CONTAMINANT_PROTECTION_DISABLED", "CREATOR" ],
  "methodNames" : [ "public boolean isConnected()", "public int getCurrentMode()", "public int getCurrentPowerRole()", "public int getCurrentDataRole()", "public boolean isRoleCombinationSupported(@UsbPowerRole int powerRole, @UsbDataRole int dataRole)", "public int getSupportedRoleCombinations()", "public int getContaminantDetectionStatus()", "public int getContaminantProtectionStatus()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}