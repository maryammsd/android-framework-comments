{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricFingerprintConstants.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricFingerprintConstants",
  "comment" : "\n * Interface containing all of the fingerprint-specific constants.\n *\n * NOTE: The error messages must be consistent between BiometricConstants, Biometric*Constants,\n *       and the frameworks/support/biometric/.../BiometricConstants files.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FINGERPRINT_ERROR_HW_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The hardware is unavailable. Try again later.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_UNABLE_TO_PROCESS",
    "type" : "int",
    "comment" : "\n     * Error state returned when the sensor was unable to process the current image.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Error state returned when the current request has been running too long. This is intended to\n     * prevent programs from waiting for the fingerprint sensor indefinitely. The timeout is\n     * platform and sensor-specific, but is generally on the order of 30 seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_NO_SPACE",
    "type" : "int",
    "comment" : "\n     * Error state returned for operations like enrollment; the operation cannot be completed\n     * because there's not enough storage remaining to complete the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_CANCELED",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because the fingerprint sensor is unavailable. For example,\n     * this may happen when the user is switched, the device is locked or another pending operation\n     * prevents or disables it.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_UNABLE_TO_REMOVE",
    "type" : "int",
    "comment" : "\n     * The {@link FingerprintManager#remove} call failed. Typically this will happen when the\n     * provided fingerprint id was incorrect.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.fingerprint.FingerprintManager#remove" ]
  }, {
    "name" : "FINGERPRINT_ERROR_LOCKOUT",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because the API is locked out due to too many attempts.\n     * This occurs after 5 failed attempts, and lasts for 30 seconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_VENDOR",
    "type" : "int",
    "comment" : "\n     * Hardware vendors may extend this list if there are conditions that do not fall under one of\n     * the above categories. Vendors are responsible for providing error strings for these errors.\n     * These messages are typically reserved for internal operations such as enrollment, but may be\n     * used to express vendor errors not covered by the ones in fingerprint.h. Applications are\n     * expected to show the error message string if they happen, but are advised not to rely on the\n     * message id since they will be device and vendor-specific\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_LOCKOUT_PERMANENT",
    "type" : "int",
    "comment" : "\n     * The operation was canceled because FINGERPRINT_ERROR_LOCKOUT occurred too many times.\n     * Fingerprint authentication is disabled until the user unlocks with strong authentication\n     * (PIN/Pattern/Password)\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_USER_CANCELED",
    "type" : "int",
    "comment" : "\n     * The user canceled the operation. Upon receiving this, applications should use alternate\n     * authentication (e.g. a password). The application should also provide the means to return\n     * to fingerprint authentication, such as a \"use fingerprint\" button.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_NO_FINGERPRINTS",
    "type" : "int",
    "comment" : "\n     * The user does not have any fingerprints enrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_HW_NOT_PRESENT",
    "type" : "int",
    "comment" : "\n     * The device does not have a fingerprint sensor.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_NEGATIVE_BUTTON",
    "type" : "int",
    "comment" : "\n     * The user pressed the negative button. This is a placeholder that is currently only used\n     * by the support library.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL",
    "type" : "int",
    "comment" : "\n     * The device does not have pin, pattern, or password set up. See\n     * {@link BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)} and\n     * {@link KeyguardManager#isDeviceSecure()}\n     *\n     * @hide\n     ",
    "links" : [ "BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)", "android.app.KeyguardManager#isDeviceSecure()" ]
  }, {
    "name" : "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * A security vulnerability has been discovered and the sensor is unavailable until a\n     * security update has addressed this issue. This error can be received if for example,\n     * authentication was requested with {@link Authenticators#BIOMETRIC_STRONG}, but the\n     * sensor's strength can currently only meet {@link Authenticators#BIOMETRIC_WEAK}.\n     * @hide\n     ",
    "links" : [ "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_WEAK", "android.hardware.biometrics.BiometricManager.Authenticators#BIOMETRIC_STRONG" ]
  }, {
    "name" : "BIOMETRIC_ERROR_RE_ENROLL",
    "type" : "int",
    "comment" : "\n     * Authentication cannot proceed because re-enrollment is required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown error received from the HAL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_BAD_CALIBRATION",
    "type" : "int",
    "comment" : "\n     * Error indicating that the fingerprint sensor has bad calibration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_ERROR_POWER_PRESSED",
    "type" : "int",
    "comment" : "\n     * A power press stopped this biometric operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ERROR_VENDOR_BASE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_GOOD",
    "type" : "int",
    "comment" : "\n     * The image acquired was good.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_PARTIAL",
    "type" : "int",
    "comment" : "\n     * Only a partial fingerprint image was detected. During enrollment, the user should be\n     * informed on what needs to happen to resolve this problem, e.g. \"press firmly on sensor.\"\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_INSUFFICIENT",
    "type" : "int",
    "comment" : "\n     * The fingerprint image was too noisy to process due to a detected condition (i.e. dry skin) or\n     * a possibly dirty sensor (See {@link #FINGERPRINT_ACQUIRED_IMAGER_DIRTY}).\n     ",
    "links" : [ "#FINGERPRINT_ACQUIRED_IMAGER_DIRTY" ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_IMAGER_DIRTY",
    "type" : "int",
    "comment" : "\n     * The fingerprint image was too noisy due to suspected or detected dirt on the sensor.\n     * For example, it's reasonable return this after multiple\n     * {@link #FINGERPRINT_ACQUIRED_INSUFFICIENT} or actual detection of dirt on the sensor\n     * (stuck pixels, swaths, etc.). The user is expected to take action to clean the sensor\n     * when this is returned.\n     ",
    "links" : [ "#FINGERPRINT_ACQUIRED_INSUFFICIENT" ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_TOO_SLOW",
    "type" : "int",
    "comment" : "\n     * The fingerprint image was unreadable due to lack of motion. This is most appropriate for\n     * linear array sensors that require a swipe motion.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_TOO_FAST",
    "type" : "int",
    "comment" : "\n     * The fingerprint image was incomplete due to quick motion. While mostly appropriate for\n     * linear array sensors,  this could also happen if the finger was moved during acquisition.\n     * The user should be asked to move the finger slower (linear) or leave the finger on the sensor\n     * longer.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_VENDOR",
    "type" : "int",
    "comment" : "\n     * Hardware vendors may extend this list if there are conditions that do not fall under one of\n     * the above categories. Vendors are responsible for providing error strings for these errors.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_START",
    "type" : "int",
    "comment" : "\n     * This message represents the earliest message sent at the beginning of the authentication\n     * pipeline. It is expected to be used to measure latency. Note this should be sent whenever\n     * authentication is restarted.\n     * The framework will measure latency based on the time between the last START message and the\n     * onAuthenticated callback.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown acquired code received from the HAL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_IMMOBILE",
    "type" : "int",
    "comment" : "\n     * This message may be sent during enrollment if the same area of the finger has already\n     * been captured during this enrollment session. In general, enrolling multiple areas of the\n     * same finger can help against false rejections.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_TOO_BRIGHT",
    "type" : "int",
    "comment" : "\n     * For sensors that require illumination, such as optical under-display fingerprint sensors,\n     * the image was too bright to be used for matching.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_POWER_PRESSED",
    "type" : "int",
    "comment" : "\n     * For sensors that have the power button co-located with their sensor, this event will\n     * be sent during enrollment.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_RE_ENROLL_OPTIONAL",
    "type" : "int",
    "comment" : "\n     * This message is sent to encourage the user to re-enroll their fingerprints.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_RE_ENROLL_FORCED",
    "type" : "int",
    "comment" : "\n     * This message is sent to force the user to re-enroll their fingerprints.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT_ACQUIRED_VENDOR_BASE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean shouldDisableUdfpsDisplayMode(@FingerprintAcquired int acquiredInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the FingerprintAcquired message is a signal to disable the UDFPS display mode.\n     * We want to disable the UDFPS mode as soon as possible to conserve power and provide better\n     * UX. For example, prolonged high-brightness illumination of optical sensors can be unpleasant\n     * to the user, can cause long term display burn-in, and can drain the battery faster.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int reasonToMetric(@EnrollReason int reason)",
    "returnType" : "int",
    "comment" : "\n     * Converts FaceEnrollOptions.reason into BiometricsProtoEnums.enrollReason\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean shouldDisableUdfpsDisplayMode(@FingerprintAcquired int acquiredInfo)", " static int reasonToMetric(@EnrollReason int reason)" ],
  "variableNames" : [ "FINGERPRINT_ERROR_HW_UNAVAILABLE", "FINGERPRINT_ERROR_UNABLE_TO_PROCESS", "FINGERPRINT_ERROR_TIMEOUT", "FINGERPRINT_ERROR_NO_SPACE", "FINGERPRINT_ERROR_CANCELED", "FINGERPRINT_ERROR_UNABLE_TO_REMOVE", "FINGERPRINT_ERROR_LOCKOUT", "FINGERPRINT_ERROR_VENDOR", "FINGERPRINT_ERROR_LOCKOUT_PERMANENT", "FINGERPRINT_ERROR_USER_CANCELED", "FINGERPRINT_ERROR_NO_FINGERPRINTS", "FINGERPRINT_ERROR_HW_NOT_PRESENT", "FINGERPRINT_ERROR_NEGATIVE_BUTTON", "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL", "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED", "BIOMETRIC_ERROR_RE_ENROLL", "FINGERPRINT_ERROR_UNKNOWN", "FINGERPRINT_ERROR_BAD_CALIBRATION", "BIOMETRIC_ERROR_POWER_PRESSED", "FINGERPRINT_ERROR_VENDOR_BASE", "FINGERPRINT_ACQUIRED_GOOD", "FINGERPRINT_ACQUIRED_PARTIAL", "FINGERPRINT_ACQUIRED_INSUFFICIENT", "FINGERPRINT_ACQUIRED_IMAGER_DIRTY", "FINGERPRINT_ACQUIRED_TOO_SLOW", "FINGERPRINT_ACQUIRED_TOO_FAST", "FINGERPRINT_ACQUIRED_VENDOR", "FINGERPRINT_ACQUIRED_START", "FINGERPRINT_ACQUIRED_UNKNOWN", "FINGERPRINT_ACQUIRED_IMMOBILE", "FINGERPRINT_ACQUIRED_TOO_BRIGHT", "FINGERPRINT_ACQUIRED_POWER_PRESSED", "FINGERPRINT_ACQUIRED_RE_ENROLL_OPTIONAL", "FINGERPRINT_ACQUIRED_RE_ENROLL_FORCED", "FINGERPRINT_ACQUIRED_VENDOR_BASE" ]
}