{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SimpleCursorAdapter.java",
  "packageName" : "android.widget",
  "className" : "SimpleCursorAdapter",
  "comment" : "\n * An easy adapter to map columns from a cursor to TextViews or ImageViews\n * defined in an XML file. You can specify which columns you want, which\n * views you want to display the columns, and the XML file that defines\n * the appearance of these views.\n *\n * Binding occurs in two phases. First, if a\n * {@link android.widget.SimpleCursorAdapter.ViewBinder} is available,\n * {@link ViewBinder#setViewValue(android.view.View, android.database.Cursor, int)}\n * is invoked. If the returned value is true, binding has occured. If the\n * returned value is false and the view to bind is a TextView,\n * {@link #setViewText(TextView, String)} is invoked. If the returned value\n * is false and the view to bind is an ImageView,\n * {@link #setViewImage(ImageView, String)} is invoked. If no appropriate\n * binding can be found, an {@link IllegalStateException} is thrown.\n *\n * If this adapter is used with filtering, for instance in an\n * {@link android.widget.AutoCompleteTextView}, you can use the\n * {@link android.widget.SimpleCursorAdapter.CursorToStringConverter} and the\n * {@link android.widget.FilterQueryProvider} interfaces\n * to get control over the filtering process. You can refer to\n * {@link #convertToString(android.database.Cursor)} and\n * {@link #runQueryOnBackgroundThread(CharSequence)} for more information.\n ",
  "links" : [ "android.widget.SimpleCursorAdapter.CursorToStringConverter", "#setViewValue(android.view.View", "IllegalStateException", "android.widget.FilterQueryProvider", "#setViewImage(ImageView", "#convertToString(android.database.Cursor)", "#runQueryOnBackgroundThread(CharSequence)", "android.widget.SimpleCursorAdapter.ViewBinder", "#setViewText(TextView", "android.widget.AutoCompleteTextView" ],
  "variables" : [ {
    "name" : "mFrom",
    "type" : "int[]",
    "comment" : "\n     * A list of columns containing the data to bind to the UI.\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mTo",
    "type" : "int[]",
    "comment" : "\n     * A list of View ids representing the views to which the data must be bound.\n     * This field should be made private, so it is hidden from the SDK.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "mStringConversionColumn",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursorToStringConverter",
    "type" : "CursorToStringConverter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewBinder",
    "type" : "ViewBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalFrom",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void bindView(View view, Context context, Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Binds all of the field names passed into the \"to\" parameter of the\n     * constructor with their corresponding cursor columns as specified in the\n     * \"from\" parameter.\n     *\n     * Binding occurs in two phases. First, if a\n     * {@link android.widget.SimpleCursorAdapter.ViewBinder} is available,\n     * {@link ViewBinder#setViewValue(android.view.View, android.database.Cursor, int)}\n     * is invoked. If the returned value is true, binding has occured. If the\n     * returned value is false and the view to bind is a TextView,\n     * {@link #setViewText(TextView, String)} is invoked. If the returned value is\n     * false and the view to bind is an ImageView,\n     * {@link #setViewImage(ImageView, String)} is invoked. If no appropriate\n     * binding can be found, an {@link IllegalStateException} is thrown.\n     *\n     * @throws IllegalStateException if binding cannot occur\n     * \n     * @see android.widget.CursorAdapter#bindView(android.view.View,\n     *      android.content.Context, android.database.Cursor)\n     * @see #getViewBinder()\n     * @see #setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)\n     * @see #setViewImage(ImageView, String)\n     * @see #setViewText(TextView, String)\n     ",
    "links" : [ "#setViewValue(android.view.View", "IllegalStateException", "#setViewImage(ImageView", "android.widget.SimpleCursorAdapter.ViewBinder", "#setViewText(TextView" ]
  }, {
    "name" : "public ViewBinder getViewBinder()",
    "returnType" : "ViewBinder",
    "comment" : "\n     * Returns the {@link ViewBinder} used to bind data to views.\n     *\n     * @return a ViewBinder or null if the binder does not exist\n     *\n     * @see #bindView(android.view.View, android.content.Context, android.database.Cursor)\n     * @see #setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)\n     ",
    "links" : [ "ViewBinder" ]
  }, {
    "name" : "public void setViewBinder(ViewBinder viewBinder)",
    "returnType" : "void",
    "comment" : "\n     * Sets the binder used to bind data to views.\n     *\n     * @param viewBinder the binder used to bind data to views, can be null to\n     *        remove the existing binder\n     *\n     * @see #bindView(android.view.View, android.content.Context, android.database.Cursor)\n     * @see #getViewBinder()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setViewImage(ImageView v, String value)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the image for an ImageView but only if\n     * there is no existing ViewBinder or if the existing ViewBinder cannot\n     * handle binding to an ImageView.\n     *\n     * By default, the value will be treated as an image resource. If the\n     * value cannot be used as an image resource, the value is used as an\n     * image Uri.\n     *\n     * Intended to be overridden by Adapters that need to filter strings\n     * retrieved from the database.\n     *\n     * @param v ImageView to receive an image\n     * @param value the value retrieved from the cursor\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setViewText(TextView v, String text)",
    "returnType" : "void",
    "comment" : "\n     * Called by bindView() to set the text for a TextView but only if\n     * there is no existing ViewBinder or if the existing ViewBinder cannot\n     * handle binding to a TextView.\n     *\n     * Intended to be overridden by Adapters that need to filter strings\n     * retrieved from the database.\n     * \n     * @param v TextView to receive text\n     * @param text the text to be set for the TextView\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStringConversionColumn()",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the column used to get a String representation\n     * of the Cursor.\n     *\n     * @return a valid index in the current Cursor or -1\n     *\n     * @see android.widget.CursorAdapter#convertToString(android.database.Cursor)\n     * @see #setStringConversionColumn(int) \n     * @see #setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)\n     * @see #getCursorToStringConverter()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStringConversionColumn(int stringConversionColumn)",
    "returnType" : "void",
    "comment" : "\n     * Defines the index of the column in the Cursor used to get a String\n     * representation of that Cursor. The column is used to convert the\n     * Cursor to a String only when the current CursorToStringConverter\n     * is null.\n     *\n     * @param stringConversionColumn a valid index in the current Cursor or -1 to use the default\n     *        conversion mechanism\n     *\n     * @see android.widget.CursorAdapter#convertToString(android.database.Cursor)\n     * @see #getStringConversionColumn()\n     * @see #setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)\n     * @see #getCursorToStringConverter()\n     ",
    "links" : [ ]
  }, {
    "name" : "public CursorToStringConverter getCursorToStringConverter()",
    "returnType" : "CursorToStringConverter",
    "comment" : "\n     * Returns the converter used to convert the filtering Cursor\n     * into a String.\n     *\n     * @return null if the converter does not exist or an instance of\n     *         {@link android.widget.SimpleCursorAdapter.CursorToStringConverter}\n     *\n     * @see #setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)\n     * @see #getStringConversionColumn()\n     * @see #setStringConversionColumn(int)\n     * @see android.widget.CursorAdapter#convertToString(android.database.Cursor)\n     ",
    "links" : [ "android.widget.SimpleCursorAdapter.CursorToStringConverter" ]
  }, {
    "name" : "public void setCursorToStringConverter(CursorToStringConverter cursorToStringConverter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the converter  used to convert the filtering Cursor\n     * into a String.\n     *\n     * @param cursorToStringConverter the Cursor to String converter, or\n     *        null to remove the converter\n     *\n     * @see #setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter) \n     * @see #getStringConversionColumn()\n     * @see #setStringConversionColumn(int)\n     * @see android.widget.CursorAdapter#convertToString(android.database.Cursor)\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence convertToString(Cursor cursor)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a CharSequence representation of the specified Cursor as defined\n     * by the current CursorToStringConverter. If no CursorToStringConverter\n     * has been set, the String conversion column is used instead. If the\n     * conversion column is -1, the returned String is empty if the cursor\n     * is null or Cursor.toString().\n     *\n     * @param cursor the Cursor to convert to a CharSequence\n     *\n     * @return a non-null CharSequence representing the cursor\n     ",
    "links" : [ ]
  }, {
    "name" : "private void findColumns(Cursor c, String[] from)",
    "returnType" : "void",
    "comment" : "\n     * Create a map from an array of strings to an array of column-id integers in cursor c.\n     * If c is null, the array will be discarded.\n     *\n     * @param c the cursor to find the columns from\n     * @param from the Strings naming the columns of interest\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor swapCursor(Cursor c)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void changeCursorAndColumns(Cursor c, String[] from, int[] to)",
    "returnType" : "void",
    "comment" : "\n     * Change the cursor and change the column-to-view mappings at the same time.\n     *  \n     * @param c The database cursor.  Can be null if the cursor is not available yet.\n     * @param from A list of column names representing the data to bind to the UI.  Can be null \n     *            if the cursor is not available yet.\n     * @param to The views that should display column in the \"from\" parameter.\n     *            These should all be TextViews. The first N views in this list\n     *            are given the values of the first N columns in the from\n     *            parameter.  Can be null if the cursor is not available yet.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void bindView(View view, Context context, Cursor cursor)", "public ViewBinder getViewBinder()", "public void setViewBinder(ViewBinder viewBinder)", "public void setViewImage(ImageView v, String value)", "public void setViewText(TextView v, String text)", "public int getStringConversionColumn()", "public void setStringConversionColumn(int stringConversionColumn)", "public CursorToStringConverter getCursorToStringConverter()", "public void setCursorToStringConverter(CursorToStringConverter cursorToStringConverter)", "public CharSequence convertToString(Cursor cursor)", "private void findColumns(Cursor c, String[] from)", "public Cursor swapCursor(Cursor c)", "public void changeCursorAndColumns(Cursor c, String[] from, int[] to)" ],
  "variableNames" : [ "mFrom", "mTo", "mStringConversionColumn", "mCursorToStringConverter", "mViewBinder", "mOriginalFrom" ]
}