{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/breakiter/LaoBreakEngine.java",
  "packageName" : "android.icu.impl.breakiter",
  "className" : "LaoBreakEngine",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LAO_LOOKAHEAD",
    "type" : "byte",
    "comment" : " How many words in a row are \"good enough\"?",
    "links" : [ ]
  }, {
    "name" : "LAO_ROOT_COMBINE_THRESHOLD",
    "type" : "byte",
    "comment" : " Will not combine a non-word with a preceding dictionary word longer than this",
    "links" : [ ]
  }, {
    "name" : "LAO_PREFIX_COMBINE_THRESHOLD",
    "type" : "byte",
    "comment" : " dictionary word with a preceding word",
    "links" : [ ]
  }, {
    "name" : "LAO_MIN_WORD",
    "type" : "byte",
    "comment" : " Minimum word size",
    "links" : [ ]
  }, {
    "name" : "fDictionary",
    "type" : "DictionaryMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fEndWordSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fBeginWordSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fMarkSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean handles(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int divideUpDictionaryRange(CharacterIterator fIter, int rangeStart, int rangeEnd, DequeI foundBreaks, boolean isPhraseBreaking)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object obj)", "public int hashCode()", "public boolean handles(int c)", "public int divideUpDictionaryRange(CharacterIterator fIter, int rangeStart, int rangeEnd, DequeI foundBreaks, boolean isPhraseBreaking)" ],
  "variableNames" : [ "LAO_LOOKAHEAD", "LAO_ROOT_COMBINE_THRESHOLD", "LAO_PREFIX_COMBINE_THRESHOLD", "LAO_MIN_WORD", "fDictionary", "fEndWordSet", "fBeginWordSet", "fMarkSet" ]
}