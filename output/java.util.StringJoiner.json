{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/StringJoiner.java",
  "packageName" : "java.util",
  "className" : "StringJoiner",
  "comment" : "\n * {@code StringJoiner} is used to construct a sequence of characters separated\n * by a delimiter and optionally starting with a supplied prefix\n * and ending with a supplied suffix.\n * <p>\n * Prior to adding something to the {@code StringJoiner}, its\n * {@code sj.toString()} method will, by default, return {@code prefix + suffix}.\n * However, if the {@code setEmptyValue} method is called, the {@code emptyValue}\n * supplied will be returned instead. This can be used, for example, when\n * creating a string using set notation to indicate an empty set, i.e.\n * <code>\"{}\"</code>, where the {@code prefix} is <code>\"{\"</code>, the\n * {@code suffix} is <code>\"}\"</code> and nothing has been added to the\n * {@code StringJoiner}.\n *\n * @apiNote\n * <p>The String {@code \"[George:Sally:Fred]\"} may be constructed as follows:\n *\n * <pre> {@code\n * StringJoiner sj = new StringJoiner(\":\", \"[\", \"]\");\n * sj.add(\"George\").add(\"Sally\").add(\"Fred\");\n * String desiredString = sj.toString();\n * }</pre>\n * <p>\n * A {@code StringJoiner} may be employed to create formatted output from a\n * {@link java.util.stream.Stream} using\n * {@link java.util.stream.Collectors#joining(CharSequence)}. For example:\n *\n * <pre> {@code\n * List<Integer> numbers = Arrays.asList(1, 2, 3, 4);\n * String commaSeparatedNumbers = numbers.stream()\n *     .map(i -> i.toString())\n *     .collect(Collectors.joining(\", \"));\n * }</pre>\n *\n * @see java.util.stream.Collectors#joining(CharSequence)\n * @see java.util.stream.Collectors#joining(CharSequence, CharSequence, CharSequence)\n * @since  1.8\n",
  "links" : [ "java.util.stream.Stream", "java.util.stream.Collectors#joining(CharSequence)" ],
  "variables" : [ {
    "name" : "prefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "delimiter",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "suffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "elts",
    "type" : "String[]",
    "comment" : " Contains all the string components added so far. ",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : " The number of string components added so far. ",
    "links" : [ ]
  }, {
    "name" : "len",
    "type" : "int",
    "comment" : " Total length in chars so far, excluding prefix and suffix. ",
    "links" : [ ]
  }, {
    "name" : "emptyValue",
    "type" : "String",
    "comment" : "\n     * When overriden by the user to be non-null via {@link setEmptyValue}, the\n     * string returned by toString() when no elements have yet been added.\n     * When null, prefix + suffix is used as the empty value.\n     ",
    "links" : [ "setEmptyValue" ]
  } ],
  "methods" : [ {
    "name" : "public StringJoiner setEmptyValue(CharSequence emptyValue)",
    "returnType" : "StringJoiner",
    "comment" : "\n     * Sets the sequence of characters to be used when determining the string\n     * representation of this {@code StringJoiner} and no elements have been\n     * added yet, that is, when it is empty.  A copy of the {@code emptyValue}\n     * parameter is made for this purpose. Note that once an add method has been\n     * called, the {@code StringJoiner} is no longer considered empty, even if\n     * the element(s) added correspond to the empty {@code String}.\n     *\n     * @param  emptyValue the characters to return as the value of an empty\n     *         {@code StringJoiner}\n     * @return this {@code StringJoiner} itself so the calls may be chained\n     * @throws NullPointerException when the {@code emptyValue} parameter is\n     *         {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getChars(String s, char[] chars, int start)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the current value, consisting of the {@code prefix}, the values\n     * added so far separated by the {@code delimiter}, and the {@code suffix},\n     * unless no elements have been added in which case, the\n     * {@code prefix + suffix} or the {@code emptyValue} characters are returned.\n     *\n     * @return the string representation of this {@code StringJoiner}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringJoiner add(CharSequence newElement)",
    "returnType" : "StringJoiner",
    "comment" : "\n     * Adds a copy of the given {@code CharSequence} value as the next\n     * element of the {@code StringJoiner} value. If {@code newElement} is\n     * {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  newElement The element to add\n     * @return a reference to this {@code StringJoiner}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringJoiner merge(StringJoiner other)",
    "returnType" : "StringJoiner",
    "comment" : "\n     * Adds the contents of the given {@code StringJoiner} without prefix and\n     * suffix as the next element if it is non-empty. If the given {@code\n     * StringJoiner} is empty, the call has no effect.\n     *\n     * <p>A {@code StringJoiner} is empty if {@link #add(CharSequence) add()}\n     * has never been called, and if {@code merge()} has never been called\n     * with a non-empty {@code StringJoiner} argument.\n     *\n     * <p>If the other {@code StringJoiner} is using a different delimiter,\n     * then elements from the other {@code StringJoiner} are concatenated with\n     * that delimiter and the result is appended to this {@code StringJoiner}\n     * as a single element.\n     *\n     * @param other The {@code StringJoiner} whose contents should be merged\n     *              into this one\n     * @throws NullPointerException if the other {@code StringJoiner} is null\n     * @return This {@code StringJoiner}\n     ",
    "links" : [ "#add(CharSequence)" ]
  }, {
    "name" : "private void compactElts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the {@code String} representation\n     * of this {@code StringJoiner}. Note that if\n     * no add methods have been called, then the length of the {@code String}\n     * representation (either {@code prefix + suffix} or {@code emptyValue})\n     * will be returned. The value should be equivalent to\n     * {@code toString().length()}.\n     *\n     * @return the length of the current value of {@code StringJoiner}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public StringJoiner setEmptyValue(CharSequence emptyValue)", "private static int getChars(String s, char[] chars, int start)", "public String toString()", "public StringJoiner add(CharSequence newElement)", "public StringJoiner merge(StringJoiner other)", "private void compactElts()", "public int length()" ],
  "variableNames" : [ "prefix", "delimiter", "suffix", "elts", "size", "len", "emptyValue" ]
}