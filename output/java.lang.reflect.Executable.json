{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Executable.java",
  "packageName" : "java.lang.reflect",
  "className" : "Executable",
  "comment" : "\n * A shared superclass for the common functionality of {@link Method}\n * and {@link Constructor}.\n *\n * @since 1.8\n ",
  "links" : [ "java.lang.reflect.Method", "java.lang.reflect.Constructor" ],
  "variables" : [ {
    "name" : "hasRealParameterData",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parameters",
    "type" : "Parameter[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "accessFlags",
    "type" : "int",
    "comment" : " Bits encoding access (e.g. public, private) as well as other runtime specific flags ",
    "links" : [ ]
  }, {
    "name" : "artMethod",
    "type" : "long",
    "comment" : "\n     * The ArtMethod associated with this Executable, required for dispatching due to entrypoints\n     * Classloader is held live by the declaring class.\n     ",
    "links" : [ ]
  }, {
    "name" : "declaringClass",
    "type" : "Class<?>",
    "comment" : " Executable's declaring class ",
    "links" : [ ]
  }, {
    "name" : "declaringClassOfOverriddenMethod",
    "type" : "Class<?>",
    "comment" : "\n     * Overriden method's declaring class (same as declaringClass unless declaringClass is a proxy\n     * class).\n     ",
    "links" : [ ]
  }, {
    "name" : "dexMethodIndex",
    "type" : "int",
    "comment" : " The method index of this method within its defining dex file ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " abstract boolean hasGenericInformation()",
    "returnType" : "boolean",
    "comment" : "\n     * Does the Executable have generic information.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean equalParamTypes(Class<?>[] params1, Class<?>[] params2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void separateWithCommas(Class<?>[] types, StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void printModifiersIfNonzero(StringBuilder sb, int mask, boolean isDefault)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String sharedToString(int modifierMask, boolean isDefault, Class<?>[] parameterTypes, Class<?>[] exceptionTypes)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void specificToStringHeader(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * Generate toString header information specific to a method or\n     * constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : " String sharedToGenericString(int modifierMask, boolean isDefault)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void specificToGenericStringHeader(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * Generate toGenericString header information specific to a\n     * method or constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Class<?> getDeclaringClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the {@code Class} object representing the class or interface\n     * that declares the executable represented by this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the executable represented by this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the Java language {@linkplain Modifier modifiers} for\n     * the executable represented by this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract TypeVariable<?>[] getTypeParameters()",
    "returnType" : "TypeVariable<?>[]",
    "comment" : "\n     * Returns an array of {@code TypeVariable} objects that represent the\n     * type variables declared by the generic declaration represented by this\n     * {@code GenericDeclaration} object, in declaration order.  Returns an\n     * array of length 0 if the underlying generic declaration declares no type\n     * variables.\n     *\n     * @return an array of {@code TypeVariable} objects that represent\n     *     the type variables declared by this generic declaration\n     * @throws GenericSignatureFormatError if the generic\n     *     signature of this generic declaration does not conform to\n     *     the format specified in\n     *     <cite>The Java&trade; Virtual Machine Specification</cite>\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Class<?>[] getParameterTypes()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * Returns an array of {@code Class} objects that represent the formal\n     * parameter types, in declaration order, of the executable\n     * represented by this object.  Returns an array of length\n     * 0 if the underlying executable takes no parameters.\n     *\n     * @return the parameter types for the executable this object\n     * represents\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameterCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of formal parameters (whether explicitly\n     * declared or implicitly declared or neither) for the executable\n     * represented by this object.\n     *\n     * @return The number of formal parameters for the executable this\n     * object represents\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type[] getGenericParameterTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * Returns an array of {@code Type} objects that represent the formal\n     * parameter types, in declaration order, of the executable represented by\n     * this object. Returns an array of length 0 if the\n     * underlying executable takes no parameters.\n     *\n     * <p>If a formal parameter type is a parameterized type,\n     * the {@code Type} object returned for it must accurately reflect\n     * the actual type parameters used in the source code.\n     *\n     * <p>If a formal parameter type is a type variable or a parameterized\n     * type, it is created. Otherwise, it is resolved.\n     *\n     * @return an array of {@code Type}s that represent the formal\n     *     parameter types of the underlying executable, in declaration order\n     * @throws GenericSignatureFormatError\n     *     if the generic method signature does not conform to the format\n     *     specified in\n     *     <cite>The Java&trade; Virtual Machine Specification</cite>\n     * @throws TypeNotPresentException if any of the parameter\n     *     types of the underlying executable refers to a non-existent type\n     *     declaration\n     * @throws MalformedParameterizedTypeException if any of\n     *     the underlying executable's parameter types refer to a parameterized\n     *     type that cannot be instantiated for any reason\n     ",
    "links" : [ ]
  }, {
    "name" : " Type[] getAllGenericParameterTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * Behaves like {@code getGenericParameterTypes}, but returns type\n     * information for all parameters, including synthetic parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parameter[] getParameters()",
    "returnType" : "Parameter[]",
    "comment" : "\n     * Returns an array of {@code Parameter} objects that represent\n     * all the parameters to the underlying executable represented by\n     * this object.  Returns an array of length 0 if the executable\n     * has no parameters.\n     *\n     * <p>The parameters of the underlying executable do not necessarily\n     * have unique names, or names that are legal identifiers in the\n     * Java programming language (JLS 3.8).\n     *\n     * @throws MalformedParametersException if the class file contains\n     * a MethodParameters attribute that is improperly formatted.\n     * @return an array of {@code Parameter} objects representing all\n     * the parameters to the executable this object represents.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Parameter[] synthesizeAllParams()",
    "returnType" : "Parameter[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyParameters(final Parameter[] parameters)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Parameter[] privateGetParameters()",
    "returnType" : "Parameter[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasRealParameterData()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Parameter[] getParameters0()",
    "returnType" : "Parameter[]",
    "comment" : " Android-changed: Added @FastNative to getParameters0()",
    "links" : [ ]
  }, {
    "name" : "public abstract Class<?>[] getExceptionTypes()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * Returns an array of {@code Class} objects that represent the\n     * types of exceptions declared to be thrown by the underlying\n     * executable represented by this object.  Returns an array of\n     * length 0 if the executable declares no exceptions in its {@code\n     * throws} clause.\n     *\n     * @return the exception types declared as being thrown by the\n     * executable this object represents\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type[] getGenericExceptionTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * Returns an array of {@code Type} objects that represent the\n     * exceptions declared to be thrown by this executable object.\n     * Returns an array of length 0 if the underlying executable declares\n     * no exceptions in its {@code throws} clause.\n     *\n     * <p>If an exception type is a type variable or a parameterized\n     * type, it is created. Otherwise, it is resolved.\n     *\n     * @return an array of Types that represent the exception types\n     *     thrown by the underlying executable\n     * @throws GenericSignatureFormatError\n     *     if the generic method signature does not conform to the format\n     *     specified in\n     *     <cite>The Java&trade; Virtual Machine Specification</cite>\n     * @throws TypeNotPresentException if the underlying executable's\n     *     {@code throws} clause refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if\n     *     the underlying executable's {@code throws} clause refers to a\n     *     parameterized type that cannot be instantiated for any reason\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toGenericString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Executable}, including\n     * any type parameters.\n     * @return a string describing this {@code Executable}, including\n     * any type parameters\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVarArgs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this executable was declared to take a\n     * variable number of arguments; returns {@code false} otherwise.\n     *\n     * @return {@code true} if an only if this executable was declared\n     * to take a variable number of arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSynthetic()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this executable is a synthetic\n     * construct; returns {@code false} otherwise.\n     *\n     * @return true if and only if this executable is a synthetic\n     * construct as defined by\n     * <cite>The Java&trade; Language Specification</cite>.\n     * @jls 13.1 The Form of a Binary\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Annotation[][] getParameterAnnotations()",
    "returnType" : "Annotation[][]",
    "comment" : "\n     * Returns an array of arrays of {@code Annotation}s that\n     * represent the annotations on the formal parameters, in\n     * declaration order, of the {@code Executable} represented by\n     * this object.  Synthetic and mandated parameters (see\n     * explanation below), such as the outer \"this\" parameter to an\n     * inner class constructor will be represented in the returned\n     * array.  If the executable has no parameters (meaning no formal,\n     * no synthetic, and no mandated parameters), a zero-length array\n     * will be returned.  If the {@code Executable} has one or more\n     * parameters, a nested array of length zero is returned for each\n     * parameter with no annotations. The annotation objects contained\n     * in the returned arrays are serializable.  The caller of this\n     * method is free to modify the returned arrays; it will have no\n     * effect on the arrays returned to other callers.\n     *\n     * A compiler may add extra parameters that are implicitly\n     * declared in source (\"mandated\"), as well as parameters that\n     * are neither implicitly nor explicitly declared in source\n     * (\"synthetic\") to the parameter list for a method.  See {@link\n     * java.lang.reflect.Parameter} for more information.\n     *\n     * @see java.lang.reflect.Parameter\n     * @see java.lang.reflect.Parameter#getAnnotations\n     * @return an array of arrays that represent the annotations on\n     *    the formal and implicit parameters, in declaration order, of\n     *    the executable represented by this object\n     ",
    "links" : [ "java.lang.reflect.Parameter" ]
  }, {
    "name" : "public T getAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException  {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private native T getAnnotationNative(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : " Android-changed: Implemented getAnnotation(Class) natively.",
    "links" : [ ]
  }, {
    "name" : "public T[] getAnnotationsByType(Class<T> annotationClass)",
    "returnType" : "T[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private native Annotation[] getDeclaredAnnotationsNative()",
    "returnType" : "Annotation[]",
    "comment" : " Android-added: Implemented getDeclaredAnnotations() natively.",
    "links" : [ ]
  }, {
    "name" : "private static int fixMethodFlags(int flags)",
    "returnType" : "int",
    "comment" : "\n     * We insert native method stubs for abstract methods so we don't have to\n     * check the access flags at the time of the method call.  This results in\n     * \"native abstract\" methods, which can't exist.  If we see the \"abstract\"\n     * flag set, clear the \"native\" flag.\n     *\n     * We also move the DECLARED_SYNCHRONIZED flag into the SYNCHRONIZED\n     * position, because the callers of this function are trying to convey\n     * the \"traditional\" meaning of the flags to their callers.\n     ",
    "links" : [ ]
  }, {
    "name" : " final int getModifiersInternal()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Class<?> getDeclaringClassInternal()",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final native Class<?>[] getParameterTypesInternal()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * Returns an array of {@code Class} objects associated with the parameter types of this\n     * Executable. If the Executable was declared with no parameters, {@code null} will be\n     * returned.\n     *\n     * @return the parameter types, or {@code null} if no parameters were declared.\n     ",
    "links" : [ ]
  }, {
    "name" : " final native int getParameterCountInternal()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isAnnotationPresent(Class<? extends Annotation> annotationType)",
    "returnType" : "boolean",
    "comment" : " implemented in AnnotatedElement.",
    "links" : [ ]
  }, {
    "name" : "private native boolean isAnnotationPresentNative(Class<? extends Annotation> annotationType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Annotation[][] getParameterAnnotationsInternal()",
    "returnType" : "Annotation[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native Annotation[][] getParameterAnnotationsNative()",
    "returnType" : "Annotation[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getAccessFlags()",
    "returnType" : "int",
    "comment" : "\n     * @hide - exposed for use by {@link Class}.\n     ",
    "links" : [ "Class" ]
  }, {
    "name" : "public final long getArtMethod()",
    "returnType" : "long",
    "comment" : "\n     * @hide - exposed for use by {@code java.lang.invoke.*}.\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean hasGenericInformationInternal()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final GenericInfo getMethodOrConstructorGenericInfoInternal()",
    "returnType" : "GenericInfo",
    "comment" : "\n     * Returns generic information associated with this method/constructor member.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getSignatureAttribute()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native String[] getSignatureAnnotation()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean equalNameAndParametersInternal(Method m)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " native int compareMethodParametersInternal(Method meth)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final native String getMethodNameInternal()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final native Class<?> getMethodReturnTypeInternal()",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean isDefaultMethodInternal()",
    "returnType" : "boolean",
    "comment" : " A cheap implementation for {@link Method#isDefault()}. ",
    "links" : [ "java.lang.reflect.Method#isDefault()" ]
  }, {
    "name" : " final boolean isBridgeMethodInternal()",
    "returnType" : "boolean",
    "comment" : " A cheap implementation for {@link Method#isBridge()}. ",
    "links" : [ "java.lang.reflect.Method#isBridge()" ]
  } ],
  "methodNames" : [ " abstract boolean hasGenericInformation()", " boolean equalParamTypes(Class<?>[] params1, Class<?>[] params2)", " void separateWithCommas(Class<?>[] types, StringBuilder sb)", " void printModifiersIfNonzero(StringBuilder sb, int mask, boolean isDefault)", " String sharedToString(int modifierMask, boolean isDefault, Class<?>[] parameterTypes, Class<?>[] exceptionTypes)", " abstract void specificToStringHeader(StringBuilder sb)", " String sharedToGenericString(int modifierMask, boolean isDefault)", " abstract void specificToGenericStringHeader(StringBuilder sb)", "public abstract Class<?> getDeclaringClass()", "public abstract String getName()", "public abstract int getModifiers()", "public abstract TypeVariable<?>[] getTypeParameters()", "public abstract Class<?>[] getParameterTypes()", "public int getParameterCount()", "public Type[] getGenericParameterTypes()", " Type[] getAllGenericParameterTypes()", "public Parameter[] getParameters()", "private Parameter[] synthesizeAllParams()", "private void verifyParameters(final Parameter[] parameters)", "private Parameter[] privateGetParameters()", " boolean hasRealParameterData()", "private native Parameter[] getParameters0()", "public abstract Class<?>[] getExceptionTypes()", "public Type[] getGenericExceptionTypes()", "public abstract String toGenericString()", "public boolean isVarArgs()", "public boolean isSynthetic()", "public abstract Annotation[][] getParameterAnnotations()", "public T getAnnotation(Class<T> annotationClass)", "private native T getAnnotationNative(Class<T> annotationClass)", "public T[] getAnnotationsByType(Class<T> annotationClass)", "public Annotation[] getDeclaredAnnotations()", "private native Annotation[] getDeclaredAnnotationsNative()", "private static int fixMethodFlags(int flags)", " final int getModifiersInternal()", " final Class<?> getDeclaringClassInternal()", " final native Class<?>[] getParameterTypesInternal()", " final native int getParameterCountInternal()", "public final boolean isAnnotationPresent(Class<? extends Annotation> annotationType)", "private native boolean isAnnotationPresentNative(Class<? extends Annotation> annotationType)", " final Annotation[][] getParameterAnnotationsInternal()", "private native Annotation[][] getParameterAnnotationsNative()", "public final int getAccessFlags()", "public final long getArtMethod()", " final boolean hasGenericInformationInternal()", " final GenericInfo getMethodOrConstructorGenericInfoInternal()", "private String getSignatureAttribute()", "private native String[] getSignatureAnnotation()", " final boolean equalNameAndParametersInternal(Method m)", " native int compareMethodParametersInternal(Method meth)", " final native String getMethodNameInternal()", " final native Class<?> getMethodReturnTypeInternal()", " final boolean isDefaultMethodInternal()", " final boolean isBridgeMethodInternal()" ],
  "variableNames" : [ "hasRealParameterData", "parameters", "accessFlags", "artMethod", "declaringClass", "declaringClassOfOverriddenMethod", "dexMethodIndex" ]
}