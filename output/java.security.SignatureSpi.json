{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/SignatureSpi.java",
  "packageName" : "java.security",
  "className" : "SignatureSpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "appRandom",
    "type" : "SecureRandom",
    "comment" : "\n     * Application-specified source of randomness.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract void engineInitVerify(PublicKey publicKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this signature object with the specified\n     * public key for verification operations.\n     *\n     * @param publicKey the public key of the identity whose signature is\n     * going to be verified.\n     *\n     * @exception InvalidKeyException if the key is improperly\n     * encoded, parameters are missing, and so on.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineInitSign(PrivateKey privateKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this signature object with the specified\n     * private key for signing operations.\n     *\n     * @param privateKey the private key of the identity whose signature\n     * will be generated.\n     *\n     * @exception InvalidKeyException if the key is improperly\n     * encoded, parameters are missing, and so on.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void engineInitSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this signature object with the specified\n     * private key and source of randomness for signing operations.\n     *\n     * <p>This concrete method has been added to this previously-defined\n     * abstract class. (For backwards compatibility, it cannot be abstract.)\n     *\n     * @param privateKey the private key of the identity whose signature\n     * will be generated.\n     * @param random the source of randomness\n     *\n     * @exception InvalidKeyException if the key is improperly\n     * encoded, parameters are missing, and so on.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineUpdate(byte b) throws SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified\n     * using the specified byte.\n     *\n     * @param b the byte to use for the update.\n     *\n     * @exception SignatureException if the engine is not initialized\n     * properly.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineUpdate(byte[] b, int off, int len) throws SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified, using the\n     * specified array of bytes, starting at the specified offset.\n     *\n     * @param b the array of bytes\n     * @param off the offset to start from in the array of bytes\n     * @param len the number of bytes to use, starting at offset\n     *\n     * @exception SignatureException if the engine is not initialized\n     * properly\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void engineUpdate(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "\n     * Updates the data to be signed or verified using the specified\n     * ByteBuffer. Processes the {@code data.remaining()} bytes\n     * starting at at {@code data.position()}.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param input the ByteBuffer\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte[] engineSign() throws SignatureException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the signature bytes of all the data\n     * updated so far.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * @return the signature bytes of the signing operation's result.\n     *\n     * @exception SignatureException if the engine is not\n     * initialized properly or if this signature algorithm is unable to\n     * process the input data provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int engineSign(byte[] outbuf, int offset, int len) throws SignatureException",
    "returnType" : "int",
    "comment" : "\n     * Finishes this signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>The signature implementation is reset to its initial state\n     * (the state it was in after a call to one of the\n     * {@code engineInitSign} methods)\n     * and can be reused to generate further signatures with the same private\n     * key.\n     *\n     * This method should be abstract, but we leave it concrete for\n     * binary compatibility.  Knowledgeable providers should override this\n     * method.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     * Both this default implementation and the SUN provider do not\n     * return partial digests. If the value of this parameter is less\n     * than the actual signature length, this method will throw a\n     * SignatureException.\n     * This parameter is ignored if its value is greater than or equal to\n     * the actual signature length.\n     *\n     * @return the number of bytes placed into {@code outbuf}\n     *\n     * @exception SignatureException if the engine is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract boolean engineVerify(byte[] sigBytes) throws SignatureException",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies the passed-in signature.\n     *\n     * @param sigBytes the signature bytes to be verified.\n     *\n     * @return true if the signature was verified, false if not.\n     *\n     * @exception SignatureException if the engine is not\n     * initialized properly, the passed-in signature is improperly\n     * encoded or of the wrong type, if this signature algorithm is unable to\n     * process the input data provided, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean engineVerify(byte[] sigBytes, int offset, int length) throws SignatureException",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies the passed-in signature in the specified array\n     * of bytes, starting at the specified offset.\n     *\n     * <p> Note: Subclasses should overwrite the default implementation.\n     *\n     *\n     * @param sigBytes the signature bytes to be verified.\n     * @param offset the offset to start from in the array of bytes.\n     * @param length the number of bytes to use, starting at offset.\n     *\n     * @return true if the signature was verified, false if not.\n     *\n     * @exception SignatureException if the engine is not\n     * initialized properly, the passed-in signature is improperly\n     * encoded or of the wrong type, if this signature algorithm is unable to\n     * process the input data provided, etc.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineSetParameter(String param, Object value) throws InvalidParameterException",
    "returnType" : "void",
    "comment" : "\n     * Sets the specified algorithm parameter to the specified\n     * value. This method supplies a general-purpose mechanism through\n     * which it is possible to set the various parameters of this object.\n     * A parameter may be any settable parameter for the algorithm, such as\n     * a parameter size, or a source of random bits for signature generation\n     * (if appropriate), or an indication of whether or not to perform\n     * a specific but optional computation. A uniform algorithm-specific\n     * naming scheme for each parameter is desirable but left unspecified\n     * at this time.\n     *\n     * @param param the string identifier of the parameter.\n     *\n     * @param value the parameter value.\n     *\n     * @exception InvalidParameterException if {@code param} is an\n     * invalid parameter for this signature algorithm engine,\n     * the parameter is already set\n     * and cannot be set again, a security exception occurs, and so on.\n     *\n     * @deprecated Replaced by {@link\n     * #engineSetParameter(java.security.spec.AlgorithmParameterSpec)\n     * engineSetParameter}.\n     ",
    "links" : [ "#engineSetParameter(java.security.spec.AlgorithmParameterSpec)" ]
  }, {
    "name" : "protected void engineSetParameter(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * <p>This method is overridden by providers to initialize\n     * this signature engine with the specified parameter set.\n     *\n     * @param params the parameters\n     *\n     * @exception UnsupportedOperationException if this method is not\n     * overridden by a provider\n     *\n     * @exception InvalidAlgorithmParameterException if this method is\n     * overridden by a provider and the given parameters\n     * are inappropriate for this signature engine\n     ",
    "links" : [ ]
  }, {
    "name" : "protected AlgorithmParameters engineGetParameters()",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * <p>This method is overridden by providers to return the\n     * parameters used with this signature engine, or null\n     * if this signature engine does not use any parameters.\n     *\n     * <p>The returned parameters may be the same that were used to initialize\n     * this signature engine, or may contain a combination of default and\n     * randomly generated parameter values used by the underlying signature\n     * implementation if this signature engine requires algorithm parameters\n     * but was not initialized with any.\n     *\n     * @return the parameters used with this signature engine, or null if this\n     * signature engine does not use any parameters\n     *\n     * @exception UnsupportedOperationException if this method is\n     * not overridden by a provider\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract Object engineGetParameter(String param) throws InvalidParameterException",
    "returnType" : "Object",
    "comment" : "\n     * Gets the value of the specified algorithm parameter.\n     * This method supplies a general-purpose mechanism through which it\n     * is possible to get the various parameters of this object. A parameter\n     * may be any settable parameter for the algorithm, such as a parameter\n     * size, or  a source of random bits for signature generation (if\n     * appropriate), or an indication of whether or not to perform a\n     * specific but optional computation. A uniform algorithm-specific\n     * naming scheme for each parameter is desirable but left unspecified\n     * at this time.\n     *\n     * @param param the string name of the parameter.\n     *\n     * @return the object that represents the parameter value, or null if\n     * there is none.\n     *\n     * @exception InvalidParameterException if {@code param} is an\n     * invalid parameter for this engine, or another exception occurs while\n     * trying to get this parameter.\n     *\n     * @deprecated Deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone if the implementation is cloneable.\n     *\n     * @return a clone if the implementation is cloneable.\n     *\n     * @exception CloneNotSupportedException if this is called\n     * on an implementation that does not support {@code Cloneable}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract void engineInitVerify(PublicKey publicKey) throws InvalidKeyException", "protected abstract void engineInitSign(PrivateKey privateKey) throws InvalidKeyException", "protected void engineInitSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException", "protected abstract void engineUpdate(byte b) throws SignatureException", "protected abstract void engineUpdate(byte[] b, int off, int len) throws SignatureException", "protected void engineUpdate(ByteBuffer input)", "protected abstract byte[] engineSign() throws SignatureException", "protected int engineSign(byte[] outbuf, int offset, int len) throws SignatureException", "protected abstract boolean engineVerify(byte[] sigBytes) throws SignatureException", "protected boolean engineVerify(byte[] sigBytes, int offset, int length) throws SignatureException", "protected abstract void engineSetParameter(String param, Object value) throws InvalidParameterException", "protected void engineSetParameter(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException", "protected AlgorithmParameters engineGetParameters()", "protected abstract Object engineGetParameter(String param) throws InvalidParameterException", "public Object clone() throws CloneNotSupportedException" ],
  "variableNames" : [ "appRandom" ]
}