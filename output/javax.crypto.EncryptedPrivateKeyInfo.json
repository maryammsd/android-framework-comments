{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/EncryptedPrivateKeyInfo.java",
  "packageName" : "javax.crypto",
  "className" : "EncryptedPrivateKeyInfo",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "algid",
    "type" : "AlgorithmId",
    "comment" : " the \"encryptionAlgorithm\" field",
    "links" : [ ]
  }, {
    "name" : "encryptedData",
    "type" : "byte[]",
    "comment" : " the \"encryptedData\" field",
    "links" : [ ]
  }, {
    "name" : "encoded",
    "type" : "byte[]",
    "comment" : " the ASN.1 encoded contents of this class",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getAlgName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the encryption algorithm.\n     * <p>Note: Standard name is returned instead of the specified one\n     * in the constructor when such mapping is available.\n     * See Appendix A in the\n     * <a href=\n     *   \"{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n     * Java Cryptography Architecture Reference Guide</a>\n     * for information about standard Cipher algorithm names.\n     *\n     * @return the encryption algorithm name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AlgorithmParameters getAlgParameters()",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Returns the algorithm parameters used by the encryption algorithm.\n     * @return the algorithm parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getEncryptedData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the encrypted data.\n     * @return the encrypted data. Returns a new array\n     * each time this method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PKCS8EncodedKeySpec getKeySpec(Cipher cipher) throws InvalidKeySpecException",
    "returnType" : "PKCS8EncodedKeySpec",
    "comment" : "\n     * Extract the enclosed PKCS8EncodedKeySpec object from the\n     * encrypted data and return it.\n     * <br>Note: In order to successfully retrieve the enclosed\n     * PKCS8EncodedKeySpec object, <code>cipher</code> needs\n     * to be initialized to either Cipher.DECRYPT_MODE or\n     * Cipher.UNWRAP_MODE, with the same key and parameters used\n     * for generating the encrypted data.\n     *\n     * @param cipher the initialized cipher object which will be\n     * used for decrypting the encrypted data.\n     * @return the PKCS8EncodedKeySpec object.\n     * @exception NullPointerException if <code>cipher</code>\n     * is null.\n     * @exception InvalidKeySpecException if the given cipher is\n     * inappropriate for the encrypted data or the encrypted\n     * data is corrupted and cannot be decrypted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private PKCS8EncodedKeySpec getKeySpecImpl(Key decryptKey, Provider provider) throws NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "PKCS8EncodedKeySpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PKCS8EncodedKeySpec getKeySpec(Key decryptKey) throws NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "PKCS8EncodedKeySpec",
    "comment" : "\n     * Extract the enclosed PKCS8EncodedKeySpec object from the\n     * encrypted data and return it.\n     * @param decryptKey key used for decrypting the encrypted data.\n     * @return the PKCS8EncodedKeySpec object.\n     * @exception NullPointerException if <code>decryptKey</code>\n     * is null.\n     * @exception NoSuchAlgorithmException if cannot find appropriate\n     * cipher to decrypt the encrypted data.\n     * @exception InvalidKeyException if <code>decryptKey</code>\n     * cannot be used to decrypt the encrypted data or the decryption\n     * result is not a valid PKCS8KeySpec.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PKCS8EncodedKeySpec getKeySpec(Key decryptKey, String providerName) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "PKCS8EncodedKeySpec",
    "comment" : "\n     * Extract the enclosed PKCS8EncodedKeySpec object from the\n     * encrypted data and return it.\n     * @param decryptKey key used for decrypting the encrypted data.\n     * @param providerName the name of provider whose Cipher\n     * implementation will be used.\n     * @return the PKCS8EncodedKeySpec object.\n     * @exception NullPointerException if <code>decryptKey</code>\n     * or <code>providerName</code> is null.\n     * @exception NoSuchProviderException if no provider\n     * <code>providerName</code> is registered.\n     * @exception NoSuchAlgorithmException if cannot find appropriate\n     * cipher to decrypt the encrypted data.\n     * @exception InvalidKeyException if <code>decryptKey</code>\n     * cannot be used to decrypt the encrypted data or the decryption\n     * result is not a valid PKCS8KeySpec.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PKCS8EncodedKeySpec getKeySpec(Key decryptKey, Provider provider) throws NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "PKCS8EncodedKeySpec",
    "comment" : "\n     * Extract the enclosed PKCS8EncodedKeySpec object from the\n     * encrypted data and return it.\n     * @param decryptKey key used for decrypting the encrypted data.\n     * @param provider the name of provider whose Cipher implementation\n     * will be used.\n     * @return the PKCS8EncodedKeySpec object.\n     * @exception NullPointerException if <code>decryptKey</code>\n     * or <code>provider</code> is null.\n     * @exception NoSuchAlgorithmException if cannot find appropriate\n     * cipher to decrypt the encrypted data in <code>provider</code>.\n     * @exception InvalidKeyException if <code>decryptKey</code>\n     * cannot be used to decrypt the encrypted data or the decryption\n     * result is not a valid PKCS8KeySpec.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getEncoded() throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the ASN.1 encoding of this object.\n     * @return the ASN.1 encoding. Returns a new array\n     * each time this method is called.\n     * @exception IOException if error occurs when constructing its\n     * ASN.1 encoding.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkTag(DerValue val, byte tag, String valName) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkPKCS8Encoding(byte[] encodedKey) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getAlgName()", "public AlgorithmParameters getAlgParameters()", "public byte[] getEncryptedData()", "public PKCS8EncodedKeySpec getKeySpec(Cipher cipher) throws InvalidKeySpecException", "private PKCS8EncodedKeySpec getKeySpecImpl(Key decryptKey, Provider provider) throws NoSuchAlgorithmException, InvalidKeyException", "public PKCS8EncodedKeySpec getKeySpec(Key decryptKey) throws NoSuchAlgorithmException, InvalidKeyException", "public PKCS8EncodedKeySpec getKeySpec(Key decryptKey, String providerName) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException", "public PKCS8EncodedKeySpec getKeySpec(Key decryptKey, Provider provider) throws NoSuchAlgorithmException, InvalidKeyException", "public byte[] getEncoded() throws IOException", "private static void checkTag(DerValue val, byte tag, String valName) throws IOException", "private static void checkPKCS8Encoding(byte[] encodedKey) throws IOException" ],
  "variableNames" : [ "algid", "encryptedData", "encoded" ]
}