{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/DocumentType.java",
  "packageName" : "org.w3c.dom",
  "className" : "DocumentType",
  "comment" : "\n * Each <code>Document</code> has a <code>doctype</code> attribute whose value\n * is either <code>null</code> or a <code>DocumentType</code> object. The\n * <code>DocumentType</code> interface in the DOM Core provides an interface\n * to the list of entities that are defined for the document, and little\n * else because the effect of namespaces and the various XML schema efforts\n * on DTD representation are not clearly understood as of this writing.\n * <p>DOM Level 3 doesn't support editing <code>DocumentType</code> nodes.\n * <code>DocumentType</code> nodes are read-only.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * The name of DTD; i.e., the name immediately following the\n     * <code>DOCTYPE</code> keyword.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getEntities()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n     * A <code>NamedNodeMap</code> containing the general entities, both\n     * external and internal, declared in the DTD. Parameter entities are\n     * not contained. Duplicates are discarded. For example in:\n     * <pre>&lt;!DOCTYPE\n     * ex SYSTEM \"ex.dtd\" [ &lt;!ENTITY foo \"foo\"&gt; &lt;!ENTITY bar\n     * \"bar\"&gt; &lt;!ENTITY bar \"bar2\"&gt; &lt;!ENTITY % baz \"baz\"&gt;\n     * ]&gt; &lt;ex/&gt;</pre>\n     *  the interface provides access to <code>foo</code>\n     * and the first declaration of <code>bar</code> but not the second\n     * declaration of <code>bar</code> or <code>baz</code>. Every node in\n     * this map also implements the <code>Entity</code> interface.\n     * <br>The DOM Level 2 does not support editing entities, therefore\n     * <code>entities</code> cannot be altered in any way.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getNotations()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n     * A <code>NamedNodeMap</code> containing the notations declared in the\n     * DTD. Duplicates are discarded. Every node in this map also implements\n     * the <code>Notation</code> interface.\n     * <br>The DOM Level 2 does not support editing notations, therefore\n     * <code>notations</code> cannot be altered in any way.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPublicId()",
    "returnType" : "String",
    "comment" : "\n     * The public identifier of the external subset.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n     * The system identifier of the external subset. This may be an absolute\n     * URI or not.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInternalSubset()",
    "returnType" : "String",
    "comment" : "\n     * The internal subset as a string, or <code>null</code> if there is none.\n     * This is does not contain the delimiting square brackets.\n     * <p ><b>Note:</b> The actual content returned depends on how much\n     * information is available to the implementation. This may vary\n     * depending on various parameters, including the XML processor used to\n     * build the document.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public NamedNodeMap getEntities()", "public NamedNodeMap getNotations()", "public String getPublicId()", "public String getSystemId()", "public String getInternalSubset()" ],
  "variableNames" : [ ]
}