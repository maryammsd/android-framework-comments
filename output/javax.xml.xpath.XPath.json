{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/xpath/XPath.java",
  "packageName" : "javax.xml.xpath",
  "className" : "XPath",
  "comment" : "\n * <p><code>XPath</code> provides access to the XPath evaluation environment and expressions.</p>\n *\n * <table id=\"XPath-evaluation\" border=\"1\" cellpadding=\"2\">\n *   <thead>\n *     <tr>\n *       <th colspan=\"2\">Evaluation of XPath Expressions.</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>context</td>\n *       <td>\n *         If a request is made to evaluate the expression in the absence\n * of a context item, an empty document node will be used for the context.\n * For the purposes of evaluating XPath expressions, a DocumentFragment\n * is treated like a Document node.\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>variables</td>\n *      <td>\n *        If the expression contains a variable reference, its value will be found through the {@link XPathVariableResolver}\n *        set with {@link #setXPathVariableResolver(XPathVariableResolver resolver)}.\n *        An {@link XPathExpressionException} is raised if the variable resolver is undefined or\n *        the resolver returns <code>null</code> for the variable.\n *        The value of a variable must be immutable through the course of any single evaluation.</p>\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>functions</td>\n *      <td>\n *        If the expression contains a function reference, the function will be found through the {@link XPathFunctionResolver}\n *        set with {@link #setXPathFunctionResolver(XPathFunctionResolver resolver)}.\n *        An {@link XPathExpressionException} is raised if the function resolver is undefined or\n *        the function resolver returns <code>null</code> for the function.</p>\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>QNames</td>\n *      <td>\n *        QNames in the expression are resolved against the XPath namespace context\n *        set with {@link #setNamespaceContext(NamespaceContext nsContext)}.\n *      </td>\n *    </tr>\n *    <tr>\n *      <td>result</td>\n *      <td>\n *        This result of evaluating an expression is converted to an instance of the desired return type.\n *        Valid return types are defined in {@link XPathConstants}.\n *        Conversion to the return type follows XPath conversion rules.</p>\n *      </td>\n *    </tr>\n * </table>\n *\n * @author  <a href=\"Norman.Walsh@Sun.com\">Norman Walsh</a>\n * @author  <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 569998 $, $Date: 2007-08-26 21:40:02 -0700 (Sun, 26 Aug 2007) $\n * @see <a href=\"http://www.w3.org/TR/xpath\">XML Path Language (XPath) Version 1.0</a>\n * @since 1.5\n ",
  "links" : [ "javax.xml.xpath.XPathExpressionException", "javax.xml.xpath.XPathVariableResolver", "javax.xml.xpath.XPathFunctionResolver", "javax.xml.xpath.XPathConstants", "#setXPathVariableResolver(XPathVariableResolver", "#setXPathFunctionResolver(XPathFunctionResolver", "#setNamespaceContext(NamespaceContext" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * <p>Reset this <code>XPath</code> to its original configuration.</p>\n     *\n     * <p><code>XPath</code> is reset to the same state as when it was created with\n     * {@link XPathFactory#newXPath()}.\n     * <code>reset()</code> is designed to allow the reuse of existing <code>XPath</code>s\n     * thus saving resources associated with the creation of new <code>XPath</code>s.</p>\n     *\n     * <p>The reset <code>XPath</code> is not guaranteed to have the same {@link XPathFunctionResolver}, {@link XPathVariableResolver}\n     * or {@link NamespaceContext} <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.\n     * It is guaranteed to have a functionally equal <code>XPathFunctionResolver</code>, <code>XPathVariableResolver</code>\n     * and <code>NamespaceContext</code>.</p>\n     ",
    "links" : [ "javax.xml.xpath.XPathFactory#newXPath()", "javax.xml.xpath.XPathVariableResolver", "javax.xml.xpath.XPathFunctionResolver", "#equals(Object", "javax.xml.namespace.NamespaceContext" ]
  }, {
    "name" : "public void setXPathVariableResolver(XPathVariableResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * <p>Establish a variable resolver.</p>\n     *\n     * <p>A <code>NullPointerException</code> is thrown if <code>resolver</code> is <code>null</code>.</p>\n     *\n     * @param resolver Variable resolver.\n     *\n     *  @throws NullPointerException If <code>resolver</code> is <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public XPathVariableResolver getXPathVariableResolver()",
    "returnType" : "XPathVariableResolver",
    "comment" : "\n       * <p>Return the current variable resolver.</p>\n       *\n       * <p><code>null</code> is returned in no variable resolver is in effect.</p>\n       *\n       * @return Current variable resolver.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setXPathFunctionResolver(XPathFunctionResolver resolver)",
    "returnType" : "void",
    "comment" : "\n       * <p>Establish a function resolver.</p>\n       *\n       * <p>A <code>NullPointerException</code> is thrown if <code>resolver</code> is <code>null</code>.</p>\n       *\n       * @param resolver XPath function resolver.\n       *\n       * @throws NullPointerException If <code>resolver</code> is <code>null</code>.\n       ",
    "links" : [ ]
  }, {
    "name" : "public XPathFunctionResolver getXPathFunctionResolver()",
    "returnType" : "XPathFunctionResolver",
    "comment" : "\n       * <p>Return the current function resolver.</p>\n       *\n       * <p><code>null</code> is returned in no function resolver is in effect.</p>\n       *\n       * @return Current function resolver.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceContext(NamespaceContext nsContext)",
    "returnType" : "void",
    "comment" : "\n       * <p>Establish a namespace context.</p>\n       *\n       * <p>A <code>NullPointerException</code> is thrown if <code>nsContext</code> is <code>null</code>.</p>\n       *\n       * @param nsContext Namespace context to use.\n       *\n       * @throws NullPointerException If <code>nsContext</code> is <code>null</code>.\n       ",
    "links" : [ ]
  }, {
    "name" : "public NamespaceContext getNamespaceContext()",
    "returnType" : "NamespaceContext",
    "comment" : "\n       * <p>Return the current namespace context.</p>\n       *\n       * <p><code>null</code> is returned in no namespace context is in effect.</p>\n       *\n       * @return Current Namespace context.\n       ",
    "links" : [ ]
  }, {
    "name" : "public XPathExpression compile(String expression) throws XPathExpressionException",
    "returnType" : "XPathExpression",
    "comment" : "\n       * <p>Compile an XPath expression for later evaluation.</p>\n       *\n       * <p>If <code>expression</code> contains any {@link XPathFunction}s,\n       * they must be available via the {@link XPathFunctionResolver}.\n       * An {@link XPathExpressionException} will be thrown if the <code>XPathFunction</code>\n       * cannot be resolved with the <code>XPathFunctionResolver</code>.</p>\n       *\n       * <p>If <code>expression</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.</p>\n       *\n       * @param expression The XPath expression.\n       *\n       * @return Compiled XPath expression.\n\n       * @throws XPathExpressionException If <code>expression</code> cannot be compiled.\n       * @throws NullPointerException If <code>expression</code> is <code>null</code>.\n       ",
    "links" : [ "javax.xml.xpath.XPathExpressionException", "javax.xml.xpath.XPathFunctionResolver", "javax.xml.xpath.XPathFunction" ]
  }, {
    "name" : "public Object evaluate(String expression, Object item, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate an <code>XPath</code> expression in the specified context and return the result as the specified type.</p>\n     *\n     * <p>See <a href=\"#XPath-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and <code>QName</code> resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in {@link XPathConstants} (\n     * {@link XPathConstants#NUMBER NUMBER},\n     * {@link XPathConstants#STRING STRING},\n     * {@link XPathConstants#BOOLEAN BOOLEAN},\n     * {@link XPathConstants#NODE NODE} or\n     * {@link XPathConstants#NODESET NODESET})\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     * If <code>expression</code> or <code>returnType</code> is <code>null</code>, then a\n     * <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param item The starting context (node or node list, for example).\n     * @param returnType The desired return type.\n     *\n     * @return Result of evaluating an XPath expression as an <code>Object</code> of <code>returnType</code>.\n     *\n     * @throws XPathExpressionException If <code>expression</code> cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If <code>expression</code> or <code>returnType</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#NUMBER", "javax.xml.xpath.XPathConstants#BOOLEAN", "javax.xml.xpath.XPathConstants#STRING", "javax.xml.xpath.XPathConstants", "javax.xml.xpath.XPathConstants#NODE", "javax.xml.xpath.XPathConstants#NODESET" ]
  }, {
    "name" : "public String evaluate(String expression, Object item) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate an XPath expression in the specified context and return the result as a <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(String expression, Object item, QName returnType)} with a <code>returnType</code> of\n     * {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See <a href=\"#XPath-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     * If <code>expression</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param item The starting context (node or node list, for example).\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and\n     *   converting the result to a <code>String</code>.\n     *\n     * @throws XPathExpressionException If <code>expression</code> cannot be evaluated.\n     * @throws NullPointerException If <code>expression</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(String" ]
  }, {
    "name" : "public Object evaluate(String expression, InputSource source, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate an XPath expression in the context of the specified <code>InputSource</code>\n     * and return the result as the specified type.</p>\n     *\n     * <p>This method builds a data model for the {@link InputSource} and calls\n     * {@link #evaluate(String expression, Object item, QName returnType)} on the resulting document object.</p>\n     *\n     * <p>See <a href=\"#XPath-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in {@link XPathConstants},\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If <code>expression</code>, <code>source</code> or <code>returnType</code> is <code>null</code>,\n     * then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param source The input source of the document to evaluate over.\n     * @param returnType The desired return type.\n     *\n     * @return The <code>Object</code> that encapsulates the result of evaluating the expression.\n     *\n     * @throws XPathExpressionException If expression cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If <code>expression</code>, <code>source</code> or <code>returnType</code>\n     *   is <code>null</code>.\n     ",
    "links" : [ "org.xml.sax.InputSource", "javax.xml.xpath.XPathConstants", "#evaluate(String" ]
  }, {
    "name" : "public String evaluate(String expression, InputSource source) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate an XPath expression in the context of the specified <code>InputSource</code>\n     * and return the result as a <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(String expression, InputSource source, QName returnType)} with a\n     * <code>returnType</code> of {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See <a href=\"#XPath-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>expression</code> or <code>source</code> is <code>null</code>,\n     * then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param source The <code>InputSource</code> of the document to evaluate over.\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and\n     *   converting the result to a <code>String</code>.\n     *\n     * @throws XPathExpressionException If expression cannot be evaluated.\n     * @throws NullPointerException If <code>expression</code> or <code>source</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(String" ]
  } ],
  "methodNames" : [ "public void reset()", "public void setXPathVariableResolver(XPathVariableResolver resolver)", "public XPathVariableResolver getXPathVariableResolver()", "public void setXPathFunctionResolver(XPathFunctionResolver resolver)", "public XPathFunctionResolver getXPathFunctionResolver()", "public void setNamespaceContext(NamespaceContext nsContext)", "public NamespaceContext getNamespaceContext()", "public XPathExpression compile(String expression) throws XPathExpressionException", "public Object evaluate(String expression, Object item, QName returnType) throws XPathExpressionException", "public String evaluate(String expression, Object item) throws XPathExpressionException", "public Object evaluate(String expression, InputSource source, QName returnType) throws XPathExpressionException", "public String evaluate(String expression, InputSource source) throws XPathExpressionException" ],
  "variableNames" : [ ]
}