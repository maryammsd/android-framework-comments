{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebViewRenderProcessClient.java",
  "packageName" : "android.webkit",
  "className" : "WebViewRenderProcessClient",
  "comment" : "\n * Used to receive callbacks on {@link WebView} renderer events.\n *\n * WebViewRenderProcessClient instances may be set or retrieved via {@link\n * WebView#setWebViewRenderProcessClient(WebViewRenderProcessClient)} and {@link\n * WebView#getWebViewRenderProcessClient()}.\n *\n * Instances may be attached to multiple WebViews, and thus a single renderer event may cause\n * a callback to be called multiple times with different WebView parameters.\n ",
  "links" : [ "android.webkit.WebView#setWebViewRenderProcessClient(WebViewRenderProcessClient)", "android.webkit.WebView#getWebViewRenderProcessClient()", "android.webkit.WebView" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onRenderProcessUnresponsive(@NonNull WebView view, @Nullable WebViewRenderProcess renderer)",
    "returnType" : "void",
    "comment" : "\n     * Called when the renderer currently associated with {@code view} becomes unresponsive as a\n     * result of a long running blocking task such as the execution of JavaScript.\n     *\n     * <p>If a WebView fails to process an input event, or successfully navigate to a new URL within\n     * a reasonable time frame, the renderer is considered to be unresponsive, and this callback\n     * will be called.\n     *\n     * <p>This callback will continue to be called at regular intervals as long as the renderer\n     * remains unresponsive. If the renderer becomes responsive again, {@link\n     * WebViewRenderProcessClient#onRenderProcessResponsive} will be called once, and this method\n     * will not subsequently be called unless another period of unresponsiveness is detected.\n     *\n     * <p>The minimum interval between successive calls to {@code onRenderProcessUnresponsive} is 5\n     * seconds.\n     *\n     * <p>No action is taken by WebView as a result of this method call. Applications may\n     * choose to terminate the associated renderer via the object that is passed to this callback,\n     * if in multiprocess mode, however this must be accompanied by correctly handling\n     * {@link WebViewClient#onRenderProcessGone} for this WebView, and all other WebViews associated\n     * with the same renderer. Failure to do so will result in application termination.\n     *\n     * @param view The {@link WebView} for which unresponsiveness was detected.\n     * @param renderer The {@link WebViewRenderProcess} that has become unresponsive,\n     * or {@code null} if WebView is running in single process mode.\n     ",
    "links" : [ "android.webkit.WebViewRenderProcess", "android.webkit.WebViewClient#onRenderProcessGone", "android.webkit.WebViewRenderProcessClient#onRenderProcessResponsive", "android.webkit.WebView" ]
  }, {
    "name" : "public abstract void onRenderProcessResponsive(@NonNull WebView view, @Nullable WebViewRenderProcess renderer)",
    "returnType" : "void",
    "comment" : "\n     * Called once when an unresponsive renderer currently associated with {@code view} becomes\n     * responsive.\n     *\n     * <p>After a WebView renderer becomes unresponsive, which is notified to the application by\n     * {@link WebViewRenderProcessClient#onRenderProcessUnresponsive}, it is possible for the\n     * blocking renderer task to complete, returning the renderer to a responsive state. In that\n     * case, this method is called once to indicate responsiveness.\n     *\n     * <p>No action is taken by WebView as a result of this method call.\n     *\n     * @param view The {@link WebView} for which responsiveness was detected.\n     *\n     * @param renderer The {@link WebViewRenderProcess} that has become responsive, or {@code null}\n     *                 if WebView is running in single process mode.\n     ",
    "links" : [ "android.webkit.WebViewRenderProcess", "android.webkit.WebView", "android.webkit.WebViewRenderProcessClient#onRenderProcessUnresponsive" ]
  } ],
  "methodNames" : [ "public abstract void onRenderProcessUnresponsive(@NonNull WebView view, @Nullable WebViewRenderProcess renderer)", "public abstract void onRenderProcessResponsive(@NonNull WebView view, @Nullable WebViewRenderProcess renderer)" ],
  "variableNames" : [ ]
}