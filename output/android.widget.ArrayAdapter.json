{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ArrayAdapter.java",
  "packageName" : "android.widget",
  "className" : "ArrayAdapter",
  "comment" : "\n * You can use this adapter to provide views for an {@link AdapterView},\n * Returns a view for each object in a collection of data objects you\n * provide, and can be used with list-based user interface widgets such as\n * {@link ListView} or {@link Spinner}.\n * <p>\n * By default, the array adapter creates a view by calling {@link Object#toString()} on each\n * data object in the collection you provide, and places the result in a TextView.\n * You may also customize what type of view is used for the data object in the collection.\n * To customize what type of view is used for the data object,\n * override {@link #getView(int, View, ViewGroup)}\n * and inflate a view resource.\n * </p>\n * <p>\n * For an example of using an array adapter with a ListView, see the\n * <a href=\"{@docRoot}guide/topics/ui/declaring-layout.html#AdapterViews\">\n * Adapter Views</a> guide.\n * </p>\n * <p>\n * For an example of using an array adapter with a Spinner, see the\n * <a href=\"{@docRoot}guide/topics/ui/controls/spinner.html\">Spinners</a> guide.\n * </p>\n * <p class=\"note\"><strong>Note:</strong>\n * If you are considering using array adapter with a ListView, consider using\n * {@link androidx.recyclerview.widget.RecyclerView} instead.\n * RecyclerView offers similar features with better performance and more flexibility than\n * ListView provides.\n * See the\n * <a href=\"https://developer.android.com/guide/topics/ui/layout/recyclerview.html\">\n * Recycler View</a> guide.</p>\n ",
  "links" : [ "#getView(int", "android.widget.AdapterView", "android.widget.ListView", "androidx.recyclerview.widget.RecyclerView", "android.widget.Spinner", "#toString()" ],
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "\n     * Lock used to modify the content of {@link #mObjects}. Any write operation\n     * performed on the array should be synchronized on this lock. This lock is also\n     * used by the filter (see {@link #getFilter()} to make a synchronized copy of\n     * the original array of data.\n     ",
    "links" : [ "#getFilter()", "#mObjects" ]
  }, {
    "name" : "mInflater",
    "type" : "LayoutInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResource",
    "type" : "int",
    "comment" : "\n     * The resource indicating what views to inflate to display the content of this\n     * array adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDropDownResource",
    "type" : "int",
    "comment" : "\n     * The resource indicating what views to inflate to display the content of this\n     * array adapter in a drop down widget.\n     ",
    "links" : [ ]
  }, {
    "name" : "mObjects",
    "type" : "List<T>",
    "comment" : "\n     * Contains the list of objects that represent the data of this ArrayAdapter.\n     * The content of this list is referred to as \"the array\" in the documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "mObjectsFromResources",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether the contents of {@link #mObjects} came from static resources.\n     ",
    "links" : [ "#mObjects" ]
  }, {
    "name" : "mFieldId",
    "type" : "int",
    "comment" : "\n     * If the inflated resource is not a TextView, {@code mFieldId} is used to find\n     * a TextView inside the inflated views hierarchy. This field must contain the\n     * identifier that matches the one defined in the resource file.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNotifyOnChange",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether or not {@link #notifyDataSetChanged()} must be called whenever\n     * {@link #mObjects} is modified.\n     ",
    "links" : [ "#notifyDataSetChanged()", "#mObjects" ]
  }, {
    "name" : "mOriginalValues",
    "type" : "ArrayList<T>",
    "comment" : " the mFilter ArrayFilter is used. mObjects will then only contain the filtered values.",
    "links" : [ ]
  }, {
    "name" : "mFilter",
    "type" : "ArrayFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownInflater",
    "type" : "LayoutInflater",
    "comment" : " Layout inflater used for {@link #getDropDownView(int, View, ViewGroup)}. ",
    "links" : [ "#getDropDownView(int" ]
  } ],
  "methods" : [ {
    "name" : "public void add(@Nullable T object)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified object at the end of the array.\n     *\n     * @param object The object to add at the end of the array.\n     * @throws UnsupportedOperationException if the underlying data collection is immutable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAll(@NonNull Collection<? extends T> collection)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified Collection at the end of the array.\n     *\n     * @param collection The Collection to add at the end of the array.\n     * @throws UnsupportedOperationException if the <tt>addAll</tt> operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this list\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this list does not permit null\n     *         elements, or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAll(T... items)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified items at the end of the array.\n     *\n     * @param items The items to add at the end of the array.\n     * @throws UnsupportedOperationException if the underlying data collection is immutable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void insert(@Nullable T object, int index)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified object at the specified index in the array.\n     *\n     * @param object The object to insert into the array.\n     * @param index The index at which the object must be inserted.\n     * @throws UnsupportedOperationException if the underlying data collection is immutable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(@Nullable T object)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified object from the array.\n     *\n     * @param object The object to remove.\n     * @throws UnsupportedOperationException if the underlying data collection is immutable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Remove all elements from the list.\n     *\n     * @throws UnsupportedOperationException if the underlying data collection is immutable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sort(@NonNull Comparator<? super T> comparator)",
    "returnType" : "void",
    "comment" : "\n     * Sorts the content of this adapter using the specified comparator.\n     *\n     * @param comparator The comparator used to sort the objects contained\n     *        in this adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataSetChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNotifyOnChange(boolean notifyOnChange)",
    "returnType" : "void",
    "comment" : "\n     * Control whether methods that change the list ({@link #add}, {@link #addAll(Collection)},\n     * {@link #addAll(Object[])}, {@link #insert}, {@link #remove}, {@link #clear},\n     * {@link #sort(Comparator)}) automatically call {@link #notifyDataSetChanged}.  If set to\n     * false, caller must manually call notifyDataSetChanged() to have the changes\n     * reflected in the attached view.\n     *\n     * The default is true, and calling notifyDataSetChanged()\n     * resets the flag to true.\n     *\n     * @param notifyOnChange if true, modifications to the list will\n     *                       automatically call {@link\n     *                       #notifyDataSetChanged}\n     ",
    "links" : [ "#addAll(Object", "#remove", "#clear", "#addAll(Collection)", "#insert", "#notifyDataSetChanged", "#add", "#sort(Comparator)" ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Returns the context associated with this array adapter. The context is used\n     * to create views from the resource passed to the constructor.\n     *\n     * @return The Context associated with this adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T getItem(int position)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPosition(@Nullable T item)",
    "returnType" : "int",
    "comment" : "\n     * Returns the position of the specified item in the array.\n     *\n     * @param item The item to retrieve the position of.\n     *\n     * @return The position of the specified item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getItemId(int position)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View createViewFromResource(@NonNull LayoutInflater inflater, int position, @Nullable View convertView, @NonNull ViewGroup parent, int resource)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownViewResource(@LayoutRes int resource)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the layout resource to create the drop down views.</p>\n     *\n     * @param resource the layout resource defining the drop down views\n     * @see #getDropDownView(int, android.view.View, android.view.ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownViewTheme(@Nullable Resources.Theme theme)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link Resources.Theme} against which drop-down views are\n     * inflated.\n     * <p>\n     * By default, drop-down views are inflated against the theme of the\n     * {@link Context} passed to the adapter's constructor.\n     *\n     * @param theme the theme against which to inflate drop-down views or\n     *              {@code null} to use the theme from the adapter's context\n     * @see #getDropDownView(int, View, ViewGroup)\n     ",
    "links" : [ "android.content.Context", "Resources.Theme" ]
  }, {
    "name" : "public Resources.Theme getDropDownViewTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getDropDownView(int position, @Nullable View convertView, @NonNull ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ArrayAdapter<CharSequence> createFromResource(@NonNull Context context, @ArrayRes int textArrayResId, @LayoutRes int textViewResId)",
    "returnType" : "ArrayAdapter<CharSequence>",
    "comment" : "\n     * Creates a new ArrayAdapter from external resources. The content of the array is\n     * obtained through {@link android.content.res.Resources#getTextArray(int)}.\n     *\n     * @param context The application's environment.\n     * @param textArrayResId The identifier of the array to use as the data source.\n     * @param textViewResId The identifier of the layout used to create views.\n     *\n     * @return An ArrayAdapter<CharSequence>.\n     ",
    "links" : [ "android.content.res.Resources#getTextArray(int)" ]
  }, {
    "name" : "public Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getAutofillOptions()",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @return values from the string array used by {@link #createFromResource(Context, int, int)},\n     * or {@code null} if object was created otherwsie or if contents were dynamically changed after\n     * creation.\n     ",
    "links" : [ "#createFromResource(Context" ]
  } ],
  "methodNames" : [ "public void add(@Nullable T object)", "public void addAll(@NonNull Collection<? extends T> collection)", "public void addAll(T... items)", "public void insert(@Nullable T object, int index)", "public void remove(@Nullable T object)", "public void clear()", "public void sort(@NonNull Comparator<? super T> comparator)", "public void notifyDataSetChanged()", "public void setNotifyOnChange(boolean notifyOnChange)", "public Context getContext()", "public int getCount()", "public T getItem(int position)", "public int getPosition(@Nullable T item)", "public long getItemId(int position)", "public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent)", "private View createViewFromResource(@NonNull LayoutInflater inflater, int position, @Nullable View convertView, @NonNull ViewGroup parent, int resource)", "public void setDropDownViewResource(@LayoutRes int resource)", "public void setDropDownViewTheme(@Nullable Resources.Theme theme)", "public Resources.Theme getDropDownViewTheme()", "public View getDropDownView(int position, @Nullable View convertView, @NonNull ViewGroup parent)", "public static ArrayAdapter<CharSequence> createFromResource(@NonNull Context context, @ArrayRes int textArrayResId, @LayoutRes int textViewResId)", "public Filter getFilter()", "public CharSequence[] getAutofillOptions()" ],
  "variableNames" : [ "mLock", "mInflater", "mContext", "mResource", "mDropDownResource", "mObjects", "mObjectsFromResources", "mFieldId", "mNotifyOnChange", "mOriginalValues", "mFilter", "mDropDownInflater" ]
}