{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/GestureDetector.java",
  "packageName" : "android.view",
  "className" : "GestureDetector",
  "comment" : "\n * Detects various gestures and events using the supplied {@link MotionEvent}s.\n * The {@link OnGestureListener} callback will notify users when a particular\n * motion event has occurred. This class should only be used with {@link MotionEvent}s\n * reported via touch (don't use for trackball events).\n *\n * To use this class:\n * <ul>\n *  <li>Create an instance of the {@code GestureDetector} for your {@link View}\n *  <li>In the {@link View#onTouchEvent(MotionEvent)} method ensure you call\n *          {@link #onTouchEvent(MotionEvent)}. The methods defined in your callback\n *          will be executed when the events occur.\n *  <li>If listening for {@link OnContextClickListener#onContextClick(MotionEvent)}\n *          you must call {@link #onGenericMotionEvent(MotionEvent)}\n *          in {@link View#onGenericMotionEvent(MotionEvent)}.\n * </ul>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchSlopSquare",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDoubleTapTouchSlopSquare",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDoubleTapSlopSquare",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmbiguousGestureMultiplier",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumFlingVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumFlingVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LONGPRESS_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAP_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_TAP_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_TAP_MIN_TIME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_PRESS",
    "type" : "int",
    "comment" : " constants for Message.what used by GestureHandler below",
    "links" : [ ]
  }, {
    "name" : "LONG_PRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnGestureListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDoubleTapListener",
    "type" : "OnDoubleTapListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContextClickListener",
    "type" : "OnContextClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStillDown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeferConfirmSingleTap",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInLongPress",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInContextClick",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysInTapRegion",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysInBiggerTapRegion",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreNextUpEvent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasRecordedClassification",
    "type" : "boolean",
    "comment" : " ACTION_DOWN.",
    "links" : [ ]
  }, {
    "name" : "mCurrentDownEvent",
    "type" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentMotionEvent",
    "type" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousUpEvent",
    "type" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDoubleTapping",
    "type" : "boolean",
    "comment" : "\n     * True when the user is still touching for the second tap (down, move, and\n     * up events). Can only be true if there is a double tap listener attached.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastFocusX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastFocusY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownFocusX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownFocusY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLongpressEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityTracker",
    "type" : "VelocityTracker",
    "comment" : "\n     * Determines speed during touch scrolling\n     ",
    "links" : [ ]
  }, {
    "name" : "mInputEventConsistencyVerifier",
    "type" : "InputEventConsistencyVerifier",
    "comment" : "\n     * Consistency verifier for debugging purposes.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnDoubleTapListener(OnDoubleTapListener onDoubleTapListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener which will be called for double-tap and related\n     * gestures.\n     * \n     * @param onDoubleTapListener the listener invoked for all the callbacks, or\n     *        null to stop listening for double-tap gestures.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContextClickListener(OnContextClickListener onContextClickListener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener which will be called for context clicks.\n     *\n     * @param onContextClickListener the listener invoked for all the callbacks, or null to stop\n     *            listening for context clicks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIsLongpressEnabled(boolean isLongpressEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether longpress is enabled, if this is enabled when a user\n     * presses and holds down you get a longpress event and nothing further.\n     * If it's disabled the user can press and hold down and then later\n     * moved their finger and you will get scroll events. By default\n     * longpress is enabled.\n     *\n     * @param isLongpressEnabled whether longpress should be enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLongpressEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if longpress is enabled, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Analyzes the given motion event and if applicable triggers the\n     * appropriate callbacks on the {@link OnGestureListener} supplied.\n     *\n     * @param ev The current motion event.\n     * @return true if the {@link OnGestureListener} consumed the event,\n     *              else false.\n     ",
    "links" : [ "OnGestureListener" ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "\n     * Analyzes the given generic motion event and if applicable triggers the\n     * appropriate callbacks on the {@link OnGestureListener} supplied.\n     *\n     * @param ev The current motion event.\n     * @return true if the {@link OnGestureListener} consumed the event,\n     *              else false.\n     ",
    "links" : [ "OnGestureListener" ]
  }, {
    "name" : "private void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelTaps()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isConsideredDoubleTap(MotionEvent firstDown, MotionEvent firstUp, MotionEvent secondDown)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchLongPress()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recordGestureClassification(int classification)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mTouchSlopSquare", "mDoubleTapTouchSlopSquare", "mDoubleTapSlopSquare", "mAmbiguousGestureMultiplier", "mMinimumFlingVelocity", "mMaximumFlingVelocity", "LONGPRESS_TIMEOUT", "TAP_TIMEOUT", "DOUBLE_TAP_TIMEOUT", "DOUBLE_TAP_MIN_TIME", "SHOW_PRESS", "LONG_PRESS", "TAP", "mHandler", "mListener", "mDoubleTapListener", "mContextClickListener", "mStillDown", "mDeferConfirmSingleTap", "mInLongPress", "mInContextClick", "mAlwaysInTapRegion", "mAlwaysInBiggerTapRegion", "mIgnoreNextUpEvent", "mHasRecordedClassification", "mCurrentDownEvent", "mCurrentMotionEvent", "mPreviousUpEvent", "mIsDoubleTapping", "mLastFocusX", "mLastFocusY", "mDownFocusX", "mDownFocusY", "mIsLongpressEnabled", "mVelocityTracker", "mInputEventConsistencyVerifier" ],
  "methodNames" : [ "private void init(Context context)", "public void setOnDoubleTapListener(OnDoubleTapListener onDoubleTapListener)", "public void setContextClickListener(OnContextClickListener onContextClickListener)", "public void setIsLongpressEnabled(boolean isLongpressEnabled)", "public boolean isLongpressEnabled()", "public boolean onTouchEvent(MotionEvent ev)", "public boolean onGenericMotionEvent(MotionEvent ev)", "private void cancel()", "private void cancelTaps()", "private boolean isConsideredDoubleTap(MotionEvent firstDown, MotionEvent firstUp, MotionEvent secondDown)", "private void dispatchLongPress()", "private void recordGestureClassification(int classification)" ]
}