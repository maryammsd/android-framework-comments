{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/hotspot2/omadm/PpsMoParser.java",
  "packageName" : "android.net.wifi.hotspot2.omadm",
  "className" : "PpsMoParser",
  "comment" : "\n * Utility class for converting OMA-DM (Open Mobile Alliance's Device Management)\n * PPS-MO (PerProviderSubscription Management Object) XML tree to a\n * {@link PasspointConfiguration} object.\n *\n * Currently this only supports PerProviderSubscription/HomeSP and\n * PerProviderSubscription/Credential subtree for Hotspot 2.0 Release 1 support.\n *\n * For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0\n * Release 2 Technical Specification.\n *\n * Below is a sample XML string for a Release 1 PPS MO tree:\n *\n * <MgmtTree xmlns=\"syncml:dmddf1.2\">\n *   <VerDTD>1.2</VerDTD>\n *   <Node>\n *     <NodeName>PerProviderSubscription</NodeName>\n *     <RTProperties>\n *       <Type>\n *         <DDFName>urn:wfa:mo:hotspot2dot0Â­perprovidersubscription:1.0</DDFName>\n *       </Type>\n *     </RTProperties>\n *     <Node>\n *       <NodeName>i001</NodeName>\n *       <Node>\n *         <NodeName>HomeSP</NodeName>\n *         <Node>\n *           <NodeName>FriendlyName</NodeName>\n *           <Value>Century House</Value>\n *         </Node>\n *         <Node>\n *           <NodeName>FQDN</NodeName>\n *           <Value>mi6.co.uk</Value>\n *         </Node>\n *         <Node>\n *           <NodeName>RoamingConsortiumOI</NodeName>\n *           <Value>112233,445566</Value>\n *         </Node>\n *       </Node>\n *       <Node>\n *         <NodeName>Credential</NodeName>\n *         <Node>\n *           <NodeName>Realm</NodeName>\n *           <Value>shaken.stirred.com</Value>\n *         </Node>\n *         <Node>\n *           <NodeName>UsernamePassword</NodeName>\n *           <Node>\n *             <NodeName>Username</NodeName>\n *             <Value>james</Value>\n *           </Node>\n *           <Node>\n *             <NodeName>Password</NodeName>\n *             <Value>Ym9uZDAwNw==</Value>\n *           </Node>\n *           <Node>\n *             <NodeName>EAPMethod</NodeName>\n *             <Node>\n *               <NodeName>EAPType</NodeName>\n *               <Value>21</Value>\n *             </Node>\n *             <Node>\n *               <NodeName>InnerMethod</NodeName>\n *               <Value>MS-CHAP-V2</Value>\n *             </Node>\n *           </Node>\n *         </Node>\n *       </Node>\n *     </Node>\n *   </Node>\n * </MgmtTree>\n ",
  "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_MANAGEMENT_TREE",
    "type" : "String",
    "comment" : "\n     * XML tags expected in the PPS MO (PerProviderSubscription Management Object) XML tree.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_VER_DTD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_NODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_NODE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_RT_PROPERTIES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_DDF_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_VALUE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_PER_PROVIDER_SUBSCRIPTION",
    "type" : "String",
    "comment" : "\n     * Name for PerProviderSubscription node.\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_UPDATE_IDENTIFIER",
    "type" : "String",
    "comment" : "\n     * Fields under PerProviderSubscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_AAA_SERVER_TRUST_ROOT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SUBSCRIPTION_UPDATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SUBSCRIPTION_PARAMETER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_TYPE_OF_SUBSCRIPTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_USAGE_LIMITS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_DATA_LIMIT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_START_DATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_TIME_LIMIT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_USAGE_TIME_PERIOD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_CREDENTIAL_PRIORITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_EXTENSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_VENDOR_ANDROID",
    "type" : "String",
    "comment" : "\n     * This node is used to put Android specific extension nodes and must be put\n     * under \"Extension\" node. Nodes with unknown names are allowed under this subtree.\n     * If there is any new node added in later release, it won't break older release parsing.\n     * <p>\n     * Ex:\n     * <Node>\n     *   <NodeName>Extension</NodeName>\n     *   <Node>\n     *     <NodeName>Android</NodeName>\n     *     <Node>\n     *       <NodeName>AndroidSpecificAttribute</NodeName>\n     *       <Value>AndroidSpecificValue</Value>\n     *     </Node>\n     *     <Node>\n     *       <NodeName>AndroidSpecificAttribute2</NodeName>\n     *       <Value>AndroidSpecificValue2</Value>\n     *     </Node>\n     *   </Node>\n     * </Node>\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_AAA_SERVER_TRUSTED_NAMES",
    "type" : "String",
    "comment" : "\n     * This node describes AAA server trusted names. The trusted name must be put in\n     * a leaf named \"FQDN\". More than one trusted names can be provided by using\n     * semicolons to separate the strings (e.g., example.org;example.com).\n     * <p>\n     * Ex:\n     * <Node>\n     *   <NodeName>AAAServerTrustedNames</NodeName>\n     *   <Node>\n     *     <NodeName>FQDN</NodeName>\n     *     <Value>trusted.com;auth.net</Value>\n     *  </Node>\n     * <Node>\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_VENDOR_WBA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_EXTENSION_NAI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_DECORATED_IDENTITY_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_HOMESP",
    "type" : "String",
    "comment" : "\n     * Fields under HomeSP subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_FQDN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_FRIENDLY_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_ROAMING_CONSORTIUM_OI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_NETWORK_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SSID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_HESSID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_ICON_URL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_HOME_OI_LIST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_HOME_OI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_HOME_OI_REQUIRED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_OTHER_HOME_PARTNERS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_CREDENTIAL",
    "type" : "String",
    "comment" : "\n     * Fields under Credential subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_CREATION_DATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_EXPIRATION_DATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_USERNAME_PASSWORD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_USERNAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_PASSWORD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_MACHINE_MANAGED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SOFT_TOKEN_APP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_ABLE_TO_SHARE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_EAP_METHOD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_EAP_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_VENDOR_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_VENDOR_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_INNER_EAP_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_INNER_VENDOR_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_INNER_VENDOR_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_INNER_METHOD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_DIGITAL_CERTIFICATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_CERTIFICATE_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_CERT_SHA256_FINGERPRINT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_REALM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SIM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SIM_IMSI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_CHECK_AAA_SERVER_CERT_STATUS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_POLICY",
    "type" : "String",
    "comment" : "\n     * Fields under Policy subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "NODE_PREFERRED_ROAMING_PARTNER_LIST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_FQDN_MATCH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_PRIORITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_COUNTRY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_MIN_BACKHAUL_THRESHOLD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_NETWORK_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_DOWNLINK_BANDWIDTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_UPLINK_BANDWIDTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_POLICY_UPDATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_UPDATE_INTERVAL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_UPDATE_METHOD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_RESTRICTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_URI",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_TRUST_ROOT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_CERT_URL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_SP_EXCLUSION_LIST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_REQUIRED_PROTO_PORT_TUPLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_IP_PROTOCOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_PORT_NUMBER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_MAXIMUM_BSS_LOAD_VALUE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NODE_OTHER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PPS_MO_URN",
    "type" : "String",
    "comment" : "\n     * URN (Unique Resource Name) for PerProviderSubscription Management Object Tree.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PasspointConfiguration parseMoText(String xmlString)",
    "returnType" : "PasspointConfiguration",
    "comment" : "\n     * Convert a XML string representation of a PPS MO (PerProviderSubscription\n     * Management Object) tree to a {@link PasspointConfiguration} object.\n     *\n     * @param xmlString XML string representation of a PPS MO tree\n     * @return {@link PasspointConfiguration} or null\n     ",
    "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "private static PasspointConfiguration parsePpsNode(XMLNode node) throws ParsingException",
    "returnType" : "PasspointConfiguration",
    "comment" : "\n     * Parse a PerProviderSubscription node. Below is the format of the XML tree (with\n     * each XML element represent a node in the tree):\n     *\n     * <Node>\n     *   <NodeName>PerProviderSubscription</NodeName>\n     *   <RTProperties>\n     *     ...\n     *   </RTPProperties>\n     *   <Node>\n     *     <NodeName>UpdateIdentifier</NodeName>\n     *     <Value>...</Value>\n     *   </Node>\n     *   <Node>\n     *     ...\n     *   </Node>\n     * </Node>\n     *\n     * @param node XMLNode that contains PerProviderSubscription node.\n     * @return PasspointConfiguration or null\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String parseUrn(XMLNode node) throws ParsingException",
    "returnType" : "String",
    "comment" : "\n     * Parse the URN stored in the RTProperties. Below is the format of the RTPProperties node:\n     *\n     * <RTProperties>\n     *   <Type>\n     *     <DDFName>urn:...</DDFName>\n     *   </Type>\n     * </RTProperties>\n     *\n     * @param node XMLNode that contains RTProperties node.\n     * @return URN String of URN.\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PPSNode buildPpsNode(XMLNode node) throws ParsingException",
    "returnType" : "PPSNode",
    "comment" : "\n     * Convert a XML tree represented by XMLNode to a PPS (PerProviderSubscription) instance tree\n     * represented by PPSNode.  This flattens out the XML tree to allow easier and cleaner parsing\n     * of the PPS configuration data.  Only three types of XML tag are expected: \"NodeName\",\n     * \"Node\", and \"Value\".\n     *\n     * The original XML tree (each XML element represent a node):\n     *\n     * <Node>\n     *   <NodeName>root</NodeName>\n     *   <Node>\n     *     <NodeName>child1</NodeName>\n     *     <Value>value1</Value>\n     *   </Node>\n     *   <Node>\n     *     <NodeName>child2</NodeName>\n     *     <Node>\n     *       <NodeName>grandchild1</NodeName>\n     *       ...\n     *     </Node>\n     *   </Node>\n     *   ...\n     * </Node>\n     *\n     * The converted PPS tree:\n     *\n     * [root] --- [child1, value1]\n     *   |\n     *   ---------[child2] --------[grandchild1] --- ...\n     *\n     * @param node XMLNode pointed to the root of a XML tree\n     * @return PPSNode pointing to the root of a PPS tree\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getPpsNodeValue(PPSNode node) throws ParsingException",
    "returnType" : "String",
    "comment" : "\n     * Return the value of a PPSNode.  An exception will be thrown if the given node\n     * is not a leaf node.\n     *\n     * @param node PPSNode to retrieve the value from\n     * @return String representing the value of the node\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PasspointConfiguration parsePpsInstance(PPSNode root) throws ParsingException",
    "returnType" : "PasspointConfiguration",
    "comment" : "\n     * Parse a PPS (PerProviderSubscription) configurations from a PPS tree.\n     *\n     * @param root PPSNode representing the root of the PPS tree\n     * @return PasspointConfiguration\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static HomeSp parseHomeSP(PPSNode node) throws ParsingException",
    "returnType" : "HomeSp",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/HomeSP subtree\n     * @return HomeSP\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] parseRoamingConsortiumOI(String oiStr) throws ParsingException",
    "returnType" : "long[]",
    "comment" : "\n     * Parse the roaming consortium OI string, which contains a list of OIs separated by \",\".\n     *\n     * @param oiStr string containing list of OIs (Organization Identifiers) separated by \",\"\n     * @return long[]\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, Long> parseNetworkIds(PPSNode node) throws ParsingException",
    "returnType" : "Map<String, Long>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP/NetworkID subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/NetworkID\n     *             subtree\n     * @return HashMap<String, Long> representing list of <SSID, HESSID> pair.\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Pair<String, Long> parseNetworkIdInstance(PPSNode node) throws ParsingException",
    "returnType" : "Pair<String, Long>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP/NetworkID/<X+> subtree.\n     * The instance name (<X+>) is irrelevant and must be unique for each instance, which\n     * is verified when the PPS tree is constructed {@link #buildPpsNode}.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/HomeSP/NetworkID/<X+> subtree\n     * @return Pair<String, Long> representing <SSID, HESSID> pair.\n     * @throws ParsingException\n     ",
    "links" : [ "#buildPpsNode" ]
  }, {
    "name" : "private static Pair<List<Long>, List<Long>> parseHomeOIList(PPSNode node) throws ParsingException",
    "returnType" : "Pair<List<Long>, List<Long>>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP/HomeOIList subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/HomeOIList\n     *             subtree\n     * @return Pair<List<Long>, List<Long>> containing both MatchAllOIs and MatchAnyOIs list.\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Pair<Long, Boolean> parseHomeOIInstance(PPSNode node) throws ParsingException",
    "returnType" : "Pair<Long, Boolean>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP/HomeOIList/<X+> subtree.\n     * The instance name (<X+>) is irrelevant and must be unique for each instance, which\n     * is verified when the PPS tree is constructed {@link #buildPpsNode}.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/HomeSP/HomeOIList/<X+> subtree\n     * @return Pair<Long, Boolean> containing a HomeOI and a HomeOIRequired flag\n     * @throws ParsingException\n     ",
    "links" : [ "#buildPpsNode" ]
  }, {
    "name" : "private static String[] parseOtherHomePartners(PPSNode node) throws ParsingException",
    "returnType" : "String[]",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP/OtherHomePartners subtree.\n     * This contains a list of FQDN (Fully Qualified Domain Name) that are considered\n     * home partners.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/HomeSP/OtherHomePartners subtree\n     * @return String[] list of partner's FQDN\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String parseOtherHomePartnerInstance(PPSNode node) throws ParsingException",
    "returnType" : "String",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/HomeSP/OtherHomePartners/<X+> subtree.\n     * The instance name (<X+>) is irrelevant and must be unique for each instance, which\n     * is verified when the PPS tree is constructed {@link #buildPpsNode}.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/HomeSP/OtherHomePartners/<X+> subtree\n     * @return String FQDN of the partner\n     * @throws ParsingException\n     ",
    "links" : [ "#buildPpsNode" ]
  }, {
    "name" : "private static Credential parseCredential(PPSNode node) throws ParsingException",
    "returnType" : "Credential",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Credential subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/Credential subtree\n     * @return Credential\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Credential.UserCredential parseUserCredential(PPSNode node) throws ParsingException",
    "returnType" : "Credential.UserCredential",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Credential/UsernamePassword subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Credential/UsernamePassword subtree\n     * @return Credential.UserCredential\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void parseEAPMethod(PPSNode node, Credential.UserCredential userCred) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Credential/UsernamePassword/EAPMethod\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Credential/UsernamePassword/EAPMethod subtree\n     * @param userCred UserCredential to be updated with EAP method values.\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Credential.CertificateCredential parseCertificateCredential(PPSNode node) throws ParsingException",
    "returnType" : "Credential.CertificateCredential",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Credential/DigitalCertificate subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Credential/DigitalCertificate subtree\n     * @return Credential.CertificateCredential\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Credential.SimCredential parseSimCredential(PPSNode node) throws ParsingException",
    "returnType" : "Credential.SimCredential",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Credential/SIM subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/Credential/SIM\n     *             subtree\n     * @return Credential.SimCredential\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Policy parsePolicy(PPSNode node) throws ParsingException",
    "returnType" : "Policy",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/Policy subtree\n     * @return {@link Policy}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.pps.Policy" ]
  }, {
    "name" : "private static List<Policy.RoamingPartner> parsePreferredRoamingPartnerList(PPSNode node) throws ParsingException",
    "returnType" : "List<Policy.RoamingPartner>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/PreferredRoamingPartnerList\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/PreferredRoamingPartnerList subtree\n     * @return List of {@link Policy#RoamingPartner}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.pps.Policy#RoamingPartner" ]
  }, {
    "name" : "private static Policy.RoamingPartner parsePreferredRoamingPartner(PPSNode node) throws ParsingException",
    "returnType" : "Policy.RoamingPartner",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/PreferredRoamingPartnerList/<X+>\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/PreferredRoamingPartnerList/<X+> subtree\n     * @return {@link Policy#RoamingPartner}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.pps.Policy#RoamingPartner" ]
  }, {
    "name" : "private static void parseMinBackhaulThreshold(PPSNode node, Policy policy) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/MinBackhaulThreshold subtree\n     * into the given policy.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/MinBackhaulThreshold subtree\n     * @param policy The policy to store the MinBackhualThreshold configuration\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void parseMinBackhaulThresholdInstance(PPSNode node, Policy policy) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/MinBackhaulThreshold/<X+> subtree\n     * into the given policy.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/MinBackhaulThreshold/<X+> subtree\n     * @param policy The policy to store the MinBackhaulThreshold configuration\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static UpdateParameter parseUpdateParameter(PPSNode node) throws ParsingException",
    "returnType" : "UpdateParameter",
    "comment" : "\n     * Parse update parameters. This contained configurations from either\n     * PerProviderSubscription/Policy/PolicyUpdate or PerProviderSubscription/SubscriptionUpdate\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the PerProviderSubscription/Policy/PolicyUpdate\n     *             or PerProviderSubscription/SubscriptionUpdate subtree\n     * @return {@link UpdateParameter}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.pps.UpdateParameter" ]
  }, {
    "name" : "private static Pair<String, String> parseUpdateUserCredential(PPSNode node) throws ParsingException",
    "returnType" : "Pair<String, String>",
    "comment" : "\n     * Parse username and password parameters associated with policy or subscription update.\n     * This contained configurations under either\n     * PerProviderSubscription/Policy/PolicyUpdate/UsernamePassword or\n     * PerProviderSubscription/SubscriptionUpdate/UsernamePassword subtree.\n     *\n     * @param node PPSNode representing the root of the UsernamePassword subtree\n     * @return Pair of username and password\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Pair<String, byte[]> parseTrustRoot(PPSNode node) throws ParsingException",
    "returnType" : "Pair<String, byte[]>",
    "comment" : "\n     * Parse the trust root parameters associated with policy update, subscription update, or AAA\n     * server trust root.\n     *\n     * This contained configurations under either\n     * PerProviderSubscription/Policy/PolicyUpdate/TrustRoot or\n     * PerProviderSubscription/SubscriptionUpdate/TrustRoot or\n     * PerProviderSubscription/AAAServerTrustRoot/<X+> subtree.\n     *\n     * @param node PPSNode representing the root of the TrustRoot subtree\n     * @return Pair of Certificate URL and fingerprint\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String[] parseSpExclusionList(PPSNode node) throws ParsingException",
    "returnType" : "String[]",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/SPExclusionList subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/SPExclusionList subtree\n     * @return Array of excluded SSIDs\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String parseSpExclusionInstance(PPSNode node) throws ParsingException",
    "returnType" : "String",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/SPExclusionList/<X+> subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/SPExclusionList/<X+> subtree\n     * @return String\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<Integer, String> parseRequiredProtoPortTuple(PPSNode node) throws ParsingException",
    "returnType" : "Map<Integer, String>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/RequiredProtoPortTuple subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/RequiredProtoPortTuple subtree\n     * @return Map of IP Protocol to Port Number tuples\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Pair<Integer, String> parseProtoPortTuple(PPSNode node) throws ParsingException",
    "returnType" : "Pair<Integer, String>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Policy/RequiredProtoPortTuple/<X+>\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Policy/RequiredProtoPortTuple/<X+> subtree\n     * @return Pair of IP Protocol to Port Number tuple\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, byte[]> parseAAAServerTrustRootList(PPSNode node) throws ParsingException",
    "returnType" : "Map<String, byte[]>",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/AAAServerTrustRoot subtree.\n     *\n     * @param node PPSNode representing the root of PerProviderSubscription/AAAServerTrustRoot\n     *             subtree\n     * @return Map of certificate URL with the corresponding certificate fingerprint\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void parseSubscriptionParameter(PPSNode node, PasspointConfiguration config) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/SubscriptionParameter subtree.\n     *\n     * @param node PPSNode representing the root of PerProviderSubscription/SubscriptionParameter\n     *             subtree\n     * @param config Instance of {@link PasspointConfiguration}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "private static void parseUsageLimits(PPSNode node, PasspointConfiguration config) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/SubscriptionParameter/UsageLimits\n     * subtree.\n     *\n     * @param node PPSNode representing the root of\n     *             PerProviderSubscription/SubscriptionParameter/UsageLimits subtree\n     * @param config Instance of {@link PasspointConfiguration}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "private static String[] parseAaaServerTrustedNames(PPSNode node) throws ParsingException",
    "returnType" : "String[]",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Extension/Android/AAAServerTrustedNames\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Extension/Android/AAAServerTrustedNames subtree\n     * @return String[] list of trusted name\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void parseVendorWbaExtensionNai(PPSNode node, PasspointConfiguration config) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Extension/Android/NAI\n     * subtree.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Extension/Android/NAI subtree\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String parseDecoratedIdentityPrefix(PPSNode node) throws ParsingException",
    "returnType" : "String",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Extension/Android/NAI/DecoratedPrefix\n     * leaf. This leaf node must contain a list of realms (could be a list of 1) delimited by a '!'\n     * character. e.g. homerealm.example.org! or proxyrealm.example.net!homerealm.example.org!\n     * as per RFC 7542.\n     *\n     * @param node PPSNode representing the root of the\n     *             PerProviderSubscription/Extension/Android/NAI/DecoratedPrefix leaf\n     * @return Decorated identity prefix\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void parseVendorAndroidExtension(PPSNode node, PasspointConfiguration config) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Extension/Android subtree.\n     *\n     * @param node PPSNode representing the root of PerProviderSubscription/Extension\n     *             subtree\n     * @param config Instance of {@link PasspointConfiguration}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "private static void parseVendorWbaExtension(PPSNode node, PasspointConfiguration config) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Extension/WBA subtree.\n     *\n     * @param node PPSNode representing the root of PerProviderSubscription/Extension\n     *             subtree\n     * @param config Instance of {@link PasspointConfiguration}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "private static void parseExtension(PPSNode node, PasspointConfiguration config) throws ParsingException",
    "returnType" : "void",
    "comment" : "\n     * Parse configurations under PerProviderSubscription/Extension subtree.\n     *\n     * @param node PPSNode representing the root of PerProviderSubscription/Extension\n     *             subtree\n     * @param config Instance of {@link PasspointConfiguration}\n     * @throws ParsingException\n     ",
    "links" : [ "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "private static byte[] parseHexString(String str) throws ParsingException",
    "returnType" : "byte[]",
    "comment" : "\n     * Convert a hex string to a byte array.\n     *\n     * @param str String containing hex values\n     * @return byte[]\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long parseDate(String dateStr) throws ParsingException",
    "returnType" : "long",
    "comment" : "\n     * Convert a date string to the number of milliseconds since January 1, 1970, 00:00:00 GMT.\n     *\n     * @param dateStr String in the format of yyyy-MM-dd'T'HH:mm:ss'Z'\n     * @return number of milliseconds\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int parseInteger(String value) throws ParsingException",
    "returnType" : "int",
    "comment" : "\n     * Parse an integer string.\n     *\n     * @param value String of integer value\n     * @return int\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long parseLong(String value, int radix) throws ParsingException",
    "returnType" : "long",
    "comment" : "\n     * Parse a string representing a long integer.\n     *\n     * @param value String of long integer value\n     * @return long\n     * @throws ParsingException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] convertFromLongList(List<Long> list)",
    "returnType" : "long[]",
    "comment" : "\n     * Convert a List<Long> to a primitive long array long[].\n     *\n     * @param list List to be converted\n     * @return long[]\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static PasspointConfiguration parseMoText(String xmlString)", "private static PasspointConfiguration parsePpsNode(XMLNode node) throws ParsingException", "private static String parseUrn(XMLNode node) throws ParsingException", "private static PPSNode buildPpsNode(XMLNode node) throws ParsingException", "private static String getPpsNodeValue(PPSNode node) throws ParsingException", "private static PasspointConfiguration parsePpsInstance(PPSNode root) throws ParsingException", "private static HomeSp parseHomeSP(PPSNode node) throws ParsingException", "private static long[] parseRoamingConsortiumOI(String oiStr) throws ParsingException", "private static Map<String, Long> parseNetworkIds(PPSNode node) throws ParsingException", "private static Pair<String, Long> parseNetworkIdInstance(PPSNode node) throws ParsingException", "private static Pair<List<Long>, List<Long>> parseHomeOIList(PPSNode node) throws ParsingException", "private static Pair<Long, Boolean> parseHomeOIInstance(PPSNode node) throws ParsingException", "private static String[] parseOtherHomePartners(PPSNode node) throws ParsingException", "private static String parseOtherHomePartnerInstance(PPSNode node) throws ParsingException", "private static Credential parseCredential(PPSNode node) throws ParsingException", "private static Credential.UserCredential parseUserCredential(PPSNode node) throws ParsingException", "private static void parseEAPMethod(PPSNode node, Credential.UserCredential userCred) throws ParsingException", "private static Credential.CertificateCredential parseCertificateCredential(PPSNode node) throws ParsingException", "private static Credential.SimCredential parseSimCredential(PPSNode node) throws ParsingException", "private static Policy parsePolicy(PPSNode node) throws ParsingException", "private static List<Policy.RoamingPartner> parsePreferredRoamingPartnerList(PPSNode node) throws ParsingException", "private static Policy.RoamingPartner parsePreferredRoamingPartner(PPSNode node) throws ParsingException", "private static void parseMinBackhaulThreshold(PPSNode node, Policy policy) throws ParsingException", "private static void parseMinBackhaulThresholdInstance(PPSNode node, Policy policy) throws ParsingException", "private static UpdateParameter parseUpdateParameter(PPSNode node) throws ParsingException", "private static Pair<String, String> parseUpdateUserCredential(PPSNode node) throws ParsingException", "private static Pair<String, byte[]> parseTrustRoot(PPSNode node) throws ParsingException", "private static String[] parseSpExclusionList(PPSNode node) throws ParsingException", "private static String parseSpExclusionInstance(PPSNode node) throws ParsingException", "private static Map<Integer, String> parseRequiredProtoPortTuple(PPSNode node) throws ParsingException", "private static Pair<Integer, String> parseProtoPortTuple(PPSNode node) throws ParsingException", "private static Map<String, byte[]> parseAAAServerTrustRootList(PPSNode node) throws ParsingException", "private static void parseSubscriptionParameter(PPSNode node, PasspointConfiguration config) throws ParsingException", "private static void parseUsageLimits(PPSNode node, PasspointConfiguration config) throws ParsingException", "private static String[] parseAaaServerTrustedNames(PPSNode node) throws ParsingException", "private static void parseVendorWbaExtensionNai(PPSNode node, PasspointConfiguration config) throws ParsingException", "private static String parseDecoratedIdentityPrefix(PPSNode node) throws ParsingException", "private static void parseVendorAndroidExtension(PPSNode node, PasspointConfiguration config) throws ParsingException", "private static void parseVendorWbaExtension(PPSNode node, PasspointConfiguration config) throws ParsingException", "private static void parseExtension(PPSNode node, PasspointConfiguration config) throws ParsingException", "private static byte[] parseHexString(String str) throws ParsingException", "private static long parseDate(String dateStr) throws ParsingException", "private static int parseInteger(String value) throws ParsingException", "private static long parseLong(String value, int radix) throws ParsingException", "private static long[] convertFromLongList(List<Long> list)" ],
  "variableNames" : [ "TAG", "TAG_MANAGEMENT_TREE", "TAG_VER_DTD", "TAG_NODE", "TAG_NODE_NAME", "TAG_RT_PROPERTIES", "TAG_TYPE", "TAG_DDF_NAME", "TAG_VALUE", "NODE_PER_PROVIDER_SUBSCRIPTION", "NODE_UPDATE_IDENTIFIER", "NODE_AAA_SERVER_TRUST_ROOT", "NODE_SUBSCRIPTION_UPDATE", "NODE_SUBSCRIPTION_PARAMETER", "NODE_TYPE_OF_SUBSCRIPTION", "NODE_USAGE_LIMITS", "NODE_DATA_LIMIT", "NODE_START_DATE", "NODE_TIME_LIMIT", "NODE_USAGE_TIME_PERIOD", "NODE_CREDENTIAL_PRIORITY", "NODE_EXTENSION", "NODE_VENDOR_ANDROID", "NODE_AAA_SERVER_TRUSTED_NAMES", "NODE_VENDOR_WBA", "NODE_EXTENSION_NAI", "NODE_DECORATED_IDENTITY_PREFIX", "NODE_HOMESP", "NODE_FQDN", "NODE_FRIENDLY_NAME", "NODE_ROAMING_CONSORTIUM_OI", "NODE_NETWORK_ID", "NODE_SSID", "NODE_HESSID", "NODE_ICON_URL", "NODE_HOME_OI_LIST", "NODE_HOME_OI", "NODE_HOME_OI_REQUIRED", "NODE_OTHER_HOME_PARTNERS", "NODE_CREDENTIAL", "NODE_CREATION_DATE", "NODE_EXPIRATION_DATE", "NODE_USERNAME_PASSWORD", "NODE_USERNAME", "NODE_PASSWORD", "NODE_MACHINE_MANAGED", "NODE_SOFT_TOKEN_APP", "NODE_ABLE_TO_SHARE", "NODE_EAP_METHOD", "NODE_EAP_TYPE", "NODE_VENDOR_ID", "NODE_VENDOR_TYPE", "NODE_INNER_EAP_TYPE", "NODE_INNER_VENDOR_ID", "NODE_INNER_VENDOR_TYPE", "NODE_INNER_METHOD", "NODE_DIGITAL_CERTIFICATE", "NODE_CERTIFICATE_TYPE", "NODE_CERT_SHA256_FINGERPRINT", "NODE_REALM", "NODE_SIM", "NODE_SIM_IMSI", "NODE_CHECK_AAA_SERVER_CERT_STATUS", "NODE_POLICY", "NODE_PREFERRED_ROAMING_PARTNER_LIST", "NODE_FQDN_MATCH", "NODE_PRIORITY", "NODE_COUNTRY", "NODE_MIN_BACKHAUL_THRESHOLD", "NODE_NETWORK_TYPE", "NODE_DOWNLINK_BANDWIDTH", "NODE_UPLINK_BANDWIDTH", "NODE_POLICY_UPDATE", "NODE_UPDATE_INTERVAL", "NODE_UPDATE_METHOD", "NODE_RESTRICTION", "NODE_URI", "NODE_TRUST_ROOT", "NODE_CERT_URL", "NODE_SP_EXCLUSION_LIST", "NODE_REQUIRED_PROTO_PORT_TUPLE", "NODE_IP_PROTOCOL", "NODE_PORT_NUMBER", "NODE_MAXIMUM_BSS_LOAD_VALUE", "NODE_OTHER", "PPS_MO_URN" ]
}