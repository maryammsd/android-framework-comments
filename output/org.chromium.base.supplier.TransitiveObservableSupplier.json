{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/TransitiveObservableSupplier.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "TransitiveObservableSupplier",
  "comment" : "\n * Useful when two observable suppliers are chained together. The client class may only want to know\n * the value of the second, or \"target\", supplier. But to track this the client needs to observe the\n * first, or \"parent\", supplier, and then [un]observe the current target. Instead this class is a\n * single observable supplier that holds the current target value, greatly simplifying the client's\n * job.\n *\n * <p>Attempts to only maintain observers on the relevant observers when there's an observer on this\n * class. Clients should still remove themselves as observers from this class when done.\n *\n * @param <P> The parent object that's holding a reference to the target.\n * @param <T> The target type that the client wants to observe.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDelegateSupplier",
    "type" : "ObservableSupplierImpl<T>",
    "comment" : " are observers, otherwise is may be stale.",
    "links" : [ ]
  }, {
    "name" : "mOnParentSupplierChangeCallback",
    "type" : "Callback<P>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTargetSupplierChangeCallback",
    "type" : "Callback<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentSupplier",
    "type" : "ObservableSupplier<P>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnwrapFunction",
    "type" : "Function<P, ObservableSupplier<T>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentTargetSupplier",
    "type" : "ObservableSupplier<T>",
    "comment" : " removed.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T addObserver(Callback<T> obs)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeObserver(Callback<T> obs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T get()",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onParentSupplierChange(@Nullable P parentValue)",
    "returnType" : "void",
    "comment" : "\n     * Conceptually this just removes our observer from the old target supplier, and our observer to\n     * to the new target supplier. In practice this is full of null checks. We also have to make\n     * sure we keep our delegate supplier's value up to date, which is also what drives client\n     * observations.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onTargetSupplierChange(@Nullable T targetValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T addObserver(Callback<T> obs)", "public void removeObserver(Callback<T> obs)", "public T get()", "private void onParentSupplierChange(@Nullable P parentValue)", "private void onTargetSupplierChange(@Nullable T targetValue)" ],
  "variableNames" : [ "mDelegateSupplier", "mOnParentSupplierChangeCallback", "mOnTargetSupplierChangeCallback", "mParentSupplier", "mUnwrapFunction", "mCurrentTargetSupplier" ]
}