{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/InputMethod.java",
  "packageName" : "android.accessibilityservice",
  "className" : "InputMethod",
  "comment" : "\n * This class provides input method APIs. Some public methods such as\n * @link #onUpdateSelection(int, int, int, int, int, int)} do nothing by default and service\n * developers should override them as needed. Developers should also override\n * {@link AccessibilityService#onCreateInputMethod()} to return\n * their custom InputMethod implementation. Accessibility services also need to set the\n * {@link AccessibilityServiceInfo#FLAG_INPUT_METHOD_EDITOR} flag to use input method APIs.\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService#onCreateInputMethod()", "#onUpdateSelection(int", "android.accessibilityservice.AccessibilityServiceInfo#FLAG_INPUT_METHOD_EDITOR" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "AccessibilityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartedInputConnection",
    "type" : "RemoteAccessibilityInputConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputEditorInfo",
    "type" : "EditorInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final AccessibilityInputConnection getCurrentInputConnection()",
    "returnType" : "AccessibilityInputConnection",
    "comment" : "\n     * Retrieve the currently active InputConnection that is bound to\n     * the input method, or null if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getCurrentInputStarted()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the input has started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final EditorInfo getCurrentInputEditorInfo()",
    "returnType" : "EditorInfo",
    "comment" : "\n     * Get the EditorInfo which describes several attributes of a text editing object\n     * that an accessibility service is communicating with (typically an EditText).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onStartInput(@NonNull EditorInfo attribute, boolean restarting)",
    "returnType" : "void",
    "comment" : "\n     * Called to inform the accessibility service that text input has started in an\n     * editor.  You should use this callback to initialize the state of your\n     * input to match the state of the editor given to it.\n     *\n     * @param attribute  The attributes of the editor that input is starting\n     *                   in.\n     * @param restarting Set to true if input is restarting in the same\n     *                   editor such as because the application has changed the text in\n     *                   the editor.  Otherwise will be false, indicating this is a new\n     *                   session with the editor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFinishInput()",
    "returnType" : "void",
    "comment" : "\n     * Called to inform the accessibility service that text input has finished in\n     * the last editor. At this point there may be a call to\n     * {@link #onStartInput(EditorInfo, boolean)} to perform input in a\n     * new editor, or the accessibility service may be left idle. This method is\n     * <em>not</em> called when input restarts in the same editor.\n     *\n     * <p>The default\n     * implementation uses the InputConnection to clear any active composing\n     * text; you can override this (not calling the base class implementation)\n     * to perform whatever behavior you would like.\n     ",
    "links" : [ "#onStartInput(EditorInfo" ]
  }, {
    "name" : "public void onUpdateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)",
    "returnType" : "void",
    "comment" : "\n     * Called when the application has reported a new selection region of\n     * the text. This is called whether or not the accessibility service has requested\n     * extracted text updates, although if so it will not receive this call\n     * if the extracted text has changed as well.\n     *\n     * <p>Be careful about changing the text in reaction to this call with\n     * methods such as setComposingText, commitText or\n     * deleteSurroundingText. If the cursor moves as a result, this method\n     * will be called again, which may result in an infinite loop.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void createImeSession(IAccessibilityInputMethodSessionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void startInput(@Nullable RemoteAccessibilityInputConnection ic, @NonNull EditorInfo attribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void restartInput(@Nullable RemoteAccessibilityInputConnection ic, @NonNull EditorInfo attribute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void doStartInput(RemoteAccessibilityInputConnection ic, EditorInfo attribute, boolean restarting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void doFinishInput()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final AccessibilityInputConnection getCurrentInputConnection()", "public final boolean getCurrentInputStarted()", "public final EditorInfo getCurrentInputEditorInfo()", "public void onStartInput(@NonNull EditorInfo attribute, boolean restarting)", "public void onFinishInput()", "public void onUpdateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)", " final void createImeSession(IAccessibilityInputMethodSessionCallback callback)", " final void startInput(@Nullable RemoteAccessibilityInputConnection ic, @NonNull EditorInfo attribute)", " final void restartInput(@Nullable RemoteAccessibilityInputConnection ic, @NonNull EditorInfo attribute)", " final void doStartInput(RemoteAccessibilityInputConnection ic, EditorInfo attribute, boolean restarting)", " final void doFinishInput()" ],
  "variableNames" : [ "LOG_TAG", "mService", "mInputStarted", "mStartedInputConnection", "mInputEditorInfo" ]
}