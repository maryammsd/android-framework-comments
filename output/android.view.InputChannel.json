{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InputChannel.java",
  "packageName" : "android.view",
  "className" : "InputChannel",
  "comment" : "\n * An input channel specifies the file descriptors used to send input events to\n * a window in another process.  It is Parcelable so that it can be sent\n * to the process that is to receive events.  Only one thread should be reading\n * from an InputChannel at a time.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputChannel>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long[] nativeOpenInputChannelPair(String name)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeDispose(long channel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeReadFromParcel(Parcel parcel)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeWriteToParcel(Parcel parcel, long channel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeDup(long channel)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native IBinder nativeGetToken(long channel)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native String nativeGetName(long channel)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setNativeInputChannel(long nativeChannel)",
    "returnType" : "void",
    "comment" : "\n     *  Set Native input channel object from native space.\n     *  @param nativeChannel the native channel object.\n     *\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputChannel[] openInputChannelPair(String name)",
    "returnType" : "InputChannel[]",
    "comment" : "\n     * Creates a new input channel pair.  One channel should be provided to the input\n     * dispatcher and the other to the application's input queue.\n     * @param name The descriptive (non-unique) name of the channel pair.\n     * @return A pair of input channels.  The first channel is designated as the\n     * server channel and should be used to publish input events.  The second channel\n     * is designated as the client channel and should be used to consume input events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the input channel.\n     * @return The input channel name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispose()",
    "returnType" : "void",
    "comment" : "\n     * Disposes the input channel.\n     * Explicitly releases the reference this object is holding on the input channel.\n     * When all references are released, the input channel will be closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Release the Java objects hold over the native InputChannel. If other references\n     * still exist in native-land, then the channel may continue to exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyTo(InputChannel outParameter)",
    "returnType" : "void",
    "comment" : "\n     * Creates a copy of this instance to the outParameter. This is used to pass an input channel\n     * as an out parameter in a binder call.\n     * @param other The other input channel instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputChannel dup()",
    "returnType" : "InputChannel",
    "comment" : "\n     * Duplicates the input channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native long[] nativeOpenInputChannelPair(String name)", "private static native long nativeGetFinalizer()", "private native void nativeDispose(long channel)", "private native long nativeReadFromParcel(Parcel parcel)", "private native void nativeWriteToParcel(Parcel parcel, long channel)", "private native long nativeDup(long channel)", "private native IBinder nativeGetToken(long channel)", "private native String nativeGetName(long channel)", "private void setNativeInputChannel(long nativeChannel)", "public static InputChannel[] openInputChannelPair(String name)", "public String getName()", "public void dispose()", "public void release()", "public void copyTo(InputChannel outParameter)", "public InputChannel dup()", "public int describeContents()", "public void readFromParcel(Parcel in)", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public IBinder getToken()" ],
  "variableNames" : [ "TAG", "DEBUG", "sRegistry", "CREATOR", "mPtr" ]
}