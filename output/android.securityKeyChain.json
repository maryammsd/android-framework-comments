{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/KeyChain.java",
  "packageName" : "android.security",
  "className" : "KeyChain",
  "comment" : " TODO reference intent for credential installation when public",
  "variables" : [ {
    "name" : "ACCOUNT_TYPE",
    "type" : "String",
    "comment" : "\n     * @hide Also used by KeyChainService implementation\n     ",
    "links" : [ ]
  }, {
    "name" : "KEYCHAIN_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Package name for KeyChain chooser.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHOOSER",
    "type" : "String",
    "comment" : "\n     * Action to bring up the KeyChainActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "CERT_INSTALLER_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Package name for the Certificate Installer.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESPONSE",
    "type" : "String",
    "comment" : "\n     * Extra for use with {@link #ACTION_CHOOSER}\n     * @hide Also used by KeyChainActivity implementation\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_URI",
    "type" : "String",
    "comment" : "\n     * Extra for use with {@link #ACTION_CHOOSER}\n     * @hide Also used by KeyChainActivity implementation\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_ALIAS",
    "type" : "String",
    "comment" : "\n     * Extra for use with {@link #ACTION_CHOOSER}\n     * @hide Also used by KeyChainActivity implementation\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_SENDER",
    "type" : "String",
    "comment" : "\n     * Extra for use with {@link #ACTION_CHOOSER}\n     * @hide Also used by KeyChainActivity implementation\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_KEY_TYPES",
    "type" : "String",
    "comment" : "\n     * Extra for use with {@link #ACTION_CHOOSER}\n     * @hide Also used by KeyChainActivity implementation\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "EXTRA_ISSUERS",
    "type" : "String",
    "comment" : "\n     * Extra for use with {@link #ACTION_CHOOSER}\n     * @hide Also used by KeyChainActivity implementation\n     ",
    "links" : [ "#ACTION_CHOOSER" ]
  }, {
    "name" : "ACTION_INSTALL",
    "type" : "String",
    "comment" : "\n     * Action to bring up the CertInstaller.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NAME",
    "type" : "String",
    "comment" : " Compatible with old com.android.certinstaller.CredentialHelper.CERT_NAME_KEY",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CERTIFICATE",
    "type" : "String",
    "comment" : " Compatible with old android.security.Credentials.CERTIFICATE",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PKCS12",
    "type" : "String",
    "comment" : " Compatible with old android.security.Credentials.PKCS12",
    "links" : [ ]
  }, {
    "name" : "ACTION_STORAGE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates the trusted storage has changed. Sent when\n     * one of this happens:\n     *\n     * <ul>\n     * <li>a new CA is added,\n     * <li>an existing CA is removed or disabled,\n     * <li>a disabled CA is enabled,\n     * <li>trusted storage is reset (all user certs are cleared),\n     * <li>when permission to access a private key is changed.\n     * </ul>\n     *\n     * @deprecated Use {@link #ACTION_KEYCHAIN_CHANGED}, {@link #ACTION_TRUST_STORE_CHANGED} or\n     * {@link #ACTION_KEY_ACCESS_CHANGED}. Apps that target a version higher than\n     * {@link android.os.Build.VERSION_CODES#N_MR1} will only receive this broadcast if they\n     * register for it at runtime.\n     ",
    "links" : [ "#ACTION_KEYCHAIN_CHANGED", "#ACTION_TRUST_STORE_CHANGED", "#ACTION_KEY_ACCESS_CHANGED", "android.os.Build.VERSION_CODES#N_MR1" ]
  }, {
    "name" : "ACTION_KEYCHAIN_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates the contents of the keychain has changed. Sent when a KeyChain\n     * entry is added, modified or removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_TRUST_STORE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates the contents of the trusted certificate store has changed. Sent\n     * when one the following occurs:\n     *\n     * <ul>\n     * <li>A pre-installed CA is disabled or re-enabled</li>\n     * <li>A CA is added or removed from the trust store</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_KEY_ACCESS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates that the access permissions for a private key have changed.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_KEY_ALIAS",
    "type" : "String",
    "comment" : "\n     * Used as a String extra field in {@link #ACTION_KEY_ACCESS_CHANGED} to supply the alias of\n     * the key.\n     ",
    "links" : [ "#ACTION_KEY_ACCESS_CHANGED" ]
  }, {
    "name" : "EXTRA_KEY_ACCESSIBLE",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra field in {@link #ACTION_KEY_ACCESS_CHANGED} to supply if the key is\n     * accessible to the application.\n     ",
    "links" : [ "#ACTION_KEY_ACCESS_CHANGED" ]
  }, {
    "name" : "KEY_GEN_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Indicates that a call to {@link #generateKeyPair} was successful.\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_MISSING_ALIAS",
    "type" : "int",
    "comment" : "\n     * An alias was missing from the key specifications when calling {@link #generateKeyPair}.\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_SUPERFLUOUS_ATTESTATION_CHALLENGE",
    "type" : "int",
    "comment" : "\n     * A key attestation challenge was provided to {@link #generateKeyPair}, but it shouldn't\n     * have been provided.\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_NO_SUCH_ALGORITHM",
    "type" : "int",
    "comment" : "\n     * Algorithm not supported by {@link #generateKeyPair}\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_INVALID_ALGORITHM_PARAMETERS",
    "type" : "int",
    "comment" : "\n     * Invalid algorithm parameters when calling {@link #generateKeyPair}\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_NO_KEYSTORE_PROVIDER",
    "type" : "int",
    "comment" : "\n     * Keystore is not available when calling {@link #generateKeyPair}\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_STRONGBOX_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * StrongBox unavailable when calling {@link #generateKeyPair}\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_GEN_FAILURE",
    "type" : "int",
    "comment" : "\n     * General failure while calling {@link #generateKeyPair}\n     * @hide\n     ",
    "links" : [ "#generateKeyPair" ]
  }, {
    "name" : "KEY_ATTESTATION_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Successful call to {@link #attestKey}\n     * @hide\n     ",
    "links" : [ "#attestKey" ]
  }, {
    "name" : "KEY_ATTESTATION_MISSING_CHALLENGE",
    "type" : "int",
    "comment" : "\n     * Attestation challenge missing when calling {@link #attestKey}\n     * @hide\n     ",
    "links" : [ "#attestKey" ]
  }, {
    "name" : "KEY_ATTESTATION_CANNOT_COLLECT_DATA",
    "type" : "int",
    "comment" : "\n     * The caller requested Device ID attestation when calling {@link #attestKey}, but has no\n     * permissions to get device identifiers.\n     * @hide\n     ",
    "links" : [ "#attestKey" ]
  }, {
    "name" : "KEY_ATTESTATION_CANNOT_ATTEST_IDS",
    "type" : "int",
    "comment" : "\n     * The underlying hardware does not support Device ID attestation or cannot attest to the\n     * identifiers that are stored on the device. This indicates permanent inability\n     * to get attestation records on the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ATTESTATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * General failure when calling {@link #attestKey}\n     * @hide\n     ",
    "links" : [ "#attestKey" ]
  }, {
    "name" : "KEY_ALIAS_SELECTION_DENIED",
    "type" : "String",
    "comment" : "\n     * Used by DPC or delegated app in\n     * {@link android.app.admin.DeviceAdminReceiver#onChoosePrivateKeyAlias} or\n     * {@link android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias} to identify that\n     * the requesting app is not granted access to any key, and nor will the user be able to grant\n     * access manually.\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver#onChoosePrivateKeyAlias", "android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias" ]
  } ],
  "methods" : [ {
    "name" : "public static Intent createInstallIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@code Intent} that can be used for credential\n     * installation. The intent may be used without any extras, in\n     * which case the user will be able to install credentials from\n     * their own source.\n     *\n     * <p>Alternatively, {@link #EXTRA_CERTIFICATE} or {@link\n     * #EXTRA_PKCS12} maybe used to specify the bytes of an X.509\n     * certificate or a PKCS#12 key store for installation. These\n     * extras may be combined with {@link #EXTRA_NAME} to provide a\n     * default alias name for credentials being installed.\n     *\n     * <p>When used with {@link Activity#startActivityForResult},\n     * {@link Activity#RESULT_OK} will be returned if a credential was\n     * successfully installed, otherwise {@link\n     * Activity#RESULT_CANCELED} will be returned.\n     *\n     * <p>Starting from {@link android.os.Build.VERSION_CODES#R}, the intent returned by this\n     * method cannot be used for installing CA certificates. Since CA certificates can only be\n     * installed via Settings, the app should provide the user with a file containing the\n     * CA certificate. One way to do this would be to use the {@link android.provider.MediaStore}\n     * API to write the certificate to the {@link android.provider.MediaStore.Downloads}\n     * collection.\n     ",
    "links" : [ "#EXTRA_CERTIFICATE", "#EXTRA_NAME", "Activity#startActivityForResult", "Activity#RESULT_OK", "android.os.Build.VERSION_CODES#R", "android.provider.MediaStore", "android.provider.MediaStore.Downloads" ]
  }, {
    "name" : "public static void choosePrivateKeyAlias(@NonNull Activity activity, @NonNull KeyChainAliasCallback response, @Nullable @KeyProperties.KeyAlgorithmEnum String[] keyTypes, @Nullable Principal[] issuers, @Nullable String host, int port, @Nullable String alias)",
    "returnType" : "void",
    "comment" : "\n     * Launches an {@code Activity} for the user to select the alias\n     * for a private key and certificate pair for authentication. The\n     * selected alias or null will be returned via the\n     * KeyChainAliasCallback callback.\n     *\n     * <p>A device policy controller (as a device or profile owner) can\n     * intercept the request before the activity is shown, to pick a\n     * specific private key alias by implementing\n     * {@link android.app.admin.DeviceAdminReceiver#onChoosePrivateKeyAlias\n     * onChoosePrivateKeyAlias}.\n     *\n     * <p>{@code keyTypes} and {@code issuers} may be used to\n     * narrow down suggested choices to the user. If either {@code keyTypes}\n     * or {@code issuers} is specified and non-empty, and there are no\n     * matching certificates in the KeyChain, then the certificate\n     * selection prompt would be suppressed entirely.\n     *\n     * <p>{@code host} and {@code port} may be used to give the user\n     * more context about the server requesting the credentials.\n     *\n     * <p>{@code alias} allows the caller to preselect an existing\n     * alias which will still be subject to user confirmation.\n     *\n     * @param activity The {@link Activity} context to use for\n     *     launching the new sub-Activity to prompt the user to select\n     *     a private key; used only to call startActivity(); must not\n     *     be null.\n     * @param response Callback to invoke when the request completes;\n     *     must not be null.\n     * @param keyTypes The acceptable types of asymmetric keys such as\n     *     \"RSA\", \"EC\" or null.\n     * @param issuers The acceptable certificate issuers for the\n     *     certificate matching the private key, or null.\n     * @param host The host name of the server requesting the\n     *     certificate, or null if unavailable.\n     * @param port The port number of the server requesting the\n     *     certificate, or -1 if unavailable.\n     * @param alias The alias to preselect if available, or null if\n     *     unavailable.\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver#onChoosePrivateKeyAlias", "Activity" ]
  }, {
    "name" : "public static void choosePrivateKeyAlias(@NonNull Activity activity, @NonNull KeyChainAliasCallback response, @Nullable @KeyProperties.KeyAlgorithmEnum String[] keyTypes, @Nullable Principal[] issuers, @Nullable Uri uri, @Nullable String alias)",
    "returnType" : "void",
    "comment" : "\n     * Launches an {@code Activity} for the user to select the alias\n     * for a private key and certificate pair for authentication. The\n     * selected alias or null will be returned via the\n     * KeyChainAliasCallback callback.\n     *\n     * <p>A device policy controller (as a device or profile owner) can\n     * intercept the request before the activity is shown, to pick a\n     * specific private key alias by implementing\n     * {@link android.app.admin.DeviceAdminReceiver#onChoosePrivateKeyAlias\n     * onChoosePrivateKeyAlias}.\n     *\n     * <p>{@code keyTypes} and {@code issuers} may be used to\n     * narrow down suggested choices to the user. If either {@code keyTypes}\n     * or {@code issuers} is specified and non-empty, and there are no\n     * matching certificates in the KeyChain, then the certificate\n     * selection prompt would be suppressed entirely.\n     *\n     * <p>{@code uri} may be used to give the user more context about\n     * the server requesting the credentials.\n     *\n     * <p>{@code alias} allows the caller to preselect an existing\n     * alias which will still be subject to user confirmation.\n     *\n     * @param activity The {@link Activity} context to use for\n     *     launching the new sub-Activity to prompt the user to select\n     *     a private key; used only to call startActivity(); must not\n     *     be null.\n     * @param response Callback to invoke when the request completes;\n     *     must not be null.\n     * @param keyTypes The acceptable types of asymmetric keys such as\n     *     \"RSA\", \"EC\" or null.\n     * @param issuers The acceptable certificate issuers for the\n     *     certificate matching the private key, or null.\n     * @param uri The full URI the server is requesting the certificate\n     *     for, or null if unavailable.\n     * @param alias The alias to preselect if available, or null if\n     *     unavailable.\n     * @throws IllegalArgumentException if the specified issuers are not\n     *     of type {@code X500Principal}.\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver#onChoosePrivateKeyAlias", "Activity" ]
  }, {
    "name" : "public static PrivateKey getPrivateKey(@NonNull Context context, @NonNull String alias) throws KeyChainException, InterruptedException",
    "returnType" : "PrivateKey",
    "comment" : "\n     * Returns the {@code PrivateKey} for the requested alias, or null if the alias does not exist\n     * or the caller has no permission to access it (see note on exceptions below).\n     *\n     * <p> This method may block while waiting for a connection to another process, and must never\n     * be called from the main thread.\n     * <p> As {@link Activity} and {@link Service} contexts are short-lived and can be destroyed\n     * at any time from the main thread, it is safer to rely on a long-lived context such as one\n     * returned from {@link Context#getApplicationContext()}.\n     *\n     * <p> If the caller provides a valid alias to which it was not granted access, then the\n     * caller must invoke {@link #choosePrivateKeyAlias} again to get another valid alias\n     * or a grant to access the same alias.\n     * <p>On Android versions prior to Q, when a key associated with the specified alias is\n     * unavailable, the method will throw a {@code KeyChainException} rather than return null.\n     * If the exception's cause (as obtained by calling {@code KeyChainException.getCause()})\n     * is a throwable of type {@code IllegalStateException} then the caller lacks a grant\n     * to access the key and certificates associated with this alias.\n     *\n     * @param alias The alias of the desired private key, typically returned via\n     *              {@link KeyChainAliasCallback#alias}.\n     * @throws KeyChainException if the alias was valid but there was some problem accessing it.\n     * @throws IllegalStateException if called from the main thread.\n     ",
    "links" : [ "Activity", "Service", "Context#getApplicationContext", "#choosePrivateKeyAlias", "KeyChainAliasCallback#alias" ]
  }, {
    "name" : "public static KeyPair getKeyPair(@NonNull Context context, @NonNull String alias) throws KeyChainException, InterruptedException",
    "returnType" : "KeyPair",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static X509Certificate[] getCertificateChain(@NonNull Context context, @NonNull String alias) throws KeyChainException, InterruptedException",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Returns the {@code X509Certificate} chain for the requested alias, or null if the alias\n     * does not exist or the caller has no permission to access it (see note on exceptions\n     * in {@link #getPrivateKey}).\n     *\n     * <p>\n     * <strong>Note:</strong> If a certificate chain was explicitly specified when the alias was\n     * installed, this method will return that chain. If only the client certificate was specified\n     * at the installation time, this method will try to build a certificate chain using all\n     * available trust anchors (preinstalled and user-added).\n     *\n     * <p> This method may block while waiting for a connection to another process, and must never\n     * be called from the main thread.\n     * <p> As {@link Activity} and {@link Service} contexts are short-lived and can be destroyed\n     * at any time from the main thread, it is safer to rely on a long-lived context such as one\n     * returned from {@link Context#getApplicationContext()}.\n     * <p> In case the caller specifies an alias for which it lacks a grant, it must call\n     * {@link #choosePrivateKeyAlias} again. See {@link #getPrivateKey} for more details on\n     * coping with this scenario.\n     *\n     * @param alias The alias of the desired certificate chain, typically\n     * returned via {@link KeyChainAliasCallback#alias}.\n     * @throws KeyChainException if the alias was valid but there was some problem accessing it.\n     * @throws IllegalStateException if called from the main thread.\n     ",
    "links" : [ "#getPrivateKey", "Activity", "Service", "Context#getApplicationContext", "#choosePrivateKeyAlias", "#getPrivateKey", "KeyChainAliasCallback#alias" ]
  }, {
    "name" : "public static boolean isKeyAlgorithmSupported(@NonNull @KeyProperties.KeyAlgorithmEnum String algorithm)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the current device's {@code KeyChain} supports a\n     * specific {@code PrivateKey} type indicated by {@code algorithm} (e.g.,\n     * \"RSA\").\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBoundKeyAlgorithm(@NonNull @KeyProperties.KeyAlgorithmEnum String algorithm)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the current device's {@code KeyChain} binds any\n     * {@code PrivateKey} of the given {@code algorithm} to the device once\n     * imported or generated. This can be used to tell if there is special\n     * hardware support that can be used to bind keys to the device in a way\n     * that makes it non-exportable.\n     *\n     * @deprecated Whether the key is bound to the secure hardware is known only\n     * once the key has been imported. To find out, use:\n     * <pre>{@code\n     * PrivateKey key = ...; // private key from KeyChain\n     *\n     * KeyFactory keyFactory =\n     *     KeyFactory.getInstance(key.getAlgorithm(), \"AndroidKeyStore\");\n     * KeyInfo keyInfo = keyFactory.getKeySpec(key, KeyInfo.class);\n     * if (keyInfo.isInsideSecureHardware()) {\n     *     // The key is bound to the secure hardware of this Android\n     * }}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static X509Certificate toCertificate(@NonNull byte[] bytes)",
    "returnType" : "X509Certificate",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Collection<X509Certificate> toCertificates(@NonNull byte[] bytes)",
    "returnType" : "Collection<X509Certificate>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static KeyChainConnection bind(@NonNull Context context) throws InterruptedException",
    "returnType" : "KeyChainConnection",
    "comment" : "\n     * Bind to KeyChainService in the current user.\n     * Caller should call unbindService on the result when finished.\n     *\n     *@throws InterruptedException if interrupted during binding.\n     *@throws AssertionError if unable to bind to KeyChainService.\n     * @hide for reuse by CertInstaller and Settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyChainConnection bindAsUser(@NonNull Context context, UserHandle user) throws InterruptedException",
    "returnType" : "KeyChainConnection",
    "comment" : "\n     * Bind to KeyChainService in the target user.\n     * Caller should call unbindService on the result when finished.\n     *\n     * @throws InterruptedException if interrupted during binding.\n     * @throws AssertionError if unable to bind to KeyChainService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void ensureNotOnMainThread(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "ACCOUNT_TYPE", "KEYCHAIN_PACKAGE", "ACTION_CHOOSER", "CERT_INSTALLER_PACKAGE", "EXTRA_RESPONSE", "EXTRA_URI", "EXTRA_ALIAS", "EXTRA_SENDER", "EXTRA_KEY_TYPES", "EXTRA_ISSUERS", "ACTION_INSTALL", "EXTRA_NAME", "EXTRA_CERTIFICATE", "EXTRA_PKCS12", "ACTION_STORAGE_CHANGED", "ACTION_KEYCHAIN_CHANGED", "ACTION_TRUST_STORE_CHANGED", "ACTION_KEY_ACCESS_CHANGED", "EXTRA_KEY_ALIAS", "EXTRA_KEY_ACCESSIBLE", "KEY_GEN_SUCCESS", "KEY_GEN_MISSING_ALIAS", "KEY_GEN_SUPERFLUOUS_ATTESTATION_CHALLENGE", "KEY_GEN_NO_SUCH_ALGORITHM", "KEY_GEN_INVALID_ALGORITHM_PARAMETERS", "KEY_GEN_NO_KEYSTORE_PROVIDER", "KEY_GEN_STRONGBOX_UNAVAILABLE", "KEY_GEN_FAILURE", "KEY_ATTESTATION_SUCCESS", "KEY_ATTESTATION_MISSING_CHALLENGE", "KEY_ATTESTATION_CANNOT_COLLECT_DATA", "KEY_ATTESTATION_CANNOT_ATTEST_IDS", "KEY_ATTESTATION_FAILURE", "KEY_ALIAS_SELECTION_DENIED" ],
  "methodNames" : [ "public static Intent createInstallIntent()", "public static void choosePrivateKeyAlias(@NonNull Activity activity, @NonNull KeyChainAliasCallback response, @Nullable @KeyProperties.KeyAlgorithmEnum String[] keyTypes, @Nullable Principal[] issuers, @Nullable String host, int port, @Nullable String alias)", "public static void choosePrivateKeyAlias(@NonNull Activity activity, @NonNull KeyChainAliasCallback response, @Nullable @KeyProperties.KeyAlgorithmEnum String[] keyTypes, @Nullable Principal[] issuers, @Nullable Uri uri, @Nullable String alias)", "public static PrivateKey getPrivateKey(@NonNull Context context, @NonNull String alias) throws KeyChainException, InterruptedException", "public static KeyPair getKeyPair(@NonNull Context context, @NonNull String alias) throws KeyChainException, InterruptedException", "public static X509Certificate[] getCertificateChain(@NonNull Context context, @NonNull String alias) throws KeyChainException, InterruptedException", "public static boolean isKeyAlgorithmSupported(@NonNull @KeyProperties.KeyAlgorithmEnum String algorithm)", "public static boolean isBoundKeyAlgorithm(@NonNull @KeyProperties.KeyAlgorithmEnum String algorithm)", "public static X509Certificate toCertificate(@NonNull byte[] bytes)", "public static Collection<X509Certificate> toCertificates(@NonNull byte[] bytes)", "public static KeyChainConnection bind(@NonNull Context context) throws InterruptedException", "public static KeyChainConnection bindAsUser(@NonNull Context context, UserHandle user) throws InterruptedException", "private static void ensureNotOnMainThread(@NonNull Context context)" ]
}