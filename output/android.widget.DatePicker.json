{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/DatePicker.java",
  "packageName" : "android.widget",
  "className" : "DatePicker",
  "comment" : "\n * Provides a widget for selecting a date.\n * <p>\n * When the {@link android.R.styleable#DatePicker_datePickerMode} attribute is\n * set to {@code spinner}, the date can be selected using year, month, and day\n * spinners or a {@link CalendarView}. The set of spinners and the calendar\n * view are automatically synchronized. The client can customize whether only\n * the spinners, or only the calendar view, or both to be displayed.\n * </p>\n * <p>\n * When the {@link android.R.styleable#DatePicker_datePickerMode} attribute is\n * set to {@code calendar}, the month and day can be selected using a\n * calendar-style view while the year can be selected separately using a list.\n * </p>\n * <p>\n * See the <a href=\"{@docRoot}guide/topics/ui/controls/pickers.html\">Pickers</a>\n * guide.\n * </p>\n * <p>\n * For a dialog using this view, see {@link android.app.DatePickerDialog}.\n * </p>\n *\n * @attr ref android.R.styleable#DatePicker_startYear\n * @attr ref android.R.styleable#DatePicker_endYear\n * @attr ref android.R.styleable#DatePicker_maxDate\n * @attr ref android.R.styleable#DatePicker_minDate\n * @attr ref android.R.styleable#DatePicker_spinnersShown\n * @attr ref android.R.styleable#DatePicker_calendarViewShown\n * @attr ref android.R.styleable#DatePicker_dayOfWeekBackground\n * @attr ref android.R.styleable#DatePicker_dayOfWeekTextAppearance\n * @attr ref android.R.styleable#DatePicker_headerBackground\n * @attr ref android.R.styleable#DatePicker_headerMonthTextAppearance\n * @attr ref android.R.styleable#DatePicker_headerDayOfMonthTextAppearance\n * @attr ref android.R.styleable#DatePicker_headerYearTextAppearance\n * @attr ref android.R.styleable#DatePicker_yearListItemTextAppearance\n * @attr ref android.R.styleable#DatePicker_yearListSelectorColor\n * @attr ref android.R.styleable#DatePicker_calendarTextColor\n * @attr ref android.R.styleable#DatePicker_datePickerMode\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_SPINNER",
    "type" : "int",
    "comment" : "\n     * Presentation mode for the Holo-style date picker that uses a set of\n     * {@link android.widget.NumberPicker}s.\n     *\n     * @see #getMode()\n     * @hide Visible for testing only.\n     ",
    "links" : [ "android.widget.NumberPicker" ]
  }, {
    "name" : "MODE_CALENDAR",
    "type" : "int",
    "comment" : "\n     * Presentation mode for the Material-style date picker that uses a\n     * calendar.\n     *\n     * @see #getMode()\n     * @hide Visible for testing only.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDelegate",
    "type" : "DatePickerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private DatePickerDelegate createSpinnerUIDelegate(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",
    "returnType" : "DatePickerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private DatePickerDelegate createCalendarUIDelegate(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",
    "returnType" : "DatePickerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n     * @return the picker's presentation mode, one of {@link #MODE_CALENDAR} or\n     *         {@link #MODE_SPINNER}\n     * @attr ref android.R.styleable#DatePicker_datePickerMode\n     * @hide Visible for testing only.\n     ",
    "links" : [ "#MODE_SPINNER", "#MODE_CALENDAR" ]
  }, {
    "name" : "public void init(int year, int monthOfYear, int dayOfMonth, OnDateChangedListener onDateChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the state. If the provided values designate an inconsistent\n     * date the values are normalized before updating the spinners.\n     *\n     * @param year The initial year.\n     * @param monthOfYear The initial month <strong>starting from zero</strong>.\n     * @param dayOfMonth The initial day of the month.\n     * @param onDateChangedListener How user is notified date is changed by\n     *            user, can be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDateChangedListener(OnDateChangedListener onDateChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Set the callback that indicates the date has been adjusted by the user.\n     *\n     * @param onDateChangedListener How user is notified date is changed by\n     *            user, can be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateDate(int year, int month, int dayOfMonth)",
    "returnType" : "void",
    "comment" : "\n     * Update the current date.\n     *\n     * @param year The year.\n     * @param month The month which is <strong>starting from zero</strong>.\n     * @param dayOfMonth The day of the month.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getYear()",
    "returnType" : "int",
    "comment" : "\n     * @return The selected year.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMonth()",
    "returnType" : "int",
    "comment" : "\n     * @return The selected month.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDayOfMonth()",
    "returnType" : "int",
    "comment" : "\n     * @return The selected day of month.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMinDate()",
    "returnType" : "long",
    "comment" : "\n     * Gets the minimal date supported by this {@link DatePicker} in\n     * milliseconds since January 1, 1970 00:00:00 in\n     * {@link TimeZone#getDefault()} time zone.\n     * <p>\n     * Note: The default minimal date is 01/01/1900.\n     * <p>\n     *\n     * @return The minimal supported date.\n     ",
    "links" : [ "android.icu.util.TimeZone#getDefault()", "android.widget.DatePicker" ]
  }, {
    "name" : "public void setMinDate(long minDate)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimal date supported by this {@link NumberPicker} in\n     * milliseconds since January 1, 1970 00:00:00 in\n     * {@link TimeZone#getDefault()} time zone.\n     *\n     * @param minDate The minimal supported date.\n     ",
    "links" : [ "android.icu.util.TimeZone#getDefault()", "android.widget.NumberPicker" ]
  }, {
    "name" : "public long getMaxDate()",
    "returnType" : "long",
    "comment" : "\n     * Gets the maximal date supported by this {@link DatePicker} in\n     * milliseconds since January 1, 1970 00:00:00 in\n     * {@link TimeZone#getDefault()} time zone.\n     * <p>\n     * Note: The default maximal date is 12/31/2100.\n     * <p>\n     *\n     * @return The maximal supported date.\n     ",
    "links" : [ "android.icu.util.TimeZone#getDefault()", "android.widget.DatePicker" ]
  }, {
    "name" : "public void setMaxDate(long maxDate)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximal date supported by this {@link DatePicker} in\n     * milliseconds since January 1, 1970 00:00:00 in\n     * {@link TimeZone#getDefault()} time zone.\n     *\n     * @param maxDate The maximal supported date.\n     ",
    "links" : [ "android.icu.util.TimeZone#getDefault()", "android.widget.DatePicker" ]
  }, {
    "name" : "public void setValidationCallback(@Nullable ValidationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback that indicates the current date is valid.\n     *\n     * @param callback the callback, may be null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFirstDayOfWeek(int firstDayOfWeek)",
    "returnType" : "void",
    "comment" : "\n     * Sets the first day of week.\n     *\n     * @param firstDayOfWeek The first day of the week conforming to the\n     *            {@link CalendarView} APIs.\n     * @see Calendar#SUNDAY\n     * @see Calendar#MONDAY\n     * @see Calendar#TUESDAY\n     * @see Calendar#WEDNESDAY\n     * @see Calendar#THURSDAY\n     * @see Calendar#FRIDAY\n     * @see Calendar#SATURDAY\n     *\n     * @attr ref android.R.styleable#DatePicker_firstDayOfWeek\n     ",
    "links" : [ "android.widget.CalendarView" ]
  }, {
    "name" : "public int getFirstDayOfWeek()",
    "returnType" : "int",
    "comment" : "\n     * Gets the first day of week.\n     *\n     * @return The first day of the week conforming to the {@link CalendarView}\n     *         APIs.\n     * @see Calendar#SUNDAY\n     * @see Calendar#MONDAY\n     * @see Calendar#TUESDAY\n     * @see Calendar#WEDNESDAY\n     * @see Calendar#THURSDAY\n     * @see Calendar#FRIDAY\n     * @see Calendar#SATURDAY\n     *\n     * @attr ref android.R.styleable#DatePicker_firstDayOfWeek\n     ",
    "links" : [ "android.widget.CalendarView" ]
  }, {
    "name" : "public boolean getCalendarViewShown()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the {@link CalendarView} is shown.\n     * <p>\n     * <strong>Note:</strong> This method returns {@code false} when the\n     * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set\n     * to {@code calendar}.\n     *\n     * @return {@code true} if the calendar view is shown\n     * @see #getCalendarView()\n     * @deprecated Not supported by Material-style {@code calendar} mode\n     ",
    "links" : [ "android.widget.CalendarView", "android.R.styleable#DatePicker_datePickerMode" ]
  }, {
    "name" : "public CalendarView getCalendarView()",
    "returnType" : "CalendarView",
    "comment" : "\n     * Returns the {@link CalendarView} used by this picker.\n     * <p>\n     * <strong>Note:</strong> This method throws an\n     * {@link UnsupportedOperationException} when the\n     * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set\n     * to {@code calendar}.\n     *\n     * @return the calendar view\n     * @see #getCalendarViewShown()\n     * @deprecated Not supported by Material-style {@code calendar} mode\n     * @throws UnsupportedOperationException if called when the picker is\n     *         displayed in {@code calendar} mode\n     ",
    "links" : [ "android.widget.CalendarView", "android.R.styleable#DatePicker_datePickerMode", "UnsupportedOperationException" ]
  }, {
    "name" : "public void setCalendarViewShown(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the {@link CalendarView} is shown.\n     * <p>\n     * <strong>Note:</strong> Calling this method has no effect when the\n     * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set\n     * to {@code calendar}.\n     *\n     * @param shown {@code true} to show the calendar view, {@code false} to\n     *              hide it\n     * @deprecated Not supported by Material-style {@code calendar} mode\n     ",
    "links" : [ "android.widget.CalendarView", "android.R.styleable#DatePicker_datePickerMode" ]
  }, {
    "name" : "public boolean getSpinnersShown()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the spinners are shown.\n     * <p>\n     * <strong>Note:</strong> his method returns {@code false} when the\n     * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set\n     * to {@code calendar}.\n     *\n     * @return {@code true} if the spinners are shown\n     * @deprecated Not supported by Material-style {@code calendar} mode\n     ",
    "links" : [ "android.R.styleable#DatePicker_datePickerMode" ]
  }, {
    "name" : "public void setSpinnersShown(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the spinners are shown.\n     * <p>\n     * Calling this method has no effect when the\n     * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set\n     * to {@code calendar}.\n     *\n     * @param shown {@code true} to show the spinners, {@code false} to hide\n     *              them\n     * @deprecated Not supported by Material-style {@code calendar} mode\n     ",
    "links" : [ "android.R.styleable#DatePicker_datePickerMode" ]
  }, {
    "name" : "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchProvideAutofillStructure(ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void autofill(AutofillValue value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAutofillType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AutofillValue getAutofillValue()",
    "returnType" : "AutofillValue",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "MODE_SPINNER", "MODE_CALENDAR", "mDelegate", "mMode" ],
  "methodNames" : [ "private DatePickerDelegate createSpinnerUIDelegate(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)", "private DatePickerDelegate createCalendarUIDelegate(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)", "public int getMode()", "public void init(int year, int monthOfYear, int dayOfMonth, OnDateChangedListener onDateChangedListener)", "public void setOnDateChangedListener(OnDateChangedListener onDateChangedListener)", "public void updateDate(int year, int month, int dayOfMonth)", "public int getYear()", "public int getMonth()", "public int getDayOfMonth()", "public long getMinDate()", "public void setMinDate(long minDate)", "public long getMaxDate()", "public void setMaxDate(long maxDate)", "public void setValidationCallback(@Nullable ValidationCallback callback)", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public CharSequence getAccessibilityClassName()", "protected void onConfigurationChanged(Configuration newConfig)", "public void setFirstDayOfWeek(int firstDayOfWeek)", "public int getFirstDayOfWeek()", "public boolean getCalendarViewShown()", "public CalendarView getCalendarView()", "public void setCalendarViewShown(boolean shown)", "public boolean getSpinnersShown()", "public void setSpinnersShown(boolean shown)", "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)", "protected Parcelable onSaveInstanceState()", "protected void onRestoreInstanceState(Parcelable state)", "public void dispatchProvideAutofillStructure(ViewStructure structure, int flags)", "public void autofill(AutofillValue value)", "public int getAutofillType()", "public AutofillValue getAutofillValue()" ]
}