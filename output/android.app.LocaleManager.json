{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/LocaleManager.java",
  "packageName" : "android.app",
  "className" : "LocaleManager",
  "comment" : "\n * This class gives access to system locale services. These services allow applications to\n * control granular locale settings (such as per-app locales) or override their list of supported\n * locales while running.\n *\n * <p> Third party applications should treat this as a write-side surface, and continue reading\n * locales via their in-process {@link LocaleList}s.\n ",
  "links" : [ "android.os.LocaleList" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : " Context required for getting the user for which API calls are made. ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ILocaleManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setApplicationLocales(@NonNull LocaleList locales)",
    "returnType" : "void",
    "comment" : "\n     * Sets the UI locales for the calling app.\n     *\n     * <p>Pass a {@link LocaleList#getEmptyLocaleList()} to reset to the system locale.\n     *\n     * <p><b>Note:</b> Changes to app locales will result in a configuration change (and potentially\n     * an Activity lifecycle event) being applied to the calling application. For more information,\n     * see the <a\n     * href=\"https://developer.android.com/guide/topics/resources/runtime-changes\">section on\n     * handling configuration changes</a>. The set locales are persisted; they are backed up if the\n     * user has enabled Backup & Restore.\n     *\n     * <p><b>Note:</b> Users' locale preferences are passed to applications by creating a union of\n     * any app-specific locales and system locales, with the app-specific locales appearing first.\n     * Language resources are then chosen per usual (as described in the <a\n     * href=\"https://developer.android.com/guide/topics/resources/multilingual-support\">section on\n     * locale resolution</a>).\n     *\n     * @param locales the desired locales for the calling app.\n     ",
    "links" : [ "android.os.LocaleList#getEmptyLocaleList()" ]
  }, {
    "name" : "public void setApplicationLocales(@NonNull String appPackageName, @NonNull LocaleList locales)",
    "returnType" : "void",
    "comment" : "\n     * Sets the UI locales for a specified app (described by package name).\n     *\n     * <p>Pass a {@link LocaleList#getEmptyLocaleList()} to reset to the system locale.\n     *\n     * <p><b>Note:</b> Changes to app locales will result in a configuration change (and potentially\n     * an Activity lifecycle event) being applied to the specified application. For more\n     * information, see the <a\n     * href=\"https://developer.android.com/guide/topics/resources/runtime-changes\">section on\n     * handling configuration changes</a>. The set locales are persisted; they are backed up if the\n     * user has enabled Backup & Restore.\n     *\n     * <p><b>Note:</b> Users' locale preferences are passed to applications by creating a union of\n     * any app-specific locales and system locales, with the app-specific locales appearing first.\n     * Language resources are then chosen per usual (as described in the <a\n     * href=\"https://developer.android.com/guide/topics/resources/multilingual-support\">section on\n     * locale resolution</a>).\n     *\n     * @param appPackageName the package name of the app for which to set the locales.\n     * @param locales the desired locales for the specified app.\n     * @hide\n     ",
    "links" : [ "android.os.LocaleList#getEmptyLocaleList()" ]
  }, {
    "name" : "private void setApplicationLocales(@NonNull String appPackageName, @NonNull LocaleList locales, boolean fromDelegate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LocaleList getApplicationLocales()",
    "returnType" : "LocaleList",
    "comment" : "\n     * Returns the UI locales for the calling app.\n     *\n     * <p>Returns a {@link LocaleList#getEmptyLocaleList()} if no app-specific locales are set.\n     ",
    "links" : [ "android.os.LocaleList#getEmptyLocaleList()" ]
  }, {
    "name" : "public LocaleList getApplicationLocales(@NonNull String appPackageName)",
    "returnType" : "LocaleList",
    "comment" : "\n     * Returns the current UI locales for a specified app (described by package name).\n     *\n     * <p>Returns a {@link LocaleList#getEmptyLocaleList()} if no app-specific locales are set.\n     *\n     * <p>This API can be used by an app's installer\n     * (per {@link android.content.pm.InstallSourceInfo#getInstallingPackageName}) to retrieve\n     * the app's locales.\n     * <p>This API can be used by the current input method to retrieve locales of another packages.\n     * All other cases require {@code android.Manifest.permission#READ_APP_SPECIFIC_LOCALES}.\n     * Apps should generally retrieve their own locales via their in-process LocaleLists,\n     * or by calling {@link #getApplicationLocales()}.\n     *\n     * @param appPackageName the package name of the app for which to retrieve the locales.\n     ",
    "links" : [ "android.content.pm.InstallSourceInfo#getInstallingPackageName", "#getApplicationLocales()", "android.os.LocaleList#getEmptyLocaleList()" ]
  }, {
    "name" : "public LocaleList getSystemLocales()",
    "returnType" : "LocaleList",
    "comment" : "\n     * Returns the current system locales, ignoring app-specific overrides.\n     *\n     * <p><b>Note:</b> Apps should generally access the user's locale preferences as indicated in\n     * their in-process {@link LocaleList}s. However, in case an app-specific locale is set, this\n     * method helps cater to rare use-cases which might require specifically knowing the system\n     * locale.\n     *\n     * <p><b>Note:</b> This API is not user-aware. It returns the system locales for the foreground\n     * user.\n     ",
    "links" : [ "android.os.LocaleList" ]
  }, {
    "name" : "public void setSystemLocales(@NonNull LocaleList locales)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current system locales to the provided value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOverrideLocaleConfig(@Nullable LocaleConfig localeConfig)",
    "returnType" : "void",
    "comment" : "\n     * Sets the override LocaleConfig for the calling app.\n     *\n     * <p><b>Note:</b> Only the app itself with the same user can override its own LocaleConfig.\n     *\n     * <p><b>Note:</b> This function takes in a {@link LocaleConfig} which is intended to\n     * override the original config in the application&#39;s resources. This LocaleConfig will\n     * become the override config, and stored in a system file for future access.\n     *\n     * <p><b>Note:</b> Using this function, applications can update their list of supported\n     * locales while running, without an update of the application&#39;s software. For more\n     * information, see the <a\n     * href=\"https://developer.android.com/about/versions/14/features#app-languages\">section on\n     * dynamic updates for an app's localeConfig</a>.\n     *\n     * <p>Applications can remove the override LocaleConfig with a {@code null} object.\n     *\n     * @param localeConfig the desired {@link LocaleConfig} for the calling app.\n     ",
    "links" : [ "android.app.LocaleConfig" ]
  }, {
    "name" : "public LocaleConfig getOverrideLocaleConfig()",
    "returnType" : "LocaleConfig",
    "comment" : "\n     * Returns the override LocaleConfig for the calling app.\n     *\n     * @return the override LocaleConfig, or {@code null} if the LocaleConfig isn't overridden.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setApplicationLocales(@NonNull LocaleList locales)", "public void setApplicationLocales(@NonNull String appPackageName, @NonNull LocaleList locales)", "private void setApplicationLocales(@NonNull String appPackageName, @NonNull LocaleList locales, boolean fromDelegate)", "public LocaleList getApplicationLocales()", "public LocaleList getApplicationLocales(@NonNull String appPackageName)", "public LocaleList getSystemLocales()", "public void setSystemLocales(@NonNull LocaleList locales)", "public void setOverrideLocaleConfig(@Nullable LocaleConfig localeConfig)", "public LocaleConfig getOverrideLocaleConfig()" ],
  "variableNames" : [ "TAG", "mContext", "mService" ]
}