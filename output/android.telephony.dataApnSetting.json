{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/data/ApnSetting.java",
  "packageName" : "android.telephony.data",
  "className" : "ApnSetting",
  "comment" : "\n * An Access Point Name (APN) configuration for a carrier data connection.\n *\n * <p>The APN provides configuration to connect a cellular network device to an IP data network. A\n * carrier uses the name, type and other configuration in an {@code APNSetting} to decide which IP\n * address to assign, any security methods to apply, and how the device might be connected to\n * private networks.\n *\n * <p>Use {@link ApnSetting.Builder} to create new instances.\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "V2_FORMAT_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "V3_FORMAT_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "V4_FORMAT_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "V5_FORMAT_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "V6_FORMAT_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "V7_FORMAT_REGEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSET_MTU",
    "type" : "int",
    "comment" : "\n     * Default value for mtu if it's not set. Moved from PhoneConstants.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UNSPECIFIED_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSPECIFIED_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * APN type for none. Should only be used for initialization.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALL",
    "type" : "int",
    "comment" : "\n     * APN type for all APNs (except wild-cardable types).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DEFAULT",
    "type" : "int",
    "comment" : " APN type for default data traffic. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MMS",
    "type" : "int",
    "comment" : " APN type for MMS traffic. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SUPL",
    "type" : "int",
    "comment" : " APN type for SUPL assisted GPS. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DUN",
    "type" : "int",
    "comment" : " APN type for DUN traffic. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HIPRI",
    "type" : "int",
    "comment" : " APN type for HiPri traffic. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FOTA",
    "type" : "int",
    "comment" : " APN type for accessing the carrier's FOTA portal, used for over the air updates. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IMS",
    "type" : "int",
    "comment" : " APN type for IMS. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CBS",
    "type" : "int",
    "comment" : " APN type for CBS. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IA",
    "type" : "int",
    "comment" : " APN type for IA Initial Attach APN. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * APN type for Emergency PDN. This is not an IA apn, but is used\n     * for access to carrier services in an emergency call situation.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MCX",
    "type" : "int",
    "comment" : " APN type for MCX (Mission Critical Service) where X can be PTT/Video/Data ",
    "links" : [ ]
  }, {
    "name" : "TYPE_XCAP",
    "type" : "int",
    "comment" : " APN type for XCAP. ",
    "links" : [ ]
  }, {
    "name" : "AUTH_TYPE_NONE",
    "type" : "int",
    "comment" : " No authentication type. ",
    "links" : [ ]
  }, {
    "name" : "AUTH_TYPE_PAP",
    "type" : "int",
    "comment" : " Authentication type for PAP. ",
    "links" : [ ]
  }, {
    "name" : "AUTH_TYPE_CHAP",
    "type" : "int",
    "comment" : " Authentication type for CHAP. ",
    "links" : [ ]
  }, {
    "name" : "AUTH_TYPE_PAP_OR_CHAP",
    "type" : "int",
    "comment" : " Authentication type for PAP or CHAP. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ALL_STRING",
    "type" : "String",
    "comment" : "\n     * APN types for data connections.  These are usage categories for an APN\n     * entry.  One APN entry may support multiple APN types, eg, a single APN\n     * may service regular internet traffic (\"default\") as well as MMS-specific\n     * connections.<br/>\n     * APN_TYPE_ALL is a special type to indicate that this APN entry can\n     * service all data connections.\n     * <p>\n     * Note: The goal is to deprecate this.  Due to the Carrier Table being used\n     * directly, this isn't feasible right now.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DEFAULT_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for default data traffic\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MMS_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for MMS traffic\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SUPL_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for SUPL assisted GPS\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DUN_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for DUN traffic\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HIPRI_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for HiPri traffic\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FOTA_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for FOTA\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IMS_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for IMS\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CBS_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for CBS\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_IA_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for IA Initial Attach APN\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_EMERGENCY_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for Emergency PDN. This is not an IA apn, but is used\n     * for access to carrier services in an emergency call situation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MCX_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for Mission Critical Services\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_XCAP_STRING",
    "type" : "String",
    "comment" : "\n     * APN type for XCAP\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_IP",
    "type" : "int",
    "comment" : " Internet protocol. ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_IPV6",
    "type" : "int",
    "comment" : " Internet protocol, version 6. ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_IPV4V6",
    "type" : "int",
    "comment" : " Virtual PDP type introduced to handle dual IP stack UE capability. ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_PPP",
    "type" : "int",
    "comment" : " Point to point protocol. ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_NON_IP",
    "type" : "int",
    "comment" : " Transfer of Non-IP data to external packet data network. ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_UNSTRUCTURED",
    "type" : "int",
    "comment" : " Transfer of Unstructured data to the Data Network via N6. ",
    "links" : [ ]
  }, {
    "name" : "MVNO_TYPE_SPN",
    "type" : "int",
    "comment" : " MVNO type for service provider name. ",
    "links" : [ ]
  }, {
    "name" : "MVNO_TYPE_IMSI",
    "type" : "int",
    "comment" : " MVNO type for IMSI. ",
    "links" : [ ]
  }, {
    "name" : "MVNO_TYPE_GID",
    "type" : "int",
    "comment" : " MVNO type for group identifier level 1. ",
    "links" : [ ]
  }, {
    "name" : "MVNO_TYPE_ICCID",
    "type" : "int",
    "comment" : " MVNO type for ICCID. ",
    "links" : [ ]
  }, {
    "name" : "APN_TYPE_STRING_MAP",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APN_TYPE_INT_MAP",
    "type" : "Map<Integer, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_STRING_MAP",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_INT_MAP",
    "type" : "Map<Integer, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MVNO_TYPE_STRING_MAP",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MVNO_TYPE_INT_MAP",
    "type" : "Map<Integer, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntryName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApnName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMmsc",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMmsProxyAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMmsProxyPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUser",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPassword",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApnTypeBitmask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperatorNumeric",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProtocol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoamingProtocol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMtu",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkTypeBitmask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersistent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxConns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaitTime",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxConnsTime",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMvnoType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMvnoMatchData",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApnSetId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPermanentFailed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSkip464Xlat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ApnSetting>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getMtu()",
    "returnType" : "int",
    "comment" : "\n     * Returns the MTU size of the mobile interface to which the APN connected.\n     *\n     * @return the MTU size of the APN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProfileId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the profile id to which the APN saved in modem.\n     *\n     * @return the profile id of the APN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPersistent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the APN setting is persistent on the modem.\n     *\n     * @return is the APN setting to be set in modem\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxConns()",
    "returnType" : "int",
    "comment" : "\n     * Returns the max connections of this APN.\n     *\n     * @return the max connections of this APN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWaitTime()",
    "returnType" : "int",
    "comment" : "\n     * Returns the wait time for retry of the APN.\n     *\n     * @return the wait time for retry of the APN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxConnsTime()",
    "returnType" : "int",
    "comment" : "\n     * Returns the time to limit max connection for the APN.\n     *\n     * @return the time to limit max connection for the APN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMvnoMatchData()",
    "returnType" : "String",
    "comment" : "\n     * Returns the MVNO data. Examples:\n     *   \"spn\": A MOBILE, BEN NL\n     *   \"imsi\": 302720x94, 2060188\n     *   \"gid\": 4E, 33\n     *   \"iccid\": 898603 etc..\n     *\n     * @return the mvno match data\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getApnSetId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the APN set id.\n     *\n     * APNs that are part of the same set should be preferred together, e.g. if the\n     * user selects a default APN with apnSetId=1, then we will prefer all APNs with apnSetId = 1.\n     *\n     * If the apnSetId = Carriers.NO_SET_SET(=0) then the APN is not part of a set.\n     *\n     * @return the APN set id\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPermanentFailed()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates this APN setting is permanently failed and cannot be\n     * retried by the retry manager anymore.\n     *\n     * @return if this APN setting is permanently failed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPermanentFailed(boolean permanentFailed)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this APN setting is permanently failed.\n     *\n     * @param permanentFailed if this APN setting is permanently failed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEntryName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the human-readable name that describes the APN.\n     *\n     * @return the entry name for the APN\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getApnName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the APN.\n     *\n     * @return APN name\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getProxyAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Gets the HTTP proxy address configured for the APN. The proxy address might be an IP address\n     * or hostname. This method returns {@code null} if system networking (typically DNS) isn’t\n     * available to resolve a hostname value—values set as IP addresses don’t have this restriction.\n     * This is a known problem and will be addressed in a future release.\n     *\n     * @return the HTTP proxy address or {@code null} if DNS isn’t available to resolve a hostname\n     * @deprecated use {@link #getProxyAddressAsString()} instead.\n     ",
    "links" : [ "#getProxyAddressAsString" ]
  }, {
    "name" : "public String getProxyAddressAsString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the proxy address of the APN.\n     *\n     * @return proxy address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProxyPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the proxy address of the APN.\n     *\n     * @return proxy address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getMmsc()",
    "returnType" : "Uri",
    "comment" : "\n     * Returns the MMSC Uri of the APN.\n     *\n     * @return MMSC Uri.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getMmsProxyAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Gets the MMS proxy address configured for the APN. The MMS proxy address might be an IP\n     * address or hostname. This method returns {@code null} if system networking (typically DNS)\n     * isn’t available to resolve a hostname value—values set as IP addresses don’t have this\n     * restriction. This is a known problem and will be addressed in a future release.\n     *\n     * @return the MMS proxy address or {@code null} if DNS isn’t available to resolve a hostname\n     * @deprecated use {@link #getMmsProxyAddressAsString()} instead.\n     ",
    "links" : [ "#getMmsProxyAddressAsString" ]
  }, {
    "name" : "public String getMmsProxyAddressAsString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the MMS proxy address of the APN.\n     *\n     * @return MMS proxy address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMmsProxyPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the MMS proxy port of the APN.\n     *\n     * @return MMS proxy port\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUser()",
    "returnType" : "String",
    "comment" : "\n     * Returns the APN username of the APN.\n     *\n     * @return APN username\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPassword()",
    "returnType" : "String",
    "comment" : "\n     * Returns the APN password of the APN.\n     *\n     * @return APN password\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAuthType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the authentication type of the APN.\n     *\n     * @return authentication type\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getApnTypeBitmask()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bitmask of APN types.\n     *\n     * <p>Apn types are usage categories for an APN entry. One APN entry may support multiple\n     * APN types, eg, a single APN may service regular internet traffic (\"default\") as well as\n     * MMS-specific connections.\n     *\n     * <p>The bitmask of APN types is calculated from APN types defined in {@link ApnSetting}.\n     *\n     * @see Builder#setApnTypeBitmask(int)\n     * @return a bitmask describing the types of the APN\n     ",
    "links" : [ "ApnSetting" ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the unique database id for this entry.\n     *\n     * @return the unique database id\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOperatorNumeric()",
    "returnType" : "String",
    "comment" : "\n     * Returns the numeric operator ID for the APN. Numeric operator ID is defined as\n     * {@link android.provider.Telephony.Carriers#MCC} +\n     * {@link android.provider.Telephony.Carriers#MNC}.\n     *\n     * @return the numeric operator ID\n     ",
    "links" : [ "android.provider.Telephony.Carriers#MCC", "android.provider.Telephony.Carriers#MNC" ]
  }, {
    "name" : "public int getProtocol()",
    "returnType" : "int",
    "comment" : "\n     * Returns the protocol to use to connect to this APN.\n     *\n     * <p>Protocol is one of the {@code PDP_type} values in TS 27.007 section 10.1.1.\n     *\n     * @see Builder#setProtocol(int)\n     * @return the protocol\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRoamingProtocol()",
    "returnType" : "int",
    "comment" : "\n     * Returns the protocol to use to connect to this APN while the device is roaming.\n     *\n     * <p>Roaming protocol is one of the {@code PDP_type} values in TS 27.007 section 10.1.1.\n     *\n     * @see Builder#setRoamingProtocol(int)\n     * @return the roaming protocol\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current status of APN.\n     *\n     * {@code true} : enabled APN.\n     * {@code false} : disabled APN.\n     *\n     * @return the current status\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkTypeBitmask()",
    "returnType" : "int",
    "comment" : "\n     * Returns a bitmask describing the Radio Technologies(Network Types) which this APN may use.\n     *\n     * NetworkType bitmask is calculated from NETWORK_TYPE defined in {@link TelephonyManager}.\n     *\n     * Examples of Network Types include {@link TelephonyManager#NETWORK_TYPE_UNKNOWN},\n     * {@link TelephonyManager#NETWORK_TYPE_GPRS}, {@link TelephonyManager#NETWORK_TYPE_EDGE}.\n     *\n     * @return a bitmask describing the Radio Technologies(Network Types)\n     ",
    "links" : [ "TelephonyManager", "TelephonyManager#NETWORK_TYPE_UNKNOWN", "TelephonyManager#NETWORK_TYPE_GPRS", "TelephonyManager#NETWORK_TYPE_EDGE" ]
  }, {
    "name" : "public int getMvnoType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the MVNO match type for this APN.\n     *\n     * @see Builder#setMvnoType(int)\n     * @return the MVNO match type\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCarrierId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the carrier id for this APN.\n     *\n     * @see Builder#setCarrierId(int)\n     * @return the carrier id\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSkip464Xlat()",
    "returnType" : "int",
    "comment" : "\n     * Returns the skip464xlat flag for this APN.\n     *\n     * @return SKIP_464XLAT_DEFAULT, SKIP_464XLAT_DISABLE or SKIP_464XLAT_ENABLE\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApnSetting makeApnSetting(int id, String operatorNumeric, String entryName, String apnName, String proxyAddress, int proxyPort, Uri mmsc, String mmsProxyAddress, int mmsProxyPort, String user, String password, int authType, int mApnTypeBitmask, int protocol, int roamingProtocol, boolean carrierEnabled, int networkTypeBitmask, int profileId, boolean modemCognitive, int maxConns, int waitTime, int maxConnsTime, int mtu, int mvnoType, String mvnoMatchData, int apnSetId, int carrierId, int skip464xlat)",
    "returnType" : "ApnSetting",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApnSetting makeApnSetting(int id, String operatorNumeric, String entryName, String apnName, String proxyAddress, int proxyPort, Uri mmsc, String mmsProxyAddress, int mmsProxyPort, String user, String password, int authType, int mApnTypeBitmask, int protocol, int roamingProtocol, boolean carrierEnabled, int networkTypeBitmask, int profileId, boolean modemCognitive, int maxConns, int waitTime, int maxConnsTime, int mtu, int mvnoType, String mvnoMatchData)",
    "returnType" : "ApnSetting",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApnSetting makeApnSetting(Cursor cursor)",
    "returnType" : "ApnSetting",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApnSetting makeApnSetting(ApnSetting apn)",
    "returnType" : "ApnSetting",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApnSetting fromString(String data)",
    "returnType" : "ApnSetting",
    "comment" : "\n     * Creates an ApnSetting object from a string.\n     *\n     * @param data the string to read.\n     *\n     * The string must be in one of two formats (newlines added for clarity,\n     * spaces are optional):\n     *\n     * v1 format:\n     *   <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...],\n     *\n     * v2 format:\n     *   [ApnSettingV2] <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearerBitmask>,\n     *\n     * v3 format:\n     *   [ApnSettingV3] <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearerBitmask>,\n     *   <profileId>, <modemCognitive>, <maxConns>, <waitTime>, <maxConnsTime>, <mtu>,\n     *   <mvnoType>, <mvnoMatchData>\n     *\n     * v4 format:\n     *   [ApnSettingV4] <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearerBitmask>,\n     *   <profileId>, <modemCognitive>, <maxConns>, <waitTime>, <maxConnsTime>, <mtu>,\n     *   <mvnoType>, <mvnoMatchData>, <networkTypeBitmask>\n     *\n     * v5 format:\n     *   [ApnSettingV5] <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearerBitmask>,\n     *   <profileId>, <modemCognitive>, <maxConns>, <waitTime>, <maxConnsTime>, <mtu>,\n     *   <mvnoType>, <mvnoMatchData>, <networkTypeBitmask>, <apnSetId>\n     *\n     * v6 format:\n     *   [ApnSettingV6] <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearerBitmask>,\n     *   <profileId>, <modemCognitive>, <maxConns>, <waitTime>, <maxConnsTime>, <mtu>,\n     *   <mvnoType>, <mvnoMatchData>, <networkTypeBitmask>, <apnSetId>, <carrierId>\n     *\n     * v7 format:\n     *   [ApnSettingV7] <carrier>, <apn>, <proxy>, <port>, <user>, <password>, <server>,\n     *   <mmsc>, <mmsproxy>, <mmsport>, <mcc>, <mnc>, <authtype>,\n     *   <type>[| <type>...], <protocol>, <roaming_protocol>, <carrierEnabled>, <bearerBitmask>,\n     *   <profileId>, <modemCognitive>, <maxConns>, <waitTime>, <maxConnsTime>, <mtu>,\n     *   <mvnoType>, <mvnoMatchData>, <networkTypeBitmask>, <apnSetId>, <carrierId>, <skip464xlat>\n     *\n     * Note that the strings generated by {@link #toString()} do not contain the username\n     * and password and thus cannot be read by this method.\n     *\n     * This method may return {@code null} if the input string is invalid.\n     *\n     * @hide\n     ",
    "links" : [ "#toString" ]
  }, {
    "name" : "public static List<ApnSetting> arrayFromString(String data)",
    "returnType" : "List<ApnSetting>",
    "comment" : "\n     * Creates an array of ApnSetting objects from a string.\n     *\n     * @param data the string to read.\n     *\n     * Builds on top of the same format used by fromString, but allows for multiple entries\n     * separated by \";\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of ApnSetting.\n     *\n     * This method prints null for unset elements. The output doesn't contain password or user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMvnoParams()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there are MVNO params specified.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasApnType(int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmergencyApn()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean canHandleType(@ApnType int type)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean typeSameAny(ApnSetting first, ApnSetting second)",
    "returnType" : "boolean",
    "comment" : " Check whether the types of two APN same (even only one type of each APN is same).",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o, boolean isDataRoaming)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two APN settings\n     *\n     * Note: This method does not compare 'mId', 'mNetworkTypeBitmask'. We only use this for\n     * determining if tearing a data call is needed when conditions change. See\n     * cleanUpConnectionsOnUpdatedApns in DcTracker.\n     *\n     * @param o the other object to compare\n     * @param isDataRoaming True if the device is on data roaming\n     * @return True if the two APN settings are same\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean similar(ApnSetting other)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if neither mention DUN and are substantially similar\n     *\n     * @param other The other APN settings to compare\n     * @return True if two APN settings are similar\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean xorEquals(Object first, Object second)",
    "returnType" : "boolean",
    "comment" : " Equal or one is null.",
    "links" : [ ]
  }, {
    "name" : "private boolean xorEqualsString(String first, String second)",
    "returnType" : "boolean",
    "comment" : " Equal or one is null.",
    "links" : [ ]
  }, {
    "name" : "private boolean xorEqualsInt(int first, int second)",
    "returnType" : "boolean",
    "comment" : " Equal or one is not specified.",
    "links" : [ ]
  }, {
    "name" : "private String nullToEmpty(String stringValue)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentValues toContentValues()",
    "returnType" : "ContentValues",
    "comment" : "\n     * @hide\n     * Called by {@link android.app.admin.DevicePolicyManager} to convert this APN into\n     * ContentValue. If a field is not specified then we put \"\" instead of null.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager" ]
  }, {
    "name" : "public List<Integer> getApnTypes()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Get supported APN types\n     *\n     * @return list of APN types\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getApnTypesStringFromBitmask(int apnTypeBitmask)",
    "returnType" : "String",
    "comment" : "\n     * Converts the integer value of an APN type to the string version.\n     * @param apnTypeBitmask bitmask of APN types.\n     * @return comma delimited list of APN types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getApnTypeString(int apnType)",
    "returnType" : "String",
    "comment" : "\n     * @param apnType APN type\n     * @return APN type in string format\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getApnTypesBitmaskFromString(String types)",
    "returnType" : "int",
    "comment" : "\n     * @param types comma delimited list of APN types.\n     * @return bitmask of APN types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMvnoTypeIntFromString(String mvnoType)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getMvnoTypeStringFromInt(int mvnoType)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getProtocolIntFromString(String protocol)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getProtocolStringFromInt(int protocol)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static Uri UriFromString(String uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String UriToString(Uri uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress inetAddressFromString(String inetAddress)",
    "returnType" : "InetAddress",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String inetAddressToString(InetAddress inetAddress)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static int portFromString(String strPort)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String portToString(int port)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canSupportNetworkType(@NetworkType int networkType)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this APN setting can support the given network\n     *\n     * @param networkType The network type\n     * @return {@code true} if this APN setting can support the given network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement Parcelable.",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApnSetting readFromParcel(Parcel in)",
    "returnType" : "ApnSetting",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "VDBG", "V2_FORMAT_REGEX", "V3_FORMAT_REGEX", "V4_FORMAT_REGEX", "V5_FORMAT_REGEX", "V6_FORMAT_REGEX", "V7_FORMAT_REGEX", "UNSET_MTU", "UNSPECIFIED_INT", "UNSPECIFIED_STRING", "TYPE_NONE", "TYPE_ALL", "TYPE_DEFAULT", "TYPE_MMS", "TYPE_SUPL", "TYPE_DUN", "TYPE_HIPRI", "TYPE_FOTA", "TYPE_IMS", "TYPE_CBS", "TYPE_IA", "TYPE_EMERGENCY", "TYPE_MCX", "TYPE_XCAP", "AUTH_TYPE_NONE", "AUTH_TYPE_PAP", "AUTH_TYPE_CHAP", "AUTH_TYPE_PAP_OR_CHAP", "TYPE_ALL_STRING", "TYPE_DEFAULT_STRING", "TYPE_MMS_STRING", "TYPE_SUPL_STRING", "TYPE_DUN_STRING", "TYPE_HIPRI_STRING", "TYPE_FOTA_STRING", "TYPE_IMS_STRING", "TYPE_CBS_STRING", "TYPE_IA_STRING", "TYPE_EMERGENCY_STRING", "TYPE_MCX_STRING", "TYPE_XCAP_STRING", "PROTOCOL_IP", "PROTOCOL_IPV6", "PROTOCOL_IPV4V6", "PROTOCOL_PPP", "PROTOCOL_NON_IP", "PROTOCOL_UNSTRUCTURED", "MVNO_TYPE_SPN", "MVNO_TYPE_IMSI", "MVNO_TYPE_GID", "MVNO_TYPE_ICCID", "APN_TYPE_STRING_MAP", "APN_TYPE_INT_MAP", "PROTOCOL_STRING_MAP", "PROTOCOL_INT_MAP", "MVNO_TYPE_STRING_MAP", "MVNO_TYPE_INT_MAP", "mEntryName", "mApnName", "mProxyAddress", "mProxyPort", "mMmsc", "mMmsProxyAddress", "mMmsProxyPort", "mUser", "mPassword", "mAuthType", "mApnTypeBitmask", "mId", "mOperatorNumeric", "mProtocol", "mRoamingProtocol", "mMtu", "mCarrierEnabled", "mNetworkTypeBitmask", "mProfileId", "mPersistent", "mMaxConns", "mWaitTime", "mMaxConnsTime", "mMvnoType", "mMvnoMatchData", "mApnSetId", "mPermanentFailed", "mCarrierId", "mSkip464Xlat", "CREATOR" ],
  "methodNames" : [ "public int getMtu()", "public int getProfileId()", "public boolean isPersistent()", "public int getMaxConns()", "public int getWaitTime()", "public int getMaxConnsTime()", "public String getMvnoMatchData()", "public int getApnSetId()", "public boolean getPermanentFailed()", "public void setPermanentFailed(boolean permanentFailed)", "public String getEntryName()", "public String getApnName()", "public InetAddress getProxyAddress()", "public String getProxyAddressAsString()", "public int getProxyPort()", "public Uri getMmsc()", "public InetAddress getMmsProxyAddress()", "public String getMmsProxyAddressAsString()", "public int getMmsProxyPort()", "public String getUser()", "public String getPassword()", "public int getAuthType()", "public int getApnTypeBitmask()", "public int getId()", "public String getOperatorNumeric()", "public int getProtocol()", "public int getRoamingProtocol()", "public boolean isEnabled()", "public int getNetworkTypeBitmask()", "public int getMvnoType()", "public int getCarrierId()", "public int getSkip464Xlat()", "public static ApnSetting makeApnSetting(int id, String operatorNumeric, String entryName, String apnName, String proxyAddress, int proxyPort, Uri mmsc, String mmsProxyAddress, int mmsProxyPort, String user, String password, int authType, int mApnTypeBitmask, int protocol, int roamingProtocol, boolean carrierEnabled, int networkTypeBitmask, int profileId, boolean modemCognitive, int maxConns, int waitTime, int maxConnsTime, int mtu, int mvnoType, String mvnoMatchData, int apnSetId, int carrierId, int skip464xlat)", "public static ApnSetting makeApnSetting(int id, String operatorNumeric, String entryName, String apnName, String proxyAddress, int proxyPort, Uri mmsc, String mmsProxyAddress, int mmsProxyPort, String user, String password, int authType, int mApnTypeBitmask, int protocol, int roamingProtocol, boolean carrierEnabled, int networkTypeBitmask, int profileId, boolean modemCognitive, int maxConns, int waitTime, int maxConnsTime, int mtu, int mvnoType, String mvnoMatchData)", "public static ApnSetting makeApnSetting(Cursor cursor)", "public static ApnSetting makeApnSetting(ApnSetting apn)", "public static ApnSetting fromString(String data)", "public static List<ApnSetting> arrayFromString(String data)", "public String toString()", "public boolean hasMvnoParams()", "private boolean hasApnType(int type)", "public boolean isEmergencyApn()", "public boolean canHandleType(@ApnType int type)", "private boolean typeSameAny(ApnSetting first, ApnSetting second)", "public boolean equals(Object o)", "public boolean equals(Object o, boolean isDataRoaming)", "public boolean similar(ApnSetting other)", "private boolean xorEquals(Object first, Object second)", "private boolean xorEqualsString(String first, String second)", "private boolean xorEqualsInt(int first, int second)", "private String nullToEmpty(String stringValue)", "public ContentValues toContentValues()", "public List<Integer> getApnTypes()", "public static String getApnTypesStringFromBitmask(int apnTypeBitmask)", "public static String getApnTypeString(int apnType)", "public static int getApnTypesBitmaskFromString(String types)", "public static int getMvnoTypeIntFromString(String mvnoType)", "public static String getMvnoTypeStringFromInt(int mvnoType)", "public static int getProtocolIntFromString(String protocol)", "public static String getProtocolStringFromInt(int protocol)", "private static Uri UriFromString(String uri)", "private static String UriToString(Uri uri)", "public static InetAddress inetAddressFromString(String inetAddress)", "public static String inetAddressToString(InetAddress inetAddress)", "private static int portFromString(String strPort)", "private static String portToString(int port)", "public boolean canSupportNetworkType(@NetworkType int networkType)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private static ApnSetting readFromParcel(Parcel in)" ]
}