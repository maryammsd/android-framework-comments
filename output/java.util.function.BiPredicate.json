{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/function/BiPredicate.java",
  "packageName" : "java.util.function",
  "className" : "BiPredicate",
  "comment" : "\n * Represents a predicate (boolean-valued function) of two arguments.  This is\n * the two-arity specialization of {@link Predicate}.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #test(Object, Object)}.\n *\n * @param <T> the type of the first argument to the predicate\n * @param <U> the type of the second argument the predicate\n *\n * @see Predicate\n * @since 1.8\n ",
  "links" : [ "java.util.function.Predicate", "#test(Object" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean test(T t, U u)",
    "returnType" : "boolean",
    "comment" : "\n     * Evaluates this predicate on the given arguments.\n     *\n     * @param t the first input argument\n     * @param u the second input argument\n     * @return {@code true} if the input arguments match the predicate,\n     * otherwise {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : " BiPredicate<T, U> and(BiPredicate<? super T, ? super U> other)",
    "returnType" : "BiPredicate<T, U>",
    "comment" : "\n     * Returns a composed predicate that represents a short-circuiting logical\n     * AND of this predicate and another.  When evaluating the composed\n     * predicate, if this predicate is {@code false}, then the {@code other}\n     * predicate is not evaluated.\n     *\n     * <p>Any exceptions thrown during evaluation of either predicate are relayed\n     * to the caller; if evaluation of this predicate throws an exception, the\n     * {@code other} predicate will not be evaluated.\n     *\n     * @param other a predicate that will be logically-ANDed with this\n     *              predicate\n     * @return a composed predicate that represents the short-circuiting logical\n     * AND of this predicate and the {@code other} predicate\n     * @throws NullPointerException if other is null\n     ",
    "links" : [ ]
  }, {
    "name" : " BiPredicate<T, U> negate()",
    "returnType" : "BiPredicate<T, U>",
    "comment" : "\n     * Returns a predicate that represents the logical negation of this\n     * predicate.\n     *\n     * @return a predicate that represents the logical negation of this\n     * predicate\n     ",
    "links" : [ ]
  }, {
    "name" : " BiPredicate<T, U> or(BiPredicate<? super T, ? super U> other)",
    "returnType" : "BiPredicate<T, U>",
    "comment" : "\n     * Returns a composed predicate that represents a short-circuiting logical\n     * OR of this predicate and another.  When evaluating the composed\n     * predicate, if this predicate is {@code true}, then the {@code other}\n     * predicate is not evaluated.\n     *\n     * <p>Any exceptions thrown during evaluation of either predicate are relayed\n     * to the caller; if evaluation of this predicate throws an exception, the\n     * {@code other} predicate will not be evaluated.\n     *\n     * @param other a predicate that will be logically-ORed with this\n     *              predicate\n     * @return a composed predicate that represents the short-circuiting logical\n     * OR of this predicate and the {@code other} predicate\n     * @throws NullPointerException if other is null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean test(T t, U u)", " BiPredicate<T, U> and(BiPredicate<? super T, ? super U> other)", " BiPredicate<T, U> negate()", " BiPredicate<T, U> or(BiPredicate<? super T, ? super U> other)" ],
  "variableNames" : [ ]
}