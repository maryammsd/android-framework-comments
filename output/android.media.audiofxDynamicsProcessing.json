{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/DynamicsProcessing.java",
  "packageName" : "android.media.audiofx",
  "className" : "DynamicsProcessing",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_GET_CHANNEL_COUNT",
    "type" : "int",
    "comment" : " /system/media/audio_effects/include/audio_effects/effect_dynamicsprocessing.h",
    "links" : [ ]
  }, {
    "name" : "PARAM_INPUT_GAIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_ENGINE_ARCHITECTURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_PRE_EQ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_PRE_EQ_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_MBC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_MBC_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_POST_EQ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_POST_EQ_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_LIMITER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIANT_FAVOR_FREQUENCY_RESOLUTION",
    "type" : "int",
    "comment" : "\n     * Index of variant that favors frequency resolution. Frequency domain based implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "VARIANT_FAVOR_TIME_RESOLUTION",
    "type" : "int",
    "comment" : "\n     * Index of variant that favors time resolution resolution. Time domain based implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_COUNT_MAX",
    "type" : "int",
    "comment" : "\n     * Maximum expected channels to be reported by effect\n     ",
    "links" : [ ]
  }, {
    "name" : "mChannelCount",
    "type" : "int",
    "comment" : "\n     * Number of channels in effect architecture\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change events\n     * from AudioEffect super class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_VARIANT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_USE_PREEQ",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_PREEQ_BANDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_USE_MBC",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_MBC_BANDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_USE_POSTEQ",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_POSTEQ_BANDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DEFAULT_USE_LIMITER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_DEFAULT_INPUT_GAIN",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "CONFIG_PREFERRED_FRAME_DURATION_MS",
    "type" : "float",
    "comment" : "milliseconds",
    "links" : [ ]
  }, {
    "name" : "EQ_DEFAULT_GAIN",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "PREEQ_DEFAULT_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POSTEQ_DEFAULT_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_ATTACK_TIME",
    "type" : "float",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_RELEASE_TIME",
    "type" : "float",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_RATIO",
    "type" : "float",
    "comment" : " N:1",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_THRESHOLD",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_KNEE_WIDTH",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_NOISE_GATE_THRESHOLD",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_EXPANDER_RATIO",
    "type" : "float",
    "comment" : " 1:N",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_PRE_GAIN",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "MBC_DEFAULT_POST_GAIN",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_LINK_GROUP",
    "type" : "int",
    "comment" : ";",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_ATTACK_TIME",
    "type" : "float",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_RELEASE_TIME",
    "type" : "float",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_RATIO",
    "type" : "float",
    "comment" : " N:1",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_THRESHOLD",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "LIMITER_DEFAULT_POST_GAIN",
    "type" : "float",
    "comment" : " dB",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MIN_FREQUENCY",
    "type" : "float",
    "comment" : " Hz",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_FREQUENCY",
    "type" : "float",
    "comment" : " Hz",
    "links" : [ ]
  }, {
    "name" : "mMinFreqLog",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxFreqLog",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Config getConfig()",
    "returnType" : "Config",
    "comment" : "\n     * Returns the Config object used to setup this effect.\n     * @return Config Current Config object used to setup this DynamicsProcessing effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Channel getChannelByChannelIndex(int channelIndex)",
    "returnType" : "Channel",
    "comment" : "=== CHANNEL",
    "links" : [ ]
  }, {
    "name" : "public void setChannelTo(int channelIndex, Channel channel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAllChannelsTo(Channel channel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getInputGainByChannelIndex(int channelIndex)",
    "returnType" : "float",
    "comment" : "=== channel params",
    "links" : [ ]
  }, {
    "name" : "public void setInputGainbyChannel(int channelIndex, float inputGain)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputGainAllChannelsTo(float inputGain)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Eq getPreEqByChannelIndex(int channelIndex)",
    "returnType" : "Eq",
    "comment" : "=== PreEQ",
    "links" : [ ]
  }, {
    "name" : "public void setPreEqByChannelIndex(int channelIndex, Eq preEq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPreEqAllChannelsTo(Eq preEq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public EqBand getPreEqBandByChannelIndex(int channelIndex, int band)",
    "returnType" : "EqBand",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPreEqBandByChannelIndex(int channelIndex, int band, EqBand preEqBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPreEqBandAllChannelsTo(int band, EqBand preEqBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Mbc getMbcByChannelIndex(int channelIndex)",
    "returnType" : "Mbc",
    "comment" : "=== MBC",
    "links" : [ ]
  }, {
    "name" : "public void setMbcByChannelIndex(int channelIndex, Mbc mbc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMbcAllChannelsTo(Mbc mbc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MbcBand getMbcBandByChannelIndex(int channelIndex, int band)",
    "returnType" : "MbcBand",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMbcBandByChannelIndex(int channelIndex, int band, MbcBand mbcBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMbcBandAllChannelsTo(int band, MbcBand mbcBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Eq getPostEqByChannelIndex(int channelIndex)",
    "returnType" : "Eq",
    "comment" : "== PostEq",
    "links" : [ ]
  }, {
    "name" : "public void setPostEqByChannelIndex(int channelIndex, Eq postEq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPostEqAllChannelsTo(Eq postEq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public EqBand getPostEqBandByChannelIndex(int channelIndex, int band)",
    "returnType" : "EqBand",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPostEqBandByChannelIndex(int channelIndex, int band, EqBand postEqBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPostEqBandAllChannelsTo(int band, EqBand postEqBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Limiter getLimiterByChannelIndex(int channelIndex)",
    "returnType" : "Limiter",
    "comment" : "==== Limiter",
    "links" : [ ]
  }, {
    "name" : "public void setLimiterByChannelIndex(int channelIndex, Limiter limiter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLimiterAllChannelsTo(Limiter limiter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChannelCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of channels in the effect engine\n     * @return number of channels currently in use by the effect engine\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setEngineArchitecture(int variant, float preferredFrameDuration, boolean preEqInUse, int preEqBandCount, boolean mbcInUse, int mbcBandCount, boolean postEqInUse, int postEqBandCount, boolean limiterInUse)",
    "returnType" : "void",
    "comment" : "=== Engine calls",
    "links" : [ ]
  }, {
    "name" : "private void updateEngineEqBandByChannelIndex(int param, int channelIndex, int bandIndex, @NonNull EqBand eqBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Eq queryEngineEqByChannelIndex(int param, int channelIndex)",
    "returnType" : "Eq",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private EqBand queryEngineEqBandByChannelIndex(int param, int channelIndex, int bandIndex)",
    "returnType" : "EqBand",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEngineEqByChannelIndex(int param, int channelIndex, @NonNull Eq eq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Mbc queryEngineMbcByChannelIndex(int channelIndex)",
    "returnType" : "Mbc",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MbcBand queryEngineMbcBandByChannelIndex(int channelIndex, int bandIndex)",
    "returnType" : "MbcBand",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEngineMbcBandByChannelIndex(int channelIndex, int bandIndex, @NonNull MbcBand mbcBand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEngineMbcByChannelIndex(int channelIndex, @NonNull Mbc mbc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEngineLimiterByChannelIndex(int channelIndex, @NonNull Limiter limiter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Limiter queryEngineLimiterByChannelIndex(int channelIndex)",
    "returnType" : "Limiter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Channel queryEngineByChannelIndex(int channelIndex)",
    "returnType" : "Channel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEngineChannelByChannelIndex(int channelIndex, @NonNull Channel channel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getOneInt(int param)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setTwoFloat(int param, int paramA, float valueSet)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte[] numberArrayToByteArray(Number[] values)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void byteArrayToNumberArray(byte[] valuesIn, Number[] valuesOut)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setNumberArray(Number[] params, Number[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getTwoFloat(int param, int paramA)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEffectArchitecture()",
    "returnType" : "void",
    "comment" : "\n     * helper method to update effect architecture parameters\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public DynamicsProcessing.Settings getProperties()",
    "returnType" : "DynamicsProcessing.Settings",
    "comment" : "\n     * @hide\n     * Gets the DynamicsProcessing properties. This method is useful when a snapshot of current\n     * effect settings must be saved by the application.\n     * @return a DynamicsProcessing.Settings object containing all current parameters values\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(DynamicsProcessing.Settings settings)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets the DynamicsProcessing properties. This method is useful when bass boost settings\n     * have to be applied from a previous backup.\n     * @param settings a DynamicsProcessing.Settings object containing the properties to apply\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PARAM_GET_CHANNEL_COUNT", "PARAM_INPUT_GAIN", "PARAM_ENGINE_ARCHITECTURE", "PARAM_PRE_EQ", "PARAM_PRE_EQ_BAND", "PARAM_MBC", "PARAM_MBC_BAND", "PARAM_POST_EQ", "PARAM_POST_EQ_BAND", "PARAM_LIMITER", "VARIANT_FAVOR_FREQUENCY_RESOLUTION", "VARIANT_FAVOR_TIME_RESOLUTION", "CHANNEL_COUNT_MAX", "mChannelCount", "mParamListener", "mBaseParamListener", "mParamListenerLock", "CONFIG_DEFAULT_VARIANT", "CONFIG_DEFAULT_USE_PREEQ", "CONFIG_DEFAULT_PREEQ_BANDS", "CONFIG_DEFAULT_USE_MBC", "CONFIG_DEFAULT_MBC_BANDS", "CONFIG_DEFAULT_USE_POSTEQ", "CONFIG_DEFAULT_POSTEQ_BANDS", "CONFIG_DEFAULT_USE_LIMITER", "CHANNEL_DEFAULT_INPUT_GAIN", "CONFIG_PREFERRED_FRAME_DURATION_MS", "EQ_DEFAULT_GAIN", "PREEQ_DEFAULT_ENABLED", "POSTEQ_DEFAULT_ENABLED", "MBC_DEFAULT_ENABLED", "MBC_DEFAULT_ATTACK_TIME", "MBC_DEFAULT_RELEASE_TIME", "MBC_DEFAULT_RATIO", "MBC_DEFAULT_THRESHOLD", "MBC_DEFAULT_KNEE_WIDTH", "MBC_DEFAULT_NOISE_GATE_THRESHOLD", "MBC_DEFAULT_EXPANDER_RATIO", "MBC_DEFAULT_PRE_GAIN", "MBC_DEFAULT_POST_GAIN", "LIMITER_DEFAULT_ENABLED", "LIMITER_DEFAULT_LINK_GROUP", "LIMITER_DEFAULT_ATTACK_TIME", "LIMITER_DEFAULT_RELEASE_TIME", "LIMITER_DEFAULT_RATIO", "LIMITER_DEFAULT_THRESHOLD", "LIMITER_DEFAULT_POST_GAIN", "DEFAULT_MIN_FREQUENCY", "DEFAULT_MAX_FREQUENCY", "mMinFreqLog", "mMaxFreqLog" ],
  "methodNames" : [ "public Config getConfig()", "public Channel getChannelByChannelIndex(int channelIndex)", "public void setChannelTo(int channelIndex, Channel channel)", "public void setAllChannelsTo(Channel channel)", "public float getInputGainByChannelIndex(int channelIndex)", "public void setInputGainbyChannel(int channelIndex, float inputGain)", "public void setInputGainAllChannelsTo(float inputGain)", "public Eq getPreEqByChannelIndex(int channelIndex)", "public void setPreEqByChannelIndex(int channelIndex, Eq preEq)", "public void setPreEqAllChannelsTo(Eq preEq)", "public EqBand getPreEqBandByChannelIndex(int channelIndex, int band)", "public void setPreEqBandByChannelIndex(int channelIndex, int band, EqBand preEqBand)", "public void setPreEqBandAllChannelsTo(int band, EqBand preEqBand)", "public Mbc getMbcByChannelIndex(int channelIndex)", "public void setMbcByChannelIndex(int channelIndex, Mbc mbc)", "public void setMbcAllChannelsTo(Mbc mbc)", "public MbcBand getMbcBandByChannelIndex(int channelIndex, int band)", "public void setMbcBandByChannelIndex(int channelIndex, int band, MbcBand mbcBand)", "public void setMbcBandAllChannelsTo(int band, MbcBand mbcBand)", "public Eq getPostEqByChannelIndex(int channelIndex)", "public void setPostEqByChannelIndex(int channelIndex, Eq postEq)", "public void setPostEqAllChannelsTo(Eq postEq)", "public EqBand getPostEqBandByChannelIndex(int channelIndex, int band)", "public void setPostEqBandByChannelIndex(int channelIndex, int band, EqBand postEqBand)", "public void setPostEqBandAllChannelsTo(int band, EqBand postEqBand)", "public Limiter getLimiterByChannelIndex(int channelIndex)", "public void setLimiterByChannelIndex(int channelIndex, Limiter limiter)", "public void setLimiterAllChannelsTo(Limiter limiter)", "public int getChannelCount()", "private void setEngineArchitecture(int variant, float preferredFrameDuration, boolean preEqInUse, int preEqBandCount, boolean mbcInUse, int mbcBandCount, boolean postEqInUse, int postEqBandCount, boolean limiterInUse)", "private void updateEngineEqBandByChannelIndex(int param, int channelIndex, int bandIndex, @NonNull EqBand eqBand)", "private Eq queryEngineEqByChannelIndex(int param, int channelIndex)", "private EqBand queryEngineEqBandByChannelIndex(int param, int channelIndex, int bandIndex)", "private void updateEngineEqByChannelIndex(int param, int channelIndex, @NonNull Eq eq)", "private Mbc queryEngineMbcByChannelIndex(int channelIndex)", "private MbcBand queryEngineMbcBandByChannelIndex(int channelIndex, int bandIndex)", "private void updateEngineMbcBandByChannelIndex(int channelIndex, int bandIndex, @NonNull MbcBand mbcBand)", "private void updateEngineMbcByChannelIndex(int channelIndex, @NonNull Mbc mbc)", "private void updateEngineLimiterByChannelIndex(int channelIndex, @NonNull Limiter limiter)", "private Limiter queryEngineLimiterByChannelIndex(int channelIndex)", "private Channel queryEngineByChannelIndex(int channelIndex)", "private void updateEngineChannelByChannelIndex(int channelIndex, @NonNull Channel channel)", "private int getOneInt(int param)", "private void setTwoFloat(int param, int paramA, float valueSet)", "private byte[] numberArrayToByteArray(Number[] values)", "private void byteArrayToNumberArray(byte[] valuesIn, Number[] valuesOut)", "private void setNumberArray(Number[] params, Number[] values)", "private float getTwoFloat(int param, int paramA)", "private void updateEffectArchitecture()", "public void setParameterListener(OnParameterChangeListener listener)", "public DynamicsProcessing.Settings getProperties()", "public void setProperties(DynamicsProcessing.Settings settings)" ]
}