{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/sidekick/SidekickInternal.java",
  "packageName" : "android.hardware.sidekick",
  "className" : "SidekickInternal",
  "comment" : "\n * Sidekick local system service interface.\n *\n * @hide Only for use within the system server, and maybe by Clockwork Home.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * Tell Sidekick to reset back to newly-powered-on state.\n     *\n     * @return true on success (Sidekick is reset), false if Sidekick is not\n     * available (failed or not present). Either way, upon return Sidekick is\n     * guaranteed not to be controlling the display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean startDisplayControl(int displayState)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell Sidekick it can start controlling the display.\n     *\n     * SidekickServer may choose not to actually control the display, if it's been told\n     * via other channels to leave the previous image on the display (same as SUSPEND in\n     * a non-Sidekick system).\n     *\n     * @param displayState - one of Display.STATE_DOZE_SUSPEND, Display.STATE_ON_SUSPEND\n     * @return true on success, false on failure (no sidekick available)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void endDisplayControl()",
    "returnType" : "void",
    "comment" : "\n     * Tell Sidekick it must stop controlling the display.\n     *\n     * No return code because this must always succeed - after return, Sidekick\n     * is guaranteed to not be controlling the display.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract boolean reset()", "public abstract boolean startDisplayControl(int displayState)", "public abstract void endDisplayControl()" ],
  "variableNames" : [ ]
}