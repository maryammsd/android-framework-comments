{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/impl/CronetUrlRequestContext.java",
  "packageName" : "org.chromium.net.impl",
  "className" : "CronetUrlRequestContext",
  "comment" : " CronetEngine using Chromium HTTP stack implementation. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " Synchronize access to mUrlRequestContextAdapter and shutdown routine. ",
    "links" : [ ]
  }, {
    "name" : "mInitCompleted",
    "type" : "ConditionVariable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningRequestCount",
    "type" : "AtomicInteger",
    "comment" : "\n     * The number of started requests where the terminal callback (i.e.\n     * onSucceeded/onCancelled/onFailed) has not yet been called.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActiveRequestCount",
    "type" : "AtomicInteger",
    "comment" : "\n     * The number of started requests where the terminal callbacks (i.e.\n     * onSucceeded/onCancelled/onFailed, request finished listeners) have not\n     * all returned yet.\n     *\n     * By definition this is always greater than or equal to\n     * mRunningRequestCount. The difference between the two is the number of\n     * terminal callbacks that are currently running.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUrlRequestContextAdapter",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkThread",
    "type" : "Thread",
    "comment" : "\n     * This field is accessed without synchronization, but only for the purposes of reference\n     * equality comparison with other threads. If such a comparison is performed on the network\n     * thread, then there is a happens-before edge between the write of this field and the\n     * subsequent read; if it's performed on another thread, then observing a value of null won't\n     * change the result of the comparison.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkQualityEstimatorEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkQualityLock",
    "type" : "Object",
    "comment" : "\n     * Locks operations on network quality listeners, because listener\n     * addition and removal may occur on a different thread from notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFinishedListenerLock",
    "type" : "Object",
    "comment" : "\n     * Locks operations on the list of RequestFinishedInfo.Listeners, because operations can happen\n     * on any thread. This should be used for fine-grained locking only. In particular, don't call\n     * any UrlRequest methods that acquire mUrlRequestAdapterLock while holding this lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEffectiveConnectionType",
    "type" : "int",
    "comment" : "\n     * Current effective connection type as computed by the network quality\n     * estimator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHttpRttMs",
    "type" : "int",
    "comment" : "\n     * Current estimate of the HTTP RTT (in milliseconds) computed by the\n     * network quality estimator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransportRttMs",
    "type" : "int",
    "comment" : "\n     * Current estimate of the transport RTT (in milliseconds) computed by the\n     * network quality estimator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDownstreamThroughputKbps",
    "type" : "int",
    "comment" : "\n     * Current estimate of the downstream throughput (in kilobits per second)\n     * computed by the network quality estimator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRttListenerList",
    "type" : "ObserverList<VersionSafeCallbacks.NetworkQualityRttListenerWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThroughputListenerList",
    "type" : "ObserverList<VersionSafeCallbacks.NetworkQualityThroughputListenerWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedListenerMap",
    "type" : "Map<RequestFinishedInfo.Listener, VersionSafeCallbacks.RequestFinishedInfoListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStopNetLogCompleted",
    "type" : "ConditionVariable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInUseStoragePaths",
    "type" : "HashSet<String>",
    "comment" : " Set of storage paths currently in use. ",
    "links" : [ ]
  }, {
    "name" : "mInUseStoragePath",
    "type" : "String",
    "comment" : " Storage path used by this context. ",
    "links" : [ ]
  }, {
    "name" : "mIsLogging",
    "type" : "boolean",
    "comment" : " True if a NetLog observer is active. ",
    "links" : [ ]
  }, {
    "name" : "mIsStoppingNetLog",
    "type" : "boolean",
    "comment" : " True if NetLog is being shutdown. ",
    "links" : [ ]
  }, {
    "name" : "mNetworkHandle",
    "type" : "long",
    "comment" : " The network handle to be used for requests that do not explicitly specify one. *",
    "links" : [ ]
  }, {
    "name" : "mCronetEngineId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableTelemetry",
    "type" : "boolean",
    "comment" : " Whether Cronet Telemetry should be enabled or not. ",
    "links" : [ ]
  }, {
    "name" : "mLogger",
    "type" : "CronetLogger",
    "comment" : " The logger to be used for logging. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getCronetEngineId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " CronetLogger getCronetLogger()",
    "returnType" : "CronetLogger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getEnableTelemetryForTesting()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static CronetSource getCronetSource()",
    "returnType" : "CronetSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long createNativeUrlRequestContextConfig(CronetEngineBuilderImpl builder)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static RequestContextConfigOptions createRequestContextConfigOptions(CronetEngineBuilderImpl engineBuilder)",
    "returnType" : "RequestContextConfigOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ExperimentalBidirectionalStream.Builder newBidirectionalStreamBuilder(String url, BidirectionalStream.Callback callback, Executor executor)",
    "returnType" : "ExperimentalBidirectionalStream.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UrlRequestBase createRequest(String url, UrlRequest.Callback callback, Executor executor, int priority, Collection<Object> requestAnnotations, boolean disableCache, boolean disableConnectionMigration, boolean allowDirectExecutor, boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet, int trafficStatsUid, RequestFinishedInfo.Listener requestFinishedListener, int idempotency, long networkHandle)",
    "returnType" : "UrlRequestBase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ExperimentalBidirectionalStream createBidirectionalStream(String url, BidirectionalStream.Callback callback, Executor executor, String httpMethod, List<Map.Entry<String, String>> requestHeaders, @StreamPriority int priority, boolean delayRequestHeadersUntilFirstFlush, Collection<Object> requestAnnotations, boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet, int trafficStatsUid, long networkHandle)",
    "returnType" : "ExperimentalBidirectionalStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getVersionString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getActiveRequestCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CronetVersion buildCronetVersion()",
    "returnType" : "CronetVersion",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void shutdown()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startNetLogToFile(String fileName, boolean logAll)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startNetLogToDisk(String dirPath, boolean logAll, int maxSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopNetLog()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopNetLogCompleted()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getGlobalMetricsDeltas()",
    "returnType" : "byte[]",
    "comment" : " is loaded by class constructor.",
    "links" : [ ]
  }, {
    "name" : "public int getEffectiveConnectionType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHttpRttMs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTransportRttMs()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDownstreamThroughputKbps()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void bindToNetwork(long networkHandle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void configureNetworkQualityEstimatorForTesting(boolean useLocalHostRequests, boolean useSmallerResponses, boolean disableOfflineCheck)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addRttListener(NetworkQualityRttListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeRttListener(NetworkQualityRttListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addThroughputListener(NetworkQualityThroughputListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeThroughputListener(NetworkQualityThroughputListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addRequestFinishedListener(RequestFinishedInfo.Listener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeRequestFinishedListener(RequestFinishedInfo.Listener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasRequestFinishedListener()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public URLConnection openConnection(URL url)",
    "returnType" : "URLConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public URLConnection openConnection(URL url, Proxy proxy)",
    "returnType" : "URLConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public URLStreamHandlerFactory createURLStreamHandlerFactory()",
    "returnType" : "URLStreamHandlerFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onRequestStarted()",
    "returnType" : "void",
    "comment" : "\n     * Mark request as started for the purposes of getActiveRequestCount(), and\n     * to prevent shutdown when there are running requests.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRequestDestroyed()",
    "returnType" : "void",
    "comment" : "\n     * Mark request as destroyed to allow shutdown when there are no running\n     * requests. Should be called *before* the terminal callback is called, so\n     * that users can call shutdown() from the terminal callback.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRequestFinished()",
    "returnType" : "void",
    "comment" : "\n     * Mark request as finished for the purposes of getActiveRequestCount().\n     * Should be called *after* the terminal callback returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUrlRequestContextAdapter()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkHaveAdapter() throws IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean haveRequestContextAdapter()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int convertConnectionTypeToApiValue(@EffectiveConnectionType int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initNetworkThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onEffectiveConnectionTypeChanged(int effectiveConnectionType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onRTTOrThroughputEstimatesComputed(final int httpRttMs, final int transportRttMs, final int downstreamThroughputKbps)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onRttObservation(final int rttMs, final long whenMs, final int source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onThroughputObservation(final int throughputKbps, final long whenMs, final int source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportRequestFinished(final RequestFinishedInfo requestInfo, RefCountDelegate inflightCallbackCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void postObservationTaskToExecutor(Executor executor, Runnable task, RefCountDelegate inflightCallbackCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void postObservationTaskToExecutor(Executor executor, Runnable task)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNetworkThread(Thread thread)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getCronetEngineId()", " CronetLogger getCronetLogger()", "public boolean getEnableTelemetryForTesting()", " static CronetSource getCronetSource()", "public static long createNativeUrlRequestContextConfig(CronetEngineBuilderImpl builder)", "private static RequestContextConfigOptions createRequestContextConfigOptions(CronetEngineBuilderImpl engineBuilder)", "public ExperimentalBidirectionalStream.Builder newBidirectionalStreamBuilder(String url, BidirectionalStream.Callback callback, Executor executor)", "public UrlRequestBase createRequest(String url, UrlRequest.Callback callback, Executor executor, int priority, Collection<Object> requestAnnotations, boolean disableCache, boolean disableConnectionMigration, boolean allowDirectExecutor, boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet, int trafficStatsUid, RequestFinishedInfo.Listener requestFinishedListener, int idempotency, long networkHandle)", "protected ExperimentalBidirectionalStream createBidirectionalStream(String url, BidirectionalStream.Callback callback, Executor executor, String httpMethod, List<Map.Entry<String, String>> requestHeaders, @StreamPriority int priority, boolean delayRequestHeadersUntilFirstFlush, Collection<Object> requestAnnotations, boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet, int trafficStatsUid, long networkHandle)", "public String getVersionString()", "public int getActiveRequestCount()", "private CronetVersion buildCronetVersion()", "public void shutdown()", "public void startNetLogToFile(String fileName, boolean logAll)", "public void startNetLogToDisk(String dirPath, boolean logAll, int maxSize)", "public void stopNetLog()", "public void stopNetLogCompleted()", "public byte[] getGlobalMetricsDeltas()", "public int getEffectiveConnectionType()", "public int getHttpRttMs()", "public int getTransportRttMs()", "public int getDownstreamThroughputKbps()", "public void bindToNetwork(long networkHandle)", "public void configureNetworkQualityEstimatorForTesting(boolean useLocalHostRequests, boolean useSmallerResponses, boolean disableOfflineCheck)", "public void addRttListener(NetworkQualityRttListener listener)", "public void removeRttListener(NetworkQualityRttListener listener)", "public void addThroughputListener(NetworkQualityThroughputListener listener)", "public void removeThroughputListener(NetworkQualityThroughputListener listener)", "public void addRequestFinishedListener(RequestFinishedInfo.Listener listener)", "public void removeRequestFinishedListener(RequestFinishedInfo.Listener listener)", " boolean hasRequestFinishedListener()", "public URLConnection openConnection(URL url)", "public URLConnection openConnection(URL url, Proxy proxy)", "public URLStreamHandlerFactory createURLStreamHandlerFactory()", " void onRequestStarted()", " void onRequestDestroyed()", " void onRequestFinished()", "public long getUrlRequestContextAdapter()", "private void checkHaveAdapter() throws IllegalStateException", "private boolean haveRequestContextAdapter()", "private static int convertConnectionTypeToApiValue(@EffectiveConnectionType int type)", "private void initNetworkThread()", "private void onEffectiveConnectionTypeChanged(int effectiveConnectionType)", "private void onRTTOrThroughputEstimatesComputed(final int httpRttMs, final int transportRttMs, final int downstreamThroughputKbps)", "private void onRttObservation(final int rttMs, final long whenMs, final int source)", "private void onThroughputObservation(final int throughputKbps, final long whenMs, final int source)", " void reportRequestFinished(final RequestFinishedInfo requestInfo, RefCountDelegate inflightCallbackCount)", "private static void postObservationTaskToExecutor(Executor executor, Runnable task, RefCountDelegate inflightCallbackCount)", "private static void postObservationTaskToExecutor(Executor executor, Runnable task)", "public boolean isNetworkThread(Thread thread)" ],
  "variableNames" : [ "LOG_TAG", "mLock", "mInitCompleted", "mRunningRequestCount", "mActiveRequestCount", "mUrlRequestContextAdapter", "mNetworkThread", "mNetworkQualityEstimatorEnabled", "mNetworkQualityLock", "mFinishedListenerLock", "mEffectiveConnectionType", "mHttpRttMs", "mTransportRttMs", "mDownstreamThroughputKbps", "mRttListenerList", "mThroughputListenerList", "mFinishedListenerMap", "mStopNetLogCompleted", "sInUseStoragePaths", "mInUseStoragePath", "mIsLogging", "mIsStoppingNetLog", "mNetworkHandle", "mCronetEngineId", "mEnableTelemetry", "mLogger" ]
}