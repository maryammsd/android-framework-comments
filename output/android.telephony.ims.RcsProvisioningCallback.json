{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/ProvisioningManager.java",
  "packageName" : "android.telephony.ims",
  "className" : "RcsProvisioningCallback",
  "comment" : "\n     * The callback for RCS provisioning changes.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mBinder",
    "type" : "CallbackBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onConfigurationChanged(@NonNull byte[] configXml)",
    "returnType" : "void",
    "comment" : "\n         * RCS configuration received via OTA provisioning. Configuration may change\n         * due to various triggers defined in GSMA RCC.14 for ACS(auto configuration\n         * server) or other operator defined triggers. If RCS provisioning is already\n         * completed at the time of callback registration, then this method shall be\n         * invoked with the current configuration.\n         * @param configXml The RCS configuration XML received by OTA. It is defined\n         * by GSMA RCC.07.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAutoConfigurationErrorReceived(int errorCode, @NonNull String errorString)",
    "returnType" : "void",
    "comment" : "\n         * Errors during autoconfiguration connection setup are notified by the\n         * ACS(auto configuration server) client using this interface.\n         * @param errorCode HTTP error received during connection setup defined in\n         * GSMA RCC.14 2.4.3, like {@link java.net.HttpURLConnection#HTTP_UNAUTHORIZED},\n         * {@link java.net.HttpURLConnection#HTTP_FORBIDDEN}, etc.\n         * @param errorString reason phrase received with the error\n         ",
    "links" : [ "java.net.HttpURLConnection#HTTP_FORBIDDEN", "java.net.HttpURLConnection#HTTP_UNAUTHORIZED" ]
  }, {
    "name" : "public void onConfigurationReset()",
    "returnType" : "void",
    "comment" : "\n         * When the previously valid RCS configuration is cleaned up by telephony for\n         * any case like SIM removed, default messaging application changed, etc.,\n         * this method will be invoked to notify the application regarding this change.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRemoved()",
    "returnType" : "void",
    "comment" : "\n         * When the RCS application is no longer the Default messaging application,\n         * or when the subscription associated with this callback is removed (SIM\n         * removed, ESIM swap,etc...), callback will automatically be removed and\n         * the below method is invoked. There is a possibility that the method is\n         * invoked after the subscription has become inactive\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPreProvisioningReceived(@NonNull byte[] configXml)",
    "returnType" : "void",
    "comment" : "\n         * Some carriers using ACS (auto configuration server) may send a carrier-specific\n         * pre-provisioning configuration XML if the user has not been provisioned for RCS\n         * services yet. When this provisioning XML is received, the framework will move\n         * into a \"not provisioned\" state for RCS. In order for provisioning to proceed,\n         * the application must parse this configuration XML and perform the carrier specific\n         * opt-in flow for RCS services. If the user accepts, {@link #triggerRcsReconfiguration}\n         * must be called in order for the device to move out of this state and try to fetch\n         * the RCS provisioning information.\n         *\n         * @param configXml the pre-provisioning config in carrier specified format.\n         ",
    "links" : [ "#triggerRcsReconfiguration" ]
  }, {
    "name" : "public final IRcsConfigCallback getBinder()",
    "returnType" : "IRcsConfigCallback",
    "comment" : "@hide",
    "links" : [ ]
  }, {
    "name" : "public void setExecutor(Executor executor)",
    "returnType" : "void",
    "comment" : "@hide",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onConfigurationChanged(@NonNull byte[] configXml)", "public void onAutoConfigurationErrorReceived(int errorCode, @NonNull String errorString)", "public void onConfigurationReset()", "public void onRemoved()", "public void onPreProvisioningReceived(@NonNull byte[] configXml)", "public final IRcsConfigCallback getBinder()", "public void setExecutor(Executor executor)" ],
  "variableNames" : [ "mBinder" ]
}