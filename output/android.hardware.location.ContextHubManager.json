{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/location/ContextHubManager.java",
  "packageName" : "android.hardware.location",
  "className" : "ContextHubManager",
  "comment" : "\n * A class that exposes the Context hubs on a device to applications.\n *\n * Please note that this class is not expected to be used by unbundled applications. Also, calling\n * applications are expected to have the ACCESS_CONTEXT_HUB permission to use this class.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CLIENT_AUTHORIZATION_STATE",
    "type" : "String",
    "comment" : "\n     * An extra containing one of the {@code AUTHORIZATION_*} constants such as\n     * {@link #AUTHORIZATION_GRANTED} describing the client's authorization state.\n     ",
    "links" : [ "#AUTHORIZATION_GRANTED" ]
  }, {
    "name" : "EXTRA_CONTEXT_HUB_INFO",
    "type" : "String",
    "comment" : "\n     * An extra of type {@link ContextHubInfo} describing the source of the event.\n     ",
    "links" : [ "android.hardware.location.ContextHubInfo" ]
  }, {
    "name" : "EXTRA_EVENT_TYPE",
    "type" : "String",
    "comment" : "\n     * An extra of type {@link ContextHubManager.Event} describing the event type.\n     ",
    "links" : [ "ContextHubManager.Event" ]
  }, {
    "name" : "EXTRA_NANOAPP_ID",
    "type" : "String",
    "comment" : "\n     * An extra of type long describing the ID of the nanoapp an event is for.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NANOAPP_ABORT_CODE",
    "type" : "String",
    "comment" : "\n     * An extra of type int describing the nanoapp-specific abort code.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGE",
    "type" : "String",
    "comment" : "\n     * An extra of type {@link NanoAppMessage} describing contents of a message from a nanoapp.\n     ",
    "links" : [ "android.hardware.location.NanoAppMessage" ]
  }, {
    "name" : "AUTHORIZATION_DENIED",
    "type" : "int",
    "comment" : "\n     * Indicates that the {@link ContextHubClient} can no longer communicate with a nanoapp. If the\n     * {@link ContextHubClient} attempts to send messages to the nanoapp, it will continue to\n     * receive this authorization state if the connection is still closed.\n     ",
    "links" : [ "android.hardware.location.ContextHubClient" ]
  }, {
    "name" : "AUTHORIZATION_DENIED_GRACE_PERIOD",
    "type" : "int",
    "comment" : "\n     * Indicates the {@link ContextHubClient} will soon lose its authorization to communicate with a\n     * nanoapp. After receiving this state event, the {@link ContextHubClient} has one minute to\n     * perform any cleanup with the nanoapp such that the nanoapp is no longer performing work on\n     * behalf of the {@link ContextHubClient}.\n     ",
    "links" : [ "android.hardware.location.ContextHubClient" ]
  }, {
    "name" : "AUTHORIZATION_GRANTED",
    "type" : "int",
    "comment" : "\n     * The {@link ContextHubClient} is authorized to communicate with the nanoapp.\n     ",
    "links" : [ "android.hardware.location.ContextHubClient" ]
  }, {
    "name" : "EVENT_NANOAPP_LOADED",
    "type" : "int",
    "comment" : "\n     * An event describing that a nanoapp has been loaded. Contains the EXTRA_NANOAPP_ID extra.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_NANOAPP_UNLOADED",
    "type" : "int",
    "comment" : "\n     * An event describing that a nanoapp has been unloaded. Contains the EXTRA_NANOAPP_ID extra.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_NANOAPP_ENABLED",
    "type" : "int",
    "comment" : "\n     * An event describing that a nanoapp has been enabled. Contains the EXTRA_NANOAPP_ID extra.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_NANOAPP_DISABLED",
    "type" : "int",
    "comment" : "\n     * An event describing that a nanoapp has been disabled. Contains the EXTRA_NANOAPP_ID extra.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_NANOAPP_ABORTED",
    "type" : "int",
    "comment" : "\n     * An event describing that a nanoapp has aborted. Contains the EXTRA_NANOAPP_ID and\n     * EXTRA_NANOAPP_ABORT_CODE extras.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_NANOAPP_MESSAGE",
    "type" : "int",
    "comment" : "\n     * An event containing a message sent from a nanoapp. Contains the EXTRA_NANOAPP_ID and\n     * EXTRA_NANOAPP_MESSAGE extras.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_HUB_RESET",
    "type" : "int",
    "comment" : "\n     * An event describing that the Context Hub has reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_CLIENT_AUTHORIZATION",
    "type" : "int",
    "comment" : "\n     * An event describing a client authorization state change. See\n     * {@link ContextHubClientCallback#onClientAuthorizationChanged} for more details on when this\n     * event will be sent. Contains the EXTRA_NANOAPP_ID and EXTRA_CLIENT_AUTHORIZATION_STATE\n     * extras.\n     ",
    "links" : [ "android.hardware.location.ContextHubClientCallback#onClientAuthorizationChanged" ]
  }, {
    "name" : "mMainLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IContextHubService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalCallback",
    "type" : "ICallback",
    "comment" : "\n     * @deprecated Use {@code mCallback} instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClientCallback",
    "type" : "IContextHubCallback.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int[] getContextHubHandles()",
    "returnType" : "int[]",
    "comment" : "\n     * Get a handle to all the context hubs in the system\n     *\n     * @return array of context hub handles\n     *\n     * @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the\n     *             new APIs.\n     ",
    "links" : [ "#getContextHubs()" ]
  }, {
    "name" : "public ContextHubInfo getContextHubInfo(int hubHandle)",
    "returnType" : "ContextHubInfo",
    "comment" : "\n     * Get more information about a specific hub.\n     *\n     * @param hubHandle Handle (system-wide unique identifier) of a context hub.\n     * @return ContextHubInfo Information about the requested context hub.\n     *\n     * @see ContextHubInfo\n     *\n     * @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the\n     *             new APIs.\n     ",
    "links" : [ "#getContextHubs()" ]
  }, {
    "name" : "public int loadNanoApp(int hubHandle, @NonNull NanoApp app)",
    "returnType" : "int",
    "comment" : "\n     * Load a nano app on a specified context hub.\n     *\n     * Note that loading is asynchronous.  When we return from this method,\n     * the nano app (probably) hasn't loaded yet.  Assuming a return of 0\n     * from this method, then the final success/failure for the load, along\n     * with the \"handle\" for the nanoapp, is all delivered in a byte\n     * string via a call to Callback.onMessageReceipt.\n     *\n     * TODO(b/30784270): Provide a better success/failure and \"handle\" delivery.\n     *\n     * @param hubHandle handle of context hub to load the app on.\n     * @param app the nanoApp to load on the hub\n     *\n     * @return 0 if the command for loading was sent to the context hub;\n     *         -1 otherwise\n     *\n     * @see NanoApp\n     *\n     * @deprecated Use {@link #loadNanoApp(ContextHubInfo, NanoAppBinary)} instead.\n     ",
    "links" : [ "#loadNanoApp(ContextHubInfo" ]
  }, {
    "name" : "public int unloadNanoApp(int nanoAppHandle)",
    "returnType" : "int",
    "comment" : "\n     * Unload a specified nanoApp\n     *\n     * Note that unloading is asynchronous.  When we return from this method,\n     * the nano app (probably) hasn't unloaded yet.  Assuming a return of 0\n     * from this method, then the final success/failure for the unload is\n     * delivered in a byte string via a call to Callback.onMessageReceipt.\n     *\n     * TODO(b/30784270): Provide a better success/failure delivery.\n     *\n     * @param nanoAppHandle handle of the nanoApp to unload\n     *\n     * @return 0 if the command for unloading was sent to the context hub;\n     *         -1 otherwise\n     *\n     * @deprecated Use {@link #unloadNanoApp(ContextHubInfo, long)} instead.\n     ",
    "links" : [ "#unloadNanoApp(ContextHubInfo" ]
  }, {
    "name" : "public NanoAppInstanceInfo getNanoAppInstanceInfo(int nanoAppHandle)",
    "returnType" : "NanoAppInstanceInfo",
    "comment" : "\n     * get information about the nano app instance\n     *\n     * NOTE: The returned NanoAppInstanceInfo does _not_ contain correct\n     * information for several fields, specifically:\n     * - getName()\n     * - getPublisher()\n     * - getNeededExecMemBytes()\n     * - getNeededReadMemBytes()\n     * - getNeededWriteMemBytes()\n     *\n     * For example, say you call loadNanoApp() with a NanoApp that has\n     * getName() returning \"My Name\".  Later, if you call getNanoAppInstanceInfo\n     * for that nanoapp, the returned NanoAppInstanceInfo's getName()\n     * method will claim \"Preloaded app, unknown\", even though you would\n     * have expected \"My Name\".  For now, as the user, you'll need to\n     * separately track the above fields if they are of interest to you.\n     *\n     * TODO(b/30943489): Have the returned NanoAppInstanceInfo contain the\n     *     correct information.\n     *\n     * @param nanoAppHandle handle of the nanoapp instance\n     * @return NanoAppInstanceInfo the NanoAppInstanceInfo of the nanoapp, or null if the nanoapp\n     *                             does not exist\n     *\n     * @see NanoAppInstanceInfo\n     *\n     * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub\n     *             for loaded nanoapps.\n     ",
    "links" : [ "#queryNanoApps(ContextHubInfo)" ]
  }, {
    "name" : "public int[] findNanoAppOnHub(int hubHandle, @NonNull NanoAppFilter filter)",
    "returnType" : "int[]",
    "comment" : "\n     * Find a specified nano app on the system\n     *\n     * @param hubHandle handle of hub to search for nano app\n     * @param filter filter specifying the search criteria for app\n     *\n     * @see NanoAppFilter\n     *\n     * @return int[] Array of handles to any found nano apps\n     *\n     * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub\n     *             for loaded nanoapps.\n     ",
    "links" : [ "#queryNanoApps(ContextHubInfo)" ]
  }, {
    "name" : "public int sendMessage(int hubHandle, int nanoAppHandle, @NonNull ContextHubMessage message)",
    "returnType" : "int",
    "comment" : "\n     * Send a message to a specific nano app instance on a context hub.\n     *\n     * Note that the return value of this method only speaks of success\n     * up to the point of sending this to the Context Hub.  It is not\n     * an assurance that the Context Hub successfully sent this message\n     * on to the nanoapp.  If assurance is desired, a protocol should be\n     * established between your code and the nanoapp, with the nanoapp\n     * sending a confirmation message (which will be reported via\n     * Callback.onMessageReceipt).\n     *\n     * @param hubHandle handle of the hub to send the message to\n     * @param nanoAppHandle  handle of the nano app to send to\n     * @param message Message to be sent\n     *\n     * @see ContextHubMessage\n     *\n     * @return int 0 on success, -1 otherwise\n     *\n     * @deprecated Use {@link android.hardware.location.ContextHubClient#sendMessageToNanoApp(\n     *             NanoAppMessage)} instead, after creating a\n     *             {@link android.hardware.location.ContextHubClient} with\n     *             {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}\n     *             or {@link #createClient(ContextHubInfo, ContextHubClientCallback)}.\n     ",
    "links" : [ "android.hardware.location.ContextHubClient#sendMessageToNanoApp(", "#createClient(ContextHubInfo", "android.hardware.location.ContextHubClient" ]
  }, {
    "name" : "public List<ContextHubInfo> getContextHubs()",
    "returnType" : "List<ContextHubInfo>",
    "comment" : "\n     * Returns the list of ContextHubInfo objects describing the available Context Hubs.\n     *\n     * @return the list of ContextHubInfo objects\n     *\n     * @see ContextHubInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "private IContextHubTransactionCallback createQueryCallback(ContextHubTransaction<List<NanoAppState>> transaction)",
    "returnType" : "IContextHubTransactionCallback",
    "comment" : "\n    * Helper function to generate a stub for a query transaction callback.\n    *\n    * @param transaction the transaction to unblock when complete\n    *\n    * @return the callback\n    *\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubTransaction<Void> loadNanoApp(@NonNull ContextHubInfo hubInfo, @NonNull NanoAppBinary appBinary)",
    "returnType" : "ContextHubTransaction<Void>",
    "comment" : "\n     * Loads a nanoapp at the specified Context Hub.\n     *\n     * After the nanoapp binary is successfully loaded at the specified hub, the nanoapp will be in\n     * the enabled state.\n     *\n     * @param hubInfo the hub to load the nanoapp on\n     * @param appBinary The app binary to load\n     *\n     * @return the ContextHubTransaction of the request\n     *\n     * @throws NullPointerException if hubInfo or NanoAppBinary is null\n     *\n     * @see NanoAppBinary\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubTransaction<Void> unloadNanoApp(@NonNull ContextHubInfo hubInfo, long nanoAppId)",
    "returnType" : "ContextHubTransaction<Void>",
    "comment" : "\n     * Unloads a nanoapp at the specified Context Hub.\n     *\n     * @param hubInfo the hub to unload the nanoapp from\n     * @param nanoAppId the app to unload\n     *\n     * @return the ContextHubTransaction of the request\n     *\n     * @throws NullPointerException if hubInfo is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubTransaction<Void> enableNanoApp(@NonNull ContextHubInfo hubInfo, long nanoAppId)",
    "returnType" : "ContextHubTransaction<Void>",
    "comment" : "\n     * Enables a nanoapp at the specified Context Hub.\n     *\n     * @param hubInfo the hub to enable the nanoapp on\n     * @param nanoAppId the app to enable\n     *\n     * @return the ContextHubTransaction of the request\n     *\n     * @throws NullPointerException if hubInfo is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubTransaction<Void> disableNanoApp(@NonNull ContextHubInfo hubInfo, long nanoAppId)",
    "returnType" : "ContextHubTransaction<Void>",
    "comment" : "\n     * Disables a nanoapp at the specified Context Hub.\n     *\n     * @param hubInfo the hub to disable the nanoapp on\n     * @param nanoAppId the app to disable\n     *\n     * @return the ContextHubTransaction of the request\n     *\n     * @throws NullPointerException if hubInfo is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubTransaction<List<NanoAppState>> queryNanoApps(@NonNull ContextHubInfo hubInfo)",
    "returnType" : "ContextHubTransaction<List<NanoAppState>>",
    "comment" : "\n     * Requests a query for nanoapps loaded at the specified Context Hub.\n     *\n     * @param hubInfo the hub to query a list of nanoapps from\n     *\n     * @return the ContextHubTransaction of the request\n     *\n     * @throws NullPointerException if hubInfo is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public int registerCallback(@NonNull Callback callback)",
    "returnType" : "int",
    "comment" : "\n     * Set a callback to receive messages from the context hub\n     *\n     * @param callback Callback object\n     *\n     * @see Callback\n     *\n     * @return int 0 on success, -1 otherwise\n     *\n     * @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}\n     *             or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to\n     *             register a {@link android.hardware.location.ContextHubClientCallback}.\n     ",
    "links" : [ "#createClient(ContextHubInfo", "android.hardware.location.ContextHubClientCallback" ]
  }, {
    "name" : "public int registerCallback(ICallback callback)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #registerCallback(Callback)} instead.\n     * @hide\n     ",
    "links" : [ "#registerCallback(Callback)" ]
  }, {
    "name" : "public int registerCallback(Callback callback, Handler handler)",
    "returnType" : "int",
    "comment" : "\n     * Set a callback to receive messages from the context hub\n     *\n     * @param callback Callback object\n     * @param handler Handler object, if null uses the Handler of the main Looper\n     *\n     * @see Callback\n     *\n     * @return int 0 on success, -1 otherwise\n     *\n     * @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}\n     *             or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to\n     *             register a {@link android.hardware.location.ContextHubClientCallback}.\n     ",
    "links" : [ "#createClient(ContextHubInfo", "android.hardware.location.ContextHubClientCallback" ]
  }, {
    "name" : "private IContextHubClientCallback createClientCallback(ContextHubClient client, ContextHubClientCallback callback, Executor executor)",
    "returnType" : "IContextHubClientCallback",
    "comment" : "\n     * Creates an interface to the ContextHubClient to send down to the service.\n     *\n     * @param client the ContextHubClient object associated with this callback\n     * @param callback the callback to invoke at the client process\n     * @param executor the executor to invoke callbacks for this client\n     *\n     * @return the callback interface\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubClient createClient(@Nullable Context context, @NonNull ContextHubInfo hubInfo, @NonNull @CallbackExecutor Executor executor, @NonNull ContextHubClientCallback callback)",
    "returnType" : "ContextHubClient",
    "comment" : "\n     * Creates and registers a client and its callback with the Context Hub Service.\n     *\n     * A client is registered with the Context Hub Service for a specified Context Hub. When the\n     * registration succeeds, the client can send messages to nanoapps through the returned\n     * {@link ContextHubClient} object, and receive notifications through the provided callback.\n     *\n     * @param context  the context of the application\n     * @param hubInfo  the hub to attach this client to\n     * @param executor the executor to invoke the callback\n     * @param callback the notification callback to register\n     * @return the registered client object\n     *\n     * @throws IllegalArgumentException if hubInfo does not represent a valid hub\n     * @throws IllegalStateException    if there were too many registered clients at the service\n     * @throws NullPointerException     if callback, hubInfo, or executor is null\n     *\n     * @see ContextHubClientCallback\n     ",
    "links" : [ "android.hardware.location.ContextHubClient" ]
  }, {
    "name" : "public ContextHubClient createClient(@NonNull ContextHubInfo hubInfo, @NonNull ContextHubClientCallback callback, @NonNull @CallbackExecutor Executor executor)",
    "returnType" : "ContextHubClient",
    "comment" : "\n     * Equivalent to\n     * {@link  #createClient(Context, ContextHubInfo, Executor, ContextHubClientCallback)}\n     * with the {@link Context} being set to null.\n     ",
    "links" : [ "android.content.Context", "#createClient(Context" ]
  }, {
    "name" : "public ContextHubClient createClient(@NonNull ContextHubInfo hubInfo, @NonNull ContextHubClientCallback callback)",
    "returnType" : "ContextHubClient",
    "comment" : "\n     * Equivalent to {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}\n     * with the executor using the main thread's Looper.\n     ",
    "links" : [ "#createClient(ContextHubInfo" ]
  }, {
    "name" : "public ContextHubClient createClient(@Nullable Context context, @NonNull ContextHubInfo hubInfo, @NonNull PendingIntent pendingIntent, long nanoAppId)",
    "returnType" : "ContextHubClient",
    "comment" : "\n     * Creates a ContextHubClient that will receive notifications based on Intent events.\n     *\n     * This method should be used instead of {@link #createClient(ContextHubInfo,\n     * ContextHubClientCallback)} or {@link #createClient(ContextHubInfo, ContextHubClientCallback,\n     * Executor)} if the caller wants to preserve the messaging endpoint of a ContextHubClient, even\n     * after a process exits. If the PendingIntent with the provided nanoapp has already been\n     * registered at the service, then the same ContextHubClient will be regenerated without\n     * creating a new client connection at the service. Note that the PendingIntent, nanoapp, and\n     * Context Hub must all match in identifying a previously registered ContextHubClient.\n     * If a client is regenerated, the host endpoint identifier attached to messages sent to the\n     * nanoapp remains consistent, even if the original process has exited.\n     *\n     * To avoid unintentionally spreading data from the Context Hub to external applications, it is\n     * strongly recommended that the PendingIntent supplied to this API is an explicit intent.\n     *\n     * If registered successfully, intents will be delivered regarding events or messages from the\n     * specified nanoapp from the attached Context Hub. The intent will have an extra\n     * {@link ContextHubManager.EXTRA_CONTEXT_HUB_INFO} of type {@link ContextHubInfo}, which\n     * describes the Context Hub the intent event was for. The intent will also have an extra\n     * {@link ContextHubManager.EXTRA_EVENT_TYPE} of type {@link ContextHubManager.Event}, which\n     * will contain the type of the event. See {@link ContextHubManager.Event} for description of\n     * each event type, along with event-specific extra fields. The client can also use\n     * {@link ContextHubIntentEvent.fromIntent(Intent)} to parse the Intent generated by the event.\n     *\n     * Intent events will be delivered until {@link ContextHubClient.close()} is called. Note that\n     * the registration of this ContextHubClient at the Context Hub Service will be maintained until\n     * {@link ContextHubClient.close()} is called. If {@link PendingIntent.cancel()} is called\n     * on the provided PendingIntent, then the client will be automatically unregistered by the\n     * service.\n     *\n     * Note that the {@link PendingIntent} supplied to this API must be mutable for Intent\n     * notifications to work.\n     *\n     * @param context       the context of the application. If a PendingIntent client is recreated,\n     * the latest state in the context will be used and old state will be discarded\n     * @param hubInfo       the hub to attach this client to\n     * @param pendingIntent the PendingIntent to register to the client\n     * @param nanoAppId     the ID of the nanoapp that Intent events will be generated for\n     * @return the registered client object\n     *\n     * @throws IllegalArgumentException if hubInfo does not represent a valid hub, or an immutable\n     *                                  PendingIntent was supplied\n     * @throws IllegalStateException    if there were too many registered clients at the service\n     * @throws NullPointerException     if pendingIntent or hubInfo is null\n     ",
    "links" : [ "ContextHubManager.EXTRA_EVENT_TYPE", "ContextHubManager.Event", "PendingIntent.cancel()", "ContextHubIntentEvent.fromIntent(Intent)", "#createClient(ContextHubInfo", "ContextHubClient.close()", "android.app.PendingIntent", "android.hardware.location.ContextHubInfo", "ContextHubManager.EXTRA_CONTEXT_HUB_INFO" ]
  }, {
    "name" : "public ContextHubClient createClient(@NonNull ContextHubInfo hubInfo, @NonNull PendingIntent pendingIntent, long nanoAppId)",
    "returnType" : "ContextHubClient",
    "comment" : "\n     * Equivalent to {@link #createClient(ContextHubInfo, PendingIntent, long, String)}\n     * with {@link Context} being set to null.\n     ",
    "links" : [ "android.content.Context", "#createClient(ContextHubInfo" ]
  }, {
    "name" : "public long[] getPreloadedNanoAppIds(@NonNull ContextHubInfo hubInfo)",
    "returnType" : "long[]",
    "comment" : "\n     * Queries for the list of preloaded nanoapp IDs on the system.\n     *\n     * @param hubInfo The Context Hub to query a list of nanoapp IDs from.\n     *\n     * @return The list of 64-bit IDs of the preloaded nanoapps.\n     *\n     * @throws NullPointerException if hubInfo is null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean enableTestMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Puts the Context Hub in test mode.\n     *\n     * The purpose of this API is to make testing CHRE/Context Hub more\n     * predictable and robust. This temporarily unloads all\n     * nanoapps.\n     *\n     * Note that this API must not cause CHRE/Context Hub to behave differently\n     * in test compared to production.\n     *\n     * @return true if the enable test mode operation succeeded.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disableTestMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Puts the Context Hub out of test mode.\n     *\n     * This API will undo any previously made enableTestMode() calls.\n     * After this API is called, it should restore the state of the system\n     * to the normal/production mode before any enableTestMode() call was\n     * made. If the enableTestMode() call unloaded any nanoapps\n     * to enter test mode, it should reload those nanoapps in this API call.\n     *\n     * @return true if the disable operation succeeded.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int unregisterCallback(@NonNull Callback callback)",
    "returnType" : "int",
    "comment" : "\n     * Unregister a callback for receive messages from the context hub.\n     *\n     * @see Callback\n     *\n     * @param callback method to deregister\n     *\n     * @return int 0 on success, -1 otherwise\n     *\n     * @deprecated Use {@link android.hardware.location.ContextHubClient#close()} to unregister\n     *             a {@link android.hardware.location.ContextHubClientCallback}.\n     ",
    "links" : [ "android.hardware.location.ContextHubClient#close()", "android.hardware.location.ContextHubClientCallback" ]
  }, {
    "name" : "public synchronized int unregisterCallback(ICallback callback)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #unregisterCallback(Callback)} instead.\n     * @hide\n     ",
    "links" : [ "#unregisterCallback(Callback)" ]
  }, {
    "name" : "private synchronized void invokeOnMessageReceiptCallback(int hubId, int nanoAppId, ContextHubMessage message)",
    "returnType" : "void",
    "comment" : "\n     * Invokes the ContextHubManager.Callback callback registered with the ContextHubManager.\n     *\n     * @param hubId The ID of the Context Hub the message came from\n     * @param nanoAppId The instance ID of the nanoapp the message came from\n     * @param message The message to provide the callback\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int[] getContextHubHandles()", "public ContextHubInfo getContextHubInfo(int hubHandle)", "public int loadNanoApp(int hubHandle, @NonNull NanoApp app)", "public int unloadNanoApp(int nanoAppHandle)", "public NanoAppInstanceInfo getNanoAppInstanceInfo(int nanoAppHandle)", "public int[] findNanoAppOnHub(int hubHandle, @NonNull NanoAppFilter filter)", "public int sendMessage(int hubHandle, int nanoAppHandle, @NonNull ContextHubMessage message)", "public List<ContextHubInfo> getContextHubs()", "private IContextHubTransactionCallback createQueryCallback(ContextHubTransaction<List<NanoAppState>> transaction)", "public ContextHubTransaction<Void> loadNanoApp(@NonNull ContextHubInfo hubInfo, @NonNull NanoAppBinary appBinary)", "public ContextHubTransaction<Void> unloadNanoApp(@NonNull ContextHubInfo hubInfo, long nanoAppId)", "public ContextHubTransaction<Void> enableNanoApp(@NonNull ContextHubInfo hubInfo, long nanoAppId)", "public ContextHubTransaction<Void> disableNanoApp(@NonNull ContextHubInfo hubInfo, long nanoAppId)", "public ContextHubTransaction<List<NanoAppState>> queryNanoApps(@NonNull ContextHubInfo hubInfo)", "public int registerCallback(@NonNull Callback callback)", "public int registerCallback(ICallback callback)", "public int registerCallback(Callback callback, Handler handler)", "private IContextHubClientCallback createClientCallback(ContextHubClient client, ContextHubClientCallback callback, Executor executor)", "public ContextHubClient createClient(@Nullable Context context, @NonNull ContextHubInfo hubInfo, @NonNull @CallbackExecutor Executor executor, @NonNull ContextHubClientCallback callback)", "public ContextHubClient createClient(@NonNull ContextHubInfo hubInfo, @NonNull ContextHubClientCallback callback, @NonNull @CallbackExecutor Executor executor)", "public ContextHubClient createClient(@NonNull ContextHubInfo hubInfo, @NonNull ContextHubClientCallback callback)", "public ContextHubClient createClient(@Nullable Context context, @NonNull ContextHubInfo hubInfo, @NonNull PendingIntent pendingIntent, long nanoAppId)", "public ContextHubClient createClient(@NonNull ContextHubInfo hubInfo, @NonNull PendingIntent pendingIntent, long nanoAppId)", "public long[] getPreloadedNanoAppIds(@NonNull ContextHubInfo hubInfo)", "public boolean enableTestMode()", "public boolean disableTestMode()", "public int unregisterCallback(@NonNull Callback callback)", "public synchronized int unregisterCallback(ICallback callback)", "private synchronized void invokeOnMessageReceiptCallback(int hubId, int nanoAppId, ContextHubMessage message)" ],
  "variableNames" : [ "TAG", "EXTRA_CLIENT_AUTHORIZATION_STATE", "EXTRA_CONTEXT_HUB_INFO", "EXTRA_EVENT_TYPE", "EXTRA_NANOAPP_ID", "EXTRA_NANOAPP_ABORT_CODE", "EXTRA_MESSAGE", "AUTHORIZATION_DENIED", "AUTHORIZATION_DENIED_GRACE_PERIOD", "AUTHORIZATION_GRANTED", "EVENT_NANOAPP_LOADED", "EVENT_NANOAPP_UNLOADED", "EVENT_NANOAPP_ENABLED", "EVENT_NANOAPP_DISABLED", "EVENT_NANOAPP_ABORTED", "EVENT_NANOAPP_MESSAGE", "EVENT_HUB_RESET", "EVENT_CLIENT_AUTHORIZATION", "mMainLooper", "mService", "mCallback", "mCallbackHandler", "mLocalCallback", "mClientCallback" ]
}