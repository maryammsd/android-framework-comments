{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/sax2dtm/SAX2DTM2.java",
  "packageName" : "org.apache.xml.dtm.ref.sax2dtm",
  "className" : "SAX2DTM2",
  "comment" : "\n * SAX2DTM2 is an optimized version of SAX2DTM which is used in non-incremental situation.\n * It is used as the super class of the XSLTC SAXImpl. Many of the interfaces in SAX2DTM\n * and DTMDefaultBase are overridden in SAX2DTM2 in order to allow fast, efficient\n * access to the DTM model. Some nested iterators in DTMDefaultBaseIterators\n * are also overridden in SAX2DTM2 for performance reasons.\n * <p>\n * Performance is the biggest consideration in the design of SAX2DTM2. To make the code most\n * efficient, the incremental support is dropped in SAX2DTM2, which means that you should not\n * use it in incremental situation. To reduce the overhead of pulling data from the DTM model,\n * a few core interfaces in SAX2DTM2 have direct access to the internal arrays of the\n * SuballocatedIntVectors.\n * <p>\n * The design of SAX2DTM2 may limit its extensibilty. If you have a reason to extend the\n * SAX2DTM model, please extend from SAX2DTM instead of this class.\n * <p>\n * TODO: This class is currently only used by XSLTC. We need to investigate the possibility\n * of also using it in Xalan-J Interpretive. Xalan's performance is likely to get an instant\n * boost if we use SAX2DTM2 instead of SAX2DTM in non-incremental case.\n * <p>\n * %MK% The code in this class is critical to the XSLTC_DTM performance. Be very careful\n * when making changes here!\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_exptype_map0",
    "type" : "int[]",
    "comment" : " SuballocatedIntVector.elementAt().",
    "links" : [ ]
  }, {
    "name" : "m_nextsib_map0",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_firstch_map0",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_parent_map0",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_exptype_map",
    "type" : "int[][]",
    "comment" : " Double array references to the map arrays in SuballocatedIntVectors.",
    "links" : [ ]
  }, {
    "name" : "m_nextsib_map",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_firstch_map",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_parent_map",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_extendedTypes",
    "type" : "ExtendedType[]",
    "comment" : " %OPT% Cache the array of extended types in this class",
    "links" : [ ]
  }, {
    "name" : "m_values",
    "type" : "Vector",
    "comment" : " %REVISIT% Do we need a custom class (e.g. StringVector) here?",
    "links" : [ ]
  }, {
    "name" : "m_valueIndex",
    "type" : "int",
    "comment" : " The current index into the m_values Vector.",
    "links" : [ ]
  }, {
    "name" : "m_maxNodeIndex",
    "type" : "int",
    "comment" : " The maximum value of the current node index.",
    "links" : [ ]
  }, {
    "name" : "m_SHIFT",
    "type" : "int",
    "comment" : " Cache the shift and mask values for the SuballocatedIntVectors.",
    "links" : [ ]
  }, {
    "name" : "m_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_blocksize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_LENGTH_BITS",
    "type" : "int",
    "comment" : " The number of bits for the length of a Text node.",
    "links" : [ ]
  }, {
    "name" : "TEXT_OFFSET_BITS",
    "type" : "int",
    "comment" : " The number of bits for the offset of a Text node.",
    "links" : [ ]
  }, {
    "name" : "TEXT_LENGTH_MAX",
    "type" : "int",
    "comment" : " The maximum length value",
    "links" : [ ]
  }, {
    "name" : "TEXT_OFFSET_MAX",
    "type" : "int",
    "comment" : " The maximum offset value",
    "links" : [ ]
  }, {
    "name" : "m_buildIdIndex",
    "type" : "boolean",
    "comment" : " True if we want to build the ID index table.",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STR",
    "type" : "String",
    "comment" : " Constant for empty String",
    "links" : [ ]
  }, {
    "name" : "EMPTY_XML_STR",
    "type" : "XMLString",
    "comment" : " Constant for empty XMLString",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int _exptype(int identity)",
    "returnType" : "int",
    "comment" : "\n   * Override DTMDefaultBase._exptype() by dropping the incremental code.\n   *\n   * <p>This one is less efficient than _exptype2. It is only used during\n   * DTM building. _exptype2 is used after the document is fully built.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int _exptype2(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase._exptype().\n   *\n   * @param identity A node identity, which <em>must not</em> be equal to\n   *        <code>DTM.NULL</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int _nextsib2(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase._nextsib().\n   *\n   * @param identity A node identity, which <em>must not</em> be equal to\n   *        <code>DTM.NULL</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int _firstch2(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase._firstch().\n   *\n   * @param identity A node identity, which <em>must not</em> be equal to\n   *        <code>DTM.NULL</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int _parent2(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase._parent().\n   *\n   * @param identity A node identity, which <em>must not</em> be equal to\n   *        <code>DTM.NULL</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int _type2(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase._type().\n   *\n   * @param identity A node identity, which <em>must not</em> be equal to\n   *        <code>DTM.NULL</code>\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getExpandedTypeID2(int nodeHandle)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase.getExpandedTypeID(int).\n   *\n   * <p>This one is only used by DOMAdapter.getExpandedTypeID(int), which\n   * is mostly called from the compiled translets.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int _exptype2Type(int exptype)",
    "returnType" : "int",
    "comment" : "\n   * Return the node type from the expanded type\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIdForNamespace(String uri)",
    "returnType" : "int",
    "comment" : "\n   * Get a prefix either from the uri mapping, or just make\n   * one up!\n   *\n   * @param uri The namespace URI, which may be null.\n   *\n   * @return The prefix if there is one, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Override SAX2DTM.startElement()\n   *\n   * <p>Receive notification of the start of an element.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the start of\n   * each element (such as allocating a new tree node or writing\n   * output to a file).</p>\n   *\n   * @param uri The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param qName The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   * @param attributes The specified or defaulted attributes.\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#startElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of an element.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the end of\n   * each element (such as finalising a tree node or writing\n   * output to a file).</p>\n   *\n   * @param uri The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param qName The qualified XML 1.0 name (with prefix), or the\n   *        empty string if qualified names are not available.\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#endElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an XML comment anywhere in the document.\n   *\n   * <p>This callback will be used for comments inside or outside the\n   * document element, including comments in the external DTD\n   * subset (if read).</p>\n   *\n   * @param ch An array holding the characters in the comment.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   * @throws SAXException The application may raise an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the beginning of the document.\n   *\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#startDocument\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of the document.\n   *\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#endDocument\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final int addNode(int type, int expandedTypeID, int parentIndex, int previousSibling, int dataOrPrefix, boolean canHaveFirstChild)",
    "returnType" : "int",
    "comment" : "\n   * Construct the node map from the node.\n   *\n   * @param type raw type ID, one of DTM.XXX_NODE.\n   * @param expandedTypeID The expended type ID.\n   * @param parentIndex The current parent index.\n   * @param previousSibling The previous sibling index.\n   * @param dataOrPrefix index into m_data table, or string handle.\n   * @param canHaveFirstChild true if the node can have a first child, false\n   *                          if it is atomic.\n   *\n   * @return The index identity of the node that was added.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final void charactersFlush()",
    "returnType" : "void",
    "comment" : "\n   * Check whether accumulated text should be stripped; if not,\n   * append the appropriate flavor of text/cdata node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Override the processingInstruction() interface in SAX2DTM2.\n   * <p>\n   * %OPT% This one is different from SAX2DTM.processingInstruction()\n   * in that we do not use extended types for PI nodes. The name of\n   * the PI is saved in the DTMStringPool.\n   *\n   * Receive notification of a processing instruction.\n   *\n   * @param target The processing instruction target.\n   * @param data The processing instruction data, or null if\n   *             none is supplied.\n   * @throws SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#processingInstruction\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getFirstAttribute(int nodeHandle)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase.getFirstAttribute().\n   * <p>\n   * Given a node handle, get the index of the node's first attribute.\n   *\n   * @param nodeHandle int Handle of the node.\n   * @return Handle of first attribute, or DTM.NULL to indicate none exists.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getFirstAttributeIdentity(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase.getFirstAttributeIdentity(int).\n   * <p>\n   * Given a node identity, get the index of the node's first attribute.\n   *\n   * @param identity int identity of the node.\n   * @return Identity of first attribute, or DTM.NULL to indicate none exists.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextAttributeIdentity(int identity)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase.getNextAttributeIdentity(int).\n   * <p>\n   * Given a node identity for an attribute, advance to the next attribute.\n   *\n   * @param identity int identity of the attribute node.  This\n   * <strong>must</strong> be an attribute node.\n   *\n   * @return int DTM node-identity of the resolved attr,\n   * or DTM.NULL to indicate none exists.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final int getTypedAttribute(int nodeHandle, int attType)",
    "returnType" : "int",
    "comment" : "\n   * The optimized version of DTMDefaultBase.getTypedAttribute(int, int).\n   * <p>\n   * Given a node handle and an expanded type ID, get the index of the node's\n   * attribute of that type, if any.\n   *\n   * @param nodeHandle int Handle of the node.\n   * @param attType int expanded type ID of the required attribute.\n   * @return Handle of attribute of the required type, or DTM.NULL to indicate\n   * none exists.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Override SAX2DTM.getLocalName() in SAX2DTM2.\n   * <p>Processing for PIs is different.\n   *\n   * Given a node handle, return its XPath- style localname. (As defined in\n   * Namespaces, this is the portion of the name after any colon character).\n   *\n   * @param nodeHandle the id of the node.\n   * @return String Local name of this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getNodeNameX(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * The optimized version of SAX2DTM.getNodeNameX().\n   * <p>\n   * Given a node handle, return the XPath node name. This should be the name\n   * as described by the XPath data model, NOT the DOM- style name.\n   *\n   * @param nodeHandle the id of the node.\n   * @return String Name of this node, which may be an empty string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * The optimized version of SAX2DTM.getNodeName().\n   * <p>\n   * Given a node handle, return its DOM-style node name. This will include\n   * names such as #text or #document.\n   *\n   * @param nodeHandle the id of the node.\n   * @return String Name of this node, which may be an empty string.\n   * %REVIEW% Document when empty string is possible...\n   * %REVIEW-COMMENT% It should never be empty, should it?\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString getStringValue(int nodeHandle)",
    "returnType" : "XMLString",
    "comment" : "\n   * Override SAX2DTM.getStringValue(int)\n   * <p>\n   * This method is only used by Xalan-J Interpretive. It is not used by XSLTC.\n   * <p>\n   * If the caller supplies an XMLStringFactory, the getStringValue() interface\n   * in SAX2DTM will be called. Otherwise just calls getStringValueX() and\n   * wraps the returned String in an XMLString.\n   *\n   * Get the string-value of a node as a String object\n   * (see http://www.w3.org/TR/xpath#data-model\n   * for the definition of a node's string-value).\n   *\n   * @param nodeHandle The node ID.\n   *\n   * @return A string object that represents the string-value of the given node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getStringValueX(final int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * The optimized version of SAX2DTM.getStringValue(int).\n   * <p>\n   * %OPT% This is one of the most often used interfaces. Performance is\n   * critical here. This one is different from SAX2DTM.getStringValue(int) in\n   * that it returns a String instead of a XMLString.\n   *\n   * Get the string- value of a node as a String object (see http: //www. w3.\n   * org/TR/xpath#data- model for the definition of a node's string- value).\n   *\n   * @param nodeHandle The node ID.\n   *\n   * @return A string object that represents the string-value of the given node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getStringValue()",
    "returnType" : "String",
    "comment" : "\n   * Returns the string value of the entire tree\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchCharactersEvents(int nodeHandle, ContentHandler ch, boolean normalize) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * The optimized version of SAX2DTM.dispatchCharactersEvents(int, ContentHandler, boolean).\n   * <p>\n   * Directly call the\n   * characters method on the passed ContentHandler for the\n   * string-value of the given node (see http://www.w3.org/TR/xpath#data-model\n   * for the definition of a node's string-value). Multiple calls to the\n   * ContentHandler's characters methods may well occur for a single call to\n   * this method.\n   *\n   * @param nodeHandle The node ID.\n   * @param ch A non-null reference to a ContentHandler.\n   * @param normalize true if the content should be normalized according to\n   * the rules for the XPath\n   * <a href=\"http://www.w3.org/TR/xpath#function-normalize-space\">normalize-space</a>\n   * function.\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue(int nodeHandle)",
    "returnType" : "String",
    "comment" : "\n   * Given a node handle, return its node value. This is mostly\n   * as defined by the DOM, but may ignore some conveniences.\n   * <p>\n   *\n   * @param nodeHandle The node id.\n   * @return String Value of this node, or null if not\n   * meaningful for this node type.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final void copyTextNode(final int nodeID, SerializationHandler handler) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Copy the String value of a Text node to a SerializationHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final String copyElement(int nodeID, int exptype, SerializationHandler handler) throws SAXException",
    "returnType" : "String",
    "comment" : "\n     * Copy an Element node to a SerializationHandler.\n     *\n     * @param nodeID The node identity\n     * @param exptype The expanded type of the Element node\n     * @param handler The SerializationHandler\n     * @return The qualified name of the Element node.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void copyNS(final int nodeID, SerializationHandler handler, boolean inScope) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Copy  namespace nodes.\n     *\n     * @param nodeID The Element node identity\n     * @param handler The SerializationHandler\n     * @param inScope  true if all namespaces in scope should be copied,\n     *  false if only the namespace declarations should be copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final int getNextNamespaceNode2(int baseID)",
    "returnType" : "int",
    "comment" : "\n     * Return the next namespace node following the given base node.\n     *\n     * @baseID The node identity of the base node, which can be an\n     * element, attribute or namespace node.\n     * @return The namespace node immediately following the base node.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void copyAttributes(final int nodeID, SerializationHandler handler) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Copy  attribute nodes from an element .\n     *\n     * @param nodeID The Element node identity\n     * @param handler The SerializationHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void copyAttribute(int nodeID, int exptype, SerializationHandler handler) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Copy an Attribute node to a SerializationHandler\n     *\n     * @param nodeID The node identity\n     * @param exptype The expanded type of the Element node\n     * @param handler The SerializationHandler\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int _exptype(int identity)", "public final int _exptype2(int identity)", "public final int _nextsib2(int identity)", "public final int _firstch2(int identity)", "public final int _parent2(int identity)", "public final int _type2(int identity)", "public final int getExpandedTypeID2(int nodeHandle)", "public final int _exptype2Type(int exptype)", "public int getIdForNamespace(String uri)", "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void comment(char[] ch, int start, int length) throws SAXException", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "protected final int addNode(int type, int expandedTypeID, int parentIndex, int previousSibling, int dataOrPrefix, boolean canHaveFirstChild)", "protected final void charactersFlush()", "public void processingInstruction(String target, String data) throws SAXException", "public final int getFirstAttribute(int nodeHandle)", "protected int getFirstAttributeIdentity(int identity)", "protected int getNextAttributeIdentity(int identity)", "protected final int getTypedAttribute(int nodeHandle, int attType)", "public String getLocalName(int nodeHandle)", "public final String getNodeNameX(int nodeHandle)", "public String getNodeName(int nodeHandle)", "public XMLString getStringValue(int nodeHandle)", "public final String getStringValueX(final int nodeHandle)", "public String getStringValue()", "public final void dispatchCharactersEvents(int nodeHandle, ContentHandler ch, boolean normalize) throws SAXException", "public String getNodeValue(int nodeHandle)", "protected final void copyTextNode(final int nodeID, SerializationHandler handler) throws SAXException", "protected final String copyElement(int nodeID, int exptype, SerializationHandler handler) throws SAXException", "protected final void copyNS(final int nodeID, SerializationHandler handler, boolean inScope) throws SAXException", "protected final int getNextNamespaceNode2(int baseID)", "protected final void copyAttributes(final int nodeID, SerializationHandler handler) throws SAXException", "protected final void copyAttribute(int nodeID, int exptype, SerializationHandler handler) throws SAXException" ],
  "variableNames" : [ "m_exptype_map0", "m_nextsib_map0", "m_firstch_map0", "m_parent_map0", "m_exptype_map", "m_nextsib_map", "m_firstch_map", "m_parent_map", "m_extendedTypes", "m_values", "m_valueIndex", "m_maxNodeIndex", "m_SHIFT", "m_MASK", "m_blocksize", "TEXT_LENGTH_BITS", "TEXT_OFFSET_BITS", "TEXT_LENGTH_MAX", "TEXT_OFFSET_MAX", "m_buildIdIndex", "EMPTY_STR", "EMPTY_XML_STR" ]
}