{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/KeyAgreementSpi.java",
  "packageName" : "javax.crypto",
  "className" : "KeyAgreementSpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected abstract void engineInit(Key key, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key agreement with the given key and source of\n     * randomness. The given key is required to contain all the algorithm\n     * parameters required for this key agreement.\n     *\n     * <p> If the key agreement algorithm requires random bytes, it gets them\n     * from the given source of randomness, <code>random</code>.\n     * However, if the underlying\n     * algorithm implementation does not require any random bytes,\n     * <code>random</code> is ignored.\n     *\n     * @param key the party's private information. For example, in the case\n     * of the Diffie-Hellman key agreement, this would be the party's own\n     * Diffie-Hellman private key.\n     * @param random the source of randomness\n     *\n     * @exception InvalidKeyException if the given key is\n     * inappropriate for this key agreement, e.g., is of the wrong type or\n     * has an incompatible algorithm type.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineInit(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this key agreement with the given key, set of\n     * algorithm parameters, and source of randomness.\n     *\n     * @param key the party's private information. For example, in the case\n     * of the Diffie-Hellman key agreement, this would be the party's own\n     * Diffie-Hellman private key.\n     * @param params the key agreement parameters\n     * @param random the source of randomness\n     *\n     * @exception InvalidKeyException if the given key is\n     * inappropriate for this key agreement, e.g., is of the wrong type or\n     * has an incompatible algorithm type.\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key agreement.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract Key engineDoPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException",
    "returnType" : "Key",
    "comment" : "\n     * Executes the next phase of this key agreement with the given\n     * key that was received from one of the other parties involved in this key\n     * agreement.\n     *\n     * @param key the key for this phase. For example, in the case of\n     * Diffie-Hellman between 2 parties, this would be the other party's\n     * Diffie-Hellman public key.\n     * @param lastPhase flag which indicates whether or not this is the last\n     * phase of this key agreement.\n     *\n     * @return the (intermediate) key resulting from this phase, or null if\n     * this phase does not yield a key\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this phase.\n     * @exception IllegalStateException if this key agreement has not been\n     * initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte[] engineGenerateSecret() throws IllegalStateException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the shared secret and returns it in a new buffer.\n     *\n     * <p>This method resets this <code>KeyAgreementSpi</code> object,\n     * so that it\n     * can be reused for further key agreements. Unless this key agreement is\n     * reinitialized with one of the <code>engineInit</code> methods, the same\n     * private information and algorithm parameters will be used for\n     * subsequent key agreements.\n     *\n     * @return the new buffer with the shared secret\n     *\n     * @exception IllegalStateException if this key agreement has not been\n     * completed yet\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int engineGenerateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException",
    "returnType" : "int",
    "comment" : "\n     * Generates the shared secret, and places it into the buffer\n     * <code>sharedSecret</code>, beginning at <code>offset</code> inclusive.\n     *\n     * <p>If the <code>sharedSecret</code> buffer is too small to hold the\n     * result, a <code>ShortBufferException</code> is thrown.\n     * In this case, this call should be repeated with a larger output buffer.\n     *\n     * <p>This method resets this <code>KeyAgreementSpi</code> object,\n     * so that it\n     * can be reused for further key agreements. Unless this key agreement is\n     * reinitialized with one of the <code>engineInit</code> methods, the same\n     * private information and algorithm parameters will be used for\n     * subsequent key agreements.\n     *\n     * @param sharedSecret the buffer for the shared secret\n     * @param offset the offset in <code>sharedSecret</code> where the\n     * shared secret will be stored\n     *\n     * @return the number of bytes placed into <code>sharedSecret</code>\n     *\n     * @exception IllegalStateException if this key agreement has not been\n     * completed yet\n     * @exception ShortBufferException if the given output buffer is too small\n     * to hold the secret\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SecretKey engineGenerateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "SecretKey",
    "comment" : "\n     * Creates the shared secret and returns it as a secret key object\n     * of the requested algorithm type.\n     *\n     * <p>This method resets this <code>KeyAgreementSpi</code> object,\n     * so that it\n     * can be reused for further key agreements. Unless this key agreement is\n     * reinitialized with one of the <code>engineInit</code> methods, the same\n     * private information and algorithm parameters will be used for\n     * subsequent key agreements.\n     *\n     * @param algorithm the requested secret key algorithm\n     *\n     * @return the shared secret key\n     *\n     * @exception IllegalStateException if this key agreement has not been\n     * completed yet\n     * @exception NoSuchAlgorithmException if the requested secret key\n     * algorithm is not available\n     * @exception InvalidKeyException if the shared secret key material cannot\n     * be used to generate a secret key of the requested algorithm type (e.g.,\n     * the key material is too short)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract void engineInit(Key key, SecureRandom random) throws InvalidKeyException", "protected abstract void engineInit(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "protected abstract Key engineDoPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException", "protected abstract byte[] engineGenerateSecret() throws IllegalStateException", "protected abstract int engineGenerateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException", "protected abstract SecretKey engineGenerateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException" ],
  "variableNames" : [ ]
}