{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/NativeHandle.java",
  "packageName" : "android.os",
  "className" : "NativeHandle",
  "comment" : "\n * Collection representing a set of open file descriptors and an opaque data stream.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mOwn",
    "type" : "boolean",
    "comment" : " whether this object owns mFds",
    "links" : [ ]
  }, {
    "name" : "mFds",
    "type" : "FileDescriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInts",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static FileDescriptor[] createFileDescriptorArray(@NonNull int[] fds)",
    "returnType" : "FileDescriptor[]",
    "comment" : "\n     * Convenience method for creating a list of file descriptors.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleFileDescriptor()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this {@link NativeHandle} object contains a single file\n     * descriptor and nothing else.\n     *\n     * @return a boolean value\n     ",
    "links" : [ "NativeHandle" ]
  }, {
    "name" : "public NativeHandle dup() throws java.io.IOException",
    "returnType" : "NativeHandle",
    "comment" : "\n     * Explicitly duplicate NativeHandle (this dups all file descritptors).\n     *\n     * If this method is called, this must also be explicitly closed with\n     * {@link #close()}.\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "private void checkOpen()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the file descriptors if they are owned by this object.\n     *\n     * This also invalidates the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the underlying lone file descriptor.\n     *\n     * @return a {@link FileDescriptor} object\n     * @throws IllegalStateException if this object contains either zero or\n     *         more than one file descriptor, or a non-empty data stream.\n     ",
    "links" : [ "FileDescriptor" ]
  }, {
    "name" : "private int[] getFdsAsIntArray()",
    "returnType" : "int[]",
    "comment" : "\n     * Convenience method for fetching this object's file descriptors from JNI.\n     * @return a mutable copy of the underlying file descriptors (as an int[])\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor[] getFileDescriptors()",
    "returnType" : "FileDescriptor[]",
    "comment" : "\n     * Fetch file descriptors\n     *\n     * @return the fds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getInts()",
    "returnType" : "int[]",
    "comment" : "\n     * Fetch opaque ints. Note: This object retains ownership of the data.\n     *\n     * @return the opaque data stream.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mOwn", "mFds", "mInts" ],
  "methodNames" : [ "private static FileDescriptor[] createFileDescriptorArray(@NonNull int[] fds)", "public boolean hasSingleFileDescriptor()", "public NativeHandle dup() throws java.io.IOException", "private void checkOpen()", "public void close() throws java.io.IOException", "public FileDescriptor getFileDescriptor()", "private int[] getFdsAsIntArray()", "public FileDescriptor[] getFileDescriptors()", "public int[] getInts()" ]
}