{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/preference/PreferenceActivity.java",
  "packageName" : "android.preference",
  "className" : "PreferenceActivity",
  "comment" : "\n * This is the base class for an activity to show a hierarchy of preferences\n * to the user.  Prior to {@link android.os.Build.VERSION_CODES#HONEYCOMB}\n * this class only allowed the display of a single set of preference; this\n * functionality should now be found in the new {@link PreferenceFragment}\n * class.  If you are using PreferenceActivity in its old mode, the documentation\n * there applies to the deprecated APIs here.\n *\n * <p>This activity shows one or more headers of preferences, each of which\n * is associated with a {@link PreferenceFragment} to display the preferences\n * of that header.  The actual layout and display of these associations can\n * however vary; currently there are two major approaches it may take:\n *\n * <ul>\n * <li>On a small screen it may display only the headers as a single list when first launched.\n * Selecting one of the header items will only show the PreferenceFragment of that header (on\n * Android N and lower a new Activity is launched).\n * <li>On a large screen it may display both the headers and current PreferenceFragment together as\n * panes. Selecting a header item switches to showing the correct PreferenceFragment for that item.\n * </ul>\n *\n * <p>Subclasses of PreferenceActivity should implement\n * {@link #onBuildHeaders} to populate the header list with the desired\n * items.  Doing this implicitly switches the class into its new \"headers\n * + fragments\" mode rather than the old style of just showing a single\n * preferences list.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about using {@code PreferenceActivity},\n * read the <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>\n * guide.</p>\n * </div>\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "links" : [ "android.os.Build.VERSION_CODES#HONEYCOMB", "android.preference.PreferenceFragment", "#onBuildHeaders" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEADERS_TAG",
    "type" : "String",
    "comment" : " Constants for state save/restore",
    "links" : [ ]
  }, {
    "name" : "CUR_HEADER_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFERENCES_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SHOW_FRAGMENT",
    "type" : "String",
    "comment" : "\n     * When starting this activity, the invoking Intent can contain this extra\n     * string to specify which fragment should be initially displayed.\n     * <p/>Starting from Key Lime Pie, when this argument is passed in, the PreferenceActivity\n     * will call isValidFragment() to confirm that the fragment class name is valid for this\n     * activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SHOW_FRAGMENT_ARGUMENTS",
    "type" : "String",
    "comment" : "\n     * When starting this activity and using {@link #EXTRA_SHOW_FRAGMENT},\n     * this extra can also be specified to supply a Bundle of arguments to pass\n     * to that fragment when it is instantiated during the initial creation\n     * of PreferenceActivity.\n     ",
    "links" : [ "#EXTRA_SHOW_FRAGMENT" ]
  }, {
    "name" : "EXTRA_SHOW_FRAGMENT_TITLE",
    "type" : "String",
    "comment" : "\n     * When starting this activity and using {@link #EXTRA_SHOW_FRAGMENT},\n     * this extra can also be specify to supply the title to be shown for\n     * that fragment.\n     ",
    "links" : [ "#EXTRA_SHOW_FRAGMENT" ]
  }, {
    "name" : "EXTRA_SHOW_FRAGMENT_SHORT_TITLE",
    "type" : "String",
    "comment" : "\n     * When starting this activity and using {@link #EXTRA_SHOW_FRAGMENT},\n     * this extra can also be specify to supply the short title to be shown for\n     * that fragment.\n     ",
    "links" : [ "#EXTRA_SHOW_FRAGMENT" ]
  }, {
    "name" : "EXTRA_NO_HEADERS",
    "type" : "String",
    "comment" : "\n     * When starting this activity, the invoking Intent can contain this extra\n     * boolean that the header list should not be displayed.  This is most often\n     * used in conjunction with {@link #EXTRA_SHOW_FRAGMENT} to launch\n     * the activity to display a specific fragment that the user has navigated\n     * to.\n     ",
    "links" : [ "#EXTRA_SHOW_FRAGMENT" ]
  }, {
    "name" : "BACK_STACK_PREFS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREFS_SHOW_BUTTON_BAR",
    "type" : "String",
    "comment" : " Back will then return RESULT_CANCELED and Next RESULT_OK",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREFS_SHOW_SKIP",
    "type" : "String",
    "comment" : " add a Skip button?",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREFS_SET_NEXT_TEXT",
    "type" : "String",
    "comment" : " at all by setting it to null",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREFS_SET_BACK_TEXT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeaders",
    "type" : "ArrayList<Header>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListFooter",
    "type" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrefsContainer",
    "type" : "ViewGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityTitle",
    "type" : "CharSequence",
    "comment" : " in onBackPress to restore the title.",
    "links" : [ ]
  }, {
    "name" : "mHeadersContainer",
    "type" : "ViewGroup",
    "comment" : " Null if in legacy mode.",
    "links" : [ ]
  }, {
    "name" : "mFragmentBreadCrumbs",
    "type" : "FragmentBreadCrumbs",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSinglePane",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurHeader",
    "type" : "Header",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferenceManager",
    "type" : "PreferenceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSavedInstanceState",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextButton",
    "type" : "Button",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferenceHeaderItemResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferenceHeaderRemoveEmptyIcon",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRST_REQUEST_CODE",
    "type" : "int",
    "comment" : "\n     * The starting request code given out to preference framework.\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_BIND_PREFERENCES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_BUILD_HEADERS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEADER_ID_UNDEFINED",
    "type" : "long",
    "comment" : "\n     * Default value for {@link Header#id Header.id} indicating that no\n     * identifier value is set.  All other values (including those below -1)\n     * are valid.\n     ",
    "links" : [ "#id" ]
  } ],
  "methods" : [ {
    "name" : "public boolean onOptionsItemSelected(MenuItem item)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onCreate(@Nullable Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBackPressed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasHeaders()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this activity is currently showing the header list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Header> getHeaders()",
    "returnType" : "List<Header>",
    "comment" : "\n     * Returns the Header list\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMultiPane()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this activity is showing multiple panes -- the headers\n     * and a preference fragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onIsMultiPane()",
    "returnType" : "boolean",
    "comment" : "\n     * Called to determine if the activity should run in multi-pane mode.\n     * The default implementation returns true if the screen is large\n     * enough.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onIsHidingHeaders()",
    "returnType" : "boolean",
    "comment" : "\n     * Called to determine whether the header list should be hidden.\n     * The default implementation returns the\n     * value given in {@link #EXTRA_NO_HEADERS} or false if it is not supplied.\n     * This is set to false, for example, when the activity is being re-launched\n     * to show a particular preference activity.\n     ",
    "links" : [ "#EXTRA_NO_HEADERS" ]
  }, {
    "name" : "public Header onGetInitialHeader()",
    "returnType" : "Header",
    "comment" : "\n     * Called to determine the initial header to be shown.  The default\n     * implementation simply returns the fragment of the first header.  Note\n     * that the returned Header object does not actually need to exist in\n     * your header list -- whatever its fragment is will simply be used to\n     * show for the initial UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Header onGetNewHeader()",
    "returnType" : "Header",
    "comment" : "\n     * Called after the header list has been updated ({@link #onBuildHeaders}\n     * has been called and returned due to {@link #invalidateHeaders()}) to\n     * specify the header that should now be selected.  The default implementation\n     * returns null to keep whatever header is currently selected.\n     ",
    "links" : [ "#onBuildHeaders", "#invalidateHeaders()" ]
  }, {
    "name" : "public void onBuildHeaders(List<Header> target)",
    "returnType" : "void",
    "comment" : "\n     * Called when the activity needs its list of headers build.  By\n     * implementing this and adding at least one item to the list, you\n     * will cause the activity to run in its modern fragment mode.  Note\n     * that this function may not always be called; for example, if the\n     * activity has been asked to display a particular fragment without\n     * the header list, there is no need to build the headers.\n     *\n     * <p>Typical implementations will use {@link #loadHeadersFromResource}\n     * to fill in the list from a resource.\n     *\n     * @param target The list in which to place the headers.\n     ",
    "links" : [ "#loadHeadersFromResource" ]
  }, {
    "name" : "public void invalidateHeaders()",
    "returnType" : "void",
    "comment" : "\n     * Call when you need to change the headers being displayed.  Will result\n     * in onBuildHeaders() later being called to retrieve the new list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void loadHeadersFromResource(@XmlRes int resid, List<Header> target)",
    "returnType" : "void",
    "comment" : "\n     * Parse the given XML file as a header description, adding each\n     * parsed Header into the target list.\n     *\n     * @param resid The XML resource to load and parse.\n     * @param target The list in which the parsed headers should be placed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isValidFragment(String fragmentName)",
    "returnType" : "boolean",
    "comment" : "\n     * Subclasses should override this method and verify that the given fragment is a valid type\n     * to be attached to this activity. The default implementation returns <code>true</code> for\n     * apps built for <code>android:targetSdkVersion</code> older than\n     * {@link android.os.Build.VERSION_CODES#KITKAT}. For later versions, it will throw an exception.\n     * @param fragmentName the class name of the Fragment about to be attached to this activity.\n     * @return true if the fragment class name is valid for this Activity and false otherwise.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "public void setListFooter(View view)",
    "returnType" : "void",
    "comment" : "\n     * Set a footer that should be shown at the bottom of the header list.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSaveInstanceState(Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Bundle state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onActivityResult(int requestCode, int resultCode, Intent data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onContentChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onListItemClick(ListView l, View v, int position, long id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onHeaderClick(Header header, int position)",
    "returnType" : "void",
    "comment" : "\n     * Called when the user selects an item in the header list.  The default\n     * implementation will call either\n     * {@link #startWithFragment(String, Bundle, Fragment, int, int, int)}\n     * or {@link #switchToHeader(Header)} as appropriate.\n     *\n     * @param header The header that was selected.\n     * @param position The header's position in the list.\n     ",
    "links" : [ "#switchToHeader(Header)", "#startWithFragment(String" ]
  }, {
    "name" : "public Intent onBuildStartFragmentIntent(String fragmentName, Bundle args, @StringRes int titleRes, int shortTitleRes)",
    "returnType" : "Intent",
    "comment" : "\n     * Called by {@link #startWithFragment(String, Bundle, Fragment, int, int, int)} when\n     * in single-pane mode, to build an Intent to launch a new activity showing\n     * the selected fragment.  The default implementation constructs an Intent\n     * that re-launches the current activity with the appropriate arguments to\n     * display the fragment.\n     *\n     * @param fragmentName The name of the fragment to display.\n     * @param args Optional arguments to supply to the fragment.\n     * @param titleRes Optional resource ID of title to show for this item.\n     * @param shortTitleRes Optional resource ID of short title to show for this item.\n     * @return Returns an Intent that can be launched to display the given\n     * fragment.\n     ",
    "links" : [ "#startWithFragment(String" ]
  }, {
    "name" : "public void startWithFragment(String fragmentName, Bundle args, Fragment resultTo, int resultRequestCode)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #startWithFragment(String, Bundle, Fragment, int, int, int)}\n     * but uses a 0 titleRes.\n     ",
    "links" : [ "#startWithFragment(String" ]
  }, {
    "name" : "public void startWithFragment(String fragmentName, Bundle args, Fragment resultTo, int resultRequestCode, @StringRes int titleRes, @StringRes int shortTitleRes)",
    "returnType" : "void",
    "comment" : "\n     * Start a new instance of this activity, showing only the given\n     * preference fragment.  When launched in this mode, the header list\n     * will be hidden and the given preference fragment will be instantiated\n     * and fill the entire activity.\n     *\n     * @param fragmentName The name of the fragment to display.\n     * @param args Optional arguments to supply to the fragment.\n     * @param resultTo Option fragment that should receive the result of\n     * the activity launch.\n     * @param resultRequestCode If resultTo is non-null, this is the request\n     * code in which to report the result.\n     * @param titleRes Resource ID of string to display for the title of\n     * this set of preferences.\n     * @param shortTitleRes Resource ID of string to display for the short title of\n     * this set of preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showBreadCrumbs(CharSequence title, CharSequence shortTitle)",
    "returnType" : "void",
    "comment" : "\n     * Change the base title of the bread crumbs for the current preferences.\n     * This will normally be called for you.  See\n     * {@link android.app.FragmentBreadCrumbs} for more information.\n     ",
    "links" : [ "android.app.FragmentBreadCrumbs" ]
  }, {
    "name" : "public void setParentTitle(CharSequence title, CharSequence shortTitle, OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Should be called after onCreate to ensure that the breadcrumbs, if any, were created.\n     * This prepends a title to the fragment breadcrumbs and attaches a listener to any clicks\n     * on the parent entry.\n     * @param title the title for the breadcrumb\n     * @param shortTitle the short title for the breadcrumb\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSelectedHeader(Header header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void showBreadCrumbs(Header header)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void switchToHeaderInner(String fragmentName, Bundle args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void switchToHeader(String fragmentName, Bundle args)",
    "returnType" : "void",
    "comment" : "\n     * When in two-pane mode, switch the fragment pane to show the given\n     * preference fragment.\n     *\n     * @param fragmentName The name of the fragment to display.\n     * @param args Optional arguments to supply to the fragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void switchToHeader(Header header)",
    "returnType" : "void",
    "comment" : "\n     * When in two-pane mode, switch to the fragment pane to show the given\n     * preference fragment.\n     *\n     * @param header The new header to display.\n     ",
    "links" : [ ]
  }, {
    "name" : " Header findBestMatchingHeader(Header cur, ArrayList<Header> from)",
    "returnType" : "Header",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startPreferenceFragment(Fragment fragment, boolean push)",
    "returnType" : "void",
    "comment" : "\n     * Start a new fragment.\n     *\n     * @param fragment The fragment to start\n     * @param push If true, the current fragment will be pushed onto the back stack.  If false,\n     * the current fragment will be replaced.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPreferencePanel(String fragmentClass, Bundle args, @StringRes int titleRes, CharSequence titleText, Fragment resultTo, int resultRequestCode)",
    "returnType" : "void",
    "comment" : "\n     * Start a new fragment containing a preference panel.  If the preferences\n     * are being displayed in multi-pane mode, the given fragment class will\n     * be instantiated and placed in the appropriate pane.  If running in\n     * single-pane mode, a new activity will be launched in which to show the\n     * fragment.\n     *\n     * @param fragmentClass Full name of the class implementing the fragment.\n     * @param args Any desired arguments to supply to the fragment.\n     * @param titleRes Optional resource identifier of the title of this\n     * fragment.\n     * @param titleText Optional text of the title of this fragment.\n     * @param resultTo Optional fragment that result data should be sent to.\n     * If non-null, resultTo.onActivityResult() will be called when this\n     * preference panel is done.  The launched panel must use\n     * {@link #finishPreferencePanel(Fragment, int, Intent)} when done.\n     * @param resultRequestCode If resultTo is non-null, this is the caller's\n     * request code to be received with the result.\n     ",
    "links" : [ "#finishPreferencePanel(Fragment" ]
  }, {
    "name" : "public void finishPreferencePanel(Fragment caller, int resultCode, Intent resultData)",
    "returnType" : "void",
    "comment" : "\n     * Called by a preference panel fragment to finish itself.\n     *\n     * @param caller The fragment that is asking to be finished.\n     * @param resultCode Optional result code to send back to the original\n     * launching fragment.\n     * @param resultData Optional result data to send back to the original\n     * launching fragment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onPreferenceStartFragment(PreferenceFragment caller, Preference pref)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postBindPreferences()",
    "returnType" : "void",
    "comment" : "\n     * Posts a message to bind the preferences to the list view.\n     * <p>\n     * Binding late is preferred as any custom preference types created in\n     * {@link #onCreate(Bundle)} are able to have their views recycled.\n     ",
    "links" : [ "#onCreate(Bundle)" ]
  }, {
    "name" : "private void bindPreferences()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PreferenceManager getPreferenceManager()",
    "returnType" : "PreferenceManager",
    "comment" : "\n     * Returns the {@link PreferenceManager} used by this activity.\n     * @return The {@link PreferenceManager}.\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ "android.preference.PreferenceManager" ]
  }, {
    "name" : "private void requirePreferenceManager()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPreferenceScreen(PreferenceScreen preferenceScreen)",
    "returnType" : "void",
    "comment" : "\n     * Sets the root of the preference hierarchy that this activity is showing.\n     *\n     * @param preferenceScreen The root {@link PreferenceScreen} of the preference hierarchy.\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ "android.preference.PreferenceScreen" ]
  }, {
    "name" : "public PreferenceScreen getPreferenceScreen()",
    "returnType" : "PreferenceScreen",
    "comment" : "\n     * Gets the root of the preference hierarchy that this activity is showing.\n     *\n     * @return The {@link PreferenceScreen} that is the root of the preference\n     *         hierarchy.\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ "android.preference.PreferenceScreen" ]
  }, {
    "name" : "public void addPreferencesFromIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Adds preferences from activities that match the given {@link Intent}.\n     *\n     * @param intent The {@link Intent} to query activities.\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "public void addPreferencesFromResource(int preferencesResId)",
    "returnType" : "void",
    "comment" : "\n     * Inflates the given XML resource and adds the preference hierarchy to the current\n     * preference hierarchy.\n     *\n     * @param preferencesResId The XML resource ID to inflate.\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Preference findPreference(CharSequence key)",
    "returnType" : "Preference",
    "comment" : "\n     * Finds a {@link Preference} based on its key.\n     *\n     * @param key The key of the preference to retrieve.\n     * @return The {@link Preference} with the key, or null.\n     * @see PreferenceGroup#findPreference(CharSequence)\n     *\n     * @deprecated This function is not relevant for a modern fragment-based\n     * PreferenceActivity.\n     ",
    "links" : [ "android.preference.Preference" ]
  }, {
    "name" : "protected void onNewIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean hasNextButton()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected Button getNextButton()",
    "returnType" : "Button",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean onOptionsItemSelected(MenuItem item)", "protected void onCreate(@Nullable Bundle savedInstanceState)", "public void onBackPressed()", "public boolean hasHeaders()", "public List<Header> getHeaders()", "public boolean isMultiPane()", "public boolean onIsMultiPane()", "public boolean onIsHidingHeaders()", "public Header onGetInitialHeader()", "public Header onGetNewHeader()", "public void onBuildHeaders(List<Header> target)", "public void invalidateHeaders()", "public void loadHeadersFromResource(@XmlRes int resid, List<Header> target)", "protected boolean isValidFragment(String fragmentName)", "public void setListFooter(View view)", "protected void onStop()", "protected void onDestroy()", "protected void onSaveInstanceState(Bundle outState)", "protected void onRestoreInstanceState(Bundle state)", "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "public void onContentChanged()", "protected void onListItemClick(ListView l, View v, int position, long id)", "public void onHeaderClick(Header header, int position)", "public Intent onBuildStartFragmentIntent(String fragmentName, Bundle args, @StringRes int titleRes, int shortTitleRes)", "public void startWithFragment(String fragmentName, Bundle args, Fragment resultTo, int resultRequestCode)", "public void startWithFragment(String fragmentName, Bundle args, Fragment resultTo, int resultRequestCode, @StringRes int titleRes, @StringRes int shortTitleRes)", "public void showBreadCrumbs(CharSequence title, CharSequence shortTitle)", "public void setParentTitle(CharSequence title, CharSequence shortTitle, OnClickListener listener)", " void setSelectedHeader(Header header)", " void showBreadCrumbs(Header header)", "private void switchToHeaderInner(String fragmentName, Bundle args)", "public void switchToHeader(String fragmentName, Bundle args)", "public void switchToHeader(Header header)", " Header findBestMatchingHeader(Header cur, ArrayList<Header> from)", "public void startPreferenceFragment(Fragment fragment, boolean push)", "public void startPreferencePanel(String fragmentClass, Bundle args, @StringRes int titleRes, CharSequence titleText, Fragment resultTo, int resultRequestCode)", "public void finishPreferencePanel(Fragment caller, int resultCode, Intent resultData)", "public boolean onPreferenceStartFragment(PreferenceFragment caller, Preference pref)", "private void postBindPreferences()", "private void bindPreferences()", "public PreferenceManager getPreferenceManager()", "private void requirePreferenceManager()", "public void setPreferenceScreen(PreferenceScreen preferenceScreen)", "public PreferenceScreen getPreferenceScreen()", "public void addPreferencesFromIntent(Intent intent)", "public void addPreferencesFromResource(int preferencesResId)", "public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference)", "public Preference findPreference(CharSequence key)", "protected void onNewIntent(Intent intent)", "protected boolean hasNextButton()", "protected Button getNextButton()" ],
  "variableNames" : [ "TAG", "HEADERS_TAG", "CUR_HEADER_TAG", "PREFERENCES_TAG", "EXTRA_SHOW_FRAGMENT", "EXTRA_SHOW_FRAGMENT_ARGUMENTS", "EXTRA_SHOW_FRAGMENT_TITLE", "EXTRA_SHOW_FRAGMENT_SHORT_TITLE", "EXTRA_NO_HEADERS", "BACK_STACK_PREFS", "EXTRA_PREFS_SHOW_BUTTON_BAR", "EXTRA_PREFS_SHOW_SKIP", "EXTRA_PREFS_SET_NEXT_TEXT", "EXTRA_PREFS_SET_BACK_TEXT", "mHeaders", "mListFooter", "mPrefsContainer", "mActivityTitle", "mHeadersContainer", "mFragmentBreadCrumbs", "mSinglePane", "mCurHeader", "mPreferenceManager", "mSavedInstanceState", "mNextButton", "mPreferenceHeaderItemResId", "mPreferenceHeaderRemoveEmptyIcon", "FIRST_REQUEST_CODE", "MSG_BIND_PREFERENCES", "MSG_BUILD_HEADERS", "mHandler", "HEADER_ID_UNDEFINED" ]
}