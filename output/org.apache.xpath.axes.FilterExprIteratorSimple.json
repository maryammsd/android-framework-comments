{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/FilterExprIteratorSimple.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "FilterExprIteratorSimple",
  "comment" : "\n * Class to use for one-step iteration that doesn't have a predicate, and \n * doesn't need to set the context.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_expr",
    "type" : "Expression",
    "comment" : " The contained expression. Should be non-null.\n   *  @serial   ",
    "links" : [ ]
  }, {
    "name" : "m_exprObj",
    "type" : "XNodeSet",
    "comment" : " The result of executing m_expr.  Needs to be deep cloned on clone op.  ",
    "links" : [ ]
  }, {
    "name" : "m_mustHardReset",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_canDetachNodeset",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRoot(int context, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Initialize the context values for this expression\n   * after it is cloned.\n   *\n   * @param context The XPath runtime context for this\n   * transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XNodeSet executeFilterExpr(int context, XPathContext xctxt, PrefixResolver prefixResolver, boolean isTopLevel, int stackFrame, Expression expr) throws org.apache.xml.utils.WrappedRuntimeException",
    "returnType" : "XNodeSet",
    "comment" : "\n   * Execute the expression.  Meant for reuse by other FilterExpr iterators \n   * that are not derived from this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the next node in the set and advances the position of the\n   * iterator in the set. After a NodeIterator is created, the first call\n   * to nextNode() returns the first node in the set.\n   *\n   * @return  The next <code>Node</code> in the set being iterated over, or\n   *   <code>null</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the walker from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getInnerExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * Get the inner contained expression of this filter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setInnerExpression(Expression expr)",
    "returnType" : "void",
    "comment" : "\n   * Set the inner contained expression of this filter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : " \n   * Get the analysis bits for this walker, as defined in the WalkerFactory.\n   * @return One of WalkerFactory#BIT_DESCENDANT, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * Warning: This can only be called after setRoot has been called!\n   * \n   * @return true as a default.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callPredicateVisitors(XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * This will traverse the heararchy, calling the visitor for \n   * each member.  If the called visitor method returns \n   * false, the subtree should not be called.\n   * \n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setRoot(int context, Object environment)", "public static XNodeSet executeFilterExpr(int context, XPathContext xctxt, PrefixResolver prefixResolver, boolean isTopLevel, int stackFrame, Expression expr) throws org.apache.xml.utils.WrappedRuntimeException", "public int nextNode()", "public void detach()", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public Expression getInnerExpression()", "public void setInnerExpression(Expression expr)", "public int getAnalysisBits()", "public boolean isDocOrdered()", "public void callPredicateVisitors(XPathVisitor visitor)", "public boolean deepEquals(Expression expr)", "public int getAxis()" ],
  "variableNames" : [ "serialVersionUID", "m_expr", "m_exprObj", "m_mustHardReset", "m_canDetachNodeset" ]
}