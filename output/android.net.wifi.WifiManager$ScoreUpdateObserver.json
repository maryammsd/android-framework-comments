{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiManager.java",
  "packageName" : "android.net.wifi",
  "className" : "ScoreUpdateObserver",
  "comment" : "\n     * Callback interface for framework to receive network status updates and trigger of updating\n     * {@link WifiUsabilityStatsEntry}.\n     *\n     * @hide\n     ",
  "links" : [ "android.net.wifi.WifiUsabilityStatsEntry" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void notifyScoreUpdate(int sessionId, int score)",
    "returnType" : "void",
    "comment" : "\n         * Called by applications to indicate network status. For applications targeting\n         * {@link android.os.Build.VERSION_CODES#S} or above: The score is not used to take action\n         * on network selection but for the purpose of Wifi metric collection only; Network\n         * selection is influenced by inputs from\n         * {@link ScoreUpdateObserver#notifyStatusUpdate(int, boolean)},\n         * {@link ScoreUpdateObserver#requestNudOperation(int, boolean)}, and\n         * {@link ScoreUpdateObserver#blocklistCurrentBssid(int)}.\n         *\n         * @param sessionId The ID to indicate current Wi-Fi network connection obtained from\n         *                  {@link WifiConnectedNetworkScorer#onStart(int)}.\n         * @param score The score representing link quality of current Wi-Fi network connection.\n         *              Populated by connected network scorer in applications..\n         ",
    "links" : [ "#onStart(int)", "android.os.Build.VERSION_CODES#S", "#notifyStatusUpdate(int", "#blocklistCurrentBssid(int)", "#requestNudOperation(int" ]
  }, {
    "name" : " void triggerUpdateOfWifiUsabilityStats(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Called by applications to trigger an update of {@link WifiUsabilityStatsEntry}.\n         * To receive update applications need to add WifiUsabilityStatsEntry listener. See\n         * {@link addOnWifiUsabilityStatsListener(Executor, OnWifiUsabilityStatsListener)}.\n         *\n         * @param sessionId The ID to indicate current Wi-Fi network connection obtained from\n         *                  {@link WifiConnectedNetworkScorer#onStart(int)}.\n         ",
    "links" : [ "addOnWifiUsabilityStatsListener(Executor", "android.net.wifi.WifiUsabilityStatsEntry", "#onStart(int)" ]
  }, {
    "name" : " void notifyStatusUpdate(int sessionId, boolean isUsable)",
    "returnType" : "void",
    "comment" : "\n         * Called by applications to indicate whether current Wi-Fi network is usable or not.\n         *\n         * @param sessionId The ID to indicate current Wi-Fi network connection obtained from\n         *                  {@link WifiConnectedNetworkScorer#onStart(int)}.\n         * @param isUsable The boolean representing whether current Wi-Fi network is usable, and it\n         *                 may be sent to ConnectivityService and used for setting default network.\n         *                 Populated by connected network scorer in applications.\n         ",
    "links" : [ "#onStart(int)" ]
  }, {
    "name" : " void requestNudOperation(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Called by applications to start a NUD (Neighbor Unreachability Detection) operation. The\n         * framework throttles NUD operations to no more frequently than every five seconds\n         * (see {@link WifiScoreReport#NUD_THROTTLE_MILLIS}). The framework keeps track of requests\n         * and executes them as soon as possible based on the throttling criteria.\n         *\n         * @param sessionId The ID to indicate current Wi-Fi network connection obtained from\n         *                  {@link WifiConnectedNetworkScorer#onStart(int)}.\n         ",
    "links" : [ "#NUD_THROTTLE_MILLIS", "#onStart(int)" ]
  }, {
    "name" : " void blocklistCurrentBssid(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Called by applications to blocklist currently connected BSSID. No blocklisting operation\n         * if called after disconnection.\n         *\n         * @param sessionId The ID to indicate current Wi-Fi network connection obtained from\n         *                  {@link WifiConnectedNetworkScorer#onStart(int)}.\n         ",
    "links" : [ "#onStart(int)" ]
  } ],
  "methodNames" : [ " void notifyScoreUpdate(int sessionId, int score)", " void triggerUpdateOfWifiUsabilityStats(int sessionId)", " void notifyStatusUpdate(int sessionId, boolean isUsable)", " void requestNudOperation(int sessionId)", " void blocklistCurrentBssid(int sessionId)" ],
  "variableNames" : [ ]
}