{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/PersistableBundle.java",
  "packageName" : "android.os",
  "className" : "PersistableBundle",
  "comment" : "\n * A mapping from String keys to values of various types. The set of types\n * supported by this class is purposefully restricted to simple objects that can\n * safely be persisted to and restored from disk.\n *\n * @see Bundle\n ",
  "variables" : [ {
    "name" : "TAG_PERSISTABLEMAP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PersistableBundle>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isValidType(Object value)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static PersistableBundle forPair(String key, String value)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Make a PersistableBundle for a single key/value pair.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clones the current PersistableBundle. The internal map is cloned, but the keys and\n     * values to which it refers are copied by reference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle deepCopy()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Make a deep copy of the given bundle.  Traverses into inner containers and copies\n     * them as well, so they are not shared across bundles.  Will traverse in to\n     * {@link Bundle}, {@link PersistableBundle}, {@link ArrayList}, and all types of\n     * primitive arrays.  Other types of objects (such as Parcelable or Serializable)\n     * are referenced as-is and not copied in any way.\n     ",
    "links" : [ "android.os.Bundle", "android.os.PersistableBundle", "java.util.ArrayList" ]
  }, {
    "name" : "public void putPersistableBundle(@Nullable String key, @Nullable PersistableBundle value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a PersistableBundle value into the mapping of this Bundle, replacing\n     * any existing value for the given key.  Either key or value may be null.\n     *\n     * @param key a String, or null\n     * @param value a Bundle object, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getPersistableBundle(@Nullable String key)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Returns the value associated with the given key, or null if\n     * no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key.\n     *\n     * @param key a String, or null\n     * @return a Bundle value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeUnknownObject(Object v, String name, XmlSerializer out) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void saveToXml(XmlSerializer out) throws IOException, XmlPullParserException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Report the nature of this Parcelable's contents\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes the PersistableBundle contents to a Parcel, typically in order for\n     * it to be passed through an IBinder connection.\n     * @param parcel The parcel to copy this bundle to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PersistableBundle restoreFromXml(XmlPullParser in) throws IOException, XmlPullParserException",
    "returnType" : "PersistableBundle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toShortString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToStream(@NonNull OutputStream outputStream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the content of the {@link PersistableBundle} to a {@link OutputStream}.\n     *\n     * <p>The content can be read by a {@link #readFromStream}.\n     *\n     * @see #readFromStream\n     ",
    "links" : [ "android.util.proto.ProtoOutputStream", "android.os.PersistableBundle", "#readFromStream" ]
  }, {
    "name" : "public static PersistableBundle readFromStream(@NonNull InputStream inputStream) throws IOException",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Reads a {@link PersistableBundle} from an {@link InputStream}.\n     *\n     * <p>The stream must be generated by {@link #writeToStream}.\n     *\n     * @see #writeToStream\n     ",
    "links" : [ "android.os.PersistableBundle", "#writeToStream", "java.io.InputStream" ]
  } ],
  "variableNames" : [ "TAG_PERSISTABLEMAP", "EMPTY", "CREATOR" ],
  "methodNames" : [ "public static boolean isValidType(Object value)", "public static PersistableBundle forPair(String key, String value)", "public Object clone()", "public PersistableBundle deepCopy()", "public void putPersistableBundle(@Nullable String key, @Nullable PersistableBundle value)", "public PersistableBundle getPersistableBundle(@Nullable String key)", "public void writeUnknownObject(Object v, String name, XmlSerializer out) throws XmlPullParserException, IOException", "public void saveToXml(XmlSerializer out) throws IOException, XmlPullParserException", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public static PersistableBundle restoreFromXml(XmlPullParser in) throws IOException, XmlPullParserException", "public synchronized String toString()", "public synchronized String toShortString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public void writeToStream(@NonNull OutputStream outputStream) throws IOException", "public static PersistableBundle readFromStream(@NonNull InputStream inputStream) throws IOException" ]
}