{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/CursorLoader.java",
  "packageName" : "android.content",
  "className" : "CursorLoader",
  "comment" : "\n * A loader that queries the {@link ContentResolver} and returns a {@link Cursor}.\n * This class implements the {@link Loader} protocol in a standard way for\n * querying cursors, building on {@link AsyncTaskLoader} to perform the cursor\n * query on a background thread so that it does not block the application's UI.\n * \n * <p>A CursorLoader must be built with the full information for the query to\n * perform, either through the\n * {@link #CursorLoader(Context, Uri, String[], String, String[], String)} or\n * creating an empty instance with {@link #CursorLoader(Context)} and filling\n * in the desired parameters with {@link #setUri(Uri)}, {@link #setSelection(String)},\n * {@link #setSelectionArgs(String[])}, {@link #setSortOrder(String)},\n * and {@link #setProjection(String[])}.\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.loader.content.CursorLoader}\n ",
  "links" : [ "androidx.loader.content.CursorLoader", "#setProjection(String", "#setSelectionArgs(String", "android.content.ContentResolver", "#CursorLoader(Context)", "android.content.Loader", "#setSortOrder(String)", "#setSelection(String)", "android.content.AsyncTaskLoader", "#setUri(Uri)", "android.database.Cursor", "#CursorLoader(Context" ],
  "variables" : [ {
    "name" : "mObserver",
    "type" : "ForceLoadContentObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjection",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelection",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionArgs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSortOrder",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursor",
    "type" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancellationSignal",
    "type" : "CancellationSignal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Cursor loadInBackground()",
    "returnType" : "Cursor",
    "comment" : " Runs on a worker thread ",
    "links" : [ ]
  }, {
    "name" : "public void cancelLoadInBackground()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deliverResult(Cursor cursor)",
    "returnType" : "void",
    "comment" : " Runs on the UI thread ",
    "links" : [ ]
  }, {
    "name" : "protected void onStartLoading()",
    "returnType" : "void",
    "comment" : "\n     * Starts an asynchronous load of the data. When the result is ready the callbacks\n     * will be called on the UI thread. If a previous load has been completed and is still valid\n     * the result may be passed to the callbacks immediately.\n     *\n     * Must be called from the UI thread\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onStopLoading()",
    "returnType" : "void",
    "comment" : "\n     * Must be called from the UI thread\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCanceled(Cursor cursor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onReset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri getUri()",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUri(Uri uri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getProjection()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProjection(String[] projection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSelection()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(String selection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getSelectionArgs()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelectionArgs(String[] selectionArgs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSortOrder()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSortOrder(String sortOrder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Cursor loadInBackground()", "public void cancelLoadInBackground()", "public void deliverResult(Cursor cursor)", "protected void onStartLoading()", "protected void onStopLoading()", "public void onCanceled(Cursor cursor)", "protected void onReset()", "public Uri getUri()", "public void setUri(Uri uri)", "public String[] getProjection()", "public void setProjection(String[] projection)", "public String getSelection()", "public void setSelection(String selection)", "public String[] getSelectionArgs()", "public void setSelectionArgs(String[] selectionArgs)", "public String getSortOrder()", "public void setSortOrder(String sortOrder)", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ],
  "variableNames" : [ "mObserver", "mUri", "mProjection", "mSelection", "mSelectionArgs", "mSortOrder", "mCursor", "mCancellationSignal" ]
}