{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/MinguoChronology.java",
  "packageName" : "java.time.chrono",
  "className" : "MinguoChronology",
  "comment" : "\n * The Minguo calendar system.\n * <p>\n * This chronology defines the rules of the Minguo calendar system.\n * This calendar system is primarily used in the Republic of China, often known as Taiwan.\n * Dates are aligned such that {@code 0001-01-01 (Minguo)} is {@code 1912-01-01 (ISO)}.\n * <p>\n * The fields are defined as follows:\n * <ul>\n * <li>era - There are two eras, the current 'Republic' (ERA_ROC) and the previous era (ERA_BEFORE_ROC).\n * <li>year-of-era - The year-of-era for the current era increases uniformly from the epoch at year one.\n *  For the previous era the year increases from one as time goes backwards.\n *  The value for the current era is equal to the ISO proleptic-year minus 1911.\n * <li>proleptic-year - The proleptic year is the same as the year-of-era for the\n *  current era. For the previous era, years have zero, then negative values.\n *  The value is equal to the ISO proleptic-year minus 1911.\n * <li>month-of-year - The Minguo month-of-year exactly matches ISO.\n * <li>day-of-month - The Minguo day-of-month exactly matches ISO.\n * <li>day-of-year - The Minguo day-of-year exactly matches ISO.\n * <li>leap-year - The Minguo leap-year pattern exactly matches ISO, such that the two calendars\n *  are never out of step.\n * </ul>\n *\n * @implSpec\n * This class is immutable and thread-safe.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INSTANCE",
    "type" : "MinguoChronology",
    "comment" : "\n     * Singleton instance for the Minguo chronology.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version.\n     ",
    "links" : [ ]
  }, {
    "name" : "YEARS_DIFFERENCE",
    "type" : "int",
    "comment" : "\n     * The difference in years between ISO and Minguo.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the ID of the chronology - 'Minguo'.\n     * <p>\n     * The ID uniquely identifies the {@code Chronology}.\n     * It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.\n     *\n     * @return the chronology ID - 'Minguo'\n     * @see #getCalendarType()\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)" ]
  }, {
    "name" : "public String getCalendarType()",
    "returnType" : "String",
    "comment" : "\n     * Gets the calendar type of the underlying calendar system - 'roc'.\n     * <p>\n     * The calendar type is an identifier defined by the\n     * <em>Unicode Locale Data Markup Language (LDML)</em> specification.\n     * It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.\n     * It can also be used as part of a locale, accessible via\n     * {@link Locale#getUnicodeLocaleType(String)} with the key 'ca'.\n     *\n     * @return the calendar system type - 'roc'\n     * @see #getId()\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)", "java.util.Locale#getUnicodeLocaleType(String)" ]
  }, {
    "name" : "public MinguoDate date(Era era, int yearOfEra, int month, int dayOfMonth)",
    "returnType" : "MinguoDate",
    "comment" : "\n     * Obtains a local date in Minguo calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     *\n     * @param era  the Minguo era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code MinguoEra}\n     ",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate date(int prolepticYear, int month, int dayOfMonth)",
    "returnType" : "MinguoDate",
    "comment" : "\n     * Obtains a local date in Minguo calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate dateYearDay(Era era, int yearOfEra, int dayOfYear)",
    "returnType" : "MinguoDate",
    "comment" : "\n     * Obtains a local date in Minguo calendar system from the\n     * era, year-of-era and day-of-year fields.\n     *\n     * @param era  the Minguo era, not null\n     * @param yearOfEra  the year-of-era\n     * @param dayOfYear  the day-of-year\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code MinguoEra}\n     ",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate dateYearDay(int prolepticYear, int dayOfYear)",
    "returnType" : "MinguoDate",
    "comment" : "\n     * Obtains a local date in Minguo calendar system from the\n     * proleptic-year and day-of-year fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate dateEpochDay(long epochDay)",
    "returnType" : "MinguoDate",
    "comment" : "\n     * Obtains a local date in the Minguo calendar system from the epoch-day.\n     *\n     * @param epochDay  the epoch day\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate dateNow()",
    "returnType" : "MinguoDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate dateNow(ZoneId zone)",
    "returnType" : "MinguoDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate dateNow(Clock clock)",
    "returnType" : "MinguoDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate date(TemporalAccessor temporal)",
    "returnType" : "MinguoDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoLocalDateTime<MinguoDate> localDateTime(TemporalAccessor temporal)",
    "returnType" : "ChronoLocalDateTime<MinguoDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoZonedDateTime<MinguoDate> zonedDateTime(TemporalAccessor temporal)",
    "returnType" : "ChronoZonedDateTime<MinguoDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoZonedDateTime<MinguoDate> zonedDateTime(Instant instant, ZoneId zone)",
    "returnType" : "ChronoZonedDateTime<MinguoDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeapYear(long prolepticYear)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified year is a leap year.\n     * <p>\n     * Minguo leap years occur exactly in line with ISO leap years.\n     * This method does not validate the year passed in, and only has a\n     * well-defined result for years in the supported range.\n     *\n     * @param prolepticYear  the proleptic-year to check, not validated for range\n     * @return true if the year is a leap year\n     ",
    "links" : [ ]
  }, {
    "name" : "public int prolepticYear(Era era, int yearOfEra)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MinguoEra eraOf(int eraValue)",
    "returnType" : "MinguoEra",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Era> eras()",
    "returnType" : "List<Era>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ValueRange range(ChronoField field)",
    "returnType" : "ValueRange",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : "public MinguoDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "MinguoDate",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Writes the Chronology using a\n     * <a href=\"{@docRoot}/serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.\n     * @serialData\n     * <pre>\n     *  out.writeByte(1);     // identifies a Chronology\n     *  out.writeUTF(getId());\n     * </pre>\n     *\n     * @return the instance of {@code Ser}, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Defend against malicious streams.\n     *\n     * @param s the stream to read\n     * @throws InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getId()", "public String getCalendarType()", "public MinguoDate date(Era era, int yearOfEra, int month, int dayOfMonth)", "public MinguoDate date(int prolepticYear, int month, int dayOfMonth)", "public MinguoDate dateYearDay(Era era, int yearOfEra, int dayOfYear)", "public MinguoDate dateYearDay(int prolepticYear, int dayOfYear)", "public MinguoDate dateEpochDay(long epochDay)", "public MinguoDate dateNow()", "public MinguoDate dateNow(ZoneId zone)", "public MinguoDate dateNow(Clock clock)", "public MinguoDate date(TemporalAccessor temporal)", "public ChronoLocalDateTime<MinguoDate> localDateTime(TemporalAccessor temporal)", "public ChronoZonedDateTime<MinguoDate> zonedDateTime(TemporalAccessor temporal)", "public ChronoZonedDateTime<MinguoDate> zonedDateTime(Instant instant, ZoneId zone)", "public boolean isLeapYear(long prolepticYear)", "public int prolepticYear(Era era, int yearOfEra)", "public MinguoEra eraOf(int eraValue)", "public List<Era> eras()", "public ValueRange range(ChronoField field)", "public MinguoDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " Object writeReplace()", "private void readObject(ObjectInputStream s) throws InvalidObjectException" ],
  "variableNames" : [ "INSTANCE", "serialVersionUID", "YEARS_DIFFERENCE" ]
}