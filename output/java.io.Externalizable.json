{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/Externalizable.java",
  "packageName" : "java.io",
  "className" : "Externalizable",
  "comment" : "\n * Only the identity of the class of an Externalizable instance is\n * written in the serialization stream and it is the responsibility\n * of the class to save and restore the contents of its instances.\n *\n * The writeExternal and readExternal methods of the Externalizable\n * interface are implemented by a class to give the class complete\n * control over the format and contents of the stream for an object\n * and its supertypes. These methods must explicitly\n * coordinate with the supertype to save its state. These methods supersede\n * customized implementations of writeObject and readObject methods.<br>\n *\n * Object Serialization uses the Serializable and Externalizable\n * interfaces.  Object persistence mechanisms can use them as well.  Each\n * object to be stored is tested for the Externalizable interface. If\n * the object supports Externalizable, the writeExternal method is called. If the\n * object does not support Externalizable and does implement\n * Serializable, the object is saved using\n * ObjectOutputStream. <br> When an Externalizable object is\n * reconstructed, an instance is created using the public no-arg\n * constructor, then the readExternal method called.  Serializable\n * objects are restored by reading them from an ObjectInputStream.<br>\n *\n * An Externalizable instance can designate a substitution object via\n * the writeReplace and readResolve methods documented in the Serializable\n * interface.<br>\n *\n * @author  unascribed\n * @see java.io.ObjectOutputStream\n * @see java.io.ObjectInputStream\n * @see java.io.ObjectOutput\n * @see java.io.ObjectInput\n * @see java.io.Serializable\n * @since   1.1\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void writeExternal(ObjectOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * The object implements the writeExternal method to save its contents\n     * by calling the methods of DataOutput for its primitive values or\n     * calling the writeObject method of ObjectOutput for objects, strings,\n     * and arrays.\n     *\n     * @serialData Overriding methods should use this tag to describe\n     *             the data layout of this Externalizable object.\n     *             List the sequence of element types and, if possible,\n     *             relate the element to a public/protected field and/or\n     *             method of this Externalizable class.\n     *\n     * @param out the stream to write the object to\n     * @exception IOException Includes any I/O exceptions that may occur\n     ",
    "links" : [ ]
  }, {
    "name" : " void readExternal(ObjectInput in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * The object implements the readExternal method to restore its\n     * contents by calling the methods of DataInput for primitive\n     * types and readObject for objects, strings and arrays.  The\n     * readExternal method must read the values in the same sequence\n     * and with the same types as were written by writeExternal.\n     *\n     * @param in the stream to read data from in order to restore the object\n     * @exception IOException if I/O errors occur\n     * @exception ClassNotFoundException If the class for an object being\n     *              restored cannot be found.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void writeExternal(ObjectOutput out) throws IOException", " void readExternal(ObjectInput in) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ ]
}