{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/Level.java",
  "packageName" : "java.util.logging",
  "className" : "Level",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "defaultBundle",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * @serial  The non-localized name of the level.\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "int",
    "comment" : "\n     * @serial  The integer value of the level.\n     ",
    "links" : [ ]
  }, {
    "name" : "resourceBundleName",
    "type" : "String",
    "comment" : "\n     * @serial The resource bundle name to be used in localizing the level name.\n     ",
    "links" : [ ]
  }, {
    "name" : "localizedLevelName",
    "type" : "String",
    "comment" : " localized level name",
    "links" : [ ]
  }, {
    "name" : "cachedLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFF",
    "type" : "Level",
    "comment" : "\n     * OFF is a special level that can be used to turn off logging.\n     * This level is initialized to <CODE>Integer.MAX_VALUE</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEVERE",
    "type" : "Level",
    "comment" : "\n     * SEVERE is a message level indicating a serious failure.\n     * <p>\n     * In general SEVERE messages should describe events that are\n     * of considerable importance and which will prevent normal\n     * program execution.   They should be reasonably intelligible\n     * to end users and to system administrators.\n     * This level is initialized to <CODE>1000</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "WARNING",
    "type" : "Level",
    "comment" : "\n     * WARNING is a message level indicating a potential problem.\n     * <p>\n     * In general WARNING messages should describe events that will\n     * be of interest to end users or system managers, or which\n     * indicate potential problems.\n     * This level is initialized to <CODE>900</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "INFO",
    "type" : "Level",
    "comment" : "\n     * INFO is a message level for informational messages.\n     * <p>\n     * Typically INFO messages will be written to the console\n     * or its equivalent.  So the INFO level should only be\n     * used for reasonably significant messages that will\n     * make sense to end users and system administrators.\n     * This level is initialized to <CODE>800</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG",
    "type" : "Level",
    "comment" : "\n     * CONFIG is a message level for static configuration messages.\n     * <p>\n     * CONFIG messages are intended to provide a variety of static\n     * configuration information, to assist in debugging problems\n     * that may be associated with particular configurations.\n     * For example, CONFIG message might include the CPU type,\n     * the graphics depth, the GUI look-and-feel, etc.\n     * This level is initialized to <CODE>700</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINE",
    "type" : "Level",
    "comment" : "\n     * FINE is a message level providing tracing information.\n     * <p>\n     * All of FINE, FINER, and FINEST are intended for relatively\n     * detailed tracing.  The exact meaning of the three levels will\n     * vary between subsystems, but in general, FINEST should be used\n     * for the most voluminous detailed output, FINER for somewhat\n     * less detailed output, and FINE for the  lowest volume (and\n     * most important) messages.\n     * <p>\n     * In general the FINE level should be used for information\n     * that will be broadly interesting to developers who do not have\n     * a specialized interest in the specific subsystem.\n     * <p>\n     * FINE messages might include things like minor (recoverable)\n     * failures.  Issues indicating potential performance problems\n     * are also worth logging as FINE.\n     * This level is initialized to <CODE>500</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINER",
    "type" : "Level",
    "comment" : "\n     * FINER indicates a fairly detailed tracing message.\n     * By default logging calls for entering, returning, or throwing\n     * an exception are traced at this level.\n     * This level is initialized to <CODE>400</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINEST",
    "type" : "Level",
    "comment" : "\n     * FINEST indicates a highly detailed tracing message.\n     * This level is initialized to <CODE>300</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL",
    "type" : "Level",
    "comment" : "\n     * ALL indicates that all messages should be logged.\n     * This level is initialized to <CODE>Integer.MIN_VALUE</CODE>.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getResourceBundleName()",
    "returnType" : "String",
    "comment" : "\n     * Return the level's localization resource bundle name, or\n     * null if no localization bundle is defined.\n     *\n     * @return localization resource bundle name\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Return the non-localized string name of the Level.\n     *\n     * @return non-localized name\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalizedName()",
    "returnType" : "String",
    "comment" : "\n     * Return the localized string name of the Level, for\n     * the current default locale.\n     * <p>\n     * If no localization information is available, the\n     * non-localized name is returned.\n     *\n     * @return localized name\n     ",
    "links" : [ ]
  }, {
    "name" : " final String getLevelName()",
    "returnType" : "String",
    "comment" : " instead of getName() to avoid calling the subclass's version",
    "links" : [ ]
  }, {
    "name" : "private String computeLocalizedLevelName(Locale newLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final String getCachedLocalizedLevelName()",
    "returnType" : "String",
    "comment" : " have it.",
    "links" : [ ]
  }, {
    "name" : " final synchronized String getLocalizedLevelName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Level findLevel(String name)",
    "returnType" : "Level",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this Level.\n     *\n     * @return the non-localized name of the Level, for example \"INFO\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Get the integer value for this level.  This integer value\n     * can be used for efficient ordering comparisons between\n     * Level objects.\n     * @return the integer value for this level.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve()",
    "returnType" : "Object",
    "comment" : " This is a performance optimization.",
    "links" : [ ]
  }, {
    "name" : "public static synchronized Level parse(String name) throws IllegalArgumentException",
    "returnType" : "Level",
    "comment" : "\n     * Parse a level name string into a Level.\n     * <p>\n     * The argument string may consist of either a level name\n     * or an integer value.\n     * <p>\n     * For example:\n     * <ul>\n     * <li>     \"SEVERE\"\n     * <li>     \"1000\"\n     * </ul>\n     *\n     * @param  name   string to be parsed\n     * @throws NullPointerException if the name is null\n     * @throws IllegalArgumentException if the value is not valid.\n     * Valid values are integers between <CODE>Integer.MIN_VALUE</CODE>\n     * and <CODE>Integer.MAX_VALUE</CODE>, and all known level names.\n     * Known names are the levels defined by this class (e.g., <CODE>FINE</CODE>,\n     * <CODE>FINER</CODE>, <CODE>FINEST</CODE>), or created by this class with\n     * appropriate package access, or new levels defined or created\n     * by subclasses.\n     *\n     * @return The parsed value. Passing an integer that corresponds to a known name\n     * (e.g., 700) will return the associated name (e.g., <CODE>CONFIG</CODE>).\n     * Passing an integer that does not (e.g., 1) will return a new level name\n     * initialized to that value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object ox)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two objects for value equality.\n     * @return true if and only if the two objects have the same level value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generate a hashcode.\n     * @return a hashcode based on the level value\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getResourceBundleName()", "public String getName()", "public String getLocalizedName()", " final String getLevelName()", "private String computeLocalizedLevelName(Locale newLocale)", " final String getCachedLocalizedLevelName()", " final synchronized String getLocalizedLevelName()", " static Level findLevel(String name)", "public final String toString()", "public final int intValue()", "private Object readResolve()", "public static synchronized Level parse(String name) throws IllegalArgumentException", "public boolean equals(Object ox)", "public int hashCode()" ],
  "variableNames" : [ "defaultBundle", "name", "value", "resourceBundleName", "localizedLevelName", "cachedLocale", "OFF", "SEVERE", "WARNING", "INFO", "CONFIG", "FINE", "FINER", "FINEST", "ALL", "serialVersionUID" ]
}