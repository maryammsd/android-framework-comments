{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemLiteralResult.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "Attribute",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_attribute",
    "type" : "AVT",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_owner",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param newChild New node to append to the list of this node's \n           * children\n           *\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node cloneNode(boolean deep)",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param deep Flag indicating whether to clone deep \n           * (clone member variables)\n           *\n           * @return Returns a duplicate of this node\n           ",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return null\n           ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return a NodeList containing no nodes. \n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return null\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return null\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return the local part of the qualified name of this node\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return The namespace URI of this node, or null if it is \n           * unspecified\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return null\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return The name of the attribute\n           ",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return The node is an Attr\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue() throws DOMException",
    "returnType" : "String",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return The value of the attribute\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return null\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getParentNode()",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return the containing element node\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return The namespace prefix of this node, or null if it is \n           * unspecified\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return null\n           ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributes()",
    "returnType" : "boolean",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return false\n           ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return false\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param newChild New child node to insert\n           * @param refChild Insert in front of this child\n           *\n           * @return null\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSupported(String feature, String version)",
    "returnType" : "boolean",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @return Returns <code>false</code>\n           * @since DOM Level 2\n           ",
    "links" : [ ]
  }, {
    "name" : "public void normalize()",
    "returnType" : "void",
    "comment" : " @see org.w3c.dom.Node ",
    "links" : [ ]
  }, {
    "name" : "public Node removeChild(Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param oldChild Child to be removed\n           *\n           * @return null\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param newChild Replace existing child with this one\n           * @param oldChild Existing child to be replaced\n           *\n           * @return null\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public void setNodeValue(String nodeValue) throws DOMException",
    "returnType" : "void",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param nodeValue Value to set this node to\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public void setPrefix(String prefix) throws DOMException",
    "returnType" : "void",
    "comment" : "\n           * @see org.w3c.dom.Node\n           *\n           * @param prefix Prefix to set for this node\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n           *\n           * @return The name of this attribute\n           ",
    "links" : [ ]
  }, {
    "name" : "public String getValue()",
    "returnType" : "String",
    "comment" : "\n           *\n           * @return The value of this attribute returned as string\n           ",
    "links" : [ ]
  }, {
    "name" : "public Element getOwnerElement()",
    "returnType" : "Element",
    "comment" : "\n           *\n           * @return The Element node this attribute is attached to \n           * or null if this attribute is not in use\n           ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSpecified()",
    "returnType" : "boolean",
    "comment" : "\n           *\n           * @return true\n           ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n           * @see org.w3c.dom.Attr\n           *\n           * @param value Value to set this node to\n           *\n           * @throws DOMException\n           ",
    "links" : [ ]
  }, {
    "name" : "public TypeInfo getSchemaTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isId()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object setUserData(String key, Object data, UserDataHandler handler)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getUserData(String key)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEqualNode(Node arg)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String lookupNamespaceURI(String specifiedPrefix)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultNamespace(String namespaceURI)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String lookupPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameNode(Node other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTextContent(String textContent) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short compareDocumentPosition(Node other) throws DOMException",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBaseURI()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node appendChild(Node newChild) throws DOMException", "public Node cloneNode(boolean deep)", "public NamedNodeMap getAttributes()", "public NodeList getChildNodes()", "public Node getFirstChild()", "public Node getLastChild()", "public String getLocalName()", "public String getNamespaceURI()", "public Node getNextSibling()", "public String getNodeName()", "public short getNodeType()", "public String getNodeValue() throws DOMException", "public Document getOwnerDocument()", "public Node getParentNode()", "public String getPrefix()", "public Node getPreviousSibling()", "public boolean hasAttributes()", "public boolean hasChildNodes()", "public Node insertBefore(Node newChild, Node refChild) throws DOMException", "public boolean isSupported(String feature, String version)", "public void normalize()", "public Node removeChild(Node oldChild) throws DOMException", "public Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public void setNodeValue(String nodeValue) throws DOMException", "public void setPrefix(String prefix) throws DOMException", "public String getName()", "public String getValue()", "public Element getOwnerElement()", "public boolean getSpecified()", "public void setValue(String value) throws DOMException", "public TypeInfo getSchemaTypeInfo()", "public boolean isId()", "public Object setUserData(String key, Object data, UserDataHandler handler)", "public Object getUserData(String key)", "public Object getFeature(String feature, String version)", "public boolean isEqualNode(Node arg)", "public String lookupNamespaceURI(String specifiedPrefix)", "public boolean isDefaultNamespace(String namespaceURI)", "public String lookupPrefix(String namespaceURI)", "public boolean isSameNode(Node other)", "public void setTextContent(String textContent) throws DOMException", "public String getTextContent() throws DOMException", "public short compareDocumentPosition(Node other) throws DOMException", "public String getBaseURI()" ],
  "variableNames" : [ "m_attribute", "m_owner" ]
}