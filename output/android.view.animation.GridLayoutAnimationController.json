{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/animation/GridLayoutAnimationController.java",
  "packageName" : "android.view.animation",
  "className" : "GridLayoutAnimationController",
  "comment" : "\n * A layout animation controller is used to animated a grid layout's children.\n *\n * While {@link LayoutAnimationController} relies only on the index of the child\n * in the view group to compute the animation delay, this class uses both the\n * X and Y coordinates of the child within a grid.\n *\n * In addition, the animation direction can be controlled. The default direction\n * is <code>DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM</code>. You can\n * also set the animation priority to columns or rows. The default priority is\n * none.\n *\n * Information used to compute the animation delay of each child are stored\n * in an instance of\n * {@link android.view.animation.GridLayoutAnimationController.AnimationParameters},\n * itself stored in the {@link android.view.ViewGroup.LayoutParams} of the view.\n *\n * @see LayoutAnimationController\n * @see android.widget.GridView\n *\n * @attr ref android.R.styleable#GridLayoutAnimation_columnDelay\n * @attr ref android.R.styleable#GridLayoutAnimation_rowDelay\n * @attr ref android.R.styleable#GridLayoutAnimation_direction\n * @attr ref android.R.styleable#GridLayoutAnimation_directionPriority\n ",
  "links" : [ "android.view.ViewGroup.LayoutParams", "android.view.animation.LayoutAnimationController", "android.view.animation.GridLayoutAnimationController.AnimationParameters" ],
  "variables" : [ {
    "name" : "DIRECTION_LEFT_TO_RIGHT",
    "type" : "int",
    "comment" : "\n     * Animates the children starting from the left of the grid to the right.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_RIGHT_TO_LEFT",
    "type" : "int",
    "comment" : "\n     * Animates the children starting from the right of the grid to the left.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_TOP_TO_BOTTOM",
    "type" : "int",
    "comment" : "\n     * Animates the children starting from the top of the grid to the bottom.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_BOTTOM_TO_TOP",
    "type" : "int",
    "comment" : "\n     * Animates the children starting from the bottom of the grid to the top.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_HORIZONTAL_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask used to retrieve the horizontal component of the direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_VERTICAL_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask used to retrieve the vertical component of the direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_NONE",
    "type" : "int",
    "comment" : "\n     * Rows and columns are animated at the same time.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_COLUMN",
    "type" : "int",
    "comment" : "\n     * Columns are animated first.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_ROW",
    "type" : "int",
    "comment" : "\n     * Rows are animated first.\n     ",
    "links" : [ ]
  }, {
    "name" : "mColumnDelay",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRowDelay",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDirection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDirectionPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getColumnDelay()",
    "returnType" : "float",
    "comment" : "\n     * Returns the delay by which the children's animation are offset from one\n     * column to the other. The delay is expressed as a fraction of the\n     * animation duration.\n     *\n     * @return a fraction of the animation duration\n     *\n     * @see #setColumnDelay(float)\n     * @see #getRowDelay()\n     * @see #setRowDelay(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColumnDelay(float columnDelay)",
    "returnType" : "void",
    "comment" : "\n     * Sets the delay, as a fraction of the animation duration, by which the\n     * children's animations are offset from one column to the other.\n     *\n     * @param columnDelay a fraction of the animation duration\n     *\n     * @see #getColumnDelay()\n     * @see #getRowDelay()\n     * @see #setRowDelay(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getRowDelay()",
    "returnType" : "float",
    "comment" : "\n     * Returns the delay by which the children's animation are offset from one\n     * row to the other. The delay is expressed as a fraction of the\n     * animation duration.\n     *\n     * @return a fraction of the animation duration\n     *\n     * @see #setRowDelay(float)\n     * @see #getColumnDelay()\n     * @see #setColumnDelay(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRowDelay(float rowDelay)",
    "returnType" : "void",
    "comment" : "\n     * Sets the delay, as a fraction of the animation duration, by which the\n     * children's animations are offset from one row to the other.\n     *\n     * @param rowDelay a fraction of the animation duration\n     *\n     * @see #getRowDelay()\n     * @see #getColumnDelay()\n     * @see #setColumnDelay(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDirection()",
    "returnType" : "int",
    "comment" : "\n     * Returns the direction of the animation. {@link #DIRECTION_HORIZONTAL_MASK}\n     * and {@link #DIRECTION_VERTICAL_MASK} can be used to retrieve the\n     * horizontal and vertical components of the direction.\n     *\n     * @return the direction of the animation\n     *\n     * @see #setDirection(int)\n     * @see #DIRECTION_BOTTOM_TO_TOP\n     * @see #DIRECTION_TOP_TO_BOTTOM\n     * @see #DIRECTION_LEFT_TO_RIGHT\n     * @see #DIRECTION_RIGHT_TO_LEFT\n     * @see #DIRECTION_HORIZONTAL_MASK\n     * @see #DIRECTION_VERTICAL_MASK\n     ",
    "links" : [ "#DIRECTION_HORIZONTAL_MASK", "#DIRECTION_VERTICAL_MASK" ]
  }, {
    "name" : "public void setDirection(int direction)",
    "returnType" : "void",
    "comment" : "\n     * Sets the direction of the animation. The direction is expressed as an\n     * integer containing a horizontal and vertical component. For instance,\n     * <code>DIRECTION_BOTTOM_TO_TOP | DIRECTION_RIGHT_TO_LEFT</code>.\n     *\n     * @param direction the direction of the animation\n     *\n     * @see #getDirection()\n     * @see #DIRECTION_BOTTOM_TO_TOP\n     * @see #DIRECTION_TOP_TO_BOTTOM\n     * @see #DIRECTION_LEFT_TO_RIGHT\n     * @see #DIRECTION_RIGHT_TO_LEFT\n     * @see #DIRECTION_HORIZONTAL_MASK\n     * @see #DIRECTION_VERTICAL_MASK\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDirectionPriority()",
    "returnType" : "int",
    "comment" : "\n     * Returns the direction priority for the animation. The priority can\n     * be either {@link #PRIORITY_NONE}, {@link #PRIORITY_COLUMN} or\n     * {@link #PRIORITY_ROW}.\n     *\n     * @return the priority of the animation direction\n     *\n     * @see #setDirectionPriority(int)\n     * @see #PRIORITY_COLUMN\n     * @see #PRIORITY_NONE\n     * @see #PRIORITY_ROW\n     ",
    "links" : [ "#PRIORITY_COLUMN", "#PRIORITY_NONE", "#PRIORITY_ROW" ]
  }, {
    "name" : "public void setDirectionPriority(int directionPriority)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the direction priority of the animation. For instance,\n     * {@link #PRIORITY_COLUMN} will give priority to columns: the animation\n     * will first play on the column, then on the rows.Z\n     *\n     * @param directionPriority the direction priority of the animation\n     *\n     * @see #getDirectionPriority()\n     * @see #PRIORITY_COLUMN\n     * @see #PRIORITY_NONE\n     * @see #PRIORITY_ROW\n     ",
    "links" : [ "#PRIORITY_COLUMN" ]
  }, {
    "name" : "public boolean willOverlap()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long getDelayForView(View view)",
    "returnType" : "long",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getTransformedColumnIndex(AnimationParameters params)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getTransformedRowIndex(AnimationParameters params)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public float getColumnDelay()", "public void setColumnDelay(float columnDelay)", "public float getRowDelay()", "public void setRowDelay(float rowDelay)", "public int getDirection()", "public void setDirection(int direction)", "public int getDirectionPriority()", "public void setDirectionPriority(int directionPriority)", "public boolean willOverlap()", "protected long getDelayForView(View view)", "private int getTransformedColumnIndex(AnimationParameters params)", "private int getTransformedRowIndex(AnimationParameters params)" ],
  "variableNames" : [ "DIRECTION_LEFT_TO_RIGHT", "DIRECTION_RIGHT_TO_LEFT", "DIRECTION_TOP_TO_BOTTOM", "DIRECTION_BOTTOM_TO_TOP", "DIRECTION_HORIZONTAL_MASK", "DIRECTION_VERTICAL_MASK", "PRIORITY_NONE", "PRIORITY_COLUMN", "PRIORITY_ROW", "mColumnDelay", "mRowDelay", "mDirection", "mDirectionPriority" ]
}