{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/PrefixResolver.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "PrefixResolver",
  "comment" : "\n * The class that implements this interface can resolve prefixes to\n * namespaces. Examples would include resolving the meaning of a\n * prefix at a particular point in a document, or mapping the prefixes\n * used in an XPath expression.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String getNamespaceForPrefix(String prefix)",
    "returnType" : "String",
    "comment" : "\n   * Given a namespace, get the corrisponding prefix.  This assumes that\n   * the PrefixResolver holds its own namespace context, or is a namespace\n   * context itself.\n   *\n   * @param prefix The prefix to look up, which may be an empty string (\"\") for the default Namespace.\n   *\n   * @return The associated Namespace URI, or null if the prefix\n   *         is undeclared in this context.\n   ",
    "links" : [ ]
  }, {
    "name" : " String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context)",
    "returnType" : "String",
    "comment" : "\n   * Given a namespace, get the corresponding prefix, based on the context node.\n   *\n   * @param prefix The prefix to look up, which may be an empty string (\"\") for the default Namespace.\n   * @param context The node context from which to look up the URI.\n   *\n   * @return The associated Namespace URI as a string, or null if the prefix\n   *         is undeclared in this context.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseIdentifier()",
    "returnType" : "String",
    "comment" : "\n   * Return the base identifier.\n   *\n   * @return The base identifier from where relative URIs should be absolutized, or null \n   * if the base ID is unknown.\n   * <p>\n   * CAVEAT: Note that the base URI in an XML document may vary with where\n   * you are in the document, if part of the doc's contents were brought in\n   * via an external entity reference or if mechanisms such as xml:base have\n   * been used. Unless this PrefixResolver is bound to a specific portion of\n   * the document, or has been kept up to date via some other mechanism, it\n   * may not accurately reflect that context information.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean handlesNullPrefixes()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getNamespaceForPrefix(String prefix)", " String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context)", "public String getBaseIdentifier()", "public boolean handlesNullPrefixes()" ],
  "variableNames" : [ ]
}