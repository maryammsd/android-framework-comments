{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/HwParcel.java",
  "packageName" : "android.os",
  "className" : "HwParcel",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Success return error for a transaction. Written to parcels\n     * using writeStatus.\n     ",
    "links" : [ ]
  }, {
    "name" : "sNativeRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final native void writeInterfaceToken(String interfaceName)",
    "returnType" : "void",
    "comment" : "\n     * Writes an interface token into the parcel used to verify that\n     * a transaction has made it to the right type of interface.\n     *\n     * @param interfaceName fully qualified name of interface message\n     *     is being sent to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeBool(boolean val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a boolean value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeInt8(byte val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeInt16(short val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a short value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeInt32(int val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a int value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeInt64(long val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a long value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeFloat(float val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a float value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeDouble(double val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a double value to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeString(String val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a String value to the end of the parcel.\n     *\n     * Note, this will be converted to UTF-8 when it is written.\n     *\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeNativeHandle(@Nullable NativeHandle val)",
    "returnType" : "void",
    "comment" : "\n     * Writes a native handle (without duplicating the underlying\n     * file descriptors) to the end of the parcel.\n     *\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeBoolVector(boolean[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of boolean values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeInt8Vector(byte[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of byte values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeInt16Vector(short[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of short values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeInt32Vector(int[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of int values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeInt64Vector(long[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of long values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeFloatVector(float[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of float values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeDoubleVector(double[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of double values to the end of the parcel.\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeStringVector(String[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of String values to the end of the parcel.\n     *\n     * Note, these will be converted to UTF-8 as they are written.\n     *\n     * @param val to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native void writeNativeHandleVector(NativeHandle[] val)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of native handles to the end of the parcel.\n     *\n     * Individual elements may be null but not the whole array.\n     *\n     * @param val array of {@link NativeHandle} objects to write\n     ",
    "links" : [ "android.os.NativeHandle" ]
  }, {
    "name" : "public final void writeBoolVector(ArrayList<Boolean> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Booleans to val.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeInt8Vector(ArrayList<Byte> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Booleans to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeInt16Vector(ArrayList<Short> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Shorts to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeInt32Vector(ArrayList<Integer> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Integers to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeInt64Vector(ArrayList<Long> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Longs to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeFloatVector(ArrayList<Float> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Floats to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeDoubleVector(ArrayList<Double> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Doubles to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeStringVector(ArrayList<String> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of Strings to the end of the parcel.\n     * @param val list to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeNativeHandleVector(@NonNull ArrayList<NativeHandle> val)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to write a list of native handles to the end of the parcel.\n     * @param val list of {@link NativeHandle} objects to write\n     ",
    "links" : [ "android.os.NativeHandle" ]
  }, {
    "name" : "public final native void writeStrongBinder(IHwBinder binder)",
    "returnType" : "void",
    "comment" : "\n     * Write a hwbinder object to the end of the parcel.\n     * @param binder value to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeHidlMemory(@NonNull HidlMemory memory)",
    "returnType" : "void",
    "comment" : "\n     * Write a HidlMemory object (without duplicating the underlying file descriptors) to the end\n     * of the parcel.\n     *\n     * @param memory value to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void enforceInterface(String interfaceName)",
    "returnType" : "void",
    "comment" : "\n     * Checks to make sure that the interface name matches the name written by the parcel\n     * sender by writeInterfaceToken\n     *\n     * @throws SecurityException interface doesn't match\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native boolean readBool()",
    "returnType" : "boolean",
    "comment" : "\n     * Reads a boolean value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native byte readInt8()",
    "returnType" : "byte",
    "comment" : "\n     * Reads a byte value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native short readInt16()",
    "returnType" : "short",
    "comment" : "\n     * Reads a short value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native int readInt32()",
    "returnType" : "int",
    "comment" : "\n     * Reads a int value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native long readInt64()",
    "returnType" : "long",
    "comment" : "\n     * Reads a long value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native float readFloat()",
    "returnType" : "float",
    "comment" : "\n     * Reads a float value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native double readDouble()",
    "returnType" : "double",
    "comment" : "\n     * Reads a double value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native String readString()",
    "returnType" : "String",
    "comment" : "\n     * Reads a String value from the current location in the parcel.\n     * @return value parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native NativeHandle readNativeHandle()",
    "returnType" : "NativeHandle",
    "comment" : "\n     * Reads a native handle (without duplicating the underlying file\n     * descriptors) from the parcel. These file descriptors will only\n     * be open for the duration that the binder window is open. If they\n     * are needed further, you must call {@link NativeHandle#dup()}.\n     *\n     * @return a {@link NativeHandle} instance parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ "android.os.NativeHandle", "android.os.NativeHandle#dup()" ]
  }, {
    "name" : "public final native NativeHandle readEmbeddedNativeHandle(long parentHandle, long offset)",
    "returnType" : "NativeHandle",
    "comment" : "\n     * Reads an embedded native handle (without duplicating the underlying\n     * file descriptors) from the parcel. These file descriptors will only\n     * be open for the duration that the binder window is open. If they\n     * are needed further, you must call {@link NativeHandle#dup()}. You\n     * do not need to call close on the NativeHandle returned from this.\n     *\n     * @param parentHandle handle from which to read the embedded object\n     * @param offset offset into parent\n     * @return a {@link NativeHandle} instance parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ "android.os.NativeHandle", "android.os.NativeHandle#dup()" ]
  }, {
    "name" : "private final native boolean[] readBoolVectorAsArray()",
    "returnType" : "boolean[]",
    "comment" : "\n     * Reads an array of boolean values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native byte[] readInt8VectorAsArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Reads an array of byte values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native short[] readInt16VectorAsArray()",
    "returnType" : "short[]",
    "comment" : "\n     * Reads an array of short values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native int[] readInt32VectorAsArray()",
    "returnType" : "int[]",
    "comment" : "\n     * Reads an array of int values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native long[] readInt64VectorAsArray()",
    "returnType" : "long[]",
    "comment" : "\n     * Reads an array of long values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native float[] readFloatVectorAsArray()",
    "returnType" : "float[]",
    "comment" : "\n     * Reads an array of float values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native double[] readDoubleVectorAsArray()",
    "returnType" : "double[]",
    "comment" : "\n     * Reads an array of double values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native String[] readStringVectorAsArray()",
    "returnType" : "String[]",
    "comment" : "\n     * Reads an array of String values from the parcel.\n     * @return array of parsed values\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native NativeHandle[] readNativeHandleAsArray()",
    "returnType" : "NativeHandle[]",
    "comment" : "\n     * Reads an array of native handles from the parcel.\n     * @return array of {@link NativeHandle} objects\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ "android.os.NativeHandle" ]
  }, {
    "name" : "public final ArrayList<Boolean> readBoolVector()",
    "returnType" : "ArrayList<Boolean>",
    "comment" : "\n     * Convenience method to read a Boolean vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<Byte> readInt8Vector()",
    "returnType" : "ArrayList<Byte>",
    "comment" : "\n     * Convenience method to read a Byte vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<Short> readInt16Vector()",
    "returnType" : "ArrayList<Short>",
    "comment" : "\n     * Convenience method to read a Short vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<Integer> readInt32Vector()",
    "returnType" : "ArrayList<Integer>",
    "comment" : "\n     * Convenience method to read a Integer vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<Long> readInt64Vector()",
    "returnType" : "ArrayList<Long>",
    "comment" : "\n     * Convenience method to read a Long vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<Float> readFloatVector()",
    "returnType" : "ArrayList<Float>",
    "comment" : "\n     * Convenience method to read a Float vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<Double> readDoubleVector()",
    "returnType" : "ArrayList<Double>",
    "comment" : "\n     * Convenience method to read a Double vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<String> readStringVector()",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Convenience method to read a String vector as an ArrayList.\n     * @return array of parsed values.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<NativeHandle> readNativeHandleVector()",
    "returnType" : "ArrayList<NativeHandle>",
    "comment" : "\n     * Convenience method to read a vector of native handles as an ArrayList.\n     * @return array of {@link NativeHandle} objects.\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ "android.os.NativeHandle" ]
  }, {
    "name" : "public final native IHwBinder readStrongBinder()",
    "returnType" : "IHwBinder",
    "comment" : "\n     * Reads a strong binder value from the parcel.\n     * @return binder object read from parcel or null if no binder can be read\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native HidlMemory readHidlMemory()",
    "returnType" : "HidlMemory",
    "comment" : "\n     * Reads a HidlMemory value (without duplicating the underlying file\n     * descriptors) from the parcel. These file descriptors will only\n     * be open for the duration that the binder window is open. If they\n     * are needed further, you must call {@link HidlMemory#dup()}, which makes you also\n     * responsible for calling {@link HidlMemory#close()}.\n     *\n     * @return HidlMemory object read from parcel.\n     * @throws IllegalArgumentException if the parcel has no more data or is otherwise corrupt.\n     ",
    "links" : [ "android.os.HidlMemory#dup()", "android.os.HidlMemory#close()" ]
  }, {
    "name" : "public final native HidlMemory readEmbeddedHidlMemory(long fieldHandle, long parentHandle, long offset)",
    "returnType" : "HidlMemory",
    "comment" : "\n     * Reads an embedded HidlMemory (without duplicating the underlying\n     * file descriptors) from the parcel. These file descriptors will only\n     * be open for the duration that the binder window is open. If they\n     * are needed further, you must call {@link HidlMemory#dup()}. You\n     * do not need to call close on the HidlMemory returned from this.\n     *\n     * @param fieldHandle  handle of the field, obtained from the {@link HwBlob}.\n     * @param parentHandle parentHandle from which to read the embedded object\n     * @param offset       offset into parent\n     * @return a {@link HidlMemory} instance parsed from the parcel\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ "android.os.HwBlob", "android.os.HidlMemory#dup()", "android.os.HidlMemory" ]
  }, {
    "name" : "public final native HwBlob readBuffer(long expectedSize)",
    "returnType" : "HwBlob",
    "comment" : "\n     * Read opaque segment of data as a blob.\n     * @return blob of size expectedSize\n     * @throws IllegalArgumentException if the parcel has no more data\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native HwBlob readEmbeddedBuffer(long expectedSize, long parentHandle, long offset, boolean nullable)",
    "returnType" : "HwBlob",
    "comment" : "\n     * Read a buffer written using scatter gather.\n     *\n     * @param expectedSize size that buffer should be\n     * @param parentHandle handle from which to read the embedded buffer\n     * @param offset offset into parent\n     * @param nullable whether or not to allow for a null return\n     * @return blob of data with size expectedSize\n     * @throws NoSuchElementException if an embedded buffer is not available to read\n     * @throws IllegalArgumentException if expectedSize < 0\n     * @throws NullPointerException if the transaction specified the blob to be null\n     *    but nullable is false\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeBuffer(HwBlob blob)",
    "returnType" : "void",
    "comment" : "\n     * Write a buffer into the transaction.\n     * @param blob blob to write into the parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void writeStatus(int status)",
    "returnType" : "void",
    "comment" : "\n     * Write a status value into the blob.\n     * @param status value to write\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void verifySuccess()",
    "returnType" : "void",
    "comment" : "\n     * @throws IllegalArgumentException if a success vaue cannot be read\n     * @throws RemoteException if success value indicates a transaction error\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void releaseTemporaryStorage()",
    "returnType" : "void",
    "comment" : "\n     * Should be called to reduce memory pressure when this object no longer needs\n     * to be written to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void release()",
    "returnType" : "void",
    "comment" : "\n     * Should be called when object is no longer needed to reduce possible memory\n     * pressure if the Java GC does not get to this object in time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void send()",
    "returnType" : "void",
    "comment" : "\n     * Sends the parcel to the specified destination.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final native long native_init()",
    "returnType" : "long",
    "comment" : " Returns address of the \"freeFunction\".",
    "links" : [ ]
  }, {
    "name" : "private final native void native_setup(boolean allocate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final native void writeInterfaceToken(String interfaceName)", "public final native void writeBool(boolean val)", "public final native void writeInt8(byte val)", "public final native void writeInt16(short val)", "public final native void writeInt32(int val)", "public final native void writeInt64(long val)", "public final native void writeFloat(float val)", "public final native void writeDouble(double val)", "public final native void writeString(String val)", "public final native void writeNativeHandle(@Nullable NativeHandle val)", "private final native void writeBoolVector(boolean[] val)", "private final native void writeInt8Vector(byte[] val)", "private final native void writeInt16Vector(short[] val)", "private final native void writeInt32Vector(int[] val)", "private final native void writeInt64Vector(long[] val)", "private final native void writeFloatVector(float[] val)", "private final native void writeDoubleVector(double[] val)", "private final native void writeStringVector(String[] val)", "private final native void writeNativeHandleVector(NativeHandle[] val)", "public final void writeBoolVector(ArrayList<Boolean> val)", "public final void writeInt8Vector(ArrayList<Byte> val)", "public final void writeInt16Vector(ArrayList<Short> val)", "public final void writeInt32Vector(ArrayList<Integer> val)", "public final void writeInt64Vector(ArrayList<Long> val)", "public final void writeFloatVector(ArrayList<Float> val)", "public final void writeDoubleVector(ArrayList<Double> val)", "public final void writeStringVector(ArrayList<String> val)", "public final void writeNativeHandleVector(@NonNull ArrayList<NativeHandle> val)", "public final native void writeStrongBinder(IHwBinder binder)", "public final native void writeHidlMemory(@NonNull HidlMemory memory)", "public final native void enforceInterface(String interfaceName)", "public final native boolean readBool()", "public final native byte readInt8()", "public final native short readInt16()", "public final native int readInt32()", "public final native long readInt64()", "public final native float readFloat()", "public final native double readDouble()", "public final native String readString()", "public final native NativeHandle readNativeHandle()", "public final native NativeHandle readEmbeddedNativeHandle(long parentHandle, long offset)", "private final native boolean[] readBoolVectorAsArray()", "private final native byte[] readInt8VectorAsArray()", "private final native short[] readInt16VectorAsArray()", "private final native int[] readInt32VectorAsArray()", "private final native long[] readInt64VectorAsArray()", "private final native float[] readFloatVectorAsArray()", "private final native double[] readDoubleVectorAsArray()", "private final native String[] readStringVectorAsArray()", "private final native NativeHandle[] readNativeHandleAsArray()", "public final ArrayList<Boolean> readBoolVector()", "public final ArrayList<Byte> readInt8Vector()", "public final ArrayList<Short> readInt16Vector()", "public final ArrayList<Integer> readInt32Vector()", "public final ArrayList<Long> readInt64Vector()", "public final ArrayList<Float> readFloatVector()", "public final ArrayList<Double> readDoubleVector()", "public final ArrayList<String> readStringVector()", "public final ArrayList<NativeHandle> readNativeHandleVector()", "public final native IHwBinder readStrongBinder()", "public final native HidlMemory readHidlMemory()", "public final native HidlMemory readEmbeddedHidlMemory(long fieldHandle, long parentHandle, long offset)", "public final native HwBlob readBuffer(long expectedSize)", "public final native HwBlob readEmbeddedBuffer(long expectedSize, long parentHandle, long offset, boolean nullable)", "public final native void writeBuffer(HwBlob blob)", "public final native void writeStatus(int status)", "public final native void verifySuccess()", "public final native void releaseTemporaryStorage()", "public final native void release()", "public final native void send()", "private static final native long native_init()", "private final native void native_setup(boolean allocate)" ],
  "variableNames" : [ "TAG", "STATUS_SUCCESS", "sNativeRegistry", "mNativeContext" ]
}