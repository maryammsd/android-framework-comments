{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/RecommendedStreamConfigurationMap.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "RecommendedStreamConfigurationMap",
  "comment" : "\n * Immutable class to store the recommended stream configurations to set up\n * {@link android.view.Surface Surfaces} for creating a\n * {@link android.hardware.camera2.CameraCaptureSession capture session} with\n * {@link android.hardware.camera2.CameraDevice#createCaptureSession(SessionConfiguration)}.\n *\n * <p>The recommended list does not replace or deprecate the exhaustive complete list found in\n * {@link StreamConfigurationMap}. It is a suggestion about available power and performance\n * efficient stream configurations for a specific use case. Per definition it is only a subset\n * of {@link StreamConfigurationMap} and can be considered by developers for optimization\n * purposes.</p>\n *\n * <p>This also duplicates the minimum frame durations and stall durations from the\n * {@link StreamConfigurationMap} for each format/size combination that can be used to calculate\n * effective frame rate when submitting multiple captures.\n * </p>\n *\n * <p>An instance of this object is available by invoking\n * {@link CameraCharacteristics#getRecommendedStreamConfigurationMap} and passing a respective\n * usecase id. For more information about supported use case constants see\n * {@link #USECASE_PREVIEW}.</p>\n *\n * <pre><code>{@code\n * CameraCharacteristics characteristics = cameraManager.getCameraCharacteristics(cameraId);\n * RecommendedStreamConfigurationMap configs = characteristics.getRecommendedStreamConfigurationMap(\n *         RecommendedStreamConfigurationMap.USECASE_PREVIEW);\n * }</code></pre>\n *\n * @see CameraCharacteristics#getRecommendedStreamConfigurationMap\n * @see CameraDevice#createCaptureSession(SessionConfiguration)\n ",
  "links" : [ "android.view.Surface", "android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap", "android.hardware.camera2.CameraCaptureSession", "android.hardware.camera2.params.StreamConfigurationMap", "#USECASE_PREVIEW", "android.hardware.camera2.CameraDevice#createCaptureSession(SessionConfiguration)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsecase",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsPrivate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecommendedMap",
    "type" : "StreamConfigurationMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_USECASE_COUNT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "USECASE_PREVIEW",
    "type" : "int",
    "comment" : "\n     * The recommended stream configuration map for use case preview must contain a subset of\n     * efficient, non-stalling configurations that must include both\n     * {@link android.graphics.ImageFormat#PRIVATE} and\n     * {@link android.graphics.ImageFormat#YUV_420_888} output formats. Even if available for the\n     * camera device, high speed or input configurations will be absent.\n     ",
    "links" : [ "android.graphics.ImageFormat#PRIVATE", "android.graphics.ImageFormat#YUV_420_888" ]
  }, {
    "name" : "USECASE_RECORD",
    "type" : "int",
    "comment" : "\n     * The recommended stream configuration map for recording must contain a subset of efficient\n     * video configurations that include {@link android.graphics.ImageFormat#PRIVATE}\n     * output format for at least all supported {@link android.media.CamcorderProfile profiles}.\n     * High speed configurations if supported will be available as well. Even if available for the\n     * camera device, input configurations will be absent.\n     ",
    "links" : [ "android.graphics.ImageFormat#PRIVATE", "android.media.CamcorderProfile" ]
  }, {
    "name" : "USECASE_VIDEO_SNAPSHOT",
    "type" : "int",
    "comment" : "\n     * The recommended stream configuration map for use case video snapshot must only contain a\n     * subset of efficient liveshot configurations that include\n     * {@link android.graphics.ImageFormat#JPEG} output format. The sizes will match at least\n     * the maximum resolution of usecase record and will not cause any preview glitches. Even\n     * if available for the camera device, high speed or input configurations will be absent.\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG" ]
  }, {
    "name" : "USECASE_SNAPSHOT",
    "type" : "int",
    "comment" : "\n     * The recommended stream configuration map for use case snapshot must contain a subset of\n     * efficient still capture configurations that must include\n     * {@link android.graphics.ImageFormat#JPEG} output format and at least one configuration with\n     * size approximately equal to the sensor pixel array size\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE}.\n     * Even if available for the camera device, high speed or input configurations will be absent.\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "USECASE_ZSL",
    "type" : "int",
    "comment" : "\n     * In case the device supports\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING} and/or\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING},\n     * the recommended stream configuration map for use case ZSL must contain a subset of efficient\n     * configurations that include the suggested input and output format mappings. Even if\n     * available for the camera device, high speed configurations will be absent.\n     ",
    "links" : [ "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING" ]
  }, {
    "name" : "USECASE_RAW",
    "type" : "int",
    "comment" : "\n     * In case the device supports\n     * {@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW}, the\n     * recommended stream configuration map for use case RAW must contain a subset of efficient\n     * configurations that include the {@link android.graphics.ImageFormat#RAW_SENSOR} and other\n     * RAW output formats. Even if available for the camera device, high speed and input\n     * configurations will be absent.\n     ",
    "links" : [ "android.graphics.ImageFormat#RAW_SENSOR", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW" ]
  }, {
    "name" : "USECASE_LOW_LATENCY_SNAPSHOT",
    "type" : "int",
    "comment" : "\n     * The recommended stream configuration map for use case low latency snapshot must contain\n     * subset of configurations with end-to-end latency that does not exceed 200 ms. under standard\n     * operating conditions (reasonable light levels, not loaded system). The expected output format\n     * will be primarily {@link android.graphics.ImageFormat#JPEG} however other image formats can\n     * be present as well.  Even if available for the camera device, high speed and input\n     * configurations will be absent. This suggested configuration map may be absent on some devices\n     * that can not support any low latency requests.\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG" ]
  }, {
    "name" : "USECASE_10BIT_OUTPUT",
    "type" : "int",
    "comment" : "\n     * If supported, the recommended 10-bit output stream configurations must include\n     * a subset of the advertised {@link android.graphics.ImageFormat#YCBCR_P010} and\n     * {@link android.graphics.ImageFormat#PRIVATE} outputs that are optimized for power\n     * and performance when registered along with a supported 10-bit dynamic range profile.\n     * {@see android.hardware.camera2.params.OutputConfiguration#setDynamicRangeProfile} for\n     * details.\n     ",
    "links" : [ "android.graphics.ImageFormat#PRIVATE", "android.graphics.ImageFormat#YCBCR_P010" ]
  }, {
    "name" : "USECASE_VENDOR_START",
    "type" : "int",
    "comment" : "\n     * Device specific use cases.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getRecommendedUseCase()",
    "returnType" : "int",
    "comment" : "\n     * Get the use case value for the recommended stream configurations.\n     *\n     * @return Use case id.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Set<Integer> getUnmodifiableIntegerSet(int[] intArray)",
    "returnType" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> getOutputFormats()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Get the image {@code format} output formats in this stream configuration.\n     *\n     * <p>\n     * For more information refer to {@link StreamConfigurationMap#getOutputFormats}.\n     * </p>\n     *\n     * @return a non-modifiable set of Integer formats\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getOutputFormats" ]
  }, {
    "name" : "public Set<Integer> getValidOutputFormatsForInput(@Format int inputFormat)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Get the image {@code format} output formats for a reprocessing input format.\n     *\n     * <p>\n     * For more information refer to {@link StreamConfigurationMap#getValidOutputFormatsForInput}.\n     * </p>\n     *\n     * @return a non-modifiable set of Integer formats\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getValidOutputFormatsForInput" ]
  }, {
    "name" : "public Set<Integer> getInputFormats()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Get the image {@code format} input formats in this stream configuration.\n     *\n     * <p>All image formats returned by this function will be defined in either {@link ImageFormat}\n     * or in {@link PixelFormat} (and there is no possibility of collision).</p>\n     *\n     * @return a non-modifiable set of Integer formats\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.graphics.PixelFormat" ]
  }, {
    "name" : "private Set<Size> getUnmodifiableSizeSet(Size[] sizeArray)",
    "returnType" : "Set<Size>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Size> getInputSizes(@Format int format)",
    "returnType" : "Set<Size>",
    "comment" : "\n     * Get the supported input sizes for this input format.\n     *\n     * <p>The format must have come from {@link #getInputFormats}; otherwise\n     * {@code null} is returned.</p>\n     *\n     * @param format a format from {@link #getInputFormats}\n     * @return a non-modifiable set of sizes, or {@code null} if the format was not available.\n     ",
    "links" : [ "#getInputFormats" ]
  }, {
    "name" : "public boolean isOutputSupportedFor(@Format int format)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether or not output surfaces with a particular user-defined format can be passed\n     * {@link CameraDevice#createCaptureSession(SessionConfiguration) createCaptureSession}.\n     *\n     * <p>\n     * For further information refer to {@link StreamConfigurationMap#isOutputSupportedFor}.\n     * </p>\n     *\n     *\n     * @param format an image format from either {@link ImageFormat} or {@link PixelFormat}\n     * @return\n     *          {@code true} if using a {@code surface} with this {@code format} will be\n     *          supported with {@link CameraDevice#createCaptureSession(SessionConfiguration)}\n     *\n     * @throws IllegalArgumentException\n     *          if the image format was not a defined named constant\n     *          from either {@link ImageFormat} or {@link PixelFormat}\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#isOutputSupportedFor", "android.graphics.ImageFormat", "android.hardware.camera2.CameraDevice#createCaptureSession(SessionConfiguration)", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Set<Size> getOutputSizes(@Format int format)",
    "returnType" : "Set<Size>",
    "comment" : "\n     * Get a list of sizes compatible with the requested image {@code format}.\n     *\n     * <p>\n     * For more information refer to {@link StreamConfigurationMap#getOutputSizes}.\n     * </p>\n     *\n     *\n     * @param format an image format from {@link ImageFormat} or {@link PixelFormat}\n     * @return  a non-modifiable set of supported sizes,\n     *          or {@code null} if the {@code format} is not a supported output\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Set<Size> getHighSpeedVideoSizes()",
    "returnType" : "Set<Size>",
    "comment" : "\n     * Get a list of supported high speed video recording sizes.\n     * <p>\n     * For more information refer to {@link StreamConfigurationMap#getHighSpeedVideoSizes}.\n     * </p>\n     *\n     * @return a non-modifiable set of supported high speed video recording sizes\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoSizes" ]
  }, {
    "name" : "private Set<Range<Integer>> getUnmodifiableRangeSet(Range<Integer>[] rangeArray)",
    "returnType" : "Set<Range<Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Range<Integer>> getHighSpeedVideoFpsRangesFor(@NonNull Size size)",
    "returnType" : "Set<Range<Integer>>",
    "comment" : "\n     * Get the frame per second ranges (fpsMin, fpsMax) for input high speed video size.\n     *\n     * <p>\n     * For further information refer to\n     * {@link StreamConfigurationMap#getHighSpeedVideoFpsRangesFor}.\n     * </p>\n     * @param size one of the sizes returned by {@link #getHighSpeedVideoSizes()}\n     * @return a non-modifiable set of supported high speed video recording FPS ranges The upper\n     *         bound of returned ranges is guaranteed to be greater than or equal to 120.\n     * @throws IllegalArgumentException if input size does not exist in the return value of\n     *             getHighSpeedVideoSizes\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoFpsRangesFor", "#getHighSpeedVideoSizes()" ]
  }, {
    "name" : "public Set<Range<Integer>> getHighSpeedVideoFpsRanges()",
    "returnType" : "Set<Range<Integer>>",
    "comment" : "\n     * Get a list of supported high speed video recording FPS ranges.\n     * <p>\n     * For further information refer to {@link StreamConfigurationMap#getHighSpeedVideoFpsRanges}.\n     * </p>\n     * @return a non-modifiable set of supported high speed video recording FPS ranges The upper\n     *         bound of returned ranges is guaranteed to be larger or equal to 120.\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoFpsRanges" ]
  }, {
    "name" : "public Set<Size> getHighSpeedVideoSizesFor(@NonNull Range<Integer> fpsRange)",
    "returnType" : "Set<Size>",
    "comment" : "\n     * Get the supported video sizes for an input high speed FPS range.\n     *\n     * <p>\n     * For further information refer to {@link StreamConfigurationMap#getHighSpeedVideoSizesFor}.\n     * </p>\n     *\n     * @param fpsRange one of the FPS ranges returned by {@link #getHighSpeedVideoFpsRanges()}\n     * @return A non-modifiable set of video sizes to create high speed capture sessions for high\n     *         speed streaming use cases.\n     *\n     * @throws IllegalArgumentException if input FPS range does not exist in the return value of\n     *         getHighSpeedVideoFpsRanges\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoSizesFor", "#getHighSpeedVideoFpsRanges()" ]
  }, {
    "name" : "public Set<Size> getHighResolutionOutputSizes(@Format int format)",
    "returnType" : "Set<Size>",
    "comment" : "\n     * Get a list of supported high resolution sizes, which cannot operate at full BURST_CAPTURE\n     * rate.\n     *\n     * <p>\n     * For further information refer to {@link StreamConfigurationMap#getHighResolutionOutputSizes}.\n     * </p>\n     *\n     * @return a non-modifiable set of supported slower high-resolution sizes, or {@code null} if\n     *         the BURST_CAPTURE capability is not supported\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getHighResolutionOutputSizes" ]
  }, {
    "name" : "public long getOutputMinFrameDuration(@Format int format, @NonNull Size size)",
    "returnType" : "long",
    "comment" : "\n     * Get the minimum\n     * {@link android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION frame duration}\n     * for the format/size combination (in nanoseconds).\n     *\n     * <p>\n     * For further information refer to {@link StreamConfigurationMap#getOutputMinFrameDuration}.\n     * </p>\n     *\n     * @param format an image format from {@link ImageFormat} or {@link PixelFormat}\n     * @param size an output-compatible size\n     * @return a minimum frame duration {@code >} 0 in nanoseconds, or\n     *          0 if the minimum frame duration is not available.\n     *\n     * @throws IllegalArgumentException if {@code format} or {@code size} was not supported\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION", "android.graphics.ImageFormat", "android.hardware.camera2.params.StreamConfigurationMap#getOutputMinFrameDuration", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public long getOutputStallDuration(@Format int format, @NonNull Size size)",
    "returnType" : "long",
    "comment" : "\n     * Get the stall duration for the format/size combination (in nanoseconds).\n     *\n     * <p>\n     * For further information refer to {@link StreamConfigurationMap#getOutputStallDuration}.\n     * </p>\n     *\n     * @param format an image format from {@link ImageFormat} or {@link PixelFormat}\n     * @param size an output-compatible size\n     * @return a stall duration {@code >=} 0 in nanoseconds\n     *\n     * @throws IllegalArgumentException if {@code format} or {@code size} was not supported\n     ",
    "links" : [ "android.graphics.ImageFormat", "android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Set<Size> getOutputSizes(@NonNull Class<T> klass)",
    "returnType" : "Set<Size>",
    "comment" : "\n     * Get a list of sizes compatible with {@code klass} to use as an output.\n     *\n     * <p>For further information refer to {@link StreamConfigurationMap#getOutputSizes(Class)}.\n     * </p>\n     *\n     * @param klass\n     *          a {@link Class} object reference\n     * @return\n     *          a non-modifiable set of supported sizes for {@link ImageFormat#PRIVATE} format,\n     *          or {@code null} if the {@code klass} is not a supported output.\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(Class)", "android.graphics.ImageFormat#PRIVATE", "Class" ]
  }, {
    "name" : "public long getOutputMinFrameDuration(@NonNull final Class<T> klass, @NonNull final Size size)",
    "returnType" : "long",
    "comment" : "\n     * Get the minimum {@link CaptureRequest#SENSOR_FRAME_DURATION frame duration}\n     * for the class/size combination (in nanoseconds).\n     *\n     * <p>For more information refer to\n     * {@link StreamConfigurationMap#getOutputMinFrameDuration(Class, Size)}.</p>\n     *\n     * @param klass\n     *          a class which has a non-empty array returned by {@link #getOutputSizes(Class)}\n     * @param size an output-compatible size\n     * @return a minimum frame duration {@code >} 0 in nanoseconds, or\n     *          0 if the minimum frame duration is not available.\n     *\n     * @throws IllegalArgumentException if {@code klass} or {@code size} was not supported\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION", "android.hardware.camera2.params.StreamConfigurationMap#getOutputMinFrameDuration(Class", "#getOutputSizes(Class)" ]
  }, {
    "name" : "public long getOutputStallDuration(@NonNull final Class<T> klass, @NonNull final Size size)",
    "returnType" : "long",
    "comment" : "\n     * Get the stall duration for the class/size combination (in nanoseconds).\n     *\n     * <p>For more information refer to\n     * {@link StreamConfigurationMap#getOutputStallDuration(Class, Size)}.\n     *\n     * @param klass\n     *          a class which has a non-empty array returned by {@link #getOutputSizes(Class)}.\n     * @param size an output-compatible size\n     * @return a minimum frame duration {@code >} 0 in nanoseconds, or 0 if the stall duration is\n     *         not available.\n     *\n     * @throws IllegalArgumentException if {@code klass} or {@code size} was not supported\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration(Class", "#getOutputSizes(Class)" ]
  }, {
    "name" : "public boolean isOutputSupportedFor(@NonNull Surface surface)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether or not the {@code surface} in its current\n     * state is suitable to be included in a {@link\n     * CameraDevice#createCaptureSession(SessionConfiguration) capture\n     * session} as an output.\n     *\n     * <p>For more information refer to {@link StreamConfigurationMap#isOutputSupportedFor}.\n     * </p>\n     *\n     * @param surface a {@link Surface} object reference\n     * @return {@code true} if this is supported, {@code false} otherwise\n     *\n     * @throws IllegalArgumentException if the Surface endpoint is no longer valid\n     *\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#isOutputSupportedFor", "android.view.Surface", "android.hardware.camera2.CameraDevice#createCaptureSession(SessionConfiguration)" ]
  } ],
  "methodNames" : [ "public int getRecommendedUseCase()", "private Set<Integer> getUnmodifiableIntegerSet(int[] intArray)", "public Set<Integer> getOutputFormats()", "public Set<Integer> getValidOutputFormatsForInput(@Format int inputFormat)", "public Set<Integer> getInputFormats()", "private Set<Size> getUnmodifiableSizeSet(Size[] sizeArray)", "public Set<Size> getInputSizes(@Format int format)", "public boolean isOutputSupportedFor(@Format int format)", "public Set<Size> getOutputSizes(@Format int format)", "public Set<Size> getHighSpeedVideoSizes()", "private Set<Range<Integer>> getUnmodifiableRangeSet(Range<Integer>[] rangeArray)", "public Set<Range<Integer>> getHighSpeedVideoFpsRangesFor(@NonNull Size size)", "public Set<Range<Integer>> getHighSpeedVideoFpsRanges()", "public Set<Size> getHighSpeedVideoSizesFor(@NonNull Range<Integer> fpsRange)", "public Set<Size> getHighResolutionOutputSizes(@Format int format)", "public long getOutputMinFrameDuration(@Format int format, @NonNull Size size)", "public long getOutputStallDuration(@Format int format, @NonNull Size size)", "public Set<Size> getOutputSizes(@NonNull Class<T> klass)", "public long getOutputMinFrameDuration(@NonNull final Class<T> klass, @NonNull final Size size)", "public long getOutputStallDuration(@NonNull final Class<T> klass, @NonNull final Size size)", "public boolean isOutputSupportedFor(@NonNull Surface surface)" ],
  "variableNames" : [ "TAG", "mUsecase", "mSupportsPrivate", "mRecommendedMap", "MAX_USECASE_COUNT", "USECASE_PREVIEW", "USECASE_RECORD", "USECASE_VIDEO_SNAPSHOT", "USECASE_SNAPSHOT", "USECASE_ZSL", "USECASE_RAW", "USECASE_LOW_LATENCY_SNAPSHOT", "USECASE_10BIT_OUTPUT", "USECASE_VENDOR_START" ]
}