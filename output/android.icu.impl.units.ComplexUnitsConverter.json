{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/ComplexUnitsConverter.java",
  "packageName" : "android.icu.impl.units",
  "className" : "ComplexUnitsConverter",
  "comment" : "\n * Converts from single or compound unit to single, compound or mixed units. For example, from {@code meter}\n * to {@code foot+inch}.\n * <p>\n * DESIGN: This class uses <code>UnitsConverter</code> in order to perform the single converter (i.e. converters from\n * a single unit to another single unit). Therefore, <code>ComplexUnitsConverter</code> class contains multiple\n * instances of the <code>UnitsConverter</code> to perform the conversion.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EPSILON",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EPSILON_MULTIPLIER",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unitsConverters_",
    "type" : "ArrayList<UnitsConverter>",
    "comment" : " TODO(ICU-21937): Make it private after submitting the public units conversion API.",
    "links" : [ ]
  }, {
    "name" : "units_",
    "type" : "List<MeasureUnitImpl.MeasureUnitImplWithIndex>",
    "comment" : " TODO(ICU-21937): Make it private after submitting the public units conversion API.",
    "links" : [ ]
  }, {
    "name" : "inputUnit_",
    "type" : "MeasureUnitImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(ConversionRates conversionRates)",
    "returnType" : "void",
    "comment" : "\n     * Sorts units_, which must be populated before calling this, and populates\n     * unitsConverters_.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean greaterThanOrEqual(BigDecimal quantity, BigDecimal limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified {@code quantity} of the {@code inputUnit}, expressed in terms of the biggest\n     * unit in the MeasureUnit {@code outputUnit}, is greater than or equal to {@code limit}.\n     * <p>\n     * For example, if the input unit is {@code meter} and the target unit is {@code foot+inch}. Therefore,\n     * this function will convert the {@code quantity} from {@code meter} to {@code foot}, then, it will\n     * compare the value in {@code foot} with the {@code limit}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComplexConverterResult convert(BigDecimal quantity, Precision rounder)",
    "returnType" : "ComplexConverterResult",
    "comment" : "\n     * Returns outputMeasures which is an array with the corresponding values.\n     * - E.g. converting meters to feet and inches.\n     * 1 meter --> 3 feet, 3.3701 inches\n     * NOTE:\n     * the smallest element is the only element that could have fractional values. And all\n     * other elements are floored to the nearest integer\n     ",
    "links" : [ ]
  }, {
    "name" : "private BigDecimal applyRounder(List<BigInteger> intValues, BigDecimal quantity, Precision rounder)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Applies the rounder to the quantity (last element) and bubble up any carried value to all the intValues.\n     *\n     * @return the rounded quantity\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(ConversionRates conversionRates)", "public boolean greaterThanOrEqual(BigDecimal quantity, BigDecimal limit)", "public ComplexConverterResult convert(BigDecimal quantity, Precision rounder)", "private BigDecimal applyRounder(List<BigInteger> intValues, BigDecimal quantity, Precision rounder)", "public String toString()" ],
  "variableNames" : [ "EPSILON", "EPSILON_MULTIPLIER", "unitsConverters_", "units_", "inputUnit_" ]
}