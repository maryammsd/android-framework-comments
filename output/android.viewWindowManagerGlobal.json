{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/WindowManagerGlobal.java",
  "packageName" : "android.view",
  "className" : "WindowManagerGlobal",
  "comment" : "\n * Provides low-level communication with the system window manager for\n * operations that are not associated with any particular context.\n *\n * This class is only used internally to implement global functions where\n * the caller already knows the display and relevant compatibility information\n * for the operation.  For most purposes, you should use {@link WindowManager} instead\n * since it is bound to a context.\n *\n * @see WindowManagerImpl\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUseBLASTAdapter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_IN_TOUCH_MODE",
    "type" : "int",
    "comment" : "\n     * The user is navigating with keys (not the touch screen), so\n     * navigational focus should be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_FIRST_TIME",
    "type" : "int",
    "comment" : "\n     * This is the first time the window is being drawn,\n     * so the client must call drawingFinished() when done\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_SURFACE_CHANGED",
    "type" : "int",
    "comment" : "\n     * The window manager has changed the surface from the last call.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_DRAG_RESIZING_DOCKED",
    "type" : "int",
    "comment" : "\n     * The window is being resized by dragging on the docked divider. The client should render\n     * at (0, 0) and extend its background to the background frame passed into\n     * {@link IWindow#resized}.\n     ",
    "links" : [ "IWindow#resized" ]
  }, {
    "name" : "RELAYOUT_RES_DRAG_RESIZING_FREEFORM",
    "type" : "int",
    "comment" : "\n     * The window is being resized by dragging one of the window corners,\n     * in this case the surface would be fullscreen-sized. The client should\n     * render to the actual frame location (instead of (0,curScrollY)).\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_SURFACE_RESIZED",
    "type" : "int",
    "comment" : "\n     * The window manager has changed the size of the surface from the last call.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS",
    "type" : "int",
    "comment" : "\n     * In multi-window we force show the system bars. Because we don't want that the surface size\n     * changes in this mode, we instead have a flag whether the system bar sizes should always be\n     * consumed, so the app is treated like there is no virtual system bars at all.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_RES_BLAST_SYNC",
    "type" : "int",
    "comment" : "\n     * This flag indicates the client should not directly submit it's next frame,\n     * but instead should pass it in the postDrawTransaction of\n     * {@link WindowManagerService#finishDrawing}. This is used by the WM\n     * BLASTSyncEngine to synchronize rendering of multiple windows.\n     ",
    "links" : [ "WindowManagerService#finishDrawing" ]
  }, {
    "name" : "RELAYOUT_INSETS_PENDING",
    "type" : "int",
    "comment" : "\n     * Flag for relayout: the client will be later giving\n     * internal insets; as a result, the window will not impact other window\n     * layouts until the insets are given.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELAYOUT_DEFER_SURFACE_DESTROY",
    "type" : "int",
    "comment" : "\n     * Flag for relayout: the client may be currently using the current surface,\n     * so if it is to be destroyed as a part of the relayout the destroy must\n     * be deferred until later.  The client will call performDeferredDestroy()\n     * when it is okay.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_IN_TOUCH_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_APP_VISIBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_USE_TRIPLE_BUFFERING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_USE_BLAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_FLAG_ALWAYS_CONSUME_SYSTEM_BARS",
    "type" : "int",
    "comment" : "\n     * Like {@link #RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS}, but as a \"hint\" when adding the\n     * window.\n     ",
    "links" : [ "#RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS" ]
  }, {
    "name" : "ADD_OKAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_BAD_APP_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_BAD_SUBWINDOW_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_NOT_APP_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_APP_EXITING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_DUPLICATE_ADD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_STARTING_NOT_NEEDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_MULTIPLE_SINGLETON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_PERMISSION_DENIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_INVALID_DISPLAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_INVALID_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_INVALID_USER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADD_TOO_MANY_TOKENS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultWindowManager",
    "type" : "WindowManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWindowManagerService",
    "type" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWindowSession",
    "type" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViews",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoots",
    "type" : "ArrayList<ViewRootImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "ArrayList<WindowManager.LayoutParams>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDyingViews",
    "type" : "ArraySet<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemPropertyUpdater",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void initialize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static WindowManagerGlobal getInstance()",
    "returnType" : "WindowManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IWindowManager getWindowManagerService()",
    "returnType" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IWindowSession getWindowSession()",
    "returnType" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IWindowSession peekWindowSession()",
    "returnType" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean useBLAST()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not to use BLAST for ViewRootImpl\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getViewRootNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<ViewRootImpl> getRootViews(IBinder token)",
    "returnType" : "ArrayList<ViewRootImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<View> getWindowViews()",
    "returnType" : "ArrayList<View>",
    "comment" : "\n     * @return the list of all views attached to the global window manager\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getWindowView(IBinder windowToken)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getRootView(String name)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateViewLayout(View view, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeView(View view, boolean immediate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void closeAll(IBinder token, String who, String what)",
    "returnType" : "void",
    "comment" : "\n     * Remove all roots with specified token.\n     *\n     * @param token app or window token.\n     * @param who name of caller, used in logs.\n     * @param what type of caller, used in logs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeAllExceptView(IBinder token, View view, String who, String what)",
    "returnType" : "void",
    "comment" : "\n     * Remove all roots with specified token, except maybe one view.\n     *\n     * @param token app or window token.\n     * @param view view that should be should be preserved along with it's root.\n     *             Pass null if everything should be removed.\n     * @param who name of caller, used in logs.\n     * @param what type of caller, used in logs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeViewLocked(int index, boolean immediate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doRemoveView(ViewRootImpl root)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findViewLocked(View view, boolean required)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean shouldDestroyEglContext(int trimLevel)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void trimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void trimForeground()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doTrimForeground()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpGfxInfo(FileDescriptor fd, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getWindowName(ViewRootImpl root)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStoppedState(IBinder token, boolean stopped)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportNewConfiguration(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void changeCanvasOpacity(IBinder token, boolean opaque)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sUseBLASTAdapter", "RELAYOUT_RES_IN_TOUCH_MODE", "RELAYOUT_RES_FIRST_TIME", "RELAYOUT_RES_SURFACE_CHANGED", "RELAYOUT_RES_DRAG_RESIZING_DOCKED", "RELAYOUT_RES_DRAG_RESIZING_FREEFORM", "RELAYOUT_RES_SURFACE_RESIZED", "RELAYOUT_RES_CONSUME_ALWAYS_SYSTEM_BARS", "RELAYOUT_RES_BLAST_SYNC", "RELAYOUT_INSETS_PENDING", "RELAYOUT_DEFER_SURFACE_DESTROY", "ADD_FLAG_IN_TOUCH_MODE", "ADD_FLAG_APP_VISIBLE", "ADD_FLAG_USE_TRIPLE_BUFFERING", "ADD_FLAG_USE_BLAST", "ADD_FLAG_ALWAYS_CONSUME_SYSTEM_BARS", "ADD_OKAY", "ADD_BAD_APP_TOKEN", "ADD_BAD_SUBWINDOW_TOKEN", "ADD_NOT_APP_TOKEN", "ADD_APP_EXITING", "ADD_DUPLICATE_ADD", "ADD_STARTING_NOT_NEEDED", "ADD_MULTIPLE_SINGLETON", "ADD_PERMISSION_DENIED", "ADD_INVALID_DISPLAY", "ADD_INVALID_TYPE", "ADD_INVALID_USER", "ADD_TOO_MANY_TOKENS", "sDefaultWindowManager", "sWindowManagerService", "sWindowSession", "mLock", "mViews", "mRoots", "mParams", "mDyingViews", "mSystemPropertyUpdater" ],
  "methodNames" : [ "public static void initialize()", "public static WindowManagerGlobal getInstance()", "public static IWindowManager getWindowManagerService()", "public static IWindowSession getWindowSession()", "public static IWindowSession peekWindowSession()", "public static boolean useBLAST()", "public String[] getViewRootNames()", "public ArrayList<ViewRootImpl> getRootViews(IBinder token)", "public ArrayList<View> getWindowViews()", "public View getWindowView(IBinder windowToken)", "public View getRootView(String name)", "public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow, int userId)", "public void updateViewLayout(View view, ViewGroup.LayoutParams params)", "public void removeView(View view, boolean immediate)", "public void closeAll(IBinder token, String who, String what)", "public void closeAllExceptView(IBinder token, View view, String who, String what)", "private void removeViewLocked(int index, boolean immediate)", " void doRemoveView(ViewRootImpl root)", "private int findViewLocked(View view, boolean required)", "public static boolean shouldDestroyEglContext(int trimLevel)", "public void trimMemory(int level)", "public static void trimForeground()", "private void doTrimForeground()", "public void dumpGfxInfo(FileDescriptor fd, String[] args)", "private static String getWindowName(ViewRootImpl root)", "public void setStoppedState(IBinder token, boolean stopped)", "public void reportNewConfiguration(Configuration config)", "public void changeCanvasOpacity(IBinder token, boolean opaque)" ]
}