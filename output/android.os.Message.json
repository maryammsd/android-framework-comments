{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Message.java",
  "packageName" : "android.os",
  "className" : "Message",
  "comment" : "\n *\n * Defines a message containing a description and arbitrary data object that can be\n * sent to a {@link Handler}.  This object contains two extra int fields and an\n * extra object field that allow you to not do allocations in many cases.\n *\n * <p class=\"note\">While the constructor of Message is public, the best way to get\n * one of these is to call {@link #obtain Message.obtain()} or one of the\n * {@link Handler#obtainMessage Handler.obtainMessage()} methods, which will pull\n * them from a pool of recycled objects.</p>\n ",
  "links" : [ "android.os.Handler", "#obtain", "android.os.Handler#obtainMessage" ],
  "variables" : [ {
    "name" : "what",
    "type" : "int",
    "comment" : "\n     * User-defined message code so that the recipient can identify\n     * what this message is about. Each {@link Handler} has its own name-space\n     * for message codes, so you do not need to worry about yours conflicting\n     * with other handlers.\n     ",
    "links" : [ "android.os.Handler" ]
  }, {
    "name" : "arg1",
    "type" : "int",
    "comment" : "\n     * arg1 and arg2 are lower-cost alternatives to using\n     * {@link #setData(Bundle) setData()} if you only need to store a\n     * few integer values.\n     ",
    "links" : [ "#setData(Bundle)" ]
  }, {
    "name" : "arg2",
    "type" : "int",
    "comment" : "\n     * arg1 and arg2 are lower-cost alternatives to using\n     * {@link #setData(Bundle) setData()} if you only need to store a\n     * few integer values.\n     ",
    "links" : [ "#setData(Bundle)" ]
  }, {
    "name" : "obj",
    "type" : "Object",
    "comment" : "\n     * An arbitrary object to send to the recipient.  When using\n     * {@link Messenger} to send the message across processes this can only\n     * be non-null if it contains a Parcelable of a framework class (not one\n     * implemented by the application).   For other data transfer use\n     * {@link #setData}.\n     *\n     * <p>Note that Parcelable objects here are not supported prior to\n     * the {@link android.os.Build.VERSION_CODES#FROYO} release.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#FROYO", "android.os.Messenger", "#setData" ]
  }, {
    "name" : "replyTo",
    "type" : "Messenger",
    "comment" : "\n     * Optional Messenger where replies to this message can be sent.  The\n     * semantics of exactly how this is used are up to the sender and\n     * receiver.\n     ",
    "links" : [ ]
  }, {
    "name" : "UID_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates that the uid is not set;\n     *\n     * @hide Only for use within the system server.\n     ",
    "links" : [ ]
  }, {
    "name" : "sendingUid",
    "type" : "int",
    "comment" : "\n     * Optional field indicating the uid that sent the message.  This is\n     * only valid for messages posted by a {@link Messenger}; otherwise,\n     * it will be -1.\n     ",
    "links" : [ "android.os.Messenger" ]
  }, {
    "name" : "workSourceUid",
    "type" : "int",
    "comment" : "\n     * Optional field indicating the uid that caused this message to be enqueued.\n     *\n     * @hide Only for use within the system server.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_IN_USE",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "FLAG_ASYNCHRONOUS",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "FLAGS_TO_CLEAR_ON_COPY_FROM",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "when",
    "type" : "long",
    "comment" : "\n     * The targeted delivery time of this message. The time-base is\n     * {@link SystemClock#uptimeMillis}.\n     * @hide Only for use within the tests.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "data",
    "type" : "Bundle",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "target",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "callback",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "next",
    "type" : "Message",
    "comment" : " sometimes we store linked lists of these things",
    "links" : [ ]
  }, {
    "name" : "sPoolSync",
    "type" : "Object",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPoolSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_POOL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gCheckRecycle",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Message>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Message obtain()",
    "returnType" : "Message",
    "comment" : "\n     * Return a new Message instance from the global pool. Allows us to\n     * avoid allocating new objects in many cases.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Message obtain(Message orig)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain()}, but copies the values of an existing\n     * message (including its target) into the new one.\n     * @param orig Original message to copy.\n     * @return A Message object from the global pool.\n     ",
    "links" : [ "#obtain()" ]
  }, {
    "name" : "public static Message obtain(Handler h)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain()}, but sets the value for the <em>target</em> member on the Message returned.\n     * @param h  Handler to assign to the returned Message object's <em>target</em> member.\n     * @return A Message object from the global pool.\n     ",
    "links" : [ "#obtain()" ]
  }, {
    "name" : "public static Message obtain(Handler h, Runnable callback)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain(Handler)}, but assigns a callback Runnable on\n     * the Message that is returned.\n     * @param h  Handler to assign to the returned Message object's <em>target</em> member.\n     * @param callback Runnable that will execute when the message is handled.\n     * @return A Message object from the global pool.\n     ",
    "links" : [ "#obtain(Handler)" ]
  }, {
    "name" : "public static Message obtain(Handler h, int what)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain()}, but sets the values for both <em>target</em> and\n     * <em>what</em> members on the Message.\n     * @param h  Value to assign to the <em>target</em> member.\n     * @param what  Value to assign to the <em>what</em> member.\n     * @return A Message object from the global pool.\n     ",
    "links" : [ "#obtain()" ]
  }, {
    "name" : "public static Message obtain(Handler h, int what, Object obj)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain()}, but sets the values of the <em>target</em>, <em>what</em>, and <em>obj</em>\n     * members.\n     * @param h  The <em>target</em> value to set.\n     * @param what  The <em>what</em> value to set.\n     * @param obj  The <em>object</em> method to set.\n     * @return  A Message object from the global pool.\n     ",
    "links" : [ "#obtain()" ]
  }, {
    "name" : "public static Message obtain(Handler h, int what, int arg1, int arg2)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain()}, but sets the values of the <em>target</em>, <em>what</em>,\n     * <em>arg1</em>, and <em>arg2</em> members.\n     *\n     * @param h  The <em>target</em> value to set.\n     * @param what  The <em>what</em> value to set.\n     * @param arg1  The <em>arg1</em> value to set.\n     * @param arg2  The <em>arg2</em> value to set.\n     * @return  A Message object from the global pool.\n     ",
    "links" : [ "#obtain()" ]
  }, {
    "name" : "public static Message obtain(Handler h, int what, int arg1, int arg2, Object obj)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtain()}, but sets the values of the <em>target</em>, <em>what</em>,\n     * <em>arg1</em>, <em>arg2</em>, and <em>obj</em> members.\n     *\n     * @param h  The <em>target</em> value to set.\n     * @param what  The <em>what</em> value to set.\n     * @param arg1  The <em>arg1</em> value to set.\n     * @param arg2  The <em>arg2</em> value to set.\n     * @param obj  The <em>obj</em> value to set.\n     * @return  A Message object from the global pool.\n     ",
    "links" : [ "#obtain()" ]
  }, {
    "name" : "public static void updateCheckRecycle(int targetSdkVersion)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Return a Message instance to the global pool.\n     * <p>\n     * You MUST NOT touch the Message after calling this function because it has\n     * effectively been freed.  It is an error to recycle a message that is currently\n     * enqueued or that is in the process of being delivered to a Handler.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : " void recycleUnchecked()",
    "returnType" : "void",
    "comment" : "\n     * Recycles a Message that may be in-use.\n     * Used internally by the MessageQueue and Looper when disposing of queued Messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(Message o)",
    "returnType" : "void",
    "comment" : "\n     * Make this message like o.  Performs a shallow copy of the data field.\n     * Does not copy the linked list fields, nor the timestamp or\n     * target/callback of the original message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getWhen()",
    "returnType" : "long",
    "comment" : "\n     * Return the targeted delivery time of this message, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(Handler target)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Handler getTarget()",
    "returnType" : "Handler",
    "comment" : "\n     * Retrieve the {@link android.os.Handler Handler} implementation that\n     * will receive this message. The object must implement\n     * {@link android.os.Handler#handleMessage(android.os.Message)\n     * Handler.handleMessage()}. Each Handler has its own name-space for\n     * message codes, so you do not need to\n     * worry about yours conflicting with other handlers.\n     ",
    "links" : [ "android.os.Handler", "android.os.Handler#handleMessage(android.os.Message)" ]
  }, {
    "name" : "public Runnable getCallback()",
    "returnType" : "Runnable",
    "comment" : "\n     * Retrieve callback object that will execute when this message is handled.\n     * This object must implement Runnable. This is called by\n     * the <em>target</em> {@link Handler} that is receiving this Message to\n     * dispatch it.  If\n     * not set, the message will be dispatched to the receiving Handler's\n     * {@link Handler#handleMessage(Message)}.\n     ",
    "links" : [ "android.os.Handler#handleMessage(Message)", "android.os.Handler" ]
  }, {
    "name" : "public Message setCallback(Runnable r)",
    "returnType" : "Message",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getData()",
    "returnType" : "Bundle",
    "comment" : "\n     * Obtains a Bundle of arbitrary data associated with this\n     * event, lazily creating it if necessary. Set this value by calling\n     * {@link #setData(Bundle)}.  Note that when transferring data across\n     * processes via {@link Messenger}, you will need to set your ClassLoader\n     * on the Bundle via {@link Bundle#setClassLoader(ClassLoader)\n     * Bundle.setClassLoader()} so that it can instantiate your objects when\n     * you retrieve them.\n     * @see #peekData()\n     * @see #setData(Bundle)\n     ",
    "links" : [ "#setData(Bundle)", "android.os.Bundle#setClassLoader(ClassLoader)", "android.os.Messenger" ]
  }, {
    "name" : "public Bundle peekData()",
    "returnType" : "Bundle",
    "comment" : "\n     * Like getData(), but does not lazily create the Bundle.  A null\n     * is returned if the Bundle does not already exist.  See\n     * {@link #getData} for further information on this.\n     * @see #getData()\n     * @see #setData(Bundle)\n     ",
    "links" : [ "#getData" ]
  }, {
    "name" : "public void setData(Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * Sets a Bundle of arbitrary data values. Use arg1 and arg2 members\n     * as a lower cost way to send a few simple integer values, if you can.\n     * @see #getData()\n     * @see #peekData()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Message setWhat(int what)",
    "returnType" : "Message",
    "comment" : "\n     * Chainable setter for {@link #what}\n     *\n     * @hide\n     ",
    "links" : [ "#what" ]
  }, {
    "name" : "public void sendToTarget()",
    "returnType" : "void",
    "comment" : "\n     * Sends this Message to the Handler specified by {@link #getTarget}.\n     * Throws a null pointer exception if this field has not been set.\n     ",
    "links" : [ "#getTarget" ]
  }, {
    "name" : "public boolean isAsynchronous()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the message is asynchronous, meaning that it is not\n     * subject to {@link Looper} synchronization barriers.\n     *\n     * @return True if the message is asynchronous.\n     *\n     * @see #setAsynchronous(boolean)\n     ",
    "links" : [ "android.os.Looper" ]
  }, {
    "name" : "public void setAsynchronous(boolean async)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the message is asynchronous, meaning that it is not\n     * subject to {@link Looper} synchronization barriers.\n     * <p>\n     * Certain operations, such as view invalidation, may introduce synchronization\n     * barriers into the {@link Looper}'s message queue to prevent subsequent messages\n     * from being delivered until some condition is met.  In the case of view invalidation,\n     * messages which are posted after a call to {@link android.view.View#invalidate}\n     * are suspended by means of a synchronization barrier until the next frame is\n     * ready to be drawn.  The synchronization barrier ensures that the invalidation\n     * request is completely handled before resuming.\n     * </p><p>\n     * Asynchronous messages are exempt from synchronization barriers.  They typically\n     * represent interrupts, input events, and other signals that must be handled independently\n     * even while other work has been suspended.\n     * </p><p>\n     * Note that asynchronous messages may be delivered out of order with respect to\n     * synchronous messages although they are always delivered in order among themselves.\n     * If the relative order of these messages matters then they probably should not be\n     * asynchronous in the first place.  Use with caution.\n     * </p>\n     *\n     * @param async True if the message is asynchronous.\n     *\n     * @see #isAsynchronous()\n     ",
    "links" : [ "android.view.View#invalidate", "android.os.Looper" ]
  }, {
    "name" : " boolean isInUse()",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void markInUse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String toString(long now)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Message obtain()", "public static Message obtain(Message orig)", "public static Message obtain(Handler h)", "public static Message obtain(Handler h, Runnable callback)", "public static Message obtain(Handler h, int what)", "public static Message obtain(Handler h, int what, Object obj)", "public static Message obtain(Handler h, int what, int arg1, int arg2)", "public static Message obtain(Handler h, int what, int arg1, int arg2, Object obj)", "public static void updateCheckRecycle(int targetSdkVersion)", "public void recycle()", " void recycleUnchecked()", "public void copyFrom(Message o)", "public long getWhen()", "public void setTarget(Handler target)", "public Handler getTarget()", "public Runnable getCallback()", "public Message setCallback(Runnable r)", "public Bundle getData()", "public Bundle peekData()", "public void setData(Bundle data)", "public Message setWhat(int what)", "public void sendToTarget()", "public boolean isAsynchronous()", "public void setAsynchronous(boolean async)", " boolean isInUse()", " void markInUse()", "public String toString()", " String toString(long now)", " void dumpDebug(ProtoOutputStream proto, long fieldId)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private void readFromParcel(Parcel source)" ],
  "variableNames" : [ "what", "arg1", "arg2", "obj", "replyTo", "UID_NONE", "sendingUid", "workSourceUid", "FLAG_IN_USE", "FLAG_ASYNCHRONOUS", "FLAGS_TO_CLEAR_ON_COPY_FROM", "flags", "when", "data", "target", "callback", "next", "sPoolSync", "sPool", "sPoolSize", "MAX_POOL_SIZE", "gCheckRecycle", "CREATOR" ]
}