{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/LinkedBlockingQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "LinkedBlockingQueue",
  "comment" : "\n * An optionally-bounded {@linkplain BlockingQueue blocking queue} based on\n * linked nodes.\n * This queue orders elements FIFO (first-in-first-out).\n * The <em>head</em> of the queue is that element that has been on the\n * queue the longest time.\n * The <em>tail</em> of the queue is that element that has been on the\n * queue the shortest time. New elements\n * are inserted at the tail of the queue, and the queue retrieval\n * operations obtain elements at the head of the queue.\n * Linked queues typically have higher throughput than array-based queues but\n * less predictable performance in most concurrent applications.\n *\n * <p>The optional capacity bound constructor argument serves as a\n * way to prevent excessive queue expansion. The capacity, if unspecified,\n * is equal to {@link Integer#MAX_VALUE}.  Linked nodes are\n * dynamically created upon each insertion unless this would bring the\n * queue above capacity.\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Collection} and {@link Iterator} interfaces.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "java.util.concurrent.atomic.AtomicInteger#MAX_VALUE", "java.util.Iterator", "java.util.Collection" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "capacity",
    "type" : "int",
    "comment" : " The capacity bound, or Integer.MAX_VALUE if none ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "AtomicInteger",
    "comment" : " Current number of elements ",
    "links" : [ ]
  }, {
    "name" : "head",
    "type" : "Node<E>",
    "comment" : "\n     * Head of linked list.\n     * Invariant: head.item == null\n     ",
    "links" : [ ]
  }, {
    "name" : "last",
    "type" : "Node<E>",
    "comment" : "\n     * Tail of linked list.\n     * Invariant: last.next == null\n     ",
    "links" : [ ]
  }, {
    "name" : "takeLock",
    "type" : "ReentrantLock",
    "comment" : " Lock held by take, poll, etc ",
    "links" : [ ]
  }, {
    "name" : "notEmpty",
    "type" : "Condition",
    "comment" : " Wait queue for waiting takes ",
    "links" : [ ]
  }, {
    "name" : "putLock",
    "type" : "ReentrantLock",
    "comment" : " Lock held by put, offer, etc ",
    "links" : [ ]
  }, {
    "name" : "notFull",
    "type" : "Condition",
    "comment" : " Wait queue for waiting puts ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void signalNotEmpty()",
    "returnType" : "void",
    "comment" : "\n     * Signals a waiting take. Called only from put/offer (which do not\n     * otherwise ordinarily lock takeLock.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void signalNotFull()",
    "returnType" : "void",
    "comment" : "\n     * Signals a waiting put. Called only from take/poll.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void enqueue(Node<E> node)",
    "returnType" : "void",
    "comment" : "\n     * Links node at end of queue.\n     *\n     * @param node the node\n     ",
    "links" : [ ]
  }, {
    "name" : "private E dequeue()",
    "returnType" : "E",
    "comment" : "\n     * Removes a node from head of queue.\n     *\n     * @return the node\n     ",
    "links" : [ ]
  }, {
    "name" : " void fullyLock()",
    "returnType" : "void",
    "comment" : "\n     * Locks to prevent both puts and takes.\n     ",
    "links" : [ ]
  }, {
    "name" : " void fullyUnlock()",
    "returnType" : "void",
    "comment" : "\n     * Unlocks to allow both puts and takes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this queue.\n     *\n     * @return the number of elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of additional elements that this queue can ideally\n     * (in the absence of memory or resource constraints) accept without\n     * blocking. This is always equal to the initial capacity of this queue\n     * less the current {@code size} of this queue.\n     *\n     * <p>Note that you <em>cannot</em> always tell if an attempt to insert\n     * an element will succeed by inspecting {@code remainingCapacity}\n     * because it may be the case that another thread is about to\n     * insert or remove an element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the tail of this queue, waiting if\n     * necessary for space to become available.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this queue, waiting if\n     * necessary up to the specified wait time for space to become available.\n     *\n     * @return {@code true} if successful, or {@code false} if\n     *         the specified waiting time elapses before space is available\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the tail of this queue if it is\n     * possible to do so immediately without exceeding the queue's capacity,\n     * returning {@code true} upon success and {@code false} if this queue\n     * is full.\n     * When using a capacity-restricted queue, this method is generally\n     * preferable to method {@link BlockingQueue#add add}, which can fail to\n     * insert an element only by throwing an exception.\n     *\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.concurrent.BlockingQueue#add" ]
  }, {
    "name" : "public E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unlink(Node<E> p, Node<E> pred)",
    "returnType" : "void",
    "comment" : "\n     * Unlinks interior Node p with predecessor pred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this queue,\n     * if it is present.  More formally, removes an element {@code e} such\n     * that {@code o.equals(e)}, if this queue contains one or more such\n     * elements.\n     * Returns {@code true} if this queue contained the specified element\n     * (or equivalently, if this queue changed as a result of the call).\n     *\n     * @param o element to be removed from this queue, if present\n     * @return {@code true} if this queue changed as a result of the call\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this queue contains the specified element.\n     * More formally, returns {@code true} if and only if this queue contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this queue\n     * @return {@code true} if this queue contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue, in\n     * proper sequence.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this queue.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue, in\n     * proper sequence; the runtime type of the returned array is that of\n     * the specified array.  If the queue fits in the specified array, it\n     * is returned therein.  Otherwise, a new array is allocated with the\n     * runtime type of the specified array and the size of this queue.\n     *\n     * <p>If this queue fits in the specified array with room to spare\n     * (i.e., the array has more elements than this queue), the element in\n     * the array immediately following the end of the queue is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a queue known to contain only strings.\n     * The following code can be used to dump the queue into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the queue are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this queue\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this queue\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Atomically removes all of the elements from this queue.\n     * The queue will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<E> succ(Node<E> p)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Used for any element traversal that is not entirely under lock.\n     * Such traversals must handle both:\n     * - dequeued nodes (p.next == p)\n     * - (possibly multiple) interior removed nodes (p.item == null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this queue in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this queue in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this queue.\n     *\n     * <p>The returned spliterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},\n     * {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.\n     *\n     * @implNote\n     * The {@code Spliterator} implements {@code trySplit} to permit limited\n     * parallelism.\n     *\n     * @return a {@code Spliterator} over the elements in this queue\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#NONNULL", "java.util.Spliterator#CONCURRENT", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void forEachFrom(Consumer<? super E> action, Node<E> p)",
    "returnType" : "void",
    "comment" : "\n     * Runs action on each element found during a traversal starting at p.\n     * If p is null, traversal starts at head.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<E> findPred(Node<E> p, Node<E> ancestor)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns the predecessor of live node p, given a node that was\n     * once a live ancestor of p (or head); allows unlinking of p.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this queue to a stream (that is, serializes it).\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @serialData The capacity is emitted (int), followed by all of\n     * its elements (each an {@code Object}) in the proper order,\n     * followed by a null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this queue from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void signalNotEmpty()", "private void signalNotFull()", "private void enqueue(Node<E> node)", "private E dequeue()", " void fullyLock()", " void fullyUnlock()", "public int size()", "public int remainingCapacity()", "public void put(E e) throws InterruptedException", "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException", "public boolean offer(E e)", "public E take() throws InterruptedException", "public E poll(long timeout, TimeUnit unit) throws InterruptedException", "public E poll()", "public E peek()", " void unlink(Node<E> p, Node<E> pred)", "public boolean remove(Object o)", "public boolean contains(Object o)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public String toString()", "public void clear()", "public int drainTo(Collection<? super E> c)", "public int drainTo(Collection<? super E> c, int maxElements)", " Node<E> succ(Node<E> p)", "public Iterator<E> iterator()", "public Spliterator<E> spliterator()", "public void forEach(Consumer<? super E> action)", " void forEachFrom(Consumer<? super E> action, Node<E> p)", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", " Node<E> findPred(Node<E> p, Node<E> ancestor)", "private boolean bulkRemove(Predicate<? super E> filter)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "capacity", "count", "head", "last", "takeLock", "notEmpty", "putLock", "notFull" ]
}