{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/EntityResolver.java",
  "packageName" : "org.xml.sax",
  "className" : "EntityResolver",
  "comment" : "\n * Basic interface for resolving entities.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>If a SAX application needs to implement customized handling\n * for external entities, it must implement this interface and\n * register an instance with the SAX driver using the\n * {@link org.xml.sax.XMLReader#setEntityResolver setEntityResolver}\n * method.</p>\n *\n * <p>The XML reader will then allow the application to intercept any\n * external entities (including the external DTD subset and external\n * parameter entities, if any) before including them.</p>\n *\n * <p>Many SAX applications will not need to implement this interface,\n * but it will be especially useful for applications that build\n * XML documents from databases or other specialised input sources,\n * or for applications that use URI types other than URLs.</p>\n *\n * <p>The following resolver would provide the application\n * with a special character stream for the entity with the system\n * identifier \"http://www.myhost.com/today\":</p>\n *\n * <pre>\n * import org.xml.sax.EntityResolver;\n * import org.xml.sax.InputSource;\n *\n * public class MyResolver implements EntityResolver {\n *   public InputSource resolveEntity (String publicId, String systemId)\n *   {\n *     if (systemId.equals(\"http://www.myhost.com/today\")) {\n *              // return a special input source\n *       MyReader reader = new MyReader();\n *       return new InputSource(reader);\n *     } else {\n *              // use the default behaviour\n *       return null;\n *     }\n *   }\n * }\n * </pre>\n *\n * <p>The application can also use this interface to redirect system\n * identifiers to local URIs or to look up replacements in a catalog\n * (possibly by using the public identifier).</p>\n *\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.XMLReader#setEntityResolver\n * @see org.xml.sax.InputSource\n ",
  "links" : [ "org.xml.sax.XMLReader#setEntityResolver" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException",
    "returnType" : "InputSource",
    "comment" : "\n     * Allow the application to resolve external entities.\n     *\n     * <p>The parser will call this method before opening any external\n     * entity except the top-level document entity.  Such entities include\n     * the external DTD subset and external parameter entities referenced\n     * within the DTD (in either case, only if the parser reads external\n     * parameter entities), and external general entities referenced\n     * within the document element (if the parser reads external general\n     * entities).  The application may request that the parser locate\n     * the entity itself, that it use an alternative URI, or that it\n     * use data provided by the application (as a character or byte\n     * input stream).</p>\n     *\n     * <p>Application writers can use this method to redirect external\n     * system identifiers to secure and/or local URIs, to look up\n     * public identifiers in a catalogue, or to read an entity from a\n     * database or other input source (including, for example, a dialog\n     * box).  Neither XML nor SAX specifies a preferred policy for using\n     * public or system IDs to resolve resources.  However, SAX specifies\n     * how to interpret any InputSource returned by this method, and that\n     * if none is returned, then the system ID will be dereferenced as\n     * a URL.  </p>\n     *\n     * <p>If the system identifier is a URL, the SAX parser must\n     * resolve it fully before reporting it to the application.</p>\n     *\n     * @param publicId The public identifier of the external entity\n     *        being referenced, or null if none was supplied.\n     * @param systemId The system identifier of the external entity\n     *        being referenced.\n     * @return An InputSource object describing the new input source,\n     *         or null to request that the parser open a regular\n     *         URI connection to the system identifier.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @exception java.io.IOException A Java-specific IO exception,\n     *            possibly the result of creating a new InputStream\n     *            or Reader for the InputSource.\n     * @see org.xml.sax.InputSource\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException" ],
  "variableNames" : [ ]
}