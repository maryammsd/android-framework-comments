{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicReferenceFieldUpdater",
  "comment" : "\n * A reflection-based utility that enables atomic updates to\n * designated {@code volatile} reference fields of designated\n * classes.  This class is designed for use in atomic data structures\n * in which several reference fields of the same node are\n * independently subject to atomic updates. For example, a tree node\n * might be declared as\n *\n * <pre> {@code\n * class Node {\n *   private volatile Node left, right;\n *\n *   private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =\n *     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");\n *   private static final AtomicReferenceFieldUpdater<Node, Node> rightUpdater =\n *     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");\n *\n *   Node getLeft() { return left; }\n *   boolean compareAndSetLeft(Node expect, Node update) {\n *     return leftUpdater.compareAndSet(this, expect, update);\n *   }\n *   // ... and so on\n * }}</pre>\n *\n * <p>Note that the guarantees of the {@code compareAndSet}\n * method in this class are weaker than in other atomic classes.\n * Because this class cannot ensure that all uses of the field\n * are appropriate for purposes of atomic access, it can\n * guarantee atomicity only with respect to other invocations of\n * {@code compareAndSet} and {@code set} on the same updater.\n *\n * <p>Object arguments for parameters of type {@code T} that are not\n * instances of the class passed to {@link #newUpdater} will result in\n * a {@link ClassCastException} being thrown.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <T> The type of the object holding the updatable field\n * @param <V> The type of the field\n ",
  "links" : [ "#newUpdater", "ClassCastException" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static AtomicReferenceFieldUpdater<U, W> newUpdater(Class<U> tclass, Class<W> vclass, String fieldName)",
    "returnType" : "AtomicReferenceFieldUpdater<U, W>",
    "comment" : "\n     * Creates and returns an updater for objects with the given field.\n     * The Class arguments are needed to check that reflective types and\n     * generic types match.\n     *\n     * @param tclass the class of the objects holding the field\n     * @param vclass the class of the field\n     * @param fieldName the name of the field to be updated\n     * @param <U> the type of instances of tclass\n     * @param <W> the type of instances of vclass\n     * @return the updater\n     * @throws ClassCastException if the field is of the wrong type\n     * @throws IllegalArgumentException if the field is not volatile\n     * @throws RuntimeException with a nested reflection-based\n     * exception if the class does not hold field or is the wrong type,\n     * or the field is inaccessible to the caller according to Java language\n     * access control\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean compareAndSet(T obj, V expect, V update)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the field of the given object managed by this updater\n     * to the given updated value if the current value {@code ==} the\n     * expected value. This method is guaranteed to be atomic with respect to\n     * other calls to {@code compareAndSet} and {@code set}, but not\n     * necessarily with respect to other changes in the field.\n     *\n     * @param obj An object whose field to conditionally set\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean weakCompareAndSet(T obj, V expect, V update)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the field of the given object managed by this updater\n     * to the given updated value if the current value {@code ==} the\n     * expected value. This method is guaranteed to be atomic with respect to\n     * other calls to {@code compareAndSet} and {@code set}, but not\n     * necessarily with respect to other changes in the field.\n     *\n     * <p>This operation may fail spuriously and does not provide\n     * ordering guarantees, so is only rarely an appropriate\n     * alternative to {@code compareAndSet}.\n     *\n     * @param obj An object whose field to conditionally set\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void set(T obj, V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the field of the given object managed by this updater to the\n     * given updated value. This operation is guaranteed to act as a volatile\n     * store with respect to subsequent invocations of {@code compareAndSet}.\n     *\n     * @param obj An object whose field to set\n     * @param newValue the new value\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void lazySet(T obj, V newValue)",
    "returnType" : "void",
    "comment" : "\n     * Eventually sets the field of the given object managed by this\n     * updater to the given updated value.\n     *\n     * @param obj An object whose field to set\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract V get(T obj)",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value held in the field of the given object\n     * managed by this updater.\n     *\n     * @param obj An object whose field to get\n     * @return the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public V getAndSet(T obj, V newValue)",
    "returnType" : "V",
    "comment" : "\n     * Atomically sets the field of the given object managed by this updater\n     * to the given value and returns the old value.\n     *\n     * @param obj An object whose field to get and set\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ ]
  }, {
    "name" : "public final V getAndUpdate(T obj, UnaryOperator<V> updateFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given\n     * function, returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.\n     *\n     * @param obj An object whose field to get and set\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final V updateAndGet(T obj, UnaryOperator<V> updateFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given\n     * function, returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.\n     *\n     * @param obj An object whose field to get and set\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final V getAndAccumulate(T obj, V x, BinaryOperator<V> accumulatorFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given function\n     * to the current and given values, returning the previous value.\n     * The function should be side-effect-free, since it may be\n     * re-applied when attempted updates fail due to contention among\n     * threads.  The function is applied with the current value as its\n     * first argument, and the given update as the second argument.\n     *\n     * @param obj An object whose field to get and set\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final V accumulateAndGet(T obj, V x, BinaryOperator<V> accumulatorFunction)",
    "returnType" : "V",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the field of the given object managed\n     * by this updater with the results of applying the given function\n     * to the current and given values, returning the updated value.\n     * The function should be side-effect-free, since it may be\n     * re-applied when attempted updates fail due to contention among\n     * threads.  The function is applied with the current value as its\n     * first argument, and the given update as the second argument.\n     *\n     * @param obj An object whose field to get and set\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  } ],
  "methodNames" : [ "public static AtomicReferenceFieldUpdater<U, W> newUpdater(Class<U> tclass, Class<W> vclass, String fieldName)", "public abstract boolean compareAndSet(T obj, V expect, V update)", "public abstract boolean weakCompareAndSet(T obj, V expect, V update)", "public abstract void set(T obj, V newValue)", "public abstract void lazySet(T obj, V newValue)", "public abstract V get(T obj)", "public V getAndSet(T obj, V newValue)", "public final V getAndUpdate(T obj, UnaryOperator<V> updateFunction)", "public final V updateAndGet(T obj, UnaryOperator<V> updateFunction)", "public final V getAndAccumulate(T obj, V x, BinaryOperator<V> accumulatorFunction)", "public final V accumulateAndGet(T obj, V x, BinaryOperator<V> accumulatorFunction)" ],
  "variableNames" : [ ]
}