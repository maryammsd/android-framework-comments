{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/spi/AbstractInterruptibleChannel.java",
  "packageName" : "java.nio.channels.spi",
  "className" : "AbstractInterruptibleChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "interruptor",
    "type" : "Interruptible",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "interrupted",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this channel.\n     *\n     * <p> If the channel has already been closed then this method returns\n     * immediately.  Otherwise it marks the channel as closed and then invokes\n     * the {@link #implCloseChannel implCloseChannel} method in order to\n     * complete the close operation.  </p>\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "#implCloseChannel" ]
  }, {
    "name" : "protected abstract void implCloseChannel() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this channel.\n     *\n     * <p> This method is invoked by the {@link #close close} method in order\n     * to perform the actual work of closing the channel.  This method is only\n     * invoked if the channel has not yet been closed, and it is never invoked\n     * more than once.\n     *\n     * <p> An implementation of this method must arrange for any other thread\n     * that is blocked in an I/O operation upon this channel to return\n     * immediately, either by throwing an exception or by returning normally.\n     * </p>\n     *\n     * @throws  IOException\n     *          If an I/O error occurs while closing the channel\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public final boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void begin()",
    "returnType" : "void",
    "comment" : "\n     * Marks the beginning of an I/O operation that might block indefinitely.\n     *\n     * <p> This method should be invoked in tandem with the {@link #end end}\n     * method, using a {@code try}&nbsp;...&nbsp;{@code finally} block as\n     * shown <a href=\"#be\">above</a>, in order to implement asynchronous\n     * closing and interruption for this channel.  </p>\n     ",
    "links" : [ "#end" ]
  }, {
    "name" : "protected final void end(boolean completed) throws AsynchronousCloseException",
    "returnType" : "void",
    "comment" : "\n     * Marks the end of an I/O operation that might block indefinitely.\n     *\n     * <p> This method should be invoked in tandem with the {@link #begin\n     * begin} method, using a {@code try}&nbsp;...&nbsp;{@code finally} block\n     * as shown <a href=\"#be\">above</a>, in order to implement asynchronous\n     * closing and interruption for this channel.  </p>\n     *\n     * @param  completed\n     *         {@code true} if, and only if, the I/O operation completed\n     *         successfully, that is, had some effect that would be visible to\n     *         the operation's invoker\n     *\n     * @throws  AsynchronousCloseException\n     *          If the channel was asynchronously closed\n     *\n     * @throws  ClosedByInterruptException\n     *          If the thread blocked in the I/O operation was interrupted\n     ",
    "links" : [ "#beginbegin" ]
  }, {
    "name" : " static void blockedOn(Interruptible intr)",
    "returnType" : "void",
    "comment" : " -- jdk.internal.misc.SharedSecrets --",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final void close() throws IOException", "protected abstract void implCloseChannel() throws IOException", "public final boolean isOpen()", "protected final void begin()", "protected final void end(boolean completed) throws AsynchronousCloseException", " static void blockedOn(Interruptible intr)" ],
  "variableNames" : [ "closeLock", "closed", "interruptor", "interrupted" ]
}