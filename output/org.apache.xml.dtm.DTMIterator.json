{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/DTMIterator.java",
  "packageName" : "org.apache.xml.dtm",
  "className" : "DTMIterator",
  "comment" : "\n\n * <code>DTMIterators</code> are used to step through a (possibly\n * filtered) set of nodes.  Their API is modeled largely after the DOM\n * NodeIterator.\n * \n * <p>A DTMIterator is a somewhat unusual type of iterator, in that it \n * can serve both single node iteration and random access.</p>\n * \n * <p>The DTMIterator's traversal semantics, i.e. how it walks the tree,\n * are specified when it is created, possibly and probably by an XPath\n * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or \n * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.</p>\n * \n * <p>A DTMIterator is meant to be created once as a master static object, and \n * then cloned many times for runtime use.  Or the master object itself may \n * be used for simpler use cases.</p>\n *\n * <p>At this time, we do not expect DTMIterator to emulate\n * NodeIterator's \"maintain relative position\" semantics under\n * document mutation.  It's likely to respond more like the\n * TreeWalker's \"current node\" semantics. However, since the base DTM\n * is immutable, this issue currently makes no practical\n * difference.</p>\n *\n * <p>State: In progress!!</p> ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FILTER_ACCEPT",
    "type" : "short",
    "comment" : "\n   * Accept the node.\n   ",
    "links" : [ ]
  }, {
    "name" : "FILTER_REJECT",
    "type" : "short",
    "comment" : "\n   * Reject the node. Same behavior as FILTER_SKIP. (In the DOM these\n   * differ when applied to a TreeWalker but have the same result when\n   * applied to a NodeIterator).\n   ",
    "links" : [ ]
  }, {
    "name" : "FILTER_SKIP",
    "type" : "short",
    "comment" : "\n   * Skip this single node. \n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM that \"owns\" a node handle.  Since a node \n   * iterator may be passed without a DTMManager, this allows the \n   * caller to easily get the DTM using just the iterator.\n   *\n   * @param nodeHandle the nodeHandle.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMManager getDTMManager()",
    "returnType" : "DTMManager",
    "comment" : "\n   * Get an instance of the DTMManager.  Since a node \n   * iterator may be passed without a DTMManager, this allows the \n   * caller to easily get the DTMManager using just the iterator.\n   *\n   * @return a non-null DTMManager reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getRoot()",
    "returnType" : "int",
    "comment" : "\n   * The root node of the <code>DTMIterator</code>, as specified when it\n   * was created.  Note the root node is not the root node of the \n   * document tree, but the context node from where the iteration \n   * begins and ends.\n   *\n   * @return nodeHandle int Handle of the context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRoot(int nodeHandle, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Reset the root node of the <code>DTMIterator</code>, overriding\n   * the value specified when it was created.  Note the root node is\n   * not the root node of the document tree, but the context node from\n   * where the iteration begins.\n   *\n   * @param nodeHandle int Handle of the context node.\n   * @param environment The environment object.  \n   * The environment in which this iterator operates, which should provide:\n   * <ul>\n   * <li>a node (the context node... same value as \"root\" defined below) </li>\n   * <li>a pair of non-zero positive integers (the context position and the context size) </li>\n   * <li>a set of variable bindings </li>\n   * <li>a function library </li>\n   * <li>the set of namespace declarations in scope for the expression.</li>\n   * <ul>\n   * \n   * <p>At this time the exact implementation of this environment is application \n   * dependent.  Probably a proper interface will be created fairly soon.</p>\n   * \n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the iterator to the start. After resetting, the next node returned\n   * will be the root node -- or, if that's filtered out, the first node\n   * within the root's subtree which is _not_ skipped by the filters.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n   * This attribute determines which node types are presented via the\n   * iterator. The available set of constants is defined above.  \n   * Nodes not accepted by\n   * <code>whatToShow</code> will be skipped, but their children may still\n   * be considered.\n   *\n   * @return one of the SHOW_XXX constants, or several ORed together.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : "\n   * <p>The value of this flag determines whether the children of entity\n   * reference nodes are visible to the iterator. If false, they  and\n   * their descendants will be rejected. Note that this rejection takes\n   * precedence over <code>whatToShow</code> and the filter. </p>\n   * \n   * <p> To produce a view of the document that has entity references\n   * expanded and does not expose the entity reference node itself, use\n   * the <code>whatToShow</code> flags to hide the entity reference node\n   * and set <code>expandEntityReferences</code> to true when creating the\n   * iterator. To produce a view of the document that has entity reference\n   * nodes but no entity expansion, use the <code>whatToShow</code> flags\n   * to show the entity reference node and set\n   * <code>expandEntityReferences</code> to false.</p>\n   *\n   * <p>NOTE: In Xalan's use of DTM we will generally have fully expanded\n   * entity references when the document tree was built, and thus this\n   * flag will have no effect.</p>\n   *\n   * @return true if entity references will be expanded.  ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   * Returns the next node in the set and advances the position of the\n   * iterator in the set. After a <code>DTMIterator</code> has setRoot called,\n   * the first call to <code>nextNode()</code> returns that root or (if it\n   * is rejected by the filters) the first node within its subtree which is\n   * not filtered out.\n   * @return The next node handle in the set being iterated over, or\n   *  <code>DTM.NULL</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int previousNode()",
    "returnType" : "int",
    "comment" : "\n   * Returns the previous node in the set and moves the position of the\n   * <code>DTMIterator</code> backwards in the set.\n   * @return The previous node handle in the set being iterated over,\n   *   or <code>DTM.NULL</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the <code>DTMIterator</code> from the set which it iterated\n   * over, releasing any computational resources and placing the iterator\n   * in the INVALID state. After <code>detach</code> has been invoked,\n   * calls to <code>nextNode</code> or <code>previousNode</code> will\n   * raise a runtime exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void allowDetachToRelease(boolean allowRelease)",
    "returnType" : "void",
    "comment" : "\n   * Specify if it's OK for detach to release the iterator for reuse.\n   * \n   * @param allowRelease true if it is OK for detach to release this iterator \n   * for pooling.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the current node in the iterator. Note that this differs from\n   * the DOM's NodeIterator, where the current position lies between two\n   * nodes (as part of the maintain-relative-position semantic).\n   *\n   * @return The current node handle, or -1.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFresh()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this NodeSetDTM is \"fresh\", in other words, if\n   * the first nextNode() that is called will return the\n   * first node in the set.\n   *\n   * @return true if the iteration of this list has not yet begun.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldCacheNodes(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * If setShouldCacheNodes(true) is called, then nodes will\n   * be cached, enabling random access, and giving the ability to do \n   * sorts and the like.  They are not cached by default.\n   *\n   * %REVIEW% Shouldn't the other random-access methods throw an exception\n   * if they're called on a DTMIterator with this flag set false?\n   *\n   * @param b true if the nodes should be cached.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMutable()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this iterator can have nodes added to it or set via \n   * the <code>setItem(int node, int index)</code> method.\n   * \n   * @return True if the nodelist can be mutated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentPos()",
    "returnType" : "int",
    "comment" : " Get the current position within the cached list, which is one\n   * less than the next nextNode() call will retrieve.  i.e. if you\n   * call getCurrentPos() and the return is 0, the next fetch will\n   * take place at index 1.\n   *\n   * @return The position of the iteration.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void runTo(int index)",
    "returnType" : "void",
    "comment" : "\n   * If an index is requested, NodeSetDTM will call this method\n   * to run the iterator to the index.  By default this sets\n   * m_next to the index.  If the index argument is -1, this\n   * signals that the iterator should be run to the end and\n   * completely fill the cache.\n   *\n   * @param index The index to run to, or -1 if the iterator should be run\n   *              to the end.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPos(int i)",
    "returnType" : "void",
    "comment" : "\n   * Set the current position in the node set.\n   * \n   * @param i Must be a valid index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int item(int index)",
    "returnType" : "int",
    "comment" : "\n   * Returns the <code>node handle</code> of an item in the collection. If\n   * <code>index</code> is greater than or equal to the number of nodes in\n   * the list, this returns <code>null</code>.\n   *\n   * @param index of the item.\n   * @return The node handle at the <code>index</code>th position in the\n   *   <code>DTMIterator</code>, or <code>-1</code> if that is not a valid\n   *   index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setItem(int node, int index)",
    "returnType" : "void",
    "comment" : "\n   * Sets the node at the specified index of this vector to be the\n   * specified node. The previous component at that position is discarded.\n   *\n   * <p>The index must be a value greater than or equal to 0 and less\n   * than the current size of the vector.  \n   * The iterator must be in cached mode.</p>\n   * \n   * <p>Meant to be used for sorted iterators.</p>\n   *\n   * @param node Node to set\n   * @param index Index of where to set the node\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * The number of nodes in the list. The range of valid child node indices\n   * is 0 to <code>length-1</code> inclusive. Note that this requires running\n   * the iterator to completion, and presumably filling the cache.\n   *\n   * @return The number of nodes in the list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator cloneWithReset() throws CloneNotSupportedException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Get a cloned Iterator that is reset to the start of the iteration.\n   *\n   * @return A clone of this iteration that has been reset.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a clone of this iterator, but don't reset the iteration in the \n   * process, so that it may be used from the current position.\n   *\n   * @return A clone of this object.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * \n   * @return true if all the nodes in the iteration well be returned in document \n   * order.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DTM getDTM(int nodeHandle)", "public DTMManager getDTMManager()", "public int getRoot()", "public void setRoot(int nodeHandle, Object environment)", "public void reset()", "public int getWhatToShow()", "public boolean getExpandEntityReferences()", "public int nextNode()", "public int previousNode()", "public void detach()", "public void allowDetachToRelease(boolean allowRelease)", "public int getCurrentNode()", "public boolean isFresh()", "public void setShouldCacheNodes(boolean b)", "public boolean isMutable()", "public int getCurrentPos()", "public void runTo(int index)", "public void setCurrentPos(int i)", "public int item(int index)", "public void setItem(int node, int index)", "public int getLength()", "public DTMIterator cloneWithReset() throws CloneNotSupportedException", "public Object clone() throws CloneNotSupportedException", "public boolean isDocOrdered()", "public int getAxis()" ],
  "variableNames" : [ "FILTER_ACCEPT", "FILTER_REJECT", "FILTER_SKIP" ]
}