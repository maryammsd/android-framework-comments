{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/UUID.java",
  "packageName" : "java.util",
  "className" : "UUID",
  "comment" : "\n * A class that represents an immutable universally unique identifier (UUID).\n * A UUID represents a 128-bit value.\n *\n * <p> There exist different variants of these global identifiers.  The methods\n * of this class are for manipulating the Leach-Salz variant, although the\n * constructors allow the creation of any variant of UUID (described below).\n *\n * <p> The layout of a variant 2 (Leach-Salz) UUID is as follows:\n *\n * The most significant long consists of the following unsigned fields:\n * <pre>\n * 0xFFFFFFFF00000000 time_low\n * 0x00000000FFFF0000 time_mid\n * 0x000000000000F000 version\n * 0x0000000000000FFF time_hi\n * </pre>\n * The least significant long consists of the following unsigned fields:\n * <pre>\n * 0xC000000000000000 variant\n * 0x3FFF000000000000 clock_seq\n * 0x0000FFFFFFFFFFFF node\n * </pre>\n *\n * <p> The variant field contains a value which identifies the layout of the\n * {@code UUID}.  The bit layout described above is valid only for a {@code\n * UUID} with a variant value of 2, which indicates the Leach-Salz variant.\n *\n * <p> The version field holds a value that describes the type of this {@code\n * UUID}.  There are four different basic types of UUIDs: time-based, DCE\n * security, name-based, and randomly generated UUIDs.  These types have a\n * version value of 1, 2, 3 and 4, respectively.\n *\n * <p> For more information including algorithms used to create {@code UUID}s,\n * see <a href=\"http://www.ietf.org/rfc/rfc4122.txt\"> <i>RFC&nbsp;4122: A\n * Universally Unique IDentifier (UUID) URN Namespace</i></a>, section 4.2\n * &quot;Algorithms for Creating a Time-Based UUID&quot;.\n *\n * @since   1.5\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Explicit serialVersionUID for interoperability.\n     ",
    "links" : [ ]
  }, {
    "name" : "mostSigBits",
    "type" : "long",
    "comment" : "\n     * The most significant 64 bits of this UUID.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "leastSigBits",
    "type" : "long",
    "comment" : "\n     * The least significant 64 bits of this UUID.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "NIBBLES",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENABLE_STRICT_VALIDATION",
    "type" : "long",
    "comment" : "\n     * Since Android 14 {@link #fromString} does more strict input argument\n     * validation.\n     *\n     * This flag is enabled for apps targeting Android 14+.\n     *\n     * @hide\n     ",
    "links" : [ "#fromString" ]
  } ],
  "methods" : [ {
    "name" : "public static UUID randomUUID()",
    "returnType" : "UUID",
    "comment" : "\n     * Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n     *\n     * The {@code UUID} is generated using a cryptographically strong pseudo\n     * random number generator.\n     *\n     * @return  A randomly generated {@code UUID}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UUID nameUUIDFromBytes(byte[] name)",
    "returnType" : "UUID",
    "comment" : "\n     * Static factory to retrieve a type 3 (name based) {@code UUID} based on\n     * the specified byte array.\n     *\n     * @param  name\n     *         A byte array to be used to construct a {@code UUID}\n     *\n     * @return  A {@code UUID} generated from the specified array\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long parse4Nibbles(String name, int pos)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static UUID fromString(String name)",
    "returnType" : "UUID",
    "comment" : "\n     * Creates a {@code UUID} from the string standard representation as\n     * described in the {@link #toString} method.\n     *\n     * @param  name\n     *         A string that specifies a {@code UUID}\n     *\n     * @return  A {@code UUID} with the specified value\n     *\n     * @throws  IllegalArgumentException\n     *          If name does not conform to the string representation as\n     *          described in {@link #toString}\n     *\n     ",
    "links" : [ "#toString" ]
  }, {
    "name" : "public static UUID fromStringCurrentJava(String name)",
    "returnType" : "UUID",
    "comment" : "\n     * Extracted for testing purposes only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static UUID fromString1(String name)",
    "returnType" : "UUID",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static UUID fromStringJava8(String name)",
    "returnType" : "UUID",
    "comment" : "\n     * Extracted for testing purposes only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLeastSignificantBits()",
    "returnType" : "long",
    "comment" : "\n     * Returns the least significant 64 bits of this UUID's 128 bit value.\n     *\n     * @return  The least significant 64 bits of this UUID's 128 bit value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMostSignificantBits()",
    "returnType" : "long",
    "comment" : "\n     * Returns the most significant 64 bits of this UUID's 128 bit value.\n     *\n     * @return  The most significant 64 bits of this UUID's 128 bit value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int version()",
    "returnType" : "int",
    "comment" : "\n     * The version number associated with this {@code UUID}.  The version\n     * number describes how this {@code UUID} was generated.\n     *\n     * The version number has the following meaning:\n     * <ul>\n     * <li>1    Time-based UUID\n     * <li>2    DCE security UUID\n     * <li>3    Name-based UUID\n     * <li>4    Randomly generated UUID\n     * </ul>\n     *\n     * @return  The version number of this {@code UUID}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int variant()",
    "returnType" : "int",
    "comment" : "\n     * The variant number associated with this {@code UUID}.  The variant\n     * number describes the layout of the {@code UUID}.\n     *\n     * The variant number has the following meaning:\n     * <ul>\n     * <li>0    Reserved for NCS backward compatibility\n     * <li>2    <a href=\"http://www.ietf.org/rfc/rfc4122.txt\">IETF&nbsp;RFC&nbsp;4122</a>\n     * (Leach-Salz), used by this class\n     * <li>6    Reserved, Microsoft Corporation backward compatibility\n     * <li>7    Reserved for future definition\n     * </ul>\n     *\n     * @return  The variant number of this {@code UUID}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long timestamp()",
    "returnType" : "long",
    "comment" : "\n     * The timestamp value associated with this UUID.\n     *\n     * <p> The 60 bit timestamp value is constructed from the time_low,\n     * time_mid, and time_hi fields of this {@code UUID}.  The resulting\n     * timestamp is measured in 100-nanosecond units since midnight,\n     * October 15, 1582 UTC.\n     *\n     * <p> The timestamp value is only meaningful in a time-based UUID, which\n     * has version type 1.  If this {@code UUID} is not a time-based UUID then\n     * this method throws UnsupportedOperationException.\n     *\n     * @throws UnsupportedOperationException\n     *         If this UUID is not a version 1 UUID\n     * @return The timestamp of this {@code UUID}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int clockSequence()",
    "returnType" : "int",
    "comment" : "\n     * The clock sequence value associated with this UUID.\n     *\n     * <p> The 14 bit clock sequence value is constructed from the clock\n     * sequence field of this UUID.  The clock sequence field is used to\n     * guarantee temporal uniqueness in a time-based UUID.\n     *\n     * <p> The {@code clockSequence} value is only meaningful in a time-based\n     * UUID, which has version type 1.  If this UUID is not a time-based UUID\n     * then this method throws UnsupportedOperationException.\n     *\n     * @return  The clock sequence of this {@code UUID}\n     *\n     * @throws  UnsupportedOperationException\n     *          If this UUID is not a version 1 UUID\n     ",
    "links" : [ ]
  }, {
    "name" : "public long node()",
    "returnType" : "long",
    "comment" : "\n     * The node value associated with this UUID.\n     *\n     * <p> The 48 bit node value is constructed from the node field of this\n     * UUID.  This field is intended to hold the IEEE 802 address of the machine\n     * that generated this UUID to guarantee spatial uniqueness.\n     *\n     * <p> The node value is only meaningful in a time-based UUID, which has\n     * version type 1.  If this UUID is not a time-based UUID then this method\n     * throws UnsupportedOperationException.\n     *\n     * @return  The node value of this {@code UUID}\n     *\n     * @throws  UnsupportedOperationException\n     *          If this UUID is not a version 1 UUID\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing this {@code UUID}.\n     *\n     * <p> The UUID string representation is as described by this BNF:\n     * <blockquote><pre>\n     * {@code\n     * UUID                   = <time_low> \"-\" <time_mid> \"-\"\n     *                          <time_high_and_version> \"-\"\n     *                          <variant_and_sequence> \"-\"\n     *                          <node>\n     * time_low               = 4*<hexOctet>\n     * time_mid               = 2*<hexOctet>\n     * time_high_and_version  = 2*<hexOctet>\n     * variant_and_sequence   = 2*<hexOctet>\n     * node                   = 6*<hexOctet>\n     * hexOctet               = <hexDigit><hexDigit>\n     * hexDigit               =\n     *       \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n     *       | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n     *       | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n     * }</pre></blockquote>\n     *\n     * @return  A string representation of this {@code UUID}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String digits(long val, int digits)",
    "returnType" : "String",
    "comment" : " Returns val represented by the specified number of hex digits. ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code UUID}.\n     *\n     * @return  A hash code value for this {@code UUID}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null}, is a {@code UUID}\n     * object, has the same variant, and contains the same value, bit for bit,\n     * as this {@code UUID}.\n     *\n     * @param  obj\n     *         The object to be compared\n     *\n     * @return  {@code true} if the objects are the same; {@code false}\n     *          otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(UUID val)",
    "returnType" : "int",
    "comment" : "\n     * Compares this UUID with the specified UUID.\n     *\n     * <p> The first of two UUIDs is greater than the second if the most\n     * significant field in which the UUIDs differ is greater for the first\n     * UUID.\n     *\n     * @param  val\n     *         {@code UUID} to which this {@code UUID} is to be compared\n     *\n     * @return  -1, 0 or 1 as this {@code UUID} is less than, equal to, or\n     *          greater than {@code val}\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static UUID randomUUID()", "public static UUID nameUUIDFromBytes(byte[] name)", "private static long parse4Nibbles(String name, int pos)", "public static UUID fromString(String name)", "public static UUID fromStringCurrentJava(String name)", "private static UUID fromString1(String name)", "public static UUID fromStringJava8(String name)", "public long getLeastSignificantBits()", "public long getMostSignificantBits()", "public int version()", "public int variant()", "public long timestamp()", "public int clockSequence()", "public long node()", "public String toString()", "private static String digits(long val, int digits)", "public int hashCode()", "public boolean equals(Object obj)", "public int compareTo(UUID val)" ],
  "variableNames" : [ "serialVersionUID", "mostSigBits", "leastSigBits", "NIBBLES", "ENABLE_STRICT_VALIDATION" ]
}