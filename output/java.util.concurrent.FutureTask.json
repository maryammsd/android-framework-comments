{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/FutureTask.java",
  "packageName" : "java.util.concurrent",
  "className" : "FutureTask",
  "comment" : "\n * A cancellable asynchronous computation.  This class provides a base\n * implementation of {@link Future}, with methods to start and cancel\n * a computation, query to see if the computation is complete, and\n * retrieve the result of the computation.  The result can only be\n * retrieved when the computation has completed; the {@code get}\n * methods will block if the computation has not yet completed.  Once\n * the computation has completed, the computation cannot be restarted\n * or cancelled (unless the computation is invoked using\n * {@link #runAndReset}).\n *\n * <p>A {@code FutureTask} can be used to wrap a {@link Callable} or\n * {@link Runnable} object.  Because {@code FutureTask} implements\n * {@code Runnable}, a {@code FutureTask} can be submitted to an\n * {@link Executor} for execution.\n *\n * <p>In addition to serving as a standalone class, this class provides\n * {@code protected} functionality that may be useful when creating\n * customized task classes.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <V> The result type returned by this FutureTask's {@code get} methods\n ",
  "links" : [ "java.util.concurrent.Future", "java.util.concurrent.Executor", "Runnable", "java.util.concurrent.Callable", "#runAndReset" ],
  "variables" : [ {
    "name" : "state",
    "type" : "int",
    "comment" : "\n     * The run state of this task, initially NEW.  The run state\n     * transitions to a terminal state only in methods set,\n     * setException, and cancel.  During completion, state may take on\n     * transient values of COMPLETING (while outcome is being set) or\n     * INTERRUPTING (only while interrupting the runner to satisfy a\n     * cancel(true)). Transitions from these intermediate to final\n     * states use cheaper ordered/lazy writes because values are unique\n     * and cannot be further modified.\n     *\n     * Possible state transitions:\n     * NEW -> COMPLETING -> NORMAL\n     * NEW -> COMPLETING -> EXCEPTIONAL\n     * NEW -> CANCELLED\n     * NEW -> INTERRUPTING -> INTERRUPTED\n     ",
    "links" : [ ]
  }, {
    "name" : "NEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPLETING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NORMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXCEPTIONAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANCELLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTERRUPTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTERRUPTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "callable",
    "type" : "Callable<V>",
    "comment" : " The underlying callable; nulled out after running ",
    "links" : [ ]
  }, {
    "name" : "outcome",
    "type" : "Object",
    "comment" : " non-volatile, protected by state reads/writes",
    "links" : [ ]
  }, {
    "name" : "runner",
    "type" : "Thread",
    "comment" : " The thread running the callable; CASed during run() ",
    "links" : [ ]
  }, {
    "name" : "waiters",
    "type" : "WaitNode",
    "comment" : " Treiber stack of waiting threads ",
    "links" : [ ]
  }, {
    "name" : "STATE",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  }, {
    "name" : "RUNNER",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WAITERS",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private V report(int s) throws ExecutionException",
    "returnType" : "V",
    "comment" : "\n     * Returns result or throws exception for completed task.\n     *\n     * @param s completed state value\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCancelled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean cancel(boolean mayInterruptIfRunning)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public V get() throws InterruptedException, ExecutionException",
    "returnType" : "V",
    "comment" : "\n     * @throws CancellationException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",
    "returnType" : "V",
    "comment" : "\n     * @throws CancellationException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void done()",
    "returnType" : "void",
    "comment" : "\n     * Protected method invoked when this task transitions to state\n     * {@code isDone} (whether normally or via cancellation). The\n     * default implementation does nothing.  Subclasses may override\n     * this method to invoke completion callbacks or perform\n     * bookkeeping. Note that you can query status inside the\n     * implementation of this method to determine whether this task\n     * has been cancelled.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void set(V v)",
    "returnType" : "void",
    "comment" : "\n     * Sets the result of this future to the given value unless\n     * this future has already been set or has been cancelled.\n     *\n     * <p>This method is invoked internally by the {@link #run} method\n     * upon successful completion of the computation.\n     *\n     * @param v the value\n     ",
    "links" : [ "#run" ]
  }, {
    "name" : "protected void setException(Throwable t)",
    "returnType" : "void",
    "comment" : "\n     * Causes this future to report an {@link ExecutionException}\n     * with the given throwable as its cause, unless this future has\n     * already been set or has been cancelled.\n     *\n     * <p>This method is invoked internally by the {@link #run} method\n     * upon failure of the computation.\n     *\n     * @param t the cause of failure\n     ",
    "links" : [ "java.util.concurrent.ExecutionException", "#run" ]
  }, {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean runAndReset()",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the computation without setting its result, and then\n     * resets this future to initial state, failing to do so if the\n     * computation encounters an exception or is cancelled.  This is\n     * designed for use with tasks that intrinsically execute more\n     * than once.\n     *\n     * @return {@code true} if successfully run and reset\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handlePossibleCancellationInterrupt(int s)",
    "returnType" : "void",
    "comment" : "\n     * Ensures that any interrupt from a possible cancel(true) is only\n     * delivered to a task while in run or runAndReset.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void finishCompletion()",
    "returnType" : "void",
    "comment" : "\n     * Removes and signals all waiting threads, invokes done(), and\n     * nulls out callable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int awaitDone(boolean timed, long nanos) throws InterruptedException",
    "returnType" : "int",
    "comment" : "\n     * Awaits completion or aborts on interrupt or timeout.\n     *\n     * @param timed true if use timed waits\n     * @param nanos time to wait, if timed\n     * @return state upon completion or at timeout\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeWaiter(WaitNode node)",
    "returnType" : "void",
    "comment" : "\n     * Tries to unlink a timed-out or interrupted wait node to avoid\n     * accumulating garbage.  Internal nodes are simply unspliced\n     * without CAS since it is harmless if they are traversed anyway\n     * by releasers.  To avoid effects of unsplicing from already\n     * removed nodes, the list is retraversed in case of an apparent\n     * race.  This is slow when there are a lot of nodes, but we don't\n     * expect lists to be long enough to outweigh higher-overhead\n     * schemes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this FutureTask.\n     *\n     * @implSpec\n     * The default implementation returns a string identifying this\n     * FutureTask, as well as its completion state.  The state, in\n     * brackets, contains one of the strings {@code \"Completed Normally\"},\n     * {@code \"Completed Exceptionally\"}, {@code \"Cancelled\"}, or {@code\n     * \"Not completed\"}.\n     *\n     * @return a string representation of this FutureTask\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private V report(int s) throws ExecutionException", "public boolean isCancelled()", "public boolean isDone()", "public boolean cancel(boolean mayInterruptIfRunning)", "public V get() throws InterruptedException, ExecutionException", "public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException", "protected void done()", "protected void set(V v)", "protected void setException(Throwable t)", "public void run()", "protected boolean runAndReset()", "private void handlePossibleCancellationInterrupt(int s)", "private void finishCompletion()", "private int awaitDone(boolean timed, long nanos) throws InterruptedException", "private void removeWaiter(WaitNode node)", "public String toString()" ],
  "variableNames" : [ "state", "NEW", "COMPLETING", "NORMAL", "EXCEPTIONAL", "CANCELLED", "INTERRUPTING", "INTERRUPTED", "callable", "outcome", "runner", "waiters", "STATE", "RUNNER", "WAITERS" ]
}