{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/Base64.java",
  "packageName" : "android.util",
  "className" : "Base64",
  "comment" : "\n * Utilities for encoding and decoding the Base64 representation of\n * binary data.  See RFCs <a\n * href=\"http://www.ietf.org/rfc/rfc2045.txt\">2045</a> and <a\n * href=\"http://www.ietf.org/rfc/rfc3548.txt\">3548</a>.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default values for encoder/decoder flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_PADDING",
    "type" : "int",
    "comment" : "\n     * Encoder flag bit to omit the padding '=' characters at the end\n     * of the output (if any).\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_WRAP",
    "type" : "int",
    "comment" : "\n     * Encoder flag bit to omit all line terminators (i.e., the output\n     * will be on one long line).\n     ",
    "links" : [ ]
  }, {
    "name" : "CRLF",
    "type" : "int",
    "comment" : "\n     * Encoder flag bit to indicate lines should be terminated with a\n     * CRLF pair instead of just an LF.  Has no effect if {@code\n     * NO_WRAP} is specified as well.\n     ",
    "links" : [ ]
  }, {
    "name" : "URL_SAFE",
    "type" : "int",
    "comment" : "\n     * Encoder/decoder flag bit to indicate using the \"URL and\n     * filename safe\" variant of Base64 (see RFC 3548 section 4) where\n     * {@code -} and {@code _} are used in place of {@code +} and\n     * {@code /}.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_CLOSE",
    "type" : "int",
    "comment" : "\n     * Flag to pass to {@link Base64OutputStream} to indicate that it\n     * should not close the output stream it is wrapping when it\n     * itself is closed.\n     ",
    "links" : [ "android.util.Base64OutputStream" ]
  } ],
  "methods" : [ {
    "name" : "public static byte[] decode(String str, int flags)",
    "returnType" : "byte[]",
    "comment" : "\n     * Decode the Base64-encoded data in input and return the data in\n     * a new byte array.\n     *\n     * <p>The padding '=' characters at the end are considered optional, but\n     * if any are present, there must be the correct number of them.\n     *\n     * @param str    the input String to decode, which is converted to\n     *               bytes using the default charset\n     * @param flags  controls certain features of the decoded output.\n     *               Pass {@code DEFAULT} to decode standard Base64.\n     *\n     * @throws IllegalArgumentException if the input contains\n     * incorrect padding\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(byte[] input, int flags)",
    "returnType" : "byte[]",
    "comment" : "\n     * Decode the Base64-encoded data in input and return the data in\n     * a new byte array.\n     *\n     * <p>The padding '=' characters at the end are considered optional, but\n     * if any are present, there must be the correct number of them.\n     *\n     * @param input the input array to decode\n     * @param flags  controls certain features of the decoded output.\n     *               Pass {@code DEFAULT} to decode standard Base64.\n     *\n     * @throws IllegalArgumentException if the input contains\n     * incorrect padding\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(byte[] input, int offset, int len, int flags)",
    "returnType" : "byte[]",
    "comment" : "\n     * Decode the Base64-encoded data in input and return the data in\n     * a new byte array.\n     *\n     * <p>The padding '=' characters at the end are considered optional, but\n     * if any are present, there must be the correct number of them.\n     *\n     * @param input  the data to decode\n     * @param offset the position within the input array at which to start\n     * @param len    the number of bytes of input to decode\n     * @param flags  controls certain features of the decoded output.\n     *               Pass {@code DEFAULT} to decode standard Base64.\n     *\n     * @throws IllegalArgumentException if the input contains\n     * incorrect padding\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encodeToString(byte[] input, int flags)",
    "returnType" : "String",
    "comment" : "\n     * Base64-encode the given data and return a newly allocated\n     * String with the result.\n     *\n     * @param input  the data to encode\n     * @param flags  controls certain features of the encoded output.\n     *               Passing {@code DEFAULT} results in output that\n     *               adheres to RFC 2045.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encodeToString(byte[] input, int offset, int len, int flags)",
    "returnType" : "String",
    "comment" : "\n     * Base64-encode the given data and return a newly allocated\n     * String with the result.\n     *\n     * @param input  the data to encode\n     * @param offset the position within the input array at which to\n     *               start\n     * @param len    the number of bytes of input to encode\n     * @param flags  controls certain features of the encoded output.\n     *               Passing {@code DEFAULT} results in output that\n     *               adheres to RFC 2045.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] encode(byte[] input, int flags)",
    "returnType" : "byte[]",
    "comment" : "\n     * Base64-encode the given data and return a newly allocated\n     * byte[] with the result.\n     *\n     * @param input  the data to encode\n     * @param flags  controls certain features of the encoded output.\n     *               Passing {@code DEFAULT} results in output that\n     *               adheres to RFC 2045.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] encode(byte[] input, int offset, int len, int flags)",
    "returnType" : "byte[]",
    "comment" : "\n     * Base64-encode the given data and return a newly allocated\n     * byte[] with the result.\n     *\n     * @param input  the data to encode\n     * @param offset the position within the input array at which to\n     *               start\n     * @param len    the number of bytes of input to encode\n     * @param flags  controls certain features of the encoded output.\n     *               Passing {@code DEFAULT} results in output that\n     *               adheres to RFC 2045.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static byte[] decode(String str, int flags)", "public static byte[] decode(byte[] input, int flags)", "public static byte[] decode(byte[] input, int offset, int len, int flags)", "public static String encodeToString(byte[] input, int flags)", "public static String encodeToString(byte[] input, int offset, int len, int flags)", "public static byte[] encode(byte[] input, int flags)", "public static byte[] encode(byte[] input, int offset, int len, int flags)" ],
  "variableNames" : [ "DEFAULT", "NO_PADDING", "NO_WRAP", "CRLF", "URL_SAFE", "NO_CLOSE" ]
}