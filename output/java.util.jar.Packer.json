{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/Pack200.java",
  "packageName" : "java.util.jar",
  "className" : "Packer",
  "comment" : "\n     * The packer engine applies various transformations to the input JAR file,\n     * making the pack stream highly compressible by a compressor such as\n     * gzip or zip. An instance of the engine can be obtained\n     * using {@link #newPacker}.\n\n     * The high degree of compression is achieved\n     * by using a number of techniques described in the JSR 200 specification.\n     * Some of the techniques are sorting, re-ordering and co-location of the\n     * constant pool.\n     * <p>\n     * The pack engine is initialized to an initial state as described\n     * by their properties below.\n     * The initial state can be manipulated by getting the\n     * engine properties (using {@link #properties}) and storing\n     * the modified properties on the map.\n     * The resource files will be passed through with no changes at all.\n     * The class files will not contain identical bytes, since the unpacker\n     * is free to change minor class file features such as constant pool order.\n     * However, the class files will be semantically identical,\n     * as specified in\n     * <cite>The Java&trade; Virtual Machine Specification</cite>.\n     * <p>\n     * By default, the packer does not change the order of JAR elements.\n     * Also, the modification time and deflation hint of each\n     * JAR element is passed unchanged.\n     * (Any other ZIP-archive information, such as extra attributes\n     * giving Unix file permissions, are lost.)\n     * <p>\n     * Note that packing and unpacking a JAR will in general alter the\n     * bytewise contents of classfiles in the JAR.  This means that packing\n     * and unpacking will in general invalidate any digital signatures\n     * which rely on bytewise images of JAR elements.  In order both to sign\n     * and to pack a JAR, you must first pack and unpack the JAR to\n     * \"normalize\" it, then compute signatures on the unpacked JAR elements,\n     * and finally repack the signed JAR.\n     * Both packing steps should\n     * use precisely the same options, and the segment limit may also\n     * need to be set to \"-1\", to prevent accidental variation of segment\n     * boundaries as class file sizes change slightly.\n     * <p>\n     * (Here's why this works:  Any reordering the packer does\n     * of any classfile structures is idempotent, so the second packing\n     * does not change the orderings produced by the first packing.\n     * Also, the unpacker is guaranteed by the JSR 200 specification\n     * to produce a specific bytewise image for any given transmission\n     * ordering of archive elements.)\n     * <p>\n     * In order to maintain backward compatibility, the pack file's version is\n     * set to accommodate the class files present in the input JAR file. In\n     * other words, the pack file version will be the latest, if the class files\n     * are the latest and conversely the pack file version will be the oldest\n     * if the class file versions are also the oldest. For intermediate class\n     * file versions the corresponding pack file version will be used.\n     * For example:\n     *    If the input JAR-files are solely comprised of 1.5  (or  lesser)\n     * class files, a 1.5 compatible pack file is  produced. This will also be\n     * the case for archives that have no class files.\n     *    If the input JAR-files contains a 1.6 class file, then the pack file\n     * version will be set to 1.6.\n     * <p>\n     * Note: Unless otherwise noted, passing a <tt>null</tt> argument to a\n     * constructor or method in this class will cause a {@link NullPointerException}\n     * to be thrown.\n     * <p>\n     * @since 1.5\n     ",
  "links" : [ "#newPacker", "NullPointerException", "#properties" ],
  "variables" : [ {
    "name" : "SEGMENT_LIMIT",
    "type" : "String",
    "comment" : "\n         * This property is a numeral giving the estimated target size N\n         * (in bytes) of each archive segment.\n         * If a single input file requires more than N bytes,\n         * it will be given its own archive segment.\n         * <p>\n         * As a special case, a value of -1 will produce a single large\n         * segment with all input files, while a value of 0 will\n         * produce one segment for each class.\n         * Larger archive segments result in less fragmentation and\n         * better compression, but processing them requires more memory.\n         * <p>\n         * The size of each segment is estimated by counting the size of each\n         * input file to be transmitted in the segment, along with the size\n         * of its name and other transmitted properties.\n         * <p>\n         * The default is -1, which means the packer will always create a single\n         * segment output file. In cases where extremely large output files are\n         * generated, users are strongly encouraged to use segmenting or break\n         * up the input file into smaller JARs.\n         * <p>\n         * A 10Mb JAR packed without this limit will\n         * typically pack about 10% smaller, but the packer may require\n         * a larger Java heap (about ten times the segment limit).\n         ",
    "links" : [ ]
  }, {
    "name" : "KEEP_FILE_ORDER",
    "type" : "String",
    "comment" : "\n         * If this property is set to {@link #TRUE}, the packer will transmit\n         * all elements in their original order within the source archive.\n         * <p>\n         * If it is set to {@link #FALSE}, the packer may reorder elements,\n         * and also remove JAR directory entries, which carry no useful\n         * information for Java applications.\n         * (Typically this enables better compression.)\n         * <p>\n         * The default is {@link #TRUE}, which preserves the input information,\n         * but may cause the transmitted archive to be larger than necessary.\n         ",
    "links" : [ "#FALSE", "#TRUE" ]
  }, {
    "name" : "EFFORT",
    "type" : "String",
    "comment" : "\n         * If this property is set to a single decimal digit, the packer will\n         * use the indicated amount of effort in compressing the archive.\n         * Level 1 may produce somewhat larger size and faster compression speed,\n         * while level 9 will take much longer but may produce better compression.\n         * <p>\n         * The special value 0 instructs the packer to copy through the\n         * original JAR file directly, with no compression.  The JSR 200\n         * standard requires any unpacker to understand this special case\n         * as a pass-through of the entire archive.\n         * <p>\n         * The default is 5, investing a modest amount of time to\n         * produce reasonable compression.\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFLATE_HINT",
    "type" : "String",
    "comment" : "\n         * If this property is set to {@link #TRUE} or {@link #FALSE}, the packer\n         * will set the deflation hint accordingly in the output archive, and\n         * will not transmit the individual deflation hints of archive elements.\n         * <p>\n         * If this property is set to the special string {@link #KEEP}, the packer\n         * will attempt to determine an independent deflation hint for each\n         * available element of the input archive, and transmit this hint separately.\n         * <p>\n         * The default is {@link #KEEP}, which preserves the input information,\n         * but may cause the transmitted archive to be larger than necessary.\n         * <p>\n         * It is up to the unpacker implementation\n         * to take action upon the hint to suitably compress the elements of\n         * the resulting unpacked jar.\n         * <p>\n         * The deflation hint of a ZIP or JAR element indicates\n         * whether the element was deflated or stored directly.\n         ",
    "links" : [ "#FALSE", "#TRUE", "#KEEP" ]
  }, {
    "name" : "MODIFICATION_TIME",
    "type" : "String",
    "comment" : "\n         * If this property is set to the special string {@link #LATEST},\n         * the packer will attempt to determine the latest modification time,\n         * among all the available entries in the original archive or the latest\n         * modification time of all the available entries in each segment.\n         * This single value will be transmitted as part of the segment and applied\n         * to all the entries in each segment, {@link #SEGMENT_LIMIT}.\n         * <p>\n         * This can marginally decrease the transmitted size of the\n         * archive, at the expense of setting all installed files to a single\n         * date.\n         * <p>\n         * If this property is set to the special string {@link #KEEP},\n         * the packer transmits a separate modification time for each input\n         * element.\n         * <p>\n         * The default is {@link #KEEP}, which preserves the input information,\n         * but may cause the transmitted archive to be larger than necessary.\n         * <p>\n         * It is up to the unpacker implementation to take action to suitably\n         * set the modification time of each element of its output file.\n         * @see #SEGMENT_LIMIT\n         ",
    "links" : [ "#SEGMENT_LIMIT", "#KEEP", "#LATEST" ]
  }, {
    "name" : "PASS_FILE_PFX",
    "type" : "String",
    "comment" : "\n         * Indicates that a file should be passed through bytewise, with no\n         * compression.  Multiple files may be specified by specifying\n         * additional properties with distinct strings appended, to\n         * make a family of properties with the common prefix.\n         * <p>\n         * There is no pathname transformation, except\n         * that the system file separator is replaced by the JAR file\n         * separator '/'.\n         * <p>\n         * The resulting file names must match exactly as strings with their\n         * occurrences in the JAR file.\n         * <p>\n         * If a property value is a directory name, all files under that\n         * directory will be passed also.\n         * <p>\n         * Examples:\n         * <pre>{@code\n         *     Map p = packer.properties();\n         *     p.put(PASS_FILE_PFX+0, \"mutants/Rogue.class\");\n         *     p.put(PASS_FILE_PFX+1, \"mutants/Wolverine.class\");\n         *     p.put(PASS_FILE_PFX+2, \"mutants/Storm.class\");\n         *     # Pass all files in an entire directory hierarchy:\n         *     p.put(PASS_FILE_PFX+3, \"police/\");\n         * }</pre>\n         ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_ATTRIBUTE",
    "type" : "String",
    "comment" : "\n         * Indicates the action to take when a class-file containing an unknown\n         * attribute is encountered.  Possible values are the strings {@link #ERROR},\n         * {@link #STRIP}, and {@link #PASS}.\n         * <p>\n         * The string {@link #ERROR} means that the pack operation\n         * as a whole will fail, with an exception of type <code>IOException</code>.\n         * The string\n         * {@link #STRIP} means that the attribute will be dropped.\n         * The string\n         * {@link #PASS} means that the whole class-file will be passed through\n         * (as if it were a resource file) without compression, with  a suitable warning.\n         * This is the default value for this property.\n         * <p>\n         * Examples:\n         * <pre>{@code\n         *     Map p = pack200.getProperties();\n         *     p.put(UNKNOWN_ATTRIBUTE, ERROR);\n         *     p.put(UNKNOWN_ATTRIBUTE, STRIP);\n         *     p.put(UNKNOWN_ATTRIBUTE, PASS);\n         * }</pre>\n         ",
    "links" : [ "#PASS", "#STRIP", "#ERROR" ]
  }, {
    "name" : "CLASS_ATTRIBUTE_PFX",
    "type" : "String",
    "comment" : "\n         * When concatenated with a class attribute name,\n         * indicates the format of that attribute,\n         * using the layout language specified in the JSR 200 specification.\n         * <p>\n         * For example, the effect of this option is built in:\n         * <code>pack.class.attribute.SourceFile=RUH</code>.\n         * <p>\n         * The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are\n         * also allowed, with the same meaning as {@link #UNKNOWN_ATTRIBUTE}.\n         * This provides a way for users to request that specific attributes be\n         * refused, stripped, or passed bitwise (with no class compression).\n         * <p>\n         * Code like this might be used to support attributes for JCOV:\n         * <pre><code>\n         *     Map p = packer.properties();\n         *     p.put(CODE_ATTRIBUTE_PFX+\"CoverageTable\",       \"NH[PHHII]\");\n         *     p.put(CODE_ATTRIBUTE_PFX+\"CharacterRangeTable\", \"NH[PHPOHIIH]\");\n         *     p.put(CLASS_ATTRIBUTE_PFX+\"SourceID\",           \"RUH\");\n         *     p.put(CLASS_ATTRIBUTE_PFX+\"CompilationID\",      \"RUH\");\n         * </code></pre>\n         * <p>\n         * Code like this might be used to strip debugging attributes:\n         * <pre><code>\n         *     Map p = packer.properties();\n         *     p.put(CODE_ATTRIBUTE_PFX+\"LineNumberTable\",    STRIP);\n         *     p.put(CODE_ATTRIBUTE_PFX+\"LocalVariableTable\", STRIP);\n         *     p.put(CLASS_ATTRIBUTE_PFX+\"SourceFile\",        STRIP);\n         * </code></pre>\n         ",
    "links" : [ "#PASS", "#STRIP", "#UNKNOWN_ATTRIBUTE", "#ERROR" ]
  }, {
    "name" : "FIELD_ATTRIBUTE_PFX",
    "type" : "String",
    "comment" : "\n         * When concatenated with a field attribute name,\n         * indicates the format of that attribute.\n         * For example, the effect of this option is built in:\n         * <code>pack.field.attribute.Deprecated=</code>.\n         * The special strings {@link #ERROR}, {@link #STRIP}, and\n         * {@link #PASS} are also allowed.\n         * @see #CLASS_ATTRIBUTE_PFX\n         ",
    "links" : [ "#PASS", "#STRIP", "#ERROR" ]
  }, {
    "name" : "METHOD_ATTRIBUTE_PFX",
    "type" : "String",
    "comment" : "\n         * When concatenated with a method attribute name,\n         * indicates the format of that attribute.\n         * For example, the effect of this option is built in:\n         * <code>pack.method.attribute.Exceptions=NH[RCH]</code>.\n         * The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}\n         * are also allowed.\n         * @see #CLASS_ATTRIBUTE_PFX\n         ",
    "links" : [ "#PASS", "#STRIP", "#ERROR" ]
  }, {
    "name" : "CODE_ATTRIBUTE_PFX",
    "type" : "String",
    "comment" : "\n         * When concatenated with a code attribute name,\n         * indicates the format of that attribute.\n         * For example, the effect of this option is built in:\n         * <code>pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]</code>.\n         * The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}\n         * are also allowed.\n         * @see #CLASS_ATTRIBUTE_PFX\n         ",
    "links" : [ "#PASS", "#STRIP", "#ERROR" ]
  }, {
    "name" : "PROGRESS",
    "type" : "String",
    "comment" : "\n         * The unpacker's progress as a percentage, as periodically\n         * updated by the unpacker.\n         * Values of 0 - 100 are normal, and -1 indicates a stall.\n         * Progress can be monitored by polling the value of this\n         * property.\n         * <p>\n         * At a minimum, the unpacker must set progress to 0\n         * at the beginning of a packing operation, and to 100\n         * at the end.\n         ",
    "links" : [ ]
  }, {
    "name" : "KEEP",
    "type" : "String",
    "comment" : " The string \"keep\", a possible value for certain properties.\n         * @see #DEFLATE_HINT\n         * @see #MODIFICATION_TIME\n         ",
    "links" : [ ]
  }, {
    "name" : "PASS",
    "type" : "String",
    "comment" : " The string \"pass\", a possible value for certain properties.\n         * @see #UNKNOWN_ATTRIBUTE\n         * @see #CLASS_ATTRIBUTE_PFX\n         * @see #FIELD_ATTRIBUTE_PFX\n         * @see #METHOD_ATTRIBUTE_PFX\n         * @see #CODE_ATTRIBUTE_PFX\n         ",
    "links" : [ ]
  }, {
    "name" : "STRIP",
    "type" : "String",
    "comment" : " The string \"strip\", a possible value for certain properties.\n         * @see #UNKNOWN_ATTRIBUTE\n         * @see #CLASS_ATTRIBUTE_PFX\n         * @see #FIELD_ATTRIBUTE_PFX\n         * @see #METHOD_ATTRIBUTE_PFX\n         * @see #CODE_ATTRIBUTE_PFX\n         ",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "String",
    "comment" : " The string \"error\", a possible value for certain properties.\n         * @see #UNKNOWN_ATTRIBUTE\n         * @see #CLASS_ATTRIBUTE_PFX\n         * @see #FIELD_ATTRIBUTE_PFX\n         * @see #METHOD_ATTRIBUTE_PFX\n         * @see #CODE_ATTRIBUTE_PFX\n         ",
    "links" : [ ]
  }, {
    "name" : "TRUE",
    "type" : "String",
    "comment" : " The string \"true\", a possible value for certain properties.\n         * @see #KEEP_FILE_ORDER\n         * @see #DEFLATE_HINT\n         ",
    "links" : [ ]
  }, {
    "name" : "FALSE",
    "type" : "String",
    "comment" : " The string \"false\", a possible value for certain properties.\n         * @see #KEEP_FILE_ORDER\n         * @see #DEFLATE_HINT\n         ",
    "links" : [ ]
  }, {
    "name" : "LATEST",
    "type" : "String",
    "comment" : " The string \"latest\", a possible value for certain properties.\n         * @see #MODIFICATION_TIME\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " SortedMap<String, String> properties()",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n         * Get the set of this engine's properties.\n         * This set is a \"live view\", so that changing its\n         * contents immediately affects the Packer engine, and\n         * changes from the engine (such as progress indications)\n         * are immediately visible in the map.\n         *\n         * <p>The property map may contain pre-defined implementation\n         * specific and default properties.  Users are encouraged to\n         * read the information and fully understand the implications,\n         * before modifying pre-existing properties.\n         * <p>\n         * Implementation specific properties are prefixed with a\n         * package name associated with the implementor, beginning\n         * with <tt>com.</tt> or a similar prefix.\n         * All property names beginning with <tt>pack.</tt> and\n         * <tt>unpack.</tt> are reserved for use by this API.\n         * <p>\n         * Unknown properties may be ignored or rejected with an\n         * unspecified error, and invalid entries may cause an\n         * unspecified error to be thrown.\n         *\n         * <p>\n         * The returned map implements all optional {@link SortedMap} operations\n         * @return A sorted association of property key strings to property\n         * values.\n         ",
    "links" : [ "java.util.SortedMap" ]
  }, {
    "name" : " void pack(JarFile in, OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Takes a JarFile and converts it into a Pack200 archive.\n         * <p>\n         * Closes its input but not its output.  (Pack200 archives are appendable.)\n         * @param in a JarFile\n         * @param out an OutputStream\n         * @exception IOException if an error is encountered.\n         ",
    "links" : [ ]
  }, {
    "name" : " void pack(JarInputStream in, OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Takes a JarInputStream and converts it into a Pack200 archive.\n         * <p>\n         * Closes its input but not its output.  (Pack200 archives are appendable.)\n         * <p>\n         * The modification time and deflation hint attributes are not available,\n         * for the JAR manifest file and its containing directory.\n         *\n         * @see #MODIFICATION_TIME\n         * @see #DEFLATE_HINT\n         * @param in a JarInputStream\n         * @param out an OutputStream\n         * @exception IOException if an error is encountered.\n         ",
    "links" : [ ]
  }, {
    "name" : " void addPropertyChangeListener(PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Registers a listener for PropertyChange events on the properties map.\n         * This is typically used by applications to update a progress bar.\n         *\n         * <p> The default implementation of this method does nothing and has\n         * no side-effects.</p>\n         *\n         * <p><b>WARNING:</b> This method is omitted from the interface\n         * declaration in all subset Profiles of Java SE that do not include\n         * the {@code java.beans} package. </p>\n\n         * @see #properties\n         * @see #PROGRESS\n         * @param listener  An object to be invoked when a property is changed.\n         * @deprecated The dependency on {@code PropertyChangeListener} creates\n         *             a significant impediment to future modularization of the\n         *             Java platform. This method will be removed in a future\n         *             release.\n         *             Applications that need to monitor progress of the packer\n         *             can poll the value of the {@link #PROGRESS PROGRESS}\n         *             property instead.\n         ",
    "links" : [ "#PROGRESS" ]
  }, {
    "name" : " void removePropertyChangeListener(PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Remove a listener for PropertyChange events, added by\n         * the {@link #addPropertyChangeListener}.\n         *\n         * <p> The default implementation of this method does nothing and has\n         * no side-effects.</p>\n         *\n         * <p><b>WARNING:</b> This method is omitted from the interface\n         * declaration in all subset Profiles of Java SE that do not include\n         * the {@code java.beans} package. </p>\n         *\n         * @see #addPropertyChangeListener\n         * @param listener  The PropertyChange listener to be removed.\n         * @deprecated The dependency on {@code PropertyChangeListener} creates\n         *             a significant impediment to future modularization of the\n         *             Java platform. This method will be removed in a future\n         *             release.\n         ",
    "links" : [ "#addPropertyChangeListener" ]
  } ],
  "methodNames" : [ " SortedMap<String, String> properties()", " void pack(JarFile in, OutputStream out) throws IOException", " void pack(JarInputStream in, OutputStream out) throws IOException", " void addPropertyChangeListener(PropertyChangeListener listener)", " void removePropertyChangeListener(PropertyChangeListener listener)" ],
  "variableNames" : [ "SEGMENT_LIMIT", "KEEP_FILE_ORDER", "EFFORT", "DEFLATE_HINT", "MODIFICATION_TIME", "PASS_FILE_PFX", "UNKNOWN_ATTRIBUTE", "CLASS_ATTRIBUTE_PFX", "FIELD_ATTRIBUTE_PFX", "METHOD_ATTRIBUTE_PFX", "CODE_ATTRIBUTE_PFX", "PROGRESS", "KEEP", "PASS", "STRIP", "ERROR", "TRUE", "FALSE", "LATEST" ]
}