{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/TetheringManager.java",
  "packageName" : "android.net",
  "className" : "TetheringEventCallback",
  "comment" : "\n     * Callback for use with {@link registerTetheringEventCallback} to find out tethering\n     * upstream status.\n     ",
  "links" : [ "registerTetheringEventCallback" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onTetheringSupported(boolean supported)",
    "returnType" : "void",
    "comment" : "\n         * Called when tethering supported status changed.\n         *\n         * <p>This callback will be called immediately after the callback is\n         * registered, and never be called if there is changes afterward.\n         *\n         * <p>Tethering may be disabled via system properties, device configuration, or device\n         * policy restrictions.\n         *\n         * @param supported whether any tethering type is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onSupportedTetheringTypes(@NonNull Set<Integer> supportedTypes)",
    "returnType" : "void",
    "comment" : "\n         * Called when tethering supported status changed.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         *\n         * <p>Tethering may be disabled via system properties, device configuration, or device\n         * policy restrictions.\n         *\n         * @param supportedTypes a set of @TetheringType which is supported.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void onUpstreamChanged(@Nullable Network network)",
    "returnType" : "void",
    "comment" : "\n         * Called when tethering upstream changed.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         *\n         * @param network the {@link Network} of tethering upstream. Null means tethering doesn't\n         * have any upstream.\n         ",
    "links" : [ "android.net.Network" ]
  }, {
    "name" : " void onTetherableInterfaceRegexpsChanged(@NonNull TetheringInterfaceRegexps reg)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in tethering interface regular expressions.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param reg The new regular expressions.\n         *\n         * @deprecated New clients should use the callbacks with {@link TetheringInterface} which\n         * has the mapping between tethering type and interface. InterfaceRegex is no longer needed\n         * to determine the mapping of tethering type and interface.\n         *\n         * @hide\n         ",
    "links" : [ "android.net.TetheringInterface" ]
  }, {
    "name" : " void onTetherableInterfacesChanged(@NonNull List<String> interfaces)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in the list of tetherable interfaces. Tetherable\n         * interface means this interface is available and can be used for tethering.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param interfaces The list of tetherable interface names.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onTetherableInterfacesChanged(@NonNull Set<TetheringInterface> interfaces)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in the list of tetherable interfaces. Tetherable\n         * interface means this interface is available and can be used for tethering.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param interfaces The set of TetheringInterface of currently tetherable interface.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onTetheredInterfacesChanged(@NonNull List<String> interfaces)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in the list of tethered interfaces.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param interfaces The lit of 0 or more String of currently tethered interface names.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onTetheredInterfacesChanged(@NonNull Set<TetheringInterface> interfaces)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in the list of tethered interfaces.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param interfaces The set of 0 or more TetheringInterface of currently tethered\n         * interface.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onLocalOnlyInterfacesChanged(@NonNull List<String> interfaces)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in the list of local-only interfaces.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param interfaces The list of 0 or more String of active local-only interface names.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onLocalOnlyInterfacesChanged(@NonNull Set<TetheringInterface> interfaces)",
    "returnType" : "void",
    "comment" : "\n         * Called when there was a change in the list of local-only interfaces.\n         *\n         * <p>This will be called immediately after the callback is registered, and may be called\n         * multiple times later upon changes.\n         * @param interfaces The set of 0 or more TetheringInterface of active local-only\n         * interface.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onError(@NonNull String ifName, @TetheringIfaceError int error)",
    "returnType" : "void",
    "comment" : "\n         * Called when an error occurred configuring tethering.\n         *\n         * <p>This will be called immediately after the callback is registered if the latest status\n         * on the interface is an error, and may be called multiple times later upon changes.\n         * @param ifName Name of the interface.\n         * @param error One of {@code TetheringManager#TETHER_ERROR_*}.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onError(@NonNull TetheringInterface iface, @TetheringIfaceError int error)",
    "returnType" : "void",
    "comment" : "\n         * Called when an error occurred configuring tethering.\n         *\n         * <p>This will be called immediately after the callback is registered if the latest status\n         * on the interface is an error, and may be called multiple times later upon changes.\n         * @param iface The interface that experienced the error.\n         * @param error One of {@code TetheringManager#TETHER_ERROR_*}.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onClientsChanged(@NonNull Collection<TetheredClient> clients)",
    "returnType" : "void",
    "comment" : "\n         * Called when the list of tethered clients changes.\n         *\n         * <p>This callback provides best-effort information on connected clients based on state\n         * known to the system, however the list cannot be completely accurate (and should not be\n         * used for security purposes). For example, clients behind a bridge and using static IP\n         * assignments are not visible to the tethering device; or even when using DHCP, such\n         * clients may still be reported by this callback after disconnection as the system cannot\n         * determine if they are still connected.\n         * @param clients The new set of tethered clients; the collection is not ordered.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onOffloadStatusChanged(@TetherOffloadStatus int status)",
    "returnType" : "void",
    "comment" : "\n         * Called when tethering offload status changes.\n         *\n         * <p>This will be called immediately after the callback is registered.\n         * @param status The offload status.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onTetheringSupported(boolean supported)", " void onSupportedTetheringTypes(@NonNull Set<Integer> supportedTypes)", " void onUpstreamChanged(@Nullable Network network)", " void onTetherableInterfaceRegexpsChanged(@NonNull TetheringInterfaceRegexps reg)", " void onTetherableInterfacesChanged(@NonNull List<String> interfaces)", " void onTetherableInterfacesChanged(@NonNull Set<TetheringInterface> interfaces)", " void onTetheredInterfacesChanged(@NonNull List<String> interfaces)", " void onTetheredInterfacesChanged(@NonNull Set<TetheringInterface> interfaces)", " void onLocalOnlyInterfacesChanged(@NonNull List<String> interfaces)", " void onLocalOnlyInterfacesChanged(@NonNull Set<TetheringInterface> interfaces)", " void onError(@NonNull String ifName, @TetheringIfaceError int error)", " void onError(@NonNull TetheringInterface iface, @TetheringIfaceError int error)", " void onClientsChanged(@NonNull Collection<TetheredClient> clients)", " void onOffloadStatusChanged(@TetherOffloadStatus int status)" ],
  "variableNames" : [ ]
}