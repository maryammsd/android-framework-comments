{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/ColorStateListDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "ColorStateListDrawable",
  "comment" : "\n * A Drawable that manages a {@link ColorDrawable} to make it stateful and backed by a\n * {@link ColorStateList}.\n ",
  "variables" : [ {
    "name" : "mColorDrawable",
    "type" : "ColorDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "ColorStateListDrawableState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void draw(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCurrent()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Resources.Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(@IntRange(from = 0, to = 255) int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAlpha()",
    "returnType" : "void",
    "comment" : "\n     * Remove the alpha override, reverting to the alpha defined on each color in the\n     * {@link ColorStateList}.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public void setTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(@Nullable ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorStateList getColorStateList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the ColorStateList backing this Drawable, or a new ColorStateList of the default\n     * ColorDrawable color if one hasn't been defined yet.\n     *\n     * @return a ColorStateList\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorStateList(@NonNull ColorStateList colorStateList)",
    "returnType" : "void",
    "comment" : "\n     * Replace this Drawable's ColorStateList. It is not copied, so changes will propagate on the\n     * next call to {@link #setState(int[])}.\n     *\n     * @param colorStateList A color state list to attach.\n     ",
    "links" : [ "#setState(int" ]
  }, {
    "name" : "private void initializeColorDrawable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mColorDrawable", "mState", "mMutated" ],
  "methodNames" : [ "public void draw(@NonNull Canvas canvas)", "public int getAlpha()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public Drawable getCurrent()", "public void applyTheme(@NonNull Resources.Theme t)", "public boolean canApplyTheme()", "public void setAlpha(@IntRange(from = 0, to = 255) int alpha)", "public void clearAlpha()", "public void setTintList(@Nullable ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public ColorFilter getColorFilter()", "public void setColorFilter(@Nullable ColorFilter colorFilter)", "public int getOpacity()", "protected void onBoundsChange(Rect bounds)", "protected boolean onStateChange(int[] state)", "public void invalidateDrawable(@NonNull Drawable who)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public ConstantState getConstantState()", "public ColorStateList getColorStateList()", "public int getChangingConfigurations()", "public Drawable mutate()", "public void clearMutated()", "public void setColorStateList(@NonNull ColorStateList colorStateList)", "private void initializeColorDrawable()" ]
}