{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/PackageParser.java",
  "packageName" : "android.content.pm",
  "className" : "SigningDetails",
  "comment" : "\n     *  A container for signing-related data of an application package.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "signatures",
    "type" : "Signature[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signatureSchemeVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "publicKeys",
    "type" : "ArraySet<PublicKey>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pastSigningCertificates",
    "type" : "Signature[]",
    "comment" : "\n         * APK Signature Scheme v3 includes support for adding a proof-of-rotation record that\n         * contains two pieces of information:\n         *   1) the past signing certificates\n         *   2) the flags that APK wants to assign to each of the past signing certificates.\n         *\n         * This collection of {@code Signature} objects, each of which is formed from a former\n         * signing certificate of this APK before it was changed by signing certificate rotation,\n         * represents the first piece of information.  It is the APK saying to the rest of the\n         * world: \"hey if you trust the old cert, you can trust me!\"  This is useful, if for\n         * instance, the platform would like to determine whether or not to allow this APK to do\n         * something it would've allowed it to do under the old cert (like upgrade).\n         ",
    "links" : [ ]
  }, {
    "name" : "PAST_CERT_EXISTS",
    "type" : "int",
    "comment" : " special value used to see if cert is in package - not exposed to callers ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN",
    "type" : "SigningDetails",
    "comment" : " A representation of unknown signing details. Use instead of null. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SigningDetails>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SigningDetails mergeLineageWith(SigningDetails otherSigningDetails)",
    "returnType" : "SigningDetails",
    "comment" : "\n         * Merges the signing lineage of this instance with the lineage in the provided {@code\n         * otherSigningDetails} when one has the same or an ancestor signer of the other.\n         *\n         * <p>Merging two signing lineages will result in a new {@code SigningDetails} instance\n         * containing the longest common lineage with the most restrictive capabilities. If the two\n         * lineages contain the same signers with the same capabilities then the instance on which\n         * this was invoked is returned without any changes. Similarly if neither instance has a\n         * lineage, or if neither has the same or an ancestor signer then this instance is returned.\n         *\n         * Following are some example results of this method for lineages with signers A, B, C, D:\n         * - lineage B merged with lineage A -> B returns lineage A -> B.\n         * - lineage A -> B merged with lineage B -> C returns lineage A -> B -> C\n         * - lineage A -> B with the {@code PERMISSION} capability revoked for A merged with\n         *  lineage A -> B with the {@code SHARED_USER_ID} capability revoked for A returns\n         *  lineage A -> B with both capabilities revoked for A.\n         * - lineage A -> B -> C merged with lineage A -> B -> D would return the original lineage\n         *  A -> B -> C since the current signer of both instances is not the same or in the\n         *   lineage of the other.\n         ",
    "links" : [ ]
  }, {
    "name" : "private SigningDetails mergeLineageWithAncestorOrSelf(SigningDetails otherSigningDetails)",
    "returnType" : "SigningDetails",
    "comment" : "\n         * Merges the signing lineage of this instance with the lineage of the ancestor (or same)\n         * signer in the provided {@code otherSigningDetails}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCommonAncestor(SigningDetails otherSigningDetails)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this and the provided {@code otherSigningDetails} share a common\n         * ancestor.\n         *\n         * <p>The two SigningDetails have a common ancestor if any of the following conditions are\n         * met:\n         * - If neither has a lineage and their current signer(s) are equal.\n         * - If only one has a lineage and the signer of the other is the same or in the lineage.\n         * - If both have a lineage and their current signers are the same or one is in the lineage\n         * of the other, and their lineages do not diverge to different signers.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAncestorOrSelfWithDigest(Set<String> certDigests)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this instance is currently signed, or has ever been signed, with a\n         * signing certificate from the provided {@link Set} of {@code certDigests}.\n         *\n         * <p>The provided {@code certDigests} should contain the SHA-256 digest of the DER encoding\n         * of each trusted certificate with the digest characters in upper case. If this instance\n         * has multiple signers then all signers must be in the provided {@code Set}. If this\n         * instance has a signing lineage then this method will return true if any of the previous\n         * signers in the lineage match one of the entries in the {@code Set}.\n         ",
    "links" : [ "android.util.ArraySet" ]
  }, {
    "name" : "private SigningDetails getDescendantOrSelf(SigningDetails otherSigningDetails)",
    "returnType" : "SigningDetails",
    "comment" : "\n         * Returns the SigningDetails with a descendant (or same) signer after verifying the\n         * descendant has the same, a superset, or a subset of the lineage of the ancestor.\n         *\n         * <p>If this instance and the provided {@code otherSigningDetails} do not share an\n         * ancestry, or if their lineages diverge then null is returned to indicate there is no\n         * valid descendant SigningDetails.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSignatures()",
    "returnType" : "boolean",
    "comment" : " Returns true if the signing details have one or more signatures. ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPastSigningCertificates()",
    "returnType" : "boolean",
    "comment" : " Returns true if the signing details have past signing certificates. ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAncestorOrSelf(SigningDetails oldDetails)",
    "returnType" : "boolean",
    "comment" : "\n         * Determines if the provided {@code oldDetails} is an ancestor of or the same as this one.\n         * If the {@code oldDetails} signing certificate appears in our pastSigningCertificates,\n         * then that means it has authorized a signing certificate rotation, which eventually leads\n         * to our certificate, and thus can be trusted. If this method evaluates to true, this\n         * SigningDetails object should be trusted if the previous one is.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAncestor(SigningDetails oldDetails)",
    "returnType" : "boolean",
    "comment" : "\n         * Similar to {@code hasAncestorOrSelf}.  Returns true only if this {@code SigningDetails}\n         * is a descendant of {@code oldDetails}, not if they're the same.  This is used to\n         * determine if this object is newer than the provided one.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCommonSignerWithCapability(SigningDetails otherDetails, @CertCapabilities int flags)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this {@code SigningDetails} has a signer in common with the provided\n         * {@code otherDetails} with the specified {@code flags} capabilities provided by this\n         * signer.\n         *\n         * <p>Note this method allows for the signing lineage to diverge, so this should only be\n         * used for instances where the only requirement is a common signer in the lineage with\n         * the specified capabilities. If the current signer of this instance is an ancestor of\n         * {@code otherDetails} then {@code true} is immediately returned since the current signer\n         * has all capabilities granted.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean checkCapability(SigningDetails oldDetails, @CertCapabilities int flags)",
    "returnType" : "boolean",
    "comment" : "\n         * Determines if the provided {@code oldDetails} is an ancestor of this one, and whether or\n         * not this one grants it the provided capability, represented by the {@code flags}\n         * parameter.  In the event of signing certificate rotation, a package may still interact\n         * with entities signed by its old signing certificate and not want to break previously\n         * functioning behavior.  The {@code flags} value determines which capabilities the app\n         * signed by the newer signing certificate would like to continue to give to its previous\n         * signing certificate(s).\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean checkCapabilityRecover(SigningDetails oldDetails, @CertCapabilities int flags) throws CertificateException",
    "returnType" : "boolean",
    "comment" : "\n         * A special case of {@code checkCapability} which re-encodes both sets of signing\n         * certificates to counteract a previous re-encoding.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCertificate(Signature signature)",
    "returnType" : "boolean",
    "comment" : "\n         * Determine if {@code signature} is in this SigningDetails' signing certificate history,\n         * including the current signer.  Automatically returns false if this object has multiple\n         * signing certificates, since rotation is only supported for single-signers; this is\n         * enforced by {@code hasCertificateInternal}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCertificate(Signature signature, @CertCapabilities int flags)",
    "returnType" : "boolean",
    "comment" : "\n         * Determine if {@code signature} is in this SigningDetails' signing certificate history,\n         * including the current signer, and whether or not it has the given permission.\n         * Certificates which match our current signer automatically get all capabilities.\n         * Automatically returns false if this object has multiple signing certificates, since\n         * rotation is only supported for single-signers.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCertificate(byte[] certificate)",
    "returnType" : "boolean",
    "comment" : " Convenient wrapper for calling {@code hasCertificate} with certificate's raw bytes. ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasCertificateInternal(Signature signature, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean checkCapability(String sha256String, @CertCapabilities int flags)",
    "returnType" : "boolean",
    "comment" : "\n         * Determines if the provided {@code sha256String} is an ancestor of this one, and whether\n         * or not this one grants it the provided capability, represented by the {@code flags}\n         * parameter.  In the event of signing certificate rotation, a package may still interact\n         * with entities signed by its old signing certificate and not want to break previously\n         * functioning behavior.  The {@code flags} value determines which capabilities the app\n         * signed by the newer signing certificate would like to continue to give to its previous\n         * signing certificate(s).\n         *\n         * @param sha256String A hex-encoded representation of a sha256 digest.  In the case of an\n         *                     app with multiple signers, this represents the hex-encoded sha256\n         *                     digest of the combined hex-encoded sha256 digests of each individual\n         *                     signing certificate according to {@link\n         *                     PackageUtils#computeSignaturesSha256Digest(Signature[])}\n         ",
    "links" : [ "android.util.PackageUtils#computeSignaturesSha256Digest(Signature" ]
  }, {
    "name" : "public boolean hasSha256Certificate(byte[] sha256Certificate)",
    "returnType" : "boolean",
    "comment" : "\n         * Determine if the {@code sha256Certificate} is in this SigningDetails' signing certificate\n         * history, including the current signer.  Automatically returns false if this object has\n         * multiple signing certificates, since rotation is only supported for single-signers.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSha256Certificate(byte[] sha256Certificate, @CertCapabilities int flags)",
    "returnType" : "boolean",
    "comment" : "\n         * Determine if the {@code sha256Certificate} certificate hash corresponds to a signing\n         * certificate in this SigningDetails' signing certificate history, including the current\n         * signer, and whether or not it has the given permission.  Certificates which match our\n         * current signer automatically get all capabilities. Automatically returns false if this\n         * object has multiple signing certificates, since rotation is only supported for\n         * single-signers.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasSha256CertificateInternal(byte[] sha256Certificate, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean signaturesMatchExactly(SigningDetails other)",
    "returnType" : "boolean",
    "comment" : " Returns true if the signatures in this and other match exactly. ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SigningDetails mergeLineageWith(SigningDetails otherSigningDetails)", "private SigningDetails mergeLineageWithAncestorOrSelf(SigningDetails otherSigningDetails)", "public boolean hasCommonAncestor(SigningDetails otherSigningDetails)", "public boolean hasAncestorOrSelfWithDigest(Set<String> certDigests)", "private SigningDetails getDescendantOrSelf(SigningDetails otherSigningDetails)", "public boolean hasSignatures()", "public boolean hasPastSigningCertificates()", "public boolean hasAncestorOrSelf(SigningDetails oldDetails)", "public boolean hasAncestor(SigningDetails oldDetails)", "public boolean hasCommonSignerWithCapability(SigningDetails otherDetails, @CertCapabilities int flags)", "public boolean checkCapability(SigningDetails oldDetails, @CertCapabilities int flags)", "public boolean checkCapabilityRecover(SigningDetails oldDetails, @CertCapabilities int flags) throws CertificateException", "public boolean hasCertificate(Signature signature)", "public boolean hasCertificate(Signature signature, @CertCapabilities int flags)", "public boolean hasCertificate(byte[] certificate)", "private boolean hasCertificateInternal(Signature signature, int flags)", "public boolean checkCapability(String sha256String, @CertCapabilities int flags)", "public boolean hasSha256Certificate(byte[] sha256Certificate)", "public boolean hasSha256Certificate(byte[] sha256Certificate, @CertCapabilities int flags)", "private boolean hasSha256CertificateInternal(byte[] sha256Certificate, int flags)", "public boolean signaturesMatchExactly(SigningDetails other)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(@Nullable Object o)", "public int hashCode()" ],
  "variableNames" : [ "signatures", "signatureSchemeVersion", "publicKeys", "pastSigningCertificates", "PAST_CERT_EXISTS", "UNKNOWN", "CREATOR" ]
}