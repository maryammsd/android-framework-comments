{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/animation/AnimationUtils.java",
  "packageName" : "android.view.animation",
  "className" : "AnimationUtils",
  "comment" : "\n * Defines common utilities for working with animations.\n *\n ",
  "variables" : [ {
    "name" : "TOGETHER",
    "type" : "int",
    "comment" : "\n     * These flags are used when parsing AnimatorSet objects\n     ",
    "links" : [ ]
  }, {
    "name" : "SEQUENTIALLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAnimationState",
    "type" : "ThreadLocal<AnimationState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void lockAnimationClock(long vsyncMillis)",
    "returnType" : "void",
    "comment" : "\n     * Locks AnimationUtils{@link #currentAnimationTimeMillis()} to a fixed value for the current\n     * thread. This is used by {@link android.view.Choreographer} to ensure that all accesses\n     * during a vsync update are synchronized to the timestamp of the vsync.\n     *\n     * It is also exposed to tests to allow for rapid, flake-free headless testing.\n     *\n     * Must be followed by a call to {@link #unlockAnimationClock()} to allow time to\n     * progress. Failing to do this will result in stuck animations, scrolls, and flings.\n     *\n     * Note that time is not allowed to \"rewind\" and must perpetually flow forward. So the\n     * lock may fail if the time is in the past from a previously returned value, however\n     * time will be frozen for the duration of the lock. The clock is a thread-local, so\n     * ensure that {@link #lockAnimationClock(long)}, {@link #unlockAnimationClock()}, and\n     * {@link #currentAnimationTimeMillis()} are all called on the same thread.\n     *\n     * This is also not reference counted in any way. Any call to {@link #unlockAnimationClock()}\n     * will unlock the clock for everyone on the same thread. It is therefore recommended\n     * for tests to use their own thread to ensure that there is no collision with any existing\n     * {@link android.view.Choreographer} instance.\n     *\n     * @hide\n     * ",
    "links" : [ "#currentAnimationTimeMillis", "android.view.Choreographer", "#unlockAnimationClock", "#lockAnimationClock", "#unlockAnimationClock", "#currentAnimationTimeMillis", "#unlockAnimationClock", "android.view.Choreographer" ]
  }, {
    "name" : "public static void unlockAnimationClock()",
    "returnType" : "void",
    "comment" : "\n     * Frees the time lock set in place by {@link #lockAnimationClock(long)}. Must be called\n     * to allow the animation clock to self-update.\n     *\n     * @hide\n     ",
    "links" : [ "#lockAnimationClock" ]
  }, {
    "name" : "public static long currentAnimationTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current animation time in milliseconds. This time should be used when invoking\n     * {@link Animation#setStartTime(long)}. Refer to {@link android.os.SystemClock} for more\n     * information about the different available clocks. The clock used by this method is\n     * <em>not</em> the \"wall\" clock (it is not {@link System#currentTimeMillis}).\n     *\n     * @return the current animation time in milliseconds\n     *\n     * @see android.os.SystemClock\n     ",
    "links" : [ "Animation#setStartTime", "android.os.SystemClock", "System#currentTimeMillis" ]
  }, {
    "name" : "public static Animation loadAnimation(Context context, @AnimRes int id) throws NotFoundException",
    "returnType" : "Animation",
    "comment" : "\n     * Loads an {@link Animation} object from a resource\n     *\n     * @param context Application context used to access resources\n     * @param id The resource id of the animation to load\n     * @return The animation object referenced by the specified id\n     * @throws NotFoundException when the animation cannot be loaded\n     ",
    "links" : [ "Animation" ]
  }, {
    "name" : "private static Animation createAnimationFromXml(Context c, XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "Animation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Animation createAnimationFromXml(Context c, XmlPullParser parser, AnimationSet parent, AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "Animation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LayoutAnimationController loadLayoutAnimation(Context context, @AnimRes int id) throws NotFoundException",
    "returnType" : "LayoutAnimationController",
    "comment" : "\n     * Loads a {@link LayoutAnimationController} object from a resource\n     *\n     * @param context Application context used to access resources\n     * @param id The resource id of the animation to load\n     * @return The animation controller object referenced by the specified id\n     * @throws NotFoundException when the layout animation controller cannot be loaded\n     ",
    "links" : [ "LayoutAnimationController" ]
  }, {
    "name" : "private static LayoutAnimationController createLayoutAnimationFromXml(Context c, XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "LayoutAnimationController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static LayoutAnimationController createLayoutAnimationFromXml(Context c, XmlPullParser parser, AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "LayoutAnimationController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Animation makeInAnimation(Context c, boolean fromLeft)",
    "returnType" : "Animation",
    "comment" : "\n     * Make an animation for objects becoming visible. Uses a slide and fade\n     * effect.\n     *\n     * @param c Context for loading resources\n     * @param fromLeft is the object to be animated coming from the left\n     * @return The new animation\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Animation makeOutAnimation(Context c, boolean toRight)",
    "returnType" : "Animation",
    "comment" : "\n     * Make an animation for objects becoming invisible. Uses a slide and fade\n     * effect.\n     *\n     * @param c Context for loading resources\n     * @param toRight is the object to be animated exiting to the right\n     * @return The new animation\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Animation makeInChildBottomAnimation(Context c)",
    "returnType" : "Animation",
    "comment" : "\n     * Make an animation for objects becoming visible. Uses a slide up and fade\n     * effect.\n     *\n     * @param c Context for loading resources\n     * @return The new animation\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Interpolator loadInterpolator(Context context, @AnimRes @InterpolatorRes int id) throws NotFoundException",
    "returnType" : "Interpolator",
    "comment" : "\n     * Loads an {@link Interpolator} object from a resource\n     *\n     * @param context Application context used to access resources\n     * @param id The resource id of the animation to load\n     * @return The interpolator object referenced by the specified id\n     * @throws NotFoundException\n     ",
    "links" : [ "Interpolator" ]
  }, {
    "name" : "public static Interpolator loadInterpolator(Resources res, Theme theme, int id) throws NotFoundException",
    "returnType" : "Interpolator",
    "comment" : "\n     * Loads an {@link Interpolator} object from a resource\n     *\n     * @param res The resources\n     * @param id The resource id of the animation to load\n     * @return The interpolator object referenced by the specified id\n     * @throws NotFoundException\n     * @hide\n     ",
    "links" : [ "Interpolator" ]
  }, {
    "name" : "private static Interpolator createInterpolatorFromXml(Resources res, Theme theme, XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TOGETHER", "SEQUENTIALLY", "sAnimationState" ],
  "methodNames" : [ "public static void lockAnimationClock(long vsyncMillis)", "public static void unlockAnimationClock()", "public static long currentAnimationTimeMillis()", "public static Animation loadAnimation(Context context, @AnimRes int id) throws NotFoundException", "private static Animation createAnimationFromXml(Context c, XmlPullParser parser) throws XmlPullParserException, IOException", "private static Animation createAnimationFromXml(Context c, XmlPullParser parser, AnimationSet parent, AttributeSet attrs) throws XmlPullParserException, IOException", "public static LayoutAnimationController loadLayoutAnimation(Context context, @AnimRes int id) throws NotFoundException", "private static LayoutAnimationController createLayoutAnimationFromXml(Context c, XmlPullParser parser) throws XmlPullParserException, IOException", "private static LayoutAnimationController createLayoutAnimationFromXml(Context c, XmlPullParser parser, AttributeSet attrs) throws XmlPullParserException, IOException", "public static Animation makeInAnimation(Context c, boolean fromLeft)", "public static Animation makeOutAnimation(Context c, boolean toRight)", "public static Animation makeInChildBottomAnimation(Context c)", "public static Interpolator loadInterpolator(Context context, @AnimRes @InterpolatorRes int id) throws NotFoundException", "public static Interpolator loadInterpolator(Resources res, Theme theme, int id) throws NotFoundException", "private static Interpolator createInterpolatorFromXml(Resources res, Theme theme, XmlPullParser parser) throws XmlPullParserException, IOException" ]
}