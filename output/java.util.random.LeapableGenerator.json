{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/random/RandomGenerator.java",
  "packageName" : "java.util.random",
  "className" : "LeapableGenerator",
  "comment" : "\n     * This interface is designed to provide a common protocol for objects that\n     * generate sequences of pseudorandom values and can easily not only jump\n     * but also <i>leap</i> forward, by a large amount (ex. 2<sup>128</sup>), to\n     * a very distant point in the state cycle.\n     *\n     * Typically one will construct a series of {@link LeapableGenerator}\n     * objects by iterative leaping from a single original\n     * {@link LeapableGenerator} object, and then for each such object produce a\n     * subseries of objects by iterative jumping. There is little conceptual\n     * difference between leaping and jumping, but typically a leap will be a\n     * very long jump in the state cycle (perhaps distance 2<sup>128</sup> or\n     * so).\n     *\n     * <p> Ideally, all {@link LeapableGenerator} objects produced by iterative\n     * leaping and jumping from a single original {@link LeapableGenerator}\n     * object are statistically independent of one another and individually\n     * uniform. In practice, one must settle for some approximation to\n     * independence and uniformity. In particular, a specific implementation may\n     * assume that each generator in a stream produced by the {@code leaps}\n     * method is used to produce (by jumping) a number of objects no larger than\n     * 2<sup>64</sup>. Implementors are advised to use algorithms whose period\n     * is at least 2<sup>191</sup>.\n     *\n     * <p> Methods are provided to perform a single leap operation and also to\n     * produce a stream of generators produced from the original by iterative\n     * copying and leaping of internal state. The generators produced must\n     * implement the {@link JumpableGenerator} interface but need not also\n     * implement the {@link LeapableGenerator} interface. A typical strategy for\n     * a multithreaded application is to create a single\n     * {@link LeapableGenerator} object, calls its {@code leaps} method exactly\n     * once, and then parcel out generators from the resulting stream, one to\n     * each thread. Then the {@link JumpableGenerator#jump() jump}() method of\n     * each such generator be called to produce a substream of generator\n     * objects.\n     *\n     * <p> Objects that implement {@link LeapableGenerator} are typically not\n     * cryptographically secure. Consider instead using {@link SecureRandom} to\n     * get a cryptographically secure pseudo-random number generator for use by\n     * security-sensitive applications.\n     ",
  "links" : [ "java.security.SecureRandom", "JumpableGenerator", "#jump()", "LeapableGenerator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static LeapableGenerator of(String name)",
    "returnType" : "LeapableGenerator",
    "comment" : "\n         * Returns an instance of {@link LeapableGenerator} that utilizes the\n         * {@code name} <a href=\"package-summary.html#algorithms\">algorithm</a>.\n         *\n         * @param name  Name of random number generator\n         *              <a href=\"package-summary.html#algorithms\">algorithm</a>\n         *\n         * @return An instance of {@link LeapableGenerator}\n         *\n         * @throws NullPointerException if name is null\n         * @throws IllegalArgumentException if the named algorithm is not found\n         ",
    "links" : [ "LeapableGenerator" ]
  }, {
    "name" : " LeapableGenerator copy()",
    "returnType" : "LeapableGenerator",
    "comment" : "\n         * Returns a new generator whose internal state is an exact copy of this\n         * generator (therefore their future behavior should be identical if\n         * subjected to the same series of operations).\n         *\n         * @return a new object that is a copy of this generator\n         ",
    "links" : [ ]
  }, {
    "name" : " void leap()",
    "returnType" : "void",
    "comment" : "\n         * Alter the state of this pseudorandom number generator so as to leap\n         * forward a large, fixed distance (typically 2<sup>96</sup> or more)\n         * within its state cycle.\n         ",
    "links" : [ ]
  }, {
    "name" : " double leapDistance()",
    "returnType" : "double",
    "comment" : "\n         * Returns the distance by which the\n         * {@link LeapableGenerator#leap() leap}() method will leap forward within\n         * the state cycle of this generator object.\n         *\n         * @return the default leap distance (as a {@code double} value)\n         ",
    "links" : [ "#leap()" ]
  }, {
    "name" : " Stream<JumpableGenerator> leaps()",
    "returnType" : "Stream<JumpableGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of new pseudorandom number\n         * generators, each of which implements the {@link JumpableGenerator}\n         * interface.\n         *\n         * @return a stream of objects that implement the {@link JumpableGenerator} interface\n         *\n         * @implNote It is permitted to implement this method in a manner equivalent to\n         * {@link LeapableGenerator#leaps(long) leaps}\n         * ({@link  Long#MAX_VALUE Long.MAX_VALUE}).\n         *\n         * @implSpec The default implementation produces a sequential stream that  repeatedly\n         * calls {@link LeapableGenerator#copy() copy}() and {@link LeapableGenerator#leap() leap}()\n         * on this generator, and the copies become the generators produced by the stream.\n         ",
    "links" : [ "#copy()", "#MAX_VALUE", "#leaps(long)", "JumpableGenerator", "#leap()" ]
  }, {
    "name" : " Stream<JumpableGenerator> leaps(long streamSize)",
    "returnType" : "Stream<JumpableGenerator>",
    "comment" : "\n         * Returns a stream producing the given {@code streamSize} number of new\n         * pseudorandom number generators, each of which implements the\n         * {@link JumpableGenerator} interface.\n         *\n         * @param streamSize the number of generators to generate\n         *\n         * @return a stream of objects that implement the {@link JumpableGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is less than zero\n         *\n         * @implSpec The default implementation produces a sequential stream that  repeatedly\n         *           calls {@link LeapableGenerator#copy() copy}() and {@link LeapableGenerator#leap() leap}()\n         *           on this generator, and the copies become the generators produced by the stream.\n         ",
    "links" : [ "#copy()", "JumpableGenerator", "#leap()" ]
  }, {
    "name" : " JumpableGenerator copyAndLeap()",
    "returnType" : "JumpableGenerator",
    "comment" : "\n         * Copy this generator, leap this generator forward, then return the\n         * copy.\n         *\n         * @return a copy of this generator object before the leap occurred\n         *\n         * @implSpec The default implementation copies this, leaps and then\n         * returns the copy.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static LeapableGenerator of(String name)", " LeapableGenerator copy()", " void leap()", " double leapDistance()", " Stream<JumpableGenerator> leaps()", " Stream<JumpableGenerator> leaps(long streamSize)", " JumpableGenerator copyAndLeap()" ],
  "variableNames" : [ ]
}