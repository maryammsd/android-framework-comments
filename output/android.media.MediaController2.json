{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaController2.java",
  "packageName" : "android.media",
  "className" : "MediaController2",
  "comment" : "\n * This API is not generally intended for third party application developers.\n * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n * Library</a> for consistent behavior across all devices.\n *\n * Allows an app to interact with an active {@link MediaSession2} or a\n * {@link MediaSession2Service} which would provide {@link MediaSession2}. Media buttons and other\n * commands can be sent to the session.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ControllerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeathRecipient",
    "type" : "IBinder.DeathRecipient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionToken",
    "type" : "Session2Token",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControllerStub",
    "type" : "Controller2Link",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceConnection",
    "type" : "SessionServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mNextSeqNumber",
    "type" : "int",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mSessionBinder",
    "type" : "Session2Link",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mAllowedCommands",
    "type" : "Session2CommandGroup",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mConnectedToken",
    "type" : "Session2Token",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPendingCommands",
    "type" : "ArrayMap<ResultReceiver, Integer>",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mRequestedCommandSeqNumbers",
    "type" : "ArraySet<Integer>",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPlaybackActive",
    "type" : "boolean",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Session2Token getConnectedToken()",
    "returnType" : "Session2Token",
    "comment" : "\n     * Returns {@link Session2Token} of the connected session.\n     * If it is not connected yet, it returns {@code null}.\n     * <p>\n     * This may differ with the {@link Session2Token} from the constructor. For example, if the\n     * controller is created with the token for {@link MediaSession2Service}, this would return\n     * token for the {@link MediaSession2} in the service.\n     *\n     * @return Session2Token of the connected session, or {@code null} if not connected\n     ",
    "links" : [ "android.media.Session2Token", "android.media.MediaSession2", "android.media.MediaSession2Service" ]
  }, {
    "name" : "public boolean isPlaybackActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the session's playback is active.\n     *\n     * @return {@code true} if playback active. {@code false} otherwise.\n     * @see ControllerCallback#onPlaybackActiveChanged(MediaController2, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object sendSessionCommand(@NonNull Session2Command command, @Nullable Bundle args)",
    "returnType" : "Object",
    "comment" : "\n     * Sends a session command to the session\n     * <p>\n     * @param command the session command\n     * @param args optional arguments\n     * @return a token which will be sent together in {@link ControllerCallback#onCommandResult}\n     *        when its result is received.\n     ",
    "links" : [ "#onCommandResult" ]
  }, {
    "name" : "public void cancelSessionCommand(@NonNull Object token)",
    "returnType" : "void",
    "comment" : "\n     * Cancels the session command previously sent.\n     *\n     * @param token the token which is returned from {@link #sendSessionCommand}.\n     ",
    "links" : [ "#sendSessionCommand" ]
  }, {
    "name" : " void onConnected(int seq, Bundle connectionResult)",
    "returnType" : "void",
    "comment" : " Called by Controller2Link.onConnected",
    "links" : [ ]
  }, {
    "name" : " void onDisconnected(int seq)",
    "returnType" : "void",
    "comment" : " Called by Controller2Link.onDisconnected",
    "links" : [ ]
  }, {
    "name" : " void onPlaybackActiveChanged(int seq, boolean playbackActive)",
    "returnType" : "void",
    "comment" : " Called by Controller2Link.onPlaybackActiveChanged",
    "links" : [ ]
  }, {
    "name" : " void onSessionCommand(int seq, Session2Command command, Bundle args, @Nullable ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : " Called by Controller2Link.onSessionCommand",
    "links" : [ ]
  }, {
    "name" : " void onCancelCommand(int seq)",
    "returnType" : "void",
    "comment" : " Called by Controller2Link.onSessionCommand",
    "links" : [ ]
  }, {
    "name" : "private int getNextSeqNumber()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle createConnectionRequest(@NonNull Bundle connectionHints)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean requestConnectToSession(@NonNull Bundle connectionHints)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean requestConnectToService()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mCallback", "mDeathRecipient", "mContext", "mSessionToken", "mCallbackExecutor", "mControllerStub", "mResultHandler", "mServiceConnection", "mLock", "mClosed", "mNextSeqNumber", "mSessionBinder", "mAllowedCommands", "mConnectedToken", "mPendingCommands", "mRequestedCommandSeqNumbers", "mPlaybackActive" ],
  "methodNames" : [ "public void close()", "public Session2Token getConnectedToken()", "public boolean isPlaybackActive()", "public Object sendSessionCommand(@NonNull Session2Command command, @Nullable Bundle args)", "public void cancelSessionCommand(@NonNull Object token)", " void onConnected(int seq, Bundle connectionResult)", " void onDisconnected(int seq)", " void onPlaybackActiveChanged(int seq, boolean playbackActive)", " void onSessionCommand(int seq, Session2Command command, Bundle args, @Nullable ResultReceiver resultReceiver)", " void onCancelCommand(int seq)", "private int getNextSeqNumber()", "private Bundle createConnectionRequest(@NonNull Bundle connectionHints)", "private boolean requestConnectToSession(@NonNull Bundle connectionHints)", "private boolean requestConnectToService()" ]
}