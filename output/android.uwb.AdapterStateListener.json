{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/uwb/AdapterStateListener.java",
  "packageName" : "android.uwb",
  "className" : "AdapterStateListener",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "IUwbAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackMap",
    "type" : "Map<AdapterStateCallback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapterStateChangeReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapterState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void register(@NonNull Executor executor, @NonNull AdapterStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an {@link AdapterStateCallback} with this {@link AdapterStateListener}\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link AdapterStateCallback}\n     ",
    "links" : [ "android.uwb.UwbManager.AdapterStateCallback", "android.uwb.AdapterStateListener", "java.util.concurrent.Executor" ]
  }, {
    "name" : "public void unregister(@NonNull AdapterStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link AdapterStateCallback}\n     *\n     * @param callback user implementation of the {@link AdapterStateCallback}\n     ",
    "links" : [ "android.uwb.UwbManager.AdapterStateCallback" ]
  }, {
    "name" : "public void setEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the adapter enabled state\n     *\n     * @param isEnabled value of new adapter state\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAdapterState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the adapter enabled state\n     *\n     * @return integer representing adapter enabled state\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendCurrentState(@NonNull AdapterStateCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAdapterStateChanged(int state, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int convertToStateChangedReason(@StateChangeReason int reason)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int convertToState(@AdapterState int state)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void register(@NonNull Executor executor, @NonNull AdapterStateCallback callback)", "public void unregister(@NonNull AdapterStateCallback callback)", "public void setEnabled(boolean isEnabled)", "public int getAdapterState()", "private void sendCurrentState(@NonNull AdapterStateCallback callback)", "public void onAdapterStateChanged(int state, int reason)", "private static int convertToStateChangedReason(@StateChangeReason int reason)", "private static int convertToState(@AdapterState int state)" ],
  "variableNames" : [ "TAG", "mAdapter", "mIsRegistered", "mCallbackMap", "mAdapterStateChangeReason", "mAdapterState" ]
}