{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/utils/AttList.java",
  "packageName" : "org.apache.xml.serializer.utils",
  "className" : "AttList",
  "comment" : "\n * Wraps a DOM attribute list in a SAX Attributes.\n * \n * This class is a copy of the one in org.apache.xml.utils. \n * It exists to cut the serializers dependancy on that package.\n * A minor changes from that package are:\n * DOMHelper reference changed to DOM2Helper, class is not \"public\"\n *  \n * This class is not a public API, it is only public because it is \n * used in org.apache.xml.serializer.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_attrs",
    "type" : "NamedNodeMap",
    "comment" : " List of attribute nodes          ",
    "links" : [ ]
  }, {
    "name" : "m_lastIndex",
    "type" : "int",
    "comment" : " Index of last attribute node          ",
    "links" : [ ]
  }, {
    "name" : "m_dh",
    "type" : "DOM2Helper",
    "comment" : " Local reference to DOMHelper          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of attribute nodes in the list \n   *\n   *\n   * @return number of attribute nodes\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getURI(int index)",
    "returnType" : "String",
    "comment" : "\n   * Look up an attribute's Namespace URI by index.\n   *\n   * @param index The attribute index (zero-based).\n   * @return The Namespace URI, or the empty string if none\n   *         is available, or null if the index is out of\n   *         range.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName(int index)",
    "returnType" : "String",
    "comment" : "\n   * Look up an attribute's local name by index.\n   *\n   * @param index The attribute index (zero-based).\n   * @return The local name, or the empty string if Namespace\n   *         processing is not being performed, or null\n   *         if the index is out of range.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getQName(int i)",
    "returnType" : "String",
    "comment" : "\n   * Look up an attribute's qualified name by index.\n   *\n   *\n   * @param i The attribute index (zero-based).\n   *\n   * @return The attribute's qualified name\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getType(int i)",
    "returnType" : "String",
    "comment" : "\n   * Get the attribute's node type by index\n   *\n   *\n   * @param i The attribute index (zero-based)\n   *\n   * @return the attribute's node type\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(int i)",
    "returnType" : "String",
    "comment" : "\n   * Get the attribute's node value by index\n   *\n   *\n   * @param i The attribute index (zero-based)\n   *\n   * @return the attribute's node value\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getType(String name)",
    "returnType" : "String",
    "comment" : "\n   * Get the attribute's node type by name\n   *\n   *\n   * @param name Attribute name\n   *\n   * @return the attribute's node type\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getType(String uri, String localName)",
    "returnType" : "String",
    "comment" : "\n   * Look up an attribute's type by Namespace name.\n   *\n   * @param uri The Namespace URI, or the empty String if the\n   *        name has no Namespace URI.\n   * @param localName The local name of the attribute.\n   * @return The attribute type as a string, or null if the\n   *         attribute is not in the list or if Namespace\n   *         processing is not being performed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String name)",
    "returnType" : "String",
    "comment" : "\n   * Look up an attribute's value by name.\n   *\n   *\n   * @param name The attribute node's name\n   *\n   * @return The attribute node's value\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String uri, String localName)",
    "returnType" : "String",
    "comment" : "\n   * Look up an attribute's value by Namespace name.\n   *\n   * @param uri The Namespace URI, or the empty String if the\n   *        name has no Namespace URI.\n   * @param localName The local name of the attribute.\n   * @return The attribute value as a string, or null if the\n   *         attribute is not in the list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(String uri, String localPart)",
    "returnType" : "int",
    "comment" : "\n   * Look up the index of an attribute by Namespace name.\n   *\n   * @param uri The Namespace URI, or the empty string if\n   *        the name has no Namespace URI.\n   * @param localPart The attribute's local name.\n   * @return The index of the attribute, or -1 if it does not\n   *         appear in the list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(String qName)",
    "returnType" : "int",
    "comment" : "\n   * Look up the index of an attribute by raw XML 1.0 name.\n   *\n   * @param qName The qualified (prefixed) name.\n   * @return The index of the attribute, or -1 if it does not\n   *         appear in the list.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLength()", "public String getURI(int index)", "public String getLocalName(int index)", "public String getQName(int i)", "public String getType(int i)", "public String getValue(int i)", "public String getType(String name)", "public String getType(String uri, String localName)", "public String getValue(String name)", "public String getValue(String uri, String localName)", "public int getIndex(String uri, String localPart)", "public int getIndex(String qName)" ],
  "variableNames" : [ "m_attrs", "m_lastIndex", "m_dh" ]
}