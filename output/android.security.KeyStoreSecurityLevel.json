{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyStoreSecurityLevel.java",
  "packageName" : "android.security",
  "className" : "KeyStoreSecurityLevel",
  "comment" : "\n * This is a shim around the security level specific interface of Keystore 2.0. Services with\n * this interface are instantiated per KeyMint backend, each having there own security level.\n * Thus this object representation of a security level.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityLevel",
    "type" : "IKeystoreSecurityLevel",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private R handleExceptions(CheckedRemoteRequest<R> request) throws KeyStoreException",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeyStoreOperation createOperation(@NonNull KeyDescriptor keyDescriptor, Collection<KeyParameter> args) throws KeyStoreException",
    "returnType" : "KeyStoreOperation",
    "comment" : "\n     * Creates a new keystore operation.\n     * @see IKeystoreSecurityLevel#createOperation(KeyDescriptor, KeyParameter[], boolean) for more\n     * details.\n     * @param keyDescriptor\n     * @param args\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyMetadata generateKey(@NonNull KeyDescriptor descriptor, KeyDescriptor attestationKey, Collection<KeyParameter> args, int flags, byte[] entropy) throws KeyStoreException",
    "returnType" : "KeyMetadata",
    "comment" : "\n     * Generates a new key in Keystore.\n     * @see IKeystoreSecurityLevel#generateKey(KeyDescriptor, KeyDescriptor, KeyParameter[], int,\n     * byte[]) for more details.\n     * @param descriptor\n     * @param attestationKey\n     * @param args\n     * @param flags\n     * @param entropy\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyMetadata importKey(KeyDescriptor descriptor, KeyDescriptor attestationKey, Collection<KeyParameter> args, int flags, byte[] keyData) throws KeyStoreException",
    "returnType" : "KeyMetadata",
    "comment" : "\n     * Imports a key into Keystore.\n     * @see IKeystoreSecurityLevel#importKey(KeyDescriptor, KeyDescriptor, KeyParameter[], int,\n     * byte[]) for more details.\n     * @param descriptor\n     * @param attestationKey\n     * @param args\n     * @param flags\n     * @param keyData\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyMetadata importWrappedKey(@NonNull KeyDescriptor wrappedKeyDescriptor, @NonNull KeyDescriptor wrappingKeyDescriptor, @NonNull byte[] wrappedKey, byte[] maskingKey, Collection<KeyParameter> args, @NonNull AuthenticatorSpec[] authenticatorSpecs) throws KeyStoreException",
    "returnType" : "KeyMetadata",
    "comment" : "\n     * Imports a wrapped key into Keystore.\n     * @see IKeystoreSecurityLevel#importWrappedKey(KeyDescriptor, KeyDescriptor, byte[],\n     * KeyParameter[], AuthenticatorSpec[]) for more details.\n     * @param wrappedKeyDescriptor\n     * @param wrappingKeyDescriptor\n     * @param wrappedKey\n     * @param maskingKey\n     * @param args\n     * @param authenticatorSpecs\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static void interruptedPreservingSleep(long millis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private R handleExceptions(CheckedRemoteRequest<R> request) throws KeyStoreException", "public KeyStoreOperation createOperation(@NonNull KeyDescriptor keyDescriptor, Collection<KeyParameter> args) throws KeyStoreException", "public KeyMetadata generateKey(@NonNull KeyDescriptor descriptor, KeyDescriptor attestationKey, Collection<KeyParameter> args, int flags, byte[] entropy) throws KeyStoreException", "public KeyMetadata importKey(KeyDescriptor descriptor, KeyDescriptor attestationKey, Collection<KeyParameter> args, int flags, byte[] keyData) throws KeyStoreException", "public KeyMetadata importWrappedKey(@NonNull KeyDescriptor wrappedKeyDescriptor, @NonNull KeyDescriptor wrappingKeyDescriptor, @NonNull byte[] wrappedKey, byte[] maskingKey, Collection<KeyParameter> args, @NonNull AuthenticatorSpec[] authenticatorSpecs) throws KeyStoreException", "protected static void interruptedPreservingSleep(long millis)" ],
  "variableNames" : [ "TAG", "mSecurityLevel" ]
}