{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/print/PrinterCapabilitiesInfo.java",
  "packageName" : "android.print",
  "className" : "Builder",
  "comment" : "\n     * Builder for creating of a {@link PrinterCapabilitiesInfo}. This class is\n     * responsible to enforce that all required attributes have at least one\n     * default value. In other words, this class creates only well-formed {@link\n     * PrinterCapabilitiesInfo}s.\n     * <p>\n     * Look at the individual methods for a reference whether a property is\n     * required or if it is optional.\n     * </p>\n     ",
  "links" : [ "android.print.PrinterCapabilitiesInfo" ],
  "variables" : [ {
    "name" : "mPrototype",
    "type" : "PrinterCapabilitiesInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addMediaSize(@NonNull MediaSize mediaSize, boolean isDefault)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a supported media size.\n         * <p>\n         * <strong>Required:</strong> Yes\n         * </p>\n         *\n         * @param mediaSize A media size.\n         * @param isDefault Whether this is the default.\n         * @return This builder.\n         * @throws IllegalArgumentException If set as default and there\n         *     is already a default.\n         *\n         * @see PrintAttributes.MediaSize\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addResolution(@NonNull Resolution resolution, boolean isDefault)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a supported resolution.\n         * <p>\n         * <strong>Required:</strong> Yes\n         * </p>\n         *\n         * @param resolution A resolution.\n         * @param isDefault Whether this is the default.\n         * @return This builder.\n         *\n         * @throws IllegalArgumentException If set as default and there\n         *     is already a default.\n         *\n         * @see PrintAttributes.Resolution\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMinMargins(@NonNull Margins margins)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the minimal margins. These are the minimal margins\n         * the printer physically supports.\n         *\n         * <p>\n         * <strong>Required:</strong> Yes\n         * </p>\n         *\n         * @param margins The margins.\n         * @return This builder.\n         *\n         * @throws IllegalArgumentException If margins are <code>null</code>.\n         *\n         * @see PrintAttributes.Margins\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setColorModes(@ColorMode int colorModes, @ColorMode int defaultColorMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the color modes.\n         * <p>\n         * <strong>Required:</strong> Yes\n         * </p>\n         *\n         * @param colorModes The color mode bit mask.\n         * @param defaultColorMode The default color mode.\n         * @return This builder.\n         * <p>\n         * <strong>Note:</strong> On platform version 19 (Kitkat) specifying\n         * only PrintAttributes#COLOR_MODE_MONOCHROME leads to a print spooler\n         * crash. Hence, you should declare either both color modes or\n         * PrintAttributes#COLOR_MODE_COLOR.\n         * </p>\n         *\n         * @throws IllegalArgumentException If color modes contains an invalid\n         *         mode bit or if the default color mode is invalid.\n         *\n         * @see PrintAttributes#COLOR_MODE_COLOR\n         * @see PrintAttributes#COLOR_MODE_MONOCHROME\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDuplexModes(@DuplexMode int duplexModes, @DuplexMode int defaultDuplexMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the duplex modes.\n         * <p>\n         * <strong>Required:</strong> No\n         * </p>\n         *\n         * @param duplexModes The duplex mode bit mask.\n         * @param defaultDuplexMode The default duplex mode.\n         * @return This builder.\n         *\n         * @throws IllegalArgumentException If duplex modes contains an invalid\n         *         mode bit or if the default duplex mode is invalid.\n         *\n         * @see PrintAttributes#DUPLEX_MODE_NONE\n         * @see PrintAttributes#DUPLEX_MODE_LONG_EDGE\n         * @see PrintAttributes#DUPLEX_MODE_SHORT_EDGE\n         ",
    "links" : [ ]
  }, {
    "name" : "public PrinterCapabilitiesInfo build()",
    "returnType" : "PrinterCapabilitiesInfo",
    "comment" : "\n         * Crates a new {@link PrinterCapabilitiesInfo} enforcing that all\n         * required properties have been specified. See individual methods\n         * in this class for reference about required attributes.\n         * <p>\n         * <strong>Note:</strong> If you do not add supported duplex modes,\n         * {@link android.print.PrintAttributes#DUPLEX_MODE_NONE} will set\n         * as the only supported mode and also as the default duplex mode.\n         * </p>\n         *\n         * @return A new {@link PrinterCapabilitiesInfo}.\n         *\n         * @throws IllegalStateException If a required attribute was not specified.\n         ",
    "links" : [ "android.print.PrinterCapabilitiesInfo", "android.print.PrintAttributes#DUPLEX_MODE_NONE" ]
  }, {
    "name" : "private void throwIfDefaultAlreadySpecified(int propertyIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder addMediaSize(@NonNull MediaSize mediaSize, boolean isDefault)", "public Builder addResolution(@NonNull Resolution resolution, boolean isDefault)", "public Builder setMinMargins(@NonNull Margins margins)", "public Builder setColorModes(@ColorMode int colorModes, @ColorMode int defaultColorMode)", "public Builder setDuplexModes(@DuplexMode int duplexModes, @DuplexMode int defaultDuplexMode)", "public PrinterCapabilitiesInfo build()", "private void throwIfDefaultAlreadySpecified(int propertyIndex)" ],
  "variableNames" : [ "mPrototype" ]
}