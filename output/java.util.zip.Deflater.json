{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/Deflater.java",
  "packageName" : "java.util.zip",
  "className" : "Deflater",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "zsRef",
    "type" : "DeflaterZStreamRef",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "input",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputArray",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputLim",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "level",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "strategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "setParams",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "finish",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "finished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bytesRead",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bytesWritten",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " Android-added: CloseGuard support.",
    "links" : [ ]
  }, {
    "name" : "DEFLATED",
    "type" : "int",
    "comment" : "\n     * Compression method for the deflate algorithm (the only one currently\n     * supported).\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_COMPRESSION",
    "type" : "int",
    "comment" : "\n     * Compression level for no compression.\n     ",
    "links" : [ ]
  }, {
    "name" : "BEST_SPEED",
    "type" : "int",
    "comment" : "\n     * Compression level for fastest compression.\n     ",
    "links" : [ ]
  }, {
    "name" : "BEST_COMPRESSION",
    "type" : "int",
    "comment" : "\n     * Compression level for best compression.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_COMPRESSION",
    "type" : "int",
    "comment" : "\n     * Default compression level.\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTERED",
    "type" : "int",
    "comment" : "\n     * Compression strategy best used for data consisting mostly of small\n     * values with a somewhat random distribution. Forces more Huffman coding\n     * and less string matching.\n     ",
    "links" : [ ]
  }, {
    "name" : "HUFFMAN_ONLY",
    "type" : "int",
    "comment" : "\n     * Compression strategy for Huffman coding only.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_STRATEGY",
    "type" : "int",
    "comment" : "\n     * Default compression strategy.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_FLUSH",
    "type" : "int",
    "comment" : "\n     * Compression flush mode used to achieve best compression result.\n     *\n     * @see Deflater#deflate(byte[], int, int, int)\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_FLUSH",
    "type" : "int",
    "comment" : "\n     * Compression flush mode used to flush out all pending output; may\n     * degrade compression for some compression algorithms.\n     *\n     * @see Deflater#deflate(byte[], int, int, int)\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "FULL_FLUSH",
    "type" : "int",
    "comment" : "\n     * Compression flush mode used to flush out all pending output and\n     * reset the deflater. Using this mode too often can seriously degrade\n     * compression.\n     *\n     * @see Deflater#deflate(byte[], int, int, int)\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "FINISH",
    "type" : "int",
    "comment" : "\n     * Flush mode to use at the end of output.  Can only be provided by the\n     * user by way of {@link #finish()}.\n     ",
    "links" : [ "#finish()" ]
  } ],
  "methods" : [ {
    "name" : "public void setInput(byte[] input, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Sets input data for compression.\n     * <p>\n     * One of the {@code setInput()} methods should be called whenever\n     * {@code needsInput()} returns true indicating that more input data\n     * is required.\n     * @param input the input data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Deflater#needsInput\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInput(byte[] input)",
    "returnType" : "void",
    "comment" : "\n     * Sets input data for compression.\n     * <p>\n     * One of the {@code setInput()} methods should be called whenever\n     * {@code needsInput()} returns true indicating that more input data\n     * is required.\n     * @param input the input data bytes\n     * @see Deflater#needsInput\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInput(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "\n     * Sets input data for compression.\n     * <p>\n     * One of the {@code setInput()} methods should be called whenever\n     * {@code needsInput()} returns true indicating that more input data\n     * is required.\n     * <p>\n     * The given buffer's position will be advanced as deflate\n     * operations are performed, up to the buffer's limit.\n     * The input buffer may be modified (refilled) between deflate\n     * operations; doing so is equivalent to creating a new buffer\n     * and setting it with this method.\n     * <p>\n     * Modifying the input buffer's contents, position, or limit\n     * concurrently with an deflate operation will result in\n     * undefined behavior, which may include incorrect operation\n     * results or operation failure.\n     *\n     * @param input the input data bytes\n     * @see Deflater#needsInput\n     * @since 11\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDictionary(byte[] dictionary, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Sets preset dictionary for compression. A preset dictionary is used\n     * when the history buffer can be predetermined. When the data is later\n     * uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n     * in order to get the Adler-32 value of the dictionary required for\n     * decompression.\n     * @param dictionary the dictionary data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Inflater#inflate\n     * @see Inflater#getAdler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDictionary(byte[] dictionary)",
    "returnType" : "void",
    "comment" : "\n     * Sets preset dictionary for compression. A preset dictionary is used\n     * when the history buffer can be predetermined. When the data is later\n     * uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n     * in order to get the Adler-32 value of the dictionary required for\n     * decompression.\n     * @param dictionary the dictionary data bytes\n     * @see Inflater#inflate\n     * @see Inflater#getAdler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDictionary(ByteBuffer dictionary)",
    "returnType" : "void",
    "comment" : "\n     * Sets preset dictionary for compression. A preset dictionary is used\n     * when the history buffer can be predetermined. When the data is later\n     * uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n     * in order to get the Adler-32 value of the dictionary required for\n     * decompression.\n     * <p>\n     * The bytes in given byte buffer will be fully consumed by this method.  On\n     * return, its position will equal its limit.\n     *\n     * @param dictionary the dictionary data bytes\n     * @see Inflater#inflate\n     * @see Inflater#getAdler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStrategy(int strategy)",
    "returnType" : "void",
    "comment" : "\n     * Sets the compression strategy to the specified value.\n     *\n     * <p> If the compression strategy is changed, the next invocation\n     * of {@code deflate} will compress the input available so far with\n     * the old strategy (and may be flushed); the new strategy will take\n     * effect only after that invocation.\n     *\n     * @param strategy the new compression strategy\n     * @throws    IllegalArgumentException if the compression strategy is\n     *                                     invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLevel(int level)",
    "returnType" : "void",
    "comment" : "\n     * Sets the compression level to the specified value.\n     *\n     * <p> If the compression level is changed, the next invocation\n     * of {@code deflate} will compress the input available so far\n     * with the old level (and may be flushed); the new level will\n     * take effect only after that invocation.\n     *\n     * @param level the new compression level (0-9)\n     * @throws    IllegalArgumentException if the compression level is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if no data remains in the input buffer. This can\n     * be used to determine if one of the {@code setInput()} methods should be\n     * called in order to provide more input.\n     *\n     * @return true if the input data buffer is empty and setInput()\n     * should be called in order to provide more input\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finish()",
    "returnType" : "void",
    "comment" : "\n     * When called, indicates that compression should end with the current\n     * contents of the input buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean finished()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the end of the compressed data output stream has\n     * been reached.\n     * @return true if the end of the compressed data output stream has\n     * been reached\n     ",
    "links" : [ ]
  }, {
    "name" : "public int deflate(byte[] output, int off, int len)",
    "returnType" : "int",
    "comment" : "\n     * Compresses the input data and fills specified buffer with compressed\n     * data. Returns actual number of bytes of compressed data. A return value\n     * of 0 indicates that {@link #needsInput() needsInput} should be called\n     * in order to determine if more input data is required.\n     *\n     * <p>This method uses {@link #NO_FLUSH} as its compression flush mode.\n     * An invocation of this method of the form {@code deflater.deflate(b, off, len)}\n     * yields the same result as the invocation of\n     * {@code deflater.deflate(b, off, len, Deflater.NO_FLUSH)}.\n     *\n     * @param output the buffer for the compressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes of compressed data\n     * @return the actual number of bytes of compressed data written to the\n     *         output buffer\n     ",
    "links" : [ "#needsInput()", "#NO_FLUSH" ]
  }, {
    "name" : "public int deflate(byte[] output)",
    "returnType" : "int",
    "comment" : "\n     * Compresses the input data and fills specified buffer with compressed\n     * data. Returns actual number of bytes of compressed data. A return value\n     * of 0 indicates that {@link #needsInput() needsInput} should be called\n     * in order to determine if more input data is required.\n     *\n     * <p>This method uses {@link #NO_FLUSH} as its compression flush mode.\n     * An invocation of this method of the form {@code deflater.deflate(b)}\n     * yields the same result as the invocation of\n     * {@code deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH)}.\n     *\n     * @param output the buffer for the compressed data\n     * @return the actual number of bytes of compressed data written to the\n     *         output buffer\n     ",
    "links" : [ "#needsInput()", "#NO_FLUSH" ]
  }, {
    "name" : "public int deflate(ByteBuffer output)",
    "returnType" : "int",
    "comment" : "\n     * Compresses the input data and fills specified buffer with compressed\n     * data. Returns actual number of bytes of compressed data. A return value\n     * of 0 indicates that {@link #needsInput() needsInput} should be called\n     * in order to determine if more input data is required.\n     *\n     * <p>This method uses {@link #NO_FLUSH} as its compression flush mode.\n     * An invocation of this method of the form {@code deflater.deflate(output)}\n     * yields the same result as the invocation of\n     * {@code deflater.deflate(output, Deflater.NO_FLUSH)}.\n     *\n     * @param output the buffer for the compressed data\n     * @return the actual number of bytes of compressed data written to the\n     *         output buffer\n     * @since 11\n     ",
    "links" : [ "#needsInput()", "#NO_FLUSH" ]
  }, {
    "name" : "public int deflate(byte[] output, int off, int len, int flush)",
    "returnType" : "int",
    "comment" : "\n     * Compresses the input data and fills the specified buffer with compressed\n     * data. Returns actual number of bytes of data compressed.\n     *\n     * <p>Compression flush mode is one of the following three modes:\n     *\n     * <ul>\n     * <li>{@link #NO_FLUSH}: allows the deflater to decide how much data\n     * to accumulate, before producing output, in order to achieve the best\n     * compression (should be used in normal use scenario). A return value\n     * of 0 in this flush mode indicates that {@link #needsInput()} should\n     * be called in order to determine if more input data is required.\n     *\n     * <li>{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,\n     * to the specified output buffer, so that an inflater that works on\n     * compressed data can get all input data available so far (In particular\n     * the {@link #needsInput()} returns {@code true} after this invocation\n     * if enough output space is provided). Flushing with {@link #SYNC_FLUSH}\n     * may degrade compression for some compression algorithms and so it\n     * should be used only when necessary.\n     *\n     * <li>{@link #FULL_FLUSH}: all pending output is flushed out as with\n     * {@link #SYNC_FLUSH}. The compression state is reset so that the inflater\n     * that works on the compressed output data can restart from this point\n     * if previous compressed data has been damaged or if random access is\n     * desired. Using {@link #FULL_FLUSH} too often can seriously degrade\n     * compression.\n     * </ul>\n     *\n     * <p>In the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if\n     * the return value is {@code len}, the space available in output\n     * buffer {@code b}, this method should be invoked again with the same\n     * {@code flush} parameter and more output space. Make sure that\n     * {@code len} is greater than 6 to avoid flush marker (5 bytes) being\n     * repeatedly output to the output buffer every time this method is\n     * invoked.\n     *\n     * <p>If the {@link #setInput(ByteBuffer)} method was called to provide a buffer\n     * for input, the input buffer's position will be advanced by the number of bytes\n     * consumed by this operation.\n     *\n     * @param output the buffer for the compressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes of compressed data\n     * @param flush the compression flush mode\n     * @return the actual number of bytes of compressed data written to\n     *         the output buffer\n     *\n     * @throws IllegalArgumentException if the flush mode is invalid\n     * @since 1.7\n     ",
    "links" : [ "#needsInput()", "#NO_FLUSH", "#SYNC_FLUSH", "#FULL_FLUSH", "#setInput(ByteBuffer)" ]
  }, {
    "name" : "public int deflate(ByteBuffer output, int flush)",
    "returnType" : "int",
    "comment" : "\n     * Compresses the input data and fills the specified buffer with compressed\n     * data. Returns actual number of bytes of data compressed.\n     *\n     * <p>Compression flush mode is one of the following three modes:\n     *\n     * <ul>\n     * <li>{@link #NO_FLUSH}: allows the deflater to decide how much data\n     * to accumulate, before producing output, in order to achieve the best\n     * compression (should be used in normal use scenario). A return value\n     * of 0 in this flush mode indicates that {@link #needsInput()} should\n     * be called in order to determine if more input data is required.\n     *\n     * <li>{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,\n     * to the specified output buffer, so that an inflater that works on\n     * compressed data can get all input data available so far (In particular\n     * the {@link #needsInput()} returns {@code true} after this invocation\n     * if enough output space is provided). Flushing with {@link #SYNC_FLUSH}\n     * may degrade compression for some compression algorithms and so it\n     * should be used only when necessary.\n     *\n     * <li>{@link #FULL_FLUSH}: all pending output is flushed out as with\n     * {@link #SYNC_FLUSH}. The compression state is reset so that the inflater\n     * that works on the compressed output data can restart from this point\n     * if previous compressed data has been damaged or if random access is\n     * desired. Using {@link #FULL_FLUSH} too often can seriously degrade\n     * compression.\n     * </ul>\n     *\n     * <p>In the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if\n     * the return value is equal to the {@linkplain ByteBuffer#remaining() remaining space}\n     * of the buffer, this method should be invoked again with the same\n     * {@code flush} parameter and more output space. Make sure that\n     * the buffer has at least 6 bytes of remaining space to avoid the\n     * flush marker (5 bytes) being repeatedly output to the output buffer\n     * every time this method is invoked.\n     *\n     * <p>On success, the position of the given {@code output} byte buffer will be\n     * advanced by as many bytes as were produced by the operation, which is equal\n     * to the number returned by this method.\n     *\n     * <p>If the {@link #setInput(ByteBuffer)} method was called to provide a buffer\n     * for input, the input buffer's position will be advanced by the number of bytes\n     * consumed by this operation.\n     *\n     * @param output the buffer for the compressed data\n     * @param flush the compression flush mode\n     * @return the actual number of bytes of compressed data written to\n     *         the output buffer\n     *\n     * @throws IllegalArgumentException if the flush mode is invalid\n     * @since 11\n     ",
    "links" : [ "#needsInput()", "#NO_FLUSH", "#SYNC_FLUSH", "#FULL_FLUSH", "#setInput(ByteBuffer)" ]
  }, {
    "name" : "public int getAdler()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ADLER-32 value of the uncompressed data.\n     * @return the ADLER-32 value of the uncompressed data\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalIn()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total number of uncompressed bytes input so far.\n     *\n     * <p>Since the number of bytes may be greater than\n     * Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n     * the preferred means of obtaining this information.</p>\n     *\n     * @return the total number of uncompressed bytes input so far\n     ",
    "links" : [ "#getBytesRead()" ]
  }, {
    "name" : "public long getBytesRead()",
    "returnType" : "long",
    "comment" : "\n     * Returns the total number of uncompressed bytes input so far.\n     *\n     * @return the total (non-negative) number of uncompressed bytes input so far\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalOut()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total number of compressed bytes output so far.\n     *\n     * <p>Since the number of bytes may be greater than\n     * Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n     * the preferred means of obtaining this information.</p>\n     *\n     * @return the total number of compressed bytes output so far\n     ",
    "links" : [ "#getBytesWritten()" ]
  }, {
    "name" : "public long getBytesWritten()",
    "returnType" : "long",
    "comment" : "\n     * Returns the total number of compressed bytes output so far.\n     *\n     * @return the total (non-negative) number of compressed bytes output so far\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets deflater so that a new set of input data can be processed.\n     * Keeps current compression level and strategy settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "\n     * Closes the compressor and discards any unprocessed input.\n     *\n     * This method should be called when the compressor is no longer\n     * being used. Once this method is called, the behavior of the\n     * Deflater object is undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureOpen()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean shouldFinish()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of 'finish' flag.\n     * 'finish' will be set to true if def.finish() method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long init(int level, int strategy, boolean nowrap)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDictionary(long addr, byte[] b, int off, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDictionaryBuffer(long addr, long bufAddress, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long deflateBytesBytes(long addr, byte[] inputArray, int inputOff, int inputLen, byte[] outputArray, int outputOff, int outputLen, int flush, int params)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long deflateBytesBuffer(long addr, byte[] inputArray, int inputOff, int inputLen, long outputAddress, int outputLen, int flush, int params)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long deflateBufferBytes(long addr, long inputAddress, int inputLen, byte[] outputArray, int outputOff, int outputLen, int flush, int params)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long deflateBufferBuffer(long addr, long inputAddress, int inputLen, long outputAddress, int outputLen, int flush, int params)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int getAdler(long addr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void reset(long addr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void end(long addr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setInput(byte[] input, int off, int len)", "public void setInput(byte[] input)", "public void setInput(ByteBuffer input)", "public void setDictionary(byte[] dictionary, int off, int len)", "public void setDictionary(byte[] dictionary)", "public void setDictionary(ByteBuffer dictionary)", "public void setStrategy(int strategy)", "public void setLevel(int level)", "public boolean needsInput()", "public void finish()", "public boolean finished()", "public int deflate(byte[] output, int off, int len)", "public int deflate(byte[] output)", "public int deflate(ByteBuffer output)", "public int deflate(byte[] output, int off, int len, int flush)", "public int deflate(ByteBuffer output, int flush)", "public int getAdler()", "public int getTotalIn()", "public long getBytesRead()", "public int getTotalOut()", "public long getBytesWritten()", "public void reset()", "public void end()", "private void ensureOpen()", " boolean shouldFinish()", "private static native long init(int level, int strategy, boolean nowrap)", "private static native void setDictionary(long addr, byte[] b, int off, int len)", "private static native void setDictionaryBuffer(long addr, long bufAddress, int len)", "private native long deflateBytesBytes(long addr, byte[] inputArray, int inputOff, int inputLen, byte[] outputArray, int outputOff, int outputLen, int flush, int params)", "private native long deflateBytesBuffer(long addr, byte[] inputArray, int inputOff, int inputLen, long outputAddress, int outputLen, int flush, int params)", "private native long deflateBufferBytes(long addr, long inputAddress, int inputLen, byte[] outputArray, int outputOff, int outputLen, int flush, int params)", "private native long deflateBufferBuffer(long addr, long inputAddress, int inputLen, long outputAddress, int outputLen, int flush, int params)", "private static native int getAdler(long addr)", "private static native void reset(long addr)", "private static native void end(long addr)" ],
  "variableNames" : [ "zsRef", "input", "inputArray", "inputPos", "inputLim", "level", "strategy", "setParams", "finish", "finished", "bytesRead", "bytesWritten", "guard", "DEFLATED", "NO_COMPRESSION", "BEST_SPEED", "BEST_COMPRESSION", "DEFAULT_COMPRESSION", "FILTERED", "HUFFMAN_ONLY", "DEFAULT_STRATEGY", "NO_FLUSH", "SYNC_FLUSH", "FULL_FLUSH", "FINISH" ]
}