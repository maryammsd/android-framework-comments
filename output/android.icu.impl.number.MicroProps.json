{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/MicroProps.java",
  "packageName" : "android.icu.impl.number",
  "className" : "MicroProps",
  "comment" : "\n * MicroProps is the first MicroPropsGenerator that should be should be called,\n * producing an initialized MicroProps instance that will be passed on and\n * modified throughout the rest of the chain of MicroPropsGenerator instances.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sign",
    "type" : "SignDisplay",
    "comment" : " Populated globally:",
    "links" : [ ]
  }, {
    "name" : "symbols",
    "type" : "DecimalFormatSymbols",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nsName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "padding",
    "type" : "Padder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "decimal",
    "type" : "DecimalSeparatorDisplay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "integerWidth",
    "type" : "IntegerWidth",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "modOuter",
    "type" : "Modifier",
    "comment" : " null. (This is typically the third modifier applied.)",
    "links" : [ ]
  }, {
    "name" : "modMiddle",
    "type" : "Modifier",
    "comment" : " the second modifier applied.)",
    "links" : [ ]
  }, {
    "name" : "modInner",
    "type" : "Modifier",
    "comment" : " This is typically the first modifier applied.",
    "links" : [ ]
  }, {
    "name" : "rounder",
    "type" : "Precision",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "grouping",
    "type" : "Grouper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "useCurrency",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gender",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currencyAsDecimal",
    "type" : "String",
    "comment" : " Currency symbol to be used as the decimal separator",
    "links" : [ ]
  }, {
    "name" : "immutable",
    "type" : "boolean",
    "comment" : " Internal fields:",
    "links" : [ ]
  }, {
    "name" : "outputUnit",
    "type" : "MeasureUnit",
    "comment" : " play.",
    "links" : [ ]
  }, {
    "name" : "mixedMeasures",
    "type" : "List<Measure>",
    "comment" : "\n     * Contains all the measures.\n     ",
    "links" : [ ]
  }, {
    "name" : "indexOfQuantity",
    "type" : "int",
    "comment" : "\n     * Points to quantity position, -1 if the position is not set yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "exhausted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MicroProps processQuantity(DecimalQuantity quantity)",
    "returnType" : "MicroProps",
    "comment" : "\n     * As MicroProps is the \"base instance\", this implementation of\n     * {@code MircoPropsGenerator.processQuantity()} just ensures that the output\n     * {@code micros} is correctly initialized.\n     * <p>\n     * For the \"safe\" invocation of this function, micros must not be *this,\n     * such that a copy of the base instance is made. For the \"unsafe\" path,\n     * this function can be used only once, because the base MicroProps instance\n     * will be modified and thus not be available for re-use.\n     *\n     * @param quantity The quantity for consideration and optional mutation.\n     * @return an initialized MicroProps instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MicroProps processQuantity(DecimalQuantity quantity)", "public Object clone()" ],
  "variableNames" : [ "sign", "symbols", "nsName", "padding", "decimal", "integerWidth", "modOuter", "modMiddle", "modInner", "rounder", "grouping", "useCurrency", "gender", "currencyAsDecimal", "immutable", "outputUnit", "mixedMeasures", "indexOfQuantity", "exhausted" ]
}