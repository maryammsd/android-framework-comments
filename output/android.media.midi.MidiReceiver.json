{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/midi/MidiReceiver.java",
  "packageName" : "android.media.midi",
  "className" : "MidiReceiver",
  "comment" : "\n * Interface for sending and receiving data to and from a MIDI device.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mMaxMessageSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onSend(byte[] msg, int offset, int count, long timestamp) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called whenever the receiver is passed new MIDI data.\n     * Subclasses override this method to receive MIDI data.\n     * May fail if count exceeds {@link #getMaxMessageSize}.\n     *\n     * NOTE: the msg array parameter is only valid within the context of this call.\n     * The msg bytes should be copied by the receiver rather than retaining a reference\n     * to this parameter.\n     * Also, modifying the contents of the msg array parameter may result in other receivers\n     * in the same application receiving incorrect values in their {link #onSend} method.\n     *\n     * @param msg a byte array containing the MIDI data\n     * @param offset the offset of the first byte of the data in the array to be processed\n     * @param count the number of bytes of MIDI data in the array to be processed\n     * @param timestamp the timestamp of the message (based on {@link java.lang.System#nanoTime}\n     * @throws IOException\n     ",
    "links" : [ "java.lang.System#nanoTime", "#getMaxMessageSize" ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Instructs the receiver to discard all pending MIDI data.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFlush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called when the receiver is instructed to discard all pending MIDI data.\n     * Subclasses should override this method if they maintain a list or queue of MIDI data\n     * to be processed in the future.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getMaxMessageSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum size of a message this receiver can receive.\n     * @return maximum message size\n     ",
    "links" : [ ]
  }, {
    "name" : "public void send(byte[] msg, int offset, int count) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called to send MIDI data to the receiver without a timestamp.\n     * Data will be processed by receiver in the order sent.\n     * Data will get split into multiple calls to {@link #onSend} if count exceeds\n     * {@link #getMaxMessageSize}.  Blocks until all the data is sent or an exception occurs.\n     * In the latter case, the amount of data sent prior to the exception is not provided to caller.\n     * The communication should be considered corrupt.  The sender should reestablish\n     * communication, reset all controllers and send all notes off.\n     *\n     * @param msg a byte array containing the MIDI data\n     * @param offset the offset of the first byte of the data in the array to be sent\n     * @param count the number of bytes of MIDI data in the array to be sent\n     * @throws IOException if the data could not be sent in entirety\n     ",
    "links" : [ "#onSend", "#getMaxMessageSize" ]
  }, {
    "name" : "public void send(byte[] msg, int offset, int count, long timestamp) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called to send MIDI data to the receiver with a specified timestamp.\n     * Data will be processed by receiver in order first by timestamp, then in the order sent.\n     * Data will get split into multiple calls to {@link #onSend} if count exceeds\n     * {@link #getMaxMessageSize}.  Blocks until all the data is sent or an exception occurs.\n     * In the latter case, the amount of data sent prior to the exception is not provided to caller.\n     * The communication should be considered corrupt.  The sender should reestablish\n     * communication, reset all controllers and send all notes off.\n     *\n     * @param msg a byte array containing the MIDI data\n     * @param offset the offset of the first byte of the data in the array to be sent\n     * @param count the number of bytes of MIDI data in the array to be sent\n     * @param timestamp the timestamp of the message, based on {@link java.lang.System#nanoTime}\n     * @throws IOException if the data could not be sent in entirety\n     ",
    "links" : [ "#onSend", "java.lang.System#nanoTime", "#getMaxMessageSize" ]
  } ],
  "methodNames" : [ "public abstract void onSend(byte[] msg, int offset, int count, long timestamp) throws IOException", "public void flush() throws IOException", "public void onFlush() throws IOException", "public final int getMaxMessageSize()", "public void send(byte[] msg, int offset, int count) throws IOException", "public void send(byte[] msg, int offset, int count, long timestamp) throws IOException" ],
  "variableNames" : [ "mMaxMessageSize" ]
}