{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/System.java",
  "packageName" : "java.lang",
  "className" : "System",
  "comment" : "\n * The <code>System</code> class contains several useful class fields\n * and methods. It cannot be instantiated.\n *\n * <p>Among the facilities provided by the <code>System</code> class\n * are standard input, standard output, and error output streams;\n * access to externally defined properties and environment\n * variables; a means of loading files and libraries; and a utility\n * method for quickly copying a portion of an array.\n *\n * @author  unascribed\n * @since   JDK1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "in",
    "type" : "InputStream",
    "comment" : "\n     * The \"standard\" input stream. This stream is already\n     * open and ready to supply input data. Typically this stream\n     * corresponds to keyboard input or another input source specified by\n     * the host environment or user.\n     ",
    "links" : [ ]
  }, {
    "name" : "out",
    "type" : "PrintStream",
    "comment" : "\n     * The \"standard\" output stream. This stream is already\n     * open and ready to accept output data. Typically this stream\n     * corresponds to display output or another output destination\n     * specified by the host environment or user.\n     * <p>\n     * For simple stand-alone Java applications, a typical way to write\n     * a line of output data is:\n     * <blockquote><pre>\n     *     System.out.println(data)\n     * </pre></blockquote>\n     * <p>\n     * See the <code>println</code> methods in class <code>PrintStream</code>.\n     *\n     * @see     java.io.PrintStream#println()\n     * @see     java.io.PrintStream#println(boolean)\n     * @see     java.io.PrintStream#println(char)\n     * @see     java.io.PrintStream#println(char[])\n     * @see     java.io.PrintStream#println(double)\n     * @see     java.io.PrintStream#println(float)\n     * @see     java.io.PrintStream#println(int)\n     * @see     java.io.PrintStream#println(long)\n     * @see     java.io.PrintStream#println(java.lang.Object)\n     * @see     java.io.PrintStream#println(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "err",
    "type" : "PrintStream",
    "comment" : "\n     * The \"standard\" error output stream. This stream is already\n     * open and ready to accept output data.\n     * <p>\n     * Typically this stream corresponds to display output or another\n     * output destination specified by the host environment or user. By\n     * convention, this output stream is used to display error messages\n     * or other information that should come to the immediate attention\n     * of a user even if the principal output stream, the value of the\n     * variable <code>out</code>, has been redirected to a file or other\n     * destination that is typically not continuously monitored.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCK",
    "type" : "Object",
    "comment" : "\n     * Dedicated lock for GC / Finalization logic.\n     ",
    "links" : [ ]
  }, {
    "name" : "runGC",
    "type" : "boolean",
    "comment" : "\n     * Whether or not we need to do a GC before running the finalizers.\n     ",
    "links" : [ ]
  }, {
    "name" : "justRanFinalization",
    "type" : "boolean",
    "comment" : "\n     * If we just ran finalization, we might want to do a GC to free the finalized objects.\n     * This lets us do gc/runFinlization/gc sequences but prevents back to back System.gc().\n     ",
    "links" : [ ]
  }, {
    "name" : "cons",
    "type" : "Console",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The char array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The byte array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The short array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The short array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The short array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The short array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The short array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD",
    "type" : "int",
    "comment" : "\n     * The short array length threshold below which to use a Java\n     * (non-native) version of arraycopy() instead of the native\n     * version. See b/7103825.\n     ",
    "links" : [ ]
  }, {
    "name" : "props",
    "type" : "Properties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unchangeableProps",
    "type" : "Properties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lineSeparator",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setIn(InputStream in)",
    "returnType" : "void",
    "comment" : "\n     * Reassigns the \"standard\" input stream.\n     *\n     * <p>First, if there is a security manager, its <code>checkPermission</code>\n     * method is called with a <code>RuntimePermission(\"setIO\")</code> permission\n     *  to see if it's ok to reassign the \"standard\" input stream.\n     * <p>\n     *\n     * @param in the new standard input stream.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        <code>checkPermission</code> method doesn't allow\n     *        reassigning of the standard input stream.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     *\n     * @since   JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setOut(PrintStream out)",
    "returnType" : "void",
    "comment" : "\n     * Reassigns the \"standard\" output stream.\n     *\n     * <p>First, if there is a security manager, its <code>checkPermission</code>\n     * method is called with a <code>RuntimePermission(\"setIO\")</code> permission\n     *  to see if it's ok to reassign the \"standard\" output stream.\n     *\n     * @param out the new standard output stream\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        <code>checkPermission</code> method doesn't allow\n     *        reassigning of the standard output stream.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     *\n     * @since   JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setErr(PrintStream err)",
    "returnType" : "void",
    "comment" : "\n     * Reassigns the \"standard\" error output stream.\n     *\n     * <p>First, if there is a security manager, its <code>checkPermission</code>\n     * method is called with a <code>RuntimePermission(\"setIO\")</code> permission\n     *  to see if it's ok to reassign the \"standard\" error output stream.\n     *\n     * @param err the new standard error output stream.\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        <code>checkPermission</code> method doesn't allow\n     *        reassigning of the standard error output stream.\n     *\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     *\n     * @since   JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Console console()",
    "returnType" : "Console",
    "comment" : "\n     * Returns the unique {@link java.io.Console Console} object associated\n     * with the current Java virtual machine, if any.\n     *\n     * @return  The system console, if any, otherwise <tt>null</tt>.\n     *\n     * @since   1.6\n     ",
    "links" : [ "java.io.Console" ]
  }, {
    "name" : "public static Channel inheritedChannel() throws IOException",
    "returnType" : "Channel",
    "comment" : "\n     * Returns the channel inherited from the entity that created this\n     * Java virtual machine.\n     *\n     * <p> This method returns the channel obtained by invoking the\n     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel\n     * inheritedChannel} method of the system-wide default\n     * {@link java.nio.channels.spi.SelectorProvider} object. </p>\n     *\n     * <p> In addition to the network-oriented channels described in\n     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel\n     * inheritedChannel}, this method may return other kinds of\n     * channels in the future.\n     *\n     * @return  The inherited channel, if any, otherwise <tt>null</tt>.\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and it does not\n     *          permit access to the channel.\n     *\n     * @since 1.5\n     ",
    "links" : [ "java.nio.channels.spi.SelectorProvider", "java.nio.channels.spi.SelectorProvider#inheritedChannelinheritedChannel" ]
  }, {
    "name" : "private static native void setIn0(InputStream in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setOut0(PrintStream out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setErr0(PrintStream err)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setSecurityManager(final SecurityManager s)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code SecurityException} (except in case {@code sm == null}).\n     *\n     * <p>Security managers do <i>not</i> provide a secure environment for\n     * executing untrusted code and are unsupported on Android. Untrusted code\n     * cannot be safely isolated within a single VM on Android, so this method\n     * <i>always</i> throws a {@code SecurityException} when passed a non-null SecurityManager\n     *\n     * @param s a security manager\n     * @throws SecurityException always, unless {@code sm == null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SecurityManager getSecurityManager()",
    "returnType" : "SecurityManager",
    "comment" : "\n     * Always returns {@code null} in Android\n     *\n     * @return  {@code null} in Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native long currentTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current time in milliseconds.  Note that\n     * while the unit of time of the return value is a millisecond,\n     * the granularity of the value depends on the underlying\n     * operating system and may be larger.  For example, many\n     * operating systems measure time in units of tens of\n     * milliseconds.\n     *\n     * <p> See the description of the class <code>Date</code> for\n     * a discussion of slight discrepancies that may arise between\n     * \"computer time\" and coordinated universal time (UTC).\n     *\n     * @return  the difference, measured in milliseconds, between\n     *          the current time and midnight, January 1, 1970 UTC.\n     * @see     java.util.Date\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native long nanoTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value of the running Java Virtual Machine's\n     * high-resolution time source, in nanoseconds.\n     *\n     * <p>This method can only be used to measure elapsed time and is\n     * not related to any other notion of system or wall-clock time.\n     * The value returned represents nanoseconds since some fixed but\n     * arbitrary <i>origin</i> time (perhaps in the future, so values\n     * may be negative).  The same origin is used by all invocations of\n     * this method in an instance of a Java virtual machine; other\n     * virtual machine instances are likely to use a different origin.\n     *\n     * <p>This method provides nanosecond precision, but not necessarily\n     * nanosecond resolution (that is, how frequently the value changes)\n     * - no guarantees are made except that the resolution is at least as\n     * good as that of {@link #currentTimeMillis()}.\n     *\n     * <p>Differences in successive calls that span greater than\n     * approximately 292 years (2<sup>63</sup> nanoseconds) will not\n     * correctly compute elapsed time due to numerical overflow.\n     *\n     * <p>The values returned by this method become meaningful only when\n     * the difference between two such values, obtained within the same\n     * instance of a Java virtual machine, is computed.\n     *\n     * <p> For example, to measure how long some code takes to execute:\n     *  <pre> {@code\n     * long startTime = System.nanoTime();\n     * // ... the code being measured ...\n     * long estimatedTime = System.nanoTime() - startTime;}</pre>\n     *\n     * <p>To compare two nanoTime values\n     *  <pre> {@code\n     * long t0 = System.nanoTime();\n     * ...\n     * long t1 = System.nanoTime();}</pre>\n     *\n     * one should use {@code t1 - t0 < 0}, not {@code t1 < t0},\n     * because of the possibility of numerical overflow.\n     *\n     * <p>The value returned by this method does not account for elapsed\n     * time during deep sleep. For timekeeping facilities available on\n     * Android see {@link android.os.SystemClock}.\n     *\n     * @return the current value of the running Java Virtual Machine's\n     *         high-resolution time source, in nanoseconds\n     * @since 1.5\n     ",
    "links" : [ "#currentTimeMillis()", "android.os.SystemClock" ]
  }, {
    "name" : "public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * Copies an array from the specified source array, beginning at the\n     * specified position, to the specified position of the destination array.\n     * A subsequence of array components are copied from the source\n     * array referenced by <code>src</code> to the destination array\n     * referenced by <code>dest</code>. The number of components copied is\n     * equal to the <code>length</code> argument. The components at\n     * positions <code>srcPos</code> through\n     * <code>srcPos+length-1</code> in the source array are copied into\n     * positions <code>destPos</code> through\n     * <code>destPos+length-1</code>, respectively, of the destination\n     * array.\n     * <p>\n     * If the <code>src</code> and <code>dest</code> arguments refer to the\n     * same array object, then the copying is performed as if the\n     * components at positions <code>srcPos</code> through\n     * <code>srcPos+length-1</code> were first copied to a temporary\n     * array with <code>length</code> components and then the contents of\n     * the temporary array were copied into positions\n     * <code>destPos</code> through <code>destPos+length-1</code> of the\n     * destination array.\n     * <p>\n     * If <code>dest</code> is <code>null</code>, then a\n     * <code>NullPointerException</code> is thrown.\n     * <p>\n     * If <code>src</code> is <code>null</code>, then a\n     * <code>NullPointerException</code> is thrown and the destination\n     * array is not modified.\n     * <p>\n     * Otherwise, if any of the following is true, an\n     * <code>ArrayStoreException</code> is thrown and the destination is\n     * not modified:\n     * <ul>\n     * <li>The <code>src</code> argument refers to an object that is not an\n     *     array.\n     * <li>The <code>dest</code> argument refers to an object that is not an\n     *     array.\n     * <li>The <code>src</code> argument and <code>dest</code> argument refer\n     *     to arrays whose component types are different primitive types.\n     * <li>The <code>src</code> argument refers to an array with a primitive\n     *    component type and the <code>dest</code> argument refers to an array\n     *     with a reference component type.\n     * <li>The <code>src</code> argument refers to an array with a reference\n     *    component type and the <code>dest</code> argument refers to an array\n     *     with a primitive component type.\n     * </ul>\n     * <p>\n     * Otherwise, if any of the following is true, an\n     * <code>IndexOutOfBoundsException</code> is\n     * thrown and the destination is not modified:\n     * <ul>\n     * <li>The <code>srcPos</code> argument is negative.\n     * <li>The <code>destPos</code> argument is negative.\n     * <li>The <code>length</code> argument is negative.\n     * <li><code>srcPos+length</code> is greater than\n     *     <code>src.length</code>, the length of the source array.\n     * <li><code>destPos+length</code> is greater than\n     *     <code>dest.length</code>, the length of the destination array.\n     * </ul>\n     * <p>\n     * Otherwise, if any actual component of the source array from\n     * position <code>srcPos</code> through\n     * <code>srcPos+length-1</code> cannot be converted to the component\n     * type of the destination array by assignment conversion, an\n     * <code>ArrayStoreException</code> is thrown. In this case, let\n     * <b><i>k</i></b> be the smallest nonnegative integer less than\n     * length such that <code>src[srcPos+</code><i>k</i><code>]</code>\n     * cannot be converted to the component type of the destination\n     * array; when the exception is thrown, source array components from\n     * positions <code>srcPos</code> through\n     * <code>srcPos+</code><i>k</i><code>-1</code>\n     * will already have been copied to destination array positions\n     * <code>destPos</code> through\n     * <code>destPos+</code><i>k</I><code>-1</code> and no other\n     * positions of the destination array will have been modified.\n     * (Because of the restrictions already itemized, this\n     * paragraph effectively applies only to the situation where both\n     * arrays have component types that are reference types.)\n     *\n     * @param      src      the source array.\n     * @param      srcPos   starting position in the source array.\n     * @param      dest     the destination array.\n     * @param      destPos  starting position in the destination data.\n     * @param      length   the number of array elements to be copied.\n     * @exception  IndexOutOfBoundsException  if copying would cause\n     *               access of data outside array bounds.\n     * @exception  ArrayStoreException  if an element in the <code>src</code>\n     *               array could not be stored into the <code>dest</code> array\n     *               because of a type mismatch.\n     * @exception  NullPointerException if either <code>src</code> or\n     *               <code>dest</code> is <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The char[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyCharUnchecked(char[] src, int srcPos, char[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The char[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The byte[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyByteUnchecked(byte[] src, int srcPos, byte[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The byte[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The short[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyShortUnchecked(short[] src, int srcPos, short[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The short[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The int[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyIntUnchecked(int[] src, int srcPos, int[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The int[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The long[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyLongUnchecked(long[] src, int srcPos, long[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The long[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The float[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyFloatUnchecked(float[] src, int srcPos, float[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The float[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The double[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyDoubleUnchecked(double[] src, int srcPos, double[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The double[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The boolean[] specialized version of arraycopy().\n     * Note: This method is required for runtime ART compiler optimizations.\n     * Do not remove or change the signature.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void arraycopyBooleanUnchecked(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length)",
    "returnType" : "void",
    "comment" : "\n     * The boolean[] specialized, unchecked, native version of\n     * arraycopy(). This assumes error checking has been done.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int identityHashCode(Object x)",
    "returnType" : "int",
    "comment" : "\n     * Returns the same hash code for the given object as\n     * would be returned by the default method hashCode(),\n     * whether or not the given object's class overrides\n     * hashCode().\n     * The hash code for the null reference is zero.\n     *\n     * @param x object for which the hashCode is to be calculated\n     * @return  the hashCode\n     * @since   JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native String[] specialProperties()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void parsePropertyAssignments(Properties p, String[] assignments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Properties initUnchangeableSystemProperties()",
    "returnType" : "Properties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Properties initProperties()",
    "returnType" : "Properties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Properties setDefaultChangeableProperties(Properties p)",
    "returnType" : "Properties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setUnchangeableSystemProperty(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Inits an unchangeable system property with the given value.\n     *\n     * This is called from native code when the environment needs to change under native\n     * bridge emulation.\n     *\n     * @hide also visible for tests.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void addLegacyLocaleSystemProperties()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Properties getProperties()",
    "returnType" : "Properties",
    "comment" : "\n     * Determines the current system properties.\n     *\n     *\n     * <p>The following properties are always provided by the Dalvik VM:</p>\n     * <p><table BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\n     * <tr BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\n     *     <td><b>Name</b></td>        <td><b>Meaning</b></td>                    <td><b>Example</b></td></tr>\n     * <tr><td>file.separator</td>     <td>{@link java.io.File#separator}</td>    <td>{@code /}</td></tr>\n     *\n     * <tr><td>java.class.path</td>    <td>System class path</td>                 <td>{@code .}</td></tr>\n     * <tr><td>java.class.version</td> <td>(Not useful on Android)</td>           <td>{@code 50.0}</td></tr>\n     * <tr><td>java.compiler</td>      <td>(Not useful on Android)</td>           <td>Empty</td></tr>\n     * <tr><td>java.ext.dirs</td>      <td>(Not useful on Android)</td>           <td>Empty</td></tr>\n     * <tr><td>java.home</td>          <td>Location of the VM on the file system</td> <td>{@code /apex/com.android.art/}</td></tr>\n     * <tr><td>java.io.tmpdir</td>     <td>Location of a temporary directory.<br>The location varies by application.<br>See {@link java.io.File#createTempFile}</td> <td>{@code /data/user/0/com.android.app/cache}</td></tr>\n     * <tr><td>java.library.path</td>  <td>Search path for JNI libraries</td>     <td>{@code /vendor/lib:/system/lib}</td></tr>\n     * <tr><td>java.vendor</td>        <td>Human-readable VM vendor</td>          <td>{@code The Android Project}</td></tr>\n     * <tr><td>java.vendor.url</td>    <td>URL for VM vendor's web site</td>      <td>{@code http://www.android.com/}</td></tr>\n     * <tr><td>java.version</td>       <td>(Not useful on Android)</td>           <td>{@code 0}</td></tr>\n     *\n     * <tr><td>java.specification.version</td>    <td>VM libraries version</td>        <td>{@code 0.9}</td></tr>\n     * <tr><td>java.specification.vendor</td>     <td>VM libraries vendor</td>         <td>{@code The Android Project}</td></tr>\n     * <tr><td>java.specification.name</td>       <td>VM libraries name</td>           <td>{@code Dalvik Core Library}</td></tr>\n     * <tr><td>java.vm.version</td>               <td>VM implementation version</td>   <td>{@code 1.2.0}</td></tr>\n     * <tr><td>java.vm.vendor</td>                <td>VM implementation vendor</td>    <td>{@code The Android Project}</td></tr>\n     * <tr><td>java.vm.name</td>                  <td>VM implementation name</td>      <td>{@code Dalvik}</td></tr>\n     * <tr><td>java.vm.specification.version</td> <td>VM specification version</td>    <td>{@code 0.9}</td></tr>\n     * <tr><td>java.vm.specification.vendor</td>  <td>VM specification vendor</td>     <td>{@code The Android Project}</td></tr>\n     * <tr><td>java.vm.specification.name</td>    <td>VM specification name</td>       <td>{@code Dalvik Virtual Machine Specification}</td></tr>\n     *\n     * <tr><td>line.separator</td>     <td>The system line separator</td>         <td>{@code \\n}</td></tr>\n     *\n     * <tr><td>os.arch</td>            <td>OS architecture</td>                   <td>{@code aarch64}</td></tr>\n     * <tr><td>os.name</td>            <td>OS (kernel) name</td>                  <td>{@code Linux}</td></tr>\n     * <tr><td>os.version</td>         <td>OS (kernel) version</td>               <td>{@code 5.10.98-g6ea688a79989}</td></tr>\n     *\n     * <tr><td>path.separator</td>     <td>See {@link java.io.File#pathSeparator}</td> <td>{@code :}</td></tr>\n     *\n     * <tr><td>user.dir</td>           <td>Base of non-absolute paths</td>        <td>{@code /}</td></tr>\n     * <tr><td>user.home</td>          <td>(Not useful on Android)</td>           <td>Empty</td></tr>\n     * <tr><td>user.name</td>          <td>(Not useful on Android)</td>           <td>Empty</td></tr>\n     *\n     * </table>\n     * <p>\n     * Multiple paths in a system property value are separated by the path\n     * separator character of the platform.\n     * <p>\n     * Note that even if the security manager does not permit the\n     * <code>getProperties</code> operation, it may choose to permit the\n     * {@link #getProperty(String)} operation.\n     *\n     * @return     the system properties\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkPropertiesAccess</code> method doesn't allow access\n     *              to the system properties.\n     * @see        #setProperties\n     * @see        java.lang.SecurityException\n     * @see        java.lang.SecurityManager#checkPropertiesAccess()\n     * @see        java.util.Properties\n     ",
    "links" : [ "java.io.File#createTempFile", "#getProperty(String)", "java.io.File#separator", "java.io.File#pathSeparator" ]
  }, {
    "name" : "public static String lineSeparator()",
    "returnType" : "String",
    "comment" : "\n     * Returns the system-dependent line separator string.  It always\n     * returns the same value - the initial value of the {@linkplain\n     * #getProperty(String) system property} {@code line.separator}.\n     *\n     * <p>On UNIX systems, it returns {@code \"\\n\"}; on Microsoft\n     * Windows systems it returns {@code \"\\r\\n\"}.\n     *\n     * @return the system-dependent line separator string\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setProperties(Properties props)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to set all system properties. Copies all properties from\n     * {@code p} and discards system properties that are read only and cannot\n     * be modified. See {@link #getProperty} for a list of such properties.\n     ",
    "links" : [ "#getProperty" ]
  }, {
    "name" : "public static String getProperty(String key)",
    "returnType" : "String",
    "comment" : "\n     * Gets the system property indicated by the specified key.\n     * <p>\n     * First, if there is a security manager, its\n     * <code>checkPropertyAccess</code> method is called with the key as\n     * its argument. This may result in a SecurityException.\n     * <p>\n     * If there is no current set of system properties, a set of system\n     * properties is first created and initialized in the same manner as\n     * for the <code>getProperties</code> method.\n     *\n     * @param      key   the name of the system property.\n     * @return     the string value of the system property,\n     *             or <code>null</code> if there is no property with that key.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *              access to the specified system property.\n     * @exception  NullPointerException if <code>key</code> is\n     *             <code>null</code>.\n     * @exception  IllegalArgumentException if <code>key</code> is empty.\n     * @see        #setProperty\n     * @see        java.lang.SecurityException\n     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n     * @see        java.lang.System#getProperties()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getProperty(String key, String def)",
    "returnType" : "String",
    "comment" : "\n     * Gets the system property indicated by the specified key.\n     * <p>\n     * First, if there is a security manager, its\n     * <code>checkPropertyAccess</code> method is called with the\n     * <code>key</code> as its argument.\n     * <p>\n     * If there is no current set of system properties, a set of system\n     * properties is first created and initialized in the same manner as\n     * for the <code>getProperties</code> method.\n     *\n     * @param      key   the name of the system property.\n     * @param      def   a default value.\n     * @return     the string value of the system property,\n     *             or the default value if there is no property with that key.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *             access to the specified system property.\n     * @exception  NullPointerException if <code>key</code> is\n     *             <code>null</code>.\n     * @exception  IllegalArgumentException if <code>key</code> is empty.\n     * @see        #setProperty\n     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n     * @see        java.lang.System#getProperties()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String setProperty(String key, String value)",
    "returnType" : "String",
    "comment" : "\n     * Sets the system property indicated by the specified key.\n     * <p>\n     * First, if a security manager exists, its\n     * <code>SecurityManager.checkPermission</code> method\n     * is called with a <code>PropertyPermission(key, \"write\")</code>\n     * permission. This may result in a SecurityException being thrown.\n     * If no exception is thrown, the specified property is set to the given\n     * value.\n     * <p>\n     *\n     * @param      key   the name of the system property.\n     * @param      value the value of the system property.\n     * @return     the previous value of the system property,\n     *             or <code>null</code> if it did not have one.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkPermission</code> method doesn't allow\n     *             setting of the specified property.\n     * @exception  NullPointerException if <code>key</code> or\n     *             <code>value</code> is <code>null</code>.\n     * @exception  IllegalArgumentException if <code>key</code> is empty.\n     * @see        #getProperty\n     * @see        java.lang.System#getProperty(java.lang.String)\n     * @see        java.lang.System#getProperty(java.lang.String, java.lang.String)\n     * @see        java.util.PropertyPermission\n     * @see        SecurityManager#checkPermission\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String clearProperty(String key)",
    "returnType" : "String",
    "comment" : "\n     * Removes the system property indicated by the specified key.\n     * <p>\n     * First, if a security manager exists, its\n     * <code>SecurityManager.checkPermission</code> method\n     * is called with a <code>PropertyPermission(key, \"write\")</code>\n     * permission. This may result in a SecurityException being thrown.\n     * If no exception is thrown, the specified property is removed.\n     * <p>\n     *\n     * @param      key   the name of the system property to be removed.\n     * @return     the previous string value of the system property,\n     *             or <code>null</code> if there was no property with that key.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *              access to the specified system property.\n     * @exception  NullPointerException if <code>key</code> is\n     *             <code>null</code>.\n     * @exception  IllegalArgumentException if <code>key</code> is empty.\n     * @see        #getProperty\n     * @see        #setProperty\n     * @see        java.util.Properties\n     * @see        java.lang.SecurityException\n     * @see        java.lang.SecurityManager#checkPropertiesAccess()\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkKey(String key)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getenv(String name)",
    "returnType" : "String",
    "comment" : "\n     * Gets the value of the specified environment variable. An\n     * environment variable is a system-dependent external named\n     * value.\n     *\n     * <p>If a security manager exists, its\n     * {@link SecurityManager#checkPermission checkPermission}\n     * method is called with a\n     * <code>{@link RuntimePermission}(\"getenv.\"+name)</code>\n     * permission.  This may result in a {@link SecurityException}\n     * being thrown.  If no exception is thrown the value of the\n     * variable <code>name</code> is returned.\n     *\n     * <p><a name=\"EnvironmentVSSystemProperties\"><i>System\n     * properties</i> and <i>environment variables</i></a> are both\n     * conceptually mappings between names and values.  Both\n     * mechanisms can be used to pass user-defined information to a\n     * Java process.  Environment variables have a more global effect,\n     * because they are visible to all descendants of the process\n     * which defines them, not just the immediate Java subprocess.\n     * They can have subtly different semantics, such as case\n     * insensitivity, on different operating systems.  For these\n     * reasons, environment variables are more likely to have\n     * unintended side effects.  It is best to use system properties\n     * where possible.  Environment variables should be used when a\n     * global effect is desired, or when an external system interface\n     * requires an environment variable (such as <code>PATH</code>).\n     *\n     * <p>On UNIX systems the alphabetic case of <code>name</code> is\n     * typically significant, while on Microsoft Windows systems it is\n     * typically not.  For example, the expression\n     * <code>System.getenv(\"FOO\").equals(System.getenv(\"foo\"))</code>\n     * is likely to be true on Microsoft Windows.\n     *\n     * @param  name the name of the environment variable\n     * @return the string value of the variable, or <code>null</code>\n     *         if the variable is not defined in the system environment\n     * @throws NullPointerException if <code>name</code> is <code>null</code>\n     * @throws SecurityException\n     *         if a security manager exists and its\n     *         {@link SecurityManager#checkPermission checkPermission}\n     *         method doesn't allow access to the environment variable\n     *         <code>name</code>\n     * @see    #getenv()\n     * @see    ProcessBuilder#environment()\n     ",
    "links" : [ "java.lang.SecurityManager#checkPermission", "java.lang.RuntimePermission", "java.lang.SecurityException" ]
  }, {
    "name" : "public static java.util.Map<String, String> getenv()",
    "returnType" : "java.util.Map<String, String>",
    "comment" : "\n     * Returns an unmodifiable string map view of the current system environment.\n     * The environment is a system-dependent mapping from names to\n     * values which is passed from parent to child processes.\n     *\n     * <p>If the system does not support environment variables, an\n     * empty map is returned.\n     *\n     * <p>The returned map will never contain null keys or values.\n     * Attempting to query the presence of a null key or value will\n     * throw a {@link NullPointerException}.  Attempting to query\n     * the presence of a key or value which is not of type\n     * {@link String} will throw a {@link ClassCastException}.\n     *\n     * <p>The returned map and its collection views may not obey the\n     * general contract of the {@link Object#equals} and\n     * {@link Object#hashCode} methods.\n     *\n     * <p>The returned map is typically case-sensitive on all platforms.\n     *\n     * <p>If a security manager exists, its\n     * {@link SecurityManager#checkPermission checkPermission}\n     * method is called with a\n     * <code>{@link RuntimePermission}(\"getenv.*\")</code>\n     * permission.  This may result in a {@link SecurityException} being\n     * thrown.\n     *\n     * <p>When passing information to a Java subprocess,\n     * <a href=#EnvironmentVSSystemProperties>system properties</a>\n     * are generally preferred over environment variables.\n     *\n     * @return the environment as a map of variable names to values\n     * @throws SecurityException\n     *         if a security manager exists and its\n     *         {@link SecurityManager#checkPermission checkPermission}\n     *         method doesn't allow access to the process environment\n     * @see    #getenv(String)\n     * @see    ProcessBuilder#environment()\n     * @since  1.5\n     ",
    "links" : [ "java.lang.Object#equals", "java.lang.SecurityManager#checkPermission", "java.lang.Object#hashCode", "java.lang.RuntimePermission", "java.lang.SecurityException", "java.lang.String", "java.lang.ClassCastException", "java.lang.NullPointerException" ]
  }, {
    "name" : "public static void exit(int status)",
    "returnType" : "void",
    "comment" : "\n     * Terminates the currently running Java Virtual Machine. The\n     * argument serves as a status code; by convention, a nonzero status\n     * code indicates abnormal termination.\n     * <p>\n     * This method calls the <code>exit</code> method in class\n     * <code>Runtime</code>. This method never returns normally.\n     * <p>\n     * The call <code>System.exit(n)</code> is effectively equivalent to\n     * the call:\n     * <blockquote><pre>\n     * Runtime.getRuntime().exit(n)\n     * </pre></blockquote>\n     *\n     * @param      status   exit status.\n     * @throws  SecurityException\n     *        if a security manager exists and its <code>checkExit</code>\n     *        method doesn't allow exit with the specified status.\n     * @see        java.lang.Runtime#exit(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void gc()",
    "returnType" : "void",
    "comment" : "\n     * Runs the garbage collector.\n     * <p>\n     * Calling the <code>gc</code> method suggests that the Java Virtual\n     * Machine expend effort toward recycling unused objects in order to\n     * make the memory they currently occupy available for quick reuse.\n     * When control returns from the method call, the Java Virtual\n     * Machine has made a best effort to reclaim space from all discarded\n     * objects.\n     * <p>\n     * The call <code>System.gc()</code> is effectively equivalent to the\n     * call:\n     * <blockquote><pre>\n     * Runtime.getRuntime().gc()\n     * </pre></blockquote>\n     * At API level 34 and lower, this does nothing unless it is preceded or\n     * followed by a runFinalization call.  Runtime.getRuntime().gc() always\n     * attempts to reclaim space.\n     * <p>\n     * Calling this indiscriminately is likely to severely degrade performance.\n     * Intended primarily for testing.\n     *\n     * @see     java.lang.Runtime#gc()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void runFinalization()",
    "returnType" : "void",
    "comment" : "\n     * Runs the finalization methods of any objects pending finalization.\n     * <p>\n     * Calling this method suggests that the Java Virtual Machine expend\n     * effort toward running the <code>finalize</code> methods of objects\n     * that have been found to be discarded but whose <code>finalize</code>\n     * methods have not yet been run. When control returns from the\n     * method call, the Java Virtual Machine has made a best effort to\n     * complete all outstanding finalizations.\n     * <p>\n     * The call <code>System.runFinalization()</code> is effectively\n     * equivalent to the call:\n     * <blockquote><pre>\n     * Runtime.getRuntime().runFinalization()\n     * </pre></blockquote>\n     *\n     * @see     java.lang.Runtime#runFinalization()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void runFinalizersOnExit(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable finalization on exit; doing so specifies that the\n     * finalizers of all objects that have finalizers that have not yet been\n     * automatically invoked are to be run before the Java runtime exits.\n     * By default, finalization on exit is disabled.\n     *\n     * <p>If there is a security manager,\n     * its <code>checkExit</code> method is first called\n     * with 0 as its argument to ensure the exit is allowed.\n     * This could result in a SecurityException.\n     *\n     * @deprecated  This method is inherently unsafe.  It may result in\n     *      finalizers being called on live objects while other threads are\n     *      concurrently manipulating those objects, resulting in erratic\n     *      behavior or deadlock.\n     * @param value indicating enabling or disabling of finalization\n     * @throws  SecurityException\n     *        if a security manager exists and its <code>checkExit</code>\n     *        method doesn't allow the exit.\n     *\n     * @see     java.lang.Runtime#exit(int)\n     * @see     java.lang.Runtime#gc()\n     * @see     java.lang.SecurityManager#checkExit(int)\n     * @since   JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void load(String filename)",
    "returnType" : "void",
    "comment" : "\n     * Loads the native library specified by the filename argument.  The filename\n     * argument must be an absolute path name.\n     *\n     * If the filename argument, when stripped of any platform-specific library\n     * prefix, path, and file extension, indicates a library whose name is,\n     * for example, L, and a native library called L is statically linked\n     * with the VM, then the JNI_OnLoad_L function exported by the library\n     * is invoked rather than attempting to load a dynamic library.\n     * A filename matching the argument does not have to exist in the\n     * file system.\n     * See the JNI Specification for more details.\n     *\n     * Otherwise, the filename argument is mapped to a native library image in\n     * an implementation-dependent manner.\n     *\n     * <p>\n     * The call <code>System.load(name)</code> is effectively equivalent\n     * to the call:\n     * <blockquote><pre>\n     * Runtime.getRuntime().load(name)\n     * </pre></blockquote>\n     *\n     * @param      filename   the file to load.\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkLink</code> method doesn't allow\n     *             loading of the specified dynamic library\n     * @exception  UnsatisfiedLinkError  if either the filename is not an\n     *             absolute path name, the native library is not statically\n     *             linked with the VM, or the library cannot be mapped to\n     *             a native library image by the host system.\n     * @exception  NullPointerException if <code>filename</code> is\n     *             <code>null</code>\n     * @see        java.lang.Runtime#load(java.lang.String)\n     * @see        java.lang.SecurityManager#checkLink(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void loadLibrary(String libname)",
    "returnType" : "void",
    "comment" : "\n     * Loads the native library specified by the <code>libname</code>\n     * argument.  The <code>libname</code> argument must not contain any platform\n     * specific prefix, file extension or path. If a native library\n     * called <code>libname</code> is statically linked with the VM, then the\n     * JNI_OnLoad_<code>libname</code> function exported by the library is invoked.\n     * See the JNI Specification for more details.\n     *\n     * Otherwise, the libname argument is loaded from a system library\n     * location and mapped to a native library image in an implementation-\n     * dependent manner.\n     * <p>\n     * The call <code>System.loadLibrary(name)</code> is effectively\n     * equivalent to the call\n     * <blockquote><pre>\n     * Runtime.getRuntime().loadLibrary(name)\n     * </pre></blockquote>\n     *\n     * @param      libname   the name of the library.\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkLink</code> method doesn't allow\n     *             loading of the specified dynamic library\n     * @exception  UnsatisfiedLinkError if either the libname argument\n     *             contains a file path, the native library is not statically\n     *             linked with the VM,  or the library cannot be mapped to a\n     *             native library image by the host system.\n     * @exception  NullPointerException if <code>libname</code> is\n     *             <code>null</code>\n     * @see        java.lang.Runtime#loadLibrary(java.lang.String)\n     * @see        java.lang.SecurityManager#checkLink(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native String mapLibraryName(String libname)",
    "returnType" : "String",
    "comment" : "\n     * Maps a library name into a platform-specific string representing\n     * a native library.\n     *\n     * @param      libname the name of the library.\n     * @return     a platform-dependent native library name.\n     * @exception  NullPointerException if <code>libname</code> is\n     *             <code>null</code>\n     * @see        java.lang.System#loadLibrary(java.lang.String)\n     * @see        java.lang.ClassLoader#findLibrary(java.lang.String)\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PrintStream newPrintStream(FileOutputStream fos, String enc)",
    "returnType" : "PrintStream",
    "comment" : "\n     * Create PrintStream for stdout/err based on encoding.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logE(String message)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logE(String message, Throwable th)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logI(String message)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logI(String message, Throwable th)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logW(String message)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logW(String message, Throwable th)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void log(char type, String message, Throwable th)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setIn(InputStream in)", "public static void setOut(PrintStream out)", "public static void setErr(PrintStream err)", "public static Console console()", "public static Channel inheritedChannel() throws IOException", "private static native void setIn0(InputStream in)", "private static native void setOut0(PrintStream out)", "private static native void setErr0(PrintStream err)", "public static void setSecurityManager(final SecurityManager s)", "public static SecurityManager getSecurityManager()", "public static native long currentTimeMillis()", "public static native long nanoTime()", "public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)", "private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length)", "private static native void arraycopyCharUnchecked(char[] src, int srcPos, char[] dst, int dstPos, int length)", "private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length)", "private static native void arraycopyByteUnchecked(byte[] src, int srcPos, byte[] dst, int dstPos, int length)", "private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length)", "private static native void arraycopyShortUnchecked(short[] src, int srcPos, short[] dst, int dstPos, int length)", "private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length)", "private static native void arraycopyIntUnchecked(int[] src, int srcPos, int[] dst, int dstPos, int length)", "private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length)", "private static native void arraycopyLongUnchecked(long[] src, int srcPos, long[] dst, int dstPos, int length)", "private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length)", "private static native void arraycopyFloatUnchecked(float[] src, int srcPos, float[] dst, int dstPos, int length)", "private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length)", "private static native void arraycopyDoubleUnchecked(double[] src, int srcPos, double[] dst, int dstPos, int length)", "private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length)", "private static native void arraycopyBooleanUnchecked(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length)", "public static int identityHashCode(Object x)", "private static native String[] specialProperties()", "private static void parsePropertyAssignments(Properties p, String[] assignments)", "private static Properties initUnchangeableSystemProperties()", "private static Properties initProperties()", "private static Properties setDefaultChangeableProperties(Properties p)", "public static void setUnchangeableSystemProperty(String key, String value)", "private static void addLegacyLocaleSystemProperties()", "public static Properties getProperties()", "public static String lineSeparator()", "public static void setProperties(Properties props)", "public static String getProperty(String key)", "public static String getProperty(String key, String def)", "public static String setProperty(String key, String value)", "public static String clearProperty(String key)", "private static void checkKey(String key)", "public static String getenv(String name)", "public static java.util.Map<String, String> getenv()", "public static void exit(int status)", "public static void gc()", "public static void runFinalization()", "public static void runFinalizersOnExit(boolean value)", "public static void load(String filename)", "public static void loadLibrary(String libname)", "public static native String mapLibraryName(String libname)", "private static PrintStream newPrintStream(FileOutputStream fos, String enc)", "public static void logE(String message)", "public static void logE(String message, Throwable th)", "public static void logI(String message)", "public static void logI(String message, Throwable th)", "public static void logW(String message)", "public static void logW(String message, Throwable th)", "private static native void log(char type, String message, Throwable th)" ],
  "variableNames" : [ "in", "out", "err", "LOCK", "runGC", "justRanFinalization", "cons", "ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD", "ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD", "props", "unchangeableProps", "lineSeparator" ]
}