{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/pdf/PdfRenderer.java",
  "packageName" : "android.graphics.pdf",
  "className" : "PdfRenderer",
  "comment" : "\n * <p>\n * This class enables rendering a PDF document. This class is not thread safe.\n * </p>\n * <p>\n * If you want to render a PDF, you create a renderer and for every page you want\n * to render, you open the page, render it, and close the page. After you are done\n * with rendering, you close the renderer. After the renderer is closed it should not\n * be used anymore. Note that the pages are rendered one by one, i.e. you can have\n * only a single page opened at any given time.\n * </p>\n * <p>\n * A typical use of the APIs to render a PDF looks like this:\n * </p>\n * <pre>\n * // create a new renderer\n * PdfRenderer renderer = new PdfRenderer(getSeekableFileDescriptor());\n *\n * // let us just render all pages\n * final int pageCount = renderer.getPageCount();\n * for (int i = 0; i < pageCount; i++) {\n *     Page page = renderer.openPage(i);\n *\n *     // say we render for showing on the screen\n *     page.render(mBitmap, null, null, Page.RENDER_MODE_FOR_DISPLAY);\n *\n *     // do stuff with the bitmap\n *\n *     // close the page\n *     page.close();\n * }\n *\n * // close the renderer\n * renderer.close();\n * </pre>\n *\n * <h3>Print preview and print output</h3>\n * <p>\n * If you are using this class to rasterize a PDF for printing or show a print\n * preview, it is recommended that you respect the following contract in order\n * to provide a consistent user experience when seeing a preview and printing,\n * i.e. the user sees a preview that is the same as the printout.\n * </p>\n * <ul>\n * <li>\n * Respect the property whether the document would like to be scaled for printing\n * as per {@link #shouldScaleForPrinting()}.\n * </li>\n * <li>\n * When scaling a document for printing the aspect ratio should be preserved.\n * </li>\n * <li>\n * Do not inset the content with any margins from the {@link android.print.PrintAttributes}\n * as the application is responsible to render it such that the margins are respected.\n * </li>\n * <li>\n * If document page size is greater than the printed media size the content should\n * be anchored to the upper left corner of the page for left-to-right locales and\n * top right corner for right-to-left locales.\n * </li>\n * </ul>\n *\n * @see #close()\n ",
  "variables" : [ {
    "name" : "sPdfiumLock",
    "type" : "Object",
    "comment" : "\n     * Any call the native pdfium code has to be single threaded as the library does not support\n     * parallel use.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempPoint",
    "type" : "Point",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeDocument",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInput",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentPage",
    "type" : "Page",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this renderer. You should not use this instance\n     * after this method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPageCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of pages in the document.\n     *\n     * @return The page count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldScaleForPrinting()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the document prefers to be scaled for printing.\n     * You should take this info account if the document is rendered\n     * for printing and the target media size differs from the page\n     * size.\n     *\n     * @return If to scale the document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Page openPage(int index)",
    "returnType" : "Page",
    "comment" : "\n     * Opens a page for rendering.\n     *\n     * @param index The page index.\n     * @return A page that can be rendered.\n     *\n     * @see android.graphics.pdf.PdfRenderer.Page#close() PdfRenderer.Page.close()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPageOpened()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPageNotInDocument(int pageIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreate(int fd, long size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClose(long documentPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetPageCount(long documentPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeScaleForPrinting(long documentPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRenderPage(long documentPtr, long pagePtr, long bitmapHandle, int clipLeft, int clipTop, int clipRight, int clipBottom, long transformPtr, int renderMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpenPageAndGetSize(long documentPtr, int pageIndex, Point outSize)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClosePage(long pagePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sPdfiumLock", "mCloseGuard", "mTempPoint", "mNativeDocument", "mPageCount", "mInput", "mCurrentPage" ],
  "methodNames" : [ "public void close()", "public int getPageCount()", "public boolean shouldScaleForPrinting()", "public Page openPage(int index)", "protected void finalize() throws Throwable", "private void doClose()", "private void throwIfClosed()", "private void throwIfPageOpened()", "private void throwIfPageNotInDocument(int pageIndex)", "private static native long nativeCreate(int fd, long size)", "private static native void nativeClose(long documentPtr)", "private static native int nativeGetPageCount(long documentPtr)", "private static native boolean nativeScaleForPrinting(long documentPtr)", "private static native void nativeRenderPage(long documentPtr, long pagePtr, long bitmapHandle, int clipLeft, int clipTop, int clipRight, int clipBottom, long transformPtr, int renderMode)", "private static native long nativeOpenPageAndGetSize(long documentPtr, int pageIndex, Point outSize)", "private static native void nativeClosePage(long pagePtr)" ]
}