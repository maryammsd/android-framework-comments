{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/transition/Scene.java",
  "packageName" : "android.transition",
  "className" : "Scene",
  "comment" : "\n * A scene represents the collection of values that various properties in the\n * View hierarchy will have when the scene is applied. A Scene can be\n * configured to automatically run a Transition when it is applied, which will\n * animate the various property changes that take place during the\n * scene change.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSceneRoot",
    "type" : "ViewGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayout",
    "type" : "View",
    "comment" : " alternative to layoutId",
    "links" : [ ]
  }, {
    "name" : "mEnterAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Scene getSceneForLayout(ViewGroup sceneRoot, int layoutId, Context context)",
    "returnType" : "Scene",
    "comment" : "\n     * Returns a Scene described by the resource file associated with the given\n     * <code>layoutId</code> parameter. If such a Scene has already been created for\n     * the given <code>sceneRoot</code>, that same Scene will be returned.\n     * This caching of layoutId-based scenes enables sharing of common scenes\n     * between those created in code and those referenced by {@link TransitionManager}\n     * XML resource files.\n     *\n     * @param sceneRoot The root of the hierarchy in which scene changes\n     * and transitions will take place.\n     * @param layoutId The id of a standard layout resource file.\n     * @param context The context used in the process of inflating\n     * the layout resource.\n     * @return The scene for the given root and layout id\n     ",
    "links" : [ "android.transition.TransitionManager" ]
  }, {
    "name" : "public ViewGroup getSceneRoot()",
    "returnType" : "ViewGroup",
    "comment" : "\n     * Gets the root of the scene, which is the root of the view hierarchy\n     * affected by changes due to this scene, and which will be animated\n     * when this scene is entered.\n     *\n     * @return The root of the view hierarchy affected by this scene.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void exit()",
    "returnType" : "void",
    "comment" : "\n     * Exits this scene, if it is the current scene\n     * on the scene's {@link #getSceneRoot() scene root}. The current scene is\n     * set when {@link #enter() entering} a scene.\n     * Exiting a scene runs the {@link #setExitAction(Runnable) exit action}\n     * if there is one.\n     ",
    "links" : [ "#getSceneRoot()", "#enter()", "#setExitAction(Runnable)" ]
  }, {
    "name" : "public void enter()",
    "returnType" : "void",
    "comment" : "\n     * Enters this scene, which entails changing all values that\n     * are specified by this scene. These may be values associated\n     * with a layout view group or layout resource file which will\n     * now be added to the scene root, or it may be values changed by\n     * an {@link #setEnterAction(Runnable)} enter action}, or a\n     * combination of the these. No transition will be run when the\n     * scene is entered. To get transition behavior in scene changes,\n     * use one of the methods in {@link TransitionManager} instead.\n     ",
    "links" : [ "#setEnterAction(Runnable)", "android.transition.TransitionManager" ]
  }, {
    "name" : " static void setCurrentScene(@NonNull ViewGroup sceneRoot, @Nullable Scene scene)",
    "returnType" : "void",
    "comment" : "\n     * Set the scene that the given ViewGroup is in. The current scene is set only\n     * on the root ViewGroup of a scene, not for every view in that hierarchy. This\n     * information is used by Scene to determine whether there is a previous\n     * scene which should be exited before the new scene is entered.\n     *\n     * @param sceneRoot The ViewGroup on which the current scene is being set\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Scene getCurrentScene(@NonNull ViewGroup sceneRoot)",
    "returnType" : "Scene",
    "comment" : "\n     * Gets the current {@link Scene} set on the given ViewGroup. A scene is set on a ViewGroup\n     * only if that ViewGroup is the scene root.\n     *\n     * @param sceneRoot The ViewGroup on which the current scene will be returned\n     * @return The current Scene set on this ViewGroup. A value of null indicates that\n     * no Scene is currently set.\n     ",
    "links" : [ "android.transition.Scene" ]
  }, {
    "name" : "public void setEnterAction(Runnable action)",
    "returnType" : "void",
    "comment" : "\n     * Scenes that are not defined with layout resources or\n     * hierarchies, or which need to perform additional steps\n     * after those hierarchies are changed to, should set an enter\n     * action, and possibly an exit action as well. An enter action\n     * will cause Scene to call back into application code to do\n     * anything else the application needs after transitions have\n     * captured pre-change values and after any other scene changes\n     * have been applied, such as the layout (if any) being added to\n     * the view hierarchy. After this method is called, Transitions will\n     * be played.\n     *\n     * @param action The runnable whose {@link Runnable#run() run()} method will\n     * be called when this scene is entered\n     * @see #setExitAction(Runnable)\n     * @see Scene#Scene(ViewGroup, View)\n     ",
    "links" : [ "#run()" ]
  }, {
    "name" : "public void setExitAction(Runnable action)",
    "returnType" : "void",
    "comment" : "\n     * Scenes that are not defined with layout resources or\n     * hierarchies, or which need to perform additional steps\n     * after those hierarchies are changed to, should set an enter\n     * action, and possibly an exit action as well. An exit action\n     * will cause Scene to call back into application code to do\n     * anything the application needs to do after applicable transitions have\n     * captured pre-change values, but before any other scene changes\n     * have been applied, such as the new layout (if any) being added to\n     * the view hierarchy. After this method is called, the next scene\n     * will be entered, including a call to {@link #setEnterAction(Runnable)}\n     * if an enter action is set.\n     *\n     * @see #setEnterAction(Runnable)\n     * @see Scene#Scene(ViewGroup, View)\n     ",
    "links" : [ "#setEnterAction(Runnable)" ]
  }, {
    "name" : " boolean isCreatedFromLayoutResource()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this Scene was created by a layout resource file, determined\n     * by the layoutId passed into\n     * {@link #getSceneForLayout(android.view.ViewGroup, int, android.content.Context)}.\n     * This is called by TransitionManager to determine whether it is safe for views from\n     * this scene to be removed from their parents when the scene is exited, which is\n     * used by {@link Fade} to fade these views out (the views must be removed from\n     * their parent in order to add them to the overlay for fading purposes). If a\n     * Scene is not based on a resource file, then the impact of removing views\n     * arbitrarily is unknown and should be avoided.\n     ",
    "links" : [ "#getSceneForLayout(android.view.ViewGroup", "android.transition.Fade" ]
  } ],
  "methodNames" : [ "public static Scene getSceneForLayout(ViewGroup sceneRoot, int layoutId, Context context)", "public ViewGroup getSceneRoot()", "public void exit()", "public void enter()", " static void setCurrentScene(@NonNull ViewGroup sceneRoot, @Nullable Scene scene)", "public static Scene getCurrentScene(@NonNull ViewGroup sceneRoot)", "public void setEnterAction(Runnable action)", "public void setExitAction(Runnable action)", " boolean isCreatedFromLayoutResource()" ],
  "variableNames" : [ "mContext", "mLayoutId", "mSceneRoot", "mLayout", "mEnterAction", "mExitAction" ]
}