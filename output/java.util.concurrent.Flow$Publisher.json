{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/Flow.java",
  "packageName" : "java.util.concurrent",
  "className" : "Publisher",
  "comment" : "\n     * A producer of items (and related control messages) received by\n     * Subscribers.  Each current {@link Subscriber} receives the same\n     * items (via method {@code onNext}) in the same order, unless\n     * drops or errors are encountered. If a Publisher encounters an\n     * error that does not allow items to be issued to a Subscriber,\n     * that Subscriber receives {@code onError}, and then receives no\n     * further messages.  Otherwise, when it is known that no further\n     * messages will be issued to it, a subscriber receives {@code\n     * onComplete}.  Publishers ensure that Subscriber method\n     * invocations for each subscription are strictly ordered in <a\n     * href=\"package-summary.html#MemoryVisibility\"><i>happens-before</i></a>\n     * order.\n     *\n     * <p>Publishers may vary in policy about whether drops (failures\n     * to issue an item because of resource limitations) are treated\n     * as unrecoverable errors.  Publishers may also vary about\n     * whether Subscribers receive items that were produced or\n     * available before they subscribed.\n     *\n     * @param <T> the published item type\n     ",
  "links" : [ "Subscriber" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void subscribe(Subscriber<? super T> subscriber)",
    "returnType" : "void",
    "comment" : "\n         * Adds the given Subscriber if possible.  If already\n         * subscribed, or the attempt to subscribe fails due to policy\n         * violations or errors, the Subscriber's {@code onError}\n         * method is invoked with an {@link IllegalStateException}.\n         * Otherwise, the Subscriber's {@code onSubscribe} method is\n         * invoked with a new {@link Subscription}.  Subscribers may\n         * enable receiving items by invoking the {@code request}\n         * method of this Subscription, and may unsubscribe by\n         * invoking its {@code cancel} method.\n         *\n         * @param subscriber the subscriber\n         * @throws NullPointerException if subscriber is null\n         ",
    "links" : [ "IllegalStateException", "Subscription" ]
  } ],
  "methodNames" : [ "public void subscribe(Subscriber<? super T> subscriber)" ],
  "variableNames" : [ ]
}