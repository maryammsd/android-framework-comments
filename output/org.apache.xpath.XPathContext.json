{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/XPathContext.java",
  "packageName" : "org.apache.xpath",
  "className" : "XPathContext",
  "comment" : "\n * Default class for the runtime execution context for XPath.\n * \n * <p>This class extends DTMManager but does not directly implement it.</p>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_last_pushed_rtfdtm",
    "type" : "IntStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_rtfdtm_stack",
    "type" : "Vector",
    "comment" : "\n   * Stack of cached \"reusable\" DTMs for Result Tree Fragments.\n   * This is a kluge to handle the problem of starting an RTF before\n   * the old one is complete.\n   * \n   * %REVIEW% I'm using a Vector rather than Stack so we can reuse\n   * the DTMs if the problem occurs multiple times. I'm not sure that's\n   * really a net win versus discarding the DTM and starting a new one...\n   * but the retained RTF DTM will have been tail-pruned so should be small.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_which_rtfdtm",
    "type" : "int",
    "comment" : " Index of currently active RTF DTM in m_rtfdtm_stack ",
    "links" : [ ]
  }, {
    "name" : "m_global_rtfdtm",
    "type" : "SAX2RTFDTM",
    "comment" : "\n   * Most recent \"reusable\" DTM for Global Result Tree Fragments. No stack is\n   * required since we're never going to pop these.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_DTMXRTreeFrags",
    "type" : "HashMap",
    "comment" : "\n   * HashMap of cached the DTMXRTreeFrag objects, which are identified by DTM IDs.\n   * The object are just wrappers for DTMs which are used in  XRTreeFrag.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isSecureProcessing",
    "type" : "boolean",
    "comment" : "\n   * state of the secure processing feature.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_dtmManager",
    "type" : "DTMManager",
    "comment" : "\n   * Though XPathContext context extends \n   * the DTMManager, it really is a proxy for this object, which \n   * is the real DTMManager.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_saxLocations",
    "type" : "ObjectStack",
    "comment" : " The current stylesheet locator. ",
    "links" : [ ]
  }, {
    "name" : "m_owner",
    "type" : "Object",
    "comment" : " The owner context of this XPathContext.  In the case of XSLT, this will be a\n   *  Transformer object.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_ownerGetErrorListener",
    "type" : "Method",
    "comment" : " The owner context of this XPathContext.  In the case of XSLT, this will be a\n   *  Transformer object.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_variableStacks",
    "type" : "VariableStack",
    "comment" : "\n   * The stack of Variable stacks.  A VariableStack will be\n   * pushed onto this stack for each template invocation.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_sourceTreeManager",
    "type" : "SourceTreeManager",
    "comment" : " The source tree manager, which associates Source objects to source \n   *  tree nodes. ",
    "links" : [ ]
  }, {
    "name" : "m_errorListener",
    "type" : "ErrorListener",
    "comment" : " The ErrorListener where errors and warnings are to be reported.   ",
    "links" : [ ]
  }, {
    "name" : "m_defaultErrorListener",
    "type" : "ErrorListener",
    "comment" : " A default ErrorListener in case our m_errorListener was not specified and our\n   *  owner either does not have an ErrorListener or has a null one.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_uriResolver",
    "type" : "URIResolver",
    "comment" : " The TrAX URI Resolver for resolving URIs from the document(...)\n   *  function to source tree nodes.  ",
    "links" : [ ]
  }, {
    "name" : "m_primaryReader",
    "type" : "XMLReader",
    "comment" : " The reader of the primary source tree.    ",
    "links" : [ ]
  }, {
    "name" : "m_contextNodeLists",
    "type" : "Stack",
    "comment" : "\n   * The current context node list.\n   ",
    "links" : [ ]
  }, {
    "name" : "RECURSIONLIMIT",
    "type" : "int",
    "comment" : "\n   * The ammount to use for stacks that record information during the \n   * recursive execution.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_currentNodes",
    "type" : "IntStack",
    "comment" : " The stack of <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a> objects.\n   *  Not to be confused with the current node list.  %REVIEW% Note that there \n   *  are no bounds check and resize for this stack, so if it is blown, it's all \n   *  over.  ",
    "links" : [ ]
  }, {
    "name" : "m_iteratorRoots",
    "type" : "NodeVector",
    "comment" : " A stack of the current sub-expression nodes.  ",
    "links" : [ ]
  }, {
    "name" : "m_predicateRoots",
    "type" : "NodeVector",
    "comment" : " A stack of the current sub-expression nodes.  ",
    "links" : [ ]
  }, {
    "name" : "m_currentExpressionNodes",
    "type" : "IntStack",
    "comment" : " A stack of the current sub-expression nodes.  ",
    "links" : [ ]
  }, {
    "name" : "m_predicatePos",
    "type" : "IntStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_prefixResolvers",
    "type" : "ObjectStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_axesIteratorStack",
    "type" : "Stack",
    "comment" : "\n   * Stack of AxesIterators.\n   ",
    "links" : [ ]
  }, {
    "name" : "expressionContext",
    "type" : "XPathExpressionContext",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DTMManager getDTMManager()",
    "returnType" : "DTMManager",
    "comment" : "\n   * Return the DTMManager object.  Though XPathContext context extends \n   * the DTMManager, it really is a proxy for the real DTMManager.  If a \n   * caller needs to make a lot of calls to the DTMManager, it is faster \n   * if it gets the real one from this function.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSecureProcessing(boolean flag)",
    "returnType" : "void",
    "comment" : "\n   * Set the state of the secure processing feature\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSecureProcessing()",
    "returnType" : "boolean",
    "comment" : "\n   * Return the state of the secure processing feature\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getDTM(javax.xml.transform.Source source, boolean unique, DTMWSFilter wsfilter, boolean incremental, boolean doIndexing)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM, loaded with the content from the\n   * specified source.  If the unique flag is true, a new instance will\n   * always be returned.  Otherwise it is up to the DTMManager to return a\n   * new instance or an instance that it already created and may be being used\n   * by someone else.\n   * (I think more parameters will need to be added for error handling, and entity\n   * resolution).\n   *\n   * @param source the specification of the source object, which may be null, \n   *               in which case it is assumed that node construction will take \n   *               by some other means.\n   * @param unique true if the returned DTM must be unique, probably because it\n   * is going to be mutated.\n   * @param wsfilter Enables filtering of whitespace nodes, and may be null.\n   * @param incremental true if the construction should try and be incremental.\n   * @param doIndexing true if the caller considers it worth it to use \n   *                   indexing schemes.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM that \"owns\" a node handle. \n   *\n   * @param nodeHandle the nodeHandle.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getDTMHandleFromNode(org.w3c.dom.Node node)",
    "returnType" : "int",
    "comment" : "\n   * Given a W3C DOM node, try and return a DTM handle.\n   * Note: calling this may be non-optimal.\n   * \n   * @param node Non-null reference to a DOM node.\n   * \n   * @return a valid DTM handle.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getDTMIdentity(DTM dtm)",
    "returnType" : "int",
    "comment" : "\n   * %TBD% Doc\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM createDocumentFragment()",
    "returnType" : "DTM",
    "comment" : "\n   * Creates an empty <code>DocumentFragment</code> object. \n   * @return A new <code>DocumentFragment handle</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean release(DTM dtm, boolean shouldHardDelete)",
    "returnType" : "boolean",
    "comment" : "\n   * Release a DTM either to a lru pool, or completely remove reference.\n   * DTMs without system IDs are always hard deleted.\n   * State: experimental.\n   * \n   * @param dtm The DTM to be released.\n   * @param shouldHardDelete True if the DTM should be removed no matter what.\n   * @return true if the DTM was removed, false if it was put back in a lru pool.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator createDTMIterator(Object xpathCompiler, int pos)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> based on an XPath\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or\n   * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n   *\n   * @param xpathCompiler ??? Somehow we need to pass in a subpart of the\n   * expression.  I hate to do this with strings, since the larger expression\n   * has already been parsed.\n   *\n   * @param pos The position in the expression.\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator createDTMIterator(String xpathString, PrefixResolver presolver)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> based on an XPath\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or\n   * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n   *\n   * @param xpathString Must be a valid string expressing a\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or\n   * a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n   *\n   * @param presolver An object that can resolve prefixes to namespace URLs.\n   *\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator createDTMIterator(int whatToShow, DTMFilter filter, boolean entityReferenceExpansion)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> based only on a whatToShow and\n   * a DTMFilter.  The traversal semantics are defined as the descendant\n   * access.\n   *\n   * @param whatToShow This flag specifies which node types may appear in\n   *   the logical view of the tree presented by the iterator. See the\n   *   description of <code>NodeFilter</code> for the set of possible\n   *   <code>SHOW_</code> values.These flags can be combined using\n   *   <code>OR</code>.\n   * @param filter The <code>NodeFilter</code> to be used with this\n   *   <code>TreeWalker</code>, or <code>null</code> to indicate no filter.\n   * @param entityReferenceExpansion The value of this flag determines\n   *   whether entity reference nodes are expanded.\n   *\n   * @return The newly created <code>NodeIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator createDTMIterator(int node)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Create a new <code>DTMIterator</code> that holds exactly one node.\n   *\n   * @param node The node handle that the DTMIterator will iterate to.\n   *\n   * @return The newly created <code>DTMIterator</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset for new run.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSAXLocator(SourceLocator location)",
    "returnType" : "void",
    "comment" : "\n   * Set the current locater in the stylesheet.\n   *\n   * @param location The location within the stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void pushSAXLocator(SourceLocator location)",
    "returnType" : "void",
    "comment" : "\n   * Set the current locater in the stylesheet.\n   *\n   * @param location The location within the stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void pushSAXLocatorNull()",
    "returnType" : "void",
    "comment" : "\n   * Push a slot on the locations stack so that setSAXLocator can be \n   * repeatedly called.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public void popSAXLocator()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current locater.\n   ",
    "links" : [ ]
  }, {
    "name" : "public SourceLocator getSAXLocator()",
    "returnType" : "SourceLocator",
    "comment" : "\n   * Get the current locater in the stylesheet.\n   *\n   * @return The location within the stylesheet, or null if not known.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object getOwnerObject()",
    "returnType" : "Object",
    "comment" : "\n   * Get the \"owner\" context of this context, which should be,\n   * in the case of XSLT, the Transformer object.  This is needed\n   * so that XSLT functions can get the Transformer.\n   * @return The owner object passed into the constructor, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final VariableStack getVarStack()",
    "returnType" : "VariableStack",
    "comment" : "\n   * Get the variable stack, which is in charge of variables and\n   * parameters.\n   *\n   * @return the variable stack, which should not be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setVarStack(VariableStack varStack)",
    "returnType" : "void",
    "comment" : " \n   * Get the variable stack, which is in charge of variables and\n   * parameters.\n   *\n   * @param varStack non-null reference to the variable stack.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final SourceTreeManager getSourceTreeManager()",
    "returnType" : "SourceTreeManager",
    "comment" : "\n   * Get the SourceTreeManager associated with this execution context.\n   *\n   * @return the SourceTreeManager associated with this execution context.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceTreeManager(SourceTreeManager mgr)",
    "returnType" : "void",
    "comment" : "\n   * Set the SourceTreeManager associated with this execution context.\n   *\n   * @param mgr the SourceTreeManager to be associated with this \n   *        execution context.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final ErrorListener getErrorListener()",
    "returnType" : "ErrorListener",
    "comment" : "\n   * Get the ErrorListener where errors and warnings are to be reported.\n   *\n   * @return A non-null ErrorListener reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorListener(ErrorListener listener) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Set the ErrorListener where errors and warnings are to be reported.\n   *\n   * @param listener A non-null ErrorListener reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final URIResolver getURIResolver()",
    "returnType" : "URIResolver",
    "comment" : "\n   * Get the URIResolver associated with this execution context.\n   *\n   * @return a URI resolver, which may be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setURIResolver(URIResolver resolver)",
    "returnType" : "void",
    "comment" : "\n   * Set the URIResolver associated with this execution context.\n   *\n   * @param resolver the URIResolver to be associated with this \n   *        execution context, may be null to clear an already set resolver.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final XMLReader getPrimaryReader()",
    "returnType" : "XMLReader",
    "comment" : "\n   * Get primary XMLReader associated with this execution context.\n   *\n   * @return The reader of the primary source tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPrimaryReader(XMLReader reader)",
    "returnType" : "void",
    "comment" : "\n   * Set primary XMLReader associated with this execution context.\n   *\n   * @param reader The reader of the primary source tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void assertion(boolean b, String msg) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an assertion error, and probably throw an\n   * exception.\n   *\n   * @param b  If false, a TransformerException will be thrown.\n   * @param msg The assertion message, which should be informative.\n   * \n   * @throws javax.xml.transform.TransformerException if b is false.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Stack getContextNodeListsStack()",
    "returnType" : "Stack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContextNodeListsStack(Stack s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DTMIterator getContextNodeList()",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Get the current context node list.\n   *\n   * @return  the <a href=\"http://www.w3.org/TR/xslt#dt-current-node-list\">current node list</a>,\n   * also refered to here as a <term>context node list</term>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushContextNodeList(DTMIterator nl)",
    "returnType" : "void",
    "comment" : "\n   * Set the current context node list.\n   *\n   * @param nl the <a href=\"http://www.w3.org/TR/xslt#dt-current-node-list\">current node list</a>,\n   * also refered to here as a <term>context node list</term>.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popContextNodeList()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current context node list.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public IntStack getCurrentNodeStack()",
    "returnType" : "IntStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentNodeStack(IntStack nv)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrentNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the current context node.\n   *\n   * @return the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushCurrentNodeAndExpression(int cn, int en)",
    "returnType" : "void",
    "comment" : "\n   * Set the current context node and expression node.\n   *\n   * @param cn the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a>.\n   * @param en the sub-expression context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popCurrentNodeAndExpression()",
    "returnType" : "void",
    "comment" : "\n   * Set the current context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushExpressionState(int cn, int en, PrefixResolver nc)",
    "returnType" : "void",
    "comment" : "\n   * Push the current context node, expression node, and prefix resolver.\n   *\n   * @param cn the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a>.\n   * @param en the sub-expression context node.\n   * @param nc the namespace context (prefix resolver.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popExpressionState()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current context node, expression node, and prefix resolver.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushCurrentNode(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the current context node.\n   *\n   * @param n the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current node</a>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popCurrentNode()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushPredicateRoot(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the current predicate root.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popPredicateRoot()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current predicate root.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getPredicateRoot()",
    "returnType" : "int",
    "comment" : "\n   * Get the current predicate root.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushIteratorRoot(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the current location path iterator root.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popIteratorRoot()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current location path iterator root.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getIteratorRoot()",
    "returnType" : "int",
    "comment" : "\n   * Get the current location path iterator root.\n   ",
    "links" : [ ]
  }, {
    "name" : "public IntStack getCurrentExpressionNodeStack()",
    "returnType" : "IntStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentExpressionNodeStack(IntStack nv)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getPredicatePos()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void pushPredicatePos(int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void popPredicatePos()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrentExpressionNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the current node that is the expression's context (i.e. for current() support).\n   *\n   * @return The current sub-expression node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushCurrentExpressionNode(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the current node that is the expression's context (i.e. for current() support).\n   *\n   * @param n The sub-expression node to be current.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popCurrentExpressionNode()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current node that is the expression's context \n   * (i.e. for current() support).\n   ",
    "links" : [ ]
  }, {
    "name" : "public final PrefixResolver getNamespaceContext()",
    "returnType" : "PrefixResolver",
    "comment" : "\n   * Get the current namespace context for the xpath.\n   *\n   * @return the current prefix resolver for resolving prefixes to \n   *         namespace URLs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setNamespaceContext(PrefixResolver pr)",
    "returnType" : "void",
    "comment" : "\n   * Get the current namespace context for the xpath.\n   *\n   * @param pr the prefix resolver to be used for resolving prefixes to \n   *         namespace URLs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushNamespaceContext(PrefixResolver pr)",
    "returnType" : "void",
    "comment" : "\n   * Push a current namespace context for the xpath.\n   *\n   * @param pr the prefix resolver to be used for resolving prefixes to \n   *         namespace URLs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void pushNamespaceContextNull()",
    "returnType" : "void",
    "comment" : "\n   * Just increment the namespace contest stack, so that setNamespaceContext\n   * can be used on the slot.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popNamespaceContext()",
    "returnType" : "void",
    "comment" : "\n   * Pop the current namespace context for the xpath.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Stack getAxesIteratorStackStacks()",
    "returnType" : "Stack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAxesIteratorStackStacks(Stack s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void pushSubContextList(SubContextList iter)",
    "returnType" : "void",
    "comment" : "\n   * Push a TreeWalker on the stack.\n   *\n   * @param iter A sub-context AxesWalker.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void popSubContextList()",
    "returnType" : "void",
    "comment" : "\n   * Pop the last pushed axes iterator.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public SubContextList getSubContextList()",
    "returnType" : "SubContextList",
    "comment" : "\n   * Get the current axes iterator, or return null if none.\n   *\n   * @return the sub-context node list.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.apache.xpath.axes.SubContextList getCurrentNodeList()",
    "returnType" : "org.apache.xpath.axes.SubContextList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getContextNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the current context node.\n   * @return The current context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final DTMIterator getContextNodes()",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Get the current context node list.\n   * @return An iterator for the current context list, as\n   * defined in XSLT.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ExpressionContext getExpressionContext()",
    "returnType" : "ExpressionContext",
    "comment" : "\n   * The the expression context for extensions for this context.\n   * \n   * @return An object that implements the ExpressionContext.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getGlobalRTFDTM()",
    "returnType" : "DTM",
    "comment" : "\n   * Get a DTM to be used as a container for a global Result Tree\n   * Fragment. This will always be an instance of (derived from? equivalent to?) \n   * SAX2DTM, since each RTF is constructed by temporarily redirecting our SAX \n   * output to it. It may be a single DTM containing for multiple fragments, \n   * if the implementation supports that.\n   * \n   * Note: The distinction between this method and getRTFDTM() is that the latter\n   * allocates space from the dynamic variable stack (m_rtfdtm_stack), which may\n   * be pruned away again as the templates which defined those variables are exited.\n   * Global variables may be bound late (see XUnresolvedVariable), and never want to\n   * be discarded, hence we need to allocate them separately and don't actually need\n   * a stack to track them.\n   * \n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getRTFDTM()",
    "returnType" : "DTM",
    "comment" : "\n   * Get a DTM to be used as a container for a dynamic Result Tree\n   * Fragment. This will always be an instance of (derived from? equivalent to?) \n   * SAX2DTM, since each RTF is constructed by temporarily redirecting our SAX \n   * output to it. It may be a single DTM containing for multiple fragments, \n   * if the implementation supports that.\n   * \n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void pushRTFContext()",
    "returnType" : "void",
    "comment" : " Push the RTFDTM's context mark, to allows discarding RTFs added after this\n   * point. (If it doesn't exist we don't push, since we might still be able to \n   * get away with not creating it. That requires that excessive pops be harmless.)\n   * ",
    "links" : [ ]
  }, {
    "name" : "public void popRTFContext()",
    "returnType" : "void",
    "comment" : " Pop the RTFDTM's context mark. This discards any RTFs added after the last\n   * mark was set. \n   * \n   * If there is no RTF DTM, there's nothing to pop so this\n   * becomes a no-op. If pushes were issued before this was called, we count on\n   * the fact that popRewindMark is defined such that overpopping just resets\n   * to empty.\n   * \n   * Complicating factor: We need to handle the case of popping back to a previous\n   * RTF DTM, if one of the weird produce-an-RTF-to-build-an-RTF cases arose.\n   * Basically: If pop says this DTM is now empty, then return to the previous\n   * if one exists, in whatever state we left it in. UGLY, but hopefully the\n   * situation which forces us to consider this will arise exceedingly rarely.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public DTMXRTreeFrag getDTMXRTreeFrag(int dtmIdentity)",
    "returnType" : "DTMXRTreeFrag",
    "comment" : "\n   * Gets DTMXRTreeFrag object if one has already been created.\n   * Creates new DTMXRTreeFrag object and adds to m_DTMXRTreeFrags  HashMap,\n   * otherwise.  \n   * @param dtmIdentity\n   * @return DTMXRTreeFrag\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void releaseDTMXRTreeFrags()",
    "returnType" : "void",
    "comment" : "\n   * Cleans DTMXRTreeFrag objects by removing references \n   * to DTM and XPathContext objects.   \n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DTMManager getDTMManager()", "public void setSecureProcessing(boolean flag)", "public boolean isSecureProcessing()", "public DTM getDTM(javax.xml.transform.Source source, boolean unique, DTMWSFilter wsfilter, boolean incremental, boolean doIndexing)", "public DTM getDTM(int nodeHandle)", "public int getDTMHandleFromNode(org.w3c.dom.Node node)", "public int getDTMIdentity(DTM dtm)", "public DTM createDocumentFragment()", "public boolean release(DTM dtm, boolean shouldHardDelete)", "public DTMIterator createDTMIterator(Object xpathCompiler, int pos)", "public DTMIterator createDTMIterator(String xpathString, PrefixResolver presolver)", "public DTMIterator createDTMIterator(int whatToShow, DTMFilter filter, boolean entityReferenceExpansion)", "public DTMIterator createDTMIterator(int node)", "public void reset()", "public void setSAXLocator(SourceLocator location)", "public void pushSAXLocator(SourceLocator location)", "public void pushSAXLocatorNull()", "public void popSAXLocator()", "public SourceLocator getSAXLocator()", "public Object getOwnerObject()", "public final VariableStack getVarStack()", "public final void setVarStack(VariableStack varStack)", "public final SourceTreeManager getSourceTreeManager()", "public void setSourceTreeManager(SourceTreeManager mgr)", "public final ErrorListener getErrorListener()", "public void setErrorListener(ErrorListener listener) throws IllegalArgumentException", "public final URIResolver getURIResolver()", "public void setURIResolver(URIResolver resolver)", "public final XMLReader getPrimaryReader()", "public void setPrimaryReader(XMLReader reader)", "private void assertion(boolean b, String msg) throws javax.xml.transform.TransformerException", "public Stack getContextNodeListsStack()", "public void setContextNodeListsStack(Stack s)", "public final DTMIterator getContextNodeList()", "public final void pushContextNodeList(DTMIterator nl)", "public final void popContextNodeList()", "public IntStack getCurrentNodeStack()", "public void setCurrentNodeStack(IntStack nv)", "public final int getCurrentNode()", "public final void pushCurrentNodeAndExpression(int cn, int en)", "public final void popCurrentNodeAndExpression()", "public final void pushExpressionState(int cn, int en, PrefixResolver nc)", "public final void popExpressionState()", "public final void pushCurrentNode(int n)", "public final void popCurrentNode()", "public final void pushPredicateRoot(int n)", "public final void popPredicateRoot()", "public final int getPredicateRoot()", "public final void pushIteratorRoot(int n)", "public final void popIteratorRoot()", "public final int getIteratorRoot()", "public IntStack getCurrentExpressionNodeStack()", "public void setCurrentExpressionNodeStack(IntStack nv)", "public final int getPredicatePos()", "public final void pushPredicatePos(int n)", "public final void popPredicatePos()", "public final int getCurrentExpressionNode()", "public final void pushCurrentExpressionNode(int n)", "public final void popCurrentExpressionNode()", "public final PrefixResolver getNamespaceContext()", "public final void setNamespaceContext(PrefixResolver pr)", "public final void pushNamespaceContext(PrefixResolver pr)", "public final void pushNamespaceContextNull()", "public final void popNamespaceContext()", "public Stack getAxesIteratorStackStacks()", "public void setAxesIteratorStackStacks(Stack s)", "public final void pushSubContextList(SubContextList iter)", "public final void popSubContextList()", "public SubContextList getSubContextList()", "public org.apache.xpath.axes.SubContextList getCurrentNodeList()", "public final int getContextNode()", "public final DTMIterator getContextNodes()", "public ExpressionContext getExpressionContext()", "public DTM getGlobalRTFDTM()", "public DTM getRTFDTM()", "public void pushRTFContext()", "public void popRTFContext()", "public DTMXRTreeFrag getDTMXRTreeFrag(int dtmIdentity)", "private final void releaseDTMXRTreeFrags()" ],
  "variableNames" : [ "m_last_pushed_rtfdtm", "m_rtfdtm_stack", "m_which_rtfdtm", "m_global_rtfdtm", "m_DTMXRTreeFrags", "m_isSecureProcessing", "m_dtmManager", "m_saxLocations", "m_owner", "m_ownerGetErrorListener", "m_variableStacks", "m_sourceTreeManager", "m_errorListener", "m_defaultErrorListener", "m_uriResolver", "m_primaryReader", "m_contextNodeLists", "RECURSIONLIMIT", "m_currentNodes", "m_iteratorRoots", "m_predicateRoots", "m_currentExpressionNodes", "m_predicatePos", "m_prefixResolvers", "m_axesIteratorStack", "expressionContext" ]
}