{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/parsing/ApkLiteParseUtils.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "ApkLiteParseUtils",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MIN_SDK_VERSION",
    "type" : "int",
    "comment" : " TODO(b/135203078): Consolidate constants",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TARGET_SDK_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_DEFAULT_INSTALL_LOCATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParseResult<PackageParser.PackageLite> parsePackageLite(ParseInput input, File packageFile, int flags)",
    "returnType" : "ParseResult<PackageParser.PackageLite>",
    "comment" : "\n     * Parse only lightweight details about the package at the given location.\n     * Automatically detects if the package is a monolithic style (single APK\n     * file) or cluster style (directory of APKs).\n     * <p>\n     * This performs sanity checking on cluster style packages, such as\n     * requiring identical package name and version codes, a single base APK,\n     * and unique split names.\n     *\n     * @see PackageParser#parsePackage(File, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageParser.PackageLite> parseMonolithicPackageLite(ParseInput input, File packageFile, int flags)",
    "returnType" : "ParseResult<PackageParser.PackageLite>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageParser.PackageLite> parseClusterPackageLite(ParseInput input, File packageDir, int flags)",
    "returnType" : "ParseResult<PackageParser.PackageLite>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<PackageParser.ApkLite> parseApkLite(ParseInput input, File apkFile, int flags)",
    "returnType" : "ParseResult<PackageParser.ApkLite>",
    "comment" : "\n     * Utility method that retrieves lightweight details about a single APK\n     * file, including package name, split name, and install location.\n     *\n     * @param apkFile path to a single APK\n     * @param flags optional parse flags, such as\n     *            {@link PackageParser#PARSE_COLLECT_CERTIFICATES}\n     ",
    "links" : [ "PackageParser#PARSE_COLLECT_CERTIFICATES" ]
  }, {
    "name" : "public static ParseResult<PackageParser.ApkLite> parseApkLite(ParseInput input, FileDescriptor fd, String debugPathName, int flags)",
    "returnType" : "ParseResult<PackageParser.ApkLite>",
    "comment" : "\n     * Utility method that retrieves lightweight details about a single APK\n     * file, including package name, split name, and install location.\n     *\n     * @param fd already open file descriptor of an apk file\n     * @param debugPathName arbitrary text name for this file, for debug output\n     * @param flags optional parse flags, such as\n     *            {@link PackageParser#PARSE_COLLECT_CERTIFICATES}\n     ",
    "links" : [ "PackageParser#PARSE_COLLECT_CERTIFICATES" ]
  }, {
    "name" : "private static ParseResult<PackageParser.ApkLite> parseApkLiteInner(ParseInput input, File apkFile, FileDescriptor fd, String debugPathName, int flags)",
    "returnType" : "ParseResult<PackageParser.ApkLite>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<PackageParser.ApkLite> parseApkLite(ParseInput input, String codePath, XmlPullParser parser, AttributeSet attrs, PackageParser.SigningDetails signingDetails) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<PackageParser.ApkLite>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<Pair<String, String>> parsePackageSplitNames(ParseInput input, XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<Pair<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static VerifierInfo parseVerifier(AttributeSet attrs)",
    "returnType" : "VerifierInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEFAULT_MIN_SDK_VERSION", "DEFAULT_TARGET_SDK_VERSION", "PARSE_DEFAULT_INSTALL_LOCATION" ],
  "methodNames" : [ "public static ParseResult<PackageParser.PackageLite> parsePackageLite(ParseInput input, File packageFile, int flags)", "public static ParseResult<PackageParser.PackageLite> parseMonolithicPackageLite(ParseInput input, File packageFile, int flags)", "public static ParseResult<PackageParser.PackageLite> parseClusterPackageLite(ParseInput input, File packageDir, int flags)", "public static ParseResult<PackageParser.ApkLite> parseApkLite(ParseInput input, File apkFile, int flags)", "public static ParseResult<PackageParser.ApkLite> parseApkLite(ParseInput input, FileDescriptor fd, String debugPathName, int flags)", "private static ParseResult<PackageParser.ApkLite> parseApkLiteInner(ParseInput input, File apkFile, FileDescriptor fd, String debugPathName, int flags)", "private static ParseResult<PackageParser.ApkLite> parseApkLite(ParseInput input, String codePath, XmlPullParser parser, AttributeSet attrs, PackageParser.SigningDetails signingDetails) throws IOException, XmlPullParserException", "public static ParseResult<Pair<String, String>> parsePackageSplitNames(ParseInput input, XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException", "public static VerifierInfo parseVerifier(AttributeSet attrs)" ]
}