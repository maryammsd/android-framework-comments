{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/Console.java",
  "packageName" : "java.io",
  "className" : "Console",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "readLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "writeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "reader",
    "type" : "Reader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "out",
    "type" : "Writer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pw",
    "type" : "PrintWriter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rcb",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "restoreEcho",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "shutdownHookInstalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHARSET",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cons",
    "type" : "Console",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PrintWriter writer()",
    "returnType" : "PrintWriter",
    "comment" : "\n    * Retrieves the unique {@link java.io.PrintWriter PrintWriter} object\n    * associated with this console.\n    *\n    * @return  The printwriter associated with this console\n    ",
    "links" : [ "java.io.PrintWriter" ]
  }, {
    "name" : "public Reader reader()",
    "returnType" : "Reader",
    "comment" : "\n    * Retrieves the unique {@link java.io.Reader Reader} object associated\n    * with this console.\n    * <p>\n    * This method is intended to be used by sophisticated applications, for\n    * example, a {@link java.util.Scanner} object which utilizes the rich\n    * parsing/scanning functionality provided by the {@code Scanner}:\n    * <blockquote><pre>\n    * Console con = System.console();\n    * if (con != null) {\n    *     Scanner sc = new Scanner(con.reader());\n    *     ...\n    * }\n    * </pre></blockquote>\n    * <p>\n    * For simple applications requiring only line-oriented reading, use\n    * {@link #readLine}.\n    * <p>\n    * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n    * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n    * {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n    * on the returned object will not read in characters beyond the line\n    * bound for each invocation, even if the destination buffer has space for\n    * more characters. The {@code Reader}'s {@code read} methods may block if a\n    * line bound has not been entered or reached on the console's input device.\n    * A line bound is considered to be any one of a line feed ({@code '\\n'}),\n    * a carriage return ({@code '\\r'}), a carriage return followed immediately\n    * by a linefeed, or an end of stream.\n    *\n    * @return  The reader associated with this console\n    ",
    "links" : [ "java.io.Reader#read(char", "java.util.Scanner", "java.io.Reader#read(java.nio.CharBuffer)", "java.io.Reader", "#readLine" ]
  }, {
    "name" : "public Console format(String fmt, Object... args)",
    "returnType" : "Console",
    "comment" : "\n    * Writes a formatted string to this console's output stream using\n    * the specified format string and arguments.\n    *\n    * @param  fmt\n    *         A format string as described in <a\n    *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>\n    *\n    * @param  args\n    *         Arguments referenced by the format specifiers in the format\n    *         string.  If there are more arguments than format specifiers, the\n    *         extra arguments are ignored.  The number of arguments is\n    *         variable and may be zero.  The maximum number of arguments is\n    *         limited by the maximum dimension of a Java array as defined by\n    *         <cite>The Java Virtual Machine Specification</cite>.\n    *         The behaviour on a\n    *         {@code null} argument depends on the <a\n    *         href=\"../util/Formatter.html#syntax\">conversion</a>.\n    *\n    * @throws  IllegalFormatException\n    *          If a format string contains an illegal syntax, a format\n    *          specifier that is incompatible with the given arguments,\n    *          insufficient arguments given the format string, or other\n    *          illegal conditions.  For specification of all possible\n    *          formatting errors, see the <a\n    *          href=\"../util/Formatter.html#detail\">Details</a> section\n    *          of the formatter class specification.\n    *\n    * @return  This console\n    ",
    "links" : [ ]
  }, {
    "name" : "public Console printf(String format, Object... args)",
    "returnType" : "Console",
    "comment" : "\n    * A convenience method to write a formatted string to this console's\n    * output stream using the specified format string and arguments.\n    *\n    * <p> An invocation of this method of the form\n    * {@code con.printf(format, args)} behaves in exactly the same way\n    * as the invocation of\n    * <pre>con.format(format, args)</pre>.\n    *\n    * @param  format\n    *         A format string as described in <a\n    *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n    *\n    * @param  args\n    *         Arguments referenced by the format specifiers in the format\n    *         string.  If there are more arguments than format specifiers, the\n    *         extra arguments are ignored.  The number of arguments is\n    *         variable and may be zero.  The maximum number of arguments is\n    *         limited by the maximum dimension of a Java array as defined by\n    *         <cite>The Java Virtual Machine Specification</cite>.\n    *         The behaviour on a\n    *         {@code null} argument depends on the <a\n    *         href=\"../util/Formatter.html#syntax\">conversion</a>.\n    *\n    * @throws  IllegalFormatException\n    *          If a format string contains an illegal syntax, a format\n    *          specifier that is incompatible with the given arguments,\n    *          insufficient arguments given the format string, or other\n    *          illegal conditions.  For specification of all possible\n    *          formatting errors, see the <a\n    *          href=\"../util/Formatter.html#detail\">Details</a> section of the\n    *          formatter class specification.\n    *\n    * @return  This console\n    ",
    "links" : [ ]
  }, {
    "name" : "public String readLine(String fmt, Object... args)",
    "returnType" : "String",
    "comment" : "\n    * Provides a formatted prompt, then reads a single line of text from the\n    * console.\n    *\n    * @param  fmt\n    *         A format string as described in <a\n    *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n    *\n    * @param  args\n    *         Arguments referenced by the format specifiers in the format\n    *         string.  If there are more arguments than format specifiers, the\n    *         extra arguments are ignored.  The maximum number of arguments is\n    *         limited by the maximum dimension of a Java array as defined by\n    *         <cite>The Java Virtual Machine Specification</cite>.\n    *\n    * @throws  IllegalFormatException\n    *          If a format string contains an illegal syntax, a format\n    *          specifier that is incompatible with the given arguments,\n    *          insufficient arguments given the format string, or other\n    *          illegal conditions.  For specification of all possible\n    *          formatting errors, see the <a\n    *          href=\"../util/Formatter.html#detail\">Details</a> section\n    *          of the formatter class specification.\n    *\n    * @throws IOError\n    *         If an I/O error occurs.\n    *\n    * @return  A string containing the line read from the console, not\n    *          including any line-termination characters, or {@code null}\n    *          if an end of stream has been reached.\n    ",
    "links" : [ ]
  }, {
    "name" : "public String readLine()",
    "returnType" : "String",
    "comment" : "\n    * Reads a single line of text from the console.\n    *\n    * @throws IOError\n    *         If an I/O error occurs.\n    *\n    * @return  A string containing the line read from the console, not\n    *          including any line-termination characters, or {@code null}\n    *          if an end of stream has been reached.\n    ",
    "links" : [ ]
  }, {
    "name" : "public char[] readPassword(String fmt, Object... args)",
    "returnType" : "char[]",
    "comment" : "\n    * Provides a formatted prompt, then reads a password or passphrase from\n    * the console with echoing disabled.\n    *\n    * @param  fmt\n    *         A format string as described in <a\n    *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>\n    *         for the prompt text.\n    *\n    * @param  args\n    *         Arguments referenced by the format specifiers in the format\n    *         string.  If there are more arguments than format specifiers, the\n    *         extra arguments are ignored.  The maximum number of arguments is\n    *         limited by the maximum dimension of a Java array as defined by\n    *         <cite>The Java Virtual Machine Specification</cite>.\n    *\n    * @throws  IllegalFormatException\n    *          If a format string contains an illegal syntax, a format\n    *          specifier that is incompatible with the given arguments,\n    *          insufficient arguments given the format string, or other\n    *          illegal conditions.  For specification of all possible\n    *          formatting errors, see the <a\n    *          href=\"../util/Formatter.html#detail\">Details</a>\n    *          section of the formatter class specification.\n    *\n    * @throws IOError\n    *         If an I/O error occurs.\n    *\n    * @return  A character array containing the password or passphrase read\n    *          from the console, not including any line-termination characters,\n    *          or {@code null} if an end of stream has been reached.\n    ",
    "links" : [ ]
  }, {
    "name" : "public char[] readPassword()",
    "returnType" : "char[]",
    "comment" : "\n    * Reads a password or passphrase from the console with echoing disabled\n    *\n    * @throws IOError\n    *         If an I/O error occurs.\n    *\n    * @return  A character array containing the password or passphrase read\n    *          from the console, not including any line-termination characters,\n    *          or {@code null} if an end of stream has been reached.\n    ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flushes the console and forces any buffered output to be written\n     * immediately .\n     ",
    "links" : [ ]
  }, {
    "name" : "public Charset charset()",
    "returnType" : "Charset",
    "comment" : "\n     * Returns the {@link java.nio.charset.Charset Charset} object used for\n     * the {@code Console}.\n     * <p>\n     * The returned charset corresponds to the input and output source\n     * (e.g., keyboard and/or display) specified by the host environment or user.\n     * It may not necessarily be the same as the default charset returned from\n     * {@link java.nio.charset.Charset#defaultCharset() Charset.defaultCharset()}.\n     *\n     * @return a {@link java.nio.charset.Charset Charset} object used for the\n     *          {@code Console}\n     * @since 17\n     ",
    "links" : [ "java.nio.charset.Charset", "java.nio.charset.Charset#defaultCharset()" ]
  }, {
    "name" : "private static native String encoding()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean echo(boolean on) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the console echo status to {@code on} and returns the previous\n     * console on/off status.\n     * @param on    the echo status to set to. {@code true} for echo on and\n     *              {@code false} for echo off\n     * @return true if the previous console echo status is on\n     ",
    "links" : [ ]
  }, {
    "name" : "private char[] readline(boolean zeroOut) throws IOException",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private char[] grow()",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Console console()",
    "returnType" : "Console",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native boolean istty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PrintWriter writer()", "public Reader reader()", "public Console format(String fmt, Object... args)", "public Console printf(String format, Object... args)", "public String readLine(String fmt, Object... args)", "public String readLine()", "public char[] readPassword(String fmt, Object... args)", "public char[] readPassword()", "public void flush()", "public Charset charset()", "private static native String encoding()", "private static native boolean echo(boolean on) throws IOException", "private char[] readline(boolean zeroOut) throws IOException", "private char[] grow()", "public static Console console()", "private static native boolean istty()" ],
  "variableNames" : [ "readLock", "writeLock", "reader", "out", "pw", "formatter", "rcb", "restoreEcho", "shutdownHookInstalled", "CHARSET", "cons" ]
}