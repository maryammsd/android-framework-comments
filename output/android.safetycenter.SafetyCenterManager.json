{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/safetycenter/SafetyCenterManager.java",
  "packageName" : "android.safetycenter",
  "className" : "SafetyCenterManager",
  "comment" : "\n * Interface for communicating with the Safety Center, which consolidates UI for security and\n * privacy features on the device.\n *\n * <p>These APIs are intended to be used by the following clients:\n *\n * <ul>\n *   <li>Safety sources represented in Safety Center UI\n *   <li>Dependents on the state of Safety Center UI\n *   <li>Managers of Safety Center UI\n * </ul>\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ACTION_SAFETY_CENTER_ENABLED_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A broadcast sent by the system to indicate that the value returned by\n     * {@link SafetyCenterManager#isSafetyCenterEnabled()} has changed.\n     *\n     * <p>This broadcast will inform receivers about changes to {@link\n     * SafetyCenterManager#isSafetyCenterEnabled()}, should they want to check the new value and\n     * enable/disable components accordingly.\n     *\n     * <p>This broadcast is sent explicitly to safety sources by targeting intents to a specified\n     * set of packages in the {@link SafetyCenterConfig}. The receiving components must hold the\n     * {@link android.Manifest.permission#SEND_SAFETY_CENTER_UPDATE} permission, and can use a\n     * manifest-registered receiver to be woken up by Safety Center.\n     *\n     * <p>This broadcast is also sent implicitly system-wide. The receiving components must hold the\n     * {@link android.Manifest.permission#READ_SAFETY_CENTER_STATUS} permission.\n     *\n     * <p>This broadcast is not sent out if the device does not support Safety Center.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     ",
    "links" : [ "android.Manifest.permission#READ_SAFETY_CENTER_STATUS", "android.Manifest.permission#SEND_SAFETY_CENTER_UPDATE", "android.safetycenter.SafetyCenterManager#isSafetyCenterEnabled()", "android.safetycenter.config.SafetyCenterConfig" ]
  }, {
    "name" : "ACTION_REFRESH_SAFETY_SOURCES",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A broadcast sent by the system to indicate that {@link SafetyCenterManager}\n     * is requesting data from safety sources regarding their safety state.\n     *\n     * <p>This broadcast is sent when a user triggers a data refresh from the Safety Center UI or\n     * when Safety Center detects that its stored safety information is stale and needs to be\n     * updated.\n     *\n     * <p>This broadcast is sent explicitly to safety sources by targeting intents to a specified\n     * set of packages provided by the safety sources in the {@link SafetyCenterConfig}. The\n     * receiving components must hold the {@link\n     * android.Manifest.permission#SEND_SAFETY_CENTER_UPDATE} permission, and can use a\n     * manifest-registered receiver to be woken up by Safety Center.\n     *\n     * <p>On receiving this broadcast, safety sources should determine their safety state according\n     * to the parameters specified in the intent extras (see below) and set {@link SafetySourceData}\n     * using {@link #setSafetySourceData}, along with a {@link SafetyEvent} with {@link\n     * SafetyEvent#getType()} set to {@link SafetyEvent#SAFETY_EVENT_TYPE_REFRESH_REQUESTED} and\n     * {@link SafetyEvent#getRefreshBroadcastId()} set to the value of broadcast intent extra {@link\n     * #EXTRA_REFRESH_SAFETY_SOURCES_BROADCAST_ID}. If the safety source is unable to provide data,\n     * it can set a {@code null} {@link SafetySourceData}, which will clear any existing {@link\n     * SafetySourceData} stored by Safety Center, and Safety Center will fall back to any\n     * placeholder data specified in {@link SafetyCenterConfig}.\n     *\n     * <p class=\"note\">This is a protected intent that can only be sent by the system.\n     *\n     * <p>Includes the following extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE}: An int representing the type of\n     *       data being requested. Possible values are {@link\n     *       #EXTRA_REFRESH_REQUEST_TYPE_FETCH_FRESH_DATA} and {@link\n     *       #EXTRA_REFRESH_REQUEST_TYPE_GET_DATA}.\n     *   <li>{@link #EXTRA_REFRESH_SAFETY_SOURCE_IDS}: A {@code String[]} of ids representing the\n     *       safety sources being requested for data. This extra exists for disambiguation in the\n     *       case that a single component is responsible for receiving refresh requests for multiple\n     *       safety sources.\n     *   <li>{@link #EXTRA_REFRESH_SAFETY_SOURCES_BROADCAST_ID}: An unique identifier for the\n     *       refresh request broadcast. This extra should be used to specify {@link\n     *       SafetyEvent#getRefreshBroadcastId()} when the safety source responds to the broadcast\n     *       using {@link #setSafetySourceData}.\n     * </ul>\n     ",
    "links" : [ "android.Manifest.permission#SEND_SAFETY_CENTER_UPDATE", "#setSafetySourceData", "#EXTRA_REFRESH_SAFETY_SOURCE_IDS", "android.safetycenter.SafetyEvent#SAFETY_EVENT_TYPE_REFRESH_REQUESTED", "android.safetycenter.SafetySourceData", "#EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE", "#EXTRA_REFRESH_REQUEST_TYPE_FETCH_FRESH_DATA", "android.safetycenter.SafetyEvent#getType()", "#EXTRA_REFRESH_SAFETY_SOURCES_BROADCAST_ID", "#EXTRA_REFRESH_REQUEST_TYPE_GET_DATA", "android.safetycenter.SafetyEvent", "android.safetycenter.SafetyEvent#getRefreshBroadcastId()", "android.safetycenter.SafetyCenterManager", "android.safetycenter.config.SafetyCenterConfig" ]
  }, {
    "name" : "EXTRA_REFRESH_SAFETY_SOURCE_IDS",
    "type" : "String",
    "comment" : "\n     * Used as a {@code String[]} extra field in {@link #ACTION_REFRESH_SAFETY_SOURCES} intents to\n     * specify the safety source ids of the safety sources being requested for data by Safety\n     * Center.\n     *\n     * <p>When this extra field is not specified in the intent, it is assumed that Safety Center is\n     * requesting data from all safety sources supported by the component receiving the broadcast.\n     ",
    "links" : [ "#ACTION_REFRESH_SAFETY_SOURCES" ]
  }, {
    "name" : "EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE",
    "type" : "String",
    "comment" : "\n     * Used as an {@code int} extra field in {@link #ACTION_REFRESH_SAFETY_SOURCES} intents to\n     * specify the type of data request from Safety Center.\n     *\n     * <p>Possible values are {@link #EXTRA_REFRESH_REQUEST_TYPE_FETCH_FRESH_DATA} and {@link\n     * #EXTRA_REFRESH_REQUEST_TYPE_GET_DATA}\n     ",
    "links" : [ "#ACTION_REFRESH_SAFETY_SOURCES", "#EXTRA_REFRESH_REQUEST_TYPE_GET_DATA", "#EXTRA_REFRESH_REQUEST_TYPE_FETCH_FRESH_DATA" ]
  }, {
    "name" : "EXTRA_REFRESH_SAFETY_SOURCES_BROADCAST_ID",
    "type" : "String",
    "comment" : "\n     * Used as a {@code String} extra field in {@link #ACTION_REFRESH_SAFETY_SOURCES} intents to\n     * specify a string identifier for the broadcast.\n     ",
    "links" : [ "#ACTION_REFRESH_SAFETY_SOURCES" ]
  }, {
    "name" : "EXTRA_SAFETY_SOURCE_ISSUE_ID",
    "type" : "String",
    "comment" : "\n     * Used as a {@code String} extra field in {@link Intent#ACTION_SAFETY_CENTER} intents to\n     * specify an issue ID to redirect to, if applicable.\n     *\n     * <p>This extra must be used in conjunction with {@link #EXTRA_SAFETY_SOURCE_ID} as an issue ID\n     * does not uniquely identify a {@link SafetySourceIssue}. Otherwise, no redirection will occur.\n     ",
    "links" : [ "android.safetycenter.SafetySourceIssue", "android.content.Intent#ACTION_SAFETY_CENTER", "#EXTRA_SAFETY_SOURCE_ID" ]
  }, {
    "name" : "EXTRA_SAFETY_SOURCE_ID",
    "type" : "String",
    "comment" : "\n     * Used as a {@code String} extra field in {@link Intent#ACTION_SAFETY_CENTER} intents to\n     * specify a source ID for the {@link SafetySourceIssue} to redirect to, if applicable.\n     *\n     * <p>This extra must be used in conjunction with {@link #EXTRA_SAFETY_SOURCE_ISSUE_ID}.\n     * Otherwise, no redirection will occur.\n     ",
    "links" : [ "android.safetycenter.SafetySourceIssue", "#EXTRA_SAFETY_SOURCE_ISSUE_ID", "android.content.Intent#ACTION_SAFETY_CENTER" ]
  }, {
    "name" : "EXTRA_SAFETY_SOURCE_USER_HANDLE",
    "type" : "String",
    "comment" : "\n     * Used as a {@link android.os.UserHandle} extra field in {@link Intent#ACTION_SAFETY_CENTER}\n     * intents to specify a user for a given {@link SafetySourceIssue} to redirect to, if\n     * applicable.\n     *\n     * <p>This extra can be used if the same issue ID is created for multiple users (e.g. to\n     * disambiguate personal profile vs. managed profiles issues).\n     *\n     * <p>This extra can be used in conjunction with {@link #EXTRA_SAFETY_SOURCE_ISSUE_ID} and\n     * {@link #EXTRA_SAFETY_SOURCE_ID}. Otherwise, the device's primary user will be used.\n     ",
    "links" : [ "android.os.UserHandle", "android.safetycenter.SafetySourceIssue", "#EXTRA_SAFETY_SOURCE_ISSUE_ID", "android.content.Intent#ACTION_SAFETY_CENTER", "#EXTRA_SAFETY_SOURCE_ID" ]
  }, {
    "name" : "EXTRA_SAFETY_SOURCES_GROUP_ID",
    "type" : "String",
    "comment" : "\n     * Used as a {@code String} extra field in {@link Intent#ACTION_SAFETY_CENTER} intents to\n     * specify the ID for a group of safety sources. If applicable, this will redirect to the\n     * group's corresponding subpage in the UI.\n     ",
    "links" : [ "android.content.Intent#ACTION_SAFETY_CENTER" ]
  }, {
    "name" : "EXTRA_REFRESH_REQUEST_TYPE_FETCH_FRESH_DATA",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link #EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE} to indicate that\n     * the safety source should fetch fresh data relating to their safety state upon receiving a\n     * broadcast with intent action {@link #ACTION_REFRESH_SAFETY_SOURCES} and provide it to Safety\n     * Center.\n     *\n     * <p>The term \"fresh\" here means that the sources should ensure that the safety data is\n     * accurate as possible at the time of providing it to Safety Center, even if it involves\n     * performing an expensive and/or slow process.\n     ",
    "links" : [ "#ACTION_REFRESH_SAFETY_SOURCES", "#EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE" ]
  }, {
    "name" : "EXTRA_REFRESH_REQUEST_TYPE_GET_DATA",
    "type" : "int",
    "comment" : "\n     * Used as an int value for {@link #EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE} to indicate that\n     * upon receiving a broadcast with intent action {@link #ACTION_REFRESH_SAFETY_SOURCES}, the\n     * safety source should provide data relating to their safety state to Safety Center.\n     *\n     * <p>If the source already has its safety data cached, it may provide it without triggering a\n     * process to fetch state which may be expensive and/or slow.\n     ",
    "links" : [ "#ACTION_REFRESH_SAFETY_SOURCES", "#EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE" ]
  }, {
    "name" : "REFRESH_REASON_PAGE_OPEN",
    "type" : "int",
    "comment" : " Indicates that the Safety Center UI has been opened by the user. ",
    "links" : [ ]
  }, {
    "name" : "REFRESH_REASON_RESCAN_BUTTON_CLICK",
    "type" : "int",
    "comment" : " Indicates that the rescan button in the Safety Center UI has been clicked on by the user. ",
    "links" : [ ]
  }, {
    "name" : "REFRESH_REASON_DEVICE_REBOOT",
    "type" : "int",
    "comment" : " Indicates that the device was rebooted. ",
    "links" : [ ]
  }, {
    "name" : "REFRESH_REASON_DEVICE_LOCALE_CHANGE",
    "type" : "int",
    "comment" : " Indicates that the device locale was changed. ",
    "links" : [ ]
  }, {
    "name" : "REFRESH_REASON_SAFETY_CENTER_ENABLED",
    "type" : "int",
    "comment" : " Indicates that the Safety Center feature was enabled. ",
    "links" : [ ]
  }, {
    "name" : "REFRESH_REASON_OTHER",
    "type" : "int",
    "comment" : " Indicates a generic reason for Safety Center refresh. ",
    "links" : [ ]
  }, {
    "name" : "REFRESH_REASON_PERIODIC",
    "type" : "int",
    "comment" : " Indicates a periodic background refresh. ",
    "links" : [ ]
  }, {
    "name" : "mListenersLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenersToDelegates",
    "type" : "Map<OnSafetyCenterDataChangedListener, ListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISafetyCenterManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isSafetyCenterEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the Safety Center feature is enabled.\n     *\n     * <p>If this returns {@code false}, all the other methods in this class will no-op and/or\n     * return default values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSafetySourceData(@NonNull String safetySourceId, @Nullable SafetySourceData safetySourceData, @NonNull SafetyEvent safetyEvent)",
    "returnType" : "void",
    "comment" : "\n     * Set the latest {@link SafetySourceData} for a safety source, to be displayed in Safety Center\n     * UI.\n     *\n     * <p>Each {@code safetySourceId} uniquely identifies the {@link SafetySourceData} for the\n     * calling user.\n     *\n     * <p>This call will rewrite any existing {@link SafetySourceData} already set for the given\n     * {@code safetySourceId} for the calling user.\n     *\n     * @param safetySourceId the unique identifier for a safety source in the calling user\n     * @param safetySourceData the latest safety data for the safety source in the calling user. If\n     *     a safety source does not have any data to set, it can set its {@link SafetySourceData} to\n     *     {@code null}, in which case Safety Center will fall back to any placeholder data\n     *     specified in the safety source xml configuration.\n     * @param safetyEvent the event that triggered the safety source to set safety data\n     ",
    "links" : [ "android.safetycenter.SafetySourceData" ]
  }, {
    "name" : "public SafetySourceData getSafetySourceData(@NonNull String safetySourceId)",
    "returnType" : "SafetySourceData",
    "comment" : "\n     * Returns the latest {@link SafetySourceData} set through {@link #setSafetySourceData} for the\n     * given {@code safetySourceId} and calling user.\n     *\n     * <p>Returns {@code null} if there never was any data sent for the given {@code safetySourceId}\n     * and user.\n     ",
    "links" : [ "#setSafetySourceData", "android.safetycenter.SafetySourceData" ]
  }, {
    "name" : "public void reportSafetySourceError(@NonNull String safetySourceId, @NonNull SafetySourceErrorDetails safetySourceErrorDetails)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Safety Center of an error related to a given safety source.\n     *\n     * <p>Safety sources should use this API to notify Safety Center when Safety Center requested or\n     * expected them to perform an action or provide data, but they were unable to do so.\n     *\n     * @param safetySourceId the id of the safety source that provided the issue\n     * @param safetySourceErrorDetails details of the error that occurred\n     ",
    "links" : [ ]
  }, {
    "name" : "public void refreshSafetySources(@RefreshReason int refreshReason)",
    "returnType" : "void",
    "comment" : "\n     * Requests safety sources to set their latest {@link SafetySourceData} for Safety Center.\n     *\n     * <p>This API sends a broadcast to all safety sources with action {@link\n     * #ACTION_REFRESH_SAFETY_SOURCES}. See {@link #ACTION_REFRESH_SAFETY_SOURCES} for details on\n     * how safety sources should respond to receiving these broadcasts.\n     *\n     * @param refreshReason the reason for the refresh\n     ",
    "links" : [ "#ACTION_REFRESH_SAFETY_SOURCES", "android.safetycenter.SafetySourceData" ]
  }, {
    "name" : "public void refreshSafetySources(@RefreshReason int refreshReason, @NonNull List<String> safetySourceIds)",
    "returnType" : "void",
    "comment" : "\n     * Requests a specific subset of safety sources to set their latest {@link SafetySourceData} for\n     * Safety Center.\n     *\n     * <p>This API sends a broadcast to safety sources with action {@link\n     * #ACTION_REFRESH_SAFETY_SOURCES} and {@link #EXTRA_REFRESH_SAFETY_SOURCE_IDS} to specify the\n     * IDs of safety sources being requested for data by Safety Center.\n     *\n     * <p>This API is an overload of {@link #refreshSafetySources(int)} and is used to request data\n     * from safety sources that are part of a subpage in the Safety Center UI.\n     *\n     * @see #refreshSafetySources(int)\n     * @param refreshReason the reason for the refresh\n     * @param safetySourceIds list of IDs for the safety sources being refreshed\n     * @throws UnsupportedOperationException if accessed from a version lower than {@link\n     *     UPSIDE_DOWN_CAKE}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE", "#ACTION_REFRESH_SAFETY_SOURCES", "#EXTRA_REFRESH_SAFETY_SOURCE_IDS", "#refreshSafetySources(int)", "android.safetycenter.SafetySourceData" ]
  }, {
    "name" : "public SafetyCenterConfig getSafetyCenterConfig()",
    "returnType" : "SafetyCenterConfig",
    "comment" : " Returns the current {@link SafetyCenterConfig}, if available. ",
    "links" : [ "android.safetycenter.config.SafetyCenterConfig" ]
  }, {
    "name" : "public SafetyCenterData getSafetyCenterData()",
    "returnType" : "SafetyCenterData",
    "comment" : "\n     * Returns the current {@link SafetyCenterData}, assembled from {@link SafetySourceData} from\n     * all sources.\n     ",
    "links" : [ "android.safetycenter.SafetyCenterData", "android.safetycenter.SafetySourceData" ]
  }, {
    "name" : "public void addOnSafetyCenterDataChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnSafetyCenterDataChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for changes to {@link SafetyCenterData}.\n     *\n     * @see #removeOnSafetyCenterDataChangedListener(OnSafetyCenterDataChangedListener)\n     ",
    "links" : [ "android.safetycenter.SafetyCenterData" ]
  }, {
    "name" : "public void removeOnSafetyCenterDataChangedListener(@NonNull OnSafetyCenterDataChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener for changes to {@link SafetyCenterData}.\n     *\n     * @see #addOnSafetyCenterDataChangedListener(Executor, OnSafetyCenterDataChangedListener)\n     ",
    "links" : [ "android.safetycenter.SafetyCenterData" ]
  }, {
    "name" : "public void dismissSafetyCenterIssue(@NonNull String safetyCenterIssueId)",
    "returnType" : "void",
    "comment" : "\n     * Dismiss a Safety Center issue and prevent it from affecting the overall safety status.\n     *\n     * @param safetyCenterIssueId the target issue ID returned by {@link SafetyCenterIssue#getId()}\n     ",
    "links" : [ "android.safetycenter.SafetyCenterIssue#getId()" ]
  }, {
    "name" : "public void executeSafetyCenterIssueAction(@NonNull String safetyCenterIssueId, @NonNull String safetyCenterIssueActionId)",
    "returnType" : "void",
    "comment" : "\n     * Executes the specified Safety Center issue action on the specified Safety Center issue.\n     *\n     * @param safetyCenterIssueId the target issue ID returned by {@link SafetyCenterIssue#getId()}\n     * @param safetyCenterIssueActionId the target action ID returned by {@link\n     *     SafetyCenterIssue.Action#getId()}\n     ",
    "links" : [ "android.safetycenter.SafetyCenterIssue#getId()", "SafetyCenterIssue.Action#getId()" ]
  }, {
    "name" : "public void clearAllSafetySourceDataForTests()",
    "returnType" : "void",
    "comment" : "\n     * Clears all {@link SafetySourceData} (set by safety sources using {@link\n     * #setSafetySourceData}) for testing.\n     *\n     * <p>Note: This API serves to facilitate CTS testing and should not be used for other purposes.\n     ",
    "links" : [ "#setSafetySourceData", "android.safetycenter.SafetySourceData" ]
  }, {
    "name" : "public void setSafetyCenterConfigForTests(@NonNull SafetyCenterConfig safetyCenterConfig)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the {@link SafetyCenterConfig} for testing.\n     *\n     * <p>When set, the overridden {@link SafetyCenterConfig} will be used instead of the {@link\n     * SafetyCenterConfig} parsed from the XML file to read configured safety sources.\n     *\n     * <p>Note: This API serves to facilitate CTS testing and should not be used to configure safety\n     * sources dynamically for production. Once used for testing, the override should be cleared.\n     *\n     * @see #clearSafetyCenterConfigForTests()\n     ",
    "links" : [ "android.safetycenter.config.SafetyCenterConfig" ]
  }, {
    "name" : "public void clearSafetyCenterConfigForTests()",
    "returnType" : "void",
    "comment" : "\n     * Clears the override of the {@link SafetyCenterConfig} set for testing.\n     *\n     * <p>Once cleared, the {@link SafetyCenterConfig} parsed from the XML file will be used to read\n     * configured safety sources.\n     *\n     * <p>Note: This API serves to facilitate CTS testing and should not be used for other purposes.\n     *\n     * @see #setSafetyCenterConfigForTests(SafetyCenterConfig)\n     ",
    "links" : [ "android.safetycenter.config.SafetyCenterConfig" ]
  } ],
  "methodNames" : [ "public boolean isSafetyCenterEnabled()", "public void setSafetySourceData(@NonNull String safetySourceId, @Nullable SafetySourceData safetySourceData, @NonNull SafetyEvent safetyEvent)", "public SafetySourceData getSafetySourceData(@NonNull String safetySourceId)", "public void reportSafetySourceError(@NonNull String safetySourceId, @NonNull SafetySourceErrorDetails safetySourceErrorDetails)", "public void refreshSafetySources(@RefreshReason int refreshReason)", "public void refreshSafetySources(@RefreshReason int refreshReason, @NonNull List<String> safetySourceIds)", "public SafetyCenterConfig getSafetyCenterConfig()", "public SafetyCenterData getSafetyCenterData()", "public void addOnSafetyCenterDataChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnSafetyCenterDataChangedListener listener)", "public void removeOnSafetyCenterDataChangedListener(@NonNull OnSafetyCenterDataChangedListener listener)", "public void dismissSafetyCenterIssue(@NonNull String safetyCenterIssueId)", "public void executeSafetyCenterIssueAction(@NonNull String safetyCenterIssueId, @NonNull String safetyCenterIssueActionId)", "public void clearAllSafetySourceDataForTests()", "public void setSafetyCenterConfigForTests(@NonNull SafetyCenterConfig safetyCenterConfig)", "public void clearSafetyCenterConfigForTests()" ],
  "variableNames" : [ "ACTION_SAFETY_CENTER_ENABLED_CHANGED", "ACTION_REFRESH_SAFETY_SOURCES", "EXTRA_REFRESH_SAFETY_SOURCE_IDS", "EXTRA_REFRESH_SAFETY_SOURCES_REQUEST_TYPE", "EXTRA_REFRESH_SAFETY_SOURCES_BROADCAST_ID", "EXTRA_SAFETY_SOURCE_ISSUE_ID", "EXTRA_SAFETY_SOURCE_ID", "EXTRA_SAFETY_SOURCE_USER_HANDLE", "EXTRA_SAFETY_SOURCES_GROUP_ID", "EXTRA_REFRESH_REQUEST_TYPE_FETCH_FRESH_DATA", "EXTRA_REFRESH_REQUEST_TYPE_GET_DATA", "REFRESH_REASON_PAGE_OPEN", "REFRESH_REASON_RESCAN_BUTTON_CLICK", "REFRESH_REASON_DEVICE_REBOOT", "REFRESH_REASON_DEVICE_LOCALE_CHANGE", "REFRESH_REASON_SAFETY_CENTER_ENABLED", "REFRESH_REASON_OTHER", "REFRESH_REASON_PERIODIC", "mListenersLock", "mListenersToDelegates", "mContext", "mService" ]
}