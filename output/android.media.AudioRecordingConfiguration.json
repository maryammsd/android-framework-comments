{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioRecordingConfiguration.java",
  "packageName" : "android.media",
  "className" : "AudioRecordingConfiguration",
  "comment" : "\n * The AudioRecordingConfiguration class collects the information describing an audio recording\n * session.\n * <p>Direct polling (see {@link AudioManager#getActiveRecordingConfigurations()}) or callback\n * (see {@link AudioManager#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler)}\n * methods are ways to receive information about the current recording configuration of the device.\n * <p>An audio recording configuration contains information about the recording format as used by\n * the application ({@link #getClientFormat()}, as well as the recording format actually used by\n * the device ({@link #getFormat()}). The two recording formats may, for instance, be at different\n * sampling rates due to hardware limitations (e.g. application recording at 44.1kHz whereas the\n * device always records at 48kHz, and the Android framework resamples for the application).\n * <p>The configuration also contains the use case for which audio is recorded\n * ({@link #getClientAudioSource()}), enabling the ability to distinguish between different\n * activities such as ongoing voice recognition or camcorder recording.\n *\n ",
  "links" : [ "android.media.AudioManager#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback", "android.media.AudioManager#getActiveRecordingConfigurations()", "#getClientAudioSource()", "#getFormat()", "#getClientFormat()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPatchHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientPortId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientSilenced",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientEffects",
    "type" : "AudioEffect.Descriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceEffects",
    "type" : "AudioEffect.Descriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioRecordingConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void dump(PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * For AudioService dump\n     * @param pw\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toLogFriendlyString(AudioRecordingConfiguration arc)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AudioRecordingConfiguration anonymizedCopy(AudioRecordingConfiguration in)",
    "returnType" : "AudioRecordingConfiguration",
    "comment" : "\n     * @hide\n     * Creates a copy of the recording configuration that is stripped of any data enabling\n     * identification of which application it is associated with (\"anonymized\").\n     * @param in\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getClientAudioSource()",
    "returnType" : "int",
    "comment" : "\n     * Returns the audio source selected by the client.\n     * @return the audio source selected by the client.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getClientAudioSessionId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the session number of the recording, see {@link AudioRecord#getAudioSessionId()}.\n     * @return the session number.\n     ",
    "links" : [ "android.media.AudioRecord#getAudioSessionId()" ]
  }, {
    "name" : "public AudioFormat getFormat()",
    "returnType" : "AudioFormat",
    "comment" : "\n     * Returns the audio format at which audio is recorded on this Android device.\n     * Note that it may differ from the client application recording format\n     * (see {@link #getClientFormat()}).\n     * @return the device recording format\n     ",
    "links" : [ "#getClientFormat()" ]
  }, {
    "name" : "public AudioFormat getClientFormat()",
    "returnType" : "AudioFormat",
    "comment" : "\n     * Returns the audio format at which the client application is recording audio.\n     * Note that it may differ from the actual recording format (see {@link #getFormat()}).\n     * @return the recording format\n     ",
    "links" : [ "#getFormat()" ]
  }, {
    "name" : "public String getClientPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @pending for SystemApi\n     * Returns the package name of the application performing the recording.\n     * Where there are multiple packages sharing the same user id through the \"sharedUserId\"\n     * mechanism, only the first one with that id will be returned\n     * (see {@link PackageManager#getPackagesForUid(int)}).\n     * <p>This information is only available if the caller has the\n     * {@link android.Manifest.permission.MODIFY_AUDIO_ROUTING} permission.\n     * <br>When called without the permission, the result is an empty string.\n     * @return the package name\n     ",
    "links" : [ "android.Manifest.permission.MODIFY_AUDIO_ROUTING", "#getPackagesForUid(int)" ]
  }, {
    "name" : "public int getClientUid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user id of the application performing the recording.\n     * <p>This information is only available if the caller has the\n     * {@link android.Manifest.permission.MODIFY_AUDIO_ROUTING}\n     * permission.\n     * @return the user id\n     * @throws SecurityException Thrown if the caller is missing the MODIFY_AUDIO_ROUTING permission\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.MODIFY_AUDIO_ROUTING" ]
  }, {
    "name" : "public AudioDeviceInfo getAudioDevice()",
    "returnType" : "AudioDeviceInfo",
    "comment" : "\n     * Returns information about the audio input device used for this recording.\n     * @return the audio recording device or null if this information cannot be retrieved\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getClientPortId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns the system unique ID assigned for the AudioRecord object corresponding to this\n     * AudioRecordingConfiguration client.\n     * @return the port ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isClientSilenced()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the audio returned to the client is currently being silenced by the\n     * audio framework due to concurrent capture policy (e.g the capturing application does not have\n     * an active foreground process or service anymore).\n     * @return true if captured audio is silenced, false otherwise .\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioSource()",
    "returnType" : "int",
    "comment" : "\n     * Returns the audio source currently used to configure the capture path. It can be different\n     * from the source returned by {@link #getClientAudioSource()} if another capture is active.\n     * @return the audio source active on the capture path.\n     ",
    "links" : [ "#getClientAudioSource()" ]
  }, {
    "name" : "public List<AudioEffect.Descriptor> getClientEffects()",
    "returnType" : "List<AudioEffect.Descriptor>",
    "comment" : "\n     * Returns the list of {@link AudioEffect.Descriptor} for all effects currently enabled on\n     * the audio capture client (e.g. {@link AudioRecord} or {@link MediaRecorder}).\n     * @return List of {@link AudioEffect.Descriptor} containing all effects enabled for the client.\n     ",
    "links" : [ "AudioEffect.Descriptor", "android.media.AudioRecord", "android.media.MediaRecorder" ]
  }, {
    "name" : "public List<AudioEffect.Descriptor> getEffects()",
    "returnType" : "List<AudioEffect.Descriptor>",
    "comment" : "\n     * Returns the list of {@link AudioEffect.Descriptor} for all effects currently enabled on\n     * the capture stream.\n     * @return List of {@link AudioEffect.Descriptor} containing all effects enabled on the\n     * capture stream. This can be different from the list returned by {@link #getClientEffects()}\n     * if another capture is active.\n     ",
    "links" : [ "AudioEffect.Descriptor", "#getClientEffects()" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void dump(PrintWriter pw)", "public static String toLogFriendlyString(AudioRecordingConfiguration arc)", "public static AudioRecordingConfiguration anonymizedCopy(AudioRecordingConfiguration in)", "public int getClientAudioSource()", "public int getClientAudioSessionId()", "public AudioFormat getFormat()", "public AudioFormat getClientFormat()", "public String getClientPackageName()", "public int getClientUid()", "public AudioDeviceInfo getAudioDevice()", "public int getClientPortId()", "public boolean isClientSilenced()", "public int getAudioSource()", "public List<AudioEffect.Descriptor> getClientEffects()", "public List<AudioEffect.Descriptor> getEffects()", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object o)" ],
  "variableNames" : [ "TAG", "mClientSessionId", "mClientSource", "mDeviceFormat", "mClientFormat", "mClientPackageName", "mClientUid", "mPatchHandle", "mClientPortId", "mClientSilenced", "mDeviceSource", "mClientEffects", "mDeviceEffects", "CREATOR" ]
}