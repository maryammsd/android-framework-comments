{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/WriterChain.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "WriterChain",
  "comment" : "\n * It is unfortunate that java.io.Writer is a class rather than an interface.\n * The serializer has a number of classes that extend java.io.Writer\n * and which send their ouput to a yet another wrapped Writer or OutputStream.\n * \n * The purpose of this interface is to force such classes to over-ride all of\n * the important methods defined on the java.io.Writer class, namely these:\n * <code>\n * write(int val)\n * write(char[] chars)\n * write(char[] chars, int start, int count)\n * write(String chars)\n * write(String chars, int start, int count)\n * flush()\n * close()\n * </code>\n * In this manner nothing will accidentally go directly to \n * the base class rather than to the wrapped Writer or OutputStream. \n * \n * The purpose of this class is to have a uniform way of chaining the output of one writer to\n * the next writer in the chain. In addition there are methods to obtain the Writer or \n * OutputStream that this object sends its output to.\n * \n * This interface is only for internal use withing the serializer. \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void write(int val) throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] chars) throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] chars, int start, int count) throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public void write(String chars) throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public void write(String chars, int start, int count) throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : " This method forces us to over-ride the method defined in java.io.Writer ",
    "links" : [ ]
  }, {
    "name" : "public java.io.Writer getWriter()",
    "returnType" : "java.io.Writer",
    "comment" : "\n     * If this method returns null, getOutputStream() must return non-null.\n     * Get the writer that this writer sends its output to.\n     * \n     * It is possible that the Writer returned by this method does not\n     * implement the WriterChain interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.io.OutputStream getOutputStream()",
    "returnType" : "java.io.OutputStream",
    "comment" : "\n     * If this method returns null, getWriter() must return non-null.\n     * Get the OutputStream that this writer sends its output to.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int val) throws IOException", "public void write(char[] chars) throws IOException", "public void write(char[] chars, int start, int count) throws IOException", "public void write(String chars) throws IOException", "public void write(String chars, int start, int count) throws IOException", "public void flush() throws IOException", "public void close() throws IOException", "public java.io.Writer getWriter()", "public java.io.OutputStream getOutputStream()" ],
  "variableNames" : [ ]
}