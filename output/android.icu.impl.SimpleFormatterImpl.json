{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/SimpleFormatterImpl.java",
  "packageName" : "android.icu.impl",
  "className" : "SimpleFormatterImpl",
  "comment" : "\n * Formats simple patterns like \"{1} was born in {0}\".\n * Internal version of {@link android.icu.text.SimpleFormatter}\n * with only static methods, to avoid wrapper objects.\n *\n * <p>This class \"compiles\" pattern strings into a binary format\n * and implements formatting etc. based on that.\n *\n * <p>Format:\n * Index 0: One more than the highest argument number.\n * Followed by zero or more arguments or literal-text segments.\n *\n * <p>An argument is stored as its number, less than ARG_NUM_LIMIT.\n * A literal-text segment is stored as its length (at least 1) offset by ARG_NUM_LIMIT,\n * followed by that many chars.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "android.icu.text.SimpleFormatter" ],
  "variables" : [ {
    "name" : "ARG_NUM_LIMIT",
    "type" : "int",
    "comment" : "\n     * Argument numbers must be smaller than this limit.\n     * Text segment lengths are offset by this much.\n     * This is currently the only unused char value in compiled patterns,\n     * except it is the maximum value of the first unit (max arg +1).\n     ",
    "links" : [ ]
  }, {
    "name" : "LEN1_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEN2_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEN3_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEGMENT_LENGTH_ARGUMENT_CHAR",
    "type" : "char",
    "comment" : "\n     * Initial and maximum char/UChar value set for a text segment.\n     * Segment length char values are from ARG_NUM_LIMIT+1 to this value here.\n     * Normally 0xffff, but can be as small as ARG_NUM_LIMIT+1 for testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_SEGMENT_LENGTH",
    "type" : "int",
    "comment" : "\n     * Maximum length of a text segment. Longer segments are split into shorter ones.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMON_PATTERNS",
    "type" : "String[][]",
    "comment" : " \"Intern\" some common patterns. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String compileToStringMinMaxArguments(CharSequence pattern, StringBuilder sb, int min, int max)",
    "returnType" : "String",
    "comment" : "\n     * Creates a compiled form of the pattern string, for use with appropriate static methods.\n     * The number of arguments checked against the given limits is the\n     * highest argument number plus one, not the number of occurrences of arguments.\n     *\n     * @param pattern The pattern string.\n     * @param sb A StringBuilder instance which may or may not be used.\n     * @param min The pattern must have at least this many arguments.\n     * @param max The pattern must have at most this many arguments.\n     * @return The compiled-pattern string.\n     * @throws IllegalArgumentException for bad argument syntax and too few or too many arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getArgumentLimit(String compiledPattern)",
    "returnType" : "int",
    "comment" : "\n     * @param compiledPattern Compiled form of a pattern string.\n     * @return The max argument number + 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatCompiledPattern(String compiledPattern, CharSequence... values)",
    "returnType" : "String",
    "comment" : "\n     * Formats the given values.\n     *\n     * @param compiledPattern Compiled form of a pattern string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String formatRawPattern(String pattern, int min, int max, CharSequence... values)",
    "returnType" : "String",
    "comment" : "\n     * Formats the not-compiled pattern with the given values.\n     * Equivalent to compileToStringMinMaxArguments() followed by formatCompiledPattern().\n     * The number of arguments checked against the given limits is the\n     * highest argument number plus one, not the number of occurrences of arguments.\n     *\n     * @param pattern Not-compiled form of a pattern string.\n     * @param min The pattern must have at least this many arguments.\n     * @param max The pattern must have at most this many arguments.\n     * @return The compiled-pattern string.\n     * @throws IllegalArgumentException for bad argument syntax and too few or too many arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StringBuilder formatAndAppend(String compiledPattern, StringBuilder appendTo, int[] offsets, CharSequence... values)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats the given values, appending to the appendTo builder.\n     *\n     * @param compiledPattern Compiled form of a pattern string.\n     * @param appendTo Gets the formatted pattern and values appended.\n     * @param offsets offsets[i] receives the offset of where\n     *                values[i] replaced pattern argument {i}.\n     *                Can be null, or can be shorter or longer than values.\n     *                If there is no {i} in the pattern, then offsets[i] is set to -1.\n     * @param values The argument values.\n     *               An argument value must not be the same object as appendTo.\n     *               values.length must be at least getArgumentLimit().\n     *               Can be null if getArgumentLimit()==0.\n     * @return appendTo\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StringBuilder formatAndReplace(String compiledPattern, StringBuilder result, int[] offsets, CharSequence... values)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * Formats the given values, replacing the contents of the result builder.\n     * May optimize by actually appending to the result if it is the same object\n     * as the value corresponding to the initial argument in the pattern.\n     *\n     * @param compiledPattern Compiled form of a pattern string.\n     * @param result Gets its contents replaced by the formatted pattern and values.\n     * @param offsets offsets[i] receives the offset of where\n     *                values[i] replaced pattern argument {i}.\n     *                Can be null, or can be shorter or longer than values.\n     *                If there is no {i} in the pattern, then offsets[i] is set to -1.\n     * @param values The argument values.\n     *               An argument value may be the same object as result.\n     *               values.length must be at least getArgumentLimit().\n     * @return result\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getTextWithNoArguments(String compiledPattern)",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern text with none of the arguments.\n     * Like formatting with all-empty string values.\n     *\n     * @param compiledPattern Compiled form of a pattern string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getLength(String compiledPattern, boolean codePoints)",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the pattern text with none of the arguments.\n     * @param compiledPattern Compiled form of a pattern string.\n     * @param codePoints true to count code points; false to count code units.\n     * @return The number of code points or code units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getPrefixLength(String compiledPattern)",
    "returnType" : "int",
    "comment" : "\n     * Returns the length in code units of the pattern text up until the first argument.\n     * @param compiledPattern Compiled form of a pattern string.\n     * @return The number of code units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int formatPrefixSuffix(String compiledPattern, Format.Field field, int start, int end, FormattedStringBuilder output)",
    "returnType" : "int",
    "comment" : "\n     * Special case for using FormattedStringBuilder with patterns with 0 or 1 argument.\n     *\n     * With 1 argument, treat the current contents of the FormattedStringBuilder between\n     * start and end as the argument {0}. Insert the extra strings from compiledPattern\n     * to surround the argument in the output.\n     *\n     * With 0 arguments, overwrite the entire contents of the FormattedStringBuilder\n     * between start and end.\n     *\n     * @param compiledPattern Compiled form of a pattern string.\n     * @param field Field to use when adding chars to the output.\n     * @param start The start index of the argument already in the output string.\n     * @param end The end index of the argument already in the output string.\n     * @param output Destination for formatted output.\n     * @return Net number of characters added to the formatted string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static StringBuilder format(String compiledPattern, CharSequence[] values, StringBuilder result, String resultCopy, boolean forbidResultAsValue, int[] offsets)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String compileToStringMinMaxArguments(CharSequence pattern, StringBuilder sb, int min, int max)", "public static int getArgumentLimit(String compiledPattern)", "public static String formatCompiledPattern(String compiledPattern, CharSequence... values)", "public static String formatRawPattern(String pattern, int min, int max, CharSequence... values)", "public static StringBuilder formatAndAppend(String compiledPattern, StringBuilder appendTo, int[] offsets, CharSequence... values)", "public static StringBuilder formatAndReplace(String compiledPattern, StringBuilder result, int[] offsets, CharSequence... values)", "public static String getTextWithNoArguments(String compiledPattern)", "public static int getLength(String compiledPattern, boolean codePoints)", "public static int getPrefixLength(String compiledPattern)", "public static int formatPrefixSuffix(String compiledPattern, Format.Field field, int start, int end, FormattedStringBuilder output)", "private static StringBuilder format(String compiledPattern, CharSequence[] values, StringBuilder result, String resultCopy, boolean forbidResultAsValue, int[] offsets)" ],
  "variableNames" : [ "ARG_NUM_LIMIT", "LEN1_CHAR", "LEN2_CHAR", "LEN3_CHAR", "SEGMENT_LENGTH_ARGUMENT_CHAR", "MAX_SEGMENT_LENGTH", "COMMON_PATTERNS" ]
}