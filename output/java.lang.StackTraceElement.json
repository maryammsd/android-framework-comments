{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StackTraceElement.java",
  "packageName" : "java.lang",
  "className" : "StackTraceElement",
  "comment" : "\n * An element in a stack trace, as returned by {@link\n * Throwable#getStackTrace()}.  Each element represents a single stack frame.\n * All stack frames except for the one at the top of the stack represent\n * a method invocation.  The frame at the top of the stack represents the\n * execution point at which the stack trace was generated.  Typically,\n * this is the point at which the throwable corresponding to the stack trace\n * was created.\n *\n * @since  1.4\n * @author Josh Bloch\n ",
  "links" : [ "java.lang.Throwable#getStackTrace()" ],
  "variables" : [ {
    "name" : "declaringClass",
    "type" : "String",
    "comment" : " private String moduleVersion;",
    "links" : [ ]
  }, {
    "name" : "methodName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fileName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lineNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getFileName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the source file containing the execution point\n     * represented by this stack trace element.  Generally, this corresponds\n     * to the {@code SourceFile} attribute of the relevant {@code class}\n     * file (as per <i>The Java Virtual Machine Specification</i>, Section\n     * 4.7.7).  In some systems, the name may refer to some source code unit\n     * other than a file, such as an entry in source repository.\n     *\n     * @return the name of the file containing the execution point\n     *         represented by this stack trace element, or {@code null} if\n     *         this information is unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n     * Returns the line number of the source line containing the execution\n     * point represented by this stack trace element.  Generally, this is\n     * derived from the {@code LineNumberTable} attribute of the relevant\n     * {@code class} file (as per <i>The Java Virtual Machine\n     * Specification</i>, Section 4.7.8).\n     *\n     * @return the line number of the source line containing the execution\n     *         point represented by this stack trace element, or a negative\n     *         number if this information is unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getClassName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the fully qualified name of the class containing the\n     * execution point represented by this stack trace element.\n     *\n     * @return the fully qualified name of the {@code Class} containing\n     *         the execution point represented by this stack trace element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMethodName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the method containing the execution point\n     * represented by this stack trace element.  If the execution point is\n     * contained in an instance or class initializer, this method will return\n     * the appropriate <i>special method name</i>, {@code <init>} or\n     * {@code <clinit>}, as per Section 3.9 of <i>The Java Virtual\n     * Machine Specification</i>.\n     *\n     * @return the name of the method containing the execution point\n     *         represented by this stack trace element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNativeMethod()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the method containing the execution point\n     * represented by this stack trace element is a native method.\n     *\n     * @return {@code true} if the method containing the execution point\n     *         represented by this stack trace element is a native method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this stack trace element.\n     *\n     * @apiNote The format of this string depends on the implementation, but the\n     * following examples may be regarded as typical:\n     * <ul>\n     * <li>\n     *   {@code \"MyClass.mash(MyClass.java:9)\"} - Here, {@code \"MyClass\"}\n     *   is the <i>fully-qualified name</i> of the class containing the\n     *   execution point represented by this stack trace element,\n     *   {@code \"mash\"} is the name of the method containing the execution\n     *   point, {@code \"MyClass.java\"} is the source file containing the\n     *   execution point, and {@code \"9\"} is the line number of the source\n     *   line containing the execution point.\n     * <li>\n     *   {@code \"MyClass.mash(MyClass.java)\"} - As above, but the line\n     *   number is unavailable.\n     * <li>\n     *   {@code \"MyClass.mash(Unknown Source)\"} - As above, but neither\n     *   the file name nor the line  number are available.\n     * <li>\n     *   {@code \"MyClass.mash(Native Method)\"} - As above, but neither\n     *   the file name nor the line  number are available, and the method\n     *   containing the execution point is known to be a native method.\n     * </ul>\n     *\n     * <p> The {@code toString} method may return two different values on two\n     * {@code StackTraceElement} instances that are\n     * {@linkplain #equals(Object) equal}, for example one created via the\n     * constructor, and one obtained from {@link java.lang.Throwable} or\n     * {@link java.lang.StackWalker.StackFrame}, where an implementation may\n     * choose to omit some element in the returned string.\n     *\n     * @revised 9\n     * @spec JPMS\n     * @see    Throwable#printStackTrace()\n     ",
    "links" : [ "java.lang.Throwable", "java.lang.StackWalker.StackFrame" ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified object is another\n     * {@code StackTraceElement} instance representing the same execution\n     * point as this instance.  Two stack trace elements {@code a} and\n     * {@code b} are equal if and only if:\n     * <pre>{@code\n     *     equals(a.getFileName(), b.getFileName()) &&\n     *     a.getLineNumber() == b.getLineNumber()) &&\n     *     equals(a.getClassName(), b.getClassName()) &&\n     *     equals(a.getMethodName(), b.getMethodName())\n     * }</pre>\n     * where {@code equals} has the semantics of {@link\n     * java.util.Objects#equals(Object, Object) Objects.equals}.\n     *\n     * @param  obj the object to be compared with this stack trace element.\n     * @return true if the specified object is another\n     *         {@code StackTraceElement} instance representing the same\n     *         execution point as this instance.\n     *\n     * @revised 9\n     * @spec JPMS\n     ",
    "links" : [ "java.util.Objects#equals(Object" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code value for this stack trace element.\n     ",
    "links" : [ ]
  }, {
    "name" : " static StackTraceElement of(StackFrameInfo sfi)",
    "returnType" : "StackTraceElement",
    "comment" : "\n     * Returns a StackTraceElement from a given StackFrameInfo.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getFileName()", "public int getLineNumber()", "public String getClassName()", "public String getMethodName()", "public boolean isNativeMethod()", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", " static StackTraceElement of(StackFrameInfo sfi)" ],
  "variableNames" : [ "declaringClass", "methodName", "fileName", "lineNumber", "serialVersionUID" ]
}