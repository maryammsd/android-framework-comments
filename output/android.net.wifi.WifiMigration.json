{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiMigration.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiMigration",
  "comment" : "\n * Class used to provide one time hooks for existing OEM devices to migrate their config store\n * data and other settings to the wifi apex.\n * @hide\n ",
  "variables" : [ {
    "name" : "LEGACY_WIFI_STORE_DIRECTORY_NAME",
    "type" : "String",
    "comment" : "\n     * Directory to read the wifi config store files from under.\n     ",
    "links" : [ ]
  }, {
    "name" : "STORE_FILE_SHARED_GENERAL",
    "type" : "int",
    "comment" : "\n     * Config store file for general shared store file.\n     * AOSP Path on Android 10: /data/misc/wifi/WifiConfigStore.xml\n     ",
    "links" : [ ]
  }, {
    "name" : "STORE_FILE_SHARED_SOFTAP",
    "type" : "int",
    "comment" : "\n     * Config store file for softap shared store file.\n     * AOSP Path on Android 10: /data/misc/wifi/softap.conf\n     ",
    "links" : [ ]
  }, {
    "name" : "STORE_FILE_USER_GENERAL",
    "type" : "int",
    "comment" : "\n     * Config store file for general user store file.\n     * AOSP Path on Android 10: /data/misc_ce/<userId>/wifi/WifiConfigStore.xml\n     ",
    "links" : [ ]
  }, {
    "name" : "STORE_FILE_USER_NETWORK_SUGGESTIONS",
    "type" : "int",
    "comment" : "\n     * Config store file for network suggestions user store file.\n     * AOSP Path on Android 10: /data/misc_ce/<userId>/wifi/WifiConfigStoreNetworkSuggestions.xml\n     ",
    "links" : [ ]
  }, {
    "name" : "STORE_ID_TO_FILE_NAME",
    "type" : "SparseArray<String>",
    "comment" : "\n     * Mapping of Store file Id to Store file names.\n     *\n     * NOTE: This is the default path for the files on AOSP devices. If the OEM has modified\n     * the path or renamed the files, please edit this appropriately.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static File getLegacyWifiSharedDirectory()",
    "returnType" : "File",
    "comment" : "\n     * Pre-apex wifi shared folder.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static File getLegacyWifiUserDirectory(int userId)",
    "returnType" : "File",
    "comment" : "\n     * Pre-apex wifi user folder.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static AtomicFile getSharedAtomicFile(@SharedStoreFileId int storeFileId)",
    "returnType" : "AtomicFile",
    "comment" : "\n     * Legacy files were stored as AtomicFile. So, always use AtomicFile to operate on it to ensure\n     * data integrity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static AtomicFile getUserAtomicFile(@UserStoreFileId int storeFileId, int userId)",
    "returnType" : "AtomicFile",
    "comment" : "\n     * Legacy files were stored as AtomicFile. So, always use AtomicFile to operate on it to ensure\n     * data integrity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputStream convertAndRetrieveSharedConfigStoreFile(@SharedStoreFileId int storeFileId)",
    "returnType" : "InputStream",
    "comment" : "\n     * Load data from legacy shared wifi config store file.\n     * <p>\n     * Expected AOSP format is available in the sample files under {@code /frameworks/base/wifi/\n     * java/android/net/wifi/migration_samples}.\n     * </p>\n     * <p>\n     * Note:\n     * <li>OEMs need to change the implementation of\n     * {@link #convertAndRetrieveSharedConfigStoreFile(int)} only if their existing config store\n     * format or file locations differs from the vanilla AOSP implementation.</li>\n     * <li>The wifi apex will invoke\n     * {@link #convertAndRetrieveSharedConfigStoreFile(int)}\n     * method on every bootup, it is the responsibility of the OEM implementation to ensure that\n     * they perform the necessary in place conversion of their config store file to conform to the\n     * AOSP format. The OEM should ensure that the method should only return the\n     * {@link InputStream} stream for the data to be migrated only on the first bootup.</li>\n     * <li>Once the migration is done, the apex will invoke\n     * {@link #removeSharedConfigStoreFile(int)} to delete the store file.</li>\n     * <li>The only relevant invocation of {@link #convertAndRetrieveSharedConfigStoreFile(int)}\n     * occurs when a previously released device upgrades to the wifi apex from an OEM\n     * implementation of the wifi stack.\n     * <li>Ensure that the legacy file paths are accessible to the wifi module (sepolicy rules, file\n     * permissions, etc). Since the wifi service continues to run inside system_server process, this\n     * method will be called from the same context (so ideally the file should still be accessible).\n     * </li>\n     *\n     * @param storeFileId Identifier for the config store file. One of\n     * {@link #STORE_FILE_SHARED_GENERAL} or {@link #STORE_FILE_SHARED_GENERAL}\n     * @return Instance of {@link InputStream} for migrating data, null if no migration is\n     * necessary.\n     * @throws IllegalArgumentException on invalid storeFileId.\n     ",
    "links" : [ "#convertAndRetrieveSharedConfigStoreFile(int)", "#STORE_FILE_SHARED_GENERAL", "#removeSharedConfigStoreFile(int)", "java.io.InputStream" ]
  }, {
    "name" : "public static void removeSharedConfigStoreFile(@SharedStoreFileId int storeFileId)",
    "returnType" : "void",
    "comment" : "\n     * Remove the legacy shared wifi config store file.\n     *\n     * @param storeFileId Identifier for the config store file. One of\n     * {@link #STORE_FILE_SHARED_GENERAL} or {@link #STORE_FILE_SHARED_GENERAL}\n     * @throws IllegalArgumentException on invalid storeFileId.\n     ",
    "links" : [ "#STORE_FILE_SHARED_GENERAL" ]
  }, {
    "name" : "public static InputStream convertAndRetrieveUserConfigStoreFile(@UserStoreFileId int storeFileId, @NonNull UserHandle userHandle)",
    "returnType" : "InputStream",
    "comment" : "\n     * Load data from legacy user wifi config store file.\n     * <p>\n     * Expected AOSP format is available in the sample files under {@code /frameworks/base/wifi/\n     * java/android/net/wifi/migration_samples}.\n     * </p>\n     * <p>\n     * Note:\n     * <li>OEMs need to change the implementation of\n     * {@link #convertAndRetrieveUserConfigStoreFile(int, UserHandle)} only if their existing config\n     * store format or file locations differs from the vanilla AOSP implementation.</li>\n     * <li>The wifi apex will invoke\n     * {@link #convertAndRetrieveUserConfigStoreFile(int, UserHandle)}\n     * method on every bootup, it is the responsibility of the OEM implementation to ensure that\n     * they perform the necessary in place conversion of their config store file to conform to the\n     * AOSP format. The OEM should ensure that the method should only return the\n     * {@link InputStream} stream for the data to be migrated only on the first bootup.</li>\n     * <li>Once the migration is done, the apex will invoke\n     * {@link #removeUserConfigStoreFile(int, UserHandle)} to delete the store file.</li>\n     * <li>The only relevant invocation of\n     * {@link #convertAndRetrieveUserConfigStoreFile(int, UserHandle)} occurs when a previously\n     * released device upgrades to the wifi apex from an OEM implementation of the wifi\n     * stack.\n     * </li>\n     * <li>Ensure that the legacy file paths are accessible to the wifi module (sepolicy rules, file\n     * permissions, etc). Since the wifi service continues to run inside system_server process, this\n     * method will be called from the same context (so ideally the file should still be accessible).\n     * </li>\n     *\n     * @param storeFileId Identifier for the config store file. One of\n     * {@link #STORE_FILE_USER_GENERAL} or {@link #STORE_FILE_USER_NETWORK_SUGGESTIONS}\n     * @param userHandle User handle.\n     * @return Instance of {@link InputStream} for migrating data, null if no migration is\n     * necessary.\n     * @throws IllegalArgumentException on invalid storeFileId or userHandle.\n     ",
    "links" : [ "#removeUserConfigStoreFile(int", "#STORE_FILE_USER_NETWORK_SUGGESTIONS", "#convertAndRetrieveUserConfigStoreFile(int", "#STORE_FILE_USER_GENERAL", "java.io.InputStream" ]
  }, {
    "name" : "public static void removeUserConfigStoreFile(@UserStoreFileId int storeFileId, @NonNull UserHandle userHandle)",
    "returnType" : "void",
    "comment" : "\n     * Remove the legacy user wifi config store file.\n     *\n     * @param storeFileId Identifier for the config store file. One of\n     * {@link #STORE_FILE_USER_GENERAL} or {@link #STORE_FILE_USER_NETWORK_SUGGESTIONS}\n     * @param userHandle User handle.\n     * @throws IllegalArgumentException on invalid storeFileId or userHandle.\n    ",
    "links" : [ "#STORE_FILE_USER_NETWORK_SUGGESTIONS", "#STORE_FILE_USER_GENERAL" ]
  }, {
    "name" : "public static SettingsMigrationData loadFromSettings(@NonNull Context context)",
    "returnType" : "SettingsMigrationData",
    "comment" : "\n     * Load data from Settings.Global values.\n     *\n     * <p>\n     * Note:\n     * <li> This is method is invoked once on the first bootup. OEM can safely delete these settings\n     * once the migration is complete. The first & only relevant invocation of\n     * {@link #loadFromSettings(Context)} ()} occurs when a previously released\n     * device upgrades to the wifi apex from an OEM implementation of the wifi stack.\n     * </li>\n     *\n     * @param context Context to use for loading the settings provider.\n     * @return Instance of {@link SettingsMigrationData} for migrating data.\n     ",
    "links" : [ "#loadFromSettings(Context)", "SettingsMigrationData" ]
  } ],
  "variableNames" : [ "LEGACY_WIFI_STORE_DIRECTORY_NAME", "STORE_FILE_SHARED_GENERAL", "STORE_FILE_SHARED_SOFTAP", "STORE_FILE_USER_GENERAL", "STORE_FILE_USER_NETWORK_SUGGESTIONS", "STORE_ID_TO_FILE_NAME" ],
  "methodNames" : [ "private static File getLegacyWifiSharedDirectory()", "private static File getLegacyWifiUserDirectory(int userId)", "private static AtomicFile getSharedAtomicFile(@SharedStoreFileId int storeFileId)", "private static AtomicFile getUserAtomicFile(@UserStoreFileId int storeFileId, int userId)", "public static InputStream convertAndRetrieveSharedConfigStoreFile(@SharedStoreFileId int storeFileId)", "public static void removeSharedConfigStoreFile(@SharedStoreFileId int storeFileId)", "public static InputStream convertAndRetrieveUserConfigStoreFile(@UserStoreFileId int storeFileId, @NonNull UserHandle userHandle)", "public static void removeUserConfigStoreFile(@UserStoreFileId int storeFileId, @NonNull UserHandle userHandle)", "public static SettingsMigrationData loadFromSettings(@NonNull Context context)" ]
}