{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/ErrorHandler.java",
  "packageName" : "org.xml.sax",
  "className" : "ErrorHandler",
  "comment" : "\n * Basic interface for SAX error handlers.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>If a SAX application needs to implement customized error\n * handling, it must implement this interface and then register an\n * instance with the XML reader using the\n * {@link org.xml.sax.XMLReader#setErrorHandler setErrorHandler}\n * method.  The parser will then report all errors and warnings\n * through this interface.</p>\n *\n * <p><strong>WARNING:</strong> If an application does <em>not</em>\n * register an ErrorHandler, XML parsing errors will go unreported,\n * except that <em>SAXParseException</em>s will be thrown for fatal errors.\n * In order to detect validity errors, an ErrorHandler that does something\n * with {@link #error error()} calls must be registered.</p>\n *\n * <p>For XML processing errors, a SAX driver must use this interface\n * in preference to throwing an exception: it is up to the application\n * to decide whether to throw an exception for different types of\n * errors and warnings.  Note, however, that there is no requirement that\n * the parser continue to report additional errors after a call to\n * {@link #fatalError fatalError}.  In other words, a SAX driver class\n * may throw an exception after reporting any fatalError.\n * Also parsers may throw appropriate exceptions for non-XML errors.\n * For example, {@link XMLReader#parse XMLReader.parse()} would throw\n * an IOException for errors accessing entities or the document.</p>\n *\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1+ (sax2r3pre1)\n * @see org.xml.sax.XMLReader#setErrorHandler\n * @see org.xml.sax.SAXParseException\n ",
  "links" : [ "#fatalError", "org.xml.sax.XMLReader#setErrorHandler", "#error", "org.xml.sax.XMLReader#parse" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void warning(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a warning.\n     *\n     * <p>SAX parsers will use this method to report conditions that\n     * are not errors or fatal errors as defined by the XML\n     * recommendation.  The default behaviour is to take no\n     * action.</p>\n     *\n     * <p>The SAX parser must continue to provide normal parsing events\n     * after invoking this method: it should still be possible for the\n     * application to process the document through to the end.</p>\n     *\n     * <p>Filters may use this method to report other, non-XML warnings\n     * as well.</p>\n     *\n     * @param exception The warning information encapsulated in a\n     *                  SAX parse exception.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void error(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a recoverable error.\n     *\n     * <p>This corresponds to the definition of \"error\" in section 1.2\n     * of the W3C XML 1.0 Recommendation.  For example, a validating\n     * parser would use this callback to report the violation of a\n     * validity constraint.  The default behaviour is to take no\n     * action.</p>\n     *\n     * <p>The SAX parser must continue to provide normal parsing\n     * events after invoking this method: it should still be possible\n     * for the application to process the document through to the end.\n     * If the application cannot do so, then the parser should report\n     * a fatal error even if the XML recommendation does not require\n     * it to do so.</p>\n     *\n     * <p>Filters may use this method to report other, non-XML errors\n     * as well.</p>\n     *\n     * @param exception The error information encapsulated in a\n     *                  SAX parse exception.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void fatalError(SAXParseException exception) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a non-recoverable error.\n     *\n     * <p><strong>There is an apparent contradiction between the\n     * documentation for this method and the documentation for {@link\n     * org.xml.sax.ContentHandler#endDocument}.  Until this ambiguity\n     * is resolved in a future major release, clients should make no\n     * assumptions about whether endDocument() will or will not be\n     * invoked when the parser has reported a fatalError() or thrown\n     * an exception.</strong></p>\n     *\n     * <p>This corresponds to the definition of \"fatal error\" in\n     * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a\n     * parser would use this callback to report the violation of a\n     * well-formedness constraint.</p>\n     *\n     * <p>The application must assume that the document is unusable\n     * after the parser has invoked this method, and should continue\n     * (if at all) only for the sake of collecting additional error\n     * messages: in fact, SAX parsers are free to stop reporting any\n     * other events once this method has been invoked.</p>\n     *\n     * @param exception The error information encapsulated in a\n     *                  SAX parse exception.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ "org.xml.sax.ContentHandler#endDocument" ]
  } ],
  "methodNames" : [ "public abstract void warning(SAXParseException exception) throws SAXException", "public abstract void error(SAXParseException exception) throws SAXException", "public abstract void fatalError(SAXParseException exception) throws SAXException" ],
  "variableNames" : [ ]
}