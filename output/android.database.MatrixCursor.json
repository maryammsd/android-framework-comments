{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/MatrixCursor.java",
  "packageName" : "android.database",
  "className" : "MatrixCursor",
  "comment" : "\n * A mutable cursor implementation backed by an array of {@code Object}s. Use\n * {@link #newRow()} to add rows. Automatically expands internal capacity\n * as needed.\n ",
  "variables" : [ {
    "name" : "columnNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rowCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "columnCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Object get(int column)",
    "returnType" : "Object",
    "comment" : "\n     * Gets value at the given column for the current row.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RowBuilder newRow()",
    "returnType" : "RowBuilder",
    "comment" : "\n     * Adds a new row to the end and returns a builder for that row. Not safe\n     * for concurrent use.\n     *\n     * @return builder which can be used to set the column values for the new\n     *  row\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRow(Object[] columnValues)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new row to the end with the given column values. Not safe\n     * for concurrent use.\n     *\n     * @throws IllegalArgumentException if {@code columnValues.length !=\n     *  columnNames.length}\n     * @param columnValues in the same order as the the column names specified\n     *  at cursor construction time\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRow(Iterable<?> columnValues)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new row to the end with the given column values. Not safe\n     * for concurrent use.\n     *\n     * @throws IllegalArgumentException if {@code columnValues.size() !=\n     *  columnNames.length}\n     * @param columnValues in the same order as the the column names specified\n     *  at cursor construction time\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addRow(ArrayList<?> columnValues, int start)",
    "returnType" : "void",
    "comment" : " Optimization for {@link ArrayList}. ",
    "links" : [ "java.util.ArrayList" ]
  }, {
    "name" : "private void ensureCapacity(int size)",
    "returnType" : "void",
    "comment" : " Ensures that this cursor has enough capacity. ",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getColumnNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getString(int column)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short getShort(int column)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInt(int column)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getLong(int column)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(int column)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(int column)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBlob(int column)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType(int column)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNull(int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "columnNames", "data", "rowCount", "columnCount" ],
  "methodNames" : [ "private Object get(int column)", "public RowBuilder newRow()", "public void addRow(Object[] columnValues)", "public void addRow(Iterable<?> columnValues)", "private void addRow(ArrayList<?> columnValues, int start)", "private void ensureCapacity(int size)", "public int getCount()", "public String[] getColumnNames()", "public String getString(int column)", "public short getShort(int column)", "public int getInt(int column)", "public long getLong(int column)", "public float getFloat(int column)", "public double getDouble(int column)", "public byte[] getBlob(int column)", "public int getType(int column)", "public boolean isNull(int column)" ]
}