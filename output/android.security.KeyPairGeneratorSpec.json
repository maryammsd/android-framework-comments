{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyPairGeneratorSpec.java",
  "packageName" : "android.security",
  "className" : "KeyPairGeneratorSpec",
  "comment" : "\n * This provides the required parameters needed for initializing the\n * {@code KeyPairGenerator} that works with\n * <a href=\"{@docRoot}training/articles/keystore.html\">Android KeyStore\n * facility</a>. The Android KeyStore facility is accessed through a\n * {@link java.security.KeyPairGenerator} API using the {@code AndroidKeyStore}\n * provider. The {@code context} passed in may be used to pop up some UI to ask\n * the user to unlock or initialize the Android KeyStore facility.\n * <p>\n * After generation, the {@code keyStoreAlias} is used with the\n * {@link java.security.KeyStore#getEntry(String, java.security.KeyStore.ProtectionParameter)}\n * interface to retrieve the {@link PrivateKey} and its associated\n * {@link Certificate} chain.\n * <p>\n * The KeyPair generator will create a self-signed certificate with the subject\n * as its X.509v3 Subject Distinguished Name and as its X.509v3 Issuer\n * Distinguished Name along with the other parameters specified with the\n * {@link Builder}.\n * <p>\n * The self-signed X.509 certificate may be replaced at a later time by a\n * certificate signed by a real Certificate Authority.\n *\n * @deprecated Use {@link KeyGenParameterSpec} instead.\n ",
  "links" : [ "java.security.KeyPairGenerator", "java.security.KeyStore#getEntry(String", "java.security.cert.Certificate", "java.security.PrivateKey", "Builder", "android.security.keystore.KeyGenParameterSpec" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeystoreAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeySize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpec",
    "type" : "AlgorithmParameterSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubjectDN",
    "type" : "X500Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSerialNumber",
    "type" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartDate",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndDate",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Gets the Android context used for operations with this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKeystoreAlias()",
    "returnType" : "String",
    "comment" : "\n     * Returns the alias that will be used in the {@code java.security.KeyStore}\n     * in conjunction with the {@code AndroidKeyStore}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKeyType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the type of key pair (e.g., {@code EC}, {@code RSA}) to be generated. See\n     * {@link KeyProperties}.{@code KEY_ALGORITHM} constants.\n     ",
    "links" : [ "android.security.keystore.KeyProperties" ]
  }, {
    "name" : "public int getKeySize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the key size specified by this parameter. For instance, for RSA\n     * this will return the modulus size and for EC it will return the field\n     * size.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AlgorithmParameterSpec getAlgorithmParameterSpec()",
    "returnType" : "AlgorithmParameterSpec",
    "comment" : "\n     * Returns the {@link AlgorithmParameterSpec} that will be used for creation\n     * of the key pair.\n     ",
    "links" : [ "java.security.spec.AlgorithmParameterSpec" ]
  }, {
    "name" : "public X500Principal getSubjectDN()",
    "returnType" : "X500Principal",
    "comment" : "\n     * Gets the subject distinguished name to be used on the X.509 certificate\n     * that will be put in the {@link java.security.KeyStore}.\n     ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public BigInteger getSerialNumber()",
    "returnType" : "BigInteger",
    "comment" : "\n     * Gets the serial number to be used on the X.509 certificate that will be\n     * put in the {@link java.security.KeyStore}.\n     ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public Date getStartDate()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the start date to be used on the X.509 certificate that will be put\n     * in the {@link java.security.KeyStore}.\n     ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public Date getEndDate()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the end date to be used on the X.509 certificate that will be put in\n     * the {@link java.security.KeyStore}.\n     ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEncryptionRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key must be encrypted at rest. This will protect the key pair\n     * with the secure lock screen credential (e.g., password, PIN, or pattern).\n     *\n     * <p>Note that encrypting the key at rest requires that the secure lock screen (e.g., password,\n     * PIN, pattern) is set up, otherwise key generation will fail. Moreover, this key will be\n     * deleted when the secure lock screen is disabled or reset (e.g., by the user or a Device\n     * Administrator). Finally, this key cannot be used until the user unlocks the secure lock\n     * screen after boot.\n     *\n     * @see KeyguardManager#isDeviceSecure()\n     *\n     * @deprecated Encryption at rest is on by default. If extra binding to the lockscreen screen\n     *             credential is desired use\n     *             {@link KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)}.\n     *             This flag will be ignored from Android S.\n     ",
    "links" : [ "KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)" ]
  } ],
  "methodNames" : [ "public Context getContext()", "public String getKeystoreAlias()", "public String getKeyType()", "public int getKeySize()", "public AlgorithmParameterSpec getAlgorithmParameterSpec()", "public X500Principal getSubjectDN()", "public BigInteger getSerialNumber()", "public Date getStartDate()", "public Date getEndDate()", "public int getFlags()", "public boolean isEncryptionRequired()" ],
  "variableNames" : [ "mContext", "mKeystoreAlias", "mKeyType", "mKeySize", "mSpec", "mSubjectDN", "mSerialNumber", "mStartDate", "mEndDate" ]
}