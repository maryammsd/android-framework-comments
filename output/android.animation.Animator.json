{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/Animator.java",
  "packageName" : "android.animation",
  "className" : "Animator",
  "comment" : "\n * This is the superclass for classes which provide basic support for animations which can be\n * started, ended, and have <code>AnimatorListeners</code> added to them.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DURATION_INFINITE",
    "type" : "long",
    "comment" : "\n     * The value used to indicate infinite duration (e.g. when Animators repeat infinitely).\n     ",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayList<AnimatorListener>",
    "comment" : "\n     * The set of listeners to be sent events through the life of an animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPauseListeners",
    "type" : "ArrayList<AnimatorPauseListener>",
    "comment" : "\n     * The set of listeners to be sent pause/resume events through the life\n     * of an animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPaused",
    "type" : "boolean",
    "comment" : "\n     * Whether this animator is currently in a paused state.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChangingConfigurations",
    "type" : "int",
    "comment" : "\n     * A set of flags which identify the type of configuration changes that can affect this\n     * Animator. Used by the Animator cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "mConstantState",
    "type" : "AnimatorConstantState",
    "comment" : "\n     * If this animator is inflated from a constant state, keep a reference to it so that\n     * ConstantState will not be garbage collected until this animator is collected\n     ",
    "links" : [ ]
  }, {
    "name" : "sBackgroundPauseDelay",
    "type" : "long",
    "comment" : "\n     * backing field for backgroundPauseDelay property. This could be simply a hardcoded\n     * value in AnimationHandler, but it is useful to be able to change the value in tests.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCachedList",
    "type" : "AtomicReference<Object[]>",
    "comment" : "\n     * A cache of the values in a list. Used so that when calling the list, we have a copy\n     * of it in case the list is modified while iterating. The array can be reused to avoid\n     * allocation on every notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartListenersCalled",
    "type" : "boolean",
    "comment" : "\n     * Tracks whether we've notified listeners of the onAnimationStart() event. This can be\n     * complex to keep track of since we notify listeners at different times depending on\n     * startDelay and whether start() was called before end().\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setBackgroundPauseDelay(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the duration for delaying pausing animators when apps go into the background.\n     * Used by AnimationHandler when requested to pause animators.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getBackgroundPauseDelay()",
    "returnType" : "long",
    "comment" : "\n     * Gets the duration for delaying pausing animators when apps go into the background.\n     * Used by AnimationHandler when requested to pause animators.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAnimatorPausingEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets the behavior of animator pausing when apps go into the background.\n     * This is exposed as a test API for verification, but is intended for use by internal/\n     * platform code, potentially for use by a system property that could disable it\n     * system wide.\n     *\n     * @param enable Enable (default behavior) or disable background pausing behavior.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts this animation. If the animation has a nonzero startDelay, the animation will start\n     * running after that delay elapses. A non-delayed animation will have its initial\n     * value(s) set immediately, followed by calls to\n     * {@link AnimatorListener#onAnimationStart(Animator)} for any listeners of this animator.\n     *\n     * <p>The animation started by calling this method will be run on the thread that called\n     * this method. This thread should have a Looper on it (a runtime exception will be thrown if\n     * this is not the case). Also, if the animation will animate\n     * properties of objects in the view hierarchy, then the calling thread should be the UI\n     * thread for that view hierarchy.</p>\n     *\n     ",
    "links" : [ "#onAnimationStart(Animator)" ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the animation. Unlike {@link #end()}, <code>cancel()</code> causes the animation to\n     * stop in its tracks, sending an\n     * {@link android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)} to\n     * its listeners, followed by an\n     * {@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} message.\n     *\n     * <p>This method must be called on the thread that is running the animation.</p>\n     ",
    "links" : [ "#end()", "android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)", "android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)" ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "\n     * Ends the animation. This causes the animation to assign the end value of the property being\n     * animated, then calling the\n     * {@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method on\n     * its listeners.\n     *\n     * <p>This method must be called on the thread that is running the animation.</p>\n     ",
    "links" : [ "android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)" ]
  }, {
    "name" : "public void pause()",
    "returnType" : "void",
    "comment" : "\n     * Pauses a running animation. This method should only be called on the same thread on\n     * which the animation was started. If the animation has not yet been {@link\n     * #isStarted() started} or has since ended, then the call is ignored. Paused\n     * animations can be resumed by calling {@link #resume()}.\n     *\n     * @see #resume()\n     * @see #isPaused()\n     * @see AnimatorPauseListener\n     ",
    "links" : [ "#isStarted()", "#resume()" ]
  }, {
    "name" : "public void resume()",
    "returnType" : "void",
    "comment" : "\n     * Resumes a paused animation, causing the animator to pick up where it left off\n     * when it was paused. This method should only be called on the same thread on\n     * which the animation was started. Calls to resume() on an animator that is\n     * not currently paused will be ignored.\n     *\n     * @see #pause()\n     * @see #isPaused()\n     * @see AnimatorPauseListener\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPaused()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this animator is currently in a paused state.\n     *\n     * @return True if the animator is currently paused, false otherwise.\n     *\n     * @see #pause()\n     * @see #resume()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getStartDelay()",
    "returnType" : "long",
    "comment" : "\n     * The amount of time, in milliseconds, to delay processing the animation\n     * after {@link #start()} is called.\n     *\n     * @return the number of milliseconds to delay running the animation\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public abstract void setStartDelay(long startDelay)",
    "returnType" : "void",
    "comment" : "\n     * The amount of time, in milliseconds, to delay processing the animation\n     * after {@link #start()} is called.\n\n     * @param startDelay The amount of the delay, in milliseconds\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public abstract Animator setDuration(long duration)",
    "returnType" : "Animator",
    "comment" : "\n     * Sets the duration of the animation.\n     *\n     * @param duration The length of the animation, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the duration of the animation.\n     *\n     * @return The length of the animation, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the total duration of the animation, accounting for animation sequences, start delay,\n     * and repeating. Return {@link #DURATION_INFINITE} if the duration is infinite.\n     *\n     * @return  Total time an animation takes to finish, starting from the time {@link #start()}\n     *          is called. {@link #DURATION_INFINITE} will be returned if the animation or any\n     *          child animation repeats infinite times.\n     ",
    "links" : [ "#DURATION_INFINITE", "#start()" ]
  }, {
    "name" : "public abstract void setInterpolator(TimeInterpolator value)",
    "returnType" : "void",
    "comment" : "\n     * The time interpolator used in calculating the elapsed fraction of the\n     * animation. The interpolator determines whether the animation runs with\n     * linear or non-linear motion, such as acceleration and deceleration. The\n     * default value is {@link android.view.animation.AccelerateDecelerateInterpolator}.\n     *\n     * @param value the interpolator to be used by this animation\n     ",
    "links" : [ "android.view.animation.AccelerateDecelerateInterpolator" ]
  }, {
    "name" : "public TimeInterpolator getInterpolator()",
    "returnType" : "TimeInterpolator",
    "comment" : "\n     * Returns the timing interpolator that this animation uses.\n     *\n     * @return The timing interpolator for this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this Animator is currently running (having been started and gone past any\n     * initial startDelay period and not yet ended).\n     *\n     * @return Whether the Animator is running.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStarted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this Animator has been started and not yet ended. For reusable\n     * Animators (which most Animators are, apart from the one-shot animator produced by\n     * {@link android.view.ViewAnimationUtils#createCircularReveal(\n     * android.view.View, int, int, float, float) createCircularReveal()}),\n     * this state is a superset of {@link #isRunning()}, because an Animator with a\n     * nonzero {@link #getStartDelay() startDelay} will return true for {@link #isStarted()} during\n     * the delay phase, whereas {@link #isRunning()} will return true only after the delay phase\n     * is complete. Non-reusable animators will always return true after they have been\n     * started, because they cannot return to a non-started state.\n     *\n     * @return Whether the Animator has been started and not yet ended.\n     ",
    "links" : [ "#isStarted()", "#isRunning()", "android.view.ViewAnimationUtils#createCircularReveal(", "#getStartDelay()" ]
  }, {
    "name" : "public void addListener(AnimatorListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener to the set of listeners that are sent events through the life of an\n     * animation, such as start, repeat, and end.\n     *\n     * @param listener the listener to be added to the current set of listeners for this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeListener(AnimatorListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener from the set listening to this animation.\n     *\n     * @param listener the listener to be removed from the current set of listeners for this\n     *                 animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<AnimatorListener> getListeners()",
    "returnType" : "ArrayList<AnimatorListener>",
    "comment" : "\n     * Gets the set of {@link android.animation.Animator.AnimatorListener} objects that are currently\n     * listening for events on this <code>Animator</code> object.\n     *\n     * @return ArrayList<AnimatorListener> The set of listeners.\n     ",
    "links" : [ "android.animation.Animator.AnimatorListener" ]
  }, {
    "name" : "public void addPauseListener(AnimatorPauseListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a pause listener to this animator.\n     *\n     * @param listener the listener to be added to the current set of pause listeners\n     * for this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removePauseListener(AnimatorPauseListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a pause listener from the set listening to this animation.\n     *\n     * @param listener the listener to be removed from the current set of pause\n     * listeners for this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllListeners()",
    "returnType" : "void",
    "comment" : "\n     * Removes all {@link #addListener(android.animation.Animator.AnimatorListener) listeners}\n     * and {@link #addPauseListener(android.animation.Animator.AnimatorPauseListener)\n     * pauseListeners} from this object.\n     ",
    "links" : [ "#addListener(android.animation.Animator.AnimatorListener)", "#addPauseListener(android.animation.Animator.AnimatorPauseListener)" ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * Return a mask of the configuration parameters for which this animator may change, requiring\n     * that it should be re-created from Resources. The default implementation returns whatever\n     * value was provided through setChangingConfigurations(int) or 0 by default.\n     *\n     * @return Returns a mask of the changing configuration parameters, as defined by\n     * {@link android.content.pm.ActivityInfo}.\n     * @see android.content.pm.ActivityInfo\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public void setChangingConfigurations(@Config int configs)",
    "returnType" : "void",
    "comment" : "\n     * Set a mask of the configuration parameters for which this animator may change, requiring\n     * that it be re-created from resource.\n     *\n     * @param configs A mask of the changing configuration parameters, as\n     * defined by {@link android.content.pm.ActivityInfo}.\n     *\n     * @see android.content.pm.ActivityInfo\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public void appendChangingConfigurations(@Config int configs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the changing configurations value to the union of the current changing configurations\n     * and the provided configs.\n     * This method is called while loading the animator.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConstantState<Animator> createConstantState()",
    "returnType" : "ConstantState<Animator>",
    "comment" : "\n     * Return a {@link android.content.res.ConstantState} instance that holds the shared state of\n     * this Animator.\n     * <p>\n     * This constant state is used to create new instances of this animator when needed, instead\n     * of re-loading it from resources. Default implementation creates a new\n     * {@link AnimatorConstantState}. You can override this method to provide your custom logic or\n     * return null if you don't want this animator to be cached.\n     *\n     * @return The ConfigurationBoundResourceCache.BaseConstantState associated to this Animator.\n     * @see android.content.res.ConstantState\n     * @see #clone()\n     * @hide\n     ",
    "links" : [ "android.content.res.ConstantState", "AnimatorConstantState" ]
  }, {
    "name" : "public Animator clone()",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setupStartValues()",
    "returnType" : "void",
    "comment" : "\n     * This method tells the object to use appropriate information to extract\n     * starting values for the animation. For example, a AnimatorSet object will pass\n     * this call to its child objects to tell them to set up the values. A\n     * ObjectAnimator object will use the information it has about its target object\n     * and PropertyValuesHolder objects to get the start values for its properties.\n     * A ValueAnimator object will ignore the request since it does not have enough\n     * information (such as a target object) to gather these values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setupEndValues()",
    "returnType" : "void",
    "comment" : "\n     * This method tells the object to use appropriate information to extract\n     * ending values for the animation. For example, a AnimatorSet object will pass\n     * this call to its child objects to tell them to set up the values. A\n     * ObjectAnimator object will use the information it has about its target object\n     * and PropertyValuesHolder objects to get the start values for its properties.\n     * A ValueAnimator object will ignore the request since it does not have enough\n     * information (such as a target object) to gather these values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(@Nullable Object target)",
    "returnType" : "void",
    "comment" : "\n     * Sets the target object whose property will be animated by this animation. Not all subclasses\n     * operate on target objects (for example, {@link ValueAnimator}, but this method\n     * is on the superclass for the convenience of dealing generically with those subclasses\n     * that do handle targets.\n     * <p>\n     * <strong>Note:</strong> The target is stored as a weak reference internally to avoid leaking\n     * resources by having animators directly reference old targets. Therefore, you should\n     * ensure that animator targets always have a hard reference elsewhere.\n     *\n     * @param target The object being animated\n     ",
    "links" : [ "android.animation.ValueAnimator" ]
  }, {
    "name" : "public boolean canReverse()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reverse()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean pulseAnimationFrame(long frameTime)",
    "returnType" : "boolean",
    "comment" : " Pulse an animation frame into the animation.",
    "links" : [ ]
  }, {
    "name" : " void startWithoutPulsing(boolean inReverse)",
    "returnType" : "void",
    "comment" : "\n     * Internal use only.\n     * This call starts the animation in regular or reverse direction without requiring them to\n     * register frame callbacks. The caller will be responsible for all the subsequent animation\n     * pulses. Specifically, the caller needs to call doAnimationFrame(...) for the animation on\n     * every frame.\n     *\n     * @param inReverse whether the animation should play in reverse direction\n     ",
    "links" : [ ]
  }, {
    "name" : " void skipToEndValue(boolean inReverse)",
    "returnType" : "void",
    "comment" : "\n     * Internal use only.\n     * Skips the animation value to end/start, depending on whether the play direction is forward\n     * or backward.\n     *\n     * @param inReverse whether the end value is based on a reverse direction. If yes, this is\n     *                  equivalent to skip to start value in a forward playing direction.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "\n     * Internal use only.\n     *\n     * Returns whether the animation has start/end values setup. For most of the animations, this\n     * should always be true. For ObjectAnimators, the start values are setup in the initialization\n     * of the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : " void animateValuesInRange(long currentPlayTime, long lastPlayTime)",
    "returnType" : "void",
    "comment" : "\n     * Internal use only. Changes the value of the animator as if currentPlayTime has passed since\n     * the start of the animation. Therefore, currentPlayTime includes the start delay, and any\n     * repetition. lastPlayTime is similar and is used to calculate how many repeats have been\n     * done between the two times.\n     ",
    "links" : [ ]
  }, {
    "name" : " void animateSkipToEnds(long currentPlayTime, long lastPlayTime)",
    "returnType" : "void",
    "comment" : "\n     * Internal use only. This animates any animation that has ended since lastPlayTime.\n     * If an animation hasn't been finished, no change will be made.\n     ",
    "links" : [ ]
  }, {
    "name" : " void getStartAndEndTimes(LongArray times, long offset)",
    "returnType" : "void",
    "comment" : "\n     * Internal use only. Adds all start times (after delay) to and end times to times.\n     * The value must include offset.\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyListeners(AnimatorCaller<AnimatorListener, Animator> notification, boolean isReverse)",
    "returnType" : "void",
    "comment" : "\n     * Calls notification for each AnimatorListener.\n     *\n     * @param notification The notification method to call on each listener.\n     * @param isReverse When this is used with start/end, this is the isReverse parameter. For\n     *                  other calls, this is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyPauseListeners(AnimatorCaller<AnimatorPauseListener, Animator> notification)",
    "returnType" : "void",
    "comment" : "\n     * Call pause/resume on each AnimatorPauseListener.\n     *\n     * @param notification Either ON_PAUSE or ON_RESUME to call onPause or onResume on each\n     *                     listener.\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyStartListeners(boolean isReversing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyEndListeners(boolean isReversing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void callOnList(ArrayList<T> list, AnimatorCaller<T, A> call, A animator, boolean isReverse)",
    "returnType" : "void",
    "comment" : "\n     * Calls <code>call</code> for every item in <code>list</code> with <code>animator</code> and\n     * <code>isReverse</code> as parameters.\n     *\n     * @param list The list of items to make calls on.\n     * @param call The method to call for each item in list.\n     * @param animator The animator parameter of call.\n     * @param isReverse The isReverse parameter of call.\n     * @param <T> The item type of list\n     * @param <A> The Animator type of animator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowRunningAsynchronously(boolean mayRunAsync)",
    "returnType" : "void",
    "comment" : "\n     * <p>Whether or not the Animator is allowed to run asynchronously off of\n     * the UI thread. This is a hint that informs the Animator that it is\n     * OK to run the animation off-thread, however the Animator may decide\n     * that it must run the animation on the UI thread anyway.\n     *\n     * <p>Regardless of whether or not the animation runs asynchronously, all\n     * listener callbacks will be called on the UI thread.</p>\n     *\n     * <p>To be able to use this hint the following must be true:</p>\n     * <ol>\n     * <li>The animator is immutable while {@link #isStarted()} is true. Requests\n     *    to change duration, delay, etc... may be ignored.</li>\n     * <li>Lifecycle callback events may be asynchronous. Events such as\n     *    {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or\n     *    {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed\n     *    as they must be posted back to the UI thread, and any actions performed\n     *    by those callbacks (such as starting new animations) will not happen\n     *    in the same frame.</li>\n     * <li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)\n     *    may be asynchronous. It is guaranteed that all state changes that are\n     *    performed on the UI thread in the same frame will be applied as a single\n     *    atomic update, however that frame may be the current frame,\n     *    the next frame, or some future frame. This will also impact the observed\n     *    state of the Animator. For example, {@link #isStarted()} may still return true\n     *    after a call to {@link #end()}. Using the lifecycle callbacks is preferred over\n     *    queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}\n     *    for this reason.</li>\n     * </ol>\n     * @hide\n     ",
    "links" : [ "#isStarted()", "Animator.AnimatorListener#onAnimationRepeat(Animator)", "#isRunning()", "#end()", "Animator.AnimatorListener#onAnimationEnd(Animator)", "#isPaused()", "#cancel()", "#reverse()" ]
  } ],
  "methodNames" : [ "public static void setBackgroundPauseDelay(long value)", "public static long getBackgroundPauseDelay()", "public static void setAnimatorPausingEnabled(boolean enable)", "public void start()", "public void cancel()", "public void end()", "public void pause()", "public void resume()", "public boolean isPaused()", "public abstract long getStartDelay()", "public abstract void setStartDelay(long startDelay)", "public abstract Animator setDuration(long duration)", "public abstract long getDuration()", "public long getTotalDuration()", "public abstract void setInterpolator(TimeInterpolator value)", "public TimeInterpolator getInterpolator()", "public abstract boolean isRunning()", "public boolean isStarted()", "public void addListener(AnimatorListener listener)", "public void removeListener(AnimatorListener listener)", "public ArrayList<AnimatorListener> getListeners()", "public void addPauseListener(AnimatorPauseListener listener)", "public void removePauseListener(AnimatorPauseListener listener)", "public void removeAllListeners()", "public int getChangingConfigurations()", "public void setChangingConfigurations(@Config int configs)", "public void appendChangingConfigurations(@Config int configs)", "public ConstantState<Animator> createConstantState()", "public Animator clone()", "public void setupStartValues()", "public void setupEndValues()", "public void setTarget(@Nullable Object target)", "public boolean canReverse()", "public void reverse()", " boolean pulseAnimationFrame(long frameTime)", " void startWithoutPulsing(boolean inReverse)", " void skipToEndValue(boolean inReverse)", " boolean isInitialized()", " void animateValuesInRange(long currentPlayTime, long lastPlayTime)", " void animateSkipToEnds(long currentPlayTime, long lastPlayTime)", " void getStartAndEndTimes(LongArray times, long offset)", " void notifyListeners(AnimatorCaller<AnimatorListener, Animator> notification, boolean isReverse)", " void notifyPauseListeners(AnimatorCaller<AnimatorPauseListener, Animator> notification)", " void notifyStartListeners(boolean isReversing)", " void notifyEndListeners(boolean isReversing)", " void callOnList(ArrayList<T> list, AnimatorCaller<T, A> call, A animator, boolean isReverse)", "public void setAllowRunningAsynchronously(boolean mayRunAsync)" ],
  "variableNames" : [ "DURATION_INFINITE", "mListeners", "mPauseListeners", "mPaused", "mChangingConfigurations", "mConstantState", "sBackgroundPauseDelay", "mCachedList", "mStartListenersCalled" ]
}