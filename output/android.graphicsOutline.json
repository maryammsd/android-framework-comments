{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Outline.java",
  "packageName" : "android.graphics",
  "className" : "Outline",
  "comment" : "\n * Defines a simple shape, used for bounding graphical regions.\n * <p>\n * Can be computed for a View, or computed by a Drawable, to drive the shape of\n * shadows cast by a View, or to clip the contents of the View.\n *\n * @see android.view.ViewOutlineProvider\n * @see android.view.View#setOutlineProvider(android.view.ViewOutlineProvider)\n * @see Drawable#getOutline(Outline)\n ",
  "variables" : [ {
    "name" : "RADIUS_UNDEFINED",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_EMPTY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_ROUND_RECT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MODE_PATH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "Path",
    "comment" : "\n     * Only guaranteed to be non-null when mode == MODE_PATH\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mRect",
    "type" : "Rect",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mRadius",
    "type" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setEmpty()",
    "returnType" : "void",
    "comment" : "\n     * Sets the outline to be empty.\n     *\n     * @see #isEmpty()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the Outline is empty.\n     * <p>\n     * Outlines are empty when constructed, or if {@link #setEmpty()} is called,\n     * until a setter method is called\n     *\n     * @see #setEmpty()\n     ",
    "links" : [ "#setEmpty" ]
  }, {
    "name" : "public boolean canClip()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the outline can be used to clip a View.\n     * <p>\n     * Currently, only Outlines that can be represented as a rectangle, circle,\n     * or round rect support clipping.\n     *\n     * @see android.view.View#setClipToOutline(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(@FloatRange(from = 0.0, to = 1.0) float alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the alpha represented by the Outline - the degree to which the\n     * producer is guaranteed to be opaque over the Outline's shape.\n     * <p>\n     * An alpha value of <code>0.0f</code> either represents completely\n     * transparent content, or content that isn't guaranteed to fill the shape\n     * it publishes.\n     * <p>\n     * Content producing a fully opaque (alpha = <code>1.0f</code>) outline is\n     * assumed by the drawing system to fully cover content beneath it,\n     * meaning content beneath may be optimized away.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAlpha()",
    "returnType" : "float",
    "comment" : "\n     * Returns the alpha represented by the Outline.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull Outline src)",
    "returnType" : "void",
    "comment" : "\n     * Replace the contents of this Outline with the contents of src.\n     *\n     * @param src Source outline to copy from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRect(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Outline to the rounded rect defined by the input rect, and\n     * corner radius.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRect(@NonNull Rect rect)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link #setRect(int, int, int, int)}\n     ",
    "links" : [ "#setRect" ]
  }, {
    "name" : "public void setRoundRect(int left, int top, int right, int bottom, float radius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Outline to the rounded rect defined by the input rect, and corner radius.\n     * <p>\n     * Passing a zero radius is equivalent to calling {@link #setRect(int, int, int, int)}\n     ",
    "links" : [ "#setRect" ]
  }, {
    "name" : "public void setRoundRect(@NonNull Rect rect, float radius)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link #setRoundRect(int, int, int, int, float)}\n     ",
    "links" : [ "#setRoundRect" ]
  }, {
    "name" : "public boolean getRect(@NonNull Rect outRect)",
    "returnType" : "boolean",
    "comment" : "\n     * Populates {@code outBounds} with the outline bounds, if set, and returns\n     * {@code true}. If no outline bounds are set, or if a path has been set\n     * via {@link #setPath(Path)}, returns {@code false}.\n     *\n     * @param outRect the rect to populate with the outline bounds, if set\n     * @return {@code true} if {@code outBounds} was populated with outline\n     *         bounds, or {@code false} if no outline bounds are set\n     ",
    "links" : [ "#setPath" ]
  }, {
    "name" : "public float getRadius()",
    "returnType" : "float",
    "comment" : "\n     * Returns the rounded rect radius, if set, or a value less than 0 if a path has\n     * been set via {@link #setPath(Path)}. A return value of {@code 0}\n     * indicates a non-rounded rect.\n     *\n     * @return the rounded rect radius, or value < 0\n     ",
    "links" : [ "#setPath" ]
  }, {
    "name" : "public void setOval(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the outline to the oval defined by input rect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOval(@NonNull Rect rect)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for {@link #setOval(int, int, int, int)}\n     ",
    "links" : [ "#setOval" ]
  }, {
    "name" : "public void setConvexPath(@NonNull Path convexPath)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Outline to a\n     * {@link android.graphics.Path#isConvex() convex path}.\n     *\n     * @param convexPath used to construct the Outline. As of\n     * {@link android.os.Build.VERSION_CODES#Q}, it is no longer required to be\n     * convex.\n     *\n     * @deprecated As of {@link android.os.Build.VERSION_CODES#Q}, the restriction\n     * that the path must be convex is removed. However, the API is misnamed until\n     * {@link android.os.Build.VERSION_CODES#R}, when {@link #setPath} is\n     * introduced. Use {@link #setPath} instead.\n     ",
    "links" : [ "android.graphics.Path#isConvex", "android.os.Build.VERSION_CODES#Q", "android.os.Build.VERSION_CODES#Q", "android.os.Build.VERSION_CODES#R", "#setPath", "#setPath" ]
  }, {
    "name" : "public void setPath(@NonNull Path path)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Outline to a {@link android.graphics.Path path}.\n     *\n     * @param path used to construct the Outline.\n     ",
    "links" : [ "android.graphics.Path" ]
  }, {
    "name" : "public void offset(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Offsets the Outline by (dx,dy)\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "RADIUS_UNDEFINED", "MODE_EMPTY", "MODE_ROUND_RECT", "MODE_PATH", "mMode", "mPath", "mRect", "mRadius", "mAlpha" ],
  "methodNames" : [ "public void setEmpty()", "public boolean isEmpty()", "public boolean canClip()", "public void setAlpha(@FloatRange(from = 0.0, to = 1.0) float alpha)", "public float getAlpha()", "public void set(@NonNull Outline src)", "public void setRect(int left, int top, int right, int bottom)", "public void setRect(@NonNull Rect rect)", "public void setRoundRect(int left, int top, int right, int bottom, float radius)", "public void setRoundRect(@NonNull Rect rect, float radius)", "public boolean getRect(@NonNull Rect outRect)", "public float getRadius()", "public void setOval(int left, int top, int right, int bottom)", "public void setOval(@NonNull Rect rect)", "public void setConvexPath(@NonNull Path convexPath)", "public void setPath(@NonNull Path path)", "public void offset(int dx, int dy)" ]
}