{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/EventLog.java",
  "packageName" : "android.util",
  "className" : "EventLog",
  "comment" : "\n * Access to the system diagnostic event record.  System diagnostic events are\n * used to record certain system-level events (such as garbage collection,\n * activity manager state, system watchdogs, and other low level activity),\n * which may be automatically collected and analyzed during system development.\n *\n * <p>This is <b>not</b> the main \"logcat\" debugging log ({@link android.util.Log})!\n * These diagnostic events are for system integrators, not application authors.\n *\n * <p>Events use integer tag codes corresponding to /system/etc/event-log-tags.\n * They carry a payload of one or more int, long, or String values.  The\n * event-log-tags file defines the payload contents for each type code.\n ",
  "links" : [ "android.util.Log" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAGS_FILE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMMENT_PATTERN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_PATTERN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTagCodes",
    "type" : "HashMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTagNames",
    "type" : "HashMap<Integer, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native int writeEvent(int tag, int value)",
    "returnType" : "int",
    "comment" : "\n     * Record an event log message.\n     * @param tag The event type tag code\n     * @param value A value to log\n     * @return The number of bytes written\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int writeEvent(int tag, long value)",
    "returnType" : "int",
    "comment" : "\n     * Record an event log message.\n     * @param tag The event type tag code\n     * @param value A value to log\n     * @return The number of bytes written\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int writeEvent(int tag, float value)",
    "returnType" : "int",
    "comment" : "\n     * Record an event log message.\n     * @param tag The event type tag code\n     * @param value A value to log\n     * @return The number of bytes written\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int writeEvent(int tag, String str)",
    "returnType" : "int",
    "comment" : "\n     * Record an event log message.\n     * @param tag The event type tag code\n     * @param str A value to log\n     * @return The number of bytes written\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int writeEvent(int tag, Object... list)",
    "returnType" : "int",
    "comment" : "\n     * Record an event log message.\n     * @param tag The event type tag code\n     * @param list A list of values to log\n     * @return The number of bytes written\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void readEvents(int[] tags, Collection<Event> output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Read events from the log, filtered by type.\n     * @param tags to search for\n     * @param output container to add events into\n     * @throws IOException if something goes wrong reading events\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void readEventsOnWrapping(int[] tags, long timestamp, Collection<Event> output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Read events from the log, filtered by type, blocking until logs are about to be overwritten.\n     * @param tags to search for\n     * @param timestamp timestamp allow logs before this time to be overwritten.\n     * @param output container to add events into\n     * @throws IOException if something goes wrong reading events\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getTagName(int tag)",
    "returnType" : "String",
    "comment" : "\n     * Get the name associated with an event type tag code.\n     * @param tag code to look up\n     * @return the name of the tag, or null if no tag has that number\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTagCode(String name)",
    "returnType" : "int",
    "comment" : "\n     * Get the event type tag code associated with an event name.\n     * @param name of event to look up\n     * @return the tag code, or -1 if no tag has that name\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized void readTagsFile()",
    "returnType" : "void",
    "comment" : "\n     * Read TAGS_FILE, populating sTagCodes and sTagNames, if not already done.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void registerTagLocked(int num, String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static synchronized void readTagsFile$ravenwood()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static native int writeEvent(int tag, int value)", "public static native int writeEvent(int tag, long value)", "public static native int writeEvent(int tag, float value)", "public static native int writeEvent(int tag, String str)", "public static native int writeEvent(int tag, Object... list)", "public static native void readEvents(int[] tags, Collection<Event> output) throws IOException", "public static native void readEventsOnWrapping(int[] tags, long timestamp, Collection<Event> output) throws IOException", "public static String getTagName(int tag)", "public static int getTagCode(String name)", "private static synchronized void readTagsFile()", "private static void registerTagLocked(int num, String name)", "private static synchronized void readTagsFile$ravenwood()" ],
  "variableNames" : [ "TAG", "TAGS_FILE", "COMMENT_PATTERN", "TAG_PATTERN", "sTagCodes", "sTagNames" ]
}