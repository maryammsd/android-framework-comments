{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/AccessNetworkUtils.java",
  "packageName" : "android.telephony",
  "className" : "AccessNetworkUtils",
  "comment" : "\n * Utilities to map between radio constants.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INVALID_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_FREQUENCY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JAPAN_ISO_COUNTRY_CODE",
    "type" : "String",
    "comment" : " ISO country code of Japan. ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_KHZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_LOW_KHZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_MID_KHZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FREQUENCY_RANGE_HIGH_KHZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UARFCN_NOT_GENERAL_BAND",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getDuplexModeForEutranBand(int band)",
    "returnType" : "int",
    "comment" : "\n     * Gets the duplex mode for the given EUTRAN operating band.\n     *\n     * <p>See 3GPP 36.101 sec 5.5-1 for calculation\n     *\n     * @param band The EUTRAN band number\n     * @return The duplex mode of the given EUTRAN band\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getOperatingBandForEarfcn(int earfcn)",
    "returnType" : "int",
    "comment" : "\n     * Gets the EUTRAN Operating band for a given downlink EARFCN.\n     *\n     * <p>See 3GPP TS 36.101 clause 5.7.3-1 for calculation.\n     *\n     * @param earfcn The downlink EARFCN\n     * @return Operating band number, or {@link #INVALID_BAND} if no corresponding band exists\n     ",
    "links" : [ "#INVALID_BAND" ]
  }, {
    "name" : "public static int getOperatingBandForNrarfcn(int nrarfcn)",
    "returnType" : "int",
    "comment" : "\n     * Gets the NR Operating band for a given downlink NRARFCN.\n     *\n     * <p>See 3GPP TS 38.104 Table 5.2-1 NR operating bands in FR1 and\n     * Table 5.2-2 NR operating bands in FR2\n     *\n     * @param nrarfcn The downlink NRARFCN\n     * @return Operating band number, or {@link #INVALID_BAND} if no corresponding band exists\n     ",
    "links" : [ "#INVALID_BAND" ]
  }, {
    "name" : "public static int getOperatingBandForArfcn(int arfcn)",
    "returnType" : "int",
    "comment" : "\n     * Gets the GERAN Operating band for a given ARFCN.\n     *\n     * <p>See 3GPP TS 45.005 clause 2 for calculation.\n     *\n     * @param arfcn The ARFCN\n     * @return Operating band number, or {@link #INVALID_BAND} if no corresponding band exists\n     ",
    "links" : [ "#INVALID_BAND" ]
  }, {
    "name" : "public static int getOperatingBandForUarfcn(int uarfcn)",
    "returnType" : "int",
    "comment" : "\n     * Gets the UTRAN Operating band for a given downlink UARFCN.\n     *\n     * <p>See 3GPP TS 25.101 clause 5.4.4 for calculation.\n     *\n     * @param uarfcn The downlink UARFCN\n     * @return Operating band number, or {@link #INVALID_BAND} if no corresponding band exists\n     ",
    "links" : [ "#INVALID_BAND" ]
  }, {
    "name" : "public static int getFrequencyRangeGroupFromGeranBand(@GeranBand.GeranBands int band)",
    "returnType" : "int",
    "comment" : "\n     * Get geran bands from {@link PhysicalChannelConfig#getBand()}\n     ",
    "links" : [ "android.telephony.PhysicalChannelConfig#getBand()" ]
  }, {
    "name" : "public static int getFrequencyRangeGroupFromUtranBand(@UtranBand.UtranBands int band)",
    "returnType" : "int",
    "comment" : "\n     * Get utran bands from {@link PhysicalChannelConfig#getBand()}\n     ",
    "links" : [ "android.telephony.PhysicalChannelConfig#getBand()" ]
  }, {
    "name" : "public static int getFrequencyRangeGroupFromEutranBand(@EutranBand.EutranBands int band)",
    "returnType" : "int",
    "comment" : "\n     * Get eutran bands from {@link PhysicalChannelConfig#getBand()}\n     * 3GPP TS 36.101 Table 5.5 EUTRA operating bands\n     ",
    "links" : [ "android.telephony.PhysicalChannelConfig#getBand()" ]
  }, {
    "name" : "public static int getFrequencyRangeGroupFromNrBand(@NgranBands.NgranBand int band)",
    "returnType" : "int",
    "comment" : "\n     * Get ngran band from {@link PhysicalChannelConfig#getBand()}\n     * 3GPP TS 38.104 Table 5.2-1 NR operating bands in FR1\n     * 3GPP TS 38.104 Table 5.2-2 NR operating bands in FR2\n     ",
    "links" : [ "android.telephony.PhysicalChannelConfig#getBand()" ]
  }, {
    "name" : "public static int getFrequencyFromNrArfcn(int nrArfcn)",
    "returnType" : "int",
    "comment" : "\n     * 3GPP TS 38.104 Table 5.4.2.1-1 NR-ARFCN parameters for the global frequency raster.\n     * Formula of NR-ARFCN convert to actual frequency:\n     * Actual frequency(kHz) = (RANGE_OFFSET + GLOBAL_KHZ * (ARFCN - ARFCN_OFFSET))\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getFrequencyFromEarfcn(int band, int earfcn, boolean isUplink)",
    "returnType" : "int",
    "comment" : "\n     * Get actual frequency from E-UTRA ARFCN.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertEarfcnToFrequency(int low, int earfcn, int offset)",
    "returnType" : "int",
    "comment" : "\n     * 3GPP TS 36.101 Table 5.7.3-1 E-UTRA channel numbers.\n     * Formula of E-UTRA ARFCN convert to actual frequency:\n     * Actual frequency(kHz) = (DOWNLINK_LOW + 0.1 * (ARFCN - DOWNLINK_OFFSET)) * FREQUENCY_KHZ\n     * Actual frequency(kHz) = (UPLINK_LOW + 0.1 * (ARFCN - UPLINK_OFFSET)) * FREQUENCY_KHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isInEarfcnRange(int earfcn, EutranBandArfcnFrequency earfcnFrequency, boolean isUplink)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getFrequencyFromUarfcn(int band, int uarfcn, boolean isUplink)",
    "returnType" : "int",
    "comment" : "\n     * Get actual frequency from UTRA ARFCN.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertUarfcnToFrequency(int offsetKhz, int uarfcn)",
    "returnType" : "int",
    "comment" : "\n     * 3GPP TS 25.101, Table 5.1 UARFCN definition (general).\n     * Formula of UTRA ARFCN convert to actual frequency:\n     * For general bands:\n     * Downlink actual frequency(kHz) = (DOWNLINK_OFFSET + 0.2 * ARFCN) * FREQUENCY_KHZ\n     * Uplink actual frequency(kHz) = (UPLINK_OFFSET + 0.2 * ARFCN) * FREQUENCY_KHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertUarfcnTddToFrequency(int band, int uarfcn)",
    "returnType" : "int",
    "comment" : "\n     * 3GPP TS 25.102, Table 5.2 UTRA Absolute Radio Frequency Channel Number 1.28 Mcps TDD Option.\n     * For FDD bands A, B, C, E, F:\n     * Actual frequency(kHz) =  5 * ARFCN * FREQUENCY_KHZ\n     * For TDD bands D:\n     * Actual frequency(kHz) =  (5 * (ARFCN - 2150.1MHz)) * FREQUENCY_KHZ\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isInUarfcnRange(int uarfcn, UtranBandArfcnFrequency uarfcnFrequency, boolean isUplink)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getFrequencyFromArfcn(int band, int arfcn, boolean isUplink)",
    "returnType" : "int",
    "comment" : "\n     * Get actual frequency from GERAN ARFCN.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertArfcnToFrequency(int arfcn, int uplinkFrequencyFirstKhz, int arfcnOffset)",
    "returnType" : "int",
    "comment" : "\n     * 3GPP TS 45.005 Table 2-1 Dynamically mapped ARFCN\n     * Formula of Geran ARFCN convert to actual frequency:\n     * Uplink actual frequency(kHz) =\n     *      (UPLINK_FREQUENCY_FIRST + 0.2 * (ARFCN - ARFCN_RANGE_FIRST)) * FREQUENCY_KHZ\n     * Downlink actual frequency(kHz) = Uplink actual frequency + 10\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getFrequencyRangeFromArfcn(int frequency)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getDuplexModeForEutranBand(int band)", "public static int getOperatingBandForEarfcn(int earfcn)", "public static int getOperatingBandForNrarfcn(int nrarfcn)", "public static int getOperatingBandForArfcn(int arfcn)", "public static int getOperatingBandForUarfcn(int uarfcn)", "public static int getFrequencyRangeGroupFromGeranBand(@GeranBand.GeranBands int band)", "public static int getFrequencyRangeGroupFromUtranBand(@UtranBand.UtranBands int band)", "public static int getFrequencyRangeGroupFromEutranBand(@EutranBand.EutranBands int band)", "public static int getFrequencyRangeGroupFromNrBand(@NgranBands.NgranBand int band)", "public static int getFrequencyFromNrArfcn(int nrArfcn)", "public static int getFrequencyFromEarfcn(int band, int earfcn, boolean isUplink)", "private static int convertEarfcnToFrequency(int low, int earfcn, int offset)", "private static boolean isInEarfcnRange(int earfcn, EutranBandArfcnFrequency earfcnFrequency, boolean isUplink)", "public static int getFrequencyFromUarfcn(int band, int uarfcn, boolean isUplink)", "private static int convertUarfcnToFrequency(int offsetKhz, int uarfcn)", "private static int convertUarfcnTddToFrequency(int band, int uarfcn)", "private static boolean isInUarfcnRange(int uarfcn, UtranBandArfcnFrequency uarfcnFrequency, boolean isUplink)", "public static int getFrequencyFromArfcn(int band, int arfcn, boolean isUplink)", "private static int convertArfcnToFrequency(int arfcn, int uplinkFrequencyFirstKhz, int arfcnOffset)", "public static int getFrequencyRangeFromArfcn(int frequency)" ],
  "variableNames" : [ "INVALID_BAND", "INVALID_FREQUENCY", "JAPAN_ISO_COUNTRY_CODE", "TAG", "FREQUENCY_KHZ", "FREQUENCY_RANGE_LOW_KHZ", "FREQUENCY_RANGE_MID_KHZ", "FREQUENCY_RANGE_HIGH_KHZ", "UARFCN_NOT_GENERAL_BAND" ]
}