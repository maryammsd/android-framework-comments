{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/controls/ControlsProviderService.java",
  "packageName" : "android.service.controls",
  "className" : "ControlsProviderService",
  "comment" : "\n * Service implementation allowing applications to contribute controls to the\n * System UI.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SERVICE_CONTROLS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_DATA_PANEL_ACTIVITY",
    "type" : "String",
    "comment" : "\n     * Manifest metadata to show a custom embedded activity as part of device controls.\n     *\n     * The value of this metadata must be the {@link ComponentName} as a string of an activity in\n     * the same package that will be launched embedded in the device controls space.\n     *\n     * The activity must be exported, enabled and protected by\n     * {@link Manifest.permission#BIND_CONTROLS}.\n     *\n     * It is recommended that the activity is declared {@code android:resizeableActivity=\"true\"}.\n     ",
    "links" : [ "android.content.ComponentName", "Manifest.permission#BIND_CONTROLS" ]
  }, {
    "name" : "EXTRA_LOCKSCREEN_ALLOW_TRIVIAL_CONTROLS",
    "type" : "String",
    "comment" : "\n     * Boolean extra containing the value of the setting allowing actions on a locked device.\n     *\n     * This corresponds to the setting that indicates whether the user has\n     * consented to allow actions on devices that declare {@link Control#isAuthRequired()} as\n     * {@code false} when the device is locked.\n     *\n     * This is passed with the intent when the panel specified by {@link #META_DATA_PANEL_ACTIVITY}\n     * is launched.\n     ",
    "links" : [ "android.service.controls.Control#isAuthRequired()", "#META_DATA_PANEL_ACTIVITY" ]
  }, {
    "name" : "CONTROLS_SURFACE_ACTIVITY_PANEL",
    "type" : "int",
    "comment" : "\n     * Controls are being shown on the device controls activity panel.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTROLS_SURFACE_DREAM",
    "type" : "int",
    "comment" : "\n     * Controls are being shown as a dream, while the device is idle.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONTROLS_SURFACE",
    "type" : "String",
    "comment" : "\n     * Integer extra whose value specifies the surface which controls are being displayed on.\n     * <p>\n     * The possible values are:\n     * <ul>\n     * <li>{@link #CONTROLS_SURFACE_ACTIVITY_PANEL}\n     * <li>{@link #CONTROLS_SURFACE_DREAM}\n     * </ul>\n     *\n     * This is passed with the intent when the panel specified by {@link #META_DATA_PANEL_ACTIVITY}\n     * is launched.\n     ",
    "links" : [ "#CONTROLS_SURFACE_ACTIVITY_PANEL", "#CONTROLS_SURFACE_DREAM", "#META_DATA_PANEL_ACTIVITY" ]
  }, {
    "name" : "ACTION_ADD_CONTROL",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONTROL",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_BUNDLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_TOKEN",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "RequestHandler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract Publisher<Control> createPublisherForAllAvailable()",
    "returnType" : "Publisher<Control>",
    "comment" : "\n     * Publisher for all available controls\n     *\n     * Retrieve all available controls. Use the stateless builder {@link Control.StatelessBuilder}\n     * to build each Control. Call {@link Subscriber#onComplete} when done loading all unique\n     * controls, or {@link Subscriber#onError} for error scenarios. Duplicate Controls will\n     * replace the original.\n     ",
    "links" : [ "java.util.concurrent.Flow.Subscriber#onError", "java.util.concurrent.Flow.Subscriber#onComplete", "Control.StatelessBuilder" ]
  }, {
    "name" : "public Publisher<Control> createPublisherForSuggested()",
    "returnType" : "Publisher<Control>",
    "comment" : "\n     * (Optional) Publisher for suggested controls\n     *\n     * The service may be asked to provide a small number of recommended controls, in\n     * order to suggest some controls to the user for favoriting. The controls shall be built using\n     * the stateless builder {@link Control.StatelessBuilder}. The total number of controls\n     * requested through {@link Subscription#request} will be restricted to a maximum. Within this\n     * larger limit, only 6 controls per structure will be loaded. Therefore, it is advisable to\n     * seed multiple structures if they exist. Any control sent over this limit  will be discarded.\n     * Call {@link Subscriber#onComplete} when done, or {@link Subscriber#onError} for error\n     * scenarios.\n     ",
    "links" : [ "java.util.concurrent.Flow.Subscriber#onError", "java.util.concurrent.Flow.Subscription#request", "java.util.concurrent.Flow.Subscriber#onComplete", "Control.StatelessBuilder" ]
  }, {
    "name" : "public abstract Publisher<Control> createPublisherFor(@NonNull List<String> controlIds)",
    "returnType" : "Publisher<Control>",
    "comment" : "\n     * Return a valid Publisher for the given controlIds. This publisher will be asked to provide\n     * updates for the given list of controlIds as long as the {@link Subscription} is valid.\n     * Calls to {@link Subscriber#onComplete} will not be expected. Instead, wait for the call from\n     * {@link Subscription#cancel} to indicate that updates are no longer required. It is expected\n     * that controls provided by this publisher were created using {@link Control.StatefulBuilder}.\n     *\n     * By default, all controls require the device to be unlocked in order for the user to interact\n     * with it. This can be modified per Control by {@link Control.StatefulBuilder#setAuthRequired}.\n     ",
    "links" : [ "Control.StatefulBuilder", "java.util.concurrent.Flow.Subscription", "java.util.concurrent.Flow.Subscription#cancel", "java.util.concurrent.Flow.Subscriber#onComplete", "Control.StatefulBuilder#setAuthRequired" ]
  }, {
    "name" : "public abstract void performControlAction(@NonNull String controlId, @NonNull ControlAction action, @NonNull Consumer<Integer> consumer)",
    "returnType" : "void",
    "comment" : "\n     * The user has interacted with a Control. The action is dictated by the type of\n     * {@link ControlAction} that was sent. A response can be sent via\n     * {@link Consumer#accept}, with the Integer argument being one of the provided\n     * {@link ControlAction} response results. The Integer should indicate whether the action\n     * was received successfully, or if additional prompts should be presented to\n     * the user. Any visual control updates should be sent via the Publisher.\n\n     * By default, all invocations of this method will require the device be unlocked. This can\n     * be modified per Control by {@link Control.StatefulBuilder#setAuthRequired}.\n     ",
    "links" : [ "java.util.function.Consumer#accept", "Control.StatefulBuilder#setAuthRequired", "android.service.controls.actions.ControlAction" ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean onUnbind(@NonNull Intent intent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isStatelessControl(Control control)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void requestAddControl(@NonNull Context context, @NonNull ComponentName componentName, @NonNull Control control)",
    "returnType" : "void",
    "comment" : "\n     * Request SystemUI to prompt the user to add a control to favorites.\n     * <br>\n     * SystemUI may not honor this request in some cases, for example if the requested\n     * {@link Control} is already a favorite, or the requesting package is not currently in the\n     * foreground.\n     *\n     * @param context A context\n     * @param componentName Component name of the {@link ControlsProviderService}\n     * @param control A stateless control to show to the user\n     ",
    "links" : [ "android.service.controls.ControlsProviderService", "android.service.controls.Control" ]
  } ],
  "methodNames" : [ "public abstract Publisher<Control> createPublisherForAllAvailable()", "public Publisher<Control> createPublisherForSuggested()", "public abstract Publisher<Control> createPublisherFor(@NonNull List<String> controlIds)", "public abstract void performControlAction(@NonNull String controlId, @NonNull ControlAction action, @NonNull Consumer<Integer> consumer)", "public final IBinder onBind(@NonNull Intent intent)", "public final boolean onUnbind(@NonNull Intent intent)", "private static boolean isStatelessControl(Control control)", "public static void requestAddControl(@NonNull Context context, @NonNull ComponentName componentName, @NonNull Control control)" ],
  "variableNames" : [ "SERVICE_CONTROLS", "META_DATA_PANEL_ACTIVITY", "EXTRA_LOCKSCREEN_ALLOW_TRIVIAL_CONTROLS", "CONTROLS_SURFACE_ACTIVITY_PANEL", "CONTROLS_SURFACE_DREAM", "EXTRA_CONTROLS_SURFACE", "ACTION_ADD_CONTROL", "EXTRA_CONTROL", "CALLBACK_BUNDLE", "CALLBACK_TOKEN", "TAG", "mToken", "mHandler" ]
}