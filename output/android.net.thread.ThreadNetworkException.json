{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/thread/ThreadNetworkException.java",
  "packageName" : "android.net.thread",
  "className" : "ThreadNetworkException",
  "comment" : "\n * Represents a Thread network specific failure.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ERROR_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * The operation failed because some invariants expected by the underlying system have been\n     * broken. This error code is reserved for serious errors. The caller can do nothing to recover\n     * from this error. A bugreport should be created and sent to the Android community if this\n     * error is ever returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_ABORTED",
    "type" : "int",
    "comment" : "\n     * The operation failed because concurrent operations are overriding this one. Retrying an\n     * aborted operation has the risk of aborting another ongoing operation again. So the caller\n     * should retry at a higher level where it knows there won't be race conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * The operation failed because a deadline expired before the operation could complete. This may\n     * be caused by connectivity unavailability and the caller can retry the same operation when the\n     * connectivity issue is fixed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The operation failed because the service is currently unavailable and that this is most\n     * likely a transient condition. The caller can recover from this error by retrying with a\n     * back-off scheme. Note that it is not always safe to retry non-idempotent operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BUSY",
    "type" : "int",
    "comment" : "\n     * The operation failed because this device is currently busy processing concurrent requests.\n     * The caller may recover from this error when the current operations has been finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FAILED_PRECONDITION",
    "type" : "int",
    "comment" : "\n     * The operation failed because required preconditions were not satisfied. For example, trying\n     * to schedule a network migration when this device is not attached will receive this error or\n     * enable Thread while User Resitration has disabled it. The caller should not retry the same\n     * operation before the precondition is satisfied.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSUPPORTED_CHANNEL",
    "type" : "int",
    "comment" : "\n     * The operation was rejected because the specified channel is currently not supported by this\n     * device in this country. For example, trying to join or migrate to a network with channel\n     * which is not supported. The caller should should change the channel or return an error to the\n     * user if the channel cannot be changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_REJECTED_BY_PEER",
    "type" : "int",
    "comment" : "\n     * The operation failed because a request is rejected by the peer device. This happens because\n     * the peer device is not capable of processing the request, or a request from another device\n     * has already been accepted by the peer device. The caller may not be able to recover from this\n     * error by retrying the same operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RESPONSE_BAD_FORMAT",
    "type" : "int",
    "comment" : "\n     * The operation failed because the received response is malformed. This is typically because\n     * the peer device is misbehaving. The caller may only recover from this error by retrying with\n     * a different peer device.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RESOURCE_EXHAUSTED",
    "type" : "int",
    "comment" : "\n     * The operation failed because some resource has been exhausted. For example, no enough\n     * allocated memory buffers, or maximum number of supported operations has been exceeded. The\n     * caller may retry and recover from this error when the resource has been freed.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The operation failed because of an unknown error in the system. This typically indicates that\n     * the caller doesn't understand error codes added in newer Android versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_THREAD_DISABLED",
    "type" : "int",
    "comment" : "\n     * The operation failed because the Thread radio is disabled by {@link\n     * ThreadNetworkController#setEnabled}, airplane mode or device admin. The caller should retry\n     * only after Thread is enabled.\n     ",
    "links" : [ "android.net.thread.ThreadNetworkController#setEnabled" ]
  }, {
    "name" : "ERROR_UNSUPPORTED_OPERATION",
    "type" : "int",
    "comment" : "\n     * The operation failed because it is not supported by the platform. For example, some platforms\n     * may not support setting the target power of each channel. The caller should not retry and may\n     * return an error to the user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getErrorCode()",
    "returnType" : "int",
    "comment" : " Returns the error code. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getErrorCode()" ],
  "variableNames" : [ "ERROR_INTERNAL_ERROR", "ERROR_ABORTED", "ERROR_TIMEOUT", "ERROR_UNAVAILABLE", "ERROR_BUSY", "ERROR_FAILED_PRECONDITION", "ERROR_UNSUPPORTED_CHANNEL", "ERROR_REJECTED_BY_PEER", "ERROR_RESPONSE_BAD_FORMAT", "ERROR_RESOURCE_EXHAUSTED", "ERROR_UNKNOWN", "ERROR_THREAD_DISABLED", "ERROR_UNSUPPORTED_OPERATION", "ERROR_MIN", "ERROR_MAX", "mErrorCode" ]
}