{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/CalendarContract.java",
  "packageName" : "android.provider",
  "className" : "CalendarContract",
  "comment" : "\n * <p>\n * The contract between the calendar provider and applications. Contains\n * definitions for the supported URIs and data columns.\n * </p>\n * <h3>Overview</h3>\n * <p>\n * CalendarContract defines the data model of calendar and event related\n * information. This data is stored in a number of tables:\n * </p>\n * <ul>\n * <li>The {@link Calendars} table holds the calendar specific information. Each\n * row in this table contains the details for a single calendar, such as the\n * name, color, sync info, etc.</li>\n * <li>The {@link Events} table holds the event specific information. Each row\n * in this table has the info for a single event. It contains information such\n * as event title, location, start time, end time, etc. The event can occur\n * one-time or can recur multiple times. Attendees, reminders, and extended\n * properties are stored on separate tables and reference the {@link Events#_ID}\n * to link them with the event.</li>\n * <li>The {@link Instances} table holds the start and end time for occurrences\n * of an event. Each row in this table represents a single occurrence. For\n * one-time events there will be a 1:1 mapping of instances to events. For\n * recurring events, multiple rows will automatically be generated which\n * correspond to multiple occurrences of that event.</li>\n * <li>The {@link Attendees} table holds the event attendee or guest\n * information. Each row represents a single guest of an event. It specifies the\n * type of guest they are and their attendance response for the event.</li>\n * <li>The {@link Reminders} table holds the alert/notification data. Each row\n * represents a single alert for an event. An event can have multiple reminders.\n * The number of reminders per event is specified in\n * {@link Calendars#MAX_REMINDERS} which is set by the Sync Adapter that owns\n * the given calendar. Reminders are specified in minutes before the event and\n * have a type.</li>\n * <li>The {@link ExtendedProperties} table holds opaque data fields used by the\n * sync adapter. The provider takes no action with items in this table except to\n * delete them when their related events are deleted.</li>\n * </ul>\n * <p>\n * Other tables include:\n * </p>\n * <ul>\n * <li>\n * {@link SyncState}, which contains free-form data maintained by the sync\n * adapters</li>\n * </ul>\n *\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_EVENT_REMINDER",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: This is the intent that gets fired when an alarm\n     * notification needs to be posted for a reminder.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_HANDLE_CUSTOM_EVENT",
    "type" : "String",
    "comment" : "\n     * Activity Action: Display the event to the user in the custom app as\n     * specified in {@link EventsColumns#CUSTOM_APP_PACKAGE}. The custom app\n     * will be started via {@link Activity#startActivityForResult(Intent, int)}\n     * and it should call {@link Activity#setResult(int)} with\n     * {@link Activity#RESULT_OK} or {@link Activity#RESULT_CANCELED} to\n     * acknowledge whether the action was handled or not.\n     *\n     * The custom app should have an intent filter like the following:\n     * <pre>\n     * &lt;intent-filter&gt;\n     *    &lt;action android:name=\"android.provider.calendar.action.HANDLE_CUSTOM_EVENT\" /&gt;\n     *    &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n     *    &lt;data android:mimeType=\"vnd.android.cursor.item/event\" /&gt;\n     * &lt;/intent-filter&gt;</pre>\n     * <p>\n     * Input: {@link Intent#getData} has the event URI. The extra\n     * {@link #EXTRA_EVENT_BEGIN_TIME} has the start time of the instance. The\n     * extra {@link #EXTRA_CUSTOM_APP_URI} will have the\n     * {@link EventsColumns#CUSTOM_APP_URI}.\n     * <p>\n     * Output: {@link Activity#RESULT_OK} if this was handled; otherwise\n     * {@link Activity#RESULT_CANCELED}.\n     ",
    "links" : [ "android.app.Activity#RESULT_CANCELED", "#EXTRA_CUSTOM_APP_URI", "android.app.Activity#setResult(int)", "android.app.Activity#RESULT_OK", "android.app.Activity#startActivityForResult(Intent", "#CUSTOM_APP_PACKAGE", "android.app.PendingIntent#getData", "#EXTRA_EVENT_BEGIN_TIME", "#CUSTOM_APP_URI" ]
  }, {
    "name" : "ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT",
    "type" : "String",
    "comment" : "\n     * Action used to help apps show calendar events in the managed profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CUSTOM_APP_URI",
    "type" : "String",
    "comment" : "\n     * Intent Extras key: {@link EventsColumns#CUSTOM_APP_URI} for the event in\n     * the {@link #ACTION_HANDLE_CUSTOM_EVENT} intent\n     ",
    "links" : [ "#ACTION_HANDLE_CUSTOM_EVENT", "#CUSTOM_APP_URI" ]
  }, {
    "name" : "EXTRA_EVENT_BEGIN_TIME",
    "type" : "String",
    "comment" : "\n     * Intent Extras key: The start time of an event or an instance of a\n     * recurring event. (milliseconds since epoch)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_EVENT_END_TIME",
    "type" : "String",
    "comment" : "\n     * Intent Extras key: The end time of an event or an instance of a recurring\n     * event. (milliseconds since epoch)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_EVENT_ALL_DAY",
    "type" : "String",
    "comment" : "\n     * Intent Extras key: When creating an event, set this to true to create an\n     * all-day event by default\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_EVENT_ID",
    "type" : "String",
    "comment" : "\n     * Intent Extras key: An extra of type {@code long} holding the id of an event.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTHORITY",
    "type" : "String",
    "comment" : "\n     * This authority is used for writing to or querying from the calendar\n     * provider. Note: This is set at first run and cannot be changed without\n     * breaking apps that access the provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n     * The content:// style URL for the top-level calendar authority\n     ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n     * The content:// style URL for the top-level cross-profile calendar uris.\n     * {@link android.database.ContentObserver} for this URL in the primary profile will be\n     * notified when there is a change in the managed profile calendar provider.\n     *\n     * <p>Throw UnsupportedOperationException if another profile doesn't exist or is disabled, or\n     * if the calling package is not whitelisted to access cross-profile calendar, or if the\n     * feature has been disabled by the user in Settings.\n     *\n     * @see Events#ENTERPRISE_CONTENT_URI\n     * @see Calendars#ENTERPRISE_CONTENT_URI\n     * @see Instances#ENTERPRISE_CONTENT_URI\n     * @see Instances#ENTERPRISE_CONTENT_BY_DAY_URI\n     * @see Instances#ENTERPRISE_CONTENT_SEARCH_URI\n     * @see Instances#ENTERPRISE_CONTENT_SEARCH_BY_DAY_URI\n     * @hide\n     ",
    "links" : [ "android.database.ContentObserver" ]
  }, {
    "name" : "CALLER_IS_SYNCADAPTER",
    "type" : "String",
    "comment" : "\n     * An optional insert, update or delete URI parameter that allows the caller\n     * to specify that it is a sync adapter. The default value is false. If set\n     * to true, the modified row is not marked as \"dirty\" (needs to be synced)\n     * and when the provider calls\n     * {@link ContentResolver#notifyChange(android.net.Uri, android.database.ContentObserver, boolean)}\n     * , the third parameter \"syncToNetwork\" is set to false. Furthermore, if\n     * set to true, the caller must also include\n     * {@link Calendars#ACCOUNT_NAME} and {@link Calendars#ACCOUNT_TYPE} as\n     * query parameters.\n     *\n     * @see Uri.Builder#appendQueryParameter(java.lang.String, java.lang.String)\n     ",
    "links" : [ "android.content.ContentResolver#notifyChange(android.net.Uri", "#ACCOUNT_NAME", "#ACCOUNT_TYPE" ]
  }, {
    "name" : "ACCOUNT_TYPE_LOCAL",
    "type" : "String",
    "comment" : "\n     * A special account type for calendars not associated with any account.\n     * Normally calendars that do not match an account on the device will be\n     * removed. Setting the account_type on a calendar to this will prevent it\n     * from being wiped if it does not match an existing account.\n     *\n     * @see SyncColumns#ACCOUNT_TYPE\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean startViewCalendarEventInManagedProfile(@NonNull Context context, long eventId, long startMs, long endMs, boolean allDay, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts an activity to view calendar events in the managed profile.\n     *\n     * When this API is called, the system will attempt to start an activity\n     * in the managed profile with an intent targeting the same caller package.\n     * The intent will have its action set to\n     * {@link CalendarContract#ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT} and contain extras\n     * corresponding to the API's arguments. A calendar app intending to support\n     * cross-profile events viewing should handle this intent, parse the arguments\n     * and show the appropriate UI.\n     *\n     * @param context the context.\n     * @param eventId the id of the event to be viewed. Will be put into {@link #EXTRA_EVENT_ID}\n     *                field of the intent.\n     * @param startMs the start time of the event in milliseconds since epoch.\n     *                Will be put into {@link #EXTRA_EVENT_BEGIN_TIME} field of the intent.\n     * @param endMs the end time of the event in milliseconds since epoch.\n     *              Will be put into {@link #EXTRA_EVENT_END_TIME} field of the intent.\n     * @param allDay if the event is an all-day event. Will be put into\n     *               {@link #EXTRA_EVENT_ALL_DAY} field of the intent.\n     * @param flags flags to be set on the intent via {@link Intent#setFlags}\n     * @return {@code true} if the activity is started successfully. {@code false} otherwise.\n     *\n     * @see #EXTRA_EVENT_ID\n     * @see #EXTRA_EVENT_BEGIN_TIME\n     * @see #EXTRA_EVENT_END_TIME\n     * @see #EXTRA_EVENT_ALL_DAY\n     ",
    "links" : [ "android.provider.CalendarContract#ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT", "android.app.PendingIntent#setFlags", "#EXTRA_EVENT_ID", "#EXTRA_EVENT_ALL_DAY", "#EXTRA_EVENT_BEGIN_TIME", "#EXTRA_EVENT_END_TIME" ]
  } ],
  "variableNames" : [ "TAG", "ACTION_EVENT_REMINDER", "ACTION_HANDLE_CUSTOM_EVENT", "ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT", "EXTRA_CUSTOM_APP_URI", "EXTRA_EVENT_BEGIN_TIME", "EXTRA_EVENT_END_TIME", "EXTRA_EVENT_ALL_DAY", "EXTRA_EVENT_ID", "AUTHORITY", "CONTENT_URI", "ENTERPRISE_CONTENT_URI", "CALLER_IS_SYNCADAPTER", "ACCOUNT_TYPE_LOCAL" ],
  "methodNames" : [ "public static boolean startViewCalendarEventInManagedProfile(@NonNull Context context, long eventId, long startMs, long endMs, boolean allDay, int flags)" ]
}