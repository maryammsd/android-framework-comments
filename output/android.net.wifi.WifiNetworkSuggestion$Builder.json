{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiNetworkSuggestion.java",
  "packageName" : "android.net.wifi",
  "className" : "Builder",
  "comment" : "\n     * Builder used to create {@link WifiNetworkSuggestion} objects.\n     ",
  "links" : [ "android.net.wifi.WifiNetworkSuggestion" ],
  "variables" : [ {
    "name" : "UNASSIGNED_PRIORITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WPA3_ENTERPRISE_AUTO",
    "type" : "int",
    "comment" : "\n         * Set WPA Enterprise type according to certificate security level.\n         * This is for backward compatibility in R.\n         ",
    "links" : [ ]
  }, {
    "name" : "WPA3_ENTERPRISE_STANDARD",
    "type" : "int",
    "comment" : " Set WPA Enterprise type to standard mode only. ",
    "links" : [ ]
  }, {
    "name" : "WPA3_ENTERPRISE_192_BIT",
    "type" : "int",
    "comment" : " Set WPA Enterprise type to 192 bit mode only. ",
    "links" : [ ]
  }, {
    "name" : "mWifiSsid",
    "type" : "WifiSsid",
    "comment" : "\n         * SSID of the network.\n         ",
    "links" : [ ]
  }, {
    "name" : "mBssid",
    "type" : "MacAddress",
    "comment" : "\n         * Optional BSSID within the network.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsEnhancedOpen",
    "type" : "boolean",
    "comment" : "\n         * Whether this is an OWE network or not.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa2PskPassphrase",
    "type" : "String",
    "comment" : "\n         * Pre-shared key for use with WPA-PSK networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa3SaePassphrase",
    "type" : "String",
    "comment" : "\n         * Pre-shared key for use with WPA3-SAE networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa2EnterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n         * The enterprise configuration details specifying the EAP method,\n         * certificates and other settings associated with the WPA/WPA2-Enterprise networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa3EnterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n         * The enterprise configuration details specifying the EAP method,\n         * certificates and other settings associated with the WPA3-Enterprise networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWpa3EnterpriseType",
    "type" : "int",
    "comment" : "\n         * Indicate what type this WPA3-Enterprise network is.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPasspointConfiguration",
    "type" : "PasspointConfiguration",
    "comment" : "\n         * The passpoint config for use with Hotspot 2.0 network\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsHiddenSSID",
    "type" : "boolean",
    "comment" : "\n         * This is a network that does not broadcast its SSID, so an\n         * SSID-specific probe request must be used for scans.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsAppInteractionRequired",
    "type" : "boolean",
    "comment" : "\n         * Whether app needs to log in to captive portal to obtain Internet access.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsUserInteractionRequired",
    "type" : "boolean",
    "comment" : "\n         * Whether user needs to log in to captive portal to obtain Internet access.\n         ",
    "links" : [ ]
  }, {
    "name" : "mMeteredOverride",
    "type" : "int",
    "comment" : "\n         * Whether this network is metered or not.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "\n         * Priority of this network among other network suggestions from same priority group\n         * provided by the app.\n         * The higher the number, the higher the priority (i.e value of 0 = lowest priority).\n         ",
    "links" : [ ]
  }, {
    "name" : "mPriorityGroup",
    "type" : "int",
    "comment" : "\n         * Priority group ID, while suggestion priority will only effect inside the priority group.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCarrierId",
    "type" : "int",
    "comment" : "\n         * The carrier ID identifies the operator who provides this network configuration.\n         *    see {@link TelephonyManager#getSimCarrierId()}\n         ",
    "links" : [ "android.telephony.TelephonyManager#getSimCarrierId()" ]
  }, {
    "name" : "mSubscriptionId",
    "type" : "int",
    "comment" : "\n         * The Subscription ID identifies the SIM card for which this network configuration is\n         * valid.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsSharedWithUser",
    "type" : "boolean",
    "comment" : "\n         * Whether this network is shared credential with user to allow user manually connect.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsSharedWithUserSet",
    "type" : "boolean",
    "comment" : "\n         * Whether the setCredentialSharedWithUser have been called.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsInitialAutojoinEnabled",
    "type" : "boolean",
    "comment" : "\n         * Whether this network is initialized with auto-join enabled (the default) or not.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWapiPskPassphrase",
    "type" : "String",
    "comment" : "\n         * Pre-shared key for use with WAPI-PSK networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mWapiEnterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n         * The enterprise configuration details specifying the EAP method,\n         * certificates and other settings associated with the WAPI networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsNetworkUntrusted",
    "type" : "boolean",
    "comment" : "\n         * Whether this network will be brought up as untrusted (TRUSTED capability bit removed).\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsNetworkOemPaid",
    "type" : "boolean",
    "comment" : "\n         * Whether this network will be brought up as OEM paid (OEM_PAID capability bit added).\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsNetworkOemPrivate",
    "type" : "boolean",
    "comment" : "\n         * Whether this network will be brought up as OEM private (OEM_PRIVATE capability bit\n         * added).\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsCarrierMerged",
    "type" : "boolean",
    "comment" : "\n         * Whether this network is a carrier merged network.\n         ",
    "links" : [ ]
  }, {
    "name" : "mMacRandomizationSetting",
    "type" : "int",
    "comment" : "\n         * The MAC randomization strategy.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSaeH2eOnlyMode",
    "type" : "boolean",
    "comment" : "\n         * The SAE Hash-to-Element only mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsNetworkRestricted",
    "type" : "boolean",
    "comment" : "\n         * Whether this network will be brought up as restricted\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsWifi7Enabled",
    "type" : "boolean",
    "comment" : "\n         * Whether enable Wi-Fi 7 for this network\n         ",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionGroup",
    "type" : "ParcelUuid",
    "comment" : "\n         * The Subscription group UUID identifies the SIM cards for which this network configuration\n         * is valid.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSsid(@NonNull String ssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the unicode SSID for the network.\n         * <p>\n         * <li>Overrides any previous value set using {@link #setSsid(String)}.</li>\n         *\n         * <p>\n         * Note: use {@link #setWifiSsid(WifiSsid)} which supports both unicode and non-unicode\n         * SSID.\n         *\n         * @param ssid The SSID of the network. It must be valid Unicode.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the SSID is not valid unicode.\n         ",
    "links" : [ "#setSsid(String)", "#setWifiSsid(WifiSsid)", "Builder" ]
  }, {
    "name" : "public Builder setWifiSsid(@NonNull WifiSsid wifiSsid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the SSID for the network. {@link WifiSsid} support both unicode and non-unicode SSID.\n         * <p>\n         * <li>Overrides any previous value set using {@link #setWifiSsid(WifiSsid)}\n         * or {@link #setSsid(String)}.</li>\n         * <p>\n         * Note: this method is the superset of the {@link #setSsid(String)}\n         *\n         * @param wifiSsid The SSID of the network, in {@link WifiSsid} format.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the wifiSsid is invalid.\n         ",
    "links" : [ "#setSsid(String)", "android.net.wifi.WifiSsid", "#setWifiSsid(WifiSsid)", "Builder" ]
  }, {
    "name" : "public Builder setBssid(@NonNull MacAddress bssid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the BSSID to use for filtering networks from scan results. Will only match network\n         * whose BSSID is identical to the specified value.\n         * <p>\n         * <li Sets a specific BSSID for the network suggestion. If set, only the specified BSSID\n         * with the specified SSID will be considered for connection.\n         * <li>If set, only the specified BSSID with the specified SSID will be considered for\n         * connection.</li>\n         * <li>If not set, all BSSIDs with the specified SSID will be considered for connection.\n         * </li>\n         * <li>Overrides any previous value set using {@link #setBssid(MacAddress)}.</li>\n         *\n         * @param bssid BSSID of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "#setBssid(MacAddress)" ]
  }, {
    "name" : "public Builder setIsEnhancedOpen(boolean isEnhancedOpen)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether this represents an Enhanced Open (OWE) network.\n         *\n         * @param isEnhancedOpen {@code true} to indicate that the network used enhanced open,\n         *                       {@code false} otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWpa2Passphrase(@NonNull String passphrase)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ASCII WPA2 passphrase for this network. Needed for authenticating to\n         * WPA2-PSK networks.\n         *\n         * @param passphrase passphrase of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the passphrase is not ASCII encodable.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWpa3Passphrase(@NonNull String passphrase)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ASCII WPA3 passphrase for this network. Needed for authenticating to WPA3-SAE\n         * networks.\n         *\n         * @param passphrase passphrase of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the passphrase is not ASCII encodable.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWpa2EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA2 enterprise networks. See {@link WifiEnterpriseConfig} for description.\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException If configuration uses server certificate but validation\n         *                                  is not enabled. See {@link WifiEnterpriseConfig#isServerCertValidationEnabled()}\n         ",
    "links" : [ "android.net.wifi.WifiEnterpriseConfig#isServerCertValidationEnabled()", "Builder", "android.net.wifi.WifiEnterpriseConfig" ]
  }, {
    "name" : "public Builder setWpa3EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA3-Enterprise networks (standard and 192-bit security). See\n         * {@link WifiEnterpriseConfig} for description. For 192-bit security networks, both the\n         * client and CA certificates must be provided, and must be of type of either\n         * sha384WithRSAEncryption (OID 1.2.840.113549.1.1.12) or ecdsa-with-SHA384\n         * (OID 1.2.840.10045.4.3.3).\n         *\n         * @deprecated use {@link #setWpa3EnterpriseStandardModeConfig(WifiEnterpriseConfig)} or\n         * {@link #setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)} to specify\n         * WPA3-Enterprise type explicitly.\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException If configuration uses server certificate but validation\n         *                                  is not enabled. See {@link WifiEnterpriseConfig#isServerCertValidationEnabled()}\n         ",
    "links" : [ "android.net.wifi.WifiEnterpriseConfig#isServerCertValidationEnabled()", "#setWpa3EnterpriseStandardModeConfig(WifiEnterpriseConfig)", "Builder", "android.net.wifi.WifiEnterpriseConfig", "#setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)" ]
  }, {
    "name" : "public Builder setWpa3EnterpriseStandardModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA3-Enterprise standard networks. See {@link WifiEnterpriseConfig} for description.\n         * For WPA3-Enterprise in 192-bit security mode networks,\n         * see {@link #setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)} for description.\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException If configuration uses server certificate but validation\n         *                                  is not enabled. See {@link WifiEnterpriseConfig#isServerCertValidationEnabled()}\n         ",
    "links" : [ "android.net.wifi.WifiEnterpriseConfig#isServerCertValidationEnabled()", "Builder", "android.net.wifi.WifiEnterpriseConfig", "#setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)" ]
  }, {
    "name" : "public Builder setWpa3Enterprise192BitModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WPA3-Enterprise in 192-bit security mode networks. See {@link WifiEnterpriseConfig}\n         * for description. Both the client and CA certificates must be provided,\n         * and must be of type of either sha384WithRSAEncryption with key length of 3072bit or\n         * more (OID 1.2.840.113549.1.1.12), or ecdsa-with-SHA384 with key length of 384bit or\n         * more (OID 1.2.840.10045.4.3.3).\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the EAP type or certificates do not\n         *                                  meet 192-bit mode requirements.\n         ",
    "links" : [ "Builder", "android.net.wifi.WifiEnterpriseConfig" ]
  }, {
    "name" : "public Builder setPasspointConfig(@NonNull PasspointConfiguration passpointConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated Passpoint configuration for this network. Needed for authenticating\n         * to Hotspot 2.0 networks. See {@link PasspointConfiguration} for description.\n         *\n         * @param passpointConfig Instance of {@link PasspointConfiguration}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if passpoint configuration is invalid.\n         ",
    "links" : [ "Builder", "android.net.wifi.hotspot2.PasspointConfiguration" ]
  }, {
    "name" : "public Builder setCarrierId(int carrierId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the carrier ID of the network operator. The carrier ID associates a Suggested\n         * network with a specific carrier (and therefore SIM). The carrier ID must be provided\n         * for any network which uses the SIM-based authentication: e.g. EAP-SIM, EAP-AKA,\n         * EAP-AKA', and EAP-PEAP with SIM-based phase 2 authentication.\n         * @param carrierId see {@link TelephonyManager#getSimCarrierId()}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         *\n         * @hide\n         ",
    "links" : [ "android.telephony.TelephonyManager#getSimCarrierId()", "Builder" ]
  }, {
    "name" : "public Builder setSubscriptionId(int subscriptionId)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the suggestion to only be used with the SIM identified by the subscription\n         * ID specified in this method. The suggested network will only be used by that SIM and\n         * no other SIM - even from the same carrier.\n         * <p>\n         * The caller is restricted to be either of:\n         * <li>A carrier provisioning app (which holds the\n         * {@code android.Manifest.permission#NETWORK_CARRIER_PROVISIONING} permission).\n         * <li>A carrier-privileged app - which is restricted to only specify a subscription ID\n         * which belong to the same carrier which signed the app, see\n         * {@link TelephonyManager#hasCarrierPrivileges()}.\n         * <p>\n         * Specifying a subscription ID which doesn't match these restriction will cause the\n         * suggestion to be rejected with the error code\n         * {@link WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED}.\n         *\n         * Only one of the {@link #setSubscriptionGroup(ParcelUuid)} and\n         * {@link #setSubscriptionId(int)} should be called for a suggestion.\n         *\n         * @param subscriptionId subscription ID see {@link SubscriptionInfo#getSubscriptionId()}\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if subscriptionId equals to {@link SubscriptionManager#INVALID_SUBSCRIPTION_ID}\n         ",
    "links" : [ "#setSubscriptionGroup(ParcelUuid)", "Builder", "android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID", "android.net.wifi.WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED", "#setSubscriptionId(int)", "android.telephony.TelephonyManager#hasCarrierPrivileges()", "android.telephony.SubscriptionInfo#getSubscriptionId()" ]
  }, {
    "name" : "public Builder setSubscriptionGroup(@NonNull ParcelUuid groupUuid)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the suggestion to only be used with the SIMs that belong to the Subscription\n         * Group specified in this method. The suggested network will only be used by the SIM in\n         * this Subscription Group and no other SIMs - even from the same carrier.\n         * <p>\n         * The caller is restricted to be either of:\n         * <li>A carrier provisioning app.\n         * <li>A carrier-privileged app - which is restricted to only specify a subscription ID\n         * which belong to the same carrier which signed the app, see\n         * {@link TelephonyManager#hasCarrierPrivileges()}.\n         * <p>\n         * Specifying a subscription group which doesn't match these restriction will cause the\n         * suggestion to be rejected with the error code\n         * {@link WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED}.\n         *\n         * Only one of the {@link #setSubscriptionGroup(ParcelUuid)} and\n         * {@link #setSubscriptionId(int)} should be called for a suggestion.\n         *\n         * @param groupUuid Subscription group UUID see\n         * {@link SubscriptionManager#createSubscriptionGroup(List)}\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if group UUID is {@code null}.\n         ",
    "links" : [ "android.telephony.SubscriptionManager#createSubscriptionGroup(List)", "#setSubscriptionGroup(ParcelUuid)", "Builder", "android.net.wifi.WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED", "#setSubscriptionId(int)", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "public Builder setPriorityGroup(@IntRange(from = 0) int priorityGroup)",
    "returnType" : "Builder",
    "comment" : "\n         * Suggested networks are considered as part of a pool of all suggested networks and other\n         * networks (e.g. saved networks) - one of which will be selected.\n         * <ul>\n         * <li> Any app can suggest any number of networks. </li>\n         * <li> Priority: only the highest priority (0 being the lowest) currently visible suggested\n         * network or networks (multiple suggested networks may have the same priority) are added to\n         * the network selection pool.</li>\n         * </ul>\n         * <p>\n         * However, this restricts a suggesting app to have a single group of networks which can be\n         * prioritized. In some circumstances multiple groups are useful: for instance, suggesting\n         * networks for 2 different SIMs - each of which may have its own priority order.\n         * <p>\n         * Priority group: creates a separate priority group. Only the highest priority, currently\n         * visible suggested network or networks, within each priority group are included in the\n         * network selection pool.\n         * <p>\n         * Specify an arbitrary integer only used as the priority group. Use with\n         * {@link #setPriority(int)}.\n         *\n         * @param priorityGroup priority group id, if not set default is 0.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "#setPriority(int)", "Builder" ]
  }, {
    "name" : "public Builder setWapiPassphrase(@NonNull String passphrase)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ASCII WAPI passphrase for this network. Needed for authenticating to\n         * WAPI-PSK networks.\n         *\n         * @param passphrase passphrase of the network.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the passphrase is not ASCII encodable.\n         *\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setWapiEnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the associated enterprise configuration for this network. Needed for authenticating\n         * to WAPI-CERT networks. See {@link WifiEnterpriseConfig} for description.\n         *\n         * @param enterpriseConfig Instance of {@link WifiEnterpriseConfig}.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "android.net.wifi.WifiEnterpriseConfig" ]
  }, {
    "name" : "public Builder setIsHiddenSsid(boolean isHiddenSsid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether this represents a hidden network.\n         * <p>\n         * <li>If not set, defaults to false (i.e not a hidden network).</li>\n         *\n         * @param isHiddenSsid {@code true} to indicate that the network is hidden, {@code false}\n         *                     otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setMacRandomizationSetting(@MacRandomizationSetting int macRandomizationSetting)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the MAC randomization method.\n         * <p>\n         * Suggested networks will never use the device (factory) MAC address to associate to the\n         * network - instead they use a locally generated random MAC address. This method controls\n         * the strategy for generating the random MAC address. If not set, defaults to\n         * {@link #RANDOMIZATION_PERSISTENT}.\n         *\n         * @param macRandomizationSetting - one of {@code RANDOMIZATION_*} values\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "#RANDOMIZATION_PERSISTENT", "Builder" ]
  }, {
    "name" : "public Builder setIsAppInteractionRequired(boolean isAppInteractionRequired)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the app needs to log in to a captive portal to obtain Internet access.\n         * <p>\n         * This will dictate if the directed broadcast\n         * {@link WifiManager#ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION} will be sent to the\n         * app after successfully connecting to the network.\n         * Use this for captive portal type networks where the app needs to authenticate the user\n         * before the device can access the network.\n         * <p>\n         * <li>If not set, defaults to false (i.e no app interaction required).</li>\n         *\n         * @param isAppInteractionRequired {@code true} to indicate that app interaction is\n         *                                 required, {@code false} otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "android.net.wifi.WifiManager#ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION", "Builder" ]
  }, {
    "name" : "public Builder setIsUserInteractionRequired(boolean isUserInteractionRequired)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the user needs to log in to a captive portal to obtain Internet access.\n         * <p>\n         * <li>If not set, defaults to false (i.e no user interaction required).</li>\n         *\n         * @param isUserInteractionRequired {@code true} to indicate that user interaction is\n         *                                  required, {@code false} otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setPriority(@IntRange(from = 0) int priority)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify the priority of this network among other network suggestions provided by the same\n         * app and within the same priority group, see {@link #setPriorityGroup(int)}. Priorities\n         * have no impact on suggestions by other apps or suggestions from the same app using a\n         * different priority group. The higher the number, the higher the priority\n         * (i.e value of 0 = lowest priority). If not set, defaults to a lower priority than any\n         * assigned priority.\n         *\n         * @param priority Integer number representing the priority among suggestions by the app.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @throws IllegalArgumentException if the priority value is negative.\n         ",
    "links" : [ "Builder", "#setPriorityGroup(int)" ]
  }, {
    "name" : "public Builder setIsMetered(boolean isMetered)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether this network is metered.\n         * <p>\n         * <li>If not set, defaults to detect automatically.</li>\n         *\n         * @param isMetered {@code true} to indicate that the network is metered, {@code false}\n         *                  for not metered.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setCredentialSharedWithUser(boolean isShared)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the network credentials provided with this suggestion can be used by\n         * the user to explicitly (manually) connect to this network. If true this network will\n         * appear in the Wi-Fi Picker (in Settings) and the user will be able to select and connect\n         * to it with the provided credentials. If false, the user will need to enter network\n         * credentials and the resulting configuration will become a user saved network.\n         * <p>\n         * <li>Note: Only valid for secure (non-open) networks.\n         * <li>If not set, defaults to true (i.e. allow user to manually connect) for secure\n         * networks and false for open networks.</li>\n         *\n         * @param isShared {@code true} to indicate that the credentials may be used by the user to\n         *                              manually connect to the network, {@code false} otherwise.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setIsInitialAutojoinEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the suggestion is created with auto-join enabled or disabled. The\n         * user may modify the auto-join configuration of a suggestion directly once the device\n         * associates to the network.\n         * <p>\n         * If auto-join is initialized as disabled the user may still be able to manually connect\n         * to the network. Therefore, disabling auto-join only makes sense if\n         * {@link #setCredentialSharedWithUser(boolean)} is set to true (the default) which\n         * itself implies a secure (non-open) network.\n         * <p>\n         * If not set, defaults to true (i.e. auto-join is initialized as enabled).\n         *\n         * @param enabled true for initializing with auto-join enabled (the default), false to\n         *                initializing with auto-join disabled.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "#setCredentialSharedWithUser(boolean)" ]
  }, {
    "name" : "public Builder setUntrusted(boolean isUntrusted)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the system will bring up the network (if selected) as untrusted. An\n         * untrusted network has its {@link NetworkCapabilities#NET_CAPABILITY_TRUSTED}\n         * capability removed. The Wi-Fi network selection process may use this information to\n         * influence priority of the suggested network for Wi-Fi network selection (most likely to\n         * reduce it). The connectivity service may use this information to influence the overall\n         * network configuration of the device.\n         * <p>\n         * <li> These suggestions are only considered for network selection if a\n         * {@link NetworkRequest} without {@link NetworkCapabilities#NET_CAPABILITY_TRUSTED}\n         * capability is filed.\n         * <li> An untrusted network's credentials may not be shared with the user using\n         * {@link #setCredentialSharedWithUser(boolean)}.</li>\n         * <li> If not set, defaults to false (i.e. network is trusted).</li>\n         *\n         * @param isUntrusted Boolean indicating whether the network should be brought up untrusted\n         *                    (if true) or trusted (if false).\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "android.net.NetworkCapabilities#NET_CAPABILITY_TRUSTED", "#setCredentialSharedWithUser(boolean)", "android.net.NetworkRequest" ]
  }, {
    "name" : "public Builder setRestricted(boolean isRestricted)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the system will bring up the network (if selected) as restricted. A\n         * restricted network has its {@link NetworkCapabilities#NET_CAPABILITY_NOT_RESTRICTED}\n         * capability removed. The Wi-Fi network selection process may use this information to\n         * influence priority of the suggested network for Wi-Fi network selection (most likely to\n         * reduce it). The connectivity service may use this information to influence the overall\n         * network configuration of the device.\n         * <p>\n         * <li> These suggestions are only considered for network selection if a\n         * {@link NetworkRequest} without {@link NetworkCapabilities#NET_CAPABILITY_NOT_RESTRICTED}\n         * capability is filed.\n         * <li> A restricted network's credentials may not be shared with the user using\n         * {@link #setCredentialSharedWithUser(boolean)}.</li>\n         * <li> If not set, defaults to false (i.e. network is unrestricted).</li>\n         *\n         * @param isRestricted Boolean indicating whether the network should be brought up\n         *                     restricted (if true) or unrestricted (if false).\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_RESTRICTED", "Builder", "#setCredentialSharedWithUser(boolean)", "android.net.NetworkRequest" ]
  }, {
    "name" : "public Builder setWifi7Enabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether Wi-Fi 7 is enabled for this network.\n         *\n         * @param enabled Enable Wi-Fi 7 if true, otherwise disable Wi-Fi 7\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setOemPaid(boolean isOemPaid)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the system will bring up the network (if selected) as OEM paid. An\n         * OEM paid network has {@link NetworkCapabilities#NET_CAPABILITY_OEM_PAID} capability\n         * added.\n         * Note:\n         * <li>The connectivity service may use this information to influence the overall\n         * network configuration of the device. This network is typically only available to system\n         * apps.\n         * <li>On devices which do not support concurrent connection (indicated via\n         * {@link WifiManager#isStaConcurrencyForRestrictedConnectionsSupported()}), Wi-Fi\n         * network selection process may use this information to influence priority of the\n         * suggested network for Wi-Fi network selection (most likely to reduce it).\n         * <li>On devices which support concurrent connections (indicated via\n         * {@link WifiManager#isStaConcurrencyForRestrictedConnectionsSupported()}), these\n         * OEM paid networks may be brought up as a secondary concurrent connection (primary\n         * connection will be used for networks available to the user and all apps.\n         * <p>\n         * <li> An OEM paid network's credentials may not be shared with the user using\n         * {@link #setCredentialSharedWithUser(boolean)}.</li>\n         * <li> These suggestions are only considered for network selection if a\n         * {@link NetworkRequest} with {@link NetworkCapabilities#NET_CAPABILITY_OEM_PAID}\n         * capability is filed.\n         * <li> Each suggestion can have both {@link #setOemPaid(boolean)} and\n         * {@link #setOemPrivate(boolean)} set if the app wants these suggestions considered\n         * for creating either an OEM paid network or OEM private network determined based on\n         * the {@link NetworkRequest} that is active.\n         * <li> If not set, defaults to false (i.e. network is not OEM paid).</li>\n         *\n         * @param isOemPaid Boolean indicating whether the network should be brought up as OEM paid\n         *                  (if true) or not OEM paid (if false).\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @hide\n         ",
    "links" : [ "#setOemPaid(boolean)", "Builder", "#setCredentialSharedWithUser(boolean)", "android.net.wifi.WifiManager#isStaConcurrencyForRestrictedConnectionsSupported()", "android.net.NetworkRequest", "#setOemPrivate(boolean)", "android.net.NetworkCapabilities#NET_CAPABILITY_OEM_PAID" ]
  }, {
    "name" : "public Builder setOemPrivate(boolean isOemPrivate)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the system will bring up the network (if selected) as OEM private. An\n         * OEM private network has {@link NetworkCapabilities#NET_CAPABILITY_OEM_PRIVATE} capability\n         * added.\n         * Note:\n         * <li>The connectivity service may use this information to influence the overall\n         * network configuration of the device. This network is typically only available to system\n         * apps.\n         * <li>On devices which do not support concurrent connection (indicated via\n         * {@link WifiManager#isStaConcurrencyForRestrictedConnectionsSupported()}), Wi-Fi\n         * network selection process may use this information to influence priority of the suggested\n         * network for Wi-Fi network selection (most likely to reduce it).\n         * <li>On devices which support concurrent connections (indicated via\n         * {@link WifiManager#isStaConcurrencyForRestrictedConnectionsSupported()}), these OEM\n         * private networks may be brought up as a secondary concurrent connection (primary\n         * connection will be used for networks available to the user and all apps.\n         * <p>\n         * <li> An OEM private network's credentials may not be shared with the user using\n         * {@link #setCredentialSharedWithUser(boolean)}.</li>\n         * <li> These suggestions are only considered for network selection if a\n         * {@link NetworkRequest} with {@link NetworkCapabilities#NET_CAPABILITY_OEM_PRIVATE}\n         * capability is filed.\n         * <li> Each suggestion can have both {@link #setOemPaid(boolean)} and\n         * {@link #setOemPrivate(boolean)} set if the app wants these suggestions considered\n         * for creating either an OEM paid network or OEM private network determined based on\n         * the {@link NetworkRequest} that is active.\n         * <li> If not set, defaults to false (i.e. network is not OEM private).</li>\n         *\n         * @param isOemPrivate Boolean indicating whether the network should be brought up as OEM\n         *                     private (if true) or not OEM private (if false).\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         * @hide\n         ",
    "links" : [ "#setOemPaid(boolean)", "Builder", "android.net.NetworkCapabilities#NET_CAPABILITY_OEM_PRIVATE", "#setCredentialSharedWithUser(boolean)", "android.net.wifi.WifiManager#isStaConcurrencyForRestrictedConnectionsSupported()", "android.net.NetworkRequest", "#setOemPrivate(boolean)" ]
  }, {
    "name" : "public Builder setCarrierMerged(boolean isCarrierMerged)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the suggestion represents a carrier merged network. A carrier merged\n         * Wi-Fi network is treated as part of the mobile carrier network. Such configuration may\n         * impact the user interface and data usage accounting.\n         * <p>\n         * Only carriers with the\n         * {@link android.telephony.CarrierConfigManager#KEY_CARRIER_PROVISIONS_WIFI_MERGED_NETWORKS_BOOL}\n         * flag set to {@code true} may use this API.\n         * <p>\n         * <li>A suggestion marked as carrier merged must be metered enterprise network with a valid\n         * subscription Id set.\n         * @see #setIsMetered(boolean)\n         * @see #setSubscriptionId(int)\n         * @see #setWpa2EnterpriseConfig(WifiEnterpriseConfig)\n         * @see #setWpa3Enterprise192BitModeConfig(WifiEnterpriseConfig)\n         * @see #setWpa3EnterpriseStandardModeConfig(WifiEnterpriseConfig)\n         * @see #setPasspointConfig(PasspointConfiguration)\n         * </li>\n         * <li>If not set, defaults to false (i.e. not a carrier merged network.)</li>\n         * </p>\n         * @param isCarrierMerged Boolean indicating whether the network is treated a carrier\n         *                               merged network (if true) or non-merged network (if false);\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "Builder", "android.telephony.CarrierConfigManager#KEY_CARRIER_PROVISIONS_WIFI_MERGED_NETWORKS_BOOL" ]
  }, {
    "name" : "public Builder setIsWpa3SaeH2eOnlyModeEnabled(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the suggestion represents an SAE network which only\n         * accepts Hash-to-Element mode.\n         * If this is enabled, Hunting & Pecking mode is disabled and only Hash-to-Element\n         * mode is used for this network.\n         * This is only valid for an SAE network which is configured using the\n         * {@link #setWpa3Passphrase}.\n         * Before calling this API, the application should check Hash-to-Element support using\n         * {@link WifiManager#isWpa3SaeH2eSupported()}.\n         *\n         * @param enable Boolean indicating whether the network only accepts Hash-to-Element mode,\n         *        default is false.\n         * @return Instance of {@link Builder} to enable chaining of the builder method.\n         ",
    "links" : [ "android.net.wifi.WifiManager#isWpa3SaeH2eSupported()", "Builder", "#setWpa3Passphrase" ]
  }, {
    "name" : "private void setSecurityParamsInWifiConfiguration(@NonNull WifiConfiguration configuration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WifiConfiguration buildWifiConfiguration()",
    "returnType" : "WifiConfiguration",
    "comment" : "\n         * Helper method to build WifiConfiguration object from the builder.\n         * @return Instance of {@link WifiConfiguration}.\n         ",
    "links" : [ "android.net.wifi.WifiConfiguration" ]
  }, {
    "name" : "private void validateSecurityParams()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WifiConfiguration buildWifiConfigurationForPasspoint()",
    "returnType" : "WifiConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiNetworkSuggestion build()",
    "returnType" : "WifiNetworkSuggestion",
    "comment" : "\n         * Create a network suggestion object for use in\n         * {@link WifiManager#addNetworkSuggestions(List)}.\n         *\n         *<p class=\"note\">\n         * <b>Note:</b> Apps can set a combination of SSID using {@link #setSsid(String)} and BSSID\n         * using {@link #setBssid(MacAddress)} to provide more fine grained network suggestions to\n         * the platform.\n         * </p>\n         *\n         * For example:\n         * To provide credentials for one open, one WPA2, one WPA3 network with their\n         * corresponding SSID's and one with Passpoint config:\n         *\n         * <pre>{@code\n         * final WifiNetworkSuggestion suggestion1 =\n         *      new Builder()\n         *      .setSsid(\"test111111\")\n         *      .build();\n         * final WifiNetworkSuggestion suggestion2 =\n         *      new Builder()\n         *      .setSsid(\"test222222\")\n         *      .setWpa2Passphrase(\"test123456\")\n         *      .build();\n         * final WifiNetworkSuggestion suggestion3 =\n         *      new Builder()\n         *      .setSsid(\"test333333\")\n         *      .setWpa3Passphrase(\"test6789\")\n         *      .build();\n         * final PasspointConfiguration passpointConfig= new PasspointConfiguration();\n         * // configure passpointConfig to include a valid Passpoint configuration\n         * final WifiNetworkSuggestion suggestion4 =\n         *      new Builder()\n         *      .setPasspointConfig(passpointConfig)\n         *      .build();\n         * final List<WifiNetworkSuggestion> suggestionsList =\n         *      new ArrayList<WifiNetworkSuggestion> { {\n         *          add(suggestion1);\n         *          add(suggestion2);\n         *          add(suggestion3);\n         *          add(suggestion4);\n         *      } };\n         * final WifiManager wifiManager =\n         *      context.getSystemService(Context.WIFI_SERVICE);\n         * wifiManager.addNetworkSuggestions(suggestionsList);\n         * // ...\n         * }</pre>\n         *\n         * @return Instance of {@link WifiNetworkSuggestion}\n         * @throws IllegalStateException on invalid params set\n         * @see WifiNetworkSuggestion\n         ",
    "links" : [ "android.net.wifi.WifiManager#addNetworkSuggestions(List)", "#setSsid(String)", "android.net.wifi.WifiNetworkSuggestion", "#setBssid(MacAddress)" ]
  }, {
    "name" : "private boolean isEnterpriseSuggestion()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setSsid(@NonNull String ssid)", "public Builder setWifiSsid(@NonNull WifiSsid wifiSsid)", "public Builder setBssid(@NonNull MacAddress bssid)", "public Builder setIsEnhancedOpen(boolean isEnhancedOpen)", "public Builder setWpa2Passphrase(@NonNull String passphrase)", "public Builder setWpa3Passphrase(@NonNull String passphrase)", "public Builder setWpa2EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setWpa3EnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setWpa3EnterpriseStandardModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setWpa3Enterprise192BitModeConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setPasspointConfig(@NonNull PasspointConfiguration passpointConfig)", "public Builder setCarrierId(int carrierId)", "public Builder setSubscriptionId(int subscriptionId)", "public Builder setSubscriptionGroup(@NonNull ParcelUuid groupUuid)", "public Builder setPriorityGroup(@IntRange(from = 0) int priorityGroup)", "public Builder setWapiPassphrase(@NonNull String passphrase)", "public Builder setWapiEnterpriseConfig(@NonNull WifiEnterpriseConfig enterpriseConfig)", "public Builder setIsHiddenSsid(boolean isHiddenSsid)", "public Builder setMacRandomizationSetting(@MacRandomizationSetting int macRandomizationSetting)", "public Builder setIsAppInteractionRequired(boolean isAppInteractionRequired)", "public Builder setIsUserInteractionRequired(boolean isUserInteractionRequired)", "public Builder setPriority(@IntRange(from = 0) int priority)", "public Builder setIsMetered(boolean isMetered)", "public Builder setCredentialSharedWithUser(boolean isShared)", "public Builder setIsInitialAutojoinEnabled(boolean enabled)", "public Builder setUntrusted(boolean isUntrusted)", "public Builder setRestricted(boolean isRestricted)", "public Builder setWifi7Enabled(boolean enabled)", "public Builder setOemPaid(boolean isOemPaid)", "public Builder setOemPrivate(boolean isOemPrivate)", "public Builder setCarrierMerged(boolean isCarrierMerged)", "public Builder setIsWpa3SaeH2eOnlyModeEnabled(boolean enable)", "private void setSecurityParamsInWifiConfiguration(@NonNull WifiConfiguration configuration)", "private WifiConfiguration buildWifiConfiguration()", "private void validateSecurityParams()", "private WifiConfiguration buildWifiConfigurationForPasspoint()", "public WifiNetworkSuggestion build()", "private boolean isEnterpriseSuggestion()" ],
  "variableNames" : [ "UNASSIGNED_PRIORITY", "WPA3_ENTERPRISE_AUTO", "WPA3_ENTERPRISE_STANDARD", "WPA3_ENTERPRISE_192_BIT", "mWifiSsid", "mBssid", "mIsEnhancedOpen", "mWpa2PskPassphrase", "mWpa3SaePassphrase", "mWpa2EnterpriseConfig", "mWpa3EnterpriseConfig", "mWpa3EnterpriseType", "mPasspointConfiguration", "mIsHiddenSSID", "mIsAppInteractionRequired", "mIsUserInteractionRequired", "mMeteredOverride", "mPriority", "mPriorityGroup", "mCarrierId", "mSubscriptionId", "mIsSharedWithUser", "mIsSharedWithUserSet", "mIsInitialAutojoinEnabled", "mWapiPskPassphrase", "mWapiEnterpriseConfig", "mIsNetworkUntrusted", "mIsNetworkOemPaid", "mIsNetworkOemPrivate", "mIsCarrierMerged", "mMacRandomizationSetting", "mSaeH2eOnlyMode", "mIsNetworkRestricted", "mIsWifi7Enabled", "mSubscriptionGroup" ]
}