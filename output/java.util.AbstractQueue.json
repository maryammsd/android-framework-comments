{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/AbstractQueue.java",
  "packageName" : "java.util",
  "className" : "AbstractQueue",
  "comment" : "\n * This class provides skeletal implementations of some {@link Queue}\n * operations. The implementations in this class are appropriate when\n * the base implementation does <em>not</em> allow {@code null}\n * elements.  Methods {@link #add add}, {@link #remove remove}, and\n * {@link #element element} are based on {@link #offer offer}, {@link\n * #poll poll}, and {@link #peek peek}, respectively, but throw\n * exceptions instead of indicating failure via {@code false} or\n * {@code null} returns.\n *\n * <p>A {@code Queue} implementation that extends this class must\n * minimally define a method {@link Queue#offer} which does not permit\n * insertion of {@code null} elements, along with methods {@link\n * Queue#peek}, {@link Queue#poll}, {@link Collection#size}, and\n * {@link Collection#iterator}.  Typically, additional methods will be\n * overridden as well.  If these requirements cannot be met, consider\n * instead subclassing {@link AbstractCollection}.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "#remove", "#poll", "java.util.Queue#offer", "java.util.Collection#iterator", "#add", "java.util.Collection#size", "java.util.Queue#poll", "java.util.Queue#peek", "java.util.AbstractCollection", "#element", "java.util.Queue", "#offer", "#peek" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an {@code IllegalStateException}\n     * if no space is currently available.\n     *\n     * <p>This implementation returns {@code true} if {@code offer} succeeds,\n     * else throws an {@code IllegalStateException}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue.  This method differs\n     * from {@link #poll poll} only in that it throws an exception if this\n     * queue is empty.\n     *\n     * <p>This implementation returns the result of {@code poll}\n     * unless the queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     ",
    "links" : [ "#poll" ]
  }, {
    "name" : "public E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of this queue.  This method\n     * differs from {@link #peek peek} only in that it throws an exception if\n     * this queue is empty.\n     *\n     * <p>This implementation returns the result of {@code peek}\n     * unless the queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     ",
    "links" : [ "#peek" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this queue.\n     * The queue will be empty after this call returns.\n     *\n     * <p>This implementation repeatedly invokes {@link #poll poll} until it\n     * returns {@code null}.\n     ",
    "links" : [ "#poll" ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the elements in the specified collection to this\n     * queue.  Attempts to addAll of a queue to itself result in\n     * {@code IllegalArgumentException}. Further, the behavior of\n     * this operation is undefined if the specified collection is\n     * modified while the operation is in progress.\n     *\n     * <p>This implementation iterates over the specified collection,\n     * and adds each element returned by the iterator to this\n     * queue, in turn.  A runtime exception encountered while\n     * trying to add an element (including, in particular, a\n     * {@code null} element) may result in only some of the elements\n     * having been successfully added when the associated exception is\n     * thrown.\n     *\n     * @param c collection containing elements to be added to this queue\n     * @return {@code true} if this queue changed as a result of the call\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this queue\n     * @throws NullPointerException if the specified collection contains a\n     *         null element and this queue does not permit null elements,\n     *         or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this\n     *         queue, or if the specified collection is this queue\n     * @throws IllegalStateException if not all the elements can be added at\n     *         this time due to insertion restrictions\n     * @see #add(Object)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean add(E e)", "public E remove()", "public E element()", "public void clear()", "public boolean addAll(Collection<? extends E> c)" ],
  "variableNames" : [ ]
}