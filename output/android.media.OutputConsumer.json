{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaParser.java",
  "packageName" : "android.media",
  "className" : "OutputConsumer",
  "comment" : " Receives extracted media sample data and metadata from {@link MediaParser}. ",
  "links" : [ "android.media.MediaParser" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onSeekMapFound(@NonNull SeekMap seekMap)",
    "returnType" : "void",
    "comment" : "\n         * Called when a {@link SeekMap} has been extracted from the stream.\n         *\n         * <p>This method is called at least once before any samples are {@link #onSampleCompleted\n         * complete}. May be called multiple times after that in order to add {@link SeekPoint\n         * SeekPoints}.\n         *\n         * @param seekMap The extracted {@link SeekMap}.\n         ",
    "links" : [ "#onSampleCompletedcomplete", "SeekPointSeekPoints", "SeekMap" ]
  }, {
    "name" : " void onTrackCountFound(int numberOfTracks)",
    "returnType" : "void",
    "comment" : "\n         * Called when the number of tracks is found.\n         *\n         * @param numberOfTracks The number of tracks in the stream.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onTrackDataFound(int trackIndex, @NonNull TrackData trackData)",
    "returnType" : "void",
    "comment" : "\n         * Called when new {@link TrackData} is found in the stream.\n         *\n         * @param trackIndex The index of the track for which the {@link TrackData} was extracted.\n         * @param trackData The extracted {@link TrackData}.\n         ",
    "links" : [ "TrackData" ]
  }, {
    "name" : " void onSampleDataFound(int trackIndex, @NonNull InputReader inputReader) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Called when sample data is found in the stream.\n         *\n         * <p>If the invocation of this method returns before the entire {@code inputReader} {@link\n         * InputReader#getLength() length} is consumed, the method will be called again for the\n         * implementer to read the remaining data. Implementers should surface any thrown {@link\n         * IOException} caused by reading from {@code input}.\n         *\n         * @param trackIndex The index of the track to which the sample data corresponds.\n         * @param inputReader The {@link InputReader} from which to read the data.\n         * @throws IOException If an exception occurs while reading from {@code inputReader}.\n         ",
    "links" : [ "InputReader", "#getLength()", "java.io.IOException" ]
  }, {
    "name" : " void onSampleCompleted(int trackIndex, long timeMicros, @SampleFlags int flags, int size, int offset, @Nullable CryptoInfo cryptoInfo)",
    "returnType" : "void",
    "comment" : "\n         * Called once all the data of a sample has been passed to {@link #onSampleDataFound}.\n         *\n         * <p>Includes sample metadata, like presentation timestamp and flags.\n         *\n         * @param trackIndex The index of the track to which the sample corresponds.\n         * @param timeMicros The media timestamp associated with the sample, in microseconds.\n         * @param flags Flags associated with the sample. See the {@code SAMPLE_FLAG_*} constants.\n         * @param size The size of the sample data, in bytes.\n         * @param offset The number of bytes that have been consumed by {@code\n         *     onSampleDataFound(int, MediaParser.InputReader)} for the specified track, since the\n         *     last byte belonging to the sample whose metadata is being passed.\n         * @param cryptoInfo Encryption data required to decrypt the sample. May be null for\n         *     unencrypted samples. Implementors should treat any output {@link CryptoInfo}\n         *     instances as immutable. MediaParser will not modify any output {@code cryptoInfos}\n         *     and implementors should not modify them either.\n         ",
    "links" : [ "#onSampleDataFound", "android.media.MediaCodec.CryptoInfo" ]
  } ],
  "methodNames" : [ " void onSeekMapFound(@NonNull SeekMap seekMap)", " void onTrackCountFound(int numberOfTracks)", " void onTrackDataFound(int trackIndex, @NonNull TrackData trackData)", " void onSampleDataFound(int trackIndex, @NonNull InputReader inputReader) throws IOException", " void onSampleCompleted(int trackIndex, long timeMicros, @SampleFlags int flags, int size, int offset, @Nullable CryptoInfo cryptoInfo)" ],
  "variableNames" : [ ]
}