{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/BufferedOutputStream.java",
  "packageName" : "java.io",
  "className" : "BufferedOutputStream",
  "comment" : "\n * The class implements a buffered output stream. By setting up such\n * an output stream, an application can write bytes to the underlying\n * output stream without necessarily causing a call to the underlying\n * system for each byte written.\n *\n * @author  Arthur van Hoff\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * The internal buffer where data is stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * The number of valid bytes in the buffer. This value is always\n     * in the range {@code 0} through {@code buf.length}; elements\n     * {@code buf[0]} through {@code buf[count-1]} contain valid\n     * byte data.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void flushBuffer() throws IOException",
    "returnType" : "void",
    "comment" : " Flush the internal buffer ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte to this buffered output stream.\n     *\n     * @param      b   the byte to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code len} bytes from the specified byte array\n     * starting at offset {@code off} to this buffered output stream.\n     *\n     * <p> Ordinarily this method stores bytes from the given array into this\n     * stream's buffer, flushing the buffer to the underlying output stream as\n     * needed.  If the requested length is at least as large as this stream's\n     * buffer, however, then this method will flush the buffer and write the\n     * bytes directly to the underlying output stream.  Thus redundant\n     * {@code BufferedOutputStream}s will not copy data unnecessarily.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this buffered output stream. This forces any buffered\n     * output bytes to be written out to the underlying output stream.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void flushBuffer() throws IOException", "public synchronized void write(int b) throws IOException", "public synchronized void write(byte[] b, int off, int len) throws IOException", "public synchronized void flush() throws IOException" ],
  "variableNames" : [ "buf", "count" ]
}