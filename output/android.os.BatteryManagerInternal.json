{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryManagerInternal.java",
  "packageName" : "android.os",
  "className" : "BatteryManagerInternal",
  "comment" : "\n * Battery manager local system service interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract boolean isPowered(int plugTypeSet)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is plugged into any of the specified plug types.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPlugType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current plug type.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getBatteryLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns battery level as a percentage.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getBatteryHealth()",
    "returnType" : "int",
    "comment" : "\n     * Returns battery health status as an integer representing the current battery health constant.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getBatteryChargeCounter()",
    "returnType" : "int",
    "comment" : "\n     * Instantaneous battery capacity in uA-h, as defined in the HealthInfo HAL struct.\n     * Please note apparently it could be bigger than {@link #getBatteryFullCharge}.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     *\n     * @see android.hardware.health.V1_0.HealthInfo#batteryChargeCounter\n     ",
    "links" : [ "#getBatteryFullCharge" ]
  }, {
    "name" : "public abstract int getBatteryFullCharge()",
    "returnType" : "int",
    "comment" : "\n     * Battery charge value when it is considered to be \"full\" in uA-h , as defined in the\n     * HealthInfo HAL struct.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     *\n     * @see android.hardware.health.V1_0.HealthInfo#batteryFullCharge\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getBatteryLevelLow()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether we currently consider the battery level to be low.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerChargingPolicyChangeListener(@NonNull ChargingPolicyChangeListener chargingPolicyChangeListener)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener for changes to {@link BatteryManager#BATTERY_PROPERTY_CHARGING_POLICY}.\n     * The charging policy can't be added to the BATTERY_CHANGED intent because it requires\n     * the BATTERY_STATS permission.\n     ",
    "links" : [ "android.os.BatteryManager#BATTERY_PROPERTY_CHARGING_POLICY" ]
  }, {
    "name" : "public abstract int getChargingPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of {@link BatteryManager#BATTERY_PROPERTY_CHARGING_POLICY}.\n     * This will return {@link Integer#MIN_VALUE} if the device does not support the property.\n     *\n     * @see BatteryManager#getIntProperty(int)\n     ",
    "links" : [ "#MIN_VALUE", "android.os.BatteryManager#BATTERY_PROPERTY_CHARGING_POLICY" ]
  }, {
    "name" : "public abstract int getInvalidCharger()",
    "returnType" : "int",
    "comment" : "\n     * Returns a non-zero value if an unsupported charger is attached.\n     *\n     * This is a simple accessor that's safe to be called from any locks, but internally it may\n     * wait on the battery service lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setChargerAcOnline(boolean online, boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Sets battery AC charger to enabled/disabled, and freezes the battery state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBatteryLevel(int level, boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Sets battery level, and freezes the battery state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unplugBattery(boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Unplugs battery, and freezes the battery state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void resetBattery(boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Unfreezes battery state, returning to current hardware values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void suspendBatteryInput()",
    "returnType" : "void",
    "comment" : "\n     * Suspend charging even if plugged in.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract boolean isPowered(int plugTypeSet)", "public abstract int getPlugType()", "public abstract int getBatteryLevel()", "public abstract int getBatteryHealth()", "public abstract int getBatteryChargeCounter()", "public abstract int getBatteryFullCharge()", "public abstract boolean getBatteryLevelLow()", "public abstract void registerChargingPolicyChangeListener(@NonNull ChargingPolicyChangeListener chargingPolicyChangeListener)", "public abstract int getChargingPolicy()", "public abstract int getInvalidCharger()", "public abstract void setChargerAcOnline(boolean online, boolean forceUpdate)", "public abstract void setBatteryLevel(int level, boolean forceUpdate)", "public abstract void unplugBattery(boolean forceUpdate)", "public abstract void resetBattery(boolean forceUpdate)", "public abstract void suspendBatteryInput()" ],
  "variableNames" : [ ]
}