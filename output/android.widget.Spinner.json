{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/Spinner.java",
  "packageName" : "android.widget",
  "className" : "Spinner",
  "comment" : "\n * A view that displays one child at a time and lets the user pick among them.\n * The items in the Spinner come from the {@link Adapter} associated with\n * this view.\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/controls/spinner.html\">Spinners</a> guide.</p>\n *\n * @attr ref android.R.styleable#Spinner_dropDownSelector\n * @attr ref android.R.styleable#Spinner_dropDownWidth\n * @attr ref android.R.styleable#Spinner_gravity\n * @attr ref android.R.styleable#Spinner_popupBackground\n * @attr ref android.R.styleable#Spinner_prompt\n * @attr ref android.R.styleable#Spinner_spinnerMode\n * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n ",
  "links" : [ "android.widget.Adapter" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ITEMS_MEASURED",
    "type" : "int",
    "comment" : " Only measure this many items to get a decent max width.",
    "links" : [ ]
  }, {
    "name" : "MODE_DIALOG",
    "type" : "int",
    "comment" : "\n     * Use a dialog window for selecting spinner options.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DROPDOWN",
    "type" : "int",
    "comment" : "\n     * Use a dropdown anchored to the Spinner for selecting spinner options.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_THEME",
    "type" : "int",
    "comment" : "\n     * Use the theme-supplied value to select the dropdown mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupContext",
    "type" : "Context",
    "comment" : " Context used to inflate the popup window or dialog. ",
    "links" : [ ]
  }, {
    "name" : "mForwardingListener",
    "type" : "ForwardingListener",
    "comment" : " Forwarding listener used to implement drag-to-open. ",
    "links" : [ ]
  }, {
    "name" : "mTempAdapter",
    "type" : "SpinnerAdapter",
    "comment" : " Temporary holder for setAdapter() calls from the super constructor. ",
    "links" : [ ]
  }, {
    "name" : "mPopup",
    "type" : "SpinnerPopup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropDownWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisableChildrenWhenDisabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Context getPopupContext()",
    "returnType" : "Context",
    "comment" : "\n     * @return the context used to inflate the Spinner's popup or dialog window\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPopupBackgroundDrawable(Drawable background)",
    "returnType" : "void",
    "comment" : "\n     * Set the background drawable for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; this method is a no-op in other modes.\n     *\n     * @param background Background drawable\n     *\n     * @attr ref android.R.styleable#Spinner_popupBackground\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public void setPopupBackgroundResource(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the background drawable for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; this method is a no-op in other modes.\n     *\n     * @param resId Resource ID of a background drawable\n     *\n     * @attr ref android.R.styleable#Spinner_popupBackground\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public Drawable getPopupBackground()",
    "returnType" : "Drawable",
    "comment" : "\n     * Get the background drawable for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; other modes will return null.\n     *\n     * @return background Background drawable\n     *\n     * @attr ref android.R.styleable#Spinner_popupBackground\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public boolean isPopupShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDropDownVerticalOffset(int pixels)",
    "returnType" : "void",
    "comment" : "\n     * Set a vertical offset in pixels for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; this method is a no-op in other modes.\n     *\n     * @param pixels Vertical offset in pixels\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public int getDropDownVerticalOffset()",
    "returnType" : "int",
    "comment" : "\n     * Get the configured vertical offset in pixels for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; other modes will return 0.\n     *\n     * @return Vertical offset in pixels\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownVerticalOffset\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public void setDropDownHorizontalOffset(int pixels)",
    "returnType" : "void",
    "comment" : "\n     * Set a horizontal offset in pixels for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; this method is a no-op in other modes.\n     *\n     * @param pixels Horizontal offset in pixels\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public int getDropDownHorizontalOffset()",
    "returnType" : "int",
    "comment" : "\n     * Get the configured horizontal offset in pixels for the spinner's popup window of choices.\n     * Only valid in {@link #MODE_DROPDOWN}; other modes will return 0.\n     *\n     * @return Horizontal offset in pixels\n     *\n     * @attr ref android.R.styleable#ListPopupWindow_dropDownHorizontalOffset\n     ",
    "links" : [ "#MODE_DROPDOWN" ]
  }, {
    "name" : "public void setDropDownWidth(int pixels)",
    "returnType" : "void",
    "comment" : "\n     * Set the width of the spinner's popup window of choices in pixels. This value\n     * may also be set to {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}\n     * to match the width of the Spinner itself, or\n     * {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT} to wrap to the measured size\n     * of contained dropdown list items.\n     *\n     * <p>Only valid in {@link #MODE_DROPDOWN}; this method is a no-op in other modes.</p>\n     *\n     * @param pixels Width in pixels, WRAP_CONTENT, or MATCH_PARENT\n     *\n     * @attr ref android.R.styleable#Spinner_dropDownWidth\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "#MODE_DROPDOWN", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public int getDropDownWidth()",
    "returnType" : "int",
    "comment" : "\n     * Get the configured width of the spinner's popup window of choices in pixels.\n     * The returned value may also be {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}\n     * meaning the popup window will match the width of the Spinner itself, or\n     * {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT} to wrap to the measured size\n     * of contained dropdown list items.\n     *\n     * @return Width in pixels, WRAP_CONTENT, or MATCH_PARENT\n     *\n     * @attr ref android.R.styleable#Spinner_dropDownWidth\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Describes how the selected item view is positioned. Currently only the horizontal component\n     * is used. The default is determined by the current theme.\n     *\n     * @param gravity See {@link android.view.Gravity}\n     *\n     * @attr ref android.R.styleable#Spinner_gravity\n     ",
    "links" : [ "android.view.Gravity" ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : "\n     * Describes how the selected item view is positioned. The default is determined by the\n     * current theme.\n     *\n     * @return A {@link android.view.Gravity Gravity} value\n     ",
    "links" : [ "android.view.Gravity" ]
  }, {
    "name" : "public void setAdapter(SpinnerAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link SpinnerAdapter} used to provide the data which backs\n     * this Spinner.\n     * <p>\n     * If this Spinner has a popup theme set in XML via the\n     * {@link android.R.styleable#Spinner_popupTheme popupTheme} attribute, the\n     * adapter should inflate drop-down views using the same theme. The easiest\n     * way to achieve this is by using {@link #getPopupContext()} to obtain a\n     * layout inflater for use in\n     * {@link SpinnerAdapter#getDropDownView(int, View, ViewGroup)}.\n     * <p>\n     * Spinner overrides {@link Adapter#getViewTypeCount()} on the\n     * Adapter associated with this view. Calling\n     * {@link Adapter#getItemViewType(int) getItemViewType(int)} on the object\n     * returned from {@link #getAdapter()} will always return 0. Calling\n     * {@link Adapter#getViewTypeCount() getViewTypeCount()} will always return\n     * 1. On API {@link Build.VERSION_CODES#LOLLIPOP} and above, attempting to set an\n     * adapter with more than one view type will throw an\n     * {@link IllegalArgumentException}.\n     *\n     * @param adapter the adapter to set\n     *\n     * @see AbsSpinner#setAdapter(SpinnerAdapter)\n     * @throws IllegalArgumentException if the adapter has more than one view\n     *         type\n     ",
    "links" : [ "android.R.styleable#Spinner_popupTheme", "android.widget.SpinnerAdapter", "#getPopupContext()", "#getAdapter()", "Build.VERSION_CODES#LOLLIPOP", "android.widget.Adapter#getViewTypeCount()", "android.widget.SpinnerAdapter#getDropDownView(int", "android.widget.Adapter#getItemViewType(int)", "IllegalArgumentException" ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnItemClickListener(OnItemClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * <p>A spinner does not support item click events. Calling this method\n     * will raise an exception.</p>\n     * <p>Instead use {@link AdapterView#setOnItemSelectedListener}.\n     *\n     * @param l this listener will be ignored\n     ",
    "links" : [ "android.widget.AdapterView#setOnItemSelectedListener" ]
  }, {
    "name" : "public void setOnItemClickListenerInt(OnItemClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "\n     * @see android.view.View#onLayout(boolean,int,int,int,int)\n     *\n     * Creates and positions all views\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " void layout(int delta, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Creates and positions all views for this Spinner.\n     *\n     * @param delta Change in the selected position. +1 means selection is moving to the right,\n     * so views are scrolling to the left. -1 means selection is moving to the left.\n     ",
    "links" : [ ]
  }, {
    "name" : "private View makeView(int position, boolean addChild)",
    "returnType" : "View",
    "comment" : "\n     * Obtain a view, either by pulling an existing view from the recycler or\n     * by getting a new one from the adapter. If we are animating, make sure\n     * there is enough information in the view's layout parameters to animate\n     * from the old to new positions.\n     *\n     * @param position Position in the spinner for the view to obtain\n     * @param addChild true to add the child to the spinner, false to obtain and configure only.\n     * @return A view for the given position\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUpChild(View child, boolean addChild)",
    "returnType" : "void",
    "comment" : "\n     * Helper for makeAndAddView to set the position of a view\n     * and fill out its layout paramters.\n     *\n     * @param child The view to position\n     * @param addChild true if the child should be added to the Spinner during setup\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performClick()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onClick(DialogInterface dialog, int which)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onClick(int which)",
    "returnType" : "void",
    "comment" : "\n     * Sets selection and dismisses the spinner's popup if it can be dismissed.\n     * For ease of use in tests, where publicly obtaining the spinner's popup is difficult.\n     *\n     * @param which index of the item to be selected.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setPrompt(CharSequence prompt)",
    "returnType" : "void",
    "comment" : "\n     * Sets the prompt to display when the dialog is shown.\n     * @param prompt the prompt to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPromptId(int promptId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the prompt to display when the dialog is shown.\n     * @param promptId the resource ID of the prompt to display when the dialog is shown\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getPrompt()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return The prompt to display when the dialog is shown\n     ",
    "links" : [ ]
  }, {
    "name" : " int measureContentWidth(SpinnerAdapter adapter, Drawable background)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Context getPopupContext()", "public void setPopupBackgroundDrawable(Drawable background)", "public void setPopupBackgroundResource(@DrawableRes int resId)", "public Drawable getPopupBackground()", "public boolean isPopupShowing()", "public void setDropDownVerticalOffset(int pixels)", "public int getDropDownVerticalOffset()", "public void setDropDownHorizontalOffset(int pixels)", "public int getDropDownHorizontalOffset()", "public void setDropDownWidth(int pixels)", "public int getDropDownWidth()", "public void setEnabled(boolean enabled)", "public void setGravity(int gravity)", "public int getGravity()", "public void setAdapter(SpinnerAdapter adapter)", "public int getBaseline()", "protected void onDetachedFromWindow()", "public void setOnItemClickListener(OnItemClickListener l)", "public void setOnItemClickListenerInt(OnItemClickListener l)", "public boolean onTouchEvent(MotionEvent event)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", " void layout(int delta, boolean animate)", "private View makeView(int position, boolean addChild)", "private void setUpChild(View child, boolean addChild)", "public boolean performClick()", "public void onClick(DialogInterface dialog, int which)", "public void onClick(int which)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public void setPrompt(CharSequence prompt)", "public void setPromptId(int promptId)", "public CharSequence getPrompt()", " int measureContentWidth(SpinnerAdapter adapter, Drawable background)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)" ],
  "variableNames" : [ "TAG", "MAX_ITEMS_MEASURED", "MODE_DIALOG", "MODE_DROPDOWN", "MODE_THEME", "mTempRect", "mPopupContext", "mForwardingListener", "mTempAdapter", "mPopup", "mDropDownWidth", "mGravity", "mDisableChildrenWhenDisabled" ]
}