{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/IpcDataCache.java",
  "packageName" : "android.os",
  "className" : "Config",
  "comment" : "\n     * This is a convenience class that encapsulates configuration information for a\n     * cache.  It may be supplied to the cache constructors in lieu of the other\n     * parameters.  The class captures maximum entry count, the module, the key, and the\n     * api.\n     *\n     * There are three specific use cases supported by this class.\n     *\n     * 1. Instance-per-cache: create a static instance of this class using the same\n     *    parameters as would have been given to IpcDataCache (or\n     *    PropertyInvalidatedCache).  This static instance provides a hook for the\n     *    invalidateCache() and disableForLocalProcess() calls, which, generally, must\n     *    also be static.\n     *\n     * 2. Short-hand for shared configuration parameters: create an instance of this class\n     *    to capture the maximum number of entries and the module to be used by more than\n     *    one cache in the class.  Refer to this instance when creating new configs.  Only\n     *    the api and (optionally key) for the new cache must be supplied.\n     *\n     * 3. Tied caches: create a static instance of this class to capture the maximum\n     *    number of entries, the module, and the key.  Refer to this instance when\n     *    creating a new config that differs in only the api.  The new config can be\n     *    created as part of the cache constructor.  All caches that trace back to the\n     *    root config share the same key and are invalidated by the invalidateCache()\n     *    method of the root config.  All caches that trace back to the root config can be\n     *    disabled in the local process by the disableAllForCurrentProcess() method of the\n     *    root config.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mMaxEntries",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModule",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApi",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildren",
    "type" : "ArraySet<String>",
    "comment" : "\n         * The list of cache names that were created extending this Config.  If\n         * disableForCurrentProcess() is invoked on this config then all children will be\n         * disabled.  Furthermore, any new children based off of this config will be\n         * disabled.  The construction order guarantees that new caches will be disabled\n         * before they are created (the Config must be created before the IpcDataCache is\n         * created).\n         ",
    "links" : [ ]
  }, {
    "name" : "mDisabled",
    "type" : "boolean",
    "comment" : "\n         * True if registered children are disabled in the current process.  If this is\n         * true then all new children are disabled as they are registered.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Config child(@NonNull String name)",
    "returnType" : "Config",
    "comment" : "\n         * Fetch a config that is a child of <this>.  The child shares the same api as the\n         * parent and is registered with the parent for the purposes of disabling in the\n         * current process.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final int maxEntries()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String module()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String api()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String name()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void registerChild(String name)",
    "returnType" : "void",
    "comment" : "\n         * Register a child cache name.  If disableForCurrentProcess() has been called\n         * against this cache, disable th new child.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateCache()",
    "returnType" : "void",
    "comment" : "\n         * Invalidate all caches that share this Config's module and api.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void disableForCurrentProcess()",
    "returnType" : "void",
    "comment" : "\n         * Disable all caches that share this Config's name.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void disableAllForCurrentProcess()",
    "returnType" : "void",
    "comment" : "\n         * Disable this cache and all children.  Any child that is added in the future\n         * will alwo be disabled.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Config child(@NonNull String name)", "public final int maxEntries()", "public final String module()", "public final String api()", "public final String name()", "private final void registerChild(String name)", "public void invalidateCache()", "public void disableForCurrentProcess()", "public void disableAllForCurrentProcess()" ],
  "variableNames" : [ "mMaxEntries", "mModule", "mApi", "mName", "mChildren", "mDisabled" ]
}