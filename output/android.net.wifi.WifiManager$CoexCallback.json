{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiManager.java",
  "packageName" : "android.net.wifi",
  "className" : "CoexCallback",
  "comment" : "\n     * Abstract callback class for applications to receive updates about current CoexUnsafeChannels\n     * for Wi-Fi/Cellular coex channel avoidance.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mCoexCallbackProxy",
    "type" : "CoexCallbackProxy",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " CoexCallbackProxy getProxy()",
    "returnType" : "CoexCallbackProxy",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCoexUnsafeChannelsChanged(@NonNull List<CoexUnsafeChannel> unsafeChannels, @CoexRestriction int restrictions)",
    "returnType" : "void",
    "comment" : "\n         * This indicates the current CoexUnsafeChannels and restrictions calculated by the default\n         * coex algorithm if config_wifiCoexDefaultAlgorithmEnabled is {@code true}. Otherwise, the\n         * values will match the ones supplied to {@link #setCoexUnsafeChannels(List, int)}.\n         *\n         * @param unsafeChannels List of {@link CoexUnsafeChannel} to avoid.\n         * @param restrictions Bitmap of {@code COEX_RESTRICTION_*} constants specifying the mode\n         *                     restrictions on the specified channels. If any restrictions are set,\n         *                     then the supplied CoexUnsafeChannels should be completely avoided for\n         *                     the specified modes, rather than be avoided with best effort.\n         ",
    "links" : [ "android.net.wifi.CoexUnsafeChannel", "#setCoexUnsafeChannels(List" ]
  } ],
  "methodNames" : [ " CoexCallbackProxy getProxy()", "public abstract void onCoexUnsafeChannelsChanged(@NonNull List<CoexUnsafeChannel> unsafeChannels, @CoexRestriction int restrictions)" ],
  "variableNames" : [ "mCoexCallbackProxy" ]
}