{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioFormat.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioFormat} objects.\n     * Use this class to configure and create an AudioFormat instance. By setting format\n     * characteristics such as audio encoding, channel mask or sample rate, you indicate which\n     * of those are to vary from the default behavior on this device wherever this audio format\n     * is used. See {@link AudioFormat} for a complete description of the different parameters that\n     * can be used to configure an <code>AudioFormat</code> instance.\n     * <p>{@link AudioFormat} is for instance used in\n     * {@link AudioTrack#AudioTrack(AudioAttributes, AudioFormat, int, int, int)}. In this\n     * constructor, every format characteristic set on the <code>Builder</code> (e.g. with\n     * {@link #setSampleRate(int)}) will alter the default values used by an\n     * <code>AudioTrack</code>. In this case for audio playback with <code>AudioTrack</code>, the\n     * sample rate set in the <code>Builder</code> would override the platform output sample rate\n     * which would otherwise be selected by default.\n     ",
  "links" : [ "android.media.AudioTrack#AudioTrack(AudioAttributes", "android.media.AudioFormat", "#setSampleRate(int)" ],
  "variables" : [ {
    "name" : "mEncoding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRate",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelIndexMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropertySetMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AudioFormat build()",
    "returnType" : "AudioFormat",
    "comment" : "\n         * Combines all of the format characteristics that have been set and return a new\n         * {@link AudioFormat} object.\n         * @return a new {@link AudioFormat} object\n         ",
    "links" : [ "android.media.AudioFormat" ]
  }, {
    "name" : "public Builder setEncoding(@Encoding int encoding) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the data encoding format.\n         * @param encoding the specified encoding or default.\n         * @return the same Builder instance.\n         * @throws java.lang.IllegalArgumentException\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setChannelMask(int channelMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the channel position mask.\n         * The channel position mask specifies the association between audio samples in a frame\n         * with named endpoint channels. The samples in the frame correspond to the\n         * named set bits in the channel position mask, in ascending bit order.\n         * See {@link #setChannelIndexMask(int)} to specify channels\n         * based on endpoint numbered channels. This <a href=\"#channelPositionMask\">description of\n         * channel position masks</a> covers the concept in more details.\n         * @param channelMask describes the configuration of the audio channels.\n         *    <p> For output, the channelMask can be an OR-ed combination of\n         *    channel position masks, e.g.\n         *    {@link AudioFormat#CHANNEL_OUT_FRONT_LEFT},\n         *    {@link AudioFormat#CHANNEL_OUT_FRONT_RIGHT},\n         *    {@link AudioFormat#CHANNEL_OUT_FRONT_CENTER},\n         *    {@link AudioFormat#CHANNEL_OUT_LOW_FREQUENCY}\n         *    {@link AudioFormat#CHANNEL_OUT_BACK_LEFT},\n         *    {@link AudioFormat#CHANNEL_OUT_BACK_RIGHT},\n         *    {@link AudioFormat#CHANNEL_OUT_BACK_CENTER},\n         *    {@link AudioFormat#CHANNEL_OUT_SIDE_LEFT},\n         *    {@link AudioFormat#CHANNEL_OUT_SIDE_RIGHT}.\n         *    <p> For output or {@link AudioTrack}, channel position masks which do not contain\n         *    matched left/right pairs are invalid.\n         *    <p> For input or {@link AudioRecord}, the mask should be\n         *    {@link AudioFormat#CHANNEL_IN_MONO} or\n         *    {@link AudioFormat#CHANNEL_IN_STEREO}.  {@link AudioFormat#CHANNEL_IN_MONO} is\n         *    guaranteed to work on all devices.\n         * @return the same <code>Builder</code> instance.\n         * @throws IllegalArgumentException if the channel mask is invalid or\n         *    if both channel index mask and channel position mask\n         *    are specified but do not have the same channel count.\n         ",
    "links" : [ "android.media.AudioFormat#CHANNEL_OUT_LOW_FREQUENCY", "android.media.AudioFormat#CHANNEL_OUT_FRONT_LEFT", "android.media.AudioFormat#CHANNEL_OUT_SIDE_LEFT", "android.media.AudioFormat#CHANNEL_OUT_SIDE_RIGHT", "android.media.AudioFormat#CHANNEL_IN_STEREO", "android.media.AudioRecord", "android.media.AudioTrack", "android.media.AudioFormat#CHANNEL_IN_MONO", "android.media.AudioFormat#CHANNEL_OUT_BACK_LEFT", "android.media.AudioFormat#CHANNEL_OUT_BACK_RIGHT", "#setChannelIndexMask(int)", "android.media.AudioFormat#CHANNEL_OUT_FRONT_CENTER", "android.media.AudioFormat#CHANNEL_OUT_FRONT_RIGHT", "android.media.AudioFormat#CHANNEL_OUT_BACK_CENTER" ]
  }, {
    "name" : "public Builder setChannelIndexMask(int channelIndexMask)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the channel index mask.\n         * A channel index mask specifies the association of audio samples in the frame\n         * with numbered endpoint channels. The i-th bit in the channel index\n         * mask corresponds to the i-th endpoint channel.\n         * For example, an endpoint with four channels is represented\n         * as index mask bits 0 through 3. This <a href=\"#channelIndexMask>description of channel\n         * index masks</a> covers the concept in more details.\n         * See {@link #setChannelMask(int)} for a positional mask interpretation.\n         * <p> Both {@link AudioTrack} and {@link AudioRecord} support\n         * a channel index mask.\n         * If a channel index mask is specified it is used,\n         * otherwise the channel position mask specified\n         * by <code>setChannelMask</code> is used.\n         * For <code>AudioTrack</code> and <code>AudioRecord</code>,\n         * a channel position mask is not required if a channel index mask is specified.\n         *\n         * @param channelIndexMask describes the configuration of the audio channels.\n         *    <p> For output, the <code>channelIndexMask</code> is an OR-ed combination of\n         *    bits representing the mapping of <code>AudioTrack</code> write samples\n         *    to output sink channels.\n         *    For example, a mask of <code>0xa</code>, or binary <code>1010</code>,\n         *    means the <code>AudioTrack</code> write frame consists of two samples,\n         *    which are routed to the second and the fourth channels of the output sink.\n         *    Unmatched output sink channels are zero filled and unmatched\n         *    <code>AudioTrack</code> write samples are dropped.\n         *    <p> For input, the <code>channelIndexMask</code> is an OR-ed combination of\n         *    bits representing the mapping of input source channels to\n         *    <code>AudioRecord</code> read samples.\n         *    For example, a mask of <code>0x5</code>, or binary\n         *    <code>101</code>, will read from the first and third channel of the input\n         *    source device and store them in the first and second sample of the\n         *    <code>AudioRecord</code> read frame.\n         *    Unmatched input source channels are dropped and\n         *    unmatched <code>AudioRecord</code> read samples are zero filled.\n         * @return the same <code>Builder</code> instance.\n         * @throws IllegalArgumentException if the channel index mask is invalid or\n         *    if both channel index mask and channel position mask\n         *    are specified but do not have the same channel count.\n         ",
    "links" : [ "#setChannelMask(int)", "android.media.AudioRecord", "android.media.AudioTrack" ]
  }, {
    "name" : "public Builder setSampleRate(int sampleRate) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the sample rate.\n         * @param sampleRate the sample rate expressed in Hz\n         * @return the same Builder instance.\n         * @throws java.lang.IllegalArgumentException\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public AudioFormat build()", "public Builder setEncoding(@Encoding int encoding) throws IllegalArgumentException", "public Builder setChannelMask(int channelMask)", "public Builder setChannelIndexMask(int channelIndexMask)", "public Builder setSampleRate(int sampleRate) throws IllegalArgumentException" ],
  "variableNames" : [ "mEncoding", "mSampleRate", "mChannelMask", "mChannelIndexMask", "mPropertySetMask" ]
}