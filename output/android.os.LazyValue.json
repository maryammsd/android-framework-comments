{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Parcel.java",
  "packageName" : "android.os",
  "className" : "LazyValue",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mPosition",
    "type" : "int",
    "comment" : "\n         *                      |   4B   |   4B   |\n         * mSource = Parcel{... |  type  | length | object | ...}\n         *                      a        b        c        d\n         * length = d - c\n         * mPosition = a\n         * mLength = d - a\n         ",
    "links" : [ ]
  }, {
    "name" : "mLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObject",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "Parcel",
    "comment" : "\n         * This goes from non-null to null once. Always check the nullability of this object before\n         * performing any operations, either involving itself or mObject since the happens-before\n         * established by this volatile will guarantee visibility of either. We can assume this\n         * parcel won't change anymore.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object apply(@Nullable Class<?> clazz, @Nullable Class<?>[] itemTypes)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFileDescriptors()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n         * We're checking if the *lazy value* is equal to another one, not if the *object*\n         * represented by the lazy value is equal to the other one. So, if there are two lazy values\n         * and one of them has been deserialized but the other hasn't this will always return false.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object apply(@Nullable Class<?> clazz, @Nullable Class<?>[] itemTypes)", "public void writeToParcel(Parcel out)", "public boolean hasFileDescriptors()", "public String toString()", "public boolean equals(Object other)", "public int hashCode()" ],
  "variableNames" : [ "mPosition", "mLength", "mType", "mLoader", "mObject", "mSource" ]
}