{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/util/HexEncoding.java",
  "packageName" : "android.net.wifi.util",
  "className" : "HexEncoding",
  "comment" : "\n * Hexadecimal encoding where each byte is represented by two hexadecimal digits.\n *\n * Note: this is copied from {@link libcore.util.HexEncoding}.\n *\n * @hide\n ",
  "links" : [ "libcore.util.HexEncoding" ],
  "variables" : [ {
    "name" : "LOWER_CASE_DIGITS",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPPER_CASE_DIGITS",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String encodeToString(byte b, boolean upperCase)",
    "returnType" : "String",
    "comment" : "\n     * Encodes the provided byte as a two-digit hexadecimal String value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char[] encode(byte[] data)",
    "returnType" : "char[]",
    "comment" : "\n     * Encodes the provided data as a sequence of hexadecimal characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char[] encode(byte[] data, boolean upperCase)",
    "returnType" : "char[]",
    "comment" : "\n     * Encodes the provided data as a sequence of hexadecimal characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char[] encode(byte[] data, int offset, int len)",
    "returnType" : "char[]",
    "comment" : "\n     * Encodes the provided data as a sequence of hexadecimal characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static char[] encode(byte[] data, int offset, int len, boolean upperCase)",
    "returnType" : "char[]",
    "comment" : "\n     * Encodes the provided data as a sequence of hexadecimal characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encodeToString(byte[] data)",
    "returnType" : "String",
    "comment" : "\n     * Encodes the provided data as a sequence of hexadecimal characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String encodeToString(byte[] data, boolean upperCase)",
    "returnType" : "String",
    "comment" : "\n     * Encodes the provided data as a sequence of hexadecimal characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(String encoded) throws IllegalArgumentException",
    "returnType" : "byte[]",
    "comment" : "\n     * Decodes the provided hexadecimal string into a byte array.  Odd-length inputs\n     * are not allowed.\n     *\n     * Throws an {@code IllegalArgumentException} if the input is malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(String encoded, boolean allowSingleChar) throws IllegalArgumentException",
    "returnType" : "byte[]",
    "comment" : "\n     * Decodes the provided hexadecimal string into a byte array. If {@code allowSingleChar}\n     * is {@code true} odd-length inputs are allowed and the first character is interpreted\n     * as the lower bits of the first result byte.\n     *\n     * Throws an {@code IllegalArgumentException} if the input is malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(char[] encoded) throws IllegalArgumentException",
    "returnType" : "byte[]",
    "comment" : "\n     * Decodes the provided hexadecimal string into a byte array.  Odd-length inputs\n     * are not allowed.\n     *\n     * Throws an {@code IllegalArgumentException} if the input is malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(char[] encoded, boolean allowSingleChar) throws IllegalArgumentException",
    "returnType" : "byte[]",
    "comment" : "\n     * Decodes the provided hexadecimal string into a byte array. If {@code allowSingleChar}\n     * is {@code true} odd-length inputs are allowed and the first character is interpreted\n     * as the lower bits of the first result byte.\n     *\n     * Throws an {@code IllegalArgumentException} if the input is malformed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int toDigit(char[] str, int offset) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String encodeToString(byte b, boolean upperCase)", "public static char[] encode(byte[] data)", "public static char[] encode(byte[] data, boolean upperCase)", "public static char[] encode(byte[] data, int offset, int len)", "private static char[] encode(byte[] data, int offset, int len, boolean upperCase)", "public static String encodeToString(byte[] data)", "public static String encodeToString(byte[] data, boolean upperCase)", "public static byte[] decode(String encoded) throws IllegalArgumentException", "public static byte[] decode(String encoded, boolean allowSingleChar) throws IllegalArgumentException", "public static byte[] decode(char[] encoded) throws IllegalArgumentException", "public static byte[] decode(char[] encoded, boolean allowSingleChar) throws IllegalArgumentException", "private static int toDigit(char[] str, int offset) throws IllegalArgumentException" ],
  "variableNames" : [ "LOWER_CASE_DIGITS", "UPPER_CASE_DIGITS" ]
}