{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nearby/NearbyManager.java",
  "packageName" : "android.nearby",
  "className" : "NearbyManager",
  "comment" : "\n * This class provides a way to perform Nearby related operations such as scanning, broadcasting\n * and connecting to nearby devices.\n *\n * <p> To get a {@link NearbyManager} instance, call the\n * <code>Context.getSystemService(NearbyManager.class)</code>.\n *\n * @hide\n ",
  "links" : [ "android.nearby.NearbyManager" ],
  "variables" : [ {
    "name" : "POWERED_OFF_FINDING_MODE_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #getPoweredOffFindingMode()} when this powered off finding is not\n     * supported the device.\n     ",
    "links" : [ "#getPoweredOffFindingMode()" ]
  }, {
    "name" : "POWERED_OFF_FINDING_MODE_DISABLED",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #getPoweredOffFindingMode()} and argument of {@link\n     * #setPoweredOffFindingMode(int)} when powered off finding is supported but disabled. The\n     * device will not start to advertise when powered off.\n     ",
    "links" : [ "#getPoweredOffFindingMode()", "#setPoweredOffFindingMode(int)" ]
  }, {
    "name" : "POWERED_OFF_FINDING_MODE_ENABLED",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #getPoweredOffFindingMode()} and argument of {@link\n     * #setPoweredOffFindingMode(int)} when powered off finding is enabled. The device will start to\n     * advertise when powered off.\n     ",
    "links" : [ "#getPoweredOffFindingMode()", "#setPoweredOffFindingMode(int)" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWERED_OFF_FINDING_EID_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_OFF_FINDING_SUPPORTED_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FAST_PAIR_SCAN_ENABLED",
    "type" : "String",
    "comment" : "\n     * TODO(b/286137024): Remove this when CTS R5 is rolled out.\n     * Whether allows Fast Pair to scan.\n     *\n     * (0 = disabled, 1 = enabled)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sScanListeners",
    "type" : "WeakHashMap<ScanCallback, WeakReference<ScanListenerTransport>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBroadcastListeners",
    "type" : "WeakHashMap<BroadcastCallback, WeakReference<BroadcastListenerTransport>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "INearbyManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static NearbyDevice toClientNearbyDevice(NearbyDeviceParcelable nearbyDeviceParcelable, @ScanRequest.ScanType int scanType)",
    "returnType" : "NearbyDevice",
    "comment" : " or the scan type is not recognized.",
    "links" : [ ]
  }, {
    "name" : "public int startScan(@NonNull ScanRequest scanRequest, @CallbackExecutor @NonNull Executor executor, @NonNull ScanCallback scanCallback)",
    "returnType" : "int",
    "comment" : "\n     * Start scan for nearby devices with given parameters. Devices matching {@link ScanRequest}\n     * will be delivered through the given callback.\n     *\n     * @param scanRequest various parameters clients send when requesting scanning\n     * @param executor executor where the listener method is called\n     * @param scanCallback the callback to notify clients when there is a scan result\n     *\n     * @return whether scanning was successfully started\n     ",
    "links" : [ "android.nearby.ScanRequest" ]
  }, {
    "name" : "public void stopScan(@NonNull ScanCallback scanCallback)",
    "returnType" : "void",
    "comment" : "\n     * Stops the nearby device scan for the specified callback. The given callback\n     * is guaranteed not to receive any invocations that happen after this method\n     * is invoked.\n     *\n     * Suppressed lint: Registration methods should have overload that accepts delivery Executor.\n     * Already have executor in startScan() method.\n     *\n     * @param scanCallback the callback that was used to start the scan\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startBroadcast(@NonNull BroadcastRequest broadcastRequest, @CallbackExecutor @NonNull Executor executor, @NonNull BroadcastCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start broadcasting the request using nearby specification.\n     *\n     * @param broadcastRequest request for the nearby broadcast\n     * @param executor executor for running the callback\n     * @param callback callback for notifying the client\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopBroadcast(@NonNull BroadcastCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Stop the broadcast associated with the given callback.\n     *\n     * @param callback the callback that was used for starting the broadcast\n     ",
    "links" : [ ]
  }, {
    "name" : "public void queryOffloadCapability(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<OffloadCapability> callback)",
    "returnType" : "void",
    "comment" : "\n     * Query offload capability in a device. The query is asynchronous and result is called back\n     * in {@link Consumer}, which is set to true if offload is supported.\n     *\n     * @param executor the callback will take place on this {@link Executor}\n     * @param callback the callback invoked with {@link OffloadCapability}\n     ",
    "links" : [ "java.util.function.Consumer", "android.nearby.OffloadCapability", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public static boolean getFastPairScanEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * TODO(b/286137024): Remove this when CTS R5 is rolled out.\n     * Read from {@link Settings} whether Fast Pair scan is enabled.\n     *\n     * @param context the {@link Context} to query the setting\n     * @return whether the Fast Pair is enabled\n     * @hide\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public static void setFastPairScanEnabled(@NonNull Context context, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * TODO(b/286137024): Remove this when CTS R5 is rolled out.\n     * Write into {@link Settings} whether Fast Pair scan is enabled\n     *\n     * @param context the {@link Context} to set the setting\n     * @param enable whether the Fast Pair scan should be enabled\n     * @hide\n     ",
    "links" : [ "android.content.Context", "android.provider.Settings" ]
  }, {
    "name" : "public void setPoweredOffFindingEphemeralIds(@NonNull List<byte[]> eids)",
    "returnType" : "void",
    "comment" : "\n     * Sets the precomputed EIDs for advertising when the phone is powered off. The Bluetooth\n     * controller will store these EIDs in its memory, and will start advertising them in Find My\n     * Device network EID frames when powered off, only if the powered off finding mode was\n     * previously enabled by calling {@link #setPoweredOffFindingMode(int)}.\n     *\n     * <p>The EIDs are cryptographic ephemeral identifiers that change periodically, based on the\n     * Android clock at the time of the shutdown. They are used as the public part of asymmetric key\n     * pairs. Members of the Find My Device network can use them to encrypt the location of where\n     * they sight the advertising device. Only someone in possession of the private key (the device\n     * owner or someone that the device owner shared the key with) can decrypt this encrypted\n     * location.\n     *\n     * <p>Android will typically call this method during the shutdown process. Even after the\n     * method was called, it is still possible to call {#link setPoweredOffFindingMode() to disable\n     * the advertisement, for example to temporarily disable it for a single shutdown.\n     *\n     * <p>If called more than once, the EIDs of the most recent call overrides the EIDs from any\n     * previous call.\n     *\n     * @throws IllegalArgumentException if the length of one of the EIDs is not 20 bytes\n     ",
    "links" : [ "#setPoweredOffFindingMode(int)" ]
  }, {
    "name" : "public void setPoweredOffFindingMode(@PoweredOffFindingMode int poweredOffFindingMode)",
    "returnType" : "void",
    "comment" : "\n     * Turns the powered off finding on or off. Power off finding will operate only if this method\n     * was called at least once since boot, and the value of the argument {@code\n     * poweredOffFindinMode} was {@link #POWERED_OFF_FINDING_MODE_ENABLED} the last time the method\n     * was called.\n     *\n     * <p>When an Android device with the powered off finding feature is turned off (either as part\n     * of a normal shutdown or due to dead battery), its Bluetooth chip starts to advertise Find My\n     * Device network EID frames with the EID payload that were provided by the last call to {@link\n     * #setPoweredOffFindingEphemeralIds(List)}. These EIDs can be sighted by other Android devices\n     * in BLE range that are part of the Find My Device network. The Android sighters use the EID to\n     * encrypt the location of the Android device and upload it to the server, in a way that only\n     * the owner of the advertising device, or people that the owner shared their encryption key\n     * with, can decrypt the location.\n     *\n     * @param poweredOffFindingMode {@link #POWERED_OFF_FINDING_MODE_ENABLED} or {@link\n     * #POWERED_OFF_FINDING_MODE_DISABLED}\n     *\n     * @throws IllegalStateException if called with {@link #POWERED_OFF_FINDING_MODE_ENABLED} when\n     * Bluetooth or location services are disabled\n     ",
    "links" : [ "#setPoweredOffFindingEphemeralIds(List)", "#POWERED_OFF_FINDING_MODE_DISABLED", "#POWERED_OFF_FINDING_MODE_ENABLED" ]
  }, {
    "name" : "public int getPoweredOffFindingMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the state of the powered off finding feature.\n     *\n     * <p>{@link #POWERED_OFF_FINDING_MODE_UNSUPPORTED} if the feature is not supported by the\n     * device, {@link #POWERED_OFF_FINDING_MODE_DISABLED} if this was the last value set by {@link\n     * #setPoweredOffFindingMode(int)} or if no value was set since boot, {@link\n     * #POWERED_OFF_FINDING_MODE_ENABLED} if this was the last value set by {@link\n     * #setPoweredOffFindingMode(int)}\n     ",
    "links" : [ "#POWERED_OFF_FINDING_MODE_UNSUPPORTED", "#POWERED_OFF_FINDING_MODE_DISABLED", "#setPoweredOffFindingMode(int)", "#POWERED_OFF_FINDING_MODE_ENABLED" ]
  }, {
    "name" : "private boolean isPoweredOffFindingSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean areLocationAndBluetoothEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static NearbyDevice toClientNearbyDevice(NearbyDeviceParcelable nearbyDeviceParcelable, @ScanRequest.ScanType int scanType)", "public int startScan(@NonNull ScanRequest scanRequest, @CallbackExecutor @NonNull Executor executor, @NonNull ScanCallback scanCallback)", "public void stopScan(@NonNull ScanCallback scanCallback)", "public void startBroadcast(@NonNull BroadcastRequest broadcastRequest, @CallbackExecutor @NonNull Executor executor, @NonNull BroadcastCallback callback)", "public void stopBroadcast(@NonNull BroadcastCallback callback)", "public void queryOffloadCapability(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<OffloadCapability> callback)", "public static boolean getFastPairScanEnabled(@NonNull Context context)", "public static void setFastPairScanEnabled(@NonNull Context context, boolean enable)", "public void setPoweredOffFindingEphemeralIds(@NonNull List<byte[]> eids)", "public void setPoweredOffFindingMode(@PoweredOffFindingMode int poweredOffFindingMode)", "public int getPoweredOffFindingMode()", "private boolean isPoweredOffFindingSupported()", "private boolean areLocationAndBluetoothEnabled()" ],
  "variableNames" : [ "POWERED_OFF_FINDING_MODE_UNSUPPORTED", "POWERED_OFF_FINDING_MODE_DISABLED", "POWERED_OFF_FINDING_MODE_ENABLED", "TAG", "POWERED_OFF_FINDING_EID_LENGTH", "POWER_OFF_FINDING_SUPPORTED_PROPERTY", "FAST_PAIR_SCAN_ENABLED", "sScanListeners", "sBroadcastListeners", "mContext", "mService" ]
}