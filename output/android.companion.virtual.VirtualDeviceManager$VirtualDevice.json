{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/VirtualDeviceManager.java",
  "packageName" : "android.companion.virtual",
  "className" : "VirtualDevice",
  "comment" : "\n     * A representation of a virtual device.\n     *\n     * <p>A virtual device can have its own virtual displays, audio input/output, sensors, etc.\n     * The creator of a virtual device can take the output from the virtual display and stream it\n     * over to another device, and inject input and sensor events that are received from the remote\n     * device.\n     *\n     * <p>This object is only used by the virtual device creator and allows them to manage the\n     * device's behavior, peripherals, and the user interaction with that device.\n     *\n     * <p class=\"note\">Not to be confused with {@link android.companion.virtual.VirtualDevice},\n     * which is a read-only representation exposing the properties of an existing virtual device.\n     *\n     * @hide\n     ",
  "links" : [ "android.companion.virtual.VirtualDevice" ],
  "variables" : [ {
    "name" : "mVirtualDeviceInternal",
    "type" : "VirtualDeviceInternal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "\n         * Returns the unique ID of this virtual device.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getPersistentDeviceId()",
    "returnType" : "String",
    "comment" : "\n         * Returns the persistent ID of this virtual device.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Context createContext()",
    "returnType" : "Context",
    "comment" : "\n         * Returns a new context bound to this device.\n         *\n         * <p>This is a convenience method equivalent to calling\n         * {@link Context#createDeviceContext(int)} with the id of this device.\n         ",
    "links" : [ "android.content.Context#createDeviceContext(int)" ]
  }, {
    "name" : "public List<VirtualSensor> getVirtualSensorList()",
    "returnType" : "List<VirtualSensor>",
    "comment" : "\n         * Returns this device's sensors.\n         *\n         * @see VirtualDeviceParams.Builder#addVirtualSensorConfig\n         *\n         * @return A list of all sensors for this device, or an empty list if no sensors exist.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void launchPendingIntent(int displayId, @NonNull PendingIntent pendingIntent, @NonNull Executor executor, @NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "\n         * Launches a given pending intent on the give display ID.\n         *\n         * @param displayId The display to launch the pending intent on. This display must be\n         *   created from this virtual device.\n         * @param pendingIntent The pending intent to be launched. If the intent is an activity\n         *   intent, the activity will be started on the virtual display using\n         *   {@link android.app.ActivityOptions#setLaunchDisplayId}. If the intent is a service or\n         *   broadcast intent, an attempt will be made to catch activities started as a result of\n         *   sending the pending intent and move them to the given display. When it completes,\n         *   {@code listener} will be called with the status of whether the launch attempt is\n         *   successful or not.\n         * @param executor The executor to run {@code launchCallback} on.\n         * @param listener Listener that is called when the pending intent launching is complete.\n         *   The argument is {@link #LAUNCH_SUCCESS} if the launch successfully started an activity\n         *   on the virtual display, or one of the {@code LAUNCH_FAILED} status explaining why it\n         *   failed.\n         ",
    "links" : [ "#LAUNCH_SUCCESS", "android.app.ActivityOptions#setLaunchDisplayId" ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@IntRange(from = 1) int width, @IntRange(from = 1) int height, @IntRange(from = 1) int densityDpi, @Nullable Surface surface, @VirtualDisplayFlag int flags, @Nullable @CallbackExecutor Executor executor, @Nullable VirtualDisplay.Callback callback)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n         * Creates a virtual display for this virtual device. All displays created on the same\n         * device belongs to the same display group.\n         *\n         * @param width The width of the virtual display in pixels, must be greater than 0.\n         * @param height The height of the virtual display in pixels, must be greater than 0.\n         * @param densityDpi The density of the virtual display in dpi, must be greater than 0.\n         * @param surface The surface to which the content of the virtual display should\n         *   be rendered, or null if there is none initially. The surface can also be set later\n         *   using {@link VirtualDisplay#setSurface(Surface)}.\n         * @param flags A combination of virtual display flags accepted by\n         *   {@link DisplayManager#createVirtualDisplay}. In addition, the following flags are\n         *   automatically set for all virtual devices:\n         *   {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_PUBLIC} and\n         *   {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY}.\n         * @param executor The executor on which {@code callback} will be invoked. This is ignored\n         *   if {@code callback} is {@code null}. If {@code callback} is specified, this executor\n         *   must not be null.\n         * @param callback Callback to call when the state of the {@link VirtualDisplay} changes\n         * @return The newly created virtual display, or {@code null} if the application could\n         *   not create the virtual display.\n         *\n         * @see DisplayManager#createVirtualDisplay\n         *\n         * @deprecated use {@link #createVirtualDisplay(VirtualDisplayConfig, Executor,\n         * VirtualDisplay.Callback)}\n         ",
    "links" : [ "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY", "#createVirtualDisplay(VirtualDisplayConfig", "android.hardware.display.DisplayManager#createVirtualDisplay", "android.hardware.display.VirtualDisplay#setSurface(Surface)", "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_PUBLIC", "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull VirtualDisplayConfig config, @Nullable @CallbackExecutor Executor executor, @Nullable VirtualDisplay.Callback callback)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n         * Creates a virtual display for this virtual device. All displays created on the same\n         * device belongs to the same display group.\n         *\n         * @param config The configuration of the display.\n         * @param executor The executor on which {@code callback} will be invoked. This is ignored\n         *   if {@code callback} is {@code null}. If {@code callback} is specified, this executor\n         *   must not be null.\n         * @param callback Callback to call when the state of the {@link VirtualDisplay} changes\n         * @return The newly created virtual display, or {@code null} if the application could\n         *   not create the virtual display.\n         *\n         * @see DisplayManager#createVirtualDisplay\n         ",
    "links" : [ "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Closes the virtual device, stopping and tearing down any virtual displays, associated\n         * virtual audio device, and event injection that's currently in progress.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setDevicePolicy(@VirtualDeviceParams.DynamicPolicyType int policyType, @VirtualDeviceParams.DevicePolicy int devicePolicy)",
    "returnType" : "void",
    "comment" : "\n         * Specifies a policy for this virtual device.\n         *\n         * <p>Policies define the system behavior that may be specific for this virtual device. The\n         * given policy must be able to be changed dynamically during the lifetime of the device.\n         *\n         * @param policyType the type of policy, i.e. which behavior to specify a policy for.\n         * @param devicePolicy the value of the policy, i.e. how to interpret the device behavior.\n         *\n         * @see VirtualDeviceParams#POLICY_TYPE_RECENTS\n         * @see VirtualDeviceParams#POLICY_TYPE_ACTIVITY\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addActivityPolicyExemption(@NonNull ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n         * Specifies a component name to be exempt from the current activity launch policy.\n         *\n         * <p>If the current {@link VirtualDeviceParams#POLICY_TYPE_ACTIVITY} allows activity\n         * launches by default, (i.e. it is {@link VirtualDeviceParams#DEVICE_POLICY_DEFAULT}),\n         * then the specified component will be blocked from launching.\n         * If the current {@link VirtualDeviceParams#POLICY_TYPE_ACTIVITY} blocks activity launches\n         * by default, (i.e. it is {@link VirtualDeviceParams#DEVICE_POLICY_CUSTOM}), then the\n         * specified component will be allowed to launch.</p>\n         *\n         * <p>Note that changing the activity launch policy will clear current set of exempt\n         * components.</p>\n         *\n         * @see #removeActivityPolicyExemption\n         * @see #setDevicePolicy\n         ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams#POLICY_TYPE_ACTIVITY", "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_CUSTOM", "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "public void removeActivityPolicyExemption(@NonNull ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n         * Makes the specified component name to adhere to the default activity launch policy.\n         *\n         * <p>If the current {@link VirtualDeviceParams#POLICY_TYPE_ACTIVITY} allows activity\n         * launches by default, (i.e. it is {@link VirtualDeviceParams#DEVICE_POLICY_DEFAULT}),\n         * then the specified component will be allowed to launch.\n         * If the current {@link VirtualDeviceParams#POLICY_TYPE_ACTIVITY} blocks activity launches\n         * by default, (i.e. it is {@link VirtualDeviceParams#DEVICE_POLICY_CUSTOM}), then the\n         * specified component will be blocked from launching.</p>\n         *\n         * <p>Note that changing the activity launch policy will clear current set of exempt\n         * components.</p>\n         *\n         * @see #addActivityPolicyExemption\n         * @see #setDevicePolicy\n         ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams#POLICY_TYPE_ACTIVITY", "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_CUSTOM", "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "public VirtualDpad createVirtualDpad(@NonNull VirtualDpadConfig config)",
    "returnType" : "VirtualDpad",
    "comment" : "\n         * Creates a virtual dpad.\n         *\n         * @param config the configurations of the virtual dpad.\n         ",
    "links" : [ ]
  }, {
    "name" : "public VirtualKeyboard createVirtualKeyboard(@NonNull VirtualKeyboardConfig config)",
    "returnType" : "VirtualKeyboard",
    "comment" : "\n         * Creates a virtual keyboard.\n         *\n         * @param config the configurations of the virtual keyboard.\n         ",
    "links" : [ ]
  }, {
    "name" : "public VirtualKeyboard createVirtualKeyboard(@NonNull VirtualDisplay display, @NonNull String inputDeviceName, int vendorId, int productId)",
    "returnType" : "VirtualKeyboard",
    "comment" : "\n         * Creates a virtual keyboard.\n         *\n         * @param display the display that the events inputted through this device should target.\n         * @param inputDeviceName the name of this keyboard device.\n         * @param vendorId the PCI vendor id.\n         * @param productId the product id, as defined by the vendor.\n         * @see #createVirtualKeyboard(VirtualKeyboardConfig config)\n         * @deprecated Use {@link #createVirtualKeyboard(VirtualKeyboardConfig config)} instead\n         ",
    "links" : [ "#createVirtualKeyboard(VirtualKeyboardConfig" ]
  }, {
    "name" : "public VirtualMouse createVirtualMouse(@NonNull VirtualMouseConfig config)",
    "returnType" : "VirtualMouse",
    "comment" : "\n         * Creates a virtual mouse.\n         *\n         * @param config the configurations of the virtual mouse.\n         ",
    "links" : [ ]
  }, {
    "name" : "public VirtualMouse createVirtualMouse(@NonNull VirtualDisplay display, @NonNull String inputDeviceName, int vendorId, int productId)",
    "returnType" : "VirtualMouse",
    "comment" : "\n         * Creates a virtual mouse.\n         *\n         * @param display the display that the events inputted through this device should target.\n         * @param inputDeviceName the name of this mouse.\n         * @param vendorId the PCI vendor id.\n         * @param productId the product id, as defined by the vendor.\n         * @see #createVirtualMouse(VirtualMouseConfig config)\n         * @deprecated Use {@link #createVirtualMouse(VirtualMouseConfig config)} instead\n         ",
    "links" : [ "#createVirtualMouse(VirtualMouseConfig" ]
  }, {
    "name" : "public VirtualTouchscreen createVirtualTouchscreen(@NonNull VirtualTouchscreenConfig config)",
    "returnType" : "VirtualTouchscreen",
    "comment" : "\n         * Creates a virtual touchscreen.\n         *\n         * @param config the configurations of the virtual touchscreen.\n         ",
    "links" : [ ]
  }, {
    "name" : "public VirtualTouchscreen createVirtualTouchscreen(@NonNull VirtualDisplay display, @NonNull String inputDeviceName, int vendorId, int productId)",
    "returnType" : "VirtualTouchscreen",
    "comment" : "\n         * Creates a virtual touchscreen.\n         *\n         * @param display the display that the events inputted through this device should target.\n         * @param inputDeviceName the name of this touchscreen device.\n         * @param vendorId the PCI vendor id.\n         * @param productId the product id, as defined by the vendor.\n         * @see #createVirtualTouchscreen(VirtualTouchscreenConfig config)\n         * @deprecated Use {@link #createVirtualTouchscreen(VirtualTouchscreenConfig config)}\n         * instead\n         ",
    "links" : [ "#createVirtualTouchscreen(VirtualTouchscreenConfig" ]
  }, {
    "name" : "public VirtualNavigationTouchpad createVirtualNavigationTouchpad(@NonNull VirtualNavigationTouchpadConfig config)",
    "returnType" : "VirtualNavigationTouchpad",
    "comment" : "\n         * Creates a virtual touchpad in navigation mode.\n         *\n         * <p>A touchpad in navigation mode means that its events are interpreted as navigation\n         * events (up, down, etc) instead of using them to update a cursor's absolute position. If\n         * the events are not consumed they are converted to DPAD events and delivered to the target\n         * again.\n         *\n         * @param config the configurations of the virtual navigation touchpad.\n         * @see android.view.InputDevice#SOURCE_TOUCH_NAVIGATION\n         ",
    "links" : [ ]
  }, {
    "name" : "public VirtualStylus createVirtualStylus(@NonNull VirtualStylusConfig config)",
    "returnType" : "VirtualStylus",
    "comment" : "\n         * Creates a virtual stylus.\n         *\n         * @param config the touchscreen configurations for the virtual stylus.\n         ",
    "links" : [ ]
  }, {
    "name" : "public VirtualAudioDevice createVirtualAudioDevice(@NonNull VirtualDisplay display, @Nullable Executor executor, @Nullable AudioConfigurationChangeCallback callback)",
    "returnType" : "VirtualAudioDevice",
    "comment" : "\n         * Creates a VirtualAudioDevice, capable of recording audio emanating from this device,\n         * or injecting audio from another device.\n         *\n         * <p>Note: One {@link VirtualDevice} can only create one {@link VirtualAudioDevice}, so\n         * calling this method multiple times will return the same instance. When\n         * {@link VirtualDevice#close()} is called, the associated {@link VirtualAudioDevice} will\n         * also be closed automatically.\n         *\n         * @param display The target virtual display to capture from and inject into.\n         * @param executor The {@link Executor} object for the thread on which to execute\n         *   the callback. If <code>null</code>, the {@link Executor} associated with the main\n         *   {@link Looper} will be used.\n         * @param callback Interface to be notified when playback or recording configuration of\n         *   applications running on virtual display is changed.\n         * @return A {@link VirtualAudioDevice} instance.\n         ",
    "links" : [ "android.companion.virtual.VirtualDevice#close()", "android.os.Looper", "android.companion.virtual.VirtualDevice", "android.companion.virtual.audio.VirtualAudioDevice", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public VirtualCamera createVirtualCamera(@NonNull VirtualCameraConfig config)",
    "returnType" : "VirtualCamera",
    "comment" : "\n         * Creates a new virtual camera with the given {@link VirtualCameraConfig}. A virtual device\n         * can create a virtual camera only if it has\n         * {@link VirtualDeviceParams#DEVICE_POLICY_CUSTOM} as its\n         * {@link VirtualDeviceParams#POLICY_TYPE_CAMERA}.\n         *\n         * @param config camera configuration.\n         * @return newly created camera.\n         * @throws UnsupportedOperationException if virtual camera isn't supported on this device.\n         * @see VirtualDeviceParams#POLICY_TYPE_CAMERA\n         ",
    "links" : [ "android.companion.virtual.VirtualDeviceParams#DEVICE_POLICY_CUSTOM", "android.companion.virtual.camera.VirtualCameraConfig", "android.companion.virtual.VirtualDeviceParams#POLICY_TYPE_CAMERA" ]
  }, {
    "name" : "public void setShowPointerIcon(boolean showPointerIcon)",
    "returnType" : "void",
    "comment" : "\n         * Sets the visibility of the pointer icon for this VirtualDevice's associated displays.\n         *\n         * @param showPointerIcon True if the pointer should be shown; false otherwise. The default\n         *   visibility is true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayImePolicy(int displayId, @WindowManager.DisplayImePolicy int policy)",
    "returnType" : "void",
    "comment" : "\n         * Specifies the IME behavior on the given display. By default, all displays created by\n         * virtual devices have {@link WindowManager#DISPLAY_IME_POLICY_LOCAL}.\n         *\n         * @param displayId the ID of the display to change the IME policy for. It must be owned by\n         *                  this virtual device.\n         * @param policy the IME policy to use on that display\n         * @throws SecurityException if the display is not owned by this device or is not\n         *                           {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_TRUSTED trusted}\n         ",
    "links" : [ "android.view.WindowManager#DISPLAY_IME_POLICY_LOCAL", "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_TRUSTED" ]
  }, {
    "name" : "public void addActivityListener(@CallbackExecutor @NonNull Executor executor, @NonNull ActivityListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Adds an activity listener to listen for events such as top activity change or virtual\n         * display task stack became empty.\n         *\n         * @param executor The executor where the listener is executed on.\n         * @param listener The listener to add.\n         * @see #removeActivityListener(ActivityListener)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeActivityListener(@NonNull ActivityListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Removes an activity listener previously added with {@link #addActivityListener}.\n         *\n         * @param listener The listener to remove.\n         * @see #addActivityListener(Executor, ActivityListener)\n         ",
    "links" : [ "#addActivityListener" ]
  }, {
    "name" : "public void addSoundEffectListener(@CallbackExecutor @NonNull Executor executor, @NonNull SoundEffectListener soundEffectListener)",
    "returnType" : "void",
    "comment" : "\n         * Adds a sound effect listener.\n         *\n         * @param executor The executor where the listener is executed on.\n         * @param soundEffectListener The listener to add.\n         * @see #removeSoundEffectListener(SoundEffectListener)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeSoundEffectListener(@NonNull SoundEffectListener soundEffectListener)",
    "returnType" : "void",
    "comment" : "\n         * Removes a sound effect listener previously added with {@link #addSoundEffectListener}.\n         *\n         * @param soundEffectListener The listener to remove.\n         * @see #addSoundEffectListener(Executor, SoundEffectListener)\n         ",
    "links" : [ "#addSoundEffectListener" ]
  }, {
    "name" : "public void registerIntentInterceptor(@NonNull IntentFilter interceptorFilter, @CallbackExecutor @NonNull Executor executor, @NonNull IntentInterceptorCallback interceptorCallback)",
    "returnType" : "void",
    "comment" : "\n         * Registers an intent interceptor that will intercept an intent attempting to launch\n         * when matching the provided IntentFilter and calls the callback with the intercepted\n         * intent.\n         *\n         * @param interceptorFilter The filter to match intents intended for interception.\n         * @param executor The executor where the interceptor is executed on.\n         * @param interceptorCallback The callback called when an intent matching interceptorFilter\n         * is intercepted.\n         * @see #unregisterIntentInterceptor(IntentInterceptorCallback)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterIntentInterceptor(@NonNull IntentInterceptorCallback interceptorCallback)",
    "returnType" : "void",
    "comment" : "\n         * Unregisters the intent interceptor previously registered with\n         * {@link #registerIntentInterceptor}.\n         ",
    "links" : [ "#registerIntentInterceptor" ]
  } ],
  "methodNames" : [ "public int getDeviceId()", "public String getPersistentDeviceId()", "public Context createContext()", "public List<VirtualSensor> getVirtualSensorList()", "public void launchPendingIntent(int displayId, @NonNull PendingIntent pendingIntent, @NonNull Executor executor, @NonNull IntConsumer listener)", "public VirtualDisplay createVirtualDisplay(@IntRange(from = 1) int width, @IntRange(from = 1) int height, @IntRange(from = 1) int densityDpi, @Nullable Surface surface, @VirtualDisplayFlag int flags, @Nullable @CallbackExecutor Executor executor, @Nullable VirtualDisplay.Callback callback)", "public VirtualDisplay createVirtualDisplay(@NonNull VirtualDisplayConfig config, @Nullable @CallbackExecutor Executor executor, @Nullable VirtualDisplay.Callback callback)", "public void close()", "public void setDevicePolicy(@VirtualDeviceParams.DynamicPolicyType int policyType, @VirtualDeviceParams.DevicePolicy int devicePolicy)", "public void addActivityPolicyExemption(@NonNull ComponentName componentName)", "public void removeActivityPolicyExemption(@NonNull ComponentName componentName)", "public VirtualDpad createVirtualDpad(@NonNull VirtualDpadConfig config)", "public VirtualKeyboard createVirtualKeyboard(@NonNull VirtualKeyboardConfig config)", "public VirtualKeyboard createVirtualKeyboard(@NonNull VirtualDisplay display, @NonNull String inputDeviceName, int vendorId, int productId)", "public VirtualMouse createVirtualMouse(@NonNull VirtualMouseConfig config)", "public VirtualMouse createVirtualMouse(@NonNull VirtualDisplay display, @NonNull String inputDeviceName, int vendorId, int productId)", "public VirtualTouchscreen createVirtualTouchscreen(@NonNull VirtualTouchscreenConfig config)", "public VirtualTouchscreen createVirtualTouchscreen(@NonNull VirtualDisplay display, @NonNull String inputDeviceName, int vendorId, int productId)", "public VirtualNavigationTouchpad createVirtualNavigationTouchpad(@NonNull VirtualNavigationTouchpadConfig config)", "public VirtualStylus createVirtualStylus(@NonNull VirtualStylusConfig config)", "public VirtualAudioDevice createVirtualAudioDevice(@NonNull VirtualDisplay display, @Nullable Executor executor, @Nullable AudioConfigurationChangeCallback callback)", "public VirtualCamera createVirtualCamera(@NonNull VirtualCameraConfig config)", "public void setShowPointerIcon(boolean showPointerIcon)", "public void setDisplayImePolicy(int displayId, @WindowManager.DisplayImePolicy int policy)", "public void addActivityListener(@CallbackExecutor @NonNull Executor executor, @NonNull ActivityListener listener)", "public void removeActivityListener(@NonNull ActivityListener listener)", "public void addSoundEffectListener(@CallbackExecutor @NonNull Executor executor, @NonNull SoundEffectListener soundEffectListener)", "public void removeSoundEffectListener(@NonNull SoundEffectListener soundEffectListener)", "public void registerIntentInterceptor(@NonNull IntentFilter interceptorFilter, @CallbackExecutor @NonNull Executor executor, @NonNull IntentInterceptorCallback interceptorCallback)", "public void unregisterIntentInterceptor(@NonNull IntentInterceptorCallback interceptorCallback)" ],
  "variableNames" : [ "mVirtualDeviceInternal" ]
}