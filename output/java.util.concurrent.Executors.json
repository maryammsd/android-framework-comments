{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/Executors.java",
  "packageName" : "java.util.concurrent",
  "className" : "Executors",
  "comment" : "\n * Factory and utility methods for {@link Executor}, {@link\n * ExecutorService}, {@link ScheduledExecutorService}, {@link\n * ThreadFactory}, and {@link Callable} classes defined in this\n * package. This class supports the following kinds of methods:\n *\n * <ul>\n *   <li>Methods that create and return an {@link ExecutorService}\n *       set up with commonly useful configuration settings.\n *   <li>Methods that create and return a {@link ScheduledExecutorService}\n *       set up with commonly useful configuration settings.\n *   <li>Methods that create and return a \"wrapped\" ExecutorService, that\n *       disables reconfiguration by making implementation-specific methods\n *       inaccessible.\n *   <li>Methods that create and return a {@link ThreadFactory}\n *       that sets newly created threads to a known state.\n *   <li>Methods that create and return a {@link Callable}\n *       out of other closure-like forms, so they can be used\n *       in execution methods requiring {@code Callable}.\n * </ul>\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.Executor", "java.util.concurrent.ScheduledExecutorService", "java.util.concurrent.Callable", "java.util.concurrent.ThreadFactory", "java.util.concurrent.ExecutorService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static ExecutorService newFixedThreadPool(int nThreads)",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates a thread pool that reuses a fixed number of threads\n     * operating off a shared unbounded queue.  At any point, at most\n     * {@code nThreads} threads will be active processing tasks.\n     * If additional tasks are submitted when all threads are active,\n     * they will wait in the queue until a thread is available.\n     * If any thread terminates due to a failure during execution\n     * prior to shutdown, a new one will take its place if needed to\n     * execute subsequent tasks.  The threads in the pool will exist\n     * until it is explicitly {@link ExecutorService#shutdown shutdown}.\n     *\n     * @param nThreads the number of threads in the pool\n     * @return the newly created thread pool\n     * @throws IllegalArgumentException if {@code nThreads <= 0}\n     ",
    "links" : [ "java.util.concurrent.ExecutorService#shutdown" ]
  }, {
    "name" : "public static ExecutorService newWorkStealingPool(int parallelism)",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates a thread pool that maintains enough threads to support\n     * the given parallelism level, and may use multiple queues to\n     * reduce contention. The parallelism level corresponds to the\n     * maximum number of threads actively engaged in, or available to\n     * engage in, task processing. The actual number of threads may\n     * grow and shrink dynamically. A work-stealing pool makes no\n     * guarantees about the order in which submitted tasks are\n     * executed.\n     *\n     * @param parallelism the targeted parallelism level\n     * @return the newly created thread pool\n     * @throws IllegalArgumentException if {@code parallelism <= 0}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ExecutorService newWorkStealingPool()",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates a work-stealing thread pool using the number of\n     * {@linkplain Runtime#availableProcessors available processors}\n     * as its target parallelism level.\n     *\n     * @return the newly created thread pool\n     * @see #newWorkStealingPool(int)\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory)",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates a thread pool that reuses a fixed number of threads\n     * operating off a shared unbounded queue, using the provided\n     * ThreadFactory to create new threads when needed.  At any point,\n     * at most {@code nThreads} threads will be active processing\n     * tasks.  If additional tasks are submitted when all threads are\n     * active, they will wait in the queue until a thread is\n     * available.  If any thread terminates due to a failure during\n     * execution prior to shutdown, a new one will take its place if\n     * needed to execute subsequent tasks.  The threads in the pool will\n     * exist until it is explicitly {@link ExecutorService#shutdown\n     * shutdown}.\n     *\n     * @param nThreads the number of threads in the pool\n     * @param threadFactory the factory to use when creating new threads\n     * @return the newly created thread pool\n     * @throws NullPointerException if threadFactory is null\n     * @throws IllegalArgumentException if {@code nThreads <= 0}\n     ",
    "links" : [ "java.util.concurrent.ExecutorService#shutdownshutdown" ]
  }, {
    "name" : "public static ExecutorService newSingleThreadExecutor()",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates an Executor that uses a single worker thread operating\n     * off an unbounded queue. (Note however that if this single\n     * thread terminates due to a failure during execution prior to\n     * shutdown, a new one will take its place if needed to execute\n     * subsequent tasks.)  Tasks are guaranteed to execute\n     * sequentially, and no more than one task will be active at any\n     * given time. Unlike the otherwise equivalent\n     * {@code newFixedThreadPool(1)} the returned executor is\n     * guaranteed not to be reconfigurable to use additional threads.\n     *\n     * @return the newly created single-threaded Executor\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates an Executor that uses a single worker thread operating\n     * off an unbounded queue, and uses the provided ThreadFactory to\n     * create a new thread when needed. Unlike the otherwise\n     * equivalent {@code newFixedThreadPool(1, threadFactory)} the\n     * returned executor is guaranteed not to be reconfigurable to use\n     * additional threads.\n     *\n     * @param threadFactory the factory to use when creating new threads\n     * @return the newly created single-threaded Executor\n     * @throws NullPointerException if threadFactory is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ExecutorService newCachedThreadPool()",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates a thread pool that creates new threads as needed, but\n     * will reuse previously constructed threads when they are\n     * available.  These pools will typically improve the performance\n     * of programs that execute many short-lived asynchronous tasks.\n     * Calls to {@code execute} will reuse previously constructed\n     * threads if available. If no existing thread is available, a new\n     * thread will be created and added to the pool. Threads that have\n     * not been used for sixty seconds are terminated and removed from\n     * the cache. Thus, a pool that remains idle for long enough will\n     * not consume any resources. Note that pools with similar\n     * properties but different details (for example, timeout parameters)\n     * may be created using {@link ThreadPoolExecutor} constructors.\n     *\n     * @return the newly created thread pool\n     ",
    "links" : [ "java.util.concurrent.ThreadPoolExecutor" ]
  }, {
    "name" : "public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory)",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Creates a thread pool that creates new threads as needed, but\n     * will reuse previously constructed threads when they are\n     * available, and uses the provided\n     * ThreadFactory to create new threads when needed.\n     *\n     * @param threadFactory the factory to use when creating new threads\n     * @return the newly created thread pool\n     * @throws NullPointerException if threadFactory is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScheduledExecutorService newSingleThreadScheduledExecutor()",
    "returnType" : "ScheduledExecutorService",
    "comment" : "\n     * Creates a single-threaded executor that can schedule commands\n     * to run after a given delay, or to execute periodically.\n     * (Note however that if this single\n     * thread terminates due to a failure during execution prior to\n     * shutdown, a new one will take its place if needed to execute\n     * subsequent tasks.)  Tasks are guaranteed to execute\n     * sequentially, and no more than one task will be active at any\n     * given time. Unlike the otherwise equivalent\n     * {@code newScheduledThreadPool(1)} the returned executor is\n     * guaranteed not to be reconfigurable to use additional threads.\n     *\n     * @return the newly created scheduled executor\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)",
    "returnType" : "ScheduledExecutorService",
    "comment" : "\n     * Creates a single-threaded executor that can schedule commands\n     * to run after a given delay, or to execute periodically.  (Note\n     * however that if this single thread terminates due to a failure\n     * during execution prior to shutdown, a new one will take its\n     * place if needed to execute subsequent tasks.)  Tasks are\n     * guaranteed to execute sequentially, and no more than one task\n     * will be active at any given time. Unlike the otherwise\n     * equivalent {@code newScheduledThreadPool(1, threadFactory)}\n     * the returned executor is guaranteed not to be reconfigurable to\n     * use additional threads.\n     *\n     * @param threadFactory the factory to use when creating new threads\n     * @return the newly created scheduled executor\n     * @throws NullPointerException if threadFactory is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)",
    "returnType" : "ScheduledExecutorService",
    "comment" : "\n     * Creates a thread pool that can schedule commands to run after a\n     * given delay, or to execute periodically.\n     * @param corePoolSize the number of threads to keep in the pool,\n     * even if they are idle\n     * @return the newly created scheduled thread pool\n     * @throws IllegalArgumentException if {@code corePoolSize < 0}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)",
    "returnType" : "ScheduledExecutorService",
    "comment" : "\n     * Creates a thread pool that can schedule commands to run after a\n     * given delay, or to execute periodically.\n     * @param corePoolSize the number of threads to keep in the pool,\n     * even if they are idle\n     * @param threadFactory the factory to use when the executor\n     * creates a new thread\n     * @return the newly created scheduled thread pool\n     * @throws IllegalArgumentException if {@code corePoolSize < 0}\n     * @throws NullPointerException if threadFactory is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ExecutorService unconfigurableExecutorService(ExecutorService executor)",
    "returnType" : "ExecutorService",
    "comment" : "\n     * Returns an object that delegates all defined {@link\n     * ExecutorService} methods to the given executor, but not any\n     * other methods that might otherwise be accessible using\n     * casts. This provides a way to safely \"freeze\" configuration and\n     * disallow tuning of a given concrete implementation.\n     * @param executor the underlying implementation\n     * @return an {@code ExecutorService} instance\n     * @throws NullPointerException if executor null\n     ",
    "links" : [ "java.util.concurrent.ExecutorService" ]
  }, {
    "name" : "public static ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)",
    "returnType" : "ScheduledExecutorService",
    "comment" : "\n     * Returns an object that delegates all defined {@link\n     * ScheduledExecutorService} methods to the given executor, but\n     * not any other methods that might otherwise be accessible using\n     * casts. This provides a way to safely \"freeze\" configuration and\n     * disallow tuning of a given concrete implementation.\n     * @param executor the underlying implementation\n     * @return a {@code ScheduledExecutorService} instance\n     * @throws NullPointerException if executor null\n     ",
    "links" : [ "java.util.concurrent.ScheduledExecutorService" ]
  }, {
    "name" : "public static ThreadFactory defaultThreadFactory()",
    "returnType" : "ThreadFactory",
    "comment" : "\n     * Returns a default thread factory used to create new threads.\n     * This factory creates all new threads used by an Executor in the\n     * same {@link ThreadGroup}. Each new\n     * thread is created as a non-daemon thread with priority set to\n     * the smaller of {@code Thread.NORM_PRIORITY} and the maximum\n     * priority permitted in the thread group.  New threads have names\n     * accessible via {@link Thread#getName} of\n     * <em>pool-N-thread-M</em>, where <em>N</em> is the sequence\n     * number of this factory, and <em>M</em> is the sequence number\n     * of the thread created by this factory.\n     * @return a thread factory\n     ",
    "links" : [ "#getName", "ThreadGroup" ]
  }, {
    "name" : "public static ThreadFactory privilegedThreadFactory()",
    "returnType" : "ThreadFactory",
    "comment" : "\n     * Legacy security code; do not use.\n     *\n     * @deprecated This method is only useful in conjunction with\n     *       {@linkplain SecurityManager the Security Manager}, which is\n     *       deprecated and subject to removal in a future release.\n     *       Consequently, this method is also deprecated and subject to\n     *       removal. There is no replacement for the Security Manager or this\n     *       method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Callable<T> callable(Runnable task, T result)",
    "returnType" : "Callable<T>",
    "comment" : "\n     * Returns a {@link Callable} object that, when\n     * called, runs the given task and returns the given result.  This\n     * can be useful when applying methods requiring a\n     * {@code Callable} to an otherwise resultless action.\n     * @param task the task to run\n     * @param result the result to return\n     * @param <T> the type of the result\n     * @return a callable object\n     * @throws NullPointerException if task null\n     ",
    "links" : [ "java.util.concurrent.Callable" ]
  }, {
    "name" : "public static Callable<Object> callable(Runnable task)",
    "returnType" : "Callable<Object>",
    "comment" : "\n     * Returns a {@link Callable} object that, when\n     * called, runs the given task and returns {@code null}.\n     * @param task the task to run\n     * @return a callable object\n     * @throws NullPointerException if task null\n     ",
    "links" : [ "java.util.concurrent.Callable" ]
  }, {
    "name" : "public static Callable<Object> callable(final PrivilegedAction<?> action)",
    "returnType" : "Callable<Object>",
    "comment" : "\n     * Returns a {@link Callable} object that, when\n     * called, runs the given privileged action and returns its result.\n     * @param action the privileged action to run\n     * @return a callable object\n     * @throws NullPointerException if action null\n     ",
    "links" : [ "java.util.concurrent.Callable" ]
  }, {
    "name" : "public static Callable<Object> callable(final PrivilegedExceptionAction<?> action)",
    "returnType" : "Callable<Object>",
    "comment" : "\n     * Returns a {@link Callable} object that, when\n     * called, runs the given privileged exception action and returns\n     * its result.\n     * @param action the privileged exception action to run\n     * @return a callable object\n     * @throws NullPointerException if action null\n     ",
    "links" : [ "java.util.concurrent.Callable" ]
  }, {
    "name" : "public static Callable<T> privilegedCallable(Callable<T> callable)",
    "returnType" : "Callable<T>",
    "comment" : "\n     * Legacy security code; do not use.\n     *\n     * @deprecated This method is only useful in conjunction with\n     *       {@linkplain SecurityManager the Security Manager}, which is\n     *       deprecated and subject to removal in a future release.\n     *       Consequently, this method is also deprecated and subject to\n     *       removal. There is no replacement for the Security Manager or this\n     *       method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable)",
    "returnType" : "Callable<T>",
    "comment" : "\n     * Legacy security code; do not use.\n     *\n     * @deprecated This method is only useful in conjunction with\n     *       {@linkplain SecurityManager the Security Manager}, which is\n     *       deprecated and subject to removal in a future release.\n     *       Consequently, this method is also deprecated and subject to\n     *       removal. There is no replacement for the Security Manager or this\n     *       method.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ExecutorService newFixedThreadPool(int nThreads)", "public static ExecutorService newWorkStealingPool(int parallelism)", "public static ExecutorService newWorkStealingPool()", "public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory)", "public static ExecutorService newSingleThreadExecutor()", "public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)", "public static ExecutorService newCachedThreadPool()", "public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory)", "public static ScheduledExecutorService newSingleThreadScheduledExecutor()", "public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)", "public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)", "public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)", "public static ExecutorService unconfigurableExecutorService(ExecutorService executor)", "public static ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)", "public static ThreadFactory defaultThreadFactory()", "public static ThreadFactory privilegedThreadFactory()", "public static Callable<T> callable(Runnable task, T result)", "public static Callable<Object> callable(Runnable task)", "public static Callable<Object> callable(final PrivilegedAction<?> action)", "public static Callable<Object> callable(final PrivilegedExceptionAction<?> action)", "public static Callable<T> privilegedCallable(Callable<T> callable)", "public static Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable)" ],
  "variableNames" : [ ]
}