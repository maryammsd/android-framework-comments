{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/task/ChainedTasks.java",
  "packageName" : "org.chromium.base.task",
  "className" : "ChainedTasks",
  "comment" : "\n * Allows chaining multiple tasks on arbitrary threads, with the next task posted when one\n * completes.\n *\n * How this differs from SequencedTaskRunner:\n * Deferred posting of subsequent tasks allows more time for Android framework tasks to run\n * (e.g. input events). As such, this class really only makes sense when submitting tasks to\n * SingleThreadTaskRunners.\n *\n * Threading:\n * - This class is threadsafe and all methods may be called from any thread.\n * - Tasks may run with arbitrary TaskTraits, unless tasks are coalesced, in which case all tasks\n *   must run on the same thread.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTasks",
    "type" : "LinkedList<Pair<Integer, Runnable>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinalized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanceled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIterationIdForTesting",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunAndPost",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(@TaskTraits int traits, Runnable task)",
    "returnType" : "void",
    "comment" : "\n     * Adds a task to the list of tasks to run. Cannot be called once {@link start()} has been\n     * called.\n     ",
    "links" : [ "start()" ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : " Cancels the remaining tasks. ",
    "links" : [ ]
  }, {
    "name" : "public void start(final boolean coalesceTasks)",
    "returnType" : "void",
    "comment" : "\n     * Posts or runs all the tasks, one by one.\n     *\n     * @param coalesceTasks if false, posts the tasks. Otherwise run them in a single task. If\n     * called on the thread matching the TaskTraits, will block and run all tasks synchronously.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(@TaskTraits int traits, Runnable task)", "public void cancel()", "public void start(final boolean coalesceTasks)" ],
  "variableNames" : [ "mTasks", "mFinalized", "mCanceled", "mIterationIdForTesting", "mRunAndPost" ]
}