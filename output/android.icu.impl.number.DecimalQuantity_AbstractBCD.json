{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/DecimalQuantity_AbstractBCD.java",
  "packageName" : "android.icu.impl.number",
  "className" : "DecimalQuantity_AbstractBCD",
  "comment" : "\n * Represents numbers and digit display properties using Binary Coded Decimal (BCD).\n *\n * @implements {@link DecimalQuantity}\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "android.icu.impl.number.DecimalQuantity" ],
  "variables" : [ {
    "name" : "scale",
    "type" : "int",
    "comment" : "\n     * The power of ten corresponding to the least significant digit in the BCD. For example, if this\n     * object represents the number \"3.14\", the BCD will be \"0x314\" and the scale will be -2.\n     *\n     * <p>\n     * Note that in {@link java.math.BigDecimal}, the scale is defined differently: the number of digits\n     * after the decimal place, which is the negative of our definition of scale.\n     ",
    "links" : [ "java.math.BigDecimal" ]
  }, {
    "name" : "precision",
    "type" : "int",
    "comment" : "\n     * The number of digits in the BCD. For example, \"1007\" has BCD \"0x1007\" and precision 4. A long\n     * cannot represent precisions greater than 16.\n     *\n     * <p>\n     * This value must be re-calculated whenever the value in bcd changes by using\n     * {@link #computePrecisionAndCompact()}.\n     ",
    "links" : [ "#computePrecisionAndCompact()" ]
  }, {
    "name" : "flags",
    "type" : "byte",
    "comment" : "\n     * A bitmask of properties relating to the number represented by this object.\n     *\n     * @see #NEGATIVE_FLAG\n     * @see #INFINITY_FLAG\n     * @see #NAN_FLAG\n     ",
    "links" : [ ]
  }, {
    "name" : "NEGATIVE_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INFINITY_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAN_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "origDouble",
    "type" : "double",
    "comment" : "\n     * The original number provided by the user and which is represented in BCD. Used when we need to\n     * re-compute the BCD for an exact double representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "origDelta",
    "type" : "int",
    "comment" : "\n     * The change in magnitude relative to the original double. Used when we need to re-compute the BCD\n     * for an exact double representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "isApproximate",
    "type" : "boolean",
    "comment" : "\n     * Whether the value in the BCD comes from the double fast path without having been rounded to ensure\n     * correctness\n     ",
    "links" : [ ]
  }, {
    "name" : "lReqPos",
    "type" : "int",
    "comment" : " rReqPos is the magnitude of the last required trailing zero.",
    "links" : [ ]
  }, {
    "name" : "rReqPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "exponent",
    "type" : "int",
    "comment" : "\n     * The value of the (suppressed) exponent after the number has been put into\n     * a notation with exponents (ex: compact, scientific).\n     ",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_MULTIPLIERS",
    "type" : "double[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "explicitExactDouble",
    "type" : "boolean",
    "comment" : "\n     * Whether this {@link DecimalQuantity_DualStorageBCD} has been explicitly converted to an exact\n     * double. true if backed by a double that was explicitly converted via convertToAccurateDouble;\n     * false otherwise. Used for testing.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.impl.number.DecimalQuantity_DualStorageBCD" ]
  }, {
    "name" : "INT64_BCD",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECTION_LOWER_EDGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECTION_UPPER_EDGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void copyFrom(DecimalQuantity _other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DecimalQuantity_AbstractBCD clear()",
    "returnType" : "DecimalQuantity_AbstractBCD",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinInteger(int minInt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinFraction(int minFrac)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyMaxInteger(int maxInt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getPositionFingerprint()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void roundToIncrement(BigDecimal roundingIncrement, MathContext mathContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void multiplyBy(BigDecimal multiplicand)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void negate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMagnitude() throws ArithmeticException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void adjustMagnitude(int delta)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getExponent()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void adjustExponent(int delta)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resetExponent()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHasIntegerValue()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StandardPlural getStandardPlural(PluralRules rules)",
    "returnType" : "StandardPlural",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double getPluralOperand(Operand operand)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void populateUFieldPosition(FieldPosition fp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUpperDisplayMagnitude()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLowerDisplayMagnitude()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte getDigit(int magnitude)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int fractionCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int fractionCountWithoutTrailingZeros()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNegative()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Signum signum()",
    "returnType" : "Signum",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInfinite()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNaN()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isZeroish()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setToInt(int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void _setToInt(int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setToLong(long n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void _setToLong(long n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setToBigInteger(BigInteger n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void _setToBigInteger(BigInteger n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setToDouble(double n)",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal BCD state to represent the value in the given double.\n     *\n     * @param n\n     *            The value to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void _setToDoubleFast(double n)",
    "returnType" : "void",
    "comment" : "\n     * Uses double multiplication and division to get the number into integer space before converting to\n     * digits. Since double arithmetic is inexact, the resulting digits may not be accurate.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void convertToAccurateDouble()",
    "returnType" : "void",
    "comment" : "\n     * Uses Double.toString() to obtain an exact accurate representation of the double, overwriting it\n     * into the BCD. This method can be called at any point after {@link #_setToDoubleFast} while\n     * {@link #isApproximate} is still true.\n     ",
    "links" : [ "#_setToDoubleFast", "#isApproximate" ]
  }, {
    "name" : "public void setToBigDecimal(BigDecimal n)",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal BCD state to represent the value in the given BigDecimal.\n     *\n     * @param n\n     *            The value to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void _setToBigDecimal(BigDecimal n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long toLong(boolean truncateIfOverflow)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long toFractionLong(boolean includeTrailingZeros)",
    "returnType" : "long",
    "comment" : "\n     * This returns a long representing the fraction digits of the number, as required by PluralRules.\n     * For example, if we represent the number \"1.20\" (including optional and required digits), then this\n     * function returns \"20\" if includeTrailingZeros is true or \"2\" if false.\n     * Note: this method incorporates the value of {@code exponent}\n     * (for cases such as compact notation) to return the proper long value\n     * represented by the result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean fitsInLong()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not a Long can fully represent the value stored in this DecimalQuantity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double toDouble()",
    "returnType" : "double",
    "comment" : "\n     * Returns a double approximating the internal BCD. The double may not retain all of the information\n     * encoded in the BCD if the BCD represents a number out of range of a double.\n     *\n     * @return A double representation of the internal BCD.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BigDecimal toBigDecimal()",
    "returnType" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int safeSubtract(int a, int b)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void truncate()",
    "returnType" : "void",
    "comment" : " Removes all fraction digits. ",
    "links" : [ ]
  }, {
    "name" : "public void roundToNickel(int magnitude, MathContext mathContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void roundToMagnitude(int magnitude, MathContext mathContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void roundToMagnitude(int magnitude, MathContext mathContext, boolean nickel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void roundToInfinity()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void appendDigit(byte value, int leadingZeros, boolean appendAsInteger)",
    "returnType" : "void",
    "comment" : "\n     * Appends a digit, optionally with one or more leading zeros, to the end of the value represented by\n     * this DecimalQuantity.\n     *\n     * <p>\n     * The primary use of this method is to construct numbers during a parsing loop. It allows parsing to\n     * take advantage of the digit list infrastructure primarily designed for formatting.\n     *\n     * @param value\n     *            The digit to append.\n     * @param leadingZeros\n     *            The number of zeros to append before the digit. For example, if the value in this\n     *            instance starts as 12.3, and you append a 4 with 1 leading zero, the value becomes\n     *            12.304.\n     * @param appendAsInteger\n     *            If true, increase the magnitude of existing digits to make room for the new digit. If\n     *            false, append to the end like a fraction digit. If true, there must not be any fraction\n     *            digits already in the number.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toPlainString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toPlainString(StringBuilder result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toScientificString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toScientificString(StringBuilder result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toExponentString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void toExponentString(StringBuilder result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte getDigitPos(int position)",
    "returnType" : "byte",
    "comment" : "\n     * Returns a single digit from the BCD list. No internal state is changed by calling this method.\n     *\n     * @param position\n     *            The position of the digit to pop, counted in BCD units from the least significant\n     *            digit. If outside the range supported by the implementation, zero is returned.\n     * @return The digit at the specified location.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void setDigitPos(int position, byte value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the digit in the BCD list. This method only sets the digit; it is the caller's\n     * responsibility to call {@link #compact} after setting the digit, and to ensure\n     * that the precision field is updated to reflect the correct number of digits if a\n     * nonzero digit is added to the decimal.\n     *\n     * @param position\n     *            The position of the digit to pop, counted in BCD units from the least significant\n     *            digit. If outside the range supported by the implementation, an AssertionError is\n     *            thrown.\n     * @param value\n     *            The digit to set at the specified location.\n     ",
    "links" : [ "#compact" ]
  }, {
    "name" : "protected abstract void shiftLeft(int numDigits)",
    "returnType" : "void",
    "comment" : "\n     * Adds zeros to the end of the BCD list. This will result in an invalid BCD representation; it is\n     * the caller's responsibility to do further manipulation and then call {@link #compact}.\n     *\n     * @param numDigits\n     *            The number of zeros to add.\n     ",
    "links" : [ "#compact" ]
  }, {
    "name" : "protected abstract void shiftRight(int numDigits)",
    "returnType" : "void",
    "comment" : "\n     * Removes digits from the end of the BCD list. This may result in an invalid BCD representation; it\n     * is the caller's responsibility to follow-up with a call to {@link #compact}.\n     *\n     * @param numDigits\n     *            The number of digits to remove.\n     ",
    "links" : [ "#compact" ]
  }, {
    "name" : "protected abstract void popFromLeft(int numDigits)",
    "returnType" : "void",
    "comment" : "\n     * Directly removes digits from the front of the BCD list.\n     * Updates precision.\n     *\n     * CAUTION: it is the caller's responsibility to call {@link #compact} after this method.\n     ",
    "links" : [ "#compact" ]
  }, {
    "name" : "protected abstract void setBcdToZero()",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal representation to zero. Clears any values stored in scale, precision, hasDouble,\n     * origDouble, origDelta, exponent, and BCD data.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void readIntToBcd(int input)",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal BCD state to represent the value in the given int. The int is guaranteed to be\n     * either positive. The internal state is guaranteed to be empty when this method is called.\n     *\n     * @param n\n     *            The value to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void readLongToBcd(long input)",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal BCD state to represent the value in the given long. The long is guaranteed to be\n     * either positive. The internal state is guaranteed to be empty when this method is called.\n     *\n     * @param n\n     *            The value to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void readBigIntegerToBcd(BigInteger input)",
    "returnType" : "void",
    "comment" : "\n     * Sets the internal BCD state to represent the value in the given BigInteger. The BigInteger is\n     * guaranteed to be positive, and it is guaranteed to be larger than Long.MAX_VALUE. The internal\n     * state is guaranteed to be empty when this method is called.\n     *\n     * @param n\n     *            The value to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract BigDecimal bcdToBigDecimal()",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Returns a BigDecimal encoding the internal BCD value.\n     *\n     * @return A BigDecimal representation of the internal BCD.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void copyBcdFrom(DecimalQuantity _other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void compact()",
    "returnType" : "void",
    "comment" : "\n     * Removes trailing zeros from the BCD (adjusting the scale as required) and then computes the\n     * precision. The precision is the number of digits in the number up through the greatest nonzero\n     * digit.\n     *\n     * <p>\n     * This method must always be called when bcd changes in order for assumptions to be correct in\n     * methods like {@link #fractionCount()}.\n     ",
    "links" : [ "#fractionCount()" ]
  } ],
  "methodNames" : [ "public void copyFrom(DecimalQuantity _other)", "public DecimalQuantity_AbstractBCD clear()", "public void setMinInteger(int minInt)", "public void setMinFraction(int minFrac)", "public void applyMaxInteger(int maxInt)", "public long getPositionFingerprint()", "public void roundToIncrement(BigDecimal roundingIncrement, MathContext mathContext)", "public void multiplyBy(BigDecimal multiplicand)", "public void negate()", "public int getMagnitude() throws ArithmeticException", "public void adjustMagnitude(int delta)", "public int getExponent()", "public void adjustExponent(int delta)", "public void resetExponent()", "public boolean isHasIntegerValue()", "public StandardPlural getStandardPlural(PluralRules rules)", "public double getPluralOperand(Operand operand)", "public void populateUFieldPosition(FieldPosition fp)", "public int getUpperDisplayMagnitude()", "public int getLowerDisplayMagnitude()", "public byte getDigit(int magnitude)", "private int fractionCount()", "private int fractionCountWithoutTrailingZeros()", "public boolean isNegative()", "public Signum signum()", "public boolean isInfinite()", "public boolean isNaN()", "public boolean isZeroish()", "public void setToInt(int n)", "private void _setToInt(int n)", "public void setToLong(long n)", "private void _setToLong(long n)", "public void setToBigInteger(BigInteger n)", "private void _setToBigInteger(BigInteger n)", "public void setToDouble(double n)", "private void _setToDoubleFast(double n)", "private void convertToAccurateDouble()", "public void setToBigDecimal(BigDecimal n)", "private void _setToBigDecimal(BigDecimal n)", "public long toLong(boolean truncateIfOverflow)", "public long toFractionLong(boolean includeTrailingZeros)", "public boolean fitsInLong()", "public double toDouble()", "public BigDecimal toBigDecimal()", "private static int safeSubtract(int a, int b)", "public void truncate()", "public void roundToNickel(int magnitude, MathContext mathContext)", "public void roundToMagnitude(int magnitude, MathContext mathContext)", "private void roundToMagnitude(int magnitude, MathContext mathContext, boolean nickel)", "public void roundToInfinity()", "public void appendDigit(byte value, int leadingZeros, boolean appendAsInteger)", "public String toPlainString()", "public void toPlainString(StringBuilder result)", "public String toScientificString()", "public void toScientificString(StringBuilder result)", "public String toExponentString()", "private void toExponentString(StringBuilder result)", "public boolean equals(Object other)", "protected abstract byte getDigitPos(int position)", "protected abstract void setDigitPos(int position, byte value)", "protected abstract void shiftLeft(int numDigits)", "protected abstract void shiftRight(int numDigits)", "protected abstract void popFromLeft(int numDigits)", "protected abstract void setBcdToZero()", "protected abstract void readIntToBcd(int input)", "protected abstract void readLongToBcd(long input)", "protected abstract void readBigIntegerToBcd(BigInteger input)", "protected abstract BigDecimal bcdToBigDecimal()", "protected abstract void copyBcdFrom(DecimalQuantity _other)", "protected abstract void compact()" ],
  "variableNames" : [ "scale", "precision", "flags", "NEGATIVE_FLAG", "INFINITY_FLAG", "NAN_FLAG", "origDouble", "origDelta", "isApproximate", "lReqPos", "rReqPos", "exponent", "DOUBLE_MULTIPLIERS", "explicitExactDouble", "INT64_BCD", "SECTION_LOWER_EDGE", "SECTION_UPPER_EDGE" ]
}