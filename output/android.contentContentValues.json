{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ContentValues.java",
  "packageName" : "android.content",
  "className" : "ContentValues",
  "comment" : "\n * This class is used to store a set of values that the {@link ContentResolver}\n * can process.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "HashMap<String, Object>",
    "comment" : "\n     * @hide\n     * @deprecated kept around for lame people doing reflection\n     ",
    "links" : [ ]
  }, {
    "name" : "mMap",
    "type" : "ArrayMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ContentValues>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object object)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayMap<String, Object> getValues()",
    "returnType" : "ArrayMap<String, Object>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putAll(ContentValues other)",
    "returnType" : "void",
    "comment" : "\n     * Adds all values from the passed in ContentValues.\n     *\n     * @param other the ContentValues from which to copy\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Byte value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Short value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Integer value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Long value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Float value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Double value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, Boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(String key, byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a value to the set.\n     *\n     * @param key the name of the value to put\n     * @param value the data for the value to put\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putNull(String key)",
    "returnType" : "void",
    "comment" : "\n     * Adds a null value to the set.\n     *\n     * @param key the name of the value to make null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putObject(@Nullable String key, @Nullable Object value)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of values.\n     *\n     * @return the number of values\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this collection is empty.\n     *\n     * @return true iff size == 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(String key)",
    "returnType" : "void",
    "comment" : "\n     * Remove a single value.\n     *\n     * @param key the name of the value to remove\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object has the named value.\n     *\n     * @param key the value to check for\n     * @return {@code true} if the value is present, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object get(String key)",
    "returnType" : "Object",
    "comment" : "\n     * Gets a value. Valid value types are {@link String}, {@link Boolean},\n     * {@link Number}, and {@code byte[]} implementations.\n     *\n     * @param key the value to get\n     * @return the data for the value, or {@code null} if the value is missing or if {@code null}\n     *         was previously added with the given {@code key}\n     ",
    "links" : [ "String", "Boolean", "Number" ]
  }, {
    "name" : "public String getAsString(String key)",
    "returnType" : "String",
    "comment" : "\n     * Gets a value and converts it to a String.\n     *\n     * @param key the value to get\n     * @return the String for the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public Long getAsLong(String key)",
    "returnType" : "Long",
    "comment" : "\n     * Gets a value and converts it to a Long.\n     *\n     * @param key the value to get\n     * @return the Long value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public Integer getAsInteger(String key)",
    "returnType" : "Integer",
    "comment" : "\n     * Gets a value and converts it to an Integer.\n     *\n     * @param key the value to get\n     * @return the Integer value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public Short getAsShort(String key)",
    "returnType" : "Short",
    "comment" : "\n     * Gets a value and converts it to a Short.\n     *\n     * @param key the value to get\n     * @return the Short value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public Byte getAsByte(String key)",
    "returnType" : "Byte",
    "comment" : "\n     * Gets a value and converts it to a Byte.\n     *\n     * @param key the value to get\n     * @return the Byte value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public Double getAsDouble(String key)",
    "returnType" : "Double",
    "comment" : "\n     * Gets a value and converts it to a Double.\n     *\n     * @param key the value to get\n     * @return the Double value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public Float getAsFloat(String key)",
    "returnType" : "Float",
    "comment" : "\n     * Gets a value and converts it to a Float.\n     *\n     * @param key the value to get\n     * @return the Float value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public Boolean getAsBoolean(String key)",
    "returnType" : "Boolean",
    "comment" : "\n     * Gets a value and converts it to a Boolean.\n     *\n     * @param key the value to get\n     * @return the Boolean value, or {@code null} if the value is missing or cannot be converted\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getAsByteArray(String key)",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets a value that is a byte array. Note that this method will not convert\n     * any other types to byte arrays.\n     *\n     * @param key the value to get\n     * @return the {@code byte[]} value, or {@code null} is the value is missing or not a\n     *         {@code byte[]}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Map.Entry<String, Object>> valueSet()",
    "returnType" : "Set<Map.Entry<String, Object>>",
    "comment" : "\n     * Returns a set of all of the keys and values\n     *\n     * @return a set of all of the keys and values\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> keySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a set of all of the keys\n     *\n     * @return a set of all of the keys\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void putStringArrayList(String key, ArrayList<String> value)",
    "returnType" : "void",
    "comment" : "\n     * Unsupported, here until we get proper bulk insert APIs.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<String> getStringArrayList(String key)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Unsupported, here until we get proper bulk insert APIs.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string containing a concise, human-readable description of this object.\n     * @return a printable representation of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSupportedValue(Object value)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mValues", "mMap", "CREATOR" ],
  "methodNames" : [ "public boolean equals(Object object)", "public ArrayMap<String, Object> getValues()", "public int hashCode()", "public void put(String key, String value)", "public void putAll(ContentValues other)", "public void put(String key, Byte value)", "public void put(String key, Short value)", "public void put(String key, Integer value)", "public void put(String key, Long value)", "public void put(String key, Float value)", "public void put(String key, Double value)", "public void put(String key, Boolean value)", "public void put(String key, byte[] value)", "public void putNull(String key)", "public void putObject(@Nullable String key, @Nullable Object value)", "public int size()", "public boolean isEmpty()", "public void remove(String key)", "public void clear()", "public boolean containsKey(String key)", "public Object get(String key)", "public String getAsString(String key)", "public Long getAsLong(String key)", "public Integer getAsInteger(String key)", "public Short getAsShort(String key)", "public Byte getAsByte(String key)", "public Double getAsDouble(String key)", "public Float getAsFloat(String key)", "public Boolean getAsBoolean(String key)", "public byte[] getAsByteArray(String key)", "public Set<Map.Entry<String, Object>> valueSet()", "public Set<String> keySet()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public void putStringArrayList(String key, ArrayList<String> value)", "public ArrayList<String> getStringArrayList(String key)", "public String toString()", "public static boolean isSupportedValue(Object value)" ]
}