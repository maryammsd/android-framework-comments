{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Queue.java",
  "packageName" : "java.util",
  "className" : "Queue",
  "comment" : "\n * A collection designed for holding elements prior to processing.\n * Besides basic {@link Collection} operations, queues provide\n * additional insertion, extraction, and inspection operations.\n * Each of these methods exists in two forms: one throws an exception\n * if the operation fails, the other returns a special value (either\n * {@code null} or {@code false}, depending on the operation).  The\n * latter form of the insert operation is designed specifically for\n * use with capacity-restricted {@code Queue} implementations; in most\n * implementations, insert operations cannot fail.\n *\n * <table class=\"striped\">\n * <caption>Summary of Queue methods</caption>\n *  <thead>\n *  <tr>\n *    <td></td>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Throws exception</th>\n *    <th scope=\"col\" style=\"font-weight:normal; font-style:italic\">Returns special value</th>\n *  </tr>\n *  </thead>\n *  <tbody>\n *  <tr>\n *    <th scope=\"row\">Insert</th>\n *    <td>{@link #add(Object) add(e)}</td>\n *    <td>{@link #offer(Object) offer(e)}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">Remove</th>\n *    <td>{@link #remove() remove()}</td>\n *    <td>{@link #poll() poll()}</td>\n *  </tr>\n *  <tr>\n *    <th scope=\"row\">Examine</th>\n *    <td>{@link #element() element()}</td>\n *    <td>{@link #peek() peek()}</td>\n *  </tr>\n *  </tbody>\n * </table>\n *\n * <p>Queues typically, but do not necessarily, order elements in a\n * FIFO (first-in-first-out) manner.  Among the exceptions are\n * priority queues, which order elements according to a supplied\n * comparator, or the elements' natural ordering, and LIFO queues (or\n * stacks) which order the elements LIFO (last-in-first-out).\n * Whatever the ordering used, the <em>head</em> of the queue is that\n * element which would be removed by a call to {@link #remove()} or\n * {@link #poll()}.  In a FIFO queue, all new elements are inserted at\n * the <em>tail</em> of the queue. Other kinds of queues may use\n * different placement rules.  Every {@code Queue} implementation\n * must specify its ordering properties.\n *\n * <p>The {@link #offer offer} method inserts an element if possible,\n * otherwise returning {@code false}.  This differs from the {@link\n * java.util.Collection#add Collection.add} method, which can fail to\n * add an element only by throwing an unchecked exception.  The\n * {@code offer} method is designed for use when failure is a normal,\n * rather than exceptional occurrence, for example, in fixed-capacity\n * (or &quot;bounded&quot;) queues.\n *\n * <p>The {@link #remove()} and {@link #poll()} methods remove and\n * return the head of the queue.\n * Exactly which element is removed from the queue is a\n * function of the queue's ordering policy, which differs from\n * implementation to implementation. The {@code remove()} and\n * {@code poll()} methods differ only in their behavior when the\n * queue is empty: the {@code remove()} method throws an exception,\n * while the {@code poll()} method returns {@code null}.\n *\n * <p>The {@link #element()} and {@link #peek()} methods return, but do\n * not remove, the head of the queue.\n *\n * <p>The {@code Queue} interface does not define the <i>blocking queue\n * methods</i>, which are common in concurrent programming.  These methods,\n * which wait for elements to appear or for space to become available, are\n * defined in the {@link java.util.concurrent.BlockingQueue} interface, which\n * extends this interface.\n *\n * <p>{@code Queue} implementations generally do not allow insertion\n * of {@code null} elements, although some implementations, such as\n * {@link LinkedList}, do not prohibit insertion of {@code null}.\n * Even in the implementations that permit it, {@code null} should\n * not be inserted into a {@code Queue}, as {@code null} is also\n * used as a special return value by the {@code poll} method to\n * indicate that the queue contains no elements.\n *\n * <p>{@code Queue} implementations generally do not define\n * element-based versions of methods {@code equals} and\n * {@code hashCode} but instead inherit the identity based versions\n * from class {@code Object}, because element-based equality is not\n * always well-defined for queues with the same elements but different\n * ordering properties.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "#remove()", "#poll()", "java.util.Collection", "#add(Object)", "#peek()", "java.util.concurrent.BlockingQueue", "#element()", "#offer(Object)", "#offer", "java.util.LinkedList", "java.util.Collection#add" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an {@code IllegalStateException}\n     * if no space is currently available.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : " boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this queue if it is possible to do\n     * so immediately without violating capacity restrictions.\n     * When using a capacity-restricted queue, this method is generally\n     * preferable to {@link #add}, which can fail to insert an element only\n     * by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this queue, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : " E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue.  This method differs\n     * from {@link #poll() poll()} only in that it throws an exception if\n     * this queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     ",
    "links" : [ "#poll()" ]
  }, {
    "name" : " E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue,\n     * or returns {@code null} if this queue is empty.\n     *\n     * @return the head of this queue, or {@code null} if this queue is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of this queue.  This method\n     * differs from {@link #peek peek} only in that it throws an exception\n     * if this queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     ",
    "links" : [ "#peek" ]
  }, {
    "name" : " E peek()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of this queue,\n     * or returns {@code null} if this queue is empty.\n     *\n     * @return the head of this queue, or {@code null} if this queue is empty\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean add(E e)", " boolean offer(E e)", " E remove()", " E poll()", " E element()", " E peek()" ],
  "variableNames" : [ ]
}