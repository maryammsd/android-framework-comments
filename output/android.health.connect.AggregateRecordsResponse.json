{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/health/connect/AggregateRecordsResponse.java",
  "packageName" : "android.health.connect",
  "className" : "AggregateRecordsResponse",
  "comment" : " A class representing response for {@link HealthConnectManager#aggregate} ",
  "links" : [ "android.health.connect.HealthConnectManager#aggregate" ],
  "variables" : [ {
    "name" : "mAggregateResults",
    "type" : "Map<AggregationType<T>, AggregateResult<T>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ZoneOffset getZoneOffsetInternal(@NonNull AggregationType<U> aggregationType, Map<AggregationType<U>, AggregateResult<U>> mAggregateResults)",
    "returnType" : "ZoneOffset",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Set<DataOrigin> getDataOriginsInternal(@NonNull AggregationType<U> aggregationType, Map<AggregationType<U>, AggregateResult<U>> mAggregateResults)",
    "returnType" : "Set<DataOrigin>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static U getInternal(@NonNull AggregationType<U> aggregationType, Map<AggregationType<U>, AggregateResult<U>> mAggregateResults)",
    "returnType" : "U",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Map<Integer, AggregateResult<?>> getAggregateResults()",
    "returnType" : "Map<Integer, AggregateResult<?>>",
    "comment" : "\n     * @return a map of {@link AggregationType} -> {@link AggregateResult}\n     * @hide\n     ",
    "links" : [ "android.health.connect.datatypes.AggregationType", "android.health.connect.AggregateResult" ]
  }, {
    "name" : "public T get(@NonNull AggregationType<T> aggregationType)",
    "returnType" : "T",
    "comment" : "\n     * @return an aggregation result for {@code aggregationType}. *\n     * @param aggregationType {@link AggregationType} for which to get the result\n     ",
    "links" : [ "android.health.connect.datatypes.AggregationType" ]
  }, {
    "name" : "public ZoneOffset getZoneOffset(@NonNull AggregationType<T> aggregationType)",
    "returnType" : "ZoneOffset",
    "comment" : "\n     * @return {@link ZoneOffset} for the underlying aggregation record, null if the corresponding\n     *     aggregation doesn't exist and or if multiple records were present.\n     ",
    "links" : [ "java.time.ZoneOffset" ]
  }, {
    "name" : "public ZoneOffset getFirstZoneOffset()",
    "returnType" : "ZoneOffset",
    "comment" : "\n     * Returns {@link ZoneOffset} of the first {@link AggregationType}.\n     *\n     * @hide\n     ",
    "links" : [ "android.health.connect.datatypes.AggregationType", "java.time.ZoneOffset" ]
  }, {
    "name" : "private AggregationType<T> getFirstAggregationType()",
    "returnType" : "AggregationType<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<DataOrigin> getDataOrigins(@NonNull AggregationType<T> aggregationType)",
    "returnType" : "Set<DataOrigin>",
    "comment" : "\n     * Returns a set of {@link DataOrigin}s for the underlying aggregation record, empty set if the\n     * corresponding aggregation doesn't exist and or if multiple records were present.\n     ",
    "links" : [ "android.health.connect.datatypes.DataOrigin" ]
  } ],
  "methodNames" : [ "public static ZoneOffset getZoneOffsetInternal(@NonNull AggregationType<U> aggregationType, Map<AggregationType<U>, AggregateResult<U>> mAggregateResults)", "public static Set<DataOrigin> getDataOriginsInternal(@NonNull AggregationType<U> aggregationType, Map<AggregationType<U>, AggregateResult<U>> mAggregateResults)", "public static U getInternal(@NonNull AggregationType<U> aggregationType, Map<AggregationType<U>, AggregateResult<U>> mAggregateResults)", "public Map<Integer, AggregateResult<?>> getAggregateResults()", "public T get(@NonNull AggregationType<T> aggregationType)", "public ZoneOffset getZoneOffset(@NonNull AggregationType<T> aggregationType)", "public ZoneOffset getFirstZoneOffset()", "private AggregationType<T> getFirstAggregationType()", "public Set<DataOrigin> getDataOrigins(@NonNull AggregationType<T> aggregationType)" ],
  "variableNames" : [ "mAggregateResults" ]
}