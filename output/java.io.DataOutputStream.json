{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/DataOutputStream.java",
  "packageName" : "java.io",
  "className" : "DataOutputStream",
  "comment" : "\n * A data output stream lets an application write primitive Java data\n * types to an output stream in a portable way. An application can\n * then use a data input stream to read the data back in.\n *\n * @author  unascribed\n * @see     java.io.DataInputStream\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "written",
    "type" : "int",
    "comment" : "\n     * The number of bytes written to the data output stream so far.\n     * If this counter overflows, it will be wrapped to Integer.MAX_VALUE.\n     ",
    "links" : [ ]
  }, {
    "name" : "bytearr",
    "type" : "byte[]",
    "comment" : "\n     * bytearr is initialized on demand by writeUTF\n     ",
    "links" : [ ]
  }, {
    "name" : "writeBuffer",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void incCount(int value)",
    "returnType" : "void",
    "comment" : "\n     * Increases the written counter by the specified value\n     * until it reaches Integer.MAX_VALUE.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte (the low eight bits of the argument\n     * <code>b</code>) to the underlying output stream. If no exception\n     * is thrown, the counter <code>written</code> is incremented by\n     * <code>1</code>.\n     * <p>\n     * Implements the <code>write</code> method of <code>OutputStream</code>.\n     *\n     * @param      b   the <code>byte</code> to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>len</code> bytes from the specified byte array\n     * starting at offset <code>off</code> to the underlying output stream.\n     * If no exception is thrown, the counter <code>written</code> is\n     * incremented by <code>len</code>.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this data output stream. This forces any buffered output\n     * bytes to be written out to the stream.\n     * <p>\n     * The <code>flush</code> method of <code>DataOutputStream</code>\n     * calls the <code>flush</code> method of its underlying output stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     * @see        java.io.OutputStream#flush()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeBoolean(boolean v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>boolean</code> to the underlying output stream as\n     * a 1-byte value. The value <code>true</code> is written out as the\n     * value <code>(byte)1</code>; the value <code>false</code> is\n     * written out as the value <code>(byte)0</code>. If no exception is\n     * thrown, the counter <code>written</code> is incremented by\n     * <code>1</code>.\n     *\n     * @param      v   a <code>boolean</code> value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeByte(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes out a <code>byte</code> to the underlying output stream as\n     * a 1-byte value. If no exception is thrown, the counter\n     * <code>written</code> is incremented by <code>1</code>.\n     *\n     * @param      v   a <code>byte</code> value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeShort(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>short</code> to the underlying output stream as two\n     * bytes, high byte first. If no exception is thrown, the counter\n     * <code>written</code> is incremented by <code>2</code>.\n     *\n     * @param      v   a <code>short</code> to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeChar(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>char</code> to the underlying output stream as a\n     * 2-byte value, high byte first. If no exception is thrown, the\n     * counter <code>written</code> is incremented by <code>2</code>.\n     *\n     * @param      v   a <code>char</code> value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeInt(int v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes an <code>int</code> to the underlying output stream as four\n     * bytes, high byte first. If no exception is thrown, the counter\n     * <code>written</code> is incremented by <code>4</code>.\n     *\n     * @param      v   an <code>int</code> to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeLong(long v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a <code>long</code> to the underlying output stream as eight\n     * bytes, high byte first. In no exception is thrown, the counter\n     * <code>written</code> is incremented by <code>8</code>.\n     *\n     * @param      v   a <code>long</code> to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeFloat(float v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Converts the float argument to an <code>int</code> using the\n     * <code>floatToIntBits</code> method in class <code>Float</code>,\n     * and then writes that <code>int</code> value to the underlying\n     * output stream as a 4-byte quantity, high byte first. If no\n     * exception is thrown, the counter <code>written</code> is\n     * incremented by <code>4</code>.\n     *\n     * @param      v   a <code>float</code> value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     * @see        java.lang.Float#floatToIntBits(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeDouble(double v) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Converts the double argument to a <code>long</code> using the\n     * <code>doubleToLongBits</code> method in class <code>Double</code>,\n     * and then writes that <code>long</code> value to the underlying\n     * output stream as an 8-byte quantity, high byte first. If no\n     * exception is thrown, the counter <code>written</code> is\n     * incremented by <code>8</code>.\n     *\n     * @param      v   a <code>double</code> value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     * @see        java.lang.Double#doubleToLongBits(double)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeBytes(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes out the string to the underlying output stream as a\n     * sequence of bytes. Each character in the string is written out, in\n     * sequence, by discarding its high eight bits. If no exception is\n     * thrown, the counter <code>written</code> is incremented by the\n     * length of <code>s</code>.\n     *\n     * @param      s   a string of bytes to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeChars(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a string to the underlying output stream as a sequence of\n     * characters. Each character is written to the data output stream as\n     * if by the <code>writeChar</code> method. If no exception is\n     * thrown, the counter <code>written</code> is incremented by twice\n     * the length of <code>s</code>.\n     *\n     * @param      s   a <code>String</code> value to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.DataOutputStream#writeChar(int)\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void writeUTF(String str) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a string to the underlying output stream using\n     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n     * encoding in a machine-independent manner.\n     * <p>\n     * First, two bytes are written to the output stream as if by the\n     * <code>writeShort</code> method giving the number of bytes to\n     * follow. This value is the number of bytes actually written out,\n     * not the length of the string. Following the length, each character\n     * of the string is output, in sequence, using the modified UTF-8 encoding\n     * for the character. If no exception is thrown, the counter\n     * <code>written</code> is incremented by the total number of\n     * bytes written to the output stream. This will be at least two\n     * plus the length of <code>str</code>, and at most two plus\n     * thrice the length of <code>str</code>.\n     *\n     * @param      str   a string to be written.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int writeUTF(String str, DataOutput out) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes a string to the specified DataOutput using\n     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n     * encoding in a machine-independent manner.\n     * <p>\n     * First, two bytes are written to out as if by the <code>writeShort</code>\n     * method giving the number of bytes to follow. This value is the number of\n     * bytes actually written out, not the length of the string. Following the\n     * length, each character of the string is output, in sequence, using the\n     * modified UTF-8 encoding for the character. If no exception is thrown, the\n     * counter <code>written</code> is incremented by the total number of\n     * bytes written to the output stream. This will be at least two\n     * plus the length of <code>str</code>, and at most two plus\n     * thrice the length of <code>str</code>.\n     *\n     * @param      str   a string to be written.\n     * @param      out   destination to write to\n     * @return     The number of bytes written out.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of the counter <code>written</code>,\n     * the number of bytes written to this data output stream so far.\n     * If the counter overflows, it will be wrapped to Integer.MAX_VALUE.\n     *\n     * @return  the value of the <code>written</code> field.\n     * @see     java.io.DataOutputStream#written\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void incCount(int value)", "public synchronized void write(int b) throws IOException", "public synchronized void write(byte[] b, int off, int len) throws IOException", "public void flush() throws IOException", "public final void writeBoolean(boolean v) throws IOException", "public final void writeByte(int v) throws IOException", "public final void writeShort(int v) throws IOException", "public final void writeChar(int v) throws IOException", "public final void writeInt(int v) throws IOException", "public final void writeLong(long v) throws IOException", "public final void writeFloat(float v) throws IOException", "public final void writeDouble(double v) throws IOException", "public final void writeBytes(String s) throws IOException", "public final void writeChars(String s) throws IOException", "public final void writeUTF(String str) throws IOException", " static int writeUTF(String str, DataOutput out) throws IOException", "public final int size()" ],
  "variableNames" : [ "written", "bytearr", "writeBuffer" ]
}