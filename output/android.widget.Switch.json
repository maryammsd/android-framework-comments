{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Switch.java",
  "packageName" : "android.widget",
  "className" : "Switch",
  "comment" : "\n * A Switch is a two-state toggle switch widget that can select between two\n * options. The user may drag the \"thumb\" back and forth to choose the selected option,\n * or simply tap to toggle as if it were a checkbox. The {@link #setText(CharSequence) text}\n * property controls the text displayed in the label for the switch, whereas the\n * {@link #setTextOff(CharSequence) off} and {@link #setTextOn(CharSequence) on} text\n * controls the text on the thumb. Similarly, the\n * {@link #setTextAppearance(android.content.Context, int) textAppearance} and the related\n * setTypeface() methods control the typeface and style of label text, whereas the\n * {@link #setSwitchTextAppearance(android.content.Context, int) switchTextAppearance} and\n * the related setSwitchTypeface() methods control that of the thumb.\n *\n * <p>{@link android.support.v7.widget.SwitchCompat} is a version of\n * the Switch widget which runs on devices back to API 7.</p>\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/controls/togglebutton.html\">Toggle Buttons</a>\n * guide.</p>\n *\n * @attr ref android.R.styleable#Switch_textOn\n * @attr ref android.R.styleable#Switch_textOff\n * @attr ref android.R.styleable#Switch_switchMinWidth\n * @attr ref android.R.styleable#Switch_switchPadding\n * @attr ref android.R.styleable#Switch_switchTextAppearance\n * @attr ref android.R.styleable#Switch_thumb\n * @attr ref android.R.styleable#Switch_thumbTextPadding\n * @attr ref android.R.styleable#Switch_track\n ",
  "variables" : [ {
    "name" : "THUMB_ANIMATION_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOUCH_MODE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOUCH_MODE_DOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOUCH_MODE_DRAGGING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SANS",
    "type" : "int",
    "comment" : " Enum for the \"typeface\" XML parameter.",
    "links" : [ ]
  }, {
    "name" : "SERIF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONOSPACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasThumbTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasThumbTintMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasTrackTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasTrackTintMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbTextPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwitchMinWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwitchPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitTrack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextOn",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextOff",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowText",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseFallbackLineSpacing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityTracker",
    "type" : "VelocityTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinFlingVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbPosition",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwitchWidth",
    "type" : "int",
    "comment" : "\n     * Width required to draw the switch track and thumb. Includes padding and\n     * optical bounds for both the track and thumb.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSwitchHeight",
    "type" : "int",
    "comment" : "\n     * Height required to draw the switch track and thumb. Includes padding and\n     * optical bounds for both the track and thumb.\n     ",
    "links" : [ ]
  }, {
    "name" : "mThumbWidth",
    "type" : "int",
    "comment" : "\n     * Width of the thumb's content region. Does not include padding or\n     * optical bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSwitchLeft",
    "type" : "int",
    "comment" : " Left bound for drawing the switch track and thumb. ",
    "links" : [ ]
  }, {
    "name" : "mSwitchTop",
    "type" : "int",
    "comment" : " Top bound for drawing the switch track and thumb. ",
    "links" : [ ]
  }, {
    "name" : "mSwitchRight",
    "type" : "int",
    "comment" : " Right bound for drawing the switch track and thumb. ",
    "links" : [ ]
  }, {
    "name" : "mSwitchBottom",
    "type" : "int",
    "comment" : " Bottom bound for drawing the switch track and thumb. ",
    "links" : [ ]
  }, {
    "name" : "mTextPaint",
    "type" : "TextPaint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextColors",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnLayout",
    "type" : "Layout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffLayout",
    "type" : "Layout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwitchTransformationMethod",
    "type" : "TransformationMethod2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositionAnimator",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECKED_STATE_SET",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THUMB_POS",
    "type" : "FloatProperty<Switch>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSwitchTextAppearance(Context context, @StyleRes int resid)",
    "returnType" : "void",
    "comment" : "\n     * Sets the switch text color, size, style, hint color, and highlight color\n     * from the specified TextAppearance resource.\n     *\n     * @attr ref android.R.styleable#Switch_switchTextAppearance\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setSwitchTypefaceByIndex(int typefaceIndex, int styleIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSwitchTypeface(Typeface tf, int style)",
    "returnType" : "void",
    "comment" : "\n     * Sets the typeface and style in which the text should be displayed on the\n     * switch, and turns on the fake bold and italic bits in the Paint if the\n     * Typeface that you provided does not have all the bits in the\n     * style that you specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSwitchTypeface(Typeface tf)",
    "returnType" : "void",
    "comment" : "\n     * Sets the typeface in which the text should be displayed on the switch.\n     * Note that not all Typeface families actually have bold and italic\n     * variants, so you may need to use\n     * {@link #setSwitchTypeface(Typeface, int)} to get the appearance\n     * that you actually want.\n     *\n     * @attr ref android.R.styleable#TextView_typeface\n     * @attr ref android.R.styleable#TextView_textStyle\n     ",
    "links" : [ "#setSwitchTypeface(Typeface" ]
  }, {
    "name" : "public void setSwitchPadding(int pixels)",
    "returnType" : "void",
    "comment" : "\n     * Set the amount of horizontal padding between the switch and the associated text.\n     *\n     * @param pixels Amount of padding in pixels\n     *\n     * @attr ref android.R.styleable#Switch_switchPadding\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSwitchPadding()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount of horizontal padding between the switch and the associated text.\n     *\n     * @return Amount of padding in pixels\n     *\n     * @attr ref android.R.styleable#Switch_switchPadding\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSwitchMinWidth(int pixels)",
    "returnType" : "void",
    "comment" : "\n     * Set the minimum width of the switch in pixels. The switch's width will be the maximum\n     * of this value and its measured width as determined by the switch drawables and text used.\n     *\n     * @param pixels Minimum width of the switch in pixels\n     *\n     * @attr ref android.R.styleable#Switch_switchMinWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSwitchMinWidth()",
    "returnType" : "int",
    "comment" : "\n     * Get the minimum width of the switch in pixels. The switch's width will be the maximum\n     * of this value and its measured width as determined by the switch drawables and text used.\n     *\n     * @return Minimum width of the switch in pixels\n     *\n     * @attr ref android.R.styleable#Switch_switchMinWidth\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbTextPadding(int pixels)",
    "returnType" : "void",
    "comment" : "\n     * Set the horizontal padding around the text drawn on the switch itself.\n     *\n     * @param pixels Horizontal padding for switch thumb text in pixels\n     *\n     * @attr ref android.R.styleable#Switch_thumbTextPadding\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getThumbTextPadding()",
    "returnType" : "int",
    "comment" : "\n     * Get the horizontal padding around the text drawn on the switch itself.\n     *\n     * @return Horizontal padding for switch thumb text in pixels\n     *\n     * @attr ref android.R.styleable#Switch_thumbTextPadding\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrackDrawable(Drawable track)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawable used for the track that the switch slides within.\n     *\n     * @param track Track drawable\n     *\n     * @attr ref android.R.styleable#Switch_track\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrackResource(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawable used for the track that the switch slides within.\n     *\n     * @param resId Resource ID of a track drawable\n     *\n     * @attr ref android.R.styleable#Switch_track\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getTrackDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Get the drawable used for the track that the switch slides within.\n     *\n     * @return Track drawable\n     *\n     * @attr ref android.R.styleable#Switch_track\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrackTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the track drawable. Does not modify the current\n     * tint mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setTrackDrawable(Drawable)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#Switch_trackTint\n     * @see #getTrackTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "#setTrackDrawable(Drawable)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getTrackTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the track drawable\n     * @attr ref android.R.styleable#Switch_trackTint\n     * @see #setTrackTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrackTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setTrackTintList(ColorStateList)}} to the track drawable.\n     * The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#Switch_trackTintMode\n     * @see #getTrackTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setTrackTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setTrackTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setTrackTintList(ColorStateList)}} to the track drawable.\n     * The default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#Switch_trackTintMode\n     * @see #getTrackTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "android.graphics.BlendMode#SRC_IN", "#setTrackTintList(ColorStateList)" ]
  }, {
    "name" : "public PorterDuff.Mode getTrackTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the track\n     *         drawable\n     * @attr ref android.R.styleable#Switch_trackTintMode\n     * @see #setTrackTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getTrackTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the track\n     *         drawable\n     * @attr ref android.R.styleable#Switch_trackTintMode\n     * @see #setTrackTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyTrackTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setThumbDrawable(Drawable thumb)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawable used for the switch \"thumb\" - the piece that the user\n     * can physically touch and drag along the track.\n     *\n     * @param thumb Thumb drawable\n     *\n     * @attr ref android.R.styleable#Switch_thumb\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbResource(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawable used for the switch \"thumb\" - the piece that the user\n     * can physically touch and drag along the track.\n     *\n     * @param resId Resource ID of a thumb drawable\n     *\n     * @attr ref android.R.styleable#Switch_thumb\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getThumbDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Get the drawable used for the switch \"thumb\" - the piece that the user\n     * can physically touch and drag along the track.\n     *\n     * @return Thumb drawable\n     *\n     * @attr ref android.R.styleable#Switch_thumb\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the thumb drawable. Does not modify the current\n     * tint mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setThumbDrawable(Drawable)} will\n     * automatically mutate the drawable and apply the specified tint and tint\n     * mode using {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#Switch_thumbTint\n     * @see #getThumbTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "#setThumbDrawable(Drawable)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getThumbTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to the thumb drawable\n     * @attr ref android.R.styleable#Switch_thumbTint\n     * @see #setThumbTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setThumbTintList(ColorStateList)}} to the thumb drawable.\n     * The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#Switch_thumbTintMode\n     * @see #getThumbTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setThumbTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setThumbTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setThumbTintList(ColorStateList)}} to the thumb drawable.\n     * The default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#Switch_thumbTintMode\n     * @see #getThumbTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setThumbTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getThumbTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the thumb\n     *         drawable\n     * @attr ref android.R.styleable#Switch_thumbTintMode\n     * @see #setThumbTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getThumbTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * @return the blending mode used to apply the tint to the thumb\n     *         drawable\n     * @attr ref android.R.styleable#Switch_thumbTintMode\n     * @see #setThumbTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyThumbTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSplitTrack(boolean splitTrack)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the track should be split by the thumb. When true,\n     * the thumb's optical bounds will be clipped out of the track drawable,\n     * then the thumb will be drawn into the resulting gap.\n     *\n     * @param splitTrack Whether the track should be split by the thumb\n     *\n     * @attr ref android.R.styleable#Switch_splitTrack\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSplitTrack()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the track should be split by the thumb.\n     *\n     * @attr ref android.R.styleable#Switch_splitTrack\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextOn()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text displayed when the button is in the checked state.\n     *\n     * @attr ref android.R.styleable#Switch_textOn\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextOn(CharSequence textOn)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text displayed when the button is in the checked state.\n     *\n     * @attr ref android.R.styleable#Switch_textOn\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextOff()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text displayed when the button is not in the checked state.\n     *\n     * @attr ref android.R.styleable#Switch_textOff\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextOff(CharSequence textOff)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text displayed when the button is not in the checked state.\n     *\n     * @attr ref android.R.styleable#Switch_textOff\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShowText(boolean showText)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the on/off text should be displayed.\n     *\n     * @param showText {@code true} to display on/off text\n     * @attr ref android.R.styleable#Switch_showText\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getShowText()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the on/off text should be displayed\n     * @attr ref android.R.styleable#Switch_showText\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private Layout makeLayout(CharSequence text)",
    "returnType" : "Layout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hitThumb(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if (x, y) is within the target area of the switch thumb\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelSuperTouch(MotionEvent ev)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopDrag(MotionEvent ev)",
    "returnType" : "void",
    "comment" : "\n     * Called from onTouchEvent to end a drag operation.\n     *\n     * @param ev Event that triggered the end of drag mode - ACTION_UP or ACTION_CANCEL\n     ",
    "links" : [ ]
  }, {
    "name" : "private void animateThumbToCheckedState(boolean newCheckedState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelPositionAnimator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getTargetCheckedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setThumbPosition(float position)",
    "returnType" : "void",
    "comment" : "\n     * Sets the thumb position as a decimal value between 0 (off) and 1 (on).\n     *\n     * @param position new position between [0,1]\n     ",
    "links" : [ ]
  }, {
    "name" : "public void toggle()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected CharSequence getButtonStateDescription()",
    "returnType" : "CharSequence",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setChecked(boolean checked)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCompoundPaddingLeft()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCompoundPaddingRight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getThumbOffset()",
    "returnType" : "int",
    "comment" : "\n     * Translates thumb position to offset according to current RTL setting and\n     * thumb scroll range. Accounts for both track and thumb padding.\n     *\n     * @return thumb offset\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getThumbScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int[] onCreateDrawableState(int extraSpace)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "THUMB_ANIMATION_DURATION", "TOUCH_MODE_IDLE", "TOUCH_MODE_DOWN", "TOUCH_MODE_DRAGGING", "SANS", "SERIF", "MONOSPACE", "mThumbDrawable", "mThumbTintList", "mThumbBlendMode", "mHasThumbTint", "mHasThumbTintMode", "mTrackDrawable", "mTrackTintList", "mTrackBlendMode", "mHasTrackTint", "mHasTrackTintMode", "mThumbTextPadding", "mSwitchMinWidth", "mSwitchPadding", "mSplitTrack", "mTextOn", "mTextOff", "mShowText", "mUseFallbackLineSpacing", "mTouchMode", "mTouchSlop", "mTouchX", "mTouchY", "mVelocityTracker", "mMinFlingVelocity", "mThumbPosition", "mSwitchWidth", "mSwitchHeight", "mThumbWidth", "mSwitchLeft", "mSwitchTop", "mSwitchRight", "mSwitchBottom", "mTextPaint", "mTextColors", "mOnLayout", "mOffLayout", "mSwitchTransformationMethod", "mPositionAnimator", "mTempRect", "CHECKED_STATE_SET", "THUMB_POS" ],
  "methodNames" : [ "public void setSwitchTextAppearance(Context context, @StyleRes int resid)", "private void setSwitchTypefaceByIndex(int typefaceIndex, int styleIndex)", "public void setSwitchTypeface(Typeface tf, int style)", "public void setSwitchTypeface(Typeface tf)", "public void setSwitchPadding(int pixels)", "public int getSwitchPadding()", "public void setSwitchMinWidth(int pixels)", "public int getSwitchMinWidth()", "public void setThumbTextPadding(int pixels)", "public int getThumbTextPadding()", "public void setTrackDrawable(Drawable track)", "public void setTrackResource(@DrawableRes int resId)", "public Drawable getTrackDrawable()", "public void setTrackTintList(@Nullable ColorStateList tint)", "public ColorStateList getTrackTintList()", "public void setTrackTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setTrackTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getTrackTintMode()", "public BlendMode getTrackTintBlendMode()", "private void applyTrackTint()", "public void setThumbDrawable(Drawable thumb)", "public void setThumbResource(@DrawableRes int resId)", "public Drawable getThumbDrawable()", "public void setThumbTintList(@Nullable ColorStateList tint)", "public ColorStateList getThumbTintList()", "public void setThumbTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setThumbTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getThumbTintMode()", "public BlendMode getThumbTintBlendMode()", "private void applyThumbTint()", "public void setSplitTrack(boolean splitTrack)", "public boolean getSplitTrack()", "public CharSequence getTextOn()", "public void setTextOn(CharSequence textOn)", "public CharSequence getTextOff()", "public void setTextOff(CharSequence textOff)", "public void setShowText(boolean showText)", "public boolean getShowText()", "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public void onPopulateAccessibilityEventInternal(AccessibilityEvent event)", "private Layout makeLayout(CharSequence text)", "private boolean hitThumb(float x, float y)", "public boolean onTouchEvent(MotionEvent ev)", "private void cancelSuperTouch(MotionEvent ev)", "private void stopDrag(MotionEvent ev)", "private void animateThumbToCheckedState(boolean newCheckedState)", "private void cancelPositionAnimator()", "private boolean getTargetCheckedState()", "private void setThumbPosition(float position)", "public void toggle()", "protected CharSequence getButtonStateDescription()", "public void setChecked(boolean checked)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void draw(Canvas c)", "protected void onDraw(Canvas canvas)", "public int getCompoundPaddingLeft()", "public int getCompoundPaddingRight()", "private int getThumbOffset()", "private int getThumbScrollRange()", "protected int[] onCreateDrawableState(int extraSpace)", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", "protected boolean verifyDrawable(@NonNull Drawable who)", "public void jumpDrawablesToCurrentState()", "public CharSequence getAccessibilityClassName()", "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)" ]
}