{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/PropsVectors.java",
  "packageName" : "android.icu.impl",
  "className" : "PropsVectors",
  "comment" : "\n * Unicode Properties Vectors associated with code point ranges.\n *\n * Rows of primitive integers in a contiguous array store the range limits and\n * the properties vectors.\n *\n * In each row, row[0] contains the start code point and row[1] contains the\n * limit code point, which is the start of the next range.\n *\n * Initially, there is only one range [0..0x110000] with values 0.\n *\n * It would be possible to store only one range boundary per row, but\n * self-contained rows allow to later sort them by contents.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "v",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "columns",
    "type" : "int",
    "comment" : " number of columns, plus two for start",
    "links" : [ ]
  }, {
    "name" : "maxRows",
    "type" : "int",
    "comment" : " and limit values",
    "links" : [ ]
  }, {
    "name" : "rows",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "prevRow",
    "type" : "int",
    "comment" : " search optimization: remember last row seen",
    "links" : [ ]
  }, {
    "name" : "isCompacted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRST_SPECIAL_CP",
    "type" : "int",
    "comment" : "\n     * Special pseudo code points for storing the initialValue and the\n     * errorValue which are used to initialize a Trie or similar.\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIAL_VALUE_CP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_VALUE_CP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INITIAL_ROWS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIUM_ROWS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ROWS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean areElementsSame(int index1, int[] target, int index2, int length)",
    "returnType" : "boolean",
    "comment" : " starting from index2 to index2 + length - 1",
    "links" : [ ]
  }, {
    "name" : "private int findRow(int rangeStart)",
    "returnType" : "int",
    "comment" : " points to the start of a row.",
    "links" : [ ]
  }, {
    "name" : "public void setValue(int start, int end, int column, int value, int mask)",
    "returnType" : "void",
    "comment" : "\n     * In rows for code points [start..end], select the column, reset the mask\n     * bits and set the value bits (ANDed with the mask).\n     *\n     * @throws IllegalArgumentException\n     *\n     * @throws IllegalStateException\n     *\n     * @throws IndexOutOfBoundsException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getValue(int c, int column)",
    "returnType" : "int",
    "comment" : "\n     * Always returns 0 if called after compact().\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getRow(int rowIndex)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array which contains value elements\n     * in row rowIndex.\n     *\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRowStart(int rowIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns an int which is the start codepoint\n     * in row rowIndex.\n     *\n     * @throws IllegalStateException\n     *\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRowEnd(int rowIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns an int which is the limit codepoint\n     * minus 1 in row rowIndex.\n     *\n     * @throws IllegalStateException\n     *\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void compact(CompactHandler compactor)",
    "returnType" : "void",
    "comment" : "\n     * Compact the vectors:\n     * - modify the memory\n     * - keep only unique vectors\n     * - store them contiguously from the beginning of the memory\n     * - for each (non-unique) row, call the respective function in\n     *   CompactHandler\n     *\n     * The handler's rowIndex is the index of the row in the compacted\n     * memory block. Therefore, it starts at 0 increases in increments of the\n     * columns value.\n     *\n     * In a first phase, only special values are delivered (each exactly once).\n     * Then CompactHandler::startRealValues() is called\n     * where rowIndex is the length of the compacted array.\n     * Then, in the second phase, the CompactHandler::setRowIndexForRange() is\n     * called for each row of real values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getCompactedArray()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the vectors array after calling compact().\n     *\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCompactedRows()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of rows for the compacted array.\n     *\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCompactedColumns()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of columns for the compacted array.\n     *\n     * @throws IllegalStateException\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntTrie compactToTrieWithRowIndexes()",
    "returnType" : "IntTrie",
    "comment" : "\n     * Call compact(), create a IntTrie with indexes into the compacted\n     * vectors array.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean areElementsSame(int index1, int[] target, int index2, int length)", "private int findRow(int rangeStart)", "public void setValue(int start, int end, int column, int value, int mask)", "public int getValue(int c, int column)", "public int[] getRow(int rowIndex)", "public int getRowStart(int rowIndex)", "public int getRowEnd(int rowIndex)", "public void compact(CompactHandler compactor)", "public int[] getCompactedArray()", "public int getCompactedRows()", "public int getCompactedColumns()", "public IntTrie compactToTrieWithRowIndexes()" ],
  "variableNames" : [ "v", "columns", "maxRows", "rows", "prevRow", "isCompacted", "FIRST_SPECIAL_CP", "INITIAL_VALUE_CP", "ERROR_VALUE_CP", "MAX_CP", "INITIAL_ROWS", "MEDIUM_ROWS", "MAX_ROWS" ]
}