{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/BrightnessChangeEvent.java",
  "packageName" : "android.hardware.display",
  "className" : "BrightnessChangeEvent",
  "comment" : "\n * Data about a brightness settings change.\n *\n * {@see DisplayManager.getBrightnessEvents()}\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "brightness",
    "type" : "float",
    "comment" : " Brightness in nits ",
    "links" : [ ]
  }, {
    "name" : "timeStamp",
    "type" : "long",
    "comment" : " Timestamp of the change {@see System.currentTimeMillis()} ",
    "links" : [ ]
  }, {
    "name" : "packageName",
    "type" : "String",
    "comment" : " Package name of focused activity when brightness was changed.\n     *  This will be null if the caller of {@see DisplayManager.getBrightnessEvents()}\n     *  does not have access to usage stats {@see UsageStatsManager} ",
    "links" : [ ]
  }, {
    "name" : "userId",
    "type" : "int",
    "comment" : " User id of of the user running when brightness was changed.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "uniqueDisplayId",
    "type" : "String",
    "comment" : " The unique id of the screen on which the brightness was changed ",
    "links" : [ ]
  }, {
    "name" : "luxValues",
    "type" : "float[]",
    "comment" : " Lux values of recent sensor data ",
    "links" : [ ]
  }, {
    "name" : "luxTimestamps",
    "type" : "long[]",
    "comment" : " Timestamps of the lux sensor readings {@see System.currentTimeMillis()} ",
    "links" : [ ]
  }, {
    "name" : "batteryLevel",
    "type" : "float",
    "comment" : " Most recent battery level when brightness was changed or Float.NaN ",
    "links" : [ ]
  }, {
    "name" : "powerBrightnessFactor",
    "type" : "float",
    "comment" : " Factor applied to brightness due to battery level, 0.0-1.0 ",
    "links" : [ ]
  }, {
    "name" : "nightMode",
    "type" : "boolean",
    "comment" : " Color filter active to provide night mode ",
    "links" : [ ]
  }, {
    "name" : "colorTemperature",
    "type" : "int",
    "comment" : " If night mode color filter is active this will be the temperature in kelvin ",
    "links" : [ ]
  }, {
    "name" : "reduceBrightColors",
    "type" : "boolean",
    "comment" : " Whether the bright color reduction color transform is active ",
    "links" : [ ]
  }, {
    "name" : "reduceBrightColorsStrength",
    "type" : "int",
    "comment" : " How strong the bright color reduction color transform is set (only applicable if active),\n     *  specified as an integer from 0 - 100, inclusive. This value (scaled to 0-1, inclusive) is\n     *  then used in Ynew = (a * scaledStrength^2 + b * scaledStrength + c) * Ycurrent, where a, b,\n     *  and c are coefficients provided in the bright color reduction coefficient matrix, and\n     *  Ycurrent is the current hardware brightness in nits.\n     ",
    "links" : [ ]
  }, {
    "name" : "reduceBrightColorsOffset",
    "type" : "float",
    "comment" : " Applied offset for the bright color reduction color transform (only applicable if active).\n     *  The offset is computed by summing the coefficients a, b, and c, from the coefficient matrix\n     *  and multiplying by the current brightness.\n     ",
    "links" : [ ]
  }, {
    "name" : "lastBrightness",
    "type" : "float",
    "comment" : " Brightness level before slider adjustment ",
    "links" : [ ]
  }, {
    "name" : "isDefaultBrightnessConfig",
    "type" : "boolean",
    "comment" : " Whether brightness configuration is default version ",
    "links" : [ ]
  }, {
    "name" : "isUserSetBrightness",
    "type" : "boolean",
    "comment" : " Whether brightness curve includes a user brightness point ",
    "links" : [ ]
  }, {
    "name" : "colorValueBuckets",
    "type" : "long[]",
    "comment" : "\n     * Histogram counting how many times a pixel of a given value was displayed onscreen for the\n     * Value component of HSV if the device supports color sampling, if the device does not support\n     * color sampling or {@link BrightnessConfiguration#shouldCollectColorSamples()} is false the\n     * value will be null.\n     *\n     * The buckets of the histogram are evenly weighted, the number of buckets is device specific.\n     * The units are in pixels * milliseconds, with 1 pixel millisecond being 1 pixel displayed\n     * for 1 millisecond.\n     * For example if we had {100, 50, 30, 20}, value component was onscreen for 100 pixel\n     * milliseconds in range 0x00->0x3F, 30 pixel milliseconds in range 0x40->0x7F, etc.\n     *\n     * {@see #colorSampleDuration}\n     ",
    "links" : [ "android.hardware.display.BrightnessConfiguration#shouldCollectColorSamples()" ]
  }, {
    "name" : "colorSampleDuration",
    "type" : "long",
    "comment" : "\n     * How many milliseconds of data are contained in the colorValueBuckets, if the device does\n     * not support color sampling or {@link BrightnessConfiguration#shouldCollectColorSamples()} is\n     * false the value will be 0L.\n     *\n     * {@see #colorValueBuckets}\n     ",
    "links" : [ "android.hardware.display.BrightnessConfiguration#shouldCollectColorSamples()" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BrightnessChangeEvent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()" ],
  "variableNames" : [ "brightness", "timeStamp", "packageName", "userId", "uniqueDisplayId", "luxValues", "luxTimestamps", "batteryLevel", "powerBrightnessFactor", "nightMode", "colorTemperature", "reduceBrightColors", "reduceBrightColorsStrength", "reduceBrightColorsOffset", "lastBrightness", "isDefaultBrightnessConfig", "isUserSetBrightness", "colorValueBuckets", "colorSampleDuration", "CREATOR" ]
}