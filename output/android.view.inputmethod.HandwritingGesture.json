{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/HandwritingGesture.java",
  "packageName" : "android.view.inputmethod",
  "className" : "HandwritingGesture",
  "comment" : "\n * Base class for stylus handwriting gestures.\n * <p>\n * During a stylus handwriting session, user can perform a stylus gesture operation like\n * {@link SelectGesture}, {@link DeleteGesture}, {@link InsertGesture} on an\n * area of text. IME is responsible for listening to stylus {@link MotionEvent}s using\n * {@link InputMethodService#onStylusHandwritingMotionEvent} and interpret if it can translate to a\n * gesture operation.\n * <p>\n * While creating gesture operations {@link SelectGesture} and {@link DeleteGesture},\n * {@code Granularity} helps pick the correct granular level of text like word level\n * {@link #GRANULARITY_WORD}, or character level {@link #GRANULARITY_CHARACTER}.\n *\n * @see InputConnection#performHandwritingGesture(HandwritingGesture, Executor, IntConsumer)\n * @see InputConnection#previewHandwritingGesture(PreviewableHandwritingGesture, CancellationSignal)\n * @see InputMethodService#onStartStylusHandwriting()\n ",
  "links" : [ "#GRANULARITY_CHARACTER", "android.view.inputmethod.InsertGesture", "android.view.MotionEvent", "#GRANULARITY_WORD", "android.view.inputmethod.DeleteGesture", "android.inputmethodservice.InputMethodService#onStylusHandwritingMotionEvent", "android.view.inputmethod.SelectGesture" ],
  "variables" : [ {
    "name" : "GRANULARITY_UNDEFINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRANULARITY_WORD",
    "type" : "int",
    "comment" : "\n     * Operate text per word basis. e.g. if selection includes width-wise center of the word,\n     * whole word is selected.\n     * <p> Strategy of operating at a granular level is maintained in the UI toolkit.\n     *     A character/word/line is included if its center is within the gesture rectangle.\n     *     e.g. if a selection {@link RectF} with {@link #GRANULARITY_WORD} includes width-wise\n     *     center of the word, it should be selected.\n     *     Similarly, text in a line should be included in the operation if rectangle includes\n     *     line height center.</p>\n     * Refer to https://www.unicode.org/reports/tr29/#Word_Boundaries for more detail on how word\n     * breaks are decided.\n     ",
    "links" : [ "android.graphics.RectF", "#GRANULARITY_WORD" ]
  }, {
    "name" : "GRANULARITY_CHARACTER",
    "type" : "int",
    "comment" : "\n     * Operate on text per character basis. i.e. each character is selected based on its\n     * intersection with selection rectangle.\n     * <p> Strategy of operating at a granular level is maintained in the UI toolkit.\n     *     A character/word/line is included if its center is within the gesture rectangle.\n     *     e.g. if a selection {@link RectF} with {@link #GRANULARITY_CHARACTER} includes width-wise\n     *     center of the character, it should be selected.\n     *     Similarly, text in a line should be included in the operation if rectangle includes\n     *     line height center.</p>\n     ",
    "links" : [ "android.graphics.RectF", "#GRANULARITY_CHARACTER" ]
  }, {
    "name" : "GESTURE_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Undefined gesture type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GESTURE_TYPE_SELECT",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link SelectGesture} to select an area of text.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.SelectGesture" ]
  }, {
    "name" : "GESTURE_TYPE_INSERT",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link InsertGesture} to insert text at a designated point.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.InsertGesture" ]
  }, {
    "name" : "GESTURE_TYPE_DELETE",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link DeleteGesture} to delete an area of text.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.DeleteGesture" ]
  }, {
    "name" : "GESTURE_TYPE_REMOVE_SPACE",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link RemoveSpaceGesture} to remove whitespace from text.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.RemoveSpaceGesture" ]
  }, {
    "name" : "GESTURE_TYPE_JOIN_OR_SPLIT",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link JoinOrSplitGesture} to join or split text.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.JoinOrSplitGesture" ]
  }, {
    "name" : "GESTURE_TYPE_SELECT_RANGE",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link SelectRangeGesture} to select range of text.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.SelectRangeGesture" ]
  }, {
    "name" : "GESTURE_TYPE_DELETE_RANGE",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link DeleteRangeGesture} to delete range of text.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.DeleteRangeGesture" ]
  }, {
    "name" : "GESTURE_TYPE_INSERT_MODE",
    "type" : "int",
    "comment" : "\n     * Gesture of type {@link InsertModeGesture} to begin an insert mode at a designated point.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.InsertModeGesture" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int getGestureType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the gesture type {@link GestureType}.\n     * {@link GestureType} can be used by editors to declare what gestures are supported and report\n     * them in {@link EditorInfo#setSupportedHandwritingGestures(List)}.\n     * @hide\n     ",
    "links" : [ "GestureType", "android.view.inputmethod.EditorInfo#setSupportedHandwritingGestures(List)" ]
  }, {
    "name" : "public final String getFallbackText()",
    "returnType" : "String",
    "comment" : "\n     * The fallback text that will be committed at current cursor position if there is no applicable\n     * text beneath the area of gesture.\n     * For example, select can fail if gesture is drawn over area that has no text beneath.\n     * example 2: join can fail if the gesture is drawn over text but there is no whitespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Dump data into a byte array so that you can pass the data across process boundary.\n     *\n     * @return byte array data.\n     * @see #fromByteArray(byte[])\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static HandwritingGesture fromByteArray(@NonNull byte[] buffer)",
    "returnType" : "HandwritingGesture",
    "comment" : "\n     * Create a new instance from byte array obtained from {@link #toByteArray()}.\n     *\n     * @param buffer byte array obtained from {@link #toByteArray()}\n     * @return A new instance of {@link HandwritingGesture} subclass.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.HandwritingGesture", "#toByteArray()" ]
  } ],
  "methodNames" : [ "public final int getGestureType()", "public final String getFallbackText()", "public final byte[] toByteArray()", "public static HandwritingGesture fromByteArray(@NonNull byte[] buffer)" ],
  "variableNames" : [ "GRANULARITY_UNDEFINED", "GRANULARITY_WORD", "GRANULARITY_CHARACTER", "GESTURE_TYPE_NONE", "GESTURE_TYPE_SELECT", "GESTURE_TYPE_INSERT", "GESTURE_TYPE_DELETE", "GESTURE_TYPE_REMOVE_SPACE", "GESTURE_TYPE_JOIN_OR_SPLIT", "GESTURE_TYPE_SELECT_RANGE", "GESTURE_TYPE_DELETE_RANGE", "GESTURE_TYPE_INSERT_MODE", "mType", "mFallbackText" ]
}