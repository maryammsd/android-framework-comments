{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/radio/RadioMetadata.java",
  "packageName" : "android.hardware.radio",
  "className" : "RadioMetadata",
  "comment" : "\n * Contains meta data about a radio program such as station name, song title, artist etc...\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_RDS_PI",
    "type" : "String",
    "comment" : "\n     * The RDS Program Information.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_RDS_PS",
    "type" : "String",
    "comment" : "\n     * The RDS Program Service.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_RDS_PTY",
    "type" : "String",
    "comment" : "\n     * The RDS PTY.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_RBDS_PTY",
    "type" : "String",
    "comment" : "\n     * The RBDS PTY.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_RDS_RT",
    "type" : "String",
    "comment" : "\n     * The RBDS Radio Text.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_TITLE",
    "type" : "String",
    "comment" : "\n     * The song title.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ARTIST",
    "type" : "String",
    "comment" : "\n     * The artist name.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ALBUM",
    "type" : "String",
    "comment" : "\n     * The album name.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_GENRE",
    "type" : "String",
    "comment" : "\n     * The music genre.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ICON",
    "type" : "String",
    "comment" : "\n     * The radio station icon {@link Bitmap}.\n     ",
    "links" : [ "android.graphics.Bitmap" ]
  }, {
    "name" : "METADATA_KEY_ART",
    "type" : "String",
    "comment" : "\n     * The artwork for the song/album {@link Bitmap}.\n     ",
    "links" : [ "android.graphics.Bitmap" ]
  }, {
    "name" : "METADATA_KEY_CLOCK",
    "type" : "String",
    "comment" : "\n     * The clock.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_PROGRAM_NAME",
    "type" : "String",
    "comment" : "\n     * Technology-independent program name (station name).\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DAB_ENSEMBLE_NAME",
    "type" : "String",
    "comment" : "\n     * DAB ensemble name.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DAB_ENSEMBLE_NAME_SHORT",
    "type" : "String",
    "comment" : "\n     * DAB ensemble name - short version (up to 8 characters).\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DAB_SERVICE_NAME",
    "type" : "String",
    "comment" : "\n     * DAB service name.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DAB_SERVICE_NAME_SHORT",
    "type" : "String",
    "comment" : "\n     * DAB service name - short version (up to 8 characters).\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DAB_COMPONENT_NAME",
    "type" : "String",
    "comment" : "\n     * DAB component name.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DAB_COMPONENT_NAME_SHORT",
    "type" : "String",
    "comment" : "\n     * DAB component name.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_INVALID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_BITMAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_CLOCK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEYS_TYPE",
    "type" : "ArrayMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_INVALID",
    "type" : "int",
    "comment" : " keep in sync with: system/media/radio/include/system/radio_metadata.h",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_RDS_PI",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_RDS_PS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_RDS_PTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_RBDS_PTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_RDS_RT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_TITLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_ARTIST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_ALBUM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_GENRE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_ICON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_ART",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_CLOCK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_KEY_MAPPING",
    "type" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHashCode",
    "type" : "Integer",
    "comment" : " Lazily computed hash code based upon the contents of mBundle.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<RadioMetadata>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the given key is contained in the meta data\n     *\n     * @param key a String key\n     * @return {@code true} if the key exists in this meta data, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the text value associated with the given key as a String, or null\n     * if the key is not found in the meta data.\n     *\n     * @param key The key the value is stored under\n     * @return a String value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void putInt(Bundle bundle, String key, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInt(String key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value associated with the given key,\n     * or 0 if the key is not found in the meta data.\n     *\n     * @param key The key the value is stored under\n     * @return an int value\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap(String key)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a {@link Bitmap} for the given key or null if the key is not found in the meta data.\n     *\n     * @param key The key the value is stored under\n     * @return a {@link Bitmap} or null\n     * @deprecated Use getBitmapId(String) instead\n     ",
    "links" : [ "android.graphics.Bitmap" ]
  }, {
    "name" : "public int getBitmapId(@NonNull String key)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves an identifier for a bitmap.\n     *\n     * The format of an identifier is opaque to the application,\n     * with a special case of value 0 being invalid.\n     * An identifier for a given image-tuner pair is unique, so an application\n     * may cache images and determine if there is a necessity to fetch them\n     * again - if identifier changes, it means the image has changed.\n     *\n     * Only bitmap keys may be used with this method:\n     * <ul>\n     * <li>{@link #METADATA_KEY_ICON}</li>\n     * <li>{@link #METADATA_KEY_ART}</li>\n     * </ul>\n     *\n     * @param key The key the value is stored under.\n     * @return a bitmap identifier or 0 if it's missing.\n     * @hide This API is not thoroughly elaborated yet\n     ",
    "links" : [ "#METADATA_KEY_ART", "#METADATA_KEY_ICON" ]
  }, {
    "name" : "public Clock getClock(String key)",
    "returnType" : "Clock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of fields in this meta data.\n     *\n     * @return the number of fields in the meta data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> keySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a Set containing the Strings used as keys in this meta data.\n     *\n     * @return a Set of String keys\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getKeyFromNativeKey(int nativeKey)",
    "returnType" : "String",
    "comment" : "\n     * Helper for getting the String key used by {@link RadioMetadata} from the\n     * corrsponding native integer key.\n     *\n     * @param editorKey The key used by the editor\n     * @return the key used by this class or null if no mapping exists\n     * @hide\n     ",
    "links" : [ "android.hardware.radio.RadioMetadata" ]
  }, {
    "name" : " int putIntFromNative(int nativeKey, int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int putStringFromNative(int nativeKey, String value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int putBitmapFromNative(int nativeKey, byte[] value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int putClockFromNative(int nativeKey, long utcEpochSeconds, int timezoneOffsetInMinutes)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "METADATA_KEY_RDS_PI", "METADATA_KEY_RDS_PS", "METADATA_KEY_RDS_PTY", "METADATA_KEY_RBDS_PTY", "METADATA_KEY_RDS_RT", "METADATA_KEY_TITLE", "METADATA_KEY_ARTIST", "METADATA_KEY_ALBUM", "METADATA_KEY_GENRE", "METADATA_KEY_ICON", "METADATA_KEY_ART", "METADATA_KEY_CLOCK", "METADATA_KEY_PROGRAM_NAME", "METADATA_KEY_DAB_ENSEMBLE_NAME", "METADATA_KEY_DAB_ENSEMBLE_NAME_SHORT", "METADATA_KEY_DAB_SERVICE_NAME", "METADATA_KEY_DAB_SERVICE_NAME_SHORT", "METADATA_KEY_DAB_COMPONENT_NAME", "METADATA_KEY_DAB_COMPONENT_NAME_SHORT", "METADATA_TYPE_INVALID", "METADATA_TYPE_INT", "METADATA_TYPE_TEXT", "METADATA_TYPE_BITMAP", "METADATA_TYPE_CLOCK", "METADATA_KEYS_TYPE", "NATIVE_KEY_INVALID", "NATIVE_KEY_RDS_PI", "NATIVE_KEY_RDS_PS", "NATIVE_KEY_RDS_PTY", "NATIVE_KEY_RBDS_PTY", "NATIVE_KEY_RDS_RT", "NATIVE_KEY_TITLE", "NATIVE_KEY_ARTIST", "NATIVE_KEY_ALBUM", "NATIVE_KEY_GENRE", "NATIVE_KEY_ICON", "NATIVE_KEY_ART", "NATIVE_KEY_CLOCK", "NATIVE_KEY_MAPPING", "mBundle", "mHashCode", "CREATOR" ],
  "methodNames" : [ "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public String toString()", "public boolean containsKey(String key)", "public String getString(String key)", "private static void putInt(Bundle bundle, String key, int value)", "public int getInt(String key)", "public Bitmap getBitmap(String key)", "public int getBitmapId(@NonNull String key)", "public Clock getClock(String key)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int size()", "public Set<String> keySet()", "public static String getKeyFromNativeKey(int nativeKey)", " int putIntFromNative(int nativeKey, int value)", " int putStringFromNative(int nativeKey, String value)", " int putBitmapFromNative(int nativeKey, byte[] value)", " int putClockFromNative(int nativeKey, long utcEpochSeconds, int timezoneOffsetInMinutes)" ]
}