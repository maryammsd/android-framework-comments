{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/thread/ThreadNetworkController.java",
  "packageName" : "android.net.thread",
  "className" : "ThreadNetworkController",
  "comment" : "\n * Provides the primary APIs for controlling all aspects of a Thread network.\n *\n * <p>For example, join this device to a Thread network with given Thread Operational Dataset, or\n * migrate an existing network.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_STOPPED",
    "type" : "int",
    "comment" : " The Thread stack is stopped. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_DETACHED",
    "type" : "int",
    "comment" : " The device is not currently participating in a Thread network/partition. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_CHILD",
    "type" : "int",
    "comment" : " The device is a Thread Child. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_ROUTER",
    "type" : "int",
    "comment" : " The device is a Thread Router. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_ROLE_LEADER",
    "type" : "int",
    "comment" : " The device is a Thread Leader. ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISABLED",
    "type" : "int",
    "comment" : " The Thread radio is disabled. ",
    "links" : [ ]
  }, {
    "name" : "STATE_ENABLED",
    "type" : "int",
    "comment" : " The Thread radio is enabled. ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISABLING",
    "type" : "int",
    "comment" : " The Thread radio is being disabled. ",
    "links" : [ ]
  }, {
    "name" : "THREAD_VERSION_1_3",
    "type" : "int",
    "comment" : " Thread standard version 1.3. ",
    "links" : [ ]
  }, {
    "name" : "POWER_LIMITATION_MIN",
    "type" : "int",
    "comment" : " Minimum value of max power in unit of 0.01dBm. @hide ",
    "links" : [ ]
  }, {
    "name" : "POWER_LIMITATION_MAX",
    "type" : "int",
    "comment" : " Maximum value of max power in unit of 0.01dBm. @hide ",
    "links" : [ ]
  }, {
    "name" : "mControllerService",
    "type" : "IThreadNetworkController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateCallbackMapLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateCallbackMap",
    "type" : "Map<StateCallback, StateCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpDatasetCallbackMapLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpDatasetCallbackMap",
    "type" : "Map<OperationalDatasetCallback, OperationalDatasetCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setEnabled(boolean enabled, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Enables/Disables the radio of this ThreadNetworkController. The requested enabled state will\n     * be persistent and survives device reboots.\n     *\n     * <p>When Thread is in {@code STATE_DISABLED}, {@link ThreadNetworkController} APIs which\n     * require the Thread radio will fail with error code {@link\n     * ThreadNetworkException#ERROR_THREAD_DISABLED}. When Thread is in {@code STATE_DISABLING},\n     * {@link ThreadNetworkController} APIs that return a {@link ThreadNetworkException} will fail\n     * with error code {@link ThreadNetworkException#ERROR_BUSY}.\n     *\n     * <p>On success, {@link OutcomeReceiver#onResult} of {@code receiver} is called. It indicates\n     * the operation has completed. But there maybe subsequent calls to update the enabled state,\n     * callers of this method should use {@link #registerStateCallback} to subscribe to the Thread\n     * enabled state changes.\n     *\n     * <p>On failure, {@link OutcomeReceiver#onError} of {@code receiver} will be invoked with a\n     * specific error in {@link ThreadNetworkException#ERROR_}.\n     *\n     * @param enabled {@code true} for enabling Thread\n     * @param executor the executor to execute {@code receiver}\n     * @param receiver the receiver to receive result of this operation\n     ",
    "links" : [ "android.net.thread.ThreadNetworkException#ERROR_", "android.net.thread.ThreadNetworkException", "android.os.OutcomeReceiver#onResult", "android.net.thread.ThreadNetworkController", "android.net.thread.ThreadNetworkException#ERROR_BUSY", "#registerStateCallback", "android.os.OutcomeReceiver#onError", "android.net.thread.ThreadNetworkException#ERROR_THREAD_DISABLED" ]
  }, {
    "name" : "public int getThreadVersion()",
    "returnType" : "int",
    "comment" : " Returns the Thread version this device is operating on. ",
    "links" : [ ]
  }, {
    "name" : "public void createRandomizedDataset(@NonNull String networkName, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ActiveOperationalDataset, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new Active Operational Dataset with randomized parameters.\n     *\n     * <p>This method is the recommended way to create a randomized dataset which can be used with\n     * {@link #join} to securely join this device to the specified network . It's highly discouraged\n     * to change the randomly generated Extended PAN ID, Network Key or PSKc, as it will compromise\n     * the security of a Thread network.\n     *\n     * @throws IllegalArgumentException if length of the UTF-8 representation of {@code networkName}\n     *     isn't in range of [{@link #LENGTH_MIN_NETWORK_NAME_BYTES}, {@link\n     *     #LENGTH_MAX_NETWORK_NAME_BYTES}]\n     ",
    "links" : [ "#join", "#LENGTH_MAX_NETWORK_NAME_BYTES", "#LENGTH_MIN_NETWORK_NAME_BYTES" ]
  }, {
    "name" : "public static boolean isAttached(@DeviceRole int deviceRole)",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@code deviceRole} indicates an attached state. ",
    "links" : [ ]
  }, {
    "name" : "public void registerStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull StateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be called when Thread network states are changed.\n     *\n     * <p>Upon return of this method, methods of {@code callback} will be invoked immediately with\n     * existing states.\n     *\n     * @param executor the executor to execute the {@code callback}\n     * @param callback the callback to receive Thread network state changes\n     * @throws IllegalArgumentException if {@code callback} has already been registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterStateCallback(@NonNull StateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the Thread state changed callback.\n     *\n     * @param callback the callback which has been registered with {@link #registerStateCallback}\n     * @throws IllegalArgumentException if {@code callback} hasn't been registered\n     ",
    "links" : [ "#registerStateCallback" ]
  }, {
    "name" : "public void registerOperationalDatasetCallback(@NonNull @CallbackExecutor Executor executor, @NonNull OperationalDatasetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be called when Thread Operational Datasets are changed.\n     *\n     * <p>Upon return of this method, methods of {@code callback} will be invoked immediately with\n     * existing Operational Datasets.\n     *\n     * @param executor the executor to execute {@code callback}\n     * @param callback the callback to receive Operational Dataset changes\n     * @throws IllegalArgumentException if {@code callback} has already been registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOperationalDatasetCallback(@NonNull OperationalDatasetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the Thread Operational Dataset callback.\n     *\n     * @param callback the callback which has been registered with {@link\n     *     #registerOperationalDatasetCallback}\n     * @throws IllegalArgumentException if {@code callback} hasn't been registered\n     ",
    "links" : [ "#registerOperationalDatasetCallback" ]
  }, {
    "name" : "public void join(@NonNull ActiveOperationalDataset activeDataset, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Joins to a Thread network with given Active Operational Dataset.\n     *\n     * <p>This method does nothing if this device has already joined to the same network specified\n     * by {@code activeDataset}. If this device has already joined to a different network, this\n     * device will first leave from that network and then join the new network. This method changes\n     * only this device and all other connected devices will stay in the old network. To change the\n     * network for all connected devices together, use {@link #scheduleMigration}.\n     *\n     * <p>On success, {@link OutcomeReceiver#onResult} of {@code receiver} is called and the Dataset\n     * will be persisted on this device; this device will try to attach to the Thread network and\n     * the state changes can be observed by {@link #registerStateCallback}. On failure, {@link\n     * OutcomeReceiver#onError} of {@code receiver} will be invoked with a specific error:\n     *\n     * <ul>\n     *   <li>{@link ThreadNetworkException#ERROR_UNSUPPORTED_CHANNEL} {@code activeDataset}\n     *       specifies a channel which is not supported in the current country or region; the {@code\n     *       activeDataset} is rejected and not persisted so this device won't auto re-join the next\n     *       time\n     *   <li>{@link ThreadNetworkException#ERROR_ABORTED} this operation is aborted by another\n     *       {@code join} or {@code leave} operation\n     * </ul>\n     *\n     * @param activeDataset the Active Operational Dataset represents the Thread network to join\n     * @param executor the executor to execute {@code receiver}\n     * @param receiver the receiver to receive result of this operation\n     ",
    "links" : [ "android.net.thread.ThreadNetworkException#ERROR_UNSUPPORTED_CHANNEL", "android.os.OutcomeReceiver#onResult", "android.net.thread.ThreadNetworkException#ERROR_ABORTED", "#scheduleMigration", "#registerStateCallback", "android.os.OutcomeReceiver#onError" ]
  }, {
    "name" : "public void scheduleMigration(@NonNull PendingOperationalDataset pendingDataset, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Schedules a network migration which moves all devices in the current connected network to a\n     * new network or updates parameters of the current connected network.\n     *\n     * <p>The migration doesn't happen immediately but is registered to the Leader device so that\n     * all devices in the current Thread network can be scheduled to apply the new dataset together.\n     *\n     * <p>On success, the Pending Dataset is successfully registered and persisted on the Leader and\n     * {@link OutcomeReceiver#onResult} of {@code receiver} will be called; Operational Dataset\n     * changes will be asynchronously delivered via {@link OperationalDatasetCallback} if a callback\n     * has been registered with {@link #registerOperationalDatasetCallback}. When failed, {@link\n     * OutcomeReceiver#onError} will be called with a specific error:\n     *\n     * <ul>\n     *   <li>{@link ThreadNetworkException#ERROR_FAILED_PRECONDITION} the migration is rejected\n     *       because this device is not attached\n     *   <li>{@link ThreadNetworkException#ERROR_UNSUPPORTED_CHANNEL} {@code pendingDataset}\n     *       specifies a channel which is not supported in the current country or region; the {@code\n     *       pendingDataset} is rejected and not persisted\n     *   <li>{@link ThreadNetworkException#ERROR_REJECTED_BY_PEER} the Pending Dataset is rejected\n     *       by the Leader device\n     *   <li>{@link ThreadNetworkException#ERROR_BUSY} another {@code scheduleMigration} request is\n     *       being processed\n     *   <li>{@link ThreadNetworkException#ERROR_TIMEOUT} response from the Leader device hasn't\n     *       been received before deadline\n     * </ul>\n     *\n     * <p>The Delay Timer of {@code pendingDataset} can vary from several minutes to a few days.\n     * It's important to select a proper value to safely migrate all devices in the network without\n     * leaving sleepy end devices orphaned. Apps are not suggested to specify the Delay Timer value\n     * if it's unclear how long it can take to propagate the {@code pendingDataset} to the whole\n     * network. Instead, use {@link Duration#ZERO} to use the default value suggested by the system.\n     *\n     * @param pendingDataset the Pending Operational Dataset\n     * @param executor the executor to execute {@code receiver}\n     * @param receiver the receiver to receive result of this operation\n     ",
    "links" : [ "android.net.thread.ThreadNetworkException#ERROR_TIMEOUT", "android.net.thread.ThreadNetworkException#ERROR_UNSUPPORTED_CHANNEL", "android.os.OutcomeReceiver#onResult", "#registerOperationalDatasetCallback", "android.net.thread.ThreadNetworkException#ERROR_REJECTED_BY_PEER", "java.time.Duration#ZERO", "android.net.thread.ThreadNetworkException#ERROR_BUSY", "android.net.thread.ThreadNetworkException#ERROR_FAILED_PRECONDITION", "OperationalDatasetCallback", "android.os.OutcomeReceiver#onError" ]
  }, {
    "name" : "public void leave(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Leaves from the Thread network.\n     *\n     * <p>This undoes a {@link join} operation. On success, this device is disconnected from the\n     * joined network and will not automatically join a network before {@link #join} is called\n     * again. Active and Pending Operational Dataset configured and persisted on this device will be\n     * removed too.\n     *\n     * @param executor the executor to execute {@code receiver}\n     * @param receiver the receiver to receive result of this operation\n     ",
    "links" : [ "#join", "join" ]
  }, {
    "name" : "public void setTestNetworkAsUpstream(@Nullable String testNetworkInterfaceName, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Sets to use a specified test network as the upstream.\n     *\n     * @param testNetworkInterfaceName The name of the test network interface. When it's null,\n     *     forbids using test network as an upstream.\n     * @param executor the executor to execute {@code receiver}\n     * @param receiver the receiver to receive result of this operation\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setChannelMaxPowers(@NonNull @Size(min = 1) SparseIntArray channelMaxPowers, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Sets max power of each channel.\n     *\n     * <p>If not set, the default max power is set by the Thread HAL service or the Thread radio\n     * chip firmware.\n     *\n     * <p>On success, the Pending Dataset is successfully registered and persisted on the Leader and\n     * {@link OutcomeReceiver#onResult} of {@code receiver} will be called; When failed, {@link\n     * OutcomeReceiver#onError} will be called with a specific error:\n     *\n     * <ul>\n     *   <li>{@link ThreadNetworkException#ERROR_UNSUPPORTED_OPERATION} the operation is no\n     *       supported by the platform.\n     * </ul>\n     *\n     * @param channelMaxPowers SparseIntArray (key: channel, value: max power) consists of channel\n     *     and corresponding max power. Valid channel values should be between {@link\n     *     ActiveOperationalDataset#CHANNEL_MIN_24_GHZ} and {@link\n     *     ActiveOperationalDataset#CHANNEL_MAX_24_GHZ}. The unit of the max power is 0.01dBm. Max\n     *     power values should be between INT16_MIN (-32768) and INT16_MAX (32767). If the max power\n     *     is set to INT16_MAX, the corresponding channel is not supported.\n     * @param executor the executor to execute {@code receiver}.\n     * @param receiver the receiver to receive the result of this operation.\n     * @throws IllegalArgumentException if the size of {@code channelMaxPowers} is smaller than 1,\n     *     or invalid channel or max power is configured.\n     * @hide\n     ",
    "links" : [ "android.net.thread.ActiveOperationalDataset#CHANNEL_MIN_24_GHZ", "android.os.OutcomeReceiver#onResult", "android.net.thread.ThreadNetworkException#ERROR_UNSUPPORTED_OPERATION", "android.net.thread.ActiveOperationalDataset#CHANNEL_MAX_24_GHZ", "android.os.OutcomeReceiver#onError" ]
  }, {
    "name" : "private static ChannelMaxPower[] toChannelMaxPowerArray(@NonNull SparseIntArray channelMaxPowers)",
    "returnType" : "ChannelMaxPower[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void propagateError(Executor executor, OutcomeReceiver<T, ThreadNetworkException> receiver, int errorCode, String errorMsg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setEnabled(boolean enabled, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)", "public int getThreadVersion()", "public void createRandomizedDataset(@NonNull String networkName, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<ActiveOperationalDataset, ThreadNetworkException> receiver)", "public static boolean isAttached(@DeviceRole int deviceRole)", "public void registerStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull StateCallback callback)", "public void unregisterStateCallback(@NonNull StateCallback callback)", "public void registerOperationalDatasetCallback(@NonNull @CallbackExecutor Executor executor, @NonNull OperationalDatasetCallback callback)", "public void unregisterOperationalDatasetCallback(@NonNull OperationalDatasetCallback callback)", "public void join(@NonNull ActiveOperationalDataset activeDataset, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)", "public void scheduleMigration(@NonNull PendingOperationalDataset pendingDataset, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)", "public void leave(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)", "public void setTestNetworkAsUpstream(@Nullable String testNetworkInterfaceName, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)", "public final void setChannelMaxPowers(@NonNull @Size(min = 1) SparseIntArray channelMaxPowers, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, ThreadNetworkException> receiver)", "private static ChannelMaxPower[] toChannelMaxPowerArray(@NonNull SparseIntArray channelMaxPowers)", "private static void propagateError(Executor executor, OutcomeReceiver<T, ThreadNetworkException> receiver, int errorCode, String errorMsg)" ],
  "variableNames" : [ "TAG", "DEVICE_ROLE_STOPPED", "DEVICE_ROLE_DETACHED", "DEVICE_ROLE_CHILD", "DEVICE_ROLE_ROUTER", "DEVICE_ROLE_LEADER", "STATE_DISABLED", "STATE_ENABLED", "STATE_DISABLING", "THREAD_VERSION_1_3", "POWER_LIMITATION_MIN", "POWER_LIMITATION_MAX", "mControllerService", "mStateCallbackMapLock", "mStateCallbackMap", "mOpDatasetCallbackMapLock", "mOpDatasetCallbackMap" ]
}