{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Transliterator.java",
  "packageName" : "android.icu.text",
  "className" : "Transliterator",
  "comment" : "\n * <code>Transliterator</code> is an abstract class that transliterates text from one format to another. The most common\n * kind of transliterator is a script, or alphabet, transliterator. For example, a Russian to Latin transliterator\n * changes Russian text written in Cyrillic characters to phonetically equivalent Latin characters. It does not\n * <em>translate</em> Russian to English! Transliteration, unlike translation, operates on characters, without reference\n * to the meanings of words and sentences.\n *\n * <p>\n * Although script conversion is its most common use, a transliterator can actually perform a more general class of\n * tasks. In fact, <code>Transliterator</code> defines a very general API which specifies only that a segment of the\n * input text is replaced by new text. The particulars of this conversion are determined entirely by subclasses of\n * <code>Transliterator</code>.\n *\n * <p>\n * <b>Transliterators are stateless</b>\n *\n * <p>\n * <code>Transliterator</code> objects are <em>stateless</em>; they retain no information between calls to\n * <code>transliterate()</code>. As a result, threads may share transliterators without synchronizing them. This might\n * seem to limit the complexity of the transliteration operation. In practice, subclasses perform complex\n * transliterations by delaying the replacement of text until it is known that no other replacements are possible. In\n * other words, although the <code>Transliterator</code> objects are stateless, the source text itself embodies all the\n * needed information, and delayed operation allows arbitrary complexity.\n *\n * <p>\n * <b>Batch transliteration</b>\n *\n * <p>\n * The simplest way to perform transliteration is all at once, on a string of existing text. This is referred to as\n * <em>batch</em> transliteration. For example, given a string <code>input</code> and a transliterator <code>t</code>,\n * the call\n *\n * <blockquote><code>String result = t.transliterate(input);\n * </code></blockquote>\n *\n * will transliterate it and return the result. Other methods allow the client to specify a substring to be\n * transliterated and to use {@link Replaceable} objects instead of strings, in order to preserve out-of-band\n * information (such as text styles).\n *\n * <p>\n * <b>Keyboard transliteration</b>\n *\n * <p>\n * Somewhat more involved is <em>keyboard</em>, or incremental transliteration. This is the transliteration of text that\n * is arriving from some source (typically the user's keyboard) one character at a time, or in some other piecemeal\n * fashion.\n *\n * <p>\n * In keyboard transliteration, a <code>Replaceable</code> buffer stores the text. As text is inserted, as much as\n * possible is transliterated on the fly. This means a GUI that displays the contents of the buffer may show text being\n * modified as each new character arrives.\n *\n * <p>\n * Consider the simple rule-based Transliterator:\n *\n * <blockquote><code>\n * th&gt;{theta}<br>\n * t&gt;{tau}\n * </code></blockquote>\n *\n * When the user types 't', nothing will happen, since the transliterator is waiting to see if the next character is\n * 'h'. To remedy this, we introduce the notion of a cursor, marked by a '|' in the output string:\n *\n * <blockquote><code>\n * t&gt;|{tau}<br>\n * {tau}h&gt;{theta}\n * </code></blockquote>\n *\n * Now when the user types 't', tau appears, and if the next character is 'h', the tau changes to a theta. This is\n * accomplished by maintaining a cursor position (independent of the insertion point, and invisible in the GUI) across\n * calls to <code>transliterate()</code>. Typically, the cursor will be coincident with the insertion point, but in a\n * case like the one above, it will precede the insertion point.\n *\n * <p>\n * Keyboard transliteration methods maintain a set of three indices that are updated with each call to\n * <code>transliterate()</code>, including the cursor, start, and limit. These indices are changed by the method, and\n * they are passed in and out via a Position object. The <code>start</code> index marks the beginning of the substring\n * that the transliterator will look at. It is advanced as text becomes committed (but it is not the committed index;\n * that's the <code>cursor</code>). The <code>cursor</code> index, described above, marks the point at which the\n * transliterator last stopped, either because it reached the end, or because it required more characters to\n * disambiguate between possible inputs. The <code>cursor</code> can also be explicitly set by rules.\n * Any characters before the <code>cursor</code> index are frozen; future keyboard\n * transliteration calls within this input sequence will not change them. New text is inserted at the <code>limit</code>\n * index, which marks the end of the substring that the transliterator looks at.\n *\n * <p>\n * Because keyboard transliteration assumes that more characters are to arrive, it is conservative in its operation. It\n * only transliterates when it can do so unambiguously. Otherwise it waits for more characters to arrive. When the\n * client code knows that no more characters are forthcoming, perhaps because the user has performed some input\n * termination operation, then it should call <code>finishTransliteration()</code> to complete any pending\n * transliterations.\n *\n * <p>\n * <b>Inverses</b>\n *\n * <p>\n * Pairs of transliterators may be inverses of one another. For example, if transliterator <b>A</b> transliterates\n * characters by incrementing their Unicode value (so \"abc\" -&gt; \"def\"), and transliterator <b>B</b> decrements character\n * values, then <b>A</b> is an inverse of <b>B</b> and vice versa. If we compose <b>A</b> with <b>B</b> in a compound\n * transliterator, the result is the identity transliterator, that is, a transliterator that does not change its input\n * text.\n *\n * The <code>Transliterator</code> method <code>getInverse()</code> returns a transliterator's inverse, if one exists,\n * or <code>null</code> otherwise. However, the result of <code>getInverse()</code> usually will <em>not</em> be a true\n * mathematical inverse. This is because true inverse transliterators are difficult to formulate. For example, consider\n * two transliterators: <b>AB</b>, which transliterates the character 'A' to 'B', and <b>BA</b>, which transliterates\n * 'B' to 'A'. It might seem that these are exact inverses, since\n *\n * <blockquote>\"A\" x <b>AB</b> -&gt; \"B\"<br>\n * \"B\" x <b>BA</b> -&gt; \"A\"</blockquote>\n *\n * where 'x' represents transliteration. However,\n *\n * <blockquote>\"ABCD\" x <b>AB</b> -&gt; \"BBCD\"<br>\n * \"BBCD\" x <b>BA</b> -&gt; \"AACD\"</blockquote>\n *\n * so <b>AB</b> composed with <b>BA</b> is not the identity. Nonetheless, <b>BA</b> may be usefully considered to be\n * <b>AB</b>'s inverse, and it is on this basis that <b>AB</b><code>.getInverse()</code> could legitimately return\n * <b>BA</b>.\n *\n * <p>\n * <b>Filtering</b>\n * <p>Each transliterator has a filter, which restricts changes to those characters selected by the filter. The\n * filter affects just the characters that are changed -- the characters outside of the filter are still part of the\n * context for the filter. For example, in the following even though 'x' is filtered out, and doesn't convert to y, it does affect the conversion of 'a'.\n *\n * <pre>\n * String rules = &quot;x &gt; y; x{a} &gt; b; &quot;;\n * Transliterator tempTrans = Transliterator.createFromRules(&quot;temp&quot;, rules, Transliterator.FORWARD);\n * tempTrans.setFilter(new UnicodeSet(&quot;[a]&quot;));\n * String tempResult = tempTrans.transform(&quot;xa&quot;);\n * // results in &quot;xb&quot;\n *</pre>\n * <p>\n * <b>IDs and display names</b>\n *\n * <p>\n * A transliterator is designated by a short identifier string or <em>ID</em>. IDs follow the format\n * <em>source-destination</em>, where <em>source</em> describes the entity being replaced, and <em>destination</em>\n * describes the entity replacing <em>source</em>. The entities may be the names of scripts, particular sequences of\n * characters, or whatever else it is that the transliterator converts to or from. For example, a transliterator from\n * Russian to Latin might be named \"Russian-Latin\". A transliterator from keyboard escape sequences to Latin-1\n * characters might be named \"KeyboardEscape-Latin1\". By convention, system entity names are in English, with the\n * initial letters of words capitalized; user entity names may follow any format so long as they do not contain dashes.\n *\n * <p>\n * In addition to programmatic IDs, transliterator objects have display names for presentation in user interfaces,\n * returned by {@link #getDisplayName}.\n *\n * <p>\n * <b>Composed transliterators</b>\n *\n * <p>\n * In addition to built-in system transliterators like \"Latin-Greek\", there are also built-in <em>composed</em>\n * transliterators. These are implemented by composing two or more component transliterators. For example, if we have\n * scripts \"A\", \"B\", \"C\", and \"D\", and we want to transliterate between all pairs of them, then we need to write 12\n * transliterators: \"A-B\", \"A-C\", \"A-D\", \"B-A\",..., \"D-A\", \"D-B\", \"D-C\". If it is possible to convert all scripts to an\n * intermediate script \"M\", then instead of writing 12 rule sets, we only need to write 8: \"A~M\", \"B~M\", \"C~M\", \"D~M\",\n * \"M~A\", \"M~B\", \"M~C\", \"M~D\". (This might not seem like a big win, but it's really 2<em>n</em> vs. <em>n</em>\n * <sup>2</sup> - <em>n</em>, so as <em>n</em> gets larger the gain becomes significant. With 9 scripts, it's 18 vs. 72\n * rule sets, a big difference.) Note the use of \"~\" rather than \"-\" for the script separator here; this indicates that\n * the given transliterator is intended to be composed with others, rather than be used as is.\n *\n * <p>\n * Composed transliterators can be instantiated as usual. For example, the system transliterator \"Devanagari-Gujarati\"\n * is a composed transliterator built internally as \"Devanagari~InterIndic;InterIndic~Gujarati\". When this\n * transliterator is instantiated, it appears externally to be a standard transliterator (e.g., getID() returns\n * \"Devanagari-Gujarati\").\n *\n * <p><b>Rule syntax</b>\n *\n * <p>A set of rules determines how to perform translations.\n * Rules within a rule set are separated by semicolons (';').\n * To include a literal semicolon, prefix it with a backslash ('\\').\n * Unicode Pattern_White_Space is ignored.\n * If the first non-blank character on a line is '#',\n * the entire line is ignored as a comment.\n *\n * <p>Each set of rules consists of two groups, one forward, and one\n * reverse. This is a convention that is not enforced; rules for one\n * direction may be omitted, with the result that translations in\n * that direction will not modify the source text. In addition,\n * bidirectional forward-reverse rules may be specified for\n * symmetrical transformations.\n *\n * <p>Note: Another description of the Transliterator rule syntax is available in\n * <a href=\"https://www.unicode.org/reports/tr35/tr35-general.html#Transform_Rules_Syntax\">section\n * Transform Rules Syntax of UTS #35: Unicode LDML</a>.\n * The rules are shown there using arrow symbols ← and → and ↔.\n * ICU supports both those and the equivalent ASCII symbols &lt; and &gt; and &lt;&gt;.\n *\n * <p>Rule statements take one of the following forms:\n *\n * <dl>\n *     <dt><code>$alefmadda=\\\\u0622;</code></dt>\n *     <dd><strong>Variable definition.</strong> The name on the\n *         left is assigned the text on the right. In this example,\n *         after this statement, instances of the left hand name,\n *         &quot;<code>$alefmadda</code>&quot;, will be replaced by\n *         the Unicode character U+0622. Variable names must begin\n *         with a letter and consist only of letters, digits, and\n *         underscores. Case is significant. Duplicate names cause\n *         an exception to be thrown, that is, variables cannot be\n *         redefined. The right hand side may contain well-formed\n *         text of any length, including no text at all (&quot;<code>$empty=;</code>&quot;).\n *         The right hand side may contain embedded <code>UnicodeSet</code>\n *         patterns, for example, &quot;<code>$softvowel=[eiyEIY]</code>&quot;.</dd>\n *     <dt><code>ai&gt;$alefmadda;</code></dt>\n *     <dd><strong>Forward translation rule.</strong> This rule\n *         states that the string on the left will be changed to the\n *         string on the right when performing forward\n *         transliteration.</dd>\n *     <dt><code>ai&lt;$alefmadda;</code></dt>\n *     <dd><strong>Reverse translation rule.</strong> This rule\n *         states that the string on the right will be changed to\n *         the string on the left when performing reverse\n *         transliteration.</dd>\n * </dl>\n *\n * <dl>\n *     <dt><code>ai&lt;&gt;$alefmadda;</code></dt>\n *     <dd><strong>Bidirectional translation rule.</strong> This\n *         rule states that the string on the right will be changed\n *         to the string on the left when performing forward\n *         transliteration, and vice versa when performing reverse\n *         transliteration.</dd>\n * </dl>\n *\n * <p>Translation rules consist of a <em>match pattern</em> and an <em>output\n * string</em>. The match pattern consists of literal characters,\n * optionally preceded by context, and optionally followed by\n * context. Context characters, like literal pattern characters,\n * must be matched in the text being transliterated. However, unlike\n * literal pattern characters, they are not replaced by the output\n * text. For example, the pattern &quot;<code>abc{def}</code>&quot;\n * indicates the characters &quot;<code>def</code>&quot; must be\n * preceded by &quot;<code>abc</code>&quot; for a successful match.\n * If there is a successful match, &quot;<code>def</code>&quot; will\n * be replaced, but not &quot;<code>abc</code>&quot;. The final '<code>}</code>'\n * is optional, so &quot;<code>abc{def</code>&quot; is equivalent to\n * &quot;<code>abc{def}</code>&quot;. Another example is &quot;<code>{123}456</code>&quot;\n * (or &quot;<code>123}456</code>&quot;) in which the literal\n * pattern &quot;<code>123</code>&quot; must be followed by &quot;<code>456</code>&quot;.\n *\n * <p>The output string of a forward or reverse rule consists of\n * characters to replace the literal pattern characters. If the\n * output string contains the character '<code>|</code>', this is\n * taken to indicate the location of the <em>cursor</em> after\n * replacement. The cursor is the point in the text at which the\n * next replacement, if any, will be applied. The cursor is usually\n * placed within the replacement text; however, it can actually be\n * placed into the precending or following context by using the\n * special character '@'. Examples:\n *\n * <pre>\n *     a {foo} z &gt; | @ bar; # foo -&gt; bar, move cursor before a\n *     {foo} xyz &gt; bar @@|; #&nbsp;foo -&gt; bar, cursor between y and z\n * </pre>\n *\n * <p><b>UnicodeSet</b>\n *\n * <p><code>UnicodeSet</code> patterns may appear anywhere that\n * makes sense. They may appear in variable definitions.\n * Contrariwise, <code>UnicodeSet</code> patterns may themselves\n * contain variable references, such as &quot;<code>$a=[a-z];$not_a=[^$a]</code>&quot;,\n * or &quot;<code>$range=a-z;$ll=[$range]</code>&quot;.\n *\n * <p><code>UnicodeSet</code> patterns may also be embedded directly\n * into rule strings. Thus, the following two rules are equivalent:\n *\n * <pre>\n *     $vowel=[aeiou]; $vowel&gt;'*'; # One way to do this\n *     [aeiou]&gt;'*'; # Another way\n * </pre>\n *\n * <p>See {@link UnicodeSet} for more documentation and examples.\n *\n * <p><b>Segments</b>\n *\n * <p>Segments of the input string can be matched and copied to the\n * output string. This makes certain sets of rules simpler and more\n * general, and makes reordering possible. For example:\n *\n * <pre>\n *     ([a-z]) &gt; $1 $1; # double lowercase letters\n *     ([:Lu:]) ([:Ll:]) &gt; $2 $1; # reverse order of Lu-Ll pairs\n * </pre>\n *\n * <p>The segment of the input string to be copied is delimited by\n * &quot;<code>(</code>&quot; and &quot;<code>)</code>&quot;. Up to\n * nine segments may be defined. Segments may not overlap. In the\n * output string, &quot;<code>$1</code>&quot; through &quot;<code>$9</code>&quot;\n * represent the input string segments, in left-to-right order of\n * definition.\n *\n * <p><b>Anchors</b>\n *\n * <p>Patterns can be anchored to the beginning or the end of the text. This is done with the\n * special characters '<code>^</code>' and '<code>$</code>'. For example:\n *\n * <pre>\n *   ^ a&nbsp;&nbsp; &gt; 'BEG_A'; &nbsp;&nbsp;# match 'a' at start of text\n *   &nbsp; a&nbsp;&nbsp; &gt; 'A'; # match other instances of 'a'\n *   &nbsp; z $ &gt; 'END_Z'; &nbsp;&nbsp;# match 'z' at end of text\n *   &nbsp; z&nbsp;&nbsp; &gt; 'Z';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # match other instances of 'z'\n * </pre>\n *\n * <p>It is also possible to match the beginning or the end of the text using a <code>UnicodeSet</code>.\n * This is done by including a virtual anchor character '<code>$</code>' at the end of the\n * set pattern. Although this is usually the match character for the end anchor, the set will\n * match either the beginning or the end of the text, depending on its placement. For\n * example:\n *\n * <pre>\n *   $x = [a-z$]; &nbsp;&nbsp;# match 'a' through 'z' OR anchor\n *   $x 1&nbsp;&nbsp;&nbsp; &gt; 2;&nbsp;&nbsp; # match '1' after a-z or at the start\n *   &nbsp;&nbsp; 3 $x &gt; 4; &nbsp;&nbsp;# match '3' before a-z or at the end\n * </pre>\n *\n * <p><b>Example</b>\n *\n * <p>The following example rules illustrate many of the features of\n * the rule language.\n *\n * <table border=\"0\" cellpadding=\"4\">\n *     <tr>\n *         <td style=\"vertical-align: top;\">Rule 1.</td>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>abc{def}&gt;x|y</code></td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top;\">Rule 2.</td>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>xyz&gt;r</code></td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top;\">Rule 3.</td>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>yz&gt;q</code></td>\n *     </tr>\n * </table>\n *\n * <p>Applying these rules to the string &quot;<code>adefabcdefz</code>&quot;\n * yields the following results:\n *\n * <table border=\"0\" cellpadding=\"4\">\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>|adefabcdefz</code></td>\n *         <td style=\"vertical-align: top;\">Initial state, no rules match. Advance\n *         cursor.</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>a|defabcdefz</code></td>\n *         <td style=\"vertical-align: top;\">Still no match. Rule 1 does not match\n *         because the preceding context is not present.</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>ad|efabcdefz</code></td>\n *         <td style=\"vertical-align: top;\">Still no match. Keep advancing until\n *         there is a match...</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>ade|fabcdefz</code></td>\n *         <td style=\"vertical-align: top;\">...</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>adef|abcdefz</code></td>\n *         <td style=\"vertical-align: top;\">...</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>adefa|bcdefz</code></td>\n *         <td style=\"vertical-align: top;\">...</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>adefab|cdefz</code></td>\n *         <td style=\"vertical-align: top;\">...</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>adefabc|defz</code></td>\n *         <td style=\"vertical-align: top;\">Rule 1 matches; replace &quot;<code>def</code>&quot;\n *         with &quot;<code>xy</code>&quot; and back up the cursor\n *         to before the '<code>y</code>'.</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>adefabcx|yz</code></td>\n *         <td style=\"vertical-align: top;\">Although &quot;<code>xyz</code>&quot; is\n *         present, rule 2 does not match because the cursor is\n *         before the '<code>y</code>', not before the '<code>x</code>'.\n *         Rule 3 does match. Replace &quot;<code>yz</code>&quot;\n *         with &quot;<code>q</code>&quot;.</td>\n *     </tr>\n *     <tr>\n *         <td style=\"vertical-align: top; write-space: nowrap;\"><code>adefabcxq|</code></td>\n *         <td style=\"vertical-align: top;\">The cursor is at the end;\n *         transliteration is complete.</td>\n *     </tr>\n * </table>\n *\n * <p>The order of rules is significant. If multiple rules may match\n * at some point, the first matching rule is applied.\n *\n * <p>Forward and reverse rules may have an empty output string.\n * Otherwise, an empty left or right hand side of any statement is a\n * syntax error.\n *\n * <p>Single quotes are used to quote any character other than a\n * digit or letter. To specify a single quote itself, inside or\n * outside of quotes, use two single quotes in a row. For example,\n * the rule &quot;<code>'&gt;'&gt;o''clock</code>&quot; changes the\n * string &quot;<code>&gt;</code>&quot; to the string &quot;<code>o'clock</code>&quot;.\n *\n * <p><b>Notes</b>\n *\n * <p>While a Transliterator is being built from rules, it checks that\n * the rules are added in proper order. For example, if the rule\n * &quot;a&gt;x&quot; is followed by the rule &quot;ab&gt;y&quot;,\n * then the second rule will throw an exception. The reason is that\n * the second rule can never be triggered, since the first rule\n * always matches anything it matches. In other words, the first\n * rule <em>masks</em> the second rule.\n *\n * @author Alan Liu\n ",
  "links" : [ "android.icu.text.UnicodeSet", "#getDisplayName", "android.icu.text.Replaceable" ],
  "variables" : [ {
    "name" : "FORWARD",
    "type" : "int",
    "comment" : "\n     * Direction constant indicating the forward direction in a transliterator,\n     * e.g., the forward rules of a rule-based Transliterator.  An \"A-B\"\n     * transliterator transliterates A to B when operating in the forward\n     * direction, and B to A when operating in the reverse direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "REVERSE",
    "type" : "int",
    "comment" : "\n     * Direction constant indicating the reverse direction in a transliterator,\n     * e.g., the reverse rules of a rule-based Transliterator.  An \"A-B\"\n     * transliterator transliterates A to B when operating in the forward\n     * direction, and B to A when operating in the reverse direction.\n     ",
    "links" : [ ]
  }, {
    "name" : "ID",
    "type" : "String",
    "comment" : "\n     * Programmatic name, e.g., \"Latin-Arabic\".\n     ",
    "links" : [ ]
  }, {
    "name" : "filter",
    "type" : "UnicodeSet",
    "comment" : "\n     * This transliterator's filter.  Any character for which\n     * <tt>filter.contains()</tt> returns <tt>false</tt> will not be\n     * altered by this transliterator.  If <tt>filter</tt> is\n     * <tt>null</tt> then no filtering is applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "maximumContextLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "registry",
    "type" : "TransliteratorRegistry",
    "comment" : "\n     * System transliterator registry.\n     ",
    "links" : [ ]
  }, {
    "name" : "displayNameCache",
    "type" : "Map<CaseInsensitiveString, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RB_DISPLAY_NAME_PREFIX",
    "type" : "String",
    "comment" : "\n     * Prefix for resource bundle key for the display name for a\n     * transliterator.  The ID is appended to this to form the key.\n     * The resource bundle value should be a String.\n     ",
    "links" : [ ]
  }, {
    "name" : "RB_SCRIPT_DISPLAY_NAME_PREFIX",
    "type" : "String",
    "comment" : "\n     * Prefix for resource bundle key for the display name for a\n     * transliterator SCRIPT.  The ID is appended to this to form the key.\n     * The resource bundle value should be a String.\n     ",
    "links" : [ ]
  }, {
    "name" : "RB_DISPLAY_NAME_PATTERN",
    "type" : "String",
    "comment" : "\n     * Resource bundle key for display name pattern.\n     * The resource bundle value should be a String forming a\n     * MessageFormat pattern, e.g.:\n     * \"{0,choice,0#|1#{1} Transliterator|2#{1} to {2} Transliterator}\".\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_DELIM",
    "type" : "char",
    "comment" : "\n     * Delimiter between elements in a compound ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_SEP",
    "type" : "char",
    "comment" : "\n     * Delimiter before target in an ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "VARIANT_SEP",
    "type" : "char",
    "comment" : "\n     * Delimiter before variant in an ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "\n     * To enable debugging output in the Transliterator component, set\n     * DEBUG to true.\n     *\n     * N.B. Make sure to recompile all of the android.icu.text package\n     * after changing this.  Easiest way to do this is 'ant clean\n     * core' ('ant' will NOT pick up the dependency automatically).\n     *\n     * <<This generates a lot of output.>>\n     ",
    "links" : [ ]
  }, {
    "name" : "ROOT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RB_RULE_BASED_IDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int transliterate(Replaceable text, int start, int limit)",
    "returnType" : "int",
    "comment" : "\n     * Transliterates a segment of a string, with optional filtering.\n     *\n     * @param text the string to be transliterated\n     * @param start the beginning index, inclusive; <code>0 &lt;= start\n     * &lt;= limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit\n     * &lt;= text.length()</code>.\n     * @return The new limit index.  The text previously occupying <code>[start,\n     * limit)</code> has been transliterated, possibly to a string of a different\n     * length, at <code>[start, </code><em>new-limit</em><code>)</code>, where\n     * <em>new-limit</em> is the return value. If the input offsets are out of bounds,\n     * the returned value is -1 and the input string remains unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void transliterate(Replaceable text)",
    "returnType" : "void",
    "comment" : "\n     * Transliterates an entire string in place. Convenience method.\n     * @param text the string to be transliterated\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String transliterate(String text)",
    "returnType" : "String",
    "comment" : "\n     * Transliterate an entire string and returns the result. Convenience method.\n     *\n     * @param text the string to be transliterated\n     * @return The transliterated text\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void transliterate(Replaceable text, Position index, String insertion)",
    "returnType" : "void",
    "comment" : "\n     * Transliterates the portion of the text buffer that can be\n     * transliterated unambiguosly after new text has been inserted,\n     * typically as a result of a keyboard event.  The new text in\n     * <code>insertion</code> will be inserted into <code>text</code>\n     * at <code>index.contextLimit</code>, advancing\n     * <code>index.contextLimit</code> by <code>insertion.length()</code>.\n     * Then the transliterator will try to transliterate characters of\n     * <code>text</code> between <code>index.start</code> and\n     * <code>index.contextLimit</code>.  Characters before\n     * <code>index.start</code> will not be changed.\n     *\n     * <p>Upon return, values in <code>index</code> will be updated.\n     * <code>index.contextStart</code> will be advanced to the first\n     * character that future calls to this method will read.\n     * <code>index.start</code> and <code>index.contextLimit</code> will\n     * be adjusted to delimit the range of text that future calls to\n     * this method may change.\n     *\n     * <p>Typical usage of this method begins with an initial call\n     * with <code>index.contextStart</code> and <code>index.contextLimit</code>\n     * set to indicate the portion of <code>text</code> to be\n     * transliterated, and <code>index.start == index.contextStart</code>.\n     * Thereafter, <code>index</code> can be used without\n     * modification in future calls, provided that all changes to\n     * <code>text</code> are made via this method.\n     *\n     * <p>This method assumes that future calls may be made that will\n     * insert new text into the buffer.  As a result, it only performs\n     * unambiguous transliterations.  After the last call to this\n     * method, there may be untransliterated text that is waiting for\n     * more input to resolve an ambiguity.  In order to perform these\n     * pending transliterations, clients should call {@link\n     * #finishTransliteration} after the last call to this\n     * method has been made.\n     *\n     * @param text the buffer holding transliterated and untransliterated text\n     * @param index the start and limit of the text, the position\n     * of the cursor, and the start and limit of transliteration.\n     * @param insertion text to be inserted and possibly\n     * transliterated into the translation buffer at\n     * <code>index.contextLimit</code>.  If <code>null</code> then no text\n     * is inserted.\n     * @exception IllegalArgumentException if <code>index</code>\n     * is invalid\n     ",
    "links" : [ "#finishTransliteration" ]
  }, {
    "name" : "public final void transliterate(Replaceable text, Position index, int insertion)",
    "returnType" : "void",
    "comment" : "\n     * Transliterates the portion of the text buffer that can be\n     * transliterated unambiguosly after a new character has been\n     * inserted, typically as a result of a keyboard event.  This is a\n     * convenience method; see {@link #transliterate(Replaceable,\n     * Transliterator.Position, String)} for details.\n     * @param text the buffer holding transliterated and\n     * untransliterated text\n     * @param index the start and limit of the text, the position\n     * of the cursor, and the start and limit of transliteration.\n     * @param insertion text to be inserted and possibly\n     * transliterated into the translation buffer at\n     * <code>index.contextLimit</code>.\n     * @see #transliterate(Replaceable, Transliterator.Position, String)\n     ",
    "links" : [ "#transliterate(Replaceable" ]
  }, {
    "name" : "public final void transliterate(Replaceable text, Position index)",
    "returnType" : "void",
    "comment" : "\n     * Transliterates the portion of the text buffer that can be\n     * transliterated unambiguosly.  This is a convenience method; see\n     * {@link #transliterate(Replaceable, Transliterator.Position,\n     * String)} for details.\n     * @param text the buffer holding transliterated and\n     * untransliterated text\n     * @param index the start and limit of the text, the position\n     * of the cursor, and the start and limit of transliteration.\n     * @see #transliterate(Replaceable, Transliterator.Position, String)\n     ",
    "links" : [ "#transliterate(Replaceable" ]
  }, {
    "name" : "public final void finishTransliteration(Replaceable text, Position index)",
    "returnType" : "void",
    "comment" : "\n     * Finishes any pending transliterations that were waiting for\n     * more characters.  Clients should call this method as the last\n     * call after a sequence of one or more calls to\n     * <code>transliterate()</code>.\n     * @param text the buffer holding transliterated and\n     * untransliterated text.\n     * @param index the array of indices previously passed to {@link\n     * #transliterate}\n     ",
    "links" : [ "#transliterate" ]
  }, {
    "name" : "protected abstract void handleTransliterate(Replaceable text, Position pos, boolean incremental)",
    "returnType" : "void",
    "comment" : "\n     * Abstract method that concrete subclasses define to implement\n     * their transliteration algorithm.  This method handles both\n     * incremental and non-incremental transliteration.  Let\n     * <code>originalStart</code> refer to the value of\n     * <code>pos.start</code> upon entry.\n     *\n     * <ul>\n     *  <li>If <code>incremental</code> is false, then this method\n     *  should transliterate all characters between\n     *  <code>pos.start</code> and <code>pos.limit</code>. Upon return\n     *  <code>pos.start</code> must == <code> pos.limit</code>.</li>\n     *\n     *  <li>If <code>incremental</code> is true, then this method\n     *  should transliterate all characters between\n     *  <code>pos.start</code> and <code>pos.limit</code> that can be\n     *  unambiguously transliterated, regardless of future insertions\n     *  of text at <code>pos.limit</code>.  Upon return,\n     *  <code>pos.start</code> should be in the range\n     *  [<code>originalStart</code>, <code>pos.limit</code>).\n     *  <code>pos.start</code> should be positioned such that\n     *  characters [<code>originalStart</code>, <code>\n     *  pos.start</code>) will not be changed in the future by this\n     *  transliterator and characters [<code>pos.start</code>,\n     *  <code>pos.limit</code>) are unchanged.</li>\n     * </ul>\n     *\n     * <p>Implementations of this method should also obey the\n     * following invariants:</p>\n     *\n     * <ul>\n     *  <li> <code>pos.limit</code> and <code>pos.contextLimit</code>\n     *  should be updated to reflect changes in length of the text\n     *  between <code>pos.start</code> and <code>pos.limit</code>. The\n     *  difference <code> pos.contextLimit - pos.limit</code> should\n     *  not change.</li>\n     *\n     *  <li><code>pos.contextStart</code> should not change.</li>\n     *\n     *  <li>Upon return, neither <code>pos.start</code> nor\n     *  <code>pos.limit</code> should be less than\n     *  <code>originalStart</code>.</li>\n     *\n     *  <li>Text before <code>originalStart</code> and text after\n     *  <code>pos.limit</code> should not change.</li>\n     *\n     *  <li>Text before <code>pos.contextStart</code> and text after\n     *  <code> pos.contextLimit</code> should be ignored.</li>\n     * </ul>\n     *\n     * <p>Subclasses may safely assume that all characters in\n     * [<code>pos.start</code>, <code>pos.limit</code>) are filtered.\n     * In other words, the filter has already been applied by the time\n     * this method is called.  See\n     * <code>filteredTransliterate()</code>.\n     *\n     * <p>This method is <b>not</b> for public consumption.  Calling\n     * this method directly will transliterate\n     * [<code>pos.start</code>, <code>pos.limit</code>) without\n     * applying the filter. End user code should call <code>\n     * transliterate()</code> instead of this method. Subclass code\n     * should call <code>filteredTransliterate()</code> instead of\n     * this method.<p>\n     *\n     * @param text the buffer holding transliterated and\n     * untransliterated text\n     *\n     * @param pos the indices indicating the start, limit, context\n     * start, and context limit of the text.\n     *\n     * @param incremental if true, assume more text may be inserted at\n     * <code>pos.limit</code> and act accordingly.  Otherwise,\n     * transliterate all text between <code>pos.start</code> and\n     * <code>pos.limit</code> and move <code>pos.start</code> up to\n     * <code>pos.limit</code>.\n     *\n     * @see #transliterate\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private void filteredTransliterate(Replaceable text, Position index, boolean incremental, boolean rollback)",
    "returnType" : "void",
    "comment" : "\n     * Top-level transliteration method, handling filtering, incremental and\n     * non-incremental transliteration, and rollback.  All transliteration\n     * public API methods eventually call this method with a rollback argument\n     * of true.  Other entities may call this method but rollback should be\n     * false.\n     *\n     * <p>If this transliterator has a filter, break up the input text into runs\n     * of unfiltered characters.  Pass each run to\n     * <subclass>.handleTransliterate().\n     *\n     * <p>In incremental mode, if rollback is true, perform a special\n     * incremental procedure in which several passes are made over the input\n     * text, adding one character at a time, and committing successful\n     * transliterations as they occur.  Unsuccessful transliterations are rolled\n     * back and retried with additional characters to give correct results.\n     *\n     * @param text the text to be transliterated\n     * @param index the position indices\n     * @param incremental if true, then assume more characters may be inserted\n     * at index.limit, and postpone processing to accommodate future incoming\n     * characters\n     * @param rollback if true and if incremental is true, then perform special\n     * incremental processing, as described above, and undo partial\n     * transliterations where necessary.  If incremental is false then this\n     * parameter is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void filteredTransliterate(Replaceable text, Position index, boolean incremental)",
    "returnType" : "void",
    "comment" : "\n     * Transliterate a substring of text, as specified by index, taking filters\n     * into account.  This method is for subclasses that need to delegate to\n     * another transliterator.\n     * @param text the text to be transliterated\n     * @param index the position indices\n     * @param incremental if true, then assume more characters may be inserted\n     * at index.limit, and postpone processing to accommodate future incoming\n     * characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getMaximumContextLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the longest context required by this transliterator.\n     * This is <em>preceding</em> context.  The default value is zero, but\n     * subclasses can change this by calling <code>setMaximumContextLength()</code>.\n     * For example, if a transliterator translates \"ddd\" (where\n     * d is any digit) to \"555\" when preceded by \"(ddd)\", then the preceding\n     * context length is 5, the length of \"(ddd)\".\n     *\n     * @return The maximum number of preceding context characters this\n     * transliterator needs to examine\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setMaximumContextLength(int a)",
    "returnType" : "void",
    "comment" : "\n     * Method for subclasses to use to set the maximum context length.\n     * @see #getMaximumContextLength\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getID()",
    "returnType" : "String",
    "comment" : "\n     * Returns a programmatic identifier for this transliterator.\n     * If this identifier is passed to <code>getInstance()</code>, it\n     * will return this object, if it has been registered.\n     * @see #getAvailableIDs\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void setID(String id)",
    "returnType" : "void",
    "comment" : "\n     * Set the programmatic identifier for this transliterator.  Only\n     * for use by subclasses.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getDisplayName(String ID)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name for this transliterator that is appropriate for\n     * display to the user in the default <code>DISPLAY</code> locale.  See {@link\n     * #getDisplayName(String,Locale)} for details.\n     * @see android.icu.util.ULocale.Category#DISPLAY\n     ",
    "links" : [ "#getDisplayName(String" ]
  }, {
    "name" : "public static String getDisplayName(String id, Locale inLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name for this transliterator that is appropriate for\n     * display to the user in the given locale.  This name is taken\n     * from the locale resource data in the standard manner of the\n     * <code>java.text</code> package.\n     *\n     * <p>If no localized names exist in the system resource bundles,\n     * a name is synthesized using a localized\n     * <code>MessageFormat</code> pattern from the resource data.  The\n     * arguments to this pattern are an integer followed by one or two\n     * strings.  The integer is the number of strings, either 1 or 2.\n     * The strings are formed by splitting the ID for this\n     * transliterator at the first '-'.  If there is no '-', then the\n     * entire ID forms the only string.\n     * @param inLocale the Locale in which the display name should be\n     * localized.\n     * @see java.text.MessageFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(String id, ULocale inLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns a name for this transliterator that is appropriate for\n     * display to the user in the given locale.  This name is taken\n     * from the locale resource data in the standard manner of the\n     * <code>java.text</code> package.\n     *\n     * <p>If no localized names exist in the system resource bundles,\n     * a name is synthesized using a localized\n     * <code>MessageFormat</code> pattern from the resource data.  The\n     * arguments to this pattern are an integer followed by one or two\n     * strings.  The integer is the number of strings, either 1 or 2.\n     * The strings are formed by splitting the ID for this\n     * transliterator at the first '-'.  If there is no '-', then the\n     * entire ID forms the only string.\n     * @param inLocale the ULocale in which the display name should be\n     * localized.\n     * @see java.text.MessageFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "public final UnicodeFilter getFilter()",
    "returnType" : "UnicodeFilter",
    "comment" : "\n     * Returns the filter used by this transliterator, or <tt>null</tt>\n     * if this transliterator uses no filter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilter(UnicodeFilter filter)",
    "returnType" : "void",
    "comment" : "\n     * Changes the filter used by this transliterator.  If the filter\n     * is set to <tt>null</tt> then no filtering will occur.\n     *\n     * <p>Callers must take care if a transliterator is in use by\n     * multiple threads.  The filter should not be changed by one\n     * thread while another thread may be transliterating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Transliterator getInstance(String ID)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Returns a <code>Transliterator</code> object given its ID.\n     * The ID must be a system transliterator ID.\n     *\n     * @param ID a valid ID, as enumerated by <code>getAvailableIDs()</code>\n     * @return A <code>Transliterator</code> object with the given ID\n     * @exception IllegalArgumentException if the given ID is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Transliterator getInstance(String ID, int dir)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Returns a <code>Transliterator</code> object given its ID.\n     * The ID must be a system transliterator ID.\n     *\n     * @param ID a valid ID, as enumerated by <code>getAvailableIDs()</code>\n     * @param dir either FORWARD or REVERSE.  If REVERSE then the\n     * inverse of the given ID is instantiated.\n     * @return A <code>Transliterator</code> object with the given ID\n     * @exception IllegalArgumentException if the given ID is invalid.\n     * @see #getAvailableIDs\n     * @see #getID\n     ",
    "links" : [ ]
  }, {
    "name" : " static Transliterator getBasicInstance(String id, String canonID)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Create a transliterator from a basic ID.  This is an ID\n     * containing only the forward direction source, target, and\n     * variant.\n     * @param id a basic ID of the form S-T or S-T/V.\n     * @param canonID canonical ID to apply to the result, or\n     * null to leave the ID unchanged\n     * @return a newly created Transliterator or null if the ID is\n     * invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Transliterator createFromRules(String ID, String rules, int dir)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Returns a <code>Transliterator</code> object constructed from\n     * the given rule string.  This will be a rule-based Transliterator,\n     * if the rule string contains only rules, or a\n     * compound Transliterator, if it contains ID blocks, or a\n     * null Transliterator, if it contains ID blocks which parse as\n     * empty for the given direction.\n     *\n     * @param ID the id for the transliterator.\n     * @param rules rules, separated by ';'\n     * @param dir either FORWARD or REVERSE.\n     * @return a newly created Transliterator\n     * @throws IllegalArgumentException if there is a problem with the ID or the rules\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toRules(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Returns a rule string for this transliterator.\n     * @param escapeUnprintable if true, then unprintable characters\n     * will be converted to escape form backslash-'u' or\n     * backslash-'U'.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final String baseToRules(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Returns a rule string for this transliterator.  This is\n     * a non-overrideable base class implementation that subclasses\n     * may call.  It simply munges the ID into the correct format,\n     * that is, \"foo\" =&gt; \"::foo\".\n     * @param escapeUnprintable if true, then unprintable characters\n     * will be converted to escape form backslash-'u' or\n     * backslash-'U'.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transliterator[] getElements()",
    "returnType" : "Transliterator[]",
    "comment" : "\n     * Return the elements that make up this transliterator.  For\n     * example, if the transliterator \"NFD;Jamo-Latin;Latin-Greek\"\n     * were created, the return value of this method would be an array\n     * of the three transliterator objects that make up that\n     * transliterator: [NFD, Jamo-Latin, Latin-Greek].\n     *\n     * <p>If this transliterator is not composed of other\n     * transliterators, then this method will return an array of\n     * length one containing a reference to this transliterator.\n     * @return an array of one or more transliterators that make up\n     * this transliterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public final UnicodeSet getSourceSet()",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * Returns the set of all characters that may be modified in the\n     * input text by this Transliterator.  This incorporates this\n     * object's current filter; if the filter is changed, the return\n     * value of this function will change.  The default implementation\n     * returns an empty set. The return result is approximate in any case\n     * and is intended for use by tests, tools, or utilities.\n     * @see #getTargetSet\n     ",
    "links" : [ ]
  }, {
    "name" : "protected UnicodeSet handleGetSourceSet()",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * Framework method that returns the set of all characters that\n     * may be modified in the input text by this Transliterator,\n     * ignoring the effect of this object's filter.  The base class\n     * implementation returns the empty set.  Subclasses that wish to\n     * implement this should override this method.\n     * @return the set of characters that this transliterator may\n     * modify.  The set may be modified, so subclasses should return a\n     * newly-created object.\n     * @see #getSourceSet\n     * @see #getTargetSet\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet getTargetSet()",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * Returns the set of all characters that may be generated as\n     * replacement text by this transliterator.  The default\n     * implementation returns the empty set.  Some subclasses may\n     * override this method to return a more precise result.  The\n     * return result is approximate in any case and is intended for\n     * use by tests, tools, or utilities requiring such\n     * meta-information.\n     * <p>Warning. You might expect an empty filter to always produce an empty target.\n     * However, consider the following:\n     * <pre>\n     * [Pp]{}[\\u03A3\\u03C2\\u03C3\\u03F7\\u03F8\\u03FA\\u03FB] &gt; \\';\n     * </pre>\n     * With a filter of [], you still get some elements in the target set, because this rule will still match. It could\n     * be recast to the following if it were important.\n     * <pre>\n     * [Pp]{([\\u03A3\\u03C2\\u03C3\\u03F7\\u03F8\\u03FA\\u03FB])} &gt; \\' | $1;\n     * </pre>\n     * @see #getTargetSet\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSourceTargetSet(UnicodeSet inputFilter, UnicodeSet sourceSet, UnicodeSet targetSet)",
    "returnType" : "void",
    "comment" : "\n     * Returns the set of all characters that may be generated as\n     * replacement text by this transliterator, filtered by BOTH the input filter, and the current getFilter().\n     * <p>SHOULD BE OVERRIDDEN BY SUBCLASSES.\n     * It is probably an error for any transliterator to NOT override this, but we can't force them to\n     * for backwards compatibility.\n     * <p>Other methods vector through this.\n     * <p>When gathering the information on source and target, the compound transliterator makes things complicated.\n     * For example, suppose we have:\n     * <pre>\n     * Global FILTER = [ax]\n     * a &gt; b;\n     * :: NULL;\n     * b &gt; c;\n     * x &gt; d;\n     * </pre>\n     * While the filter just allows a and x, b is an intermediate result, which could produce c. So the source and target sets\n     * cannot be gathered independently. What we have to do is filter the sources for the first transliterator according to\n     * the global filter, intersect that transliterator's filter. Based on that we get the target.\n     * The next transliterator gets as a global filter (global + last target). And so on.\n     * <p>There is another complication:\n     * <pre>\n     * Global FILTER = [ax]\n     * a &gt;|b;\n     * b &gt;c;\n     * </pre>\n     * Even though b would be filtered from the input, whenever we have a backup, it could be part of the input. So ideally we will\n     * change the global filter as we go.\n     * @param targetSet TODO\n     * @see #getTargetSet\n     * @deprecated  This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet getFilterAsUnicodeSet(UnicodeSet externalFilter)",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * Returns the intersectionof this instance's filter intersected with an external filter.\n     * The externalFilter must be frozen (it is frozen if not).\n     * The result may be frozen, so don't attempt to modify.\n     * @deprecated  This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Transliterator getInverse()",
    "returnType" : "Transliterator",
    "comment" : "\n     * Returns this transliterator's inverse.  See the class\n     * documentation for details.  This implementation simply inverts\n     * the two entities in the ID and attempts to retrieve the\n     * resulting transliterator.  That is, if <code>getID()</code>\n     * returns \"A-B\", then this method will return the result of\n     * <code>getInstance(\"B-A\")</code>, or <code>null</code> if that\n     * call fails.\n     *\n     * <p>Subclasses with knowledge of their inverse may wish to\n     * override this method.\n     *\n     * @return a transliterator that is an inverse, not necessarily\n     * exact, of this transliterator, or <code>null</code> if no such\n     * transliterator is registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerClass(String ID, Class<? extends Transliterator> transClass, String displayName)",
    "returnType" : "void",
    "comment" : "\n     * Registers a subclass of <code>Transliterator</code> with the\n     * system.  This subclass must have a public constructor taking no\n     * arguments.  When that constructor is called, the resulting\n     * object must return the <code>ID</code> passed to this method if\n     * its <code>getID()</code> method is called.\n     *\n     * @param ID the result of <code>getID()</code> for this\n     * transliterator\n     * @param transClass a subclass of <code>Transliterator</code>\n     * @see #unregister\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerFactory(String ID, Factory factory)",
    "returnType" : "void",
    "comment" : "\n     * Register a factory object with the given ID.  The factory\n     * method should return a new instance of the given transliterator.\n     *\n     * <p>Because ICU may choose to cache Transliterator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Transliterator.getInstance to avoid undefined behavior.\n     *\n     * @param ID the ID of this transliterator\n     * @param factory the factory object\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerInstance(Transliterator trans)",
    "returnType" : "void",
    "comment" : "\n     * Register a Transliterator object with the given ID.\n     *\n     * <p>Because ICU may choose to cache Transliterator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Transliterator.getInstance to avoid undefined behavior.\n     *\n     * @param trans the Transliterator object\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " static void registerInstance(Transliterator trans, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Register a Transliterator object.\n     *\n     * <p>Because ICU may choose to cache Transliterator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Transliterator.getInstance to avoid undefined behavior.\n     *\n     * @param trans the Transliterator object\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerAlias(String aliasID, String realID)",
    "returnType" : "void",
    "comment" : "\n     * Register an ID as an alias of another ID.  Instantiating\n     * alias ID produces the same result as instantiating the original ID.\n     * This is generally used to create short aliases of compound IDs.\n     *\n     * <p>Because ICU may choose to cache Transliterator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Transliterator.getInstance to avoid undefined behavior.\n     *\n     * @param aliasID The new ID being registered.\n     * @param realID The existing ID that the new ID should be an alias of.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " static void registerSpecialInverse(String target, String inverseTarget, boolean bidirectional)",
    "returnType" : "void",
    "comment" : "\n     * Register two targets as being inverses of one another.  For\n     * example, calling registerSpecialInverse(\"NFC\", \"NFD\", true) causes\n     * Transliterator to form the following inverse relationships:\n     *\n     * <pre>NFC =&gt; NFD\n     * Any-NFC =&gt; Any-NFD\n     * NFD =&gt; NFC\n     * Any-NFD =&gt; Any-NFC</pre>\n     *\n     * (Without the special inverse registration, the inverse of NFC\n     * would be NFC-Any.)  Note that NFD is shorthand for Any-NFD, but\n     * that the presence or absence of \"Any-\" is preserved.\n     *\n     * <p>The relationship is symmetrical; registering (a, b) is\n     * equivalent to registering (b, a).\n     *\n     * <p>The relevant IDs must still be registered separately as\n     * factories or classes.\n     *\n     * <p>Only the targets are specified.  Special inverses always\n     * have the form Any-Target1 &lt;=&gt; Any-Target2.  The target should\n     * have canonical casing (the casing desired to be produced when\n     * an inverse is formed) and should contain no whitespace or other\n     * extraneous characters.\n     *\n     * @param target the target against which to register the inverse\n     * @param inverseTarget the inverse of target, that is\n     * Any-target.getInverse() =&gt; Any-inverseTarget\n     * @param bidirectional if true, register the reverse relation\n     * as well, that is, Any-inverseTarget.getInverse() =&gt; Any-target\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unregister(String ID)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a transliterator or class.  This may be either\n     * a system transliterator or a user transliterator or class.\n     *\n     * @param ID the ID of the transliterator or class\n     * @see #registerClass\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Enumeration<String> getAvailableIDs()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over the programmatic names of registered\n     * <code>Transliterator</code> objects.  This includes both system\n     * transliterators and user transliterators registered using\n     * <code>registerClass()</code>.  The enumerated names may be\n     * passed to <code>getInstance()</code>.\n     *\n     * @return An <code>Enumeration</code> over <code>String</code> objects\n     * @see #getInstance\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Enumeration<String> getAvailableSources()",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over the source names of registered\n     * transliterators.  Source names may be passed to\n     * getAvailableTargets() to obtain available targets for each\n     * source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Enumeration<String> getAvailableTargets(String source)",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over the target names of registered\n     * transliterators having a given source name.  Target names may\n     * be passed to getAvailableVariants() to obtain available\n     * variants for each source and target pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Enumeration<String> getAvailableVariants(String source, String target)",
    "returnType" : "Enumeration<String>",
    "comment" : "\n     * Returns an enumeration over the variant names of registered\n     * transliterators having a given source name and target name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerAny()",
    "returnType" : "void",
    "comment" : "\n     * Register the script-based \"Any\" transliterators: Any-Latin, Any-Greek\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String transform(String source)",
    "returnType" : "String",
    "comment" : "\n     * Implements StringTransform via this method.\n     * @param source text to be transformed (eg lowercased)\n     * @return result\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int transliterate(Replaceable text, int start, int limit)", "public final void transliterate(Replaceable text)", "public final String transliterate(String text)", "public final void transliterate(Replaceable text, Position index, String insertion)", "public final void transliterate(Replaceable text, Position index, int insertion)", "public final void transliterate(Replaceable text, Position index)", "public final void finishTransliteration(Replaceable text, Position index)", "protected abstract void handleTransliterate(Replaceable text, Position pos, boolean incremental)", "private void filteredTransliterate(Replaceable text, Position index, boolean incremental, boolean rollback)", "public void filteredTransliterate(Replaceable text, Position index, boolean incremental)", "public final int getMaximumContextLength()", "protected void setMaximumContextLength(int a)", "public final String getID()", "protected final void setID(String id)", "public static final String getDisplayName(String ID)", "public static String getDisplayName(String id, Locale inLocale)", "public static String getDisplayName(String id, ULocale inLocale)", "public final UnicodeFilter getFilter()", "public void setFilter(UnicodeFilter filter)", "public static final Transliterator getInstance(String ID)", "public static Transliterator getInstance(String ID, int dir)", " static Transliterator getBasicInstance(String id, String canonID)", "public static final Transliterator createFromRules(String ID, String rules, int dir)", "public String toRules(boolean escapeUnprintable)", "protected final String baseToRules(boolean escapeUnprintable)", "public Transliterator[] getElements()", "public final UnicodeSet getSourceSet()", "protected UnicodeSet handleGetSourceSet()", "public UnicodeSet getTargetSet()", "public void addSourceTargetSet(UnicodeSet inputFilter, UnicodeSet sourceSet, UnicodeSet targetSet)", "public UnicodeSet getFilterAsUnicodeSet(UnicodeSet externalFilter)", "public final Transliterator getInverse()", "public static void registerClass(String ID, Class<? extends Transliterator> transClass, String displayName)", "public static void registerFactory(String ID, Factory factory)", "public static void registerInstance(Transliterator trans)", " static void registerInstance(Transliterator trans, boolean visible)", "public static void registerAlias(String aliasID, String realID)", " static void registerSpecialInverse(String target, String inverseTarget, boolean bidirectional)", "public static void unregister(String ID)", "public static final Enumeration<String> getAvailableIDs()", "public static final Enumeration<String> getAvailableSources()", "public static final Enumeration<String> getAvailableTargets(String source)", "public static final Enumeration<String> getAvailableVariants(String source, String target)", "public static void registerAny()", "public String transform(String source)" ],
  "variableNames" : [ "FORWARD", "REVERSE", "ID", "filter", "maximumContextLength", "registry", "displayNameCache", "RB_DISPLAY_NAME_PREFIX", "RB_SCRIPT_DISPLAY_NAME_PREFIX", "RB_DISPLAY_NAME_PATTERN", "ID_DELIM", "ID_SEP", "VARIANT_SEP", "DEBUG", "ROOT", "RB_RULE_BASED_IDS" ]
}