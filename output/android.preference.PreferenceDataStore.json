{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/preference/PreferenceDataStore.java",
  "packageName" : "android.preference",
  "className" : "PreferenceDataStore",
  "comment" : "\n * A data store interface to be implemented and provided to the Preferences framework. This can be\n * used to replace the default {@link android.content.SharedPreferences}, if needed.\n *\n * <p>In most cases you want to use {@link android.content.SharedPreferences} as it is automatically\n * backed up and migrated to new devices. However, providing custom data store to preferences can be\n * useful if your app stores its preferences in a local db, cloud or they are device specific like\n * \"Developer settings\". It might be also useful when you want to use the preferences UI but\n * the data are not supposed to be stored at all because they are valid per session only.\n *\n * <p>Once a put method is called it is full responsibility of the data store implementation to\n * safely store the given values. Time expensive operations need to be done in the background to\n * prevent from blocking the UI. You also need to have a plan on how to serialize the data in case\n * the activity holding this object gets destroyed.\n *\n * <p>By default, all \"put\" methods throw {@link UnsupportedOperationException}.\n *\n * @see Preference#setPreferenceDataStore(PreferenceDataStore)\n * @see PreferenceManager#setPreferenceDataStore(PreferenceDataStore)\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "links" : [ "android.content.SharedPreferences", "UnsupportedOperationException" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void putString(String key, @Nullable String value)",
    "returnType" : "void",
    "comment" : "\n     * Set a String value to the data store.\n     *\n     * <p>Once the value is set the data store is responsible for holding it.\n     *\n     * @param key The name of the preference to modify.\n     * @param value The new value for the preference.\n     * @see #getString(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : " void putStringSet(String key, @Nullable Set<String> values)",
    "returnType" : "void",
    "comment" : "\n     * Set a set of String value to the data store.\n     *\n     * <p>Once the value is set the data store is responsible for holding it.\n     *\n     * @param key The name of the preference to modify.\n     * @param values The set of new values for the preference.\n     * @see #getStringSet(String, Set)\n     ",
    "links" : [ ]
  }, {
    "name" : " void putInt(String key, int value)",
    "returnType" : "void",
    "comment" : "\n     * Set an int value to the data store.\n     *\n     * <p>Once the value is set the data store is responsible for holding it.\n     *\n     * @param key The name of the preference to modify.\n     * @param value The new value for the preference.\n     * @see #getInt(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : " void putLong(String key, long value)",
    "returnType" : "void",
    "comment" : "\n     * Set a long value to the data store.\n     *\n     * <p>Once the value is set the data store is responsible for holding it.\n     *\n     * @param key The name of the preference to modify.\n     * @param value The new value for the preference.\n     * @see #getLong(String, long)\n     ",
    "links" : [ ]
  }, {
    "name" : " void putFloat(String key, float value)",
    "returnType" : "void",
    "comment" : "\n     * Set a float value to the data store.\n     *\n     * <p>Once the value is set the data store is responsible for holding it.\n     *\n     * @param key The name of the preference to modify.\n     * @param value The new value for the preference.\n     * @see #getFloat(String, float)\n     ",
    "links" : [ ]
  }, {
    "name" : " void putBoolean(String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Set a boolean value to the data store.\n     *\n     * <p>Once the value is set the data store is responsible for holding it.\n     *\n     * @param key The name of the preference to modify.\n     * @param value The new value for the preference.\n     * @see #getBoolean(String, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(String key, @Nullable String defValue)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve a String value from the data store.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * @see #putString(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : " Set<String> getStringSet(String key, @Nullable Set<String> defValues)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Retrieve a set of String values from the data store.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValues Values to return if this preference does not exist.\n     * @see #putStringSet(String, Set)\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(String key, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve an int value from the data store.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * @see #putInt(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(String key, long defValue)",
    "returnType" : "long",
    "comment" : "\n     * Retrieve a long value from the data store.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * @see #putLong(String, long)\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(String key, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a float value from the data store.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * @see #putFloat(String, float)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getBoolean(String key, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve a boolean value from the data store.\n     *\n     * @param key The name of the preference to retrieve.\n     * @param defValue Value to return if this preference does not exist.\n     * @see #getBoolean(String, boolean)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void putString(String key, @Nullable String value)", " void putStringSet(String key, @Nullable Set<String> values)", " void putInt(String key, int value)", " void putLong(String key, long value)", " void putFloat(String key, float value)", " void putBoolean(String key, boolean value)", " String getString(String key, @Nullable String defValue)", " Set<String> getStringSet(String key, @Nullable Set<String> defValues)", " int getInt(String key, int defValue)", " long getLong(String key, long defValue)", " float getFloat(String key, float defValue)", " boolean getBoolean(String key, boolean defValue)" ],
  "variableNames" : [ ]
}