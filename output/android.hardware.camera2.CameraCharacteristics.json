{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/CameraCharacteristics.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CameraCharacteristics",
  "comment" : "\n * <p>The properties describing a\n * {@link CameraDevice CameraDevice}.</p>\n *\n * <p>These properties are fixed for a given CameraDevice, and can be queried\n * through the {@link CameraManager CameraManager}\n * interface with {@link CameraManager#getCameraCharacteristics}.</p>\n *\n * <p>When obtained by a client that does not hold the CAMERA permission, some metadata values are\n * not included. The list of keys that require the permission is given by\n * {@link #getKeysNeedingPermission}.</p>\n *\n * <p>{@link CameraCharacteristics} objects are immutable.</p>\n *\n * @see CameraDevice\n * @see CameraManager\n ",
  "variables" : [ {
    "name" : "mProperties",
    "type" : "CameraMetadataNative",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeys",
    "type" : "List<CameraCharacteristics.Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeysNeedingPermission",
    "type" : "List<CameraCharacteristics.Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailableRequestKeys",
    "type" : "List<CaptureRequest.Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailableSessionKeys",
    "type" : "List<CaptureRequest.Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailablePhysicalRequestKeys",
    "type" : "List<CaptureRequest.Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailableResultKeys",
    "type" : "List<CaptureResult.Key<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecommendedConfigurations",
    "type" : "ArrayList<RecommendedStreamConfigurationMap>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of aberration correction modes for {@link CaptureRequest#COLOR_CORRECTION_ABERRATION_MODE android.colorCorrection.aberrationMode} that are\n     * supported by this camera device.</p>\n     * <p>This key lists the valid modes for {@link CaptureRequest#COLOR_CORRECTION_ABERRATION_MODE android.colorCorrection.aberrationMode}.  If no\n     * aberration correction modes are available for a device, this list will solely include\n     * OFF mode. All camera devices will support either OFF or FAST mode.</p>\n     * <p>Camera devices that support the MANUAL_POST_PROCESSING capability will always list\n     * OFF mode. This includes all FULL level devices.</p>\n     * <p>LEGACY devices will always only support FAST mode.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#COLOR_CORRECTION_ABERRATION_MODE android.colorCorrection.aberrationMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#COLOR_CORRECTION_ABERRATION_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#COLOR_CORRECTION_ABERRATION_MODE" ]
  }, {
    "name" : "CONTROL_AE_AVAILABLE_ANTIBANDING_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of auto-exposure antibanding modes for {@link CaptureRequest#CONTROL_AE_ANTIBANDING_MODE android.control.aeAntibandingMode} that are\n     * supported by this camera device.</p>\n     * <p>Not all of the auto-exposure anti-banding modes may be\n     * supported by a given camera device. This field lists the\n     * valid anti-banding modes that the application may request\n     * for this camera device with the\n     * {@link CaptureRequest#CONTROL_AE_ANTIBANDING_MODE android.control.aeAntibandingMode} control.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_AE_ANTIBANDING_MODE android.control.aeAntibandingMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_ANTIBANDING_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AE_ANTIBANDING_MODE" ]
  }, {
    "name" : "CONTROL_AE_AVAILABLE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of auto-exposure modes for {@link CaptureRequest#CONTROL_AE_MODE android.control.aeMode} that are supported by this camera\n     * device.</p>\n     * <p>Not all the auto-exposure modes may be supported by a\n     * given camera device, especially if no flash unit is\n     * available. This entry lists the valid modes for\n     * {@link CaptureRequest#CONTROL_AE_MODE android.control.aeMode} for this camera device.</p>\n     * <p>All camera devices support ON, and all camera devices with flash\n     * units support ON_AUTO_FLASH and ON_ALWAYS_FLASH.</p>\n     * <p>FULL mode camera devices always support OFF mode,\n     * which enables application control of camera exposure time,\n     * sensitivity, and frame duration.</p>\n     * <p>LEGACY mode camera devices never support OFF mode.\n     * LIMITED mode devices support OFF if they support the MANUAL_SENSOR\n     * capability.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_AE_MODE android.control.aeMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AE_MODE" ]
  }, {
    "name" : "CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES",
    "type" : "Key<android.util.Range<Integer>[]>",
    "comment" : "\n     * <p>List of frame rate ranges for {@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE android.control.aeTargetFpsRange} supported by\n     * this camera device.</p>\n     * <p>For devices at the LEGACY level or above:</p>\n     * <ul>\n     * <li>\n     * <p>For constant-framerate recording, for each normal\n     * {@link android.media.CamcorderProfile CamcorderProfile}, that is, a\n     * {@link android.media.CamcorderProfile CamcorderProfile} that has\n     * {@link android.media.CamcorderProfile#quality quality} in\n     * the range [{@link android.media.CamcorderProfile#QUALITY_LOW QUALITY_LOW},\n     * {@link android.media.CamcorderProfile#QUALITY_2160P QUALITY_2160P}], if the profile is\n     * supported by the device and has\n     * {@link android.media.CamcorderProfile#videoFrameRate videoFrameRate} <code>x</code>, this list will\n     * always include (<code>x</code>,<code>x</code>).</p>\n     * </li>\n     * <li>\n     * <p>Also, a camera device must either not support any\n     * {@link android.media.CamcorderProfile CamcorderProfile},\n     * or support at least one\n     * normal {@link android.media.CamcorderProfile CamcorderProfile} that has\n     * {@link android.media.CamcorderProfile#videoFrameRate videoFrameRate} <code>x</code> &gt;= 24.</p>\n     * </li>\n     * </ul>\n     * <p>For devices at the LIMITED level or above:</p>\n     * <ul>\n     * <li>For devices that advertise NIR color filter arrangement in\n     * {@link CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT android.sensor.info.colorFilterArrangement}, this list will always include\n     * (<code>max</code>, <code>max</code>) where <code>max</code> = the maximum output frame rate of the maximum YUV_420_888\n     * output size.</li>\n     * <li>For devices advertising any color filter arrangement other than NIR, or devices not\n     * advertising color filter arrangement, this list will always include (<code>min</code>, <code>max</code>) and\n     * (<code>max</code>, <code>max</code>) where <code>min</code> &lt;= 15 and <code>max</code> = the maximum output frame rate of the\n     * maximum YUV_420_888 output size.</li>\n     * </ul>\n     * <p><b>Units</b>: Frames per second (FPS)</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE\n     * @see CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT\n     ",
    "links" : [ "android.media.CamcorderProfile#QUALITY_2160P", "android.hardware.camera2.CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE", "android.media.CamcorderProfile#videoFrameRate", "android.media.CamcorderProfile#quality", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT", "android.media.CamcorderProfile#QUALITY_LOW", "android.media.CamcorderProfile" ]
  }, {
    "name" : "CONTROL_AE_COMPENSATION_RANGE",
    "type" : "Key<android.util.Range<Integer>>",
    "comment" : "\n     * <p>Maximum and minimum exposure compensation values for\n     * {@link CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION android.control.aeExposureCompensation}, in counts of {@link CameraCharacteristics#CONTROL_AE_COMPENSATION_STEP android.control.aeCompensationStep},\n     * that are supported by this camera device.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>Range [0,0] indicates that exposure compensation is not supported.</p>\n     * <p>For LIMITED and FULL devices, range must follow below requirements if exposure\n     * compensation is supported (<code>range != [0, 0]</code>):</p>\n     * <p><code>Min.exposure compensation * {@link CameraCharacteristics#CONTROL_AE_COMPENSATION_STEP android.control.aeCompensationStep} &lt;= -2 EV</code></p>\n     * <p><code>Max.exposure compensation * {@link CameraCharacteristics#CONTROL_AE_COMPENSATION_STEP android.control.aeCompensationStep} &gt;= 2 EV</code></p>\n     * <p>LEGACY devices may support a smaller range than this.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#CONTROL_AE_COMPENSATION_STEP\n     * @see CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#CONTROL_AE_COMPENSATION_STEP", "android.hardware.camera2.CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION" ]
  }, {
    "name" : "CONTROL_AE_COMPENSATION_STEP",
    "type" : "Key<Rational>",
    "comment" : "\n     * <p>Smallest step by which the exposure compensation\n     * can be changed.</p>\n     * <p>This is the unit for {@link CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION android.control.aeExposureCompensation}. For example, if this key has\n     * a value of <code>1/2</code>, then a setting of <code>-2</code> for {@link CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION android.control.aeExposureCompensation} means\n     * that the target EV offset for the auto-exposure routine is -1 EV.</p>\n     * <p>One unit of EV compensation changes the brightness of the captured image by a factor\n     * of two. +1 EV doubles the image brightness, while -1 EV halves the image brightness.</p>\n     * <p><b>Units</b>: Exposure Value (EV)</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION" ]
  }, {
    "name" : "CONTROL_AF_AVAILABLE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of auto-focus (AF) modes for {@link CaptureRequest#CONTROL_AF_MODE android.control.afMode} that are\n     * supported by this camera device.</p>\n     * <p>Not all the auto-focus modes may be supported by a\n     * given camera device. This entry lists the valid modes for\n     * {@link CaptureRequest#CONTROL_AF_MODE android.control.afMode} for this camera device.</p>\n     * <p>All LIMITED and FULL mode camera devices will support OFF mode, and all\n     * camera devices with adjustable focuser units\n     * (<code>{@link CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE android.lens.info.minimumFocusDistance} &gt; 0</code>) will support AUTO mode.</p>\n     * <p>LEGACY devices will support OFF mode only if they support\n     * focusing to infinity (by also setting {@link CaptureRequest#LENS_FOCUS_DISTANCE android.lens.focusDistance} to\n     * <code>0.0f</code>).</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_AF_MODE android.control.afMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AF_MODE\n     * @see CaptureRequest#LENS_FOCUS_DISTANCE\n     * @see CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE", "android.hardware.camera2.CaptureRequest#CONTROL_AF_MODE", "android.hardware.camera2.CaptureRequest#LENS_FOCUS_DISTANCE" ]
  }, {
    "name" : "CONTROL_AVAILABLE_EFFECTS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of color effects for {@link CaptureRequest#CONTROL_EFFECT_MODE android.control.effectMode} that are supported by this camera\n     * device.</p>\n     * <p>This list contains the color effect modes that can be applied to\n     * images produced by the camera device.\n     * Implementations are not expected to be consistent across all devices.\n     * If no color effect modes are available for a device, this will only list\n     * OFF.</p>\n     * <p>A color effect will only be applied if\n     * {@link CaptureRequest#CONTROL_MODE android.control.mode} != OFF.  OFF is always included in this list.</p>\n     * <p>This control has no effect on the operation of other control routines such\n     * as auto-exposure, white balance, or focus.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_EFFECT_MODE android.control.effectMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_EFFECT_MODE\n     * @see CaptureRequest#CONTROL_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_MODE", "android.hardware.camera2.CaptureRequest#CONTROL_EFFECT_MODE" ]
  }, {
    "name" : "CONTROL_AVAILABLE_SCENE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of scene modes for {@link CaptureRequest#CONTROL_SCENE_MODE android.control.sceneMode} that are supported by this camera\n     * device.</p>\n     * <p>This list contains scene modes that can be set for the camera device.\n     * Only scene modes that have been fully implemented for the\n     * camera device may be included here. Implementations are not expected\n     * to be consistent across all devices.</p>\n     * <p>If no scene modes are supported by the camera device, this\n     * will be set to DISABLED. Otherwise DISABLED will not be listed.</p>\n     * <p>FACE_PRIORITY is always listed if face detection is\n     * supported (i.e.<code>{@link CameraCharacteristics#STATISTICS_INFO_MAX_FACE_COUNT android.statistics.info.maxFaceCount} &gt;\n     * 0</code>).</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_SCENE_MODE android.control.sceneMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_SCENE_MODE\n     * @see CameraCharacteristics#STATISTICS_INFO_MAX_FACE_COUNT\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#STATISTICS_INFO_MAX_FACE_COUNT", "android.hardware.camera2.CaptureRequest#CONTROL_SCENE_MODE" ]
  }, {
    "name" : "CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of video stabilization modes for {@link CaptureRequest#CONTROL_VIDEO_STABILIZATION_MODE android.control.videoStabilizationMode}\n     * that are supported by this camera device.</p>\n     * <p>OFF will always be listed.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_VIDEO_STABILIZATION_MODE android.control.videoStabilizationMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_VIDEO_STABILIZATION_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_VIDEO_STABILIZATION_MODE" ]
  }, {
    "name" : "CONTROL_AWB_AVAILABLE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of auto-white-balance modes for {@link CaptureRequest#CONTROL_AWB_MODE android.control.awbMode} that are supported by this\n     * camera device.</p>\n     * <p>Not all the auto-white-balance modes may be supported by a\n     * given camera device. This entry lists the valid modes for\n     * {@link CaptureRequest#CONTROL_AWB_MODE android.control.awbMode} for this camera device.</p>\n     * <p>All camera devices will support ON mode.</p>\n     * <p>Camera devices that support the MANUAL_POST_PROCESSING capability will always support OFF\n     * mode, which enables application control of white balance, by using\n     * {@link CaptureRequest#COLOR_CORRECTION_TRANSFORM android.colorCorrection.transform} and {@link CaptureRequest#COLOR_CORRECTION_GAINS android.colorCorrection.gains}({@link CaptureRequest#COLOR_CORRECTION_MODE android.colorCorrection.mode} must be set to TRANSFORM_MATRIX). This includes all FULL\n     * mode camera devices.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_AWB_MODE android.control.awbMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#COLOR_CORRECTION_GAINS\n     * @see CaptureRequest#COLOR_CORRECTION_MODE\n     * @see CaptureRequest#COLOR_CORRECTION_TRANSFORM\n     * @see CaptureRequest#CONTROL_AWB_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#COLOR_CORRECTION_MODE", "android.hardware.camera2.CaptureRequest#CONTROL_AWB_MODE", "android.hardware.camera2.CaptureRequest#COLOR_CORRECTION_GAINS", "android.hardware.camera2.CaptureRequest#COLOR_CORRECTION_TRANSFORM" ]
  }, {
    "name" : "CONTROL_MAX_REGIONS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of the maximum number of regions that can be used for metering in\n     * auto-exposure (AE), auto-white balance (AWB), and auto-focus (AF);\n     * this corresponds to the maximum number of elements in\n     * {@link CaptureRequest#CONTROL_AE_REGIONS android.control.aeRegions}, {@link CaptureRequest#CONTROL_AWB_REGIONS android.control.awbRegions},\n     * and {@link CaptureRequest#CONTROL_AF_REGIONS android.control.afRegions}.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>Value must be &gt;= 0 for each element. For full-capability devices\n     * this value must be &gt;= 1 for AE and AF. The order of the elements is:\n     * <code>(AE, AWB, AF)</code>.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_REGIONS\n     * @see CaptureRequest#CONTROL_AF_REGIONS\n     * @see CaptureRequest#CONTROL_AWB_REGIONS\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AWB_REGIONS", "android.hardware.camera2.CaptureRequest#CONTROL_AE_REGIONS", "android.hardware.camera2.CaptureRequest#CONTROL_AF_REGIONS" ]
  }, {
    "name" : "CONTROL_MAX_REGIONS_AE",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum number of metering regions that can be used by the auto-exposure (AE)\n     * routine.</p>\n     * <p>This corresponds to the maximum allowed number of elements in\n     * {@link CaptureRequest#CONTROL_AE_REGIONS android.control.aeRegions}.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Value will be &gt;= 0. For FULL-capability devices, this\n     * value will be &gt;= 1.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_REGIONS\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AE_REGIONS" ]
  }, {
    "name" : "CONTROL_MAX_REGIONS_AWB",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum number of metering regions that can be used by the auto-white balance (AWB)\n     * routine.</p>\n     * <p>This corresponds to the maximum allowed number of elements in\n     * {@link CaptureRequest#CONTROL_AWB_REGIONS android.control.awbRegions}.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Value will be &gt;= 0.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AWB_REGIONS\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AWB_REGIONS" ]
  }, {
    "name" : "CONTROL_MAX_REGIONS_AF",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum number of metering regions that can be used by the auto-focus (AF) routine.</p>\n     * <p>This corresponds to the maximum allowed number of elements in\n     * {@link CaptureRequest#CONTROL_AF_REGIONS android.control.afRegions}.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Value will be &gt;= 0. For FULL-capability devices, this\n     * value will be &gt;= 1.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AF_REGIONS\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AF_REGIONS" ]
  }, {
    "name" : "CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.HighSpeedVideoConfiguration[]>",
    "comment" : "\n     * <p>List of available high speed video size, fps range and max batch size configurations\n     * supported by the camera device, in the format of (width, height, fps_min, fps_max, batch_size_max).</p>\n     * <p>When CONSTRAINED_HIGH_SPEED_VIDEO is supported in {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities},\n     * this metadata will list the supported high speed video size, fps range and max batch size\n     * configurations. All the sizes listed in this configuration will be a subset of the sizes\n     * reported by {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes }\n     * for processed non-stalling formats.</p>\n     * <p>For the high speed video use case, the application must\n     * select the video size and fps range from this metadata to configure the recording and\n     * preview streams and setup the recording requests. For example, if the application intends\n     * to do high speed recording, it can select the maximum size reported by this metadata to\n     * configure output streams. Once the size is selected, application can filter this metadata\n     * by selected size and get the supported fps ranges, and use these fps ranges to setup the\n     * recording requests. Note that for the use case of multiple output streams, application\n     * must select one unique size from this metadata to use (e.g., preview and recording streams\n     * must have the same size). Otherwise, the high speed capture session creation will fail.</p>\n     * <p>The min and max fps will be multiple times of 30fps.</p>\n     * <p>High speed video streaming extends significant performance pressue to camera hardware,\n     * to achieve efficient high speed streaming, the camera device may have to aggregate\n     * multiple frames together and send to camera device for processing where the request\n     * controls are same for all the frames in this batch. Max batch size indicates\n     * the max possible number of frames the camera device will group together for this high\n     * speed stream configuration. This max batch size will be used to generate a high speed\n     * recording request list by\n     * {@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList }.\n     * The max batch size for each configuration will satisfy below conditions:</p>\n     * <ul>\n     * <li>Each max batch size will be a divisor of its corresponding fps_max / 30. For example,\n     * if max_fps is 300, max batch size will only be 1, 2, 5, or 10.</li>\n     * <li>The camera device may choose smaller internal batch size for each configuration, but\n     * the actual batch size will be a divisor of max batch size. For example, if the max batch\n     * size is 8, the actual batch size used by camera device will only be 1, 2, 4, or 8.</li>\n     * <li>The max batch size in each configuration entry must be no larger than 32.</li>\n     * </ul>\n     * <p>The camera device doesn't have to support batch mode to achieve high speed video recording,\n     * in such case, batch_size_max will be reported as 1 in each configuration entry.</p>\n     * <p>This fps ranges in this configuration list can only be used to create requests\n     * that are submitted to a high speed camera capture session created by\n     * {@link android.hardware.camera2.CameraDevice#createConstrainedHighSpeedCaptureSession }.\n     * The fps ranges reported in this metadata must not be used to setup capture requests for\n     * normal capture session, or it will cause request error.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>For each configuration, the fps_max &gt;= 120fps.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes", "android.hardware.camera2.CameraDevice#createConstrainedHighSpeedCaptureSession", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "CONTROL_AE_LOCK_AVAILABLE",
    "type" : "Key<Boolean>",
    "comment" : "\n     * <p>Whether the camera device supports {@link CaptureRequest#CONTROL_AE_LOCK android.control.aeLock}</p>\n     * <p>Devices with MANUAL_SENSOR capability or BURST_CAPTURE capability will always\n     * list <code>true</code>. This includes FULL devices.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AE_LOCK\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AE_LOCK" ]
  }, {
    "name" : "CONTROL_AWB_LOCK_AVAILABLE",
    "type" : "Key<Boolean>",
    "comment" : "\n     * <p>Whether the camera device supports {@link CaptureRequest#CONTROL_AWB_LOCK android.control.awbLock}</p>\n     * <p>Devices with MANUAL_POST_PROCESSING capability or BURST_CAPTURE capability will\n     * always list <code>true</code>. This includes FULL devices.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_AWB_LOCK\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AWB_LOCK" ]
  }, {
    "name" : "CONTROL_AVAILABLE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of control modes for {@link CaptureRequest#CONTROL_MODE android.control.mode} that are supported by this camera\n     * device.</p>\n     * <p>This list contains control modes that can be set for the camera device.\n     * LEGACY mode devices will always support AUTO mode. LIMITED and FULL\n     * devices will always support OFF, AUTO modes.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#CONTROL_MODE android.control.mode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_MODE" ]
  }, {
    "name" : "CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE",
    "type" : "Key<android.util.Range<Integer>>",
    "comment" : "\n     * <p>Range of boosts for {@link CaptureRequest#CONTROL_POST_RAW_SENSITIVITY_BOOST android.control.postRawSensitivityBoost} supported\n     * by this camera device.</p>\n     * <p>Devices support post RAW sensitivity boost  will advertise\n     * {@link CaptureRequest#CONTROL_POST_RAW_SENSITIVITY_BOOST android.control.postRawSensitivityBoost} key for controling\n     * post RAW sensitivity boost.</p>\n     * <p>This key will be <code>null</code> for devices that do not support any RAW format\n     * outputs. For devices that do support RAW format outputs, this key will always\n     * present, and if a device does not support post RAW sensitivity boost, it will\n     * list <code>(100, 100)</code> in this key.</p>\n     * <p><b>Units</b>: ISO arithmetic units, the same as {@link CaptureRequest#SENSOR_SENSITIVITY android.sensor.sensitivity}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_POST_RAW_SENSITIVITY_BOOST\n     * @see CaptureRequest#SENSOR_SENSITIVITY\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_SENSITIVITY", "android.hardware.camera2.CaptureRequest#CONTROL_POST_RAW_SENSITIVITY_BOOST" ]
  }, {
    "name" : "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_MAX_SIZES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>The list of extended scene modes for {@link CaptureRequest#CONTROL_EXTENDED_SCENE_MODE android.control.extendedSceneMode} that are supported\n     * by this camera device, and each extended scene mode's maximum streaming (non-stall) size\n     * with  effect.</p>\n     * <p>For DISABLED mode, the camera behaves normally with no extended scene mode enabled.</p>\n     * <p>For BOKEH_STILL_CAPTURE mode, the maximum streaming dimension specifies the limit\n     * under which bokeh is effective when capture intent is PREVIEW. Note that when capture\n     * intent is PREVIEW, the bokeh effect may not be as high in quality compared to\n     * STILL_CAPTURE intent in order to maintain reasonable frame rate. The maximum streaming\n     * dimension must be one of the YUV_420_888 or PRIVATE resolutions in\n     * availableStreamConfigurations, or (0, 0) if preview bokeh is not supported. If the\n     * application configures a stream larger than the maximum streaming dimension, bokeh\n     * effect may not be applied for this stream for PREVIEW intent.</p>\n     * <p>For BOKEH_CONTINUOUS mode, the maximum streaming dimension specifies the limit under\n     * which bokeh is effective. This dimension must be one of the YUV_420_888 or PRIVATE\n     * resolutions in availableStreamConfigurations, and if the sensor maximum resolution is\n     * larger than or equal to 1080p, the maximum streaming dimension must be at least 1080p.\n     * If the application configures a stream with larger dimension, the stream may not have\n     * bokeh effect applied.</p>\n     * <p><b>Units</b>: (mode, width, height)</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CaptureRequest#CONTROL_EXTENDED_SCENE_MODE\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#CONTROL_EXTENDED_SCENE_MODE", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_ZOOM_RATIO_RANGES",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>The ranges of supported zoom ratio for non-DISABLED {@link CaptureRequest#CONTROL_EXTENDED_SCENE_MODE android.control.extendedSceneMode}.</p>\n     * <p>When extended scene mode is set, the camera device may have limited range of zoom ratios\n     * compared to when extended scene mode is DISABLED. This tag lists the zoom ratio ranges\n     * for all supported non-DISABLED extended scene modes, in the same order as in\n     * android.control.availableExtended.</p>\n     * <p>Range [1.0, 1.0] means that no zoom (optical or digital) is supported.</p>\n     * <p><b>Units</b>: (minZoom, maxZoom)</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CaptureRequest#CONTROL_EXTENDED_SCENE_MODE\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#CONTROL_EXTENDED_SCENE_MODE", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES",
    "type" : "Key<android.hardware.camera2.params.Capability[]>",
    "comment" : "\n     * <p>The list of extended scene modes for {@link CaptureRequest#CONTROL_EXTENDED_SCENE_MODE android.control.extendedSceneMode} that\n     * are supported by this camera device, and each extended scene mode's capabilities such\n     * as maximum streaming size, and supported zoom ratio ranges.</p>\n     * <p>For DISABLED mode, the camera behaves normally with no extended scene mdoe enabled.</p>\n     * <p>For BOKEH_STILL_CAPTURE mode, the maximum streaming dimension specifies the limit\n     * under which bokeh is effective when capture intent is PREVIEW. Note that when capture\n     * intent is PREVIEW, the bokeh effect may not be as high quality compared to STILL_CAPTURE\n     * intent in order to maintain reasonable frame rate. The maximum streaming dimension must\n     * be one of the YUV_420_888 or PRIVATE resolutions in availableStreamConfigurations, or\n     * (0, 0) if preview bokeh is not supported. If the application configures a stream\n     * larger than the maximum streaming dimension, bokeh effect may not be applied for this\n     * stream for PREVIEW intent.</p>\n     * <p>For BOKEH_CONTINUOUS mode, the maximum streaming dimension specifies the limit under\n     * which bokeh is effective. This dimension must be one of the YUV_420_888 or PRIVATE\n     * resolutions in availableStreamConfigurations, and if the sensor maximum resolution is\n     * larger than or equal to 1080p, the maximum streaming dimension must be at least 1080p.\n     * If the application configures a stream with larger dimension, the stream may not have\n     * bokeh effect applied.</p>\n     * <p>When extended scene mode is set, the camera device may have limited range of zoom ratios\n     * compared to when the mode is DISABLED. availableExtendedSceneModeCapabilities lists the\n     * zoom ranges for all supported extended modes. A range of (1.0, 1.0) means that no zoom\n     * (optical or digital) is supported.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_EXTENDED_SCENE_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_EXTENDED_SCENE_MODE" ]
  }, {
    "name" : "CONTROL_ZOOM_RATIO_RANGE",
    "type" : "Key<android.util.Range<Float>>",
    "comment" : "\n     * <p>Minimum and maximum zoom ratios supported by this camera device.</p>\n     * <p>If the camera device supports zoom-out from 1x zoom, minZoom will be less than 1.0, and\n     * setting {@link CaptureRequest#CONTROL_ZOOM_RATIO android.control.zoomRatio} to values less than 1.0 increases the camera's field\n     * of view.</p>\n     * <p><b>Units</b>: A pair of zoom ratio in floating-points: (minZoom, maxZoom)</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>maxZoom &gt;= 1.0 &gt;= minZoom</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CaptureRequest#CONTROL_ZOOM_RATIO\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#CONTROL_ZOOM_RATIO", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "EDGE_AVAILABLE_EDGE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of edge enhancement modes for {@link CaptureRequest#EDGE_MODE android.edge.mode} that are supported by this camera\n     * device.</p>\n     * <p>Full-capability camera devices must always support OFF; camera devices that support\n     * YUV_REPROCESSING or PRIVATE_REPROCESSING will list ZERO_SHUTTER_LAG; all devices will\n     * list FAST.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#EDGE_MODE android.edge.mode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CaptureRequest#EDGE_MODE\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.CaptureRequest#EDGE_MODE" ]
  }, {
    "name" : "FLASH_INFO_AVAILABLE",
    "type" : "Key<Boolean>",
    "comment" : "\n     * <p>Whether this camera device has a\n     * flash unit.</p>\n     * <p>Will be <code>false</code> if no flash is available.</p>\n     * <p>If there is no flash unit, none of the flash controls do\n     * anything.\n     * This key is available on all devices.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of hot pixel correction modes for {@link CaptureRequest#HOT_PIXEL_MODE android.hotPixel.mode} that are supported by this\n     * camera device.</p>\n     * <p>FULL mode camera devices will always support FAST.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#HOT_PIXEL_MODE android.hotPixel.mode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#HOT_PIXEL_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#HOT_PIXEL_MODE" ]
  }, {
    "name" : "JPEG_AVAILABLE_THUMBNAIL_SIZES",
    "type" : "Key<android.util.Size[]>",
    "comment" : "\n     * <p>List of JPEG thumbnail sizes for {@link CaptureRequest#JPEG_THUMBNAIL_SIZE android.jpeg.thumbnailSize} supported by this\n     * camera device.</p>\n     * <p>This list will include at least one non-zero resolution, plus <code>(0,0)</code> for indicating no\n     * thumbnail should be generated.</p>\n     * <p>Below condiditions will be satisfied for this size list:</p>\n     * <ul>\n     * <li>The sizes will be sorted by increasing pixel area (width x height).\n     * If several resolutions have the same area, they will be sorted by increasing width.</li>\n     * <li>The aspect ratio of the largest thumbnail size will be same as the\n     * aspect ratio of largest JPEG output size in android.scaler.availableStreamConfigurations.\n     * The largest size is defined as the size that has the largest pixel area\n     * in a given size list.</li>\n     * <li>Each output JPEG size in android.scaler.availableStreamConfigurations will have at least\n     * one corresponding size that has the same aspect ratio in availableThumbnailSizes,\n     * and vice versa.</li>\n     * <li>All non-<code>(0, 0)</code> sizes will have non-zero widths and heights.</li>\n     * </ul>\n     * <p>This list is also used as supported thumbnail sizes for HEIC image format capture.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#JPEG_THUMBNAIL_SIZE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#JPEG_THUMBNAIL_SIZE" ]
  }, {
    "name" : "LENS_INFO_AVAILABLE_APERTURES",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>List of aperture size values for {@link CaptureRequest#LENS_APERTURE android.lens.aperture} that are\n     * supported by this camera device.</p>\n     * <p>If the camera device doesn't support a variable lens aperture,\n     * this list will contain only one value, which is the fixed aperture size.</p>\n     * <p>If the camera device supports a variable aperture, the aperture values\n     * in this list will be sorted in ascending order.</p>\n     * <p><b>Units</b>: The aperture f-number</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#LENS_APERTURE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.CaptureRequest#LENS_APERTURE" ]
  }, {
    "name" : "LENS_INFO_AVAILABLE_FILTER_DENSITIES",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>List of neutral density filter values for\n     * {@link CaptureRequest#LENS_FILTER_DENSITY android.lens.filterDensity} that are supported by this camera device.</p>\n     * <p>If a neutral density filter is not supported by this camera device,\n     * this list will contain only 0. Otherwise, this list will include every\n     * filter density supported by the camera device, in ascending order.</p>\n     * <p><b>Units</b>: Exposure value (EV)</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>Values are &gt;= 0</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#LENS_FILTER_DENSITY\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.CaptureRequest#LENS_FILTER_DENSITY" ]
  }, {
    "name" : "LENS_INFO_AVAILABLE_FOCAL_LENGTHS",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>List of focal lengths for {@link CaptureRequest#LENS_FOCAL_LENGTH android.lens.focalLength} that are supported by this camera\n     * device.</p>\n     * <p>If optical zoom is not supported, this list will only contain\n     * a single value corresponding to the fixed focal length of the\n     * device. Otherwise, this list will include every focal length supported\n     * by the camera device, in ascending order.</p>\n     * <p><b>Units</b>: Millimeters</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>Values are &gt; 0</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#LENS_FOCAL_LENGTH\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#LENS_FOCAL_LENGTH" ]
  }, {
    "name" : "LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of optical image stabilization (OIS) modes for\n     * {@link CaptureRequest#LENS_OPTICAL_STABILIZATION_MODE android.lens.opticalStabilizationMode} that are supported by this camera device.</p>\n     * <p>If OIS is not supported by a given camera device, this list will\n     * contain only OFF.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#LENS_OPTICAL_STABILIZATION_MODE android.lens.opticalStabilizationMode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#LENS_OPTICAL_STABILIZATION_MODE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#LENS_OPTICAL_STABILIZATION_MODE", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "LENS_INFO_HYPERFOCAL_DISTANCE",
    "type" : "Key<Float>",
    "comment" : "\n     * <p>Hyperfocal distance for this lens.</p>\n     * <p>If the lens is not fixed focus, the camera device will report this\n     * field when {@link CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION android.lens.info.focusDistanceCalibration} is APPROXIMATE or CALIBRATED.</p>\n     * <p><b>Units</b>: See {@link CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION android.lens.info.focusDistanceCalibration} for details</p>\n     * <p><b>Range of valid values:</b><br>\n     * If lens is fixed focus, &gt;= 0. If lens has focuser unit, the value is\n     * within <code>(0.0f, {@link CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE android.lens.info.minimumFocusDistance}]</code></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION\n     * @see CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "LENS_INFO_MINIMUM_FOCUS_DISTANCE",
    "type" : "Key<Float>",
    "comment" : "\n     * <p>Shortest distance from frontmost surface\n     * of the lens that can be brought into sharp focus.</p>\n     * <p>If the lens is fixed-focus, this will be\n     * 0.</p>\n     * <p><b>Units</b>: See {@link CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION android.lens.info.focusDistanceCalibration} for details</p>\n     * <p><b>Range of valid values:</b><br>\n     * &gt;= 0</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "LENS_INFO_SHADING_MAP_SIZE",
    "type" : "Key<android.util.Size>",
    "comment" : "\n     * <p>Dimensions of lens shading map.</p>\n     * <p>The map should be on the order of 30-40 rows and columns, and\n     * must be smaller than 64x64.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Both values &gt;= 1</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL" ]
  }, {
    "name" : "LENS_INFO_FOCUS_DISTANCE_CALIBRATION",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The lens focus distance calibration quality.</p>\n     * <p>The lens focus distance calibration quality determines the reliability of\n     * focus related metadata entries, i.e. {@link CaptureRequest#LENS_FOCUS_DISTANCE android.lens.focusDistance},\n     * {@link CaptureResult#LENS_FOCUS_RANGE android.lens.focusRange}, {@link CameraCharacteristics#LENS_INFO_HYPERFOCAL_DISTANCE android.lens.info.hyperfocalDistance}, and\n     * {@link CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE android.lens.info.minimumFocusDistance}.</p>\n     * <p>APPROXIMATE and CALIBRATED devices report the focus metadata in\n     * units of diopters (1/meter), so <code>0.0f</code> represents focusing at infinity,\n     * and increasing positive numbers represent focusing closer and closer\n     * to the camera device. The focus distance control also uses diopters\n     * on these devices.</p>\n     * <p>UNCALIBRATED devices do not use units that are directly comparable\n     * to any real physical measurement, but <code>0.0f</code> still represents farthest\n     * focus, and {@link CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE android.lens.info.minimumFocusDistance} represents the\n     * nearest focus the device can achieve.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED UNCALIBRATED}</li>\n     *   <li>{@link #LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE APPROXIMATE}</li>\n     *   <li>{@link #LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED CALIBRATED}</li>\n     * </ul></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#LENS_FOCUS_DISTANCE\n     * @see CaptureResult#LENS_FOCUS_RANGE\n     * @see CameraCharacteristics#LENS_INFO_HYPERFOCAL_DISTANCE\n     * @see CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE\n     * @see #LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED\n     * @see #LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE\n     * @see #LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_MINIMUM_FOCUS_DISTANCE", "#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_HYPERFOCAL_DISTANCE", "android.hardware.camera2.CaptureRequest#LENS_FOCUS_DISTANCE", "#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED", "#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED", "android.hardware.camera2.CaptureResult#LENS_FOCUS_RANGE" ]
  }, {
    "name" : "LENS_FACING",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Direction the camera faces relative to\n     * device screen.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #LENS_FACING_FRONT FRONT}</li>\n     *   <li>{@link #LENS_FACING_BACK BACK}</li>\n     *   <li>{@link #LENS_FACING_EXTERNAL EXTERNAL}</li>\n     * </ul></p>\n     * <p>This key is available on all devices.</p>\n     * @see #LENS_FACING_FRONT\n     * @see #LENS_FACING_BACK\n     * @see #LENS_FACING_EXTERNAL\n     ",
    "links" : [ "#LENS_FACING_FRONT", "#LENS_FACING_BACK", "#LENS_FACING_EXTERNAL" ]
  }, {
    "name" : "LENS_POSE_ROTATION",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>The orientation of the camera relative to the sensor\n     * coordinate system.</p>\n     * <p>The four coefficients that describe the quaternion\n     * rotation from the Android sensor coordinate system to a\n     * camera-aligned coordinate system where the X-axis is\n     * aligned with the long side of the image sensor, the Y-axis\n     * is aligned with the short side of the image sensor, and\n     * the Z-axis is aligned with the optical axis of the sensor.</p>\n     * <p>To convert from the quaternion coefficients <code>(x,y,z,w)</code>\n     * to the axis of rotation <code>(a_x, a_y, a_z)</code> and rotation\n     * amount <code>theta</code>, the following formulas can be used:</p>\n     * <pre><code> theta = 2 * acos(w)\n     * a_x = x / sin(theta/2)\n     * a_y = y / sin(theta/2)\n     * a_z = z / sin(theta/2)\n     * </code></pre>\n     * <p>To create a 3x3 rotation matrix that applies the rotation\n     * defined by this quaternion, the following matrix can be\n     * used:</p>\n     * <pre><code>R = [ 1 - 2y^2 - 2z^2,       2xy - 2zw,       2xz + 2yw,\n     *            2xy + 2zw, 1 - 2x^2 - 2z^2,       2yz - 2xw,\n     *            2xz - 2yw,       2yz + 2xw, 1 - 2x^2 - 2y^2 ]\n     * </code></pre>\n     * <p>This matrix can then be used to apply the rotation to a\n     *  column vector point with</p>\n     * <p><code>p' = Rp</code></p>\n     * <p>where <code>p</code> is in the device sensor coordinate system, and\n     *  <code>p'</code> is in the camera-oriented coordinate system.</p>\n     * <p>If {@link CameraCharacteristics#LENS_POSE_REFERENCE android.lens.poseReference} is UNDEFINED, the quaternion rotation cannot\n     *  be accurately represented by the camera device, and will be represented by\n     *  default values matching its default facing.</p>\n     * <p><b>Units</b>:\n     * Quaternion coefficients</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#LENS_POSE_REFERENCE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#LENS_POSE_REFERENCE", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "LENS_POSE_TRANSLATION",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>Position of the camera optical center.</p>\n     * <p>The position of the camera device's lens optical center,\n     * as a three-dimensional vector <code>(x,y,z)</code>.</p>\n     * <p>Prior to Android P, or when {@link CameraCharacteristics#LENS_POSE_REFERENCE android.lens.poseReference} is PRIMARY_CAMERA, this position\n     * is relative to the optical center of the largest camera device facing in the same\n     * direction as this camera, in the {@link android.hardware.SensorEvent Android sensor\n     * coordinate axes}. Note that only the axis definitions are shared with the sensor\n     * coordinate system, but not the origin.</p>\n     * <p>If this device is the largest or only camera device with a given facing, then this\n     * position will be <code>(0, 0, 0)</code>; a camera device with a lens optical center located 3 cm\n     * from the main sensor along the +X axis (to the right from the user's perspective) will\n     * report <code>(0.03, 0, 0)</code>.  Note that this means that, for many computer vision\n     * applications, the position needs to be negated to convert it to a translation from the\n     * camera to the origin.</p>\n     * <p>To transform a pixel coordinates between two cameras facing the same direction, first\n     * the source camera {@link CameraCharacteristics#LENS_DISTORTION android.lens.distortion} must be corrected for.  Then the source\n     * camera {@link CameraCharacteristics#LENS_INTRINSIC_CALIBRATION android.lens.intrinsicCalibration} needs to be applied, followed by the\n     * {@link CameraCharacteristics#LENS_POSE_ROTATION android.lens.poseRotation} of the source camera, the translation of the source camera\n     * relative to the destination camera, the {@link CameraCharacteristics#LENS_POSE_ROTATION android.lens.poseRotation} of the destination\n     * camera, and finally the inverse of {@link CameraCharacteristics#LENS_INTRINSIC_CALIBRATION android.lens.intrinsicCalibration} of the destination\n     * camera. This obtains a radial-distortion-free coordinate in the destination camera pixel\n     * coordinates.</p>\n     * <p>To compare this against a real image from the destination camera, the destination camera\n     * image then needs to be corrected for radial distortion before comparison or sampling.</p>\n     * <p>When {@link CameraCharacteristics#LENS_POSE_REFERENCE android.lens.poseReference} is GYROSCOPE, then this position is relative to\n     * the center of the primary gyroscope on the device. The axis definitions are the same as\n     * with PRIMARY_CAMERA.</p>\n     * <p>When {@link CameraCharacteristics#LENS_POSE_REFERENCE android.lens.poseReference} is UNDEFINED, this position cannot be accurately\n     * represented by the camera device, and will be represented as <code>(0, 0, 0)</code>.</p>\n     * <p><b>Units</b>: Meters</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#LENS_DISTORTION\n     * @see CameraCharacteristics#LENS_INTRINSIC_CALIBRATION\n     * @see CameraCharacteristics#LENS_POSE_REFERENCE\n     * @see CameraCharacteristics#LENS_POSE_ROTATION\n     ",
    "links" : [ "android.hardware.SensorEvent", "android.hardware.camera2.CameraCharacteristics#LENS_DISTORTION", "android.hardware.camera2.CameraCharacteristics#LENS_POSE_REFERENCE", "android.hardware.camera2.CameraCharacteristics#LENS_INTRINSIC_CALIBRATION", "android.hardware.camera2.CameraCharacteristics#LENS_POSE_ROTATION", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "LENS_INTRINSIC_CALIBRATION",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>The parameters for this camera device's intrinsic\n     * calibration.</p>\n     * <p>The five calibration parameters that describe the\n     * transform from camera-centric 3D coordinates to sensor\n     * pixel coordinates:</p>\n     * <pre><code>[f_x, f_y, c_x, c_y, s]\n     * </code></pre>\n     * <p>Where <code>f_x</code> and <code>f_y</code> are the horizontal and vertical\n     * focal lengths, <code>[c_x, c_y]</code> is the position of the optical\n     * axis, and <code>s</code> is a skew parameter for the sensor plane not\n     * being aligned with the lens plane.</p>\n     * <p>These are typically used within a transformation matrix K:</p>\n     * <pre><code>K = [ f_x,   s, c_x,\n     *        0, f_y, c_y,\n     *        0    0,   1 ]\n     * </code></pre>\n     * <p>which can then be combined with the camera pose rotation\n     * <code>R</code> and translation <code>t</code> ({@link CameraCharacteristics#LENS_POSE_ROTATION android.lens.poseRotation} and\n     * {@link CameraCharacteristics#LENS_POSE_TRANSLATION android.lens.poseTranslation}, respectively) to calculate the\n     * complete transform from world coordinates to pixel\n     * coordinates:</p>\n     * <pre><code>P = [ K 0   * [ R -Rt\n     *      0 1 ]      0 1 ]\n     * </code></pre>\n     * <p>(Note the negation of poseTranslation when mapping from camera\n     * to world coordinates, and multiplication by the rotation).</p>\n     * <p>With <code>p_w</code> being a point in the world coordinate system\n     * and <code>p_s</code> being a point in the camera active pixel array\n     * coordinate system, and with the mapping including the\n     * homogeneous division by z:</p>\n     * <pre><code> p_h = (x_h, y_h, z_h) = P p_w\n     * p_s = p_h / z_h\n     * </code></pre>\n     * <p>so <code>[x_s, y_s]</code> is the pixel coordinates of the world\n     * point, <code>z_s = 1</code>, and <code>w_s</code> is a measurement of disparity\n     * (depth) in pixel coordinates.</p>\n     * <p>Note that the coordinate system for this transform is the\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize} system,\n     * where <code>(0,0)</code> is the top-left of the\n     * preCorrectionActiveArraySize rectangle. Once the pose and\n     * intrinsic calibration transforms have been applied to a\n     * world point, then the {@link CameraCharacteristics#LENS_DISTORTION android.lens.distortion}\n     * transform needs to be applied, and the result adjusted to\n     * be in the {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize} coordinate\n     * system (where <code>(0, 0)</code> is the top-left of the\n     * activeArraySize rectangle), to determine the final pixel\n     * coordinate of the world point for processed (non-RAW)\n     * output buffers.</p>\n     * <p>For camera devices, the center of pixel <code>(x,y)</code> is located at\n     * coordinate <code>(x + 0.5, y + 0.5)</code>.  So on a device with a\n     * precorrection active array of size <code>(10,10)</code>, the valid pixel\n     * indices go from <code>(0,0)-(9,9)</code>, and an perfectly-built camera would\n     * have an optical center at the exact center of the pixel grid, at\n     * coordinates <code>(5.0, 5.0)</code>, which is the top-left corner of pixel\n     * <code>(5,5)</code>.</p>\n     * <p><b>Units</b>:\n     * Pixels in the\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize}\n     * coordinate system.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#LENS_DISTORTION\n     * @see CameraCharacteristics#LENS_POSE_ROTATION\n     * @see CameraCharacteristics#LENS_POSE_TRANSLATION\n     * @see CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE\n     * @see CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#LENS_DISTORTION", "android.hardware.camera2.CameraCharacteristics#LENS_POSE_ROTATION", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE", "android.hardware.camera2.CameraCharacteristics#LENS_POSE_TRANSLATION" ]
  }, {
    "name" : "LENS_RADIAL_DISTORTION",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>The correction coefficients to correct for this camera device's\n     * radial and tangential lens distortion.</p>\n     * <p>Four radial distortion coefficients <code>[kappa_0, kappa_1, kappa_2,\n     * kappa_3]</code> and two tangential distortion coefficients\n     * <code>[kappa_4, kappa_5]</code> that can be used to correct the\n     * lens's geometric distortion with the mapping equations:</p>\n     * <pre><code> x_c = x_i * ( kappa_0 + kappa_1 * r^2 + kappa_2 * r^4 + kappa_3 * r^6 ) +\n     *        kappa_4 * (2 * x_i * y_i) + kappa_5 * ( r^2 + 2 * x_i^2 )\n     *  y_c = y_i * ( kappa_0 + kappa_1 * r^2 + kappa_2 * r^4 + kappa_3 * r^6 ) +\n     *        kappa_5 * (2 * x_i * y_i) + kappa_4 * ( r^2 + 2 * y_i^2 )\n     * </code></pre>\n     * <p>Here, <code>[x_c, y_c]</code> are the coordinates to sample in the\n     * input image that correspond to the pixel values in the\n     * corrected image at the coordinate <code>[x_i, y_i]</code>:</p>\n     * <pre><code> correctedImage(x_i, y_i) = sample_at(x_c, y_c, inputImage)\n     * </code></pre>\n     * <p>The pixel coordinates are defined in a normalized\n     * coordinate system related to the\n     * {@link CameraCharacteristics#LENS_INTRINSIC_CALIBRATION android.lens.intrinsicCalibration} calibration fields.\n     * Both <code>[x_i, y_i]</code> and <code>[x_c, y_c]</code> have <code>(0,0)</code> at the\n     * lens optical center <code>[c_x, c_y]</code>. The maximum magnitudes\n     * of both x and y coordinates are normalized to be 1 at the\n     * edge further from the optical center, so the range\n     * for both dimensions is <code>-1 &lt;= x &lt;= 1</code>.</p>\n     * <p>Finally, <code>r</code> represents the radial distance from the\n     * optical center, <code>r^2 = x_i^2 + y_i^2</code>, and its magnitude\n     * is therefore no larger than <code>|r| &lt;= sqrt(2)</code>.</p>\n     * <p>The distortion model used is the Brown-Conrady model.</p>\n     * <p><b>Units</b>:\n     * Unitless coefficients.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#LENS_INTRINSIC_CALIBRATION\n     * @deprecated\n     * <p>This field was inconsistently defined in terms of its\n     * normalization. Use {@link CameraCharacteristics#LENS_DISTORTION android.lens.distortion} instead.</p>\n     *\n     * @see CameraCharacteristics#LENS_DISTORTION\n\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#LENS_DISTORTION", "android.hardware.camera2.CameraCharacteristics#LENS_INTRINSIC_CALIBRATION", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "LENS_POSE_REFERENCE",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The origin for {@link CameraCharacteristics#LENS_POSE_TRANSLATION android.lens.poseTranslation}, and the accuracy of\n     * {@link CameraCharacteristics#LENS_POSE_TRANSLATION android.lens.poseTranslation} and {@link CameraCharacteristics#LENS_POSE_ROTATION android.lens.poseRotation}.</p>\n     * <p>Different calibration methods and use cases can produce better or worse results\n     * depending on the selected coordinate origin.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #LENS_POSE_REFERENCE_PRIMARY_CAMERA PRIMARY_CAMERA}</li>\n     *   <li>{@link #LENS_POSE_REFERENCE_GYROSCOPE GYROSCOPE}</li>\n     *   <li>{@link #LENS_POSE_REFERENCE_UNDEFINED UNDEFINED}</li>\n     * </ul></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#LENS_POSE_ROTATION\n     * @see CameraCharacteristics#LENS_POSE_TRANSLATION\n     * @see #LENS_POSE_REFERENCE_PRIMARY_CAMERA\n     * @see #LENS_POSE_REFERENCE_GYROSCOPE\n     * @see #LENS_POSE_REFERENCE_UNDEFINED\n     ",
    "links" : [ "#LENS_POSE_REFERENCE_UNDEFINED", "#LENS_POSE_REFERENCE_GYROSCOPE", "android.hardware.camera2.CameraCharacteristics#LENS_POSE_ROTATION", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#LENS_POSE_TRANSLATION", "#LENS_POSE_REFERENCE_PRIMARY_CAMERA" ]
  }, {
    "name" : "LENS_DISTORTION",
    "type" : "Key<float[]>",
    "comment" : "\n     * <p>The correction coefficients to correct for this camera device's\n     * radial and tangential lens distortion.</p>\n     * <p>Replaces the deprecated {@link CameraCharacteristics#LENS_RADIAL_DISTORTION android.lens.radialDistortion} field, which was\n     * inconsistently defined.</p>\n     * <p>Three radial distortion coefficients <code>[kappa_1, kappa_2,\n     * kappa_3]</code> and two tangential distortion coefficients\n     * <code>[kappa_4, kappa_5]</code> that can be used to correct the\n     * lens's geometric distortion with the mapping equations:</p>\n     * <pre><code> x_c = x_i * ( 1 + kappa_1 * r^2 + kappa_2 * r^4 + kappa_3 * r^6 ) +\n     *        kappa_4 * (2 * x_i * y_i) + kappa_5 * ( r^2 + 2 * x_i^2 )\n     *  y_c = y_i * ( 1 + kappa_1 * r^2 + kappa_2 * r^4 + kappa_3 * r^6 ) +\n     *        kappa_5 * (2 * x_i * y_i) + kappa_4 * ( r^2 + 2 * y_i^2 )\n     * </code></pre>\n     * <p>Here, <code>[x_c, y_c]</code> are the coordinates to sample in the\n     * input image that correspond to the pixel values in the\n     * corrected image at the coordinate <code>[x_i, y_i]</code>:</p>\n     * <pre><code> correctedImage(x_i, y_i) = sample_at(x_c, y_c, inputImage)\n     * </code></pre>\n     * <p>The pixel coordinates are defined in a coordinate system\n     * related to the {@link CameraCharacteristics#LENS_INTRINSIC_CALIBRATION android.lens.intrinsicCalibration}\n     * calibration fields; see that entry for details of the mapping stages.\n     * Both <code>[x_i, y_i]</code> and <code>[x_c, y_c]</code>\n     * have <code>(0,0)</code> at the lens optical center <code>[c_x, c_y]</code>, and\n     * the range of the coordinates depends on the focal length\n     * terms of the intrinsic calibration.</p>\n     * <p>Finally, <code>r</code> represents the radial distance from the\n     * optical center, <code>r^2 = x_i^2 + y_i^2</code>.</p>\n     * <p>The distortion model used is the Brown-Conrady model.</p>\n     * <p><b>Units</b>:\n     * Unitless coefficients.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#LENS_INTRINSIC_CALIBRATION\n     * @see CameraCharacteristics#LENS_RADIAL_DISTORTION\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#LENS_RADIAL_DISTORTION", "android.hardware.camera2.CameraCharacteristics#LENS_INTRINSIC_CALIBRATION", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of noise reduction modes for {@link CaptureRequest#NOISE_REDUCTION_MODE android.noiseReduction.mode} that are supported\n     * by this camera device.</p>\n     * <p>Full-capability camera devices will always support OFF and FAST.</p>\n     * <p>Camera devices that support YUV_REPROCESSING or PRIVATE_REPROCESSING will support\n     * ZERO_SHUTTER_LAG.</p>\n     * <p>Legacy-capability camera devices will only support FAST mode.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#NOISE_REDUCTION_MODE android.noiseReduction.mode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#NOISE_REDUCTION_MODE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#NOISE_REDUCTION_MODE", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "QUIRKS_USE_PARTIAL_RESULT",
    "type" : "Key<Byte>",
    "comment" : "\n     * <p>If set to 1, the HAL will always split result\n     * metadata for a single capture into multiple buffers,\n     * returned using multiple process_capture_result calls.</p>\n     * <p>Does not need to be listed in static\n     * metadata. Support for partial results will be reworked in\n     * future versions of camera service. This quirk will stop\n     * working at that point; DO NOT USE without careful\n     * consideration of future support.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @deprecated\n     * <p>Not used in HALv3 or newer; replaced by better partials mechanism</p>\n\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_STREAMS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>The maximum numbers of different types of output streams\n     * that can be configured and used simultaneously by a camera device.</p>\n     * <p>This is a 3 element tuple that contains the max number of output simultaneous\n     * streams for raw sensor, processed (but not stalling), and processed (and stalling)\n     * formats respectively. For example, assuming that JPEG is typically a processed and\n     * stalling stream, if max raw sensor format output stream number is 1, max YUV streams\n     * number is 3, and max JPEG stream number is 2, then this tuple should be <code>(1, 3, 2)</code>.</p>\n     * <p>This lists the upper bound of the number of output streams supported by\n     * the camera device. Using more streams simultaneously may require more hardware and\n     * CPU resources that will consume more power. The image format for an output stream can\n     * be any supported format provided by android.scaler.availableStreamConfigurations.\n     * The formats defined in android.scaler.availableStreamConfigurations can be catergorized\n     * into the 3 stream types as below:</p>\n     * <ul>\n     * <li>Processed (but stalling): any non-RAW format with a stallDurations &gt; 0.\n     *   Typically {@link android.graphics.ImageFormat#JPEG JPEG format}.</li>\n     * <li>Raw formats: {@link android.graphics.ImageFormat#RAW_SENSOR RAW_SENSOR}, {@link android.graphics.ImageFormat#RAW10 RAW10}, or\n     *   {@link android.graphics.ImageFormat#RAW12 RAW12}.</li>\n     * <li>Processed (but not-stalling): any non-RAW format without a stall duration.  Typically\n     *   {@link android.graphics.ImageFormat#YUV_420_888 YUV_420_888},\n     *   {@link android.graphics.ImageFormat#NV21 NV21}, {@link android.graphics.ImageFormat#YV12 YV12}, or {@link android.graphics.ImageFormat#Y8 Y8} .</li>\n     * </ul>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>For processed (and stalling) format streams, &gt;= 1.</p>\n     * <p>For Raw format (either stalling or non-stalling) streams, &gt;= 0.</p>\n     * <p>For processed (but not stalling) format streams, &gt;= 3\n     * for FULL mode devices (<code>{@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} == FULL</code>);\n     * &gt;= 2 for LIMITED mode devices (<code>{@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} == LIMITED</code>).</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG", "android.graphics.ImageFormat#YV12", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.graphics.ImageFormat#RAW_SENSOR", "android.graphics.ImageFormat#NV21", "android.graphics.ImageFormat#Y8", "android.graphics.ImageFormat#YUV_420_888", "android.graphics.ImageFormat#RAW12", "android.graphics.ImageFormat#RAW10" ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_RAW",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum numbers of different types of output streams\n     * that can be configured and used simultaneously by a camera device\n     * for any <code>RAW</code> formats.</p>\n     * <p>This value contains the max number of output simultaneous\n     * streams from the raw sensor.</p>\n     * <p>This lists the upper bound of the number of output streams supported by\n     * the camera device. Using more streams simultaneously may require more hardware and\n     * CPU resources that will consume more power. The image format for this kind of an output stream can\n     * be any <code>RAW</code> and supported format provided by {@link CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP android.scaler.streamConfigurationMap}.</p>\n     * <p>In particular, a <code>RAW</code> format is typically one of:</p>\n     * <ul>\n     * <li>{@link android.graphics.ImageFormat#RAW_SENSOR RAW_SENSOR}</li>\n     * <li>{@link android.graphics.ImageFormat#RAW10 RAW10}</li>\n     * <li>{@link android.graphics.ImageFormat#RAW12 RAW12}</li>\n     * </ul>\n     * <p>LEGACY mode devices ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} <code>==</code> LEGACY)\n     * never support raw streams.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>&gt;= 0</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.graphics.ImageFormat#RAW_SENSOR", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP", "android.graphics.ImageFormat#RAW12", "android.graphics.ImageFormat#RAW10" ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_PROC",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum numbers of different types of output streams\n     * that can be configured and used simultaneously by a camera device\n     * for any processed (but not-stalling) formats.</p>\n     * <p>This value contains the max number of output simultaneous\n     * streams for any processed (but not-stalling) formats.</p>\n     * <p>This lists the upper bound of the number of output streams supported by\n     * the camera device. Using more streams simultaneously may require more hardware and\n     * CPU resources that will consume more power. The image format for this kind of an output stream can\n     * be any non-<code>RAW</code> and supported format provided by {@link CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP android.scaler.streamConfigurationMap}.</p>\n     * <p>Processed (but not-stalling) is defined as any non-RAW format without a stall duration.\n     * Typically:</p>\n     * <ul>\n     * <li>{@link android.graphics.ImageFormat#YUV_420_888 YUV_420_888}</li>\n     * <li>{@link android.graphics.ImageFormat#NV21 NV21}</li>\n     * <li>{@link android.graphics.ImageFormat#YV12 YV12}</li>\n     * <li>Implementation-defined formats, i.e. {@link android.hardware.camera2.params.StreamConfigurationMap#isOutputSupportedFor(Class) }</li>\n     * <li>{@link android.graphics.ImageFormat#Y8 Y8}</li>\n     * </ul>\n     * <p>For full guarantees, query {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration } with a\n     * processed format -- it will return 0 for a non-stalling stream.</p>\n     * <p>LEGACY devices will support at least 2 processing/non-stalling streams.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>&gt;= 3\n     * for FULL mode devices (<code>{@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} == FULL</code>);\n     * &gt;= 2 for LIMITED mode devices (<code>{@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} == LIMITED</code>).</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP\n     ",
    "links" : [ "android.graphics.ImageFormat#YV12", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.graphics.ImageFormat#NV21", "android.graphics.ImageFormat#Y8", "android.graphics.ImageFormat#YUV_420_888", "android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP", "android.hardware.camera2.params.StreamConfigurationMap#isOutputSupportedFor(Class)" ]
  }, {
    "name" : "REQUEST_MAX_NUM_OUTPUT_PROC_STALLING",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum numbers of different types of output streams\n     * that can be configured and used simultaneously by a camera device\n     * for any processed (and stalling) formats.</p>\n     * <p>This value contains the max number of output simultaneous\n     * streams for any processed (but not-stalling) formats.</p>\n     * <p>This lists the upper bound of the number of output streams supported by\n     * the camera device. Using more streams simultaneously may require more hardware and\n     * CPU resources that will consume more power. The image format for this kind of an output stream can\n     * be any non-<code>RAW</code> and supported format provided by {@link CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP android.scaler.streamConfigurationMap}.</p>\n     * <p>A processed and stalling format is defined as any non-RAW format with a stallDurations\n     * &gt; 0.  Typically only the {@link android.graphics.ImageFormat#JPEG JPEG format} is a stalling format.</p>\n     * <p>For full guarantees, query {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration } with a\n     * processed format -- it will return a non-0 value for a stalling stream.</p>\n     * <p>LEGACY devices will support up to 1 processing/stalling stream.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>&gt;= 1</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG", "android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP" ]
  }, {
    "name" : "REQUEST_MAX_NUM_INPUT_STREAMS",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum numbers of any type of input streams\n     * that can be configured and used simultaneously by a camera device.</p>\n     * <p>When set to 0, it means no input stream is supported.</p>\n     * <p>The image format for a input stream can be any supported format returned by {@link android.hardware.camera2.params.StreamConfigurationMap#getInputFormats }. When using an\n     * input stream, there must be at least one output stream configured to to receive the\n     * reprocessed images.</p>\n     * <p>When an input stream and some output streams are used in a reprocessing request,\n     * only the input buffer will be used to produce these output stream buffers, and a\n     * new sensor image will not be captured.</p>\n     * <p>For example, for Zero Shutter Lag (ZSL) still capture use case, the input\n     * stream image format will be PRIVATE, the associated output stream image format\n     * should be JPEG.</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>0 or 1.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getInputFormats", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL" ]
  }, {
    "name" : "REQUEST_PIPELINE_MAX_DEPTH",
    "type" : "Key<Byte>",
    "comment" : "\n     * <p>Specifies the number of maximum pipeline stages a frame\n     * has to go through from when it's exposed to when it's available\n     * to the framework.</p>\n     * <p>A typical minimum value for this is 2 (one stage to expose,\n     * one stage to readout) from the sensor. The ISP then usually adds\n     * its own stages to do custom HW processing. Further stages may be\n     * added by SW processing.</p>\n     * <p>Depending on what settings are used (e.g. YUV, JPEG) and what\n     * processing is enabled (e.g. face detection), the actual pipeline\n     * depth (specified by {@link CaptureResult#REQUEST_PIPELINE_DEPTH android.request.pipelineDepth}) may be less than\n     * the max pipeline depth.</p>\n     * <p>A pipeline depth of X stages is equivalent to a pipeline latency of\n     * X frame intervals.</p>\n     * <p>This value will normally be 8 or less, however, for high speed capture session,\n     * the max pipeline depth will be up to 8 x size of high speed capture request list.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureResult#REQUEST_PIPELINE_DEPTH\n     ",
    "links" : [ "android.hardware.camera2.CaptureResult#REQUEST_PIPELINE_DEPTH" ]
  }, {
    "name" : "REQUEST_PARTIAL_RESULT_COUNT",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Defines how many sub-components\n     * a result will be composed of.</p>\n     * <p>In order to combat the pipeline latency, partial results\n     * may be delivered to the application layer from the camera device as\n     * soon as they are available.</p>\n     * <p>Optional; defaults to 1. A value of 1 means that partial\n     * results are not supported, and only the final TotalCaptureResult will\n     * be produced by the camera device.</p>\n     * <p>A typical use case for this might be: after requesting an\n     * auto-focus (AF) lock the new AF state might be available 50%\n     * of the way through the pipeline.  The camera device could\n     * then immediately dispatch this state via a partial result to\n     * the application, and the rest of the metadata via later\n     * partial results.</p>\n     * <p><b>Range of valid values:</b><br>\n     * &gt;= 1</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_AVAILABLE_CAPABILITIES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of capabilities that this camera device\n     * advertises as fully supporting.</p>\n     * <p>A capability is a contract that the camera device makes in order\n     * to be able to satisfy one or more use cases.</p>\n     * <p>Listing a capability guarantees that the whole set of features\n     * required to support a common use will all be available.</p>\n     * <p>Using a subset of the functionality provided by an unsupported\n     * capability may be possible on a specific camera device implementation;\n     * to do this query each of android.request.availableRequestKeys,\n     * android.request.availableResultKeys,\n     * android.request.availableCharacteristicsKeys.</p>\n     * <p>The following capabilities are guaranteed to be available on\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} <code>==</code> FULL devices:</p>\n     * <ul>\n     * <li>MANUAL_SENSOR</li>\n     * <li>MANUAL_POST_PROCESSING</li>\n     * </ul>\n     * <p>Other capabilities may be available on either FULL or LIMITED\n     * devices, but the application should query this key to be sure.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE BACKWARD_COMPATIBLE}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR MANUAL_SENSOR}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING MANUAL_POST_PROCESSING}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_RAW RAW}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING PRIVATE_REPROCESSING}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS READ_SENSOR_SETTINGS}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE BURST_CAPTURE}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING YUV_REPROCESSING}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT DEPTH_OUTPUT}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO CONSTRAINED_HIGH_SPEED_VIDEO}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING MOTION_TRACKING}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA LOGICAL_MULTI_CAMERA}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME MONOCHROME}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA SECURE_IMAGE_DATA}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA SYSTEM_CAMERA}</li>\n     *   <li>{@link #REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING OFFLINE_PROCESSING}</li>\n     * </ul></p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_RAW\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA\n     * @see #REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING\n     ",
    "links" : [ "#REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING", "#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT", "#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING", "#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO", "#REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING", "#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING", "#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE", "#REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME", "#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING", "#REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS", "#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE", "#REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA", "#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA", "#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR", "#REQUEST_AVAILABLE_CAPABILITIES_RAW" ]
  }, {
    "name" : "REQUEST_AVAILABLE_REQUEST_KEYS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A list of all keys that the camera device has available\n     * to use with {@link android.hardware.camera2.CaptureRequest }.</p>\n     * <p>Attempting to set a key into a CaptureRequest that is not\n     * listed here will result in an invalid request and will be rejected\n     * by the camera device.</p>\n     * <p>This field can be used to query the feature set of a camera device\n     * at a more granular level than capabilities. This is especially\n     * important for optional keys that are not listed under any capability\n     * in {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities}.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CaptureRequest" ]
  }, {
    "name" : "REQUEST_AVAILABLE_RESULT_KEYS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A list of all keys that the camera device has available to use with {@link android.hardware.camera2.CaptureResult }.</p>\n     * <p>Attempting to get a key from a CaptureResult that is not\n     * listed here will always return a <code>null</code> value. Getting a key from\n     * a CaptureResult that is listed here will generally never return a <code>null</code>\n     * value.</p>\n     * <p>The following keys may return <code>null</code> unless they are enabled:</p>\n     * <ul>\n     * <li>android.statistics.lensShadingMap (non-null iff {@link CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE android.statistics.lensShadingMapMode} == ON)</li>\n     * </ul>\n     * <p>(Those sometimes-null keys will nevertheless be listed here\n     * if they are available.)</p>\n     * <p>This field can be used to query the feature set of a camera device\n     * at a more granular level than capabilities. This is especially\n     * important for optional keys that are not listed under any capability\n     * in {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities}.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CaptureResult", "android.hardware.camera2.CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE" ]
  }, {
    "name" : "REQUEST_AVAILABLE_CHARACTERISTICS_KEYS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A list of all keys that the camera device has available to use with {@link android.hardware.camera2.CameraCharacteristics }.</p>\n     * <p>This entry follows the same rules as\n     * android.request.availableResultKeys (except that it applies for\n     * CameraCharacteristics instead of CaptureResult). See above for more\n     * details.</p>\n     * <p>This key is available on all devices.</p>\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics" ]
  }, {
    "name" : "REQUEST_AVAILABLE_SESSION_KEYS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A subset of the available request keys that the camera device\n     * can pass as part of the capture session initialization.</p>\n     * <p>This is a subset of android.request.availableRequestKeys which\n     * contains a list of keys that are difficult to apply per-frame and\n     * can result in unexpected delays when modified during the capture session\n     * lifetime. Typical examples include parameters that require a\n     * time-consuming hardware re-configuration or internal camera pipeline\n     * change. For performance reasons we advise clients to pass their initial\n     * values as part of\n     * {@link SessionConfiguration#setSessionParameters }.\n     * Once the camera capture session is enabled it is also recommended to avoid\n     * changing them from their initial values set in\n     * {@link SessionConfiguration#setSessionParameters }.\n     * Control over session parameters can still be exerted in capture requests\n     * but clients should be aware and expect delays during their application.\n     * An example usage scenario could look like this:</p>\n     * <ul>\n     * <li>The camera client starts by quering the session parameter key list via\n     *   {@link android.hardware.camera2.CameraCharacteristics#getAvailableSessionKeys }.</li>\n     * <li>Before triggering the capture session create sequence, a capture request\n     *   must be built via\n     *   {@link CameraDevice#createCaptureRequest }\n     *   using an appropriate template matching the particular use case.</li>\n     * <li>The client should go over the list of session parameters and check\n     *   whether some of the keys listed matches with the parameters that\n     *   they intend to modify as part of the first capture request.</li>\n     * <li>If there is no such match, the capture request can be  passed\n     *   unmodified to\n     *   {@link SessionConfiguration#setSessionParameters }.</li>\n     * <li>If matches do exist, the client should update the respective values\n     *   and pass the request to\n     *   {@link SessionConfiguration#setSessionParameters }.</li>\n     * <li>After the capture session initialization completes the session parameter\n     *   key list can continue to serve as reference when posting or updating\n     *   further requests. As mentioned above further changes to session\n     *   parameters should ideally be avoided, if updates are necessary\n     *   however clients could expect a delay/glitch during the\n     *   parameter switch.</li>\n     * </ul>\n     * <p>This key is available on all devices.</p>\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraDevice#createCaptureRequest", "android.hardware.camera2.params.SessionConfiguration#setSessionParameters", "android.hardware.camera2.CameraCharacteristics#getAvailableSessionKeys" ]
  }, {
    "name" : "REQUEST_AVAILABLE_PHYSICAL_CAMERA_REQUEST_KEYS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A subset of the available request keys that can be overridden for\n     * physical devices backing a logical multi-camera.</p>\n     * <p>This is a subset of android.request.availableRequestKeys which contains a list\n     * of keys that can be overridden using {@link CaptureRequest.Builder#setPhysicalCameraKey }.\n     * The respective value of such request key can be obtained by calling\n     * {@link CaptureRequest.Builder#getPhysicalCameraKey }. Capture requests that contain\n     * individual physical device requests must be built via\n     * {@link android.hardware.camera2.CameraDevice#createCaptureRequest(int, Set)}.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "CaptureRequest.Builder#getPhysicalCameraKey", "CaptureRequest.Builder#setPhysicalCameraKey", "android.hardware.camera2.CameraDevice#createCaptureRequest(int", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "REQUEST_CHARACTERISTIC_KEYS_NEEDING_PERMISSION",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A list of camera characteristics keys that are only available\n     * in case the camera client has camera permission.</p>\n     * <p>The entry contains a subset of\n     * {@link android.hardware.camera2.CameraCharacteristics#getKeys } that require camera clients\n     * to acquire the {@link android.Manifest.permission#CAMERA } permission before calling\n     * {@link android.hardware.camera2.CameraManager#getCameraCharacteristics }. If the\n     * permission is not held by the camera client, then the values of the repsective properties\n     * will not be present in {@link android.hardware.camera2.CameraCharacteristics }.</p>\n     * <p>This key is available on all devices.</p>\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraManager#getCameraCharacteristics", "android.hardware.camera2.CameraCharacteristics", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#getKeys" ]
  }, {
    "name" : "SCALER_AVAILABLE_FORMATS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>The list of image formats that are supported by this\n     * camera device for output streams.</p>\n     * <p>All camera devices will support JPEG and YUV_420_888 formats.</p>\n     * <p>When set to YUV_420_888, application can access the YUV420 data directly.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @deprecated\n     * <p>Not used in HALv3 or newer</p>\n\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCALER_AVAILABLE_JPEG_MIN_DURATIONS",
    "type" : "Key<long[]>",
    "comment" : "\n     * <p>The minimum frame duration that is supported\n     * for each resolution in android.scaler.availableJpegSizes.</p>\n     * <p>This corresponds to the minimum steady-state frame duration when only\n     * that JPEG stream is active and captured in a burst, with all\n     * processing (typically in android.*.mode) set to FAST.</p>\n     * <p>When multiple streams are configured, the minimum\n     * frame duration will be &gt;= max(individual stream min\n     * durations)</p>\n     * <p><b>Units</b>: Nanoseconds</p>\n     * <p><b>Range of valid values:</b><br>\n     * TODO: Remove property.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @deprecated\n     * <p>Not used in HALv3 or newer</p>\n\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCALER_AVAILABLE_JPEG_SIZES",
    "type" : "Key<android.util.Size[]>",
    "comment" : "\n     * <p>The JPEG resolutions that are supported by this camera device.</p>\n     * <p>The resolutions are listed as <code>(width, height)</code> pairs. All camera devices will support\n     * sensor maximum resolution (defined by {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}).</p>\n     * <p><b>Range of valid values:</b><br>\n     * TODO: Remove property.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE\n     * @deprecated\n     * <p>Not used in HALv3 or newer</p>\n\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "SCALER_AVAILABLE_MAX_DIGITAL_ZOOM",
    "type" : "Key<Float>",
    "comment" : "\n     * <p>The maximum ratio between both active area width\n     * and crop region width, and active area height and\n     * crop region height, for {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}.</p>\n     * <p>This represents the maximum amount of zooming possible by\n     * the camera device, or equivalently, the minimum cropping\n     * window size.</p>\n     * <p>Crop regions that have a width or height that is smaller\n     * than this ratio allows will be rounded up to the minimum\n     * allowed size by the camera device.</p>\n     * <p>Starting from API level 30, when using {@link CaptureRequest#CONTROL_ZOOM_RATIO android.control.zoomRatio} to zoom in or out,\n     * the application must use {@link CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE android.control.zoomRatioRange} to query both the minimum and\n     * maximum zoom ratio.</p>\n     * <p><b>Units</b>: Zoom scale factor</p>\n     * <p><b>Range of valid values:</b><br>\n     * &gt;=1</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_ZOOM_RATIO\n     * @see CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE\n     * @see CaptureRequest#SCALER_CROP_REGION\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SCALER_CROP_REGION", "android.hardware.camera2.CaptureRequest#CONTROL_ZOOM_RATIO", "android.hardware.camera2.CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE" ]
  }, {
    "name" : "SCALER_AVAILABLE_PROCESSED_MIN_DURATIONS",
    "type" : "Key<long[]>",
    "comment" : "\n     * <p>For each available processed output size (defined in\n     * android.scaler.availableProcessedSizes), this property lists the\n     * minimum supportable frame duration for that size.</p>\n     * <p>This should correspond to the frame duration when only that processed\n     * stream is active, with all processing (typically in android.*.mode)\n     * set to FAST.</p>\n     * <p>When multiple streams are configured, the minimum frame duration will\n     * be &gt;= max(individual stream min durations).</p>\n     * <p><b>Units</b>: Nanoseconds</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @deprecated\n     * <p>Not used in HALv3 or newer</p>\n\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCALER_AVAILABLE_PROCESSED_SIZES",
    "type" : "Key<android.util.Size[]>",
    "comment" : "\n     * <p>The resolutions available for use with\n     * processed output streams, such as YV12, NV12, and\n     * platform opaque YUV/RGB streams to the GPU or video\n     * encoders.</p>\n     * <p>The resolutions are listed as <code>(width, height)</code> pairs.</p>\n     * <p>For a given use case, the actual maximum supported resolution\n     * may be lower than what is listed here, depending on the destination\n     * Surface for the image data. For example, for recording video,\n     * the video encoder chosen may have a maximum size limit (e.g. 1080p)\n     * smaller than what the camera (e.g. maximum resolution is 3264x2448)\n     * can provide.</p>\n     * <p>Please reference the documentation for the image data destination to\n     * check if it limits the maximum size for image data.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @deprecated\n     * <p>Not used in HALv3 or newer</p>\n\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SCALER_AVAILABLE_INPUT_OUTPUT_FORMATS_MAP",
    "type" : "Key<android.hardware.camera2.params.ReprocessFormatsMap>",
    "comment" : "\n     * <p>The mapping of image formats that are supported by this\n     * camera device for input streams, to their corresponding output formats.</p>\n     * <p>All camera devices with at least 1\n     * {@link CameraCharacteristics#REQUEST_MAX_NUM_INPUT_STREAMS android.request.maxNumInputStreams} will have at least one\n     * available input format.</p>\n     * <p>The camera device will support the following map of formats,\n     * if its dependent capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities}) is supported:</p>\n     * <table>\n     * <thead>\n     * <tr>\n     * <th align=\"left\">Input Format</th>\n     * <th align=\"left\">Output Format</th>\n     * <th align=\"left\">Capability</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#PRIVATE }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"left\">PRIVATE_REPROCESSING</td>\n     * </tr>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#PRIVATE }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#YUV_420_888 }</td>\n     * <td align=\"left\">PRIVATE_REPROCESSING</td>\n     * </tr>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#YUV_420_888 }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"left\">YUV_REPROCESSING</td>\n     * </tr>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#YUV_420_888 }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#YUV_420_888 }</td>\n     * <td align=\"left\">YUV_REPROCESSING</td>\n     * </tr>\n     * </tbody>\n     * </table>\n     * <p>PRIVATE refers to a device-internal format that is not directly application-visible.  A\n     * PRIVATE input surface can be acquired by {@link android.media.ImageReader#newInstance }\n     * with {@link android.graphics.ImageFormat#PRIVATE } as the format.</p>\n     * <p>For a PRIVATE_REPROCESSING-capable camera device, using the PRIVATE format as either input\n     * or output will never hurt maximum frame rate (i.e.  {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration getOutputStallDuration(ImageFormat.PRIVATE, size)} is always 0),</p>\n     * <p>Attempting to configure an input stream with output streams not\n     * listed as available in this map is not valid.</p>\n     * <p>Additionally, if the camera device is MONOCHROME with Y8 support, it will also support\n     * the following map of formats if its dependent capability\n     * ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities}) is supported:</p>\n     * <table>\n     * <thead>\n     * <tr>\n     * <th align=\"left\">Input Format</th>\n     * <th align=\"left\">Output Format</th>\n     * <th align=\"left\">Capability</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#PRIVATE }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#Y8 }</td>\n     * <td align=\"left\">PRIVATE_REPROCESSING</td>\n     * </tr>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#Y8 }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"left\">YUV_REPROCESSING</td>\n     * </tr>\n     * <tr>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#Y8 }</td>\n     * <td align=\"left\">{@link android.graphics.ImageFormat#Y8 }</td>\n     * <td align=\"left\">YUV_REPROCESSING</td>\n     * </tr>\n     * </tbody>\n     * </table>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CameraCharacteristics#REQUEST_MAX_NUM_INPUT_STREAMS\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.graphics.ImageFormat#JPEG", "android.graphics.ImageFormat#PRIVATE", "android.media.ImageReader#newInstance", "android.graphics.ImageFormat#Y8", "android.hardware.camera2.CameraCharacteristics#REQUEST_MAX_NUM_INPUT_STREAMS", "android.graphics.ImageFormat#YUV_420_888", "android.hardware.camera2.params.StreamConfigurationMap#getOutputStallDuration" ]
  }, {
    "name" : "SCALER_AVAILABLE_STREAM_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfiguration[]>",
    "comment" : "\n     * <p>The available stream configurations that this\n     * camera device supports\n     * (i.e. format, width, height, output/input stream).</p>\n     * <p>The configurations are listed as <code>(format, width, height, input?)</code>\n     * tuples.</p>\n     * <p>For a given use case, the actual maximum supported resolution\n     * may be lower than what is listed here, depending on the destination\n     * Surface for the image data. For example, for recording video,\n     * the video encoder chosen may have a maximum size limit (e.g. 1080p)\n     * smaller than what the camera (e.g. maximum resolution is 3264x2448)\n     * can provide.</p>\n     * <p>Please reference the documentation for the image data destination to\n     * check if it limits the maximum size for image data.</p>\n     * <p>Not all output formats may be supported in a configuration with\n     * an input stream of a particular format. For more details, see\n     * android.scaler.availableInputOutputFormatsMap.</p>\n     * <p>The following table describes the minimum required output stream\n     * configurations based on the hardware level\n     * ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel}):</p>\n     * <table>\n     * <thead>\n     * <tr>\n     * <th align=\"center\">Format</th>\n     * <th align=\"center\">Size</th>\n     * <th align=\"center\">Hardware Level</th>\n     * <th align=\"center\">Notes</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     * <td align=\"center\">JPEG</td>\n     * <td align=\"center\">{@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">JPEG</td>\n     * <td align=\"center\">1920x1080 (1080p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 1080p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">JPEG</td>\n     * <td align=\"center\">1280x720 (720)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 720p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">JPEG</td>\n     * <td align=\"center\">640x480 (480p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 480p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">JPEG</td>\n     * <td align=\"center\">320x240 (240p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 240p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">YUV_420_888</td>\n     * <td align=\"center\">all output sizes available for JPEG</td>\n     * <td align=\"center\">FULL</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">YUV_420_888</td>\n     * <td align=\"center\">all output sizes available for JPEG, up to the maximum video size</td>\n     * <td align=\"center\">LIMITED</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">IMPLEMENTATION_DEFINED</td>\n     * <td align=\"center\">same as YUV_420_888</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * </tbody>\n     * </table>\n     * <p>Refer to {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities} for additional\n     * mandatory stream configurations on a per-capability basis.</p>\n     * <p>Exception on 176x144 (QCIF) resolution: camera devices usually have a fixed capability for\n     * downscaling from larger resolution to smaller, and the QCIF resolution sometimes is not\n     * fully supported due to this limitation on devices with high-resolution image sensors.\n     * Therefore, trying to configure a QCIF resolution stream together with any other\n     * stream larger than 1920x1080 resolution (either width or height) might not be supported,\n     * and capture session creation will fail if it is not.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "SCALER_AVAILABLE_MIN_FRAME_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the minimum frame duration for each\n     * format/size combination.</p>\n     * <p>This should correspond to the frame duration when only that\n     * stream is active, with all processing (typically in android.*.mode)\n     * set to either OFF or FAST.</p>\n     * <p>When multiple streams are used in a request, the minimum frame\n     * duration will be max(individual stream min durations).</p>\n     * <p>The minimum frame duration of a stream (of a particular format, size)\n     * is the same regardless of whether the stream is input or output.</p>\n     * <p>See {@link CaptureRequest#SENSOR_FRAME_DURATION android.sensor.frameDuration} and\n     * android.scaler.availableStallDurations for more details about\n     * calculating the max frame rate.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#SENSOR_FRAME_DURATION\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION" ]
  }, {
    "name" : "SCALER_AVAILABLE_STALL_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the maximum stall duration for each\n     * output format/size combination.</p>\n     * <p>A stall duration is how much extra time would get added\n     * to the normal minimum frame duration for a repeating request\n     * that has streams with non-zero stall.</p>\n     * <p>For example, consider JPEG captures which have the following\n     * characteristics:</p>\n     * <ul>\n     * <li>JPEG streams act like processed YUV streams in requests for which\n     * they are not included; in requests in which they are directly\n     * referenced, they act as JPEG streams. This is because supporting a\n     * JPEG stream requires the underlying YUV data to always be ready for\n     * use by a JPEG encoder, but the encoder will only be used (and impact\n     * frame duration) on requests that actually reference a JPEG stream.</li>\n     * <li>The JPEG processor can run concurrently to the rest of the camera\n     * pipeline, but cannot process more than 1 capture at a time.</li>\n     * </ul>\n     * <p>In other words, using a repeating YUV request would result\n     * in a steady frame rate (let's say it's 30 FPS). If a single\n     * JPEG request is submitted periodically, the frame rate will stay\n     * at 30 FPS (as long as we wait for the previous JPEG to return each\n     * time). If we try to submit a repeating YUV + JPEG request, then\n     * the frame rate will drop from 30 FPS.</p>\n     * <p>In general, submitting a new request with a non-0 stall time\n     * stream will <em>not</em> cause a frame rate drop unless there are still\n     * outstanding buffers for that stream from previous requests.</p>\n     * <p>Submitting a repeating request with streams (call this <code>S</code>)\n     * is the same as setting the minimum frame duration from\n     * the normal minimum frame duration corresponding to <code>S</code>, added with\n     * the maximum stall duration for <code>S</code>.</p>\n     * <p>If interleaving requests with and without a stall duration,\n     * a request will stall by the maximum of the remaining times\n     * for each can-stall stream with outstanding buffers.</p>\n     * <p>This means that a stalling request will not have an exposure start\n     * until the stall has completed.</p>\n     * <p>This should correspond to the stall duration when only that stream is\n     * active, with all processing (typically in android.*.mode) set to FAST\n     * or OFF. Setting any of the processing modes to HIGH_QUALITY\n     * effectively results in an indeterminate stall duration for all\n     * streams in a request (the regular stall calculation rules are\n     * ignored).</p>\n     * <p>The following formats may always have a stall duration:</p>\n     * <ul>\n     * <li>{@link android.graphics.ImageFormat#JPEG }</li>\n     * <li>{@link android.graphics.ImageFormat#RAW_SENSOR }</li>\n     * </ul>\n     * <p>The following formats will never have a stall duration:</p>\n     * <ul>\n     * <li>{@link android.graphics.ImageFormat#YUV_420_888 }</li>\n     * <li>{@link android.graphics.ImageFormat#RAW10 }</li>\n     * <li>{@link android.graphics.ImageFormat#RAW12 }</li>\n     * <li>{@link android.graphics.ImageFormat#Y8 }</li>\n     * </ul>\n     * <p>All other formats may or may not have an allowed stall duration on\n     * a per-capability basis; refer to {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities}\n     * for more details.</p>\n     * <p>See {@link CaptureRequest#SENSOR_FRAME_DURATION android.sensor.frameDuration} for more information about\n     * calculating the max frame rate (absent stalls).</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CaptureRequest#SENSOR_FRAME_DURATION\n     * @hide\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.graphics.ImageFormat#RAW_SENSOR", "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION", "android.graphics.ImageFormat#Y8", "android.graphics.ImageFormat#YUV_420_888", "android.graphics.ImageFormat#RAW12", "android.graphics.ImageFormat#RAW10" ]
  }, {
    "name" : "SCALER_STREAM_CONFIGURATION_MAP",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationMap>",
    "comment" : "\n     * <p>The available stream configurations that this\n     * camera device supports; also includes the minimum frame durations\n     * and the stall durations for each format/size combination.</p>\n     * <p>All camera devices will support sensor maximum resolution (defined by\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}) for the JPEG format.</p>\n     * <p>For a given use case, the actual maximum supported resolution\n     * may be lower than what is listed here, depending on the destination\n     * Surface for the image data. For example, for recording video,\n     * the video encoder chosen may have a maximum size limit (e.g. 1080p)\n     * smaller than what the camera (e.g. maximum resolution is 3264x2448)\n     * can provide.</p>\n     * <p>Please reference the documentation for the image data destination to\n     * check if it limits the maximum size for image data.</p>\n     * <p>The following table describes the minimum required output stream\n     * configurations based on the hardware level\n     * ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel}):</p>\n     * <table>\n     * <thead>\n     * <tr>\n     * <th align=\"center\">Format</th>\n     * <th align=\"center\">Size</th>\n     * <th align=\"center\">Hardware Level</th>\n     * <th align=\"center\">Notes</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"center\">{@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize} (*1)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"center\">1920x1080 (1080p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 1080p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"center\">1280x720 (720p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 720p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"center\">640x480 (480p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 480p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#JPEG }</td>\n     * <td align=\"center\">320x240 (240p)</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\">if 240p &lt;= activeArraySize</td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#YUV_420_888 }</td>\n     * <td align=\"center\">all output sizes available for JPEG</td>\n     * <td align=\"center\">FULL</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#YUV_420_888 }</td>\n     * <td align=\"center\">all output sizes available for JPEG, up to the maximum video size</td>\n     * <td align=\"center\">LIMITED</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * <tr>\n     * <td align=\"center\">{@link android.graphics.ImageFormat#PRIVATE }</td>\n     * <td align=\"center\">same as YUV_420_888</td>\n     * <td align=\"center\">Any</td>\n     * <td align=\"center\"></td>\n     * </tr>\n     * </tbody>\n     * </table>\n     * <p>Refer to {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities} and {@link android.hardware.camera2.CameraDevice#createCaptureSession } for additional mandatory\n     * stream configurations on a per-capability basis.</p>\n     * <p>*1: For JPEG format, the sizes may be restricted by below conditions:</p>\n     * <ul>\n     * <li>The HAL may choose the aspect ratio of each Jpeg size to be one of well known ones\n     * (e.g. 4:3, 16:9, 3:2 etc.). If the sensor maximum resolution\n     * (defined by {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}) has an aspect ratio other than these,\n     * it does not have to be included in the supported JPEG sizes.</li>\n     * <li>Some hardware JPEG encoders may have pixel boundary alignment requirements, such as\n     * the dimensions being a multiple of 16.\n     * Therefore, the maximum JPEG size may be smaller than sensor maximum resolution.\n     * However, the largest JPEG size will be as close as possible to the sensor maximum\n     * resolution given above constraints. It is required that after aspect ratio adjustments,\n     * additional size reduction due to other issues must be less than 3% in area. For example,\n     * if the sensor maximum resolution is 3280x2464, if the maximum JPEG size has aspect\n     * ratio 4:3, and the JPEG encoder alignment requirement is 16, the maximum JPEG size will be\n     * 3264x2448.</li>\n     * </ul>\n     * <p>Exception on 176x144 (QCIF) resolution: camera devices usually have a fixed capability on\n     * downscaling from larger resolution to smaller ones, and the QCIF resolution can sometimes\n     * not be fully supported due to this limitation on devices with high-resolution image\n     * sensors. Therefore, trying to configure a QCIF resolution stream together with any other\n     * stream larger than 1920x1080 resolution (either width or height) might not be supported,\n     * and capture session creation will fail if it is not.</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.graphics.ImageFormat#JPEG", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.graphics.ImageFormat#PRIVATE", "android.graphics.ImageFormat#YUV_420_888", "android.hardware.camera2.CameraDevice#createCaptureSession", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "SCALER_CROPPING_TYPE",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The crop type that this camera device supports.</p>\n     * <p>When passing a non-centered crop region ({@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}) to a camera\n     * device that only supports CENTER_ONLY cropping, the camera device will move the\n     * crop region to the center of the sensor active array ({@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize})\n     * and keep the crop region width and height unchanged. The camera device will return the\n     * final used crop region in metadata result {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}.</p>\n     * <p>Camera devices that support FREEFORM cropping will support any crop region that\n     * is inside of the active array. The camera device will apply the same crop region and\n     * return the final used crop region in capture result metadata {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}.</p>\n     * <p>Starting from API level 30,</p>\n     * <ul>\n     * <li>If the camera device supports FREEFORM cropping, in order to do FREEFORM cropping, the\n     * application must set {@link CaptureRequest#CONTROL_ZOOM_RATIO android.control.zoomRatio} to 1.0, and use {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}\n     * for zoom.</li>\n     * <li>To do CENTER_ONLY zoom, the application has below 2 options:<ol>\n     * <li>Set {@link CaptureRequest#CONTROL_ZOOM_RATIO android.control.zoomRatio} to 1.0; adjust zoom by {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}.</li>\n     * <li>Adjust zoom by {@link CaptureRequest#CONTROL_ZOOM_RATIO android.control.zoomRatio}; use {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion} to crop\n     * the field of view vertically (letterboxing) or horizontally (pillarboxing), but not\n     * windowboxing.</li>\n     * </ol>\n     * </li>\n     * <li>Setting {@link CaptureRequest#CONTROL_ZOOM_RATIO android.control.zoomRatio} to values different than 1.0 and\n     * {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion} to be windowboxing at the same time is undefined behavior.</li>\n     * </ul>\n     * <p>LEGACY capability devices will only support CENTER_ONLY cropping.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #SCALER_CROPPING_TYPE_CENTER_ONLY CENTER_ONLY}</li>\n     *   <li>{@link #SCALER_CROPPING_TYPE_FREEFORM FREEFORM}</li>\n     * </ul></p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#CONTROL_ZOOM_RATIO\n     * @see CaptureRequest#SCALER_CROP_REGION\n     * @see CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE\n     * @see #SCALER_CROPPING_TYPE_CENTER_ONLY\n     * @see #SCALER_CROPPING_TYPE_FREEFORM\n     ",
    "links" : [ "#SCALER_CROPPING_TYPE_CENTER_ONLY", "android.hardware.camera2.CaptureRequest#SCALER_CROP_REGION", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE", "android.hardware.camera2.CaptureRequest#CONTROL_ZOOM_RATIO", "#SCALER_CROPPING_TYPE_FREEFORM" ]
  }, {
    "name" : "SCALER_AVAILABLE_RECOMMENDED_STREAM_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.RecommendedStreamConfiguration[]>",
    "comment" : "\n     * <p>Recommended stream configurations for common client use cases.</p>\n     * <p>Optional subset of the android.scaler.availableStreamConfigurations that contains\n     * similar tuples listed as\n     * (i.e. width, height, format, output/input stream, usecase bit field).\n     * Camera devices will be able to suggest particular stream configurations which are\n     * power and performance efficient for specific use cases. For more information about\n     * retrieving the suggestions see\n     * {@link android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap }.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap" ]
  }, {
    "name" : "SCALER_AVAILABLE_RECOMMENDED_INPUT_OUTPUT_FORMATS_MAP",
    "type" : "Key<android.hardware.camera2.params.ReprocessFormatsMap>",
    "comment" : "\n     * <p>Recommended mappings of image formats that are supported by this\n     * camera device for input streams, to their corresponding output formats.</p>\n     * <p>This is a recommended subset of the complete list of mappings found in\n     * android.scaler.availableInputOutputFormatsMap. The same requirements apply here as well.\n     * The list however doesn't need to contain all available and supported mappings. Instead of\n     * this developers must list only recommended and efficient entries.\n     * If set, the information will be available in the ZERO_SHUTTER_LAG recommended stream\n     * configuration see\n     * {@link android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap }.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap" ]
  }, {
    "name" : "SCALER_MANDATORY_STREAM_COMBINATIONS",
    "type" : "Key<android.hardware.camera2.params.MandatoryStreamCombination[]>",
    "comment" : "\n     * <p>An array of mandatory stream combinations generated according to the camera device\n     * {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL }\n     * and {@link android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES }.\n     * This is an app-readable conversion of the mandatory stream combination\n     * {@link android.hardware.camera2.CameraDevice#createCaptureSession tables}.</p>\n     * <p>The array of\n     * {@link android.hardware.camera2.params.MandatoryStreamCombination combinations} is\n     * generated according to the documented\n     * {@link android.hardware.camera2.CameraDevice#createCaptureSession guideline} based on\n     * specific device level and capabilities.\n     * Clients can use the array as a quick reference to find an appropriate camera stream\n     * combination.\n     * As per documentation, the stream combinations with given PREVIEW, RECORD and\n     * MAXIMUM resolutions and anything smaller from the list given by\n     * {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes } are\n     * guaranteed to work.\n     * For a physical camera not independently exposed in\n     * {@link android.hardware.camera2.CameraManager#getCameraIdList }, the mandatory stream\n     * combinations for that physical camera Id are also generated, so that the application can\n     * configure them as physical streams via the logical camera.\n     * The mandatory stream combination array will be {@code null} in case the device is not\n     * backward compatible.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CameraManager#getCameraIdList", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes", "android.hardware.camera2.params.MandatoryStreamCombination", "android.hardware.camera2.CameraDevice#createCaptureSession", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS",
    "type" : "Key<android.hardware.camera2.params.MandatoryStreamCombination[]>",
    "comment" : "\n     * <p>An array of mandatory concurrent stream combinations.\n     * This is an app-readable conversion of the concurrent mandatory stream combination\n     * {@link android.hardware.camera2.CameraDevice#createCaptureSession tables}.</p>\n     * <p>The array of\n     * {@link android.hardware.camera2.params.MandatoryStreamCombination combinations} is\n     * generated according to the documented\n     * {@link android.hardware.camera2.CameraDevice#createCaptureSession guideline} for each\n     * device which has its Id present in the set returned by\n     * {@link android.hardware.camera2.CameraManager#getConcurrentCameraIds }.\n     * Clients can use the array as a quick reference to find an appropriate camera stream\n     * combination.\n     * The mandatory stream combination array will be {@code null} in case the device is not a\n     * part of at least one set of combinations returned by\n     * {@link android.hardware.camera2.CameraManager#getConcurrentCameraIds }.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     ",
    "links" : [ "android.hardware.camera2.CameraManager#getConcurrentCameraIds", "android.hardware.camera2.params.MandatoryStreamCombination", "android.hardware.camera2.CameraDevice#createCaptureSession" ]
  }, {
    "name" : "SCALER_AVAILABLE_ROTATE_AND_CROP_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of rotate-and-crop modes for android.scaler.rotateAndCrop that are supported by this camera device.</p>\n     * <p>This entry lists the valid modes for android.scaler.rotateAndCrop for this camera device.</p>\n     * <p>Starting at some future API level, all devices will list at least <code>ROTATE_AND_CROP_NONE</code>.\n     * Devices with support for rotate-and-crop will additionally list at least\n     * <code>ROTATE_AND_CROP_AUTO</code> and <code>ROTATE_AND_CROP_90</code>.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in android.scaler.rotateAndCrop</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSOR_INFO_ACTIVE_ARRAY_SIZE",
    "type" : "Key<android.graphics.Rect>",
    "comment" : "\n     * <p>The area of the image sensor which corresponds to active pixels after any geometric\n     * distortion correction has been applied.</p>\n     * <p>This is the rectangle representing the size of the active region of the sensor (i.e.\n     * the region that actually receives light from the scene) after any geometric correction\n     * has been applied, and should be treated as the maximum size in pixels of any of the\n     * image output formats aside from the raw formats.</p>\n     * <p>This rectangle is defined relative to the full pixel array; (0,0) is the top-left of\n     * the full pixel array, and the size of the full pixel array is given by\n     * {@link CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE android.sensor.info.pixelArraySize}.</p>\n     * <p>The coordinate system for most other keys that list pixel coordinates, including\n     * {@link CaptureRequest#SCALER_CROP_REGION android.scaler.cropRegion}, is defined relative to the active array rectangle given in\n     * this field, with <code>(0, 0)</code> being the top-left of this rectangle.</p>\n     * <p>The active array may be smaller than the full pixel array, since the full array may\n     * include black calibration pixels or other inactive regions.</p>\n     * <p>For devices that do not support {@link CaptureRequest#DISTORTION_CORRECTION_MODE android.distortionCorrection.mode} control, the active\n     * array must be the same as {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize}.</p>\n     * <p>For devices that support {@link CaptureRequest#DISTORTION_CORRECTION_MODE android.distortionCorrection.mode} control, the active array must\n     * be enclosed by {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize}. The difference between\n     * pre-correction active array and active array accounts for scaling or cropping caused\n     * by lens geometric distortion correction.</p>\n     * <p>In general, application should always refer to active array size for controls like\n     * metering regions or crop region. Two exceptions are when the application is dealing with\n     * RAW image buffers (RAW_SENSOR, RAW10, RAW12 etc), or when application explicitly set\n     * {@link CaptureRequest#DISTORTION_CORRECTION_MODE android.distortionCorrection.mode} to OFF. In these cases, application should refer\n     * to {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize}.</p>\n     * <p><b>Units</b>: Pixel coordinates on the image sensor</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#DISTORTION_CORRECTION_MODE\n     * @see CaptureRequest#SCALER_CROP_REGION\n     * @see CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE\n     * @see CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE", "android.hardware.camera2.CaptureRequest#DISTORTION_CORRECTION_MODE", "android.hardware.camera2.CaptureRequest#SCALER_CROP_REGION", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "SENSOR_INFO_SENSITIVITY_RANGE",
    "type" : "Key<android.util.Range<Integer>>",
    "comment" : "\n     * <p>Range of sensitivities for {@link CaptureRequest#SENSOR_SENSITIVITY android.sensor.sensitivity} supported by this\n     * camera device.</p>\n     * <p>The values are the standard ISO sensitivity values,\n     * as defined in ISO 12232:2006.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Min &lt;= 100, Max &gt;= 800</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#SENSOR_SENSITIVITY\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_SENSITIVITY", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL" ]
  }, {
    "name" : "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The arrangement of color filters on sensor;\n     * represents the colors in the top-left 2x2 section of\n     * the sensor, in reading order, for a Bayer camera, or the\n     * light spectrum it captures for MONOCHROME camera.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB RGGB}</li>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG GRBG}</li>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG GBRG}</li>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR BGGR}</li>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB RGB}</li>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO MONO}</li>\n     *   <li>{@link #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR NIR}</li>\n     * </ul></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO\n     * @see #SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB", "#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR" ]
  }, {
    "name" : "SENSOR_INFO_EXPOSURE_TIME_RANGE",
    "type" : "Key<android.util.Range<Long>>",
    "comment" : "\n     * <p>The range of image exposure times for {@link CaptureRequest#SENSOR_EXPOSURE_TIME android.sensor.exposureTime} supported\n     * by this camera device.</p>\n     * <p><b>Units</b>: Nanoseconds</p>\n     * <p><b>Range of valid values:</b><br>\n     * The minimum exposure time will be less than 100 us. For FULL\n     * capability devices ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} == FULL),\n     * the maximum exposure time will be greater than 100ms.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#SENSOR_EXPOSURE_TIME\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.CaptureRequest#SENSOR_EXPOSURE_TIME" ]
  }, {
    "name" : "SENSOR_INFO_MAX_FRAME_DURATION",
    "type" : "Key<Long>",
    "comment" : "\n     * <p>The maximum possible frame duration (minimum frame rate) for\n     * {@link CaptureRequest#SENSOR_FRAME_DURATION android.sensor.frameDuration} that is supported this camera device.</p>\n     * <p>Attempting to use frame durations beyond the maximum will result in the frame\n     * duration being clipped to the maximum. See that control for a full definition of frame\n     * durations.</p>\n     * <p>Refer to {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputMinFrameDuration }\n     * for the minimum frame duration values.</p>\n     * <p><b>Units</b>: Nanoseconds</p>\n     * <p><b>Range of valid values:</b><br>\n     * For FULL capability devices\n     * ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} == FULL), at least 100ms.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#SENSOR_FRAME_DURATION\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.params.StreamConfigurationMap#getOutputMinFrameDuration" ]
  }, {
    "name" : "SENSOR_INFO_PHYSICAL_SIZE",
    "type" : "Key<android.util.SizeF>",
    "comment" : "\n     * <p>The physical dimensions of the full pixel\n     * array.</p>\n     * <p>This is the physical size of the sensor pixel\n     * array defined by {@link CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE android.sensor.info.pixelArraySize}.</p>\n     * <p><b>Units</b>: Millimeters</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE" ]
  }, {
    "name" : "SENSOR_INFO_PIXEL_ARRAY_SIZE",
    "type" : "Key<android.util.Size>",
    "comment" : "\n     * <p>Dimensions of the full pixel array, possibly\n     * including black calibration pixels.</p>\n     * <p>The pixel count of the full pixel array of the image sensor, which covers\n     * {@link CameraCharacteristics#SENSOR_INFO_PHYSICAL_SIZE android.sensor.info.physicalSize} area.  This represents the full pixel dimensions of\n     * the raw buffers produced by this sensor.</p>\n     * <p>If a camera device supports raw sensor formats, either this or\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize} is the maximum dimensions for the raw\n     * output formats listed in {@link android.hardware.camera2.params.StreamConfigurationMap }\n     * (this depends on whether or not the image sensor returns buffers containing pixels that\n     * are not part of the active array region for blacklevel calibration or other purposes).</p>\n     * <p>Some parts of the full pixel array may not receive light from the scene,\n     * or be otherwise inactive.  The {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize} key\n     * defines the rectangle of active pixels that will be included in processed image\n     * formats.</p>\n     * <p><b>Units</b>: Pixels</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#SENSOR_INFO_PHYSICAL_SIZE\n     * @see CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PHYSICAL_SIZE", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "SENSOR_INFO_WHITE_LEVEL",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Maximum raw value output by sensor.</p>\n     * <p>This specifies the fully-saturated encoding level for the raw\n     * sample values from the sensor.  This is typically caused by the\n     * sensor becoming highly non-linear or clipping. The minimum for\n     * each channel is specified by the offset in the\n     * {@link CameraCharacteristics#SENSOR_BLACK_LEVEL_PATTERN android.sensor.blackLevelPattern} key.</p>\n     * <p>The white level is typically determined either by sensor bit depth\n     * (8-14 bits is expected), or by the point where the sensor response\n     * becomes too non-linear to be useful.  The default value for this is\n     * maximum representable value for a 16-bit raw sample (2^16 - 1).</p>\n     * <p>The white level values of captured images may vary for different\n     * capture settings (e.g., {@link CaptureRequest#SENSOR_SENSITIVITY android.sensor.sensitivity}). This key\n     * represents a coarse approximation for such case. It is recommended\n     * to use {@link CaptureResult#SENSOR_DYNAMIC_WHITE_LEVEL android.sensor.dynamicWhiteLevel} for captures when supported\n     * by the camera device, which provides more accurate white level values.</p>\n     * <p><b>Range of valid values:</b><br>\n     * &gt; 255 (8-bit output)</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CameraCharacteristics#SENSOR_BLACK_LEVEL_PATTERN\n     * @see CaptureResult#SENSOR_DYNAMIC_WHITE_LEVEL\n     * @see CaptureRequest#SENSOR_SENSITIVITY\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_SENSITIVITY", "android.hardware.camera2.CaptureResult#SENSOR_DYNAMIC_WHITE_LEVEL", "android.hardware.camera2.CameraCharacteristics#SENSOR_BLACK_LEVEL_PATTERN" ]
  }, {
    "name" : "SENSOR_INFO_TIMESTAMP_SOURCE",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The time base source for sensor capture start timestamps.</p>\n     * <p>The timestamps provided for captures are always in nanoseconds and monotonic, but\n     * may not based on a time source that can be compared to other system time sources.</p>\n     * <p>This characteristic defines the source for the timestamps, and therefore whether they\n     * can be compared against other system time sources/timestamps.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN UNKNOWN}</li>\n     *   <li>{@link #SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME REALTIME}</li>\n     * </ul></p>\n     * <p>This key is available on all devices.</p>\n     * @see #SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN\n     * @see #SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME\n     ",
    "links" : [ "#SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME", "#SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN" ]
  }, {
    "name" : "SENSOR_INFO_LENS_SHADING_APPLIED",
    "type" : "Key<Boolean>",
    "comment" : "\n     * <p>Whether the RAW images output from this camera device are subject to\n     * lens shading correction.</p>\n     * <p>If TRUE, all images produced by the camera device in the RAW image formats will\n     * have lens shading correction already applied to it. If FALSE, the images will\n     * not be adjusted for lens shading correction.\n     * See {@link CameraCharacteristics#REQUEST_MAX_NUM_OUTPUT_RAW android.request.maxNumOutputRaw} for a list of RAW image formats.</p>\n     * <p>This key will be <code>null</code> for all devices do not report this information.\n     * Devices with RAW capability will always report this information in this key.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CameraCharacteristics#REQUEST_MAX_NUM_OUTPUT_RAW\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_MAX_NUM_OUTPUT_RAW" ]
  }, {
    "name" : "SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE",
    "type" : "Key<android.graphics.Rect>",
    "comment" : "\n     * <p>The area of the image sensor which corresponds to active pixels prior to the\n     * application of any geometric distortion correction.</p>\n     * <p>This is the rectangle representing the size of the active region of the sensor (i.e.\n     * the region that actually receives light from the scene) before any geometric correction\n     * has been applied, and should be treated as the active region rectangle for any of the\n     * raw formats.  All metadata associated with raw processing (e.g. the lens shading\n     * correction map, and radial distortion fields) treats the top, left of this rectangle as\n     * the origin, (0,0).</p>\n     * <p>The size of this region determines the maximum field of view and the maximum number of\n     * pixels that an image from this sensor can contain, prior to the application of\n     * geometric distortion correction. The effective maximum pixel dimensions of a\n     * post-distortion-corrected image is given by the {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}\n     * field, and the effective maximum field of view for a post-distortion-corrected image\n     * can be calculated by applying the geometric distortion correction fields to this\n     * rectangle, and cropping to the rectangle given in {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}.</p>\n     * <p>E.g. to calculate position of a pixel, (x,y), in a processed YUV output image with the\n     * dimensions in {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize} given the position of a pixel,\n     * (x', y'), in the raw pixel array with dimensions give in\n     * {@link CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE android.sensor.info.pixelArraySize}:</p>\n     * <ol>\n     * <li>Choose a pixel (x', y') within the active array region of the raw buffer given in\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize}, otherwise this pixel is considered\n     * to be outside of the FOV, and will not be shown in the processed output image.</li>\n     * <li>Apply geometric distortion correction to get the post-distortion pixel coordinate,\n     * (x_i, y_i). When applying geometric correction metadata, note that metadata for raw\n     * buffers is defined relative to the top, left of the\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize} rectangle.</li>\n     * <li>If the resulting corrected pixel coordinate is within the region given in\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}, then the position of this pixel in the\n     * processed output image buffer is <code>(x_i - activeArray.left, y_i - activeArray.top)</code>,\n     * when the top, left coordinate of that buffer is treated as (0, 0).</li>\n     * </ol>\n     * <p>Thus, for pixel x',y' = (25, 25) on a sensor where {@link CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE android.sensor.info.pixelArraySize}\n     * is (100,100), {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE android.sensor.info.preCorrectionActiveArraySize} is (10, 10, 100, 100),\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize} is (20, 20, 80, 80), and the geometric distortion\n     * correction doesn't change the pixel coordinate, the resulting pixel selected in\n     * pixel coordinates would be x,y = (25, 25) relative to the top,left of the raw buffer\n     * with dimensions given in {@link CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE android.sensor.info.pixelArraySize}, and would be (5, 5)\n     * relative to the top,left of post-processed YUV output buffer with dimensions given in\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}.</p>\n     * <p>The currently supported fields that correct for geometric distortion are:</p>\n     * <ol>\n     * <li>{@link CameraCharacteristics#LENS_DISTORTION android.lens.distortion}.</li>\n     * </ol>\n     * <p>If the camera device doesn't support geometric distortion correction, or all of the\n     * geometric distortion fields are no-ops, this rectangle will be the same as the\n     * post-distortion-corrected rectangle given in {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE android.sensor.info.activeArraySize}.</p>\n     * <p>This rectangle is defined relative to the full pixel array; (0,0) is the top-left of\n     * the full pixel array, and the size of the full pixel array is given by\n     * {@link CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE android.sensor.info.pixelArraySize}.</p>\n     * <p>The pre-correction active array may be smaller than the full pixel array, since the\n     * full array may include black calibration pixels or other inactive regions.</p>\n     * <p><b>Units</b>: Pixel coordinates on the image sensor</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#LENS_DISTORTION\n     * @see CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE\n     * @see CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE\n     * @see CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PIXEL_ARRAY_SIZE", "android.hardware.camera2.CameraCharacteristics#LENS_DISTORTION", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE" ]
  }, {
    "name" : "SENSOR_REFERENCE_ILLUMINANT1",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The standard reference illuminant used as the scene light source when\n     * calculating the {@link CameraCharacteristics#SENSOR_COLOR_TRANSFORM1 android.sensor.colorTransform1},\n     * {@link CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM1 android.sensor.calibrationTransform1}, and\n     * {@link CameraCharacteristics#SENSOR_FORWARD_MATRIX1 android.sensor.forwardMatrix1} matrices.</p>\n     * <p>The values in this key correspond to the values defined for the\n     * EXIF LightSource tag. These illuminants are standard light sources\n     * that are often used calibrating camera devices.</p>\n     * <p>If this key is present, then {@link CameraCharacteristics#SENSOR_COLOR_TRANSFORM1 android.sensor.colorTransform1},\n     * {@link CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM1 android.sensor.calibrationTransform1}, and\n     * {@link CameraCharacteristics#SENSOR_FORWARD_MATRIX1 android.sensor.forwardMatrix1} will also be present.</p>\n     * <p>Some devices may choose to provide a second set of calibration\n     * information for improved quality, including\n     * {@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2 android.sensor.referenceIlluminant2} and its corresponding matrices.</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT DAYLIGHT}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT FLUORESCENT}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN TUNGSTEN}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_FLASH FLASH}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER FINE_WEATHER}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER CLOUDY_WEATHER}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_SHADE SHADE}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT DAYLIGHT_FLUORESCENT}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT DAY_WHITE_FLUORESCENT}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT COOL_WHITE_FLUORESCENT}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT WHITE_FLUORESCENT}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A STANDARD_A}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B STANDARD_B}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C STANDARD_C}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_D55 D55}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_D65 D65}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_D75 D75}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_D50 D50}</li>\n     *   <li>{@link #SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN ISO_STUDIO_TUNGSTEN}</li>\n     * </ul></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM1\n     * @see CameraCharacteristics#SENSOR_COLOR_TRANSFORM1\n     * @see CameraCharacteristics#SENSOR_FORWARD_MATRIX1\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_FLASH\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_SHADE\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_D55\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_D65\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_D75\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_D50\n     * @see #SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_COLOR_TRANSFORM1", "android.hardware.camera2.CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM1", "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2", "#SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN", "#SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER", "#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A", "#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B", "#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C", "#SENSOR_REFERENCE_ILLUMINANT1_FLASH", "#SENSOR_REFERENCE_ILLUMINANT1_D50", "#SENSOR_REFERENCE_ILLUMINANT1_SHADE", "#SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT", "#SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT", "#SENSOR_REFERENCE_ILLUMINANT1_D65", "#SENSOR_REFERENCE_ILLUMINANT1_D55", "#SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT", "#SENSOR_REFERENCE_ILLUMINANT1_D75", "#SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER", "#SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#SENSOR_FORWARD_MATRIX1", "#SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT", "#SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT", "#SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN" ]
  }, {
    "name" : "SENSOR_REFERENCE_ILLUMINANT2",
    "type" : "Key<Byte>",
    "comment" : "\n     * <p>The standard reference illuminant used as the scene light source when\n     * calculating the {@link CameraCharacteristics#SENSOR_COLOR_TRANSFORM2 android.sensor.colorTransform2},\n     * {@link CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM2 android.sensor.calibrationTransform2}, and\n     * {@link CameraCharacteristics#SENSOR_FORWARD_MATRIX2 android.sensor.forwardMatrix2} matrices.</p>\n     * <p>See {@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1 android.sensor.referenceIlluminant1} for more details.</p>\n     * <p>If this key is present, then {@link CameraCharacteristics#SENSOR_COLOR_TRANSFORM2 android.sensor.colorTransform2},\n     * {@link CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM2 android.sensor.calibrationTransform2}, and\n     * {@link CameraCharacteristics#SENSOR_FORWARD_MATRIX2 android.sensor.forwardMatrix2} will also be present.</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1 android.sensor.referenceIlluminant1}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM2\n     * @see CameraCharacteristics#SENSOR_COLOR_TRANSFORM2\n     * @see CameraCharacteristics#SENSOR_FORWARD_MATRIX2\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_COLOR_TRANSFORM2", "android.hardware.camera2.CameraCharacteristics#SENSOR_FORWARD_MATRIX2", "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#SENSOR_CALIBRATION_TRANSFORM2", "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1" ]
  }, {
    "name" : "SENSOR_CALIBRATION_TRANSFORM1",
    "type" : "Key<android.hardware.camera2.params.ColorSpaceTransform>",
    "comment" : "\n     * <p>A per-device calibration transform matrix that maps from the\n     * reference sensor colorspace to the actual device sensor colorspace.</p>\n     * <p>This matrix is used to correct for per-device variations in the\n     * sensor colorspace, and is used for processing raw buffer data.</p>\n     * <p>The matrix is expressed as a 3x3 matrix in row-major-order, and\n     * contains a per-device calibration transform that maps colors\n     * from reference sensor color space (i.e. the \"golden module\"\n     * colorspace) into this camera device's native sensor color\n     * space under the first reference illuminant\n     * ({@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1 android.sensor.referenceIlluminant1}).</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1\n     ",
    "links" : [ "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1" ]
  }, {
    "name" : "SENSOR_CALIBRATION_TRANSFORM2",
    "type" : "Key<android.hardware.camera2.params.ColorSpaceTransform>",
    "comment" : "\n     * <p>A per-device calibration transform matrix that maps from the\n     * reference sensor colorspace to the actual device sensor colorspace\n     * (this is the colorspace of the raw buffer data).</p>\n     * <p>This matrix is used to correct for per-device variations in the\n     * sensor colorspace, and is used for processing raw buffer data.</p>\n     * <p>The matrix is expressed as a 3x3 matrix in row-major-order, and\n     * contains a per-device calibration transform that maps colors\n     * from reference sensor color space (i.e. the \"golden module\"\n     * colorspace) into this camera device's native sensor color\n     * space under the second reference illuminant\n     * ({@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2 android.sensor.referenceIlluminant2}).</p>\n     * <p>This matrix will only be present if the second reference\n     * illuminant is present.</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "SENSOR_COLOR_TRANSFORM1",
    "type" : "Key<android.hardware.camera2.params.ColorSpaceTransform>",
    "comment" : "\n     * <p>A matrix that transforms color values from CIE XYZ color space to\n     * reference sensor color space.</p>\n     * <p>This matrix is used to convert from the standard CIE XYZ color\n     * space to the reference sensor colorspace, and is used when processing\n     * raw buffer data.</p>\n     * <p>The matrix is expressed as a 3x3 matrix in row-major-order, and\n     * contains a color transform matrix that maps colors from the CIE\n     * XYZ color space to the reference sensor color space (i.e. the\n     * \"golden module\" colorspace) under the first reference illuminant\n     * ({@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1 android.sensor.referenceIlluminant1}).</p>\n     * <p>The white points chosen in both the reference sensor color space\n     * and the CIE XYZ colorspace when calculating this transform will\n     * match the standard white point for the first reference illuminant\n     * (i.e. no chromatic adaptation will be applied by this transform).</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1\n     ",
    "links" : [ "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1" ]
  }, {
    "name" : "SENSOR_COLOR_TRANSFORM2",
    "type" : "Key<android.hardware.camera2.params.ColorSpaceTransform>",
    "comment" : "\n     * <p>A matrix that transforms color values from CIE XYZ color space to\n     * reference sensor color space.</p>\n     * <p>This matrix is used to convert from the standard CIE XYZ color\n     * space to the reference sensor colorspace, and is used when processing\n     * raw buffer data.</p>\n     * <p>The matrix is expressed as a 3x3 matrix in row-major-order, and\n     * contains a color transform matrix that maps colors from the CIE\n     * XYZ color space to the reference sensor color space (i.e. the\n     * \"golden module\" colorspace) under the second reference illuminant\n     * ({@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2 android.sensor.referenceIlluminant2}).</p>\n     * <p>The white points chosen in both the reference sensor color space\n     * and the CIE XYZ colorspace when calculating this transform will\n     * match the standard white point for the second reference illuminant\n     * (i.e. no chromatic adaptation will be applied by this transform).</p>\n     * <p>This matrix will only be present if the second reference\n     * illuminant is present.</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "SENSOR_FORWARD_MATRIX1",
    "type" : "Key<android.hardware.camera2.params.ColorSpaceTransform>",
    "comment" : "\n     * <p>A matrix that transforms white balanced camera colors from the reference\n     * sensor colorspace to the CIE XYZ colorspace with a D50 whitepoint.</p>\n     * <p>This matrix is used to convert to the standard CIE XYZ colorspace, and\n     * is used when processing raw buffer data.</p>\n     * <p>This matrix is expressed as a 3x3 matrix in row-major-order, and contains\n     * a color transform matrix that maps white balanced colors from the\n     * reference sensor color space to the CIE XYZ color space with a D50 white\n     * point.</p>\n     * <p>Under the first reference illuminant ({@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1 android.sensor.referenceIlluminant1})\n     * this matrix is chosen so that the standard white point for this reference\n     * illuminant in the reference sensor colorspace is mapped to D50 in the\n     * CIE XYZ colorspace.</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1\n     ",
    "links" : [ "android.Manifest.permission#CAMERA", "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT1" ]
  }, {
    "name" : "SENSOR_FORWARD_MATRIX2",
    "type" : "Key<android.hardware.camera2.params.ColorSpaceTransform>",
    "comment" : "\n     * <p>A matrix that transforms white balanced camera colors from the reference\n     * sensor colorspace to the CIE XYZ colorspace with a D50 whitepoint.</p>\n     * <p>This matrix is used to convert to the standard CIE XYZ colorspace, and\n     * is used when processing raw buffer data.</p>\n     * <p>This matrix is expressed as a 3x3 matrix in row-major-order, and contains\n     * a color transform matrix that maps white balanced colors from the\n     * reference sensor color space to the CIE XYZ color space with a D50 white\n     * point.</p>\n     * <p>Under the second reference illuminant ({@link CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2 android.sensor.referenceIlluminant2})\n     * this matrix is chosen so that the standard white point for this reference\n     * illuminant in the reference sensor colorspace is mapped to D50 in the\n     * CIE XYZ colorspace.</p>\n     * <p>This matrix will only be present if the second reference\n     * illuminant is present.</p>\n     * <p>Starting from Android Q, this key will not be present for a MONOCHROME camera, even if\n     * the camera device has RAW capability.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Permission {@link android.Manifest.permission#CAMERA } is needed to access this property</b></p>\n     *\n     * @see CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SENSOR_REFERENCE_ILLUMINANT2", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "SENSOR_BLACK_LEVEL_PATTERN",
    "type" : "Key<android.hardware.camera2.params.BlackLevelPattern>",
    "comment" : "\n     * <p>A fixed black level offset for each of the color filter arrangement\n     * (CFA) mosaic channels.</p>\n     * <p>This key specifies the zero light value for each of the CFA mosaic\n     * channels in the camera sensor.  The maximal value output by the\n     * sensor is represented by the value in {@link CameraCharacteristics#SENSOR_INFO_WHITE_LEVEL android.sensor.info.whiteLevel}.</p>\n     * <p>The values are given in the same order as channels listed for the CFA\n     * layout key (see {@link CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT android.sensor.info.colorFilterArrangement}), i.e. the\n     * nth value given corresponds to the black level offset for the nth\n     * color channel listed in the CFA.</p>\n     * <p>The black level values of captured images may vary for different\n     * capture settings (e.g., {@link CaptureRequest#SENSOR_SENSITIVITY android.sensor.sensitivity}). This key\n     * represents a coarse approximation for such case. It is recommended to\n     * use {@link CaptureResult#SENSOR_DYNAMIC_BLACK_LEVEL android.sensor.dynamicBlackLevel} or use pixels from\n     * {@link CameraCharacteristics#SENSOR_OPTICAL_BLACK_REGIONS android.sensor.opticalBlackRegions} directly for captures when\n     * supported by the camera device, which provides more accurate black\n     * level values. For raw capture in particular, it is recommended to use\n     * pixels from {@link CameraCharacteristics#SENSOR_OPTICAL_BLACK_REGIONS android.sensor.opticalBlackRegions} to calculate black\n     * level values for each frame.</p>\n     * <p>For a MONOCHROME camera device, all of the 2x2 channels must have the same values.</p>\n     * <p><b>Range of valid values:</b><br>\n     * &gt;= 0 for each.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureResult#SENSOR_DYNAMIC_BLACK_LEVEL\n     * @see CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT\n     * @see CameraCharacteristics#SENSOR_INFO_WHITE_LEVEL\n     * @see CameraCharacteristics#SENSOR_OPTICAL_BLACK_REGIONS\n     * @see CaptureRequest#SENSOR_SENSITIVITY\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_SENSITIVITY", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_WHITE_LEVEL", "android.hardware.camera2.CaptureResult#SENSOR_DYNAMIC_BLACK_LEVEL", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT", "android.hardware.camera2.CameraCharacteristics#SENSOR_OPTICAL_BLACK_REGIONS" ]
  }, {
    "name" : "SENSOR_MAX_ANALOG_SENSITIVITY",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Maximum sensitivity that is implemented\n     * purely through analog gain.</p>\n     * <p>For {@link CaptureRequest#SENSOR_SENSITIVITY android.sensor.sensitivity} values less than or\n     * equal to this, all applied gain must be analog. For\n     * values above this, the gain applied can be a mix of analog and\n     * digital.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#SENSOR_SENSITIVITY\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_SENSITIVITY", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL" ]
  }, {
    "name" : "SENSOR_ORIENTATION",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Clockwise angle through which the output image needs to be rotated to be\n     * upright on the device screen in its native orientation.</p>\n     * <p>Also defines the direction of rolling shutter readout, which is from top to bottom in\n     * the sensor's coordinate system.</p>\n     * <p><b>Units</b>: Degrees of clockwise rotation; always a multiple of\n     * 90</p>\n     * <p><b>Range of valid values:</b><br>\n     * 0, 90, 180, 270</p>\n     * <p>This key is available on all devices.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSOR_AVAILABLE_TEST_PATTERN_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of sensor test pattern modes for {@link CaptureRequest#SENSOR_TEST_PATTERN_MODE android.sensor.testPatternMode}\n     * supported by this camera device.</p>\n     * <p>Defaults to OFF, and always includes OFF if defined.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#SENSOR_TEST_PATTERN_MODE android.sensor.testPatternMode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#SENSOR_TEST_PATTERN_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SENSOR_TEST_PATTERN_MODE" ]
  }, {
    "name" : "SENSOR_OPTICAL_BLACK_REGIONS",
    "type" : "Key<android.graphics.Rect[]>",
    "comment" : "\n     * <p>List of disjoint rectangles indicating the sensor\n     * optically shielded black pixel regions.</p>\n     * <p>In most camera sensors, the active array is surrounded by some\n     * optically shielded pixel areas. By blocking light, these pixels\n     * provides a reliable black reference for black level compensation\n     * in active array region.</p>\n     * <p>This key provides a list of disjoint rectangles specifying the\n     * regions of optically shielded (with metal shield) black pixel\n     * regions if the camera device is capable of reading out these black\n     * pixels in the output raw images. In comparison to the fixed black\n     * level values reported by {@link CameraCharacteristics#SENSOR_BLACK_LEVEL_PATTERN android.sensor.blackLevelPattern}, this key\n     * may provide a more accurate way for the application to calculate\n     * black level of each captured raw images.</p>\n     * <p>When this key is reported, the {@link CaptureResult#SENSOR_DYNAMIC_BLACK_LEVEL android.sensor.dynamicBlackLevel} and\n     * {@link CaptureResult#SENSOR_DYNAMIC_WHITE_LEVEL android.sensor.dynamicWhiteLevel} will also be reported.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CameraCharacteristics#SENSOR_BLACK_LEVEL_PATTERN\n     * @see CaptureResult#SENSOR_DYNAMIC_BLACK_LEVEL\n     * @see CaptureResult#SENSOR_DYNAMIC_WHITE_LEVEL\n     ",
    "links" : [ "android.hardware.camera2.CaptureResult#SENSOR_DYNAMIC_BLACK_LEVEL", "android.hardware.camera2.CaptureResult#SENSOR_DYNAMIC_WHITE_LEVEL", "android.hardware.camera2.CameraCharacteristics#SENSOR_BLACK_LEVEL_PATTERN" ]
  }, {
    "name" : "SHADING_AVAILABLE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of lens shading modes for {@link CaptureRequest#SHADING_MODE android.shading.mode} that are supported by this camera device.</p>\n     * <p>This list contains lens shading modes that can be set for the camera device.\n     * Camera devices that support the MANUAL_POST_PROCESSING capability will always\n     * list OFF and FAST mode. This includes all FULL level devices.\n     * LEGACY devices will always only support FAST mode.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#SHADING_MODE android.shading.mode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#SHADING_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#SHADING_MODE" ]
  }, {
    "name" : "STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of face detection modes for {@link CaptureRequest#STATISTICS_FACE_DETECT_MODE android.statistics.faceDetectMode} that are\n     * supported by this camera device.</p>\n     * <p>OFF is always supported.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#STATISTICS_FACE_DETECT_MODE android.statistics.faceDetectMode}</p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CaptureRequest#STATISTICS_FACE_DETECT_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#STATISTICS_FACE_DETECT_MODE" ]
  }, {
    "name" : "STATISTICS_INFO_MAX_FACE_COUNT",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum number of simultaneously detectable\n     * faces.</p>\n     * <p><b>Range of valid values:</b><br>\n     * 0 for cameras without available face detection; otherwise:\n     * <code>&gt;=4</code> for LIMITED or FULL hwlevel devices or\n     * <code>&gt;0</code> for LEGACY devices.</p>\n     * <p>This key is available on all devices.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES",
    "type" : "Key<boolean[]>",
    "comment" : "\n     * <p>List of hot pixel map output modes for {@link CaptureRequest#STATISTICS_HOT_PIXEL_MAP_MODE android.statistics.hotPixelMapMode} that are\n     * supported by this camera device.</p>\n     * <p>If no hotpixel map output is available for this camera device, this will contain only\n     * <code>false</code>.</p>\n     * <p>ON is always supported on devices with the RAW capability.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#STATISTICS_HOT_PIXEL_MAP_MODE android.statistics.hotPixelMapMode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#STATISTICS_HOT_PIXEL_MAP_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#STATISTICS_HOT_PIXEL_MAP_MODE" ]
  }, {
    "name" : "STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of lens shading map output modes for {@link CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE android.statistics.lensShadingMapMode} that\n     * are supported by this camera device.</p>\n     * <p>If no lens shading map output is available for this camera device, this key will\n     * contain only OFF.</p>\n     * <p>ON is always supported on devices with the RAW capability.\n     * LEGACY mode devices will always only support OFF.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE android.statistics.lensShadingMapMode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE" ]
  }, {
    "name" : "STATISTICS_INFO_AVAILABLE_OIS_DATA_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of OIS data output modes for {@link CaptureRequest#STATISTICS_OIS_DATA_MODE android.statistics.oisDataMode} that\n     * are supported by this camera device.</p>\n     * <p>If no OIS data output is available for this camera device, this key will\n     * contain only OFF.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#STATISTICS_OIS_DATA_MODE android.statistics.oisDataMode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#STATISTICS_OIS_DATA_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#STATISTICS_OIS_DATA_MODE" ]
  }, {
    "name" : "TONEMAP_MAX_CURVE_POINTS",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Maximum number of supported points in the\n     * tonemap curve that can be used for {@link CaptureRequest#TONEMAP_CURVE android.tonemap.curve}.</p>\n     * <p>If the actual number of points provided by the application (in {@link CaptureRequest#TONEMAP_CURVE android.tonemap.curve}*) is\n     * less than this maximum, the camera device will resample the curve to its internal\n     * representation, using linear interpolation.</p>\n     * <p>The output curves in the result metadata may have a different number\n     * of points than the input curves, and will represent the actual\n     * hardware curves used as closely as possible when linearly interpolated.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#TONEMAP_CURVE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#TONEMAP_CURVE", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL" ]
  }, {
    "name" : "TONEMAP_AVAILABLE_TONE_MAP_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of tonemapping modes for {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} that are supported by this camera\n     * device.</p>\n     * <p>Camera devices that support the MANUAL_POST_PROCESSING capability will always contain\n     * at least one of below mode combinations:</p>\n     * <ul>\n     * <li>CONTRAST_CURVE, FAST and HIGH_QUALITY</li>\n     * <li>GAMMA_VALUE, PRESET_CURVE, FAST and HIGH_QUALITY</li>\n     * </ul>\n     * <p>This includes all FULL level devices.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Full capability</b> -\n     * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#TONEMAP_MODE\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.CaptureRequest#TONEMAP_MODE" ]
  }, {
    "name" : "LED_AVAILABLE_LEDS",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>A list of camera LEDs that are available on this system.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #LED_AVAILABLE_LEDS_TRANSMIT TRANSMIT}</li>\n     * </ul></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @see #LED_AVAILABLE_LEDS_TRANSMIT\n     * @hide\n     ",
    "links" : [ "#LED_AVAILABLE_LEDS_TRANSMIT" ]
  }, {
    "name" : "INFO_SUPPORTED_HARDWARE_LEVEL",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>Generally classifies the overall set of the camera device functionality.</p>\n     * <p>The supported hardware level is a high-level description of the camera device's\n     * capabilities, summarizing several capabilities into one field.  Each level adds additional\n     * features to the previous one, and is always a strict superset of the previous level.\n     * The ordering is <code>LEGACY &lt; LIMITED &lt; FULL &lt; LEVEL_3</code>.</p>\n     * <p>Starting from <code>LEVEL_3</code>, the level enumerations are guaranteed to be in increasing\n     * numerical value as well. To check if a given device is at least at a given hardware level,\n     * the following code snippet can be used:</p>\n     * <pre><code>// Returns true if the device supports the required hardware level, or better.\n     * boolean isHardwareLevelSupported(CameraCharacteristics c, int requiredLevel) {\n     *     final int[] sortedHwLevels = {\n     *         CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY,\n     *         CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL,\n     *         CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED,\n     *         CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_FULL,\n     *         CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_3\n     *     };\n     *     int deviceLevel = c.get(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL);\n     *     if (requiredLevel == deviceLevel) {\n     *         return true;\n     *     }\n     *\n     *     for (int sortedlevel : sortedHwLevels) {\n     *         if (sortedlevel == requiredLevel) {\n     *             return true;\n     *         } else if (sortedlevel == deviceLevel) {\n     *             return false;\n     *         }\n     *     }\n     *     return false; // Should never reach here\n     * }\n     * </code></pre>\n     * <p>At a high level, the levels are:</p>\n     * <ul>\n     * <li><code>LEGACY</code> devices operate in a backwards-compatibility mode for older\n     *   Android devices, and have very limited capabilities.</li>\n     * <li><code>LIMITED</code> devices represent the\n     *   baseline feature set, and may also include additional capabilities that are\n     *   subsets of <code>FULL</code>.</li>\n     * <li><code>FULL</code> devices additionally support per-frame manual control of sensor, flash, lens and\n     *   post-processing settings, and image capture at a high rate.</li>\n     * <li><code>LEVEL_3</code> devices additionally support YUV reprocessing and RAW image capture, along\n     *   with additional output stream configurations.</li>\n     * <li><code>EXTERNAL</code> devices are similar to <code>LIMITED</code> devices with exceptions like some sensor or\n     *   lens information not reported or less stable framerates.</li>\n     * </ul>\n     * <p>See the individual level enums for full descriptions of the supported capabilities.  The\n     * {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities} entry describes the device's capabilities at a\n     * finer-grain level, if needed. In addition, many controls have their available settings or\n     * ranges defined in individual entries from {@link android.hardware.camera2.CameraCharacteristics }.</p>\n     * <p>Some features are not part of any particular hardware level or capability and must be\n     * queried separately. These include:</p>\n     * <ul>\n     * <li>Calibrated timestamps ({@link CameraCharacteristics#SENSOR_INFO_TIMESTAMP_SOURCE android.sensor.info.timestampSource} <code>==</code> REALTIME)</li>\n     * <li>Precision lens control ({@link CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION android.lens.info.focusDistanceCalibration} <code>==</code> CALIBRATED)</li>\n     * <li>Face detection ({@link CameraCharacteristics#STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES android.statistics.info.availableFaceDetectModes})</li>\n     * <li>Optical or electrical image stabilization\n     *   ({@link CameraCharacteristics#LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION android.lens.info.availableOpticalStabilization},\n     *    {@link CameraCharacteristics#CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES android.control.availableVideoStabilizationModes})</li>\n     * </ul>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED}</li>\n     *   <li>{@link #INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL}</li>\n     *   <li>{@link #INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY}</li>\n     *   <li>{@link #INFO_SUPPORTED_HARDWARE_LEVEL_3 3}</li>\n     *   <li>{@link #INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL EXTERNAL}</li>\n     * </ul></p>\n     * <p>This key is available on all devices.</p>\n     *\n     * @see CameraCharacteristics#CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES\n     * @see CameraCharacteristics#LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION\n     * @see CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CameraCharacteristics#SENSOR_INFO_TIMESTAMP_SOURCE\n     * @see CameraCharacteristics#STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES\n     * @see #INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED\n     * @see #INFO_SUPPORTED_HARDWARE_LEVEL_FULL\n     * @see #INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY\n     * @see #INFO_SUPPORTED_HARDWARE_LEVEL_3\n     * @see #INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION", "#INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL", "#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED", "#INFO_SUPPORTED_HARDWARE_LEVEL_3", "android.hardware.camera2.CameraCharacteristics", "android.hardware.camera2.CameraCharacteristics#LENS_INFO_FOCUS_DISTANCE_CALIBRATION", "android.hardware.camera2.CameraCharacteristics#CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_TIMESTAMP_SOURCE", "#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "android.hardware.camera2.CameraCharacteristics#STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES" ]
  }, {
    "name" : "INFO_VERSION",
    "type" : "Key<String>",
    "comment" : "\n     * <p>A short string for manufacturer version information about the camera device, such as\n     * ISP hardware, sensors, etc.</p>\n     * <p>This can be used in {@link android.media.ExifInterface#TAG_IMAGE_DESCRIPTION TAG_IMAGE_DESCRIPTION}\n     * in jpeg EXIF. This key may be absent if no version information is available on the\n     * device.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     ",
    "links" : [ "android.media.ExifInterface#TAG_IMAGE_DESCRIPTION" ]
  }, {
    "name" : "SYNC_MAX_LATENCY",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximum number of frames that can occur after a request\n     * (different than the previous) has been submitted, and before the\n     * result's state becomes synchronized.</p>\n     * <p>This defines the maximum distance (in number of metadata results),\n     * between the frame number of the request that has new controls to apply\n     * and the frame number of the result that has all the controls applied.</p>\n     * <p>In other words this acts as an upper boundary for how many frames\n     * must occur before the camera device knows for a fact that the new\n     * submitted camera settings have been applied in outgoing frames.</p>\n     * <p><b>Units</b>: Frame counts</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #SYNC_MAX_LATENCY_PER_FRAME_CONTROL PER_FRAME_CONTROL}</li>\n     *   <li>{@link #SYNC_MAX_LATENCY_UNKNOWN UNKNOWN}</li>\n     * </ul></p>\n     * <p><b>Available values for this device:</b><br>\n     * A positive value, PER_FRAME_CONTROL, or UNKNOWN.</p>\n     * <p>This key is available on all devices.</p>\n     * @see #SYNC_MAX_LATENCY_PER_FRAME_CONTROL\n     * @see #SYNC_MAX_LATENCY_UNKNOWN\n     ",
    "links" : [ "#SYNC_MAX_LATENCY_UNKNOWN", "#SYNC_MAX_LATENCY_PER_FRAME_CONTROL" ]
  }, {
    "name" : "REPROCESS_MAX_CAPTURE_STALL",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The maximal camera capture pipeline stall (in unit of frame count) introduced by a\n     * reprocess capture request.</p>\n     * <p>The key describes the maximal interference that one reprocess (input) request\n     * can introduce to the camera simultaneous streaming of regular (output) capture\n     * requests, including repeating requests.</p>\n     * <p>When a reprocessing capture request is submitted while a camera output repeating request\n     * (e.g. preview) is being served by the camera device, it may preempt the camera capture\n     * pipeline for at least one frame duration so that the camera device is unable to process\n     * the following capture request in time for the next sensor start of exposure boundary.\n     * When this happens, the application may observe a capture time gap (longer than one frame\n     * duration) between adjacent capture output frames, which usually exhibits as preview\n     * glitch if the repeating request output targets include a preview surface. This key gives\n     * the worst-case number of frame stall introduced by one reprocess request with any kind of\n     * formats/sizes combination.</p>\n     * <p>If this key reports 0, it means a reprocess request doesn't introduce any glitch to the\n     * ongoing camera repeating request outputs, as if this reprocess request is never issued.</p>\n     * <p>This key is supported if the camera device supports PRIVATE or YUV reprocessing (\n     * i.e. {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities} contains PRIVATE_REPROCESSING or\n     * YUV_REPROCESSING).</p>\n     * <p><b>Units</b>: Number of frames.</p>\n     * <p><b>Range of valid values:</b><br>\n     * &lt;= 4</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfiguration[]>",
    "comment" : "\n     * <p>The available depth dataspace stream\n     * configurations that this camera device supports\n     * (i.e. format, width, height, output/input stream).</p>\n     * <p>These are output stream configurations for use with\n     * dataSpace HAL_DATASPACE_DEPTH. The configurations are\n     * listed as <code>(format, width, height, input?)</code> tuples.</p>\n     * <p>Only devices that support depth output for at least\n     * the HAL_PIXEL_FORMAT_Y16 dense depth map may include\n     * this entry.</p>\n     * <p>A device that also supports the HAL_PIXEL_FORMAT_BLOB\n     * sparse depth point cloud must report a single entry for\n     * the format in this list as <code>(HAL_PIXEL_FORMAT_BLOB,\n     * android.depth.maxDepthSamples, 1, OUTPUT)</code> in addition to\n     * the entries for HAL_PIXEL_FORMAT_Y16.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "DEPTH_AVAILABLE_DEPTH_MIN_FRAME_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the minimum frame duration for each\n     * format/size combination for depth output formats.</p>\n     * <p>This should correspond to the frame duration when only that\n     * stream is active, with all processing (typically in android.*.mode)\n     * set to either OFF or FAST.</p>\n     * <p>When multiple streams are used in a request, the minimum frame\n     * duration will be max(individual stream min durations).</p>\n     * <p>The minimum frame duration of a stream (of a particular format, size)\n     * is the same regardless of whether the stream is input or output.</p>\n     * <p>See {@link CaptureRequest#SENSOR_FRAME_DURATION android.sensor.frameDuration} and\n     * android.scaler.availableStallDurations for more details about\n     * calculating the max frame rate.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#SENSOR_FRAME_DURATION\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "DEPTH_AVAILABLE_DEPTH_STALL_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the maximum stall duration for each\n     * output format/size combination for depth streams.</p>\n     * <p>A stall duration is how much extra time would get added\n     * to the normal minimum frame duration for a repeating request\n     * that has streams with non-zero stall.</p>\n     * <p>This functions similarly to\n     * android.scaler.availableStallDurations for depth\n     * streams.</p>\n     * <p>All depth output stream formats may have a nonzero stall\n     * duration.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "DEPTH_DEPTH_IS_EXCLUSIVE",
    "type" : "Key<Boolean>",
    "comment" : "\n     * <p>Indicates whether a capture request may target both a\n     * DEPTH16 / DEPTH_POINT_CLOUD output, and normal color outputs (such as\n     * YUV_420_888, JPEG, or RAW) simultaneously.</p>\n     * <p>If TRUE, including both depth and color outputs in a single\n     * capture request is not supported. An application must interleave color\n     * and depth requests.  If FALSE, a single request can target both types\n     * of output.</p>\n     * <p>Typically, this restriction exists on camera devices that\n     * need to emit a specific pattern or wavelength of light to\n     * measure depth values, which causes the color image to be\n     * corrupted during depth measurement.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "DEPTH_AVAILABLE_RECOMMENDED_DEPTH_STREAM_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.RecommendedStreamConfiguration[]>",
    "comment" : "\n     * <p>Recommended depth stream configurations for common client use cases.</p>\n     * <p>Optional subset of the android.depth.availableDepthStreamConfigurations that\n     * contains similar tuples listed as\n     * (i.e. width, height, format, output/input stream, usecase bit field).\n     * Camera devices will be able to suggest particular depth stream configurations which are\n     * power and performance efficient for specific use cases. For more information about\n     * retrieving the suggestions see\n     * {@link android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap }.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#getRecommendedStreamConfigurationMap" ]
  }, {
    "name" : "DEPTH_AVAILABLE_DYNAMIC_DEPTH_STREAM_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfiguration[]>",
    "comment" : "\n     * <p>The available dynamic depth dataspace stream\n     * configurations that this camera device supports\n     * (i.e. format, width, height, output/input stream).</p>\n     * <p>These are output stream configurations for use with\n     * dataSpace DYNAMIC_DEPTH. The configurations are\n     * listed as <code>(format, width, height, input?)</code> tuples.</p>\n     * <p>Only devices that support depth output for at least\n     * the HAL_PIXEL_FORMAT_Y16 dense depth map along with\n     * HAL_PIXEL_FORMAT_BLOB with the same size or size with\n     * the same aspect ratio can have dynamic depth dataspace\n     * stream configuration. {@link CameraCharacteristics#DEPTH_DEPTH_IS_EXCLUSIVE android.depth.depthIsExclusive} also\n     * needs to be set to FALSE.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CameraCharacteristics#DEPTH_DEPTH_IS_EXCLUSIVE\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#DEPTH_DEPTH_IS_EXCLUSIVE" ]
  }, {
    "name" : "DEPTH_AVAILABLE_DYNAMIC_DEPTH_MIN_FRAME_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the minimum frame duration for each\n     * format/size combination for dynamic depth output streams.</p>\n     * <p>This should correspond to the frame duration when only that\n     * stream is active, with all processing (typically in android.*.mode)\n     * set to either OFF or FAST.</p>\n     * <p>When multiple streams are used in a request, the minimum frame\n     * duration will be max(individual stream min durations).</p>\n     * <p>The minimum frame duration of a stream (of a particular format, size)\n     * is the same regardless of whether the stream is input or output.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEPTH_AVAILABLE_DYNAMIC_DEPTH_STALL_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the maximum stall duration for each\n     * output format/size combination for dynamic depth streams.</p>\n     * <p>A stall duration is how much extra time would get added\n     * to the normal minimum frame duration for a repeating request\n     * that has streams with non-zero stall.</p>\n     * <p>All dynamic depth output streams may have a nonzero stall\n     * duration.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOGICAL_MULTI_CAMERA_PHYSICAL_IDS",
    "type" : "Key<byte[]>",
    "comment" : "\n     * <p>String containing the ids of the underlying physical cameras.</p>\n     * <p>For a logical camera, this is concatenation of all underlying physical camera IDs.\n     * The null terminator for physical camera ID must be preserved so that the whole string\n     * can be tokenized using '\\0' to generate list of physical camera IDs.</p>\n     * <p>For example, if the physical camera IDs of the logical camera are \"2\" and \"3\", the\n     * value of this tag will be ['2', '\\0', '3', '\\0'].</p>\n     * <p>The number of physical camera IDs must be no less than 2.</p>\n     * <p><b>Units</b>: UTF-8 null-terminated string</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE",
    "type" : "Key<Integer>",
    "comment" : "\n     * <p>The accuracy of frame timestamp synchronization between physical cameras</p>\n     * <p>The accuracy of the frame timestamp synchronization determines the physical cameras'\n     * ability to start exposure at the same time. If the sensorSyncType is CALIBRATED, the\n     * physical camera sensors usually run in leader/follower mode where one sensor generates a\n     * timing signal for the other, so that their shutter time is synchronized. For APPROXIMATE\n     * sensorSyncType, the camera sensors usually run in leader/leader mode, where both sensors\n     * use their own timing generator, and there could be offset between their start of exposure.</p>\n     * <p>In both cases, all images generated for a particular capture request still carry the same\n     * timestamps, so that they can be used to look up the matching frame number and\n     * onCaptureStarted callback.</p>\n     * <p>This tag is only applicable if the logical camera device supports concurrent physical\n     * streams from different physical cameras.</p>\n     * <p><b>Possible values:</b>\n     * <ul>\n     *   <li>{@link #LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE APPROXIMATE}</li>\n     *   <li>{@link #LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED CALIBRATED}</li>\n     * </ul></p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see #LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE\n     * @see #LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE", "#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "DISTORTION_CORRECTION_AVAILABLE_MODES",
    "type" : "Key<int[]>",
    "comment" : "\n     * <p>List of distortion correction modes for {@link CaptureRequest#DISTORTION_CORRECTION_MODE android.distortionCorrection.mode} that are\n     * supported by this camera device.</p>\n     * <p>No device is required to support this API; such devices will always list only 'OFF'.\n     * All devices that support this API will list both FAST and HIGH_QUALITY.</p>\n     * <p><b>Range of valid values:</b><br>\n     * Any value listed in {@link CaptureRequest#DISTORTION_CORRECTION_MODE android.distortionCorrection.mode}</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     *\n     * @see CaptureRequest#DISTORTION_CORRECTION_MODE\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#DISTORTION_CORRECTION_MODE" ]
  }, {
    "name" : "HEIC_AVAILABLE_HEIC_STREAM_CONFIGURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfiguration[]>",
    "comment" : "\n     * <p>The available HEIC (ISO/IEC 23008-12) stream\n     * configurations that this camera device supports\n     * (i.e. format, width, height, output/input stream).</p>\n     * <p>The configurations are listed as <code>(format, width, height, input?)</code> tuples.</p>\n     * <p>If the camera device supports HEIC image format, it will support identical set of stream\n     * combinations involving HEIC image format, compared to the combinations involving JPEG\n     * image format as required by the device's hardware level and capabilities.</p>\n     * <p>All the static, control, and dynamic metadata tags related to JPEG apply to HEIC formats.\n     * Configuring JPEG and HEIC streams at the same time is not supported.</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "HEIC_AVAILABLE_HEIC_MIN_FRAME_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the minimum frame duration for each\n     * format/size combination for HEIC output formats.</p>\n     * <p>This should correspond to the frame duration when only that\n     * stream is active, with all processing (typically in android.*.mode)\n     * set to either OFF or FAST.</p>\n     * <p>When multiple streams are used in a request, the minimum frame\n     * duration will be max(individual stream min durations).</p>\n     * <p>See {@link CaptureRequest#SENSOR_FRAME_DURATION android.sensor.frameDuration} and\n     * android.scaler.availableStallDurations for more details about\n     * calculating the max frame rate.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @see CaptureRequest#SENSOR_FRAME_DURATION\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CaptureRequest#SENSOR_FRAME_DURATION", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  }, {
    "name" : "HEIC_AVAILABLE_HEIC_STALL_DURATIONS",
    "type" : "Key<android.hardware.camera2.params.StreamConfigurationDuration[]>",
    "comment" : "\n     * <p>This lists the maximum stall duration for each\n     * output format/size combination for HEIC streams.</p>\n     * <p>A stall duration is how much extra time would get added\n     * to the normal minimum frame duration for a repeating request\n     * that has streams with non-zero stall.</p>\n     * <p>This functions similarly to\n     * android.scaler.availableStallDurations for HEIC\n     * streams.</p>\n     * <p>All HEIC output stream formats may have a nonzero stall\n     * duration.</p>\n     * <p><b>Units</b>: (format, width, height, ns) x n</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     * <p><b>Limited capability</b> -\n     * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the\n     * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>\n     *\n     * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED" ]
  } ],
  "methods" : [ {
    "name" : "public CameraMetadataNative getNativeCopy()",
    "returnType" : "CameraMetadataNative",
    "comment" : "\n     * Returns a copy of the underlying {@link CameraMetadataNative}.\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.impl.CameraMetadataNative" ]
  }, {
    "name" : "public T get(Key<T> key)",
    "returnType" : "T",
    "comment" : "\n     * Get a camera characteristics field value.\n     *\n     * <p>The field definitions can be\n     * found in {@link CameraCharacteristics}.</p>\n     *\n     * <p>Querying the value for the same key more than once will return a value\n     * which is equal to the previous queried value.</p>\n     *\n     * @throws IllegalArgumentException if the key was not valid\n     *\n     * @param key The characteristics field to read.\n     * @return The value of that key, or {@code null} if the field is not set.\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics" ]
  }, {
    "name" : "protected T getProtected(Key<?> key)",
    "returnType" : "T",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Class<Key<?>> getKeyClass()",
    "returnType" : "Class<Key<?>>",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Key<?>> getKeys()",
    "returnType" : "List<Key<?>>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Key<?>> getKeysNeedingPermission()",
    "returnType" : "List<Key<?>>",
    "comment" : "\n     * <p>Returns a subset of the list returned by {@link #getKeys} with all keys that\n     * require camera clients to obtain the {@link android.Manifest.permission#CAMERA} permission.\n     * </p>\n     *\n     * <p>If an application calls {@link CameraManager#getCameraCharacteristics} without holding the\n     * {@link android.Manifest.permission#CAMERA} permission,\n     * all keys in this list will not be available, and calling {@link #get} will\n     * return null for those keys. If the application obtains the\n     * {@link android.Manifest.permission#CAMERA} permission, then the\n     * CameraCharacteristics from a call to a subsequent\n     * {@link CameraManager#getCameraCharacteristics} will have the keys available.</p>\n     *\n     * <p>The list returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Each key is only listed once in the list. The order of the keys is undefined.</p>\n     *\n     * @return List of camera characteristic keys that require the\n     *         {@link android.Manifest.permission#CAMERA} permission. The list can be empty in case\n     *         there are no currently present keys that need additional permission.\n     ",
    "links" : [ "#get", "android.hardware.camera2.CameraManager#getCameraCharacteristics", "android.Manifest.permission#CAMERA", "#getKeys" ]
  }, {
    "name" : "public RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(@RecommendedStreamConfigurationMap.RecommendedUsecase int usecase)",
    "returnType" : "RecommendedStreamConfigurationMap",
    "comment" : "\n     * <p>Retrieve camera device recommended stream configuration map\n     * {@link RecommendedStreamConfigurationMap} for a given use case.</p>\n     *\n     * <p>The stream configurations advertised here are efficient in terms of power and performance\n     * for common use cases like preview, video, snapshot, etc. The recommended maps are usually\n     * only small subsets of the exhaustive list provided in\n     * {@link #SCALER_STREAM_CONFIGURATION_MAP} and suggested for a particular use case by the\n     * camera device implementation. For further information about the expected configurations in\n     * various scenarios please refer to:\n     * <ul>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_PREVIEW}</li>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_RECORD}</li>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_VIDEO_SNAPSHOT}</li>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_SNAPSHOT}</li>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_RAW}</li>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_ZSL}</li>\n     * <li>{@link RecommendedStreamConfigurationMap#USECASE_LOW_LATENCY_SNAPSHOT}</li>\n     * </ul>\n     * </p>\n     *\n     * <p>For example on how this can be used by camera clients to find out the maximum recommended\n     * preview and snapshot resolution, consider the following pseudo-code:\n     * </p>\n     * <pre><code>\n     * public static Size getMaxSize(Size... sizes) {\n     *     if (sizes == null || sizes.length == 0) {\n     *         throw new IllegalArgumentException(\"sizes was empty\");\n     *     }\n     *\n     *     Size sz = sizes[0];\n     *     for (Size size : sizes) {\n     *         if (size.getWidth() * size.getHeight() &gt; sz.getWidth() * sz.getHeight()) {\n     *             sz = size;\n     *         }\n     *     }\n     *\n     *     return sz;\n     * }\n     *\n     * CameraCharacteristics characteristics =\n     *         cameraManager.getCameraCharacteristics(cameraId);\n     * RecommendedStreamConfigurationMap previewConfig =\n     *         characteristics.getRecommendedStreamConfigurationMap(\n     *                  RecommendedStreamConfigurationMap.USECASE_PREVIEW);\n     * RecommendedStreamConfigurationMap snapshotConfig =\n     *         characteristics.getRecommendedStreamConfigurationMap(\n     *                  RecommendedStreamConfigurationMap.USECASE_SNAPSHOT);\n     *\n     * if ((previewConfig != null) &amp;&amp; (snapshotConfig != null)) {\n     *\n     *      Set<Size> snapshotSizeSet = snapshotConfig.getOutputSizes(\n     *              ImageFormat.JPEG);\n     *      Size[] snapshotSizes = new Size[snapshotSizeSet.size()];\n     *      snapshotSizes = snapshotSizeSet.toArray(snapshotSizes);\n     *      Size suggestedMaxJpegSize = getMaxSize(snapshotSizes);\n     *\n     *      Set<Size> previewSizeSet = snapshotConfig.getOutputSizes(\n     *              ImageFormat.PRIVATE);\n     *      Size[] previewSizes = new Size[previewSizeSet.size()];\n     *      previewSizes = previewSizeSet.toArray(previewSizes);\n     *      Size suggestedMaxPreviewSize = getMaxSize(previewSizes);\n     * }\n     *\n     * </code></pre>\n     *\n     * <p>Similar logic can be used for other use cases as well.</p>\n     *\n     * <p>Support for recommended stream configurations is optional. In case there a no\n     * suggested configurations for the particular use case, please refer to\n     * {@link #SCALER_STREAM_CONFIGURATION_MAP} for the exhaustive available list.</p>\n     *\n     * @param usecase Use case id.\n     *\n     * @throws IllegalArgumentException In case the use case argument is invalid.\n     * @return Valid {@link RecommendedStreamConfigurationMap} or null in case the camera device\n     *         doesn't have any recommendation for this use case or the recommended configurations\n     *         are invalid.\n     ",
    "links" : [ "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_RAW", "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_LOW_LATENCY_SNAPSHOT", "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_ZSL", "#SCALER_STREAM_CONFIGURATION_MAP", "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_SNAPSHOT", "android.hardware.camera2.params.RecommendedStreamConfigurationMap", "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_PREVIEW", "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_VIDEO_SNAPSHOT", "android.hardware.camera2.params.RecommendedStreamConfigurationMap#USECASE_RECORD" ]
  }, {
    "name" : "public List<CaptureRequest.Key<?>> getAvailableSessionKeys()",
    "returnType" : "List<CaptureRequest.Key<?>>",
    "comment" : "\n     * <p>Returns a subset of {@link #getAvailableCaptureRequestKeys} keys that the\n     * camera device can pass as part of the capture session initialization.</p>\n     *\n     * <p>This list includes keys that are difficult to apply per-frame and\n     * can result in unexpected delays when modified during the capture session\n     * lifetime. Typical examples include parameters that require a\n     * time-consuming hardware re-configuration or internal camera pipeline\n     * change. For performance reasons we suggest clients to pass their initial\n     * values as part of {@link SessionConfiguration#setSessionParameters}. Once\n     * the camera capture session is enabled it is also recommended to avoid\n     * changing them from their initial values set in\n     * {@link SessionConfiguration#setSessionParameters }.\n     * Control over session parameters can still be exerted in capture requests\n     * but clients should be aware and expect delays during their application.\n     * An example usage scenario could look like this:</p>\n     * <ul>\n     * <li>The camera client starts by querying the session parameter key list via\n     *   {@link android.hardware.camera2.CameraCharacteristics#getAvailableSessionKeys }.</li>\n     * <li>Before triggering the capture session create sequence, a capture request\n     *   must be built via {@link CameraDevice#createCaptureRequest } using an\n     *   appropriate template matching the particular use case.</li>\n     * <li>The client should go over the list of session parameters and check\n     *   whether some of the keys listed matches with the parameters that\n     *   they intend to modify as part of the first capture request.</li>\n     * <li>If there is no such match, the capture request can be  passed\n     *   unmodified to {@link SessionConfiguration#setSessionParameters }.</li>\n     * <li>If matches do exist, the client should update the respective values\n     *   and pass the request to {@link SessionConfiguration#setSessionParameters }.</li>\n     * <li>After the capture session initialization completes the session parameter\n     *   key list can continue to serve as reference when posting or updating\n     *   further requests. As mentioned above further changes to session\n     *   parameters should ideally be avoided, if updates are necessary\n     *   however clients could expect a delay/glitch during the\n     *   parameter switch.</li>\n     * </ul>\n     *\n     * <p>The list returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Each key is only listed once in the list. The order of the keys is undefined.</p>\n     *\n     * @return List of keys that can be passed during capture session initialization. In case the\n     * camera device doesn't support such keys the list can be null.\n     ",
    "links" : [ "android.hardware.camera2.CameraDevice#createCaptureRequest", "android.hardware.camera2.params.SessionConfiguration#setSessionParameters", "#getAvailableCaptureRequestKeys", "android.hardware.camera2.CameraCharacteristics#getAvailableSessionKeys" ]
  }, {
    "name" : "public List<CaptureRequest.Key<?>> getAvailablePhysicalCameraRequestKeys()",
    "returnType" : "List<CaptureRequest.Key<?>>",
    "comment" : "\n     * <p>Returns a subset of {@link #getAvailableCaptureRequestKeys} keys that can\n     * be overridden for physical devices backing a logical multi-camera.</p>\n     *\n     * <p>This is a subset of android.request.availableRequestKeys which contains a list\n     * of keys that can be overridden using {@link CaptureRequest.Builder#setPhysicalCameraKey }.\n     * The respective value of such request key can be obtained by calling\n     * {@link CaptureRequest.Builder#getPhysicalCameraKey }. Capture requests that contain\n     * individual physical device requests must be built via\n     * {@link android.hardware.camera2.CameraDevice#createCaptureRequest(int, Set)}.</p>\n     *\n     * <p>The list returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Each key is only listed once in the list. The order of the keys is undefined.</p>\n     *\n     * @return List of keys that can be overridden in individual physical device requests.\n     * In case the camera device doesn't support such keys the list can be null.\n     ",
    "links" : [ "#getAvailableCaptureRequestKeys", "CaptureRequest.Builder#getPhysicalCameraKey", "CaptureRequest.Builder#setPhysicalCameraKey", "android.hardware.camera2.CameraDevice#createCaptureRequest(int" ]
  }, {
    "name" : "public List<CaptureRequest.Key<?>> getAvailableCaptureRequestKeys()",
    "returnType" : "List<CaptureRequest.Key<?>>",
    "comment" : "\n     * Returns the list of keys supported by this {@link CameraDevice} for querying\n     * with a {@link CaptureRequest}.\n     *\n     * <p>The list returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Each key is only listed once in the list. The order of the keys is undefined.</p>\n     *\n     * <p>Note that there is no {@code getAvailableCameraCharacteristicsKeys()} -- use\n     * {@link #getKeys()} instead.</p>\n     *\n     * @return List of keys supported by this CameraDevice for CaptureRequests.\n     ",
    "links" : [ "#getKeys()", "android.hardware.camera2.CameraDevice", "android.hardware.camera2.CaptureRequest" ]
  }, {
    "name" : "public List<CaptureResult.Key<?>> getAvailableCaptureResultKeys()",
    "returnType" : "List<CaptureResult.Key<?>>",
    "comment" : "\n     * Returns the list of keys supported by this {@link CameraDevice} for querying\n     * with a {@link CaptureResult}.\n     *\n     * <p>The list returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Each key is only listed once in the list. The order of the keys is undefined.</p>\n     *\n     * <p>Note that there is no {@code getAvailableCameraCharacteristicsKeys()} -- use\n     * {@link #getKeys()} instead.</p>\n     *\n     * @return List of keys supported by this CameraDevice for CaptureResults.\n     ",
    "links" : [ "android.hardware.camera2.CaptureResult", "#getKeys()", "android.hardware.camera2.CameraDevice" ]
  }, {
    "name" : "private List<TKey> getAvailableKeyList(Class<?> metadataClass, Class<TKey> keyClass, int[] filterTags, boolean includeSynthetic)",
    "returnType" : "List<TKey>",
    "comment" : "\n     * Returns the list of keys supported by this {@link CameraDevice} by metadataClass.\n     *\n     * <p>The list returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Each key is only listed once in the list. The order of the keys is undefined.</p>\n     *\n     * @param metadataClass The subclass of CameraMetadata that you want to get the keys for.\n     * @param keyClass The class of the metadata key, e.g. CaptureRequest.Key.class\n     * @param filterTags An array of tags to be used for filtering\n     * @param includeSynthetic Include public syntethic tag by default.\n     *\n     * @return List of keys supported by this CameraDevice for metadataClass.\n     *\n     * @throws IllegalArgumentException if metadataClass is not a subclass of CameraMetadata\n     ",
    "links" : [ "android.hardware.camera2.CameraDevice" ]
  }, {
    "name" : "public Set<String> getPhysicalCameraIds()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns the set of physical camera ids that this logical {@link CameraDevice} is\n     * made up of.\n     *\n     * <p>A camera device is a logical camera if it has\n     * REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability. If the camera device\n     * doesn't have the capability, the return value will be an empty set. </p>\n     *\n     * <p>Prior to API level 29, all returned IDs are guaranteed to be returned by {@link\n     * CameraManager#getCameraIdList}, and can be opened directly by\n     * {@link CameraManager#openCamera}. Starting from API level 29, for each of the returned ID,\n     * if it's also returned by {@link CameraManager#getCameraIdList}, it can be used as a\n     * standalone camera by {@link CameraManager#openCamera}. Otherwise, the camera ID can only be\n     * used as part of the current logical camera.</p>\n     *\n     * <p>The set returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * @return Set of physical camera ids for this logical camera device.\n     ",
    "links" : [ "android.hardware.camera2.CameraManager#openCamera", "android.hardware.camera2.CameraManager#getCameraIdList", "android.hardware.camera2.CameraDevice" ]
  } ],
  "variableNames" : [ "mProperties", "mKeys", "mKeysNeedingPermission", "mAvailableRequestKeys", "mAvailableSessionKeys", "mAvailablePhysicalRequestKeys", "mAvailableResultKeys", "mRecommendedConfigurations", "COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES", "CONTROL_AE_AVAILABLE_ANTIBANDING_MODES", "CONTROL_AE_AVAILABLE_MODES", "CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES", "CONTROL_AE_COMPENSATION_RANGE", "CONTROL_AE_COMPENSATION_STEP", "CONTROL_AF_AVAILABLE_MODES", "CONTROL_AVAILABLE_EFFECTS", "CONTROL_AVAILABLE_SCENE_MODES", "CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES", "CONTROL_AWB_AVAILABLE_MODES", "CONTROL_MAX_REGIONS", "CONTROL_MAX_REGIONS_AE", "CONTROL_MAX_REGIONS_AWB", "CONTROL_MAX_REGIONS_AF", "CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS", "CONTROL_AE_LOCK_AVAILABLE", "CONTROL_AWB_LOCK_AVAILABLE", "CONTROL_AVAILABLE_MODES", "CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE", "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_MAX_SIZES", "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_ZOOM_RATIO_RANGES", "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES", "CONTROL_ZOOM_RATIO_RANGE", "EDGE_AVAILABLE_EDGE_MODES", "FLASH_INFO_AVAILABLE", "HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES", "JPEG_AVAILABLE_THUMBNAIL_SIZES", "LENS_INFO_AVAILABLE_APERTURES", "LENS_INFO_AVAILABLE_FILTER_DENSITIES", "LENS_INFO_AVAILABLE_FOCAL_LENGTHS", "LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION", "LENS_INFO_HYPERFOCAL_DISTANCE", "LENS_INFO_MINIMUM_FOCUS_DISTANCE", "LENS_INFO_SHADING_MAP_SIZE", "LENS_INFO_FOCUS_DISTANCE_CALIBRATION", "LENS_FACING", "LENS_POSE_ROTATION", "LENS_POSE_TRANSLATION", "LENS_INTRINSIC_CALIBRATION", "LENS_RADIAL_DISTORTION", "LENS_POSE_REFERENCE", "LENS_DISTORTION", "NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES", "QUIRKS_USE_PARTIAL_RESULT", "REQUEST_MAX_NUM_OUTPUT_STREAMS", "REQUEST_MAX_NUM_OUTPUT_RAW", "REQUEST_MAX_NUM_OUTPUT_PROC", "REQUEST_MAX_NUM_OUTPUT_PROC_STALLING", "REQUEST_MAX_NUM_INPUT_STREAMS", "REQUEST_PIPELINE_MAX_DEPTH", "REQUEST_PARTIAL_RESULT_COUNT", "REQUEST_AVAILABLE_CAPABILITIES", "REQUEST_AVAILABLE_REQUEST_KEYS", "REQUEST_AVAILABLE_RESULT_KEYS", "REQUEST_AVAILABLE_CHARACTERISTICS_KEYS", "REQUEST_AVAILABLE_SESSION_KEYS", "REQUEST_AVAILABLE_PHYSICAL_CAMERA_REQUEST_KEYS", "REQUEST_CHARACTERISTIC_KEYS_NEEDING_PERMISSION", "SCALER_AVAILABLE_FORMATS", "SCALER_AVAILABLE_JPEG_MIN_DURATIONS", "SCALER_AVAILABLE_JPEG_SIZES", "SCALER_AVAILABLE_MAX_DIGITAL_ZOOM", "SCALER_AVAILABLE_PROCESSED_MIN_DURATIONS", "SCALER_AVAILABLE_PROCESSED_SIZES", "SCALER_AVAILABLE_INPUT_OUTPUT_FORMATS_MAP", "SCALER_AVAILABLE_STREAM_CONFIGURATIONS", "SCALER_AVAILABLE_MIN_FRAME_DURATIONS", "SCALER_AVAILABLE_STALL_DURATIONS", "SCALER_STREAM_CONFIGURATION_MAP", "SCALER_CROPPING_TYPE", "SCALER_AVAILABLE_RECOMMENDED_STREAM_CONFIGURATIONS", "SCALER_AVAILABLE_RECOMMENDED_INPUT_OUTPUT_FORMATS_MAP", "SCALER_MANDATORY_STREAM_COMBINATIONS", "SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS", "SCALER_AVAILABLE_ROTATE_AND_CROP_MODES", "SENSOR_INFO_ACTIVE_ARRAY_SIZE", "SENSOR_INFO_SENSITIVITY_RANGE", "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT", "SENSOR_INFO_EXPOSURE_TIME_RANGE", "SENSOR_INFO_MAX_FRAME_DURATION", "SENSOR_INFO_PHYSICAL_SIZE", "SENSOR_INFO_PIXEL_ARRAY_SIZE", "SENSOR_INFO_WHITE_LEVEL", "SENSOR_INFO_TIMESTAMP_SOURCE", "SENSOR_INFO_LENS_SHADING_APPLIED", "SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE", "SENSOR_REFERENCE_ILLUMINANT1", "SENSOR_REFERENCE_ILLUMINANT2", "SENSOR_CALIBRATION_TRANSFORM1", "SENSOR_CALIBRATION_TRANSFORM2", "SENSOR_COLOR_TRANSFORM1", "SENSOR_COLOR_TRANSFORM2", "SENSOR_FORWARD_MATRIX1", "SENSOR_FORWARD_MATRIX2", "SENSOR_BLACK_LEVEL_PATTERN", "SENSOR_MAX_ANALOG_SENSITIVITY", "SENSOR_ORIENTATION", "SENSOR_AVAILABLE_TEST_PATTERN_MODES", "SENSOR_OPTICAL_BLACK_REGIONS", "SHADING_AVAILABLE_MODES", "STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES", "STATISTICS_INFO_MAX_FACE_COUNT", "STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES", "STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES", "STATISTICS_INFO_AVAILABLE_OIS_DATA_MODES", "TONEMAP_MAX_CURVE_POINTS", "TONEMAP_AVAILABLE_TONE_MAP_MODES", "LED_AVAILABLE_LEDS", "INFO_SUPPORTED_HARDWARE_LEVEL", "INFO_VERSION", "SYNC_MAX_LATENCY", "REPROCESS_MAX_CAPTURE_STALL", "DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS", "DEPTH_AVAILABLE_DEPTH_MIN_FRAME_DURATIONS", "DEPTH_AVAILABLE_DEPTH_STALL_DURATIONS", "DEPTH_DEPTH_IS_EXCLUSIVE", "DEPTH_AVAILABLE_RECOMMENDED_DEPTH_STREAM_CONFIGURATIONS", "DEPTH_AVAILABLE_DYNAMIC_DEPTH_STREAM_CONFIGURATIONS", "DEPTH_AVAILABLE_DYNAMIC_DEPTH_MIN_FRAME_DURATIONS", "DEPTH_AVAILABLE_DYNAMIC_DEPTH_STALL_DURATIONS", "LOGICAL_MULTI_CAMERA_PHYSICAL_IDS", "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE", "DISTORTION_CORRECTION_AVAILABLE_MODES", "HEIC_AVAILABLE_HEIC_STREAM_CONFIGURATIONS", "HEIC_AVAILABLE_HEIC_MIN_FRAME_DURATIONS", "HEIC_AVAILABLE_HEIC_STALL_DURATIONS" ],
  "methodNames" : [ "public CameraMetadataNative getNativeCopy()", "public T get(Key<T> key)", "protected T getProtected(Key<?> key)", "protected Class<Key<?>> getKeyClass()", "public List<Key<?>> getKeys()", "public List<Key<?>> getKeysNeedingPermission()", "public RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(@RecommendedStreamConfigurationMap.RecommendedUsecase int usecase)", "public List<CaptureRequest.Key<?>> getAvailableSessionKeys()", "public List<CaptureRequest.Key<?>> getAvailablePhysicalCameraRequestKeys()", "public List<CaptureRequest.Key<?>> getAvailableCaptureRequestKeys()", "public List<CaptureResult.Key<?>> getAvailableCaptureResultKeys()", "private List<TKey> getAvailableKeyList(Class<?> metadataClass, Class<TKey> keyClass, int[] filterTags, boolean includeSynthetic)", "public Set<String> getPhysicalCameraIds()" ]
}