{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityNodeInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "TouchDelegateInfo",
  "comment" : "\n     * Class with information of touch delegated views and regions from {@link TouchDelegate} for\n     * the {@link AccessibilityNodeInfo}.\n     *\n     * @see AccessibilityNodeInfo#setTouchDelegateInfo(TouchDelegateInfo)\n     ",
  "variables" : [ {
    "name" : "mTargetMap",
    "type" : "ArrayMap<Region, Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : " Two ids are initialized lazily in AccessibilityNodeInfo#getTouchDelegateInfo",
    "links" : [ ]
  }, {
    "name" : "mWindowId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<TouchDelegateInfo>",
    "comment" : "\n         * @see android.os.Parcelable.Creator\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setConnectionId(int connectionId)",
    "returnType" : "void",
    "comment" : "\n         * Set the connection ID.\n         *\n         * @param connectionId The connection id.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setWindowId(int windowId)",
    "returnType" : "void",
    "comment" : "\n         * Set the window ID.\n         *\n         * @param windowId The window id.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRegionCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns the number of touch delegate target region.\n         *\n         * @return Number of touch delegate target region.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Region getRegionAt(int index)",
    "returnType" : "Region",
    "comment" : "\n         * Return the {@link Region} at the given index in the {@link TouchDelegateInfo}.\n         *\n         * @param index The desired index, must be between 0 and {@link #getRegionCount()}-1.\n         * @return Returns the {@link Region} stored at the given index.\n         ",
    "links" : [ "Region", "TouchDelegateInfo", "#getRegionCount", "Region" ]
  }, {
    "name" : "public AccessibilityNodeInfo getTargetForRegion(@NonNull Region region)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n         * Return the target {@link AccessibilityNodeInfo} for the given {@link Region}.\n         * <p>\n         *   <strong>Note:</strong> This api can only be called from {@link AccessibilityService}.\n         * </p>\n         * <p>\n         *   <strong>Note:</strong> It is a client responsibility to recycle the\n         *     received info by calling {@link AccessibilityNodeInfo#recycle()}\n         *     to avoid creating of multiple instances.\n         * </p>\n         *\n         * @param region The region retrieved from {@link #getRegionAt(int)}.\n         * @return The target node associates with the given region.\n         ",
    "links" : [ "AccessibilityNodeInfo", "Region", "AccessibilityService", "AccessibilityNodeInfo#recycle", "#getRegionAt" ]
  }, {
    "name" : "public long getAccessibilityIdForRegion(@NonNull Region region)",
    "returnType" : "long",
    "comment" : "\n         * Return the accessibility id of target node.\n         *\n         * @param region The region retrieved from {@link #getRegionAt(int)}.\n         * @return The accessibility id of target node.\n         *\n         * @hide\n         ",
    "links" : [ "#getRegionAt" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n         * {@inheritDoc}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTargetMap", "mConnectionId", "mWindowId", "CREATOR" ],
  "methodNames" : [ "private void setConnectionId(int connectionId)", "private void setWindowId(int windowId)", "public int getRegionCount()", "public Region getRegionAt(int index)", "public AccessibilityNodeInfo getTargetForRegion(@NonNull Region region)", "public long getAccessibilityIdForRegion(@NonNull Region region)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}