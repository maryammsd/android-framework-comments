{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/JapaneseEra.java",
  "packageName" : "java.time.chrono",
  "className" : "JapaneseEra",
  "comment" : "\n * An era in the Japanese Imperial calendar system.\n * <p>\n * The Japanese government defines the official name and start date of\n * each era. Eras are consecutive and their date ranges do not overlap,\n * so the end date of one era is always the day before the start date\n * of the next era.\n * <p>\n * The Java SE Platform supports all eras defined by the Japanese government,\n * beginning with the Meiji era. Each era is identified in the Platform by an\n * integer value and a name. The {@link #of(int)} and {@link #valueOf(String)}\n * methods may be used to obtain a singleton instance of {@code JapaneseEra}\n * for each era. The {@link #values()} method returns the singleton instances\n * of all supported eras.\n * <p>\n * For convenience, this class declares a number of public static final fields\n * that refer to singleton instances returned by the {@link #values()} method.\n *\n * @apiNote\n * The fields declared in this class may evolve over time, in line with the\n * results of the {@link #values()} method. However, there is not necessarily\n * a 1:1 correspondence between the fields and the singleton instances.\n *\n * @apiNote\n * The Japanese government may announce a new era and define its start\n * date but not its official name. In this scenario, the singleton instance\n * that represents the new era may return a name that is not stable until\n * the official name is defined. Developers should exercise caution when\n * relying on the name returned by any singleton instance that does not\n * correspond to a public static final field.\n *\n * @implSpec\n * This class is immutable and thread-safe.\n *\n * @since 1.8\n ",
  "links" : [ "#of(int)", "#values()", "#valueOf(String)" ],
  "variables" : [ {
    "name" : "ERA_OFFSET",
    "type" : "int",
    "comment" : " i.e., getValue() + ERA_OFFSET == 0-based index",
    "links" : [ ]
  }, {
    "name" : "ERA_CONFIG",
    "type" : "sun.util.calendar.Era[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEIJI",
    "type" : "JapaneseEra",
    "comment" : "\n     * The singleton instance for the 'Meiji' era (1868-01-01 - 1912-07-29)\n     * which has the value -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAISHO",
    "type" : "JapaneseEra",
    "comment" : "\n     * The singleton instance for the 'Taisho' era (1912-07-30 - 1926-12-24)\n     * which has the value 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOWA",
    "type" : "JapaneseEra",
    "comment" : "\n     * The singleton instance for the 'Showa' era (1926-12-25 - 1989-01-07)\n     * which has the value 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "HEISEI",
    "type" : "JapaneseEra",
    "comment" : "\n     * The singleton instance for the 'Heisei' era (1989-01-08 - 2019-04-30)\n     * which has the value 2.\n     ",
    "links" : [ ]
  }, {
    "name" : "REIWA",
    "type" : "JapaneseEra",
    "comment" : "\n     * The singleton instance for the 'Reiwa' era (2019-05-01 - )\n     * which has the value 3. The end date of this era is not specified, unless\n     * the Japanese Government defines it.\n     *\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : "N_ERA_CONSTANTS",
    "type" : "int",
    "comment" : " There may be a supplemental era defined by the property.",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version.\n     ",
    "links" : [ ]
  }, {
    "name" : "KNOWN_ERAS",
    "type" : "JapaneseEra[]",
    "comment" : " array for the singleton JapaneseEra instances",
    "links" : [ ]
  }, {
    "name" : "eraValue",
    "type" : "int",
    "comment" : "\n     * The era value.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "since",
    "type" : "LocalDate",
    "comment" : " the first day of the era",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " sun.util.calendar.Era getPrivateEra()",
    "returnType" : "sun.util.calendar.Era",
    "comment" : "\n     * Returns the Sun private Era instance corresponding to this {@code JapaneseEra}.\n     *\n     * @return the Sun private Era instance for this {@code JapaneseEra}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static JapaneseEra of(int japaneseEra)",
    "returnType" : "JapaneseEra",
    "comment" : "\n     * Obtains an instance of {@code JapaneseEra} from an {@code int} value.\n     * <ul>\n     * <li>The value {@code 1} is associated with the 'Showa' era, because\n     * it contains 1970-01-01 (ISO calendar system).</li>\n     * <li>The values {@code -1} and {@code 0} are associated with two earlier\n     * eras, Meiji and Taisho, respectively.</li>\n     * <li>A value greater than {@code 1} is associated with a later era,\n     * beginning with Heisei ({@code 2}).</li>\n     * </ul>\n     * <p>\n     * Every instance of {@code JapaneseEra} that is returned from the {@link #values()}\n     * method has an int value (available via {@link Era#getValue()} which is\n     * accepted by this method.\n     *\n     * @param japaneseEra  the era to represent\n     * @return the {@code JapaneseEra} singleton, not null\n     * @throws DateTimeException if the value is invalid\n     ",
    "links" : [ "java.time.chrono.Era#getValue()", "#values()" ]
  }, {
    "name" : "public static JapaneseEra valueOf(String japaneseEra)",
    "returnType" : "JapaneseEra",
    "comment" : "\n     * Returns the {@code JapaneseEra} with the name.\n     * <p>\n     * The string must match exactly the name of the era.\n     * (Extraneous whitespace characters are not permitted.)\n     * <p>\n     * Valid era names are the names of eras returned from {@link #values()}.\n     *\n     * @param japaneseEra  the japaneseEra name; non-null\n     * @return the {@code JapaneseEra} singleton, never null\n     * @throws IllegalArgumentException if there is not JapaneseEra with the specified name\n     ",
    "links" : [ "#values()" ]
  }, {
    "name" : "public static JapaneseEra[] values()",
    "returnType" : "JapaneseEra[]",
    "comment" : "\n     * Returns an array of JapaneseEras. The array may contain eras defined\n     * by the Japanese government beyond the known era singletons.\n     *\n     * <p>\n     * This method may be used to iterate over the JapaneseEras as follows:\n     * <pre>\n     * for (JapaneseEra c : JapaneseEra.values())\n     *     System.out.println(c);\n     * </pre>\n     *\n     * @return an array of JapaneseEras\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(TextStyle style, Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @param style {@inheritDoc}\n     * @param locale {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " static JapaneseEra from(LocalDate date)",
    "returnType" : "JapaneseEra",
    "comment" : "\n     * Obtains an instance of {@code JapaneseEra} from a date.\n     *\n     * @param date  the date, not null\n     * @return the Era singleton, never null\n     ",
    "links" : [ ]
  }, {
    "name" : " static JapaneseEra toJapaneseEra(sun.util.calendar.Era privateEra)",
    "returnType" : "JapaneseEra",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static sun.util.calendar.Era privateEraFrom(LocalDate isoDate)",
    "returnType" : "sun.util.calendar.Era",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int ordinal(int eraValue)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index into the arrays from the Era value.\n     * the eraValue is a valid Era number, -1..2.\n     *\n     * @param eraValue  the era value to convert to the index\n     * @return the index of the current Era\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getValue()",
    "returnType" : "int",
    "comment" : "\n     * Gets the numeric era {@code int} value.\n     * <p>\n     * The {@link #SHOWA} era that contains 1970-01-01 (ISO calendar system) has the value 1.\n     * Later eras are numbered from 2 ({@link #HEISEI}).\n     * Earlier eras are numbered 0 ({@link #TAISHO}), -1 ({@link #MEIJI})).\n     *\n     * @return the era value\n     ",
    "links" : [ "#TAISHO", "#MEIJI", "#HEISEI", "#SHOWA" ]
  }, {
    "name" : "public ValueRange range(TemporalField field)",
    "returnType" : "ValueRange",
    "comment" : "\n     * Gets the range of valid values for the specified field.\n     * <p>\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This era is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@code ERA} field returns the range.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * Whether the range can be obtained is determined by the field.\n     * <p>\n     * The range of valid Japanese eras can change over time due to the nature\n     * of the Japanese calendar system.\n     *\n     * @param field  the field to query the range for, not null\n     * @return the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     ",
    "links" : [ "java.time.temporal.ChronoField" ]
  }, {
    "name" : " String getAbbreviation()",
    "returnType" : "String",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " String getName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Defend against malicious streams.\n     *\n     * @param s the stream to read\n     * @throws InvalidObjectException always\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Writes the object using a\n     * <a href=\"{@docRoot}/serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.\n     * @serialData\n     * <pre>\n     *  out.writeByte(5);        // identifies a JapaneseEra\n     *  out.writeInt(getValue());\n     * </pre>\n     *\n     * @return the instance of {@code Ser}, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeExternal(DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static JapaneseEra readExternal(DataInput in) throws IOException",
    "returnType" : "JapaneseEra",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " sun.util.calendar.Era getPrivateEra()", "public static JapaneseEra of(int japaneseEra)", "public static JapaneseEra valueOf(String japaneseEra)", "public static JapaneseEra[] values()", "public String getDisplayName(TextStyle style, Locale locale)", " static JapaneseEra from(LocalDate date)", " static JapaneseEra toJapaneseEra(sun.util.calendar.Era privateEra)", " static sun.util.calendar.Era privateEraFrom(LocalDate isoDate)", "private static int ordinal(int eraValue)", "public int getValue()", "public ValueRange range(TemporalField field)", " String getAbbreviation()", " String getName()", "public String toString()", "private void readObject(ObjectInputStream s) throws InvalidObjectException", "private Object writeReplace()", " void writeExternal(DataOutput out) throws IOException", " static JapaneseEra readExternal(DataInput in) throws IOException" ],
  "variableNames" : [ "ERA_OFFSET", "ERA_CONFIG", "MEIJI", "TAISHO", "SHOWA", "HEISEI", "REIWA", "N_ERA_CONSTANTS", "serialVersionUID", "KNOWN_ERAS", "eraValue", "since" ]
}