{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/nsd/NsdServiceInfo.java",
  "packageName" : "android.net.nsd",
  "className" : "NsdServiceInfo",
  "comment" : "\n * A class representing service information for network service discovery\n * @see NsdManager\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypes",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxtRecord",
    "type" : "ArrayMap<String, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHostAddresses",
    "type" : "List<InetAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHostname",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPublicKey",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetwork",
    "type" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaceIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpirationTime",
    "type" : "Instant",
    "comment" : " invalid.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NsdServiceInfo>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getServiceName()",
    "returnType" : "String",
    "comment" : " Get the service name ",
    "links" : [ ]
  }, {
    "name" : "public void setServiceName(String s)",
    "returnType" : "void",
    "comment" : " Set the service name ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceType()",
    "returnType" : "String",
    "comment" : " Get the service type ",
    "links" : [ ]
  }, {
    "name" : "public void setServiceType(String s)",
    "returnType" : "void",
    "comment" : " Set the service type ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getHost()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Get the host address. The host address is valid for a resolved service.\n     *\n     * @deprecated Use {@link #getHostAddresses()} to get the entire list of addresses for the host.\n     ",
    "links" : [ "#getHostAddresses()" ]
  }, {
    "name" : "public void setHost(InetAddress s)",
    "returnType" : "void",
    "comment" : "\n     * Set the host address\n     *\n     * @deprecated Use {@link #setHostAddresses(List)} to set multiple addresses for the host.\n     ",
    "links" : [ "#setHostAddresses(List)" ]
  }, {
    "name" : "public int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Get port number. The port number is valid for a resolved service.\n     *\n     * The port is valid for all addresses.\n     * @see #getHostAddresses()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPort(int p)",
    "returnType" : "void",
    "comment" : " Set port number ",
    "links" : [ ]
  }, {
    "name" : "public List<InetAddress> getHostAddresses()",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Get the host addresses.\n     *\n     * All host addresses are valid for the resolved service.\n     * All addresses share the same port\n     * @see #getPort()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHostAddresses(@NonNull List<InetAddress> addresses)",
    "returnType" : "void",
    "comment" : " Set the host addresses ",
    "links" : [ ]
  }, {
    "name" : "public String getHostname()",
    "returnType" : "String",
    "comment" : "    @FlaggedApi(NsdManager.Flags.NSD_CUSTOM_HOSTNAME_ENABLED)",
    "links" : [ ]
  }, {
    "name" : "public void setHostname(@Nullable String hostname)",
    "returnType" : "void",
    "comment" : "    @FlaggedApi(NsdManager.Flags.NSD_CUSTOM_HOSTNAME_ENABLED)",
    "links" : [ ]
  }, {
    "name" : "public void setPublicKey(@Nullable byte[] publicKey)",
    "returnType" : "void",
    "comment" : "\n     * Set the public key RDATA to be advertised in a KEY RR (RFC 2535).\n     *\n     * <p>This is the public key of the key pair used for signing a DNS message (e.g. SRP). Clients\n     * typically don't need this information, but the KEY RR is usually published to claim the use\n     * of the DNS name so that another mDNS advertiser can't take over the ownership during a\n     * temporary power down of the original host device.\n     *\n     * <p>When the public key is set to non-null, exactly one KEY RR will be advertised for each of\n     * the service and host name if they are not null.\n     *\n     * @hide // For Thread only\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getPublicKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the public key RDATA in the KEY RR (RFC 2535) or {@code null} if no KEY RR exists.\n     *\n     * @hide // For Thread only\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTxtRecords(@NonNull byte[] txtRecordsRawBytes)",
    "returnType" : "void",
    "comment" : "\n     * Unpack txt information from a base-64 encoded byte array.\n     *\n     * @param txtRecordsRawBytes The raw base64 encoded byte array.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String key, byte[] value)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add a service attribute as a key/value pair.\n     *\n     * <p> Service attributes are included as DNS-SD TXT record pairs.\n     *\n     * <p> The key must be US-ASCII printable characters, excluding the '=' character.  Values may\n     * be UTF-8 strings or null.  The total length of key + value must be less than 255 bytes.\n     *\n     * <p> Keys should be short, ideally no more than 9 characters, and unique per instance of\n     * {@link NsdServiceInfo}.  Calling {@link #setAttribute} twice with the same key will overwrite\n     * first value.\n     ",
    "links" : [ "android.net.nsd.NsdServiceInfo", "#setAttribute" ]
  }, {
    "name" : "public void removeAttribute(String key)",
    "returnType" : "void",
    "comment" : " Remove an attribute by key ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, byte[]> getAttributes()",
    "returnType" : "Map<String, byte[]>",
    "comment" : "\n     * Retrieve attributes as a map of String keys to byte[] values. The attributes map is only\n     * valid for a resolved service.\n     *\n     * <p> The returned map is unmodifiable; changes must be made through {@link #setAttribute} and\n     * {@link #removeAttribute}.\n     ",
    "links" : [ "#removeAttribute", "#setAttribute" ]
  }, {
    "name" : "private int getTxtRecordSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getTxtRecord()",
    "returnType" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Network getNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * Get the network where the service can be found.\n     *\n     * This is set if this {@link NsdServiceInfo} was obtained from\n     * {@link NsdManager#discoverServices} or {@link NsdManager#resolveService}, unless the service\n     * was found on a network interface that does not have a {@link Network} (such as a tethering\n     * downstream, where services are advertised from devices connected to this device via\n     * tethering).\n     ",
    "links" : [ "android.net.nsd.NsdManager#resolveService", "android.net.nsd.NsdServiceInfo", "android.net.nsd.NsdManager#discoverServices", "android.net.Network" ]
  }, {
    "name" : "public void setNetwork(@Nullable Network network)",
    "returnType" : "void",
    "comment" : "\n     * Set the network where the service can be found.\n     * @param network The network, or null to search for, or to announce, the service on all\n     *                connected networks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInterfaceIndex()",
    "returnType" : "int",
    "comment" : "\n     * Get the index of the network interface where the service was found.\n     *\n     * This is only set when the service was found on an interface that does not have a usable\n     * Network, in which case {@link #getNetwork()} returns null.\n     * @return The interface index as per {@link java.net.NetworkInterface#getIndex}, or 0 if unset.\n     * @hide\n     ",
    "links" : [ "#getNetwork()", "java.net.NetworkInterface#getIndex" ]
  }, {
    "name" : "public void setInterfaceIndex(int interfaceIndex)",
    "returnType" : "void",
    "comment" : "\n     * Set the index of the network interface where the service was found.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtypes(@NonNull Set<String> subtypes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the subtypes to be advertised for this service instance.\n     *\n     * The elements in {@code subtypes} should be the subtype identifiers which have the trailing\n     * \"._sub\" removed. For example, the subtype should be \"_printer\" for\n     * \"_printer._sub._http._tcp.local\".\n     *\n     * Only one subtype will be registered if multiple elements of {@code subtypes} have the same\n     * case-insensitive value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getSubtypes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns subtypes of this service instance.\n     *\n     * When this object is returned by the service discovery/browse APIs (etc. {@link\n     * NsdManager.DiscoveryListener}), the return value may or may not include the subtypes of this\n     * service.\n     ",
    "links" : [ "NsdManager.DiscoveryListener" ]
  }, {
    "name" : "public void setExpirationTime(@Nullable Instant expirationTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the timestamp after when this service is expired.\n     *\n     * Note: the value after the decimal point (in unit of seconds) will be discarded. For\n     * example, {@code 30} seconds will be used when {@code Duration.ofSeconds(30L, 50_000L)}\n     * is provided.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Instant getExpirationTime()",
    "returnType" : "Instant",
    "comment" : " @FlaggedApi(NsdManager.Flags.NSD_CUSTOM_TTL_ENABLED)",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getPrintableTxtValue(@Nullable byte[] txtValue)",
    "returnType" : "String",
    "comment" : "\n     * Returns printable string for {@code txtValue}.\n     *\n     * If {@code txtValue} contains non-printable ASCII characters, a HEX string with prefix \"0x\"\n     * will be returned. Otherwise, the ASCII string of {@code txtValue} is returned.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsNonPrintableChars(byte[] txtValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@code txtValue} contains non-printable ASCII characters.\n     *\n     * The printable characters are in range of [32, 126].\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getServiceName()", "public void setServiceName(String s)", "public String getServiceType()", "public void setServiceType(String s)", "public InetAddress getHost()", "public void setHost(InetAddress s)", "public int getPort()", "public void setPort(int p)", "public List<InetAddress> getHostAddresses()", "public void setHostAddresses(@NonNull List<InetAddress> addresses)", "public String getHostname()", "public void setHostname(@Nullable String hostname)", "public void setPublicKey(@Nullable byte[] publicKey)", "public byte[] getPublicKey()", "public void setTxtRecords(@NonNull byte[] txtRecordsRawBytes)", "public void setAttribute(String key, byte[] value)", "public void setAttribute(String key, String value)", "public void removeAttribute(String key)", "public Map<String, byte[]> getAttributes()", "private int getTxtRecordSize()", "public byte[] getTxtRecord()", "public Network getNetwork()", "public void setNetwork(@Nullable Network network)", "public int getInterfaceIndex()", "public void setInterfaceIndex(int interfaceIndex)", "public void setSubtypes(@NonNull Set<String> subtypes)", "public Set<String> getSubtypes()", "public void setExpirationTime(@Nullable Instant expirationTime)", "public Instant getExpirationTime()", "public String toString()", "private static String getPrintableTxtValue(@Nullable byte[] txtValue)", "private static boolean containsNonPrintableChars(byte[] txtValue)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "mServiceName", "mServiceType", "mSubtypes", "mTxtRecord", "mHostAddresses", "mHostname", "mPort", "mPublicKey", "mNetwork", "mInterfaceIndex", "mExpirationTime", "CREATOR" ]
}