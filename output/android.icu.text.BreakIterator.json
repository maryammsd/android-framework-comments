{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/BreakIterator.java",
  "packageName" : "android.icu.text",
  "className" : "BreakIterator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DONE",
    "type" : "int",
    "comment" : "\n     * DONE is returned by previous() and next() after all valid\n     * boundaries have been returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_NONE",
    "type" : "int",
    "comment" : "\n     * Tag value for \"words\" that do not fit into any of other categories.\n     * Includes spaces and most punctuation.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_NONE_LIMIT",
    "type" : "int",
    "comment" : "\n     * Upper bound for tags for uncategorized words.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_NUMBER",
    "type" : "int",
    "comment" : "\n     * Tag value for words that appear to be numbers, lower limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_NUMBER_LIMIT",
    "type" : "int",
    "comment" : "\n     * Tag value for words that appear to be numbers, upper limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_LETTER",
    "type" : "int",
    "comment" : "\n     * Tag value for words that contain letters, excluding\n     * hiragana, katakana or ideographic characters, lower limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_LETTER_LIMIT",
    "type" : "int",
    "comment" : "\n     * Tag value for words containing letters, upper limit\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_KANA",
    "type" : "int",
    "comment" : "\n     * Tag value for words containing kana characters, lower limit\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_KANA_LIMIT",
    "type" : "int",
    "comment" : "\n     * Tag value for words containing kana characters, upper limit\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_IDEO",
    "type" : "int",
    "comment" : "\n     * Tag value for words containing ideographic characters, lower limit\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_IDEO_LIMIT",
    "type" : "int",
    "comment" : "\n     * Tag value for words containing ideographic characters, upper limit\n     ",
    "links" : [ ]
  }, {
    "name" : "KIND_CHARACTER",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong>\n     ",
    "links" : [ ]
  }, {
    "name" : "KIND_WORD",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong>\n     ",
    "links" : [ ]
  }, {
    "name" : "KIND_LINE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong>\n     ",
    "links" : [ ]
  }, {
    "name" : "KIND_SENTENCE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong>\n     ",
    "links" : [ ]
  }, {
    "name" : "KIND_TITLE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong>\n     * @see #getTitleInstance\n     * @see #getWordInstance\n     * @deprecated ICU 64 Use {@link #getWordInstance} instead.\n     ",
    "links" : [ "#getWordInstance" ]
  }, {
    "name" : "KIND_COUNT",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "iterCache",
    "type" : "CacheValue<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "shim",
    "type" : "BreakIteratorServiceShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "validLocale",
    "type" : "ULocale",
    "comment" : "\n     * The most specific locale containing any resource data, or null.\n     * @see android.icu.util.ULocale\n     ",
    "links" : [ ]
  }, {
    "name" : "actualLocale",
    "type" : "ULocale",
    "comment" : "\n     * The locale containing data used to construct this object, or\n     * null.\n     * @see android.icu.util.ULocale\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clone method.  Creates another BreakIterator with the same behavior and\n     * current state as this one.\n     * @return The clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int first()",
    "returnType" : "int",
    "comment" : "\n     * Set the iterator to the first boundary position.  This is always the beginning\n     * index of the text this iterator iterates over.  For example, if\n     * the iterator iterates over a whole string, this function will\n     * always return 0.\n     * @return The character offset of the beginning of the stretch of text\n     * being broken.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int last()",
    "returnType" : "int",
    "comment" : "\n     * Set the iterator to the last boundary position.  This is always the \"past-the-end\"\n     * index of the text this iterator iterates over.  For example, if the\n     * iterator iterates over a whole string (call it \"text\"), this function\n     * will always return text.length().\n     * @return The character offset of the end of the stretch of text\n     * being broken.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next(int n)",
    "returnType" : "int",
    "comment" : "\n     * Move the iterator by the specified number of steps in the text.\n     * A positive number moves the iterator forward; a negative number\n     * moves the iterator backwards. If this causes the iterator\n     * to move off either end of the text, this function returns DONE;\n     * otherwise, this function returns the position of the appropriate\n     * boundary.  Calling this function is equivalent to calling next() or\n     * previous() n times.\n     * @param n The number of boundaries to advance over (if positive, moves\n     * forward; if negative, moves backwards).\n     * @return The position of the boundary n boundaries from the current\n     * iteration position, or DONE if moving n boundaries causes the iterator\n     * to advance off either end of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next()",
    "returnType" : "int",
    "comment" : "\n     * Advances the iterator forward one boundary.  The current iteration\n     * position is updated to point to the next boundary position after the\n     * current position, and this is also the value that is returned.  If\n     * the current position is equal to the value returned by last(), or to\n     * DONE, this function returns DONE and sets the current position to\n     * DONE.\n     * @return The position of the first boundary position following the\n     * iteration position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int previous()",
    "returnType" : "int",
    "comment" : "\n     * Move the iterator backward one boundary.  The current iteration\n     * position is updated to point to the last boundary position before\n     * the current position, and this is also the value that is returned.  If\n     * the current position is equal to the value returned by first(), or to\n     * DONE, this function returns DONE and sets the current position to\n     * DONE.\n     * @return The position of the last boundary position preceding the\n     * iteration position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int following(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Sets the iterator's current iteration position to be the first\n     * boundary position following the specified position.  (Whether the\n     * specified position is itself a boundary position or not doesn't\n     * matter-- this function always moves the iteration position to the\n     * first boundary after the specified position.)  If the specified\n     * position is the past-the-end position, returns DONE.\n     * @param offset The character position to start searching from.\n     * @return The position of the first boundary position following\n     * \"offset\" (whether or not \"offset\" itself is a boundary position),\n     * or DONE if \"offset\" is the past-the-end offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int preceding(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Sets the iterator's current iteration position to be the last\n     * boundary position preceding the specified position.  (Whether the\n     * specified position is itself a boundary position or not doesn't\n     * matter-- this function always moves the iteration position to the\n     * last boundary before the specified position.)  If the specified\n     * position is the starting position, returns DONE.\n     * @param offset The character position to start searching from.\n     * @return The position of the last boundary position preceding\n     * \"offset\" (whether of not \"offset\" itself is a boundary position),\n     * or DONE if \"offset\" is the starting offset of the iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the specified position is a boundary position.  If the\n     * function returns true, the current iteration position is set to the\n     * specified position; if the function returns false, the current\n     * iteration position is set as though following() had been called.\n     * @param offset the offset to check.\n     * @return True if \"offset\" is a boundary position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int current()",
    "returnType" : "int",
    "comment" : "\n     * Return the iterator's current position.\n     * @return The iterator's current position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRuleStatus()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRuleStatusVec(int[] fillInArray)",
    "returnType" : "int",
    "comment" : "\n     * For RuleBasedBreakIterators, get the status (tag) values from the break rule(s)\n     * that determined the the boundary at the current iteration position.\n     * <p>\n     * For break iterator types that do not support rule status,\n     * no values are returned.\n     * <p>\n     * If the size  of the output array is insufficient to hold the data,\n     *  the output will be truncated to the available length.  No exception\n     *  will be thrown.\n     *\n     * @param fillInArray an array to be filled in with the status values.\n     * @return          The number of rule status values from rules that determined\n     *                  the the boundary at the current iteration position.\n     *                  In the event that the array is too small, the return value\n     *                  is the total number of status values that were available,\n     *                  not the reduced number that were actually returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharacterIterator getText()",
    "returnType" : "CharacterIterator",
    "comment" : "\n     * Returns a CharacterIterator over the text being analyzed.\n     * <p>\n     * <b><i>Caution:</i></b>The state of the returned CharacterIterator\n     * must not be modified in any way while the BreakIterator is still in use.\n     * Doing so will lead to undefined behavior of the BreakIterator.\n     * Clone the returned CharacterIterator first and work with that.\n     * <p>\n     * The returned CharacterIterator is a reference\n     * to the <b>actual iterator being used</b> by the BreakIterator.\n     * No guarantees are made about the current position\n     * of this iterator when it is returned; it may differ from the\n     * BreakIterators current position.  If you need to move that\n     * position to examine the text, clone this function's return value first.\n     *\n     * @return A CharacterIterator over the text being analyzed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(String newText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the iterator to analyze a new piece of text.  The new\n     * piece of text is passed in as a String, and the current\n     * iteration position is reset to the beginning of the string.\n     * (The old text is dropped.)\n     * @param newText A String containing the text to analyze with\n     * this BreakIterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharSequence newText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the iterator to analyze a new piece of text.  The new\n     * piece of text is passed in as a CharSequence, and the current\n     * iteration position is reset to the beginning of the text.\n     * (The old text is dropped.)\n     * <p>\n     * The text underlying the CharSequence must not be be modified while\n     * the BreakIterator holds a references to it. (As could possibly occur\n     * with a StringBuilder, for example).\n     * @param newText A CharSequence containing the text to analyze with\n     * this BreakIterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setText(CharacterIterator newText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the iterator to analyze a new piece of text. This function resets\n     * the current iteration position to the beginning of the text.\n     * (The old iterator is dropped.)\n     * <p>\n     * <b><i>Caution:</i></b> The supplied CharacterIterator is used\n     * directly by the BreakIterator, and must not be altered in any\n     * way by code outside of the BreakIterator.\n     * Doing so will lead to undefined behavior of the BreakIterator.\n     *\n     * @param newText A CharacterIterator referring to the text\n     * to analyze with this BreakIterator (the iterator's current\n     * position is ignored, but its other state is significant).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getWordInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates word boundaries.\n     * This function assumes that the text being analyzed is in the default\n     * locale's language.\n     * @return An instance of BreakIterator that locates word boundaries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getWordInstance(Locale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates word boundaries.\n     * @param where A locale specifying the language of the text to be\n     * analyzed.\n     * @return An instance of BreakIterator that locates word boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getWordInstance(ULocale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates word boundaries.\n     * @param where A locale specifying the language of the text to be\n     * analyzed.\n     * @return An instance of BreakIterator that locates word boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getLineInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates legal line-\n     * wrapping positions.  This function assumes the text being broken\n     * is in the default locale's language.\n     * @return A new instance of BreakIterator that locates legal\n     * line-wrapping positions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getLineInstance(Locale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates legal line-\n     * wrapping positions.\n     * @param where A Locale specifying the language of the text being broken.\n     * @return A new instance of BreakIterator that locates legal\n     * line-wrapping positions.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getLineInstance(ULocale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates legal line-\n     * wrapping positions.\n     * @param where A Locale specifying the language of the text being broken.\n     * @return A new instance of BreakIterator that locates legal\n     * line-wrapping positions.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getCharacterInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates logical-character\n     * boundaries.  This function assumes that the text being analyzed is\n     * in the default locale's language.\n     * @return A new instance of BreakIterator that locates logical-character\n     * boundaries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getCharacterInstance(Locale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates logical-character\n     * boundaries.\n     * @param where A Locale specifying the language of the text being analyzed.\n     * @return A new instance of BreakIterator that locates logical-character\n     * boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getCharacterInstance(ULocale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates logical-character\n     * boundaries.\n     * @param where A Locale specifying the language of the text being analyzed.\n     * @return A new instance of BreakIterator that locates logical-character\n     * boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getSentenceInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates sentence boundaries.\n     * This function assumes the text being analyzed is in the default locale's\n     * language.\n     * @return A new instance of BreakIterator that locates sentence boundaries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getSentenceInstance(Locale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new instance of BreakIterator that locates sentence boundaries.\n     * @param where A Locale specifying the language of the text being analyzed.\n     * @return A new instance of BreakIterator that locates sentence boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getSentenceInstance(ULocale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates sentence boundaries.\n     * @param where A Locale specifying the language of the text being analyzed.\n     * @return A new instance of BreakIterator that locates sentence boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getTitleInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates title boundaries.\n     * This function assumes the text being analyzed is in the default locale's\n     * language. The iterator returned locates title boundaries as described for\n     * Unicode 3.2 only. For Unicode 4.0 and above title boundary iteration,\n     * please use a word boundary iterator. {@link #getWordInstance}\n     * @return A new instance of BreakIterator that locates title boundaries.\n     * @deprecated ICU 64 Use {@link #getWordInstance} instead.\n     ",
    "links" : [ "#getWordInstance" ]
  }, {
    "name" : "public static BreakIterator getTitleInstance(Locale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates title boundaries.\n     * The iterator returned locates title boundaries as described for\n     * Unicode 3.2 only. For Unicode 4.0 and above title boundary iteration,\n     * please use Word Boundary iterator.{@link #getWordInstance}\n     * @param where A Locale specifying the language of the text being analyzed.\n     * @return A new instance of BreakIterator that locates title boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     * @deprecated ICU 64 Use {@link #getWordInstance} instead.\n     ",
    "links" : [ "#getWordInstance" ]
  }, {
    "name" : "public static BreakIterator getTitleInstance(ULocale where)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * <strong>[icu]</strong> Returns a new instance of BreakIterator that locates title boundaries.\n     * The iterator returned locates title boundaries as described for\n     * Unicode 3.2 only. For Unicode 4.0 and above title boundary iteration,\n     * please use Word Boundary iterator.{@link #getWordInstance}\n     * @param where A Locale specifying the language of the text being analyzed.\n     * @return A new instance of BreakIterator that locates title boundaries.\n     * @throws NullPointerException if <code>where</code> is null.\n     * @deprecated ICU 64 Use {@link #getWordInstance} instead.\n     ",
    "links" : [ "#getWordInstance" ]
  }, {
    "name" : "public static Object registerInstance(BreakIterator iter, Locale locale, int kind)",
    "returnType" : "Object",
    "comment" : "\n     * <strong>[icu]</strong> Registers a new break iterator of the indicated kind, to use in the given\n     * locale.  Clones of the iterator will be returned if a request for a break iterator\n     * of the given kind matches or falls back to this locale.\n     *\n     * <p>Because ICU may choose to cache BreakIterator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * BreakIterator.getInstance to avoid undefined behavior.\n     *\n     * @param iter the BreakIterator instance to adopt.\n     * @param locale the Locale for which this instance is to be registered\n     * @param kind the type of iterator for which this instance is to be registered\n     * @return a registry key that can be used to unregister this instance\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object registerInstance(BreakIterator iter, ULocale locale, int kind)",
    "returnType" : "Object",
    "comment" : "\n     * <strong>[icu]</strong> Registers a new break iterator of the indicated kind, to use in the given\n     * locale.  Clones of the iterator will be returned if a request for a break iterator\n     * of the given kind matches or falls back to this locale.\n     *\n     * <p>Because ICU may choose to cache BreakIterator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * BreakIterator.getInstance to avoid undefined behavior.\n     *\n     * @param iter the BreakIterator instance to adopt.\n     * @param locale the Locale for which this instance is to be registered\n     * @param kind the type of iterator for which this instance is to be registered\n     * @return a registry key that can be used to unregister this instance\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean unregister(Object key)",
    "returnType" : "boolean",
    "comment" : "\n     * <strong>[icu]</strong> Unregisters a previously-registered BreakIterator using the key returned\n     * from the register call.  Key becomes invalid after this call and should not be used\n     * again.\n     * @param key the registry key returned by a previous call to registerInstance\n     * @return true if the iterator for the key was successfully unregistered\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getBreakInstance(ULocale where, int kind)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a particular kind of BreakIterator for a locale.\n     * Avoids writing a switch statement with getXYZInstance(where) calls.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns a list of locales for which BreakIterators can be used.\n     * @return An array of Locales.  All of the locales in the array can\n     * be used when creating a BreakIterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns a list of locales for which BreakIterators can be used.\n     * @return An array of Locales.  All of the locales in the array can\n     * be used when creating a BreakIterator.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static BreakIteratorServiceShim getShim()",
    "returnType" : "BreakIteratorServiceShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final ULocale getLocale(ULocale.Type type)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale that was used to create this object, or null.\n     * This may may differ from the locale requested at the time of\n     * this object's creation.  For example, if an object is created\n     * for locale <tt>en_US_CALIFORNIA</tt>, the actual data may be\n     * drawn from <tt>en</tt> (the <i>actual</i> locale), and\n     * <tt>en_US</tt> may be the most specific locale that exists (the\n     * <i>valid</i> locale).\n     *\n     * <p>Note: The <i>actual</i> locale is returned correctly, but the <i>valid</i>\n     * locale is not, in most cases.\n     * @param type type of information requested, either {@link\n     * android.icu.util.ULocale#VALID_LOCALE} or {@link\n     * android.icu.util.ULocale#ACTUAL_LOCALE}.\n     * @return the information specified by <i>type</i>, or null if\n     * this object was not constructed from locale data.\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.util.ULocale#ACTUAL_LOCALE", "android.icu.util.ULocale#VALID_LOCALE" ]
  }, {
    "name" : " final void setLocale(ULocale valid, ULocale actual)",
    "returnType" : "void",
    "comment" : "\n     * Set information about the locales that were used to create this\n     * object.  If the object was not constructed from locale data,\n     * both arguments should be set to null.  Otherwise, neither\n     * should be null.  The actual locale must be at the same level or\n     * less specific than the valid locale.  This method is intended\n     * for use by factories or other entities that create objects of\n     * this class.\n     * @param valid the most specific locale containing any resource\n     * data, or null\n     * @param actual the locale containing data used to construct this\n     * object, or null\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone()", "public abstract int first()", "public abstract int last()", "public abstract int next(int n)", "public abstract int next()", "public abstract int previous()", "public abstract int following(int offset)", "public int preceding(int offset)", "public boolean isBoundary(int offset)", "public abstract int current()", "public int getRuleStatus()", "public int getRuleStatusVec(int[] fillInArray)", "public abstract CharacterIterator getText()", "public void setText(String newText)", "public void setText(CharSequence newText)", "public abstract void setText(CharacterIterator newText)", "public static BreakIterator getWordInstance()", "public static BreakIterator getWordInstance(Locale where)", "public static BreakIterator getWordInstance(ULocale where)", "public static BreakIterator getLineInstance()", "public static BreakIterator getLineInstance(Locale where)", "public static BreakIterator getLineInstance(ULocale where)", "public static BreakIterator getCharacterInstance()", "public static BreakIterator getCharacterInstance(Locale where)", "public static BreakIterator getCharacterInstance(ULocale where)", "public static BreakIterator getSentenceInstance()", "public static BreakIterator getSentenceInstance(Locale where)", "public static BreakIterator getSentenceInstance(ULocale where)", "public static BreakIterator getTitleInstance()", "public static BreakIterator getTitleInstance(Locale where)", "public static BreakIterator getTitleInstance(ULocale where)", "public static Object registerInstance(BreakIterator iter, Locale locale, int kind)", "public static Object registerInstance(BreakIterator iter, ULocale locale, int kind)", "public static boolean unregister(Object key)", "public static BreakIterator getBreakInstance(ULocale where, int kind)", "public static synchronized Locale[] getAvailableLocales()", "public static synchronized ULocale[] getAvailableULocales()", "private static BreakIteratorServiceShim getShim()", "public final ULocale getLocale(ULocale.Type type)", " final void setLocale(ULocale valid, ULocale actual)" ],
  "variableNames" : [ "DEBUG", "DONE", "WORD_NONE", "WORD_NONE_LIMIT", "WORD_NUMBER", "WORD_NUMBER_LIMIT", "WORD_LETTER", "WORD_LETTER_LIMIT", "WORD_KANA", "WORD_KANA_LIMIT", "WORD_IDEO", "WORD_IDEO_LIMIT", "KIND_CHARACTER", "KIND_WORD", "KIND_LINE", "KIND_SENTENCE", "KIND_TITLE", "KIND_COUNT", "iterCache", "shim", "validLocale", "actualLocale" ]
}