{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/TemplateList.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "TemplateList",
  "comment" : "\n * Encapsulates a template list, and helps locate individual templates.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Flag to indicate whether in DEBUG mode          ",
    "links" : [ ]
  }, {
    "name" : "m_namedTemplates",
    "type" : "Hashtable",
    "comment" : "\n   * Keyed on string macro names, and holding values\n   * that are macro elements in the XSL DOM tree.\n   * Initialized in initMacroLookupTable, and used in\n   * findNamedTemplate.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_patternTable",
    "type" : "Hashtable",
    "comment" : "\n   * This table is keyed on the target elements\n   * of patterns, and contains linked lists of\n   * the actual patterns that match the target element\n   * to some degree of specifity.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_wildCardPatterns",
    "type" : "TemplateSubPatternAssociation",
    "comment" : " Wildcard patterns.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_textPatterns",
    "type" : "TemplateSubPatternAssociation",
    "comment" : " Text Patterns.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_docPatterns",
    "type" : "TemplateSubPatternAssociation",
    "comment" : " Root document Patterns.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_commentPatterns",
    "type" : "TemplateSubPatternAssociation",
    "comment" : " Comment Patterns.\n   *  @serial          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTemplate(ElemTemplate template)",
    "returnType" : "void",
    "comment" : "\n   * Add a template to the table of named templates and/or the table of templates\n   * with match patterns.  This routine should\n   * be called in decreasing order of precedence but it checks nonetheless.\n   *\n   * @param template\n   ",
    "links" : [ ]
  }, {
    "name" : " void dumpAssociationTables()",
    "returnType" : "void",
    "comment" : "\n   * Dump all patterns and elements that match those patterns\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot)",
    "returnType" : "void",
    "comment" : "\n   * After all templates have been added, this function\n   * should be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "private TemplateSubPatternAssociation insertAssociationIntoList(TemplateSubPatternAssociation head, TemplateSubPatternAssociation item, boolean isWildCardInsert)",
    "returnType" : "TemplateSubPatternAssociation",
    "comment" : "\n   * Insert the given TemplateSubPatternAssociation into the the linked\n   * list.  Sort by import precedence, then priority, then by document order.\n   *\n   * @param head The first TemplateSubPatternAssociation in the linked list.\n   * @param item The item that we want to insert into the proper place.\n   * @param isWildCardInsert <code>true</code> if we are inserting a wild card \n   *             template onto this list.\n   * @return the new head of the list.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void insertPatternInTable(StepPattern pattern, ElemTemplate template)",
    "returnType" : "void",
    "comment" : "\n   * Add a template to the template list.\n   *\n   * @param pattern\n   * @param template\n   ",
    "links" : [ ]
  }, {
    "name" : "private double getPriorityOrScore(TemplateSubPatternAssociation matchPat)",
    "returnType" : "double",
    "comment" : "\n   * Given a match pattern and template association, return the \n   * score of that match.  This score or priority can always be \n   * statically calculated.\n   *\n   * @param matchPat The match pattern to template association.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST}, \n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE}, \n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD}, \n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}, or \n   *         the value defined by the priority attribute of the template.\n   *\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public ElemTemplate getTemplate(QName qname)",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Locate a named template.\n   *\n   * @param qname  Qualified name of the template.\n   *\n   * @return Template argument with the requested name, or null if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public TemplateSubPatternAssociation getHead(XPathContext xctxt, int targetNode, DTM dtm)",
    "returnType" : "TemplateSubPatternAssociation",
    "comment" : "\n   * Get the head of the most likely list of associations to check, based on \n   * the name and type of the targetNode argument.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param targetNode The target node that will be checked for a match.\n   * @param dtm The dtm owner for the target node.\n   *\n   * @return The head of a linked list that contains all possible match pattern to \n   * template associations.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplate getTemplateFast(XPathContext xctxt, int targetNode, int expTypeID, QName mode, int maxImportLevel, boolean quietConflictWarnings, DTM dtm) throws TransformerException",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Given a target element, find the template that best\n   * matches in the given XSL document, according\n   * to the rules specified in the xsl draft.  This variation of getTemplate \n   * assumes the current node and current expression node have already been \n   * pushed. \n   *\n   * @param xctxt\n   * @param targetNode\n   * @param mode A string indicating the display mode.\n   * @param maxImportLevel The maximum importCountComposed that we should consider or -1\n   *        if we should consider all import levels.  This is used by apply-imports to\n   *        access templates that have been overridden.\n   * @param quietConflictWarnings\n   * @return Rule that best matches targetElem.\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplate getTemplate(XPathContext xctxt, int targetNode, QName mode, boolean quietConflictWarnings, DTM dtm) throws TransformerException",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Given a target element, find the template that best\n   * matches in the given XSL document, according\n   * to the rules specified in the xsl draft.\n   *\n   * @param xctxt\n   * @param targetNode\n   * @param mode A string indicating the display mode.\n   * @param quietConflictWarnings\n   * @return Rule that best matches targetElem.\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplate getTemplate(XPathContext xctxt, int targetNode, QName mode, int maxImportLevel, int endImportLevel, boolean quietConflictWarnings, DTM dtm) throws TransformerException",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Given a target element, find the template that best\n   * matches in the given XSL document, according\n   * to the rules specified in the xsl draft.\n   *\n   * @param xctxt\n   * @param targetNode\n   * @param mode A string indicating the display mode.\n   * @param maxImportLevel The maximum importCountComposed that we should consider or -1\n   *        if we should consider all import levels.  This is used by apply-imports to\n   *        access templates that have been overridden.\n   * @param endImportLevel The count of composed imports\n   * @param quietConflictWarnings\n   * @return Rule that best matches targetElem.\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public TemplateWalker getWalker()",
    "returnType" : "TemplateWalker",
    "comment" : "\n   * Get a TemplateWalker for use by a compiler.  See the documentation for\n   * the TreeWalker inner class for further details.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void checkConflicts(TemplateSubPatternAssociation head, XPathContext xctxt, int targetNode, QName mode)",
    "returnType" : "void",
    "comment" : "\n   * Check for match conflicts, and warn the stylesheet author.\n   *\n   * @param head Template pattern\n   * @param xctxt Current XPath context\n   * @param targetNode Node matching the pattern\n   * @param mode reference, which may be null, to the <a href=\"http://www.w3.org/TR/xslt#modes\">current mode</a>.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void addObjectIfNotFound(Object obj, Vector v)",
    "returnType" : "void",
    "comment" : "\n   * Add object to vector if not already there.\n   *\n   * @param obj\n   * @param v\n   ",
    "links" : [ ]
  }, {
    "name" : "private Hashtable getNamedTemplates()",
    "returnType" : "Hashtable",
    "comment" : "\n   * Get table of named Templates.\n   * These are keyed on template names, and holding values\n   * that are template elements.\n   *\n   * @return A Hashtable dictionary that contains {@link java.lang.String}s \n   * as the keys, and {@link org.apache.xalan.templates.ElemTemplate}s as the \n   * values. \n   ",
    "links" : [ "org.apache.xalan.templates.ElemTemplate", "java.lang.String" ]
  }, {
    "name" : "private void setNamedTemplates(Hashtable v)",
    "returnType" : "void",
    "comment" : "\n   * Set table of named Templates.\n   * These are keyed on string macro names, and holding values\n   * that are template elements in the XSL DOM tree.\n   *\n   * @param v Hashtable dictionary that contains {@link java.lang.String}s \n   * as the keys, and {@link org.apache.xalan.templates.ElemTemplate}s as the \n   * values.\n   ",
    "links" : [ "org.apache.xalan.templates.ElemTemplate", "java.lang.String" ]
  }, {
    "name" : "private TemplateSubPatternAssociation getHead(String key)",
    "returnType" : "TemplateSubPatternAssociation",
    "comment" : "\n   * Get the head of the assocation list that is keyed by target.\n   *\n   * @param key The name of a node. \n   *\n   * @return The head of a linked list that contains all possible match pattern to \n   * template associations for the given key.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void putHead(String key, TemplateSubPatternAssociation assoc)",
    "returnType" : "void",
    "comment" : "\n   * Get the head of the assocation list that is keyed by target.\n   *\n   * @param key\n   * @param assoc\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTemplate(ElemTemplate template)", " void dumpAssociationTables()", "public void compose(StylesheetRoot sroot)", "private TemplateSubPatternAssociation insertAssociationIntoList(TemplateSubPatternAssociation head, TemplateSubPatternAssociation item, boolean isWildCardInsert)", "private void insertPatternInTable(StepPattern pattern, ElemTemplate template)", "private double getPriorityOrScore(TemplateSubPatternAssociation matchPat)", "public ElemTemplate getTemplate(QName qname)", "public TemplateSubPatternAssociation getHead(XPathContext xctxt, int targetNode, DTM dtm)", "public ElemTemplate getTemplateFast(XPathContext xctxt, int targetNode, int expTypeID, QName mode, int maxImportLevel, boolean quietConflictWarnings, DTM dtm) throws TransformerException", "public ElemTemplate getTemplate(XPathContext xctxt, int targetNode, QName mode, boolean quietConflictWarnings, DTM dtm) throws TransformerException", "public ElemTemplate getTemplate(XPathContext xctxt, int targetNode, QName mode, int maxImportLevel, int endImportLevel, boolean quietConflictWarnings, DTM dtm) throws TransformerException", "public TemplateWalker getWalker()", "private void checkConflicts(TemplateSubPatternAssociation head, XPathContext xctxt, int targetNode, QName mode)", "private void addObjectIfNotFound(Object obj, Vector v)", "private Hashtable getNamedTemplates()", "private void setNamedTemplates(Hashtable v)", "private TemplateSubPatternAssociation getHead(String key)", "private void putHead(String key, TemplateSubPatternAssociation assoc)" ],
  "variableNames" : [ "serialVersionUID", "DEBUG", "m_namedTemplates", "m_patternTable", "m_wildCardPatterns", "m_textPatterns", "m_docPatterns", "m_commentPatterns" ]
}