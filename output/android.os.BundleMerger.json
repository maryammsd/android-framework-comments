{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BundleMerger.java",
  "packageName" : "android.os",
  "className" : "BundleMerger",
  "comment" : "\n * Configured rules for merging two {@link Bundle} instances.\n * <p>\n * By default, values from both {@link Bundle} instances are blended together on\n * a key-wise basis, and conflicting value definitions for a key are dropped.\n * <p>\n * Nuanced strategies for handling conflicting value definitions can be applied\n * using {@link #setMergeStrategy(String, int)} and\n * {@link #setDefaultMergeStrategy(int)}.\n * <p>\n * When conflicting values have <em>inconsistent</em> data types (such as trying\n * to merge a {@link String} and a {@link Integer}), both conflicting values are\n * rejected and the key becomes undefined, regardless of the requested strategy.\n *\n * @hide\n ",
  "links" : [ "Integer", "android.os.Bundle", "#setDefaultMergeStrategy(int)", "String", "#setMergeStrategy(String" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrategies",
    "type" : "ArrayMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_REJECT",
    "type" : "int",
    "comment" : "\n     * Merge strategy that rejects both conflicting values.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_FIRST",
    "type" : "int",
    "comment" : "\n     * Merge strategy that selects the first of conflicting values.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_LAST",
    "type" : "int",
    "comment" : "\n     * Merge strategy that selects the last of conflicting values.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_COMPARABLE_MIN",
    "type" : "int",
    "comment" : "\n     * Merge strategy that selects the \"minimum\" of conflicting values which are\n     * {@link Comparable} with each other.\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : "STRATEGY_COMPARABLE_MAX",
    "type" : "int",
    "comment" : "\n     * Merge strategy that selects the \"maximum\" of conflicting values which are\n     * {@link Comparable} with each other.\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : "STRATEGY_NUMBER_ADD",
    "type" : "int",
    "comment" : "\n     * Merge strategy that numerically adds both conflicting values.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_NUMBER_INCREMENT_FIRST",
    "type" : "int",
    "comment" : "\n     * Merge strategy that numerically increments the first conflicting value by\n     * {@code 1} and ignores the last conflicting value.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_NUMBER_INCREMENT_FIRST_AND_ADD",
    "type" : "int",
    "comment" : "\n     * Merge strategy that numerically increments the first conflicting value by\n     * {@code 1} and also numerically adds both conflicting values.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_BOOLEAN_AND",
    "type" : "int",
    "comment" : "\n     * Merge strategy that combines conflicting values using a boolean \"and\"\n     * operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_BOOLEAN_OR",
    "type" : "int",
    "comment" : "\n     * Merge strategy that combines conflicting values using a boolean \"or\"\n     * operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_ARRAY_APPEND",
    "type" : "int",
    "comment" : "\n     * Merge strategy that combines two conflicting array values by appending\n     * the last array after the first array.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGY_ARRAY_LIST_APPEND",
    "type" : "int",
    "comment" : "\n     * Merge strategy that combines two conflicting {@link ArrayList} values by\n     * appending the last {@link ArrayList} after the first {@link ArrayList}.\n     ",
    "links" : [ "java.util.ArrayList" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BundleMerger>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultMergeStrategy(@Strategy int strategy)",
    "returnType" : "void",
    "comment" : "\n     * Configure the default merge strategy to be used when there isn't a\n     * more-specific strategy defined for a particular key via\n     * {@link #setMergeStrategy(String, int)}.\n     ",
    "links" : [ "#setMergeStrategy(String" ]
  }, {
    "name" : "public void setMergeStrategy(@NonNull String key, @Strategy int strategy)",
    "returnType" : "void",
    "comment" : "\n     * Configure the merge strategy to be used for the given key.\n     * <p>\n     * Subsequent calls for the same key will overwrite any previously\n     * configured strategy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMergeStrategy(@NonNull String key)",
    "returnType" : "int",
    "comment" : "\n     * Return the merge strategy to be used for the given key, as defined by\n     * {@link #setMergeStrategy(String, int)}.\n     * <p>\n     * If no specific strategy has been configured for the given key, this\n     * returns {@link #setDefaultMergeStrategy(int)}.\n     ",
    "links" : [ "#setDefaultMergeStrategy(int)", "#setMergeStrategy(String" ]
  }, {
    "name" : "public BinaryOperator<Bundle> asBinaryOperator()",
    "returnType" : "BinaryOperator<Bundle>",
    "comment" : "\n     * Return a {@link BinaryOperator} which applies the strategies configured\n     * in this object to merge the two given {@link Bundle} arguments.\n     ",
    "links" : [ "android.os.Bundle", "java.util.function.BinaryOperator" ]
  }, {
    "name" : "public Bundle merge(@Nullable Bundle first, @Nullable Bundle last)",
    "returnType" : "Bundle",
    "comment" : "\n     * Apply the strategies configured in this object to merge the two given\n     * {@link Bundle} arguments.\n     *\n     * @return the merged {@link Bundle} result. If one argument is {@code null}\n     *         it will return the other argument. If both arguments are null it\n     *         will return {@code null}.\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "public static Object merge(@Strategy int strategy, @Nullable Object first, @Nullable Object last)",
    "returnType" : "Object",
    "comment" : "\n     * Merge the two given values. If only one of the values is defined, it\n     * always wins, otherwise the given strategy is applied.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Object comparableMin(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object comparableMax(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object numberAdd(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Number numberIncrementFirst(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Number",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object booleanAnd(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object booleanOr(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object arrayAppend(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Object arrayListAppend(@NonNull Object first, @NonNull Object last)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@NonNull Parcel out, int flags)", "public int describeContents()", "public void setDefaultMergeStrategy(@Strategy int strategy)", "public void setMergeStrategy(@NonNull String key, @Strategy int strategy)", "public int getMergeStrategy(@NonNull String key)", "public BinaryOperator<Bundle> asBinaryOperator()", "public Bundle merge(@Nullable Bundle first, @Nullable Bundle last)", "public static Object merge(@Strategy int strategy, @Nullable Object first, @Nullable Object last)", "private static Object comparableMin(@NonNull Object first, @NonNull Object last)", "private static Object comparableMax(@NonNull Object first, @NonNull Object last)", "private static Object numberAdd(@NonNull Object first, @NonNull Object last)", "private static Number numberIncrementFirst(@NonNull Object first, @NonNull Object last)", "private static Object booleanAnd(@NonNull Object first, @NonNull Object last)", "private static Object booleanOr(@NonNull Object first, @NonNull Object last)", "private static Object arrayAppend(@NonNull Object first, @NonNull Object last)", "private static Object arrayListAppend(@NonNull Object first, @NonNull Object last)" ],
  "variableNames" : [ "TAG", "mDefaultStrategy", "mStrategies", "STRATEGY_REJECT", "STRATEGY_FIRST", "STRATEGY_LAST", "STRATEGY_COMPARABLE_MIN", "STRATEGY_COMPARABLE_MAX", "STRATEGY_NUMBER_ADD", "STRATEGY_NUMBER_INCREMENT_FIRST", "STRATEGY_NUMBER_INCREMENT_FIRST_AND_ADD", "STRATEGY_BOOLEAN_AND", "STRATEGY_BOOLEAN_OR", "STRATEGY_ARRAY_APPEND", "STRATEGY_ARRAY_LIST_APPEND", "CREATOR" ]
}