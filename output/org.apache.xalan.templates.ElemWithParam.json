{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemWithParam.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemWithParam",
  "comment" : "\n * Implement xsl:with-param.  xsl:with-param is allowed within\n * both xsl:call-template and xsl:apply-templates.\n * <pre>\n * <!ELEMENT xsl:with-param %template;>\n * <!ATTLIST xsl:with-param\n *   name %qname; #REQUIRED\n *   select %expr; #IMPLIED\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#element-with-param\">element-with-param in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_index",
    "type" : "int",
    "comment" : "\n   * This is the index to the stack frame being called, <emph>not</emph> the \n   * stack frame that contains this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_selectPattern",
    "type" : "XPath",
    "comment" : "\n   * The \"select\" attribute, which specifies the value of the\n   * argument, if element content is not specified.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_qname",
    "type" : "QName",
    "comment" : "\n   * The required name attribute specifies the name of the\n   * parameter (the variable the value of whose binding is\n   * to be replaced). The value of the name attribute is a QName,\n   * which is expanded as described in [2.4 Qualified Names].\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_qnameID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSelect(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"select\" attribute.\n   * The \"select\" attribute specifies the value of the\n   * argument, if element content is not specified.\n   *\n   * @param v Value to set for the \"select\" attribute. \n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getSelect()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"select\" attribute.\n   * The \"select\" attribute specifies the value of the\n   * argument, if element content is not specified.\n   *\n   * @return Value of the \"select\" attribute. \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setName(QName v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * DJD\n   *\n   * @param v Value to set for the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * DJD\n   *\n   * @return Value of the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return the node name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setParentElem(ElemTemplateElement p)",
    "returnType" : "void",
    "comment" : "\n   * Set the parent as an ElemTemplateElement.\n   *\n   * @param p This node's parent as an ElemTemplateElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getValue(TransformerImpl transformer, int sourceNode) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get the XObject representation of the variable.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param sourceNode non-null reference to the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current source node</a>.\n   *\n   * @return the XObject representation of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement elem)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list. If the select attribute\n   * is present, an error will be raised.\n   *\n   * @param elem New element to append to this element's children list\n   *\n   * @return null if the select attribute was present, otherwise the \n   * child just added to the child list \n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSelect(XPath v)", "public XPath getSelect()", "public void setName(QName v)", "public QName getName()", "public int getXSLToken()", "public String getNodeName()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void setParentElem(ElemTemplateElement p)", "public XObject getValue(TransformerImpl transformer, int sourceNode) throws TransformerException", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)", "public ElemTemplateElement appendChild(ElemTemplateElement elem)" ],
  "variableNames" : [ "serialVersionUID", "m_index", "m_selectPattern", "m_qname", "m_qnameID" ]
}