{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/Tag.java",
  "packageName" : "android.nfc",
  "className" : "Tag",
  "comment" : "\n * Represents an NFC tag that has been discovered.\n * <p>\n * {@link Tag} is an immutable object that represents the state of a NFC tag at\n * the time of discovery. It can be used as a handle to {@link TagTechnology} classes\n * to perform advanced operations, or directly queried for its ID via {@link #getId} and the\n * set of technologies it contains via {@link #getTechList}. Arrays passed to and\n * returned by this class are <em>not</em> cloned, so be careful not to modify them.\n * <p>\n * A new tag object is created every time a tag is discovered (comes into range), even\n * if it is the same physical tag. If a tag is removed and then returned into range, then\n * only the most recent tag object can be successfully used to create a {@link TagTechnology}.\n *\n * <h3>Tag Dispatch</h3>\n * When a tag is discovered, a {@link Tag} object is created and passed to a\n * single activity via the {@link NfcAdapter#EXTRA_TAG} extra in an\n * {@link android.content.Intent} via {@link Context#startActivity}. A four stage dispatch is used\n * to select the\n * most appropriate activity to handle the tag. The Android OS executes each stage in order,\n * and completes dispatch as soon as a single matching activity is found. If there are multiple\n * matching activities found at any one stage then the Android activity chooser dialog is shown\n * to allow the user to select the activity to receive the tag.\n *\n * <p>The Tag dispatch mechanism was designed to give a high probability of dispatching\n * a tag to the correct activity without showing the user an activity chooser dialog.\n * This is important for NFC interactions because they are very transient -- if a user has to\n * move the Android device to choose an application then the connection will likely be broken.\n *\n * <h4>1. Foreground activity dispatch</h4>\n * A foreground activity that has called\n * {@link NfcAdapter#enableForegroundDispatch NfcAdapter.enableForegroundDispatch()} is\n * given priority. See the documentation on\n * {@link NfcAdapter#enableForegroundDispatch NfcAdapter.enableForegroundDispatch()} for\n * its usage.\n * <h4>2. NDEF data dispatch</h4>\n * If the tag contains NDEF data the system inspects the first {@link NdefRecord} in the first\n * {@link NdefMessage}. If the record is a URI, SmartPoster, or MIME data\n * {@link Context#startActivity} is called with {@link NfcAdapter#ACTION_NDEF_DISCOVERED}. For URI\n * and SmartPoster records the URI is put into the intent's data field. For MIME records the MIME\n * type is put in the intent's type field. This allows activities to register to be launched only\n * when data they know how to handle is present on a tag. This is the preferred method of handling\n * data on a tag since NDEF data can be stored on many types of tags and doesn't depend on a\n * specific tag technology. \n * See {@link NfcAdapter#ACTION_NDEF_DISCOVERED} for more detail. If the tag does not contain\n * NDEF data, or if no activity is registered\n * for {@link NfcAdapter#ACTION_NDEF_DISCOVERED} with a matching data URI or MIME type then dispatch\n * moves to stage 3.\n * <h4>3. Tag Technology dispatch</h4>\n * {@link Context#startActivity} is called with {@link NfcAdapter#ACTION_TECH_DISCOVERED} to\n * dispatch the tag to an activity that can handle the technologies present on the tag.\n * Technologies are defined as sub-classes of {@link TagTechnology}, see the package\n * {@link android.nfc.tech}. The Android OS looks for an activity that can handle one or\n * more technologies in the tag. See {@link NfcAdapter#ACTION_TECH_DISCOVERED} for more detail.\n * <h4>4. Fall-back dispatch</h4>\n * If no activity has been matched then {@link Context#startActivity} is called with\n * {@link NfcAdapter#ACTION_TAG_DISCOVERED}. This is intended as a fall-back mechanism.\n * See {@link NfcAdapter#ACTION_TAG_DISCOVERED}.\n *\n * <h3>NFC Tag Background</h3>\n * An NFC tag is a passive NFC device, powered by the NFC field of this Android device while\n * it is in range. Tag's can come in many forms, such as stickers, cards, key fobs, or\n * even embedded in a more sophisticated device.\n * <p>\n * Tags can have a wide range of capabilities. Simple tags just offer read/write semantics,\n * and contain some one time\n * programmable areas to make read-only. More complex tags offer math operations\n * and per-sector access control and authentication. The most sophisticated tags\n * contain operating environments allowing complex interactions with the\n * code executing on the tag. Use {@link TagTechnology} classes to access a broad\n * range of capabilities available in NFC tags.\n * <p>\n ",
  "variables" : [ {
    "name" : "mId",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTechList",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTechStringList",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTechExtras",
    "type" : "Bundle[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceHandle",
    "type" : "int",
    "comment" : " for use by NFC service, 0 indicates a mock",
    "links" : [ ]
  }, {
    "name" : "mTagService",
    "type" : "INfcTag",
    "comment" : " interface to NFC service, will be null if mock tag",
    "links" : [ ]
  }, {
    "name" : "mConnectedTechnology",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Tag>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Tag createMockTag(byte[] id, int[] techList, Bundle[] techListExtras)",
    "returnType" : "Tag",
    "comment" : "\n     * Construct a mock Tag.\n     * <p>This is an application constructed tag, so NfcAdapter methods on this Tag may fail\n     * with {@link IllegalArgumentException} since it does not represent a physical Tag.\n     * <p>This constructor might be useful for mock testing.\n     * @param id The tag identifier, can be null\n     * @param techList must not be null\n     * @return freshly constructed tag\n     * @hide\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "private String[] generateTechStringList(int[] techList)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int[] getTechCodesFromStrings(String[] techStringList) throws IllegalArgumentException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static HashMap<String, Integer> getTechStringToCodeMap()",
    "returnType" : "HashMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getServiceHandle()",
    "returnType" : "int",
    "comment" : "\n     * For use by NfcService only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getTechCodeList()",
    "returnType" : "int[]",
    "comment" : "\n     * For use by NfcService only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getId()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the Tag Identifier (if it has one).\n     * <p>The tag identifier is a low level serial number, used for anti-collision\n     * and identification.\n     * <p> Most tags have a stable unique identifier\n     * (UID), but some tags will generate a random ID every time they are discovered\n     * (RID), and there are some tags with no ID at all (the byte array will be zero-sized).\n     * <p> The size and format of an ID is specific to the RF technology used by the tag.\n     * <p> This function retrieves the ID as determined at discovery time, and does not\n     * perform any further RF communication or block.\n     * @return ID as byte array, never null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTechList()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the technologies available in this tag, as fully qualified class names.\n     * <p>\n     * A technology is an implementation of the {@link TagTechnology} interface,\n     * and can be instantiated by calling the static <code>get(Tag)</code>\n     * method on the implementation with this Tag. The {@link TagTechnology}\n     * object can then be used to perform advanced, technology-specific operations on a tag.\n     * <p>\n     * Android defines a mandatory set of technologies that must be correctly\n     * enumerated by all Android NFC devices, and an optional\n     * set of proprietary technologies.\n     * See {@link TagTechnology} for more details.\n     * <p>\n     * The ordering of the returned array is undefined and should not be relied upon.\n     * @return an array of fully-qualified {@link TagTechnology} class-names.\n     ",
    "links" : [ "android.nfc.tech.TagTechnology" ]
  }, {
    "name" : "public Tag rediscover() throws IOException",
    "returnType" : "Tag",
    "comment" : "      implementation.",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTech(int techType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getTechExtras(int tech)",
    "returnType" : "Bundle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public INfcTag getTagService()",
    "returnType" : "INfcTag",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Human-readable description of the tag, for debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : " static byte[] readBytesWithNull(Parcel in)",
    "returnType" : "byte[]",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " static void writeBytesWithNull(Parcel out, byte[] b)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean setConnectedTechnology(int technology)",
    "returnType" : "boolean",
    "comment" : "\n     * For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectedTechnology()",
    "returnType" : "int",
    "comment" : "\n     * For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTechnologyDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mTechList", "mTechStringList", "mTechExtras", "mServiceHandle", "mTagService", "mConnectedTechnology", "CREATOR" ],
  "methodNames" : [ "public static Tag createMockTag(byte[] id, int[] techList, Bundle[] techListExtras)", "private String[] generateTechStringList(int[] techList)", " static int[] getTechCodesFromStrings(String[] techStringList) throws IllegalArgumentException", "private static HashMap<String, Integer> getTechStringToCodeMap()", "public int getServiceHandle()", "public int[] getTechCodeList()", "public byte[] getId()", "public String[] getTechList()", "public Tag rediscover() throws IOException", "public boolean hasTech(int techType)", "public Bundle getTechExtras(int tech)", "public INfcTag getTagService()", "public String toString()", " static byte[] readBytesWithNull(Parcel in)", " static void writeBytesWithNull(Parcel out, byte[] b)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public synchronized boolean setConnectedTechnology(int technology)", "public int getConnectedTechnology()", "public void setTechnologyDisconnected()" ]
}