{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageInstaller.java",
  "packageName" : "android.content.pm",
  "className" : "SessionInfo",
  "comment" : "\n     * Details for an active install session.\n     ",
  "variables" : [ {
    "name" : "INVALID_ID",
    "type" : "int",
    "comment" : "\n         * A session ID that does not exist or is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "NO_SESSIONS",
    "type" : "int[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "STAGED_SESSION_NO_ERROR",
    "type" : "int",
    "comment" : "\n         * Constant indicating that no error occurred during the preparation or the activation of\n         * this staged session.\n         ",
    "links" : [ ]
  }, {
    "name" : "STAGED_SESSION_VERIFICATION_FAILED",
    "type" : "int",
    "comment" : "\n         * Constant indicating that an error occurred during the verification phase (pre-reboot) of\n         * this staged session.\n         ",
    "links" : [ ]
  }, {
    "name" : "STAGED_SESSION_ACTIVATION_FAILED",
    "type" : "int",
    "comment" : "\n         * Constant indicating that an error occurred during the activation phase (post-reboot) of\n         * this staged session.\n         ",
    "links" : [ ]
  }, {
    "name" : "STAGED_SESSION_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * Constant indicating that an unknown error occurred while processing this staged session.\n         ",
    "links" : [ ]
  }, {
    "name" : "sessionId",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "userId",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installerPackageName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "resolvedBaseCodePath",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "progress",
    "type" : "float",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sealed",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "active",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installReason",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sizeBytes",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appPackageName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appIcon",
    "type" : "Bitmap",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appLabel",
    "type" : "CharSequence",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installLocation",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "originatingUri",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "originatingUid",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "referrerUri",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "grantedRuntimePermissions",
    "type" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "whitelistedRestrictedPermissions",
    "type" : "List<String>",
    "comment" : " {@hide}",
    "links" : [ ]
  }, {
    "name" : "autoRevokePermissionsMode",
    "type" : "int",
    "comment" : " {@hide}",
    "links" : [ ]
  }, {
    "name" : "installFlags",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isMultiPackage",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isStaged",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "forceQueryable",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "parentSessionId",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "childSessionIds",
    "type" : "int[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isStagedSessionApplied",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isStagedSessionReady",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isStagedSessionFailed",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mStagedSessionErrorCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStagedSessionErrorMessage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isCommitted",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "createdMillis",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "updatedMillis",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "rollbackDataPolicy",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SessionInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSessionId()",
    "returnType" : "int",
    "comment" : "\n         * Return the ID for this session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUser()",
    "returnType" : "UserHandle",
    "comment" : "\n         * Return the user associated with this session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getInstallerPackageName()",
    "returnType" : "String",
    "comment" : "\n         * Return the package name of the app that owns this session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getProgress()",
    "returnType" : "float",
    "comment" : "\n         * Return current overall progress of this session, between 0 and 1.\n         * <p>\n         * Note that this progress may not directly correspond to the value\n         * reported by\n         * {@link PackageInstaller.Session#setStagingProgress(float)}, as the\n         * system may carve out a portion of the overall progress to represent\n         * its own internal installation work.\n         ",
    "links" : [ "PackageInstaller.Session#setStagingProgress" ]
  }, {
    "name" : "public boolean isActive()",
    "returnType" : "boolean",
    "comment" : "\n         * Return if this session is currently active.\n         * <p>\n         * A session is considered active whenever there is ongoing forward\n         * progress being made, such as the installer holding an open\n         * {@link Session} instance while streaming data into place, or the\n         * system optimizing code as the result of\n         * {@link Session#commit(IntentSender)}.\n         * <p>\n         * If the installer closes the {@link Session} without committing, the\n         * session is considered inactive until the installer opens the session\n         * again.\n         ",
    "links" : [ "Session", "Session#commit", "Session" ]
  }, {
    "name" : "public boolean isSealed()",
    "returnType" : "boolean",
    "comment" : "\n         * Return if this session is sealed.\n         * <p>\n         * Once sealed, no further changes may be made to the session. A session\n         * is sealed the moment {@link Session#commit(IntentSender)} is called.\n         ",
    "links" : [ "Session#commit" ]
  }, {
    "name" : "public int getInstallReason()",
    "returnType" : "int",
    "comment" : "\n         * Return the reason for installing this package.\n         *\n         * @return The install reason.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpen()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getAppPackageName()",
    "returnType" : "String",
    "comment" : "\n         * Return the package name this session is working with. May be {@code null}\n         * if unknown.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getAppIcon()",
    "returnType" : "Bitmap",
    "comment" : "\n         * Return an icon representing the app being installed. May be {@code null}\n         * if unavailable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAppLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Return a label representing the app being installed. May be {@code null}\n         * if unavailable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Intent createDetailsIntent()",
    "returnType" : "Intent",
    "comment" : "\n         * Return an Intent that can be started to view details about this install\n         * session. This may surface actions such as pause, resume, or cancel.\n         * <p>\n         * In some cases, a matching Activity may not exist, so ensure you safeguard\n         * against this.\n         *\n         * @see PackageInstaller#ACTION_SESSION_DETAILS\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n         * Get the mode of the session as set in the constructor of the {@link SessionParams}.\n         *\n         * @return One of {@link SessionParams#MODE_FULL_INSTALL}\n         *         or {@link SessionParams#MODE_INHERIT_EXISTING}\n         ",
    "links" : [ "SessionParams", "SessionParams#MODE_FULL_INSTALL", "SessionParams#MODE_INHERIT_EXISTING" ]
  }, {
    "name" : "public int getInstallLocation()",
    "returnType" : "int",
    "comment" : "\n         * Get the value set in {@link SessionParams#setInstallLocation(int)}.\n         ",
    "links" : [ "SessionParams#setInstallLocation" ]
  }, {
    "name" : "public long getSize()",
    "returnType" : "long",
    "comment" : "\n         * Get the value as set in {@link SessionParams#setSize(long)}.\n         *\n         * <p>The value is a hint and does not have to match the actual size.\n         ",
    "links" : [ "SessionParams#setSize" ]
  }, {
    "name" : "public Uri getOriginatingUri()",
    "returnType" : "Uri",
    "comment" : "\n         * Get the value set in {@link SessionParams#setOriginatingUri(Uri)}.\n         * Note: This value will only be non-null for the owner of the session.\n         ",
    "links" : [ "SessionParams#setOriginatingUri" ]
  }, {
    "name" : "public int getOriginatingUid()",
    "returnType" : "int",
    "comment" : "\n         * Get the value set in {@link SessionParams#setOriginatingUid(int)}.\n         ",
    "links" : [ "SessionParams#setOriginatingUid" ]
  }, {
    "name" : "public Uri getReferrerUri()",
    "returnType" : "Uri",
    "comment" : "\n         * Get the value set in {@link SessionParams#setReferrerUri(Uri)}\n         * Note: This value will only be non-null for the owner of the session.\n         ",
    "links" : [ "SessionParams#setReferrerUri" ]
  }, {
    "name" : "public String[] getGrantedRuntimePermissions()",
    "returnType" : "String[]",
    "comment" : "\n         * Get the value set in {@link SessionParams#setGrantedRuntimePermissions(String[])}.\n         *\n         * @hide\n         ",
    "links" : [ "SessionParams#setGrantedRuntimePermissions" ]
  }, {
    "name" : "public Set<String> getWhitelistedRestrictedPermissions()",
    "returnType" : "Set<String>",
    "comment" : "\n         * Get the value set in {@link SessionParams#setWhitelistedRestrictedPermissions(Set)}.\n         * Note that if all permissions are whitelisted this method returns {@link\n         * SessionParams#RESTRICTED_PERMISSIONS_ALL}.\n         *\n         * @hide\n         ",
    "links" : [ "SessionParams#setWhitelistedRestrictedPermissions" ]
  }, {
    "name" : "public int getAutoRevokePermissionsMode()",
    "returnType" : "int",
    "comment" : "\n         * Get the status of whether permission auto-revocation should be allowed, ignored, or\n         * deferred to manifest data.\n         *\n         * @see android.app.AppOpsManager#MODE_ALLOWED\n         * @see android.app.AppOpsManager#MODE_IGNORED\n         * @see android.app.AppOpsManager#MODE_DEFAULT\n         *\n         * @return the status of auto-revoke for this package\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAllowDowngrade()",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value set in {@link SessionParams#setAllowDowngrade(boolean)}.\n         *\n         * @deprecated use {@link #getRequestDowngrade()}.\n         * @hide\n         ",
    "links" : [ "SessionParams#setAllowDowngrade", "#getRequestDowngrade" ]
  }, {
    "name" : "public boolean getRequestDowngrade()",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value set in {@link SessionParams#setRequestDowngrade(boolean)}.\n         *\n         * @hide\n         ",
    "links" : [ "SessionParams#setRequestDowngrade" ]
  }, {
    "name" : "public boolean getDontKillApp()",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value set in {@link SessionParams#setDontKillApp(boolean)}.\n         *\n         * @hide\n         ",
    "links" : [ "SessionParams#setDontKillApp" ]
  }, {
    "name" : "public boolean getInstallAsInstantApp(boolean isInstantApp)",
    "returnType" : "boolean",
    "comment" : "\n         * If {@link SessionParams#setInstallAsInstantApp(boolean)} was called with {@code true},\n         * return true. If it was called with {@code false} or if it was not called return false.\n         *\n         * @hide\n         *\n         * @see #getInstallAsFullApp\n         ",
    "links" : [ "SessionParams#setInstallAsInstantApp" ]
  }, {
    "name" : "public boolean getInstallAsFullApp(boolean isInstantApp)",
    "returnType" : "boolean",
    "comment" : "\n         * If {@link SessionParams#setInstallAsInstantApp(boolean)} was called with {@code false},\n         * return true. If it was called with {@code true} or if it was not called return false.\n         *\n         * @hide\n         *\n         * @see #getInstallAsInstantApp\n         ",
    "links" : [ "SessionParams#setInstallAsInstantApp" ]
  }, {
    "name" : "public boolean getInstallAsVirtualPreload()",
    "returnType" : "boolean",
    "comment" : "\n         * Get if {@link SessionParams#setInstallAsVirtualPreload()} was called.\n         *\n         * @hide\n         ",
    "links" : [ "SessionParams#setInstallAsVirtualPreload" ]
  }, {
    "name" : "public boolean getEnableRollback()",
    "returnType" : "boolean",
    "comment" : "\n         * Return whether rollback is enabled or disabled for the given upgrade.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAllocateAggressive()",
    "returnType" : "boolean",
    "comment" : "\n         * Get the value set in {@link SessionParams#setAllocateAggressive(boolean)}.\n         *\n         * @hide\n         ",
    "links" : [ "SessionParams#setAllocateAggressive" ]
  }, {
    "name" : "public Intent getDetailsIntent()",
    "returnType" : "Intent",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMultiPackage()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this session is a multi-package session containing references to other\n         * sessions.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStaged()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this session is a staged session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRollbackDataPolicy()",
    "returnType" : "int",
    "comment" : "\n         * Return the data policy associated with the rollback for the given upgrade.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isForceQueryable()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this session is marked as forceQueryable\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStagedSessionActive()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if this session is an active staged session.\n         *\n         * We consider a session active if it has been committed and it is either pending\n         * verification, or will be applied at next reboot.\n         *\n         * <p>Staged session is active iff:\n         * <ul>\n         *     <li>It is committed, i.e. {@link SessionInfo#isCommitted()} is {@code true}, and\n         *     <li>it is not applied, i.e. {@link SessionInfo#isStagedSessionApplied()} is {@code\n         *     false}, and\n         *     <li>it is not failed, i.e. {@link SessionInfo#isStagedSessionFailed()} is\n         *     {@code false}.\n         * </ul>\n         *\n         * <p>In case of a multi-package session, reasoning above is applied to the parent session,\n         * since that is the one that should have been {@link Session#commit committed}.\n         ",
    "links" : [ "SessionInfo#isCommitted", "SessionInfo#isStagedSessionApplied", "SessionInfo#isStagedSessionFailed", "Session#commit" ]
  }, {
    "name" : "public int getParentSessionId()",
    "returnType" : "int",
    "comment" : "\n         * Returns the parent multi-package session ID if this session belongs to one,\n         * {@link #INVALID_ID} otherwise.\n         ",
    "links" : [ "#INVALID_ID" ]
  }, {
    "name" : "public boolean hasParentSessionId()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if session has a valid parent session, otherwise false.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int[] getChildSessionIds()",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the set of session IDs that will be committed when this session is commited if\n         * this session is a multi-package session.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void checkSessionIsStaged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStagedSessionApplied()",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the staged session has been applied successfully, meaning that all of its\n         * packages have been activated and no further action is required.\n         * Only meaningful if {@code isStaged} is true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStagedSessionReady()",
    "returnType" : "boolean",
    "comment" : "\n         * Whether the staged session is ready to be applied at next reboot. Only meaningful if\n         * {@code isStaged} is true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStagedSessionFailed()",
    "returnType" : "boolean",
    "comment" : "\n         * Whether something went wrong and the staged session is declared as failed, meaning that\n         * it will be ignored at next reboot. Only meaningful if {@code isStaged} is true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getStagedSessionErrorCode()",
    "returnType" : "int",
    "comment" : "\n         * If something went wrong with a staged session, clients can check this error code to\n         * understand which kind of failure happened. Only meaningful if {@code isStaged} is true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getStagedSessionErrorMessage()",
    "returnType" : "String",
    "comment" : "\n         * Text description of the error code returned by {@code getStagedSessionErrorCode}, or\n         * empty string if no error was encountered.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setStagedSessionErrorCode(@StagedSessionErrorCode int errorCode, String errorMessage)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCommitted()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if {@link Session#commit(IntentSender)}} was called for this\n         * session.\n         ",
    "links" : [ "Session#commit" ]
  }, {
    "name" : "public long getCreatedMillis()",
    "returnType" : "long",
    "comment" : "\n         * The timestamp of the initial creation of the session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getUpdatedMillis()",
    "returnType" : "long",
    "comment" : "\n         * The timestamp of the last update that occurred to the session, including changing of\n         * states in case of staged sessions.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "INVALID_ID", "NO_SESSIONS", "STAGED_SESSION_NO_ERROR", "STAGED_SESSION_VERIFICATION_FAILED", "STAGED_SESSION_ACTIVATION_FAILED", "STAGED_SESSION_UNKNOWN", "sessionId", "userId", "installerPackageName", "resolvedBaseCodePath", "progress", "sealed", "active", "mode", "installReason", "sizeBytes", "appPackageName", "appIcon", "appLabel", "installLocation", "originatingUri", "originatingUid", "referrerUri", "grantedRuntimePermissions", "whitelistedRestrictedPermissions", "autoRevokePermissionsMode", "installFlags", "isMultiPackage", "isStaged", "forceQueryable", "parentSessionId", "childSessionIds", "isStagedSessionApplied", "isStagedSessionReady", "isStagedSessionFailed", "mStagedSessionErrorCode", "mStagedSessionErrorMessage", "isCommitted", "createdMillis", "updatedMillis", "rollbackDataPolicy", "CREATOR" ],
  "methodNames" : [ "public int getSessionId()", "public UserHandle getUser()", "public String getInstallerPackageName()", "public float getProgress()", "public boolean isActive()", "public boolean isSealed()", "public int getInstallReason()", "public boolean isOpen()", "public String getAppPackageName()", "public Bitmap getAppIcon()", "public CharSequence getAppLabel()", "public Intent createDetailsIntent()", "public int getMode()", "public int getInstallLocation()", "public long getSize()", "public Uri getOriginatingUri()", "public int getOriginatingUid()", "public Uri getReferrerUri()", "public String[] getGrantedRuntimePermissions()", "public Set<String> getWhitelistedRestrictedPermissions()", "public int getAutoRevokePermissionsMode()", "public boolean getAllowDowngrade()", "public boolean getRequestDowngrade()", "public boolean getDontKillApp()", "public boolean getInstallAsInstantApp(boolean isInstantApp)", "public boolean getInstallAsFullApp(boolean isInstantApp)", "public boolean getInstallAsVirtualPreload()", "public boolean getEnableRollback()", "public boolean getAllocateAggressive()", "public Intent getDetailsIntent()", "public boolean isMultiPackage()", "public boolean isStaged()", "public int getRollbackDataPolicy()", "public boolean isForceQueryable()", "public boolean isStagedSessionActive()", "public int getParentSessionId()", "public boolean hasParentSessionId()", "public int[] getChildSessionIds()", "private void checkSessionIsStaged()", "public boolean isStagedSessionApplied()", "public boolean isStagedSessionReady()", "public boolean isStagedSessionFailed()", "public int getStagedSessionErrorCode()", "public String getStagedSessionErrorMessage()", "public void setStagedSessionErrorCode(@StagedSessionErrorCode int errorCode, String errorMessage)", "public boolean isCommitted()", "public long getCreatedMillis()", "public long getUpdatedMillis()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}