{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/TvRecordingClient.java",
  "packageName" : "android.media.tv",
  "className" : "TvRecordingClient",
  "comment" : "\n * The public interface object used to interact with a specific TV input service for TV program\n * recording.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "RecordingCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTvInputManager",
    "type" : "TvInputManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "TvInputManager.Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "MySessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRecordingStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsTuned",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPaused",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRecordingStopping",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingAppPrivateCommands",
    "type" : "Queue<Pair<String, Bundle>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTvIAppView",
    "type" : "TvInteractiveAppView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordingId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTvInteractiveAppView(@Nullable TvInteractiveAppView view, @Nullable String recordingId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the related {@link TvInteractiveAppView} instance so the interactive app service can be\n     * notified for recording events.\n     *\n     * @param view The related {@link TvInteractiveAppView} instance that is linked to this TV\n     *             recording client. {@code null} to unlink the view.\n     * @param recordingId The ID of the recording which is assigned by the TV application.\n     *                    {@code null} if and only if the TvInteractiveAppView parameter is\n     *                    {@code null}.\n     * @throws IllegalArgumentException when recording ID is {@code null} and the\n     *                                  TvInteractiveAppView is not {@code null}; or when recording\n     *                                  ID is not {@code null} and the TvInteractiveAppView is\n     *                                  {@code null}.\n     * @see TvInteractiveAppView#notifyRecordingScheduled(String, String)\n     * @see TvInteractiveAppView#notifyRecordingStarted(String, String)\n     ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView" ]
  }, {
    "name" : "public void tune(String inputId, Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n     * Tunes to a given channel for TV program recording. The first tune request will create a new\n     * recording session for the corresponding TV input and establish a connection between the\n     * application and the session. If recording has already started in the current recording\n     * session, this method throws an exception.\n     *\n     * <p>The application may call this method before starting or after stopping recording, but not\n     * during recording.\n     *\n     * <p>The recording session will respond by calling\n     * {@link RecordingCallback#onTuned(Uri)} if the tune request was fulfilled, or\n     * {@link RecordingCallback#onError(int)} otherwise.\n     *\n     * @param inputId The ID of the TV input for the given channel.\n     * @param channelUri The URI of a channel.\n     * @throws IllegalStateException If recording is already started.\n     ",
    "links" : [ "#onTuned(Uri)", "#onError(int)" ]
  }, {
    "name" : "public void tune(String inputId, Uri channelUri, Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Tunes to a given channel for TV program recording. The first tune request will create a new\n     * recording session for the corresponding TV input and establish a connection between the\n     * application and the session. If recording has already started in the current recording\n     * session, this method throws an exception. This can be used to provide domain-specific\n     * features that are only known between certain client and their TV inputs.\n     *\n     * <p>The application may call this method before starting or after stopping recording, but not\n     * during recording.\n     *\n     * <p>The recording session will respond by calling\n     * {@link RecordingCallback#onTuned(Uri)} if the tune request was fulfilled, or\n     * {@link RecordingCallback#onError(int)} otherwise.\n     *\n     * @param inputId The ID of the TV input for the given channel.\n     * @param channelUri The URI of a channel.\n     * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n     *            name, i.e. prefixed with a package name you own, so that different developers will\n     *            not create conflicting keys.\n     * @throws IllegalStateException If recording is already started.\n     ",
    "links" : [ "#onTuned(Uri)", "#onError(int)" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases the resources in the current recording session immediately. This may be called at\n     * any time, however if the session is already released, it does nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startRecording(@Nullable Uri programUri)",
    "returnType" : "void",
    "comment" : "\n     * Starts TV program recording in the current recording session. Recording is expected to start\n     * immediately when this method is called. If the current recording session has not yet tuned to\n     * any channel, this method throws an exception.\n     *\n     * <p>The application may supply the URI for a TV program for filling in program specific data\n     * fields in the {@link android.media.tv.TvContract.RecordedPrograms} table.\n     * A non-null {@code programUri} implies the started recording should be of that specific\n     * program, whereas null {@code programUri} does not impose such a requirement and the\n     * recording can span across multiple TV programs. In either case, the application must call\n     * {@link TvRecordingClient#stopRecording()} to stop the recording.\n     *\n     * <p>The recording session will respond by calling {@link RecordingCallback#onError(int)} if\n     * the start request cannot be fulfilled.\n     *\n     * @param programUri The URI for the TV program to record, built by\n     *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n     * @throws IllegalStateException If {@link #tune} request hasn't been handled yet or during\n     *            pause.\n     ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.TvContract.RecordedPrograms", "#tune", "android.media.tv.TvContract#buildProgramUri(long)", "#onError(int)" ]
  }, {
    "name" : "public void startRecording(@Nullable Uri programUri, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Starts TV program recording in the current recording session. Recording is expected to start\n     * immediately when this method is called. If the current recording session has not yet tuned to\n     * any channel, this method throws an exception.\n     *\n     * <p>The application may supply the URI for a TV program for filling in program specific data\n     * fields in the {@link android.media.tv.TvContract.RecordedPrograms} table.\n     * A non-null {@code programUri} implies the started recording should be of that specific\n     * program, whereas null {@code programUri} does not impose such a requirement and the\n     * recording can span across multiple TV programs. In either case, the application must call\n     * {@link TvRecordingClient#stopRecording()} to stop the recording.\n     *\n     * <p>The recording session will respond by calling {@link RecordingCallback#onError(int)} if\n     * the start request cannot be fulfilled.\n     *\n     * @param programUri The URI for the TV program to record, built by\n     *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n     * @param params Domain-specific data for this request. Keys <em>must</em> be a scoped\n     *            name, i.e. prefixed with a package name you own, so that different developers will\n     *            not create conflicting keys.\n     * @throws IllegalStateException If {@link #tune} request hasn't been handled yet or during\n     *            pause.\n     ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.TvContract.RecordedPrograms", "#tune", "android.media.tv.TvContract#buildProgramUri(long)", "#onError(int)" ]
  }, {
    "name" : "public void stopRecording()",
    "returnType" : "void",
    "comment" : "\n     * Stops TV program recording in the current recording session. Recording is expected to stop\n     * immediately when this method is called. If recording has not yet started in the current\n     * recording session, this method does nothing.\n     *\n     * <p>The recording session is expected to create a new data entry in the\n     * {@link android.media.tv.TvContract.RecordedPrograms} table that describes the newly\n     * recorded program and pass the URI to that entry through to\n     * {@link RecordingCallback#onRecordingStopped(Uri)}.\n     * If the stop request cannot be fulfilled, the recording session will respond by calling\n     * {@link RecordingCallback#onError(int)}.\n     ",
    "links" : [ "android.media.tv.TvContract.RecordedPrograms", "#onError(int)", "#onRecordingStopped(Uri)" ]
  }, {
    "name" : "public void pauseRecording()",
    "returnType" : "void",
    "comment" : "\n     * Pause TV program recording in the current recording session. Recording is expected to pause\n     * immediately when this method is called. If recording has not yet started in the current\n     * recording session, this method does nothing.\n     *\n     * <p>In pause status, the application can tune during recording. To continue recording,\n     * please call {@link TvRecordingClient#resumeRecording()} to resume instead of\n     * {@link TvRecordingClient#startRecording(Uri)}. Application can stop\n     * the recording with {@link TvRecordingClient#stopRecording()} in recording pause status.\n     *\n     * <p>If the pause request cannot be fulfilled, the recording session will respond by calling\n     * {@link RecordingCallback#onError(int)}.\n     ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.TvRecordingClient#startRecording(Uri)", "#onError(int)", "android.media.tv.TvRecordingClient#resumeRecording()" ]
  }, {
    "name" : "public void pauseRecording(@NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Pause TV program recording in the current recording session. Recording is expected to pause\n     * immediately when this method is called. If recording has not yet started in the current\n     * recording session, this method does nothing.\n     *\n     * <p>In pause status, the application can tune during recording. To continue recording,\n     * please call {@link TvRecordingClient#resumeRecording()} to resume instead of\n     * {@link TvRecordingClient#startRecording(Uri)}. Application can stop\n     * the recording with {@link TvRecordingClient#stopRecording()} in recording pause status.\n     *\n     * <p>If the pause request cannot be fulfilled, the recording session will respond by calling\n     * {@link RecordingCallback#onError(int)}.\n     *\n     * @param params Domain-specific data for this request.\n     ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.TvRecordingClient#startRecording(Uri)", "#onError(int)", "android.media.tv.TvRecordingClient#resumeRecording()" ]
  }, {
    "name" : "public void resumeRecording()",
    "returnType" : "void",
    "comment" : "\n     * Resume TV program recording only in recording pause status in the current recording session.\n     * Recording is expected to resume immediately when this method is called. If recording has not\n     * yet paused in the current recording session, this method does nothing.\n     *\n     * <p>When record is resumed, the recording is continue and can not re-tune. Application can\n     * stop the recording with {@link TvRecordingClient#stopRecording()} after record resumed.\n     *\n     * <p>If the pause request cannot be fulfilled, the recording session will respond by calling\n     * {@link RecordingCallback#onError(int)}.\n     ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "#onError(int)" ]
  }, {
    "name" : "public void resumeRecording(@NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Resume TV program recording only in recording pause status in the current recording session.\n     * Recording is expected to resume immediately when this method is called. If recording has not\n     * yet paused in the current recording session, this method does nothing.\n     *\n     * <p>When record is resumed, the recording is continues and can not re-tune. Application can\n     * stop the recording with {@link TvRecordingClient#stopRecording()} after record resumed.\n     *\n     * <p>If the resume request cannot be fulfilled, the recording session will respond by calling\n     * {@link RecordingCallback#onError(int)}.\n     *\n     * @param params Domain-specific data for this request.\n     ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "#onError(int)" ]
  }, {
    "name" : "public void sendAppPrivateCommand(@NonNull String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * Sends a private command to the underlying TV input. This can be used to provide\n     * domain-specific features that are only known between certain clients and their TV inputs.\n     *\n     * @param action The name of the private command to send. This <em>must</em> be a scoped name,\n     *            i.e. prefixed with a package name you own, so that different developers will not\n     *            create conflicting commands.\n     * @param data An optional bundle to send with the command.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TvInputManager.SessionCallback getSessionCallback()",
    "returnType" : "TvInputManager.SessionCallback",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTvInteractiveAppView(@Nullable TvInteractiveAppView view, @Nullable String recordingId)", "public void tune(String inputId, Uri channelUri)", "public void tune(String inputId, Uri channelUri, Bundle params)", "public void release()", "private void resetInternal()", "public void startRecording(@Nullable Uri programUri)", "public void startRecording(@Nullable Uri programUri, @NonNull Bundle params)", "public void stopRecording()", "public void pauseRecording()", "public void pauseRecording(@NonNull Bundle params)", "public void resumeRecording()", "public void resumeRecording(@NonNull Bundle params)", "public void sendAppPrivateCommand(@NonNull String action, Bundle data)", "public TvInputManager.SessionCallback getSessionCallback()" ],
  "variableNames" : [ "TAG", "DEBUG", "mCallback", "mHandler", "mTvInputManager", "mSession", "mSessionCallback", "mIsRecordingStarted", "mIsTuned", "mIsPaused", "mIsRecordingStopping", "mPendingAppPrivateCommands", "mTvIAppView", "mRecordingId" ]
}