{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/ParcelableHolder.java",
  "packageName" : "android.os",
  "className" : "ParcelableHolder",
  "comment" : "\n * ParcelableHolder is a Parcelable which can contain another Parcelable.\n * The main use case of ParcelableHolder is to make a Parcelable extensible.\n * For example, an AOSP-defined Parcelable <code>AospDefinedParcelable</code>\n * is expected to be extended by device implementers for their value-add features.\n * Previously without ParcelableHolder, the device implementers had to\n * directly modify the Parcelable to add more fields:\n * <pre> {@code\n * parcelable AospDefinedParcelable {\n *   int a;\n *   String b;\n *   String x; // added by a device implementer\n *   int[] y; // added by a device implementer\n * }}</pre>\n *\n * This practice is very error-prone because the fields added by the device implementer\n * might have a conflict when the Parcelable is revisioned in the next releases of Android.\n *\n * Using ParcelableHolder, one can define an extension point in a Parcelable.\n * <pre> {@code\n * parcelable AospDefinedParcelable {\n *   int a;\n *   String b;\n *   ParcelableHolder extension;\n * }}</pre>\n * Then the device implementers can define their own Parcelable for their extension.\n *\n * <pre> {@code\n * parcelable OemDefinedParcelable {\n *   String x;\n *   int[] y;\n * }}</pre>\n * Finally, the new Parcelable can be attached to the original Parcelable via\n * the ParcelableHolder field.\n *\n * <pre> {@code\n * AospDefinedParcelable ap = ...;\n * OemDefinedParcelable op = new OemDefinedParcelable();\n * op.x = ...;\n * op.y = ...;\n * ap.extension.setParcelable(op);}</pre>\n *\n * <p class=\"note\">ParcelableHolder is <strong>not</strong> thread-safe.</p>\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mParcelable",
    "type" : "Parcelable",
    "comment" : "\n     * This is set by {@link #setParcelable}.\n     * {@link #mParcelable} and {@link #mParcel} are mutually exclusive\n     * if {@link ParcelableHolder} contains value, otherwise, both are null.\n     ",
    "links" : [ "#mParcel", "#setParcelable", "android.os.ParcelableHolder", "#mParcelable" ]
  }, {
    "name" : "mParcel",
    "type" : "Parcel",
    "comment" : "\n     * This is set by {@link #readFromParcel}.\n     * {@link #mParcelable} and {@link #mParcel} are mutually exclusive\n     * if {@link ParcelableHolder} contains value, otherwise, both are null.\n     ",
    "links" : [ "#mParcel", "android.os.ParcelableHolder", "#readFromParcel", "#mParcelable" ]
  }, {
    "name" : "mStability",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ParcelableHolder>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getStability()",
    "returnType" : "int",
    "comment" : "\n     * {@link ParcelableHolder}'s stability is determined by the parcelable\n     * which contains this ParcelableHolder.\n     * For more detail refer to {@link Parcelable#getStability}.\n     ",
    "links" : [ "android.os.ParcelableHolder", "android.os.Parcelable#getStability" ]
  }, {
    "name" : "public void setParcelable(@Nullable Parcelable p)",
    "returnType" : "void",
    "comment" : "\n     * Write a parcelable into ParcelableHolder, the previous parcelable will be removed.\n     * (@link #setParcelable} and (@link #getParcelable} are not thread-safe.\n     * @throws BadParcelableException if the parcelable's stability is more unstable\n     *         ParcelableHolder.\n     ",
    "links" : [ "#setParcelable", "#getParcelable" ]
  }, {
    "name" : "public T getParcelable(@NonNull Class<T> clazz)",
    "returnType" : "T",
    "comment" : "\n     * Read a parcelable from ParcelableHolder.\n     * (@link #setParcelable} and (@link #getParcelable} are not thread-safe.\n     * @return the parcelable that was written by {@link #setParcelable} or {@link #readFromParcel},\n     *         or {@code null} if the parcelable has not been written.\n     * @throws BadParcelableException if T is different from the type written by\n     *         (@link #setParcelable}.\n     ",
    "links" : [ "#setParcelable", "#getParcelable", "#readFromParcel" ]
  }, {
    "name" : "public void readFromParcel(@NonNull Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Read ParcelableHolder from a parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getStability()", "public void setParcelable(@Nullable Parcelable p)", "public T getParcelable(@NonNull Class<T> clazz)", "public void readFromParcel(@NonNull Parcel parcel)", "public void writeToParcel(@NonNull Parcel parcel, int flags)", "public int describeContents()" ],
  "variableNames" : [ "mParcelable", "mParcel", "mStability", "CREATOR" ]
}