{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/AndroidTestRunner.java",
  "packageName" : "android.test",
  "className" : "AndroidTestRunner",
  "comment" : "\n * @deprecated Use\n * <a href=\"{@docRoot}reference/android/support/test/runner/AndroidJUnitRunner.html\">\n * AndroidJUnitRunner</a> instead. New tests should be written using the\n * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Android Testing Support Library</a>.\n ",
  "variables" : [ {
    "name" : "mTestResult",
    "type" : "TestResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestClassName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestCases",
    "type" : "List<TestCase>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSkipExecution",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestListeners",
    "type" : "List<TestListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentation",
    "type" : "Instrumentation",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTestClassName(String testClassName, String testMethodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTest(Test test)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setTest(Test test, Class<? extends Test> testClass)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearTestListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addTestListener(TestListener testListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Class<? extends Test> loadTestClass(String testClassName)",
    "returnType" : "Class<? extends Test>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private TestCase buildSingleTestMethod(Class testClass, String testMethodName)",
    "returnType" : "TestCase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private TestCase newSingleTestMethod(Class testClass, String testMethodName, Constructor constructor, Object... args)",
    "returnType" : "TestCase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldRunSingleTestMethod(String testMethodName, Class<? extends Test> testClass)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Test getTest(Class clazz)",
    "returnType" : "Test",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected TestResult createTestResult()",
    "returnType" : "TestResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSkipExecution(boolean skip)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<TestCase> getTestCases()",
    "returnType" : "List<TestCase>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getTestClassName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TestResult getTestResult()",
    "returnType" : "TestResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void runTest()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void runTest(TestResult testResult)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setContextIfAndroidTestCase(Test test, Context context, Context testContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContext(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setInstrumentationIfInstrumentationTestCase(Test test, Instrumentation instrumentation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInstrumentation(Instrumentation instrumentation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInstrumentaiton(Instrumentation instrumentation)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Incorrect spelling,\n     * use {@link #setInstrumentation(android.app.Instrumentation)} instead.\n     ",
    "links" : [ "#setInstrumentation(android.app.Instrumentation)" ]
  }, {
    "name" : "protected Class loadSuiteClass(String suiteClassName) throws ClassNotFoundException",
    "returnType" : "Class",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testStarted(String testName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testEnded(String testName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testFailed(int status, Test test, Throwable t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void runFailed(String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTestResult", "mTestClassName", "mTestCases", "mContext", "mSkipExecution", "mTestListeners", "mInstrumentation" ],
  "methodNames" : [ "public void setTestClassName(String testClassName, String testMethodName)", "public void setTest(Test test)", "private void setTest(Test test, Class<? extends Test> testClass)", "public void clearTestListeners()", "public void addTestListener(TestListener testListener)", "private Class<? extends Test> loadTestClass(String testClassName)", "private TestCase buildSingleTestMethod(Class testClass, String testMethodName)", "private TestCase newSingleTestMethod(Class testClass, String testMethodName, Constructor constructor, Object... args)", "private boolean shouldRunSingleTestMethod(String testMethodName, Class<? extends Test> testClass)", "private Test getTest(Class clazz)", "protected TestResult createTestResult()", " void setSkipExecution(boolean skip)", "public List<TestCase> getTestCases()", "public String getTestClassName()", "public TestResult getTestResult()", "public void runTest()", "public void runTest(TestResult testResult)", "private void setContextIfAndroidTestCase(Test test, Context context, Context testContext)", "public void setContext(Context context)", "private void setInstrumentationIfInstrumentationTestCase(Test test, Instrumentation instrumentation)", "public void setInstrumentation(Instrumentation instrumentation)", "public void setInstrumentaiton(Instrumentation instrumentation)", "protected Class loadSuiteClass(String suiteClassName) throws ClassNotFoundException", "public void testStarted(String testName)", "public void testEnded(String testName)", "public void testFailed(int status, Test test, Throwable t)", "protected void runFailed(String message)" ]
}