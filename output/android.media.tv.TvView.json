{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/TvView.java",
  "packageName" : "android.media.tv",
  "className" : "TvView",
  "comment" : "\n * Displays TV contents. The TvView class provides a high level interface for applications to show\n * TV programs from various TV sources that implement {@link TvInputService}. (Note that the list of\n * TV inputs available on the system can be obtained by calling\n * {@link TvInputManager#getTvInputList() TvInputManager.getTvInputList()}.)\n *\n * <p>Once the application supplies the URI for a specific TV channel to {@link #tune}\n * method, it takes care of underlying service binding (and unbinding if the current TvView is\n * already bound to a service) and automatically allocates/deallocates resources needed. In addition\n * to a few essential methods to control how the contents are presented, it also provides a way to\n * dispatch input events to the connected TvInputService in order to enable custom key actions for\n * the TV input.\n ",
  "links" : [ "android.media.tv.TvInputManager#getTvInputList()", "#tune", "android.media.tv.TvInputService" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZORDER_MEDIA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZORDER_MEDIA_OVERLAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZORDER_ON_TOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_TV_VIEW",
    "type" : "WeakReference<TvView>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMainTvViewLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMainTvView",
    "type" : "WeakReference<TvView>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceView",
    "type" : "SurfaceView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayViewCreated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayViewFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTvInputManager",
    "type" : "TvInputManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "MySessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "TvInputCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnUnhandledInputEventListener",
    "type" : "OnUnhandledInputEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamVolume",
    "type" : "Float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptionEnabled",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingAppPrivateCommands",
    "type" : "Queue<Pair<String, Bundle>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttrs",
    "type" : "AttributeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParser",
    "type" : "XmlResourceParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefStyleAttr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowZOrder",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseRequestedSurfaceLayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewLeft",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewRight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceViewBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeShiftPositionCallback",
    "type" : "TimeShiftPositionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTvAppAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHolderCallback",
    "type" : "SurfaceHolder.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedInputEventCallback",
    "type" : "FinishedInputEventCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCallback(@Nullable TvInputCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when an event is dispatched to this TvView.\n     *\n     * @param callback The callback to receive events. A value of {@code null} removes the existing\n     *            callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Session getInputSession()",
    "returnType" : "Session",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setMain()",
    "returnType" : "void",
    "comment" : "\n     * Sets this as the main {@link TvView}.\n     *\n     * <p>The main {@link TvView} is a {@link TvView} whose corresponding TV input determines the\n     * HDMI-CEC active source device. For an HDMI port input, one of source devices that is\n     * connected to that HDMI port becomes the active source. For an HDMI-CEC logical device input,\n     * the corresponding HDMI-CEC logical device becomes the active source. For any non-HDMI input\n     * (including the tuner, composite, S-Video, etc.), the internal device (= TV itself) becomes\n     * the active source.\n     *\n     * <p>First tuned {@link TvView} becomes main automatically, and keeps to be main until either\n     * {@link #reset} is called for the main {@link TvView} or {@code setMain()} is called for other\n     * {@link TvView}.\n     * @hide\n     ",
    "links" : [ "#reset", "android.media.tv.TvView" ]
  }, {
    "name" : "public void setZOrderMediaOverlay(boolean isMediaOverlay)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether the TvView's surface is placed on top of another regular surface view in the\n     * window (but still behind the window itself).\n     * This is typically used to place overlays on top of an underlying TvView.\n     *\n     * <p>Note that this must be set before the TvView's containing window is attached to the\n     * window manager.\n     *\n     * <p>Calling this overrides any previous call to {@link #setZOrderOnTop}.\n     *\n     * @param isMediaOverlay {@code true} to be on top of another regular surface, {@code false}\n     *            otherwise.\n     ",
    "links" : [ "#setZOrderOnTop" ]
  }, {
    "name" : "public void setZOrderOnTop(boolean onTop)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether the TvView's surface is placed on top of its window. Normally it is placed\n     * behind the window, to allow it to (for the most part) appear to composite with the views in\n     * the hierarchy.  By setting this, you cause it to be placed above the window. This means that\n     * none of the contents of the window this TvView is in will be visible on top of its surface.\n     *\n     * <p>Note that this must be set before the TvView's containing window is attached to the window\n     * manager.\n     *\n     * <p>Calling this overrides any previous call to {@link #setZOrderMediaOverlay}.\n     *\n     * @param onTop {@code true} to be on top of its window, {@code false} otherwise.\n     ",
    "links" : [ "#setZOrderMediaOverlay" ]
  }, {
    "name" : "public void setStreamVolume(@FloatRange(from = 0.0, to = 1.0) float volume)",
    "returnType" : "void",
    "comment" : "\n     * Sets the relative stream volume of this TvView.\n     *\n     * <p>This method is primarily used to handle audio focus changes or mute a specific TvView when\n     * multiple views are displayed. If the method has not yet been called, the TvView assumes the\n     * default value of {@code 1.0f}.\n     *\n     * @param volume A volume value between {@code 0.0f} to {@code 1.0f}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void overrideTvAppAttributionSource(@NonNull AttributionSource tvAppAttributionSource)",
    "returnType" : "void",
    "comment" : "\n     * Override default attribution source of TV App.\n     *\n     * <p>An attribution source of TV App is used to attribute work to TV Input Service.\n     * The default attribution source is created by {@link Context#getAttributionSource()}.\n     * Call this method before calling {@link #tune(String, Uri, Bundle)} or {@link\n     * #timeShiftPlay(String, Uri)} to override the default attribution source.\n     *\n     * @param tvAppAttributionSource The attribution source of the TV App.\n     ",
    "links" : [ "android.content.Context#getAttributionSource()", "#tune(String", "#timeShiftPlay(String" ]
  }, {
    "name" : "public void tune(@NonNull String inputId, Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n     * Tunes to a given channel.\n     *\n     * @param inputId The ID of the TV input for the given channel.\n     * @param channelUri The URI of a channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void tune(String inputId, Uri channelUri, Bundle params)",
    "returnType" : "void",
    "comment" : "\n     * Tunes to a given channel. This can be used to provide domain-specific features that are only\n     * known between certain clients and their TV inputs.\n     *\n     * @param inputId The ID of TV input for the given channel.\n     * @param channelUri The URI of a channel.\n     * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n     *            name, i.e. prefixed with a package name you own, so that different developers will\n     *            not create conflicting keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this TvView.\n     *\n     * <p>This method is primarily used to un-tune the current TvView.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestUnblockContent(TvContentRating unblockedRating)",
    "returnType" : "void",
    "comment" : "\n     * Requests to unblock TV content according to the given rating.\n     *\n     * <p>This notifies TV input that blocked content is now OK to play.\n     *\n     * @param unblockedRating A TvContentRating to unblock.\n     * @see TvInputService.Session#notifyContentBlocked(TvContentRating)\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unblockContent(TvContentRating unblockedRating)",
    "returnType" : "void",
    "comment" : "\n     * Requests to unblock TV content according to the given rating.\n     *\n     * <p>This notifies TV input that blocked content is now OK to play.\n     *\n     * @param unblockedRating A TvContentRating to unblock.\n     * @see TvInputService.Session#notifyContentBlocked(TvContentRating)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCaptionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the caption in this TvView.\n     *\n     * <p>Note that this method does not take any effect unless the current TvView is tuned.\n     *\n     * @param enabled {@code true} to enable, {@code false} to disable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void selectAudioPresentation(int presentationId, int programId)",
    "returnType" : "void",
    "comment" : "\n     * Selects an audio presentation.\n     *\n     * @param presentationId The ID of the audio presentation to select.\n     * @param programId The ID of the program providing the selected audio presentation.\n     * @see #getAudioPresentations\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AudioPresentation> getAudioPresentations()",
    "returnType" : "List<AudioPresentation>",
    "comment" : "\n     * Returns the list of audio presentations from the selected track of type\n     * {@link TvTrackInfo#TYPE_AUDIO}.\n     *\n     * @return the list of audio presentations from the selected audio track, or an empty list if no\n     * audio presentations are available.\n     * @see #selectAudioPresentation\n     ",
    "links" : [ "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public void selectTrack(int type, String trackId)",
    "returnType" : "void",
    "comment" : "\n     * Selects a track.\n     *\n     * @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO},\n     *            {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}.\n     * @param trackId The ID of the track to select. {@code null} means to unselect the current\n     *            track for a given type.\n     * @see #getTracks\n     * @see #getSelectedTrack\n     ",
    "links" : [ "android.media.tv.TvTrackInfo#TYPE_VIDEO", "android.media.tv.TvTrackInfo#TYPE_SUBTITLE", "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public List<TvTrackInfo> getTracks(int type)",
    "returnType" : "List<TvTrackInfo>",
    "comment" : "\n     * Returns the list of tracks. Returns {@code null} if the information is not available.\n     *\n     * @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO},\n     *            {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}.\n     * @see #selectTrack\n     * @see #getSelectedTrack\n     ",
    "links" : [ "android.media.tv.TvTrackInfo#TYPE_VIDEO", "android.media.tv.TvTrackInfo#TYPE_SUBTITLE", "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public String getSelectedTrack(int type)",
    "returnType" : "String",
    "comment" : "\n     * Returns the ID of the selected track for a given type. Returns {@code null} if the\n     * information is not available or the track is not selected.\n     *\n     * @param type The type of the selected tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO},\n     *            {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}.\n     * @see #selectTrack\n     * @see #getTracks\n     ",
    "links" : [ "android.media.tv.TvTrackInfo#TYPE_VIDEO", "android.media.tv.TvTrackInfo#TYPE_SUBTITLE", "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public void setInteractiveAppNotificationEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables interactive app notification.\n     *\n     * <p>This method enables or disables the event detection from the corresponding TV input. When\n     * it's enabled, the TV input service detects events related to interactive app, such as\n     * AIT (Application Information Table) and sends to TvView or the linked TV interactive app\n     * service.\n     *\n     * @param enabled {@code true} if you want to enable interactive app notifications.\n     *                {@code false} otherwise.\n     *\n     * @see TvInputService.Session#notifyAitInfoUpdated(android.media.tv.AitInfo)\n     * @see android.media.tv.interactive.TvInteractiveAppView#setTvView(TvView)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void timeShiftPlay(String inputId, Uri recordedProgramUri)",
    "returnType" : "void",
    "comment" : "\n     * Plays a given recorded TV program.\n     *\n     * @param inputId The ID of the TV input that created the given recorded program.\n     * @param recordedProgramUri The URI of a recorded program.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void timeShiftPause()",
    "returnType" : "void",
    "comment" : "\n     * Pauses playback. No-op if it is already paused. Call {@link #timeShiftResume} to resume.\n     ",
    "links" : [ "#timeShiftResume" ]
  }, {
    "name" : "public void timeShiftResume()",
    "returnType" : "void",
    "comment" : "\n     * Resumes playback. No-op if it is already resumed. Call {@link #timeShiftPause} to pause.\n     ",
    "links" : [ "#timeShiftPause" ]
  }, {
    "name" : "public void timeShiftSeekTo(long timeMs)",
    "returnType" : "void",
    "comment" : "\n     * Seeks to a specified time position. {@code timeMs} must be equal to or greater than the start\n     * position returned by {@link TimeShiftPositionCallback#onTimeShiftStartPositionChanged} and\n     * equal to or less than the current time.\n     *\n     * @param timeMs The time position to seek to, in milliseconds since the epoch.\n     ",
    "links" : [ "#onTimeShiftStartPositionChanged" ]
  }, {
    "name" : "public void timeShiftSetPlaybackParams(@NonNull PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n     * Sets playback rate using {@link android.media.PlaybackParams}.\n     *\n     * @param params The playback params.\n     ",
    "links" : [ "android.media.PlaybackParams" ]
  }, {
    "name" : "public void timeShiftSetMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets time shift mode.\n     *\n     * @param mode The time shift mode. The value is one of the following:\n     * {@link TvInputManager#TIME_SHIFT_MODE_OFF}, {@link TvInputManager#TIME_SHIFT_MODE_LOCAL},\n     * {@link TvInputManager#TIME_SHIFT_MODE_NETWORK},\n     * {@link TvInputManager#TIME_SHIFT_MODE_AUTO}.\n     ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_MODE_AUTO", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_OFF", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_NETWORK", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_LOCAL" ]
  }, {
    "name" : "public void stopPlayback(@TvInteractiveAppService.PlaybackCommandStopMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Stops playback of the Audio, Video, and CC streams, but continue filtering the metadata.\n     *\n     * <p>The metadata that will continue to be filtered includes the PSI\n     * (Program specific information) and SI (Service Information), part of ISO/IEC 13818-1.\n     *\n     * <p> Note that this is different from {@link #timeShiftPause()} as this completely drops\n     * the stream, making it impossible to resume from this position again.\n     ",
    "links" : [ "#timeShiftPause()" ]
  }, {
    "name" : "public void resumePlayback()",
    "returnType" : "void",
    "comment" : "\n     * Resumes playback of the Audio, Video, and CC streams.\n     *\n     * <p> Note that this is different from {@link #timeShiftResume()} as this is intended to\n     * be used after {@link #stopPlayback(int)} has been called. This is used to resume\n     * playback from the current position in the live broadcast.\n\n     * <p> If this is the first time playback should begin, you will need to use\n     * {@link #tune(String, Uri, Bundle)} to begin playback.\n     ",
    "links" : [ "#tune(String", "#timeShiftResume()", "#stopPlayback(int)" ]
  }, {
    "name" : "public void setVideoFrozen(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not the video is frozen. While the video is frozen, audio playback will\n     * continue.\n     *\n     * <p>This should be invoked after a {@link TvInteractiveAppService.Session#requestCommand} is\n     * received with the command to freeze the video.\n     *\n     * <p>This will freeze the video to the last frame when the state is set to {@code true}.\n     *\n     * @see TvView.TvInputCallback#setVideoFrozen(boolean)\n     * @param isFrozen whether or not the video is frozen.\n     ",
    "links" : [ "TvInteractiveAppService.Session#requestCommand" ]
  }, {
    "name" : "public void notifyTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * Sends TV messages to the session for testing purposes\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeShiftPositionCallback(@Nullable TimeShiftPositionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the callback to be invoked when the time shift position is changed.\n     *\n     * @param callback The callback to receive time shift position changes. A value of {@code null}\n     *            removes the existing callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensurePositionTracking()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendAppPrivateCommand(@NonNull String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n     * Sends a private command to the underlying TV input. This can be used to provide\n     * domain-specific features that are only known between certain clients and their TV inputs.\n     *\n     * @param action The name of the private command to send. This <em>must</em> be a scoped name,\n     *            i.e. prefixed with a package name you own, so that different developers will not\n     *            create conflicting commands.\n     * @param data An optional bundle to send with the command.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchUnhandledInputEvent(InputEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Dispatches an unhandled input event to the next receiver.\n     *\n     * <p>Except system keys, TvView always consumes input events in the normal flow. This is called\n     * asynchronously from where the event is dispatched. It gives the host application a chance to\n     * dispatch the unhandled input events.\n     *\n     * @param event The input event.\n     * @return {@code true} if the event was handled by the view, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onUnhandledInputEvent(InputEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when an unhandled input event also has not been handled by the user provided\n     * callback. This is the last chance to handle the unhandled input event in the TvView.\n     *\n     * @param event The input event.\n     * @return If you handled the event, return {@code true}. If you want to allow the event to be\n     *         handled by the next receiver, return {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnUnhandledInputEventListener(OnUnhandledInputEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be invoked when an input event is not handled by the bound TV input.\n     *\n     * @param listener The callback to be invoked when the unhandled input event is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTvMessageEnabled(@TvInputManager.TvMessageType int type, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables TV message detection in the stream of the bound TV input.\n     *\n     * @param type The type of message received, such as\n     *             {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n     * @param enabled {@code true} if you want to enable TV message detection\n     *                {@code false} otherwise.\n     ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK" ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean gatherTransparentRegion(Region region)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onVisibilityChanged(View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetSurfaceView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSessionSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createSessionOverlayView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeSessionOverlayView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void relayoutSessionOverlayView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect getViewFrameOnScreen()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkChangeHdmiCecActiveSourcePermission()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCallback(@Nullable TvInputCallback callback)", "public Session getInputSession()", "public void setMain()", "public void setZOrderMediaOverlay(boolean isMediaOverlay)", "public void setZOrderOnTop(boolean onTop)", "public void setStreamVolume(@FloatRange(from = 0.0, to = 1.0) float volume)", "public void overrideTvAppAttributionSource(@NonNull AttributionSource tvAppAttributionSource)", "public void tune(@NonNull String inputId, Uri channelUri)", "public void tune(String inputId, Uri channelUri, Bundle params)", "public void reset()", "private void resetInternal()", "public void requestUnblockContent(TvContentRating unblockedRating)", "public void unblockContent(TvContentRating unblockedRating)", "public void setCaptionEnabled(boolean enabled)", "public void selectAudioPresentation(int presentationId, int programId)", "public List<AudioPresentation> getAudioPresentations()", "public void selectTrack(int type, String trackId)", "public List<TvTrackInfo> getTracks(int type)", "public String getSelectedTrack(int type)", "public void setInteractiveAppNotificationEnabled(boolean enabled)", "public void timeShiftPlay(String inputId, Uri recordedProgramUri)", "public void timeShiftPause()", "public void timeShiftResume()", "public void timeShiftSeekTo(long timeMs)", "public void timeShiftSetPlaybackParams(@NonNull PlaybackParams params)", "public void timeShiftSetMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)", "public void stopPlayback(@TvInteractiveAppService.PlaybackCommandStopMode int mode)", "public void resumePlayback()", "public void setVideoFrozen(boolean isFrozen)", "public void notifyTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)", "public void setTimeShiftPositionCallback(@Nullable TimeShiftPositionCallback callback)", "private void ensurePositionTracking()", "public void sendAppPrivateCommand(@NonNull String action, Bundle data)", "public boolean dispatchUnhandledInputEvent(InputEvent event)", "public boolean onUnhandledInputEvent(InputEvent event)", "public void setOnUnhandledInputEventListener(OnUnhandledInputEventListener listener)", "public void setTvMessageEnabled(@TvInputManager.TvMessageType int type, boolean enabled)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean dispatchTouchEvent(MotionEvent event)", "public boolean dispatchTrackballEvent(MotionEvent event)", "public boolean dispatchGenericMotionEvent(MotionEvent event)", "public void dispatchWindowFocusChanged(boolean hasFocus)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public boolean gatherTransparentRegion(Region region)", "public void draw(Canvas canvas)", "protected void dispatchDraw(Canvas canvas)", "protected void onVisibilityChanged(View changedView, int visibility)", "private void resetSurfaceView()", "private void setSessionSurface(Surface surface)", "private void dispatchSurfaceChanged(int format, int width, int height)", "private void createSessionOverlayView()", "private void removeSessionOverlayView()", "private void relayoutSessionOverlayView()", "private Rect getViewFrameOnScreen()", "private boolean checkChangeHdmiCecActiveSourcePermission()" ],
  "variableNames" : [ "TAG", "DEBUG", "ZORDER_MEDIA", "ZORDER_MEDIA_OVERLAY", "ZORDER_ON_TOP", "NULL_TV_VIEW", "sMainTvViewLock", "sMainTvView", "mHandler", "mSession", "mSurfaceView", "mSurface", "mOverlayViewCreated", "mOverlayViewFrame", "mTvInputManager", "mSessionCallback", "mCallback", "mOnUnhandledInputEventListener", "mStreamVolume", "mCaptionEnabled", "mPendingAppPrivateCommands", "mSurfaceChanged", "mSurfaceFormat", "mSurfaceWidth", "mSurfaceHeight", "mAttrs", "mParser", "mDefStyleAttr", "mWindowZOrder", "mUseRequestedSurfaceLayout", "mSurfaceViewLeft", "mSurfaceViewRight", "mSurfaceViewTop", "mSurfaceViewBottom", "mTimeShiftPositionCallback", "mTvAppAttributionSource", "mSurfaceHolderCallback", "mFinishedInputEventCallback" ]
}