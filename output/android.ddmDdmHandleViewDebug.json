{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/ddm/DdmHandleViewDebug.java",
  "packageName" : "android.ddm",
  "className" : "DdmHandleViewDebug",
  "comment" : "\n * Handle various requests related to profiling / debugging of the view system.\n * Support for these features are advertised via {@link DdmHandleHello}.\n ",
  "variables" : [ {
    "name" : "CHUNK_VULW",
    "type" : "int",
    "comment" : " List {@link ViewRootImpl}'s of this process. ",
    "links" : [ "ViewRootImpl" ]
  }, {
    "name" : "CHUNK_VURT",
    "type" : "int",
    "comment" : " Operation on view root, first parameter in packet should be one of VURT_* constants ",
    "links" : [ ]
  }, {
    "name" : "VURT_DUMP_HIERARCHY",
    "type" : "int",
    "comment" : " Dump view hierarchy. ",
    "links" : [ ]
  }, {
    "name" : "VURT_CAPTURE_LAYERS",
    "type" : "int",
    "comment" : " Capture View Layers. ",
    "links" : [ ]
  }, {
    "name" : "VURT_DUMP_THEME",
    "type" : "int",
    "comment" : " Dump View Theme. ",
    "links" : [ ]
  }, {
    "name" : "CHUNK_VUOP",
    "type" : "int",
    "comment" : "\n     * Generic View Operation, first parameter in the packet should be one of the\n     * VUOP_* constants below.\n     ",
    "links" : [ ]
  }, {
    "name" : "VUOP_CAPTURE_VIEW",
    "type" : "int",
    "comment" : " Capture View. ",
    "links" : [ ]
  }, {
    "name" : "VUOP_DUMP_DISPLAYLIST",
    "type" : "int",
    "comment" : " Obtain the Display List corresponding to the view. ",
    "links" : [ ]
  }, {
    "name" : "VUOP_PROFILE_VIEW",
    "type" : "int",
    "comment" : " Profile a view. ",
    "links" : [ ]
  }, {
    "name" : "VUOP_INVOKE_VIEW_METHOD",
    "type" : "int",
    "comment" : " Invoke a method on the view. ",
    "links" : [ ]
  }, {
    "name" : "VUOP_SET_LAYOUT_PARAMETER",
    "type" : "int",
    "comment" : " Set layout parameter. ",
    "links" : [ ]
  }, {
    "name" : "ERR_INVALID_OP",
    "type" : "int",
    "comment" : " Error code indicating operation specified in chunk is invalid. ",
    "links" : [ ]
  }, {
    "name" : "ERR_INVALID_PARAM",
    "type" : "int",
    "comment" : " Error code indicating that the parameters are invalid. ",
    "links" : [ ]
  }, {
    "name" : "ERR_EXCEPTION",
    "type" : "int",
    "comment" : " Error code indicating an exception while performing operation. ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "DdmHandleViewDebug",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void register()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disconnected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Chunk handleChunk(Chunk request)",
    "returnType" : "Chunk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Chunk listWindows()",
    "returnType" : "Chunk",
    "comment" : " Returns the list of windows owned by this client. ",
    "links" : [ ]
  }, {
    "name" : "private View getRootView(ByteBuffer in)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View getTargetView(View root, ByteBuffer in)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Chunk dumpHierarchy(View rootView, ByteBuffer in)",
    "returnType" : "Chunk",
    "comment" : "\n     * Returns the view hierarchy and/or view properties starting at the provided view.\n     * Based on the input options, the return data may include:\n     *  - just the view hierarchy\n     *  - view hierarchy & the properties for each of the views\n     *  - just the view properties for a specific view.\n     *  TODO: Currently this only returns views starting at the root, need to fix so that\n     *  it can return properties of any view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk captureLayers(View rootView)",
    "returnType" : "Chunk",
    "comment" : " Returns a buffer with region details & bitmap of every single view. ",
    "links" : [ ]
  }, {
    "name" : "private Chunk dumpTheme(View rootView)",
    "returnType" : "Chunk",
    "comment" : "\n     * Returns the Theme dump of the provided view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk captureView(View rootView, View targetView)",
    "returnType" : "Chunk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Chunk dumpDisplayLists(final View rootView, final View targetView)",
    "returnType" : "Chunk",
    "comment" : " Returns the display lists corresponding to the provided view. ",
    "links" : [ ]
  }, {
    "name" : "private Chunk invokeViewMethod(final View rootView, final View targetView, ByteBuffer in)",
    "returnType" : "Chunk",
    "comment" : "\n     * Invokes provided method on the view.\n     * The method name and its arguments are passed in as inputs via the byte buffer.\n     * The buffer contains:<ol>\n     *  <li> len(method name) </li>\n     *  <li> method name </li>\n     *  <li> # of args </li>\n     *  <li> arguments: Each argument comprises of a type specifier followed by the actual argument.\n     *          The type specifier is a single character as used in JNI:\n     *          (Z - boolean, B - byte, C - char, S - short, I - int, J - long,\n     *          F - float, D - double). <p>\n     *          The type specifier is followed by the actual value of argument.\n     *          Booleans are encoded via bytes with 0 indicating false.</li>\n     * </ol>\n     * Methods that take no arguments need only specify the method name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk setLayoutParameter(final View rootView, final View targetView, ByteBuffer in)",
    "returnType" : "Chunk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Chunk profileView(View rootView, final View targetView)",
    "returnType" : "Chunk",
    "comment" : " Profiles provided view. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CHUNK_VULW", "CHUNK_VURT", "VURT_DUMP_HIERARCHY", "VURT_CAPTURE_LAYERS", "VURT_DUMP_THEME", "CHUNK_VUOP", "VUOP_CAPTURE_VIEW", "VUOP_DUMP_DISPLAYLIST", "VUOP_PROFILE_VIEW", "VUOP_INVOKE_VIEW_METHOD", "VUOP_SET_LAYOUT_PARAMETER", "ERR_INVALID_OP", "ERR_INVALID_PARAM", "ERR_EXCEPTION", "TAG", "sInstance" ],
  "methodNames" : [ "public static void register()", "public void connected()", "public void disconnected()", "public Chunk handleChunk(Chunk request)", "private Chunk listWindows()", "private View getRootView(ByteBuffer in)", "private View getTargetView(View root, ByteBuffer in)", "private Chunk dumpHierarchy(View rootView, ByteBuffer in)", "private Chunk captureLayers(View rootView)", "private Chunk dumpTheme(View rootView)", "private Chunk captureView(View rootView, View targetView)", "private Chunk dumpDisplayLists(final View rootView, final View targetView)", "private Chunk invokeViewMethod(final View rootView, final View targetView, ByteBuffer in)", "private Chunk setLayoutParameter(final View rootView, final View targetView, ByteBuffer in)", "private Chunk profileView(View rootView, final View targetView)" ]
}