{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationDataBuilder.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationDataBuilder",
  "comment" : "\n * Low-level CollationData builder.\n * Takes (character, CE) pairs and builds them into runtime data structures.\n * Supports characters with context prefixes and contraction suffixes.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "IS_BUILDER_JAMO_CE32",
    "type" : "int",
    "comment" : " @see Collation.BUILDER_DATA_TAG ",
    "links" : [ ]
  }, {
    "name" : "nfcImpl",
    "type" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "base",
    "type" : "CollationData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "baseSettings",
    "type" : "CollationSettings",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trie",
    "type" : "Trie2Writable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ce32s",
    "type" : "UVector32",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ce64s",
    "type" : "UVector64",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "conditionalCE32s",
    "type" : "ArrayList<ConditionalCE32>",
    "comment" : " vector of ConditionalCE32",
    "links" : [ ]
  }, {
    "name" : "contextChars",
    "type" : "UnicodeSet",
    "comment" : " Characters that have context (prefixes or contraction suffixes).",
    "links" : [ ]
  }, {
    "name" : "contexts",
    "type" : "StringBuilder",
    "comment" : " Serialized UCharsTrie structures for finalized contexts.",
    "links" : [ ]
  }, {
    "name" : "contextsEra",
    "type" : "int",
    "comment" : "\n     * The \"era\" of building intermediate contexts.\n     * When the array of cached, temporary contexts overflows, then clearContexts()\n     * removes them all and invalidates the builtCE32 that used to point to built tries.\n     * See {@link ConditionalCE32#era}.\n     ",
    "links" : [ "#era" ]
  }, {
    "name" : "unsafeBackwardSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "modified",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fastLatinEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fastLatinBuilder",
    "type" : "CollationFastLatinBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "collIter",
    "type" : "DataBuilderCollationIterator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void initForTailoring(CollationData b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isCompressibleLeadByte(int b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isCompressiblePrimary(long p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasMappings()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this builder has mappings (e.g., add() has been called)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isAssigned(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if c has CEs in this builder\n     ",
    "links" : [ ]
  }, {
    "name" : " void add(CharSequence prefix, CharSequence s, long[] ces, int cesLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int encodeCEs(long[] ces, int cesLength)",
    "returnType" : "int",
    "comment" : "\n     * Encodes the ces as either the returned ce32 by itself,\n     * or by storing an expansion, with the returned ce32 referring to that.\n     *\n     * <p>add(p, s, ces, cesLength) = addCE32(p, s, encodeCEs(ces, cesLength))\n     ",
    "links" : [ ]
  }, {
    "name" : " void addCE32(CharSequence prefix, CharSequence s, int ce32)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void copyFrom(CollationDataBuilder src, CEModifier modifier)",
    "returnType" : "void",
    "comment" : "\n     * Copies all mappings from the src builder, with modifications.\n     * This builder here must not be built yet, and should be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : " void optimize(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void suppressContractions(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void enableFastLatin()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void build(CollationData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getCEs(CharSequence s, long[] ces, int cesLength)",
    "returnType" : "int",
    "comment" : "\n     * Looks up CEs for s and appends them to the ces array.\n     * Does not handle normalization: s should be in FCD form.\n     *\n     * Does not write completely ignorable CEs.\n     * Does not write beyond Collation.MAX_EXPANSION_LENGTH.\n     *\n     * @return incremented cesLength\n     ",
    "links" : [ ]
  }, {
    "name" : " int getCEs(CharSequence prefix, CharSequence s, long[] ces, int cesLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getCE32FromOffsetCE32(boolean fromBase, int c, int ce32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int addCE(long ce)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int addCE32(int ce32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int addConditionalCE32(String context, int ce32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ConditionalCE32 getConditionalCE32(int index)",
    "returnType" : "ConditionalCE32",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ConditionalCE32 getConditionalCE32ForCE32(int ce32)",
    "returnType" : "ConditionalCE32",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int makeBuilderContextCE32(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static boolean isBuilderContextCE32(int ce32)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int encodeOneCEAsCE32(long ce)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int encodeOneCE(long ce)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int encodeExpansion(long[] ces, int start, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int encodeExpansion32(int[] newCE32s, int start, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int copyFromBaseCE32(int c, int ce32, boolean withContext)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int copyContractionsFromBaseCE32(StringBuilder context, int c, int ce32, ConditionalCE32 cond)",
    "returnType" : "int",
    "comment" : "\n     * Copies base contractions to a list of ConditionalCE32.\n     * Sets cond.next to the index of the first new item\n     * and returns the index of the last new item.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void enumRangeForCopy(int start, int end, int value, CopyHelper helper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean getJamoCE32s(int[] jamoCE32s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setDigitTags()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setLeadSurrogates()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void buildMappings(CollationData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void clearContexts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void buildContexts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int buildContext(ConditionalCE32 head)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int addContextTrie(int defaultCE32, CharsTrieBuilder trieBuilder)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void buildFastLatinTable(CollationData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getCEs(CharSequence s, int start, long[] ces, int cesLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int jamoCpFromIndex(int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isMutable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void initForTailoring(CollationData b)", " boolean isCompressibleLeadByte(int b)", " boolean isCompressiblePrimary(long p)", " boolean hasMappings()", " boolean isAssigned(int c)", " void add(CharSequence prefix, CharSequence s, long[] ces, int cesLength)", " int encodeCEs(long[] ces, int cesLength)", " void addCE32(CharSequence prefix, CharSequence s, int ce32)", " void copyFrom(CollationDataBuilder src, CEModifier modifier)", " void optimize(UnicodeSet set)", " void suppressContractions(UnicodeSet set)", " void enableFastLatin()", " void build(CollationData data)", " int getCEs(CharSequence s, long[] ces, int cesLength)", " int getCEs(CharSequence prefix, CharSequence s, long[] ces, int cesLength)", "protected int getCE32FromOffsetCE32(boolean fromBase, int c, int ce32)", "protected int addCE(long ce)", "protected int addCE32(int ce32)", "protected int addConditionalCE32(String context, int ce32)", "protected ConditionalCE32 getConditionalCE32(int index)", "protected ConditionalCE32 getConditionalCE32ForCE32(int ce32)", "protected static int makeBuilderContextCE32(int index)", "protected static boolean isBuilderContextCE32(int ce32)", "protected static int encodeOneCEAsCE32(long ce)", "protected int encodeOneCE(long ce)", "protected int encodeExpansion(long[] ces, int start, int length)", "protected int encodeExpansion32(int[] newCE32s, int start, int length)", "protected int copyFromBaseCE32(int c, int ce32, boolean withContext)", "protected int copyContractionsFromBaseCE32(StringBuilder context, int c, int ce32, ConditionalCE32 cond)", "private static void enumRangeForCopy(int start, int end, int value, CopyHelper helper)", "protected boolean getJamoCE32s(int[] jamoCE32s)", "protected void setDigitTags()", "protected void setLeadSurrogates()", "protected void buildMappings(CollationData data)", "protected void clearContexts()", "protected void buildContexts()", "protected int buildContext(ConditionalCE32 head)", "protected int addContextTrie(int defaultCE32, CharsTrieBuilder trieBuilder)", "protected void buildFastLatinTable(CollationData data)", "protected int getCEs(CharSequence s, int start, long[] ces, int cesLength)", "protected static int jamoCpFromIndex(int i)", "protected final boolean isMutable()" ],
  "variableNames" : [ "IS_BUILDER_JAMO_CE32", "nfcImpl", "base", "baseSettings", "trie", "ce32s", "ce64s", "conditionalCE32s", "contextChars", "contexts", "contextsEra", "unsafeBackwardSet", "modified", "fastLatinEnabled", "fastLatinBuilder", "collIter" ]
}