{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/filterfw/FilterFunctionEnvironment.java",
  "packageName" : "android.filterfw",
  "className" : "FilterFunctionEnvironment",
  "comment" : "\n * A FilterFunctionEnvironment provides a simple functional front-end to manually executing\n * filters. Use this environment if a graph-based approach is not convenient for your case.\n * Typically, a FilterFunctionEnvironment is used as follows:\n *   1. Instantiate a new FilterFunctionEnvironment instance.\n *   2. Perform any configuration, such as setting a GL environment.\n *   3. Wrap Filters into FilterFunctions by calling createFunction().\n *   4. Execute FilterFunctions individually and use the results for further processing.\n * Additionally, there is a convenience method to execute a number of filters in sequence.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public FilterFunction createFunction(Class filterClass, Object... parameters)",
    "returnType" : "FilterFunction",
    "comment" : "\n     * Create a new FilterFunction from a specific filter class. The function is initialized with\n     * the given key-value list of parameters. Note, that this function uses the default shared\n     * FilterFactory to create the filter instance.\n     *\n     * @param filterClass   The class of the filter to wrap. This must be a Filter subclass.\n     * @param parameters    An argument list of alternating key-value filter parameters.\n     * @return             A new FilterFunction instance.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public FilterFunction createFunction(Class filterClass, Object... parameters)" ],
  "variableNames" : [ ]
}