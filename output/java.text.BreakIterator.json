{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/BreakIterator.java",
  "packageName" : "java.text",
  "className" : "BreakIterator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "DONE",
    "type" : "int",
    "comment" : "\n     * DONE is returned by previous(), next(), next(int), preceding(int)\n     * and following(int) when either the first or last text boundary has been\n     * reached.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Create a copy of this iterator\n     * @return A copy of this\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int first()",
    "returnType" : "int",
    "comment" : "\n     * Returns the first boundary. The iterator's current position is set\n     * to the first text boundary.\n     * @return The character index of the first text boundary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int last()",
    "returnType" : "int",
    "comment" : "\n     * Returns the last boundary. The iterator's current position is set\n     * to the last text boundary.\n     * @return The character index of the last text boundary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next(int n)",
    "returnType" : "int",
    "comment" : "\n     * Returns the nth boundary from the current boundary. If either\n     * the first or last text boundary has been reached, it returns\n     * {@code BreakIterator.DONE} and the current position is set to either\n     * the first or last text boundary depending on which one is reached. Otherwise,\n     * the iterator's current position is set to the new boundary.\n     * For example, if the iterator's current position is the mth text boundary\n     * and three more boundaries exist from the current boundary to the last text\n     * boundary, the next(2) call will return m + 2. The new text position is set\n     * to the (m + 2)th text boundary. A next(4) call would return\n     * {@code BreakIterator.DONE} and the last text boundary would become the\n     * new text position.\n     * @param n which boundary to return.  A value of 0\n     * does nothing.  Negative values move to previous boundaries\n     * and positive values move to later boundaries.\n     * @return The character index of the nth boundary from the current position\n     * or {@code BreakIterator.DONE} if either first or last text boundary\n     * has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next()",
    "returnType" : "int",
    "comment" : "\n     * Returns the boundary following the current boundary. If the current boundary\n     * is the last text boundary, it returns {@code BreakIterator.DONE} and\n     * the iterator's current position is unchanged. Otherwise, the iterator's\n     * current position is set to the boundary following the current boundary.\n     * @return The character index of the next text boundary or\n     * {@code BreakIterator.DONE} if the current boundary is the last text\n     * boundary.\n     * Equivalent to next(1).\n     * @see #next(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int previous()",
    "returnType" : "int",
    "comment" : "\n     * Returns the boundary preceding the current boundary. If the current boundary\n     * is the first text boundary, it returns {@code BreakIterator.DONE} and\n     * the iterator's current position is unchanged. Otherwise, the iterator's\n     * current position is set to the boundary preceding the current boundary.\n     * @return The character index of the previous text boundary or\n     * {@code BreakIterator.DONE} if the current boundary is the first text\n     * boundary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int following(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the first boundary following the specified character offset. If the\n     * specified offset is equal to the last text boundary, it returns\n     * {@code BreakIterator.DONE} and the iterator's current position is unchanged.\n     * Otherwise, the iterator's current position is set to the returned boundary.\n     * The value returned is always greater than the offset or the value\n     * {@code BreakIterator.DONE}.\n     * @param offset the character offset to begin scanning.\n     * @return The first boundary after the specified offset or\n     * {@code BreakIterator.DONE} if the last text boundary is passed in\n     * as the offset.\n     * @throws     IllegalArgumentException if the specified offset is less than\n     * the first text boundary or greater than the last text boundary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int preceding(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the last boundary preceding the specified character offset. If the\n     * specified offset is equal to the first text boundary, it returns\n     * {@code BreakIterator.DONE} and the iterator's current position is unchanged.\n     * Otherwise, the iterator's current position is set to the returned boundary.\n     * The value returned is always less than the offset or the value\n     * {@code BreakIterator.DONE}.\n     * @param offset the character offset to begin scanning.\n     * @return The last boundary before the specified offset or\n     * {@code BreakIterator.DONE} if the first text boundary is passed in\n     * as the offset.\n     * @throws      IllegalArgumentException if the specified offset is less than\n     * the first text boundary or greater than the last text boundary.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified character offset is a text boundary.\n     * @param offset the character offset to check.\n     * @return {@code true} if \"offset\" is a boundary position,\n     * {@code false} otherwise.\n     * @throws      IllegalArgumentException if the specified offset is less than\n     * the first text boundary or greater than the last text boundary.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int current()",
    "returnType" : "int",
    "comment" : "\n     * Returns character index of the text boundary that was most\n     * recently returned by next(), next(int), previous(), first(), last(),\n     * following(int) or preceding(int). If any of these methods returns\n     * {@code BreakIterator.DONE} because either first or last text boundary\n     * has been reached, it returns the first or last text boundary depending on\n     * which one is reached.\n     * @return The text boundary returned from the above methods, first or last\n     * text boundary.\n     * @see #next()\n     * @see #next(int)\n     * @see #previous()\n     * @see #first()\n     * @see #last()\n     * @see #following(int)\n     * @see #preceding(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharacterIterator getText()",
    "returnType" : "CharacterIterator",
    "comment" : "\n     * Get the text being scanned\n     * @return the text being scanned\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(String newText)",
    "returnType" : "void",
    "comment" : "\n     * Set a new text string to be scanned.  The current scan\n     * position is reset to first().\n     * @param newText new text to scan.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setText(CharacterIterator newText)",
    "returnType" : "void",
    "comment" : "\n     * Set a new text for scanning.  The current scan\n     * position is reset to first().\n     * @param newText new text to scan.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getWordInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#word\">word breaks</a>\n     * for the {@linkplain Locale#getDefault() default locale}.\n     * @return A break iterator for word breaks\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getWordInstance(Locale locale)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#word\">word breaks</a>\n     * for the given locale.\n     * @param locale the desired locale\n     * @return A break iterator for word breaks\n     * @throws    NullPointerException if {@code locale} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getLineInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#line\">line breaks</a>\n     * for the {@linkplain Locale#getDefault() default locale}.\n     * @return A break iterator for line breaks\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getLineInstance(Locale locale)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#line\">line breaks</a>\n     * for the given locale.\n     * @param locale the desired locale\n     * @return A break iterator for line breaks\n     * @throws    NullPointerException if {@code locale} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getCharacterInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#character\">character breaks</a>\n     * for the {@linkplain Locale#getDefault() default locale}.\n     * @return A break iterator for character breaks\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getCharacterInstance(Locale locale)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#character\">character breaks</a>\n     * for the given locale.\n     * @param locale the desired locale\n     * @return A break iterator for character breaks\n     * @throws    NullPointerException if {@code locale} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getSentenceInstance()",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#sentence\">sentence breaks</a>\n     * for the {@linkplain Locale#getDefault() default locale}.\n     * @return A break iterator for sentence breaks\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BreakIterator getSentenceInstance(Locale locale)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Returns a new {@code BreakIterator} instance\n     * for <a href=\"BreakIterator.html#sentence\">sentence breaks</a>\n     * for the given locale.\n     * @param locale the desired locale\n     * @return A break iterator for sentence breaks\n     * @throws    NullPointerException if {@code locale} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the\n     * {@code get*Instance} methods of this class can return\n     * localized instances.\n     * It must contain at least a {@code Locale}\n     * instance equal to {@link java.util.Locale#US Locale.US}.\n     *\n     * @return An array of locales for which localized\n     *         {@code BreakIterator} instances are available.\n     ",
    "links" : [ "java.util.Locale#US" ]
  } ],
  "methodNames" : [ "public Object clone()", "public abstract int first()", "public abstract int last()", "public abstract int next(int n)", "public abstract int next()", "public abstract int previous()", "public abstract int following(int offset)", "public int preceding(int offset)", "public boolean isBoundary(int offset)", "public abstract int current()", "public abstract CharacterIterator getText()", "public void setText(String newText)", "public abstract void setText(CharacterIterator newText)", "public static BreakIterator getWordInstance()", "public static BreakIterator getWordInstance(Locale locale)", "public static BreakIterator getLineInstance()", "public static BreakIterator getLineInstance(Locale locale)", "public static BreakIterator getCharacterInstance()", "public static BreakIterator getCharacterInstance(Locale locale)", "public static BreakIterator getSentenceInstance()", "public static BreakIterator getSentenceInstance(Locale locale)", "public static synchronized Locale[] getAvailableLocales()" ],
  "variableNames" : [ "DONE" ]
}