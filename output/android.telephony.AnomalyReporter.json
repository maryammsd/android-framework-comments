{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/AnomalyReporter.java",
  "packageName" : "android.telephony",
  "className" : "AnomalyReporter",
  "comment" : "\n * A Simple Surface for Telephony to notify a loosely-coupled debugger of particular issues.\n *\n * AnomalyReporter allows an optional external logging component to receive events detected by\n * the framework and take action. This log surface is designed to provide maximium flexibility\n * to the receiver of these events. Envisioned use cases of this include notifying a vendor\n * component of: an event that necessitates (timely) log collection on non-AOSP components;\n * notifying a vendor component of a rare event that should prompt further action such as a\n * bug report or user intervention for debug purposes.\n *\n * <p>This surface is not intended to enable a diagnostic monitor, nor is it intended to support\n * streaming logs.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEvents",
    "type" : "Map<UUID, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDebugPackageName",
    "type" : "String",
    "comment" : "\n     * Because this is only supporting system packages, once we find a package, it will be the\n     * same package until the next system upgrade. Thus, to save time in processing debug events\n     * we can cache this info and skip the resolution process after it's done the first time.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void reportAnomaly(@NonNull UUID eventId, String description)",
    "returnType" : "void",
    "comment" : "\n     * If enabled, build and send an intent to a Debug Service for logging.\n     *\n     * This method sends the {@link TelephonyManager#ACTION_ANOMALY_REPORTED} broadcast, which is\n     * system protected. Invoking this method unless you are the system will result in an error.\n     *\n     * @param eventId a fixed event ID that will be sent for each instance of the same event. This\n     *        ID should be generated randomly.\n     * @param description an optional description, that if included will be used as the subject for\n     *        identification and discussion of this event. This description should ideally be\n     *        static and must not contain any sensitive information (especially PII).\n     ",
    "links" : [ "android.telephony.TelephonyManager#ACTION_ANOMALY_REPORTED" ]
  }, {
    "name" : "public static void initialize(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the AnomalyReporter with the current context.\n     *\n     * This method must be invoked before any calls to reportAnomaly() will succeed. This method\n     * should only be invoked at most once.\n     *\n     * @param context a Context object used to initialize this singleton AnomalyReporter in\n     *        the current process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dump(FileDescriptor fd, PrintWriter printWriter, String[] args)",
    "returnType" : "void",
    "comment" : " Dump the contents of the AnomalyReporter ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sContext", "sEvents", "sDebugPackageName" ],
  "methodNames" : [ "public static void reportAnomaly(@NonNull UUID eventId, String description)", "public static void initialize(@NonNull Context context)", "public static void dump(FileDescriptor fd, PrintWriter printWriter, String[] args)" ]
}