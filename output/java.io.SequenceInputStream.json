{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/SequenceInputStream.java",
  "packageName" : "java.io",
  "className" : "SequenceInputStream",
  "comment" : "\n * A <code>SequenceInputStream</code> represents\n * the logical concatenation of other input\n * streams. It starts out with an ordered\n * collection of input streams and reads from\n * the first one until end of file is reached,\n * whereupon it reads from the second one,\n * and so on, until end of file is reached\n * on the last of the contained input streams.\n *\n * @author  Author van Hoff\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "e",
    "type" : "Enumeration<? extends InputStream>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "in",
    "type" : "InputStream",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final void nextStream() throws IOException",
    "returnType" : "void",
    "comment" : "\n     *  Continues reading in the next stream if an EOF is reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void peekNextStream()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of bytes that can be read (or\n     * skipped over) from the current underlying input stream without\n     * blocking by the next invocation of a method for the current\n     * underlying input stream. The next invocation might be\n     * the same thread or another thread.  A single read or skip of this\n     * many bytes will not block, but may read or skip fewer bytes.\n     * <p>\n     * This method simply calls {@code available} of the current underlying\n     * input stream and returns the result.\n     *\n     * @return an estimate of the number of bytes that can be read (or\n     *         skipped over) from the current underlying input stream\n     *         without blocking or {@code 0} if this input stream\n     *         has been closed by invoking its {@link #close()} method\n     * @exception  IOException  if an I/O error occurs.\n     *\n     * @since   1.1\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The byte is\n     * returned as an <code>int</code> in the range <code>0</code> to\n     * <code>255</code>. If no byte is available because the end of the\n     * stream has been reached, the value <code>-1</code> is returned.\n     * This method blocks until input data is available, the end of the\n     * stream is detected, or an exception is thrown.\n     * <p>\n     * This method\n     * tries to read one character from the current substream. If it\n     * reaches the end of the stream, it calls the <code>close</code>\n     * method of the current substream and begins reading from the next\n     * substream.\n     *\n     * @return     the next byte of data, or <code>-1</code> if the end of the\n     *             stream is reached.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from this input stream\n     * into an array of bytes.  If <code>len</code> is not zero, the method\n     * blocks until at least 1 byte of input is available; otherwise, no\n     * bytes are read and <code>0</code> is returned.\n     * <p>\n     * The <code>read</code> method of <code>SequenceInputStream</code>\n     * tries to read the data from the current substream. If it fails to\n     * read any characters because the substream has reached the end of\n     * the stream, it calls the <code>close</code> method of the current\n     * substream and begins reading from the next substream.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in array <code>b</code>\n     *                   at which the data is written.\n     * @param      len   the maximum number of bytes read.\n     * @return     int   the number of bytes read.\n     * @exception  NullPointerException If <code>b</code> is <code>null</code>.\n     * @exception  IndexOutOfBoundsException If <code>off</code> is negative,\n     * <code>len</code> is negative, or <code>len</code> is greater than\n     * <code>b.length - off</code>\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources\n     * associated with the stream.\n     * A closed <code>SequenceInputStream</code>\n     * cannot  perform input operations and cannot\n     * be reopened.\n     * <p>\n     * If this stream was created\n     * from an enumeration, all remaining elements\n     * are requested from the enumeration and closed\n     * before the <code>close</code> method returns.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " final void nextStream() throws IOException", "private void peekNextStream()", "public int available() throws IOException", "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "e", "in" ]
}