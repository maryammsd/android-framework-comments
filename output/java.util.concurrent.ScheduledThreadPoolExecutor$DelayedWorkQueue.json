{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ScheduledThreadPoolExecutor.java",
  "packageName" : "java.util.concurrent",
  "className" : "DelayedWorkQueue",
  "comment" : "\n     * Specialized delay queue. To mesh with TPE declarations, this\n     * class must be declared as a BlockingQueue<Runnable> even though\n     * it can only hold RunnableScheduledFutures.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INITIAL_CAPACITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "queue",
    "type" : "RunnableScheduledFuture<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "leader",
    "type" : "Thread",
    "comment" : "\n         * Thread designated to wait for the task at the head of the\n         * queue.  This variant of the Leader-Follower pattern\n         * (http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to\n         * minimize unnecessary timed waiting.  When a thread becomes\n         * the leader, it waits only for the next delay to elapse, but\n         * other threads await indefinitely.  The leader thread must\n         * signal some other thread before returning from take() or\n         * poll(...), unless some other thread becomes leader in the\n         * interim.  Whenever the head of the queue is replaced with a\n         * task with an earlier expiration time, the leader field is\n         * invalidated by being reset to null, and some waiting\n         * thread, but not necessarily the current leader, is\n         * signalled.  So waiting threads must be prepared to acquire\n         * and lose leadership while waiting.\n         ",
    "links" : [ ]
  }, {
    "name" : "available",
    "type" : "Condition",
    "comment" : "\n         * Condition signalled when a newer task becomes available at the\n         * head of the queue or a new thread may need to become leader.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void setIndex(RunnableScheduledFuture<?> f, int idx)",
    "returnType" : "void",
    "comment" : "\n         * Sets f's heapIndex if it is a ScheduledFutureTask.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void siftUp(int k, RunnableScheduledFuture<?> key)",
    "returnType" : "void",
    "comment" : "\n         * Sifts element added at bottom up to its heap-ordered spot.\n         * Call only when holding lock.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void siftDown(int k, RunnableScheduledFuture<?> key)",
    "returnType" : "void",
    "comment" : "\n         * Sifts element added at top down to its heap-ordered spot.\n         * Call only when holding lock.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void grow()",
    "returnType" : "void",
    "comment" : "\n         * Resizes the heap array.  Call only when holding lock.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int indexOf(Object x)",
    "returnType" : "int",
    "comment" : "\n         * Finds index of given object, or -1 if absent.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object x)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object x)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RunnableScheduledFuture<?> peek()",
    "returnType" : "RunnableScheduledFuture<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(Runnable x)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void put(Runnable e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean add(Runnable e)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(Runnable e, long timeout, TimeUnit unit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f)",
    "returnType" : "RunnableScheduledFuture<?>",
    "comment" : "\n         * Performs common bookkeeping for poll and take: Replaces\n         * first element with last and sifts it down.  Call only when\n         * holding lock.\n         * @param f the task to remove and return\n         ",
    "links" : [ ]
  }, {
    "name" : "public RunnableScheduledFuture<?> poll()",
    "returnType" : "RunnableScheduledFuture<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RunnableScheduledFuture<?> take() throws InterruptedException",
    "returnType" : "RunnableScheduledFuture<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RunnableScheduledFuture<?> poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "RunnableScheduledFuture<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super Runnable> c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super Runnable> c, int maxElements)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Runnable> iterator()",
    "returnType" : "Iterator<Runnable>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void setIndex(RunnableScheduledFuture<?> f, int idx)", "private void siftUp(int k, RunnableScheduledFuture<?> key)", "private void siftDown(int k, RunnableScheduledFuture<?> key)", "private void grow()", "private int indexOf(Object x)", "public boolean contains(Object x)", "public boolean remove(Object x)", "public int size()", "public boolean isEmpty()", "public int remainingCapacity()", "public RunnableScheduledFuture<?> peek()", "public boolean offer(Runnable x)", "public void put(Runnable e)", "public boolean add(Runnable e)", "public boolean offer(Runnable e, long timeout, TimeUnit unit)", "private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f)", "public RunnableScheduledFuture<?> poll()", "public RunnableScheduledFuture<?> take() throws InterruptedException", "public RunnableScheduledFuture<?> poll(long timeout, TimeUnit unit) throws InterruptedException", "public void clear()", "public int drainTo(Collection<? super Runnable> c)", "public int drainTo(Collection<? super Runnable> c, int maxElements)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public Iterator<Runnable> iterator()" ],
  "variableNames" : [ "INITIAL_CAPACITY", "queue", "lock", "size", "leader", "available" ]
}