{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebViewFactoryProvider.java",
  "packageName" : "android.webkit",
  "className" : "WebViewFactoryProvider",
  "comment" : "\n * This is the main entry-point into the WebView back end implementations, which the WebView\n * proxy class uses to instantiate all the other objects as needed. The backend must provide an\n * implementation of this interface, and make it available to the WebView via mechanism TBD.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Statics getStatics()",
    "returnType" : "Statics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess)",
    "returnType" : "WebViewProvider",
    "comment" : "\n     * Construct a new WebViewProvider.\n     * @param webView the WebView instance bound to this implementation instance. Note it will not\n     * necessarily be fully constructed at the point of this call: defer real initialization to\n     * WebViewProvider.init().\n     * @param privateAccess provides access into WebView internal methods.\n     ",
    "links" : [ ]
  }, {
    "name" : " GeolocationPermissions getGeolocationPermissions()",
    "returnType" : "GeolocationPermissions",
    "comment" : "\n     * Gets the singleton GeolocationPermissions instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     * @return the single GeolocationPermissions instance.\n     ",
    "links" : [ ]
  }, {
    "name" : " CookieManager getCookieManager()",
    "returnType" : "CookieManager",
    "comment" : "\n     * Gets the singleton CookieManager instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @return the singleton CookieManager instance\n     ",
    "links" : [ ]
  }, {
    "name" : " TokenBindingService getTokenBindingService()",
    "returnType" : "TokenBindingService",
    "comment" : "\n     * Gets the TokenBindingService instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @deprecated this method only returns {@code null}\n     * @return the TokenBindingService instance (which is always {@code null})\n     ",
    "links" : [ ]
  }, {
    "name" : " TracingController getTracingController()",
    "returnType" : "TracingController",
    "comment" : "\n     * Gets the TracingController instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @return the TracingController instance\n     ",
    "links" : [ ]
  }, {
    "name" : " ServiceWorkerController getServiceWorkerController()",
    "returnType" : "ServiceWorkerController",
    "comment" : "\n     * Gets the ServiceWorkerController instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @return the ServiceWorkerController instance\n     ",
    "links" : [ ]
  }, {
    "name" : " WebIconDatabase getWebIconDatabase()",
    "returnType" : "WebIconDatabase",
    "comment" : "\n     * Gets the singleton WebIconDatabase instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @return the singleton WebIconDatabase instance\n     ",
    "links" : [ ]
  }, {
    "name" : " WebStorage getWebStorage()",
    "returnType" : "WebStorage",
    "comment" : "\n     * Gets the singleton WebStorage instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @return the singleton WebStorage instance\n     ",
    "links" : [ ]
  }, {
    "name" : " WebViewDatabase getWebViewDatabase(Context context)",
    "returnType" : "WebViewDatabase",
    "comment" : "\n     * Gets the singleton WebViewDatabase instance for this WebView implementation. The\n     * implementation must return the same instance on subsequent calls.\n     *\n     * @return the singleton WebViewDatabase instance\n     ",
    "links" : [ ]
  }, {
    "name" : " PacProcessor getPacProcessor()",
    "returnType" : "PacProcessor",
    "comment" : "\n     * Gets the default PacProcessor instance.\n     * @return the PacProcessor instance\n     ",
    "links" : [ ]
  }, {
    "name" : " PacProcessor createPacProcessor()",
    "returnType" : "PacProcessor",
    "comment" : "\n     * Create a new PacProcessor instance.\n     *\n     * @param network a {@link Network} which needs to be associated\n     * with the returned {@link PacProcessor}.\n     * If {@code null} the method returns default {@link PacProcessor}.\n     * @return the {@link PacProcessor} instance associated with {@link Network}.\n     ",
    "links" : [ "android.webkit.PacProcessor", "android.net.Network" ]
  }, {
    "name" : " ClassLoader getWebViewClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Gets the classloader used to load internal WebView implementation classes. This interface\n     * should only be used by the WebView Support Library.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Statics getStatics()", " WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess)", " GeolocationPermissions getGeolocationPermissions()", " CookieManager getCookieManager()", " TokenBindingService getTokenBindingService()", " TracingController getTracingController()", " ServiceWorkerController getServiceWorkerController()", " WebIconDatabase getWebIconDatabase()", " WebStorage getWebStorage()", " WebViewDatabase getWebViewDatabase(Context context)", " PacProcessor getPacProcessor()", " PacProcessor createPacProcessor()", " ClassLoader getWebViewClassLoader()" ],
  "variableNames" : [ ]
}