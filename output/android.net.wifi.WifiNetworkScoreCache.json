{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiNetworkScoreCache.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiNetworkScoreCache",
  "comment" : "\n * {@link INetworkScoreCache} implementation for Wifi Networks.\n *\n * TODO: This should not be part of wifi mainline module.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_NETWORK_SCORE",
    "type" : "int",
    "comment" : " scorer to provide an RSSI threshold below which a network should not be used.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_CACHE_SIZE",
    "type" : "int",
    "comment" : " Default number entries to be stored in the {@link LruCache}. ",
    "links" : [ "android.util.LruCache" ]
  }, {
    "name" : "mListener",
    "type" : "CacheListener",
    "comment" : " See {@link #CacheListener}.",
    "links" : [ "#CacheListener" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCache",
    "type" : "LruCache<String, ScoredNetwork>",
    "comment" : " TODO: What about SSIDs that can't be encoded as UTF-8?",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void updateScores(List<ScoredNetwork> networks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void clearScores()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isScoredNetwork(ScanResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there is any score info for the given ScanResult.\n     *\n     * This includes null-score info, so it should only be used when determining whether to request\n     * scores from the network scorer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasScoreCurve(ScanResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there is a non-null score curve for the given ScanResult.\n     *\n     * A null score curve has special meaning - we should never connect to an ephemeral network if\n     * the score curve is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkScore(ScanResult result)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getMeteredHint(ScanResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the ScoredNetwork metered hint for a given ScanResult.\n     *\n     * If there is no ScoredNetwork associated with the ScanResult then false will be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkScore(ScanResult result, boolean isActiveNetwork)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ScoredNetwork getScoredNetwork(ScanResult result)",
    "returnType" : "ScoredNetwork",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ScoredNetwork getScoredNetwork(NetworkKey networkKey)",
    "returnType" : "ScoredNetwork",
    "comment" : " Returns the ScoredNetwork for the given key. ",
    "links" : [ ]
  }, {
    "name" : "private String buildNetworkKey(ScoredNetwork network)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String buildNetworkKey(NetworkKey networkKey)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String buildNetworkKey(ScanResult result)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void dump(FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerListener(CacheListener listener)",
    "returnType" : "void",
    "comment" : " Registers a CacheListener instance, replacing the previous listener if it existed. ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterListener()",
    "returnType" : "void",
    "comment" : " Removes the registered CacheListener. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "INVALID_NETWORK_SCORE", "DEFAULT_MAX_CACHE_SIZE", "mListener", "mContext", "mLock", "mCache" ],
  "methodNames" : [ "public final void updateScores(List<ScoredNetwork> networks)", "public final void clearScores()", "public boolean isScoredNetwork(ScanResult result)", "public boolean hasScoreCurve(ScanResult result)", "public int getNetworkScore(ScanResult result)", "public boolean getMeteredHint(ScanResult result)", "public int getNetworkScore(ScanResult result, boolean isActiveNetwork)", "public ScoredNetwork getScoredNetwork(ScanResult result)", "public ScoredNetwork getScoredNetwork(NetworkKey networkKey)", "private String buildNetworkKey(ScoredNetwork network)", "private String buildNetworkKey(NetworkKey networkKey)", "private String buildNetworkKey(ScanResult result)", "protected final void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void registerListener(CacheListener listener)", "public void unregisterListener()" ]
}