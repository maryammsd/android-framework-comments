{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/job/JobInfo.java",
  "packageName" : "android.app.job",
  "className" : "JobInfo",
  "comment" : "\n * Container of data passed to the {@link android.app.job.JobScheduler} fully encapsulating the\n * parameters required to schedule work against the calling application. These are constructed\n * using the {@link JobInfo.Builder}.\n * The goal here is to provide the scheduler with high-level semantics about the work you want to\n * accomplish.\n * <p> Prior to Android version {@link Build.VERSION_CODES#Q}, you had to specify at least one\n * constraint on the JobInfo object that you are creating. Otherwise, the builder would throw an\n * exception when building. From Android version {@link Build.VERSION_CODES#Q} and onwards, it is\n * valid to schedule jobs with no constraints.\n ",
  "links" : [ "android.app.job.JobScheduler", "JobInfo.Builder", "Build.VERSION_CODES#Q" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISALLOW_DEADLINES_FOR_PREFETCH_JOBS",
    "type" : "long",
    "comment" : "\n     * Disallow setting a deadline (via {@link Builder#setOverrideDeadline(long)}) for prefetch\n     * jobs ({@link Builder#setPrefetch(boolean)}. Prefetch jobs are meant to run close to the next\n     * app launch, so there's no good reason to allow them to have deadlines.\n     *\n     * We don't drop or cancel any previously scheduled prefetch jobs with a deadline.\n     * There's no way for an app to keep a perpetually scheduled prefetch job with a deadline.\n     * Prefetch jobs with a deadline will run and apps under this restriction won't be able to\n     * schedule new prefetch jobs with a deadline. If a job is rescheduled (by providing\n     * {@code true} via {@link JobService#jobFinished(JobParameters, boolean)} or\n     * {@link JobService#onStopJob(JobParameters)}'s return value),the deadline is dropped.\n     * Periodic jobs require all constraints to be met, so there's no issue with their deadlines.\n     *\n     * @hide\n     ",
    "links" : [ "#setOverrideDeadline(long)", "android.app.job.JobService#jobFinished(JobParameters", "#setPrefetch(boolean)", "android.app.job.JobService#onStopJob(JobParameters)" ]
  }, {
    "name" : "THROW_ON_INVALID_PRIORITY_VALUE",
    "type" : "long",
    "comment" : "\n     * Whether to throw an exception when an app provides an invalid priority value via\n     * {@link Builder#setPriority(int)}. Legacy apps may be incorrectly using the API and\n     * so the call will silently fail for them if they continue using the API.\n     *\n     * @hide\n     ",
    "links" : [ "#setPriority(int)" ]
  }, {
    "name" : "REJECT_NEGATIVE_NETWORK_ESTIMATES",
    "type" : "long",
    "comment" : "\n     * Require that estimated network bytes are nonnegative.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENFORCE_MINIMUM_TIME_WINDOWS",
    "type" : "long",
    "comment" : "\n     * Enforce a minimum time window between job latencies and deadlines.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REJECT_NEGATIVE_DELAYS_AND_DEADLINES",
    "type" : "long",
    "comment" : "\n     * Require that minimum latencies and override deadlines are nonnegative.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_NONE",
    "type" : "int",
    "comment" : " Default. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_ANY",
    "type" : "int",
    "comment" : " This job requires network connectivity. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_UNMETERED",
    "type" : "int",
    "comment" : " This job requires network connectivity that is unmetered. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_NOT_ROAMING",
    "type" : "int",
    "comment" : " This job requires network connectivity that is not roaming. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_CELLULAR",
    "type" : "int",
    "comment" : " This job requires network connectivity that is a cellular network. ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_TYPE_METERED",
    "type" : "int",
    "comment" : "\n     * This job requires metered connectivity such as most cellular data\n     * networks.\n     *\n     * @deprecated Cellular networks may be unmetered, or Wi-Fi networks may be\n     *             metered, so this isn't a good way of selecting a specific\n     *             transport. Instead, use {@link #NETWORK_TYPE_CELLULAR} or\n     *             {@link android.net.NetworkRequest.Builder#addTransportType(int)}\n     *             if your job requires a specific network transport.\n     ",
    "links" : [ "android.net.NetworkRequest.Builder#addTransportType(int)", "#NETWORK_TYPE_CELLULAR" ]
  }, {
    "name" : "NETWORK_BYTES_UNKNOWN",
    "type" : "int",
    "comment" : " Sentinel value indicating that bytes are unknown. ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_INITIAL_BACKOFF_MILLIS",
    "type" : "long",
    "comment" : " 30 seconds.",
    "links" : [ ]
  }, {
    "name" : "MAX_BACKOFF_DELAY_MILLIS",
    "type" : "long",
    "comment" : " 5 hours.",
    "links" : [ ]
  }, {
    "name" : "BACKOFF_POLICY_LINEAR",
    "type" : "int",
    "comment" : "\n     * Linearly back-off a failed job. See\n     * {@link android.app.job.JobInfo.Builder#setBackoffCriteria(long, int)}\n     * retry_time(current_time, num_failures) =\n     *     current_time + initial_backoff_millis * num_failures, num_failures >= 1\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setBackoffCriteria(long" ]
  }, {
    "name" : "BACKOFF_POLICY_EXPONENTIAL",
    "type" : "int",
    "comment" : "\n     * Exponentially back-off a failed job. See\n     * {@link android.app.job.JobInfo.Builder#setBackoffCriteria(long, int)}\n     *\n     * retry_time(current_time, num_failures) =\n     *     current_time + initial_backoff_millis * 2 ^ (num_failures - 1), num_failures >= 1\n     ",
    "links" : [ "android.app.job.JobInfo.Builder#setBackoffCriteria(long" ]
  }, {
    "name" : "MIN_PERIOD_MILLIS",
    "type" : "long",
    "comment" : " 15 minutes",
    "links" : [ ]
  }, {
    "name" : "MIN_FLEX_MILLIS",
    "type" : "long",
    "comment" : " 5 minutes",
    "links" : [ ]
  }, {
    "name" : "MIN_ALLOWED_TIME_WINDOW_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_BACKOFF_MILLIS",
    "type" : "long",
    "comment" : " 10 seconds",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BACKOFF_POLICY",
    "type" : "int",
    "comment" : "\n     * Default type of backoff.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_MIN",
    "type" : "int",
    "comment" : "\n     * Job has minimal value to the user. The user has absolutely no expectation\n     * or knowledge of this task and it has no bearing on the user's perception of\n     * the app whatsoever. JobScheduler <i>may</i> decide to defer these tasks while\n     * there are higher priority tasks in order to ensure there is sufficient quota\n     * available for the higher priority tasks.\n     * A sample task of min priority: uploading analytics\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_LOW",
    "type" : "int",
    "comment" : "\n     * Low priority. The task provides some benefit to users, but is not critical\n     * and is more of a nice-to-have. This is more important than minimum priority\n     * jobs and will be prioritized ahead of them, but may still be deferred in lieu\n     * of higher priority jobs. JobScheduler <i>may</i> decide to defer these tasks\n     * while there are higher priority tasks in order to ensure there is sufficient\n     * quota available for the higher priority tasks.\n     * A sample task of low priority: prefetching data the user hasn't requested\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default value for all regular jobs. As noted in {@link JobScheduler},\n     * these jobs have a general execution time of 10 minutes.\n     * Receives the standard job management policy.\n     ",
    "links" : [ "android.app.job.JobScheduler" ]
  }, {
    "name" : "PRIORITY_HIGH",
    "type" : "int",
    "comment" : "\n     * This task should be ordered ahead of most other tasks. It may be\n     * deferred a little, but if it doesn't run at some point, the user may think\n     * something is wrong. Assuming all constraints remain satisfied\n     * (including ideal system load conditions), these jobs can have an\n     * execution time of at least 4 minutes. Setting all of your jobs to high\n     * priority will not be beneficial to your app and in fact may hurt its\n     * performance in the long run.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_MAX",
    "type" : "int",
    "comment" : "\n     * This task is critical to user experience or functionality\n     * and should be run ahead of all other tasks. Only\n     * {@link Builder#setExpedited(boolean) expedited jobs} and\n     * {@link Builder#setUserInitiated(boolean) user-initiated jobs} can have this priority.\n     * <p>\n     * Example tasks of max priority:\n     * <ul>\n     *     <li>Receiving a text message and processing it to show a notification</li>\n     *     <li>Downloading or uploading some content the user requested to transfer immediately</li>\n     * </ul>\n     ",
    "links" : [ "#setExpedited(boolean)", "#setUserInitiated(boolean)" ]
  }, {
    "name" : "BIAS_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default of {@link #getBias}.\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "BIAS_SYNC_EXPEDITED",
    "type" : "int",
    "comment" : "\n     * Value of {@link #getBias} for expedited syncs.\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "BIAS_SYNC_INITIALIZATION",
    "type" : "int",
    "comment" : "\n     * Value of {@link #getBias} for first time initialization syncs.\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "BIAS_BOUND_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n     * Value of {@link #getBias} for a BFGS app (overrides the supplied\n     * JobInfo bias if it is smaller).\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "PRIORITY_FOREGROUND_APP",
    "type" : "int",
    "comment" : " @hide For backward compatibility. ",
    "links" : [ ]
  }, {
    "name" : "BIAS_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n     * Value of {@link #getBias} for a FG service app (overrides the supplied\n     * JobInfo bias if it is smaller).\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "PRIORITY_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : " @hide For backward compatibility. ",
    "links" : [ ]
  }, {
    "name" : "BIAS_TOP_APP",
    "type" : "int",
    "comment" : "\n     * Value of {@link #getBias} for the current top app (overrides the supplied\n     * JobInfo bias if it is smaller).\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "BIAS_ADJ_OFTEN_RUNNING",
    "type" : "int",
    "comment" : "\n     * Adjustment of {@link #getBias} if the app has often (50% or more of the time)\n     * been running jobs.\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "BIAS_ADJ_ALWAYS_RUNNING",
    "type" : "int",
    "comment" : "\n     * Adjustment of {@link #getBias} if the app has always (90% or more of the time)\n     * been running jobs.\n     * @hide\n     ",
    "links" : [ "#getBias" ]
  }, {
    "name" : "FLAG_WILL_BE_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Indicates that the implementation of this job will be using\n     * {@link JobService#startForeground(int, android.app.Notification)} to run\n     * in the foreground.\n     * <p>\n     * When set, the internal scheduling of this job will ignore any background\n     * network restrictions for the requesting app. Note that this flag alone\n     * doesn't actually place your {@link JobService} in the foreground; you\n     * still need to post the notification yourself.\n     * <p>\n     * To use this flag, the caller must hold the\n     * {@link android.Manifest.permission#CONNECTIVITY_INTERNAL} permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.job.JobService", "android.Manifest.permission#CONNECTIVITY_INTERNAL", "android.app.job.JobService#startForeground(int" ]
  }, {
    "name" : "FLAG_IMPORTANT_WHILE_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Allows this job to run despite doze restrictions as long as the app is in the foreground\n     * or on the temporary allowlist\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PREFETCH",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_EXEMPT_FROM_APP_STANDBY",
    "type" : "int",
    "comment" : "\n     * This job needs to be exempted from the app standby throttling. Only the system (UID 1000)\n     * can set it. Jobs with a time constraint must not have it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_EXPEDITED",
    "type" : "int",
    "comment" : "\n     * Whether it's an expedited job or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_USER_INITIATED",
    "type" : "int",
    "comment" : "\n     * Whether it's a user initiated job or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONSTRAINT_FLAG_CHARGING",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONSTRAINT_FLAG_BATTERY_NOT_LOW",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONSTRAINT_FLAG_DEVICE_IDLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONSTRAINT_FLAG_STORAGE_NOT_LOW",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_NUM_DEBUG_TAGS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAX_DEBUG_TAG_LENGTH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAX_TRACE_TAG_LENGTH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "jobId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "transientExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "clipGrantFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "service",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "constraintFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "triggerContentUris",
    "type" : "TriggerContentUri[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "triggerContentUpdateDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "triggerContentMaxDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hasEarlyConstraint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hasLateConstraint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "networkRequest",
    "type" : "NetworkRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "networkDownloadBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "networkUploadBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minimumNetworkChunkBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minLatencyMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxExecutionDelayMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isPeriodic",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isPersisted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "intervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "flexMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialBackoffMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "backoffPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBias",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebugTags",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraceTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<JobInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final long getMinPeriodMillis()",
    "returnType" : "long",
    "comment" : "\n     * Query the minimum interval allowed for periodic scheduled jobs.  Attempting\n     * to declare a smaller period than this when scheduling a job will result in a\n     * job that is still periodic, but will run with this effective period.\n     *\n     * @return The minimum available interval for scheduling periodic jobs, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final long getMinFlexMillis()",
    "returnType" : "long",
    "comment" : "\n     * Query the minimum flex time allowed for periodic scheduled jobs.  Attempting\n     * to declare a shorter flex time than this when scheduling such a job will\n     * result in this amount as the effective flex time for the job.\n     *\n     * @return The minimum available flex time for scheduling periodic jobs, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final long getMinBackoffMillis()",
    "returnType" : "long",
    "comment" : "\n     * Query the minimum automatic-reschedule backoff interval permitted for jobs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Unique job id associated with this application (uid).  This is the same job ID\n     * you supplied in the {@link Builder} constructor.\n     ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * @see JobInfo.Builder#setExtras(PersistableBundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getTransientExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * @see JobInfo.Builder#setTransientExtras(Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClipData getClipData()",
    "returnType" : "ClipData",
    "comment" : "\n     * @see JobInfo.Builder#setClipData(ClipData, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getClipGrantFlags()",
    "returnType" : "int",
    "comment" : "\n     * @see JobInfo.Builder#setClipData(ClipData, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getService()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Name of the service endpoint that will be called back into by the JobScheduler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBias()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getPriority()",
    "returnType" : "int",
    "comment" : "\n     * @see JobInfo.Builder#setPriority(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExemptedFromAppStandby()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequireCharging()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setRequiresCharging(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequireBatteryNotLow()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setRequiresBatteryNotLow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequireDeviceIdle()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setRequiresDeviceIdle(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequireStorageNotLow()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setRequiresStorageNotLow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConstraintFlags()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public TriggerContentUri[] getTriggerContentUris()",
    "returnType" : "TriggerContentUri[]",
    "comment" : "\n     * Which content: URIs must change for the job to be scheduled.  Returns null\n     * if there are none required.\n     * @see JobInfo.Builder#addTriggerContentUri(TriggerContentUri)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTriggerContentUpdateDelay()",
    "returnType" : "long",
    "comment" : "\n     * When triggering on content URI changes, this is the delay from when a change\n     * is detected until the job is scheduled.\n     * @see JobInfo.Builder#setTriggerContentUpdateDelay(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTriggerContentMaxDelay()",
    "returnType" : "long",
    "comment" : "\n     * When triggering on content URI changes, this is the maximum delay we will\n     * use before scheduling the job.\n     * @see JobInfo.Builder#setTriggerContentMaxDelay(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkType()",
    "returnType" : "int",
    "comment" : "\n     * Return the basic description of the kind of network this job requires.\n     *\n     * @deprecated This method attempts to map {@link #getRequiredNetwork()}\n     *             into the set of simple constants, which results in a loss of\n     *             fidelity. Callers should move to using\n     *             {@link #getRequiredNetwork()} directly.\n     * @see Builder#setRequiredNetworkType(int)\n     ",
    "links" : [ "#getRequiredNetwork()" ]
  }, {
    "name" : "public NetworkRequest getRequiredNetwork()",
    "returnType" : "NetworkRequest",
    "comment" : "\n     * Return the detailed description of the kind of network this job requires,\n     * or {@code null} if no specific kind of network is required.\n     *\n     * @see Builder#setRequiredNetwork(NetworkRequest)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getEstimatedNetworkDownloadBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the estimated size of download traffic that will be performed by\n     * this job, in bytes.\n     *\n     * @return Estimated size of download traffic, or\n     *         {@link #NETWORK_BYTES_UNKNOWN} when unknown.\n     * @see Builder#setEstimatedNetworkBytes(long, long)\n     ",
    "links" : [ "#NETWORK_BYTES_UNKNOWN" ]
  }, {
    "name" : "public long getEstimatedNetworkUploadBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the estimated size of upload traffic that will be performed by\n     * this job, in bytes.\n     *\n     * @return Estimated size of upload traffic, or\n     *         {@link #NETWORK_BYTES_UNKNOWN} when unknown.\n     * @see Builder#setEstimatedNetworkBytes(long, long)\n     ",
    "links" : [ "#NETWORK_BYTES_UNKNOWN" ]
  }, {
    "name" : "public long getMinimumNetworkChunkBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return the smallest piece of data that cannot be easily paused and resumed, in bytes.\n     *\n     * @return Smallest piece of data that cannot be easily paused and resumed, or\n     *         {@link #NETWORK_BYTES_UNKNOWN} when unknown.\n     * @see Builder#setMinimumNetworkChunkBytes(long)\n     ",
    "links" : [ "#NETWORK_BYTES_UNKNOWN" ]
  }, {
    "name" : "public long getMinLatencyMillis()",
    "returnType" : "long",
    "comment" : "\n     * Set for a job that does not recur periodically, to specify a delay after which the job\n     * will be eligible for execution. This value is not set if the job recurs periodically.\n     * @see JobInfo.Builder#setMinimumLatency(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxExecutionDelayMillis()",
    "returnType" : "long",
    "comment" : "\n     * @see JobInfo.Builder#setOverrideDeadline(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPeriodic()",
    "returnType" : "boolean",
    "comment" : "\n     * Track whether this job will repeat with a given period.\n     * @see JobInfo.Builder#setPeriodic(long)\n     * @see JobInfo.Builder#setPeriodic(long, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPersisted()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setPersisted(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getIntervalMillis()",
    "returnType" : "long",
    "comment" : "\n     * Set to the interval between occurrences of this job. This value is <b>not</b> set if the\n     * job does not recur periodically.\n     * @see JobInfo.Builder#setPeriodic(long)\n     * @see JobInfo.Builder#setPeriodic(long, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFlexMillis()",
    "returnType" : "long",
    "comment" : "\n     * Flex time for this job. Only valid if this is a periodic job.  The job can\n     * execute at any time in a window of flex length at the end of the period.\n     * @see JobInfo.Builder#setPeriodic(long)\n     * @see JobInfo.Builder#setPeriodic(long, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getInitialBackoffMillis()",
    "returnType" : "long",
    "comment" : "\n     * The amount of time the JobScheduler will wait before rescheduling a failed job. This value\n     * will be increased depending on the backoff policy specified at job creation time. Defaults\n     * to 30 seconds, minimum is currently 10 seconds.\n     * @see JobInfo.Builder#setBackoffCriteria(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBackoffPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Return the backoff policy of this job.\n     *\n     * @see JobInfo.Builder#setBackoffCriteria(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getDebugTags()",
    "returnType" : "Set<String>",
    "comment" : "\n     * @see JobInfo.Builder#addDebugTag(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArraySet<String> getDebugTagsArraySet()",
    "returnType" : "ArraySet<String>",
    "comment" : "\n     * @see JobInfo.Builder#addDebugTag(String)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTraceTag()",
    "returnType" : "String",
    "comment" : "\n     * @see JobInfo.Builder#setTraceTag(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExpedited()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setExpedited(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserInitiated()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setUserInitiated(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImportantWhileForeground()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setImportantWhileForeground(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrefetch()",
    "returnType" : "boolean",
    "comment" : "\n     * @see JobInfo.Builder#setPrefetch(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEarlyConstraint()",
    "returnType" : "boolean",
    "comment" : "\n     * User can specify an early constraint of 0L, which is valid, so we keep track of whether the\n     * function was called at all.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLateConstraint()",
    "returnType" : "boolean",
    "comment" : "\n     * User can specify a late constraint of 0L, which is valid, so we keep track of whether the\n     * function was called at all.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void enforceValidity(boolean disallowPrefetchDeadlines, boolean rejectNegativeNetworkEstimates, boolean enforceMinimumTimeWindows, boolean rejectNegativeDelaysAndDeadlines)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String validateDebugTag(@Nullable String debugTag)",
    "returnType" : "String",
    "comment" : "\n     * Returns a sanitized debug tag if valid, or throws an exception if not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String validateTraceTag(@Nullable String traceTag)",
    "returnType" : "String",
    "comment" : "\n     * Returns a sanitized trace tag if valid, or throws an exception if not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getBiasString(int bias)",
    "returnType" : "String",
    "comment" : "\n     * Convert a bias integer into a human readable string for debugging.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getPriorityString(@Priority int priority)",
    "returnType" : "String",
    "comment" : "\n     * Convert a priority integer into a human readable string for debugging.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final long getMinPeriodMillis()", "public static final long getMinFlexMillis()", "public static final long getMinBackoffMillis()", "public int getId()", "public PersistableBundle getExtras()", "public Bundle getTransientExtras()", "public ClipData getClipData()", "public int getClipGrantFlags()", "public ComponentName getService()", "public int getBias()", "public int getPriority()", "public int getFlags()", "public boolean isExemptedFromAppStandby()", "public boolean isRequireCharging()", "public boolean isRequireBatteryNotLow()", "public boolean isRequireDeviceIdle()", "public boolean isRequireStorageNotLow()", "public int getConstraintFlags()", "public TriggerContentUri[] getTriggerContentUris()", "public long getTriggerContentUpdateDelay()", "public long getTriggerContentMaxDelay()", "public int getNetworkType()", "public NetworkRequest getRequiredNetwork()", "public long getEstimatedNetworkDownloadBytes()", "public long getEstimatedNetworkUploadBytes()", "public long getMinimumNetworkChunkBytes()", "public long getMinLatencyMillis()", "public long getMaxExecutionDelayMillis()", "public boolean isPeriodic()", "public boolean isPersisted()", "public long getIntervalMillis()", "public long getFlexMillis()", "public long getInitialBackoffMillis()", "public int getBackoffPolicy()", "public Set<String> getDebugTags()", "public ArraySet<String> getDebugTagsArraySet()", "public String getTraceTag()", "public boolean isExpedited()", "public boolean isUserInitiated()", "public boolean isImportantWhileForeground()", "public boolean isPrefetch()", "public boolean hasEarlyConstraint()", "public boolean hasLateConstraint()", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public final void enforceValidity(boolean disallowPrefetchDeadlines, boolean rejectNegativeNetworkEstimates, boolean enforceMinimumTimeWindows, boolean rejectNegativeDelaysAndDeadlines)", "public static String validateDebugTag(@Nullable String debugTag)", "public static String validateTraceTag(@Nullable String traceTag)", "public static String getBiasString(int bias)", "public static String getPriorityString(@Priority int priority)" ],
  "variableNames" : [ "TAG", "DISALLOW_DEADLINES_FOR_PREFETCH_JOBS", "THROW_ON_INVALID_PRIORITY_VALUE", "REJECT_NEGATIVE_NETWORK_ESTIMATES", "ENFORCE_MINIMUM_TIME_WINDOWS", "REJECT_NEGATIVE_DELAYS_AND_DEADLINES", "NETWORK_TYPE_NONE", "NETWORK_TYPE_ANY", "NETWORK_TYPE_UNMETERED", "NETWORK_TYPE_NOT_ROAMING", "NETWORK_TYPE_CELLULAR", "NETWORK_TYPE_METERED", "NETWORK_BYTES_UNKNOWN", "DEFAULT_INITIAL_BACKOFF_MILLIS", "MAX_BACKOFF_DELAY_MILLIS", "BACKOFF_POLICY_LINEAR", "BACKOFF_POLICY_EXPONENTIAL", "MIN_PERIOD_MILLIS", "MIN_FLEX_MILLIS", "MIN_ALLOWED_TIME_WINDOW_MILLIS", "MIN_BACKOFF_MILLIS", "DEFAULT_BACKOFF_POLICY", "PRIORITY_MIN", "PRIORITY_LOW", "PRIORITY_DEFAULT", "PRIORITY_HIGH", "PRIORITY_MAX", "BIAS_DEFAULT", "BIAS_SYNC_EXPEDITED", "BIAS_SYNC_INITIALIZATION", "BIAS_BOUND_FOREGROUND_SERVICE", "PRIORITY_FOREGROUND_APP", "BIAS_FOREGROUND_SERVICE", "PRIORITY_FOREGROUND_SERVICE", "BIAS_TOP_APP", "BIAS_ADJ_OFTEN_RUNNING", "BIAS_ADJ_ALWAYS_RUNNING", "FLAG_WILL_BE_FOREGROUND", "FLAG_IMPORTANT_WHILE_FOREGROUND", "FLAG_PREFETCH", "FLAG_EXEMPT_FROM_APP_STANDBY", "FLAG_EXPEDITED", "FLAG_USER_INITIATED", "CONSTRAINT_FLAG_CHARGING", "CONSTRAINT_FLAG_BATTERY_NOT_LOW", "CONSTRAINT_FLAG_DEVICE_IDLE", "CONSTRAINT_FLAG_STORAGE_NOT_LOW", "MAX_NUM_DEBUG_TAGS", "MAX_DEBUG_TAG_LENGTH", "MAX_TRACE_TAG_LENGTH", "jobId", "extras", "transientExtras", "clipData", "clipGrantFlags", "service", "constraintFlags", "triggerContentUris", "triggerContentUpdateDelay", "triggerContentMaxDelay", "hasEarlyConstraint", "hasLateConstraint", "networkRequest", "networkDownloadBytes", "networkUploadBytes", "minimumNetworkChunkBytes", "minLatencyMillis", "maxExecutionDelayMillis", "isPeriodic", "isPersisted", "intervalMillis", "flexMillis", "initialBackoffMillis", "backoffPolicy", "mBias", "mPriority", "flags", "mDebugTags", "mTraceTag", "CREATOR" ]
}