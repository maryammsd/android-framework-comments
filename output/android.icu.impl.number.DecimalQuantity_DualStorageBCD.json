{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/DecimalQuantity_DualStorageBCD.java",
  "packageName" : "android.icu.impl.number",
  "className" : "DecimalQuantity_DualStorageBCD",
  "comment" : "\n * A DecimalQuantity with internal storage as a 64-bit BCD, with fallback to a byte array for numbers\n * that don't fit into the standard BCD.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "bcdBytes",
    "type" : "byte[]",
    "comment" : "\n     * The BCD of the 16 digits of the number represented by this object. Every 4 bits of the long map to\n     * one digit. For example, the number \"12345\" in BCD is \"0x12345\".\n     *\n     * <p>\n     * Whenever bcd changes internally, {@link #compact()} must be called, except in special cases like\n     * setting the digit to zero.\n     ",
    "links" : [ "#compact()" ]
  }, {
    "name" : "bcdLong",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usingBytes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int maxRepresentableDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DecimalQuantity createCopy()",
    "returnType" : "DecimalQuantity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static DecimalQuantity fromExponentString(String num)",
    "returnType" : "DecimalQuantity",
    "comment" : "\n     * Returns a DecimalQuantity after parsing the input string.\n     *\n     * @param s The String to parse\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getVisibleFractionCount(String value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected byte getDigitPos(int position)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setDigitPos(int position, byte value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void shiftLeft(int numDigits)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void shiftRight(int numDigits)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void popFromLeft(int numDigits)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setBcdToZero()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void readIntToBcd(int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void readLongToBcd(long n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void readBigIntegerToBcd(BigInteger n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected BigDecimal bcdToBigDecimal()",
    "returnType" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void compact()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureCapacity()",
    "returnType" : "void",
    "comment" : " Ensure that a byte array of at least 40 digits is allocated. ",
    "links" : [ ]
  }, {
    "name" : "private void ensureCapacity(int capacity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void switchStorage()",
    "returnType" : "void",
    "comment" : " Switches the internal storage mechanism between the 64-bit long and the byte array. ",
    "links" : [ ]
  }, {
    "name" : "protected void copyBcdFrom(DecimalQuantity _other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String checkHealth()",
    "returnType" : "String",
    "comment" : "\n     * Checks whether the bytes stored in this instance are all valid. For internal unit testing only.\n     *\n     * @return An error message if this instance is invalid, or null if this instance is healthy.\n     * @deprecated This API is for ICU internal use only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUsingBytes()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether this {@link DecimalQuantity_DualStorageBCD} is using its internal byte array\n     * storage mechanism.\n     *\n     * @return true if an internal byte array is being used; false if a long is being used.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.impl.number.DecimalQuantity_DualStorageBCD" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String toNumberString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int maxRepresentableDigits()", "public DecimalQuantity createCopy()", "public static DecimalQuantity fromExponentString(String num)", "private static int getVisibleFractionCount(String value)", "protected byte getDigitPos(int position)", "protected void setDigitPos(int position, byte value)", "protected void shiftLeft(int numDigits)", "protected void shiftRight(int numDigits)", "protected void popFromLeft(int numDigits)", "protected void setBcdToZero()", "protected void readIntToBcd(int n)", "protected void readLongToBcd(long n)", "protected void readBigIntegerToBcd(BigInteger n)", "protected BigDecimal bcdToBigDecimal()", "protected void compact()", "private void ensureCapacity()", "private void ensureCapacity(int capacity)", "private void switchStorage()", "protected void copyBcdFrom(DecimalQuantity _other)", "public String checkHealth()", "public boolean isUsingBytes()", "public String toString()", "private String toNumberString()" ],
  "variableNames" : [ "bcdBytes", "bcdLong", "usingBytes" ]
}