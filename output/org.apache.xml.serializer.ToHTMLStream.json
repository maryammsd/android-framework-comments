{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToHTMLStream.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToHTMLStream",
  "comment" : "\n * This serializer takes a series of SAX or\n * SAX-like events and writes its output\n * to the given stream.\n * \n * This class is not a public API, it is public\n * because it is used from another package.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_inDTD",
    "type" : "boolean",
    "comment" : " This flag is set while receiving events from the DTD ",
    "links" : [ ]
  }, {
    "name" : "m_inBlockElem",
    "type" : "boolean",
    "comment" : " True if the current element is a block element.  (seems like \n     *  this needs to be a stack. -sb). ",
    "links" : [ ]
  }, {
    "name" : "m_htmlcharInfo",
    "type" : "CharInfo",
    "comment" : "\n     * Map that tells which XML characters should have special treatment, and it\n     *  provides character to entity name lookup.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_elementFlags",
    "type" : "Trie",
    "comment" : " A digital search trie for fast, case insensitive lookup of ElemDesc objects. ",
    "links" : [ ]
  }, {
    "name" : "m_dummy",
    "type" : "ElemDesc",
    "comment" : "\n     * Dummy element for elements not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_specialEscapeURLs",
    "type" : "boolean",
    "comment" : " True if URLs should be specially escaped with the %xx form. ",
    "links" : [ ]
  }, {
    "name" : "m_omitMetaTag",
    "type" : "boolean",
    "comment" : " True if the META tag should be omitted. ",
    "links" : [ ]
  }, {
    "name" : "m_htmlInfo",
    "type" : "Trie",
    "comment" : "\n     * A Trie that is just a copy of the \"static\" one.\n     * We need this one to be able to use the faster, but not thread-safe\n     * method Trie.get2(name)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void initTagReference(Trie m_elementFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSpecialEscapeURLs(boolean bool)",
    "returnType" : "void",
    "comment" : "\n     * Tells if the formatter should use special URL escaping.\n     *\n     * @param bool True if URLs should be specially escaped with the %xx form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOmitMetaTag(boolean bool)",
    "returnType" : "void",
    "comment" : "\n     * Tells if the formatter should omit the META tag.\n     *\n     * @param bool True if the META tag should be omitted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputFormat(Properties format)",
    "returnType" : "void",
    "comment" : "\n     * Specifies an output format for this serializer. It the\n     * serializer has already been associated with an output format,\n     * it will switch to the new format. This method should not be\n     * called while the serializer is in the process of serializing\n     * a document.\n     * \n     * This method can be called multiple times before starting\n     * the serialization of a particular result-tree. In principle\n     * all serialization parameters can be changed, with the exception\n     * of method=\"html\" (it must be method=\"html\" otherwise we\n     * shouldn't even have a ToHTMLStream object here!) \n     *\n     * @param format The output format or serialzation parameters\n     * to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final boolean getSpecialEscapeURLs()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if the formatter should use special URL escaping.\n     *\n     * @return True if URLs should be specially escaped with the %xx form.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final boolean getOmitMetaTag()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if the formatter should omit the META tag.\n     *\n     * @return True if the META tag should be omitted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ElemDesc getElemDesc(String name)",
    "returnType" : "ElemDesc",
    "comment" : "\n     * Get a description of the given element.\n     *\n     * @param name non-null name of element, case insensitive.\n     *\n     * @return non-null reference to ElemDesc, which may be m_dummy if no \n     *         element description matches the given name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ElemDesc getElemDesc2(String name)",
    "returnType" : "ElemDesc",
    "comment" : "\n     * Calls to this method could be replaced with calls to\n     * getElemDesc(name), but this one should be faster.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void startDocumentInternal() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the beginning of a document.\n     *\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "private void outputDocTypeDecl(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method should only get called once.\n     * If a DOCTYPE declaration needs to get written out, it will\n     * be written out. If it doesn't need to be written out, then\n     * the call to this method has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void endDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the end of a document. \n     *\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String namespaceURI, String localName, String name, Attributes atts) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     *  Receive notification of the beginning of an element.\n     *\n     *\n     *  @param namespaceURI\n     *  @param localName\n     *  @param name The element type name.\n     *  @param atts The attributes attached to the element, if any.\n     *  @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *             wrapping another exception.\n     *  @see #endElement\n     *  @see org.xml.sax.AttributeList\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void endElement(final String namespaceURI, final String localName, final String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     *  Receive notification of the end of an element.\n     *\n     *\n     *  @param namespaceURI\n     *  @param localName\n     *  @param name The element type name\n     *  @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *             wrapping another exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void processAttribute(java.io.Writer writer, String name, String value, ElemDesc elemDesc) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Process an attribute.\n     * @param   writer The writer to write the processed output to.\n     * @param   name   The name of the attribute.\n     * @param   value   The value of the attribute.\n     * @param   elemDesc The description of the HTML element \n     *           that has this attribute.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isASCIIDigit(char c)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if a character is an ASCII digit.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String makeHHString(int i)",
    "returnType" : "String",
    "comment" : "\n     * Make an integer into an HH hex value.\n     * Does no checking on the size of the input, since this \n     * is only meant to be used locally by writeAttrURI.\n     * \n     * @param i must be a value less than 255.\n     * \n     * @return should be a two character string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isHHSign(String str)",
    "returnType" : "boolean",
    "comment" : "\n    * Dmitri Ilyin: Makes sure if the String is HH encoded sign.\n    * @param str must be 2 characters long\n    *\n    * @return true or false\n    ",
    "links" : [ ]
  }, {
    "name" : "public void writeAttrURI(final java.io.Writer writer, String string, boolean doURLEscaping) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the specified <var>string</var> after substituting non ASCII characters,\n     * with <CODE>%HH</CODE>, where HH is the hex of the byte value.\n     *\n     * @param   string      String to convert to XML format.\n     * @param doURLEscaping True if we should try to encode as \n     *                      per http://www.ietf.org/rfc/rfc2396.txt.\n     *\n     * @throws org.xml.sax.SAXException if a bad surrogate pair is detected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeAttrString(final java.io.Writer writer, String string, String encoding) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified <var>string</var> after substituting <VAR>specials</VAR>,\n     * and UTF-16 surrogates for character references <CODE>&amp;#xnn</CODE>.\n     *\n     * @param   string      String to convert to XML format.\n     * @param   encoding    CURRENTLY NOT IMPLEMENTED.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void characters(char[] chars, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of character data.\n     *\n     * <p>The Parser will call this method to report each chunk of\n     * character data.  SAX parsers may return all contiguous character\n     * data in a single chunk, or they may split it into several\n     * chunks; however, all of the characters in any single event\n     * must come from the same external entity, so that the Locator\n     * provides useful information.</p>\n     *\n     * <p>The application must not attempt to read from the array\n     * outside of the specified range.</p>\n     *\n     * <p>Note that some parsers will report whitespace using the\n     * ignorableWhitespace() method rather than this one (validating\n     * parsers must do so).</p>\n     *\n     * @param chars The characters from the XML document.\n     * @param start The start position in the array.\n     * @param length The number of characters to read from the array.\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see #ignorableWhitespace\n     * @see org.xml.sax.Locator\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void cdata(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     *  Receive notification of cdata.\n     *\n     *  <p>The Parser will call this method to report each chunk of\n     *  character data.  SAX parsers may return all contiguous character\n     *  data in a single chunk, or they may split it into several\n     *  chunks; however, all of the characters in any single event\n     *  must come from the same external entity, so that the Locator\n     *  provides useful information.</p>\n     *\n     *  <p>The application must not attempt to read from the array\n     *  outside of the specified range.</p>\n     *\n     *  <p>Note that some parsers will report whitespace using the\n     *  ignorableWhitespace() method rather than this one (validating\n     *  parsers must do so).</p>\n     *\n     *  @param ch The characters from the XML document.\n     *  @param start The start position in the array.\n     *  @param length The number of characters to read from the array.\n     *  @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *             wrapping another exception.\n     *  @see #ignorableWhitespace\n     *  @see org.xml.sax.Locator\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     *  Receive notification of a processing instruction.\n     *\n     *  @param target The processing instruction target.\n     *  @param data The processing instruction data, or null if\n     *         none was supplied.\n     *  @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *             wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void entityReference(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notivication of a entityReference.\n     *\n     * @param name non-null reference to entity name string.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void endElement(String elemName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#endElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processAttributes(java.io.Writer writer, int nAttrs) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Process the attributes, which means to write out the currently\n     * collected attributes to the writer. The attributes are not\n     * cleared by this method\n     * \n     * @param writer the writer to write processed attributes to.\n     * @param nAttrs the number of attributes in m_attributes \n     * to be processed\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void closeStartTag() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * For the enclosing elements starting tag write out out any attributes\n     * followed by \">\". At this point we also mark if this element is\n     * a cdata-section-element.\n     *\n     *@throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n         * This method is used when a prefix/uri namespace mapping\n         * is indicated after the element was started with a\n         * startElement() and before and endElement().\n         * startPrefixMapping(prefix,uri) would be used before the\n         * startElement() call.\n         * @param uri the URI of the namespace\n         * @param prefix the prefix associated with the given URI.\n         *\n         * @see ExtendedContentHandler#namespaceAfterStartElement(String, String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report the end of DTD declarations.\n     * @throws org.xml.sax.SAXException The application may raise an exception.\n     * @see #startDTD\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String eName, String aName, String type, String valueDefault, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method does nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String name, String model) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method does nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String name, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method does nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method does nothing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueAttribute(String name, String value, int flags) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to add an attribute to the currently open element. \n     * The caller has guaranted that this attribute is unique, which means that it\n     * not been seen before and will not be seen again.\n     * \n     * @param name the qualified name of the attribute\n     * @param value the value of the attribute which can contain only\n     * ASCII printable characters characters in the range 32 to 127 inclusive.\n     * @param flags the bit values of this integer give optimization information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetToHTMLStream()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static void initTagReference(Trie m_elementFlags)", "public void setSpecialEscapeURLs(boolean bool)", "public void setOmitMetaTag(boolean bool)", "public void setOutputFormat(Properties format)", "private final boolean getSpecialEscapeURLs()", "private final boolean getOmitMetaTag()", "public static final ElemDesc getElemDesc(String name)", "private ElemDesc getElemDesc2(String name)", "protected void startDocumentInternal() throws org.xml.sax.SAXException", "private void outputDocTypeDecl(String name) throws SAXException", "public final void endDocument() throws org.xml.sax.SAXException", "public void startElement(String namespaceURI, String localName, String name, Attributes atts) throws org.xml.sax.SAXException", "public final void endElement(final String namespaceURI, final String localName, final String name) throws org.xml.sax.SAXException", "protected void processAttribute(java.io.Writer writer, String name, String value, ElemDesc elemDesc) throws IOException", "private boolean isASCIIDigit(char c)", "private static String makeHHString(int i)", "private boolean isHHSign(String str)", "public void writeAttrURI(final java.io.Writer writer, String string, boolean doURLEscaping) throws IOException", "public void writeAttrString(final java.io.Writer writer, String string, String encoding) throws IOException", "public final void characters(char[] chars, int start, int length) throws org.xml.sax.SAXException", "public final void cdata(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException", "public final void entityReference(String name) throws org.xml.sax.SAXException", "public final void endElement(String elemName) throws SAXException", "public void processAttributes(java.io.Writer writer, int nAttrs) throws IOException, SAXException", "protected void closeStartTag() throws SAXException", "public void namespaceAfterStartElement(String prefix, String uri) throws SAXException", "public void startDTD(String name, String publicId, String systemId) throws SAXException", "public void endDTD() throws org.xml.sax.SAXException", "public void attributeDecl(String eName, String aName, String type, String valueDefault, String value) throws SAXException", "public void elementDecl(String name, String model) throws SAXException", "public void internalEntityDecl(String name, String value) throws SAXException", "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException", "public void addUniqueAttribute(String name, String value, int flags) throws SAXException", "public void comment(char[] ch, int start, int length) throws SAXException", "public boolean reset()", "private void resetToHTMLStream()" ],
  "variableNames" : [ "m_inDTD", "m_inBlockElem", "m_htmlcharInfo", "m_elementFlags", "m_dummy", "m_specialEscapeURLs", "m_omitMetaTag", "m_htmlInfo" ]
}