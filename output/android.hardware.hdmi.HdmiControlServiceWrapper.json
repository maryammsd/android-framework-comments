{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/hdmi/HdmiControlServiceWrapper.java",
  "packageName" : "android.hardware.hdmi",
  "className" : "HdmiControlServiceWrapper",
  "comment" : "\n * A wrapper of the Binder interface that clients running in the application process\n * will use to perform HDMI-CEC features by communicating with other devices\n * on the bus.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEVICE_PURE_CEC_SWITCH",
    "type" : "int",
    "comment" : " Pure CEC switch device type. ",
    "links" : [ ]
  }, {
    "name" : "mInfoList",
    "type" : "List<HdmiPortInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IHdmiControlService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public HdmiControlManager createHdmiControlManager()",
    "returnType" : "HdmiControlManager",
    "comment" : "\n     * Create a new HdmiControlManager with the current HdmiControlService wrapper\n     *\n     * @return the created HdmiControlManager\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPortInfo(@NonNull List<HdmiPortInfo> infoList)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDeviceTypes(@NonNull int[] types)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<HdmiPortInfo> getPortInfo()",
    "returnType" : "List<HdmiPortInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedTypes()",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public HdmiDeviceInfo getActiveSource()",
    "returnType" : "HdmiDeviceInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void oneTouchPlay(IHdmiControlCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void toggleAndFollowTvPower()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldHandleTvPowerKey()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void queryDisplayStatus(IHdmiControlCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addHotplugEventListener(IHdmiHotplugEventListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeHotplugEventListener(IHdmiHotplugEventListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addDeviceEventListener(IHdmiDeviceEventListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void deviceSelect(int deviceId, IHdmiControlCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void portSelect(int portId, IHdmiControlCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendKeyEvent(int deviceType, int keyCode, boolean isPressed)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendVolumeKeyEvent(int deviceType, int keyCode, boolean isPressed)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean canChangeSystemAudioMode()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSystemAudioMode()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getPhysicalAddress()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAudioMode(boolean enabled, IHdmiControlCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addSystemAudioModeChangeListener(IHdmiSystemAudioModeChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeSystemAudioModeChangeListener(IHdmiSystemAudioModeChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setArcMode(boolean enabled)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setProhibitMode(boolean enabled)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAudioVolume(int oldIndex, int newIndex, int maxIndex)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAudioMute(boolean mute)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setInputChangeListener(IHdmiInputChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<HdmiDeviceInfo> getInputDevices()",
    "returnType" : "List<HdmiDeviceInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<HdmiDeviceInfo> getDeviceList()",
    "returnType" : "List<HdmiDeviceInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void powerOffRemoteDevice(int logicalAddress, int powerStatus)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void powerOnRemoteDevice(int logicalAddress, int powerStatus)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void askRemoteDeviceToBecomeActiveSource(int physicalAddress)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendVendorCommand(int deviceType, int targetAddress, byte[] params, boolean hasVendorId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addVendorCommandListener(IHdmiVendorCommandListener listener, int vendorId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendStandby(int deviceType, int deviceId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setHdmiRecordListener(IHdmiRecordListener callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startOneTouchRecord(int recorderAddress, byte[] recordSource)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void stopOneTouchRecord(int recorderAddress)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startTimerRecording(int recorderAddress, int sourceType, byte[] recordSource)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void clearTimerRecording(int recorderAddress, int sourceType, byte[] recordSource)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendMhlVendorCommand(int portId, int offset, int length, byte[] data)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addHdmiMhlVendorCommandListener(IHdmiMhlVendorCommandListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setStandbyMode(boolean isStandbyModeOn)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setHdmiCecVolumeControlEnabled(boolean isHdmiCecVolumeControlEnabled)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHdmiCecVolumeControlEnabled()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void reportAudioStatus(int deviceType, int volume, int maxVolume, boolean isMute)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAudioModeOnForAudioOnlySource()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addHdmiCecVolumeControlFeatureListener(IHdmiCecVolumeControlFeatureListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeHdmiCecVolumeControlFeatureListener(IHdmiCecVolumeControlFeatureListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getMessageHistorySize()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean setMessageHistorySize(int newSize)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addCecSettingChangeListener(String name, IHdmiCecSettingChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeCecSettingChangeListener(String name, IHdmiCecSettingChangeListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getUserCecSettings()",
    "returnType" : "List<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllowedCecSettingStringValues(String name)",
    "returnType" : "List<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int[] getAllowedCecSettingIntValues(String name)",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getCecSettingStringValue(String name)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCecSettingStringValue(String name, String value)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCecSettingIntValue(String name)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCecSettingIntValue(String name, int value)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public HdmiControlManager createHdmiControlManager()", "public void setPortInfo(@NonNull List<HdmiPortInfo> infoList)", "public void setDeviceTypes(@NonNull int[] types)", "public List<HdmiPortInfo> getPortInfo()", "public int[] getSupportedTypes()", "public HdmiDeviceInfo getActiveSource()", "public void oneTouchPlay(IHdmiControlCallback callback)", "public void toggleAndFollowTvPower()", "public boolean shouldHandleTvPowerKey()", "public void queryDisplayStatus(IHdmiControlCallback callback)", "public void addHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener listener)", "public void removeHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener listener)", "public void addHotplugEventListener(IHdmiHotplugEventListener listener)", "public void removeHotplugEventListener(IHdmiHotplugEventListener listener)", "public void addDeviceEventListener(IHdmiDeviceEventListener listener)", "public void deviceSelect(int deviceId, IHdmiControlCallback callback)", "public void portSelect(int portId, IHdmiControlCallback callback)", "public void sendKeyEvent(int deviceType, int keyCode, boolean isPressed)", "public void sendVolumeKeyEvent(int deviceType, int keyCode, boolean isPressed)", "public boolean canChangeSystemAudioMode()", "public boolean getSystemAudioMode()", "public int getPhysicalAddress()", "public void setSystemAudioMode(boolean enabled, IHdmiControlCallback callback)", "public void addSystemAudioModeChangeListener(IHdmiSystemAudioModeChangeListener listener)", "public void removeSystemAudioModeChangeListener(IHdmiSystemAudioModeChangeListener listener)", "public void setArcMode(boolean enabled)", "public void setProhibitMode(boolean enabled)", "public void setSystemAudioVolume(int oldIndex, int newIndex, int maxIndex)", "public void setSystemAudioMute(boolean mute)", "public void setInputChangeListener(IHdmiInputChangeListener listener)", "public List<HdmiDeviceInfo> getInputDevices()", "public List<HdmiDeviceInfo> getDeviceList()", "public void powerOffRemoteDevice(int logicalAddress, int powerStatus)", "public void powerOnRemoteDevice(int logicalAddress, int powerStatus)", "public void askRemoteDeviceToBecomeActiveSource(int physicalAddress)", "public void sendVendorCommand(int deviceType, int targetAddress, byte[] params, boolean hasVendorId)", "public void addVendorCommandListener(IHdmiVendorCommandListener listener, int vendorId)", "public void sendStandby(int deviceType, int deviceId)", "public void setHdmiRecordListener(IHdmiRecordListener callback)", "public void startOneTouchRecord(int recorderAddress, byte[] recordSource)", "public void stopOneTouchRecord(int recorderAddress)", "public void startTimerRecording(int recorderAddress, int sourceType, byte[] recordSource)", "public void clearTimerRecording(int recorderAddress, int sourceType, byte[] recordSource)", "public void sendMhlVendorCommand(int portId, int offset, int length, byte[] data)", "public void addHdmiMhlVendorCommandListener(IHdmiMhlVendorCommandListener listener)", "public void setStandbyMode(boolean isStandbyModeOn)", "public void setHdmiCecVolumeControlEnabled(boolean isHdmiCecVolumeControlEnabled)", "public boolean isHdmiCecVolumeControlEnabled()", "public void reportAudioStatus(int deviceType, int volume, int maxVolume, boolean isMute)", "public void setSystemAudioModeOnForAudioOnlySource()", "public void addHdmiCecVolumeControlFeatureListener(IHdmiCecVolumeControlFeatureListener listener)", "public void removeHdmiCecVolumeControlFeatureListener(IHdmiCecVolumeControlFeatureListener listener)", "public int getMessageHistorySize()", "public boolean setMessageHistorySize(int newSize)", "public void addCecSettingChangeListener(String name, IHdmiCecSettingChangeListener listener)", "public void removeCecSettingChangeListener(String name, IHdmiCecSettingChangeListener listener)", "public List<String> getUserCecSettings()", "public List<String> getAllowedCecSettingStringValues(String name)", "public int[] getAllowedCecSettingIntValues(String name)", "public String getCecSettingStringValue(String name)", "public void setCecSettingStringValue(String name, String value)", "public int getCecSettingIntValue(String name)", "public void setCecSettingIntValue(String name, int value)" ],
  "variableNames" : [ "DEVICE_PURE_CEC_SWITCH", "mInfoList", "mTypes", "mInterface" ]
}