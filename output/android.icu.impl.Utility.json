{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Utility.java",
  "packageName" : "android.icu.impl",
  "className" : "Utility",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "APOSTROPHE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACKSLASH",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAGIC_UNSIGNED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ESCAPE",
    "type" : "char",
    "comment" : "\n     * The ESCAPE character is used during run-length encoding.  It signals\n     * a run of identical chars.\n     ",
    "links" : [ ]
  }, {
    "name" : "ESCAPE_BYTE",
    "type" : "byte",
    "comment" : "\n     * The ESCAPE_BYTE character is used during run-length encoding.  It signals\n     * a run of identical bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEX_DIGIT",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNESCAPE_MAP",
    "type" : "char[]",
    "comment" : " This map must be in ASCENDING ORDER OF THE ESCAPE CODE ",
    "links" : [ ]
  }, {
    "name" : "DIGITS",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final boolean arrayEquals(Object[] source, Object target)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two Object[]s.\n     * Ought to be in System\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayEquals(int[] source, Object target)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two int[]s\n     * Ought to be in System\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayEquals(double[] source, Object target)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two double[]s\n     * Ought to be in System\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayEquals(byte[] source, Object target)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayEquals(Object source, Object target)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two Object[]s\n     * Ought to be in System\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayRegionMatches(Object[] source, int sourceStart, Object[] target, int targetStart, int len)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two Object[]s\n     * Ought to be in System.\n     * @param len the length to compare.\n     * The start indices and start+len must be valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayRegionMatches(char[] source, int sourceStart, char[] target, int targetStart, int len)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two Object[]s\n     * Ought to be in System.\n     * @param len the length to compare.\n     * The start indices and start+len must be valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayRegionMatches(int[] source, int sourceStart, int[] target, int targetStart, int len)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two int[]s.\n     * @param len the length to compare.\n     * The start indices and start+len must be valid.\n     * Ought to be in System\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayRegionMatches(double[] source, int sourceStart, double[] target, int targetStart, int len)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience utility to compare two arrays of doubles.\n     * @param len the length to compare.\n     * The start indices and start+len must be valid.\n     * Ought to be in System\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean arrayRegionMatches(byte[] source, int sourceStart, byte[] target, int targetStart, int len)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final boolean sameObjects(Object a, Object b)",
    "returnType" : "boolean",
    "comment" : "\n     * Trivial reference equality.\n     * This method should help document that we really want == not equals(),\n     * and to have a single place to suppress warnings from static analysis tools.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int checkCompare(T a, T b)",
    "returnType" : "int",
    "comment" : "\n     * Convenience utility. Does null checks on objects, then calls compare.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int checkHash(Object a)",
    "returnType" : "int",
    "comment" : "\n     * Convenience utility. Does null checks on object, then calls hashCode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String arrayToRLEString(int[] a)",
    "returnType" : "String",
    "comment" : "\n     * Construct a string representing an int array.  Use run-length encoding.\n     * A character represents itself, unless it is the ESCAPE character.  Then\n     * the following notations are possible:\n     *   ESCAPE ESCAPE   ESCAPE literal\n     *   ESCAPE n c      n instances of character c\n     * Since an encoded run occupies 3 characters, we only encode runs of 4 or\n     * more characters.  Thus we have n > 0 and n != ESCAPE and n <= 0xFFFF.\n     * If we encounter a run where n == ESCAPE, we represent this as:\n     *   c ESCAPE n-1 c\n     * The ESCAPE value is chosen so as not to collide with commonly\n     * seen values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String arrayToRLEString(short[] a)",
    "returnType" : "String",
    "comment" : "\n     * Construct a string representing a short array.  Use run-length encoding.\n     * A character represents itself, unless it is the ESCAPE character.  Then\n     * the following notations are possible:\n     *   ESCAPE ESCAPE   ESCAPE literal\n     *   ESCAPE n c      n instances of character c\n     * Since an encoded run occupies 3 characters, we only encode runs of 4 or\n     * more characters.  Thus we have n > 0 and n != ESCAPE and n <= 0xFFFF.\n     * If we encounter a run where n == ESCAPE, we represent this as:\n     *   c ESCAPE n-1 c\n     * The ESCAPE value is chosen so as not to collide with commonly\n     * seen values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String arrayToRLEString(char[] a)",
    "returnType" : "String",
    "comment" : "\n     * Construct a string representing a char array.  Use run-length encoding.\n     * A character represents itself, unless it is the ESCAPE character.  Then\n     * the following notations are possible:\n     *   ESCAPE ESCAPE   ESCAPE literal\n     *   ESCAPE n c      n instances of character c\n     * Since an encoded run occupies 3 characters, we only encode runs of 4 or\n     * more characters.  Thus we have n > 0 and n != ESCAPE and n <= 0xFFFF.\n     * If we encounter a run where n == ESCAPE, we represent this as:\n     *   c ESCAPE n-1 c\n     * The ESCAPE value is chosen so as not to collide with commonly\n     * seen values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String arrayToRLEString(byte[] a)",
    "returnType" : "String",
    "comment" : "\n     * Construct a string representing a byte array.  Use run-length encoding.\n     * Two bytes are packed into a single char, with a single extra zero byte at\n     * the end if needed.  A byte represents itself, unless it is the\n     * ESCAPE_BYTE.  Then the following notations are possible:\n     *   ESCAPE_BYTE ESCAPE_BYTE   ESCAPE_BYTE literal\n     *   ESCAPE_BYTE n b           n instances of byte b\n     * Since an encoded run occupies 3 bytes, we only encode runs of 4 or\n     * more bytes.  Thus we have n > 0 and n != ESCAPE_BYTE and n <= 0xFF.\n     * If we encounter a run where n == ESCAPE_BYTE, we represent this as:\n     *   b ESCAPE_BYTE n-1 b\n     * The ESCAPE_BYTE value is chosen so as not to collide with commonly\n     * seen values.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void encodeRun(T buffer, int value, int length)",
    "returnType" : "void",
    "comment" : "\n     * Encode a run, possibly a degenerate run (of < 4 values).\n     * @param length The length of the run; must be > 0 && <= 0xFFFF.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void appendInt(T buffer, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void encodeRun(T buffer, short value, int length)",
    "returnType" : "void",
    "comment" : "\n     * Encode a run, possibly a degenerate run (of < 4 values).\n     * @param length The length of the run; must be > 0 && <= 0xFFFF.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void encodeRun(T buffer, byte value, int length, byte[] state)",
    "returnType" : "void",
    "comment" : "\n     * Encode a run, possibly a degenerate run (of < 4 values).\n     * @param length The length of the run; must be > 0 && <= 0xFF.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void appendEncodedByte(T buffer, byte value, byte[] state)",
    "returnType" : "void",
    "comment" : "\n     * Append a byte to the given Appendable, packing two bytes into each\n     * character.  The state parameter maintains intermediary data between\n     * calls.\n     * @param state A two-element array, with state[0] == 0 if this is the\n     * first byte of a pair, or state[0] != 0 if this is the second byte\n     * of a pair, in which case state[1] is the first byte.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int[] RLEStringToIntArray(String s)",
    "returnType" : "int[]",
    "comment" : "\n     * Construct an array of ints from a run-length encoded string.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int getInt(String s, int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final short[] RLEStringToShortArray(String s)",
    "returnType" : "short[]",
    "comment" : "\n     * Construct an array of shorts from a run-length encoded string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final char[] RLEStringToCharArray(String s)",
    "returnType" : "char[]",
    "comment" : "\n     * Construct an array of shorts from a run-length encoded string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final byte[] RLEStringToByteArray(String s)",
    "returnType" : "byte[]",
    "comment" : "\n     * Construct an array of bytes from a run-length encoded string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String formatForSource(String s)",
    "returnType" : "String",
    "comment" : "\n     * Format a String for representation in a source file.  This includes\n     * breaking it into lines and escaping characters using octal notation\n     * when necessary (control characters and double quotes).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String format1ForSource(String s)",
    "returnType" : "String",
    "comment" : "\n     * Format a String for representation in a source file.  Like\n     * formatForSource but does not do line breaking.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String escape(String s)",
    "returnType" : "String",
    "comment" : "\n     * Convert characters outside the range U+0020 to U+007F to\n     * Unicode escapes, and convert backslash to a double backslash.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int _digit8(int c)",
    "returnType" : "int",
    "comment" : " Convert one octal digit to a numeric value 0..7, or -1 on failure ",
    "links" : [ ]
  }, {
    "name" : "private static final int _digit16(int c)",
    "returnType" : "int",
    "comment" : " Convert one hex digit to a numeric value 0..F, or -1 on failure ",
    "links" : [ ]
  }, {
    "name" : "public static int unescapeAndLengthAt(CharSequence s, int offset)",
    "returnType" : "int",
    "comment" : "\n     * Converts an escape to a code point value. We attempt\n     * to parallel the icu4c unescapeAt() function.\n     * This function returns an integer with\n     * both the code point (bits 28..8) and the length of the escape sequence (bits 7..0).\n     * offset+length is the index after the escape sequence.\n     *\n     * @param offset the offset to the character <em>after</em> the backslash.\n     * @return the code point and length, or -1 on error.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int unescapeAndLengthAt(CharSequence s, int offset, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int codePointAndLength(int c, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int codePointAndLength(int c, int start, int limit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int cpFromCodePointAndLength(int cpAndLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int lengthFromCodePointAndLength(int cpAndLength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String unescape(CharSequence s)",
    "returnType" : "String",
    "comment" : "\n     * Convert all escapes in a given string using unescapeAndLengthAt().\n     * @exception IllegalArgumentException if an invalid escape is\n     * seen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String unescapeLeniently(CharSequence s)",
    "returnType" : "String",
    "comment" : "\n     * Convert all escapes in a given string using unescapeAndLengthAt().\n     * Leave invalid escape sequences unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String hex(long ch)",
    "returnType" : "String",
    "comment" : "\n     * Convert a char to 4 hex uppercase digits.  E.g., hex('a') =>\n     * \"0041\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String hex(long i, int places)",
    "returnType" : "String",
    "comment" : "\n     * Supplies a zero-padded hex representation of an integer (without 0x)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String hex(CharSequence s)",
    "returnType" : "String",
    "comment" : "\n     * Convert a string to comma-separated groups of 4 hex uppercase\n     * digits.  E.g., hex('ab') => \"0041,0042\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T hex(S s, int width, U separator, boolean useCodePoints, T result)",
    "returnType" : "T",
    "comment" : "\n     * Convert a string to separated groups of hex uppercase\n     * digits.  E.g., hex('ab'...) => \"0041,0042\".  Append the output\n     * to the given Appendable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String hex(byte[] o, int start, int end, String separator)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String hex(S s, int width, S separator)",
    "returnType" : "String",
    "comment" : "\n     * Convert a string to comma-separated groups of 4 hex uppercase\n     * digits.  E.g., hex('ab') => \"0041,0042\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void split(String s, char divider, String[] output)",
    "returnType" : "void",
    "comment" : "\n     * Split a string into pieces based on the given divider character\n     * @param s the string to split\n     * @param divider the character on which to split.  Occurrences of\n     * this character are not included in the output\n     * @param output an array to receive the substrings between\n     * instances of divider.  It must be large enough on entry to\n     * accommodate all output.  Adjacent instances of the divider\n     * character will place empty strings into output.  Before\n     * returning, output is padded out with empty strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] split(String s, char divider)",
    "returnType" : "String[]",
    "comment" : "\n     * Split a string into pieces based on the given divider character\n     * @param s the string to split\n     * @param divider the character on which to split.  Occurrences of\n     * this character are not included in the output\n     * @return output an array to receive the substrings between\n     * instances of divider. Adjacent instances of the divider\n     * character will place empty strings into output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int lookup(String source, String[] target)",
    "returnType" : "int",
    "comment" : "\n     * Look up a given string in a string array.  Returns the index at\n     * which the first occurrence of the string was found in the\n     * array, or -1 if it was not found.\n     * @param source the string to search for\n     * @param target the array of zero or more strings in which to\n     * look for source\n     * @return the index of target at which source first occurs, or -1\n     * if not found\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean parseChar(String id, int[] pos, char ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Parse a single non-whitespace character 'ch', optionally\n     * preceded by whitespace.\n     * @param id the string to be parsed\n     * @param pos INPUT-OUTPUT parameter.  On input, pos[0] is the\n     * offset of the first character to be parsed.  On output, pos[0]\n     * is the index after the last parsed character.  If the parse\n     * fails, pos[0] will be unchanged.\n     * @param ch the non-whitespace character to be parsed.\n     * @return true if 'ch' is seen preceded by zero or more\n     * whitespace characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parsePattern(String rule, int pos, int limit, String pattern, int[] parsedInts)",
    "returnType" : "int",
    "comment" : "\n     * Parse a pattern string starting at offset pos.  Keywords are\n     * matched case-insensitively.  Spaces may be skipped and may be\n     * optional or required.  Integer values may be parsed, and if\n     * they are, they will be returned in the given array.  If\n     * successful, the offset of the next non-space character is\n     * returned.  On failure, -1 is returned.\n     * @param pattern must only contain lowercase characters, which\n     * will match their uppercase equivalents as well.  A space\n     * character matches one or more required spaces.  A '~' character\n     * matches zero or more optional spaces.  A '#' character matches\n     * an integer and stores it in parsedInts, which the caller must\n     * ensure has enough capacity.\n     * @param parsedInts array to receive parsed integers.  Caller\n     * must ensure that parsedInts.length is >= the number of '#'\n     * signs in 'pattern'.\n     * @return the position after the last character parsed, or -1 if\n     * the parse failed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parsePattern(String pat, Replaceable text, int index, int limit)",
    "returnType" : "int",
    "comment" : "\n     * Parse a pattern string within the given Replaceable and a parsing\n     * pattern.  Characters are matched literally and case-sensitively\n     * except for the following special characters:\n     *\n     * ~  zero or more Pattern_White_Space chars\n     *\n     * If end of pattern is reached with all matches along the way,\n     * pos is advanced to the first unparsed index and returned.\n     * Otherwise -1 is returned.\n     * @param pat pattern that controls parsing\n     * @param text text to be parsed, starting at index\n     * @param index offset to first character to parse\n     * @param limit offset after last character to parse\n     * @return index after last parsed character, or -1 on parse failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parseInteger(String rule, int[] pos, int limit)",
    "returnType" : "int",
    "comment" : "\n     * Parse an integer at pos, either of the form \\d+ or of the form\n     * 0x[0-9A-Fa-f]+ or 0[0-7]+, that is, in standard decimal, hex,\n     * or octal format.\n     * @param pos INPUT-OUTPUT parameter.  On input, the first\n     * character to parse.  On output, the character after the last\n     * parsed character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String parseUnicodeIdentifier(String str, int[] pos)",
    "returnType" : "String",
    "comment" : "\n     * Parse a Unicode identifier from the given string at the given\n     * position.  Return the identifier, or null if there is no\n     * identifier.\n     * @param str the string to parse\n     * @param pos INPUT-OUTPUT parameter.  On INPUT, pos[0] is the\n     * first character to examine.  It must be less than str.length(),\n     * and it must not point to a whitespace character.  That is, must\n     * have pos[0] < str.length().  On\n     * OUTPUT, the position after the last parsed character.\n     * @return the Unicode identifier, or null if there is no valid\n     * identifier at pos[0].\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void recursiveAppendNumber(T result, int n, int radix, int minDigits)",
    "returnType" : "void",
    "comment" : "\n     * Append the digits of a positive integer to the given\n     * <code>Appendable</code> in the given radix. This is\n     * done recursively since it is easiest to generate the low-\n     * order digit first, but it must be appended last.\n     *\n     * @param result is the <code>Appendable</code> to append to\n     * @param n is the positive integer\n     * @param radix is the radix, from 2 to 36 inclusive\n     * @param minDigits is the minimum number of digits to append.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T appendNumber(T result, int n, int radix, int minDigits)",
    "returnType" : "T",
    "comment" : "\n     * Append a number to the given Appendable in the given radix.\n     * Standard digits '0'-'9' are used and letters 'A'-'Z' for\n     * radices 11 through 36.\n     * @param result the digits of the number are appended here\n     * @param n the number to be converted to digits; may be negative.\n     * If negative, a '-' is prepended to the digits.\n     * @param radix a radix from 2 to 36 inclusive.\n     * @param minDigits the minimum number of digits, not including\n     * any '-', to produce.  Values less than 2 have no effect.  One\n     * digit is always emitted regardless of this parameter.\n     * @return a reference to result\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parseNumber(String text, int[] pos, int radix)",
    "returnType" : "int",
    "comment" : "\n     * Parse an unsigned 31-bit integer at the given offset.  Use\n     * UCharacter.digit() to parse individual characters into digits.\n     * @param text the text to be parsed\n     * @param pos INPUT-OUTPUT parameter.  On entry, pos[0] is the\n     * offset within text at which to start parsing; it should point\n     * to a valid digit.  On exit, pos[0] is the offset after the last\n     * parsed character.  If the parse failed, it will be unchanged on\n     * exit.  Must be >= 0 on entry.\n     * @param radix the radix in which to parse; must be >= 2 and <=\n     * 36.\n     * @return a non-negative parsed number, or -1 upon parse failure.\n     * Parse fails if there are no digits, that is, if pos[0] does not\n     * point to a valid digit on entry, or if the number to be parsed\n     * does not fit into a 31-bit unsigned integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isUnprintable(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the character is NOT printable ASCII.  The tab,\n     * newline and linefeed characters are considered unprintable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean shouldAlwaysBeEscaped(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true for control codes and for surrogate and noncharacter code points\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean escapeUnprintable(T result, int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Escapes one unprintable code point using <backslash>uxxxx notation\n     * for U+0000 to U+FFFF and <backslash>Uxxxxxxxx for U+10000 and\n     * above.  If the character is printable ASCII, then do nothing\n     * and return false.  Otherwise, append the escaped notation and\n     * return true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T escape(T result, int c)",
    "returnType" : "T",
    "comment" : "\n     * Escapes one code point using <backslash>uxxxx notation\n     * for U+0000 to U+FFFF and <backslash>Uxxxxxxxx for U+10000 and above.\n     * @return result\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int quotedIndexOf(String text, int start, int limit, String setOfChars)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first character in a set, ignoring quoted text.\n     * For example, in the string \"abc'hide'h\", the 'h' in \"hide\" will not be\n     * found by a search for \"h\".  Unlike String.indexOf(), this method searches\n     * not for a single character, but for any character of the string\n     * <code>setOfChars</code>.\n     * @param text text to be searched\n     * @param start the beginning index, inclusive; <code>0 <= start\n     * <= limit</code>.\n     * @param limit the ending index, exclusive; <code>start <= limit\n     * <= text.length()</code>.\n     * @param setOfChars string with one or more distinct characters\n     * @return Offset of the first character in <code>setOfChars</code>\n     * found, or -1 if not found.\n     * @see String#indexOf\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void appendToRule(StringBuffer rule, int c, boolean isLiteral, boolean escapeUnprintable, StringBuffer quoteBuf)",
    "returnType" : "void",
    "comment" : "\n     * Append a character to a rule that is being built up.  To flush\n     * the quoteBuf to rule, make one final call with isLiteral == true.\n     * If there is no final character, pass in (int)-1 as c.\n     * @param rule the string to append the character to\n     * @param c the character to append, or (int)-1 if none.\n     * @param isLiteral if true, then the given character should not be\n     * quoted or escaped.  Usually this means it is a syntactic element\n     * such as > or $\n     * @param escapeUnprintable if true, then unprintable characters\n     * should be escaped using escapeUnprintable().  These escapes will\n     * appear outside of quotes.\n     * @param quoteBuf a buffer which is used to build up quoted\n     * substrings.  The caller should initially supply an empty buffer,\n     * and thereafter should not modify the buffer.  The buffer should be\n     * cleared out by, at the end, calling this method with a literal\n     * character (which may be -1).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void appendToRule(StringBuffer rule, String text, boolean isLiteral, boolean escapeUnprintable, StringBuffer quoteBuf)",
    "returnType" : "void",
    "comment" : "\n     * Append the given string to the rule.  Calls the single-character\n     * version of appendToRule for each character.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void appendToRule(StringBuffer rule, UnicodeMatcher matcher, boolean escapeUnprintable, StringBuffer quoteBuf)",
    "returnType" : "void",
    "comment" : "\n     * Given a matcher reference, which may be null, append its\n     * pattern as a literal to the given rule.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int compareUnsigned(int source, int target)",
    "returnType" : "int",
    "comment" : "\n     * Compares 2 unsigned integers\n     * @param source 32 bit unsigned integer\n     * @param target 32 bit unsigned integer\n     * @return 0 if equals, 1 if source is greater than target and -1\n     *         otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final byte highBit(int n)",
    "returnType" : "byte",
    "comment" : "\n     * Find the highest bit in a positive integer. This is done\n     * by doing a binary search through the bits.\n     *\n     * @param n is the integer\n     *\n     * @return the bit number of the highest bit, with 0 being\n     * the low order bit, or -1 if <code>n</code> is not positive\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String valueOf(int[] source)",
    "returnType" : "String",
    "comment" : "\n     * Utility method to take a int[] containing codepoints and return\n     * a string representation with code units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String repeat(String s, int count)",
    "returnType" : "String",
    "comment" : "\n     * Utility to duplicate a string count times\n     * @param s String to be duplicated.\n     * @param count Number of times to duplicate a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] splitString(String src, String target)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String[] splitWhitespace(String src)",
    "returnType" : "String[]",
    "comment" : "\n     * Split the string at runs of ascii whitespace characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String fromHex(String string, int minLength, String separator)",
    "returnType" : "String",
    "comment" : "\n     * Parse a list of hex numbers and return a string\n     * @param string String of hex numbers.\n     * @param minLength Minimal length.\n     * @param separator Separator.\n     * @return A string from hex numbers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String fromHex(String string, int minLength, Pattern separator)",
    "returnType" : "String",
    "comment" : "\n     * Parse a list of hex numbers and return a string\n     * @param string String of hex numbers.\n     * @param minLength Minimal length.\n     * @param separator Separator.\n     * @return A string from hex numbers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int addExact(int x, int y)",
    "returnType" : "int",
    "comment" : "\n     * This implementation is equivalent to Java 8+ Math#addExact(int, int)\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean charSequenceEquals(CharSequence a, CharSequence b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the chars in the two CharSequences are equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int charSequenceHashCode(CharSequence value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for a CharSequence that is equivalent to calling\n     * charSequence.toString().hashCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static A appendTo(CharSequence string, A appendable)",
    "returnType" : "A",
    "comment" : "\n     * Appends a CharSequence to an Appendable, converting IOException to ICUUncheckedIOException.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String joinStrings(CharSequence delimiter, Iterable<? extends CharSequence> elements)",
    "returnType" : "String",
    "comment" : "\n     * Java 8+ String#join(CharSequence, Iterable<? extends CharSequence>) compatible method for Java 7 env.\n     * @param delimiter the delimiter that separates each element\n     * @param elements the elements to join together.\n     * @return a new String that is composed of the elements separated by the delimiter\n     * @throws NullPointerException If delimiter or elements is null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final boolean arrayEquals(Object[] source, Object target)", "public static final boolean arrayEquals(int[] source, Object target)", "public static final boolean arrayEquals(double[] source, Object target)", "public static final boolean arrayEquals(byte[] source, Object target)", "public static final boolean arrayEquals(Object source, Object target)", "public static final boolean arrayRegionMatches(Object[] source, int sourceStart, Object[] target, int targetStart, int len)", "public static final boolean arrayRegionMatches(char[] source, int sourceStart, char[] target, int targetStart, int len)", "public static final boolean arrayRegionMatches(int[] source, int sourceStart, int[] target, int targetStart, int len)", "public static final boolean arrayRegionMatches(double[] source, int sourceStart, double[] target, int targetStart, int len)", "public static final boolean arrayRegionMatches(byte[] source, int sourceStart, byte[] target, int targetStart, int len)", "public static final boolean sameObjects(Object a, Object b)", "public static int checkCompare(T a, T b)", "public static int checkHash(Object a)", "public static final String arrayToRLEString(int[] a)", "public static final String arrayToRLEString(short[] a)", "public static final String arrayToRLEString(char[] a)", "public static final String arrayToRLEString(byte[] a)", "private static final void encodeRun(T buffer, int value, int length)", "private static final void appendInt(T buffer, int value)", "private static final void encodeRun(T buffer, short value, int length)", "private static final void encodeRun(T buffer, byte value, int length, byte[] state)", "private static final void appendEncodedByte(T buffer, byte value, byte[] state)", "public static final int[] RLEStringToIntArray(String s)", " static final int getInt(String s, int i)", "public static final short[] RLEStringToShortArray(String s)", "public static final char[] RLEStringToCharArray(String s)", "public static final byte[] RLEStringToByteArray(String s)", "public static final String formatForSource(String s)", "public static final String format1ForSource(String s)", "public static final String escape(String s)", "private static final int _digit8(int c)", "private static final int _digit16(int c)", "public static int unescapeAndLengthAt(CharSequence s, int offset)", "private static int unescapeAndLengthAt(CharSequence s, int offset, int length)", "private static int codePointAndLength(int c, int length)", "private static int codePointAndLength(int c, int start, int limit)", "public static int cpFromCodePointAndLength(int cpAndLength)", "public static int lengthFromCodePointAndLength(int cpAndLength)", "public static String unescape(CharSequence s)", "public static String unescapeLeniently(CharSequence s)", "public static String hex(long ch)", "public static String hex(long i, int places)", "public static String hex(CharSequence s)", "public static T hex(S s, int width, U separator, boolean useCodePoints, T result)", "public static String hex(byte[] o, int start, int end, String separator)", "public static String hex(S s, int width, S separator)", "public static void split(String s, char divider, String[] output)", "public static String[] split(String s, char divider)", "public static int lookup(String source, String[] target)", "public static boolean parseChar(String id, int[] pos, char ch)", "public static int parsePattern(String rule, int pos, int limit, String pattern, int[] parsedInts)", "public static int parsePattern(String pat, Replaceable text, int index, int limit)", "public static int parseInteger(String rule, int[] pos, int limit)", "public static String parseUnicodeIdentifier(String str, int[] pos)", "private static void recursiveAppendNumber(T result, int n, int radix, int minDigits)", "public static T appendNumber(T result, int n, int radix, int minDigits)", "public static int parseNumber(String text, int[] pos, int radix)", "public static boolean isUnprintable(int c)", "public static boolean shouldAlwaysBeEscaped(int c)", "public static boolean escapeUnprintable(T result, int c)", "public static T escape(T result, int c)", "public static int quotedIndexOf(String text, int start, int limit, String setOfChars)", "public static void appendToRule(StringBuffer rule, int c, boolean isLiteral, boolean escapeUnprintable, StringBuffer quoteBuf)", "public static void appendToRule(StringBuffer rule, String text, boolean isLiteral, boolean escapeUnprintable, StringBuffer quoteBuf)", "public static void appendToRule(StringBuffer rule, UnicodeMatcher matcher, boolean escapeUnprintable, StringBuffer quoteBuf)", "public static final int compareUnsigned(int source, int target)", "public static final byte highBit(int n)", "public static String valueOf(int[] source)", "public static String repeat(String s, int count)", "public static String[] splitString(String src, String target)", "public static String[] splitWhitespace(String src)", "public static String fromHex(String string, int minLength, String separator)", "public static String fromHex(String string, int minLength, Pattern separator)", "public static int addExact(int x, int y)", "public static boolean charSequenceEquals(CharSequence a, CharSequence b)", "public static int charSequenceHashCode(CharSequence value)", "public static A appendTo(CharSequence string, A appendable)", "public static String joinStrings(CharSequence delimiter, Iterable<? extends CharSequence> elements)" ],
  "variableNames" : [ "APOSTROPHE", "BACKSLASH", "MAGIC_UNSIGNED", "ESCAPE", "ESCAPE_BYTE", "LINE_SEPARATOR", "HEX_DIGIT", "UNESCAPE_MAP", "DIGITS" ]
}