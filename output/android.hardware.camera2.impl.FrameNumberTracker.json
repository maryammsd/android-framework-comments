{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/impl/FrameNumberTracker.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "FrameNumberTracker",
  "comment" : "\n * This class tracks the last frame number for submitted requests.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompletedFrameNumber",
    "type" : "long[]",
    "comment" : " the completed frame number for each type of capture results ",
    "links" : [ ]
  }, {
    "name" : "mPendingFrameNumbersWithOtherType",
    "type" : "LinkedList<Long>[]",
    "comment" : " the frame numbers that don't belong to each type of capture results and are yet to be seen\n     * through an updateTracker() call. Each list holds a list of frame numbers that should appear\n     * with request types other than that, to which the list corresponds.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPendingFrameNumbers",
    "type" : "LinkedList<Long>[]",
    "comment" : " the frame numbers that belong to each type of capture results which should appear, but\n     * haven't yet.",
    "links" : [ ]
  }, {
    "name" : "mFutureErrorMap",
    "type" : "TreeMap<Long, Integer>",
    "comment" : " frame number -> request type ",
    "links" : [ ]
  }, {
    "name" : "mPartialResults",
    "type" : "HashMap<Long, List<CaptureResult>>",
    "comment" : " Map frame numbers to list of partial results ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void update()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateTracker(long frameNumber, boolean isError, int requestType)",
    "returnType" : "void",
    "comment" : "\n     * This function is called every time when a result or an error is received.\n     * @param frameNumber the frame number corresponding to the result or error\n     * @param isError true if it is an error, false if it is not an error\n     * @param requestType the type of capture request: Reprocess, ZslStill, or Regular.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateTracker(long frameNumber, CaptureResult result, boolean partial, int requestType)",
    "returnType" : "void",
    "comment" : "\n     * This function is called every time a result has been completed.\n     *\n     * <p>It keeps a track of all the partial results already created for a particular\n     * frame number.</p>\n     *\n     * @param frameNumber the frame number corresponding to the result\n     * @param result the total or partial result\n     * @param partial {@true} if the result is partial, {@code false} if total\n     * @param requestType the type of capture request: Reprocess, ZslStill, or Regular.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CaptureResult> popPartialResults(long frameNumber)",
    "returnType" : "List<CaptureResult>",
    "comment" : "\n     * Attempt to pop off all of the partial results seen so far for the {@code frameNumber}.\n     *\n     * <p>Once popped-off, the partial results are forgotten (unless {@code updateTracker}\n     * is called again with new partials for that frame number).</p>\n     *\n     * @param frameNumber the frame number corresponding to the result\n     * @return a list of partial results for that frame with at least 1 element,\n     *         or {@code null} if there were no partials recorded for that frame\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCompletedFrameNumber()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getCompletedReprocessFrameNumber()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getCompletedZslStillFrameNumber()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCompletedFrameNumber(long frameNumber, int requestType) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Update the completed frame number for results of 3 categories\n     * (Regular/Reprocess/ZslStill).\n     *\n     * It validates that all previous frames of the same category have arrived.\n     *\n     * If there is a gap since previous frame number of the same category, assume the frames in\n     * the gap are other categories and store them in the pending frame number queue to check\n     * against when frames of those categories arrive.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void update()", "public void updateTracker(long frameNumber, boolean isError, int requestType)", "public void updateTracker(long frameNumber, CaptureResult result, boolean partial, int requestType)", "public List<CaptureResult> popPartialResults(long frameNumber)", "public long getCompletedFrameNumber()", "public long getCompletedReprocessFrameNumber()", "public long getCompletedZslStillFrameNumber()", "private void updateCompletedFrameNumber(long frameNumber, int requestType) throws IllegalArgumentException" ],
  "variableNames" : [ "TAG", "mCompletedFrameNumber", "mPendingFrameNumbersWithOtherType", "mPendingFrameNumbers", "mFutureErrorMap", "mPartialResults" ]
}