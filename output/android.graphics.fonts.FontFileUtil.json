{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/fonts/FontFileUtil.java",
  "packageName" : "android.graphics.fonts",
  "className" : "FontFileUtil",
  "comment" : "\n * Provides a utility for font file operations.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SFNT_VERSION_1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SFNT_VERSION_OTTO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TTC_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OS2_TABLE_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FVAR_TABLE_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANALYZE_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int unpackWeight(int packed)",
    "returnType" : "int",
    "comment" : "\n     * Unpack the weight value from packed integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean unpackItalic(int packed)",
    "returnType" : "boolean",
    "comment" : "\n     * Unpack the italic value from packed integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSuccess(int packed)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the analyzeStyle succeeded\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int pack(@IntRange(from = 0, to = 1000) int weight, boolean italic)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final int analyzeStyle(@NonNull ByteBuffer buffer, @IntRange(from = 0) int ttcIndex, @Nullable FontVariationAxis[] varSettings)",
    "returnType" : "int",
    "comment" : "\n     * Analyze the font file returns packed style info\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getRevision(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)",
    "returnType" : "long",
    "comment" : "\n     * Analyze head OpenType table and return fontRevision value as 32bit integer.\n     *\n     * The font revision is stored in 16.16 bit fixed point value. This function returns this fixed\n     * point value as 32 bit integer, i.e. the value multiplied with 65536.\n     *\n     * IllegalArgumentException will be thrown for invalid font data.\n     * If the font file is invalid, returns -1L.\n     *\n     * @param buffer a buffer of OpenType font\n     * @param index a font index\n     * @return font revision that shifted 16 bits left.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getPostScriptName(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)",
    "returnType" : "String",
    "comment" : "\n     * Analyze name OpenType table and return PostScript name.\n     *\n     * IllegalArgumentException will be thrown for invalid font data.\n     * null will be returned if not found or the PostScript name is invalid.\n     *\n     * @param buffer a buffer of OpenType font\n     * @param index a font index\n     * @return a post script name or null if it is invalid or not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int isPostScriptType1Font(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)",
    "returnType" : "int",
    "comment" : "\n     * Analyze name OpenType table and return true if the font has PostScript Type 1 glyphs.\n     *\n     * IllegalArgumentException will be thrown for invalid font data.\n     * -1 will be returned if the byte buffer is not a OpenType font data.\n     * 0 will be returned if the font file doesn't have PostScript Type 1 glyphs, i.e. ttf file.\n     * 1 will be returned if the font file has PostScript Type 1 glyphs, i.e. otf file.\n     *\n     * @param buffer a buffer of OpenType font\n     * @param index a font index\n     * @return a post script name or null if it is invalid or not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int isCollectionFont(@NonNull ByteBuffer buffer)",
    "returnType" : "int",
    "comment" : "\n     * Analyze the file content and returns 1 if the font file is an OpenType collection file, 0 if\n     * the font file is a OpenType font file, -1 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getUInt16(ByteBuffer buffer, int offset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Set<Integer> getSupportedAxes(@NonNull ByteBuffer buffer, int index)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Returns supported axes of font\n     *\n     * @param buffer A buffer of the entire font file.\n     * @param index A font index in case of font collection. Must be 0 otherwise.\n     * @return set of supported axes tag. Returns empty set on error.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFontRevision(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nGetFontPostScriptName(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nIsPostScriptType1Font(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int unpackWeight(int packed)", "public static boolean unpackItalic(int packed)", "public static boolean isSuccess(int packed)", "private static int pack(@IntRange(from = 0, to = 1000) int weight, boolean italic)", "public static final int analyzeStyle(@NonNull ByteBuffer buffer, @IntRange(from = 0) int ttcIndex, @Nullable FontVariationAxis[] varSettings)", "public static long getRevision(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)", "public static String getPostScriptName(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)", "public static int isPostScriptType1Font(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)", "public static int isCollectionFont(@NonNull ByteBuffer buffer)", "private static int getUInt16(ByteBuffer buffer, int offset)", "public static Set<Integer> getSupportedAxes(@NonNull ByteBuffer buffer, int index)", "private static native long nGetFontRevision(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)", "private static native String nGetFontPostScriptName(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)", "private static native int nIsPostScriptType1Font(@NonNull ByteBuffer buffer, @IntRange(from = 0) int index)" ],
  "variableNames" : [ "SFNT_VERSION_1", "SFNT_VERSION_OTTO", "TTC_TAG", "OS2_TABLE_TAG", "FVAR_TABLE_TAG", "ANALYZE_ERROR" ]
}