{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemTextLiteral.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemTextLiteral",
  "comment" : "\n * Implement a text literal.\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Text\">section-Creating-Text in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_preserveSpace",
    "type" : "boolean",
    "comment" : "\n   * Tell if space should be preserved.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_ch",
    "type" : "char[]",
    "comment" : "\n   * The character array.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_str",
    "type" : "String",
    "comment" : "\n   * The character array as a string.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_disableOutputEscaping",
    "type" : "boolean",
    "comment" : "\n   * Tells if this element should disable escaping.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPreserveSpace(boolean v)",
    "returnType" : "void",
    "comment" : "\n   * Set whether or not space should be preserved.\n   *\n   * @param v Boolean flag indicating whether \n   * or not space should be preserved\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPreserveSpace()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not space should be preserved.\n   *\n   * @return Boolean flag indicating whether \n   * or not space should be preserved \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setChars(char[] v)",
    "returnType" : "void",
    "comment" : "\n   * Set the characters that will be output to the result tree..\n   *\n   * @param v Array of characters that will be output to the result tree \n   ",
    "links" : [ ]
  }, {
    "name" : "public char[] getChars()",
    "returnType" : "char[]",
    "comment" : "\n   * Get the characters that will be output to the result tree..\n   *\n   * @return Array of characters that will be output to the result tree\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String getNodeValue()",
    "returnType" : "String",
    "comment" : "\n   * Get the value of the node as a string.\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDisableOutputEscaping(boolean v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"disable-output-escaping\" attribute.\n   * Normally, the xml output method escapes & and < (and\n   * possibly other characters) when outputting text nodes.\n   * This ensures that the output is well-formed XML. However,\n   * it is sometimes convenient to be able to produce output\n   * that is almost, but not quite well-formed XML; for\n   * example, the output may include ill-formed sections\n   * which are intended to be transformed into well-formed\n   * XML by a subsequent non-XML aware process. For this reason,\n   * XSLT provides a mechanism for disabling output escaping.\n   * An xsl:value-of or xsl:text element may have a\n   * disable-output-escaping attribute; the allowed values\n   * are yes or no; the default is no; if the value is yes,\n   * then a text node generated by instantiating the xsl:value-of\n   * or xsl:text element should be output without any escaping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>\n   *\n   * @param v Boolean value for \"disable-output-escaping\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDisableOutputEscaping()",
    "returnType" : "boolean",
    "comment" : "\n   * Get the \"disable-output-escaping\" attribute.\n   * Normally, the xml output method escapes & and < (and\n   * possibly other characters) when outputting text nodes.\n   * This ensures that the output is well-formed XML. However,\n   * it is sometimes convenient to be able to produce output\n   * that is almost, but not quite well-formed XML; for\n   * example, the output may include ill-formed sections\n   * which are intended to be transformed into well-formed\n   * XML by a subsequent non-XML aware process. For this reason,\n   * XSLT provides a mechanism for disabling output escaping.\n   * An xsl:value-of or xsl:text element may have a\n   * disable-output-escaping attribute; the allowed values\n   * are yes or no; the default is no; if the value is yes,\n   * then a text node generated by instantiating the xsl:value-of\n   * or xsl:text element should be output without any escaping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>\n   *\n   * @return Boolean value of \"disable-output-escaping\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Copy the text literal to the result tree.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setPreserveSpace(boolean v)", "public boolean getPreserveSpace()", "public void setChars(char[] v)", "public char[] getChars()", "public synchronized String getNodeValue()", "public void setDisableOutputEscaping(boolean v)", "public boolean getDisableOutputEscaping()", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException" ],
  "variableNames" : [ "serialVersionUID", "m_preserveSpace", "m_ch", "m_str", "m_disableOutputEscaping" ]
}