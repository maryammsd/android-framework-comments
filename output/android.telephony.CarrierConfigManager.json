{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/CarrierConfigManager.java",
  "packageName" : "android.telephony",
  "className" : "CarrierConfigManager",
  "comment" : "\n * Provides access to telephony configuration values that are carrier-specific.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SLOT_INDEX",
    "type" : "String",
    "comment" : "\n     * Extra included in {@link #ACTION_CARRIER_CONFIG_CHANGED} to indicate the slot index that the\n     * broadcast is for.\n     ",
    "links" : [ "#ACTION_CARRIER_CONFIG_CHANGED" ]
  }, {
    "name" : "EXTRA_REBROADCAST_ON_UNLOCK",
    "type" : "String",
    "comment" : "\n     * {@link #ACTION_CARRIER_CONFIG_CHANGED} is broadcast once on device bootup and then again when\n     * the device is unlocked. Direct-Boot-aware applications may use the first broadcast as an\n     * early signal that the carrier config has been loaded, but other applications will only\n     * receive the second broadcast, when the device is unlocked.\n     *\n     * This extra is included in {@link #ACTION_CARRIER_CONFIG_CHANGED} to indicate whether this is\n     * a rebroadcast on unlock.\n     ",
    "links" : [ "#ACTION_CARRIER_CONFIG_CHANGED" ]
  }, {
    "name" : "EXTRA_SUBSCRIPTION_INDEX",
    "type" : "String",
    "comment" : "\n     * Optional extra included in {@link #ACTION_CARRIER_CONFIG_CHANGED} to indicate the\n     * subscription index that the broadcast is for, if a valid one is available.\n     ",
    "links" : [ "#ACTION_CARRIER_CONFIG_CHANGED" ]
  }, {
    "name" : "SERVICE_CLASS_NONE",
    "type" : "int",
    "comment" : "\n     * Service class flag if no specific service class is specified.\n     * Reference: 3GPP TS 27.007 Section 7.4 Facility lock +CLCK\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_CLASS_VOICE",
    "type" : "int",
    "comment" : "\n     * Service class flag for voice telephony.\n     * Reference: 3GPP TS 27.007 Section 7.4 Facility lock +CLCK\n     ",
    "links" : [ ]
  }, {
    "name" : "USSD_OVER_CS_PREFERRED",
    "type" : "int",
    "comment" : "\n     * Only send USSD over IMS while CS is out of service, otherwise send USSD over CS.\n     * {@link #KEY_CARRIER_USSD_METHOD_INT}\n     ",
    "links" : [ "#KEY_CARRIER_USSD_METHOD_INT" ]
  }, {
    "name" : "USSD_OVER_IMS_PREFERRED",
    "type" : "int",
    "comment" : "\n     * Send USSD over IMS or CS while IMS is out of service or silent redial over CS if needed.\n     * {@link #KEY_CARRIER_USSD_METHOD_INT}\n     ",
    "links" : [ "#KEY_CARRIER_USSD_METHOD_INT" ]
  }, {
    "name" : "USSD_OVER_CS_ONLY",
    "type" : "int",
    "comment" : "\n     * Only send USSD over CS.\n     * {@link #KEY_CARRIER_USSD_METHOD_INT}\n     ",
    "links" : [ "#KEY_CARRIER_USSD_METHOD_INT" ]
  }, {
    "name" : "USSD_OVER_IMS_ONLY",
    "type" : "int",
    "comment" : "\n     * Only send USSD over IMS and disallow silent redial over CS.\n     * {@link #KEY_CARRIER_USSD_METHOD_INT}\n     ",
    "links" : [ "#KEY_CARRIER_USSD_METHOD_INT" ]
  }, {
    "name" : "CARRIER_NR_AVAILABILITY_NSA",
    "type" : "int",
    "comment" : "\n     * Indicates CARRIER_NR_AVAILABILITY_NSA determine that the carrier enable the non-standalone\n     * (NSA) mode of 5G NR.\n     ",
    "links" : [ ]
  }, {
    "name" : "CARRIER_NR_AVAILABILITY_SA",
    "type" : "int",
    "comment" : "\n     * Indicates CARRIER_NR_AVAILABILITY_SA determine that the carrier enable the standalone (SA)\n     * mode of 5G NR.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CARRIER_CONFIG_CHANGED",
    "type" : "String",
    "comment" : "\n     * This intent is broadcast by the system when carrier config changes. An int is specified in\n     * {@link #EXTRA_SLOT_INDEX} to indicate the slot index that this is for. An optional int extra\n     * {@link #EXTRA_SUBSCRIPTION_INDEX} is included to indicate the subscription index if a valid\n     * one is available for the slot index. An optional int extra\n     * {@link TelephonyManager#EXTRA_CARRIER_ID} is included to indicate the carrier id for the\n     * changed carrier configuration. An optional int extra\n     * {@link TelephonyManager#EXTRA_SPECIFIC_CARRIER_ID} is included to indicate the precise\n     * carrier id for the changed carrier configuration.\n     * @see TelephonyManager#getSimCarrierId()\n     * @see TelephonyManager#getSimSpecificCarrierId()\n     ",
    "links" : [ "android.telephony.TelephonyManager#EXTRA_SPECIFIC_CARRIER_ID", "android.telephony.TelephonyManager#EXTRA_CARRIER_ID", "#EXTRA_SUBSCRIPTION_INDEX", "#EXTRA_SLOT_INDEX" ]
  }, {
    "name" : "KEY_CARRIER_CONFIG_VERSION_STRING",
    "type" : "String",
    "comment" : "\n     * Specifies a value that identifies the version of the carrier configuration that is\n     * currently in use. This string is displayed on the UI.\n     * The format of the string is not specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VOLTE_PROVISIONED_BOOL",
    "type" : "String",
    "comment" : "\n     * This flag specifies whether VoLTE availability is based on provisioning. By default this is\n     * false.\n     * Used for UCE to determine if EAB provisioning checks should be based on provisioning.\n     * @deprecated Use {@link Ims#KEY_CARRIER_RCS_PROVISIONING_REQUIRED_BOOL} instead.\n     ",
    "links" : [ "#KEY_CARRIER_RCS_PROVISIONING_REQUIRED_BOOL" ]
  }, {
    "name" : "KEY_DISABLE_SUPPLEMENTARY_SERVICES_IN_AIRPLANE_MODE_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating the Supplementary Services(SS) is disable when airplane mode on in the\n     * Call Settings menu.\n     * {@code true}: SS is disable when airplane mode on.\n     * {@code false}: SS is enable when airplane mode on.\n     * The default value for this key is {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_VISIBILITY_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if the \"Call forwarding\" item is visible in the Call Settings menu.\n     * true means visible. false means gone.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_WHEN_UNREACHABLE_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if carrier supports call forwarding option \"When unreachable\".\n     *\n     * {@code true}: Call forwarding option \"When unreachable\" is supported.\n     * {@code false}: Call forwarding option \"When unreachable\" is not supported. Option will be\n     * removed in the UI.\n     *\n     * By default this value is true.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_WHEN_UNANSWERED_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if carrier supports call forwarding option \"When unanswered\".\n     *\n     * {@code true}: Call forwarding option \"When unanswered\" is supported.\n     * {@code false}: Call forwarding option \"When unanswered\" is not supported. Option will be\n     * removed in the UI.\n     *\n     * By default this value is true.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_WHEN_BUSY_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if carrier supports call forwarding option \"When busy\".\n     *\n     * {@code true}: Call forwarding option \"When busy\" is supported.\n     * {@code false}: Call forwarding option \"When busy\" is not supported. Option will be\n     * removed in the UI.\n     *\n     * By default this value is true.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ADDITIONAL_SETTINGS_CALLER_ID_VISIBILITY_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if the \"Caller ID\" item is visible in the Additional Settings menu.\n     * true means visible. false means gone.\n     *\n     * The default value is true.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ADDITIONAL_SETTINGS_CALL_WAITING_VISIBILITY_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if the \"Call Waiting\" item is visible in the Additional Settings menu.\n     * true means visible. false means gone.\n     *\n     * The default value is true.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_BARRING_VISIBILITY_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if the \"Call barring\" item is visible in the Call Settings menu.\n     * If true, the \"Call Barring\" menu will be visible. If false, the menu will be gone.\n     *\n     * Disabled by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_BARRING_SUPPORTS_PASSWORD_CHANGE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not changing the call barring password via the \"Call Barring\"\n     * settings menu is supported. If true, the option will be visible in the \"Call\n     * Barring\" settings menu. If false, the option will not be visible.\n     *\n     * Enabled by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_BARRING_SUPPORTS_DEACTIVATE_ALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not deactivating all call barring features via the \"Call Barring\"\n     * settings menu is supported. If true, the option will be visible in the \"Call\n     * Barring\" settings menu. If false, the option will not be visible.\n     *\n     * Enabled by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_BARRING_DEFAULT_SERVICE_CLASS_INT",
    "type" : "String",
    "comment" : "\n     * Specifies the service class for call barring service. Default value is\n     * {@link #SERVICE_CLASS_VOICE}.\n     * The value set as below:\n     * <ul>\n     * <li>0: {@link #SERVICE_CLASS_NONE}</li>\n     * <li>1: {@link #SERVICE_CLASS_VOICE}</li>\n     * </ul>\n     ",
    "links" : [ "#SERVICE_CLASS_NONE", "#SERVICE_CLASS_VOICE" ]
  }, {
    "name" : "KEY_SUPPORT_SS_OVER_CDMA_BOOL",
    "type" : "String",
    "comment" : "\n     * This carrier supports dialing USSD codes to enable/disable supplementary services such as\n     * call forwarding and call waiting over CDMA.\n     * <p>\n     * The supplementary service menu will still need to be set as visible, see\n     * {@link #KEY_CALL_FORWARDING_VISIBILITY_BOOL} and\n     * {@link #KEY_ADDITIONAL_SETTINGS_CALL_WAITING_VISIBILITY_BOOL}.\n     * <p>\n     * If this is set as false and the supplementary service menu is visible, the associated setting\n     * will be enabled and disabled based on the availability of supplementary services over UT. See\n     * {@link #KEY_CARRIER_SUPPORTS_SS_OVER_UT_BOOL}.\n     * @hide\n     ",
    "links" : [ "#KEY_CARRIER_SUPPORTS_SS_OVER_UT_BOOL", "#KEY_ADDITIONAL_SETTINGS_CALL_WAITING_VISIBILITY_BOOL", "#KEY_CALL_FORWARDING_VISIBILITY_BOOL" ]
  }, {
    "name" : "KEY_IGNORE_SIM_NETWORK_LOCKED_EVENTS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the Phone app should ignore EVENT_SIM_NETWORK_LOCKED\n     * events from the Sim.\n     * If true, this will prevent the IccNetworkDepersonalizationPanel from being shown, and\n     * effectively disable the \"Sim network lock\" feature.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MDN_IS_ADDITIONAL_VOICEMAIL_NUMBER_BOOL",
    "type" : "String",
    "comment" : "\n     * When checking if a given number is the voicemail number, if this flag is true\n     * then in addition to comparing the given number to the voicemail number, we also compare it\n     * to the mdn. If this flag is false, the given number is only compared to the voicemail number.\n     * By default this value is false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SIM_NETWORK_UNLOCK_ALLOW_DISMISS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the Phone app should provide a \"Dismiss\" button on the SIM network\n     * unlock screen. The default value is true. If set to false, there will be *no way* to dismiss\n     * the SIM network unlock screen if you don't enter the correct unlock code. (One important\n     * consequence: there will be no way to make an Emergency Call if your SIM is network-locked and\n     * you don't know the PIN.)\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_EMERGENCY_SMS_OVER_IMS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not sending emergency SMS messages over IMS\n     * is supported when in LTE/limited LTE (Emergency only) service mode..\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WORLD_PHONE_BOOL",
    "type" : "String",
    "comment" : " Flag indicating if the phone is a world phone ",
    "links" : [ ]
  }, {
    "name" : "KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag to require or skip entitlement checks.\n     * If true, entitlement checks will be executed if device has been configured for it,\n     * If false, entitlement checks will be skipped.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SUPPORTS_TETHERING_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating if the carrier supports tethering of mobile data.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RESTART_RADIO_ON_PDP_FAIL_REGULAR_DEACTIVATION_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether radio is to be restarted on error PDP_FAIL_REGULAR_DEACTIVATION\n     * This is false by default.\n     *\n     * @deprecated Use {@link #KEY_RADIO_RESTART_FAILURE_CAUSES_INT_ARRAY} instead\n     ",
    "links" : [ "#KEY_RADIO_RESTART_FAILURE_CAUSES_INT_ARRAY" ]
  }, {
    "name" : "KEY_RADIO_RESTART_FAILURE_CAUSES_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of failure cause codes that will trigger a modem restart when telephony receiving\n     * one of those during data setup. The cause codes are defined in 3GPP TS 24.008 Annex I and\n     * TS 24.301 Annex B.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENABLE_DIALER_KEY_VIBRATION_BOOL",
    "type" : "String",
    "comment" : "\n     * If true, enable vibration (haptic feedback) for key presses in the EmergencyDialer activity.\n     * The pattern is set on a per-platform basis using config_virtualKeyVibePattern. To be\n     * consistent with the regular Dialer, this value should agree with the corresponding values\n     * from config.xml under apps/Contacts.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DTMF_TYPE_ENABLED_BOOL",
    "type" : "String",
    "comment" : " Flag indicating if dtmf tone type is enabled ",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTO_RETRY_ENABLED_BOOL",
    "type" : "String",
    "comment" : " Flag indicating if auto retry is enabled ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_LOCAL_DTMF_TONES_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether we want to play local DTMF tones in a call, or just let the radio/BP handle\n     * playing of the tones.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PLAY_CALL_RECORDING_TONE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines if the carrier requires that a tone be played to the remote party when an app is\n     * recording audio during a call (e.g. using a call recording app).\n     * <p>\n     * Note: This requires the Telephony config_supports_telephony_audio_device overlay to be true\n     * in order to work.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SMS_REQUIRES_DESTINATION_NUMBER_CONVERSION_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines if the carrier requires converting the destination number before sending out an\n     * SMS. Certain networks and numbering plans require different formats.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_ONSCREEN_DIAL_BUTTON_BOOL",
    "type" : "String",
    "comment" : "\n     * If true, show an onscreen \"Dial\" button in the dialer. In practice this is used on all\n     * platforms, even the ones with hard SEND/END keys, but for maximum flexibility it's controlled\n     * by a flag here (which can be overridden on a per-product basis.)\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HAS_IN_CALL_NOISE_SUPPRESSION_BOOL",
    "type" : "String",
    "comment" : " Determines if device implements a noise suppression device for in call audio. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_EMERGENCY_NUMBERS_IN_CALL_LOG_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines if the current device should allow emergency numbers to be logged in the Call Log.\n     * (Some carriers require that emergency calls *not* be logged, presumably to avoid the risk of\n     * accidental redialing from the call log UI. This is a good idea, so the default here is\n     * false.)\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_UNLOGGABLE_NUMBERS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * A string array containing numbers that shouldn't be included in the call log.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VOICE_PRIVACY_DISABLE_UI_BOOL",
    "type" : "String",
    "comment" : " If true, removes the Voice Privacy option from Call Settings ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL",
    "type" : "String",
    "comment" : " Control whether users can reach the carrier portions of Cellular Network Settings. ",
    "links" : [ ]
  }, {
    "name" : "KEY_ONLY_AUTO_SELECT_IN_HOME_NETWORK_BOOL",
    "type" : "String",
    "comment" : "\n     * Only allow auto selection in Advanced Network Settings when in home network.\n     * Manual selection is allowed when in roaming network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_SINGLE_OPERATOR_ROW_IN_CHOOSE_NETWORK_SETTING_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether to show single operator row in the choose network setting.\n     *\n     * The device configuration value {@code config_enableNewAutoSelectNetworkUI} ultimately\n     * controls whether this carrier configuration option is used.\n     * Where {@code config_enableNewAutoSelectNetworkUI} is false, the value of this\n     * carrier configuration is ignored.\n     *\n     * If {@code true}, default value, merge the duplicate networks which with the same plmn, keep\n     * the one that with the higher signal strength level.\n     * If {@code false}, show all operators without merging.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_SPN_FOR_HOME_IN_CHOOSE_NETWORK_SETTING_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether to display SPN as network name for home network in choose\n     * network setting.\n     *\n     * If {@code true}, display SPN as network name in choose network setting.\n     * If {@code false}, display PLMN in choose network setting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SIMPLIFIED_NETWORK_SETTINGS_BOOL",
    "type" : "String",
    "comment" : "\n     * Control whether users receive a simplified network settings UI and improved network\n     * selection.\n     *\n     * @deprecated Never implemented. Has no behavior impact when override. DO NOT USE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_SIM_LOCK_SETTINGS_BOOL",
    "type" : "String",
    "comment" : " Control whether users can reach the SIM lock settings. ",
    "links" : [ ]
  }, {
    "name" : "KEY_APN_EXPAND_BOOL",
    "type" : "String",
    "comment" : " Control whether users can edit APNs in Settings. ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPERATOR_SELECTION_EXPAND_BOOL",
    "type" : "String",
    "comment" : " Control whether users can choose a network operator. ",
    "links" : [ ]
  }, {
    "name" : "KEY_PREFER_2G_BOOL",
    "type" : "String",
    "comment" : "\n     * Used in the Preferred Network Types menu to determine if the 2G option is displayed.\n     * Value defaults to false as of Android T to discourage the use of insecure 2G protocols.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PREFER_3G_VISIBILITY_BOOL",
    "type" : "String",
    "comment" : "\n     * Used in the Preferred Network Types menu to determine if the 3G option is displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_4G_ONLY_BOOL",
    "type" : "String",
    "comment" : "\n     * Used in Cellular Network Settings for preferred network type to show 4G only mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_CDMA_CHOICES_BOOL",
    "type" : "String",
    "comment" : " Show cdma network mode choices 1x, 3G, global etc. ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_HFA_FOR_PROVISIONING_BOOL",
    "type" : "String",
    "comment" : " CDMA activation goes through HFA ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_OTASP_FOR_PROVISIONING_BOOL",
    "type" : "String",
    "comment" : " (NONE, HFA, OTASP).",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SETTINGS_ENABLE_BOOL",
    "type" : "String",
    "comment" : " Display carrier settings menu if true ",
    "links" : [ ]
  }, {
    "name" : "KEY_ADDITIONAL_CALL_SETTING_BOOL",
    "type" : "String",
    "comment" : " Does not display additional call setting for IMS phone based on GSM Phone ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_APN_SETTING_CDMA_BOOL",
    "type" : "String",
    "comment" : " Show APN Settings for some CDMA carriers ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_SWAP_AFTER_MERGE_BOOL",
    "type" : "String",
    "comment" : " After a CDMA conference call is merged, the swap button should be displayed. ",
    "links" : [ ]
  }, {
    "name" : "KEY_EDITABLE_VOICEMAIL_NUMBER_SETTING_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether user can edit voicemail number in Settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EDITABLE_VOICEMAIL_NUMBER_BOOL",
    "type" : "String",
    "comment" : "\n     * Since the default voicemail number is empty, if a SIM card does not have a voicemail number\n     * available the user cannot use voicemail. This flag allows the user to edit the voicemail\n     * number in such cases, and is false by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_VOICEMAIL_NUMBER_SETTING_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether the voicemail number in Settings is hidden.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VOICEMAIL_NOTIFICATION_PERSISTENT_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether the voicemail notification is persistent in the notification bar. If true,\n     * the voicemail notifications cannot be dismissed from the notification bar.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL",
    "type" : "String",
    "comment" : " For IMS video over LTE calls, determines whether video pause signalling is supported. ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISABLE_CDMA_ACTIVATION_CODE_BOOL",
    "type" : "String",
    "comment" : "\n     * Disables dialing \"*228\" (OTASP provisioning) on CDMA carriers where it is not supported or is\n     * potentially harmful by locking the SIM to 3G.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ONLY_SINGLE_DC_ALLOWED_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of network type constants which support only a single data connection at a time.\n     * Some carriers do not support multiple PDP on UMTS.\n     * @see TelephonyManager NETWORK_TYPE_*\n     * @see #KEY_ONLY_SINGLE_DC_ALLOWED_INT_ARRAY\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CAPABILITIES_EXEMPT_FROM_SINGLE_DC_CHECK_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * Only apply if {@link #KEY_ONLY_SINGLE_DC_ALLOWED_INT_ARRAY} specifies the network types that\n     * support a single data connection at a time. This key defines a list of network capabilities\n     * which, if requested, will exempt the request from single data connection checks.\n     * @see NetworkCapabilities NET_CAPABILITY_*\n     ",
    "links" : [ "#KEY_ONLY_SINGLE_DC_ALLOWED_INT_ARRAY" ]
  }, {
    "name" : "KEY_GSM_ROAMING_NETWORKS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the platform's notion of a network operator being considered roaming.\n     * Value is string array of MCCMNCs to be considered roaming for 3GPP RATs.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the platform's notion of a network operator being considered not roaming.\n     * Value is string array of MCCMNCs to be considered not roaming for 3GPP RATs.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * The package name containing the ImsService that will be bound to the telephony framework to\n     * support both IMS MMTEL and RCS feature functionality instead of the device default\n     * ImsService for this subscription.\n     * @deprecated Use {@link #KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING} and\n     * {@link #KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING} instead to configure these values\n     * separately. If any of those values are not empty, they will override this value.\n     ",
    "links" : [ "#KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING", "#KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING" ]
  }, {
    "name" : "KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * The package name containing the ImsService that will be bound to the telephony framework to\n     * support IMS MMTEL feature functionality instead of the device default ImsService for this\n     * subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * The package name containing the ImsService that will be bound to the telephony framework to\n     * support IMS RCS feature functionality instead of the device default ImsService for this\n     * subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Override the package that will manage {@link SubscriptionPlan}\n     * information instead of the {@link CarrierService} that defines this\n     * value.\n     *\n     * @see SubscriptionManager#getSubscriptionPlans(int)\n     * @see SubscriptionManager#setSubscriptionPlans(int, java.util.List)\n     ",
    "links" : [ "android.service.carrier.CarrierService", "android.telephony.SubscriptionPlan" ]
  }, {
    "name" : "KEY_CDMA_ROAMING_NETWORKS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the platform's notion of a network operator being considered roaming.\n     * Value is string array of SIDs to be considered roaming for 3GPP2 RATs.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CDMA_NONROAMING_NETWORKS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the platform's notion of a network operator being considered non roaming.\n     * Value is string array of SIDs to be considered not roaming for 3GPP2 RATs.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_FORCE_HOME_NETWORK_BOOL",
    "type" : "String",
    "comment" : "\n     * Override the platform's notion of a network operator being considered non roaming.\n     * If true all networks are considered as home network a.k.a. non-roaming. When false,\n     * the 2 pairs of CMDA and GSM roaming/non-roaming arrays are consulted.\n     *\n     * @see #KEY_GSM_ROAMING_NETWORKS_STRING_ARRAY\n     * @see #KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY\n     * @see #KEY_CDMA_ROAMING_NETWORKS_STRING_ARRAY\n     * @see #KEY_CDMA_NONROAMING_NETWORKS_STRING_ARRAY\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VOLTE_AVAILABLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether VoLTE should be available for carrier, independent of carrier\n     * provisioning. If false: hard disabled. If true: then depends on carrier provisioning,\n     * availability, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VT_AVAILABLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether video telephony is available for carrier. If false: hard disabled.\n     * If true: then depends on carrier provisioning, availability, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_USSD_METHOD_INT",
    "type" : "String",
    "comment" : "\n     * Specify the method of selection for UE sending USSD requests. The default value is\n     * {@link #USSD_OVER_CS_PREFERRED}.\n     * <p> Available options:\n     * <ul>\n     *   <li>0: {@link #USSD_OVER_CS_PREFERRED} </li>\n     *   <li>1: {@link #USSD_OVER_IMS_PREFERRED} </li>\n     *   <li>2: {@link #USSD_OVER_CS_ONLY} </li>\n     *   <li>3: {@link #USSD_OVER_IMS_ONLY} </li>\n     * </ul>\n     ",
    "links" : [ "#USSD_OVER_CS_PREFERRED", "#USSD_OVER_IMS_ONLY", "#USSD_OVER_IMS_PREFERRED", "#USSD_OVER_CS_ONLY" ]
  }, {
    "name" : "KEY_VOLTE_5G_LIMITED_ALERT_DIALOG_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether to show an alert dialog for 5G disable when the user disables VoLTE.\n     * By default this value is {@code false}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NOTIFY_HANDOVER_VIDEO_FROM_WIFI_TO_LTE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the carrier wants to notify the user when a VT call has been handed\n     * over from WIFI to LTE.\n     * <p>\n     * The handover notification is sent as a\n     * {@link TelephonyManager#EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE}\n     * {@link android.telecom.Connection} event, which an {@link android.telecom.InCallService}\n     * should use to trigger the display of a user-facing message.\n     * <p>\n     * The Connection event is sent to the InCallService only once, the first time it occurs.\n     * @hide\n     ",
    "links" : [ "android.telecom.InCallService", "android.telephony.TelephonyManager#EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE", "android.telecom.Connection" ]
  }, {
    "name" : "KEY_ALLOW_MERGING_RTT_CALLS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the carrier supports merging a RTT call with a voice call,\n     * downgrading the call in the process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NOTIFY_HANDOVER_VIDEO_FROM_LTE_TO_WIFI_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the carrier wants to notify the user when a VT call has been handed\n     * over from LTE to WIFI.\n     * <p>\n     * The handover notification is sent as a\n     * {@link TelephonyManager#EVENT_HANDOVER_VIDEO_FROM_LTE_TO_WIFI}\n     * {@link android.telecom.Connection} event, which an {@link android.telecom.InCallService}\n     * should use to trigger the display of a user-facing message.\n     * @hide\n     ",
    "links" : [ "android.telecom.InCallService", "android.telephony.TelephonyManager#EVENT_HANDOVER_VIDEO_FROM_LTE_TO_WIFI", "android.telecom.Connection" ]
  }, {
    "name" : "KEY_SUPPORT_DOWNGRADE_VT_TO_AUDIO_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the carrier supports downgrading a video call (tx, rx or tx/rx)\n     * directly to an audio call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_VM_NUMBER_STRING",
    "type" : "String",
    "comment" : "\n     * Where there is no preloaded voicemail number on a SIM card, specifies the carrier's default\n     * voicemail number.\n     * When empty string, no default voicemail number is specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_VM_NUMBER_ROAMING_STRING",
    "type" : "String",
    "comment" : "\n     * Where there is no preloaded voicemail number on a SIM card, specifies the carrier's default\n     * voicemail number for roaming network.\n     * When empty string, no default voicemail number is specified for roaming network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_VM_NUMBER_ROAMING_AND_IMS_UNREGISTERED_STRING",
    "type" : "String",
    "comment" : "\n     * Where there is no preloaded voicemail number on a SIM card, specifies the carrier's default\n     * voicemail number while the device is both roaming and not registered for IMS.\n     * When empty string, no default voicemail number is specified for roaming network and\n     * unregistered state in IMS.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CONFIG_TELEPHONY_USE_OWN_NUMBER_FOR_VOICEMAIL_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag that specifies to use the user's own phone number as the voicemail number when there is\n     * no pre-loaded voicemail number on the SIM card.\n     * <p>\n     * {@link #KEY_DEFAULT_VM_NUMBER_STRING} takes precedence over this flag.\n     * <p>\n     * If false, the system default (*86) will be used instead.\n     ",
    "links" : [ "#KEY_DEFAULT_VM_NUMBER_STRING" ]
  }, {
    "name" : "KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS",
    "type" : "String",
    "comment" : "\n     * When {@code true}, changes to the mobile data enabled switch will not cause the VT\n     * registration state to change. That is, turning on or off mobile data will not cause VT to be\n     * enabled or disabled.\n     * When {@code false}, disabling mobile data will cause VT to be de-registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VILTE_DATA_IS_METERED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether data used for a video call over LTE is metered or not.\n     * <p>\n     * When {@code true}, if the device hits the data limit or data is disabled during a ViLTE call,\n     * the call will be downgraded to audio-only (or paused if\n     * {@link #KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL} is {@code true}).\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL" ]
  }, {
    "name" : "KEY_CARRIER_WFC_IMS_AVAILABLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether WFC over IMS should be available for carrier: independent of\n     * carrier provisioning. If false: hard disabled. If true: then depends on carrier\n     * provisioning, availability etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether Cross SIM over IMS should be available for carrier.\n     * When {@code false} the carrier does not support cross SIM calling.\n     * When {@code true} the carrier does support cross sim calling, where available\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENABLE_CROSS_SIM_CALLING_ON_OPPORTUNISTIC_DATA_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether cross sim calling on opportunistic data is supported for carrier.\n     * When {@code false} the carrier does not support cross sim calling on opportunistic data.\n     * When {@code true} the carrier does support cross sim calling on opportunistic data.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DIAL_STRING_REPLACE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Specifies a map from dialstrings to replacements for roaming network service numbers which\n     * cannot be replaced on the carrier side.\n     * <p>\n     * Individual entries have the format:\n     * [dialstring to replace]:[replacement]\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_INTERNATIONAL_ROAMING_DIAL_STRING_REPLACE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Specifies a map from dialstrings to replacements for international roaming network service\n     * numbers which cannot be replaced on the carrier side.\n     * <p>\n     * Individual entries have the format:\n     * [dialstring to replace]:[replacement]\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether WFC over IMS supports the \"wifi only\" option. If false, the wifi\n     * calling settings will not include an option for \"wifi only\". If true, the wifi calling\n     * settings will include an option for \"wifi only\"\n     * <p>\n     * By default, it is assumed that WFC supports \"wifi only\".\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT",
    "type" : "String",
    "comment" : "\n     * Default mode for WFC over IMS on home network:\n     * <ul>\n     *   <li>0: Wi-Fi only\n     *   <li>1: prefer mobile network\n     *   <li>2: prefer Wi-Fi\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT",
    "type" : "String",
    "comment" : "\n     * Default mode for WFC over IMS on roaming network.\n     * See {@link #KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT} for meaning of values.\n     ",
    "links" : [ "#KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT" ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Default WFC_IMS_enabled: true VoWiFi by default is on\n     *                          false VoWiFi by default is off\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Default WFC_IMS_roaming_enabled: true VoWiFi roaming by default is on\n     *                                  false VoWiFi roaming by default is off\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_PROMOTE_WFC_ON_CALL_FAIL_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether failed calls due to no service should prompt the user to enable\n     * WIFI calling. When {@code true}, if the user attempts to establish a call when there is no\n     * service available, they are connected to WIFI, and WIFI calling is disabled, a different\n     * call failure message will be used to encourage the user to enable WIFI calling.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_RCS_PROVISIONING_REQUIRED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether provisioning is required for RCS.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether provisioning is required for VoLTE, Video Telephony, and WiFi\n     * Calling.\n\n     * Combines VoLTE, VT, VoWiFI calling provisioning into one parameter.\n     * @deprecated Use {@link Ims#KEY_MMTEL_REQUIRES_PROVISIONING_BUNDLE} instead for\n     * finer-grained control.\n     * changing carrier_volte_provisioning_required_bool requires changes to\n     * mmtel_requires_provisioning_bundle and vice versa\n     * {@link Ims#KEY_MMTEL_REQUIRES_PROVISIONING_BUNDLE}\n     ",
    "links" : [ "#KEY_MMTEL_REQUIRES_PROVISIONING_BUNDLE" ]
  }, {
    "name" : "KEY_CARRIER_UT_PROVISIONING_REQUIRED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not the IMS MmTel UT capability requires carrier provisioning\n     * before it can be set as enabled.\n     *\n     * If true, the UT capability will be set to false for the newly loaded subscription\n     * and will require the carrier provisioning app to set the persistent provisioning result.\n     * If false, the platform will not wait for provisioning status updates for the UT capability\n     * and enable the UT over IMS capability for the subscription when the subscription is loaded.\n     *\n     * The default value for this key is {@code false}.\n     *\n     * @deprecated Use {@link Ims#KEY_MMTEL_REQUIRES_PROVISIONING_BUNDLE} instead for\n     * determining if UT requires provisioning.\n     ",
    "links" : [ "#KEY_MMTEL_REQUIRES_PROVISIONING_BUNDLE" ]
  }, {
    "name" : "KEY_CARRIER_SUPPORTS_SS_OVER_UT_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not the carrier supports Supplementary Services over the UT\n     * interface for this subscription.\n     *\n     * If true, the device will use Supplementary Services over UT when provisioned (see\n     * {@link #KEY_CARRIER_UT_PROVISIONING_REQUIRED_BOOL}). If false, this device will fallback to\n     * circuit switch for supplementary services and will disable this capability for IMS entirely.\n     *\n     * The default value for this key is {@code false}.\n     ",
    "links" : [ "#KEY_CARRIER_UT_PROVISIONING_REQUIRED_BOOL" ]
  }, {
    "name" : "KEY_CARRIER_VOLTE_OVERRIDE_WFC_PROVISIONING_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying if WFC provisioning depends on VoLTE provisioning.\n     *\n     * {@code false}: default value; honor actual WFC provisioning state.\n     * {@code true}: when VoLTE is not provisioned, treat WFC as not provisioned; when VoLTE is\n     *               provisioned, honor actual WFC provisioning state.\n     *\n     * As of now, Verizon is the only carrier enforcing this dependency in their\n     * WFC awareness and activation requirements.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DATA_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Override the device's configuration for the cellular data service to use for this SIM card.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DATA_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Override the device's configuration for the IWLAN data service to use for this SIM card.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DATA_SERVICE_WWAN_CLASS_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Override the device's configuration for the cellular data service class to use\n     * for this SIM card.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DATA_SERVICE_WLAN_CLASS_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Override the device's configuration for the IWLAN data service class to use\n     * for this SIM card.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : " Flag specifying whether VoLTE TTY is supported. ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VOWIFI_TTY_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : " Flag specifying whether VoWIFI TTY is supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_ALLOW_TURNOFF_IMS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether IMS service can be turned off. If false then the service will not be\n     * turned-off completely, but individual features can be disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_IMS_GBA_REQUIRED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether Generic Bootstrapping Architecture capable SIM is required for IMS.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether IMS instant lettering is available for the carrier. {@code True} if\n     * instant lettering is available for the carrier, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_USE_IMS_FIRST_FOR_EMERGENCY_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether IMS should be the first phone attempted for E911 even if the\n     * phone is not in service.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PREFER_IN_SERVICE_SIM_FOR_NORMAL_ROUTED_EMERGENCY_CALLS_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, this carrier will preferentially dial normal routed emergency calls over\n     * an in-service SIM if one is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_ONLY_DIALED_SIM_ECC_LIST_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, the determination of whether to place a call as an emergency call will be\n     * based on the known {@link android.telephony.emergency.EmergencyNumber}s for the SIM on which\n     * the call is being placed. In a dual SIM scenario, if Sim A has the emergency numbers\n     * 123, 456 and Sim B has the emergency numbers 789, and the user places a call on SIM A to 789,\n     * it will not be treated as an emergency call in this case.\n     * When {@code false}, the determination is based on the emergency numbers from all device SIMs,\n     * regardless of which SIM the call is being placed on. If Sim A has the emergency numbers\n     * 123, 456 and Sim B has the emergency numbers 789, and the user places a call on SIM A to 789,\n     * the call will be dialed as an emergency number, but with an unspecified routing.\n     * @hide\n     ",
    "links" : [ "android.telephony.emergency.EmergencyNumber" ]
  }, {
    "name" : "KEY_CARRIER_INSTANT_LETTERING_INVALID_CHARS_STRING",
    "type" : "String",
    "comment" : "\n     * When IMS instant lettering is available for a carrier (see\n     * {@link #KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL}), determines the list of characters\n     * which may not be contained in messages. Should be specified as a regular expression suitable\n     * for use with {@link String#matches(String)}.\n     ",
    "links" : [ "#matches(String)", "#KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL" ]
  }, {
    "name" : "KEY_CARRIER_INSTANT_LETTERING_ESCAPED_CHARS_STRING",
    "type" : "String",
    "comment" : "\n     * When IMS instant lettering is available for a carrier (see\n     * {@link #KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL}), determines a list of characters which\n     * must be escaped with a backslash '\\' character. Should be specified as a string containing\n     * the characters to be escaped. For example to escape quote and backslash the string would be\n     * a quote and a backslash.\n     ",
    "links" : [ "#KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL" ]
  }, {
    "name" : "KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING",
    "type" : "String",
    "comment" : "\n     * When IMS instant lettering is available for a carrier (see\n     * {@link #KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL}), determines the character encoding\n     * which will be used when determining the length of messages. Used in the InCall UI to limit\n     * the number of characters the user may type. If empty-string, the instant lettering\n     * message size limit will be enforced on a 1:1 basis. That is, each character will count\n     * towards the messages size limit as a single byte. If a character encoding is specified, the\n     * message size limit will be based on the number of bytes in the message per the specified\n     * encoding.\n     ",
    "links" : [ "#KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL" ]
  }, {
    "name" : "KEY_CARRIER_INSTANT_LETTERING_LENGTH_LIMIT_INT",
    "type" : "String",
    "comment" : "\n     * When IMS instant lettering is available for a carrier (see\n     * {@link #KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL}), the length limit for messages. Used\n     * in the InCall UI to ensure the user cannot enter more characters than allowed by the carrier.\n     * See also {@link #KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING} for more information on how\n     * the length of the message is calculated.\n     ",
    "links" : [ "#KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL", "#KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING" ]
  }, {
    "name" : "KEY_VOLTE_REPLACEMENT_RAT_INT",
    "type" : "String",
    "comment" : "\n     * If Voice Radio Technology is RIL_RADIO_TECHNOLOGY_LTE:14 or RIL_RADIO_TECHNOLOGY_UNKNOWN:0\n     * this is the value that should be used instead. A configuration value of\n     * RIL_RADIO_TECHNOLOGY_UNKNOWN:0 means there is no replacement value and that the default\n     * assumption for phone type (GSM) should be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_SIM_CALL_MANAGER_STRING",
    "type" : "String",
    "comment" : "\n     * The default sim call manager to use when the default dialer doesn't implement one. A sim call\n     * manager can control and route outgoing and incoming phone calls, even if they're placed\n     * using another connection service (PSTN, for example).\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_FORCE_DISABLE_ETWS_CMAS_TEST_BOOL",
    "type" : "String",
    "comment" : "\n     * The default flag specifying whether ETWS/CMAS test setting is forcibly disabled in\n     * Settings->More->Emergency broadcasts menu even though developer options is turned on.\n     * @deprecated Use {@code com.android.cellbroadcastreceiver.CellBroadcastReceiver} resource\n     * {@code show_test_settings} to control whether to show test alert settings or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALWAYS_SHOW_EMERGENCY_ALERT_ONOFF_BOOL",
    "type" : "String",
    "comment" : "\n     * The default flag specifying whether \"Allow alerts\" option will be always shown in\n     * emergency alerts settings regardless developer options is turned on or not.\n     *\n     * @deprecated The allow alerts option is always shown now. No longer need a config for that.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_MTU_INT",
    "type" : "String",
    "comment" : "\n     * Default mobile network MTU value, in bytes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DATA_CALL_APN_RETRY_AFTER_DISCONNECT_LONG",
    "type" : "String",
    "comment" : "\n     * Delay in milliseconds for retrying APN after disconnect\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DATA_CALL_PERMANENT_FAILURE_STRINGS",
    "type" : "String",
    "comment" : "\n     * Data call setup permanent failure causes by the carrier.\n     *\n     * @deprecated This API key was added in mistake and is not used anymore by the telephony data\n     * frameworks.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_METERED_APN_TYPES_STRINGS",
    "type" : "String",
    "comment" : "\n     * A string array indicating the default APN types that are metered by the carrier.\n     *\n     * The string in the array is the name of the APN type. For example, \"default\" for\n     * {@link ApnSetting#TYPE_DEFAULT}, \"mms\" for {@link ApnSetting#TYPE_MMS}, etc.\n     *\n     * The default value is {@code {\"default\", \"mms\", \"dun\", \"supl\"}}.\n     *\n     * @see ApnSetting#TYPE_DEFAULT\n     * @see ApnSetting#TYPE_MMS\n     * @see ApnSetting#TYPE_SUPL\n     * @see ApnSetting#TYPE_DUN\n     * @see ApnSetting#TYPE_HIPRI\n     * @see ApnSetting#TYPE_FOTA\n     * @see ApnSetting#TYPE_IMS\n     * @see ApnSetting#TYPE_CBS\n     * @see ApnSetting#TYPE_IA\n     * @see ApnSetting#TYPE_EMERGENCY\n     * @see ApnSetting#TYPE_MCX\n     * @see ApnSetting#TYPE_XCAP\n     * @see ApnSetting#TYPE_BIP\n     * @see ApnSetting#TYPE_VSIM\n     * @see ApnSetting#TYPE_ENTERPRISE\n     ",
    "links" : [ "android.telephony.data.ApnSetting#TYPE_DEFAULT", "android.telephony.data.ApnSetting#TYPE_MMS" ]
  }, {
    "name" : "KEY_CARRIER_METERED_ROAMING_APN_TYPES_STRINGS",
    "type" : "String",
    "comment" : "\n     * A string array indicating the default APN types that are roaming-metered by the carrier.\n     *\n     * The string in the array is the name of the APN type. For example, \"default\" for\n     * {@link ApnSetting#TYPE_DEFAULT}, \"mms\" for {@link ApnSetting#TYPE_MMS}, etc.\n     *\n     * The default value is {@code {\"default\", \"mms\", \"dun\", \"supl\"}}.\n     *\n     * @see ApnSetting#TYPE_DEFAULT\n     * @see ApnSetting#TYPE_MMS\n     * @see ApnSetting#TYPE_SUPL\n     * @see ApnSetting#TYPE_DUN\n     * @see ApnSetting#TYPE_HIPRI\n     * @see ApnSetting#TYPE_FOTA\n     * @see ApnSetting#TYPE_IMS\n     * @see ApnSetting#TYPE_CBS\n     * @see ApnSetting#TYPE_IA\n     * @see ApnSetting#TYPE_EMERGENCY\n     * @see ApnSetting#TYPE_MCX\n     * @see ApnSetting#TYPE_XCAP\n     * @see ApnSetting#TYPE_BIP\n     * @see ApnSetting#TYPE_VSIM\n     * @see ApnSetting#TYPE_ENTERPRISE\n     ",
    "links" : [ "android.telephony.data.ApnSetting#TYPE_DEFAULT", "android.telephony.data.ApnSetting#TYPE_MMS" ]
  }, {
    "name" : "KEY_CARRIER_ERI_FILE_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * CDMA carrier ERI (Enhanced Roaming Indicator) file name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_DESTINATION_NUMBER_STRING",
    "type" : "String",
    "comment" : "\n     * The carrier number mobile outgoing (MO) sms messages are sent to.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_PORT_NUMBER_INT",
    "type" : "String",
    "comment" : "\n     * The port through which the mobile outgoing (MO) sms messages are sent through.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_TYPE_STRING",
    "type" : "String",
    "comment" : "\n     * The type of visual voicemail protocol the carrier adheres to. See {@link TelephonyManager}\n     * for possible values. For example {@link TelephonyManager#VVM_TYPE_OMTP}.\n     ",
    "links" : [ "android.telephony.TelephonyManager#VVM_TYPE_OMTP", "android.telephony.TelephonyManager" ]
  }, {
    "name" : "KEY_VVM_CELLULAR_DATA_REQUIRED_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether cellular data is required to access visual voicemail.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_CLIENT_PREFIX_STRING",
    "type" : "String",
    "comment" : "\n     * The default OMTP visual voicemail client prefix to use. Defaulted to \"//VVM\"\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_SSL_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether to use SSL to connect to the visual voicemail IMAP server. Defaulted to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * A set of capabilities that should not be used even if it is reported by the visual voicemail\n     * IMAP CAPABILITY command.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_LEGACY_MODE_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether legacy mode should be used when the visual voicemail client is disabled.\n     *\n     * <p>Legacy mode is a mode that on the carrier side visual voicemail is still activated, but on\n     * the client side all network operations are disabled. SMSs are still monitored so a new\n     * message SYNC SMS will be translated to show a message waiting indicator, like traditional\n     * voicemails.\n     *\n     * <p>This is for carriers that does not support VVM deactivation so voicemail can continue to\n     * function without the data cost.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VVM_PREFETCH_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether to prefetch audio data on new voicemail arrival, defaulted to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_VVM_PACKAGE_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * The package name of the carrier's visual voicemail app to ensure that dialer visual voicemail\n     * and carrier visual voicemail are not active at the same time.\n     *\n     * @deprecated use {@link #KEY_CARRIER_VVM_PACKAGE_NAME_STRING_ARRAY}.\n     ",
    "links" : [ "#KEY_CARRIER_VVM_PACKAGE_NAME_STRING_ARRAY" ]
  }, {
    "name" : "KEY_CARRIER_VVM_PACKAGE_NAME_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of the carrier's visual voicemail app package names to ensure that dialer visual\n     * voicemail and carrier visual voicemail are not active at the same time.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_ICCID_IN_SIM_STATUS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether ICCID is showed in SIM Status screen, default to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_SIGNAL_STRENGTH_IN_SIM_STATUS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the {@link android.telephony.SignalStrength} is shown in the SIM\n     * Status screen. The default value is true.\n     ",
    "links" : [ "android.telephony.SignalStrength" ]
  }, {
    "name" : "KEY_INFLATE_SIGNAL_STRENGTH_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying if we should interpret all signal strength as one bar higher\n     * This is a replacement for the former resource config_inflateSignalStrength\n     * The default value is false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CI_ACTION_ON_SYS_UPDATE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether an additional (client initiated) intent needs to be sent on System\n     * update\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CI_ACTION_ON_SYS_UPDATE_INTENT_STRING",
    "type" : "String",
    "comment" : "\n     * Intent to be sent for the additional action on System update\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_STRING",
    "type" : "String",
    "comment" : "\n     * Extra to be included in the intent sent for additional action on System update\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_VAL_STRING",
    "type" : "String",
    "comment" : "\n     * Value of extra included in intent sent for additional action on System update\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_GSM_DTMF_TONE_DELAY_INT",
    "type" : "String",
    "comment" : "\n     * Specifies the amount of gap to be added in millis between postdial DTMF tones. When a\n     * non-zero value is specified, the UE shall wait for the specified amount of time before it\n     * sends out successive DTMF tones on the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_IMS_DTMF_TONE_DELAY_INT",
    "type" : "String",
    "comment" : "\n     * Specifies the amount of gap to be added in millis between DTMF tones. When a non-zero value\n     * is specified, the UE shall wait for the specified amount of time before it sends out\n     * successive DTMF tones on the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CDMA_DTMF_TONE_DELAY_INT",
    "type" : "String",
    "comment" : "\n     * Specifies the amount of gap to be added in millis between postdial DTMF tones. When a\n     * non-zero value is specified, the UE shall wait for the specified amount of time before it\n     * sends out successive DTMF tones on the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_MAP_NON_NUMBER_TO_VOICEMAIL_BOOL",
    "type" : "String",
    "comment" : "\n     * Some carriers will send call forwarding responses for voicemail in a format that is not 3gpp\n     * compliant, which causes issues during parsing. This causes the\n     * {@link com.android.internal.telephony.CallForwardInfo#number} to contain non-numerical\n     * characters instead of a number.\n     *\n     * If true, we will detect the non-numerical characters and replace them with \"Voicemail\".\n     * @hide\n     ",
    "links" : [ "com.android.internal.telephony.CallForwardInfo#number" ]
  }, {
    "name" : "KEY_IGNORE_RTT_MODE_SETTING_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, the phone will always tell the IMS stack to keep RTT enabled and\n     * determine on a per-call basis (based on extras from the dialer app) whether a call should be\n     * an RTT call or not.\n     *\n     * When {@code false}, the old behavior is used, where the toggle in accessibility settings is\n     * used to set the IMS stack's RTT enabled state.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_ADHOC_CONFERENCE_CALLS_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether adhoc conference calls are supported by a carrier. When {@code true},\n     * adhoc conference calling is supported, {@code false otherwise}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_ADD_CONFERENCE_PARTICIPANTS_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether conference participants can be added to existing call to form an adhoc\n     * conference call (in contrast to merging calls to form a conference). When {@code true},\n     * adding conference participants to existing call is supported, {@code false otherwise}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_CONFERENCE_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether conference calls are supported by a carrier. When {@code true},\n     * conference calling is supported, {@code false otherwise}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_IS_IMS_CONFERENCE_SIZE_ENFORCED_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether a maximum size limit for IMS conference calls is enforced on the device.\n     * When {@code true}, IMS conference calls will be limited to at most\n     * {@link #KEY_IMS_CONFERENCE_SIZE_LIMIT_INT} participants. When {@code false}, no attempt is\n     * made to limit the number of participants in a conference (the carrier will raise an error\n     * when an attempt is made to merge too many participants into a conference).\n     * <p>\n     * Note: The maximum size of a conference can ONLY be supported where\n     * {@link #KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL} is {@code true} since the platform\n     * needs conference event package data to accurately know the number of participants in the\n     * conference.\n     ",
    "links" : [ "#KEY_IMS_CONFERENCE_SIZE_LIMIT_INT", "#KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL" ]
  }, {
    "name" : "KEY_IMS_CONFERENCE_SIZE_LIMIT_INT",
    "type" : "String",
    "comment" : "\n     * Determines the maximum number of participants the carrier supports for a conference call.\n     * This number is exclusive of the current device. A conference between 3 devices, for example,\n     * would have a size limit of 2 participants.\n     * Enforced when {@link #KEY_IS_IMS_CONFERENCE_SIZE_ENFORCED_BOOL} is {@code true}.\n     ",
    "links" : [ "#KEY_IS_IMS_CONFERENCE_SIZE_ENFORCED_BOOL" ]
  }, {
    "name" : "KEY_SUPPORT_MANAGE_IMS_CONFERENCE_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether manage IMS conference calls is supported by a carrier. When {@code true},\n     * manage IMS conference call is supported, {@code false otherwise}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether the IMS conference merge process supports and returns its participants\n     * data. When {@code true}, on merge complete, conference call would have a list of its\n     * participants returned in XML format, {@code false otherwise}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_ON_PEER_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether processing of conference event package data received on a device other\n     * than the conference host is supported.\n     * <p>\n     * When a device A merges calls B and C into a conference it is considered the conference host\n     * and B and C are considered the conference peers.\n     * <p>\n     * When {@code true}, the conference peer will display the conference state if it receives\n     * conference event package data from the network. When {@code false}, the conference peer will\n     * ignore conference event package data received from the network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_RTP_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether the carrier supports the use of RFC8285 compliant RTP header extensions for\n     * the purpose of device to device communication while in a call.\n     * <p>\n     * See also {@link #KEY_SUPPORTS_SDP_NEGOTIATION_OF_D2D_RTP_HEADER_EXTENSIONS_BOOL}.\n     ",
    "links" : [ "#KEY_SUPPORTS_SDP_NEGOTIATION_OF_D2D_RTP_HEADER_EXTENSIONS_BOOL" ]
  }, {
    "name" : "KEY_SUPPORTS_SDP_NEGOTIATION_OF_D2D_RTP_HEADER_EXTENSIONS_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether the carrier supports the negotiations of RFC8285 compliant RTP header\n     * extensions supported on a call during the Session Description Protocol (SDP). This option\n     * is only used when {@link #KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_RTP_BOOL} is\n     * {@code true}.\n     * <p>\n     * When {@code true}, the RTP header extensions the platform uses for device to device\n     * communication will be offered to the remote end during the SDP negotiation process.\n     * When {@code false}, the RTP header extensions will not be negotiated during the SDP\n     * negotiation process and the platform will send RTP header extensions without prior\n     * negotiation if {@link #KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_RTP_BOOL} is\n     * {@code true}.\n     ",
    "links" : [ "#KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_RTP_BOOL" ]
  }, {
    "name" : "KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_DTMF_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether the carrier supports the use of DTMF digits A-D for the purpose of device\n     * to device communication while in a call.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISPLAY_HD_AUDIO_PROPERTY_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether High Definition audio property is displayed in the dialer UI.\n     * If {@code false}, remove the HD audio property from the connection so that HD audio related\n     * UI is not displayed. If {@code true}, keep HD audio property as it is configured.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_IMS_CONFERENCE_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether IMS conference calls are supported by a carrier. When {@code true},\n     * IMS conference calling is supported, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LOCAL_DISCONNECT_EMPTY_IMS_CONFERENCE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether the device will locally disconnect an IMS conference when the participant\n     * count drops to zero. When {@code true}, it is assumed the carrier does NOT disconnect a\n     * conference when the participant count drops to zero and that the device must do this by\n     * disconnecting the conference locally. When {@code false}, it is assumed that the carrier\n     * is responsible for disconnecting the conference when there are no longer any participants\n     * present.\n     * <p>\n     * Note: both {@link #KEY_SUPPORT_IMS_CONFERENCE_CALL_BOOL} and\n     * {@link #KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL} must be true for this configuration to\n     * have any effect.\n     * <p>\n     * Defaults to {@code false}, meaning the carrier network is responsible for disconnecting an\n     * empty IMS conference.\n     * @hide\n     ",
    "links" : [ "#KEY_SUPPORT_IMS_CONFERENCE_CALL_BOOL", "#KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL" ]
  }, {
    "name" : "KEY_SUPPORT_VIDEO_CONFERENCE_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether video conference calls are supported by a carrier. When {@code true},\n     * video calls can be merged into conference calls, {@code false} otherwise.\n     * <p>\n     * Note: even if video conference calls are not supported, audio calls may be merged into a\n     * conference if {@link #KEY_SUPPORT_CONFERENCE_CALL_BOOL} is {@code true}.\n     * @hide\n     ",
    "links" : [ "#KEY_SUPPORT_CONFERENCE_CALL_BOOL" ]
  }, {
    "name" : "KEY_EDITABLE_ENHANCED_4G_LTE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether user can toggle Enhanced 4G LTE Mode in Settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_ENHANCED_4G_LTE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether the Enhanced 4G LTE toggle will be shown in the settings. When this\n     * option is {@code true}, the toggle will be hidden regardless of whether the device and\n     * carrier supports 4G LTE or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL",
    "type" : "String",
    "comment" : "\n     * Sets the default state for the \"Enhanced 4G LTE\" or \"Advanced Calling\" mode toggle set by the\n     * user. When this is {@code true}, this mode by default is on, otherwise if {@code false},\n     * this mode by default is off.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_IMS_APN_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether IMS apn can be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether preferred network type can be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENABLE_APPS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * String array for package names that need to be enabled for this carrier.\n     * If user has explicitly disabled some packages in the list, won't re-enable.\n     * Other carrier specific apps which are not in this list may be disabled for current carrier,\n     * and only be re-enabled when this config for another carrier includes it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EDITABLE_WFC_MODE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether user can switch Wi-Fi preferred or Cellular preferred\n     * in calling preference.\n     * Some operators support Wi-Fi Calling only, not VoLTE.\n     * They don't need \"Cellular preferred\" option.\n     * In this case, set uneditable attribute for preferred preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CONFIG_WIFI_DISABLE_IN_ECBM",
    "type" : "String",
    "comment" : "\n     * Flag to indicate if Wi-Fi needs to be disabled in ECBM.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_OPERATOR_ERROR_CODES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * List operator-specific error codes and indices of corresponding error strings in\n     * wfcOperatorErrorAlertMessages and wfcOperatorErrorNotificationMessages.\n     *\n     * Example: \"REG09|0\" specifies error code \"REG09\" and index \"0\". This index will be\n     * used to find alert and notification messages in wfcOperatorErrorAlertMessages and\n     * wfcOperatorErrorNotificationMessages.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_SPN_FORMAT_IDX_INT",
    "type" : "String",
    "comment" : "\n     * Indexes of SPN format strings in wfcSpnFormats.\n     *\n     * <p>Available options are:\n     * <ul>\n     * <li>  0: %s</li>\n     * <li>  1: %s Wi-Fi Calling</li>\n     * <li>  2: WLAN Call</li>\n     * <li>  3: %s WLAN Call</li>\n     * <li>  4: %s Wi-Fi</li>\n     * <li>  5: WiFi Calling | %s</li>\n     * <li>  6: %s VoWifi</li>\n     * <li>  7: Wi-Fi Calling</li>\n     * <li>  8: Wi-Fi</li>\n     * <li>  9: WiFi Calling</li>\n     * <li> 10: VoWifi</li>\n     * <li> 11: %s WiFi Calling</li>\n     * <li> 12: WiFi Call</li>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_DATA_SPN_FORMAT_IDX_INT",
    "type" : "String",
    "comment" : "\n     * Indexes of data SPN format strings in wfcSpnFormats.\n     *\n     * @see KEY_WFC_SPN_FORMAT_IDX_INT for available options.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_FLIGHT_MODE_SPN_FORMAT_IDX_INT",
    "type" : "String",
    "comment" : "\n     * Indexes of SPN format strings in wfcSpnFormats used during flight mode.\n     *\n     * Set to -1 to use the value from KEY_WFC_SPN_FORMAT_IDX_INT also in this case.\n     * @see KEY_WFC_SPN_FORMAT_IDX_INT for other available options.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_SPN_USE_ROOT_LOCALE",
    "type" : "String",
    "comment" : "\n     * Use root locale when reading wfcSpnFormats.\n     *\n     * If true, then the root locale will always be used when reading wfcSpnFormats. This means the\n     * non localized version of wfcSpnFormats will be used.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_EMERGENCY_ADDRESS_CARRIER_APP_STRING",
    "type" : "String",
    "comment" : "\n     * The Component Name of the activity that can setup the emergency address for WiFi Calling\n     * as per carrier requirement.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_NAME_OVERRIDE_BOOL",
    "type" : "String",
    "comment" : "\n     * Unconditionally override the carrier name string using #KEY_CARRIER_NAME_STRING.\n     *\n     * If true, then the carrier name string will be #KEY_CARRIER_NAME_STRING, unconditionally.\n     *\n     * <p>If false, then the override will be performed conditionally and the\n     * #KEY_CARRIER_NAME_STRING will have the lowest-precedence; it will only be used in the event\n     * that the name string would otherwise be empty, allowing it to serve as a last-resort. If\n     * used, this value functions in place of the SPN on any/all ICC records for the corresponding\n     * subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * String to identify carrier name in CarrierConfig app. This string overrides SPN if\n     * #KEY_CARRIER_NAME_OVERRIDE_BOOL is true; otherwise, it will be used if its value is provided\n     * and SPN is unavailable\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WFC_CARRIER_NAME_OVERRIDE_BY_PNN_BOOL",
    "type" : "String",
    "comment" : "\n     * To override wifi calling's carrier name string using ef_pnn from sim card when SPN in empty.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_SIM_SPN_FORMAT_CARRIER_NAME_ONLY",
    "type" : "int",
    "comment" : "\n     * Specifies SPN format of displaying carrier name only.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "CROSS_SIM_SPN_FORMAT_CARRIER_NAME_WITH_BRANDING",
    "type" : "int",
    "comment" : "\n     * Specifies SPN format of displaying carrier name along with \"Cross-SIM calling\".\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CROSS_SIM_SPN_FORMAT_INT",
    "type" : "String",
    "comment" : "\n     * Indexes of SPN format strings in crossSimSpnFormats.\n     *\n     * <p>Available options are:\n     * <ul>\n     * <li>  {@link #CROSS_SIM_SPN_FORMAT_CARRIER_NAME_ONLY}: %s</li>\n     * <li>  {@link #CROSS_SIM_SPN_FORMAT_CARRIER_NAME_WITH_BRANDING}: %s Cross-SIM Calling</li>\n     * </ul>\n     * %s will be filled with carrier name\n     ",
    "links" : [ "#CROSS_SIM_SPN_FORMAT_CARRIER_NAME_ONLY", "#CROSS_SIM_SPN_FORMAT_CARRIER_NAME_WITH_BRANDING" ]
  }, {
    "name" : "KEY_SPN_DISPLAY_CONDITION_OVERRIDE_INT",
    "type" : "String",
    "comment" : "\n     * Override the SPN Display Condition 2 integer bits (lsb). B2, B1 is the last two bits of the\n     * spn display condition coding.\n     *\n     * The default value -1 mean this field is not set.\n     *\n     * B1 = 0: display of registered PLMN name not required when registered PLMN is either HPLMN\n     * or a PLMN in the service provider PLMN list (see EF_SPDI).\n     * B1 = 1: display of registered PLMN name required when registered PLMN is either HPLMN or a\n     * PLMN in the service provider PLMN list(see EF_SPDI).\n     * B2 = 0: display of the service provider name is required when registered PLMN is neither\n     * HPLMN nor a PLMN in the service provider PLMN list(see EF_SPDI).\n     * B2 = 1: display of the service provider name is not required when registered PLMN is neither\n     * HPLMN nor a PLMN in the service provider PLMN list(see EF_SPDI).\n     *\n     * Reference: 3GPP TS 31.102 v15.2.0 Section 4.2.12 EF_SPN.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SPDI_OVERRIDE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the SPDI - an array of PLMN(MCC + MNC) strings.\n     *\n     * Reference: 3GPP TS 31.102 v15.2.0 Section 4.2.66 EF_SPDI.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EHPLMN_OVERRIDE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the EHPLMNs - an array of PLMN(MCC + MNC) strings.\n     *\n     * To allow provision for multiple HPLMN codes, PLMN codes that are present within this list\n     * shall replace the HPLMN code derived from the IMSI for PLMN selection purposes.\n     *\n     * Reference: 3GPP TS 31.102 v15.2.0 Section 4.2.84 EF_EHPLMN\n     * Reference: 3GPP TS 23.122 v15.6.0 Section 1.2 Equivalent HPLMN list\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PNN_OVERRIDE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Override the PNN - a string array of comma-separated alpha long and short names:\n     * \"alpha_long1,alpha_short1\".\n     *\n     * Reference: 3GPP TS 31.102 v15.2.0 Section 4.2.58 EF_PNN.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPL_OVERRIDE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * A string array of OPL records, each with comma-delimited data fields as follows:\n     * \"plmn1,lactac_start,lactac_end,index\".\n     *\n     * Reference: 3GPP TS 31.102 v15.2.0 Section 4.2.59 EF_OPL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_ERI_BOOL",
    "type" : "String",
    "comment" : "\n     * Allow ERI rules to select a carrier name display string when using 3gpp2 access technologies.\n     * If this bit is not set, the carrier name display string will be selected from the carrier\n     * display name resolver which doesn't apply the ERI rules.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENABLE_CARRIER_DISPLAY_NAME_RESOLVER_BOOL",
    "type" : "String",
    "comment" : "\n     * If true, use the carrier display name(SPN and PLMN) from the carrier display name resolver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SIM_COUNTRY_ISO_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * String to override sim country iso.\n     * Sim country iso is based on sim MCC which is coarse and doesn't work with dual IMSI SIM where\n     * a SIM can have multiple MCC from different countries.\n     * Instead, each sim carrier should have a single country code, apply per carrier based iso\n     * code as an override. The overridden value can be read from\n     * {@link TelephonyManager#getSimCountryIso()} and {@link SubscriptionInfo#getCountryIso()}\n     ",
    "links" : [ "android.telephony.SubscriptionInfo#getCountryIso()", "android.telephony.TelephonyManager#getSimCountryIso()" ]
  }, {
    "name" : "KEY_CARRIER_CALL_SCREENING_APP_STRING",
    "type" : "String",
    "comment" : "\n     * The Component Name of a carrier-provided CallScreeningService implementation. Telecom will\n     * bind to {@link android.telecom.CallScreeningService} for ALL incoming calls and provide\n     * the carrier\n     * CallScreeningService with the opportunity to allow or block calls.\n     * <p>\n     * The String includes the package name/the class name.\n     * Example:\n     * <item>com.android.carrier/com.android.carrier.callscreeningserviceimpl</item>\n     * <p>\n     * Using {@link ComponentName#flattenToString()} to convert a ComponentName object to String.\n     * Using {@link ComponentName#unflattenFromString(String)} to convert a String object to a\n     * ComponentName.\n     ",
    "links" : [ "android.content.ComponentName#unflattenFromString(String)", "android.content.ComponentName#flattenToString()", "android.telecom.CallScreeningService" ]
  }, {
    "name" : "KEY_CDMA_HOME_REGISTERED_PLMN_NAME_OVERRIDE_BOOL",
    "type" : "String",
    "comment" : "\n     * Override the registered PLMN name using #KEY_CDMA_HOME_REGISTERED_PLMN_NAME_STRING.\n     *\n     * If true, then the registered PLMN name (only for CDMA/CDMA-LTE and only when not roaming)\n     * will be #KEY_CDMA_HOME_REGISTERED_PLMN_NAME_STRING. If false, or if phone type is not\n     * CDMA/CDMA-LTE or if roaming, then #KEY_CDMA_HOME_REGISTERED_PLMN_NAME_STRING will be ignored.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CDMA_HOME_REGISTERED_PLMN_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * String to identify registered PLMN name in CarrierConfig app. This string overrides\n     * registered PLMN name if #KEY_CDMA_HOME_REGISTERED_PLMN_NAME_OVERRIDE_BOOL is true, phone type\n     * is CDMA/CDMA-LTE and device is not in roaming state; otherwise, it will be ignored.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CSP_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * If this is true, the SIM card (through Customer Service Profile EF file) will be able to\n     * prevent manual operator selection. If false, this SIM setting will be ignored and manual\n     * operator selection will always be available. See CPHS4_2.WW6, CPHS B.4.7.1 for more\n     * information\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_ADDING_APNS_BOOL",
    "type" : "String",
    "comment" : "\n     * Allow user to add APNs\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_READ_ONLY_APN_TYPES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * APN types that user is not allowed to modify.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_READ_ONLY_APN_FIELDS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * APN fields that user is not allowed to modify.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_APN_SETTINGS_DEFAULT_APN_TYPES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Default value of APN types field if not specified by user when adding/modifying an APN.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_BROADCAST_EMERGENCY_CALL_STATE_CHANGES_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if intent for emergency call state changes should be broadcast\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_STK_DISABLE_LAUNCH_BROWSER_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether STK LAUNCH_BROWSER command is disabled.\n     * If {@code true}, then the browser will not be launched\n     * on UI for the LAUNCH_BROWSER STK command.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if the helper text for STK GET INKEY/INPUT commands with the digit only\n     * mode is displayed on the input screen.\n     * The helper text is displayed regardless of the input mode, if {@code false}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALWAYS_SHOW_DATA_RAT_ICON_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if show data RAT icon on status bar even when data is disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if default data account should show LTE or 4G icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_4GLTE_FOR_LTE_DATA_ICON_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if default data account should show 4G LTE or 4G icon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_4G_FOR_3G_DATA_ICON_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if default data account should show 4G icon when in 3G.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if LTE+ icon should be shown if available.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_5G_SLICE_ICON_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicting if the 5G slice icon should be shown if available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LTE_PLUS_THRESHOLD_BANDWIDTH_KHZ_INT",
    "type" : "String",
    "comment" : "\n     * The combined channel bandwidth threshold (non-inclusive) in KHz required to display the\n     * LTE+ data icon. It is 20000 by default, meaning the LTE+ icon will be shown if the device is\n     * using carrier aggregation and the combined channel bandwidth is strictly greater than 20 MHz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NR_ADVANCED_THRESHOLD_BANDWIDTH_KHZ_INT",
    "type" : "String",
    "comment" : "\n     * The combined channel bandwidth threshold (inclusive) in KHz required to display the\n     * NR advanced (i.e. 5G+) data icon. It is 0 by default, meaning minimum bandwidth check is\n     * not enabled. Other factors like bands or frequency can also determine whether the NR\n     * advanced data icon is shown or not.\n     *\n     * @see #KEY_ADDITIONAL_NR_ADVANCED_BANDS_INT_ARRAY\n     * @see #KEY_NR_ADVANCED_CAPABLE_PCO_ID_INT\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_INCLUDE_LTE_FOR_NR_ADVANCED_THRESHOLD_BANDWIDTH_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicating whether to include LTE cell bandwidths when determining whether the aggregated\n     * cell bandwidth meets the required threshold for NR advanced.\n     *\n     * @see TelephonyDisplayInfo#OVERRIDE_NETWORK_TYPE_NR_ADVANCED\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RATCHET_NR_ADVANCED_BANDWIDTH_IF_RRC_IDLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicating whether to ratchet the aggregated cell bandwidths on receiving new values when\n     * the device is in RRC IDLE mode.\n     * The aggregated cell bandwidths are used for determining NR advanced state.\n     *\n     * If this is {@code true}, we will only update the aggregate cell bandwidths if the new\n     * aggregate is higher than the current aggregate and the anchor NR cell is the same.\n     * If this is {@code false}, we will always update the aggregate cell bandwidths when receiving\n     * new values.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_OPERATOR_NAME_IN_STATUSBAR_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if operator name should be shown in the status bar\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPERATOR_NAME_FILTER_PATTERN_STRING",
    "type" : "String",
    "comment" : "\n     * The string is used to filter redundant string from PLMN Network Name that's supplied by\n     * specific carrier.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_CARRIER_DATA_ICON_PATTERN_STRING",
    "type" : "String",
    "comment" : "\n     * The string is used to compare with operator name.\n     * If it matches the pattern then show specific data icon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_PRECISE_FAILED_CAUSE_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean to decide whether to show precise call failed cause to user\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_NR_AVAILABILITIES_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of carrier nr availability is used to determine whether the carrier enable the\n     * non-standalone (NSA) mode of 5G NR, standalone (SA) mode of 5G NR\n     *\n     * <p> The value of list is\n     * {@link #CARRIER_NR_AVAILABILITY_NSA}, or {@link #CARRIER_NR_AVAILABILITY_SA}.\n     *\n     * <p> For example, if both NSA and SA are used, the list value is {\n     * {@link #CARRIER_NR_AVAILABILITY_NSA},{@link #CARRIER_NR_AVAILABILITY_SA}}.\n     * If the carrier doesn't support 5G NR, the value is the empty array.\n     * If the key is invalid or not configured, the default value {\n     * {@link #CARRIER_NR_AVAILABILITY_NSA},{@link #CARRIER_NR_AVAILABILITY_SA}} will apply.\n     ",
    "links" : [ "#CARRIER_NR_AVAILABILITY_SA", "#CARRIER_NR_AVAILABILITY_NSA" ]
  }, {
    "name" : "KEY_LTE_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean to decide whether LTE is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_TDSCDMA_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean to decide whether TD-SCDMA is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_TDSCDMA_ROAMING_NETWORKS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of mcc/mnc that support TD-SCDMA for device when connect to the roaming network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WORLD_MODE_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean to decide whether world mode is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SETTINGS_ACTIVITY_COMPONENT_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * Flatten {@link android.content.ComponentName} of the carrier's settings activity.\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "KEY_MMS_ALIAS_ENABLED_BOOL",
    "type" : "String",
    "comment" : " SmsManager. The variable names and string values are copied from there.",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_ALLOW_ATTACH_AUDIO_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_APPEND_TRANSACTION_ID_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_GROUP_MMS_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MMS_DELIVERY_REPORT_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MMS_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MMS_READ_REPORT_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MULTIPART_SMS_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_NOTIFY_WAP_MMSC_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SHOW_CELL_BROADCAST_APP_LINKS_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SMS_DELIVERY_REPORT_ENABLED_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SUPPORT_HTTP_CHARSET_HEADER_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SUPPORT_MMS_CONTENT_DISPOSITION_BOOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_ALIAS_MAX_CHARS_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_ALIAS_MIN_CHARS_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_HTTP_SOCKET_TIMEOUT_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MAX_IMAGE_HEIGHT_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MAX_IMAGE_WIDTH_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MAX_MESSAGE_SIZE_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MESSAGE_TEXT_MAX_SIZE_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_RECIPIENT_LIMIT_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SMS_TO_MMS_TEXT_THRESHOLD_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_SUBJECT_MAX_LENGTH_INT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_EMAIL_GATEWAY_NUMBER_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_HTTP_PARAMS_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_NAI_SUFFIX_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_UA_PROF_TAG_NAME_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_UA_PROF_URL_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_USER_AGENT_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_CLOSE_CONNECTION_BOOL",
    "type" : "String",
    "comment" : "\n     * If true, add \"Connection: close\" header to MMS HTTP requests so the connection\n     * is immediately closed (disabling keep-alive).\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_NETWORK_RELEASE_TIMEOUT_MILLIS_INT",
    "type" : "String",
    "comment" : "\n     * Waiting time in milliseconds used before releasing an MMS data call. Not tearing down an MMS\n     * data connection immediately helps to reduce the message delivering latency if messaging\n     * continues between all parties in the conversation since the same data connection can be\n     * reused for further messages.\n     *\n     * This timer will control how long the data call will be kept alive before being torn down.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MMS_MAX_NTN_PAYLOAD_SIZE_BYTES_INT",
    "type" : "String",
    "comment" : "\n     * Maximum size in bytes of the PDU to send or download when connected to a non-terrestrial\n     * network. MmsService will return a result code of MMS_ERROR_TOO_LARGE_FOR_TRANSPORT if\n     * the PDU exceeds this limit when connected to a non-terrestrial network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SETUP_APP_STRING",
    "type" : "String",
    "comment" : "\n     * The flatten {@link android.content.ComponentName componentName} of the activity that can\n     * setup the device and activate with the network per carrier requirements.\n     *\n     * e.g., com.google.android.carrierPackageName/.CarrierActivityName\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_ACTIONS_ON_REDIRECTION_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Defines carrier-specific actions which act upon\n     * com.android.internal.telephony.CARRIER_SIGNAL_REDIRECTED, used for customization of the\n     * default carrier app.\n     * Format: \"CARRIER_ACTION_IDX, ...\"\n     * Where {@code CARRIER_ACTION_IDX} is an integer defined in\n     * com.android.carrierdefaultapp.CarrierActionUtils\n     * Example:\n     * com.android.carrierdefaultapp.CarrierActionUtils#CARRIER_ACTION_DISABLE_METERED_APNS\n     * disables metered APNs\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_ACTIONS_ON_DCFAILURE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Defines carrier-specific actions which act upon CARRIER_SIGNAL_REQUEST_NETWORK_FAILED\n     * and configured signal args:\n     * android.telephony.TelephonyManager#EXTRA_APN_TYPE,\n     * android.telephony.TelephonyManager#EXTRA_ERROR_CODE\n     * used for customization of the default carrier app\n     * Format:\n     * {\n     *     \"APN_1, ERROR_CODE_1 : CARRIER_ACTION_IDX_1, CARRIER_ACTION_IDX_2...\",\n     *     \"APN_1, ERROR_CODE_2 : CARRIER_ACTION_IDX_1 \"\n     * }\n     * Where {@code APN_1} is an integer defined in {@link android.telephony.data.ApnSetting}\n     * (e.g. {@link android.telephony.data.ApnSetting#TYPE_DEFAULT}\n     *\n     * {@code ERROR_CODE_1} is an integer defined in android.telephony.DataFailCause\n     * Example:\n     * android.telephony.DataFailCause#MISSING_UNKNOWN_APN\n     *\n     * {@code CARRIER_ACTION_IDX_1} is an integer defined in\n     * com.android.carrierdefaultapp.CarrierActionUtils\n     * Example:\n     * com.android.carrierdefaultapp.CarrierActionUtils#CARRIER_ACTION_DISABLE_METERED_APNS\n     * disables metered APNs\n     ",
    "links" : [ "android.telephony.data.ApnSetting#TYPE_DEFAULT", "android.telephony.data.ApnSetting" ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_ACTIONS_ON_RESET",
    "type" : "String",
    "comment" : "\n     * Defines carrier-specific actions which act upon CARRIER_SIGNAL_RESET,\n     * used for customization of the default carrier app.\n     * Format: \"CARRIER_ACTION_IDX, ...\"\n     * Where {@code CARRIER_ACTION_IDX} is an integer defined in\n     * com.android.carrierdefaultapp.CarrierActionUtils\n     * Example:\n     * com.android.carrierdefaultapp.CarrierActionUtils#CARRIER_ACTION_CANCEL_ALL_NOTIFICATIONS\n     * clears all notifications on reset\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_ACTIONS_ON_DEFAULT_NETWORK_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Defines carrier-specific actions which act upon\n     * com.android.internal.telephony.CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE,\n     * used for customization of the default carrier app.\n     * Format:\n     * {\n     *     \"true : CARRIER_ACTION_IDX_1\",\n     *     \"false: CARRIER_ACTION_IDX_2\"\n     * }\n     * Where {@code true} is a boolean indicates default network available/unavailable\n     * Where {@code CARRIER_ACTION_IDX} is an integer defined in\n     * com.android.carrierdefaultapp.CarrierActionUtils CarrierActionUtils\n     * Example:\n     * com.android.carrierdefaultapp.CarrierActionUtils#CARRIER_ACTION_ENABLE_DEFAULT_URL_HANDLER\n     * enables the app as the default URL handler\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_REDIRECTION_URL_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Defines a list of acceptable redirection url for default carrier app.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_APP_WAKE_SIGNAL_CONFIG_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Each config includes the componentName of the carrier app, followed by a list of interesting\n     * signals(declared in the manifest) which could wake up the app.\n     * @see com.android.internal.telephony.TelephonyIntents\n     * Example:\n     * <item>com.google.android.carrierAPK/.CarrierSignalReceiverA:\n     * com.android.internal.telephony.CARRIER_SIGNAL_REDIRECTED,\n     * com.android.internal.telephony.CARRIER_SIGNAL_PCO_VALUE\n     * </item>\n     * <item>com.google.android.carrierAPK/.CarrierSignalReceiverB:\n     * com.android.internal.telephony.CARRIER_SIGNAL_PCO_VALUE\n     * </item>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_APP_NO_WAKE_SIGNAL_CONFIG_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Each config includes the componentName of the carrier app, followed by a list of interesting\n     * signals for the app during run-time. The list of signals(intents) are targeting on run-time\n     * broadcast receivers only, aiming to avoid unnecessary wake-ups and should not be declared in\n     * the app's manifest.\n     * @see com.android.internal.telephony.TelephonyIntents\n     * Example:\n     * <item>com.google.android.carrierAPK/.CarrierSignalReceiverA:\n     * com.android.internal.telephony.CARRIER_SIGNAL_REQUEST_NETWORK_FAILED,\n     * com.android.internal.telephony.CARRIER_SIGNAL_PCO_VALUE\n     * </item>\n     * <item>com.google.android.carrierAPK/.CarrierSignalReceiverB:\n     * com.android.internal.telephony.CARRIER_SIGNAL_REQUEST_NETWORK_FAILED\n     * </item>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_APP_REQUIRED_DURING_SIM_SETUP_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether the carrier app needed to be involved when users try to finish setting up\n     * the SIM card to get network service.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_DEFAULT_DATA_ROAMING_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Default value for {@link Settings.Global#DATA_ROAMING}\n     * @hide\n     ",
    "links" : [ "Settings.Global#DATA_ROAMING" ]
  }, {
    "name" : "KEY_ALLOW_NON_EMERGENCY_CALLS_IN_ECM_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether the carrier supports making non-emergency phone calls while the phone is\n     * in emergency callback mode. Default value is {@code true}, meaning that non-emergency calls\n     * are allowed in emergency callback mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EMERGENCY_SMS_MODE_TIMER_MS_INT",
    "type" : "String",
    "comment" : "\n     * Time that the telephony framework stays in \"emergency SMS mode\" after an emergency SMS is\n     * sent to the network. This is used by carriers to configure the time\n     * {@link TelephonyManager#isInEmergencySmsMode()} will be true after an emergency SMS is sent.\n     * This is used by GNSS to override user location permissions so that the carrier network can\n     * get the user's location for emergency services.\n     *\n     * The default is 0, which means that this feature is disabled. The maximum value for this timer\n     * is 300000 mS (5 minutes).\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#isInEmergencySmsMode()" ]
  }, {
    "name" : "KEY_ALLOW_EMERGENCY_VIDEO_CALLS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether to allow carrier video calls to emergency numbers.\n     * When {@code true}, video calls to emergency numbers will be allowed. When {@code false},\n     * video calls to emergency numbers will be initiated as audio-only calls instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_HOLD_CALL_DURING_EMERGENCY_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not an ongoing call will be held when an outgoing emergency call\n     * is placed. If true, ongoing calls will be put on hold when an emergency call is placed. If\n     * false, placing an emergency call will trigger the disconnect of all ongoing calls before\n     * the emergency call is placed.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_RCS_PRESENCE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether or not the carrier supports the periodic exchange of phone numbers\n     * in the user's address book with the carrier's presence server in order to retrieve the RCS\n     * capabilities for each contact used in the RCS User Capability Exchange (UCE) procedure. See\n     * RCC.71, section 3 for more information.\n     * <p>\n     * The flag {@link Ims#KEY_ENABLE_PRESENCE_PUBLISH_BOOL} must also be enabled if this flag is\n     * enabled, as sending a periodic SIP PUBLISH with this device's RCS capabilities is a\n     * requirement for capability exchange to begin.\n     * <p>\n     * When presence is supported, the device should use the\n     * {@link android.provider.ContactsContract.Data#CARRIER_PRESENCE} bit mask and set the\n     * {@link android.provider.ContactsContract.Data#CARRIER_PRESENCE_VT_CAPABLE} bit to indicate\n     * whether each contact supports video calling. The UI is made aware that presence is enabled\n     * via {@link android.telecom.PhoneAccount#CAPABILITY_VIDEO_CALLING_RELIES_ON_PRESENCE}\n     * and can choose to hide or show the video calling icon based on whether a contact supports\n     * video.\n     *\n     * @deprecated No longer used in framework code, however it may still be used by applications\n     * that have not updated their code. This config should still be set to {@code true} if\n     * {@link Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL} is set to {@code true} and\n     * {@link Ims#KEY_ENABLE_PRESENCE_CAPABILITY_EXCHANGE_BOOL} is set to {@code true}.\n     ",
    "links" : [ "android.provider.ContactsContract.Data#CARRIER_PRESENCE", "android.provider.ContactsContract.Data#CARRIER_PRESENCE_VT_CAPABLE", "#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL", "android.telecom.PhoneAccount#CAPABILITY_VIDEO_CALLING_RELIES_ON_PRESENCE", "#KEY_ENABLE_PRESENCE_PUBLISH_BOOL", "#KEY_ENABLE_PRESENCE_CAPABILITY_EXCHANGE_BOOL" ]
  }, {
    "name" : "KEY_USE_RCS_SIP_OPTIONS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier supports RCS SIP OPTIONS indication for\n     * User Capability Exchange (UCE).\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT",
    "type" : "String",
    "comment" : "\n     * The duration in seconds that platform call and message blocking is disabled after the user\n     * contacts emergency services. Platform considers values for below cases:\n     *  1) 0 <= VALUE <= 604800(one week): the value will be used as the duration directly.\n     *  2) VALUE > 604800(one week): will use the default value as duration instead.\n     *  3) VALUE < 0: block will be disabled forever until user re-enable block manually,\n     *     the suggested value to disable forever is -1.\n     * See {@code android.provider.BlockedNumberContract#notifyEmergencyContact(Context)}\n     * See {@code android.provider.BlockedNumberContract#isBlocked(Context, String)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether to enable enhanced call blocking feature on the device.\n     * android.provider.BlockedNumberContract.SystemContract#ENHANCED_SETTING_KEY_BLOCK_UNREGISTERED\n     * android.provider.BlockedNumberContract.SystemContract#ENHANCED_SETTING_KEY_BLOCK_PRIVATE\n     * android.provider.BlockedNumberContract.SystemContract#ENHANCED_SETTING_KEY_BLOCK_PAYPHONE\n     * android.provider.BlockedNumberContract.SystemContract#ENHANCED_SETTING_KEY_BLOCK_UNKNOWN\n     * android.provider.BlockedNumberContract.SystemContract#ENHANCED_SETTING_KEY_BLOCK_UNAVAILABLE\n     *\n     * <p>\n     * 1. For Single SIM(SS) device, it can be customized in both carrier_config_mccmnc.xml\n     *    and vendor.xml.\n     * <p>\n     * 2. For Dual SIM(DS) device, it should be customized in vendor.xml, since call blocking\n     *    function is used regardless of SIM.\n     * <p>\n     * If {@code true} enable enhanced call blocking feature on the device, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CDMA_3WAYCALL_FLASH_DELAY_INT",
    "type" : "String",
    "comment" : "\n     * For carriers which require an empty flash to be sent before sending the normal 3-way calling\n     * flash, the duration in milliseconds of the empty flash to send. When {@code 0}, no empty\n     * flash is sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CDMA_ROAMING_MODE_INT",
    "type" : "String",
    "comment" : "\n     * The CDMA roaming mode (aka CDMA system select).\n     *\n     * <p>The value should be one of the CDMA_ROAMING_MODE_ constants in {@link TelephonyManager}.\n     * Values other than {@link TelephonyManager#CDMA_ROAMING_MODE_RADIO_DEFAULT} (which is the\n     * default) will take precedence over user selection.\n     *\n     * @see TelephonyManager#CDMA_ROAMING_MODE_RADIO_DEFAULT\n     * @see TelephonyManager#CDMA_ROAMING_MODE_HOME\n     * @see TelephonyManager#CDMA_ROAMING_MODE_AFFILIATED\n     * @see TelephonyManager#CDMA_ROAMING_MODE_ANY\n     ",
    "links" : [ "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#CDMA_ROAMING_MODE_RADIO_DEFAULT" ]
  }, {
    "name" : "KEY_SUPPORT_CDMA_1X_VOICE_CALLS_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether 1X voice calls is supported for some CDMA carriers.\n     * Default value is true.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_DIRECT_FDN_DIALING_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if support is provided for directly dialing FDN number from FDN list.\n     * If false, this feature is not supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_FDN_NUMBER_LENGTH_LIMIT_INT",
    "type" : "String",
    "comment" : "\n     * Int indicating the max number length for FDN\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_FORCE_IMEI_BOOL",
    "type" : "String",
    "comment" : "\n     * Report IMEI as device id even if it's a CDMA/LTE phone.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RATCHET_RAT_FAMILIES",
    "type" : "String",
    "comment" : "\n     * The families of Radio Access Technologies that will get clustered and ratcheted,\n     * ie, we will report transitions up within the family, but not down until we change\n     * cells. This prevents flapping between base technologies and higher techs that are\n     * granted on demand within the cell.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TREAT_DOWNGRADED_VIDEO_CALLS_AS_VIDEO_CALLS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether some telephony logic will treat a call which was formerly a video\n     * call as if it is still a video call. When {@code true}:\n     * <p>\n     * Logic which will automatically drop a video call which takes place over WIFI when a\n     * voice call is answered (see {@link #KEY_DROP_VIDEO_CALL_WHEN_ANSWERING_AUDIO_CALL_BOOL}.\n     * <p>\n     * Logic which determines whether the user can use TTY calling.\n     ",
    "links" : [ "#KEY_DROP_VIDEO_CALL_WHEN_ANSWERING_AUDIO_CALL_BOOL" ]
  }, {
    "name" : "KEY_DROP_VIDEO_CALL_WHEN_ANSWERING_AUDIO_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, if the user is in an ongoing video call over WIFI and answers an incoming\n     * audio call, the video call will be disconnected before the audio call is answered. This is\n     * in contrast to the usual expected behavior where a foreground video call would be put into\n     * the background and held when an incoming audio call is answered.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_MERGE_WIFI_CALLS_WHEN_VOWIFI_OFF_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier supports merging wifi calls when VoWIFI is disabled.\n     * This can happen in the case of a carrier which allows offloading video calls to WIFI\n     * separately of whether voice over wifi is enabled. In such a scenario when two video calls\n     * are downgraded to voice, they remain over wifi. However, if VoWIFI is disabled, these calls\n     * cannot be merged.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_HOLD_IN_IMS_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier supports the Hold command while in an IMS call.\n     * <p>\n     * The device configuration value {@code config_device_respects_hold_carrier_config} ultimately\n     * controls whether this carrier configuration option is used.\n     * Where {@code config_device_respects_hold_carrier_config} is false, the value of\n     * this carrier configuration is ignored.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_ALLOW_DEFLECT_IMS_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier supports call deflection for an incoming IMS call.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_ALLOW_TRANSFER_IMS_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier supports explicit call transfer for an IMS call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALWAYS_PLAY_REMOTE_HOLD_TONE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier always wants to play an \"on-hold\" tone when a call has\n     * been remotely held.\n     * <p>\n     * When {@code true}, if the IMS stack indicates that the call session has been held, a signal\n     * will be sent from Telephony to play an audible \"on-hold\" tone played to the user.\n     * When {@code false}, a hold tone will only be played if the audio session becomes inactive.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTO_RETRY_FAILED_WIFI_EMERGENCY_CALL",
    "type" : "String",
    "comment" : "\n     * When true, the Telephony stack will automatically turn off airplane mode and retry a wifi\n     * emergency call over the cell network if the initial attempt at dialing was met with a SIP 308\n     * error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_ADD_CALL_DURING_VIDEO_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * When true, indicates that adding a call is disabled when there is an ongoing video call\n     * or when there is an ongoing call on wifi which was downgraded from video and VoWifi is\n     * turned off.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_HOLD_VIDEO_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, indicates that video calls can be put on hold in order to swap to another\n     * call (e.g. a new outgoing call).\n     * When {@code false}, indicates that video calls will be disconnected when swapping to another\n     * call.\n     * <p>\n     * This is {@code true} by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WIFI_CALLS_CAN_BE_HD_AUDIO",
    "type" : "String",
    "comment" : "\n     * When true, indicates that the HD audio icon in the in-call screen should not be shown for\n     * VoWifi calls.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VIDEO_CALLS_CAN_BE_HD_AUDIO",
    "type" : "String",
    "comment" : "\n     * When true, indicates that the HD audio icon in the in-call screen should not be shown for\n     * video calls.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_GSM_CDMA_CALLS_CAN_BE_HD_AUDIO",
    "type" : "String",
    "comment" : "\n     * When true, indicates that the HD audio icon in the in-call screen should be shown for\n     * GSM/CDMA calls.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_VIDEO_CALLING_FALLBACK_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether system apps are allowed to use fallback if carrier video call is not available.\n     * Defaults to {@code true}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_IMS_REASONINFO_MAPPING_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Defines operator-specific {@link ImsReasonInfo} mappings.\n     *\n     * Format: \"ORIGINAL_CODE|MESSAGE|NEW_CODE\"\n     * Where {@code ORIGINAL_CODE} corresponds to a {@link ImsReasonInfo#getCode()} code,\n     * {@code MESSAGE} corresponds to an expected {@link ImsReasonInfo#getExtraMessage()} string,\n     * and {@code NEW_CODE} is the new {@code ImsReasonInfo#CODE_*} which this combination of\n     * original code and message shall be remapped to.\n     *\n     * Note: If {@code *} is specified for the original code, any ImsReasonInfo with the matching\n     * {@code MESSAGE} will be remapped to {@code NEW_CODE}.\n     * If {@code *} is specified for the message, any ImsReasonInfo with the matching\n     * {@code ORIGINAL_CODE} will be remapped to {@code NEW_CODE}.\n     * The wildcard for {@code ORIGINAL_CODE} takes precedence to the wildcard for {@code MESSAGE}.\n     * A mapping with both wildcards has no effect.\n     *\n     * Example: \"501|call completion elsewhere|1014\"\n     * When the {@link ImsReasonInfo#getCode()} is {@link ImsReasonInfo#CODE_USER_TERMINATED} and\n     * the {@link ImsReasonInfo#getExtraMessage()} is {@code \"call completion elsewhere\"},\n     * {@link ImsReasonInfo#CODE_ANSWERED_ELSEWHERE} shall be used as the {@link ImsReasonInfo}\n     * code instead.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.ImsReasonInfo#CODE_ANSWERED_ELSEWHERE", "android.telephony.ims.ImsReasonInfo#getCode()", "android.telephony.ims.ImsReasonInfo#getExtraMessage()", "android.telephony.ims.ImsReasonInfo#CODE_USER_TERMINATED", "android.telephony.ims.ImsReasonInfo" ]
  }, {
    "name" : "KEY_ENHANCED_4G_LTE_TITLE_VARIANT_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code false}, use default title for Enhanced 4G LTE Mode settings.\n     * When {@code true}, use the variant.\n     * @hide\n     * @deprecated use {@link #KEY_ENHANCED_4G_LTE_TITLE_VARIANT_INT}.\n     ",
    "links" : [ "#KEY_ENHANCED_4G_LTE_TITLE_VARIANT_INT" ]
  }, {
    "name" : "KEY_ENHANCED_4G_LTE_TITLE_VARIANT_INT",
    "type" : "String",
    "comment" : "\n     * The index indicates the carrier specified title string of Enhanced 4G LTE Mode settings.\n     * Default value is 0, which indicates the default title string.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NOTIFY_VT_HANDOVER_TO_WIFI_FAILURE_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether the carrier wants to notify the user when handover of an LTE video call to\n     * WIFI fails.\n     * <p>\n     * When {@code true}, if a video call starts on LTE and the modem reports a failure to handover\n     * the call to WIFI or if no handover success is reported within 60 seconds of call initiation,\n     * the {@link android.telephony.TelephonyManager#EVENT_HANDOVER_TO_WIFI_FAILED} event is raised\n     * on the connection.\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#EVENT_HANDOVER_TO_WIFI_FAILED" ]
  }, {
    "name" : "KEY_FILTERED_CNAP_NAMES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * A upper case list of CNAP names that are unhelpful to the user for distinguising calls and\n     * should be filtered out of the CNAP information. This includes CNAP names such as \"WIRELESS\n     * CALLER\" or \"UNKNOWN NAME\". By default, if there are no filtered names for this carrier, null\n     * is returned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RCS_CONFIG_SERVER_URL_STRING",
    "type" : "String",
    "comment" : "\n     * The RCS configuration server URL. This URL is used to initiate RCS provisioning.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EDITABLE_WFC_ROAMING_MODE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether user can change Wi-Fi Calling preference in roaming.\n     * {@code false} - roaming preference cannot be changed by user independently. If\n     *                 {@link #KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL} is false,\n     *                 {@link #KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT} is used as the default\n     *                 value. If {@link #KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL} is\n     *                 true, roaming preference is the same as home preference and\n     *                 {@link #KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT} is used as the default value.\n     * {@code true}  - roaming preference can be changed by user independently if\n     *                 {@link #KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL} is false. If\n     *                 {@link #KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL} is true, this\n     *                 configuration is ignored and roaming preference cannot be changed.\n     ",
    "links" : [ "#KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT", "#KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT", "#KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL" ]
  }, {
    "name" : "KEY_SHOW_BLOCKING_PAY_PHONE_OPTION_BOOL",
    "type" : "java.lang.String",
    "comment" : "\n     * Flag specifying whether to show blocking pay phone option in blocked numbers screen.\n     * Only show the option if payphone call presentation is present in the carrier's region.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the carrier will use the\n     * WFC home network mode in roaming network.\n     * {@code false} - roaming preference can be selected separately from the home preference.\n     * {@code true}  - roaming preference is the same as home preference and\n     *                 {@link #KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT} is used as the default value.\n     ",
    "links" : [ "#KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT" ]
  }, {
    "name" : "KEY_ALLOW_METERED_NETWORK_FOR_CERT_DOWNLOAD_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the carrier is allowed to use metered network to download a\n     * certificate of Carrier-WiFi.\n     * {@code false} - default value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PREF_NETWORK_NOTIFICATION_DELAY_INT",
    "type" : "String",
    "comment" : "\n     * Time delay (in ms) after which we show the notification to switch the preferred\n     * network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EMERGENCY_NOTIFICATION_DELAY_INT",
    "type" : "String",
    "comment" : "\n     * Time delay (in ms) after which we show the notification for emergency calls,\n     * while the device is registered over WFC. Default value is -1, which indicates\n     * that this notification is not pertinent for a particular carrier. We've added a delay\n     * to prevent false positives.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_USSD_REQUESTS_VIA_TELEPHONY_MANAGER_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, the carrier allows the user of the {@link\n     * TelephonyManager#sendUssdRequest(String, TelephonyManager.UssdResponseCallback, Handler)}\n     * API to perform USSD requests. {@code True} by default.\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#sendUssdRequest(String" ]
  }, {
    "name" : "KEY_SUPPORT_3GPP_CALL_FORWARDING_WHILE_ROAMING_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether the carrier supports 3gpp call forwarding MMI codes while roaming. If\n     * false, the user will be notified that call forwarding is not available when the MMI code\n     * fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISPLAY_VOICEMAIL_NUMBER_AS_DEFAULT_CALL_FORWARDING_NUMBER_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating whether to display voicemail number as default call forwarding number in\n     * call forwarding settings.\n     * If true, display vm number when cf number is null.\n     * If false, display the cf number from network.\n     * By default this value is false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NOTIFY_INTERNATIONAL_CALL_ON_WFC_BOOL",
    "type" : "String",
    "comment" : "\n     * When {@code true}, the user will be notified when they attempt to place an international call\n     * when the call is placed using wifi calling.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_PRESET_APN_DETAILS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag to hide Preset APN details. If true, user cannot enter ApnEditor view of Preset APN,\n     * and cannot view details of the APN. If false, user can enter ApnEditor view of Preset APN.\n     * Default value is false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_VIDEO_CALL_CHARGES_ALERT_DIALOG_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether to show an alert dialog for video call charges.\n     * By default this value is {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_BLOCKS_WHILE_ROAMING_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * An array containing custom call forwarding number prefixes that will be blocked while the\n     * device is reporting that it is roaming. By default, there are no custom call\n     * forwarding prefixes and none of these numbers will be filtered. If one or more entries are\n     * present, the system will not complete the call and display an error message.\n     *\n     * To display a message to the user when call forwarding fails for 3gpp MMI codes while roaming,\n     * use the {@link #KEY_SUPPORT_3GPP_CALL_FORWARDING_WHILE_ROAMING_BOOL} option instead.\n     ",
    "links" : [ "#KEY_SUPPORT_3GPP_CALL_FORWARDING_WHILE_ROAMING_BOOL" ]
  }, {
    "name" : "KEY_SUPPORT_IMS_CALL_FORWARDING_WHILE_ROAMING_BOOL",
    "type" : "String",
    "comment" : "\n     * Call forwarding number prefixes defined by {@link\n     * #KEY_CALL_FORWARDING_BLOCKS_WHILE_ROAMING_STRING_ARRAY} which will be allowed while the\n     * device is reporting that it is roaming and IMS is registered over LTE or Wi-Fi.\n     * By default this value is {@code true}.\n     * @hide\n     ",
    "links" : [ "#KEY_CALL_FORWARDING_BLOCKS_WHILE_ROAMING_STRING_ARRAY" ]
  }, {
    "name" : "KEY_MONTHLY_DATA_CYCLE_DAY_INT",
    "type" : "String",
    "comment" : "\n     * The day of the month (1-31) on which the data cycle rolls over.\n     * <p>\n     * If the current month does not have this day, the cycle will roll over at\n     * the start of the next month.\n     * <p>\n     * This setting may be still overridden by explicit user choice. By default,\n     * {@link #DATA_CYCLE_USE_PLATFORM_DEFAULT} will be used.\n     ",
    "links" : [ "#DATA_CYCLE_USE_PLATFORM_DEFAULT" ]
  }, {
    "name" : "DATA_CYCLE_USE_PLATFORM_DEFAULT",
    "type" : "int",
    "comment" : "\n     * When {@link #KEY_MONTHLY_DATA_CYCLE_DAY_INT}, {@link #KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG},\n     * or {@link #KEY_DATA_WARNING_THRESHOLD_BYTES_LONG} are set to this value, the platform default\n     * value will be used for that key.\n     ",
    "links" : [ "#KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG", "#KEY_MONTHLY_DATA_CYCLE_DAY_INT", "#KEY_DATA_WARNING_THRESHOLD_BYTES_LONG" ]
  }, {
    "name" : "DATA_CYCLE_THRESHOLD_DISABLED",
    "type" : "int",
    "comment" : "\n     * Flag indicating that a data cycle threshold should be disabled.\n     * <p>\n     * If {@link #KEY_DATA_WARNING_THRESHOLD_BYTES_LONG} is set to this value, the platform's\n     * default data warning, if one exists, will be disabled. A user selected data warning will not\n     * be overridden.\n     * <p>\n     * If {@link #KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG} is set to this value, the platform's\n     * default data limit, if one exists, will be disabled. A user selected data limit will not be\n     * overridden.\n     ",
    "links" : [ "#KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG", "#KEY_DATA_WARNING_THRESHOLD_BYTES_LONG" ]
  }, {
    "name" : "KEY_DATA_WARNING_THRESHOLD_BYTES_LONG",
    "type" : "String",
    "comment" : "\n     * Controls the data usage warning.\n     * <p>\n     * If the user uses more than this amount of data in their billing cycle, as defined by\n     * {@link #KEY_MONTHLY_DATA_CYCLE_DAY_INT}, the user will be alerted about the usage.\n     * If the value is set to {@link #DATA_CYCLE_THRESHOLD_DISABLED}, the data usage warning will\n     * be disabled.\n     * <p>\n     * This setting may be overridden by explicit user choice. By default,\n     * {@link #DATA_CYCLE_USE_PLATFORM_DEFAULT} will be used.\n     ",
    "links" : [ "#DATA_CYCLE_USE_PLATFORM_DEFAULT", "#KEY_MONTHLY_DATA_CYCLE_DAY_INT", "#DATA_CYCLE_THRESHOLD_DISABLED" ]
  }, {
    "name" : "KEY_DATA_WARNING_NOTIFICATION_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls if the device should automatically notify the user as they reach\n     * their cellular data warning. When set to {@code false} the carrier is\n     * expected to have implemented their own notification mechanism. {@code true} by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LIMITED_SIM_FUNCTION_NOTIFICATION_FOR_DSDS_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls if the device should automatically warn the user that sim voice & data function\n     * might be limited due to dual sim scenario. When set to {@code true} display the notification,\n     * {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG",
    "type" : "String",
    "comment" : "\n     * Controls the cellular data limit.\n     * <p>\n     * If the user uses more than this amount of data in their billing cycle, as defined by\n     * {@link #KEY_MONTHLY_DATA_CYCLE_DAY_INT}, cellular data will be turned off by the user's\n     * phone. If the value is set to {@link #DATA_CYCLE_THRESHOLD_DISABLED}, the data limit will be\n     * disabled.\n     * <p>\n     * This setting may be overridden by explicit user choice. By default,\n     * {@link #DATA_CYCLE_USE_PLATFORM_DEFAULT} will be used.\n     ",
    "links" : [ "#DATA_CYCLE_USE_PLATFORM_DEFAULT", "#KEY_MONTHLY_DATA_CYCLE_DAY_INT", "#DATA_CYCLE_THRESHOLD_DISABLED" ]
  }, {
    "name" : "KEY_DATA_LIMIT_NOTIFICATION_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls if the device should automatically notify the user as they reach\n     * their cellular data limit. When set to {@code false} the carrier is\n     * expected to have implemented their own notification mechanism. {@code true} by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA_RAPID_NOTIFICATION_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls if the device should automatically notify the user when rapid\n     * cellular data usage is observed. When set to {@code false} the carrier is\n     * expected to have implemented their own notification mechanism. {@code true} by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LTE_EARFCNS_RSRP_BOOST_INT",
    "type" : "String",
    "comment" : "\n     * Offset to be reduced from rsrp threshold while calculating signal strength level.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_BOOSTED_LTE_EARFCNS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of EARFCN (E-UTRA Absolute Radio Frequency Channel Number,\n     * Reference: 3GPP TS 36.104 5.4.3) inclusive ranges on which lte_earfcns_rsrp_boost_int\n     * will be applied. Format of the String array is expected to be {\"earfcn1_start-earfcn1_end\",\n     * \"earfcn2_start-earfcn2_end\" ... }\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NRARFCNS_RSRP_BOOST_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * Offset to be reduced from rsrp threshold while calculating signal strength level.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_BOOSTED_NRARFCNS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of NR ARFCN (5G Absolute Radio Frequency Channel Number,\n     * Reference: 3GPP TS 36.108) inclusive ranges on which corresponding\n     * nrarfcns_rsrp_boost_int_array will be applied. The size of this array and\n     * nrarfcns_rsrp_boost_int_array must be the same.\n     * Format of the String array is expected to be {\"nrarfcn1_start-nrarfcn1_end\",\n     * \"nrarfcn2_start-nrarfcn2_end\" ... }\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL",
    "type" : "String",
    "comment" : " all RATs.",
    "links" : [ ]
  }, {
    "name" : "KEY_PARAMETERS_USED_FOR_LTE_SIGNAL_BAR_INT",
    "type" : "String",
    "comment" : "\n     * Bit-field integer to determine whether to use Reference Signal Received Power (RSRP),\n     * Reference Signal Received Quality (RSRQ), or/and Reference Signal Signal to Noise Ratio\n     * (RSSNR) for the number of LTE signal bars and signal criteria reporting enabling.\n     *\n     * <p> If a measure is not set, signal criteria reporting from modem will not be triggered and\n     * not be used for calculating signal level. If multiple measures are set bit, the parameter\n     * whose value is smallest is used to indicate the signal level.\n     * <UL>\n     *  <LI>RSRP = 1 << 0</LI>\n     *  <LI>RSRQ = 1 << 1</LI>\n     *  <LI>RSSNR = 1 << 2</LI>\n     * </UL>\n     * <p> The value of this key must be bitwise OR of {@link CellSignalStrengthLte#USE_RSRP},\n     * {@link CellSignalStrengthLte#USE_RSRQ}, {@link CellSignalStrengthLte#USE_RSSNR}.\n     *\n     * <p> For example, if both RSRP and RSRQ are used, the value of key is 3 (1 << 0 | 1 << 1).\n     * If the key is invalid or not configured, a default value (RSRP = 1 << 0) will apply.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.CellSignalStrengthLte#USE_RSRQ", "android.telephony.CellSignalStrengthLte#USE_RSSNR", "android.telephony.CellSignalStrengthLte#USE_RSRP" ]
  }, {
    "name" : "KEY_5G_NR_SSRSRP_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of 4 customized 5G SS reference signal received power (SSRSRP) thresholds.\n     * <p>\n     * Reference: 3GPP TS 38.215\n     * <p>\n     * 4 threshold integers must be within the boundaries [-140 dB, -44 dB], and the levels are:\n     * <UL>\n     *     <LI>\"NONE: [-140, threshold1)\"</LI>\n     *     <LI>\"POOR: [threshold1, threshold2)\"</LI>\n     *     <LI>\"MODERATE: [threshold2, threshold3)\"</LI>\n     *     <LI>\"GOOD:  [threshold3, threshold4)\"</LI>\n     *     <LI>\"EXCELLENT:  [threshold4, -44]\"</LI>\n     * </UL>\n     * <p>\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_5G_NR_SSRSRQ_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of 4 customized 5G SS reference signal received quality (SSRSRQ) thresholds.\n     * <p>\n     * Reference: 3GPP TS 38.215; 3GPP TS 38.133 section 10\n     * <p>\n     * 4 threshold integers must be within the boundaries [-43 dB, 20 dB], and the levels are:\n     * <UL>\n     *     <LI>\"NONE: [-43, threshold1)\"</LI>\n     *     <LI>\"POOR: [threshold1, threshold2)\"</LI>\n     *     <LI>\"MODERATE: [threshold2, threshold3)\"</LI>\n     *     <LI>\"GOOD:  [threshold3, threshold4)\"</LI>\n     *     <LI>\"EXCELLENT:  [threshold4, 20]\"</LI>\n     * </UL>\n     * <p>\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_5G_NR_SSSINR_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of 4 customized 5G SS signal-to-noise and interference ratio (SSSINR) thresholds.\n     * <p>\n     * Reference: 3GPP TS 38.215,\n     *            3GPP TS 38.133 10.1.16.1\n     * <p>\n     * 4 threshold integers must be within the boundaries [-23 dB, 40 dB], and the levels are:\n     * <UL>\n     *     <LI>\"NONE: [-23, threshold1)\"</LI>\n     *     <LI>\"POOR: [threshold1, threshold2)\"</LI>\n     *     <LI>\"MODERATE: [threshold2, threshold3)\"</LI>\n     *     <LI>\"GOOD:  [threshold3, threshold4)\"</LI>\n     *     <LI>\"EXCELLENT:  [threshold4, 40]\"</LI>\n     * </UL>\n     * <p>\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NGRAN_SSRSRP_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_SSRSRP} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_SSRSRP" ]
  }, {
    "name" : "KEY_NGRAN_SSRSRQ_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_SSRSRQ} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_SSRSRQ" ]
  }, {
    "name" : "KEY_NGRAN_SSSINR_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_SSSINR} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_SSSINR" ]
  }, {
    "name" : "KEY_PARAMETERS_USE_FOR_5G_NR_SIGNAL_BAR_INT",
    "type" : "String",
    "comment" : "\n     * Bit-field integer to determine whether to use SS reference signal received power (SSRSRP),\n     * SS reference signal received quality (SSRSRQ), or/and SS signal-to-noise and interference\n     * ratio (SSSINR) for the number of 5G NR signal bars and signal criteria reporting enabling.\n     *\n     * <p> If a measure is not set, signal criteria reporting from modem will not be triggered and\n     * not be used for calculating signal level. If multiple measures are set bit, the parameter\n     * whose value is smallest is used to indicate the signal level.\n     * <UL>\n     *  <LI>SSRSRP = 1 << 0</LI>\n     *  <LI>SSRSRQ = 1 << 1</LI>\n     *  <LI>SSSINR = 1 << 2</LI>\n     * </UL>\n     *  The value of this key must be bitwise OR of {@link CellSignalStrengthNr#USE_SSRSRP},\n     *  {@link CellSignalStrengthNr#USE_SSRSRQ}, {@link CellSignalStrengthNr#USE_SSSINR}.\n     *\n     * <p> For example, if both SSRSRP and SSSINR are used, the value of key is 5 (1 << 0 | 1 << 2).\n     * If the key is invalid or not configured, a default value (SSRSRP = 1 << 0) will apply.\n     *\n     * <p> Reference: 3GPP TS 38.215,\n     *                3GPP TS 38.133 10.1.16.1\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.CellSignalStrengthNr#USE_SSSINR", "android.telephony.CellSignalStrengthNr#USE_SSRSRP", "android.telephony.CellSignalStrengthNr#USE_SSRSRQ" ]
  }, {
    "name" : "KEY_SIGNAL_STRENGTH_NR_NSA_USE_LTE_AS_PRIMARY_BOOL",
    "type" : "String",
    "comment" : "\n     * There are two signal strengths, NR and LTE signal strength, during NR (non-standalone).\n     * Boolean indicating whether to use LTE signal strength as primary during NR (non-standalone).\n     * By default this value is true.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_BANDWIDTH_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * String array of default bandwidth values per network type.\n     * The entries should be of form: \"network_name:downlink,uplink\", with values in Kbps.\n     * For NR (5G), the following network names should be used:\n     * - NR_NSA: NR NSA, sub-6 frequencies\n     * - NR_NSA_MMWAVE: NR NSA, mmwave frequencies\n     * - NR_SA: NR SA, sub-6 frequencies\n     * - NR_SA_MMWAVE: NR SA, mmwave frequencies\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_BANDWIDTH_NR_NSA_USE_LTE_VALUE_FOR_UPLINK_BOOL",
    "type" : "String",
    "comment" : "\n     * For NR (non-standalone), whether to use the LTE value instead of NR value as the default for\n     * uplink bandwidth. Downlink bandwidth will still use the NR value as the default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISABLE_VOICE_BARRING_NOTIFICATION_BOOL",
    "type" : "String",
    "comment" : "\n     * Key identifying if voice call barring notification is required to be shown to the user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NON_ROAMING_OPERATOR_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of operators considered non-roaming which won't show roaming icon.\n     * <p>\n     * Can use mcc or mcc+mnc as item. For example, 302 or 21407.\n     * If operators, 21404 and 21407, make roaming agreements, users of 21404 should not see\n     * the roaming icon as using 21407 network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ROAMING_OPERATOR_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of operators considered roaming with the roaming icon.\n     * <p>\n     * Can use mcc or mcc+mnc as item. For example, 302 or 21407.\n     * If operators, 21404 and 21407, make roaming agreements, users of 21404 should see\n     * the roaming icon as using 21407 network.\n     * <p>\n     * A match on this supersedes a match on {@link #KEY_NON_ROAMING_OPERATOR_STRING_ARRAY}.\n     * @hide\n     ",
    "links" : [ "#KEY_NON_ROAMING_OPERATOR_STRING_ARRAY" ]
  }, {
    "name" : "KEY_SHOW_ROAMING_INDICATOR_BOOL",
    "type" : "String",
    "comment" : "\n     * Config to show the roaming indicator (i.e. the \"R\" icon) from the status bar when roaming.\n     * The roaming indicator will be shown if this is {@code true} and will not be shown if this is\n     * {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "IMSI_KEY_DOWNLOAD_URL_STRING",
    "type" : "String",
    "comment" : "\n     * URL from which the proto containing the public key of the Carrier used for\n     * IMSI encryption will be downloaded.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMSI_CARRIER_PUBLIC_KEY_EPDG_STRING",
    "type" : "String",
    "comment" : "\n     * String representation of a carrier's public key used for IMSI encryption for ePDG. If this\n     * is provided, the device will use it as a fallback when no key exists on device, but the key\n     * download will still initiate.\n     * Example string:\n     *         \"-----BEGIN CERTIFICATE-----\\nabcde12345abcde12345abcde12345abcde1234\n     * 5abcde12345abcde12345\\nabcde12345abcde12345abcde12345abcde12345a\\n-----END CERTIFICATE-----\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMSI_CARRIER_PUBLIC_KEY_WLAN_STRING",
    "type" : "String",
    "comment" : "\n     * String representation of a carrier's public key used for IMSI encryption for WLAN. If this\n     * is provided, the device will use it as a fallback when no key exists on device, but the key\n     * download will still initiate.\n     * Example string:\n     *         \"-----BEGIN CERTIFICATE-----\\nabcde12345abcde12345abcde12345abcde1234\n     * 5abcde12345abcde12345\\nabcde12345abcde12345abcde12345abcde12345a\\n-----END CERTIFICATE-----\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMSI_KEY_AVAILABILITY_INT",
    "type" : "String",
    "comment" : "\n     * Identifies if the key is available for WLAN or EPDG or both. The value is a bitmask.\n     * 0 indicates that neither EPDG or WLAN is enabled.\n     * 1 indicates that key type TelephonyManager#KEY_TYPE_EPDG is enabled.\n     * 2 indicates that key type TelephonyManager#KEY_TYPE_WLAN is enabled.\n     * 3 indicates that both are enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CONVERT_CDMA_CALLER_ID_MMI_CODES_WHILE_ROAMING_ON_3GPP_BOOL",
    "type" : "String",
    "comment" : "\n     * Key identifying if the CDMA Caller ID presentation and suppression MMI codes\n     * should be converted to 3GPP CLIR codes when a multimode (CDMA+UMTS+LTE) device is roaming\n     * on a 3GPP network. Specifically *67<number> will be converted to #31#<number> and\n     * *82<number> will be converted to *31#<number> before dialing a call when this key is\n     * set TRUE and device is roaming on a 3GPP network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_IMS_REGISTRATION_STATUS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether IMS registration state menu is shown in Status Info setting,\n     * default to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RTT_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether the carrier supports RTT over IMS.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TTY_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean flag indicating whether the carrier supports TTY.\n     * <p>\n     * Note that {@link #KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL} controls availability of TTY over\n     * VoLTE; if this carrier configuration is disabled, then\n     * {@link #KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL} is also implicitly disabled.\n     * <p>\n     * {@link TelecomManager#isTtySupported()} should be used to determine if a device supports TTY,\n     * and this carrier config key should be used to see if the current carrier supports it.\n     ",
    "links" : [ "android.telecom.TelecomManager#isTtySupported()", "#KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL" ]
  }, {
    "name" : "KEY_RTT_AUTO_UPGRADE_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports auto-upgrading a call to RTT when receiving a call from a\n     * RTT-supported device.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RTT_SUPPORTED_FOR_VT_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports RTT during a video call.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VT_UPGRADE_SUPPORTED_FOR_DOWNGRADED_RTT_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports upgrading a call that was previously an RTT call to VT.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RTT_UPGRADE_SUPPORTED_FOR_DOWNGRADED_VT_CALL_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports upgrading a call that was previously a VT call to RTT.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RTT_UPGRADE_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports upgrading a voice call to an RTT call during the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RTT_DOWNGRADE_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports downgrading a RTT call to a voice call during the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_TTY_HCO_VCO_WITH_RTT_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the TTY HCO and VCO options should be hidden in the accessibility menu\n     * if the device is capable of RTT.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISABLE_CHARGE_INDICATION_BOOL",
    "type" : "String",
    "comment" : "\n     * The flag to disable the popup dialog which warns the user of data charges.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SKIP_CF_FAIL_TO_DISABLE_DIALOG_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating whether to skip the call forwarding (CF) fail-to-disable dialog.\n     * The logic used to determine whether we succeeded in disabling is carrier specific,\n     * so the dialog may not always be accurate.\n     * {@code false} - show CF fail-to-disable dialog.\n     * {@code true}  - skip showing CF fail-to-disable dialog.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_NO_REPLY_TIMER_FOR_CFNRY_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether operator supports including no reply condition timer option on\n     * CFNRy (3GPP TS 24.082 3: Call Forwarding on No Reply) in the call forwarding settings UI.\n     * {@code true}  - include no reply condition timer option on CFNRy\n     * {@code false} - don't include no reply condition timer option on CFNRy\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NO_REPLY_TIMER_FOR_CFNRY_SEC_INT",
    "type" : "String",
    "comment" : "\n     * No reply time value to be sent to network for call forwarding on no reply\n     * (CFNRy 3GPP TS 24.082 version 17.0 section 3).\n     * Controls time in seconds for the no reply condition on in the call forwarding\n     * settings UI.\n     * This is available when {@link #KEY_SUPPORT_NO_REPLY_TIMER_FOR_CFNRY_BOOL} is true.\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_SUPPORT_NO_REPLY_TIMER_FOR_CFNRY_BOOL" ]
  }, {
    "name" : "KEY_FEATURE_ACCESS_CODES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of the FAC (feature access codes) to dial as a normal call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_IDENTIFY_HIGH_DEFINITION_CALLS_IN_CALL_LOG_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines if the carrier wants to identify high definition calls in the call log.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SPN_DISPLAY_RULE_USE_ROAMING_FROM_SERVICE_STATE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether to use the {@link ServiceState} roaming status, which can be\n     * affected by other carrier configs (e.g.\n     * {@link #KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY}), when setting the SPN display.\n     * <p>\n     * If {@code true}, the SPN display uses {@link ServiceState#getRoaming}.\n     * If {@code false} the SPN display checks if the current MCC/MNC is different from the\n     * SIM card's MCC/MNC.\n     *\n     * @see #KEY_GSM_ROAMING_NETWORKS_STRING_ARRAY\n     * @see #KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY\n     * @see #KEY_NON_ROAMING_OPERATOR_STRING_ARRAY\n     * @see #KEY_ROAMING_OPERATOR_STRING_ARRAY\n     * @see #KEY_FORCE_HOME_NETWORK_BOOL\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY", "android.telephony.ServiceState", "android.telephony.ServiceState#getRoaming" ]
  }, {
    "name" : "KEY_CARRIER_CONFIG_APPLIED_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether any carrier has been identified and its specific config has been applied,\n     * default to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CHECK_PRICING_WITH_CARRIER_FOR_DATA_ROAMING_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether we should show a warning asking the user to check with their carrier\n     * on pricing when the user enabled data roaming,\n     * default to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether we should show a notification when the phone established a data\n     * connection in roaming network, to warn users about possible roaming charges.\n     *\n     * @see #KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_EXCLUDED_MCCS_STRING_ARRAY\n     * @see #KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_INCLUDED_MCC_MNCS_STRING_ARRAY\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_EXCLUDED_MCCS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Determines what MCCs are exceptions for the value of\n     * {@link #KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL}.\n     * An empty list indicates that there are no exceptions.\n     *\n     * @see #KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL\n     * @see #KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_INCLUDED_MCC_MNCS_STRING_ARRAY\n     * @hide\n     ",
    "links" : [ "#KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL" ]
  }, {
    "name" : "KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_INCLUDED_MCC_MNCS_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Determines what MCC+MNCs are exceptions for the MCCs specified in\n     * {@link #KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_EXCLUDED_MCCS_STRING_ARRAY}, meaning the\n     * value for the MCC+MNC is {@link #KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL}.\n     * An empty list indicates that there are no MNC-specific exceptions.\n     *\n     * @see #KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL\n     * @see #KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_EXCLUDED_MCCS_STRING_ARRAY\n     * @hide\n     ",
    "links" : [ "#KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_EXCLUDED_MCCS_STRING_ARRAY", "#KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL" ]
  }, {
    "name" : "KEY_LTE_RSRP_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of 4 LTE RSRP thresholds above which a signal level is considered POOR,\n     * MODERATE, GOOD, or EXCELLENT, to be used in SignalStrength reporting.\n     *\n     * Note that the min and max thresholds are fixed at -140 and -44, as explained in\n     * TS 136.133 9.1.4 - RSRP Measurement Report Mapping.\n     * <p>\n     * See SignalStrength#MAX_LTE_RSRP and SignalStrength#MIN_LTE_RSRP. Any signal level outside\n     * these boundaries is considered invalid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LTE_RSRQ_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of 4 customized LTE Reference Signal Received Quality (RSRQ) thresholds.\n     *\n     * Reference: TS 136.133 v12.6.0 section 9.1.7 - RSRQ Measurement Report Mapping.\n     *\n     * 4 threshold integers must be within the boundaries [-34 dB, 3 dB], and the levels are:\n     *     \"NONE: [-34, threshold1)\"\n     *     \"POOR: [threshold1, threshold2)\"\n     *     \"MODERATE: [threshold2, threshold3)\"\n     *     \"GOOD:  [threshold3, threshold4)\"\n     *     \"EXCELLENT:  [threshold4, 3]\"\n     *\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LTE_RSSNR_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of 4 customized LTE Reference Signal Signal to Noise Ratio (RSSNR) thresholds.\n     *\n     * 4 threshold integers must be within the boundaries [-20 dB, 30 dB], and the levels are:\n     *     \"NONE: [-20, threshold1)\"\n     *     \"POOR: [threshold1, threshold2)\"\n     *     \"MODERATE: [threshold2, threshold3)\"\n     *     \"GOOD:  [threshold3, threshold4)\"\n     *     \"EXCELLENT:  [threshold4, 30]\"\n     *\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EUTRAN_RSRP_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSRP} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSRP" ]
  }, {
    "name" : "KEY_EUTRAN_RSRQ_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSRQ} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSRQ" ]
  }, {
    "name" : "KEY_EUTRAN_RSSNR_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSSNR} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSSNR" ]
  }, {
    "name" : "KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Decides when clients try to bind to iwlan network service, which package name will\n     * the binding intent go to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_NETWORK_SERVICE_WLAN_CLASS_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Decides when clients try to bind to iwlan network service, which class name will\n     * the binding intent go to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_NETWORK_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Decides when clients try to bind to wwan (cellular) network service, which package name will\n     * the binding intent go to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_NETWORK_SERVICE_WWAN_CLASS_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * Decides when clients try to bind to wwan (cellular) network service, which class name will\n     * the binding intent go to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_QUALIFIED_NETWORKS_SERVICE_PACKAGE_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * The package name of qualified networks service that telephony binds to.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_QUALIFIED_NETWORKS_SERVICE_CLASS_OVERRIDE_STRING",
    "type" : "String",
    "comment" : "\n     * The class name of qualified networks service that telephony binds to.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WCDMA_RSCP_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of 4 WCDMA RSCP thresholds above which a signal level is considered POOR,\n     * MODERATE, GOOD, or EXCELLENT, to be used in SignalStrength reporting.\n     *\n     * Note that the min and max thresholds are fixed at -120 and -24, as set in 3GPP TS 27.007\n     * section 8.69.\n     * <p>\n     * See CellSignalStrengthWcdma#WCDMA_RSCP_MAX and CellSignalStrengthWcdma#WCDMA_RSCP_MIN.\n     * Any signal level outside these boundaries is considered invalid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WCDMA_ECNO_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of 4 WCDMA ECNO thresholds above which a signal level is considered POOR,\n     * MODERATE, GOOD, or EXCELLENT, to be used in SignalStrength reporting.\n     *\n     * Note that the min and max thresholds are fixed at -24 and 1, as set in 3GPP TS 25.215\n     * section 5.1.5.\n     * Any signal level outside these boundaries is considered invalid.\n     * <p>\n     *\n     * The default value is {@code {-24, -14, -6, 1}}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_UTRAN_RSCP_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSCP} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSCP" ]
  }, {
    "name" : "KEY_UTRAN_ECNO_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_ECNO} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_ECNO" ]
  }, {
    "name" : "KEY_WCDMA_DEFAULT_SIGNAL_STRENGTH_MEASUREMENT_STRING",
    "type" : "String",
    "comment" : " all RATs.",
    "links" : [ ]
  }, {
    "name" : "KEY_UNDELIVERED_SMS_MESSAGE_EXPIRATION_TIME",
    "type" : "String",
    "comment" : "\n     * When a partial sms / mms message stay in raw table for too long without being completed,\n     * we expire them and delete them from the raw table. This carrier config defines the\n     * expiration time. The default value is milliseconds in 7 days.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_REDIRECTION_SERVICE_COMPONENT_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * Specifies a carrier-defined {@link android.telecom.CallRedirectionService} which Telecom\n     * will bind to for outgoing calls. An empty string indicates that no carrier-defined\n     * {@link android.telecom.CallRedirectionService} is specified.\n     ",
    "links" : [ "android.telecom.CallRedirectionService" ]
  }, {
    "name" : "KEY_CONFIG_SHOW_ORIG_DIAL_STRING_FOR_CDMA_BOOL",
    "type" : "String",
    "comment" : "\n     * Support for the original string display of CDMA MO call.\n     * By default, it is disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_CALL_BLOCKING_DISABLED_NOTIFICATION_ALWAYS_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether to show notification(call blocking disabled) when Enhanced Call\n     * Blocking(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL) is enabled and making emergency call.\n     * When true, notification is shown always.\n     * When false, notification is shown only when any setting of \"Enhanced Blocked number\" is\n     * enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_FORWARDING_OVER_UT_WARNING_BOOL",
    "type" : "String",
    "comment" : "\n     * Some carriers only support SS over UT via INTERNET PDN.\n     * When mobile data is OFF or data roaming OFF during roaming,\n     * UI should block the call forwarding operation and notify the user\n     * that the function only works if data is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_BARRING_OVER_UT_WARNING_BOOL",
    "type" : "String",
    "comment" : "\n     * Some carriers only support SS over UT via INTERNET PDN.\n     * When mobile data is OFF or data roaming OFF during roaming,\n     * UI should block the call barring operation and notify the user\n     * that the function only works if data is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALLER_ID_OVER_UT_WARNING_BOOL",
    "type" : "String",
    "comment" : "\n     * Some carriers only support SS over UT via INTERNET PDN.\n     * When mobile data is OFF or data roaming OFF during roaming,\n     * UI should block the caller id operation and notify the user\n     * that the function only works if data is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_WAITING_OVER_UT_WARNING_BOOL",
    "type" : "String",
    "comment" : "\n     * Some carriers only support SS over UT via INTERNET PDN.\n     * When mobile data is OFF or data roaming OFF during roaming,\n     * UI should block the call waiting operation and notify the user\n     * that the function only works if data is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_CLIR_NETWORK_DEFAULT_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag indicating whether to support \"Network default\" option in Caller ID settings for Calling\n     * Line Identification Restriction (CLIR).\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORT_EMERGENCY_DIALER_SHORTCUT_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether the carrier want to support emergency dialer shortcut.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_CALL_FORWARDING_USSD_BOOL",
    "type" : "String",
    "comment" : "\n     * Call forwarding uses USSD command without SS command.\n     * When {@code true}, the call forwarding query/set by ussd command and UI only display Call\n     * Forwarding when unanswered.\n     * When {@code false}, don't use USSD to query/set call forwarding.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_CALLER_ID_USSD_BOOL",
    "type" : "String",
    "comment" : "\n     * This flag specifies whether to support for the caller id set command by ussd.\n     * When {@code true}, device shall sync caller id ussd result to ss command.\n     * When {@code false}, caller id don't support ussd command.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_CALL_WAITING_USSD_BOOL",
    "type" : "String",
    "comment" : "\n     * Call waiting uses USSD command without SS command.\n     * When {@code true}, the call waiting query/set by ussd command.\n     * When {@code false}, doesn't use USSD to query/set call waiting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_WAITING_SERVICE_CLASS_INT",
    "type" : "String",
    "comment" : "\n     * Specifies the service class for call waiting service.\n     * Default value is\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_VOICE}.\n     * <p>\n     * See 27.007 +CCFC or +CLCK.\n     * The value set as below:\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_NONE}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_VOICE}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_DATA}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_FAX}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_SMS}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_DATA_SYNC}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_DATA_ASYNC}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_PACKET}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_PAD}\n     * {@link com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_MAX}\n     * @hide\n     ",
    "links" : [ "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_DATA_ASYNC", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_PACKET", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_VOICE", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_MAX", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_PAD", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_SMS", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_DATA", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_FAX", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_NONE", "com.android.internal.telephony.CommandsInterface#SERVICE_CLASS_DATA_SYNC" ]
  }, {
    "name" : "KEY_5G_ICON_CONFIGURATION_STRING",
    "type" : "String",
    "comment" : "\n     * This configuration allows the system UI to display different 5G icons for different 5G\n     * scenarios.\n     *\n     * There are six 5G scenarios for icon configuration:\n     * 1. connected_mmwave: device currently connected to 5G cell as the primary or secondary cell\n     *    and considered NR advanced.\n     * 2. connected: device currently connected to 5G cell as the primary or secondary cell but not\n     *    considered NR advanced.\n     * 3. connected_rrc_idle: device currently connected to 5G cell as the primary or secondary cell\n     *    and RRC currently in IDLE state.\n     * 4. not_restricted_rrc_idle: device camped on a network that has 5G capability and the use of\n     *    5G is not restricted and RRC currently in IDLE state.\n     * 5. not_restricted_rrc_con: device camped on a network that has 5G capability and the use of\n     *    5G is not restricted and RRC currently in CONNECTED state.\n     * 6. restricted: device camped on a network that has 5G capability but the use of 5G is\n     *    restricted.\n     *\n     * The configured string contains multiple key-value pairs separated by comma. For each pair,\n     * the key and value are separated by a colon. The key corresponds to a 5G status above and\n     * the value is the icon name. Use \"None\" as the icon name if no icon should be shown in a\n     * specific 5G scenario. If the scenario is \"None\", config can skip this key and value.\n     *\n     * Icon name options: \"5G_Plus\", \"5G\".\n     *\n     * Here is an example:\n     * UE wants to display 5G_Plus icon for scenario#1, and 5G icon for scenario#2; otherwise not\n     * define.\n     * The configuration is: \"connected_mmwave:5G_Plus,connected:5G\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_5G_ICON_DISPLAY_GRACE_PERIOD_STRING",
    "type" : "String",
    "comment" : "\n     * This configuration allows the system UI to determine how long to continue to display 5G icons\n     * when the device switches between different 5G scenarios.\n     *\n     * There are eight 5G scenarios:\n     * 1. connected_mmwave: device currently connected to 5G cell as the primary or secondary cell\n     *    and considered NR advanced.\n     * 2. connected: device currently connected to 5G cell as the primary or secondary cell but not\n     *    considered NR advanced.\n     * 3. connected_rrc_idle: device currently connected to 5G cell as the primary or secondary cell\n     *    and RRC currently in IDLE state.\n     * 4. not_restricted_rrc_idle: device camped on a network that has 5G capability and the use of\n     *    5G is not restricted and RRC currently in IDLE state.\n     * 5. not_restricted_rrc_con: device camped on a network that has 5G capability and the use of\n     *    5G is not restricted and RRC currently in CONNECTED state.\n     * 6. restricted: device camped on a network that has 5G capability but the use of 5G is\n     *    restricted.\n     * 7. legacy: device is not camped on a network that has 5G capability\n     * 8. any: any of the above scenarios\n     *\n     * The configured string contains various timer rules separated by a semicolon.\n     * Each rule will have three items: prior 5G scenario, current 5G scenario, and grace period\n     * in seconds before changing the icon. When the 5G state changes from the prior to the current\n     * 5G scenario, the system UI will continue to show the icon for the prior 5G scenario (defined\n     * in {@link #KEY_5G_ICON_CONFIGURATION_STRING}) for the amount of time specified by the grace\n     * period. If the prior 5G scenario is reestablished, the timer will reset and start again if\n     * the UE changes 5G scenarios again. Defined states (5G scenarios #1-7) take precedence over\n     * 'any' (5G scenario #8), and unspecified transitions have a default grace period of 0.\n     * The order of rules in the configuration determines the priority (the first applicable timer\n     * rule will be used).\n     *\n     * Here is an example: \"connected_mmwave,connected,30;connected_mmwave,any,10;connected,any,10\"\n     * This configuration defines 3 timers:\n     * 1. When UE goes from 'connected_mmwave' to 'connected', system UI will continue to display\n     *    the 5G icon for 'connected_mmwave' for 30 seconds.\n     * 2. When UE goes from 'connected_mmwave' to any other state (except for connected, since\n     *    rule 1 would be used instead), system UI will continue to display the 5G icon for\n     *    'connected_mmwave' for 10 seconds.\n     * 3. When UE goes from 'connected' to any other state, system UI will continue to display the\n     *    5G icon for 'connected' for 10 seconds.\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_5G_ICON_CONFIGURATION_STRING" ]
  }, {
    "name" : "KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING",
    "type" : "String",
    "comment" : "\n     * This configuration extends {@link #KEY_5G_ICON_DISPLAY_GRACE_PERIOD_STRING} to allow the\n     * system UI to continue displaying 5G icons after the initial timer expires.\n     *\n     * There are eight 5G scenarios:\n     * 1. connected_mmwave: device currently connected to 5G cell as the primary or secondary cell\n     *    and considered NR advanced.\n     * 2. connected: device currently connected to 5G cell as the primary or secondary cell but not\n     *    considered NR advanced.\n     * 3. connected_rrc_idle: device currently connected to 5G cell as the primary or secondary cell\n     *    and RRC currently in IDLE state.\n     * 4. not_restricted_rrc_idle: device camped on a network that has 5G capability and the use of\n     *    5G is not restricted and RRC currently in IDLE state.\n     * 5. not_restricted_rrc_con: device camped on a network that has 5G capability and the use of\n     *    5G is not restricted and RRC currently in CONNECTED state.\n     * 6. restricted: device camped on a network that has 5G capability but the use of 5G is\n     *    restricted.\n     * 7. legacy: device is not camped on a network that has 5G capability\n     * 8. any: any of the above scenarios\n     *\n     * The configured string contains various timer rules separated by a semicolon.\n     * Each rule will have three items: primary 5G scenario, secondary 5G scenario, and\n     * grace period in seconds before changing the icon. When the timer for the primary 5G timer\n     * expires, the system UI will continue to show the icon for the primary 5G scenario (defined\n     * in {@link #KEY_5G_ICON_CONFIGURATION_STRING}) for the amount of time specified by the grace\n     * period. If the primary 5G scenario is reestablished, the timers will reset and the system UI\n     * will continue to display the icon for the primary 5G scenario without interruption. If the\n     * secondary 5G scenario is lost, the timer will reset and the icon will reflect the true state.\n     * Defined states (5G scenarios #1-7) take precedence over 'any' (5G scenario #8), and\n     * unspecified transitions have a default grace period of 0. The order of rules in the\n     * configuration determines the priority (the first applicable timer rule will be used).\n     *\n     * Here is an example: \"connected,not_restricted_rrc_idle,30\"\n     * This configuration defines a secondary timer that extends the primary 'connected' timer.\n     * When the primary 'connected' timer expires while the UE is in the 'not_restricted_rrc_idle'\n     * 5G state, system UI will continue to display the 5G icon for 'connected' for 30 seconds.\n     * If the 5G state returns to 'connected', the timer will be reset without change to the icon,\n     * and if the 5G state changes to neither 'connected' not 'not_restricted_rrc_idle', the icon\n     * will change to reflect the true state.\n     *\n     * The value can be overridden by {@link #KEY_NR_ADVANCED_BANDS_SECONDARY_TIMER_SECONDS_INT}\n     * @hide\n     ",
    "links" : [ "#KEY_5G_ICON_DISPLAY_GRACE_PERIOD_STRING", "#KEY_5G_ICON_CONFIGURATION_STRING", "#KEY_NR_ADVANCED_BANDS_SECONDARY_TIMER_SECONDS_INT" ]
  }, {
    "name" : "KEY_NR_ADVANCED_BANDS_SECONDARY_TIMER_SECONDS_INT",
    "type" : "String",
    "comment" : "\n     * The secondary grace periods in seconds to use if NR advanced icon was shown due to connecting\n     * to bands specified in {@link #KEY_ADDITIONAL_NR_ADVANCED_BANDS_INT_ARRAY}.\n     *\n     * The default value is 0, meaning the original value in\n     * {@link #KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING} is used. Otherwise, it overrides\n     * the value in {@link #KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING}.\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_ADDITIONAL_NR_ADVANCED_BANDS_INT_ARRAY", "#KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING" ]
  }, {
    "name" : "KEY_NR_TIMERS_RESET_IF_NON_ENDC_AND_RRC_IDLE_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether device resets all of NR timers when device camped on a network that haven't 5G\n     * capability and RRC currently in IDLE state.\n     *\n     * The default value is false;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NR_TIMERS_RESET_ON_VOICE_QOS_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether device resets all of NR timers when device is in a voice call and QOS is established.\n     * The default value is true;\n     *\n     * @see #KEY_5G_ICON_DISPLAY_GRACE_PERIOD_STRING\n     * @see #KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NR_TIMERS_RESET_ON_PLMN_CHANGE_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether device resets all of NR timers when the PLMN changes.\n     * The default value is false;\n     *\n     * @see #KEY_5G_ICON_DISPLAY_GRACE_PERIOD_STRING\n     * @see #KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ADDITIONAL_NR_ADVANCED_BANDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of additional NR advanced band would map to\n     * {@link TelephonyDisplayInfo#OVERRIDE_NETWORK_TYPE_NR_ADVANCED} when the device is on that\n     * band.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyDisplayInfo#OVERRIDE_NETWORK_TYPE_NR_ADVANCED" ]
  }, {
    "name" : "KEY_NR_ADVANCED_CAPABLE_PCO_ID_INT",
    "type" : "String",
    "comment" : "\n     * This configuration allows the framework to control the NR advanced capable by protocol\n     * configuration options(PCO).\n     *\n     * If this config is 0, then the nr advanced capable is enabled.\n     * If this config is not 0 and PCO container with this config's address is 1, then the nr\n     * advanced capable is enabled.\n     * If this config is not 0 and PCO container with this config's address is 0, then the nr\n     * advanced capable is disabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENABLE_NR_ADVANCED_WHILE_ROAMING_BOOL",
    "type" : "String",
    "comment" : "\n     * Enabled NR advanced (i.e. 5G+) icon while roaming. The default value is {@code true}, meaming\n     * the same NR advanced logic used for home network will be used for roaming network as well.\n     * Set this to {@code false} will disable NR advanced icon while the device is roaming,\n     * regardless meeting NR advanced criteria or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LTE_ENDC_USING_USER_DATA_FOR_RRC_DETECTION_BOOL",
    "type" : "String",
    "comment" : "\n     * This configuration allows the framework to use user data communication to detect Idle state,\n     * and this is used on the 5G icon.\n     *\n     * There is a new way for RRC state detection at Android 12. If\n     * {@link android.telephony.TelephonyManager#isRadioInterfaceCapabilitySupported}(\n     * {@link TelephonyManager#CAPABILITY_PHYSICAL_CHANNEL_CONFIG_1_6_SUPPORTED}) returns true,\n     * then framework can use PHYSICAL_CHANNEL_CONFIG for RRC state detection. Based on this\n     * condition, some carriers want to use the legacy behavior that way is using user data\n     * communication to detect the Idle state. Therefore, this configuration allows the framework\n     * to use user data communication to detect Idle state.\n     *\n     * There are 3 situations reflects the carrier define Idle state.\n     * 1. using PHYSICAL_CHANNEL_CONFIG to detect RRC Idle\n     * 2. using all of data connections to detect RRC Idle.\n     * 3. using data communication(consider internet data connection only) to detect data Idle.\n     *\n     * How to setup for above 3 cases?\n     * For below part, we call the condition#1 is device support\n     * {@link android.telephony.TelephonyManager#isRadioInterfaceCapabilitySupported}(\n     * {@link TelephonyManager#CAPABILITY_PHYSICAL_CHANNEL_CONFIG_1_6_SUPPORTED}).\n     * The condition#2 is carrier enable the KEY_LTE_ENDC_USING_USER_DATA_FOR_RRC_DETECTION_BOOL.\n     *\n     * For case#1, the condition#1 is true and the condition#2 is false.\n     * For case#2, the condition#1 is false and the condition#2 is false.\n     * For case#3, the condition#2 is true.\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#isRadioInterfaceCapabilitySupported", "android.telephony.TelephonyManager#CAPABILITY_PHYSICAL_CHANNEL_CONFIG_1_6_SUPPORTED" ]
  }, {
    "name" : "KEY_5G_WATCHDOG_TIME_MS_LONG",
    "type" : "String",
    "comment" : "\n     * Controls time in milliseconds until DcTracker reevaluates 5G connection state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_UNMETERED_NETWORK_TYPES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Which network types are unmetered. A string array that can contain network type names from\n     * {@link TelephonyManager#getNetworkTypeName(int)} in addition to the following NR keys:\n     * NR_NSA - NR NSA is unmetered for sub-6 frequencies\n     * NR_NSA_MMWAVE - NR NSA is unmetered for mmwave frequencies\n     * NR_SA - NR SA is unmetered for sub-6 frequencies\n     * NR_SA_MMWAVE - NR SA is unmetered for mmwave frequencies\n     *\n     * Note that this config only applies if an unmetered SubscriptionPlan is set via {@link\n     * SubscriptionManager#setSubscriptionPlans(int, List, long)} or an unmetered override is set\n     * via {@link SubscriptionManager#setSubscriptionOverrideUnmetered(int, boolean, int[], long)}\n     * or {@link SubscriptionManager#setSubscriptionOverrideUnmetered(int, boolean, long)}.\n     * If neither SubscriptionPlans nor an override are set, then no network types can be unmetered\n     * regardless of the value of this config.\n     * @hide\n     ",
    "links" : [ "android.telephony.SubscriptionManager#setSubscriptionPlans(int", "android.telephony.TelephonyManager#getNetworkTypeName(int)", "android.telephony.SubscriptionManager#setSubscriptionOverrideUnmetered(int" ]
  }, {
    "name" : "KEY_ROAMING_UNMETERED_NETWORK_TYPES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Which network types are unmetered when roaming. A string array that can contain network type\n     * names from {@link TelephonyManager#getNetworkTypeName(int)} in addition to the following\n     * NR keys:\n     * NR_NSA - NR NSA is unmetered when roaming for sub-6 frequencies\n     * NR_NSA_MMWAVE - NR NSA is unmetered when roaming for mmwave frequencies\n     * NR_SA - NR SA is unmetered when roaming for sub-6 frequencies\n     * NR_SA_MMWAVE - NR SA is unmetered when roaming for mmwave frequencies\n     *\n     * Note that this config only applies if an unmetered SubscriptionPlan is set via {@link\n     * SubscriptionManager#setSubscriptionPlans(int, List, long)} or an unmetered override is set\n     * via {@link SubscriptionManager#setSubscriptionOverrideUnmetered(int, boolean, int[], long)}\n     * or {@link SubscriptionManager#setSubscriptionOverrideUnmetered(int, boolean, long)}.\n     * If neither SubscriptionPlans nor an override are set, then no network types can be unmetered\n     * when roaming regardless of the value of this config.\n     * @hide\n     ",
    "links" : [ "android.telephony.SubscriptionManager#setSubscriptionPlans(int", "android.telephony.TelephonyManager#getNetworkTypeName(int)", "android.telephony.SubscriptionManager#setSubscriptionOverrideUnmetered(int" ]
  }, {
    "name" : "KEY_ASCII_7_BIT_SUPPORT_FOR_LONG_MESSAGE_BOOL",
    "type" : "String",
    "comment" : "\n     * Support ASCII 7-BIT encoding for long SMS. This carrier config is used to enable\n     * this feature.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_WIFI_CALLING_ICON_IN_STATUS_BAR_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls whether to show wifi calling icon in statusbar when wifi calling is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SUPPORTS_OPP_DATA_AUTO_PROVISIONING_BOOL",
    "type" : "String",
    "comment" : "\n     * Configuration to indicate that the carrier supports opportunistic data\n     * auto provisioning. Based on this flag, the device downloads and activates\n     * corresponding opportunistic profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SMDP_SERVER_ADDRESS_STRING",
    "type" : "String",
    "comment" : "\n     * SMDP+ server address for downloading opportunistic eSIM profile.\n     * FQDN (Fully Qualified Domain Name) of the SM-DP+ (e.g., smdp.gsma.com) restricted to the\n     * Alphanumeric mode character set defined in table 5 of ISO/IEC 18004 excluding '$'.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ESIM_DOWNLOAD_RETRY_BACKOFF_TIMER_SEC_INT",
    "type" : "String",
    "comment" : "\n     * This timer value is used in the eSIM Exponential Backoff download retry algorithm.\n     * Value should be in seconds.\n     * <OL>\n     *     <LI>When the first download failure occurs, retry download after BACKOFF_TIMER_VALUE\n     * seconds.</LI>\n     *\n     * <LI>If download fails again then, retry after either BACKOFF_TIMER_VALUE,\n     * 2xBACKOFF_TIMER_VALUE, or 3xBACKOFF_TIMER_VALUE seconds.</LI>\n     *\n     * <LI>In general after the cth failed attempt, retry after k * BACKOFF_TIMER_VALUE\n     * seconds, where k is a random integer between 1 and 2^c − 1. Max c value is\n     * {@link #KEY_ESIM_MAX_DOWNLOAD_RETRY_ATTEMPTS_INT}</LI>\n     * </OL>\n     ",
    "links" : [ "#KEY_ESIM_MAX_DOWNLOAD_RETRY_ATTEMPTS_INT" ]
  }, {
    "name" : "KEY_ESIM_MAX_DOWNLOAD_RETRY_ATTEMPTS_INT",
    "type" : "String",
    "comment" : "\n     * If eSIM profile download fails then, the number of retry attempts by UE\n     * will be based on this configuration. If download still fails even after the\n     * MAX attempts configured by this item then the retry is postponed until next\n     * device bootup.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_CARRIER_IDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * List of opportunistic carrier-ids associated with CBRS Primary SIM. When CBRS pSIM is\n     * inserted, opportunistic eSIM is download and this configuration is used for grouping pSIM\n     * and opportunistic eSIM. Also when a new CBRS pSIM is inserted, old opportunistic eSIMs are\n     * deleted using the carrier-ids in this configuration.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_ESIM_DOWNLOAD_VIA_WIFI_ONLY_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean configuration to control auto provisioning eSIM download in\n     * OpportunisticNetworkService using only WiFi or both WiFi/Data.\n     * True will download esim only via WiFi.\n     * False will use both WiFi and Data connection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_RSRP_INT",
    "type" : "String",
    "comment" : "\n     * Controls RSRP threshold, in dBm, at which OpportunisticNetworkService will decide whether\n     * the opportunistic network is good enough for internet data.\n     *\n     * <p>The value of {@link CellSignalStrengthLte#getRsrp()} will be compared with this\n     * threshold.\n     ",
    "links" : [ "android.telephony.CellSignalStrengthLte#getRsrp()" ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_RSSNR_INT",
    "type" : "String",
    "comment" : "\n     * Controls RSSNR threshold, in dB, at which OpportunisticNetworkService will\n     * decide whether the opportunistic network is good enough for internet data.\n     *\n     * <p>The value of {@link CellSignalStrengthLte#getRssnr()} will be compared with this\n     * threshold.\n     ",
    "links" : [ "android.telephony.CellSignalStrengthLte#getRssnr()" ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSRP_INT",
    "type" : "String",
    "comment" : "\n     * Controls RSRP threshold, in dBm, below which OpportunisticNetworkService will decide whether\n     * the opportunistic network available is not good enough for internet data.\n     *\n     * <p>The value of {@link CellSignalStrengthLte#getRsrp()} will be compared with this\n     * threshold.\n     ",
    "links" : [ "android.telephony.CellSignalStrengthLte#getRsrp()" ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSSNR_INT",
    "type" : "String",
    "comment" : "\n     * Controls RSSNR threshold, in dB, below which OpportunisticNetworkService will\n     * decide whether the opportunistic network available is not good enough for internet data.\n     *\n     * <p>The value of {@link CellSignalStrengthLte#getRssnr()} will be compared with this\n     * threshold.\n     ",
    "links" : [ "android.telephony.CellSignalStrengthLte#getRssnr()" ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_BANDWIDTH_INT",
    "type" : "String",
    "comment" : "\n     * Controls bandwidth threshold in Kbps at which OpportunisticNetworkService will decide whether\n     * the opportunistic network is good enough for internet data.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_ENTRY_OR_EXIT_HYSTERESIS_TIME_LONG",
    "type" : "String",
    "comment" : "\n     * Controls hysteresis time in milli seconds for which OpportunisticNetworkService\n     * will wait before attaching to a network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_HYSTERESIS_TIME_LONG",
    "type" : "String",
    "comment" : "\n     * Controls hysteresis time in milli seconds for which OpportunisticNetworkService\n     * will wait before switching data to an opportunistic network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_EXIT_HYSTERESIS_TIME_LONG",
    "type" : "String",
    "comment" : "\n     * Controls hysteresis time in milli seconds for which OpportunisticNetworkService\n     * will wait before switching data from opportunistic network to primary network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PING_TEST_BEFORE_DATA_SWITCH_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls whether to do ping test before switching data to opportunistic network.\n     * This carrier config is used to disable this feature.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SWITCH_DATA_TO_PRIMARY_IF_PRIMARY_IS_OOS_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls whether to switch data to primary from opportunistic subscription\n     * if primary is out of service. This control only affects system or 1st party app\n     * initiated data switch, but will not override data switch initiated by privileged carrier apps\n     * This carrier config is used to disable this feature.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_PING_PONG_TIME_LONG",
    "type" : "String",
    "comment" : "\n     * Controls the ping pong determination of opportunistic network.\n     * If opportunistic network is determined as out of service or below\n     * #KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSRP_INT or\n     * #KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSSNR_INT within\n     * #KEY_OPPORTUNISTIC_NETWORK_PING_PONG_TIME_LONG of switching to opportunistic network,\n     * it will be determined as ping pong situation by system app or 1st party app.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_BACKOFF_TIME_LONG",
    "type" : "String",
    "comment" : "\n     * Controls back off time in milli seconds for switching back to\n     * opportunistic subscription. This time will be added to\n     * {@link CarrierConfigManager#KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_HYSTERESIS_TIME_LONG} to\n     * determine hysteresis time if there is ping pong situation\n     * (determined by system app or 1st party app) between primary and opportunistic\n     * subscription. Ping ping situation is defined in\n     * #KEY_OPPORTUNISTIC_NETWORK_PING_PONG_TIME_LONG.\n     * If ping pong situation continuous #KEY_OPPORTUNISTIC_NETWORK_BACKOFF_TIME_LONG\n     * will be added to previously determined hysteresis time.\n     ",
    "links" : [ "android.telephony.CarrierConfigManager#KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_HYSTERESIS_TIME_LONG" ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_NETWORK_MAX_BACKOFF_TIME_LONG",
    "type" : "String",
    "comment" : "\n     * Controls the max back off time in milli seconds for switching back to\n     * opportunistic subscription.\n     * This time will be the max hysteresis that can be determined irrespective of there is\n     * continuous ping pong situation or not as described in\n     * #KEY_OPPORTUNISTIC_NETWORK_PING_PONG_TIME_LONG and\n     * #KEY_OPPORTUNISTIC_NETWORK_BACKOFF_TIME_LONG.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ENABLE_4G_OPPORTUNISTIC_NETWORK_SCAN_BOOL",
    "type" : "String",
    "comment" : "\n     * Controls whether 4G opportunistic networks should be scanned for possible data switch.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TIME_TO_SWITCH_BACK_TO_PRIMARY_IF_OPPORTUNISTIC_OOS_LONG",
    "type" : "String",
    "comment" : "\n     * Only relevant when the device supports opportunistic networks but does not support\n     * simultaneous 5G+5G. Controls how long, in milliseconds, to wait before opportunistic network\n     * goes out of service before switching the 5G capability back to primary stack. The idea of\n     * waiting a few seconds is to minimize the calling of the expensive capability switching\n     * operation in the case where CBRS goes back into service shortly after going out of it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OPPORTUNISTIC_TIME_TO_SCAN_AFTER_CAPABILITY_SWITCH_TO_PRIMARY_LONG",
    "type" : "String",
    "comment" : "\n     * Only relevant when the device supports opportunistic networks but does not support\n     * simultaneous 5G+5G. Controls how long, in milliseconds, after 5G capability has switched back\n     * to primary stack due to opportunistic network being OOS. The idea is to minimizing the\n     * 'ping-ponging' effect where device is constantly witching capability back and forth between\n     * primary and opportunistic stack.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EMERGENCY_NUMBER_PREFIX_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Indicates zero or more emergency number prefix(es), because some carrier requires\n     * if users dial an emergency number address with a specific prefix, the combination of the\n     * prefix and the address is also a valid emergency number to dial. For example, an emergency\n     * number prefix is 318, and the emergency number is 911. Both 318911 and 911 can be dialed by\n     * users for emergency call. An empty array of string indicates that current carrier does not\n     * have this requirement.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SUPPORTS_CALLER_ID_VERTICAL_SERVICE_CODES_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether carrier treats \"*67\" or \"*82\" as a temporary mode CLIR.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SMART_FORWARDING_CONFIG_COMPONENT_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * Smart forwarding config. Smart forwarding is a feature to configure call forwarding to a\n     * different SIM in the device when one SIM is not reachable. The config here specifies a smart\n     * forwarding component that will launch UI for changing the configuration. An empty string\n     * indicates that no smart forwarding component is specified.\n     *\n     * Currently, only one non-empty configuration of smart forwarding component within system will\n     * be used when multiple SIMs are inserted.\n     *\n     * Empty string by default.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALWAYS_SHOW_PRIMARY_SIGNAL_BAR_IN_OPPORTUNISTIC_NETWORK_BOOLEAN",
    "type" : "String",
    "comment" : "\n     * Indicates when a carrier has a primary subscription and an opportunistic subscription active,\n     * and when Internet data is switched to opportunistic network, whether to still show\n     * signal bar of primary network. By default it will be false, meaning whenever data\n     * is going over opportunistic network, signal bar will reflect signal strength and rat\n     * icon of that network.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA_SWITCH_VALIDATION_TIMEOUT_LONG",
    "type" : "String",
    "comment" : "\n     * Upon data switching between subscriptions within a carrier group, if switch depends on\n     * validation result, this value defines customized value of how long we wait for validation\n     * success before we fail and revoke the switch.\n     * Time out is in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MIN_UDP_PORT_4500_NAT_TIMEOUT_SEC_INT",
    "type" : "String",
    "comment" : "\n     * The minimum timeout of UDP port 4500 NAT / firewall entries on the Internet PDN of this\n     * carrier network. This will be used by Android platform VPNs to tune IPsec NAT keepalive\n     * interval. If this value is too low to provide uninterrupted inbound connectivity, then\n     * Android system VPNs may indicate to applications that the VPN cannot support long-lived\n     * TCP connections.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PREFERRED_IKE_PROTOCOL_INT",
    "type" : "String",
    "comment" : "\n     * The preferred IKE protocol for ESP packets.\n     *\n     * This will be used by Android platform VPNs to select preferred encapsulation type and IP\n     * protocol type. The possible customization values are:\n     *\n     * AUTO IP VERSION and ENCAPSULATION TYPE SELECTION : \"0\"\n     * IPv4 UDP                                         : \"40\"\n     * IPv6 ESP                                         : \"61\"\n     *\n     * See the {@code PREFERRED_IKE_PROTOCOL_} constants in\n     * {@link com.android.server.connectivity.Vpn}.\n     * @hide\n     ",
    "links" : [ "com.android.server.connectivity.Vpn" ]
  }, {
    "name" : "ENABLE_EAP_METHOD_PREFIX_BOOL",
    "type" : "String",
    "comment" : "\n     * Specifies whether the system should prefix the EAP method to the anonymous identity.\n     * The following prefix will be added if this key is set to TRUE:\n     *   EAP-AKA: \"0\"\n     *   EAP-SIM: \"1\"\n     *   EAP-AKA_PRIME: \"6\"\n     ",
    "links" : [ ]
  }, {
    "name" : "GBA_ME",
    "type" : "int",
    "comment" : "\n     * Indicates that GBA_ME should be used for GBA authentication, as defined in 3GPP TS 33.220.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GBA_U",
    "type" : "int",
    "comment" : "\n     * Indicates that GBA_U should be used for GBA authentication, as defined in 3GPP TS 33.220.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GBA_DIGEST",
    "type" : "int",
    "comment" : "\n     * Indicates that GBA_Digest should be used for GBA authentication, as defined\n     * in 3GPP TS 33.220.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_GBA_MODE_INT",
    "type" : "String",
    "comment" : "\n     * An integer representing the GBA mode to use for requesting credentials\n     * via {@link TelephonyManager#bootstrapAuthenticationRequest}.\n     *\n     * One of {@link #GBA_ME}, {@link #GBA_U}, or {@link #GBA_DIGEST}.\n     * @hide\n     ",
    "links" : [ "#GBA_DIGEST", "#GBA_ME", "#GBA_U", "android.telephony.TelephonyManager#bootstrapAuthenticationRequest" ]
  }, {
    "name" : "KEY_GBA_UA_SECURITY_ORGANIZATION_INT",
    "type" : "String",
    "comment" : "\n     * An integer representing the organization code to be used when building the\n     * {@link UaSecurityProtocolIdentifier} used when requesting GBA authentication.\n     *\n     * See the {@code ORG_} constants in {@link UaSecurityProtocolIdentifier}.\n     * @hide\n     ",
    "links" : [ "android.telephony.gba.UaSecurityProtocolIdentifier" ]
  }, {
    "name" : "KEY_GBA_UA_SECURITY_PROTOCOL_INT",
    "type" : "String",
    "comment" : "\n     * An integer representing the security protocol to be used when building the\n     * {@link UaSecurityProtocolIdentifier} used when requesting GBA authentication.\n     *\n     * See the {@code UA_SECURITY_PROTOCOL_} constants in {@link UaSecurityProtocolIdentifier}.\n     * @hide\n     ",
    "links" : [ "android.telephony.gba.UaSecurityProtocolIdentifier" ]
  }, {
    "name" : "KEY_GBA_UA_TLS_CIPHER_SUITE_INT",
    "type" : "String",
    "comment" : "\n     * An integer representing the cipher suite to be used when building the\n     * {@link UaSecurityProtocolIdentifier} used when requesting GBA authentication.\n     *\n     * See the {@code TLS_} constants in {@link android.telephony.gba.TlsParams}.\n     * @hide\n     ",
    "links" : [ "android.telephony.gba.TlsParams", "android.telephony.gba.UaSecurityProtocolIdentifier" ]
  }, {
    "name" : "KEY_DATA_STALL_RECOVERY_TIMERS_LONG_ARRAY",
    "type" : "String",
    "comment" : "\n     * The data stall recovery timers array in milliseconds, each element is the delay before\n     * performining next recovery action.\n     *\n     * The default value of timers array are: [180000ms, 180000ms, 180000ms, 180000ms] (3 minutes)\n     * Array[0]: It's the timer between RECOVERY_ACTION GET_DATA_CALL_LIST and CLEANUP, if data\n     * stall symptom still occurred, it will perform next recovery action after 180000ms.\n     * Array[1]: It's the timer between RECOVERY_ACTION CLEANUP and RE-REGISTER, if data stall\n     * symptom still occurred, it will perform next recovery action after 180000ms.\n     * Array[2]: It's the timer between RECOVERY_ACTION RE-REGISTER and RADIO_RESTART, if data stall\n     * symptom still occurred, it will perform next recovery action after 180000ms.\n     * Array[3]: It's the timer between RECOVERY_ACTION RADIO_RESTART and RESET_MODEM, if data stall\n     * symptom still occurred, it will perform next recovery action after 180000ms.\n     *\n     * See the {@code RECOVERY_ACTION_*} constants in\n     * {@link com.android.internal.telephony.data.DataStallRecoveryManager}\n     * @hide\n     ",
    "links" : [ "com.android.internal.telephony.data.DataStallRecoveryManager" ]
  }, {
    "name" : "KEY_DATA_STALL_RECOVERY_SHOULD_SKIP_BOOL_ARRAY",
    "type" : "String",
    "comment" : "\n     * The data stall recovery action boolean array, we use this array to determine if the\n     * data stall recovery action needs to be skipped.\n     *\n     * For example, if the carrier use the same APN for both of IA and default type,\n     * the data call will not disconnect in modem side (so the RECOVERY_ACTION_CLEANUP\n     * did not effect). In this case, we can config the boolean variable of action\n     * RECOVERY_ACTION_CLEANUP to true, then it can be ignored to speed up the recovery\n     * action procedure.\n     *\n     * The default value of boolean array are: [false, false, true, false, false]\n     * Array[0]: When performing the recovery action, we can use this boolean value to determine\n     * if we need to perform RECOVERY_ACTION_GET_DATA_CALL_LIST.\n     * Array[1]: If data stall symptom still occurred, we can use this boolean value to determine\n     * if we need to perform RECOVERY_ACTION_CLEANUP. For example, if the carrier use the same APN\n     * for both of IA and default type, the data call will not disconnect in modem side\n     * (so the RECOVERY_ACTION_CLEANUP did not effect). In this case, we can config the boolean\n     * variable of action RECOVERY_ACTION_CLEANUP to true, then it can be ignored to speed up the\n     * recovery action procedure.\n     * Array[2]: If data stall symptom still occurred, we can use this boolean value to determine\n     * if we need to perform RE-REGISTER.\n     * Array[3]: If data stall symptom still occurred, we can use this boolean value to determine\n     * if we need to perform RECOVERY_ACTION_RADIO_RESTART.\n     * Array[4]: If data stall symptom still occurred, we can use this boolean value to determine\n     * if we need to perform RECOVERY_ACTION_MODEM_RESET.\n     *\n     * See the {@code RECOVERY_ACTION_*} constants in\n     * {@link com.android.internal.telephony.data.DataStallRecoveryManager}\n     * @hide\n     ",
    "links" : [ "com.android.internal.telephony.data.DataStallRecoveryManager" ]
  }, {
    "name" : "KEY_CARRIER_SERVICE_NAME_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * String array containing the list of names for service numbers provided by carriers. This key\n     * should be used with {@link #KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY}. The names provided in\n     * this array will be mapped 1:1 with the numbers provided in the {@link\n     * #KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY} array.\n     *\n     * <p>The data would be considered valid if and only if:\n     *\n     * <ul>\n     *   <li>The number of items in both the arrays are equal\n     *   <li>The data added to the {@link #KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY} array is valid.\n     *       See {@link #KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY} for more information.\n     * </ul>\n     *\n     * <p>Example:\n     *\n     * <pre>{@code\n     * <string-array name=\"carrier_service_name_array\" num=\"2\">\n     *   <item value=\"Police\"/>\n     *   <item value=\"Ambulance\"/>\n     * </string-array>\n     * }</pre>\n     ",
    "links" : [ "#KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY" ]
  }, {
    "name" : "KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * String array containing the list of service numbers provided by carriers. This key should be\n     * used with {@link #KEY_CARRIER_SERVICE_NAME_STRING_ARRAY}. The numbers provided in this array\n     * will be mapped 1:1 with the names provided in the {@link\n     * #KEY_CARRIER_SERVICE_NAME_STRING_ARRAY} array.\n     *\n     * <p>The data would be considered valid if and only if:\n     *\n     * <ul>\n     *   <li>The number of items in both the arrays are equal\n     *   <li>The item should contain dialable characters only which includes 0-9, -, *, #, (, ),\n     *       SPACE.\n     * </ul>\n     *\n     * <p>Example:\n     *\n     * <pre>{@code\n     * <string-array name=\"carrier_service_number_array\" num=\"2\">\n     *   <item value=\"*123\"/>\n     *   <item value=\"+ (111) 111-111\"/>\n     * </string-array>\n     * }</pre>\n     ",
    "links" : [ "#KEY_CARRIER_SERVICE_NAME_STRING_ARRAY" ]
  }, {
    "name" : "KEY_CDMA_ENHANCED_ROAMING_INDICATOR_FOR_HOME_NETWORK_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * An int array containing CDMA enhanced roaming indicator values for Home (non-roaming)\n     * network.\n     * The default values come from 3GPP2 C.R1001 table 8.1-1.\n     * Enhanced Roaming Indicator Number Assignments\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_WFC_LOCATION_PRIVACY_POLICY_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether wifi calling location privacy policy is shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_USIM_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates use 3GPP application to replace 3GPP2 application even if it's a CDMA/CDMA-LTE\n     * phone, because some carriers' CSIM application is present but not supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTO_CANCEL_CS_REJECT_NOTIFICATION",
    "type" : "String",
    "comment" : "\n     * Determines whether the carrier wants to cancel the cs reject notification automatically\n     * when the voice registration state changes.\n     * If true, the notification will be automatically removed\n     *          when the voice registration state changes.\n     * If false, the notification will persist until the user dismisses it,\n     *           the SIM is removed, or the device is rebooted.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_GROUP_UUID_STRING",
    "type" : "String",
    "comment" : "\n     * Passing this value as {@link #KEY_SUBSCRIPTION_GROUP_UUID_STRING} will remove the\n     * subscription from a group instead of adding it to a group.\n     *\n     * <p>This value will work all the way back to {@link android.os.Build.VERSION_CODES#Q}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "#KEY_SUBSCRIPTION_GROUP_UUID_STRING" ]
  }, {
    "name" : "KEY_SUBSCRIPTION_GROUP_UUID_STRING",
    "type" : "String",
    "comment" : "\n     * The UUID of a Group of related subscriptions in which to place the current subscription.\n     *\n     * A grouped subscription will behave for billing purposes and other UI purposes as though it\n     * is a transparent extension of other subscriptions in the group.\n     *\n     * <p>If set to {@link #REMOVE_GROUP_UUID_STRING}, then the subscription will be removed from\n     * its current group.\n     *\n     * <p>This key will work all the way back to {@link android.os.Build.VERSION_CODES#Q}.\n     ",
    "links" : [ "#REMOVE_GROUP_UUID_STRING", "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "KEY_CELLULAR_USAGE_SETTING_INT",
    "type" : "String",
    "comment" : "\n     * Controls the cellular usage setting.\n     *\n     * The usage setting indicates whether a device will remain attached to a network based on\n     * the primary use case for the service. A device will detach and search for a more-preferred\n     * network if the primary use case (voice or data) is not satisfied. Depending on the type\n     * of device, it may operate in a voice or data-centric mode by default.\n     *\n     * <p>Sets the usage setting in accordance with 3gpp 24.301 sec 4.3 and 3gpp 24.501 sec 4.3.\n     * Also refer to \"UE's usage setting\" as defined in 3gpp 24.301 section 3.1 and 3gpp 23.221\n     * Annex A.\n     *\n     * Either omit this key or pass a value of\n     * {@link SubscriptionManager#USAGE_SETTING_UNKNOWN unknown} to preserve the current setting.\n     *\n     * <p>Devices that support configuration of the cellular usage setting, including devices\n     * with HAL capability to set the cellular usage setting, must honor this setting accordingly.\n     *\n     * {@link SubscriptionManager#USAGE_SETTING_DEFAULT default},\n     * {@link SubscriptionManager#USAGE_SETTING_VOICE_CENTRIC voice-centric},\n     * or {@link SubscriptionManager#USAGE_SETTING_DATA_CENTRIC data-centric}.\n     * {@see SubscriptionInfo#getUsageSetting}\n     *\n     ",
    "links" : [ "android.telephony.SubscriptionManager#USAGE_SETTING_UNKNOWN", "android.telephony.SubscriptionManager#USAGE_SETTING_DATA_CENTRIC", "android.telephony.SubscriptionManager#USAGE_SETTING_VOICE_CENTRIC", "android.telephony.SubscriptionManager#USAGE_SETTING_DEFAULT" ]
  }, {
    "name" : "KEY_DATA_SWITCH_VALIDATION_MIN_GAP_LONG",
    "type" : "String",
    "comment" : "\n     * Data switch validation minimal gap time, in milliseconds.\n     *\n     * Which means, if the same subscription on the same network (based on MCC+MNC+TAC+subId)\n     * was recently validated (within this time gap), and Telephony receives a request to switch to\n     * it again, Telephony will skip the validation part and switch to it as soon as connection\n     * is setup, as if it's already validated.\n     *\n     * If the network was validated within the gap but the latest validation result is false, the\n     * validation will not be skipped.\n     *\n     * If not set or set to 0, validation will never be skipped.\n     * The max acceptable value of this config is 24 hours.\n     *\n     * @hide\n     * @deprecated Use {@link #KEY_DATA_SWITCH_VALIDATION_MIN_INTERVAL_MILLIS_LONG} instead.\n     ",
    "links" : [ "#KEY_DATA_SWITCH_VALIDATION_MIN_INTERVAL_MILLIS_LONG" ]
  }, {
    "name" : "KEY_DATA_SWITCH_VALIDATION_MIN_INTERVAL_MILLIS_LONG",
    "type" : "String",
    "comment" : "\n     * Data switch validation minimal interval, in milliseconds.\n     *\n     * If a connection to the default (Internet) PDN for the current subscription is validated on\n     * a given operator within a given tracking area, re-validations to that matching operator will\n     * be skipped if they would occur within the specified interval. Instead, the connection will\n     * automatically considered validated.\n     *\n     * If the network was validated within the interval but the latest validation result was false,\n     * the validation will not be skipped. If not set or set to 0, validation will not be skipped.\n     *\n     * The valid range of value is between 0 millisecond and 24 hours, inclusive in both sides. The\n     * default value is 24 hours.\n     *\n     * @see android.net.NetworkCapabilities#NET_CAPABILITY_VALIDATED\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_IS_OPPORTUNISTIC_SUBSCRIPTION_BOOL",
    "type" : "String",
    "comment" : "\n     * A boolean property indicating whether this subscription should be managed as an opportunistic\n     * subscription.\n     *\n     * If true, then this subscription will be selected based on available coverage and will not be\n     * available for a user in settings menus for selecting macro network providers. If unset,\n     * defaults to “false”.\n     *\n     * <p>This key will work all the way back to {@link android.os.Build.VERSION_CODES#Q}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q" ]
  }, {
    "name" : "KEY_CARRIER_PROVISIONING_APP_STRING",
    "type" : "String",
    "comment" : "\n     * The flatten string {@link android.content.ComponentName componentName} of carrier\n     * provisioning app receiver.\n     *\n     * <p>\n     * The RadioInfo activity(*#*#INFO#*#*) will broadcast an intent to this receiver when the\n     * \"Carrier Provisioning Info\" or \"Trigger Carrier Provisioning\" button clicked.\n     *\n     * <p>\n     * e.g., com.google.android.carrierPackageName/.CarrierReceiverName\n     *\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "KEY_GSM_RSSI_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of 4 GSM RSSI thresholds above which a signal level is considered POOR,\n     * MODERATE, GOOD, or EXCELLENT, to be used in SignalStrength reporting.\n     *\n     * Note that the min and max thresholds are fixed at -113 and -51, as set in 3GPP TS 27.007\n     * section 8.5.\n     * <p>\n     * See CellSignalStrengthGsm#GSM_RSSI_MAX and CellSignalStrengthGsm#GSM_RSSI_MIN. Any signal\n     * level outside these boundaries is considered invalid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_GERAN_RSSI_HYSTERESIS_DB_INT",
    "type" : "String",
    "comment" : "\n     * An interval in dB for {@link SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSSI} measurement\n     * type defining the required magnitude change between reports.\n     *\n     * <p>The default value is 2 and the minimum allowed value is 0. If no value or negative value\n     * is set, the default value 2 is used.\n     * @hide\n     ",
    "links" : [ "android.telephony.SignalThresholdInfo#SIGNAL_MEASUREMENT_TYPE_RSSI" ]
  }, {
    "name" : "KEY_SUPPORT_WPS_OVER_IMS_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether Wireless Priority Service call is supported over IMS.\n     *\n     * See Wireless Priority Service from https://www.fcc.gov/general/wireless-priority-service-wps\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MMI_TWO_DIGIT_NUMBER_PATTERN_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * The two digital number pattern of MMI code which is defined by carrier.\n     * If the dial number matches this pattern, it will be dialed out normally not USSD.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_CERTIFICATE_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Holds the list of carrier certificate hashes, followed by optional package names.\n     * Format: \"sha1/256\" or \"sha1/256:package1,package2,package3...\"\n     * Note that each carrier has its own hashes.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_FORMAT_INCOMING_NUMBER_TO_NATIONAL_FOR_JP_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether the incoming call number and the conference participant number\n     * should be formatted to national number for Japan.\n     * @return {@code true} convert to the national format, {@code false} otherwise.\n     * e.g. \"+819012345678\" -> \"09012345678\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISCONNECT_CAUSE_PLAY_BUSYTONE_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * DisconnectCause array to play busy tone. Value should be array of\n     * {@link android.telephony.DisconnectCause}.\n     ",
    "links" : [ "android.telephony.DisconnectCause" ]
  }, {
    "name" : "KEY_PREVENT_CLIR_ACTIVATION_AND_DEACTIVATION_CODE_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether to prevent sending CLIR activation(\"*31#\") and deactivation(\"#31#\")\n     * code only without dialing number.\n     * When {@code true}, these are prevented, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_FORWARDED_NUMBER_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether to show forwarded number on call-in-progress screen.\n     * When true, forwarded number is shown.\n     * When false, forwarded number is not shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MISSED_INCOMING_CALL_SMS_ORIGINATOR_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * The list of originating address of missed incoming call SMS. If the SMS has originator\n     * matched, the SMS will be treated as special SMS for notifying missed incoming call to the\n     * user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TELEPHONY_NETWORK_CAPABILITY_PRIORITIES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Network capability priority for determine the satisfy order in telephony. The priority is\n     * from the lowest 0 to the highest 100. The long-lived network shall have the lowest priority.\n     * This allows other short-lived requests like MMS requests to be established. Emergency request\n     * always has the highest priority.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TELEPHONY_DATA_SETUP_RETRY_RULES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Defines the rules for data setup retry.\n     *\n     * The syntax of the retry rule:\n     * 1. Retry based on {@link NetworkCapabilities}. Note that only APN-type network capabilities\n     *    are supported. If the capabilities are not specified, then the retry rule only applies\n     *    to the current failed APN used in setup data call request.\n     * \"capabilities=[netCaps1|netCaps2|...], [retry_interval=n1|n2|n3|n4...], [maximum_retries=n]\"\n     *\n     * 2. Retry based on {@link DataFailCause}\n     * \"fail_causes=[cause1|cause2|cause3|..], [retry_interval=n1|n2|n3|n4...], [maximum_retries=n]\"\n     *\n     * 3. Retry based on {@link NetworkCapabilities} and {@link DataFailCause}. Note that only\n     *    APN-type network capabilities are supported.\n     * \"capabilities=[netCaps1|netCaps2|...], fail_causes=[cause1|cause2|cause3|...],\n     *     [retry_interval=n1|n2|n3|n4...], [maximum_retries=n]\"\n     *\n     * 4. Permanent fail causes (no timer-based retry) on the current failed APN. Retry interval\n     *    is specified for retrying the next available APN.\n     * \"permanent_fail_causes=8|27|28|29|30|32|33|35|50|51|111|-5|-6|65537|65538|-3|65543|65547|\n     *     2252|2253|2254, retry_interval=2500\"\n     *\n     * For example,\n     * \"capabilities=eims, retry_interval=1000, maximum_retries=20\" means if the attached\n     * network request is emergency, then retry data network setup every 1 second for up to 20\n     * times.\n     *\n     * \"capabilities=internet|enterprise|dun|ims|fota, retry_interval=2500|3000|\"\n     * \"5000|10000|15000|20000|40000|60000|120000|240000|600000|1200000|1800000\"\n     * \"1800000, maximum_retries=20\" means for those capabilities, retry happens in 2.5s, 3s, 5s,\n     * 10s, 15s, 20s, 40s, 1m, 2m, 4m, 10m, 20m, 30m, 30m, 30m, until reaching 20 retries.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities", "android.telephony.DataFailCause" ]
  }, {
    "name" : "KEY_TELEPHONY_DATA_HANDOVER_RETRY_RULES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Defines the rules for data handover retry.\n     *\n     * The syntax of the retry rule:\n     * 1. Retry when handover fails.\n     * \"retry_interval=[n1|n2|n3|...], [maximum_retries=n]\"\n     *\n     * For example,\n     * \"retry_interval=1000|3000|5000, maximum_retries=10\" means handover retry will happen in 1s,\n     * 3s, 5s, 5s, 5s....up to 10 times.\n     *\n     * 2. Retry when handover fails with certain fail causes.\n     * \"retry_interval=[n1|n2|n3|...], fail_causes=[cause1|cause2|cause3|...], [maximum_retries=n]\n     *\n     * For example,\n     * \"retry_interval=1000, maximum_retries=3, fail_causes=5\" means handover retry every 1 second\n     * for up to 3 times when handover fails with the cause 5.\n     *\n     * \"maximum_retries=0, fail_causes=6|10|67\" means handover retry should not happen for those\n     * causes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DELAY_IMS_TEAR_DOWN_UNTIL_CALL_END_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether delay tearing down IMS data network until voice call ends.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MISSED_INCOMING_CALL_SMS_PATTERN_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * The patterns of missed incoming call sms. This is the regular expression used for\n     * matching the missed incoming call's date, time, and caller id. The pattern should match\n     * fields for at least month, day, hour, and minute. Year is optional although it is encouraged.\n     *\n     * An usable pattern should look like this:\n     * ^(?<month>0[1-9]|1[012])\\/(?<day>0[1-9]|1[0-9]|2[0-9]|3[0-1]) (?<hour>[0-1][0-9]|2[0-3]):\n     * (?<minute>[0-5][0-9])\\s*(?<callerId>[0-9]+)\\s*$\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_SUPPORTED_SATELLITE_SERVICES_PER_PROVIDER_BUNDLE",
    "type" : "String",
    "comment" : "\n     * A PersistableBundle that contains a list of key-value pairs, where the values are integer\n     * arrays.\n     * <p>\n     * Keys are the PLMNs of satellite providers as strings and values are integer arrays of\n     * supported services with the following value:\n     * <ul>\n     * <li>1 = {@link android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_VOICE}</li>\n     * <li>2 = {@link android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_DATA}</li>\n     * <li>3 = {@link android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_SMS}</li>\n     * <li>4 = {@link android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_VIDEO}</li>\n     * <li>5 = {@link android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_EMERGENCY}</li>\n     * <li>6 = {@link android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_MMS}</li>\n     * </ul>\n     * <p>\n     * An example config for two PLMNs \"123411\" and \"123412\":\n     * <pre>{@code\n     * <carrier_config>\n     *   <pbundle_as_map name=\"carrier_supported_satellite_services_per_provider_bundle\">\n     *     <int-array name = \"123411\" num = \"2\">\n     *       <item value = \"3\"/>\n     *       <item value = \"5\"/>\n     *     </int-array>\n     *     <int-array name = \"123412\" num = \"1\">\n     *       <item value = \"3\"/>\n     *     </int-array>\n     *   </pbundle_as_map>\n     * </carrier_config>\n     * }</pre>\n     * <p>\n     * This config is empty by default.\n     ",
    "links" : [ "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_SMS", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_DATA", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_VOICE", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_VIDEO", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_EMERGENCY", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_MMS" ]
  }, {
    "name" : "KEY_SATELLITE_ATTACH_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * This config enables modem to scan satellite PLMNs specified as per\n     * {@link #KEY_CARRIER_SUPPORTED_SATELLITE_SERVICES_PER_PROVIDER_BUNDLE} and attach to same\n     * in case cellular networks are not enabled. This will need specific agreement between\n     * satellite provider and the carrier before enabling this flag.\n     *\n     * The default value is false.\n     ",
    "links" : [ "#KEY_CARRIER_SUPPORTED_SATELLITE_SERVICES_PER_PROVIDER_BUNDLE" ]
  }, {
    "name" : "KEY_SATELLITE_CONNECTION_HYSTERESIS_SEC_INT",
    "type" : "String",
    "comment" : "\n     * The carrier-enabled satellite connection hysteresis time in seconds for which the device\n     * continues in satellite mode after it loses the connection with the satellite network.\n     * <p>\n     * If the device is in satellite mode, the following actions will be taken by the device:\n     * <ul>\n     * <li>System UI will continue showing the satellite icon.</li>\n     * <li>When there is an ongoing emergency call, and the IMS is not registered, and cellular\n     * service is not available, and the device is in satellite mode, a timer with a duration\n     * defined by the overlay config\n     * {@code config_emergency_call_wait_for_connection_timeout_millis} will be started. When the\n     * timer expires, Telephony will send the event\n     * {@link TelephonyManager#EVENT_DISPLAY_EMERGENCY_MESSAGE} to Dialer, which will then prompt\n     * users to switch to using satellite emergency messaging.</li>\n     * </ul>\n     * <p>\n     * The default value is 300 seconds.\n     ",
    "links" : [ "android.telephony.TelephonyManager#EVENT_DISPLAY_EMERGENCY_MESSAGE" ]
  }, {
    "name" : "KEY_NTN_LTE_RSRP_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * This threshold is used when connected to a non-terrestrial LTE network.\n     * A list of 4 NTN LTE RSRP thresholds above which a signal level is considered POOR,\n     * MODERATE, GOOD, or EXCELLENT, to be used in SignalStrength reporting.\n     *\n     * Note that the min and max thresholds are fixed at -140 and -44, as explained in\n     * TS 136.133 9.1.4 - RSRP Measurement Report Mapping.\n     * <p>\n     * See SignalStrength#MAX_LTE_RSRP and SignalStrength#MIN_LTE_RSRP. Any signal level outside\n     * these boundaries is considered invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NTN_LTE_RSRQ_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * This threshold is used when connected to a non-terrestrial LTE network.\n     * A list of 4 customized NTN LTE Reference Signal Received Quality (RSRQ) thresholds.\n     *\n     * Reference: TS 136.133 v12.6.0 section 9.1.7 - RSRQ Measurement Report Mapping.\n     *\n     * 4 threshold integers must be within the boundaries [-34 dB, 3 dB], and the levels are:\n     *     \"NONE: [-34, threshold1)\"\n     *     \"POOR: [threshold1, threshold2)\"\n     *     \"MODERATE: [threshold2, threshold3)\"\n     *     \"GOOD:  [threshold3, threshold4)\"\n     *     \"EXCELLENT:  [threshold4, 3]\"\n     *\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NTN_LTE_RSSNR_THRESHOLDS_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * This threshold is used when connected to a non-terrestrial LTE network.\n     * A list of 4 customized NTN LTE Reference Signal Signal to Noise Ratio (RSSNR) thresholds.\n     *\n     * 4 threshold integers must be within the boundaries [-20 dB, 30 dB], and the levels are:\n     *     \"NONE: [-20, threshold1)\"\n     *     \"POOR: [threshold1, threshold2)\"\n     *     \"MODERATE: [threshold2, threshold3)\"\n     *     \"GOOD:  [threshold3, threshold4)\"\n     *     \"EXCELLENT:  [threshold4, 30]\"\n     *\n     * This key is considered invalid if the format is violated. If the key is invalid or\n     * not configured, a default value set will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PARAMETERS_USED_FOR_NTN_LTE_SIGNAL_BAR_INT",
    "type" : "String",
    "comment" : "\n     * This threshold is used when connected to a non-terrestrial LTE network.\n     * Bit-field integer to determine whether to use Reference Signal Received Power (RSRP),\n     * Reference Signal Received Quality (RSRQ), or/and Reference Signal Signal to Noise Ratio\n     * (RSSNR) for the number of NTN LTE signal bars and signal criteria reporting enabling.\n     *\n     * <p> If a measure is not set, signal criteria reporting from modem will not be triggered and\n     * not be used for calculating signal level. If multiple measures are set bit, the parameter\n     * whose value is smallest is used to indicate the signal level.\n     * <UL>\n     *  <LI>RSRP = 1 << 0</LI>\n     *  <LI>RSRQ = 1 << 1</LI>\n     *  <LI>RSSNR = 1 << 2</LI>\n     * </UL>\n     * <p> The value of this key must be bitwise OR of CellSignalStrengthLte#USE_RSRP,\n     * CellSignalStrengthLte#USE_RSRQ, CellSignalStrengthLte#USE_RSSNR.\n     *\n     * <p> For example, if both RSRP and RSRQ are used, the value of key is 3 (1 << 0 | 1 << 1).\n     * If the key is invalid or not configured, a default value (RSRP = 1 << 0) will apply.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_REMOVE_SATELLITE_PLMN_IN_MANUAL_NETWORK_SCAN_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicating whether plmns associated with carrier satellite can be exposed to user when\n     * manually scanning available cellular network.\n     * If key is {@code true}, satellite plmn should not be exposed to user and should be\n     * automatically set, {@code false} otherwise. Default value is {@code true}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_OVERRIDE_WFC_ROAMING_MODE_WHILE_USING_NTN_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether to override roaming Wi-Fi Calling preference when device is connected to\n     * non-terrestrial network.\n     * {@code true}  - roaming preference cannot be changed by user independently.\n     *                 Roaming preference is overridden to\n     *                 {@link com.android.ims.ImsConfig.WfcModeFeatureValueConstants#WIFI_PREFERRED}\n     * {@code false} - roaming preference can be changed by user independently and is not\n     *                 overridden when device is connected to non-terrestrial network.\n     * @hide\n     ",
    "links" : [ "com.android.ims.ImsConfig.WfcModeFeatureValueConstants#WIFI_PREFERRED" ]
  }, {
    "name" : "KEY_SATELLITE_ENTITLEMENT_STATUS_REFRESH_DAYS_INT",
    "type" : "String",
    "comment" : "\n     * An integer key holds the time interval for refreshing or re-querying the satellite\n     * entitlement status from the entitlement server to ensure it is the latest.\n     *\n     * The default value is 7 days.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_ENTITLEMENT_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * This configuration enables device to query the entitlement server to get the satellite\n     * configuration.\n     * This will need agreement the carrier before enabling this flag.\n     *\n     * The default value is false.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_ENTITLEMENT_APP_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * Indicates the appName that is used when querying the entitlement server for satellite.\n     *\n     * The default value is androidSatmode.\n     *\n     * Reference: GSMA TS.43-v11, 2.8.5 Fast Authentication and Token Management.\n     * `app_name` is an optional attribute in the request and may vary depending on the carrier\n     * requirement.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_INFORMATION_REDIRECT_URL_STRING",
    "type" : "String",
    "comment" : "\n     * URL to redirect user to get more information about the carrier support for satellite.\n     *\n     * The default value is empty string.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EMERGENCY_MESSAGING_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicate whether a carrier supports emergency messaging. When this config is {@code  false},\n     * emergency call to satellite T911 handover will be disabled.\n     *\n     * This will need agreement with carriers before enabling this flag.\n     *\n     * The default value is false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EMERGENCY_CALL_TO_SATELLITE_T911_HANDOVER_TIMEOUT_MILLIS_INT",
    "type" : "String",
    "comment" : "\n     * An integer key holds the timeout duration in milliseconds used to determine whether to hand\n     * over an emergency call to satellite T911.\n     *\n     * The timer is started when there is an ongoing emergency call, and the IMS is not registered,\n     * and cellular service is not available. When the timer expires,\n     * {@link com.android.internal.telephony.satellite.SatelliteSOSMessageRecommender} will send the\n     * event {@link TelephonyManager#EVENT_DISPLAY_EMERGENCY_MESSAGE} to Dialer, which will then\n     * prompt user to switch to using satellite emergency messaging.\n     *\n     * The default value is 30 seconds.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#EVENT_DISPLAY_EMERGENCY_MESSAGE", "com.android.internal.telephony.satellite.SatelliteSOSMessageRecommender" ]
  }, {
    "name" : "KEY_CARRIER_ROAMING_SATELLITE_DEFAULT_SERVICES_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * An int array that contains default capabilities for carrier enabled satellite roaming.\n     * If any PLMN is provided from the entitlement server, and it is not listed in\n     * {@link #KEY_CARRIER_SUPPORTED_SATELLITE_SERVICES_PER_PROVIDER_BUNDLE}, default capabilities\n     * will be used instead.\n     * <p>\n     * The default capabilities are\n     * {@link NetworkRegistrationInfo#SERVICE_TYPE_SMS}, and\n     * {@link NetworkRegistrationInfo#SERVICE_TYPE_MMS}\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_CARRIER_SUPPORTED_SATELLITE_SERVICES_PER_PROVIDER_BUNDLE", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_SMS", "android.telephony.NetworkRegistrationInfo#SERVICE_TYPE_MMS" ]
  }, {
    "name" : "KEY_DISABLE_DUN_APN_WHILE_ROAMING_WITH_PRESET_APN_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicating whether DUN APN should be disabled when the device is roaming. In that case,\n     * the default APN (i.e. internet) will be used for tethering.\n     *\n     * This config is only available when using Preset APN(not user edited) as Preferred APN.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_PREFERRED_APN_NAME_STRING",
    "type" : "String",
    "comment" : "\n     * Where there is no preferred APN, specifies the carrier's default preferred APN.\n     * Specifies the {@link android.provider.Telephony.Carriers.APN} of the default preferred apn.\n     *\n     * This config is only available with Preset APN(not user edited).\n     *\n     * @hide\n     ",
    "links" : [ "android.provider.Telephony.Carriers.APN" ]
  }, {
    "name" : "KEY_SUPPORTS_CALL_COMPOSER_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports call composer.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORTS_BUSINESS_CALL_COMPOSER_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if the carrier supports a business call composer.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALL_COMPOSER_PICTURE_SERVER_URL_STRING",
    "type" : "String",
    "comment" : "\n     * Indicates the carrier server url that serves the call composer picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT_RTT_MODE_INT",
    "type" : "String",
    "comment" : "\n     * Determines the default RTT mode.\n     *\n     * Upon first boot, when the user has not yet set a value for their preferred RTT mode,\n     * the value of this config will be sent to the IMS stack. Valid values are the same as for\n     * {@link Settings.Secure#RTT_CALLING_MODE}.\n     *\n     * @hide\n     ",
    "links" : [ "Settings.Secure#RTT_CALLING_MODE" ]
  }, {
    "name" : "KEY_RTT_SUPPORTED_WHILE_ROAMING_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether RTT is supported while roaming.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_ACS_FOR_RCS_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates if auto-configuration server is used for the RCS config\n     * Reference: GSMA RCC.14\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NETWORK_TEMP_NOT_METERED_SUPPORTED_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates temporarily unmetered mobile data is supported by the carrier.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_STORE_SIM_PIN_FOR_UNATTENDED_REBOOT_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating whether the SIM PIN can be stored and verified\n     * seamlessly after an unattended reboot.\n     *\n     * The device configuration value {@code config_allow_pin_storage_for_unattended_reboot}\n     * ultimately controls whether this carrier configuration option is used. Where\n     * {@code config_allow_pin_storage_for_unattended_reboot} is false, the value of this\n     * carrier configuration is ignored.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_HIDE_ENABLE_2G",
    "type" : "String",
    "comment" : "\n     * Allow whether the user can use the \"Allow 2G\" toggle in Settings.\n     *\n     * If {@code true} then the toggle is disabled (i.e. grayed out).\n     *\n     * Used to trade privacy/security against potentially reduced carrier coverage for some\n     * carriers.\n     *\n     * @removed This config option is no longer supported as it was hiding a security feature\n     * from users. Setting this option will not change the behavior of the Settings menu starting\n     * in Android V.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOWED_INITIAL_ATTACH_APN_TYPES_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * Indicates the allowed APN types that can be used for LTE initial attach. The order of APN\n     * types in the configuration is the order of APN types that will be used for initial attach.\n     * Empty list indicates that no APN types are allowed for initial attach.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CARRIER_PROVISIONS_WIFI_MERGED_NETWORKS_BOOL",
    "type" : "String",
    "comment" : "\n     * Indicates whether or not the carrier will provision merged carrier Wi-Fi offload networks.\n     * Such networks are considered part of the core carrier network.\n     *\n     * This configuration will be use to gate whether such configurations are allowed to the carrier\n     * and correspondingly enable UI elements which are required for such configurations.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_IP_FOR_CALLING_INDICATOR_BOOL",
    "type" : "String",
    "comment" : "\n     * Determines whether or not to use (IP) data connectivity as a supplemental condition to\n     * control the visibility of the no-calling indicator for this carrier in the System UI. Setting\n     * the configuration to true may make sense for carriers that provide OTT calling.\n     *\n     * Config = true: show no-calling indication only if telephony does not have voice registration\n     *                and if no (IP) data connectivity is available.\n     * Config = false: show no-calling indication only if telephony does not have voice\n     *                 registration.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISPLAY_CALL_STRENGTH_INDICATOR_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether or not to display a call strength indicator for this carrier in the System\n     * UI. Disabling the indication may be reasonable if the carrier's calling is not integrated\n     * into the Android telephony stack (e.g. it is OTT).\n     *\n     * true: Use telephony APIs to detect the current networking medium of calling and display a\n     *       UI indication based on the current strength (e.g. signal level) of that medium.\n     * false: Do not display the call strength indicator.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISPLAY_NO_DATA_NOTIFICATION_ON_PERMANENT_FAILURE_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether or not to display no data notification when data setup is permanently\n     * failed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VONR_SETTING_VISIBILITY_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating if the VoNR setting is visible in the Call Settings menu.\n     * If this flag is set and VoNR is enabled for this carrier (see {@link #KEY_VONR_ENABLED_BOOL})\n     * the VoNR setting menu will be visible. If {@link #KEY_VONR_ENABLED_BOOL} or\n     * this setting is false, the menu will be gone.\n     *\n     * Enabled by default.\n     *\n     ",
    "links" : [ "#KEY_VONR_ENABLED_BOOL" ]
  }, {
    "name" : "KEY_VONR_ENABLED_BOOL",
    "type" : "String",
    "comment" : "\n     * Flag specifying whether VoNR should be enabled for carrier.\n     * If true, VoNr will be enabled. If false, hard disabled.\n     *\n     * Disabled by default.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_VONR_ON_BY_DEFAULT_BOOL",
    "type" : "String",
    "comment" : "\n     * Boolean indicating the default VoNR user preference setting.\n     * If true, the VoNR setting will be enabled. If false, it will be disabled initially.\n     *\n     * Enabled by default.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_UNTHROTTLE_DATA_RETRY_WHEN_TAC_CHANGES_BOOL",
    "type" : "String",
    "comment" : "\n     * Determine whether unthrottle data retry when tracking area code (TAC/LAC) from cell changes\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUPPORTED_PREMIUM_CAPABILITIES_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * A list of premium capabilities the carrier supports. Applications can prompt users to\n     * purchase these premium capabilities from their carrier for a performance boost.\n     * Valid values are any of {@link TelephonyManager}'s {@code PREMIUM_CAPABILITY_*} constants.\n     *\n     * This is empty by default, indicating that no premium capabilities are supported.\n     *\n     * @see TelephonyManager#isPremiumCapabilityAvailableForPurchase(int)\n     * @see TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)\n     ",
    "links" : [ "android.telephony.TelephonyManager" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_NOTIFICATION_DISPLAY_TIMEOUT_MILLIS_LONG",
    "type" : "String",
    "comment" : "\n     * The amount of time in milliseconds the notification for a performance boost via\n     * premium capabilities will be visible to the user after\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * requests user action to purchase the boost from the carrier. Once the timeout expires,\n     * the performance boost notification will be automatically dismissed and the request will fail\n     * with {@link TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT}.\n     *\n     * The default value is 30 minutes.\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int", "android.telephony.TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_NOTIFICATION_BACKOFF_HYSTERESIS_TIME_MILLIS_LONG",
    "type" : "String",
    "comment" : "\n     * The amount of time in milliseconds that the notification for a performance boost via\n     * premium capabilities should be blocked when\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * returns a failure due to user action or timeout.\n     * The maximum number of performance boost notifications to show the user are defined in\n     * {@link #KEY_PREMIUM_CAPABILITY_MAXIMUM_DAILY_NOTIFICATION_COUNT_INT} and\n     * {@link #KEY_PREMIUM_CAPABILITY_MAXIMUM_MONTHLY_NOTIFICATION_COUNT_INT}.\n     *\n     * The default value is 30 minutes.\n     *\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int", "#KEY_PREMIUM_CAPABILITY_MAXIMUM_MONTHLY_NOTIFICATION_COUNT_INT", "#KEY_PREMIUM_CAPABILITY_MAXIMUM_DAILY_NOTIFICATION_COUNT_INT" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_MAXIMUM_DAILY_NOTIFICATION_COUNT_INT",
    "type" : "String",
    "comment" : "\n     * The maximum number of times in a day that we display the notification for a performance boost\n     * via premium capabilities when\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * returns a failure due to user action or timeout.\n     *\n     * The default value is 2 times.\n     *\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_MAXIMUM_MONTHLY_NOTIFICATION_COUNT_INT",
    "type" : "String",
    "comment" : "\n     * The maximum number of times in a month that we display the notification for a performance\n     * boost via premium capabilities when\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * returns a failure due to user action or timeout.\n     *\n     * The default value is 10 times.\n     *\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_PURCHASE_CONDITION_BACKOFF_HYSTERESIS_TIME_MILLIS_LONG",
    "type" : "String",
    "comment" : "\n     * The amount of time in milliseconds that the purchase request should be throttled when\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * returns a failure due to the carrier.\n     *\n     * The default value is 30 minutes.\n     *\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERROR\n     * @see TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILED\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_NETWORK_SETUP_TIME_MILLIS_LONG",
    "type" : "String",
    "comment" : "\n     * The amount of time in milliseconds within which the network must set up a slicing\n     * configuration for the premium capability after\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * returns {@link TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESS}.\n     * During the setup time, calls to\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)} will return\n     * {@link TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUP}.\n     * If the network fails to set up a slicing configuration for the premium capability within the\n     * setup time, subsequent purchase requests will be allowed to go through again.\n     *\n     * The default value is 5 minutes.\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int", "android.telephony.TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESS", "android.telephony.TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUP" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_PURCHASE_URL_STRING",
    "type" : "String",
    "comment" : "\n     * The URL to redirect to when the user clicks on the notification for a performance boost via\n     * premium capabilities after applications call\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}.\n     * If the URL is empty or invalid, the purchase request will return\n     * {@link TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTED}.\n     *\n     * This is empty by default.\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int", "android.telephony.TelephonyManager#PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTED" ]
  }, {
    "name" : "KEY_PREMIUM_CAPABILITY_SUPPORTED_ON_LTE_BOOL",
    "type" : "String",
    "comment" : "\n     * Whether to allow premium capabilities to be purchased when the device is connected to LTE.\n     * If this is {@code true}, applications can call\n     * {@link TelephonyManager#purchasePremiumCapability(int, Executor, Consumer)}\n     * when connected to {@link TelephonyManager#NETWORK_TYPE_LTE} to purchase and use\n     * premium capabilities.\n     * If this is {@code false}, applications can only purchase and use premium capabilities when\n     * connected to {@link TelephonyManager#NETWORK_TYPE_NR}.\n     *\n     * This is {@code false} by default.\n     ",
    "links" : [ "android.telephony.TelephonyManager#purchasePremiumCapability(int", "android.telephony.TelephonyManager#NETWORK_TYPE_LTE", "android.telephony.TelephonyManager#NETWORK_TYPE_NR" ]
  }, {
    "name" : "KEY_IWLAN_HANDOVER_POLICY_STRING_ARRAY",
    "type" : "String",
    "comment" : "\n     * IWLAN handover rules that determine whether handover is allowed or disallowed between\n     * cellular and IWLAN.\n     *\n     * Rule syntax: \"source=[GERAN|UTRAN|EUTRAN|NGRAN|IWLAN|UNKNOWN], target=[GERAN|UTRAN|EUTRAN\n     * |NGRAN|IWLAN], type=[allowed|disallowed], roaming=[true|false], capabilities=[INTERNET|MMS\n     * |FOTA|IMS|CBS|SUPL|EIMS|XCAP|DUN]\"\n     *\n     * Note that UNKNOWN can be only specified in the source access network and can be only used\n     * in the disallowed rule.\n     *\n     * The handover rules will be matched in the order. Here are some sample rules.\n     * <string-array name=\"iwlan_handover_rules\" num=\"5\">\n     *     <!-- Handover from IWLAN to 2G/3G is not allowed -->\n     *     <item value=\"source=IWLAN, target=GERAN|UTRAN, type=disallowed\"/>\n     *     <!-- Handover from 2G/3G to IWLAN is not allowed -->\n     *     <item value=\"source=GERAN|UTRAN, target:IWLAN, type=disallowed\"/>\n     *     <!-- Handover from IWLAN to 3G/4G/5G is not allowed if the device is roaming. -->\n     *     <item value=\"source=IWLAN, target=UTRAN|EUTRAN|NGRAN, roaming=true, type=disallowed\"/>\n     *     <!-- Handover from 4G to IWLAN is not allowed if the device has capability in either IMS\n     *     or EIMS-->\n     *     <item value=\"source=EUTRAN, target=IWLAN, type=disallowed, capabilities=IMS|EIMS\"/>\n     *     <!-- Handover is always allowed in any condition. -->\n     *     <item value=\"source=GERAN|UTRAN|EUTRAN|NGRAN|IWLAN|UNKNOWN,\n     *         target=GERAN|UTRAN|EUTRAN|NGRAN|IWLAN, type=allowed\"/>\n     * </string-array>\n     *\n     * When handover is not allowed, frameworks will tear down the data network on source transport,\n     * and then setup a new one on the target transport when Qualified Network Service changes the\n     * preferred access networks for particular APN types.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_AUTO_DATA_SWITCH_RAT_SIGNAL_SCORE_BUNDLE",
    "type" : "String",
    "comment" : "\n     * Score table for {@link TelephonyManager#MOBILE_DATA_POLICY_AUTO_DATA_SWITCH}. The score is\n     * used in conjunction with a tolerance value defined in resource config\n     * {@code auto_data_switch_score_tolerance}, greater than which device will switch to the sub\n     * with higher score.\n     * Possible keys are network type name string(also see {@link #KEY_BANDWIDTH_STRING_ARRAY}).\n     * Value should be \"score_level_0, score_level_1, score_level_2, score_level_3,score_level_4\".\n     * Each network type must have 5 scores correspond to {@link CellSignalStrength}, where score is\n     * a non-negative integer. A score of 0 is treated the same as data out of service.\n     *\n     * For NR (5G), the following network names should be used:\n     * - NR_NSA: NR NSA, sub-6 frequencies\n     * - NR_NSA_MMWAVE: NR NSA, mmwave frequencies\n     * - NR_SA: NR SA, sub-6 frequencies\n     * - NR_SA_MMWAVE: NR SA, mmwave frequencies\n     *\n     * @hide\n     ",
    "links" : [ "#KEY_BANDWIDTH_STRING_ARRAY", "android.telephony.TelephonyManager#MOBILE_DATA_POLICY_AUTO_DATA_SWITCH", "android.telephony.CellSignalStrength" ]
  }, {
    "name" : "KEY_CELLULAR_SERVICE_CAPABILITIES_INT_ARRAY",
    "type" : "String",
    "comment" : "\n     * An array of cellular services supported by a subscription.\n     *\n     * <p>Permissible values include:\n     * <ul>\n     *   <li>{@code SubscriptionManager#SERVICE_CAPABILITY_VOICE} for voice services</li>\n     *   <li>{@code SubscriptionManager#SERVICE_CAPABILITY_SMS} for SMS services</li>\n     *   <li>{@code SubscriptionManager#SERVICE_CAPABILITY_DATA} for data services</li>\n     * </ul>\n     *\n     * <p>Carrier-specific factors may influence how these services are supported. Therefore,\n     * modifying this carrier configuration might not always enable the specified services. These\n     * capability bitmasks should be considered as indicators of a carrier's preferred services\n     * to enhance user experience, rather than as absolute platform guarantees.\n     *\n     * <p>Device-level service capabilities, defined by\n     * {@code TelephonyManager#isDeviceVoiceCapable} and\n     * {@code TelephonyManager#isDeviceSmsCapable}, take precedence over these subscription-level\n     * settings. For instance, a device where {@code TelephonyManager#isDeviceVoiceCapable} returns\n     * false may not be able to make voice calls, even if subscribed to a service marked as\n     * voice-capable.\n     *\n     * <p>To determine a subscription's cellular service capabilities, use\n     * {@code SubscriptionInfo#getServiceCapabilities()}. To track changes in services, register\n     * a {@link SubscriptionManager.OnSubscriptionsChangedListener} and invoke the\n     * same method in its callback.\n     *\n     * <p>Emergency service availability may not depend on the cellular service capabilities.\n     * For example, emergency calls might be possible on a subscription even if it lacks\n     * {@code SubscriptionManager#SERVICE_CAPABILITY_VOICE}.\n     *\n     * <p>If unset, the default value is “[1, 2, 3]” (supports all cellular services).\n     *\n     * @see TelephonyManager#isDeviceVoiceCapable\n     * @see TelephonyManager#isDeviceSmsCapable\n     * @see SubscriptionInfo#getServiceCapabilities()\n     * @see SubscriptionManager.OnSubscriptionsChangedListener\n     ",
    "links" : [ "SubscriptionManager.OnSubscriptionsChangedListener" ]
  }, {
    "name" : "KEY_WEAR_CONNECTIVITY_BT_TO_CELL_DELAY_MS_INT",
    "type" : "String",
    "comment" : "\n     * Transition delay from BT to Cellular on Wear.\n     * Specifies delay when transitioning away from BT.\n     * This minimizes the duration of the netTransitionWakelock held by ConnectivityService\n     * whenever the primary/default network disappears, while still allowing some amount of time\n     * for BT to reconnect before we enable cell.\n     *\n     * If set as -1 then value from resources will be used\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_WEAR_CONNECTIVITY_EXTEND_BT_TO_CELL_DELAY_ON_WIFI_MS_INT",
    "type" : "String",
    "comment" : "\n     * Transition delay from BT to Cellular on Wear.\n     * If wifi connected it extends delay that has been started for BT to Cellular transition\n     * to avoid Wifi thrashing turning Cell radio and causing higher battery drain.\n     *\n     * If set as -1 then value from resources will be used\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sDefaults",
    "type" : "PersistableBundle",
    "comment" : " The default value for every variable. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PersistableBundle getConfigForSubId(int subId)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Gets the configuration values for a particular subscription, which is associated with a\n     * specific SIM card. If an invalid subId is used, the returned config will contain default\n     * values. After using this method to get the configuration bundle,\n     * {@link #isConfigForIdentifiedCarrier(PersistableBundle)} should be called to confirm whether\n     * any carrier specific configuration has been applied.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}, or the calling app\n     * has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * @param subId the subscription ID, normally obtained from {@link SubscriptionManager}.\n     * @return A {@link PersistableBundle} containing the config for the given subId, or default\n     *         values for an invalid subId.\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     *\n     * @deprecated Use {@link #getConfigForSubId(int, String...)} instead.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "android.telephony.SubscriptionManager", "android.os.PersistableBundle", "#isConfigForIdentifiedCarrier(PersistableBundle)", "android.Manifest.permission#READ_PHONE_STATE", "#getConfigForSubId(int", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "public PersistableBundle getConfigForSubId(int subId, @NonNull String... keys)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Gets the configuration values of the specified keys for a particular subscription.\n     *\n     * <p>If an invalid subId is used, the returned configuration will contain default values for\n     * the specified keys. If the value for the key can't be found, the returned configuration will\n     * filter the key out.\n     *\n     * <p>After using this method to get the configuration bundle,\n     * {@link #isConfigForIdentifiedCarrier(PersistableBundle)} should be called to confirm whether\n     * any carrier specific configuration has been applied.\n     *\n     * <p>Note that on success, the key/value for {@link #KEY_CARRIER_CONFIG_VERSION_STRING} and\n     * {@link #KEY_CARRIER_CONFIG_APPLIED_BOOL} are always in the returned bundle, no matter if they\n     * were explicitly requested.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}, or the calling app\n     * has carrier privileges on the specified subscription (see\n     * {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * @param subId The subscription ID on which the carrier config should be retrieved.\n     * @param keys The carrier config keys to retrieve values.\n     * @return A {@link PersistableBundle} with key/value mapping for the specified configuration\n     * on success, or an empty (but never null) bundle on failure (for example, when the calling app\n     * has no permission).\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "#KEY_CARRIER_CONFIG_APPLIED_BOOL", "#KEY_CARRIER_CONFIG_VERSION_STRING", "android.os.PersistableBundle", "#isConfigForIdentifiedCarrier(PersistableBundle)", "android.Manifest.permission#READ_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "public void overrideConfig(int subscriptionId, @Nullable PersistableBundle overrideValues)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the carrier config of the provided subscription ID with the provided values.\n     *\n     * Any further queries to carrier config from any process will return the overridden values\n     * after this method returns. The overrides are effective for the lifetime of the phone process\n     * until the user passes in {@code null} for {@code overrideValues}. This removes all previous\n     * overrides and sets the carrier config back to production values.\n     *\n     * May throw an {@link IllegalArgumentException} if {@code overrideValues} contains invalid\n     * values for the specified config keys.\n     *\n     * NOTE: This API is meant for testing purposes only.\n     *\n     * @param subscriptionId The subscription ID for which the override should be done.\n     * @param overrideValues Key-value pairs of the values that are to be overridden. If set to\n     *                       {@code null}, this will remove all previous overrides and set the\n     *                       carrier configuration back to production values.\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "IllegalArgumentException" ]
  }, {
    "name" : "public void overrideConfig(int subscriptionId, @Nullable PersistableBundle overrideValues, boolean persistent)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the carrier config of the provided subscription ID with the provided values.\n     *\n     * Any further queries to carrier config from any process will return the overridden values\n     * after this method returns. The overrides are effective until the user passes in {@code null}\n     * for {@code overrideValues}. This removes all previous overrides and sets the carrier config\n     * back to production values.\n     *\n     * The overrides is stored persistently and will survive a reboot if {@code persistent} is true.\n     *\n     * May throw an {@link IllegalArgumentException} if {@code overrideValues} contains invalid\n     * values for the specified config keys.\n     *\n     * NOTE: This API is meant for testing purposes only.\n     *\n     * @param subscriptionId The subscription ID for which the override should be done.\n     * @param overrideValues Key-value pairs of the values that are to be overridden. If set to\n     *                       {@code null}, this will remove all previous overrides and set the\n     *                       carrier configuration back to production values.\n     * @param persistent     Determines whether the override should be persistent.\n     * @hide\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public PersistableBundle getConfig()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Gets the configuration values for the default subscription. After using this method to get\n     * the configuration bundle, {@link #isConfigForIdentifiedCarrier(PersistableBundle)} should be\n     * called to confirm whether any carrier specific configuration has been applied.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}, or the calling app\n     * has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * @see #getConfigForSubId\n     * @see #getConfig(String...)\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     *\n     * @deprecated use {@link #getConfig(String...)} instead.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "#isConfigForIdentifiedCarrier(PersistableBundle)", "#getConfig(String...)", "android.Manifest.permission#READ_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "public PersistableBundle getConfig(@NonNull String... keys)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Gets the configuration values of the specified config keys applied for the default\n     * subscription.\n     *\n     * <p>If the value for the key can't be found, the returned bundle will filter the key out.\n     *\n     * <p>After using this method to get the configuration bundle, {@link\n     * #isConfigForIdentifiedCarrier(PersistableBundle)} should be called to confirm whether any\n     * carrier specific configuration has been applied.\n     *\n     * <p>Note that on success, the key/value for {@link #KEY_CARRIER_CONFIG_VERSION_STRING} and\n     * {@link #KEY_CARRIER_CONFIG_APPLIED_BOOL} are always in the returned bundle, no matter if\n     * they were explicitly requested.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}, or the calling app\n     * has carrier privileges for the default subscription (see\n     * {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * @param keys The config keys to retrieve values\n     * @return A {@link PersistableBundle} with key/value mapping for the specified carrier\n     * configs on success, or an empty (but never null) bundle on failure.\n     * @see #getConfigForSubId(int, String...)\n     * @see SubscriptionManager#getDefaultSubscriptionId()\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "#KEY_CARRIER_CONFIG_APPLIED_BOOL", "#KEY_CARRIER_CONFIG_VERSION_STRING", "android.os.PersistableBundle", "#isConfigForIdentifiedCarrier(PersistableBundle)", "android.Manifest.permission#READ_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "public static boolean isConfigForIdentifiedCarrier(PersistableBundle bundle)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether a configuration {@link PersistableBundle} obtained from\n     * {@link #getConfig()} or {@link #getConfigForSubId(int)} corresponds to an identified carrier.\n     *\n     * <p>When an app receives the {@link CarrierConfigManager#ACTION_CARRIER_CONFIG_CHANGED}\n     * broadcast which informs it that the carrier configuration has changed, it is possible\n     * that another reload of the carrier configuration has begun since the intent was sent.\n     * In this case, the carrier configuration the app fetches (e.g. via {@link #getConfig()})\n     * may not represent the configuration for the current carrier. It should be noted that it\n     * does not necessarily mean the configuration belongs to current carrier when this function\n     * return true because it may belong to another previous identified carrier. Users should\n     * always call {@link #getConfig()} or {@link #getConfigForSubId(int)} after receiving the\n     * broadcast {@link #ACTION_CARRIER_CONFIG_CHANGED}.\n     *\n     * <p>After using {@link #getConfig()} or {@link #getConfigForSubId(int)} an app should always\n     * use this method to confirm whether any carrier specific configuration has been applied.\n     * Especially when an app misses the broadcast {@link #ACTION_CARRIER_CONFIG_CHANGED} but it\n     * still needs to get the current configuration, it must use this method to verify whether the\n     * configuration is default or carrier overridden.\n     *\n     * @param bundle the configuration bundle to be checked.\n     * @return boolean true if any carrier specific configuration bundle has been applied, false\n     * otherwise or the bundle is null.\n     ",
    "links" : [ "android.telephony.CarrierConfigManager#ACTION_CARRIER_CONFIG_CHANGED", "#getConfigForSubId(int)", "#ACTION_CARRIER_CONFIG_CHANGED", "android.os.PersistableBundle", "#getConfig()" ]
  }, {
    "name" : "public void notifyConfigChangedForSubId(int subId)",
    "returnType" : "void",
    "comment" : "\n     * Calling this method triggers telephony services to fetch the current carrier configuration.\n     *\n     * <p>Normally this does not need to be called because the platform reloads config on its own.\n     * This should be called by a carrier service app if it wants to update config at an arbitrary\n     * moment.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}, or the calling app\n     * has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * <p>This method returns before the reload has completed, and {@link\n     * android.service.carrier.CarrierService#onLoadConfig} will be called from an arbitrary thread.\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "android.Manifest.permission#MODIFY_PHONE_STATE", "android.service.carrier.CarrierService#onLoadConfig", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "public void updateConfigForPhoneId(int phoneId, String simState)",
    "returnType" : "void",
    "comment" : "\n     * Request the carrier config loader to update the config for phoneId.\n     *\n     * <p>Depending on simState, the config may be cleared or loaded from config app. This is only\n     * used by SubscriptionInfoUpdater.\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION" ]
  }, {
    "name" : "public String getDefaultCarrierServicePackageName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the package name for a default carrier service.\n     * @return the package name for a default carrier service; empty string if not available.\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION" ]
  }, {
    "name" : "public static PersistableBundle getDefaultConfig()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Returns a new bundle with the default value for every supported configuration variable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private ICarrierConfigLoader getICarrierConfigLoader()",
    "returnType" : "ICarrierConfigLoader",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getConfigByComponentForSubId(@NonNull String prefix, int subId)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Gets the configuration values for a component using its prefix.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}, or the calling app\n     * has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * @param prefix prefix of the component.\n     * @param subId the subscription ID, normally obtained from {@link SubscriptionManager}.\n     *\n     * @see #getConfigForSubId\n     *\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_SUBSCRIPTION", "android.telephony.SubscriptionManager", "android.Manifest.permission#READ_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  }, {
    "name" : "private void addConfig(String key, Object value, PersistableBundle configs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerCarrierConfigChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull CarrierConfigChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link CarrierConfigChangeListener} to get a notification when carrier\n     * configurations have changed.\n     *\n     * @param executor The executor on which the listener will be called.\n     * @param listener The CarrierConfigChangeListener called when carrier configs has changed.\n     ",
    "links" : [ "CarrierConfigChangeListener" ]
  }, {
    "name" : "public void unregisterCarrierConfigChangeListener(@NonNull CarrierConfigChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the {@link CarrierConfigChangeListener} to stop notification on carrier\n     * configurations change.\n     *\n     * @param listener The CarrierConfigChangeListener which was registered with method\n     * {@link #registerCarrierConfigChangeListener(Executor, CarrierConfigChangeListener)}.\n     ",
    "links" : [ "CarrierConfigChangeListener", "#registerCarrierConfigChangeListener(Executor" ]
  }, {
    "name" : "public static PersistableBundle getCarrierConfigSubset(@NonNull Context context, int subId, @NonNull String... keys)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Get subset of specified carrier configuration if available or empty bundle, without throwing\n     * {@link RuntimeException} to caller.\n     *\n     * <p>This is a system internally used only utility to reduce the repetitive logic.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}, or the calling app\n     * has carrier privileges on the specified subscription (see\n     * {@link TelephonyManager#hasCarrierPrivileges()}).\n     *\n     * @param context Context used to get the CarrierConfigManager service.\n     * @param subId The subscription ID to get the config from.\n     * @param keys The config keys the client is interested in.\n     * @return Config bundle with key/value for the specified keys or empty bundle when failed\n     * @hide\n     ",
    "links" : [ "RuntimeException", "android.Manifest.permission#READ_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  } ],
  "methodNames" : [ "public PersistableBundle getConfigForSubId(int subId)", "public PersistableBundle getConfigForSubId(int subId, @NonNull String... keys)", "public void overrideConfig(int subscriptionId, @Nullable PersistableBundle overrideValues)", "public void overrideConfig(int subscriptionId, @Nullable PersistableBundle overrideValues, boolean persistent)", "public PersistableBundle getConfig()", "public PersistableBundle getConfig(@NonNull String... keys)", "public static boolean isConfigForIdentifiedCarrier(PersistableBundle bundle)", "public void notifyConfigChangedForSubId(int subId)", "public void updateConfigForPhoneId(int phoneId, String simState)", "public String getDefaultCarrierServicePackageName()", "public static PersistableBundle getDefaultConfig()", "private ICarrierConfigLoader getICarrierConfigLoader()", "public PersistableBundle getConfigByComponentForSubId(@NonNull String prefix, int subId)", "private void addConfig(String key, Object value, PersistableBundle configs)", "public void registerCarrierConfigChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull CarrierConfigChangeListener listener)", "public void unregisterCarrierConfigChangeListener(@NonNull CarrierConfigChangeListener listener)", "public static PersistableBundle getCarrierConfigSubset(@NonNull Context context, int subId, @NonNull String... keys)" ],
  "variableNames" : [ "TAG", "EXTRA_SLOT_INDEX", "EXTRA_REBROADCAST_ON_UNLOCK", "EXTRA_SUBSCRIPTION_INDEX", "SERVICE_CLASS_NONE", "SERVICE_CLASS_VOICE", "USSD_OVER_CS_PREFERRED", "USSD_OVER_IMS_PREFERRED", "USSD_OVER_CS_ONLY", "USSD_OVER_IMS_ONLY", "CARRIER_NR_AVAILABILITY_NSA", "CARRIER_NR_AVAILABILITY_SA", "mContext", "ACTION_CARRIER_CONFIG_CHANGED", "KEY_CARRIER_CONFIG_VERSION_STRING", "KEY_CARRIER_VOLTE_PROVISIONED_BOOL", "KEY_DISABLE_SUPPLEMENTARY_SERVICES_IN_AIRPLANE_MODE_BOOL", "KEY_CALL_FORWARDING_VISIBILITY_BOOL", "KEY_CALL_FORWARDING_WHEN_UNREACHABLE_SUPPORTED_BOOL", "KEY_CALL_FORWARDING_WHEN_UNANSWERED_SUPPORTED_BOOL", "KEY_CALL_FORWARDING_WHEN_BUSY_SUPPORTED_BOOL", "KEY_ADDITIONAL_SETTINGS_CALLER_ID_VISIBILITY_BOOL", "KEY_ADDITIONAL_SETTINGS_CALL_WAITING_VISIBILITY_BOOL", "KEY_CALL_BARRING_VISIBILITY_BOOL", "KEY_CALL_BARRING_SUPPORTS_PASSWORD_CHANGE_BOOL", "KEY_CALL_BARRING_SUPPORTS_DEACTIVATE_ALL_BOOL", "KEY_CALL_BARRING_DEFAULT_SERVICE_CLASS_INT", "KEY_SUPPORT_SS_OVER_CDMA_BOOL", "KEY_IGNORE_SIM_NETWORK_LOCKED_EVENTS_BOOL", "KEY_MDN_IS_ADDITIONAL_VOICEMAIL_NUMBER_BOOL", "KEY_SIM_NETWORK_UNLOCK_ALLOW_DISMISS_BOOL", "KEY_SUPPORT_EMERGENCY_SMS_OVER_IMS_BOOL", "KEY_WORLD_PHONE_BOOL", "KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL", "KEY_CARRIER_SUPPORTS_TETHERING_BOOL", "KEY_RESTART_RADIO_ON_PDP_FAIL_REGULAR_DEACTIVATION_BOOL", "KEY_RADIO_RESTART_FAILURE_CAUSES_INT_ARRAY", "KEY_ENABLE_DIALER_KEY_VIBRATION_BOOL", "KEY_DTMF_TYPE_ENABLED_BOOL", "KEY_AUTO_RETRY_ENABLED_BOOL", "KEY_ALLOW_LOCAL_DTMF_TONES_BOOL", "KEY_PLAY_CALL_RECORDING_TONE_BOOL", "KEY_SMS_REQUIRES_DESTINATION_NUMBER_CONVERSION_BOOL", "KEY_SHOW_ONSCREEN_DIAL_BUTTON_BOOL", "KEY_HAS_IN_CALL_NOISE_SUPPRESSION_BOOL", "KEY_ALLOW_EMERGENCY_NUMBERS_IN_CALL_LOG_BOOL", "KEY_UNLOGGABLE_NUMBERS_STRING_ARRAY", "KEY_VOICE_PRIVACY_DISABLE_UI_BOOL", "KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL", "KEY_ONLY_AUTO_SELECT_IN_HOME_NETWORK_BOOL", "KEY_SHOW_SINGLE_OPERATOR_ROW_IN_CHOOSE_NETWORK_SETTING_BOOL", "KEY_SHOW_SPN_FOR_HOME_IN_CHOOSE_NETWORK_SETTING_BOOL", "KEY_SIMPLIFIED_NETWORK_SETTINGS_BOOL", "KEY_HIDE_SIM_LOCK_SETTINGS_BOOL", "KEY_APN_EXPAND_BOOL", "KEY_OPERATOR_SELECTION_EXPAND_BOOL", "KEY_PREFER_2G_BOOL", "KEY_PREFER_3G_VISIBILITY_BOOL", "KEY_4G_ONLY_BOOL", "KEY_SHOW_CDMA_CHOICES_BOOL", "KEY_USE_HFA_FOR_PROVISIONING_BOOL", "KEY_USE_OTASP_FOR_PROVISIONING_BOOL", "KEY_CARRIER_SETTINGS_ENABLE_BOOL", "KEY_ADDITIONAL_CALL_SETTING_BOOL", "KEY_SHOW_APN_SETTING_CDMA_BOOL", "KEY_SUPPORT_SWAP_AFTER_MERGE_BOOL", "KEY_EDITABLE_VOICEMAIL_NUMBER_SETTING_BOOL", "KEY_EDITABLE_VOICEMAIL_NUMBER_BOOL", "KEY_HIDE_VOICEMAIL_NUMBER_SETTING_BOOL", "KEY_VOICEMAIL_NOTIFICATION_PERSISTENT_BOOL", "KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL", "KEY_DISABLE_CDMA_ACTIVATION_CODE_BOOL", "KEY_ONLY_SINGLE_DC_ALLOWED_INT_ARRAY", "KEY_CAPABILITIES_EXEMPT_FROM_SINGLE_DC_CHECK_INT_ARRAY", "KEY_GSM_ROAMING_NETWORKS_STRING_ARRAY", "KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY", "KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING", "KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING", "KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING", "KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING", "KEY_CDMA_ROAMING_NETWORKS_STRING_ARRAY", "KEY_CDMA_NONROAMING_NETWORKS_STRING_ARRAY", "KEY_FORCE_HOME_NETWORK_BOOL", "KEY_CARRIER_VOLTE_AVAILABLE_BOOL", "KEY_CARRIER_VT_AVAILABLE_BOOL", "KEY_CARRIER_USSD_METHOD_INT", "KEY_VOLTE_5G_LIMITED_ALERT_DIALOG_BOOL", "KEY_NOTIFY_HANDOVER_VIDEO_FROM_WIFI_TO_LTE_BOOL", "KEY_ALLOW_MERGING_RTT_CALLS_BOOL", "KEY_NOTIFY_HANDOVER_VIDEO_FROM_LTE_TO_WIFI_BOOL", "KEY_SUPPORT_DOWNGRADE_VT_TO_AUDIO_BOOL", "KEY_DEFAULT_VM_NUMBER_STRING", "KEY_DEFAULT_VM_NUMBER_ROAMING_STRING", "KEY_DEFAULT_VM_NUMBER_ROAMING_AND_IMS_UNREGISTERED_STRING", "KEY_CONFIG_TELEPHONY_USE_OWN_NUMBER_FOR_VOICEMAIL_BOOL", "KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS", "KEY_VILTE_DATA_IS_METERED_BOOL", "KEY_CARRIER_WFC_IMS_AVAILABLE_BOOL", "KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL", "KEY_ENABLE_CROSS_SIM_CALLING_ON_OPPORTUNISTIC_DATA_BOOL", "KEY_DIAL_STRING_REPLACE_STRING_ARRAY", "KEY_INTERNATIONAL_ROAMING_DIAL_STRING_REPLACE_STRING_ARRAY", "KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL", "KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT", "KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT", "KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL", "KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL", "KEY_CARRIER_PROMOTE_WFC_ON_CALL_FAIL_BOOL", "KEY_CARRIER_RCS_PROVISIONING_REQUIRED_BOOL", "KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL", "KEY_CARRIER_UT_PROVISIONING_REQUIRED_BOOL", "KEY_CARRIER_SUPPORTS_SS_OVER_UT_BOOL", "KEY_CARRIER_VOLTE_OVERRIDE_WFC_PROVISIONING_BOOL", "KEY_CARRIER_DATA_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING", "KEY_CARRIER_DATA_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING", "KEY_CARRIER_DATA_SERVICE_WWAN_CLASS_OVERRIDE_STRING", "KEY_CARRIER_DATA_SERVICE_WLAN_CLASS_OVERRIDE_STRING", "KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL", "KEY_CARRIER_VOWIFI_TTY_SUPPORTED_BOOL", "KEY_CARRIER_ALLOW_TURNOFF_IMS_BOOL", "KEY_CARRIER_IMS_GBA_REQUIRED_BOOL", "KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL", "KEY_CARRIER_USE_IMS_FIRST_FOR_EMERGENCY_BOOL", "KEY_PREFER_IN_SERVICE_SIM_FOR_NORMAL_ROUTED_EMERGENCY_CALLS_BOOL", "KEY_USE_ONLY_DIALED_SIM_ECC_LIST_BOOL", "KEY_CARRIER_INSTANT_LETTERING_INVALID_CHARS_STRING", "KEY_CARRIER_INSTANT_LETTERING_ESCAPED_CHARS_STRING", "KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING", "KEY_CARRIER_INSTANT_LETTERING_LENGTH_LIMIT_INT", "KEY_VOLTE_REPLACEMENT_RAT_INT", "KEY_DEFAULT_SIM_CALL_MANAGER_STRING", "KEY_CARRIER_FORCE_DISABLE_ETWS_CMAS_TEST_BOOL", "KEY_ALWAYS_SHOW_EMERGENCY_ALERT_ONOFF_BOOL", "KEY_DEFAULT_MTU_INT", "KEY_CARRIER_DATA_CALL_APN_RETRY_AFTER_DISCONNECT_LONG", "KEY_CARRIER_DATA_CALL_PERMANENT_FAILURE_STRINGS", "KEY_CARRIER_METERED_APN_TYPES_STRINGS", "KEY_CARRIER_METERED_ROAMING_APN_TYPES_STRINGS", "KEY_CARRIER_ERI_FILE_NAME_STRING", "KEY_VVM_DESTINATION_NUMBER_STRING", "KEY_VVM_PORT_NUMBER_INT", "KEY_VVM_TYPE_STRING", "KEY_VVM_CELLULAR_DATA_REQUIRED_BOOL", "KEY_VVM_CLIENT_PREFIX_STRING", "KEY_VVM_SSL_ENABLED_BOOL", "KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY", "KEY_VVM_LEGACY_MODE_ENABLED_BOOL", "KEY_VVM_PREFETCH_BOOL", "KEY_CARRIER_VVM_PACKAGE_NAME_STRING", "KEY_CARRIER_VVM_PACKAGE_NAME_STRING_ARRAY", "KEY_SHOW_ICCID_IN_SIM_STATUS_BOOL", "KEY_SHOW_SIGNAL_STRENGTH_IN_SIM_STATUS_BOOL", "KEY_INFLATE_SIGNAL_STRENGTH_BOOL", "KEY_CI_ACTION_ON_SYS_UPDATE_BOOL", "KEY_CI_ACTION_ON_SYS_UPDATE_INTENT_STRING", "KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_STRING", "KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_VAL_STRING", "KEY_GSM_DTMF_TONE_DELAY_INT", "KEY_IMS_DTMF_TONE_DELAY_INT", "KEY_CDMA_DTMF_TONE_DELAY_INT", "KEY_CALL_FORWARDING_MAP_NON_NUMBER_TO_VOICEMAIL_BOOL", "KEY_IGNORE_RTT_MODE_SETTING_BOOL", "KEY_SUPPORT_ADHOC_CONFERENCE_CALLS_BOOL", "KEY_SUPPORT_ADD_CONFERENCE_PARTICIPANTS_BOOL", "KEY_SUPPORT_CONFERENCE_CALL_BOOL", "KEY_IS_IMS_CONFERENCE_SIZE_ENFORCED_BOOL", "KEY_IMS_CONFERENCE_SIZE_LIMIT_INT", "KEY_SUPPORT_MANAGE_IMS_CONFERENCE_CALL_BOOL", "KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL", "KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_ON_PEER_BOOL", "KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_RTP_BOOL", "KEY_SUPPORTS_SDP_NEGOTIATION_OF_D2D_RTP_HEADER_EXTENSIONS_BOOL", "KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_DTMF_BOOL", "KEY_DISPLAY_HD_AUDIO_PROPERTY_BOOL", "KEY_SUPPORT_IMS_CONFERENCE_CALL_BOOL", "KEY_LOCAL_DISCONNECT_EMPTY_IMS_CONFERENCE_BOOL", "KEY_SUPPORT_VIDEO_CONFERENCE_CALL_BOOL", "KEY_EDITABLE_ENHANCED_4G_LTE_BOOL", "KEY_HIDE_ENHANCED_4G_LTE_BOOL", "KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL", "KEY_HIDE_IMS_APN_BOOL", "KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL", "KEY_ENABLE_APPS_STRING_ARRAY", "KEY_EDITABLE_WFC_MODE_BOOL", "KEY_CONFIG_WIFI_DISABLE_IN_ECBM", "KEY_WFC_OPERATOR_ERROR_CODES_STRING_ARRAY", "KEY_WFC_SPN_FORMAT_IDX_INT", "KEY_WFC_DATA_SPN_FORMAT_IDX_INT", "KEY_WFC_FLIGHT_MODE_SPN_FORMAT_IDX_INT", "KEY_WFC_SPN_USE_ROOT_LOCALE", "KEY_WFC_EMERGENCY_ADDRESS_CARRIER_APP_STRING", "KEY_CARRIER_NAME_OVERRIDE_BOOL", "KEY_CARRIER_NAME_STRING", "KEY_WFC_CARRIER_NAME_OVERRIDE_BY_PNN_BOOL", "CROSS_SIM_SPN_FORMAT_CARRIER_NAME_ONLY", "CROSS_SIM_SPN_FORMAT_CARRIER_NAME_WITH_BRANDING", "KEY_CROSS_SIM_SPN_FORMAT_INT", "KEY_SPN_DISPLAY_CONDITION_OVERRIDE_INT", "KEY_SPDI_OVERRIDE_STRING_ARRAY", "KEY_EHPLMN_OVERRIDE_STRING_ARRAY", "KEY_PNN_OVERRIDE_STRING_ARRAY", "KEY_OPL_OVERRIDE_STRING_ARRAY", "KEY_ALLOW_ERI_BOOL", "KEY_ENABLE_CARRIER_DISPLAY_NAME_RESOLVER_BOOL", "KEY_SIM_COUNTRY_ISO_OVERRIDE_STRING", "KEY_CARRIER_CALL_SCREENING_APP_STRING", "KEY_CDMA_HOME_REGISTERED_PLMN_NAME_OVERRIDE_BOOL", "KEY_CDMA_HOME_REGISTERED_PLMN_NAME_STRING", "KEY_CSP_ENABLED_BOOL", "KEY_ALLOW_ADDING_APNS_BOOL", "KEY_READ_ONLY_APN_TYPES_STRING_ARRAY", "KEY_READ_ONLY_APN_FIELDS_STRING_ARRAY", "KEY_APN_SETTINGS_DEFAULT_APN_TYPES_STRING_ARRAY", "KEY_BROADCAST_EMERGENCY_CALL_STATE_CHANGES_BOOL", "KEY_STK_DISABLE_LAUNCH_BROWSER_BOOL", "KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL", "KEY_ALWAYS_SHOW_DATA_RAT_ICON_BOOL", "KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL", "KEY_SHOW_4GLTE_FOR_LTE_DATA_ICON_BOOL", "KEY_SHOW_4G_FOR_3G_DATA_ICON_BOOL", "KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL", "KEY_SHOW_5G_SLICE_ICON_BOOL", "KEY_LTE_PLUS_THRESHOLD_BANDWIDTH_KHZ_INT", "KEY_NR_ADVANCED_THRESHOLD_BANDWIDTH_KHZ_INT", "KEY_INCLUDE_LTE_FOR_NR_ADVANCED_THRESHOLD_BANDWIDTH_BOOL", "KEY_RATCHET_NR_ADVANCED_BANDWIDTH_IF_RRC_IDLE_BOOL", "KEY_SHOW_OPERATOR_NAME_IN_STATUSBAR_BOOL", "KEY_OPERATOR_NAME_FILTER_PATTERN_STRING", "KEY_SHOW_CARRIER_DATA_ICON_PATTERN_STRING", "KEY_SHOW_PRECISE_FAILED_CAUSE_BOOL", "KEY_CARRIER_NR_AVAILABILITIES_INT_ARRAY", "KEY_LTE_ENABLED_BOOL", "KEY_SUPPORT_TDSCDMA_BOOL", "KEY_SUPPORT_TDSCDMA_ROAMING_NETWORKS_STRING_ARRAY", "KEY_WORLD_MODE_ENABLED_BOOL", "KEY_CARRIER_SETTINGS_ACTIVITY_COMPONENT_NAME_STRING", "KEY_MMS_ALIAS_ENABLED_BOOL", "KEY_MMS_ALLOW_ATTACH_AUDIO_BOOL", "KEY_MMS_APPEND_TRANSACTION_ID_BOOL", "KEY_MMS_GROUP_MMS_ENABLED_BOOL", "KEY_MMS_MMS_DELIVERY_REPORT_ENABLED_BOOL", "KEY_MMS_MMS_ENABLED_BOOL", "KEY_MMS_MMS_READ_REPORT_ENABLED_BOOL", "KEY_MMS_MULTIPART_SMS_ENABLED_BOOL", "KEY_MMS_NOTIFY_WAP_MMSC_ENABLED_BOOL", "KEY_MMS_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES_BOOL", "KEY_MMS_SHOW_CELL_BROADCAST_APP_LINKS_BOOL", "KEY_MMS_SMS_DELIVERY_REPORT_ENABLED_BOOL", "KEY_MMS_SUPPORT_HTTP_CHARSET_HEADER_BOOL", "KEY_MMS_SUPPORT_MMS_CONTENT_DISPOSITION_BOOL", "KEY_MMS_ALIAS_MAX_CHARS_INT", "KEY_MMS_ALIAS_MIN_CHARS_INT", "KEY_MMS_HTTP_SOCKET_TIMEOUT_INT", "KEY_MMS_MAX_IMAGE_HEIGHT_INT", "KEY_MMS_MAX_IMAGE_WIDTH_INT", "KEY_MMS_MAX_MESSAGE_SIZE_INT", "KEY_MMS_MESSAGE_TEXT_MAX_SIZE_INT", "KEY_MMS_RECIPIENT_LIMIT_INT", "KEY_MMS_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD_INT", "KEY_MMS_SMS_TO_MMS_TEXT_THRESHOLD_INT", "KEY_MMS_SUBJECT_MAX_LENGTH_INT", "KEY_MMS_EMAIL_GATEWAY_NUMBER_STRING", "KEY_MMS_HTTP_PARAMS_STRING", "KEY_MMS_NAI_SUFFIX_STRING", "KEY_MMS_UA_PROF_TAG_NAME_STRING", "KEY_MMS_UA_PROF_URL_STRING", "KEY_MMS_USER_AGENT_STRING", "KEY_MMS_CLOSE_CONNECTION_BOOL", "KEY_MMS_NETWORK_RELEASE_TIMEOUT_MILLIS_INT", "KEY_MMS_MAX_NTN_PAYLOAD_SIZE_BYTES_INT", "KEY_CARRIER_SETUP_APP_STRING", "KEY_CARRIER_DEFAULT_ACTIONS_ON_REDIRECTION_STRING_ARRAY", "KEY_CARRIER_DEFAULT_ACTIONS_ON_DCFAILURE_STRING_ARRAY", "KEY_CARRIER_DEFAULT_ACTIONS_ON_RESET", "KEY_CARRIER_DEFAULT_ACTIONS_ON_DEFAULT_NETWORK_AVAILABLE", "KEY_CARRIER_DEFAULT_REDIRECTION_URL_STRING_ARRAY", "KEY_CARRIER_APP_WAKE_SIGNAL_CONFIG_STRING_ARRAY", "KEY_CARRIER_APP_NO_WAKE_SIGNAL_CONFIG_STRING_ARRAY", "KEY_CARRIER_APP_REQUIRED_DURING_SIM_SETUP_BOOL", "KEY_CARRIER_DEFAULT_DATA_ROAMING_ENABLED_BOOL", "KEY_ALLOW_NON_EMERGENCY_CALLS_IN_ECM_BOOL", "KEY_EMERGENCY_SMS_MODE_TIMER_MS_INT", "KEY_ALLOW_EMERGENCY_VIDEO_CALLS_BOOL", "KEY_ALLOW_HOLD_CALL_DURING_EMERGENCY_BOOL", "KEY_USE_RCS_PRESENCE_BOOL", "KEY_USE_RCS_SIP_OPTIONS_BOOL", "KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT", "KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL", "KEY_CDMA_3WAYCALL_FLASH_DELAY_INT", "KEY_CDMA_ROAMING_MODE_INT", "KEY_SUPPORT_CDMA_1X_VOICE_CALLS_BOOL", "KEY_SUPPORT_DIRECT_FDN_DIALING_BOOL", "KEY_FDN_NUMBER_LENGTH_LIMIT_INT", "KEY_FORCE_IMEI_BOOL", "KEY_RATCHET_RAT_FAMILIES", "KEY_TREAT_DOWNGRADED_VIDEO_CALLS_AS_VIDEO_CALLS_BOOL", "KEY_DROP_VIDEO_CALL_WHEN_ANSWERING_AUDIO_CALL_BOOL", "KEY_ALLOW_MERGE_WIFI_CALLS_WHEN_VOWIFI_OFF_BOOL", "KEY_ALLOW_HOLD_IN_IMS_CALL_BOOL", "KEY_CARRIER_ALLOW_DEFLECT_IMS_CALL_BOOL", "KEY_CARRIER_ALLOW_TRANSFER_IMS_CALL_BOOL", "KEY_ALWAYS_PLAY_REMOTE_HOLD_TONE_BOOL", "KEY_AUTO_RETRY_FAILED_WIFI_EMERGENCY_CALL", "KEY_ALLOW_ADD_CALL_DURING_VIDEO_CALL_BOOL", "KEY_ALLOW_HOLD_VIDEO_CALL_BOOL", "KEY_WIFI_CALLS_CAN_BE_HD_AUDIO", "KEY_VIDEO_CALLS_CAN_BE_HD_AUDIO", "KEY_GSM_CDMA_CALLS_CAN_BE_HD_AUDIO", "KEY_ALLOW_VIDEO_CALLING_FALLBACK_BOOL", "KEY_IMS_REASONINFO_MAPPING_STRING_ARRAY", "KEY_ENHANCED_4G_LTE_TITLE_VARIANT_BOOL", "KEY_ENHANCED_4G_LTE_TITLE_VARIANT_INT", "KEY_NOTIFY_VT_HANDOVER_TO_WIFI_FAILURE_BOOL", "KEY_FILTERED_CNAP_NAMES_STRING_ARRAY", "KEY_RCS_CONFIG_SERVER_URL_STRING", "KEY_EDITABLE_WFC_ROAMING_MODE_BOOL", "KEY_SHOW_BLOCKING_PAY_PHONE_OPTION_BOOL", "KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL", "KEY_ALLOW_METERED_NETWORK_FOR_CERT_DOWNLOAD_BOOL", "KEY_PREF_NETWORK_NOTIFICATION_DELAY_INT", "KEY_EMERGENCY_NOTIFICATION_DELAY_INT", "KEY_ALLOW_USSD_REQUESTS_VIA_TELEPHONY_MANAGER_BOOL", "KEY_SUPPORT_3GPP_CALL_FORWARDING_WHILE_ROAMING_BOOL", "KEY_DISPLAY_VOICEMAIL_NUMBER_AS_DEFAULT_CALL_FORWARDING_NUMBER_BOOL", "KEY_NOTIFY_INTERNATIONAL_CALL_ON_WFC_BOOL", "KEY_HIDE_PRESET_APN_DETAILS_BOOL", "KEY_SHOW_VIDEO_CALL_CHARGES_ALERT_DIALOG_BOOL", "KEY_CALL_FORWARDING_BLOCKS_WHILE_ROAMING_STRING_ARRAY", "KEY_SUPPORT_IMS_CALL_FORWARDING_WHILE_ROAMING_BOOL", "KEY_MONTHLY_DATA_CYCLE_DAY_INT", "DATA_CYCLE_USE_PLATFORM_DEFAULT", "DATA_CYCLE_THRESHOLD_DISABLED", "KEY_DATA_WARNING_THRESHOLD_BYTES_LONG", "KEY_DATA_WARNING_NOTIFICATION_BOOL", "KEY_LIMITED_SIM_FUNCTION_NOTIFICATION_FOR_DSDS_BOOL", "KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG", "KEY_DATA_LIMIT_NOTIFICATION_BOOL", "KEY_DATA_RAPID_NOTIFICATION_BOOL", "KEY_LTE_EARFCNS_RSRP_BOOST_INT", "KEY_BOOSTED_LTE_EARFCNS_STRING_ARRAY", "KEY_NRARFCNS_RSRP_BOOST_INT_ARRAY", "KEY_BOOSTED_NRARFCNS_STRING_ARRAY", "KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL", "KEY_PARAMETERS_USED_FOR_LTE_SIGNAL_BAR_INT", "KEY_5G_NR_SSRSRP_THRESHOLDS_INT_ARRAY", "KEY_5G_NR_SSRSRQ_THRESHOLDS_INT_ARRAY", "KEY_5G_NR_SSSINR_THRESHOLDS_INT_ARRAY", "KEY_NGRAN_SSRSRP_HYSTERESIS_DB_INT", "KEY_NGRAN_SSRSRQ_HYSTERESIS_DB_INT", "KEY_NGRAN_SSSINR_HYSTERESIS_DB_INT", "KEY_PARAMETERS_USE_FOR_5G_NR_SIGNAL_BAR_INT", "KEY_SIGNAL_STRENGTH_NR_NSA_USE_LTE_AS_PRIMARY_BOOL", "KEY_BANDWIDTH_STRING_ARRAY", "KEY_BANDWIDTH_NR_NSA_USE_LTE_VALUE_FOR_UPLINK_BOOL", "KEY_DISABLE_VOICE_BARRING_NOTIFICATION_BOOL", "KEY_NON_ROAMING_OPERATOR_STRING_ARRAY", "KEY_ROAMING_OPERATOR_STRING_ARRAY", "KEY_SHOW_ROAMING_INDICATOR_BOOL", "IMSI_KEY_DOWNLOAD_URL_STRING", "IMSI_CARRIER_PUBLIC_KEY_EPDG_STRING", "IMSI_CARRIER_PUBLIC_KEY_WLAN_STRING", "IMSI_KEY_AVAILABILITY_INT", "KEY_CONVERT_CDMA_CALLER_ID_MMI_CODES_WHILE_ROAMING_ON_3GPP_BOOL", "KEY_SHOW_IMS_REGISTRATION_STATUS_BOOL", "KEY_RTT_SUPPORTED_BOOL", "KEY_TTY_SUPPORTED_BOOL", "KEY_RTT_AUTO_UPGRADE_BOOL", "KEY_RTT_SUPPORTED_FOR_VT_BOOL", "KEY_VT_UPGRADE_SUPPORTED_FOR_DOWNGRADED_RTT_CALL_BOOL", "KEY_RTT_UPGRADE_SUPPORTED_FOR_DOWNGRADED_VT_CALL_BOOL", "KEY_RTT_UPGRADE_SUPPORTED_BOOL", "KEY_RTT_DOWNGRADE_SUPPORTED_BOOL", "KEY_HIDE_TTY_HCO_VCO_WITH_RTT_BOOL", "KEY_DISABLE_CHARGE_INDICATION_BOOL", "KEY_SKIP_CF_FAIL_TO_DISABLE_DIALOG_BOOL", "KEY_SUPPORT_NO_REPLY_TIMER_FOR_CFNRY_BOOL", "KEY_NO_REPLY_TIMER_FOR_CFNRY_SEC_INT", "KEY_FEATURE_ACCESS_CODES_STRING_ARRAY", "KEY_IDENTIFY_HIGH_DEFINITION_CALLS_IN_CALL_LOG_BOOL", "KEY_SPN_DISPLAY_RULE_USE_ROAMING_FROM_SERVICE_STATE_BOOL", "KEY_CARRIER_CONFIG_APPLIED_BOOL", "KEY_CHECK_PRICING_WITH_CARRIER_FOR_DATA_ROAMING_BOOL", "KEY_SHOW_DATA_CONNECTED_ROAMING_NOTIFICATION_BOOL", "KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_EXCLUDED_MCCS_STRING_ARRAY", "KEY_DATA_CONNECTED_ROAMING_NOTIFICATION_INCLUDED_MCC_MNCS_STRING_ARRAY", "KEY_LTE_RSRP_THRESHOLDS_INT_ARRAY", "KEY_LTE_RSRQ_THRESHOLDS_INT_ARRAY", "KEY_LTE_RSSNR_THRESHOLDS_INT_ARRAY", "KEY_EUTRAN_RSRP_HYSTERESIS_DB_INT", "KEY_EUTRAN_RSRQ_HYSTERESIS_DB_INT", "KEY_EUTRAN_RSSNR_HYSTERESIS_DB_INT", "KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING", "KEY_CARRIER_NETWORK_SERVICE_WLAN_CLASS_OVERRIDE_STRING", "KEY_CARRIER_NETWORK_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING", "KEY_CARRIER_NETWORK_SERVICE_WWAN_CLASS_OVERRIDE_STRING", "KEY_CARRIER_QUALIFIED_NETWORKS_SERVICE_PACKAGE_OVERRIDE_STRING", "KEY_CARRIER_QUALIFIED_NETWORKS_SERVICE_CLASS_OVERRIDE_STRING", "KEY_WCDMA_RSCP_THRESHOLDS_INT_ARRAY", "KEY_WCDMA_ECNO_THRESHOLDS_INT_ARRAY", "KEY_UTRAN_RSCP_HYSTERESIS_DB_INT", "KEY_UTRAN_ECNO_HYSTERESIS_DB_INT", "KEY_WCDMA_DEFAULT_SIGNAL_STRENGTH_MEASUREMENT_STRING", "KEY_UNDELIVERED_SMS_MESSAGE_EXPIRATION_TIME", "KEY_CALL_REDIRECTION_SERVICE_COMPONENT_NAME_STRING", "KEY_CONFIG_SHOW_ORIG_DIAL_STRING_FOR_CDMA_BOOL", "KEY_SHOW_CALL_BLOCKING_DISABLED_NOTIFICATION_ALWAYS_BOOL", "KEY_CALL_FORWARDING_OVER_UT_WARNING_BOOL", "KEY_CALL_BARRING_OVER_UT_WARNING_BOOL", "KEY_CALLER_ID_OVER_UT_WARNING_BOOL", "KEY_CALL_WAITING_OVER_UT_WARNING_BOOL", "KEY_SUPPORT_CLIR_NETWORK_DEFAULT_BOOL", "KEY_SUPPORT_EMERGENCY_DIALER_SHORTCUT_BOOL", "KEY_USE_CALL_FORWARDING_USSD_BOOL", "KEY_USE_CALLER_ID_USSD_BOOL", "KEY_USE_CALL_WAITING_USSD_BOOL", "KEY_CALL_WAITING_SERVICE_CLASS_INT", "KEY_5G_ICON_CONFIGURATION_STRING", "KEY_5G_ICON_DISPLAY_GRACE_PERIOD_STRING", "KEY_5G_ICON_DISPLAY_SECONDARY_GRACE_PERIOD_STRING", "KEY_NR_ADVANCED_BANDS_SECONDARY_TIMER_SECONDS_INT", "KEY_NR_TIMERS_RESET_IF_NON_ENDC_AND_RRC_IDLE_BOOL", "KEY_NR_TIMERS_RESET_ON_VOICE_QOS_BOOL", "KEY_NR_TIMERS_RESET_ON_PLMN_CHANGE_BOOL", "KEY_ADDITIONAL_NR_ADVANCED_BANDS_INT_ARRAY", "KEY_NR_ADVANCED_CAPABLE_PCO_ID_INT", "KEY_ENABLE_NR_ADVANCED_WHILE_ROAMING_BOOL", "KEY_LTE_ENDC_USING_USER_DATA_FOR_RRC_DETECTION_BOOL", "KEY_5G_WATCHDOG_TIME_MS_LONG", "KEY_UNMETERED_NETWORK_TYPES_STRING_ARRAY", "KEY_ROAMING_UNMETERED_NETWORK_TYPES_STRING_ARRAY", "KEY_ASCII_7_BIT_SUPPORT_FOR_LONG_MESSAGE_BOOL", "KEY_SHOW_WIFI_CALLING_ICON_IN_STATUS_BAR_BOOL", "KEY_CARRIER_SUPPORTS_OPP_DATA_AUTO_PROVISIONING_BOOL", "KEY_SMDP_SERVER_ADDRESS_STRING", "KEY_ESIM_DOWNLOAD_RETRY_BACKOFF_TIMER_SEC_INT", "KEY_ESIM_MAX_DOWNLOAD_RETRY_ATTEMPTS_INT", "KEY_OPPORTUNISTIC_CARRIER_IDS_INT_ARRAY", "KEY_OPPORTUNISTIC_ESIM_DOWNLOAD_VIA_WIFI_ONLY_BOOL", "KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_RSRP_INT", "KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_RSSNR_INT", "KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSRP_INT", "KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSSNR_INT", "KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_BANDWIDTH_INT", "KEY_OPPORTUNISTIC_NETWORK_ENTRY_OR_EXIT_HYSTERESIS_TIME_LONG", "KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_HYSTERESIS_TIME_LONG", "KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_EXIT_HYSTERESIS_TIME_LONG", "KEY_PING_TEST_BEFORE_DATA_SWITCH_BOOL", "KEY_SWITCH_DATA_TO_PRIMARY_IF_PRIMARY_IS_OOS_BOOL", "KEY_OPPORTUNISTIC_NETWORK_PING_PONG_TIME_LONG", "KEY_OPPORTUNISTIC_NETWORK_BACKOFF_TIME_LONG", "KEY_OPPORTUNISTIC_NETWORK_MAX_BACKOFF_TIME_LONG", "KEY_ENABLE_4G_OPPORTUNISTIC_NETWORK_SCAN_BOOL", "KEY_TIME_TO_SWITCH_BACK_TO_PRIMARY_IF_OPPORTUNISTIC_OOS_LONG", "KEY_OPPORTUNISTIC_TIME_TO_SCAN_AFTER_CAPABILITY_SWITCH_TO_PRIMARY_LONG", "KEY_EMERGENCY_NUMBER_PREFIX_STRING_ARRAY", "KEY_CARRIER_SUPPORTS_CALLER_ID_VERTICAL_SERVICE_CODES_BOOL", "KEY_SMART_FORWARDING_CONFIG_COMPONENT_NAME_STRING", "KEY_ALWAYS_SHOW_PRIMARY_SIGNAL_BAR_IN_OPPORTUNISTIC_NETWORK_BOOLEAN", "KEY_DATA_SWITCH_VALIDATION_TIMEOUT_LONG", "KEY_MIN_UDP_PORT_4500_NAT_TIMEOUT_SEC_INT", "KEY_PREFERRED_IKE_PROTOCOL_INT", "ENABLE_EAP_METHOD_PREFIX_BOOL", "GBA_ME", "GBA_U", "GBA_DIGEST", "KEY_GBA_MODE_INT", "KEY_GBA_UA_SECURITY_ORGANIZATION_INT", "KEY_GBA_UA_SECURITY_PROTOCOL_INT", "KEY_GBA_UA_TLS_CIPHER_SUITE_INT", "KEY_DATA_STALL_RECOVERY_TIMERS_LONG_ARRAY", "KEY_DATA_STALL_RECOVERY_SHOULD_SKIP_BOOL_ARRAY", "KEY_CARRIER_SERVICE_NAME_STRING_ARRAY", "KEY_CARRIER_SERVICE_NUMBER_STRING_ARRAY", "KEY_CDMA_ENHANCED_ROAMING_INDICATOR_FOR_HOME_NETWORK_INT_ARRAY", "KEY_SHOW_WFC_LOCATION_PRIVACY_POLICY_BOOL", "KEY_USE_USIM_BOOL", "KEY_AUTO_CANCEL_CS_REJECT_NOTIFICATION", "REMOVE_GROUP_UUID_STRING", "KEY_SUBSCRIPTION_GROUP_UUID_STRING", "KEY_CELLULAR_USAGE_SETTING_INT", "KEY_DATA_SWITCH_VALIDATION_MIN_GAP_LONG", "KEY_DATA_SWITCH_VALIDATION_MIN_INTERVAL_MILLIS_LONG", "KEY_IS_OPPORTUNISTIC_SUBSCRIPTION_BOOL", "KEY_CARRIER_PROVISIONING_APP_STRING", "KEY_GSM_RSSI_THRESHOLDS_INT_ARRAY", "KEY_GERAN_RSSI_HYSTERESIS_DB_INT", "KEY_SUPPORT_WPS_OVER_IMS_BOOL", "KEY_MMI_TWO_DIGIT_NUMBER_PATTERN_STRING_ARRAY", "KEY_CARRIER_CERTIFICATE_STRING_ARRAY", "KEY_FORMAT_INCOMING_NUMBER_TO_NATIONAL_FOR_JP_BOOL", "KEY_DISCONNECT_CAUSE_PLAY_BUSYTONE_INT_ARRAY", "KEY_PREVENT_CLIR_ACTIVATION_AND_DEACTIVATION_CODE_BOOL", "KEY_SHOW_FORWARDED_NUMBER_BOOL", "KEY_MISSED_INCOMING_CALL_SMS_ORIGINATOR_STRING_ARRAY", "KEY_TELEPHONY_NETWORK_CAPABILITY_PRIORITIES_STRING_ARRAY", "KEY_TELEPHONY_DATA_SETUP_RETRY_RULES_STRING_ARRAY", "KEY_TELEPHONY_DATA_HANDOVER_RETRY_RULES_STRING_ARRAY", "KEY_DELAY_IMS_TEAR_DOWN_UNTIL_CALL_END_BOOL", "KEY_MISSED_INCOMING_CALL_SMS_PATTERN_STRING_ARRAY", "KEY_CARRIER_SUPPORTED_SATELLITE_SERVICES_PER_PROVIDER_BUNDLE", "KEY_SATELLITE_ATTACH_SUPPORTED_BOOL", "KEY_SATELLITE_CONNECTION_HYSTERESIS_SEC_INT", "KEY_NTN_LTE_RSRP_THRESHOLDS_INT_ARRAY", "KEY_NTN_LTE_RSRQ_THRESHOLDS_INT_ARRAY", "KEY_NTN_LTE_RSSNR_THRESHOLDS_INT_ARRAY", "KEY_PARAMETERS_USED_FOR_NTN_LTE_SIGNAL_BAR_INT", "KEY_REMOVE_SATELLITE_PLMN_IN_MANUAL_NETWORK_SCAN_BOOL", "KEY_OVERRIDE_WFC_ROAMING_MODE_WHILE_USING_NTN_BOOL", "KEY_SATELLITE_ENTITLEMENT_STATUS_REFRESH_DAYS_INT", "KEY_SATELLITE_ENTITLEMENT_SUPPORTED_BOOL", "KEY_SATELLITE_ENTITLEMENT_APP_NAME_STRING", "KEY_SATELLITE_INFORMATION_REDIRECT_URL_STRING", "KEY_EMERGENCY_MESSAGING_SUPPORTED_BOOL", "KEY_EMERGENCY_CALL_TO_SATELLITE_T911_HANDOVER_TIMEOUT_MILLIS_INT", "KEY_CARRIER_ROAMING_SATELLITE_DEFAULT_SERVICES_INT_ARRAY", "KEY_DISABLE_DUN_APN_WHILE_ROAMING_WITH_PRESET_APN_BOOL", "KEY_DEFAULT_PREFERRED_APN_NAME_STRING", "KEY_SUPPORTS_CALL_COMPOSER_BOOL", "KEY_SUPPORTS_BUSINESS_CALL_COMPOSER_BOOL", "KEY_CALL_COMPOSER_PICTURE_SERVER_URL_STRING", "KEY_DEFAULT_RTT_MODE_INT", "KEY_RTT_SUPPORTED_WHILE_ROAMING_BOOL", "KEY_USE_ACS_FOR_RCS_BOOL", "KEY_NETWORK_TEMP_NOT_METERED_SUPPORTED_BOOL", "KEY_STORE_SIM_PIN_FOR_UNATTENDED_REBOOT_BOOL", "KEY_HIDE_ENABLE_2G", "KEY_ALLOWED_INITIAL_ATTACH_APN_TYPES_STRING_ARRAY", "KEY_CARRIER_PROVISIONS_WIFI_MERGED_NETWORKS_BOOL", "KEY_USE_IP_FOR_CALLING_INDICATOR_BOOL", "KEY_DISPLAY_CALL_STRENGTH_INDICATOR_BOOL", "KEY_DISPLAY_NO_DATA_NOTIFICATION_ON_PERMANENT_FAILURE_BOOL", "KEY_VONR_SETTING_VISIBILITY_BOOL", "KEY_VONR_ENABLED_BOOL", "KEY_VONR_ON_BY_DEFAULT_BOOL", "KEY_UNTHROTTLE_DATA_RETRY_WHEN_TAC_CHANGES_BOOL", "KEY_SUPPORTED_PREMIUM_CAPABILITIES_INT_ARRAY", "KEY_PREMIUM_CAPABILITY_NOTIFICATION_DISPLAY_TIMEOUT_MILLIS_LONG", "KEY_PREMIUM_CAPABILITY_NOTIFICATION_BACKOFF_HYSTERESIS_TIME_MILLIS_LONG", "KEY_PREMIUM_CAPABILITY_MAXIMUM_DAILY_NOTIFICATION_COUNT_INT", "KEY_PREMIUM_CAPABILITY_MAXIMUM_MONTHLY_NOTIFICATION_COUNT_INT", "KEY_PREMIUM_CAPABILITY_PURCHASE_CONDITION_BACKOFF_HYSTERESIS_TIME_MILLIS_LONG", "KEY_PREMIUM_CAPABILITY_NETWORK_SETUP_TIME_MILLIS_LONG", "KEY_PREMIUM_CAPABILITY_PURCHASE_URL_STRING", "KEY_PREMIUM_CAPABILITY_SUPPORTED_ON_LTE_BOOL", "KEY_IWLAN_HANDOVER_POLICY_STRING_ARRAY", "KEY_AUTO_DATA_SWITCH_RAT_SIGNAL_SCORE_BUNDLE", "KEY_CELLULAR_SERVICE_CAPABILITIES_INT_ARRAY", "KEY_WEAR_CONNECTIVITY_BT_TO_CELL_DELAY_MS_INT", "KEY_WEAR_CONNECTIVITY_EXTEND_BT_TO_CELL_DELAY_ON_WIFI_MS_INT", "sDefaults" ]
}