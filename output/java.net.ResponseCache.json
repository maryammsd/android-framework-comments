{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/ResponseCache.java",
  "packageName" : "java.net",
  "className" : "ResponseCache",
  "comment" : "\n * Represents implementations of URLConnection caches. An instance of\n * such a class can be registered with the system by doing\n * ResponseCache.setDefault(ResponseCache), and the system will call\n * this object in order to:\n *\n *    <ul><li>store resource data which has been retrieved from an\n *            external source into the cache</li>\n *         <li>try to fetch a requested resource that may have been\n *            stored in the cache</li>\n *    </ul>\n *\n * The ResponseCache implementation decides which resources\n * should be cached, and for how long they should be cached. If a\n * request resource cannot be retrieved from the cache, then the\n * protocol handlers will fetch the resource from its original\n * location.\n *\n * The settings for URLConnection#useCaches controls whether the\n * protocol is allowed to use a cached response.\n *\n * For more information on HTTP caching, see <a\n * href=\"http://www.ietf.org/rfc/rfc2616.txt\"><i>RFC&nbsp;2616: Hypertext\n * Transfer Protocol -- HTTP/1.1</i></a>\n *\n * @author Yingxian Wang\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "theResponseCache",
    "type" : "ResponseCache",
    "comment" : "\n     * The system wide cache that provides access to a url\n     * caching mechanism.\n     *\n     * @see #setDefault(ResponseCache)\n     * @see #getDefault()\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized ResponseCache getDefault()",
    "returnType" : "ResponseCache",
    "comment" : "\n     * Gets the system-wide response cache.\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed and it denies\n     * {@link NetPermission}{@code (\"getResponseCache\")}\n     *\n     * @see #setDefault(ResponseCache)\n     * @return the system-wide {@code ResponseCache}\n     * @since 1.5\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public static synchronized void setDefault(ResponseCache responseCache)",
    "returnType" : "void",
    "comment" : "\n     * Sets (or unsets) the system-wide cache.\n     *\n     * Note: non-standard procotol handlers may ignore this setting.\n     *\n     * @param responseCache The response cache, or\n     *          {@code null} to unset the cache.\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed and it denies\n     * {@link NetPermission}{@code (\"setResponseCache\")}\n     *\n     * @see #getDefault()\n     * @since 1.5\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public abstract CacheResponse get(URI uri, String rqstMethod, Map<String, List<String>> rqstHeaders) throws IOException",
    "returnType" : "CacheResponse",
    "comment" : "\n     * Retrieve the cached response based on the requesting uri,\n     * request method and request headers. Typically this method is\n     * called by the protocol handler before it sends out the request\n     * to get the network resource. If a cached response is returned,\n     * that resource is used instead.\n     *\n     * @param uri a {@code URI} used to reference the requested\n     *            network resource\n     * @param rqstMethod a {@code String} representing the request\n     *            method\n     * @param rqstHeaders - a Map from request header\n     *            field names to lists of field values representing\n     *            the current request headers\n     * @return a {@code CacheResponse} instance if available\n     *          from cache, or null otherwise\n     * @throws  IOException if an I/O error occurs\n     * @throws  IllegalArgumentException if any one of the arguments is null\n     *\n     * @see     java.net.URLConnection#setUseCaches(boolean)\n     * @see     java.net.URLConnection#getUseCaches()\n     * @see     java.net.URLConnection#setDefaultUseCaches(boolean)\n     * @see     java.net.URLConnection#getDefaultUseCaches()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CacheRequest put(URI uri, URLConnection conn) throws IOException",
    "returnType" : "CacheRequest",
    "comment" : "\n     * The protocol handler calls this method after a resource has\n     * been retrieved, and the ResponseCache must decide whether or\n     * not to store the resource in its cache. If the resource is to\n     * be cached, then put() must return a CacheRequest object which\n     * contains an OutputStream that the protocol handler will\n     * use to write the resource into the cache. If the resource is\n     * not to be cached, then put must return null.\n     *\n     * @param uri a {@code URI} used to reference the requested\n     *            network resource\n     * @param conn - a URLConnection instance that is used to fetch\n     *            the response to be cached\n     * @return a {@code CacheRequest} for recording the\n     *            response to be cached. Null return indicates that\n     *            the caller does not intend to cache the response.\n     * @throws IOException if an I/O error occurs\n     * @throws IllegalArgumentException if any one of the arguments is\n     *            null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized ResponseCache getDefault()", "public static synchronized void setDefault(ResponseCache responseCache)", "public abstract CacheResponse get(URI uri, String rqstMethod, Map<String, List<String>> rqstHeaders) throws IOException", "public abstract CacheRequest put(URI uri, URLConnection conn) throws IOException" ],
  "variableNames" : [ "theResponseCache" ]
}