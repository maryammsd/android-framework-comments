{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/voice/AlwaysOnHotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "EventPayload",
  "comment" : "\n     * Additional payload for {@link Callback#onDetected}.\n     ",
  "variables" : [ {
    "name" : "mTriggerAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureAvailable",
    "type" : "boolean",
    "comment" : " from the DSP hardware.",
    "links" : [ ]
  }, {
    "name" : "mCaptureSession",
    "type" : "int",
    "comment" : " The session to use when attempting to capture more audio from the DSP hardware.",
    "links" : [ ]
  }, {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : " This is the audio that triggered the keyphrase if {@code isTriggerAudio} is true.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public AudioFormat getCaptureAudioFormat()",
    "returnType" : "AudioFormat",
    "comment" : "\n         * Gets the format of the audio obtained using {@link #getTriggerAudio()}.\n         * May be null if there's no audio present.\n         ",
    "links" : [ "#getTriggerAudio()" ]
  }, {
    "name" : "public byte[] getTriggerAudio()",
    "returnType" : "byte[]",
    "comment" : "\n         * Gets the raw audio that triggered the keyphrase.\n         * This may be null if the trigger audio isn't available.\n         * If non-null, the format of the audio can be obtained by calling\n         * {@link #getCaptureAudioFormat()}.\n         *\n         * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n         ",
    "links" : [ "#getCaptureAudioFormat()" ]
  }, {
    "name" : "public Integer getCaptureSession()",
    "returnType" : "Integer",
    "comment" : "\n         * Gets the session ID to start a capture from the DSP.\n         * This may be null if streaming capture isn't possible.\n         * If non-null, the format of the audio that can be captured can be\n         * obtained using {@link #getCaptureAudioFormat()}.\n         *\n         * TODO: Candidate for Public API when the API to start capture with a session ID\n         * is made public.\n         *\n         * TODO: Add this to {@link #getCaptureAudioFormat()}:\n         * \"Gets the format of the audio obtained using {@link #getTriggerAudio()}\n         * or {@link #getCaptureSession()}. May be null if no audio can be obtained\n         * for either the trigger or a streaming session.\"\n         *\n         * TODO: Should this return a known invalid value instead?\n         *\n         * @hide\n         ",
    "links" : [ "#getTriggerAudio()", "#getCaptureAudioFormat()", "#getCaptureSession()" ]
  } ],
  "variableNames" : [ "mTriggerAvailable", "mCaptureAvailable", "mCaptureSession", "mAudioFormat", "mData" ],
  "methodNames" : [ "public AudioFormat getCaptureAudioFormat()", "public byte[] getTriggerAudio()", "public Integer getCaptureSession()" ]
}