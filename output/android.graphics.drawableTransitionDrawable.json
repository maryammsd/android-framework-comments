{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/TransitionDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "TransitionDrawable",
  "comment" : "\n * An extension of LayerDrawables that is intended to cross-fade between\n * the first and second layer. To start the transition, call {@link #startTransition(int)}. To\n * display just the first layer, call {@link #resetTransition()}.\n * <p>\n * It can be defined in an XML file with the <code>&lt;transition></code> element.\n * Each Drawable in the transition is defined in a nested <code>&lt;item></code>. For more\n * information, see the guide to <a\n * href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.</p>\n *\n * @attr ref android.R.styleable#LayerDrawableItem_left\n * @attr ref android.R.styleable#LayerDrawableItem_top\n * @attr ref android.R.styleable#LayerDrawableItem_right\n * @attr ref android.R.styleable#LayerDrawableItem_bottom\n * @attr ref android.R.styleable#LayerDrawableItem_drawable\n * @attr ref android.R.styleable#LayerDrawableItem_id\n *\n ",
  "variables" : [ {
    "name" : "TRANSITION_STARTING",
    "type" : "int",
    "comment" : "\n     * A transition is about to start.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSITION_RUNNING",
    "type" : "int",
    "comment" : "\n     * The transition has started and the animation is in progress\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSITION_NONE",
    "type" : "int",
    "comment" : "\n     * No transition will be applied\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransitionState",
    "type" : "int",
    "comment" : "\n     * The current state of the transition. One of {@link #TRANSITION_STARTING},\n     * {@link #TRANSITION_RUNNING} and {@link #TRANSITION_NONE}\n     ",
    "links" : [ "#TRANSITION_STARTING", "#TRANSITION_RUNNING", "#TRANSITION_NONE" ]
  }, {
    "name" : "mReverse",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTo",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalDuration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCrossFade",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " LayerState createConstantState(LayerState state, Resources res)",
    "returnType" : "LayerState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startTransition(int durationMillis)",
    "returnType" : "void",
    "comment" : "\n     * Begin the second layer on top of the first layer.\n     *\n     * @param durationMillis The length of the transition in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showSecondLayer()",
    "returnType" : "void",
    "comment" : "\n     * Show the second layer on top of the first layer immediately\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetTransition()",
    "returnType" : "void",
    "comment" : "\n     * Show only the first layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reverseTransition(int duration)",
    "returnType" : "void",
    "comment" : "\n     * Reverses the transition, picking up where the transition currently is.\n     * If the transition is not currently running, this will start the transition\n     * with the specified duration. If the transition is already running, the last\n     * known duration will be used.\n     *\n     * @param duration The duration to use if no transition is running.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCrossFadeEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the cross fade of the drawables. When cross fade\n     * is disabled, the first drawable is always drawn opaque. With cross\n     * fade enabled, the first drawable is drawn with the opposite alpha of\n     * the second drawable. Cross fade is disabled by default.\n     *\n     * @param enabled True to enable cross fading, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCrossFadeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the cross fade is enabled for this transition.\n     *\n     * @return True if cross fading is enabled, false otherwise.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TRANSITION_STARTING", "TRANSITION_RUNNING", "TRANSITION_NONE", "mTransitionState", "mReverse", "mStartTimeMillis", "mFrom", "mTo", "mDuration", "mOriginalDuration", "mAlpha", "mCrossFade" ],
  "methodNames" : [ " LayerState createConstantState(LayerState state, Resources res)", "public void startTransition(int durationMillis)", "public void showSecondLayer()", "public void resetTransition()", "public void reverseTransition(int duration)", "public void draw(Canvas canvas)", "public void setCrossFadeEnabled(boolean enabled)", "public boolean isCrossFadeEnabled()" ]
}