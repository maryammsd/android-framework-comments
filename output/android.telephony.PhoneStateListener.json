{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/PhoneStateListener.java",
  "packageName" : "android.telephony",
  "className" : "PhoneStateListener",
  "comment" : "\n * A listener class for monitoring changes in specific telephony states\n * on the device, including service state, signal strength, message\n * waiting indicator (voicemail), and others.\n * <p>\n * Override the methods for the state that you wish to receive updates for, and\n * pass your PhoneStateListener object, along with bitwise-or of the LISTEN_\n * flags to {@link TelephonyManager#listen TelephonyManager.listen()}. Methods are\n * called when the state changes, as well as once on initial registration.\n * <p>\n * Note that access to some telephony information is\n * permission-protected. Your application won't receive updates for protected\n * information unless it has the appropriate permissions declared in\n * its manifest file. Where permissions apply, they are noted in the\n * appropriate LISTEN_ flags.\n *\n * @deprecated Use {@link TelephonyCallback} instead.\n ",
  "links" : [ "android.telephony.TelephonyManager#listen", "android.telephony.TelephonyCallback" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : " STOPSHIP if true",
    "links" : [ ]
  }, {
    "name" : "LISTEN_NONE",
    "type" : "int",
    "comment" : "\n     * Stop listening for updates.\n     *\n     * The PhoneStateListener is not tied to any subscription and unregistered for any update.\n     ",
    "links" : [ ]
  }, {
    "name" : "LISTEN_SERVICE_STATE",
    "type" : "int",
    "comment" : "\n     *  Listen for changes to the network service state (cellular).\n     *\n     *  @see #onServiceStateChanged\n     *  @see ServiceState\n     *  @deprecated Use {@link TelephonyCallback.ServiceStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.ServiceStateListener" ]
  }, {
    "name" : "LISTEN_SIGNAL_STRENGTH",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the network signal strength (cellular).\n     * {@more}\n     *\n     * @see #onSignalStrengthChanged\n     * @deprecated Use {@link TelephonyCallback.SignalStrengthsListener} instead.\n     ",
    "links" : [ "TelephonyCallback.SignalStrengthsListener" ]
  }, {
    "name" : "LISTEN_MESSAGE_WAITING_INDICATOR",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the message-waiting indicator.\n     * {@more}\n     * Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE\n     * READ_PHONE_STATE} or that the calling app has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}).\n     * <p>\n     * Example: The status bar uses this to determine when to display the\n     * voicemail icon.\n     *\n     * @see #onMessageWaitingIndicatorChanged\n     * @deprecated Use {@link TelephonyCallback.MessageWaitingIndicatorListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PHONE_STATEREAD_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.MessageWaitingIndicatorListener" ]
  }, {
    "name" : "LISTEN_CALL_FORWARDING_INDICATOR",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the call-forwarding indicator.\n     * {@more}\n     * Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE\n     * READ_PHONE_STATE} or that the calling app has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @see #onCallForwardingIndicatorChanged\n     * @deprecated Use {@link TelephonyCallback.CallForwardingIndicatorListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PHONE_STATEREAD_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.CallForwardingIndicatorListener" ]
  }, {
    "name" : "LISTEN_CELL_LOCATION",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the device's cell location. Note that\n     * this will result in frequent callbacks to the listener.\n     * {@more}\n     * Requires Permission: {@link android.Manifest.permission#ACCESS_FINE_LOCATION\n     * ACCESS_FINE_LOCATION}\n     * <p>\n     * If you need regular location updates but want more control over\n     * the update interval or location precision, you can set up a listener\n     * through the {@link android.location.LocationManager location manager}\n     * instead.\n     *\n     * @see #onCellLocationChanged\n     * @deprecated Use {@link TelephonyCallback.CellLocationListener} instead.\n     ",
    "links" : [ "TelephonyCallback.CellLocationListener", "android.Manifest.permission#ACCESS_FINE_LOCATIONACCESS_FINE_LOCATION", "android.location.LocationManager" ]
  }, {
    "name" : "LISTEN_CALL_STATE",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the device call state.\n     * {@more}\n     *\n     * @see #onCallStateChanged\n     * @deprecated Use {@link TelephonyCallback.CallStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.CallStateListener" ]
  }, {
    "name" : "LISTEN_DATA_CONNECTION_STATE",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the data connection state (cellular).\n     *\n     * @see #onDataConnectionStateChanged\n     * @deprecated Use {@link TelephonyCallback.DataConnectionStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.DataConnectionStateListener" ]
  }, {
    "name" : "LISTEN_DATA_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the direction of data traffic on the data\n     * connection (cellular).\n     * {@more}\n     * Example: The status bar uses this to display the appropriate\n     * data-traffic icon.\n     *\n     * @see #onDataActivity\n     * @deprecated Use {@link TelephonyCallback.DataActivityListener} instead.\n     ",
    "links" : [ "TelephonyCallback.DataActivityListener" ]
  }, {
    "name" : "LISTEN_SIGNAL_STRENGTHS",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the network signal strengths (cellular).\n     * <p>\n     * Example: The status bar uses this to control the signal-strength\n     * icon.\n     *\n     * @see #onSignalStrengthsChanged\n     * @deprecated Use {@link TelephonyCallback.SignalStrengthsListener} instead.\n     ",
    "links" : [ "TelephonyCallback.SignalStrengthsListener" ]
  }, {
    "name" : "LISTEN_CELL_INFO",
    "type" : "int",
    "comment" : "\n     * Listen for changes to observed cell info.\n     *\n     * Listening to this event requires the {@link Manifest.permission#READ_PHONE_STATE} and\n     * {@link Manifest.permission#ACCESS_FINE_LOCATION}\n     * permission.\n     *\n     * @see #onCellInfoChanged\n     * @deprecated Use {@link TelephonyCallback.CellInfoListener} instead.\n     ",
    "links" : [ "Manifest.permission#READ_PHONE_STATE", "Manifest.permission#ACCESS_FINE_LOCATION", "TelephonyCallback.CellInfoListener" ]
  }, {
    "name" : "LISTEN_PRECISE_CALL_STATE",
    "type" : "int",
    "comment" : "\n     * Listen for {@link android.telephony.Annotation.PreciseCallStates} of ringing,\n     * background and foreground calls.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.PreciseCallStateListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "TelephonyCallback.PreciseCallStateListener", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.Annotation.PreciseCallStates" ]
  }, {
    "name" : "LISTEN_PRECISE_DATA_CONNECTION_STATE",
    "type" : "int",
    "comment" : "\n     * Listen for {@link PreciseDataConnectionState} on the data connection (cellular).\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @see #onPreciseDataConnectionStateChanged\n     * @deprecated Use {@link TelephonyCallback.PreciseDataConnectionStateListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.PreciseDataConnectionState", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.PreciseDataConnectionStateListener" ]
  }, {
    "name" : "LISTEN_DATA_CONNECTION_REAL_TIME_INFO",
    "type" : "int",
    "comment" : "\n     * Listen for real time info for all data connections (cellular)).\n     * {@more}\n     * Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE}\n     * @see #onDataConnectionRealTimeInfoChanged(DataConnectionRealTimeInfo)\n     *\n     * @deprecated Use {@link TelephonyManager#requestModemActivityInfo} instead.\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#requestModemActivityInfo", "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE" ]
  }, {
    "name" : "LISTEN_SRVCC_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the SRVCC state of the active call.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE}\n     *\n     * @see #onSrvccStateChanged\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.SrvccStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.SrvccStateListener", "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE" ]
  }, {
    "name" : "LISTEN_OEM_HOOK_RAW_EVENT",
    "type" : "int",
    "comment" : "\n     * Listen for OEM hook raw event\n     *\n     * @see #onOemHookRawEvent\n     * @hide\n     * @deprecated OEM needs a vendor-extension hal and their apps should use that instead\n     ",
    "links" : [ ]
  }, {
    "name" : "LISTEN_CARRIER_NETWORK_CHANGE",
    "type" : "int",
    "comment" : "\n     * Listen for carrier network changes indicated by a carrier app.\n     *\n     * @see android.service.carrier.CarrierService#notifyCarrierNetworkChange(boolean)\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.CarrierNetworkListener} instead.\n     ",
    "links" : [ "TelephonyCallback.CarrierNetworkListener" ]
  }, {
    "name" : "LISTEN_VOICE_ACTIVATION_STATE",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the sim voice activation state\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE}\n     *\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATING\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_DEACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_RESTRICTED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_UNKNOWN\n     * {@more}\n     * Example: TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED indicates voice service has been\n     * fully activated\n     *\n     * @see #onVoiceActivationStateChanged\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.VoiceActivationStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.VoiceActivationStateListener", "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE" ]
  }, {
    "name" : "LISTEN_DATA_ACTIVATION_STATE",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the sim data activation state\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATING\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_DEACTIVATED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_RESTRICTED\n     * @see TelephonyManager#SIM_ACTIVATION_STATE_UNKNOWN\n     *\n     * Example: TelephonyManager#SIM_ACTIVATION_STATE_ACTIVATED indicates data service has been\n     * fully activated\n     *\n     * @see #onDataActivationStateChanged\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.DataActivationStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.DataActivationStateListener" ]
  }, {
    "name" : "LISTEN_USER_MOBILE_DATA_STATE",
    "type" : "int",
    "comment" : "\n     *  Listen for changes to the user mobile data state\n     *\n     *  @see #onUserMobileDataStateChanged\n     *  @deprecated Use {@link TelephonyCallback.UserMobileDataStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.UserMobileDataStateListener" ]
  }, {
    "name" : "LISTEN_DISPLAY_INFO_CHANGED",
    "type" : "int",
    "comment" : "\n     *  Listen for display info changed event.\n     *\n     * For clients compiled on Android 11 SDK, requires permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE} or that the calling app has carrier\n     * privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     * For clients compiled on Android 12 SDK or newer,\n     * {@link android.Manifest.permission#READ_PHONE_STATE} or carrier privileges is not required\n     * anymore.\n     *\n     * @see #onDisplayInfoChanged\n     * @deprecated Use {@link TelephonyCallback.DisplayInfoListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.DisplayInfoListener", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "LISTEN_PHONE_CAPABILITY_CHANGE",
    "type" : "int",
    "comment" : "\n     *  Listen for changes to the phone capability.\n     *\n     *  @see #onPhoneCapabilityChanged\n     *  @hide\n     *  @deprecated Use {@link TelephonyCallback.PhoneCapabilityListener} instead.\n     ",
    "links" : [ "TelephonyCallback.PhoneCapabilityListener" ]
  }, {
    "name" : "LISTEN_ACTIVE_DATA_SUBSCRIPTION_ID_CHANGE",
    "type" : "int",
    "comment" : "\n     *  Listen for changes to active data subId. Active data subscription is\n     *  the current subscription used to setup Cellular Internet data. For example,\n     *  it could be the current active opportunistic subscription in use, or the\n     *  subscription user selected as default data subscription in DSDS mode.\n     *\n     *  @see #onActiveDataSubscriptionIdChanged\n     *  @deprecated Use {@link TelephonyCallback.ActiveDataSubscriptionIdListener} instead.\n     ",
    "links" : [ "TelephonyCallback.ActiveDataSubscriptionIdListener" ]
  }, {
    "name" : "LISTEN_RADIO_POWER_STATE_CHANGED",
    "type" : "int",
    "comment" : "\n     *  Listen for changes to the radio power state.\n     *\n     *  @see #onRadioPowerStateChanged\n     *  @hide\n     *  @deprecated Use {@link TelephonyCallback.RadioPowerStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.RadioPowerStateListener" ]
  }, {
    "name" : "LISTEN_EMERGENCY_NUMBER_LIST",
    "type" : "int",
    "comment" : "\n     * Listen for changes to emergency number list based on all active subscriptions.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PHONE_STATE} or the calling\n     * app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @deprecated Use {@link TelephonyCallback.EmergencyNumberListListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.EmergencyNumberListListener", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "LISTEN_CALL_DISCONNECT_CAUSES",
    "type" : "int",
    "comment" : "\n     * Listen for call disconnect causes which contains {@link DisconnectCause} and\n     * the precise disconnect cause.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @deprecated Use {@link TelephonyCallback.CallDisconnectCauseListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.DisconnectCause", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.CallDisconnectCauseListener" ]
  }, {
    "name" : "LISTEN_CALL_ATTRIBUTES_CHANGED",
    "type" : "int",
    "comment" : "\n     * Listen for changes to the call attributes of a currently active call.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @see #onCallAttributesChanged\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.CallAttributesListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "TelephonyCallback.CallAttributesListener", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "LISTEN_IMS_CALL_DISCONNECT_CAUSES",
    "type" : "int",
    "comment" : "\n     * Listen for IMS call disconnect causes which contains\n     * {@link android.telephony.ims.ImsReasonInfo}\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @see #onImsCallDisconnectCauseChanged(ImsReasonInfo)\n     * @deprecated Use {@link TelephonyCallback.ImsCallDisconnectCauseListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.ImsReasonInfo", "TelephonyCallback.ImsCallDisconnectCauseListener" ]
  }, {
    "name" : "LISTEN_OUTGOING_EMERGENCY_CALL",
    "type" : "int",
    "comment" : "\n     * Listen for the emergency number placed from an outgoing call.\n     *\n     * @see #onOutgoingEmergencyCall\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.OutgoingEmergencyCallListener} instead.\n     ",
    "links" : [ "TelephonyCallback.OutgoingEmergencyCallListener" ]
  }, {
    "name" : "LISTEN_OUTGOING_EMERGENCY_SMS",
    "type" : "int",
    "comment" : "\n     * Listen for the emergency number placed from an outgoing SMS.\n     *\n     * @see #onOutgoingEmergencySms\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.OutgoingEmergencySmsListener} instead.\n     ",
    "links" : [ "TelephonyCallback.OutgoingEmergencySmsListener" ]
  }, {
    "name" : "LISTEN_REGISTRATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Listen for Registration Failures.\n     *\n     * Listen for indications that a registration procedure has failed in either the CS or PS\n     * domain. This indication does not necessarily indicate a change of service state, which should\n     * be tracked via {@link #LISTEN_SERVICE_STATE}.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE} or\n     * the calling app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * <p>Also requires the {@link Manifest.permission#ACCESS_FINE_LOCATION} permission, regardless\n     * of whether the calling app has carrier privileges.\n     *\n     * @see #onRegistrationFailed\n     * @deprecated Use {@link TelephonyCallback.RegistrationFailedListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#ACCESS_FINE_LOCATION", "TelephonyCallback.RegistrationFailedListener", "#LISTEN_SERVICE_STATE" ]
  }, {
    "name" : "LISTEN_BARRING_INFO",
    "type" : "int",
    "comment" : "\n     * Listen for Barring Information for the current registered / camped cell.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE} or\n     * the calling app has carrier privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * <p>Also requires the {@link Manifest.permission#ACCESS_FINE_LOCATION} permission, regardless\n     * of whether the calling app has carrier privileges.\n     *\n     * @see #onBarringInfoChanged\n     * @deprecated Use {@link TelephonyCallback.BarringInfoListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "Manifest.permission#ACCESS_FINE_LOCATION", "TelephonyCallback.BarringInfoListener" ]
  }, {
    "name" : "mSubId",
    "type" : "Integer",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "callback",
    "type" : "IPhoneStateListener",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onServiceStateChanged(ServiceState serviceState)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when device service state changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * The instance of {@link ServiceState} passed as an argument here will have various levels of\n     * location information stripped from it depending on the location permissions that your app\n     * holds. Only apps holding the {@link Manifest.permission#ACCESS_FINE_LOCATION} permission will\n     * receive all the information in {@link ServiceState}, otherwise the cellIdentity will be null\n     * if apps only holding the {@link Manifest.permission#ACCESS_COARSE_LOCATION} permission.\n     * Network operator name in long/short alphanumeric format and numeric id will be null if apps\n     * holding neither {@link android.Manifest.permission#ACCESS_FINE_LOCATION} nor\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION}.\n     *\n     * @see ServiceState#STATE_EMERGENCY_ONLY\n     * @see ServiceState#STATE_IN_SERVICE\n     * @see ServiceState#STATE_OUT_OF_SERVICE\n     * @see ServiceState#STATE_POWER_OFF\n     * @deprecated Use {@link TelephonyCallback.ServiceStateListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.ServiceState", "android.Manifest.permission#ACCESS_FINE_LOCATION", "Manifest.permission#ACCESS_COARSE_LOCATION", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "Manifest.permission#ACCESS_FINE_LOCATION", "TelephonyCallback.ServiceStateListener" ]
  }, {
    "name" : "public void onSignalStrengthChanged(int asu)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when network signal strength changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @see ServiceState#STATE_EMERGENCY_ONLY\n     * @see ServiceState#STATE_IN_SERVICE\n     * @see ServiceState#STATE_OUT_OF_SERVICE\n     * @see ServiceState#STATE_POWER_OFF\n     * @deprecated Use {@link #onSignalStrengthsChanged(SignalStrength)}\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "#onSignalStrengthsChanged(SignalStrength)" ]
  }, {
    "name" : "public void onMessageWaitingIndicatorChanged(boolean mwi)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the message-waiting indicator changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @deprecated Use {@link TelephonyCallback.MessageWaitingIndicatorListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.MessageWaitingIndicatorListener" ]
  }, {
    "name" : "public void onCallForwardingIndicatorChanged(boolean cfi)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the call-forwarding indicator changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @deprecated Use {@link TelephonyCallback.CallForwardingIndicatorListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.CallForwardingIndicatorListener" ]
  }, {
    "name" : "public void onCellLocationChanged(CellLocation location)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when device cell location changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @deprecated Use {@link TelephonyCallback.CellLocationListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.CellLocationListener" ]
  }, {
    "name" : "public void onCallStateChanged(@Annotation.CallState int state, String phoneNumber)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when device call state changes.\n     * <p>\n     * Reports the state of Telephony (mobile) calls on the device for the registered subscription.\n     * <p>\n     * Note: the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     * <p>\n     * Note: The state returned here may differ from that returned by\n     * {@link TelephonyManager#getCallState()}. Receivers of this callback should be aware that\n     * calling {@link TelephonyManager#getCallState()} from within this callback may return a\n     * different state than the callback reports.\n     *\n     * Requires Permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE} for applications\n     * targeting API level 31+.\n     *\n     * @param state call state\n     * @param phoneNumber call phone number. If application does not have\n     * {@link android.Manifest.permission#READ_CALL_LOG READ_CALL_LOG} permission or carrier\n     * privileges (see {@link TelephonyManager#hasCarrierPrivileges}), an empty string will be\n     * passed as an argument.\n     *\n     * @deprecated Use {@link TelephonyCallback.CallStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager#getCallState()", "TelephonyCallback.CallStateListener", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.Manifest.permission#READ_PHONE_STATE", "android.Manifest.permission#READ_CALL_LOG" ]
  }, {
    "name" : "public void onDataConnectionStateChanged(int state)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when connection state changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @see TelephonyManager#DATA_DISCONNECTED\n     * @see TelephonyManager#DATA_CONNECTING\n     * @see TelephonyManager#DATA_CONNECTED\n     * @see TelephonyManager#DATA_SUSPENDED\n     * @see TelephonyManager#DATA_HANDOVER_IN_PROGRESS\n     * @deprecated Use {@link TelephonyCallback.DataConnectionStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "TelephonyCallback.DataConnectionStateListener", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onDataConnectionStateChanged(int state, int networkType)",
    "returnType" : "void",
    "comment" : "\n     * same as above, but with the network type.  Both called.\n     *\n     * @deprecated Use {@link TelephonyCallback.DataConnectionStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.DataConnectionStateListener" ]
  }, {
    "name" : "public void onDataActivity(int direction)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when data activity state changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @see TelephonyManager#DATA_ACTIVITY_NONE\n     * @see TelephonyManager#DATA_ACTIVITY_IN\n     * @see TelephonyManager#DATA_ACTIVITY_OUT\n     * @see TelephonyManager#DATA_ACTIVITY_INOUT\n     * @see TelephonyManager#DATA_ACTIVITY_DORMANT\n     * @deprecated Use {@link TelephonyCallback.DataActivityListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.DataActivityListener" ]
  }, {
    "name" : "public void onSignalStrengthsChanged(SignalStrength signalStrength)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when network signal strengths changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @deprecated Use {@link TelephonyCallback.SignalStrengthsListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.SignalStrengthsListener" ]
  }, {
    "name" : "public void onCellInfoChanged(List<CellInfo> cellInfo)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a observed cell info has changed or new cells have been added\n     * or removed on the registered subscription.\n     * Note, the registration subId s from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param cellInfo is the list of currently visible cells.\n     * @deprecated Use {@link TelephonyCallback.CellInfoListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.CellInfoListener" ]
  }, {
    "name" : "public void onPreciseCallStateChanged(@NonNull PreciseCallState callState)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when precise device call state changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param callState {@link PreciseCallState}\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.PreciseCallStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "TelephonyCallback.PreciseCallStateListener", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "android.telephony.PreciseCallState" ]
  }, {
    "name" : "public void onCallDisconnectCauseChanged(@DisconnectCauses int disconnectCause, @PreciseDisconnectCauses int preciseDisconnectCause)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when call disconnect cause changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param disconnectCause the disconnect cause\n     * @param preciseDisconnectCause the precise disconnect cause\n     * @deprecated Use {@link TelephonyCallback.CallDisconnectCauseListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.CallDisconnectCauseListener" ]
  }, {
    "name" : "public void onImsCallDisconnectCauseChanged(@NonNull ImsReasonInfo imsReasonInfo)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when Ims call disconnect cause changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param imsReasonInfo {@link ImsReasonInfo} contains details on why IMS call failed.\n     * @deprecated Use {@link TelephonyCallback.ImsCallDisconnectCauseListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "android.telephony.ims.ImsReasonInfo", "TelephonyCallback.ImsCallDisconnectCauseListener" ]
  }, {
    "name" : "public void onPreciseDataConnectionStateChanged(@NonNull PreciseDataConnectionState dataConnectionState)",
    "returnType" : "void",
    "comment" : "\n     * Callback providing update about the default/internet data connection on the registered\n     * subscription.\n     *\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * <p>Requires permission {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE}\n     * or the calling app has carrier privileges\n     * (see {@link TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param dataConnectionState {@link PreciseDataConnectionState}\n     * @deprecated Use {@link TelephonyCallback.PreciseDataConnectionStateListener} instead.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.PreciseDataConnectionState", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.PreciseDataConnectionStateListener" ]
  }, {
    "name" : "public void onDataConnectionRealTimeInfoChanged(DataConnectionRealTimeInfo dcRtInfo)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when data connection real time info changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @hide\n     * @deprecated Use {@link TelephonyManager#requestModemActivityInfo}\n     ",
    "links" : [ "android.telephony.TelephonyManager#requestModemActivityInfo", "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onSrvccStateChanged(@SrvccState int srvccState)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when there has been a change in the Single Radio Voice Call Continuity\n     * (SRVCC) state for the currently active call on the registered subscription.\n     *\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.SrvccStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "TelephonyCallback.SrvccStateListener", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onVoiceActivationStateChanged(@SimActivationState int state)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the SIM voice activation state has changed on the registered\n     * subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param state is the current SIM voice activation state\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.VoiceActivationStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "TelephonyCallback.VoiceActivationStateListener", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onDataActivationStateChanged(@SimActivationState int state)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the SIM data activation state has changed on the registered\n     * subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param state is the current SIM data activation state\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.DataActivationStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.DataActivationStateListener" ]
  }, {
    "name" : "public void onUserMobileDataStateChanged(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the user mobile data state has changed on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param enabled indicates whether the current user mobile data state is enabled or disabled.\n     * @deprecated Use {@link TelephonyCallback.UserMobileDataStateListener} instead.\n     ",
    "links" : [ "TelephonyCallback.UserMobileDataStateListener", "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onDisplayInfoChanged(@NonNull TelephonyDisplayInfo telephonyDisplayInfo)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the display info has changed on the registered subscription.\n     * <p> The {@link TelephonyDisplayInfo} contains status information shown to the user based on\n     * carrier policy.\n     *\n     * For clients compiled on Android 11 SDK, requires permission:\n     * {@link android.Manifest.permission#READ_PHONE_STATE} or that the calling app has carrier\n     * privileges (see {@link TelephonyManager#hasCarrierPrivileges}).\n     * For clients compiled on Android 12 SDK or newer,\n     * {@link android.Manifest.permission#READ_PHONE_STATE} or carrier privileges is not required\n     * anymore.\n     *\n     * @param telephonyDisplayInfo The display information.\n     * @deprecated Use {@link TelephonyCallback.DisplayInfoListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyDisplayInfo", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.DisplayInfoListener", "android.Manifest.permission#READ_PHONE_STATE" ]
  }, {
    "name" : "public void onEmergencyNumberListChanged(@NonNull Map<Integer, List<EmergencyNumber>> emergencyNumberList)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the current emergency number list has changed on the registered\n     * subscription.\n     *\n     * Note, the registered subscription is associated with {@link TelephonyManager} object\n     * on which {@link TelephonyManager#listen(PhoneStateListener, int)} was called.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * given subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * @param emergencyNumberList Map associating all active subscriptions on the device with the\n     *                            list of emergency numbers originating from that subscription.\n     *                            If there are no active subscriptions, the map will contain a\n     *                            single entry with\n     *                            {@link SubscriptionManager#INVALID_SUBSCRIPTION_ID} as\n     *                            the key and a list of emergency numbers as the value. If no\n     *                            emergency number information is available, the value will be null.\n     * @deprecated Use {@link TelephonyCallback.EmergencyNumberListListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID", "android.telephony.TelephonyManager#listen(PhoneStateListener", "TelephonyCallback.EmergencyNumberListListener" ]
  }, {
    "name" : "public void onOutgoingEmergencyCall(@NonNull EmergencyNumber placedEmergencyNumber)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when an outgoing call is placed to an emergency number.\n     *\n     * This method will be called when an emergency call is placed on any subscription (including\n     * the no-SIM case), regardless of which subscription this listener was registered on.\n     *\n     * @param placedEmergencyNumber The {@link EmergencyNumber} the emergency call was placed to.\n     * @deprecated Use {@link #onOutgoingEmergencyCall(EmergencyNumber, int)}.\n     * @hide\n     ",
    "links" : [ "#onOutgoingEmergencyCall(EmergencyNumber", "android.telephony.emergency.EmergencyNumber" ]
  }, {
    "name" : "public void onOutgoingEmergencyCall(@NonNull EmergencyNumber placedEmergencyNumber, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when an outgoing call is placed to an emergency number.\n     *\n     * This method will be called when an emergency call is placed on any subscription (including\n     * the no-SIM case), regardless of which subscription this listener was registered on.\n     *\n     * The default implementation of this method calls\n     * {@link #onOutgoingEmergencyCall(EmergencyNumber)} for backwards compatibility purposes. Do\n     * not call {@code super(...)} from within your implementation unless you want\n     * {@link #onOutgoingEmergencyCall(EmergencyNumber)} to be called as well.\n     *\n     * @param placedEmergencyNumber The {@link EmergencyNumber} the emergency call was placed to.\n     * @param subscriptionId The subscription ID used to place the emergency call. If the\n     *                       emergency call was placed without a valid subscription (e.g. when there\n     *                       are no SIM cards in the device), this will be equal to\n     *                       {@link SubscriptionManager#INVALID_SUBSCRIPTION_ID}.\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.OutgoingEmergencyCallListener} instead.\n     ",
    "links" : [ "#onOutgoingEmergencyCall(EmergencyNumber)", "TelephonyCallback.OutgoingEmergencyCallListener", "android.telephony.SubscriptionManager#INVALID_SUBSCRIPTION_ID", "android.telephony.emergency.EmergencyNumber" ]
  }, {
    "name" : "public void onOutgoingEmergencySms(@NonNull EmergencyNumber sentEmergencyNumber)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when an outgoing SMS is placed to an emergency number.\n     *\n     * This method will be called when an emergency sms is sent on any subscription.\n     * @param sentEmergencyNumber the emergency number {@link EmergencyNumber} the SMS is sent to.\n     *\n     * @deprecated Use {@link #onOutgoingEmergencySms(EmergencyNumber, int)}.\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.OutgoingEmergencySmsListener} instead.\n     ",
    "links" : [ "TelephonyCallback.OutgoingEmergencySmsListener", "android.telephony.emergency.EmergencyNumber", "#onOutgoingEmergencySms(EmergencyNumber" ]
  }, {
    "name" : "public void onOutgoingEmergencySms(@NonNull EmergencyNumber sentEmergencyNumber, int subscriptionId)",
    "returnType" : "void",
    "comment" : "\n     * Smsback invoked when an outgoing sms is sent to an emergency number.\n     *\n     * This method will be called when an emergency sms is sent on any subscription,\n     * regardless of which subscription this listener was registered on.\n     *\n     * The default implementation of this method calls\n     * {@link #onOutgoingEmergencySms(EmergencyNumber)} for backwards compatibility purposes. Do\n     * not call {@code super(...)} from within your implementation unless you want\n     * {@link #onOutgoingEmergencySms(EmergencyNumber)} to be called as well.\n     *\n     * @param sentEmergencyNumber The {@link EmergencyNumber} the emergency sms was sent to.\n     * @param subscriptionId The subscription ID used to send the emergency sms.\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.OutgoingEmergencySmsListener} instead.\n     ",
    "links" : [ "TelephonyCallback.OutgoingEmergencySmsListener", "#onOutgoingEmergencySms(EmergencyNumber)", "android.telephony.emergency.EmergencyNumber" ]
  }, {
    "name" : "public void onOemHookRawEvent(byte[] rawData)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when OEM hook raw event is received on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * Requires the READ_PRIVILEGED_PHONE_STATE permission.\n     * @param rawData is the byte array of the OEM hook raw data.\n     * @hide\n     * @deprecated OEM needs a vendor-extension hal and their apps should use that instead\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onPhoneCapabilityChanged(@NonNull PhoneCapability capability)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when phone capability changes.\n     * Note, this callback triggers regardless of registered subscription.\n     *\n     * @param capability the new phone capability\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.PhoneCapabilityListener} instead.\n     ",
    "links" : [ "TelephonyCallback.PhoneCapabilityListener" ]
  }, {
    "name" : "public void onActiveDataSubscriptionIdChanged(int subId)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when active data subId changes.\n     * Note, this callback triggers regardless of registered subscription.\n     *\n     * Requires the READ_PHONE_STATE permission.\n     * @param subId current subscription used to setup Cellular Internet data.\n     *              For example, it could be the current active opportunistic subscription in use,\n     *              or the subscription user selected as default data subscription in DSDS mode.\n     * @deprecated Use {@link TelephonyCallback.ActiveDataSubscriptionIdListener} instead.\n     ",
    "links" : [ "TelephonyCallback.ActiveDataSubscriptionIdListener" ]
  }, {
    "name" : "public void onCallAttributesChanged(@NonNull CallAttributes callAttributes)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the call attributes changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * Requires the READ_PRECISE_PHONE_STATE permission.\n     * @param callAttributes the call attributes\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.CallAttributesListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "TelephonyCallback.CallAttributesListener", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener" ]
  }, {
    "name" : "public void onRadioPowerStateChanged(@RadioPowerState int state)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when modem radio power state changes on the registered subscription.\n     * Note, the registration subId comes from {@link TelephonyManager} object which registers\n     * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.\n     * If this TelephonyManager object was created with\n     * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the\n     * subId. Otherwise, this callback applies to\n     * {@link SubscriptionManager#getDefaultSubscriptionId()}.\n     *\n     * Requires permission {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE}\n     *\n     * @param state the modem radio power state\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.RadioPowerStateListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#createForSubscriptionId(int)", "android.telephony.SubscriptionManager#getDefaultSubscriptionId()", "android.telephony.TelephonyManager", "android.telephony.TelephonyManager#listen(PhoneStateListener", "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE", "TelephonyCallback.RadioPowerStateListener" ]
  }, {
    "name" : "public void onCarrierNetworkChange(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when telephony has received notice from a carrier\n     * app that a network action that could result in connectivity loss\n     * has been requested by an app using\n     * {@link android.telephony.TelephonyManager#notifyCarrierNetworkChange(boolean)}\n     *\n     * Note, this callback is pinned to the registered subscription and will be invoked when\n     * the notifying carrier app has carrier privilege rule on the registered\n     * subscription. {@link android.telephony.TelephonyManager#hasCarrierPrivileges}\n     *\n     * @param active Whether the carrier network change is or shortly\n     *               will be active. This value is true to indicate\n     *               showing alternative UI and false to stop.\n     * @hide\n     * @deprecated Use {@link TelephonyCallback.CarrierNetworkListener} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#notifyCarrierNetworkChange(boolean)", "android.telephony.TelephonyManager#hasCarrierPrivileges", "TelephonyCallback.CarrierNetworkListener" ]
  }, {
    "name" : "public void onRegistrationFailed(@NonNull CellIdentity cellIdentity, @NonNull String chosenPlmn, int domain, int causeCode, int additionalCauseCode)",
    "returnType" : "void",
    "comment" : "\n     * Report that Registration or a Location/Routing/Tracking Area update has failed.\n     *\n     * <p>Indicate whenever a registration procedure, including a location, routing, or tracking\n     * area update fails. This includes procedures that do not necessarily result in a change of\n     * the modem's registration status. If the modem's registration status changes, that is\n     * reflected in the onNetworkStateChanged() and subsequent get{Voice/Data}RegistrationState().\n     *\n     * <p>Because registration failures are ephemeral, this callback is not sticky.\n     * Registrants will not receive the most recent past value when registering.\n     *\n     * @param cellIdentity the CellIdentity, which must include the globally unique identifier\n     *        for the cell (for example, all components of the CGI or ECGI).\n     * @param chosenPlmn a 5 or 6 digit alphanumeric PLMN (MCC|MNC) among those broadcast by the\n     *         cell that was chosen for the failed registration attempt.\n     * @param domain DOMAIN_CS, DOMAIN_PS or both in case of a combined procedure.\n     * @param causeCode the primary failure cause code of the procedure.\n     *        For GSM/UMTS (MM), values are in TS 24.008 Sec 10.5.95\n     *        For GSM/UMTS (GMM), values are in TS 24.008 Sec 10.5.147\n     *        For LTE (EMM), cause codes are TS 24.301 Sec 9.9.3.9\n     *        For NR (5GMM), cause codes are TS 24.501 Sec 9.11.3.2\n     *        Integer.MAX_VALUE if this value is unused.\n     * @param additionalCauseCode the cause code of any secondary/combined procedure if appropriate.\n     *        For UMTS, if a combined attach succeeds for PS only, then the GMM cause code shall be\n     *        included as an additionalCauseCode. For LTE (ESM), cause codes are in\n     *        TS 24.301 9.9.4.4. Integer.MAX_VALUE if this value is unused.\n     * @deprecated Use {@link TelephonyCallback.RegistrationFailedListener} instead.\n     ",
    "links" : [ "TelephonyCallback.RegistrationFailedListener" ]
  }, {
    "name" : "public void onBarringInfoChanged(@NonNull BarringInfo barringInfo)",
    "returnType" : "void",
    "comment" : "\n     * Report updated barring information for the current camped/registered cell.\n     *\n     * <p>Barring info is provided for all services applicable to the current camped/registered\n     * cell, for the registered PLMN and current access class/access category.\n     *\n     * @param barringInfo for all services on the current cell.\n     * @see android.telephony.BarringInfo\n     * @deprecated Use {@link TelephonyCallback.BarringInfoListener} instead.\n     ",
    "links" : [ "TelephonyCallback.BarringInfoListener" ]
  }, {
    "name" : "private void log(String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onServiceStateChanged(ServiceState serviceState)", "public void onSignalStrengthChanged(int asu)", "public void onMessageWaitingIndicatorChanged(boolean mwi)", "public void onCallForwardingIndicatorChanged(boolean cfi)", "public void onCellLocationChanged(CellLocation location)", "public void onCallStateChanged(@Annotation.CallState int state, String phoneNumber)", "public void onDataConnectionStateChanged(int state)", "public void onDataConnectionStateChanged(int state, int networkType)", "public void onDataActivity(int direction)", "public void onSignalStrengthsChanged(SignalStrength signalStrength)", "public void onCellInfoChanged(List<CellInfo> cellInfo)", "public void onPreciseCallStateChanged(@NonNull PreciseCallState callState)", "public void onCallDisconnectCauseChanged(@DisconnectCauses int disconnectCause, @PreciseDisconnectCauses int preciseDisconnectCause)", "public void onImsCallDisconnectCauseChanged(@NonNull ImsReasonInfo imsReasonInfo)", "public void onPreciseDataConnectionStateChanged(@NonNull PreciseDataConnectionState dataConnectionState)", "public void onDataConnectionRealTimeInfoChanged(DataConnectionRealTimeInfo dcRtInfo)", "public void onSrvccStateChanged(@SrvccState int srvccState)", "public void onVoiceActivationStateChanged(@SimActivationState int state)", "public void onDataActivationStateChanged(@SimActivationState int state)", "public void onUserMobileDataStateChanged(boolean enabled)", "public void onDisplayInfoChanged(@NonNull TelephonyDisplayInfo telephonyDisplayInfo)", "public void onEmergencyNumberListChanged(@NonNull Map<Integer, List<EmergencyNumber>> emergencyNumberList)", "public void onOutgoingEmergencyCall(@NonNull EmergencyNumber placedEmergencyNumber)", "public void onOutgoingEmergencyCall(@NonNull EmergencyNumber placedEmergencyNumber, int subscriptionId)", "public void onOutgoingEmergencySms(@NonNull EmergencyNumber sentEmergencyNumber)", "public void onOutgoingEmergencySms(@NonNull EmergencyNumber sentEmergencyNumber, int subscriptionId)", "public void onOemHookRawEvent(byte[] rawData)", "public void onPhoneCapabilityChanged(@NonNull PhoneCapability capability)", "public void onActiveDataSubscriptionIdChanged(int subId)", "public void onCallAttributesChanged(@NonNull CallAttributes callAttributes)", "public void onRadioPowerStateChanged(@RadioPowerState int state)", "public void onCarrierNetworkChange(boolean active)", "public void onRegistrationFailed(@NonNull CellIdentity cellIdentity, @NonNull String chosenPlmn, int domain, int causeCode, int additionalCauseCode)", "public void onBarringInfoChanged(@NonNull BarringInfo barringInfo)", "private void log(String s)" ],
  "variableNames" : [ "LOG_TAG", "DBG", "LISTEN_NONE", "LISTEN_SERVICE_STATE", "LISTEN_SIGNAL_STRENGTH", "LISTEN_MESSAGE_WAITING_INDICATOR", "LISTEN_CALL_FORWARDING_INDICATOR", "LISTEN_CELL_LOCATION", "LISTEN_CALL_STATE", "LISTEN_DATA_CONNECTION_STATE", "LISTEN_DATA_ACTIVITY", "LISTEN_SIGNAL_STRENGTHS", "LISTEN_CELL_INFO", "LISTEN_PRECISE_CALL_STATE", "LISTEN_PRECISE_DATA_CONNECTION_STATE", "LISTEN_DATA_CONNECTION_REAL_TIME_INFO", "LISTEN_SRVCC_STATE_CHANGED", "LISTEN_OEM_HOOK_RAW_EVENT", "LISTEN_CARRIER_NETWORK_CHANGE", "LISTEN_VOICE_ACTIVATION_STATE", "LISTEN_DATA_ACTIVATION_STATE", "LISTEN_USER_MOBILE_DATA_STATE", "LISTEN_DISPLAY_INFO_CHANGED", "LISTEN_PHONE_CAPABILITY_CHANGE", "LISTEN_ACTIVE_DATA_SUBSCRIPTION_ID_CHANGE", "LISTEN_RADIO_POWER_STATE_CHANGED", "LISTEN_EMERGENCY_NUMBER_LIST", "LISTEN_CALL_DISCONNECT_CAUSES", "LISTEN_CALL_ATTRIBUTES_CHANGED", "LISTEN_IMS_CALL_DISCONNECT_CAUSES", "LISTEN_OUTGOING_EMERGENCY_CALL", "LISTEN_OUTGOING_EMERGENCY_SMS", "LISTEN_REGISTRATION_FAILURE", "LISTEN_BARRING_INFO", "mSubId", "callback" ]
}