{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ResettersForTesting.java",
  "packageName" : "org.chromium.base",
  "className" : "ResettersForTesting",
  "comment" : "\n * ResettersForTesting provides functionality for reset values set for testing. This class is used\n * directly by test runners, but lives in prod code to simplify usage.\n *\n * It is required to invoke {@link #register(Runnable)} whenever a method called `set*ForTesting`,\n * such `setFooForTesting(Foo foo)` is invoked. Typical usage looks like this:\n *\n * <code>\n * class MyClass {\n *     private static MyClass sInstance;\n *\n *     public static MyClass getInstance() {\n *         if (sInstance == null) sInstance = new MyClass();\n *         return sInstance;\n *     }\n *\n *     public static void setMyClassForTesting(MyClass myClassObj) {\n *         var oldInstance = sInstance\n *         sInstance = myClassObj;\n *         ResettersForTesting.register(() -> sInstance = oldInstance);\n *     }\n * }\n * </code>\n *\n * This is not only used for singleton instances, but can also be used for resetting other static\n * members.\n *\n * <code>\n * class NeedsFoo {\n *     private static Foo sFooForTesting;\n *\n *     public void doThing() {\n *         Foo foo = sFooForTesting != null ? sFooForTesting : new FooImpl();\n *         foo.doItsThing();\n *     }\n *\n *     public static void setFooForTesting(Foo foo) {\n *         sFooForTesting = foo;\n *         ResettersForTesting.register(() -> sFooForTesting = null);\n *     }\n * }\n * </code>\n *\n * For cases where it is important that a particular resetter runs only once, even if the\n * `set*ForTesting` method is invoked multiple times, there is another variation that can be used.\n * In particular, since a lambda always ends up creating a new instance in Chromium builds, we can\n * avoid this by having a single static instance of the resetter, like this:\n *\n * <code>\n * private static class NeedsFooSingleDestroy {\n *     private static final class LazyHolder {\n *         private static Foo INSTANCE = new Foo();\n *     }\n *\n *     private static LazyHolder sFoo;\n *\n *     private static Runnable sOneShotResetter = () -> {\n *         sFoo.INSTANCE.destroy();\n *         sFoo = new Foo();\n *     };\n *\n *     public static void setFooForTesting(Foo foo) {\n *         sFoo.INSTANCE = foo;\n *         ResettersForTesting.register(sResetter);\n *     }\n * }\n * </code>\n ",
  "links" : [ "#register(Runnable)" ],
  "variables" : [ {
    "name" : "sClassResetters",
    "type" : "LinkedHashSet<Runnable>",
    "comment" : " </code>",
    "links" : [ ]
  }, {
    "name" : "sMethodResetters",
    "type" : "LinkedHashSet<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMethodMode",
    "type" : "boolean",
    "comment" : " Test runners toggle this via setMethodMode(), then reset it via onAfterClass().",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void register(Runnable runnable)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link Runnable} that will automatically execute during test tear down.\n     * @param runnable the {@link Runnable} to execute.\n     ",
    "links" : [ "Runnable" ]
  }, {
    "name" : "private static void flushResetters(LinkedHashSet activeSet)",
    "returnType" : "void",
    "comment" : "\n     * Execute and clear all the currently registered resetters.\n     *\n     * This is not intended to be invoked manually, but is intended to be invoked by the test\n     * runners automatically during tear down.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void onAfterMethod()",
    "returnType" : "void",
    "comment" : " Called by test runners after @After methods. ",
    "links" : [ ]
  }, {
    "name" : "public static void onAfterClass()",
    "returnType" : "void",
    "comment" : " Called by test runners after @AfterClass methods. ",
    "links" : [ ]
  }, {
    "name" : "public static void setMethodMode()",
    "returnType" : "void",
    "comment" : " Called by test runners after @BeforeClass methods, but before @Before methods. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void register(Runnable runnable)", "private static void flushResetters(LinkedHashSet activeSet)", "public static void onAfterMethod()", "public static void onAfterClass()", "public static void setMethodMode()" ],
  "variableNames" : [ "sClassResetters", "sMethodResetters", "sMethodMode" ]
}