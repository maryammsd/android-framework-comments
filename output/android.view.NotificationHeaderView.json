{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/NotificationHeaderView.java",
  "packageName" : "android.view",
  "className" : "NotificationHeaderView",
  "comment" : "\n * A header of a notification view\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "NO_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildMinWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentEndMargin",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppName",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeaderText",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryHeaderText",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandClickListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppOpsListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchListener",
    "type" : "HeaderTouchListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferChip",
    "type" : "LinearLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandButton",
    "type" : "NotificationExpandButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "CachingIconView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileBadge",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppOps",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpanded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowExpandButtonAtEnd",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowWorkBadgeAtEnd",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeaderTextMarginEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackground",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntireHeaderClickable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandOnlyOnButton",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAcceptAllTouches",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTotalWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "ViewOutlineProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int shrinkViewForOverflow(int heightSpec, int overFlow, View targetView, int minimumWidth)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHeaderBackgroundDrawable(Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Set a {@link Drawable} to be displayed as a background on the header.\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateTouchListener()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAppOpsOnClickListener(OnClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * Sets onclick listener for app ops icons.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnClickListener(@Nullable OnClickListener l)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOriginalIconColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOriginalNotificationColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExpanded(boolean expanded)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateExpandButton()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShowWorkBadgeAtEnd(boolean showWorkBadgeAtEnd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShowExpandButtonAtEnd(boolean showExpandButtonAtEnd)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not the expand button appears at the end of the NotificationHeaderView. If\n     * both this and {@link #setShowWorkBadgeAtEnd(boolean)} have been set to true, then the\n     * expand button will appear closer to the end than the work badge.\n     ",
    "links" : [ "#setShowWorkBadgeAtEnd(boolean)" ]
  }, {
    "name" : "public View getWorkProfileIcon()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CachingIconView getIcon()",
    "returnType" : "CachingIconView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHeaderTextMarginEnd(int headerTextMarginEnd)",
    "returnType" : "void",
    "comment" : "\n     * Sets the margin end for the text portion of the header, excluding right-aligned elements\n     * @param headerTextMarginEnd margin size\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeaderTextMarginEnd()",
    "returnType" : "int",
    "comment" : "\n     * Get the current margin end value for the header text\n     * @return margin size\n     ",
    "links" : [ ]
  }, {
    "name" : "private View getFirstChildNotGone()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ImageView getExpandButton()",
    "returnType" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOverlappingRendering()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInTouchRect(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAcceptAllTouches(boolean acceptAllTouches)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not all touches to this header view will register as a click. Note that\n     * if the config value for {@code config_notificationHeaderClickableForExpand} is {@code true},\n     * then calling this method with {@code false} will not override that configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpandOnlyOnButton(boolean expandOnlyOnButton)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether only the expand icon itself should serve as the expand target.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_COLOR", "mChildMinWidth", "mContentEndMargin", "mGravity", "mAppName", "mHeaderText", "mSecondaryHeaderText", "mExpandClickListener", "mAppOpsListener", "mTouchListener", "mTransferChip", "mExpandButton", "mIcon", "mProfileBadge", "mAppOps", "mExpanded", "mShowExpandButtonAtEnd", "mShowWorkBadgeAtEnd", "mHeaderTextMarginEnd", "mBackground", "mEntireHeaderClickable", "mExpandOnlyOnButton", "mAcceptAllTouches", "mTotalWidth", "mProvider" ],
  "methodNames" : [ "protected void onFinishInflate()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "private int shrinkViewForOverflow(int heightSpec, int overFlow, View targetView, int minimumWidth)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public void setHeaderBackgroundDrawable(Drawable drawable)", "protected void onDraw(Canvas canvas)", "protected boolean verifyDrawable(Drawable who)", "protected void drawableStateChanged()", "private void updateTouchListener()", "public void setAppOpsOnClickListener(OnClickListener l)", "public void setOnClickListener(@Nullable OnClickListener l)", "public int getOriginalIconColor()", "public int getOriginalNotificationColor()", "public void setExpanded(boolean expanded)", "private void updateExpandButton()", "public void setShowWorkBadgeAtEnd(boolean showWorkBadgeAtEnd)", "public void setShowExpandButtonAtEnd(boolean showExpandButtonAtEnd)", "public View getWorkProfileIcon()", "public CachingIconView getIcon()", "public void setHeaderTextMarginEnd(int headerTextMarginEnd)", "public int getHeaderTextMarginEnd()", "private View getFirstChildNotGone()", "public ImageView getExpandButton()", "public boolean hasOverlappingRendering()", "public boolean isInTouchRect(float x, float y)", "public void setAcceptAllTouches(boolean acceptAllTouches)", "public void setExpandOnlyOnButton(boolean expandOnlyOnButton)" ]
}