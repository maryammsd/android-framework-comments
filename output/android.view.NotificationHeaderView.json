{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/NotificationHeaderView.java",
  "packageName" : "android.view",
  "className" : "NotificationHeaderView",
  "comment" : "\n * A header of a notification view\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTouchableHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandClickListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchListener",
    "type" : "HeaderTouchListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopLineView",
    "type" : "NotificationTopLineView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandButton",
    "type" : "NotificationExpandButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAltExpandTarget",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "CachingIconView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackground",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntireHeaderClickable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandOnlyOnButton",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAcceptAllTouches",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "ViewOutlineProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHeaderBackgroundDrawable(Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Set a {@link Drawable} to be displayed as a background on the header.\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateTouchListener()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnClickListener(@Nullable OnClickListener l)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTopLineExtraMarginEnd(int extraMarginEnd)",
    "returnType" : "void",
    "comment" : "\n     * Sets the extra margin at the end of the top line of left-aligned text + icons.\n     * This value will have the margin required to accommodate the expand button added to it.\n     *\n     * @param extraMarginEnd extra margin in px\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTopLineExtraMarginEndDp(float extraMarginEndDp)",
    "returnType" : "void",
    "comment" : "\n     * Sets the extra margin at the end of the top line of left-aligned text + icons.\n     * This value will have the margin required to accommodate the expand button added to it.\n     *\n     * @param extraMarginEndDp extra margin in dp\n     ",
    "links" : [ ]
  }, {
    "name" : "public void styleTextAsTitle(boolean styleTextAsTitle)",
    "returnType" : "void",
    "comment" : "\n     * This is used to make the low-priority header show the bolded text of a title.\n     *\n     * @param styleTextAsTitle true if this header's text is to have the style of a title\n     ",
    "links" : [ ]
  }, {
    "name" : "private View getFirstChildNotGone()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOverlappingRendering()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInTouchRect(float x, float y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAcceptAllTouches(boolean acceptAllTouches)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not all touches to this header view will register as a click. Note that\n     * if the config value for {@code config_notificationHeaderClickableForExpand} is {@code true},\n     * then calling this method with {@code false} will not override that configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpandOnlyOnButton(boolean expandOnlyOnButton)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether only the expand icon itself should serve as the expand target.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onFinishInflate()", "public void setHeaderBackgroundDrawable(Drawable drawable)", "protected void onDraw(Canvas canvas)", "protected boolean verifyDrawable(@NonNull Drawable who)", "protected void drawableStateChanged()", "private void updateTouchListener()", "public void setOnClickListener(@Nullable OnClickListener l)", "public void setTopLineExtraMarginEnd(int extraMarginEnd)", "public void setTopLineExtraMarginEndDp(float extraMarginEndDp)", "public void styleTextAsTitle(boolean styleTextAsTitle)", "private View getFirstChildNotGone()", "public boolean hasOverlappingRendering()", "public boolean isInTouchRect(float x, float y)", "public void setAcceptAllTouches(boolean acceptAllTouches)", "public void setExpandOnlyOnButton(boolean expandOnlyOnButton)" ],
  "variableNames" : [ "mTouchableHeight", "mExpandClickListener", "mTouchListener", "mTopLineView", "mExpandButton", "mAltExpandTarget", "mIcon", "mBackground", "mEntireHeaderClickable", "mExpandOnlyOnButton", "mAcceptAllTouches", "mProvider" ]
}