{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/PowerManager.java",
  "packageName" : "android.os",
  "className" : "PowerManager",
  "comment" : "\n * This class gives you control of the power state of the device.\n *\n * <p>\n * <b>Device battery life will be significantly affected by the use of this API.</b>\n * Do not acquire {@link WakeLock}s unless you really need them, use the minimum levels\n * possible, and be sure to release them as soon as possible. In most cases,\n * you'll want to use\n * {@link android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON} instead.\n *\n * <p>\n * Any application using a WakeLock must request the {@code android.permission.WAKE_LOCK}\n * permission in an {@code <uses-permission>} element of the application's manifest.\n * </p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARTIAL_WAKE_LOCK",
    "type" : "int",
    "comment" : " 0x00000001",
    "links" : [ ]
  }, {
    "name" : "SCREEN_DIM_WAKE_LOCK",
    "type" : "int",
    "comment" : "\n     * Wake lock level: Ensures that the screen is on (but may be dimmed);\n     * the keyboard backlight will be allowed to go off.\n     * <p>\n     * If the user presses the power button, then the {@link #SCREEN_DIM_WAKE_LOCK} will be\n     * implicitly released by the system, causing both the screen and the CPU to be turned off.\n     * Contrast with {@link #PARTIAL_WAKE_LOCK}.\n     * </p>\n     *\n     * @deprecated Most applications should use\n     * {@link android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON} instead\n     * of this type of wake lock, as it will be correctly managed by the platform\n     * as the user moves between applications and doesn't require a special permission.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON", "#SCREEN_DIM_WAKE_LOCK", "#PARTIAL_WAKE_LOCK" ]
  }, {
    "name" : "SCREEN_BRIGHT_WAKE_LOCK",
    "type" : "int",
    "comment" : "\n     * Wake lock level: Ensures that the screen is on at full brightness;\n     * the keyboard backlight will be allowed to go off.\n     * <p>\n     * If the user presses the power button, then the {@link #SCREEN_BRIGHT_WAKE_LOCK} will be\n     * implicitly released by the system, causing both the screen and the CPU to be turned off.\n     * Contrast with {@link #PARTIAL_WAKE_LOCK}.\n     * </p>\n     *\n     * @deprecated Most applications should use\n     * {@link android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON} instead\n     * of this type of wake lock, as it will be correctly managed by the platform\n     * as the user moves between applications and doesn't require a special permission.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON", "#SCREEN_BRIGHT_WAKE_LOCK", "#PARTIAL_WAKE_LOCK" ]
  }, {
    "name" : "FULL_WAKE_LOCK",
    "type" : "int",
    "comment" : "\n     * Wake lock level: Ensures that the screen and keyboard backlight are on at\n     * full brightness.\n     * <p>\n     * If the user presses the power button, then the {@link #FULL_WAKE_LOCK} will be\n     * implicitly released by the system, causing both the screen and the CPU to be turned off.\n     * Contrast with {@link #PARTIAL_WAKE_LOCK}.\n     * </p>\n     *\n     * @deprecated Most applications should use\n     * {@link android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON} instead\n     * of this type of wake lock, as it will be correctly managed by the platform\n     * as the user moves between applications and doesn't require a special permission.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON", "#FULL_WAKE_LOCK", "#PARTIAL_WAKE_LOCK" ]
  }, {
    "name" : "PROXIMITY_SCREEN_OFF_WAKE_LOCK",
    "type" : "int",
    "comment" : "\n     * Wake lock level: Turns the screen off when the proximity sensor activates.\n     * <p>\n     * If the proximity sensor detects that an object is nearby, the screen turns off\n     * immediately.  Shortly after the object moves away, the screen turns on again.\n     * </p><p>\n     * A proximity wake lock does not prevent the device from falling asleep\n     * unlike {@link #FULL_WAKE_LOCK}, {@link #SCREEN_BRIGHT_WAKE_LOCK} and\n     * {@link #SCREEN_DIM_WAKE_LOCK}.  If there is no user activity and no other\n     * wake locks are held, then the device will fall asleep (and lock) as usual.\n     * However, the device will not fall asleep while the screen has been turned off\n     * by the proximity sensor because it effectively counts as ongoing user activity.\n     * </p><p>\n     * Since not all devices have proximity sensors, use {@link #isWakeLockLevelSupported}\n     * to determine whether this wake lock level is supported.\n     * </p><p>\n     * Cannot be used with {@link #ACQUIRE_CAUSES_WAKEUP}.\n     * </p>\n     ",
    "links" : [ "#isWakeLockLevelSupported", "#ACQUIRE_CAUSES_WAKEUP", "#SCREEN_BRIGHT_WAKE_LOCK", "#SCREEN_DIM_WAKE_LOCK", "#FULL_WAKE_LOCK" ]
  }, {
    "name" : "DOZE_WAKE_LOCK",
    "type" : "int",
    "comment" : " 0x00000040",
    "links" : [ ]
  }, {
    "name" : "DRAW_WAKE_LOCK",
    "type" : "int",
    "comment" : " 0x00000080",
    "links" : [ ]
  }, {
    "name" : "WAKE_LOCK_LEVEL_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for the wake lock level component of a combined wake lock level and flags integer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACQUIRE_CAUSES_WAKEUP",
    "type" : "int",
    "comment" : "\n     * Wake lock flag: Turn the screen on when the wake lock is acquired.\n     * <p>\n     * Normally wake locks don't actually wake the device, they just cause\n     * the screen to remain on once it's already on.  Think of the video player\n     * application as the normal behavior.  Notifications that pop up and want\n     * the device to be on are the exception; use this flag to be like them.\n     * </p><p>\n     * Cannot be used with {@link #PARTIAL_WAKE_LOCK}.\n     * </p>\n     ",
    "links" : [ "#PARTIAL_WAKE_LOCK" ]
  }, {
    "name" : "ON_AFTER_RELEASE",
    "type" : "int",
    "comment" : "\n     * Wake lock flag: When this wake lock is released, poke the user activity timer\n     * so the screen stays on for a little longer.\n     * <p>\n     * Will not turn the screen on if it is not already on.\n     * See {@link #ACQUIRE_CAUSES_WAKEUP} if you want that.\n     * </p><p>\n     * Cannot be used with {@link #PARTIAL_WAKE_LOCK}.\n     * </p>\n     ",
    "links" : [ "#ACQUIRE_CAUSES_WAKEUP", "#PARTIAL_WAKE_LOCK" ]
  }, {
    "name" : "UNIMPORTANT_FOR_LOGGING",
    "type" : "int",
    "comment" : "\n     * Wake lock flag: This wake lock is not important for logging events.  If a later\n     * wake lock is acquired that is important, it will be considered the one to log.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY",
    "type" : "int",
    "comment" : "\n     * Flag for {@link WakeLock#release WakeLock.release(int)}: Defer releasing a\n     * {@link #PROXIMITY_SCREEN_OFF_WAKE_LOCK} wake lock until the proximity sensor\n     * indicates that an object is not in close proximity.\n     ",
    "links" : [ "#PROXIMITY_SCREEN_OFF_WAKE_LOCK", "#release" ]
  }, {
    "name" : "RELEASE_FLAG_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Flag for {@link WakeLock#release(int)} when called due to timeout.\n     * @hide\n     ",
    "links" : [ "#release(int)" ]
  }, {
    "name" : "BRIGHTNESS_ON",
    "type" : "int",
    "comment" : "\n     * Brightness value for fully on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_OFF",
    "type" : "int",
    "comment" : "\n     * Brightness value for fully off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Brightness value for default policy handling by the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_INVALID",
    "type" : "int",
    "comment" : "\n     * Brightness value for an invalid value having been stored.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_MAX",
    "type" : "float",
    "comment" : "\n     * Brightness value for fully on as float.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_MIN",
    "type" : "float",
    "comment" : "\n     * Brightness value for minimum valid brightness as float.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_OFF_FLOAT",
    "type" : "float",
    "comment" : "\n     * Brightness value for fully off in float.\n     * TODO(brightnessfloat): rename this to BRIGHTNES_OFF and remove the integer-based constant.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_INVALID_FLOAT",
    "type" : "float",
    "comment" : "\n     * Invalid brightness value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_EVENT_OTHER",
    "type" : "int",
    "comment" : "\n     * User activity event type: Unspecified event type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_EVENT_BUTTON",
    "type" : "int",
    "comment" : "\n     * User activity event type: Button or key pressed or released.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_EVENT_TOUCH",
    "type" : "int",
    "comment" : "\n     * User activity event type: Touch down, move or up.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_EVENT_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * User activity event type: Accessibility taking action on behalf of user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_EVENT_ATTENTION",
    "type" : "int",
    "comment" : "\n     * User activity event type: {@link android.service.attention.AttentionService} taking action\n     * on behalf of user.\n     * @hide\n     ",
    "links" : [ "android.service.attention.AttentionService" ]
  }, {
    "name" : "USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS",
    "type" : "int",
    "comment" : "\n     * User activity flag: If already dimmed, extend the dim timeout\n     * but do not brighten.  This flag is useful for keeping the screen on\n     * a little longer without causing a visible change such as when\n     * the power key is pressed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_FLAG_INDIRECT",
    "type" : "int",
    "comment" : "\n     * User activity flag: Note the user activity as usual but do not\n     * reset the user activity timeout.  This flag is useful for applying\n     * user activity power hints when interacting with the device indirectly\n     * on a secondary screen while allowing the primary screen to go to sleep.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_MIN",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_APPLICATION",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due by application request.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_DEVICE_ADMIN",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due by request of the\n     * device administration policy.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to a screen timeout.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_LID_SWITCH",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to the lid switch being closed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_POWER_BUTTON",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to the power button being pressed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_HDMI",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to HDMI.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_SLEEP_BUTTON",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to the sleep button being pressed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep by request of an accessibility service\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_FORCE_SUSPEND",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to force-suspend.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_INATTENTIVE",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to user inattentiveness.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_QUIESCENT",
    "type" : "int",
    "comment" : "\n     * Go to sleep reason code: Going to sleep due to quiescent boot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_REASON_MAX",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GO_TO_SLEEP_FLAG_NO_DOZE",
    "type" : "int",
    "comment" : "\n     * Go to sleep flag: Skip dozing state and directly go to full sleep.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_DIM",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_DOZE",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM_VR",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM_VR",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT_VR",
    "type" : "int",
    "comment" : "\n     * Brightness constraint type: minimum allowed value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking for an unknown reason.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_POWER_BUTTON",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up due to power button press.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_APPLICATION",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up because an application requested it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_PLUGGED_IN",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up due to being plugged in or docked on a wireless charger.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_GESTURE",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up due to a user performed gesture (e.g. douple tapping on the\n     * screen).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_CAMERA_LAUNCH",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up due to the camera being launched.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_WAKE_KEY",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up because a wake key other than power was pressed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_WAKE_MOTION",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking up because a wake motion was performed.\n     *\n     * For example, a trackball that was set to wake the device up was spun.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_HDMI",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking due to HDMI.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_REASON_LID",
    "type" : "int",
    "comment" : "\n     * Wake up reason code: Waking due to the lid being opened.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REBOOT_RECOVERY",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to reboot() to reboot into\n     * recovery mode for tasks other than applying system updates, such as\n     * doing factory resets.\n     * <p>\n     * Requires the {@link android.Manifest.permission#RECOVERY}\n     * permission (in addition to\n     * {@link android.Manifest.permission#REBOOT}).\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#RECOVERY", "android.Manifest.permission#REBOOT" ]
  }, {
    "name" : "REBOOT_RECOVERY_UPDATE",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to reboot() to reboot into\n     * recovery mode for applying system updates.\n     * <p>\n     * Requires the {@link android.Manifest.permission#RECOVERY}\n     * permission (in addition to\n     * {@link android.Manifest.permission#REBOOT}).\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#RECOVERY", "android.Manifest.permission#REBOOT" ]
  }, {
    "name" : "REBOOT_REQUESTED_BY_DEVICE_OWNER",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to reboot() when device owner requests a reboot on\n     * the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REBOOT_SAFE_MODE",
    "type" : "String",
    "comment" : "\n     * The 'reason' value used when rebooting in safe mode\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REBOOT_USERSPACE",
    "type" : "String",
    "comment" : "\n     * The 'reason' value used for rebooting userspace.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REBOOT_QUIESCENT",
    "type" : "String",
    "comment" : "\n     * The 'reason' value used when rebooting the device without turning on the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_USER_REQUESTED",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to android_reboot().\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_BATTERY_THERMAL_STATE",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to android_reboot() when battery temperature\n     * is too high.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_THERMAL_STATE",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to android_reboot() when device temperature\n     * is too high.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_LOW_BATTERY",
    "type" : "String",
    "comment" : "\n     * The value to pass as the 'reason' argument to android_reboot() when device is running\n     * critically low on battery.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_SHUTDOWN",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being normal shutdown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_REBOOT",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being reboot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_USER_REQUESTED",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being user requested.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_THERMAL_SHUTDOWN",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being overheating.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_LOW_BATTERY",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being low battery.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SHUTDOWN_REASON_BATTERY_THERMAL",
    "type" : "int",
    "comment" : "\n     * constant for shutdown reason being critical battery thermal state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_NO_CHANGE",
    "type" : "int",
    "comment" : "\n     * Either the location providers shouldn't be affected by battery saver,\n     * or battery saver is off.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF",
    "type" : "int",
    "comment" : "\n     * In this mode, the GPS based location provider should be disabled when battery saver is on and\n     * the device is non-interactive.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF",
    "type" : "int",
    "comment" : "\n     * All location providers should be disabled when battery saver is on and\n     * the device is non-interactive.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_FOREGROUND_ONLY",
    "type" : "int",
    "comment" : "\n     * In this mode, all the location providers will be kept available, but location fixes\n     * should only be provided to foreground apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF",
    "type" : "int",
    "comment" : "\n     * In this mode, location will not be turned off, but LocationManager will throttle all\n     * requests to providers when the device is non-interactive.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_LOCATION_MODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAX_LOCATION_MODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_IS_POWER_SAVE_MODE_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_IS_INTERACTIVE_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CACHE_ENTRIES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerSaveModeCache",
    "type" : "PropertyInvalidatedCache<Void, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInteractiveCache",
    "type" : "PropertyInvalidatedCache<Void, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IPowerManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThermalService",
    "type" : "IThermalService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerWhitelistManager",
    "type" : "PowerWhitelistManager",
    "comment" : " We lazily initialize it.",
    "links" : [ ]
  }, {
    "name" : "mListenerMap",
    "type" : "ArrayMap<OnThermalStatusChangedListener, IThermalStatusListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_SAVE_MODE_TRIGGER_PERCENTAGE",
    "type" : "int",
    "comment" : "\n     * Indicates automatic battery saver toggling by the system will be based on percentage.\n     *\n     * @see PowerManager#getPowerSaveModeTrigger()\n     *\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_SAVE_MODE_TRIGGER_DYNAMIC",
    "type" : "int",
    "comment" : "\n     * Indicates automatic battery saver toggling by the system will be based on the state\n     * of the dynamic power savings signal.\n     *\n     * @see PowerManager#setDynamicPowerSaveHint(boolean, int)\n     * @see PowerManager#getPowerSaveModeTrigger()\n     *\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_NONE",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Not under throttling.\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_LIGHT",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Light throttling where UX is not impacted.\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_MODERATE",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Moderate throttling where UX is not largely impacted.\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_SEVERE",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Severe throttling where UX is largely impacted.\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_CRITICAL",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Platform has done everything to reduce power.\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Key components in platform are shutting down due to thermal condition.\n     * Device functionalities will be limited.\n     ",
    "links" : [ ]
  }, {
    "name" : "THERMAL_STATUS_SHUTDOWN",
    "type" : "int",
    "comment" : "\n     * Thermal status code: Need shutdown immediately.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastHeadroomUpdate",
    "type" : "AtomicLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINIMUM_HEADROOM_TIME_MILLIS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_POWER_SAVE_MODE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent that is broadcast when the state of {@link #isPowerSaveMode()} changes.\n     * This broadcast is only sent to registered receivers.\n     ",
    "links" : [ "#isPowerSaveMode()" ]
  }, {
    "name" : "ACTION_POWER_SAVE_MODE_CHANGED_INTERNAL",
    "type" : "String",
    "comment" : "\n     * Intent that is broadcast when the state of {@link #isPowerSaveMode()} changes.\n     * @hide\n     ",
    "links" : [ "#isPowerSaveMode()" ]
  }, {
    "name" : "ACTION_DEVICE_IDLE_MODE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent that is broadcast when the state of {@link #isDeviceIdleMode()} changes.\n     * This broadcast is only sent to registered receivers.\n     ",
    "links" : [ "#isDeviceIdleMode()" ]
  }, {
    "name" : "ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent that is broadcast when the state of {@link #isLightDeviceIdleMode()} changes.\n     * This broadcast is only sent to registered receivers.\n     * @hide\n     ",
    "links" : [ "#isLightDeviceIdleMode()" ]
  }, {
    "name" : "ACTION_POWER_SAVE_WHITELIST_CHANGED",
    "type" : "String",
    "comment" : "\n     * @hide Intent that is broadcast when the set of power save whitelist apps has changed.\n     * This broadcast is only sent to registered receivers.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_POWER_SAVE_TEMP_WHITELIST_CHANGED",
    "type" : "String",
    "comment" : "\n     * @hide Intent that is broadcast when the set of temporarily whitelisted apps has changed.\n     * This broadcast is only sent to registered receivers.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_POWER_SAVE_MODE_CHANGING",
    "type" : "String",
    "comment" : "\n     * Intent that is broadcast when the state of {@link #isPowerSaveMode()} is about to change.\n     * This broadcast is only sent to registered receivers.\n     *\n     * @deprecated This is sent at the same time as {@link #ACTION_POWER_SAVE_MODE_CHANGED} so it\n     * does not provide advanced warning. As such it will be removed in future Android versions.\n     * Use {@link #ACTION_POWER_SAVE_MODE_CHANGED} and {@link #isPowerSaveMode()} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_POWER_SAVE_MODE_CHANGED", "#isPowerSaveMode()" ]
  }, {
    "name" : "EXTRA_POWER_SAVE_MODE",
    "type" : "String",
    "comment" : "\n     * @deprecated Use {@link #isPowerSaveMode()} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#isPowerSaveMode()" ]
  }, {
    "name" : "PRE_IDLE_TIMEOUT_MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Constant for PreIdleTimeout normal mode (default mode, not short nor extend timeout) .\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRE_IDLE_TIMEOUT_MODE_LONG",
    "type" : "int",
    "comment" : "\n     * Constant for PreIdleTimeout long mode (extend timeout to keep in inactive mode\n     * longer).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRE_IDLE_TIMEOUT_MODE_SHORT",
    "type" : "int",
    "comment" : "\n     * Constant for PreIdleTimeout short mode (short timeout to go to doze mode quickly)\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String sleepReasonToString(int sleepReason)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String wakeReasonToString(@WakeReason int wakeReason)",
    "returnType" : "String",
    "comment" : "\n     * Convert the wake reason to a string for debugging purposes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String locationPowerSaveModeToString(@LocationPowerSaveMode int mode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private PowerWhitelistManager getPowerWhitelistManager()",
    "returnType" : "PowerWhitelistManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumScreenBrightnessSetting()",
    "returnType" : "int",
    "comment" : "\n     * Gets the minimum supported screen brightness setting.\n     * The screen may be allowed to become dimmer than this value but\n     * this is the minimum value that can be set by the user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumScreenBrightnessSetting()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum supported screen brightness setting.\n     * The screen may be allowed to become dimmer than this value but\n     * this is the maximum value that can be set by the user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultScreenBrightnessSetting()",
    "returnType" : "int",
    "comment" : "\n     * Gets the default screen brightness setting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumScreenBrightnessForVrSetting()",
    "returnType" : "int",
    "comment" : "\n     * Gets the minimum supported screen brightness setting for VR Mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumScreenBrightnessForVrSetting()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum supported screen brightness setting for VR Mode.\n     * The screen may be allowed to become dimmer than this value but\n     * this is the maximum value that can be set by the user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultScreenBrightnessForVrSetting()",
    "returnType" : "int",
    "comment" : "\n     * Gets the default screen brightness for VR setting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getBrightnessConstraint(int constraint)",
    "returnType" : "float",
    "comment" : "\n     * Gets a float screen brightness setting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WakeLock newWakeLock(int levelAndFlags, String tag)",
    "returnType" : "WakeLock",
    "comment" : "\n     * Creates a new wake lock with the specified level and flags.\n     * <p>\n     * The {@code levelAndFlags} parameter specifies a wake lock level and optional flags\n     * combined using the logical OR operator.\n     * </p><p>\n     * The wake lock levels are: {@link #PARTIAL_WAKE_LOCK},\n     * {@link #FULL_WAKE_LOCK}, {@link #SCREEN_DIM_WAKE_LOCK}\n     * and {@link #SCREEN_BRIGHT_WAKE_LOCK}.  Exactly one wake lock level must be\n     * specified as part of the {@code levelAndFlags} parameter.\n     * </p>\n     * <p>\n     * The wake lock flags are: {@link #ACQUIRE_CAUSES_WAKEUP}\n     * and {@link #ON_AFTER_RELEASE}.  Multiple flags can be combined as part of the\n     * {@code levelAndFlags} parameters.\n     * </p><p>\n     * Call {@link WakeLock#acquire() acquire()} on the object to acquire the\n     * wake lock, and {@link WakeLock#release release()} when you are done.\n     * </p><p>\n     * {@samplecode\n     * PowerManager pm = (PowerManager)mContext.getSystemService(\n     *                                          Context.POWER_SERVICE);\n     * PowerManager.WakeLock wl = pm.newWakeLock(\n     *                                      PowerManager.SCREEN_DIM_WAKE_LOCK\n     *                                      | PowerManager.ON_AFTER_RELEASE,\n     *                                      TAG);\n     * wl.acquire();\n     * // ... do work...\n     * wl.release();\n     * }\n     * </p><p>\n     * Although a wake lock can be created without special permissions,\n     * the {@link android.Manifest.permission#WAKE_LOCK} permission is\n     * required to actually acquire or release the wake lock that is returned.\n     * </p><p class=\"note\">\n     * If using this to keep the screen on, you should strongly consider using\n     * {@link android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON} instead.\n     * This window flag will be correctly managed by the platform\n     * as the user moves between applications and doesn't require a special permission.\n     * </p>\n     *\n     * <p>\n     * Recommended naming conventions for tags to make debugging easier:\n     * <ul>\n     * <li>use a unique prefix delimited by a colon for your app/library (e.g.\n     * gmail:mytag) to make it easier to understand where the wake locks comes\n     * from. This namespace will also avoid collision for tags inside your app\n     * coming from different libraries which will make debugging easier.\n     * <li>use constants (e.g. do not include timestamps in the tag) to make it\n     * easier for tools to aggregate similar wake locks. When collecting\n     * debugging data, the platform only monitors a finite number of tags,\n     * using constants will help tools to provide better debugging data.\n     * <li>avoid using Class#getName() or similar method since this class name\n     * can be transformed by java optimizer and obfuscator tools.\n     * <li>avoid wrapping the tag or a prefix to avoid collision with wake lock\n     * tags from the platform (e.g. *alarm*).\n     * <li>never include personnally identifiable information for privacy\n     * reasons.\n     * </ul>\n     * </p>\n     *\n     * @param levelAndFlags Combination of wake lock level and flag values defining\n     * the requested behavior of the WakeLock.\n     * @param tag Your class name (or other tag) for debugging purposes.\n     *\n     * @see WakeLock#acquire()\n     * @see WakeLock#release()\n     * @see #PARTIAL_WAKE_LOCK\n     * @see #FULL_WAKE_LOCK\n     * @see #SCREEN_DIM_WAKE_LOCK\n     * @see #SCREEN_BRIGHT_WAKE_LOCK\n     * @see #PROXIMITY_SCREEN_OFF_WAKE_LOCK\n     * @see #ACQUIRE_CAUSES_WAKEUP\n     * @see #ON_AFTER_RELEASE\n     ",
    "links" : [ "android.Manifest.permission#WAKE_LOCK", "#acquire()", "#ACQUIRE_CAUSES_WAKEUP", "android.view.WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON", "#SCREEN_DIM_WAKE_LOCK", "#SCREEN_BRIGHT_WAKE_LOCK", "#ON_AFTER_RELEASE", "#PARTIAL_WAKE_LOCK", "#FULL_WAKE_LOCK", "#release" ]
  }, {
    "name" : "public static void validateWakeLockParameters(int levelAndFlags, String tag)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void userActivity(long when, boolean noChangeLights)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the power manager that user activity happened.\n     * <p>\n     * Resets the auto-off timer and brightens the screen if the device\n     * is not asleep.  This is what happens normally when a key or the touch\n     * screen is pressed or when some other user activity occurs.\n     * This method does not wake up the device if it has been put to sleep.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param when The time of the user activity, in the {@link SystemClock#uptimeMillis()}\n     * time base.  This timestamp is used to correctly order the user activity request with\n     * other power management functions.  It should be set\n     * to the timestamp of the input event that caused the user activity.\n     * @param noChangeLights If true, does not cause the keyboard backlight to turn on\n     * because of this event.  This is set when the power key is pressed.\n     * We want the device to stay on while the button is down, but we're about\n     * to turn off the screen so we don't want the keyboard backlight to turn on again.\n     * Otherwise the lights flash on and then off and it looks weird.\n     *\n     * @see #wakeUp\n     * @see #goToSleep\n     *\n     * @removed Requires signature or system permission.\n     * @deprecated Use {@link #userActivity(long, int, int)}.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#userActivity(long", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void userActivity(long when, int event, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the power manager that user activity happened.\n     * <p>\n     * Resets the auto-off timer and brightens the screen if the device\n     * is not asleep.  This is what happens normally when a key or the touch\n     * screen is pressed or when some other user activity occurs.\n     * This method does not wake up the device if it has been put to sleep.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} or\n     * {@link android.Manifest.permission#USER_ACTIVITY} permission.\n     * </p>\n     *\n     * @param when The time of the user activity, in the {@link SystemClock#uptimeMillis()}\n     * time base.  This timestamp is used to correctly order the user activity request with\n     * other power management functions.  It should be set\n     * to the timestamp of the input event that caused the user activity.\n     * @param event The user activity event.\n     * @param flags Optional user activity flags.\n     *\n     * @see #wakeUp\n     * @see #goToSleep\n     *\n     * @hide Requires signature or system permission.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.Manifest.permission#DEVICE_POWER", "android.Manifest.permission#USER_ACTIVITY" ]
  }, {
    "name" : "public void goToSleep(long time)",
    "returnType" : "void",
    "comment" : "\n     * Forces the device to go to sleep.\n     * <p>\n     * Overrides all the wake locks that are held.\n     * This is what happens when the power key is pressed to turn off the screen.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to go to sleep was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the go to sleep request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to go to sleep.\n     *\n     * @see #userActivity\n     * @see #wakeUp\n     *\n     * @removed Requires signature permission.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void goToSleep(long time, int reason, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Forces the device to go to sleep.\n     * <p>\n     * Overrides all the wake locks that are held.\n     * This is what happens when the power key is pressed to turn off the screen.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to go to sleep was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the go to sleep request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to go to sleep.\n     * @param reason The reason the device is going to sleep.\n     * @param flags Optional flags to apply when going to sleep.\n     *\n     * @see #userActivity\n     * @see #wakeUp\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void wakeUp(long time)",
    "returnType" : "void",
    "comment" : "\n     * Forces the device to wake up from sleep.\n     * <p>\n     * If the device is currently asleep, wakes it up, otherwise does nothing.\n     * This is what happens when the power key is pressed to turn on the screen.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to wake up was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the wake up request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to wake up.\n     *\n     * @see #userActivity\n     * @see #goToSleep\n     *\n     * @deprecated Use {@link #wakeUp(long, int, String)} instead.\n     * @removed Requires signature permission.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#wakeUp(long", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void wakeUp(long time, String details)",
    "returnType" : "void",
    "comment" : "\n     * Forces the device to wake up from sleep.\n     * <p>\n     * If the device is currently asleep, wakes it up, otherwise does nothing.\n     * This is what happens when the power key is pressed to turn on the screen.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to wake up was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the wake up request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to wake up.\n     *\n     * @param details A free form string to explain the specific details behind the wake up for\n     *                debugging purposes.\n     *\n     * @see #userActivity\n     * @see #goToSleep\n     *\n     * @deprecated Use {@link #wakeUp(long, int, String)} instead.\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#wakeUp(long", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void wakeUp(long time, @WakeReason int reason, String details)",
    "returnType" : "void",
    "comment" : "\n     * Forces the device to wake up from sleep.\n     * <p>\n     * If the device is currently asleep, wakes it up, otherwise does nothing.\n     * This is what happens when the power key is pressed to turn on the screen.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to wake up was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the wake up request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to wake up.\n     *\n     * @param reason The reason for the wake up.\n     *\n     * @param details A free form string to explain the specific details behind the wake up for\n     *                debugging purposes.\n     *\n     * @see #userActivity\n     * @see #goToSleep\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void nap(long time)",
    "returnType" : "void",
    "comment" : "\n     * Forces the device to start napping.\n     * <p>\n     * If the device is currently awake, starts dreaming, otherwise does nothing.\n     * When the dream ends or if the dream cannot be started, the device will\n     * either wake up or go to sleep depending on whether there has been recent\n     * user activity.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to nap was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the nap request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to nap.\n     *\n     * @see #wakeUp\n     * @see #goToSleep\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public void dream(long time)",
    "returnType" : "void",
    "comment" : "\n     * Requests the device to start dreaming.\n     * <p>\n     * If dream can not be started, for example if another {@link PowerManager} transition is in\n     * progress, does nothing. Unlike {@link #nap(long)}, this does not put device to sleep when\n     * dream ends.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#READ_DREAM_STATE} and\n     * {@link android.Manifest.permission#WRITE_DREAM_STATE} permissions.\n     * </p>\n     *\n     * @param time The time when the request to nap was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp may be used to correctly\n     * order the dream request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to dream.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.os.PowerManager", "android.Manifest.permission#READ_DREAM_STATE", "#nap(long)", "android.Manifest.permission#WRITE_DREAM_STATE" ]
  }, {
    "name" : "public void boostScreenBrightness(long time)",
    "returnType" : "void",
    "comment" : "\n     * Boosts the brightness of the screen to maximum for a predetermined\n     * period of time.  This is used to make the screen more readable in bright\n     * daylight for a short duration.\n     * <p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @param time The time when the request to boost was issued, in the\n     * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly\n     * order the boost request with other power management functions.  It should be set\n     * to the timestamp of the input event that caused the request to boost.\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public boolean isWakeLockLevelSupported(int level)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified wake lock level is supported.\n     *\n     * @param level The wake lock level to check.\n     * @return True if the specified wake lock level is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScreenOn()",
    "returnType" : "boolean",
    "comment" : "\n      * Returns true if the device is in an interactive state.\n      * <p>\n      * For historical reasons, the name of this method refers to the power state of\n      * the screen but it actually describes the overall interactive state of\n      * the device.  This method has been replaced by {@link #isInteractive}.\n      * </p><p>\n      * The value returned by this method only indicates whether the device is\n      * in an interactive state which may have nothing to do with the screen being\n      * on or off.  To determine the actual state of the screen,\n      * use {@link android.view.Display#getState}.\n      * </p>\n      *\n      * @return True if the device is in an interactive state.\n      *\n      * @deprecated Use {@link #isInteractive} instead.\n      ",
    "links" : [ "#isInteractive", "android.view.Display#getState" ]
  }, {
    "name" : "public boolean isInteractive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is in an interactive state.\n     * <p>\n     * When this method returns true, the device is awake and ready to interact\n     * with the user (although this is not a guarantee that the user is actively\n     * interacting with the device just this moment).  The main screen is usually\n     * turned on while in this state.  Certain features, such as the proximity\n     * sensor, may temporarily turn off the screen while still leaving the device in an\n     * interactive state.  Note in particular that the device is still considered\n     * to be interactive while dreaming (since dreams can be interactive) but not\n     * when it is dozing or asleep.\n     * </p><p>\n     * When this method returns false, the device is dozing or asleep and must\n     * be awoken before it will become ready to interact with the user again.  The\n     * main screen is usually turned off while in this state.  Certain features,\n     * such as \"ambient mode\" may cause the main screen to remain on (albeit in a\n     * low power state) to display system-provided content while the device dozes.\n     * </p><p>\n     * The system will send a {@link android.content.Intent#ACTION_SCREEN_ON screen on}\n     * or {@link android.content.Intent#ACTION_SCREEN_OFF screen off} broadcast\n     * whenever the interactive state of the device changes.  For historical reasons,\n     * the names of these broadcasts refer to the power state of the screen\n     * but they are actually sent in response to changes in the overall interactive\n     * state of the device, as described by this method.\n     * </p><p>\n     * Services may use the non-interactive state as a hint to conserve power\n     * since the user is not present.\n     * </p>\n     *\n     * @return True if the device is in an interactive state.\n     *\n     * @see android.content.Intent#ACTION_SCREEN_ON\n     * @see android.content.Intent#ACTION_SCREEN_OFF\n     ",
    "links" : [ "android.content.Intent#ACTION_SCREEN_OFF", "android.content.Intent#ACTION_SCREEN_ON" ]
  }, {
    "name" : "public static boolean isRebootingUserspaceSupportedImpl()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this device supports rebooting userspace.\n     *\n     * <p>This method exists solely for the sake of re-using same logic between {@code PowerManager}\n     * and {@code PowerManagerService}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRebootingUserspaceSupported()",
    "returnType" : "boolean",
    "comment" : " TODO(b/138605180): add link to documentation once it's ready.",
    "links" : [ ]
  }, {
    "name" : "public void reboot(@Nullable String reason)",
    "returnType" : "void",
    "comment" : "\n     * Reboot the device.  Will not return if the reboot is successful.\n     * <p>\n     * Requires the {@link android.Manifest.permission#REBOOT} permission.\n     * </p>\n     *\n     * @param reason code to pass to the kernel (e.g., \"recovery\") to\n     *               request special boot modes, or null.\n     * @throws UnsupportedOperationException if userspace reboot was requested on a device that\n     *                                       doesn't support it.\n     ",
    "links" : [ "android.Manifest.permission#REBOOT" ]
  }, {
    "name" : "public void rebootSafeMode()",
    "returnType" : "void",
    "comment" : "\n     * Reboot the device. Will not return if the reboot is successful.\n     * <p>\n     * Requires the {@link android.Manifest.permission#REBOOT} permission.\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REBOOT" ]
  }, {
    "name" : "public boolean isPowerSaveMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is currently in power save mode.  When in this mode,\n     * applications should reduce their functionality in order to conserve battery as\n     * much as possible.  You can monitor for changes to this state with\n     * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.\n     *\n     * @return Returns true if currently in low power mode, else false.\n     ",
    "links" : [ "#ACTION_POWER_SAVE_MODE_CHANGED" ]
  }, {
    "name" : "public boolean setPowerSaveModeEnabled(boolean mode)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the current power save mode.\n     *\n     * @return True if the set was allowed.\n     *\n     * @hide\n     * @see #isPowerSaveMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDynamicPowerSaveHint(boolean powerSaveHint, int disableThreshold)",
    "returnType" : "boolean",
    "comment" : "\n     * Updates the current state of dynamic power savings and disable threshold. This is\n     * a signal to the system which an app can update to serve as an indicator that\n     * the user will be in a battery critical situation before being able to plug in.\n     * Only apps with the {@link android.Manifest.permission#POWER_SAVER} permission may do this.\n     * This is a device global state, not a per user setting.\n     *\n     * <p>When enabled, the system may enact various measures for reducing power consumption in\n     * order to help ensure that the user will make it to their next charging point. The most\n     * visible of these will be the automatic enabling of battery saver if the user has set\n     * their battery saver mode to \"automatic\". Note\n     * that this is NOT simply an on/off switch for features, but rather a hint for the\n     * system to consider enacting these power saving features, some of which have additional\n     * logic around when to activate based on this signal.\n     *\n     * <p>The provided threshold is the percentage the system should consider itself safe at given\n     * the current state of the device. The value is an integer representing a battery level.\n     *\n     * <p>The threshold is meant to set an explicit stopping point for dynamic power savings\n     * functionality so that the dynamic power savings itself remains a signal rather than becoming\n     * an on/off switch for a subset of features.\n     * @hide\n     *\n     * @param powerSaveHint A signal indicating to the system if it believes the\n     * dynamic power savings behaviors should be activated.\n     * @param disableThreshold When the suggesting app believes it would be safe to disable dynamic\n     * power savings behaviors.\n     * @return True if the update was allowed and succeeded.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#POWER_SAVER" ]
  }, {
    "name" : "public boolean setAdaptivePowerSavePolicy(@NonNull BatterySaverPolicyConfig config)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the policy for adaptive power save.\n     *\n     * @return true if there was an effectual change. If full battery saver is enabled or the\n     * adaptive policy is not enabled, then this will return false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setAdaptivePowerSaveEnabled(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "\n     * Enables or disables adaptive power save.\n     *\n     * @return true if there was an effectual change. If full battery saver is enabled, then this\n     * will return false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPowerSaveModeTrigger()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current battery saver control mode. Values it may return are defined in\n     * AutoPowerSaveModeTriggers. Note that this is a global device state, not a per user setting.\n     *\n     * @return The current value power saver mode for the system.\n     *\n     * @see AutoPowerSaveModeTriggers\n     * @see PowerManager#getPowerSaveModeTrigger()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PowerSaveState getPowerSaveState(@ServiceType int serviceType)",
    "returnType" : "PowerSaveState",
    "comment" : "\n     * Get data about the battery saver mode for a specific service\n     * @param serviceType unique key for the service, one of {@link ServiceType}\n     * @return Battery saver state data.\n     *\n     * @hide\n     * @see com.android.server.power.batterysaver.BatterySaverPolicy\n     * @see PowerSaveState\n     ",
    "links" : [ "ServiceType" ]
  }, {
    "name" : "public int getLocationPowerSaveMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns how location features should behave when battery saver is on. When battery saver\n     * is off, this will always return {@link #LOCATION_MODE_NO_CHANGE}.\n     *\n     * <p>This API is normally only useful for components that provide location features.\n     *\n     * @see #isPowerSaveMode()\n     * @see #ACTION_POWER_SAVE_MODE_CHANGED\n     ",
    "links" : [ "#LOCATION_MODE_NO_CHANGE" ]
  }, {
    "name" : "public boolean isDeviceIdleMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is currently in idle mode.  This happens when a device\n     * has been sitting unused and unmoving for a sufficiently long period of time, so that\n     * it decides to go into a lower power-use state.  This may involve things like turning\n     * off network access to apps.  You can monitor for changes to this state with\n     * {@link #ACTION_DEVICE_IDLE_MODE_CHANGED}.\n     *\n     * @return Returns true if currently in active device idle mode, else false.  This is\n     * when idle mode restrictions are being actively applied; it will return false if the\n     * device is in a long-term idle mode but currently running a maintenance window where\n     * restrictions have been lifted.\n     ",
    "links" : [ "#ACTION_DEVICE_IDLE_MODE_CHANGED" ]
  }, {
    "name" : "public boolean isLightDeviceIdleMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is currently in light idle mode.  This happens when a device\n     * has had its screen off for a short time, switching it into a batching mode where we\n     * execute jobs, syncs, networking on a batching schedule.  You can monitor for changes to\n     * this state with {@link #ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED}.\n     *\n     * @return Returns true if currently in active light device idle mode, else false.  This is\n     * when light idle mode restrictions are being actively applied; it will return false if the\n     * device is in a long-term idle mode but currently running a maintenance window where\n     * restrictions have been lifted.\n     * @hide\n     ",
    "links" : [ "#ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED" ]
  }, {
    "name" : "public boolean isIgnoringBatteryOptimizations(String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the given application package name is on the device's power whitelist.\n     * Apps can be placed on the whitelist through the settings UI invoked by\n     * {@link android.provider.Settings#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS}.\n     ",
    "links" : [ "android.provider.Settings#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS" ]
  }, {
    "name" : "public void shutdown(boolean confirm, String reason, boolean wait)",
    "returnType" : "void",
    "comment" : "\n     * Turn off the device.\n     *\n     * @param confirm If true, shows a shutdown confirmation dialog.\n     * @param reason code to pass to android_reboot() (e.g. \"userrequested\"), or null.\n     * @param wait If true, this call waits for the shutdown to complete and does not return.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSustainedPerformanceModeSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * This function checks if the device has implemented Sustained Performance\n     * Mode. This needs to be checked only once and is constant for a particular\n     * device/release.\n     *\n     * Sustained Performance Mode is intended to provide a consistent level of\n     * performance for prolonged amount of time.\n     *\n     * Applications should check if the device supports this mode, before using\n     * {@link android.view.Window#setSustainedPerformanceMode}.\n     *\n     * @return Returns True if the device supports it, false otherwise.\n     *\n     * @see android.view.Window#setSustainedPerformanceMode\n     ",
    "links" : [ "android.view.Window#setSustainedPerformanceMode" ]
  }, {
    "name" : "public int getCurrentThermalStatus()",
    "returnType" : "int",
    "comment" : "\n     * This function returns the current thermal status of the device.\n     *\n     * @return thermal status as int, {@link #THERMAL_STATUS_NONE} if device in not under\n     * thermal throttling.\n     ",
    "links" : [ "#THERMAL_STATUS_NONE" ]
  }, {
    "name" : "public void addThermalStatusListener(@NonNull OnThermalStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This function adds a listener for thermal status change, listen call back will be\n     * enqueued tasks on the main thread\n     *\n     * @param listener listener to be added,\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addThermalStatusListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnThermalStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This function adds a listener for thermal status change.\n     *\n     * @param executor {@link Executor} to handle listener callback.\n     * @param listener listener to be added.\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void removeThermalStatusListener(@NonNull OnThermalStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This function removes a listener for thermal status change\n     *\n     * @param listener listener to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getThermalHeadroom(@IntRange(from = 0, to = 60) int forecastSeconds)",
    "returnType" : "float",
    "comment" : "\n     * Provides an estimate of how much thermal headroom the device currently has before hitting\n     * severe throttling.\n     *\n     * Note that this only attempts to track the headroom of slow-moving sensors, such as the skin\n     * temperature sensor. This means that there is no benefit to calling this function more\n     * frequently than about once per second, and attempts to call significantly more frequently may\n     * result in the function returning {@code NaN}.\n     * <p>\n     * In addition, in order to be able to provide an accurate forecast, the system does not attempt\n     * to forecast until it has multiple temperature samples from which to extrapolate. This should\n     * only take a few seconds from the time of the first call, but during this time, no forecasting\n     * will occur, and the current headroom will be returned regardless of the value of\n     * {@code forecastSeconds}.\n     * <p>\n     * The value returned is a non-negative float that represents how much of the thermal envelope\n     * is in use (or is forecasted to be in use). A value of 1.0 indicates that the device is (or\n     * will be) throttled at {@link #THERMAL_STATUS_SEVERE}. Such throttling can affect the CPU,\n     * GPU, and other subsystems. Values may exceed 1.0, but there is no implied mapping to specific\n     * thermal status levels beyond that point. This means that values greater than 1.0 may\n     * correspond to {@link #THERMAL_STATUS_SEVERE}, but may also represent heavier throttling.\n     * <p>\n     * A value of 0.0 corresponds to a fixed distance from 1.0, but does not correspond to any\n     * particular thermal status or temperature. Values on (0.0, 1.0] may be expected to scale\n     * linearly with temperature, though temperature changes over time are typically not linear.\n     * Negative values will be clamped to 0.0 before returning.\n     *\n     * @param forecastSeconds how many seconds in the future to forecast. Given that device\n     *                        conditions may change at any time, forecasts from further in the\n     *                        future will likely be less accurate than forecasts in the near future.\n     * @return a value greater than or equal to 0.0 where 1.0 indicates the SEVERE throttling\n     *         threshold, as described above. Returns NaN if the device does not support this\n     *         functionality or if this function is called significantly faster than once per\n     *         second.\n     ",
    "links" : [ "#THERMAL_STATUS_SEVERE" ]
  }, {
    "name" : "public void setDozeAfterScreenOff(boolean dozeAfterScreenOf)",
    "returnType" : "void",
    "comment" : "\n     * If true, the doze component is not started until after the screen has been\n     * turned off and the screen off animation has been performed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAmbientDisplayAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if ambient display is available on the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void suppressAmbientDisplay(@NonNull String token, boolean suppress)",
    "returnType" : "void",
    "comment" : "\n     * If true, suppresses the current ambient display configuration and disables ambient display.\n     *\n     * <p>This method has no effect if {@link #isAmbientDisplayAvailable()} is false.\n     *\n     * @param token A persistable identifier for the ambient display suppression that is unique\n     *              within the calling application.\n     * @param suppress If set to {@code true}, ambient display will be suppressed. If set to\n     *                 {@code false}, ambient display will no longer be suppressed for the given\n     *                 token.\n     * @hide\n     ",
    "links" : [ "#isAmbientDisplayAvailable()" ]
  }, {
    "name" : "public boolean isAmbientDisplaySuppressedForToken(@NonNull String token)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if ambient display is suppressed by the calling app with the given\n     * {@code token}.\n     *\n     * <p>This method will return false if {@link #isAmbientDisplayAvailable()} is false.\n     *\n     * @param token The identifier of the ambient display suppression.\n     * @hide\n     ",
    "links" : [ "#isAmbientDisplayAvailable()" ]
  }, {
    "name" : "public boolean isAmbientDisplaySuppressed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if ambient display is suppressed by <em>any</em> app with <em>any</em> token.\n     *\n     * <p>This method will return false if {@link #isAmbientDisplayAvailable()} is false.\n     * @hide\n     ",
    "links" : [ "#isAmbientDisplayAvailable()" ]
  }, {
    "name" : "public int getLastShutdownReason()",
    "returnType" : "int",
    "comment" : "\n     * Returns the reason the phone was last shutdown. Calling app must have the\n     * {@link android.Manifest.permission#DEVICE_POWER} permission to request this information.\n     * @return Reason for shutdown as an int, {@link #SHUTDOWN_REASON_UNKNOWN} if the file could\n     * not be accessed.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#DEVICE_POWER", "#SHUTDOWN_REASON_UNKNOWN" ]
  }, {
    "name" : "public int getLastSleepReason()",
    "returnType" : "int",
    "comment" : "\n     * Returns the reason the device last went to sleep (i.e. the last value of\n     * the second argument of {@link #goToSleep(long, int, int) goToSleep}).\n     *\n     * @return One of the {@code GO_TO_SLEEP_REASON_*} constants.\n     *\n     * @hide\n     ",
    "links" : [ "#goToSleep(long" ]
  }, {
    "name" : "public boolean forceSuspend()",
    "returnType" : "boolean",
    "comment" : "\n     * Forces the device to go to suspend, even if there are currently wakelocks being held.\n     * <b>Caution</b>\n     * This is a very dangerous command as it puts the device to sleep immediately. Apps and parts\n     * of the system will not be notified and will not have an opportunity to save state prior to\n     * the device going to suspend.\n     * This method should only be used in very rare circumstances where the device is intended\n     * to appear as completely off to the user and they have a well understood, reliable way of\n     * re-enabling it.\n     * </p><p>\n     * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.\n     * </p>\n     *\n     * @return true on success, false otherwise.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#DEVICE_POWER" ]
  }, {
    "name" : "public static void invalidatePowerSaveModeCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateIsInteractiveCaches()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PARTIAL_WAKE_LOCK", "SCREEN_DIM_WAKE_LOCK", "SCREEN_BRIGHT_WAKE_LOCK", "FULL_WAKE_LOCK", "PROXIMITY_SCREEN_OFF_WAKE_LOCK", "DOZE_WAKE_LOCK", "DRAW_WAKE_LOCK", "WAKE_LOCK_LEVEL_MASK", "ACQUIRE_CAUSES_WAKEUP", "ON_AFTER_RELEASE", "UNIMPORTANT_FOR_LOGGING", "RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY", "RELEASE_FLAG_TIMEOUT", "BRIGHTNESS_ON", "BRIGHTNESS_OFF", "BRIGHTNESS_DEFAULT", "BRIGHTNESS_INVALID", "BRIGHTNESS_MAX", "BRIGHTNESS_MIN", "BRIGHTNESS_OFF_FLOAT", "BRIGHTNESS_INVALID_FLOAT", "USER_ACTIVITY_EVENT_OTHER", "USER_ACTIVITY_EVENT_BUTTON", "USER_ACTIVITY_EVENT_TOUCH", "USER_ACTIVITY_EVENT_ACCESSIBILITY", "USER_ACTIVITY_EVENT_ATTENTION", "USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS", "USER_ACTIVITY_FLAG_INDIRECT", "GO_TO_SLEEP_REASON_MIN", "GO_TO_SLEEP_REASON_APPLICATION", "GO_TO_SLEEP_REASON_DEVICE_ADMIN", "GO_TO_SLEEP_REASON_TIMEOUT", "GO_TO_SLEEP_REASON_LID_SWITCH", "GO_TO_SLEEP_REASON_POWER_BUTTON", "GO_TO_SLEEP_REASON_HDMI", "GO_TO_SLEEP_REASON_SLEEP_BUTTON", "GO_TO_SLEEP_REASON_ACCESSIBILITY", "GO_TO_SLEEP_REASON_FORCE_SUSPEND", "GO_TO_SLEEP_REASON_INATTENTIVE", "GO_TO_SLEEP_REASON_QUIESCENT", "GO_TO_SLEEP_REASON_MAX", "GO_TO_SLEEP_FLAG_NO_DOZE", "BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM", "BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM", "BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT", "BRIGHTNESS_CONSTRAINT_TYPE_DIM", "BRIGHTNESS_CONSTRAINT_TYPE_DOZE", "BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM_VR", "BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM_VR", "BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT_VR", "WAKE_REASON_UNKNOWN", "WAKE_REASON_POWER_BUTTON", "WAKE_REASON_APPLICATION", "WAKE_REASON_PLUGGED_IN", "WAKE_REASON_GESTURE", "WAKE_REASON_CAMERA_LAUNCH", "WAKE_REASON_WAKE_KEY", "WAKE_REASON_WAKE_MOTION", "WAKE_REASON_HDMI", "WAKE_REASON_LID", "REBOOT_RECOVERY", "REBOOT_RECOVERY_UPDATE", "REBOOT_REQUESTED_BY_DEVICE_OWNER", "REBOOT_SAFE_MODE", "REBOOT_USERSPACE", "REBOOT_QUIESCENT", "SHUTDOWN_USER_REQUESTED", "SHUTDOWN_BATTERY_THERMAL_STATE", "SHUTDOWN_THERMAL_STATE", "SHUTDOWN_LOW_BATTERY", "SHUTDOWN_REASON_UNKNOWN", "SHUTDOWN_REASON_SHUTDOWN", "SHUTDOWN_REASON_REBOOT", "SHUTDOWN_REASON_USER_REQUESTED", "SHUTDOWN_REASON_THERMAL_SHUTDOWN", "SHUTDOWN_REASON_LOW_BATTERY", "SHUTDOWN_REASON_BATTERY_THERMAL", "LOCATION_MODE_NO_CHANGE", "LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF", "LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF", "LOCATION_MODE_FOREGROUND_ONLY", "LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF", "MIN_LOCATION_MODE", "MAX_LOCATION_MODE", "CACHE_KEY_IS_POWER_SAVE_MODE_PROPERTY", "CACHE_KEY_IS_INTERACTIVE_PROPERTY", "MAX_CACHE_ENTRIES", "mPowerSaveModeCache", "mInteractiveCache", "mContext", "mService", "mHandler", "mThermalService", "mPowerWhitelistManager", "mListenerMap", "POWER_SAVE_MODE_TRIGGER_PERCENTAGE", "POWER_SAVE_MODE_TRIGGER_DYNAMIC", "THERMAL_STATUS_NONE", "THERMAL_STATUS_LIGHT", "THERMAL_STATUS_MODERATE", "THERMAL_STATUS_SEVERE", "THERMAL_STATUS_CRITICAL", "THERMAL_STATUS_EMERGENCY", "THERMAL_STATUS_SHUTDOWN", "mLastHeadroomUpdate", "MINIMUM_HEADROOM_TIME_MILLIS", "ACTION_POWER_SAVE_MODE_CHANGED", "ACTION_POWER_SAVE_MODE_CHANGED_INTERNAL", "ACTION_DEVICE_IDLE_MODE_CHANGED", "ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED", "ACTION_POWER_SAVE_WHITELIST_CHANGED", "ACTION_POWER_SAVE_TEMP_WHITELIST_CHANGED", "ACTION_POWER_SAVE_MODE_CHANGING", "EXTRA_POWER_SAVE_MODE", "PRE_IDLE_TIMEOUT_MODE_NORMAL", "PRE_IDLE_TIMEOUT_MODE_LONG", "PRE_IDLE_TIMEOUT_MODE_SHORT" ],
  "methodNames" : [ "public static String sleepReasonToString(int sleepReason)", "public static String wakeReasonToString(@WakeReason int wakeReason)", "public static String locationPowerSaveModeToString(@LocationPowerSaveMode int mode)", "private PowerWhitelistManager getPowerWhitelistManager()", "public int getMinimumScreenBrightnessSetting()", "public int getMaximumScreenBrightnessSetting()", "public int getDefaultScreenBrightnessSetting()", "public int getMinimumScreenBrightnessForVrSetting()", "public int getMaximumScreenBrightnessForVrSetting()", "public int getDefaultScreenBrightnessForVrSetting()", "public float getBrightnessConstraint(int constraint)", "public WakeLock newWakeLock(int levelAndFlags, String tag)", "public static void validateWakeLockParameters(int levelAndFlags, String tag)", "public void userActivity(long when, boolean noChangeLights)", "public void userActivity(long when, int event, int flags)", "public void goToSleep(long time)", "public void goToSleep(long time, int reason, int flags)", "public void wakeUp(long time)", "public void wakeUp(long time, String details)", "public void wakeUp(long time, @WakeReason int reason, String details)", "public void nap(long time)", "public void dream(long time)", "public void boostScreenBrightness(long time)", "public boolean isWakeLockLevelSupported(int level)", "public boolean isScreenOn()", "public boolean isInteractive()", "public static boolean isRebootingUserspaceSupportedImpl()", "public boolean isRebootingUserspaceSupported()", "public void reboot(@Nullable String reason)", "public void rebootSafeMode()", "public boolean isPowerSaveMode()", "public boolean setPowerSaveModeEnabled(boolean mode)", "public boolean setDynamicPowerSaveHint(boolean powerSaveHint, int disableThreshold)", "public boolean setAdaptivePowerSavePolicy(@NonNull BatterySaverPolicyConfig config)", "public boolean setAdaptivePowerSaveEnabled(boolean enabled)", "public int getPowerSaveModeTrigger()", "public PowerSaveState getPowerSaveState(@ServiceType int serviceType)", "public int getLocationPowerSaveMode()", "public boolean isDeviceIdleMode()", "public boolean isLightDeviceIdleMode()", "public boolean isIgnoringBatteryOptimizations(String packageName)", "public void shutdown(boolean confirm, String reason, boolean wait)", "public boolean isSustainedPerformanceModeSupported()", "public int getCurrentThermalStatus()", "public void addThermalStatusListener(@NonNull OnThermalStatusChangedListener listener)", "public void addThermalStatusListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnThermalStatusChangedListener listener)", "public void removeThermalStatusListener(@NonNull OnThermalStatusChangedListener listener)", "public float getThermalHeadroom(@IntRange(from = 0, to = 60) int forecastSeconds)", "public void setDozeAfterScreenOff(boolean dozeAfterScreenOf)", "public boolean isAmbientDisplayAvailable()", "public void suppressAmbientDisplay(@NonNull String token, boolean suppress)", "public boolean isAmbientDisplaySuppressedForToken(@NonNull String token)", "public boolean isAmbientDisplaySuppressed()", "public int getLastShutdownReason()", "public int getLastSleepReason()", "public boolean forceSuspend()", "public static void invalidatePowerSaveModeCaches()", "public static void invalidateIsInteractiveCaches()" ]
}