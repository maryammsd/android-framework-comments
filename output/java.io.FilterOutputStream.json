{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/FilterOutputStream.java",
  "packageName" : "java.io",
  "className" : "FilterOutputStream",
  "comment" : "\n * This class is the superclass of all classes that filter output\n * streams. These streams sit on top of an already existing output\n * stream (the <i>underlying</i> output stream) which it uses as its\n * basic sink of data, but possibly transforming the data along the\n * way or providing additional functionality.\n * <p>\n * The class <code>FilterOutputStream</code> itself simply overrides\n * all methods of <code>OutputStream</code> with versions that pass\n * all requests to the underlying output stream. Subclasses of\n * <code>FilterOutputStream</code> may further override some of these\n * methods as well as provide additional methods and fields.\n *\n * @author  Jonathan Payne\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "out",
    "type" : "OutputStream",
    "comment" : "\n     * The underlying output stream to be filtered.\n     ",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "\n     * Whether the stream is closed; implicitly initialized to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "\n     * Object used to prevent a race on the 'closed' instance variable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified <code>byte</code> to this output stream.\n     * <p>\n     * The <code>write</code> method of <code>FilterOutputStream</code>\n     * calls the <code>write</code> method of its underlying output stream,\n     * that is, it performs {@code out.write(b)}.\n     * <p>\n     * Implements the abstract {@code write} method of {@code OutputStream}.\n     *\n     * @param      b   the <code>byte</code>.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>b.length</code> bytes to this output stream.\n     * <p>\n     * The <code>write</code> method of <code>FilterOutputStream</code>\n     * calls its <code>write</code> method of three arguments with the\n     * arguments <code>b</code>, <code>0</code>, and\n     * <code>b.length</code>.\n     * <p>\n     * Note that this method does not call the one-argument\n     * <code>write</code> method of its underlying output stream with\n     * the single argument <code>b</code>.\n     *\n     * @param      b   the data to be written.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#write(byte[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>len</code> bytes from the specified\n     * <code>byte</code> array starting at offset <code>off</code> to\n     * this output stream.\n     * <p>\n     * The <code>write</code> method of <code>FilterOutputStream</code>\n     * calls the <code>write</code> method of one argument on each\n     * <code>byte</code> to output.\n     * <p>\n     * Note that this method does not call the <code>write</code> method\n     * of its underlying output stream with the same arguments. Subclasses\n     * of <code>FilterOutputStream</code> should provide a more efficient\n     * implementation of this method.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#write(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this output stream and forces any buffered output bytes\n     * to be written out to the stream.\n     * <p>\n     * The <code>flush</code> method of <code>FilterOutputStream</code>\n     * calls the <code>flush</code> method of its underlying output stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this output stream and releases any system resources\n     * associated with the stream.\n     * <p>\n     * When not already closed, the {@code close} method of {@code\n     * FilterOutputStream} calls its {@code flush} method, and then\n     * calls the {@code close} method of its underlying output stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#flush()\n     * @see        java.io.FilterOutputStream#out\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int b) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void flush() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "out", "closed", "closeLock" ]
}