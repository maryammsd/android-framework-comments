{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeAudio.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeAudio",
  "comment" : "\n * This class provides the public APIs to control the LeAudio profile.\n *\n * <p>BluetoothLeAudio is a proxy object for controlling the Bluetooth LE Audio Service via IPC. Use\n * {@link BluetoothAdapter#getProfileProxy} to get the BluetoothLeAudio proxy object.\n *\n * <p>Android only supports one set of connected Bluetooth LeAudio device at a time. Each method is\n * protected with its appropriate permission.\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutorMap",
    "type" : "Map<Callback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IBluetoothLeAudioCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the LeAudio profile. Please note\n     * that in the binaural case, there will be two different LE devices for the left and right side\n     * and each device will have their own connection state changes.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_LE_AUDIO_ACTIVE_DEVICE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the selection of a connected device as active.\n     *\n     * <p>This intent will have one extra:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can be null if no device\n     *       is active.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE" ]
  }, {
    "name" : "CONTEXT_TYPE_INVALID",
    "type" : "int",
    "comment" : "\n     * Indicates invalid/unset audio context.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Indicates unspecified audio content.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_CONVERSATIONAL",
    "type" : "int",
    "comment" : "\n     * Indicates conversation between humans as, for example, in telephony or video calls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_MEDIA",
    "type" : "int",
    "comment" : "\n     * Indicates media as, for example, in music, public radio, podcast or video soundtrack.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_GAME",
    "type" : "int",
    "comment" : "\n     * Indicates audio associated with a video gaming.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_INSTRUCTIONAL",
    "type" : "int",
    "comment" : "\n     * Indicates instructional audio as, for example, in navigation, announcements or user guidance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_VOICE_ASSISTANTS",
    "type" : "int",
    "comment" : "\n     * Indicates man machine communication as, for example, with voice recognition or virtual\n     * assistant.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_LIVE",
    "type" : "int",
    "comment" : "\n     * Indicates audio associated with a live audio stream.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_SOUND_EFFECTS",
    "type" : "int",
    "comment" : "\n     * Indicates sound effects as, for example, in keyboard, touch feedback; menu and user interface\n     * sounds, and other system sounds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_NOTIFICATIONS",
    "type" : "int",
    "comment" : "\n     * Indicates notification and reminder sounds, attention-seeking audio, for example, in beeps\n     * signaling the arrival of a message.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_RINGTONE",
    "type" : "int",
    "comment" : "\n     * Indicates ringtone as in a call alert.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_ALERTS",
    "type" : "int",
    "comment" : "\n     * Indicates alerts and timers, immediate alerts as, for example, in a low battery alarm, timer\n     * expiry or alarm clock.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_EMERGENCY_ALARM",
    "type" : "int",
    "comment" : "\n     * Indicates emergency alarm as, for example, with fire alarms or other urgent alerts.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTEXTS_ALL",
    "type" : "int",
    "comment" : "\n     * Indicates all contexts.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_ID_INVALID",
    "type" : "int",
    "comment" : " This represents an invalid group ID. ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_INVALID",
    "type" : "int",
    "comment" : "\n     * This represents an invalid audio location.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_LOW_FREQ_EFFECTS_ONE",
    "type" : "int",
    "comment" : "\n     * This represents an audio location low frequency effects 1.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_BACK_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location back left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_BACK_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location back right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_LEFT_OF_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front left of center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_RIGHT_OF_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front right of center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_BACK_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location back center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_LOW_FREQ_EFFECTS_TWO",
    "type" : "int",
    "comment" : "\n     * This represents an audio location low frequency effects 2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_SIDE_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location side left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_SIDE_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location side right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_FRONT_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top front left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_FRONT_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top front right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_FRONT_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top front center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_BACK_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top back left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_BACK_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top back right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_SIDE_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top side left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_SIDE_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top side right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_TOP_BACK_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location top back center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_BOTTOM_FRONT_CENTER",
    "type" : "int",
    "comment" : "\n     * This represents an audio location bottom front center.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_BOTTOM_FRONT_LEFT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location bottom front left.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_BOTTOM_FRONT_RIGHT",
    "type" : "int",
    "comment" : "\n     * This represents an audio location bottom front right.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_LEFT_WIDE",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front left wide.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_FRONT_RIGHT_WIDE",
    "type" : "int",
    "comment" : "\n     * This represents an audio location front right wide.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_LEFT_SURROUND",
    "type" : "int",
    "comment" : "\n     * This represents an audio location left surround.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_LOCATION_RIGHT_SURROUND",
    "type" : "int",
    "comment" : "\n     * This represents an audio location right surround.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LE_AUDIO_GROUP_ID",
    "type" : "String",
    "comment" : "\n     * Contains group id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LE_AUDIO_DIRECTION",
    "type" : "String",
    "comment" : "\n     * Contains bit mask for direction, bit 0 set when Sink, bit 1 set when Source.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LE_AUDIO_SOURCE_LOCATION",
    "type" : "String",
    "comment" : "\n     * Contains source location as per Bluetooth Assigned Numbers\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LE_AUDIO_SINK_LOCATION",
    "type" : "String",
    "comment" : "\n     * Contains sink location as per Bluetooth Assigned Numbers\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LE_AUDIO_AVAILABLE_CONTEXTS",
    "type" : "String",
    "comment" : "\n     * Contains available context types for group as per Bluetooth Assigned Numbers\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GROUP_STATUS_ACTIVE",
    "type" : "int",
    "comment" : "\n     * Indicating that group is Active ( Audio device is available )\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_STATUS_INACTIVE",
    "type" : "int",
    "comment" : "\n     * Indicating that group is Inactive ( Audio device is not available )\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_STREAM_STATUS_IDLE",
    "type" : "int",
    "comment" : "\n     * Indicating that group stream is in IDLE (not streaming)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_STREAM_STATUS_STREAMING",
    "type" : "int",
    "comment" : "\n     * Indicating that group is STREAMING\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothLeAudio",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothLeAudio getService()",
    "returnType" : "IBluetoothLeAudio",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is already connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that connection\n     * state intent for the profile will be broadcasted with the state. Users can get the connection\n     * state of the profile from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p>This API will return false in scenarios like the profile on the Bluetooth device is not in\n     * connected state etc. When this API returns, true, it is guaranteed that the connection state\n     * change intent will be broadcasted with the state. Users can get the disconnection state of\n     * the profile from this intent.\n     *\n     * <p>If the disconnection is initiated by a remote device, the state will transition from\n     * {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by\n     * the host (local) device the state will transition from {@link #STATE_CONNECTED} to state\n     * {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link\n     * #STATE_DISCONNECTING} can be used to distinguish between the two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public BluetoothDevice getConnectedGroupLeadDevice(int groupId)",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get Lead device for the group.\n     *\n     * <p>Lead device is the device that can be used as an active device in the system. Active\n     * devices points to the Audio Device for the Le Audio group. This method returns the Lead\n     * devices for the connected LE Audio group and this device should be used in the\n     * setActiveDevice() method by other parts of the system, which wants to set to active a\n     * particular Le Audio group.\n     *\n     * <p>Note: getActiveDevice() returns the Lead device for the currently active LE Audio group.\n     * Note: When Lead device gets disconnected while Le Audio group is active and has more devices\n     * in the group, then Lead device will not change. If Lead device gets disconnected, for the Le\n     * Audio group which is not active, a new Lead device will be chosen\n     *\n     * @param groupId The group id.\n     * @return group lead device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link Callback} that will be invoked during the operation of this profile.\n     *\n     * <p>Repeated registration of the same <var>callback</var> object will have no effect after the\n     * first call to this method, even when the <var>executor</var> is different. API caller would\n     * have to call {@link #unregisterCallback(Callback)} with the same callback object before\n     * registering it again.\n     *\n     * <p>The {@link Callback} will be invoked only if there is codec status changed for the remote\n     * device or the device is connected/disconnected in a certain group or the group status is\n     * changed.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException if a null executor or callback is given\n     * @throws IllegalArgumentException the callback is already registered\n     * @hide\n     ",
    "links" : [ "#unregisterCallback(Callback)", "Callback", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link Callback}.\n     *\n     * <p>The same {@link Callback} object used when calling {@link #registerCallback(Executor,\n     * Callback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away\n     *\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException when callback is null\n     * @throws IllegalArgumentException when no callback is registered\n     * @hide\n     ",
    "links" : [ "Callback", "#registerCallback(Executor" ]
  }, {
    "name" : "public boolean setActiveDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Select a connected device as active.\n     *\n     * <p>The active device selection is per profile. An active device's purpose is\n     * profile-specific. For example, LeAudio audio streaming is to the active LeAudio device. If a\n     * remote device is not connected, it cannot be selected as active.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is not connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that the {@link\n     * #ACTION_LE_AUDIO_ACTIVE_DEVICE_CHANGED} intent will be broadcasted with the active device.\n     *\n     * @param device the remote Bluetooth device. Could be null to clear the active device and stop\n     *     streaming audio to a Bluetooth device.\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#ACTION_LE_AUDIO_ACTIVE_DEVICE_CHANGED" ]
  }, {
    "name" : "public List<BluetoothDevice> getActiveDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the connected LeAudio devices that are active\n     *\n     * @return the list of active devices. Returns empty list on error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGroupId(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get device group id. Devices with same group id belong to same group (i.e left and right\n     * earbud)\n     *\n     * @param device LE Audio capable device\n     * @return group id that this device currently belongs to, {@link #GROUP_ID_INVALID} when this\n     *     device does not belong to any group\n     ",
    "links" : [ "#GROUP_ID_INVALID" ]
  }, {
    "name" : "public void setVolume(@IntRange(from = 0, to = 255) int volume)",
    "returnType" : "void",
    "comment" : "\n     * Set volume for the streaming devices\n     *\n     * @param volume volume to set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean groupAddNode(int groupId, @NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Add device to the given group.\n     *\n     * @param groupId group ID the device is being added to\n     * @param device the active device\n     * @return true on success, otherwise false\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean groupRemoveNode(int groupId, @NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove device from a given group.\n     *\n     * @param groupId group ID the device is being removed from\n     * @param device the active device\n     * @return true on success, otherwise false\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioLocation(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the audio location for the device. The return value is a bit field. The bit definition is\n     * included in Bluetooth SIG Assigned Numbers - Generic Audio - Audio Location Definitions. ex.\n     * Front Left: 0x00000001 Front Right: 0x00000002 Front Left | Front Right: 0x00000003\n     *\n     * @param device the bluetooth device\n     * @return The bit field of audio location for the device, if bluetooth is off, return\n     *     AUDIO_LOCATION_INVALID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInbandRingtoneEnabled(int groupId)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if inband ringtone is enabled by the LE Audio group. Group id for the device can be\n     * found with {@link BluetoothLeAudio#getGroupId}.\n     *\n     * @param groupId LE Audio group id\n     * @return {@code true} if inband ringtone is enabled, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeAudio#getGroupId" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getConnectionPolicy(@Nullable BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * Helper for converting a state to a string.\n     *\n     * <p>For debug use only - strings are not internationalized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothLeAudioCodecStatus getCodecStatus(int groupId)",
    "returnType" : "BluetoothLeAudioCodecStatus",
    "comment" : "\n     * Gets the current codec status (configuration and capability).\n     *\n     * @param groupId The group id\n     * @return the current codec status\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodecConfigPreference(int groupId, @NonNull BluetoothLeAudioCodecConfig inputCodecConfig, @NonNull BluetoothLeAudioCodecConfig outputCodecConfig)",
    "returnType" : "void",
    "comment" : "\n     * Sets the codec configuration preference.\n     *\n     * @param groupId the groupId\n     * @param inputCodecConfig the input codec configuration preference\n     * @param outputCodecConfig the output codec configuration preference\n     * @throws IllegalStateException if LE Audio Service is null\n     * @throws NullPointerException if any of the configs is null\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothLeAudio getService()", "public BluetoothAdapter getAdapter()", "protected void finalize()", "public boolean connect(@Nullable BluetoothDevice device)", "public boolean disconnect(@Nullable BluetoothDevice device)", "public BluetoothDevice getConnectedGroupLeadDevice(int groupId)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)", "public void unregisterCallback(@NonNull Callback callback)", "public boolean setActiveDevice(@Nullable BluetoothDevice device)", "public List<BluetoothDevice> getActiveDevices()", "public int getGroupId(@NonNull BluetoothDevice device)", "public void setVolume(@IntRange(from = 0, to = 255) int volume)", "public boolean groupAddNode(int groupId, @NonNull BluetoothDevice device)", "public boolean groupRemoveNode(int groupId, @NonNull BluetoothDevice device)", "public int getAudioLocation(@NonNull BluetoothDevice device)", "public boolean isInbandRingtoneEnabled(int groupId)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getConnectionPolicy(@Nullable BluetoothDevice device)", "public static String stateToString(int state)", "private boolean isValidDevice(@Nullable BluetoothDevice device)", "private static void log(String msg)", "public BluetoothLeAudioCodecStatus getCodecStatus(int groupId)", "public void setCodecConfigPreference(int groupId, @NonNull BluetoothLeAudioCodecConfig inputCodecConfig, @NonNull BluetoothLeAudioCodecConfig outputCodecConfig)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCallbackExecutorMap", "mCloseGuard", "mCallback", "ACTION_LE_AUDIO_CONNECTION_STATE_CHANGED", "ACTION_LE_AUDIO_ACTIVE_DEVICE_CHANGED", "CONTEXT_TYPE_INVALID", "CONTEXT_TYPE_UNSPECIFIED", "CONTEXT_TYPE_CONVERSATIONAL", "CONTEXT_TYPE_MEDIA", "CONTEXT_TYPE_GAME", "CONTEXT_TYPE_INSTRUCTIONAL", "CONTEXT_TYPE_VOICE_ASSISTANTS", "CONTEXT_TYPE_LIVE", "CONTEXT_TYPE_SOUND_EFFECTS", "CONTEXT_TYPE_NOTIFICATIONS", "CONTEXT_TYPE_RINGTONE", "CONTEXT_TYPE_ALERTS", "CONTEXT_TYPE_EMERGENCY_ALARM", "CONTEXTS_ALL", "GROUP_ID_INVALID", "AUDIO_LOCATION_INVALID", "AUDIO_LOCATION_FRONT_LEFT", "AUDIO_LOCATION_FRONT_RIGHT", "AUDIO_LOCATION_FRONT_CENTER", "AUDIO_LOCATION_LOW_FREQ_EFFECTS_ONE", "AUDIO_LOCATION_BACK_LEFT", "AUDIO_LOCATION_BACK_RIGHT", "AUDIO_LOCATION_FRONT_LEFT_OF_CENTER", "AUDIO_LOCATION_FRONT_RIGHT_OF_CENTER", "AUDIO_LOCATION_BACK_CENTER", "AUDIO_LOCATION_LOW_FREQ_EFFECTS_TWO", "AUDIO_LOCATION_SIDE_LEFT", "AUDIO_LOCATION_SIDE_RIGHT", "AUDIO_LOCATION_TOP_FRONT_LEFT", "AUDIO_LOCATION_TOP_FRONT_RIGHT", "AUDIO_LOCATION_TOP_FRONT_CENTER", "AUDIO_LOCATION_TOP_CENTER", "AUDIO_LOCATION_TOP_BACK_LEFT", "AUDIO_LOCATION_TOP_BACK_RIGHT", "AUDIO_LOCATION_TOP_SIDE_LEFT", "AUDIO_LOCATION_TOP_SIDE_RIGHT", "AUDIO_LOCATION_TOP_BACK_CENTER", "AUDIO_LOCATION_BOTTOM_FRONT_CENTER", "AUDIO_LOCATION_BOTTOM_FRONT_LEFT", "AUDIO_LOCATION_BOTTOM_FRONT_RIGHT", "AUDIO_LOCATION_FRONT_LEFT_WIDE", "AUDIO_LOCATION_FRONT_RIGHT_WIDE", "AUDIO_LOCATION_LEFT_SURROUND", "AUDIO_LOCATION_RIGHT_SURROUND", "EXTRA_LE_AUDIO_GROUP_ID", "EXTRA_LE_AUDIO_DIRECTION", "EXTRA_LE_AUDIO_SOURCE_LOCATION", "EXTRA_LE_AUDIO_SINK_LOCATION", "EXTRA_LE_AUDIO_AVAILABLE_CONTEXTS", "mAdapter", "mAttributionSource", "GROUP_STATUS_ACTIVE", "GROUP_STATUS_INACTIVE", "GROUP_STREAM_STATUS_IDLE", "GROUP_STREAM_STATUS_STREAMING", "mService" ]
}