{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/text/LineBreaker_Delegate.java",
  "packageName" : "android.graphics.text",
  "className" : "LineBreaker_Delegate",
  "comment" : "\n * Delegate that provides implementation for native methods in {@link android.text.StaticLayout}\n * <p/>\n * Through the layoutlib_create tool, selected methods of StaticLayout have been replaced\n * by calls to methods of the same name in this delegate class.\n *\n ",
  "variables" : [ {
    "name" : "CHAR_SPACE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_TAB",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_NEWLINE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_ZWSP",
    "type" : "char",
    "comment" : " Zero width space.",
    "links" : [ ]
  }, {
    "name" : "sBuilderManager",
    "type" : "DelegateManager<Builder>",
    "comment" : " ---- Builder delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sFinalizer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sResultManager",
    "type" : "DelegateManager<Result>",
    "comment" : " ---- Result delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sResultFinalizer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static long nInit(@BreakStrategy int breakStrategy, @HyphenationFrequency int hyphenationFrequency, boolean isJustified, @Nullable int[] indents)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nGetReleaseFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nComputeLineBreaks(long nativePtr, @NonNull char[] text, long measuredTextPtr, int length, float firstWidth, int firstWidthLineCount, float restWidth, @Nullable float[] variableTabStops, float defaultTabStop, int indentsOffset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetLineCount(long ptr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetLineBreakOffset(long ptr, int idx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetLineWidth(long ptr, int idx)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetLineAscent(long ptr, int idx)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetLineDescent(long ptr, int idx)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetLineFlag(long ptr, int idx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nGetReleaseResultFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Primitive> computePrimitives(@NonNull char[] text, @NonNull float[] widths, int length, @NonNull List<Integer> breaks)",
    "returnType" : "List<Primitive>",
    "comment" : "\n     * Compute metadata each character - things which help in deciding if it's possible to break\n     * at a point or not.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CHAR_SPACE", "CHAR_TAB", "CHAR_NEWLINE", "CHAR_ZWSP", "sBuilderManager", "sFinalizer", "sResultManager", "sResultFinalizer" ],
  "methodNames" : [ " static long nInit(@BreakStrategy int breakStrategy, @HyphenationFrequency int hyphenationFrequency, boolean isJustified, @Nullable int[] indents)", " static long nGetReleaseFunc()", " static long nComputeLineBreaks(long nativePtr, @NonNull char[] text, long measuredTextPtr, int length, float firstWidth, int firstWidthLineCount, float restWidth, @Nullable float[] variableTabStops, float defaultTabStop, int indentsOffset)", " static int nGetLineCount(long ptr)", " static int nGetLineBreakOffset(long ptr, int idx)", " static float nGetLineWidth(long ptr, int idx)", " static float nGetLineAscent(long ptr, int idx)", " static float nGetLineDescent(long ptr, int idx)", " static int nGetLineFlag(long ptr, int idx)", " static long nGetReleaseResultFunc()", "private static List<Primitive> computePrimitives(@NonNull char[] text, @NonNull float[] widths, int length, @NonNull List<Integer> breaks)" ]
}