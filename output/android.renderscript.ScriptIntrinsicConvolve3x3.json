{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/ScriptIntrinsicConvolve3x3.java",
  "packageName" : "android.renderscript",
  "className" : "ScriptIntrinsicConvolve3x3",
  "comment" : "\n * Intrinsic for applying a 3x3 convolve to an allocation.\n *\n *",
  "variables" : [ {
    "name" : "mValues",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInput",
    "type" : "Allocation",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ScriptIntrinsicConvolve3x3 create(RenderScript rs, Element e)",
    "returnType" : "ScriptIntrinsicConvolve3x3",
    "comment" : "\n     * Supported elements types are {@link Element#U8}, {@link\n     * Element#U8_2}, {@link Element#U8_3}, {@link Element#U8_4},\n     * {@link Element#F32}, {@link Element#F32_2}, {@link\n     * Element#F32_3}, and {@link Element#F32_4}.\n     *\n     * <p> The default coefficients are:\n     * <code>\n     * <p> [ 0,  0,  0 ]\n     * <p> [ 0,  1,  0 ]\n     * <p> [ 0,  0,  0 ]\n     * </code>\n     *\n     * @param rs The RenderScript context\n     * @param e Element type for intputs and outputs\n     *\n     * @return ScriptIntrinsicConvolve3x3\n     ",
    "links" : [ "android.renderscript.Element#U8", "android.renderscript.Element#U8_4", "android.renderscript.Element#F32_4", "android.renderscript.Element#U8_3", "android.renderscript.Element#F32", "android.renderscript.Element#F32_3", "android.renderscript.Element#U8_2", "android.renderscript.Element#F32_2" ]
  }, {
    "name" : "public void setInput(Allocation ain)",
    "returnType" : "void",
    "comment" : "\n     * Set the input of the 3x3 convolve.\n     * Must match the element type supplied during create.\n     *\n     * @param ain The input allocation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCoefficients(float[] v)",
    "returnType" : "void",
    "comment" : "\n     * Set the coefficients for the convolve.\n     *\n     * <p> The convolve layout is:\n     * <code>\n     * <p> [ 0,  1,  2 ]\n     * <p> [ 3,  4,  5 ]\n     * <p> [ 6,  7,  8 ]\n     * </code>\n     *\n     * @param v The array of coefficients to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Apply the filter to the input and save to the specified\n     * allocation.\n     *\n     * @param aout Output allocation. Must match creation element\n     *             type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Apply the filter to the input and save to the specified\n     * allocation.\n     *\n     * @param aout Output allocation. Must match creation element\n     *             type.\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelID()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for this intrinsic kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.FieldID getFieldID_Input()",
    "returnType" : "Script.FieldID",
    "comment" : "\n     * Get a FieldID for the input field of this intrinsic.\n     *\n     * @return Script.FieldID The FieldID object.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mValues", "mInput" ],
  "methodNames" : [ "public static ScriptIntrinsicConvolve3x3 create(RenderScript rs, Element e)", "public void setInput(Allocation ain)", "public void setCoefficients(float[] v)", "public void forEach(Allocation aout)", "public void forEach(Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelID()", "public Script.FieldID getFieldID_Input()" ]
}