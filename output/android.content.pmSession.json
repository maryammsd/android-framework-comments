{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageInstaller.java",
  "packageName" : "android.content.pm",
  "className" : "Session",
  "comment" : "\n     * An installation that is being actively staged. For an install to succeed,\n     * all existing and new packages must have identical package names, version\n     * codes, and signing certificates.\n     * <p>\n     * A session may contain any number of split packages. If the application\n     * does not yet exist, this session must include a base package.\n     * <p>\n     * If an APK included in this session is already defined by the existing\n     * installation (for example, the same split name), the APK in this session\n     * will replace the existing APK.\n     * <p>\n     * In such a case that multiple packages need to be committed simultaneously,\n     * multiple sessions can be referenced by a single multi-package session.\n     * This session is created with no package name and calling\n     * {@link SessionParams#setMultiPackage()}. The individual session IDs can be\n     * added with {@link #addChildSessionId(int)} and commit of the multi-package\n     * session will result in all child sessions being committed atomically.\n     ",
  "variables" : [ {
    "name" : "mSession",
    "type" : "IPackageInstallerSession",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setProgress(float progress)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setStagingProgress(float progress)",
    "returnType" : "void",
    "comment" : "\n         * Set current progress of staging this session. Valid values are\n         * anywhere between 0 and 1.\n         * <p>\n         * Note that this progress may not directly correspond to the value\n         * reported by {@link SessionCallback#onProgressChanged(int, float)}, as\n         * the system may carve out a portion of the overall progress to\n         * represent its own internal installation work.\n         ",
    "links" : [ "SessionCallback#onProgressChanged" ]
  }, {
    "name" : "public void addProgress(float progress)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream openWrite(@NonNull String name, long offsetBytes, long lengthBytes) throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n         * Open a stream to write an APK file into the session.\n         * <p>\n         * The returned stream will start writing data at the requested offset\n         * in the underlying file, which can be used to resume a partially\n         * written file. If a valid file length is specified, the system will\n         * preallocate the underlying disk space to optimize placement on disk.\n         * It's strongly recommended to provide a valid file length when known.\n         * <p>\n         * You can write data into the returned stream, optionally call\n         * {@link #fsync(OutputStream)} as needed to ensure bytes have been\n         * persisted to disk, and then close when finished. All streams must be\n         * closed before calling {@link #commit(IntentSender)}.\n         *\n         * @param name arbitrary, unique name of your choosing to identify the\n         *            APK being written. You can open a file again for\n         *            additional writes (such as after a reboot) by using the\n         *            same name. This name is only meaningful within the context\n         *            of a single install session.\n         * @param offsetBytes offset into the file to begin writing at, or 0 to\n         *            start at the beginning of the file.\n         * @param lengthBytes total size of the file being written, used to\n         *            preallocate the underlying disk space, or -1 if unknown.\n         *            The system may clear various caches as needed to allocate\n         *            this space.\n         * @throws IOException if trouble opening the file for writing, such as\n         *             lack of disk space or unavailable media.\n         * @throws SecurityException if called after the session has been\n         *             sealed or abandoned\n         ",
    "links" : [ "#fsync", "#commit" ]
  }, {
    "name" : "public void write(@NonNull String name, long offsetBytes, long lengthBytes, @NonNull ParcelFileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void fsync(@NonNull OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Ensure that any outstanding data for given stream has been committed\n         * to disk. This is only valid for streams returned from\n         * {@link #openWrite(String, long, long)}.\n         ",
    "links" : [ "#openWrite" ]
  }, {
    "name" : "public String[] getNames() throws IOException",
    "returnType" : "String[]",
    "comment" : "\n         * Return all APK names contained in this session.\n         * <p>\n         * This returns all names which have been previously written through\n         * {@link #openWrite(String, long, long)} as part of this session.\n         *\n         * @throws SecurityException if called after the session has been\n         *             committed or abandoned.\n         ",
    "links" : [ "#openWrite" ]
  }, {
    "name" : "public InputStream openRead(@NonNull String name) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n         * Open a stream to read an APK file from the session.\n         * <p>\n         * This is only valid for names which have been previously written\n         * through {@link #openWrite(String, long, long)} as part of this\n         * session. For example, this stream may be used to calculate a\n         * {@link MessageDigest} of a written APK before committing.\n         *\n         * @throws SecurityException if called after the session has been\n         *             committed or abandoned.\n         ",
    "links" : [ "#openWrite", "MessageDigest" ]
  }, {
    "name" : "public void removeSplit(@NonNull String splitName) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Removes a split.\n         * <p>\n         * Split removals occur prior to adding new APKs. If upgrading a feature\n         * split, it is not expected nor desirable to remove the split prior to\n         * upgrading.\n         * <p>\n         * When split removal is bundled with new APKs, the packageName must be\n         * identical.\n         ",
    "links" : [ ]
  }, {
    "name" : "public DataLoaderParams getDataLoaderParams()",
    "returnType" : "DataLoaderParams",
    "comment" : "\n         * @return data loader params or null if the session is not using one.\n         *\n         * WARNING: This is a system API to aid internal development.\n         * Use at your own risk. It will change or be removed without warning.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addFile(@FileLocation int location, @NonNull String name, long lengthBytes, @NonNull byte[] metadata, @Nullable byte[] signature)",
    "returnType" : "void",
    "comment" : "\n         * Adds a file to session. On commit this file will be pulled from dataLoader.\n         *\n         * @param location target location for the file. Possible values:\n         *            {@link #LOCATION_DATA_APP},\n         *            {@link #LOCATION_MEDIA_OBB},\n         *            {@link #LOCATION_MEDIA_DATA}.\n         * @param name arbitrary, unique name of your choosing to identify the\n         *            APK being written. You can open a file again for\n         *            additional writes (such as after a reboot) by using the\n         *            same name. This name is only meaningful within the context\n         *            of a single install session.\n         * @param lengthBytes total size of the file being written.\n         *            The system may clear various caches as needed to allocate\n         *            this space.\n         * @param metadata additional info use by dataLoader to pull data for the file.\n         * @param signature additional file signature, e.g.\n         *                  <a href=\"https://source.android.com/security/apksigning/v4.html\">APK Signature Scheme v4</a>\n         * @throws SecurityException if called after the session has been\n         *             sealed or abandoned\n         * @throws IllegalStateException if called for non-callback session\n         *\n         * WARNING: This is a system API to aid internal development.\n         * Use at your own risk. It will change or be removed without warning.\n         * {@hide}\n         ",
    "links" : [ "#LOCATION_DATA_APP", "#LOCATION_MEDIA_OBB", "#LOCATION_MEDIA_DATA" ]
  }, {
    "name" : "public void removeFile(@FileLocation int location, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n         * Removes a file.\n         *\n         * @param location target location for the file. Possible values:\n         *            {@link #LOCATION_DATA_APP},\n         *            {@link #LOCATION_MEDIA_OBB},\n         *            {@link #LOCATION_MEDIA_DATA}.\n         * @param name name of a file, e.g. split.\n         * @throws SecurityException if called after the session has been\n         *             sealed or abandoned\n         * @throws IllegalStateException if called for non-callback session\n         * {@hide}\n         ",
    "links" : [ "#LOCATION_DATA_APP", "#LOCATION_MEDIA_OBB", "#LOCATION_MEDIA_DATA" ]
  }, {
    "name" : "public void commit(@NonNull IntentSender statusReceiver)",
    "returnType" : "void",
    "comment" : "\n         * Attempt to commit everything staged in this session. This may require\n         * user intervention, and so it may not happen immediately. The final\n         * result of the commit will be reported through the given callback.\n         * <p>\n         * Once this method is called, the session is sealed and no additional mutations may be\n         * performed on the session. In case of device reboot or data loader transient failure\n         * before the session has been finalized, you may commit the session again.\n         * <p>\n         * If the installer is the device owner or the affiliated profile owner, there will be no\n         * user intervention.\n         *\n         * @param statusReceiver Called when the state of the session changes. Intents\n         *                       sent to this receiver contain {@link #EXTRA_STATUS}. Refer to the\n         *                       individual status codes on how to handle them.\n         *\n         * @throws SecurityException if streams opened through\n         *             {@link #openWrite(String, long, long)} are still open.\n         *\n         * @see android.app.admin.DevicePolicyManager\n         ",
    "links" : [ "#EXTRA_STATUS", "#openWrite" ]
  }, {
    "name" : "public void commitTransferred(@NonNull IntentSender statusReceiver)",
    "returnType" : "void",
    "comment" : "\n         * Attempt to commit a session that has been {@link #transfer(String) transferred}.\n         *\n         * <p>If the device reboots before the session has been finalized, you may commit the\n         * session again.\n         *\n         * <p>The caller of this method is responsible to ensure the safety of the session. As the\n         * session was created by another - usually less trusted - app, it is paramount that before\n         * committing <u>all</u> public and system {@link SessionInfo properties of the session}\n         * and <u>all</u> {@link #openRead(String) APKs} are verified by the caller. It might happen\n         * that new properties are added to the session with a new API revision. In this case the\n         * callers need to be updated.\n         *\n         * @param statusReceiver Called when the state of the session changes. Intents\n         *                       sent to this receiver contain {@link #EXTRA_STATUS}. Refer to the\n         *                       individual status codes on how to handle them.\n         *\n         * @hide\n         ",
    "links" : [ "#transfer", "SessionInfo", "#openRead", "#EXTRA_STATUS" ]
  }, {
    "name" : "public void transfer(@NonNull String packageName) throws PackageManager.NameNotFoundException",
    "returnType" : "void",
    "comment" : "\n         * Transfer the session to a new owner.\n         * <p>\n         * Only sessions that update the installing app can be transferred.\n         * <p>\n         * After the transfer to a package with a different uid all method calls on the session\n         * will cause {@link SecurityException}s.\n         * <p>\n         * Once this method is called, the session is sealed and no additional mutations beside\n         * committing it may be performed on the session.\n         *\n         * @param packageName The package of the new owner. Needs to hold the INSTALL_PACKAGES\n         *                    permission.\n         *\n         * @throws PackageManager.NameNotFoundException if the new owner could not be found.\n         * @throws SecurityException if called after the session has been committed or abandoned.\n         * @throws SecurityException if the session does not update the original installer\n         * @throws SecurityException if streams opened through\n         *                           {@link #openWrite(String, long, long) are still open.\n         ",
    "links" : [ "SecurityException", "#openWrite" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Release this session object. You can open the session again if it\n         * hasn't been finalized.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void abandon()",
    "returnType" : "void",
    "comment" : "\n         * Completely abandon this session, destroying all staged data and\n         * rendering it invalid. Abandoned sessions will be reported to\n         * {@link SessionCallback} listeners as failures. This is equivalent to\n         * opening the session and calling {@link Session#abandon()}.\n         ",
    "links" : [ "SessionCallback", "Session#abandon" ]
  }, {
    "name" : "public boolean isMultiPackage()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if this session will commit more than one package when it is\n         * committed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStaged()",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if this session will be staged and applied at next reboot.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getParentSessionId()",
    "returnType" : "int",
    "comment" : "\n         * @return the session ID of the multi-package session that this belongs to or\n         * {@link SessionInfo#INVALID_ID} if it does not belong to a multi-package session.\n         ",
    "links" : [ "SessionInfo#INVALID_ID" ]
  }, {
    "name" : "public int[] getChildSessionIds()",
    "returnType" : "int[]",
    "comment" : "\n         * @return the set of session IDs that will be committed atomically when this session is\n         * committed if this is a multi-package session or null if none exist.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addChildSessionId(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Adds a session ID to the set of sessions that will be committed atomically\n         * when this session is committed.\n         *\n         * <p>If the parent is staged or has rollback enabled, all children must have\n         * the same properties.\n         *\n         * @param sessionId the session ID to add to this multi-package session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeChildSessionId(int sessionId)",
    "returnType" : "void",
    "comment" : "\n         * Removes a session ID from the set of sessions that will be committed\n         * atomically when this session is committed.\n         *\n         * @param sessionId the session ID to remove from this multi-package session.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSession" ],
  "methodNames" : [ "public void setProgress(float progress)", "public void setStagingProgress(float progress)", "public void addProgress(float progress)", "public OutputStream openWrite(@NonNull String name, long offsetBytes, long lengthBytes) throws IOException", "public void write(@NonNull String name, long offsetBytes, long lengthBytes, @NonNull ParcelFileDescriptor fd) throws IOException", "public void fsync(@NonNull OutputStream out) throws IOException", "public String[] getNames() throws IOException", "public InputStream openRead(@NonNull String name) throws IOException", "public void removeSplit(@NonNull String splitName) throws IOException", "public DataLoaderParams getDataLoaderParams()", "public void addFile(@FileLocation int location, @NonNull String name, long lengthBytes, @NonNull byte[] metadata, @Nullable byte[] signature)", "public void removeFile(@FileLocation int location, @NonNull String name)", "public void commit(@NonNull IntentSender statusReceiver)", "public void commitTransferred(@NonNull IntentSender statusReceiver)", "public void transfer(@NonNull String packageName) throws PackageManager.NameNotFoundException", "public void close()", "public void abandon()", "public boolean isMultiPackage()", "public boolean isStaged()", "public int getParentSessionId()", "public int[] getChildSessionIds()", "public void addChildSessionId(int sessionId)", "public void removeChildSessionId(int sessionId)" ]
}