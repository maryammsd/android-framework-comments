{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/HotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "HotwordDetector",
  "comment" : "\n * Basic functionality for sandboxed detectors. This interface will be used by detectors that\n * manages their service lifecycle.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DETECTOR_TYPE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Indicates that it is a non-trusted hotword detector.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DETECTOR_TYPE_TRUSTED_HOTWORD_DSP",
    "type" : "int",
    "comment" : "\n     * Indicates that it is a DSP trusted hotword detector.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DETECTOR_TYPE_TRUSTED_HOTWORD_SOFTWARE",
    "type" : "int",
    "comment" : "\n     * Indicates that it is a software trusted hotword detector.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DETECTOR_TYPE_VISUAL_QUERY_DETECTOR",
    "type" : "int",
    "comment" : "\n     * Indicates that it is a visual query detector.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean startRecognition()",
    "returnType" : "boolean",
    "comment" : "\n     * Starts sandboxed detection recognition.\n     * <p>\n     * If a {@link VisualQueryDetector} calls this method, {@link VisualQueryDetectionService\n     * #onStartDetection(VisualQueryDetectionService.Callback)} will be called to start detection.\n     * <p>\n     * Otherwise if a {@link AlwaysOnHotwordDetector} or {@link SoftwareHotwordDetector} calls this,\n     * the system streams audio from the device microphone to this application's\n     * {@link HotwordDetectionService}. Audio is streamed until {@link #stopRecognition()} is\n     * called.\n     * <p>\n     * On detection of a hotword,\n     * {@link AlwaysOnHotwordDetector.Callback#onDetected(AlwaysOnHotwordDetector.EventPayload)}\n     * is called on the callback provided when creating this {@link HotwordDetector}.\n     * <p>\n     * There is a noticeable impact on battery while recognition is active, so make sure to call\n     * {@link #stopRecognition()} when detection isn't needed.\n     * <p>\n     * Calling this again while recognition is active does nothing.\n     *\n     * @return {@code true} if the request to start recognition succeeded\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#stopRecognition()", "android.service.voice.SoftwareHotwordDetector", "android.service.voice.VisualQueryDetectionService#onStartDetection(VisualQueryDetectionService.Callback)", "android.service.voice.VisualQueryDetector", "AlwaysOnHotwordDetector.Callback#onDetected(AlwaysOnHotwordDetector.EventPayload)", "android.service.voice.HotwordDetector", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : " boolean stopRecognition()",
    "returnType" : "boolean",
    "comment" : "\n     * Stops sandboxed detection recognition.\n     *\n     * @return {@code true} if the request to stop recognition succeeded\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean startRecognition(@NonNull ParcelFileDescriptor audioStream, @NonNull AudioFormat audioFormat, @Nullable PersistableBundle options)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts hotword recognition on audio coming from an external connected microphone.\n     * <p>\n     * {@link #stopRecognition()} must be called before {@code audioStream} is closed.\n     *\n     * @param audioStream stream containing the audio bytes to run detection on\n     * @param audioFormat format of the encoded audio\n     * @param options options supporting detection, such as configuration specific to the\n     *         source of the audio. This will be provided to the {@link HotwordDetectionService}.\n     *         PersistableBundle does not allow any remotable objects or other contents that can be\n     *         used to communicate with other processes.\n     * @return {@code true} if the request to start recognition succeeded\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#stopRecognition()" ]
  }, {
    "name" : " void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * Set configuration and pass read-only data to sandboxed detection service.\n     *\n     * @param options Application configuration data to provide to sandboxed detection services.\n     * PersistableBundle does not allow any remotable objects or other contents that can be used to\n     * communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to provide to sandboxed detection services.\n     * Use this to provide model data or other such data to the trusted process.\n     * @throws IllegalStateException if this HotwordDetector wasn't specified to use a\n     *         sandboxed detection service when it was created.\n     ",
    "links" : [ ]
  }, {
    "name" : " void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Invalidates this detector so that any future calls to this result\n     * in an {@link IllegalStateException} when a caller has a target SDK below API level 33\n     * or an {@link IllegalDetectorStateException} when a caller has a target SDK of API level 33\n     * or above.\n     *\n     * <p>If there are no other {@link HotwordDetector} instances linked to the\n     * sandboxed detection service, the service will be shutdown.\n     ",
    "links" : [ "IllegalStateException", "IllegalDetectorStateException", "android.service.voice.HotwordDetector" ]
  }, {
    "name" : " boolean isUsingSandboxedDetectionService()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static String detectorTypeToString(int detectorType)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean startRecognition()", " boolean stopRecognition()", " boolean startRecognition(@NonNull ParcelFileDescriptor audioStream, @NonNull AudioFormat audioFormat, @Nullable PersistableBundle options)", " void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", " void destroy()", " boolean isUsingSandboxedDetectionService()", " static String detectorTypeToString(int detectorType)", " void dump(String prefix, PrintWriter pw)" ],
  "variableNames" : [ "DETECTOR_TYPE_NORMAL", "DETECTOR_TYPE_TRUSTED_HOTWORD_DSP", "DETECTOR_TYPE_TRUSTED_HOTWORD_SOFTWARE", "DETECTOR_TYPE_VISUAL_QUERY_DETECTOR" ]
}