{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/BackupManagerMonitor.java",
  "packageName" : "android.app.backup",
  "className" : "BackupManagerMonitor",
  "comment" : "\n * Callback class for receiving important events during backup/restore operations.\n * Events consist mostly of errors and exceptions, giving detailed reason on why a restore/backup\n * failed or any time BackupManager makes an important decision.\n * On the other hand {@link BackupObserver} will give a failure/success view without\n * getting into details why. This callback runs on the thread it was called on because it can get\n * a bit spammy.\n * These callbacks will run on the binder thread.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_EVENT_CATEGORY_TRANSPORT",
    "type" : "int",
    "comment" : " Logging constants for BackupManagerMonitor",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_CATEGORY_AGENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_EVENT_PACKAGE_NAME",
    "type" : "String",
    "comment" : " string : the package name ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_EVENT_PACKAGE_VERSION",
    "type" : "String",
    "comment" : " int : the versionCode of the package named by EXTRA_LOG_EVENT_PACKAGE_NAME\n   * @deprecated Use {@link #EXTRA_LOG_EVENT_PACKAGE_LONG_VERSION} ",
    "links" : [ "#EXTRA_LOG_EVENT_PACKAGE_LONG_VERSION" ]
  }, {
    "name" : "EXTRA_LOG_EVENT_PACKAGE_LONG_VERSION",
    "type" : "String",
    "comment" : " long : the full versionCode of the package named by EXTRA_LOG_EVENT_PACKAGE_NAME ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_EVENT_ID",
    "type" : "String",
    "comment" : " int : the id of the log message, will be a unique identifier ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_EVENT_CATEGORY",
    "type" : "String",
    "comment" : "\n   *  int : category will be one of\n   *  { LOG_EVENT_CATEGORY_TRANSPORT,\n   *    LOG_EVENT_CATEGORY_AGENT,\n   *    LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY}.\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_CANCEL_ALL",
    "type" : "String",
    "comment" : "\n   * boolean: when we have an event with id LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL we record if\n   * the call was to cancel backup of all packages\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_ILLEGAL_KEY",
    "type" : "String",
    "comment" : "\n   * string: when we have an event with id LOG_EVENT_ID_ILLEGAL_KEY we send the key that was used\n   * by the app\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_PREFLIGHT_ERROR",
    "type" : "String",
    "comment" : "\n   * long: when we have an event with id LOG_EVENT_ID_ERROR_PREFLIGHT we send the error code that\n   * was returned by the transport during preflight\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_EXCEPTION_FULL_BACKUP",
    "type" : "String",
    "comment" : "\n   * string: when we have an event with id LOG_EVENT_ID_EXCEPTION_FULL_BACKUP we send the\n   * exception's stacktrace\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_RESTORE_VERSION",
    "type" : "String",
    "comment" : "\n   * int: when we have an event with id LOG_EVENT_ID_RESTORE_VERSION_HIGHER we send the\n   * restore package version\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_RESTORE_ANYWAY",
    "type" : "String",
    "comment" : "\n   * boolean: when we have an event with id LOG_EVENT_ID_RESTORE_VERSION_HIGHER we record if\n   * ApplicationInfo.FLAG_RESTORE_ANY_VERSION flag is set\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_POLICY_ALLOW_APKS",
    "type" : "String",
    "comment" : "\n   * boolean: when we have an event with id LOG_EVENT_ID_APK_NOT_INSTALLED we record if\n   * the policy allows to install apks provided with the dataset\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_MANIFEST_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n   * string: when we have an event with id LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE we record the\n   * package name provided in the restore manifest\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_WIDGET_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n   * string: when we have an event with id LOG_EVENT_ID_WIDGET_METADATA_MISMATCH we record the\n   * package name provided in the widget metadata\n   ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOG_OLD_VERSION",
    "type" : "String",
    "comment" : "\n   * int: when we have event of id LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER we send the version\n   * of the backup.\n   ",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_FULL_BACKUP_CANCEL",
    "type" : "int",
    "comment" : " TODO complete this list with all log messages. And document properly.",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_ILLEGAL_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_NO_DATA_TO_SEND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PACKAGE_INELIGIBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PACKAGE_STOPPED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PACKAGE_NOT_FOUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_BACKUP_DISABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_DEVICE_NOT_PROVISIONED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_ERROR_PREFLIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_EXCEPTION_FULL_BACKUP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_NO_PM_METADATA_RECEIVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_LOST_TRANSPORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_PACKAGE_NOT_PRESENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_RESTORE_VERSION_HIGHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_APP_HAS_NO_AGENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_SIGNATURE_MISMATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_CANT_FIND_AGENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_RESTORE_ANY_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_VERSIONS_MATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_SYSTEM_APP_NO_AGENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_APK_NOT_INSTALLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_MISSING_SIGNATURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_UNKNOWN_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_FULL_RESTORE_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_CORRUPT_MANIFEST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_WIDGET_METADATA_MISMATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_NO_PACKAGES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_TRANSPORT_IS_NULL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_EVENT_ID_TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED",
    "type" : "int",
    "comment" : "\n     * The transport returned {@link BackupTransport#TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED}.\n     ",
    "links" : [ "BackupTransport#TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED" ]
  } ],
  "methods" : [ {
    "name" : "public void onEvent(Bundle event)",
    "returnType" : "void",
    "comment" : "\n   * This method will be called each time something important happens on BackupManager.\n   *\n   * @param event bundle will contain data about event:\n   *    - event id, not optional, a unique identifier for each event.\n   *    - package name, optional, the current package we're backing up/restoring if applicable.\n   *    - package version, optional, the current package version  we're backing up/restoring\n   *          if applicable.\n   *    - category of event, not optional, one of\n   *          { LOG_EVENT_CATEGORY_TRANSPORT,\n   *            LOG_EVENT_CATEGORY_AGENT,\n   *            LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY}\n   *\n   ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_EVENT_CATEGORY_TRANSPORT", "LOG_EVENT_CATEGORY_AGENT", "LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY", "EXTRA_LOG_EVENT_PACKAGE_NAME", "EXTRA_LOG_EVENT_PACKAGE_VERSION", "EXTRA_LOG_EVENT_PACKAGE_LONG_VERSION", "EXTRA_LOG_EVENT_ID", "EXTRA_LOG_EVENT_CATEGORY", "EXTRA_LOG_CANCEL_ALL", "EXTRA_LOG_ILLEGAL_KEY", "EXTRA_LOG_PREFLIGHT_ERROR", "EXTRA_LOG_EXCEPTION_FULL_BACKUP", "EXTRA_LOG_RESTORE_VERSION", "EXTRA_LOG_RESTORE_ANYWAY", "EXTRA_LOG_POLICY_ALLOW_APKS", "EXTRA_LOG_MANIFEST_PACKAGE_NAME", "EXTRA_LOG_WIDGET_PACKAGE_NAME", "EXTRA_LOG_OLD_VERSION", "LOG_EVENT_ID_FULL_BACKUP_CANCEL", "LOG_EVENT_ID_ILLEGAL_KEY", "LOG_EVENT_ID_NO_DATA_TO_SEND", "LOG_EVENT_ID_PACKAGE_INELIGIBLE", "LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT", "LOG_EVENT_ID_PACKAGE_STOPPED", "LOG_EVENT_ID_PACKAGE_NOT_FOUND", "LOG_EVENT_ID_BACKUP_DISABLED", "LOG_EVENT_ID_DEVICE_NOT_PROVISIONED", "LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT", "LOG_EVENT_ID_ERROR_PREFLIGHT", "LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT", "LOG_EVENT_ID_EXCEPTION_FULL_BACKUP", "LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL", "LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE", "LOG_EVENT_ID_NO_PM_METADATA_RECEIVED", "LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA", "LOG_EVENT_ID_LOST_TRANSPORT", "LOG_EVENT_ID_PACKAGE_NOT_PRESENT", "LOG_EVENT_ID_RESTORE_VERSION_HIGHER", "LOG_EVENT_ID_APP_HAS_NO_AGENT", "LOG_EVENT_ID_SIGNATURE_MISMATCH", "LOG_EVENT_ID_CANT_FIND_AGENT", "LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT", "LOG_EVENT_ID_RESTORE_ANY_VERSION", "LOG_EVENT_ID_VERSIONS_MATCH", "LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER", "LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH", "LOG_EVENT_ID_SYSTEM_APP_NO_AGENT", "LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE", "LOG_EVENT_ID_APK_NOT_INSTALLED", "LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK", "LOG_EVENT_ID_MISSING_SIGNATURE", "LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE", "LOG_EVENT_ID_UNKNOWN_VERSION", "LOG_EVENT_ID_FULL_RESTORE_TIMEOUT", "LOG_EVENT_ID_CORRUPT_MANIFEST", "LOG_EVENT_ID_WIDGET_METADATA_MISMATCH", "LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION", "LOG_EVENT_ID_NO_PACKAGES", "LOG_EVENT_ID_TRANSPORT_IS_NULL", "LOG_EVENT_ID_TRANSPORT_NON_INCREMENTAL_BACKUP_REQUIRED" ],
  "methodNames" : [ "public void onEvent(Bundle event)" ]
}