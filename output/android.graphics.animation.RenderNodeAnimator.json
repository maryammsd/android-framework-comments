{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/animation/RenderNodeAnimator.java",
  "packageName" : "android.graphics.animation",
  "className" : "RenderNodeAnimator",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TRANSLATION_X",
    "type" : "int",
    "comment" : " Keep in sync with enum RenderProperty in Animator.h",
    "links" : [ ]
  }, {
    "name" : "TRANSLATION_Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSLATION_Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCALE_X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCALE_Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION_X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION_Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALPHA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAST_VALUE",
    "type" : "int",
    "comment" : " The last value in the enum, used for array size initialization",
    "links" : [ ]
  }, {
    "name" : "PAINT_STROKE_WIDTH",
    "type" : "int",
    "comment" : " Keep in sync with enum PaintFields in Animator.h",
    "links" : [ ]
  }, {
    "name" : "PAINT_ALPHA",
    "type" : "int",
    "comment" : "\n     * Field for the Paint alpha channel, which should be specified as a value\n     * between 0 and 255.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "VirtualRefBasePtr",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTarget",
    "type" : "RenderNode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewListener",
    "type" : "ViewListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderProperty",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinalValue",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_PREPARE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_DELAYED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_RUNNING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FINISHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnscaledDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnscaledStartDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUiThreadHandlesDelay",
    "type" : "boolean",
    "comment" : " set this to false so that the renderthread handles the startdelay instead",
    "links" : [ ]
  }, {
    "name" : "mStartDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAnimationHelper",
    "type" : "ThreadLocal<DelayedAnimationHelper>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkMutable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isNativeInterpolator(TimeInterpolator interpolator)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyInterpolator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void moveToRunningState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyStartListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setViewListener(ViewListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setTarget(RecordingCanvas canvas)",
    "returnType" : "void",
    "comment" : " Sets the animation target to the owning view of the RecordingCanvas ",
    "links" : [ ]
  }, {
    "name" : "protected void setTarget(RenderNode node)",
    "returnType" : "void",
    "comment" : " Sets the node that is to be the target of this animation ",
    "links" : [ ]
  }, {
    "name" : "public void setStartValue(float startValue)",
    "returnType" : "void",
    "comment" : " Set the start value for the animation ",
    "links" : [ ]
  }, {
    "name" : "public void setStartDelay(long startDelay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getStartDelay()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RenderNodeAnimator setDuration(long duration)",
    "returnType" : "RenderNodeAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getDuration()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getTotalDuration()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInterpolator(TimeInterpolator interpolator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TimeInterpolator getInterpolator()",
    "returnType" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFinished()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseNativePtr()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ArrayList<AnimatorListener> cloneListeners()",
    "returnType" : "ArrayList<AnimatorListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getNativeAnimator()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean processDelayed(long frameTimeMs)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the animator was started, false if still delayed\n     ",
    "links" : [ ]
  }, {
    "name" : "private static DelayedAnimationHelper getHelper()",
    "returnType" : "DelayedAnimationHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void callOnFinished(RenderNodeAnimator animator)",
    "returnType" : "void",
    "comment" : " Called by native",
    "links" : [ ]
  }, {
    "name" : "public Animator clone()",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAllowRunningAsynchronously(boolean mayRunAsync)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateAnimator(int property, float finalValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateCanvasPropertyFloatAnimator(long canvasProperty, float finalValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateCanvasPropertyPaintAnimator(long canvasProperty, int paintField, float finalValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateRevealAnimator(int x, int y, float startRadius, float endRadius)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetStartValue(long nativePtr, float startValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetDuration(long nativePtr, long duration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetDuration(long nativePtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetStartDelay(long nativePtr, long startDelay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetInterpolator(long animPtr, long interpolatorPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetAllowRunningAsync(long animPtr, boolean mayRunAsync)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetListener(long animPtr, RenderNodeAnimator listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nStart(long animPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nEnd(long animPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(long ptr)", "private void checkMutable()", " static boolean isNativeInterpolator(TimeInterpolator interpolator)", "private void applyInterpolator()", "public void start()", "private void doStart()", "private void moveToRunningState()", "private void notifyStartListeners()", "public void cancel()", "public void end()", "public void pause()", "public void resume()", "public void setViewListener(ViewListener listener)", "public final void setTarget(RecordingCanvas canvas)", "protected void setTarget(RenderNode node)", "public void setStartValue(float startValue)", "public void setStartDelay(long startDelay)", "public long getStartDelay()", "public RenderNodeAnimator setDuration(long duration)", "public long getDuration()", "public long getTotalDuration()", "public boolean isRunning()", "public boolean isStarted()", "public void setInterpolator(TimeInterpolator interpolator)", "public TimeInterpolator getInterpolator()", "protected void onFinished()", "private void releaseNativePtr()", "private ArrayList<AnimatorListener> cloneListeners()", "public long getNativeAnimator()", "private boolean processDelayed(long frameTimeMs)", "private static DelayedAnimationHelper getHelper()", "private static void callOnFinished(RenderNodeAnimator animator)", "public Animator clone()", "public void setAllowRunningAsynchronously(boolean mayRunAsync)", "private static native long nCreateAnimator(int property, float finalValue)", "private static native long nCreateCanvasPropertyFloatAnimator(long canvasProperty, float finalValue)", "private static native long nCreateCanvasPropertyPaintAnimator(long canvasProperty, int paintField, float finalValue)", "private static native long nCreateRevealAnimator(int x, int y, float startRadius, float endRadius)", "private static native void nSetStartValue(long nativePtr, float startValue)", "private static native void nSetDuration(long nativePtr, long duration)", "private static native long nGetDuration(long nativePtr)", "private static native void nSetStartDelay(long nativePtr, long startDelay)", "private static native void nSetInterpolator(long animPtr, long interpolatorPtr)", "private static native void nSetAllowRunningAsync(long animPtr, boolean mayRunAsync)", "private static native void nSetListener(long animPtr, RenderNodeAnimator listener)", "private static native void nStart(long animPtr)", "private static native void nEnd(long animPtr)" ],
  "variableNames" : [ "TRANSLATION_X", "TRANSLATION_Y", "TRANSLATION_Z", "SCALE_X", "SCALE_Y", "ROTATION", "ROTATION_X", "ROTATION_Y", "X", "Y", "Z", "ALPHA", "LAST_VALUE", "PAINT_STROKE_WIDTH", "PAINT_ALPHA", "mNativePtr", "mHandler", "mTarget", "mViewListener", "mRenderProperty", "mFinalValue", "mInterpolator", "STATE_PREPARE", "STATE_DELAYED", "STATE_RUNNING", "STATE_FINISHED", "mState", "mUnscaledDuration", "mUnscaledStartDelay", "mUiThreadHandlesDelay", "mStartDelay", "mStartTime", "sAnimationHelper" ]
}