{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/text/MeasuredText.java",
  "packageName" : "android.graphics.text",
  "className" : "Builder",
  "comment" : "\n     * Helper class for creating a {@link MeasuredText}.\n     * <p>\n     * <pre>\n     * <code>\n     * Paint paint = new Paint();\n     * String text = \"Hello, Android.\";\n     * MeasuredText mt = new MeasuredText.Builder(text.toCharArray())\n     *      .appendStyleRun(paint, text.length, false)\n     *      .build();\n     * </code>\n     * </pre>\n     * </p>\n     *\n     * Note: The appendStyle and appendReplacementRun should be called to cover the text length.\n     ",
  "links" : [ "android.graphics.text.MeasuredText" ],
  "variables" : [ {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComputeHyphenation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComputeLayout",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComputeBounds",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFastHyphenation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintMt",
    "type" : "MeasuredText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedMetrics",
    "type" : "Paint.FontMetricsInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_MODE_NONE",
    "type" : "int",
    "comment" : "\n         *　A value for hyphenation calculation mode.\n         *\n         * This value indicates that no hyphenation points are calculated.\n         ",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_MODE_NORMAL",
    "type" : "int",
    "comment" : "\n         *　A value for hyphenation calculation mode.\n         *\n         * This value indicates that hyphenation points are calculated.\n         ",
    "links" : [ ]
  }, {
    "name" : "HYPHENATION_MODE_FAST",
    "type" : "int",
    "comment" : "\n         *　A value for hyphenation calculation mode.\n         *\n         * This value indicates that hyphenation points are calculated with faster algorithm. This\n         * algorithm measures text width with ignoring the context of hyphen character shaping, e.g.\n         * kerning.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder appendStyleRun(@NonNull Paint paint, @IntRange(from = 0) int length, boolean isRtl)",
    "returnType" : "Builder",
    "comment" : "\n         * Apply styles to the given length.\n         *\n         * Keeps an internal offset which increases at every append. The initial value for this\n         * offset is zero. After the style is applied the internal offset is moved to {@code offset\n         * + length}, and next call will start from this new position.\n         *\n         * <p>\n         * {@link Paint#TEXT_RUN_FLAG_RIGHT_EDGE} and {@link Paint#TEXT_RUN_FLAG_LEFT_EDGE} are\n         * ignored and treated as both of them are set.\n         *\n         * @param paint a paint\n         * @param length a length to be applied with a given paint, can not exceed the length of the\n         *               text\n         * @param isRtl true if the text is in RTL context, otherwise false.\n         ",
    "links" : [ "android.graphics.Paint#TEXT_RUN_FLAG_RIGHT_EDGE", "android.graphics.Paint#TEXT_RUN_FLAG_LEFT_EDGE" ]
  }, {
    "name" : "public Builder appendStyleRun(@NonNull Paint paint, @Nullable LineBreakConfig lineBreakConfig, @IntRange(from = 0) int length, boolean isRtl)",
    "returnType" : "Builder",
    "comment" : "\n         * Apply styles to the given length.\n         *\n         * Keeps an internal offset which increases at every append. The initial value for this\n         * offset is zero. After the style is applied the internal offset is moved to {@code offset\n         * + length}, and next call will start from this new position.\n         *\n         * @param paint a paint\n         * @param lineBreakConfig a line break configuration.\n         * @param length a length to be applied with a given paint, can not exceed the length of the\n         *               text\n         * @param isRtl true if the text is in RTL context, otherwise false.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder appendReplacementRun(@NonNull Paint paint, @IntRange(from = 0) int length, @Px @FloatRange(from = 0) float width)",
    "returnType" : "Builder",
    "comment" : "\n         * Used to inform the text layout that the given length is replaced with the object of given\n         * width.\n         *\n         * Keeps an internal offset which increases at every append. The initial value for this\n         * offset is zero. After the style is applied the internal offset is moved to {@code offset\n         * + length}, and next call will start from this new position.\n         *\n         * Informs the layout engine that the given length should not be processed, instead the\n         * provided width should be used for calculating the width of that range.\n         *\n         * @param length a length to be replaced with the object, can not exceed the length of the\n         *               text\n         * @param width a replacement width of the range\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setComputeHyphenation(boolean computeHyphenation)",
    "returnType" : "Builder",
    "comment" : "\n         * By passing true to this method, the build method will compute all possible hyphenation\n         * pieces as well.\n         *\n         * If you don't want to use automatic hyphenation, you can pass false to this method and\n         * save the computation time of hyphenation. The default value is false.\n         *\n         * Even if you pass false to this method, you can still enable automatic hyphenation of\n         * LineBreaker but line break computation becomes slower.\n         *\n         * @deprecated use setComputeHyphenation(int) instead.\n         *\n         * @param computeHyphenation true if you want to use automatic hyphenations.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setComputeHyphenation(@HyphenationMode int mode)",
    "returnType" : "Builder",
    "comment" : "\n         * By passing true to this method, the build method will calculate hyphenation break\n         * points faster with ignoring some typographic features, e.g. kerning.\n         *\n         * {@link #HYPHENATION_MODE_NONE} is by default.\n         *\n         * @param mode a hyphenation mode.\n         ",
    "links" : [ "#HYPHENATION_MODE_NONE" ]
  }, {
    "name" : "public Builder setComputeLayout(boolean computeLayout)",
    "returnType" : "Builder",
    "comment" : "\n         * By passing true to this method, the build method will compute all full layout\n         * information.\n         *\n         * If you don't use {@link MeasuredText#getBounds(int,int,android.graphics.Rect)}, you can\n         * pass false to this method and save the memory spaces. The default value is true.\n         *\n         * Even if you pass false to this method, you can still call getBounds but it becomes\n         * slower.\n         *\n         * @param computeLayout true if you want to retrieve full layout info, e.g. bbox.\n         ",
    "links" : [ "android.graphics.text.MeasuredText#getBounds(int" ]
  }, {
    "name" : "public Builder setComputeBounds(boolean computeBounds)",
    "returnType" : "Builder",
    "comment" : "\n         * Hidden API that tells native to calculate bounding box as well.\n         * Different from {@link #setComputeLayout(boolean)}, the result bounding box is not stored\n         * into MeasuredText instance. Just warm up the global word cache entry.\n         *\n         * @hide\n         * @param computeBounds\n         * @return\n         ",
    "links" : [ "#setComputeLayout(boolean)" ]
  }, {
    "name" : "public MeasuredText build()",
    "returnType" : "MeasuredText",
    "comment" : "\n         * Creates a MeasuredText.\n         *\n         * Once you called build() method, you can't reuse the Builder class again.\n         * @throws IllegalStateException if this Builder is reused.\n         * @throws IllegalStateException if the whole text is not covered by one or more runs (style\n         *                               or replacement)\n         ",
    "links" : [ ]
  }, {
    "name" : "private void ensureNativePtrNoReuse()",
    "returnType" : "void",
    "comment" : "\n         * Ensures {@link #mNativePtr} is not reused.\n         *\n         * <p/> This is a method by itself to help increase testability - eg. Robolectric might want\n         * to override the validation behavior in test environment.\n         ",
    "links" : [ "#mNativePtr" ]
  }, {
    "name" : "private static native long nInitBuilder()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddStyleRun(long nativeBuilderPtr, long paintPtr, int lineBreakStyle, int lineBreakWordStyle, boolean hyphenation, @IntRange(from = 0) int start, @IntRange(from = 0) int end, boolean isRtl)",
    "returnType" : "void",
    "comment" : "\n         * Apply style to make native measured text.\n         *\n         * @param nativeBuilderPtr The native MeasuredParagraph builder pointer.\n         * @param paintPtr The native paint pointer to be applied.\n         * @param lineBreakStyle The line break style(lb) of the text.\n         * @param lineBreakWordStyle The line break word style(lw) of the text.\n         * @param start The start offset in the copied buffer.\n         * @param end The end offset in the copied buffer.\n         * @param isRtl True if the text is RTL.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddReplacementRun(long nativeBuilderPtr, long paintPtr, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @FloatRange(from = 0) float width)",
    "returnType" : "void",
    "comment" : "\n         * Apply ReplacementRun to make native measured text.\n         *\n         * @param nativeBuilderPtr The native MeasuredParagraph builder pointer.\n         * @param paintPtr The native paint pointer to be applied.\n         * @param start The start offset in the copied buffer.\n         * @param end The end offset in the copied buffer.\n         * @param width The width of the replacement.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static native long nBuildMeasuredText(long nativeBuilderPtr, long hintMtPtr, @NonNull char[] text, boolean computeHyphenation, boolean computeLayout, boolean computeBounds, boolean fastHyphenationMode)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nFreeBuilder(long nativeBuilderPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder appendStyleRun(@NonNull Paint paint, @IntRange(from = 0) int length, boolean isRtl)", "public Builder appendStyleRun(@NonNull Paint paint, @Nullable LineBreakConfig lineBreakConfig, @IntRange(from = 0) int length, boolean isRtl)", "public Builder appendReplacementRun(@NonNull Paint paint, @IntRange(from = 0) int length, @Px @FloatRange(from = 0) float width)", "public Builder setComputeHyphenation(boolean computeHyphenation)", "public Builder setComputeHyphenation(@HyphenationMode int mode)", "public Builder setComputeLayout(boolean computeLayout)", "public Builder setComputeBounds(boolean computeBounds)", "public MeasuredText build()", "private void ensureNativePtrNoReuse()", "private static native long nInitBuilder()", "private static native void nAddStyleRun(long nativeBuilderPtr, long paintPtr, int lineBreakStyle, int lineBreakWordStyle, boolean hyphenation, @IntRange(from = 0) int start, @IntRange(from = 0) int end, boolean isRtl)", "private static native void nAddReplacementRun(long nativeBuilderPtr, long paintPtr, @IntRange(from = 0) int start, @IntRange(from = 0) int end, @FloatRange(from = 0) float width)", "private static native long nBuildMeasuredText(long nativeBuilderPtr, long hintMtPtr, @NonNull char[] text, boolean computeHyphenation, boolean computeLayout, boolean computeBounds, boolean fastHyphenationMode)", "private static native void nFreeBuilder(long nativeBuilderPtr)" ],
  "variableNames" : [ "sRegistry", "mNativePtr", "mText", "mComputeHyphenation", "mComputeLayout", "mComputeBounds", "mFastHyphenation", "mCurrentOffset", "mHintMt", "mTop", "mBottom", "mCachedMetrics", "HYPHENATION_MODE_NONE", "HYPHENATION_MODE_NORMAL", "HYPHENATION_MODE_FAST" ]
}