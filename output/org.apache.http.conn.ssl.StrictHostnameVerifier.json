{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/http/conn/ssl/StrictHostnameVerifier.java",
  "packageName" : "org.apache.http.conn.ssl",
  "className" : "StrictHostnameVerifier",
  "comment" : "\n * The Strict HostnameVerifier works the same way as Sun Java 1.4, Sun\n * Java 5, Sun Java 6-rc.  It's also pretty close to IE6.  This\n * implementation appears to be compliant with RFC 2818 for dealing with\n * wildcards.\n * <p/>\n * The hostname must match either the first CN, or any of the subject-alts.\n * A wildcard can occur in the CN, and in any of the subject-alts.  The\n * one divergence from IE6 is how we only check the first CN.  IE6 allows\n * a match against any of the CNs present.  We decided to follow in\n * Sun Java 1.4's footsteps and only check the first CN.  (If you need\n * to check all the CN's, feel free to write your own implementation!).\n * <p/>\n * A wildcard such as \"*.foo.com\" matches only subdomains in the same\n * level, for example \"a.foo.com\".  It does not match deeper subdomains\n * such as \"a.b.foo.com\".\n * \n * @author Julius Davies\n *\n * @deprecated Please use {@link java.net.URL#openConnection} instead.\n *     Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>\n *     for further details.\n ",
  "links" : [ "java.net.URL#openConnection" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public final void verify(final String host, final String[] cns, final String[] subjectAlts) throws SSLException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final void verify(final String host, final String[] cns, final String[] subjectAlts) throws SSLException", "public final String toString()" ],
  "variableNames" : [ ]
}