{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/MandatoryStreamCombination.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "MandatoryStreamInformation",
  "comment" : "\n     * Immutable class to store available mandatory stream information.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailableSizes",
    "type" : "ArrayList<Size>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInput",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsUltraHighResolution",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsMaximumSize",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIs10BitCapable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamUseCase",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isInput()",
    "returnType" : "boolean",
    "comment" : "\n         * Confirms whether or not this is an input stream.\n         * @return true in case the stream is input, false otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUltraHighResolution()",
    "returnType" : "boolean",
    "comment" : "\n         * Confirms whether or not this is an ultra high resolution stream.\n         *\n         * <p>An 'ultra high resolution' stream is one which has a configuration which appears in\n         * {@link android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION},\n         * Streams which are ultra high resolution must not be included with streams which are not\n         * ultra high resolution in the same {@link android.hardware.camera2.CaptureRequest}.</p>\n         *\n         * @return true in case the stream is ultra high resolution, false otherwise.\n        ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION", "android.hardware.camera2.CaptureRequest" ]
  }, {
    "name" : "public boolean isMaximumSize()",
    "returnType" : "boolean",
    "comment" : "\n         * Confirms whether or not this is a maximum size stream.\n         *\n         * <p>A stream with maximum size is one with the camera device's maximum resolution\n         * for the stream's format as appears in {@link\n         * android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP}. This\n         * maximum size has the same meaning as the 'MAXIMUM' target size documented in the camera\n         * capture session {@link CameraDevice#createCaptureSession guideline}.</p>\n         *\n         * <p>The application can use a\n         * {@link android.hardware.camera2.MultiResolutionImageReader} for a maximum size\n         * output stream if the camera device supports multi-resolution outputs for the stream's\n         * format. See {@link\n         * android.hardware.camera2.CameraCharacteristics#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP}\n         * for details.</p>\n         *\n         * <p>This is different from the ultra high resolution flag, which applies only to\n         * ultra high resolution sensor camera devices and refers to a stream in\n         * {@link\n         * android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION}\n         * instead.</p>\n         *\n         * @return true if the stream is a maximum size stream.\n         ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION", "android.hardware.camera2.CameraCharacteristics#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP", "android.hardware.camera2.MultiResolutionImageReader", "android.hardware.camera2.CameraDevice#createCaptureSession", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP" ]
  }, {
    "name" : "public boolean is10BitCapable()",
    "returnType" : "boolean",
    "comment" : "\n         * Indicates whether this stream is able to support 10-bit output.\n         *\n         * <p>10-bit capable streams can be configured to output 10-bit sample data via calls to\n         * {@link android.hardware.camera2.params.OutputConfiguration#setDynamicRangeProfile} and\n         * selecting the appropriate output Surface pixel format which can be queried via\n         * {@link #get10BitFormat()} and will be either\n         * {@link ImageFormat#PRIVATE} (the default for Surfaces initialized by\n         * {@link android.view.SurfaceView}, {@link android.view.TextureView},\n         * {@link android.media.MediaRecorder}, {@link android.media.MediaCodec} etc.) or\n         * {@link ImageFormat#YCBCR_P010}.</p>\n         *\n         * @return true if stream is able to output 10-bit pixels\n         *\n         * @see android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT\n         * @see OutputConfiguration#setDynamicRangeProfile\n         ",
    "links" : [ "android.media.MediaCodec", "#get10BitFormat()", "android.graphics.ImageFormat#PRIVATE", "android.view.SurfaceView", "android.graphics.ImageFormat#YCBCR_P010", "android.hardware.camera2.params.OutputConfiguration#setDynamicRangeProfile", "android.view.TextureView", "android.media.MediaRecorder" ]
  }, {
    "name" : "public List<Size> getAvailableSizes()",
    "returnType" : "List<Size>",
    "comment" : "\n         * Return the list of available sizes for this mandatory stream.\n         *\n         * <p>Per documented {@link CameraDevice#createCaptureSession guideline} the largest\n         * resolution in the result will be tested and guaranteed to work. If clients want to use\n         * smaller sizes, then the resulting\n         * {@link android.hardware.camera2.params.SessionConfiguration session configuration} can\n         * be tested either by calling {@link CameraDevice#createCaptureSession} or\n         * {@link CameraDeviceSetup#isSessionConfigurationSupported}.\n         *\n         * @return non-modifiable ascending list of available sizes.\n         ",
    "links" : [ "android.hardware.camera2.params.SessionConfiguration", "#isSessionConfigurationSupported", "android.hardware.camera2.CameraDevice#createCaptureSession" ]
  }, {
    "name" : "public int getFormat()",
    "returnType" : "int",
    "comment" : "\n         * Retrieve the mandatory stream {@code format}.\n         *\n         * @return integer format.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int get10BitFormat()",
    "returnType" : "int",
    "comment" : "\n         * Retrieve the mandatory stream 10-bit {@code format} for 10-bit capable streams.\n         *\n         * <p>In case {@link #is10BitCapable()} returns {@code true}, then this method\n         * will return the corresponding 10-bit output Surface pixel format. Depending on\n         * the stream type it will be either {@link ImageFormat#PRIVATE} or\n         * {@link ImageFormat#YCBCR_P010}.</p>\n         *\n         * @return integer format.\n         * @throws UnsupportedOperationException in case the stream is not capable of 10-bit output\n         * @see #is10BitCapable()\n         ",
    "links" : [ "android.graphics.ImageFormat#PRIVATE", "android.graphics.ImageFormat#YCBCR_P010", "#is10BitCapable()" ]
  }, {
    "name" : "public long getStreamUseCase()",
    "returnType" : "long",
    "comment" : "\n         * Retrieve the mandatory stream use case.\n         *\n         * <p>If this {@link MandatoryStreamInformation} is part of a mandatory stream\n         * combination for stream use cases, the return value will be a non-DEFAULT value.\n         * For {@link MandatoryStreamInformation} belonging to other mandatory stream\n         * combinations, the return value will be DEFAULT. </p>\n         *\n         * @return the long integer stream use case.\n         ",
    "links" : [ "MandatoryStreamInformation" ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n         * Check if this {@link MandatoryStreamInformation} is equal to another\n         * {@link MandatoryStreamInformation}.\n         *\n         * <p>Two vectors are only equal if and only if each of the respective elements is\n         * equal.</p>\n         *\n         * @return {@code true} if the objects were equal, {@code false} otherwise\n         ",
    "links" : [ "MandatoryStreamInformation" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n         * {@inheritDoc}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isInput()", "public boolean isUltraHighResolution()", "public boolean isMaximumSize()", "public boolean is10BitCapable()", "public List<Size> getAvailableSizes()", "public int getFormat()", "public int get10BitFormat()", "public long getStreamUseCase()", "public boolean equals(final Object obj)", "public int hashCode()" ],
  "variableNames" : [ "mFormat", "mAvailableSizes", "mIsInput", "mIsUltraHighResolution", "mIsMaximumSize", "mIs10BitCapable", "mStreamUseCase" ]
}