{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Wrapper.java",
  "packageName" : "java.sql",
  "className" : "Wrapper",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException",
    "returnType" : "T",
    "comment" : "\n     * Returns an object that implements the given interface to allow access to\n     * non-standard methods, or standard methods not exposed by the proxy.\n     *\n     * If the receiver implements the interface then the result is the receiver\n     * or a proxy for the receiver. If the receiver is a wrapper\n     * and the wrapped object implements the interface then the result is the\n     * wrapped object or a proxy for the wrapped object. Otherwise return the\n     * the result of calling <code>unwrap</code> recursively on the wrapped object\n     * or a proxy for that result. If the receiver is not a\n     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.\n     *\n     * @param iface A Class defining an interface that the result must implement.\n     * @return an object that implements the interface. May be a proxy for the actual implementing object.\n     * @throws java.sql.SQLException If no object found that implements the interface\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper\n     * for an object that does. Returns false otherwise. If this implements the interface then return true,\n     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped\n     * object. If this does not implement the interface and is not a wrapper, return false.\n     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that\n     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method\n     * returns true then calling <code>unwrap</code> with the same argument should succeed.\n     *\n     * @param iface a Class defining an interface.\n     * @return true if this implements the interface or directly or indirectly wraps an object that does.\n     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper\n     * for an object with the given interface.\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException", " boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException" ],
  "variableNames" : [ ]
}