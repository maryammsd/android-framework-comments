{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/RadioAccessFamily.java",
  "packageName" : "android.telephony",
  "className" : "RadioAccessFamily",
  "comment" : "\n * Object to indicate the phone radio type and access technology.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "RAF_UNKNOWN",
    "type" : "int",
    "comment" : " 2G",
    "links" : [ ]
  }, {
    "name" : "RAF_GSM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_GPRS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_EDGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_IS95A",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_IS95B",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_1xRTT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_EVDO_0",
    "type" : "int",
    "comment" : " 3G",
    "links" : [ ]
  }, {
    "name" : "RAF_EVDO_A",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_EVDO_B",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_EHRPD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_HSUPA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_HSDPA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_HSPA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_HSPAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_UMTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_TD_SCDMA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_LTE",
    "type" : "int",
    "comment" : " 4G",
    "links" : [ ]
  }, {
    "name" : "RAF_LTE_CA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_NR",
    "type" : "int",
    "comment" : " 5G",
    "links" : [ ]
  }, {
    "name" : "GSM",
    "type" : "int",
    "comment" : " 2G",
    "links" : [ ]
  }, {
    "name" : "CDMA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVDO",
    "type" : "int",
    "comment" : " 3G",
    "links" : [ ]
  }, {
    "name" : "HS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WCDMA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LTE",
    "type" : "int",
    "comment" : " 4G",
    "links" : [ ]
  }, {
    "name" : "NR",
    "type" : "int",
    "comment" : " 5G",
    "links" : [ ]
  }, {
    "name" : "mPhoneId",
    "type" : "int",
    "comment" : " Phone ID of phone ",
    "links" : [ ]
  }, {
    "name" : "mRadioAccessFamily",
    "type" : "int",
    "comment" : " Radio Access Family ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<android.telephony.RadioAccessFamily>",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPhoneId()",
    "returnType" : "int",
    "comment" : "\n     * Get phone ID.\n     *\n     * @return phone ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRadioAccessFamily()",
    "returnType" : "int",
    "comment" : "\n     * get radio access family.\n     *\n     * @return radio access family\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Implement the Parcelable interface.\n     *\n     * @return describe content\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel outParcel, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Implement the Parcelable interface.\n     *\n     * @param outParcel The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getRafFromNetworkType(@PrefNetworkMode int type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getAdjustedRaf(int raf)",
    "returnType" : "int",
    "comment" : "\n     * if the raf includes ANY bit set for a group\n     * adjust it to contain ALL the bits for that group\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getNetworkTypeFromRaf(int raf)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int singleRafTypeFromString(String rafString)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int rafTypeFromString(String rafList)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int compare(long networkTypeBitmaskL, long networkTypeBitmaskR)",
    "returnType" : "int",
    "comment" : "\n     * Compare two sets of network types to see which is more capable.\n     *\n     * This algorithm first tries to see see if a set has a strict superset of RAT support for\n     * each generation, from newest to oldest; if that results in a tie, then it returns the set\n     * that supports the most RAT types.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "RAF_UNKNOWN", "RAF_GSM", "RAF_GPRS", "RAF_EDGE", "RAF_IS95A", "RAF_IS95B", "RAF_1xRTT", "RAF_EVDO_0", "RAF_EVDO_A", "RAF_EVDO_B", "RAF_EHRPD", "RAF_HSUPA", "RAF_HSDPA", "RAF_HSPA", "RAF_HSPAP", "RAF_UMTS", "RAF_TD_SCDMA", "RAF_LTE", "RAF_LTE_CA", "RAF_NR", "GSM", "CDMA", "EVDO", "HS", "WCDMA", "LTE", "NR", "mPhoneId", "mRadioAccessFamily", "CREATOR" ],
  "methodNames" : [ "public int getPhoneId()", "public int getRadioAccessFamily()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel outParcel, int flags)", "public static int getRafFromNetworkType(@PrefNetworkMode int type)", "private static int getAdjustedRaf(int raf)", "public static int getNetworkTypeFromRaf(int raf)", "public static int singleRafTypeFromString(String rafString)", "public static int rafTypeFromString(String rafList)", "public static int compare(long networkTypeBitmaskL, long networkTypeBitmaskR)" ]
}