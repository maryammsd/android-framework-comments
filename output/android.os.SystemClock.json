{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/SystemClock.java",
  "packageName" : "android.os",
  "className" : "SystemClock",
  "comment" : "\n * Core timekeeping facilities.\n *\n * <p> Three different clocks are available, and they should not be confused:\n *\n * <ul>\n *     <li> <p> {@link System#currentTimeMillis System.currentTimeMillis()}\n *     is the standard \"wall\" clock (time and date) expressing milliseconds\n *     since the epoch.  The wall clock can be set by the user or the phone\n *     network (see {@link #setCurrentTimeMillis}), so the time may jump\n *     backwards or forwards unpredictably.  This clock should only be used\n *     when correspondence with real-world dates and times is important, such\n *     as in a calendar or alarm clock application.  Interval or elapsed\n *     time measurements should use a different clock.  If you are using\n *     System.currentTimeMillis(), consider listening to the\n *     {@link android.content.Intent#ACTION_TIME_TICK ACTION_TIME_TICK},\n *     {@link android.content.Intent#ACTION_TIME_CHANGED ACTION_TIME_CHANGED}\n *     and {@link android.content.Intent#ACTION_TIMEZONE_CHANGED\n *     ACTION_TIMEZONE_CHANGED} {@link android.content.Intent Intent}\n *     broadcasts to find out when the time changes.\n *\n *     <li> <p> {@link #uptimeMillis} is counted in milliseconds since the\n *     system was booted.  This clock stops when the system enters deep\n *     sleep (CPU off, display dark, device waiting for external input),\n *     but is not affected by clock scaling, idle, or other power saving\n *     mechanisms.  This is the basis for most interval timing\n *     such as {@link Thread#sleep(long) Thread.sleep(millls)},\n *     {@link Object#wait(long) Object.wait(millis)}, and\n *     {@link System#nanoTime System.nanoTime()}.  This clock is guaranteed\n *     to be monotonic, and is suitable for interval timing when the\n *     interval does not span device sleep.  Most methods that accept a\n *     timestamp value currently expect the {@link #uptimeMillis} clock.\n *\n *     <li> <p> {@link #elapsedRealtime} and {@link #elapsedRealtimeNanos}\n *     return the time since the system was booted, and include deep sleep.\n *     This clock is guaranteed to be monotonic, and continues to tick even\n *     when the CPU is in power saving modes, so is the recommend basis\n *     for general purpose interval timing.\n *\n * </ul>\n *\n * There are several mechanisms for controlling the timing of events:\n *\n * <ul>\n *     <li> <p> Standard functions like {@link Thread#sleep(long)\n *     Thread.sleep(millis)} and {@link Object#wait(long) Object.wait(millis)}\n *     are always available.  These functions use the {@link #uptimeMillis}\n *     clock; if the device enters sleep, the remainder of the time will be\n *     postponed until the device wakes up.  These synchronous functions may\n *     be interrupted with {@link Thread#interrupt Thread.interrupt()}, and\n *     you must handle {@link InterruptedException}.\n *\n *     <li> <p> {@link #sleep SystemClock.sleep(millis)} is a utility function\n *     very similar to {@link Thread#sleep(long) Thread.sleep(millis)}, but it\n *     ignores {@link InterruptedException}.  Use this function for delays if\n *     you do not use {@link Thread#interrupt Thread.interrupt()}, as it will\n *     preserve the interrupted state of the thread.\n *\n *     <li> <p> The {@link android.os.Handler} class can schedule asynchronous\n *     callbacks at an absolute or relative time.  Handler objects also use the\n *     {@link #uptimeMillis} clock, and require an {@link android.os.Looper\n *     event loop} (normally present in any GUI application).\n *\n *     <li> <p> The {@link android.app.AlarmManager} can trigger one-time or\n *     recurring events which occur even when the device is in deep sleep\n *     or your application is not running.  Events may be scheduled with your\n *     choice of {@link java.lang.System#currentTimeMillis} (RTC) or\n *     {@link #elapsedRealtime} (ELAPSED_REALTIME), and cause an\n *     {@link android.content.Intent} broadcast when they occur.\n * </ul>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void sleep(long ms)",
    "returnType" : "void",
    "comment" : "\n     * Waits a given number of milliseconds (of uptimeMillis) before returning.\n     * Similar to {@link java.lang.Thread#sleep(long)}, but does not throw\n     * {@link InterruptedException}; {@link Thread#interrupt()} events are\n     * deferred until the next interruptible operation.  Does not return until\n     * at least the specified number of milliseconds has elapsed.\n     *\n     * @param ms to sleep before returning, in milliseconds of uptime.\n     ",
    "links" : [ "#interrupt()", "java.lang.Thread#sleep(long)", "InterruptedException" ]
  }, {
    "name" : "public static boolean setCurrentTimeMillis(long millis)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the current wall time, in milliseconds.  Requires the calling\n     * process to have appropriate permissions.\n     *\n     * @return if the clock was successfully set to the specified time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native long uptimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns milliseconds since boot, not counting time spent in deep sleep.\n     *\n     * @return milliseconds of non-sleep uptime since boot.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Clock uptimeClock()",
    "returnType" : "Clock",
    "comment" : "\n     * Return {@link Clock} that starts at system boot, not counting time spent\n     * in deep sleep.\n     *\n     * @removed\n     ",
    "links" : [ "java.time.Clock" ]
  }, {
    "name" : "public static native long elapsedRealtime()",
    "returnType" : "long",
    "comment" : "\n     * Returns milliseconds since boot, including time spent in sleep.\n     *\n     * @return elapsed milliseconds since boot.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Clock elapsedRealtimeClock()",
    "returnType" : "Clock",
    "comment" : "\n     * Return {@link Clock} that starts at system boot, including time spent in\n     * sleep.\n     *\n     * @removed\n     ",
    "links" : [ "java.time.Clock" ]
  }, {
    "name" : "public static native long elapsedRealtimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Returns nanoseconds since boot, including time spent in sleep.\n     *\n     * @return elapsed nanoseconds since boot.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native long currentThreadTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns milliseconds running in the current thread.\n     *\n     * @return elapsed milliseconds in the thread\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native long currentThreadTimeMicro()",
    "returnType" : "long",
    "comment" : "\n     * Returns microseconds running in the current thread.\n     *\n     * @return elapsed microseconds in the thread\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native long currentTimeMicro()",
    "returnType" : "long",
    "comment" : "\n     * Returns current wall time in  microseconds.\n     *\n     * @return elapsed microseconds in wall time\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long currentNetworkTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns milliseconds since January 1, 1970 00:00:00.0 UTC, synchronized\n     * using a remote network source outside the device.\n     * <p>\n     * While the time returned by {@link System#currentTimeMillis()} can be\n     * adjusted by the user, the time returned by this method cannot be adjusted\n     * by the user. Note that synchronization may occur using an insecure\n     * network protocol, so the returned time should not be used for security\n     * purposes.\n     * <p>\n     * This performs no blocking network operations and returns values based on\n     * a recent successful synchronization event; it will either return a valid\n     * time or throw.\n     *\n     * @throws DateTimeException when no accurate network time can be provided.\n     * @hide\n     ",
    "links" : [ "#currentTimeMillis()" ]
  }, {
    "name" : "public static Clock currentNetworkTimeClock()",
    "returnType" : "Clock",
    "comment" : "\n     * Returns a {@link Clock} that starts at January 1, 1970 00:00:00.0 UTC,\n     * synchronized using a remote network source outside the device.\n     * <p>\n     * While the time returned by {@link System#currentTimeMillis()} can be\n     * adjusted by the user, the time returned by this method cannot be adjusted\n     * by the user. Note that synchronization may occur using an insecure\n     * network protocol, so the returned time should not be used for security\n     * purposes.\n     * <p>\n     * This performs no blocking network operations and returns values based on\n     * a recent successful synchronization event; it will either return a valid\n     * time or throw.\n     *\n     * @throws DateTimeException when no accurate network time can be provided.\n     * @hide\n     ",
    "links" : [ "#currentTimeMillis()", "java.time.Clock" ]
  }, {
    "name" : "public static Clock currentGnssTimeClock()",
    "returnType" : "Clock",
    "comment" : "\n     * Returns a {@link Clock} that starts at January 1, 1970 00:00:00.0 UTC,\n     * synchronized using the device's location provider.\n     *\n     * @throws DateTimeException when the location provider has not had a location fix since boot.\n     ",
    "links" : [ "java.time.Clock" ]
  } ],
  "variableNames" : [ "TAG" ],
  "methodNames" : [ "public static void sleep(long ms)", "public static boolean setCurrentTimeMillis(long millis)", "public static native long uptimeMillis()", "public static Clock uptimeClock()", "public static native long elapsedRealtime()", "public static Clock elapsedRealtimeClock()", "public static native long elapsedRealtimeNanos()", "public static native long currentThreadTimeMillis()", "public static native long currentThreadTimeMicro()", "public static native long currentTimeMicro()", "public static long currentNetworkTimeMillis()", "public static Clock currentNetworkTimeClock()", "public static Clock currentGnssTimeClock()" ]
}