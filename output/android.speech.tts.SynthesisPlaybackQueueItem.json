{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/speech/tts/SynthesisPlaybackQueueItem.java",
  "packageName" : "android.speech.tts",
  "className" : "SynthesisPlaybackQueueItem",
  "comment" : "\n * Manages the playback of a list of byte arrays representing audio data that are queued by the\n * engine to an audio track.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_UNCONSUMED_AUDIO_MS",
    "type" : "long",
    "comment" : "\n     * Maximum length of audio we leave unconsumed by the audio track.\n     * Calls to {@link #put(byte[])} will block until we have less than\n     * this amount of audio left to play back.\n     ",
    "links" : [ "#put(byte" ]
  }, {
    "name" : "mListLock",
    "type" : "Lock",
    "comment" : "\n     * Guards accesses to mDataBufferList and mUnconsumedBytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReadReady",
    "type" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotFull",
    "type" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataBufferList",
    "type" : "LinkedList<ListEntry>",
    "comment" : " Guarded by mListLock.",
    "links" : [ ]
  }, {
    "name" : "mUnconsumedBytes",
    "type" : "int",
    "comment" : " Guarded by mListLock.",
    "links" : [ ]
  }, {
    "name" : "mStopped",
    "type" : "boolean",
    "comment" : "\n     * While mStopped and mIsError can be written from any thread, mDone is written\n     * only from the synthesis thread. All three variables are read from the\n     * audio playback thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDone",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatusCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioTrack",
    "type" : "BlockingAudioTrack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogger",
    "type" : "AbstractEventLogger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "markerList",
    "type" : "ConcurrentLinkedQueue<ProgressMarker>",
    "comment" : " wait for the next one.",
    "links" : [ ]
  }, {
    "name" : "NOT_RUN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RUN_CALLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STOP_CALLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunState",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchEndStatus()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stop(int statusCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void done()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void updateMarker()",
    "returnType" : "void",
    "comment" : " Set a callback for the first marker in the queue. ",
    "links" : [ ]
  }, {
    "name" : " void rangeStart(int markerInFrames, int start, int end)",
    "returnType" : "void",
    "comment" : " Informs us that at markerInFrames, the range between start and end is about to be spoken. ",
    "links" : [ ]
  }, {
    "name" : "public void onMarkerReached(AudioTrack track)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPeriodicNotification(AudioTrack track)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void put(byte[] buffer) throws InterruptedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte[] take() throws InterruptedException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "MAX_UNCONSUMED_AUDIO_MS", "mListLock", "mReadReady", "mNotFull", "mDataBufferList", "mUnconsumedBytes", "mStopped", "mDone", "mStatusCode", "mAudioTrack", "mLogger", "markerList", "NOT_RUN", "RUN_CALLED", "STOP_CALLED", "mRunState" ],
  "methodNames" : [ "public void run()", "private void dispatchEndStatus()", " void stop(int statusCode)", " void done()", " void updateMarker()", " void rangeStart(int markerInFrames, int start, int end)", "public void onMarkerReached(AudioTrack track)", "public void onPeriodicNotification(AudioTrack track)", " void put(byte[] buffer) throws InterruptedException", "private byte[] take() throws InterruptedException" ]
}