{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/SyncFence.java",
  "packageName" : "android.hardware",
  "className" : "SyncFence",
  "comment" : "\n * A SyncFence represents a synchronization primitive which signals when hardware units have\n * completed work on a particular resource. They initially start in an unsignaled state and make\n * a one-time transition to either a signaled or error state. SyncFences are created by various\n * device APIs in response to submitting tasks to the device. They cannot be created nor signaled\n * by userspace. As a result, this means that a SyncFence will make always make forward progress.\n *\n * <p>SyncFence's generally come in one of two varieties. \"Presentation fences\" refer to\n *  a SyncFence when the writing to a buffer has finished. \"Release fences\" then refer\n *  to when the reading from a buffer has finished.</p>\n *\n * <p>For example, a GPU rendering to a framebuffer may generate a synchronization fence,\n * e.g., an EGLSync or VkFence, which signals when rendering has completed. Once the fence signals,\n * then the backing storage for the framebuffer may be safely read from, such as for display or\n * for media encoding. This would be referred to as a \"presentation fence.\"</p>\n *\n * <p>Similarly when using an {@link android.media.ImageWriter} it is possible that an\n * {@link android.media.Image} returned by {@link ImageWriter#dequeueInputImage()} may already\n * have a {@link Image#getFence() fence} set on it. This would be what is referred to as either\n * a \"release fence\" or an \"acqurie fence\" and indicates the fence that the writer must wait\n * on before writing to the underlying buffer. In the case of ImageWriter this is done\n * automatically when eg {@link Image#getPlanes()} is called, however when using\n * {@link Image#getHardwareBuffer()} it is the caller's responsibility to ensure the\n * release fence has signaled before writing to the buffer.</p>\n *\n * @see android.opengl.EGLExt#eglDupNativeFenceFDANDROID(EGLDisplay, EGLSync)\n * @see android.media.Image#getFence()\n ",
  "links" : [ "android.media.Image#getPlanes()", "android.media.Image#getHardwareBuffer()", "android.media.Image", "android.media.ImageWriter", "android.media.ImageWriter#dequeueInputImage()", "android.media.Image#getFence()" ],
  "variables" : [ {
    "name" : "SIGNAL_TIME_INVALID",
    "type" : "long",
    "comment" : "\n     * An invalid signal time. Represents either the signal time for a SyncFence that isn't valid\n     * (that is, {@link #isValid()} is false), or if an error occurred while attempting to retrieve\n     * the signal time.\n     ",
    "links" : [ "#isValid()" ]
  }, {
    "name" : "SIGNAL_TIME_PENDING",
    "type" : "long",
    "comment" : "\n     * A pending signal time. This is equivalent to the max value of a long, representing an\n     * infinitely far point in the future.\n     ",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloser",
    "type" : "Runnable",
    "comment" : " is well worth making.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SyncFence>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SyncFence createEmpty()",
    "returnType" : "SyncFence",
    "comment" : "*\n     * Create an empty SyncFence\n     *\n     * @return a SyncFence with invalid fence\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SyncFence create(@NonNull ParcelFileDescriptor wrapped)",
    "returnType" : "SyncFence",
    "comment" : "\n     * Create a new SyncFence wrapped around another {@link ParcelFileDescriptor}. By default, all\n     * method calls are delegated to the wrapped descriptor. This takes ownership of the\n     * {@link ParcelFileDescriptor}.\n     *\n     * @param wrapped The descriptor to be wrapped.\n     * @hide\n     ",
    "links" : [ "android.os.ParcelFileDescriptor" ]
  }, {
    "name" : "public static SyncFence adopt(int fileDescriptor)",
    "returnType" : "SyncFence",
    "comment" : "\n     * Create a new SyncFence wrapped around another descriptor. The returned {@link SyncFence}\n     * instance takes ownership of the file descriptor.\n     *\n     * @param fileDescriptor The descriptor to be wrapped.\n     * @hide\n     ",
    "links" : [ "android.hardware.SyncFence" ]
  }, {
    "name" : "public ParcelFileDescriptor getFdDup() throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Return a dup'd ParcelFileDescriptor from the SyncFence ParcelFileDescriptor.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the SyncFile object is valid.\n     *\n     * @return {@code true} if the file descriptor represents a valid, open file;\n     *         {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean await(@NonNull Duration timeout)",
    "returnType" : "boolean",
    "comment" : "\n     * Waits for a SyncFence to signal for up to the timeout duration.\n     *\n     * An invalid SyncFence, that is if {@link #isValid()} is false, is treated equivalently\n     * to a SyncFence that has already signaled. That is, wait() will immediately return true.\n     *\n     * @param timeout The timeout duration. If the duration is negative, then this waits forever.\n     * @return true if the fence signaled or isn't valid, false otherwise.\n     ",
    "links" : [ "#isValid()" ]
  }, {
    "name" : "public boolean awaitForever()",
    "returnType" : "boolean",
    "comment" : "\n     * Waits forever for a SyncFence to signal.\n     *\n     * An invalid SyncFence, that is if {@link #isValid()} is false, is treated equivalently\n     * to a SyncFence that has already signaled. That is, wait() will immediately return true.\n     *\n     * @return true if the fence signaled or isn't valid, false otherwise.\n     ",
    "links" : [ "#isValid()" ]
  }, {
    "name" : "private boolean await(long timeoutNanos)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getSignalTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in nanoseconds that the fence signaled in the CLOCK_MONOTONIC time domain.\n     * This corresponds to {@link System#nanoTime()} but may also be compared to\n     * {@link SystemClock#uptimeMillis()} after adjusting for milliseconds vs. nanoseconds.\n     *\n     * If the fence isn't valid, that is if {@link #isValid()} is false, then this returns\n     * {@link #SIGNAL_TIME_INVALID}. Similarly, if an error occurs while trying to access the\n     * signal time, then {@link #SIGNAL_TIME_INVALID} is also returned.\n     *\n     * If the fence hasn't yet signaled, then {@link #SIGNAL_TIME_PENDING} is returned.\n     *\n     * @return The time the fence signaled, {@link #SIGNAL_TIME_INVALID} if there's an error,\n     *         or {@link #SIGNAL_TIME_PENDING} if the fence hasn't signaled yet.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#SIGNAL_TIME_INVALID", "#SIGNAL_TIME_PENDING", "#nanoTime()", "#isValid()" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the SyncFence. This implementation closes the underlying OS resources allocated\n     * this stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getLock()",
    "returnType" : "Object",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getNativeFence()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this object into a Parcel.\n     *\n     * @param out The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     *              May be {@code 0} or {@link #PARCELABLE_WRITE_RETURN_VALUE}\n     ",
    "links" : [ "#PARCELABLE_WRITE_RETURN_VALUE" ]
  }, {
    "name" : "private static native long nGetDestructor()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreate(int fd)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsValid(long nPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetFd(long nPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nWait(long nPtr, long timeout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetSignalTime(long nPtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nIncRef(long nPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SyncFence createEmpty()", "public static SyncFence create(@NonNull ParcelFileDescriptor wrapped)", "public static SyncFence adopt(int fileDescriptor)", "public ParcelFileDescriptor getFdDup() throws IOException", "public boolean isValid()", "public boolean await(@NonNull Duration timeout)", "public boolean awaitForever()", "private boolean await(long timeoutNanos)", "public long getSignalTime()", "public void close()", "public int describeContents()", "public Object getLock()", "public long getNativeFence()", "public void writeToParcel(@NonNull Parcel out, int flags)", "private static native long nGetDestructor()", "private static native long nCreate(int fd)", "private static native boolean nIsValid(long nPtr)", "private static native int nGetFd(long nPtr)", "private static native boolean nWait(long nPtr, long timeout)", "private static native long nGetSignalTime(long nPtr)", "private static native void nIncRef(long nPtr)" ],
  "variableNames" : [ "SIGNAL_TIME_INVALID", "SIGNAL_TIME_PENDING", "sRegistry", "mNativePtr", "mCloser", "CREATOR" ]
}