{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/satellite/SatelliteManager.java",
  "packageName" : "android.telephony.satellite",
  "className" : "SatelliteManager",
  "comment" : "\n * Manages satellite operations such as provisioning, pointing, messaging, location sharing, etc.\n * To get the object, call {@link Context#getSystemService(String)}.\n *\n * @hide\n ",
  "links" : [ "android.content.Context#getSystemService(String)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteDatagramCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteDatagramCallback, ISatelliteDatagramCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteProvisionStateCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteProvisionStateCallback, ISatelliteProvisionStateCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteModemStateCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteModemStateCallback, ISatelliteModemStateCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteTransmissionUpdateCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteTransmissionUpdateCallback, ISatelliteTransmissionUpdateCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNtnSignalStrengthCallbackMap",
    "type" : "ConcurrentHashMap<NtnSignalStrengthCallback, INtnSignalStrengthCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteCapabilitiesCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteCapabilitiesCallback, ISatelliteCapabilitiesCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteSupportedStateCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteSupportedStateCallback, ISatelliteSupportedStateCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSatelliteCommunicationAllowedStateCallbackMap",
    "type" : "ConcurrentHashMap<SatelliteCommunicationAllowedStateCallback, ISatelliteCommunicationAllowedStateCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * Context this SatelliteManager is for.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DEMO_MODE_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_EMERGENCY_MODE_ENABLED",
    "type" : "String",
    "comment" : "\n     * Bundle key to get the response from\n     * {@link #requestIsEmergencyModeEnabled(Executor, OutcomeReceiver)}.\n     * @hide\n     ",
    "links" : [ "#requestIsEmergencyModeEnabled(Executor" ]
  }, {
    "name" : "KEY_SATELLITE_SUPPORTED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_CAPABILITIES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_PROVISIONED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_COMMUNICATION_ALLOWED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SATELLITE_NEXT_VISIBILITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_NTN_SIGNAL_STRENGTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The request was successfully processed.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_ERROR",
    "type" : "int",
    "comment" : "\n     * A generic error which should be used only when other specific errors cannot be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_SERVER_ERROR",
    "type" : "int",
    "comment" : "\n     * Error received from the satellite server.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_SERVICE_ERROR",
    "type" : "int",
    "comment" : "\n     * Error received from the vendor service. This generic error code should be used\n     * only when the error cannot be mapped to other specific service error codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_MODEM_ERROR",
    "type" : "int",
    "comment" : "\n     * Error received from satellite modem. This generic error code should be used only when\n     * the error cannot be mapped to other specific modem error codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_NETWORK_ERROR",
    "type" : "int",
    "comment" : "\n     * Error received from the satellite network. This generic error code should be used only when\n     * the error cannot be mapped to other specific network error codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_INVALID_TELEPHONY_STATE",
    "type" : "int",
    "comment" : "\n     * Telephony is not in a valid state to receive requests from clients.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_INVALID_MODEM_STATE",
    "type" : "int",
    "comment" : "\n     * Satellite modem is not in a valid state to receive requests from clients.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_INVALID_ARGUMENTS",
    "type" : "int",
    "comment" : "\n     * Either vendor service, or modem, or Telephony framework has received a request with\n     * invalid arguments from its clients.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_REQUEST_FAILED",
    "type" : "int",
    "comment" : "\n     * Telephony framework failed to send a request or receive a response from the vendor service\n     * or satellite modem due to internal error.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_RADIO_NOT_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Radio did not start or is resetting.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_REQUEST_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The request is not supported by either the satellite modem or the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_NO_RESOURCES",
    "type" : "int",
    "comment" : "\n     * Satellite modem or network has no resources available to handle requests from clients.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_SERVICE_NOT_PROVISIONED",
    "type" : "int",
    "comment" : "\n     * Satellite service is not provisioned yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_SERVICE_PROVISION_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * Satellite service provision is already in progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_REQUEST_ABORTED",
    "type" : "int",
    "comment" : "\n     * The ongoing request was aborted by either the satellite modem or the network.\n     * This error is also returned when framework decides to abort current send request as one\n     * of the previous send request failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_ACCESS_BARRED",
    "type" : "int",
    "comment" : "\n     * The device/subscriber is barred from accessing the satellite service.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_NETWORK_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Satellite modem timeout to receive ACK or response from the satellite network after\n     * sending a request to the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_NOT_REACHABLE",
    "type" : "int",
    "comment" : "\n     * Satellite network is not reachable from the modem.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_NOT_AUTHORIZED",
    "type" : "int",
    "comment" : "\n     * The device/subscriber is not authorized to register with the satellite service provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The device does not support satellite.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_REQUEST_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * The current request is already in-progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_MODEM_BUSY",
    "type" : "int",
    "comment" : "\n     * Satellite modem is currently busy due to which current request cannot be processed.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_ILLEGAL_STATE",
    "type" : "int",
    "comment" : "\n     * Telephony process is not currently available or satellite is not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_RESULT_MODEM_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Telephony framework timeout to receive ACK or response from the satellite modem after\n     * sending a request to the modem.\n     ",
    "links" : [ ]
  }, {
    "name" : "NT_RADIO_TECHNOLOGY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown Non-Terrestrial radio technology. This generic radio technology should be used\n     * only when the radio technology cannot be mapped to other specific radio technologies.\n     ",
    "links" : [ ]
  }, {
    "name" : "NT_RADIO_TECHNOLOGY_NB_IOT_NTN",
    "type" : "int",
    "comment" : "\n     * 3GPP NB-IoT (Narrowband Internet of Things) over Non-Terrestrial-Networks technology.\n     ",
    "links" : [ ]
  }, {
    "name" : "NT_RADIO_TECHNOLOGY_NR_NTN",
    "type" : "int",
    "comment" : "\n     * 3GPP 5G NR over Non-Terrestrial-Networks technology.\n     ",
    "links" : [ ]
  }, {
    "name" : "NT_RADIO_TECHNOLOGY_EMTC_NTN",
    "type" : "int",
    "comment" : "\n     * 3GPP eMTC (enhanced Machine-Type Communication) over Non-Terrestrial-Networks technology.\n     ",
    "links" : [ ]
  }, {
    "name" : "NT_RADIO_TECHNOLOGY_PROPRIETARY",
    "type" : "int",
    "comment" : "\n     * Proprietary technology.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_HOLD_POSITION_UNKNOWN",
    "type" : "int",
    "comment" : " Suggested device hold position is unknown. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_HOLD_POSITION_PORTRAIT",
    "type" : "int",
    "comment" : " User is suggested to hold the device in portrait mode. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_HOLD_POSITION_LANDSCAPE_LEFT",
    "type" : "int",
    "comment" : " User is suggested to hold the device in landscape mode with left hand. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_HOLD_POSITION_LANDSCAPE_RIGHT",
    "type" : "int",
    "comment" : " User is suggested to hold the device in landscape mode with right hand. ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_MODE_UNKNOWN",
    "type" : "int",
    "comment" : " Display mode is unknown. ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_MODE_FIXED",
    "type" : "int",
    "comment" : " Display mode of the device used for satellite communication for non-foldable phones. ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_MODE_OPENED",
    "type" : "int",
    "comment" : " Display mode of the device used for satellite communication for foldabale phones when the\n     * device is opened. ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_MODE_CLOSED",
    "type" : "int",
    "comment" : " Display mode of the device used for satellite communication for foldabable phones when the\n     * device is closed. ",
    "links" : [ ]
  }, {
    "name" : "EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE_SOS",
    "type" : "int",
    "comment" : "\n     * The emergency call is handed over to oem-enabled satellite SOS messaging. SOS messages are\n     * sent to SOS providers, which will then forward the messages to emergency providers.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE_T911",
    "type" : "int",
    "comment" : "\n     * The emergency call is handed over to carrier-enabled satellite T911 messaging. T911 messages\n     * are sent directly to local emergency providers.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * The default state indicating that datagram transfer is idle.\n     * This should be sent if there are no message transfer activity happening.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_SENDING",
    "type" : "int",
    "comment" : "\n     * A transition state indicating that a datagram is being sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_SEND_SUCCESS",
    "type" : "int",
    "comment" : "\n     * An end state indicating that datagram sending completed successfully.\n     * After datagram transfer completes, {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE}\n     * will be sent if no more messages are pending.\n     ",
    "links" : [ "#SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE" ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_SEND_FAILED",
    "type" : "int",
    "comment" : "\n     * An end state indicating that datagram sending completed with a failure.\n     * After datagram transfer completes, {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE}\n     * must be sent before reporting any additional datagram transfer state changes. All pending\n     * messages will be reported as failed, to the corresponding applications.\n     ",
    "links" : [ "#SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE" ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVING",
    "type" : "int",
    "comment" : "\n     * A transition state indicating that a datagram is being received.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_SUCCESS",
    "type" : "int",
    "comment" : "\n     * An end state indicating that datagram receiving completed successfully.\n     * After datagram transfer completes, {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE}\n     * will be sent if no more messages are pending.\n     ",
    "links" : [ "#SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE" ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_NONE",
    "type" : "int",
    "comment" : "\n     * An end state indicating that datagram receive operation found that there are no\n     * messages to be retrieved from the satellite.\n     * After datagram transfer completes, {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE}\n     * will be sent if no more messages are pending.\n     ",
    "links" : [ "#SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE" ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_FAILED",
    "type" : "int",
    "comment" : "\n     * An end state indicating that datagram receive completed with a failure.\n     * After datagram transfer completes, {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE}\n     * will be sent if no more messages are pending.\n     ",
    "links" : [ "#SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE" ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_WAITING_TO_CONNECT",
    "type" : "int",
    "comment" : "\n     * A transition state indicating that Telephony is waiting for satellite modem to connect to a\n     * satellite network before sending a datagram or polling for datagrams. If the satellite modem\n     * successfully connects to a satellite network, either\n     * {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_SENDING} or\n     * {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVING} will be sent. Otherwise,\n     * either {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_SEND_FAILED} or\n     * {@link #SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_FAILED} will be sent.\n     ",
    "links" : [ "#SATELLITE_DATAGRAM_TRANSFER_STATE_SENDING", "#SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVING", "#SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_FAILED", "#SATELLITE_DATAGRAM_TRANSFER_STATE_SEND_FAILED" ]
  }, {
    "name" : "SATELLITE_DATAGRAM_TRANSFER_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The datagram transfer state is unknown. This generic datagram transfer state should be used\n     * only when the datagram transfer state cannot be mapped to other specific datagram transfer\n     * states.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * Satellite modem is in idle state.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_LISTENING",
    "type" : "int",
    "comment" : "\n     * Satellite modem is listening for incoming datagrams.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_DATAGRAM_TRANSFERRING",
    "type" : "int",
    "comment" : "\n     * Satellite modem is sending and/or receiving datagrams.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_DATAGRAM_RETRYING",
    "type" : "int",
    "comment" : "\n     * Satellite modem is retrying to send and/or receive datagrams.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_OFF",
    "type" : "int",
    "comment" : "\n     * Satellite modem is powered off.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Satellite modem is unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_NOT_CONNECTED",
    "type" : "int",
    "comment" : "\n     * The satellite modem is powered on but the device is not registered to a satellite cell.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_CONNECTED",
    "type" : "int",
    "comment" : "\n     * The satellite modem is powered on and the device is registered to a satellite cell.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_ENABLING_SATELLITE",
    "type" : "int",
    "comment" : "\n     * The satellite modem is being powered on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_DISABLING_SATELLITE",
    "type" : "int",
    "comment" : "\n     * The satellite modem is being powered off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_MODEM_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Satellite modem state is unknown. This generic modem state should be used only when the\n     * modem state cannot be mapped to other specific modem states.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATAGRAM_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Datagram type is unknown. This generic datagram type should be used only when the\n     * datagram type cannot be mapped to other specific datagram types.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATAGRAM_TYPE_SOS_MESSAGE",
    "type" : "int",
    "comment" : "\n     * Datagram type indicating that the datagram to be sent or received is of type SOS message.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATAGRAM_TYPE_LOCATION_SHARING",
    "type" : "int",
    "comment" : "\n     * Datagram type indicating that the datagram to be sent or received is of type\n     * location sharing.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATAGRAM_TYPE_KEEP_ALIVE",
    "type" : "int",
    "comment" : "\n     * This type of datagram is used to keep the device in satellite connected state or check if\n     * there is any incoming message.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATAGRAM_TYPE_LAST_SOS_MESSAGE_STILL_NEED_HELP",
    "type" : "int",
    "comment" : "\n     * Datagram type indicating that the datagram to be sent or received is of type SOS message and\n     * is the last message to emergency service provider indicating still needs help.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATAGRAM_TYPE_LAST_SOS_MESSAGE_NO_HELP_NEEDED",
    "type" : "int",
    "comment" : "\n     * Datagram type indicating that the datagram to be sent or received is of type SOS message and\n     * is the last message to emergency service provider indicating no more help is needed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_COMMUNICATION_RESTRICTION_REASON_USER",
    "type" : "int",
    "comment" : "\n     * Satellite communication restricted by user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_COMMUNICATION_RESTRICTION_REASON_GEOLOCATION",
    "type" : "int",
    "comment" : "\n     * Satellite communication restricted by geolocation. This can be\n     * triggered based upon geofence input provided by carrier to enable or disable satellite.\n     ",
    "links" : [ ]
  }, {
    "name" : "SATELLITE_COMMUNICATION_RESTRICTION_REASON_ENTITLEMENT",
    "type" : "int",
    "comment" : "\n     * Satellite communication restricted by entitlement server. This can be triggered based on\n     * the EntitlementStatus value received from the entitlement server to enable or disable\n     * satellite.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void requestEnabled(@NonNull EnableRequestAttributes attributes, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Request to enable or disable the satellite modem and demo mode.\n     * If satellite modem and cellular modem cannot work concurrently,\n     * then this will disable the cellular modem if satellite modem is enabled,\n     * and will re-enable the cellular modem if satellite modem is disabled.\n     *\n     * Demo mode is created to simulate the experience of sending and receiving messages over\n     * satellite. If user enters demo mode, a request should be sent to framework to enable\n     * satellite with enableDemoMode set to {code true}. Once satellite is enabled and device is\n     * aligned with the satellite, user can send a message and also receive a reply in demo mode.\n     * If enableSatellite is {@code false}, enableDemoMode has no impact on the behavior.\n     *\n     * @param attributes The attributes of the enable request.\n     * @param executor The executor on which the error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void requestIsEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite modem is enabled.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if the satellite modem\n     *                 is enabled and {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void requestIsDemoModeEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite service demo mode is enabled.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if demo mode is enabled\n     *                 and {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void requestIsEmergencyModeEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite service is enabled for emergency mode.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if satellite is enabled\n     *                 for emergency mode and {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void requestIsSupported(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the satellite service is supported on the device.\n     *\n     * <p>\n     * Note: This API only checks whether the device supports the satellite feature. The result will\n     * not be affected by whether the device is provisioned.\n     * </p>\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if the satellite\n     *                 service is supported on the device and {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void requestCapabilities(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<SatelliteCapabilities, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the {@link SatelliteCapabilities} of the satellite service.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return the {@link SatelliteCapabilities} of the satellite service.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.telephony.satellite.SatelliteCapabilities", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void startTransmissionUpdates(@NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener, @NonNull SatelliteTransmissionUpdateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start receiving satellite transmission updates.\n     * This can be called by the pointing UI when the user starts pointing to the satellite.\n     * Modem should continue to report the pointing input as the device or satellite moves.\n     * Satellite transmission updates are started only on {@link #SATELLITE_RESULT_SUCCESS}.\n     * All other results indicate that this operation failed.\n     * Once satellite transmission updates begin, position and datagram transfer state updates\n     * will be sent through {@link SatelliteTransmissionUpdateCallback}.\n     *\n     * @param executor The executor on which the callback and error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     * @param callback The callback to notify of satellite transmission updates.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "#SATELLITE_RESULT_SUCCESS", "SatelliteResult", "android.telephony.satellite.SatelliteTransmissionUpdateCallback" ]
  }, {
    "name" : "public void stopTransmissionUpdates(@NonNull SatelliteTransmissionUpdateCallback callback, @SuppressWarnings(\"ListenerLast\") @NonNull @CallbackExecutor Executor executor, @SuppressWarnings(\"ListenerLast\") @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Stop receiving satellite transmission updates.\n     * This can be called by the pointing UI when the user stops pointing to the satellite.\n     * Satellite transmission updates are stopped and the callback is unregistered only on\n     * {@link #SATELLITE_RESULT_SUCCESS}. All other results that this operation failed.\n     *\n     * @param callback The callback that was passed to {@link\n     * #startTransmissionUpdates(Executor, Consumer, SatelliteTransmissionUpdateCallback)}.\n     * @param executor The executor on which the error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "#SATELLITE_RESULT_SUCCESS", "#startTransmissionUpdates(Executor", "SatelliteResult" ]
  }, {
    "name" : "public void provisionService(@NonNull String token, @NonNull byte[] provisionData, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Provision the device with a satellite provider.\n     * This is needed if the provider allows dynamic registration.\n     *\n     * @param token The token is generated by the user which is used as a unique identifier for\n     *              provisioning with satellite gateway.\n     * @param provisionData Data from the provisioning app that can be used by provisioning server\n     * @param cancellationSignal The optional signal used by the caller to cancel the provision\n     *                           request. Even when the cancellation is signaled, Telephony will\n     *                           still trigger the callback to return the result of this request.\n     * @param executor The executor on which the error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void deprovisionService(@NonNull String token, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Deprovision the device with the satellite provider.\n     * This is needed if the provider allows dynamic registration. Once deprovisioned,\n     * {@link SatelliteProvisionStateCallback#onSatelliteProvisionStateChanged(boolean)}\n     * should report as deprovisioned.\n     * For provisioning satellite service, refer to\n     * {@link #provisionService(String, byte[], CancellationSignal, Executor, Consumer)}\n     *\n     * @param token The token of the device/subscription to be deprovisioned.\n     *              This should match with the token passed as input in\n     *              {@link #provisionService(String, byte[], CancellationSignal, Executor,\n     *              Consumer)}\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteResult", "#provisionService(String", "android.telephony.satellite.SatelliteProvisionStateCallback#onSatelliteProvisionStateChanged(boolean)" ]
  }, {
    "name" : "public int registerForProvisionStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteProvisionStateCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Registers for the satellite provision state changed.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle the satellite provision state changed event.\n     *\n     * @return The {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void unregisterForProvisionStateChanged(@NonNull SatelliteProvisionStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters for the satellite provision state changed.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * @param callback The callback that was passed to\n     * {@link #registerForProvisionStateChanged(Executor, SatelliteProvisionStateCallback)}\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "#registerForProvisionStateChanged(Executor" ]
  }, {
    "name" : "public void requestIsProvisioned(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether this device is provisioned with a satellite provider.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if the device is\n     *                 provisioned with a satellite provider and {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public int registerForModemStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteModemStateCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Registers for modem state changed from satellite modem.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle the satellite modem state changed event.\n     *\n     * @return The {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void unregisterForModemStateChanged(@NonNull SatelliteModemStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters for modem state changed from satellite modem.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * @param callback The callback that was passed to\n     * {@link #registerForModemStateChanged(Executor, SatelliteModemStateCallback)}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "#registerForModemStateChanged(Executor" ]
  }, {
    "name" : "public int registerForIncomingDatagram(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteDatagramCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Register to receive incoming datagrams over satellite.\n     *\n     * To poll for pending satellite datagrams, refer to\n     * {@link #pollPendingDatagrams(Executor, Consumer)}\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle incoming datagrams over satellite.\n     *                 This callback with be invoked when a new datagram is received from satellite.\n     *\n     * @return The {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "SatelliteResult", "#pollPendingDatagrams(Executor" ]
  }, {
    "name" : "public void unregisterForIncomingDatagram(@NonNull SatelliteDatagramCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister to stop receiving incoming datagrams over satellite.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * @param callback The callback that was passed to\n     * {@link #registerForIncomingDatagram(Executor, SatelliteDatagramCallback)}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "#registerForIncomingDatagram(Executor" ]
  }, {
    "name" : "public void pollPendingDatagrams(@NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Poll pending satellite datagrams over satellite.\n     *\n     * This method should be called when user specifies to check incoming messages over satellite.\n     * This method requests modem to check if there are any pending datagrams to be received over\n     * satellite. If there are any incoming datagrams, they will be received via\n     * {@link SatelliteDatagramCallback#onSatelliteDatagramReceived(long, SatelliteDatagram, int,\n     * Consumer)} )}\n     *\n     * @param executor The executor on which the result listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "android.telephony.satellite.SatelliteDatagramCallback#onSatelliteDatagramReceived(long", "SatelliteResult" ]
  }, {
    "name" : "public void sendDatagram(@DatagramType int datagramType, @NonNull SatelliteDatagram datagram, boolean needFullScreenPointingUI, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Send datagram over satellite.\n     *\n     * Gateway encodes SOS message or location sharing message into a datagram and passes it as\n     * input to this method. Datagram received here will be passed down to modem without any\n     * encoding or encryption.\n     *\n     * @param datagramType datagram type indicating whether the datagram is of type\n     *                     SOS_SMS or LOCATION_SHARING.\n     * @param datagram encoded gateway datagram which is encrypted by the caller.\n     *                 Datagram will be passed down to modem without any encoding or encryption.\n     * @param needFullScreenPointingUI If set to true, this indicates pointingUI app to open in full\n     *                                 screen mode if satellite communication needs pointingUI.\n     *                                 If this is set to false, pointingUI may be presented to the\n     *                                 user in collapsed view. Application may decide to mark this\n     *                                 flag as true when the user is sending data for the first time\n     *                                 or whenever there is a considerable idle time between\n     *                                 satellite activity. This decision should be done based upon\n     *                                 user activity and the application's ability to determine the\n     *                                 best possible UX experience for the user.\n     * @param executor The executor on which the result listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void requestIsCommunicationAllowedForCurrentLocation(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether satellite communication is allowed for the current location.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if satellite\n     *                 communication is allowed for the current location and\n     *                 {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void requestTimeForNextSatelliteVisibility(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Duration, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the duration in seconds after which the satellite will be visible.\n     * This will be {@link Duration#ZERO} if the satellite is currently visible.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return the time after which the satellite will be visible.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "java.time.Duration#ZERO", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void setDeviceAlignedWithSatellite(boolean isAligned)",
    "returnType" : "void",
    "comment" : "\n     * Inform whether the device is aligned with the satellite for demo mode.\n     *\n     * Framework can send datagram to modem only when device is aligned with the satellite.\n     * This method helps framework to simulate the experience of sending datagram over satellite.\n     *\n     * @param isAligned {@true} Device is aligned with the satellite for demo mode\n     *                  {@false} Device is not aligned with the satellite for demo mode\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestAttachEnabledForCarrier(int subId, boolean enableSatellite, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * User request to enable or disable carrier supported satellite plmn scan and attach by modem.\n     * <p>\n     * This API should be called by only settings app to pass down the user input for\n     * enabling/disabling satellite. This user input will be persisted across device reboots.\n     * <p>\n     * Satellite will be enabled only when the following conditions are met:\n     * <ul>\n     * <li>Users want to enable it.</li>\n     * <li>There is no satellite communication restriction, which is added by\n     * {@link #addAttachRestrictionForCarrier(int, int, Executor, Consumer)}</li>\n     * <li>The carrier config {@link\n     * android.telephony.CarrierConfigManager#KEY_SATELLITE_ATTACH_SUPPORTED_BOOL} is set to\n     * {@code true}.</li>\n     * </ul>\n     *\n     * @param subId The subscription ID of the carrier.\n     * @param enableSatellite {@code true} to enable the satellite and {@code false} to disable.\n     * @param executor The executor on which the error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalArgumentException if the subscription is invalid.\n     ",
    "links" : [ "SatelliteResult", "android.telephony.CarrierConfigManager#KEY_SATELLITE_ATTACH_SUPPORTED_BOOL", "#addAttachRestrictionForCarrier(int" ]
  }, {
    "name" : "public void requestIsAttachEnabledForCarrier(int subId, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get whether the carrier supported satellite plmn scan and attach by modem is\n     * enabled by user.\n     *\n     * @param subId The subscription ID of the carrier.\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered.\n     *                 If the request is successful, {@link OutcomeReceiver#onResult(Object)}\n     *                 will return a {@code boolean} with value {@code true} if the satellite\n     *                 is enabled and {@code false} otherwise.\n     *                 If the request is not successful, {@link OutcomeReceiver#onError(Throwable)}\n     *                 will return a {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     * @throws IllegalArgumentException if the subscription is invalid.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.os.OutcomeReceiver#onResult(Object)", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void addAttachRestrictionForCarrier(int subId, @SatelliteCommunicationRestrictionReason int reason, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Add a restriction reason for disallowing carrier supported satellite plmn scan and attach\n     * by modem.\n     *\n     * @param subId The subscription ID of the carrier.\n     * @param reason Reason for disallowing satellite communication.\n     * @param executor The executor on which the error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalArgumentException if the subscription is invalid.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void removeAttachRestrictionForCarrier(int subId, @SatelliteCommunicationRestrictionReason int reason, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a restriction reason for disallowing carrier supported satellite plmn scan and attach\n     * by modem.\n     *\n     * @param subId The subscription ID of the carrier.\n     * @param reason Reason for disallowing satellite communication.\n     * @param executor The executor on which the error code listener will be called.\n     * @param resultListener Listener for the {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalArgumentException if the subscription is invalid.\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public Set<Integer> getAttachRestrictionReasonsForCarrier(int subId)",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Get reasons for disallowing satellite attach, as requested by\n     * {@link #addAttachRestrictionForCarrier(int, int, Executor, Consumer)}\n     *\n     * @param subId The subscription ID of the carrier.\n     * @return Set of reasons for disallowing satellite communication.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     * @throws IllegalArgumentException if the subscription is invalid.\n     ",
    "links" : [ "#addAttachRestrictionForCarrier(int" ]
  }, {
    "name" : "public void requestNtnSignalStrength(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<NtnSignalStrength, SatelliteException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request to get the signal strength of the satellite connection.\n     *\n     * <p>\n     * Note: This API is specifically designed for OEM enabled satellite connectivity only.\n     * For satellite connectivity enabled using carrier roaming, please refer to\n     * {@link android.telephony.TelephonyCallback.SignalStrengthsListener}, and\n     * {@link TelephonyManager#registerTelephonyCallback(Executor, TelephonyCallback)}.\n     * </p>\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback object to which the result will be delivered. If the request is\n     * successful, {@link OutcomeReceiver#onResult(Object)} will return an instance of\n     * {@link NtnSignalStrength} with a value of {@link NtnSignalStrength.NtnSignalStrengthLevel}\n     * The {@link NtnSignalStrength#NTN_SIGNAL_STRENGTH_NONE} will be returned if there is no\n     * signal strength data available.\n     * If the request is not successful, {@link OutcomeReceiver#onError(Throwable)} will return a\n     * {@link SatelliteException} with the {@link SatelliteResult}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.telephony.TelephonyCallback.SignalStrengthsListener", "android.telephony.satellite.NtnSignalStrength", "android.os.OutcomeReceiver#onResult(Object)", "android.telephony.satellite.NtnSignalStrength#NTN_SIGNAL_STRENGTH_NONE", "NtnSignalStrength.NtnSignalStrengthLevel", "android.telephony.TelephonyManager#registerTelephonyCallback(Executor", "android.os.OutcomeReceiver#onError(Throwable)" ]
  }, {
    "name" : "public void registerForNtnSignalStrengthChanged(@NonNull @CallbackExecutor Executor executor, @NonNull NtnSignalStrengthCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers for NTN signal strength changed from satellite modem.\n     * If the registration operation is not successful, a {@link SatelliteException} that contains\n     * {@link SatelliteResult} will be thrown.\n     *\n     * <p>\n     * Note: This API is specifically designed for OEM enabled satellite connectivity only.\n     * For satellite connectivity enabled using carrier roaming, please refer to\n     * {@link android.telephony.TelephonyCallback.SignalStrengthsListener}, and\n     * {@link TelephonyManager#registerTelephonyCallback(Executor, TelephonyCallback)}.\n     * </p>\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle the NTN signal strength changed event.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "SatelliteException", "SatelliteResult", "android.telephony.TelephonyCallback.SignalStrengthsListener", "android.telephony.TelephonyManager#registerTelephonyCallback(Executor" ]
  }, {
    "name" : "public void unregisterForNtnSignalStrengthChanged(@NonNull NtnSignalStrengthCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters for NTN signal strength changed from satellite modem.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * <p>\n     * Note: This API is specifically designed for OEM enabled satellite connectivity only.\n     * For satellite connectivity enabled using carrier roaming, please refer to\n     * {@link TelephonyManager#unregisterTelephonyCallback(TelephonyCallback)}..\n     * </p>\n     *\n     * @param callback The callback that was passed to.\n     * {@link #registerForNtnSignalStrengthChanged(Executor, NtnSignalStrengthCallback)}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalArgumentException if the callback is not valid or has already been\n     * unregistered.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "#registerForNtnSignalStrengthChanged(Executor", "android.telephony.TelephonyManager#unregisterTelephonyCallback(TelephonyCallback)" ]
  }, {
    "name" : "public int registerForCapabilitiesChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteCapabilitiesCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Registers for satellite capabilities change event from the satellite service.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle the satellite capabilities changed event.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterForCapabilitiesChanged(@NonNull SatelliteCapabilitiesCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters for satellite capabilities change event from the satellite service.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * @param callback The callback that was passed to.\n     * {@link #registerForCapabilitiesChanged(Executor, SatelliteCapabilitiesCallback)}.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     ",
    "links" : [ "#registerForCapabilitiesChanged(Executor" ]
  }, {
    "name" : "public List<String> getSatellitePlmnsForCarrier(int subId)",
    "returnType" : "List<String>",
    "comment" : "\n     * Get all satellite PLMNs for which attach is enable for carrier.\n     *\n     * @param subId subId The subscription ID of the carrier.\n     *\n     * @return List of plmn for carrier satellite service. If no plmn is available, empty list will\n     * be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int registerForSupportedStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteSupportedStateCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Registers for the satellite supported state changed.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle the satellite supoprted state changed event.\n     *\n     * @return The {@link SatelliteResult} result of the operation.\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     *\n     * @hide\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void unregisterForSupportedStateChanged(@NonNull SatelliteSupportedStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters for the satellite supported state changed.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * @param callback The callback that was passed to\n     * {@link #registerForSupportedStateChanged(Executor, SatelliteSupportedStateCallback)}\n     *\n     * @throws SecurityException if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     *\n     * @hide\n     ",
    "links" : [ "#registerForSupportedStateChanged(Executor" ]
  }, {
    "name" : "public int registerForCommunicationAllowedStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteCommunicationAllowedStateCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Registers for the satellite communication allowed state changed.\n     *\n     * @param executor The executor on which the callback will be called.\n     * @param callback The callback to handle satellite communication allowed state changed event.\n     * @return The {@link SatelliteResult} result of the operation.\n     * @throws SecurityException     if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     * @hide\n     ",
    "links" : [ "SatelliteResult" ]
  }, {
    "name" : "public void unregisterForCommunicationAllowedStateChanged(@NonNull SatelliteCommunicationAllowedStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters for the satellite communication allowed state changed.\n     * If callback was not registered before, the request will be ignored.\n     *\n     * @param callback The callback that was passed to\n     *                 {@link #registerForCommunicationAllowedStateChanged(Executor,\n     *                 SatelliteCommunicationAllowedStateCallback)}\n     * @throws SecurityException     if the caller doesn't have required permission.\n     * @throws IllegalStateException if the Telephony process is not currently available.\n     * @hide\n     ",
    "links" : [ "#registerForCommunicationAllowedStateChanged(Executor" ]
  }, {
    "name" : "private static ITelephony getITelephony()",
    "returnType" : "ITelephony",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void logd(@NonNull String log)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void loge(@NonNull String log)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void requestEnabled(@NonNull EnableRequestAttributes attributes, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void requestIsEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public void requestIsDemoModeEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public void requestIsEmergencyModeEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public void requestIsSupported(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public void requestCapabilities(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<SatelliteCapabilities, SatelliteException> callback)", "public void startTransmissionUpdates(@NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener, @NonNull SatelliteTransmissionUpdateCallback callback)", "public void stopTransmissionUpdates(@NonNull SatelliteTransmissionUpdateCallback callback, @SuppressWarnings(\"ListenerLast\") @NonNull @CallbackExecutor Executor executor, @SuppressWarnings(\"ListenerLast\") @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void provisionService(@NonNull String token, @NonNull byte[] provisionData, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void deprovisionService(@NonNull String token, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public int registerForProvisionStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteProvisionStateCallback callback)", "public void unregisterForProvisionStateChanged(@NonNull SatelliteProvisionStateCallback callback)", "public void requestIsProvisioned(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public int registerForModemStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteModemStateCallback callback)", "public void unregisterForModemStateChanged(@NonNull SatelliteModemStateCallback callback)", "public int registerForIncomingDatagram(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteDatagramCallback callback)", "public void unregisterForIncomingDatagram(@NonNull SatelliteDatagramCallback callback)", "public void pollPendingDatagrams(@NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void sendDatagram(@DatagramType int datagramType, @NonNull SatelliteDatagram datagram, boolean needFullScreenPointingUI, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void requestIsCommunicationAllowedForCurrentLocation(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public void requestTimeForNextSatelliteVisibility(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Duration, SatelliteException> callback)", "public void setDeviceAlignedWithSatellite(boolean isAligned)", "public void requestAttachEnabledForCarrier(int subId, boolean enableSatellite, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void requestIsAttachEnabledForCarrier(int subId, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, SatelliteException> callback)", "public void addAttachRestrictionForCarrier(int subId, @SatelliteCommunicationRestrictionReason int reason, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public void removeAttachRestrictionForCarrier(int subId, @SatelliteCommunicationRestrictionReason int reason, @NonNull @CallbackExecutor Executor executor, @SatelliteResult @NonNull Consumer<Integer> resultListener)", "public Set<Integer> getAttachRestrictionReasonsForCarrier(int subId)", "public void requestNtnSignalStrength(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<NtnSignalStrength, SatelliteException> callback)", "public void registerForNtnSignalStrengthChanged(@NonNull @CallbackExecutor Executor executor, @NonNull NtnSignalStrengthCallback callback)", "public void unregisterForNtnSignalStrengthChanged(@NonNull NtnSignalStrengthCallback callback)", "public int registerForCapabilitiesChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteCapabilitiesCallback callback)", "public void unregisterForCapabilitiesChanged(@NonNull SatelliteCapabilitiesCallback callback)", "public List<String> getSatellitePlmnsForCarrier(int subId)", "public int registerForSupportedStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteSupportedStateCallback callback)", "public void unregisterForSupportedStateChanged(@NonNull SatelliteSupportedStateCallback callback)", "public int registerForCommunicationAllowedStateChanged(@NonNull @CallbackExecutor Executor executor, @NonNull SatelliteCommunicationAllowedStateCallback callback)", "public void unregisterForCommunicationAllowedStateChanged(@NonNull SatelliteCommunicationAllowedStateCallback callback)", "private static ITelephony getITelephony()", "private static void logd(@NonNull String log)", "private static void loge(@NonNull String log)" ],
  "variableNames" : [ "TAG", "sSatelliteDatagramCallbackMap", "sSatelliteProvisionStateCallbackMap", "sSatelliteModemStateCallbackMap", "sSatelliteTransmissionUpdateCallbackMap", "sNtnSignalStrengthCallbackMap", "sSatelliteCapabilitiesCallbackMap", "sSatelliteSupportedStateCallbackMap", "sSatelliteCommunicationAllowedStateCallbackMap", "mSubId", "mContext", "KEY_SATELLITE_ENABLED", "KEY_DEMO_MODE_ENABLED", "KEY_EMERGENCY_MODE_ENABLED", "KEY_SATELLITE_SUPPORTED", "KEY_SATELLITE_CAPABILITIES", "KEY_SATELLITE_PROVISIONED", "KEY_SATELLITE_COMMUNICATION_ALLOWED", "KEY_SATELLITE_NEXT_VISIBILITY", "KEY_NTN_SIGNAL_STRENGTH", "SATELLITE_RESULT_SUCCESS", "SATELLITE_RESULT_ERROR", "SATELLITE_RESULT_SERVER_ERROR", "SATELLITE_RESULT_SERVICE_ERROR", "SATELLITE_RESULT_MODEM_ERROR", "SATELLITE_RESULT_NETWORK_ERROR", "SATELLITE_RESULT_INVALID_TELEPHONY_STATE", "SATELLITE_RESULT_INVALID_MODEM_STATE", "SATELLITE_RESULT_INVALID_ARGUMENTS", "SATELLITE_RESULT_REQUEST_FAILED", "SATELLITE_RESULT_RADIO_NOT_AVAILABLE", "SATELLITE_RESULT_REQUEST_NOT_SUPPORTED", "SATELLITE_RESULT_NO_RESOURCES", "SATELLITE_RESULT_SERVICE_NOT_PROVISIONED", "SATELLITE_RESULT_SERVICE_PROVISION_IN_PROGRESS", "SATELLITE_RESULT_REQUEST_ABORTED", "SATELLITE_RESULT_ACCESS_BARRED", "SATELLITE_RESULT_NETWORK_TIMEOUT", "SATELLITE_RESULT_NOT_REACHABLE", "SATELLITE_RESULT_NOT_AUTHORIZED", "SATELLITE_RESULT_NOT_SUPPORTED", "SATELLITE_RESULT_REQUEST_IN_PROGRESS", "SATELLITE_RESULT_MODEM_BUSY", "SATELLITE_RESULT_ILLEGAL_STATE", "SATELLITE_RESULT_MODEM_TIMEOUT", "NT_RADIO_TECHNOLOGY_UNKNOWN", "NT_RADIO_TECHNOLOGY_NB_IOT_NTN", "NT_RADIO_TECHNOLOGY_NR_NTN", "NT_RADIO_TECHNOLOGY_EMTC_NTN", "NT_RADIO_TECHNOLOGY_PROPRIETARY", "DEVICE_HOLD_POSITION_UNKNOWN", "DEVICE_HOLD_POSITION_PORTRAIT", "DEVICE_HOLD_POSITION_LANDSCAPE_LEFT", "DEVICE_HOLD_POSITION_LANDSCAPE_RIGHT", "DISPLAY_MODE_UNKNOWN", "DISPLAY_MODE_FIXED", "DISPLAY_MODE_OPENED", "DISPLAY_MODE_CLOSED", "EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE_SOS", "EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE_T911", "SATELLITE_DATAGRAM_TRANSFER_STATE_IDLE", "SATELLITE_DATAGRAM_TRANSFER_STATE_SENDING", "SATELLITE_DATAGRAM_TRANSFER_STATE_SEND_SUCCESS", "SATELLITE_DATAGRAM_TRANSFER_STATE_SEND_FAILED", "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVING", "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_SUCCESS", "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_NONE", "SATELLITE_DATAGRAM_TRANSFER_STATE_RECEIVE_FAILED", "SATELLITE_DATAGRAM_TRANSFER_STATE_WAITING_TO_CONNECT", "SATELLITE_DATAGRAM_TRANSFER_STATE_UNKNOWN", "SATELLITE_MODEM_STATE_IDLE", "SATELLITE_MODEM_STATE_LISTENING", "SATELLITE_MODEM_STATE_DATAGRAM_TRANSFERRING", "SATELLITE_MODEM_STATE_DATAGRAM_RETRYING", "SATELLITE_MODEM_STATE_OFF", "SATELLITE_MODEM_STATE_UNAVAILABLE", "SATELLITE_MODEM_STATE_NOT_CONNECTED", "SATELLITE_MODEM_STATE_CONNECTED", "SATELLITE_MODEM_STATE_ENABLING_SATELLITE", "SATELLITE_MODEM_STATE_DISABLING_SATELLITE", "SATELLITE_MODEM_STATE_UNKNOWN", "DATAGRAM_TYPE_UNKNOWN", "DATAGRAM_TYPE_SOS_MESSAGE", "DATAGRAM_TYPE_LOCATION_SHARING", "DATAGRAM_TYPE_KEEP_ALIVE", "DATAGRAM_TYPE_LAST_SOS_MESSAGE_STILL_NEED_HELP", "DATAGRAM_TYPE_LAST_SOS_MESSAGE_NO_HELP_NEEDED", "SATELLITE_COMMUNICATION_RESTRICTION_REASON_USER", "SATELLITE_COMMUNICATION_RESTRICTION_REASON_GEOLOCATION", "SATELLITE_COMMUNICATION_RESTRICTION_REASON_ENTITLEMENT" ]
}