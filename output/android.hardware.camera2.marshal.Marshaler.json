{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/marshal/Marshaler.java",
  "packageName" : "android.hardware.camera2.marshal",
  "className" : "Marshaler",
  "comment" : "\n * Base class to marshal data to/from managed/native metadata byte buffers.\n *\n * <p>This class should not be created directly; an instance of it can be obtained\n * using {@link MarshalQueryable#createMarshaler} for the same type {@code T} if the native type\n * mapping for {@code T} {@link MarshalQueryable#isTypeMappingSupported supported}.</p>\n *\n * @param <T> the compile-time managed type\n ",
  "links" : [ "android.hardware.camera2.marshal.MarshalQueryable#createMarshaler", "android.hardware.camera2.marshal.MarshalQueryable#isTypeMappingSupported" ],
  "variables" : [ {
    "name" : "mTypeReference",
    "type" : "TypeReference<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_SIZE_DYNAMIC",
    "type" : "int",
    "comment" : "\n     * Used to denote variable-length data structures.\n     *\n     * <p>If the size is dynamic then we can't know ahead of time how big of a data structure\n     * to preallocate for e.g. arrays, so one object must be unmarshaled at a time.</p>\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void marshal(T value, ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Marshal the specified object instance (value) into a byte buffer.\n     *\n     * <p>Upon completion, the {@link ByteBuffer#position()} will have advanced by\n     * the {@link #calculateMarshalSize marshal size} of {@code value}.</p>\n     *\n     * @param value the value of type T that we wish to write into the byte buffer\n     * @param buffer the byte buffer into which the marshaled object will be written\n     ",
    "links" : [ "#calculateMarshalSize", "java.nio.ByteBuffer#position()" ]
  }, {
    "name" : "public int calculateMarshalSize(T value)",
    "returnType" : "int",
    "comment" : "\n     * Get the size in bytes for how much space would be required to write this {@code value}\n     * into a byte buffer using the given {@code nativeType}.\n     *\n     * <p>If the size of this {@code T} instance when serialized into a buffer is always constant,\n     * then this method will always return the same value (and particularly, it will return\n     * an equivalent value to {@link #getNativeSize()}.</p>\n     *\n     * <p>Overriding this method is a must when the size is {@link NATIVE_SIZE_DYNAMIC dynamic}.</p>\n     *\n     * @param value the value of type T that we wish to write into the byte buffer\n     * @return the size that would need to be written to the byte buffer\n     ",
    "links" : [ "#getNativeSize()", "NATIVE_SIZE_DYNAMIC" ]
  }, {
    "name" : "public abstract T unmarshal(ByteBuffer buffer)",
    "returnType" : "T",
    "comment" : "\n     * Unmarshal a new object instance from the byte buffer into its managed type.\n     *\n     * <p>Upon completion, the {@link ByteBuffer#position()} will have advanced by\n     * the {@link #calculateMarshalSize marshal size} of the returned {@code T} instance.</p>\n     *\n     * @param buffer the byte buffer, from which we will read the object\n     * @return a new instance of type T read from the byte buffer\n     ",
    "links" : [ "#calculateMarshalSize", "java.nio.ByteBuffer#position()" ]
  }, {
    "name" : "public abstract int getNativeSize()",
    "returnType" : "int",
    "comment" : "\n     * How many bytes a single instance of {@code T} will take up if marshalled to/from\n     * {@code nativeType}.\n     *\n     * <p>When unmarshaling data from native to managed, the instance {@code T} is not yet\n     * available. If the native size is always a fixed mapping regardless of the instance of\n     * {@code T} (e.g. if the type is not a container of some sort), it can be used to preallocate\n     * containers for {@code T} to avoid resizing them.</p>\n     *\n     * <p>In particular, the array marshaler takes advantage of this (when size is not dynamic)\n     * to preallocate arrays of the right length when unmarshaling an array {@code T[]}.</p>\n     *\n     * @return a size in bytes, or {@link #NATIVE_SIZE_DYNAMIC} if the size is dynamic\n     ",
    "links" : [ "#NATIVE_SIZE_DYNAMIC" ]
  }, {
    "name" : "public TypeReference<T> getTypeReference()",
    "returnType" : "TypeReference<T>",
    "comment" : "\n     * The type reference for {@code T} for the managed type side of this marshaler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNativeType()",
    "returnType" : "int",
    "comment" : " The native type corresponding to this marshaler for the native side of this marshaler.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void marshal(T value, ByteBuffer buffer)", "public int calculateMarshalSize(T value)", "public abstract T unmarshal(ByteBuffer buffer)", "public abstract int getNativeSize()", "public TypeReference<T> getTypeReference()", "public int getNativeType()" ],
  "variableNames" : [ "mTypeReference", "mNativeType", "NATIVE_SIZE_DYNAMIC" ]
}