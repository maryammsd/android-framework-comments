{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/VersionInfo.java",
  "packageName" : "android.icu.util",
  "className" : "VersionInfo",
  "comment" : "\n * Class to store version numbers of the form major.minor.milli.micro.\n * @author synwee\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "UNICODE_1_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 1.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_1_0_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 1.0.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_1_1_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 1.1.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_1_1_5",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 1.1.5 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_2_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 2.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_2_1_2",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 2.1.2 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_2_1_5",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 2.1.5 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_2_1_8",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 2.1.8 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_2_1_9",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 2.1.9 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_3_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 3.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_3_0_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 3.0.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_3_1_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 3.1.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_3_1_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 3.1.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_3_2",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 3.2 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_4_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 4.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_4_0_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 4.0.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_4_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 4.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_5_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 5.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_5_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 5.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_5_2",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 5.2 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_6_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 6.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_6_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 6.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_6_2",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 6.2 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_6_3",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 6.3 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_7_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 7.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_8_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 8.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_9_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 9.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_10_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 10.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_11_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 11.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_12_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 12.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_12_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 12.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_13_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 13.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_14_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 14.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_15_0",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 15.0 version\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_15_1",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode 15.1 version\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_VERSION",
    "type" : "VersionInfo",
    "comment" : "\n     * ICU4J current release version\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_DATA_VERSION_PATH",
    "type" : "String",
    "comment" : "\n     * Data version string for ICU's internal data.\n     * Used for appending to data path (e.g. icudt43b)\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_DATA_VERSION",
    "type" : "VersionInfo",
    "comment" : "\n     * Data version in ICU4J.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "UCOL_RUNTIME_VERSION",
    "type" : "VersionInfo",
    "comment" : "\n     * Collation runtime version (sort key generator, string comparisons).\n     * If the version is different, sort keys for the same string could be different.\n     * This value may change in subsequent releases of ICU.\n     ",
    "links" : [ ]
  }, {
    "name" : "UCOL_BUILDER_VERSION",
    "type" : "VersionInfo",
    "comment" : "\n     * Collation builder code version.\n     * When this is different, the same tailoring might result\n     * in assigning different collation elements to code points.\n     * This value may change in subsequent releases of ICU.\n     ",
    "links" : [ ]
  }, {
    "name" : "UCOL_TAILORINGS_VERSION",
    "type" : "VersionInfo",
    "comment" : "\n     * Constant version 1.\n     * This was intended to be the version of collation tailorings,\n     * but instead the tailoring data carries a version number.\n     * @deprecated ICU 54\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_VERSION",
    "type" : "VersionInfo",
    "comment" : "\n     * Unicode data version used by the current release.\n     * Defined here privately for printing by the main() method in this class.\n     * Should be the same as {@link android.icu.lang.UCharacter#getUnicodeVersion()}\n     * which gets the version number from a data file.\n     * We do not want VersionInfo to have an import dependency on UCharacter.\n     ",
    "links" : [ "android.icu.lang.UCharacter#getUnicodeVersion()" ]
  }, {
    "name" : "m_version_",
    "type" : "int",
    "comment" : "\n     * Version number stored as a byte for each of the major, minor, milli and\n     * micro numbers in the 32 bit int.\n     * Most significant for the major and the least significant contains the\n     * micro numbers.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAP_",
    "type" : "ConcurrentHashMap<Integer, VersionInfo>",
    "comment" : "\n     * Map of singletons\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_BYTE_MASK_",
    "type" : "int",
    "comment" : "\n     * Last byte mask\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_VERSION_NUMBER_",
    "type" : "String",
    "comment" : "\n     * Error statement string\n     ",
    "links" : [ ]
  }, {
    "name" : "TZDATA_VERSION",
    "type" : "String",
    "comment" : " Moved from TimeZone class",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static VersionInfo getInstance(String version)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Returns an instance of VersionInfo with the argument version.\n     * @param version version String in the format of \"major.minor.milli.micro\"\n     *                or \"major.minor.milli\" or \"major.minor\" or \"major\",\n     *                where major, minor, milli, micro are non-negative numbers\n     *                &lt;= 255. If the trailing version numbers are\n     *                not specified they are taken as 0s. E.g. Version \"3.1\" is\n     *                equivalent to \"3.1.0.0\".\n     * @return an instance of VersionInfo with the argument version.\n     * @exception IllegalArgumentException when the argument version\n     *                is not in the right format\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VersionInfo getInstance(int major, int minor, int milli, int micro)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Returns an instance of VersionInfo with the argument version.\n     * @param major major version, non-negative number &lt;= 255.\n     * @param minor minor version, non-negative number &lt;= 255.\n     * @param milli milli version, non-negative number &lt;= 255.\n     * @param micro micro version, non-negative number &lt;= 255.\n     * @exception IllegalArgumentException when either arguments are negative or &gt; 255\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VersionInfo getInstance(int major, int minor, int milli)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Returns an instance of VersionInfo with the argument version.\n     * Equivalent to getInstance(major, minor, milli, 0).\n     * @param major major version, non-negative number &lt;= 255.\n     * @param minor minor version, non-negative number &lt;= 255.\n     * @param milli milli version, non-negative number &lt;= 255.\n     * @exception IllegalArgumentException when either arguments are\n     *                                     negative or &gt; 255\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VersionInfo getInstance(int major, int minor)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Returns an instance of VersionInfo with the argument version.\n     * Equivalent to getInstance(major, minor, 0, 0).\n     * @param major major version, non-negative number &lt;= 255.\n     * @param minor minor version, non-negative number &lt;= 255.\n     * @exception IllegalArgumentException when either arguments are\n     *                                     negative or &gt; 255\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VersionInfo getInstance(int major)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * Returns an instance of VersionInfo with the argument version.\n     * Equivalent to getInstance(major, 0, 0, 0).\n     * @param major major version, non-negative number &lt;= 255.\n     * @exception IllegalArgumentException when either arguments are\n     *                                     negative or &gt; 255\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representative of VersionInfo in the format of\n     * \"major.minor.milli.micro\"\n     * @return String representative of VersionInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMajor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the major version number\n     * @return the major version number\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minor version number\n     * @return the minor version number\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMilli()",
    "returnType" : "int",
    "comment" : "\n     * Returns the milli version number\n     * @return the milli version number\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMicro()",
    "returnType" : "int",
    "comment" : "\n     * Returns the micro version number\n     * @return the micro version number\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this version information is equals to the argument version\n     * @param other object to be compared\n     * @return true if other is equals to this object's version information,\n     *         false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this set.\n     *\n     * @return the hash code value for this set.\n     * @see java.lang.Object#hashCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(VersionInfo other)",
    "returnType" : "int",
    "comment" : "\n     * Compares other with this VersionInfo.\n     * @param other VersionInfo to be compared\n     * @return 0 if the argument is a VersionInfo object that has version\n     *           information equals to this object.\n     *           Less than 0 if the argument is a VersionInfo object that has\n     *           version information greater than this object.\n     *           Greater than 0 if the argument is a VersionInfo object that\n     *           has version information less than this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getInt(int major, int minor, int milli, int micro)",
    "returnType" : "int",
    "comment" : "\n     * Gets the int from the version numbers\n     * @param major non-negative version number\n     * @param minor non-negative version number\n     * @param milli non-negative version number\n     * @param micro non-negative version number\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void main(String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Main method prints out ICU version information\n     * @param args arguments (currently not used)\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVersionString(int minDigits, int maxDigits)",
    "returnType" : "String",
    "comment" : "\n     * Generate version string separated by dots with\n     * the specified digit width.  Version digit 0\n     * after <code>minDigits</code> will be trimmed off.\n     * @param minDigits Minimum number of version digits\n     * @param maxDigits Maximum number of version digits\n     * @return A tailored version string\n     * @deprecated This API is ICU internal only. (For use in CLDR, etc.)\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getTZDataVersion()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static VersionInfo getInstance(String version)", "public static VersionInfo getInstance(int major, int minor, int milli, int micro)", "public static VersionInfo getInstance(int major, int minor, int milli)", "public static VersionInfo getInstance(int major, int minor)", "public static VersionInfo getInstance(int major)", "public String toString()", "public int getMajor()", "public int getMinor()", "public int getMilli()", "public int getMicro()", "public boolean equals(Object other)", "public int hashCode()", "public int compareTo(VersionInfo other)", "private static int getInt(int major, int minor, int milli, int micro)", "public static void main(String[] args)", "public String getVersionString(int minDigits, int maxDigits)", " static String getTZDataVersion()" ],
  "variableNames" : [ "UNICODE_1_0", "UNICODE_1_0_1", "UNICODE_1_1_0", "UNICODE_1_1_5", "UNICODE_2_0", "UNICODE_2_1_2", "UNICODE_2_1_5", "UNICODE_2_1_8", "UNICODE_2_1_9", "UNICODE_3_0", "UNICODE_3_0_1", "UNICODE_3_1_0", "UNICODE_3_1_1", "UNICODE_3_2", "UNICODE_4_0", "UNICODE_4_0_1", "UNICODE_4_1", "UNICODE_5_0", "UNICODE_5_1", "UNICODE_5_2", "UNICODE_6_0", "UNICODE_6_1", "UNICODE_6_2", "UNICODE_6_3", "UNICODE_7_0", "UNICODE_8_0", "UNICODE_9_0", "UNICODE_10_0", "UNICODE_11_0", "UNICODE_12_0", "UNICODE_12_1", "UNICODE_13_0", "UNICODE_14_0", "UNICODE_15_0", "UNICODE_15_1", "ICU_VERSION", "ICU_DATA_VERSION_PATH", "ICU_DATA_VERSION", "UCOL_RUNTIME_VERSION", "UCOL_BUILDER_VERSION", "UCOL_TAILORINGS_VERSION", "UNICODE_VERSION", "m_version_", "MAP_", "LAST_BYTE_MASK_", "INVALID_VERSION_NUMBER_", "TZDATA_VERSION" ]
}