{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/AbstractCollection.java",
  "packageName" : "java.util",
  "className" : "AbstractCollection",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements contained in this collection.\n     *\n     * @return an iterator over the elements contained in this collection\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation returns {@code size() == 0}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over the elements in the collection,\n     * checking each element in turn for equality with the specified element.\n     *\n     * @throws ClassCastException   {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation returns an array containing all the elements\n     * returned by this collection's iterator, in the same order, stored in\n     * consecutive elements of the array, starting with index {@code 0}.\n     * The length of the returned array is equal to the number of elements\n     * returned by the iterator, even if the size of this collection changes\n     * during iteration, as might happen if the collection permits\n     * concurrent modification during iteration.  The {@code size} method is\n     * called only as an optimization hint; the correct result is returned\n     * even if the iterator returns a different number of elements.\n     *\n     * <p>This method is equivalent to:\n     *\n     *  <pre> {@code\n     * List<E> list = new ArrayList<E>(size());\n     * for (E e : this)\n     *     list.add(e);\n     * return list.toArray();\n     * }</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation returns an array containing all the elements\n     * returned by this collection's iterator in the same order, stored in\n     * consecutive elements of the array, starting with index {@code 0}.\n     * If the number of elements returned by the iterator is too large to\n     * fit into the specified array, then the elements are returned in a\n     * newly allocated array with length equal to the number of elements\n     * returned by the iterator, even if the size of this collection\n     * changes during iteration, as might happen if the collection permits\n     * concurrent modification during iteration.  The {@code size} method is\n     * called only as an optimization hint; the correct result is returned\n     * even if the iterator returns a different number of elements.\n     *\n     * <p>This method is equivalent to:\n     *\n     *  <pre> {@code\n     * List<E> list = new ArrayList<E>(size());\n     * for (E e : this)\n     *     list.add(e);\n     * return list.toArray(a);\n     * }</pre>\n     *\n     * @throws ArrayStoreException  {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static T[] finishToArray(T[] r, Iterator<?> it)",
    "returnType" : "T[]",
    "comment" : "\n     * Reallocates the array being used within toArray when the iterator\n     * returned more elements than expected, and finishes filling it from\n     * the iterator.\n     *\n     * @param r the array, replete with previously stored elements\n     * @param it the in-progress iterator over this collection\n     * @return array containing the elements in the given array, plus any\n     *         further elements returned by the iterator, trimmed to size\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IllegalStateException         {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over the collection looking for the\n     * specified element.  If it finds the element, it removes the element\n     * from the collection using the iterator's remove method.\n     *\n     * <p>Note that this implementation throws an\n     * {@code UnsupportedOperationException} if the iterator returned by this\n     * collection's iterator method does not implement the {@code remove}\n     * method and this collection contains the specified object.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over the specified collection,\n     * checking each element returned by the iterator in turn to see\n     * if it's contained in this collection.  If all elements are so\n     * contained {@code true} is returned, otherwise {@code false}.\n     *\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over the specified collection, and adds\n     * each object returned by the iterator to this collection, in turn.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} unless {@code add} is\n     * overridden (assuming the specified collection is non-empty).\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IllegalStateException         {@inheritDoc}\n     *\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over this collection, checking each\n     * element returned by the iterator in turn to see if it's contained\n     * in the specified collection.  If it's so contained, it's removed from\n     * this collection with the iterator's {@code remove} method.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the iterator returned by the\n     * {@code iterator} method does not implement the {@code remove} method\n     * and this collection contains one or more elements in common with the\n     * specified collection.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     *\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over this collection, checking each\n     * element returned by the iterator in turn to see if it's contained\n     * in the specified collection.  If it's not so contained, it's removed\n     * from this collection with the iterator's {@code remove} method.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the iterator returned by the\n     * {@code iterator} method does not implement the {@code remove} method\n     * and this collection contains one or more elements not present in the\n     * specified collection.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     *\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation iterates over this collection, removing each\n     * element using the {@code Iterator.remove} operation.  Most\n     * implementations will probably choose to override this method for\n     * efficiency.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the iterator returned by this\n     * collection's {@code iterator} method does not implement the\n     * {@code remove} method and this collection is non-empty.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this collection.  The string\n     * representation consists of a list of the collection's elements in the\n     * order they are returned by its iterator, enclosed in square brackets\n     * ({@code \"[]\"}).  Adjacent elements are separated by the characters\n     * {@code \", \"} (comma and space).  Elements are converted to strings as\n     * by {@link String#valueOf(Object)}.\n     *\n     * @return a string representation of this collection\n     ",
    "links" : [ "#valueOf(Object)" ]
  } ],
  "methodNames" : [ "public abstract Iterator<E> iterator()", "public abstract int size()", "public boolean isEmpty()", "public boolean contains(Object o)", "public Object[] toArray()", "public T[] toArray(T[] a)", "private static T[] finishToArray(T[] r, Iterator<?> it)", "public boolean add(E e)", "public boolean remove(Object o)", "public boolean containsAll(Collection<?> c)", "public boolean addAll(Collection<? extends E> c)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "public void clear()", "public String toString()" ],
  "variableNames" : [ ]
}