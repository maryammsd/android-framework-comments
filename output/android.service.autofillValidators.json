{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/autofill/Validators.java",
  "packageName" : "android.service.autofill",
  "className" : "Validators",
  "comment" : "\n * Factory for {@link Validator} operations.\n *\n * <p>See {@link SaveInfo.Builder#setValidator(Validator)} for examples.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Validator and(@NonNull Validator... validators)",
    "returnType" : "Validator",
    "comment" : "\n     * Creates a validator that is only valid if all {@code validators} are valid.\n     *\n     * <p>Used to represent an {@code AND} boolean operation in a chain of validators.\n     *\n     * @throws IllegalArgumentException if any element of {@code validators} is an instance of a\n     * class that is not provided by the Android System.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Validator or(@NonNull Validator... validators)",
    "returnType" : "Validator",
    "comment" : "\n     * Creates a validator that is valid if any of the {@code validators} is valid.\n     *\n     * <p>Used to represent an {@code OR} boolean operation in a chain of validators.\n     *\n     * @throws IllegalArgumentException if any element of {@code validators} is an instance of a\n     * class that is not provided by the Android System.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Validator not(@NonNull Validator validator)",
    "returnType" : "Validator",
    "comment" : "\n     * Creates a validator that is valid when {@code validator} is not, and vice versa.\n     *\n     * <p>Used to represent a {@code NOT} boolean operation in a chain of validators.\n     *\n     * @throws IllegalArgumentException if {@code validator} is an instance of a class that is not\n     * provided by the Android System.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static InternalValidator[] getInternalValidators(Validator[] validators)",
    "returnType" : "InternalValidator[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static Validator and(@NonNull Validator... validators)", "public static Validator or(@NonNull Validator... validators)", "public static Validator not(@NonNull Validator validator)", "private static InternalValidator[] getInternalValidators(Validator[] validators)" ]
}