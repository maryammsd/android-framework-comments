{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/acl/Group.java",
  "packageName" : "java.security.acl",
  "className" : "Group",
  "comment" : "\n * This interface is used to represent a group of principals. (A principal\n * represents an entity such as an individual user or a company). <p>\n *\n * Note that Group extends Principal. Thus, either a Principal or a Group can\n * be passed as an argument to methods containing a Principal parameter. For\n * example, you can add either a Principal or a Group to a Group object by\n * calling the object's {@code addMember} method, passing it the\n * Principal or Group.\n *\n * @author      Satish Dharmaraj\n * @since 1.1\n *\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by {@code java.security.Policy}\n *     and related classes since 1.2.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean addMember(Principal user)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified member to the group.\n     *\n     * @param user the principal to add to this group.\n     *\n     * @return true if the member was successfully added,\n     * false if the principal was already a member.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeMember(Principal user)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified member from the group.\n     *\n     * @param user the principal to remove from this group.\n     *\n     * @return true if the principal was removed, or\n     * false if the principal was not a member.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMember(Principal member)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the passed principal is a member of the group.\n     * This method does a recursive search, so if a principal belongs to a\n     * group which is a member of this group, true is returned.\n     *\n     * @param member the principal whose membership is to be checked.\n     *\n     * @return true if the principal is a member of this group,\n     * false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<? extends Principal> members()",
    "returnType" : "Enumeration<? extends Principal>",
    "comment" : "\n     * Returns an enumeration of the members in the group.\n     * The returned objects can be instances of either Principal\n     * or Group (which is a subclass of Principal).\n     *\n     * @return an enumeration of the group members.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean addMember(Principal user)", "public boolean removeMember(Principal user)", "public boolean isMember(Principal member)", "public Enumeration<? extends Principal> members()" ],
  "variableNames" : [ ]
}