{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/AbstractSet.java",
  "packageName" : "java.util",
  "className" : "AbstractSet",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this set for equality.  Returns\n     * {@code true} if the given object is also a set, the two sets have\n     * the same size, and every member of the given set is contained in\n     * this set.  This ensures that the {@code equals} method works\n     * properly across different implementations of the {@code Set}\n     * interface.<p>\n     *\n     * This implementation first checks if the specified object is this\n     * set; if so it returns {@code true}.  Then, it checks if the\n     * specified object is a set whose size is identical to the size of\n     * this set; if not, it returns false.  If so, it returns\n     * {@code containsAll((Collection) o)}.\n     *\n     * @param o object to be compared for equality with this set\n     * @return {@code true} if the specified object is equal to this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this set.  The hash code of a set is\n     * defined to be the sum of the hash codes of the elements in the set,\n     * where the hash code of a {@code null} element is defined to be zero.\n     * This ensures that {@code s1.equals(s2)} implies that\n     * {@code s1.hashCode()==s2.hashCode()} for any two sets {@code s1}\n     * and {@code s2}, as required by the general contract of\n     * {@link Object#hashCode}.\n     *\n     * <p>This implementation iterates over the set, calling the\n     * {@code hashCode} method on each element in the set, and adding up\n     * the results.\n     *\n     * @return the hash code value for this set\n     * @see Object#equals(Object)\n     * @see Set#equals(Object)\n     ",
    "links" : [ "#hashCode" ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this set all of its elements that are contained in the\n     * specified collection (optional operation).  If the specified\n     * collection is also a set, this operation effectively modifies this\n     * set so that its value is the <i>asymmetric set difference</i> of\n     * the two sets.\n     *\n     * <p>This implementation determines which is the smaller of this set\n     * and the specified collection, by invoking the {@code size}\n     * method on each.  If this set has fewer elements, then the\n     * implementation iterates over this set, checking each element\n     * returned by the iterator in turn to see if it is contained in\n     * the specified collection.  If it is so contained, it is removed\n     * from this set with the iterator's {@code remove} method.  If\n     * the specified collection has fewer elements, then the\n     * implementation iterates over the specified collection, removing\n     * from this set each element returned by the iterator, using this\n     * set's {@code remove} method.\n     *\n     * <p>Note that this implementation will throw an\n     * {@code UnsupportedOperationException} if the iterator returned by the\n     * {@code iterator} method does not implement the {@code remove} method.\n     *\n     * @param  c collection containing elements to be removed from this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code removeAll} operation\n     *         is not supported by this set\n     * @throws ClassCastException if the class of an element of this set\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this set contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object o)", "public int hashCode()", "public boolean removeAll(Collection<?> c)" ],
  "variableNames" : [ ]
}