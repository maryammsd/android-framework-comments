{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/DirectAccessibilityConnection.java",
  "packageName" : "android.view.accessibility",
  "className" : "DirectAccessibilityConnection",
  "comment" : "\n * Minimal {@link IAccessibilityServiceConnection} implementation that interacts\n * with the {@link android.view.AccessibilityInteractionController} of a\n * {@link android.view.ViewRootImpl}.\n *\n * <p>\n * Uses {@link android.view.ViewRootImpl}'s {@link IAccessibilityServiceConnection} that wraps\n * {@link android.view.AccessibilityInteractionController} within the app process, so that no\n * interprocess communication is performed.\n * </p>\n *\n * <p>\n * Only the following methods are supported:\n * <li>{@link #findAccessibilityNodeInfoByAccessibilityId}</li>\n * <li>{@link #findAccessibilityNodeInfosByText}</li>\n * <li>{@link #findAccessibilityNodeInfosByViewId}</li>\n * <li>{@link #findFocus}</li>\n * <li>{@link #focusSearch}</li>\n * <li>{@link #performAccessibilityAction}</li>\n * </p>\n *\n * <p>\n * Other methods are no-ops and return default values.\n * </p>\n ",
  "links" : [ "#focusSearch", "#findAccessibilityNodeInfosByText", "#performAccessibilityAction", "#findFocus", "android.accessibilityservice.IAccessibilityServiceConnection", "android.view.AccessibilityInteractionController", "#findAccessibilityNodeInfosByViewId", "android.view.ViewRootImpl", "#findAccessibilityNodeInfoByAccessibilityId" ],
  "variables" : [ {
    "name" : "mAccessibilityInteractionConnection",
    "type" : "IAccessibilityInteractionConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityManager",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMyProcessId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FETCH_FLAGS",
    "type" : "int",
    "comment" : " receive cache invalidation events (as it is not linked to an AccessibilityService).",
    "links" : [ ]
  }, {
    "name" : "INTERACTIVE_REGION",
    "type" : "Region",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String[] findAccessibilityNodeInfoByAccessibilityId(int accessibilityWindowId, long accessibilityNodeId, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, long threadId, Bundle arguments) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] findAccessibilityNodeInfosByText(int accessibilityWindowId, long accessibilityNodeId, String text, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] findAccessibilityNodeInfosByViewId(int accessibilityWindowId, long accessibilityNodeId, String viewId, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] findFocus(int accessibilityWindowId, long accessibilityNodeId, int focusType, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] focusSearch(int accessibilityWindowId, long accessibilityNodeId, int direction, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityAction(int accessibilityWindowId, long accessibilityNodeId, int action, Bundle arguments, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String[] findAccessibilityNodeInfoByAccessibilityId(int accessibilityWindowId, long accessibilityNodeId, int interactionId, IAccessibilityInteractionConnectionCallback callback, int flags, long threadId, Bundle arguments) throws RemoteException", "public String[] findAccessibilityNodeInfosByText(int accessibilityWindowId, long accessibilityNodeId, String text, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException", "public String[] findAccessibilityNodeInfosByViewId(int accessibilityWindowId, long accessibilityNodeId, String viewId, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException", "public String[] findFocus(int accessibilityWindowId, long accessibilityNodeId, int focusType, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException", "public String[] focusSearch(int accessibilityWindowId, long accessibilityNodeId, int direction, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException", "public boolean performAccessibilityAction(int accessibilityWindowId, long accessibilityNodeId, int action, Bundle arguments, int interactionId, IAccessibilityInteractionConnectionCallback callback, long threadId) throws RemoteException" ],
  "variableNames" : [ "mAccessibilityInteractionConnection", "mAccessibilityManager", "mMyProcessId", "FETCH_FLAGS", "INTERACTIVE_REGION" ]
}