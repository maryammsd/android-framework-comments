{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/dreams/DreamManagerInternal.java",
  "packageName" : "android.service.dreams",
  "className" : "DreamManagerInternal",
  "comment" : "\n * Dream manager local system service interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void startDream(boolean doze, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Called by the power manager to start a dream.\n     *\n     * @param doze If true, starts the doze dream component if one has been configured,\n     * otherwise starts the user-specified dream.\n     * @param reason The reason to start dreaming, which is logged to help debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void stopDream(boolean immediate, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Called by the power manager to stop a dream.\n     *\n     * @param immediate If true, ends the dream summarily, otherwise gives it some time\n     * to perform a proper exit transition.\n     * @param reason The reason to stop dreaming, which is logged to help debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isDreaming()",
    "returnType" : "boolean",
    "comment" : "\n     * Called by the power manager to determine whether a dream is running.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void requestDream()",
    "returnType" : "void",
    "comment" : "\n     * Ask the power manager to nap.  It will eventually call back into startDream() if/when it is\n     * appropriate to start dreaming.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canStartDreaming(boolean isScreenOn)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether dreaming can start given user settings and the current dock/charge state.\n     *\n     * @param isScreenOn True if the screen is currently on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerDreamManagerStateListener(DreamManagerStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link DreamManagerStateListener}, which will be called when there are changes to\n     * dream state.\n     *\n     * @param listener The listener to register.\n     ",
    "links" : [ "DreamManagerStateListener" ]
  }, {
    "name" : "public abstract void unregisterDreamManagerStateListener(DreamManagerStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a {@link DreamManagerStateListener}, which will be called when there are changes\n     * to dream state.\n     *\n     * @param listener The listener to unregister.\n     ",
    "links" : [ "DreamManagerStateListener" ]
  } ],
  "methodNames" : [ "public abstract void startDream(boolean doze, String reason)", "public abstract void stopDream(boolean immediate, String reason)", "public abstract boolean isDreaming()", "public abstract void requestDream()", "public abstract boolean canStartDreaming(boolean isScreenOn)", "public abstract void registerDreamManagerStateListener(DreamManagerStateListener listener)", "public abstract void unregisterDreamManagerStateListener(DreamManagerStateListener listener)" ],
  "variableNames" : [ ]
}