{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageInfo.java",
  "packageName" : "android.content.pm",
  "className" : "PackageInfo",
  "comment" : "\n * Overall information about the contents of a package.  This corresponds\n * to all of the information collected from AndroidManifest.xml.\n ",
  "variables" : [ {
    "name" : "packageName",
    "type" : "String",
    "comment" : "\n     * The name of this package.  From the &lt;manifest&gt; tag's \"name\"\n     * attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "splitNames",
    "type" : "String[]",
    "comment" : "\n     * The names of any installed split APKs for this package.\n     ",
    "links" : [ ]
  }, {
    "name" : "versionCode",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #getLongVersionCode()} instead, which includes both\n     * this and the additional\n     * {@link android.R.styleable#AndroidManifest_versionCodeMajor versionCodeMajor} attribute.\n     * The version number of this package, as specified by the &lt;manifest&gt;\n     * tag's {@link android.R.styleable#AndroidManifest_versionCode versionCode}\n     * attribute.\n     * @see #getLongVersionCode()\n     ",
    "links" : [ "#getLongVersionCode", "android.R.styleable#AndroidManifest_versionCodeMajor", "android.R.styleable#AndroidManifest_versionCode" ]
  }, {
    "name" : "versionCodeMajor",
    "type" : "int",
    "comment" : "\n     * @hide\n     * The major version number of this package, as specified by the &lt;manifest&gt;\n     * tag's {@link android.R.styleable#AndroidManifest_versionCode versionCodeMajor}\n     * attribute.\n     * @see #getLongVersionCode()\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_versionCode" ]
  }, {
    "name" : "versionName",
    "type" : "String",
    "comment" : "\n     * The version name of this package, as specified by the &lt;manifest&gt;\n     * tag's {@link android.R.styleable#AndroidManifest_versionName versionName}\n     * attribute.\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_versionName" ]
  }, {
    "name" : "baseRevisionCode",
    "type" : "int",
    "comment" : "\n     * The revision number of the base APK for this package, as specified by the\n     * &lt;manifest&gt; tag's\n     * {@link android.R.styleable#AndroidManifest_revisionCode revisionCode}\n     * attribute.\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_revisionCode" ]
  }, {
    "name" : "splitRevisionCodes",
    "type" : "int[]",
    "comment" : "\n     * The revision number of any split APKs for this package, as specified by\n     * the &lt;manifest&gt; tag's\n     * {@link android.R.styleable#AndroidManifest_revisionCode revisionCode}\n     * attribute. Indexes are a 1:1 mapping against {@link #splitNames}.\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_revisionCode", "#splitNames" ]
  }, {
    "name" : "sharedUserId",
    "type" : "String",
    "comment" : "\n     * The shared user ID name of this package, as specified by the &lt;manifest&gt;\n     * tag's {@link android.R.styleable#AndroidManifest_sharedUserId sharedUserId}\n     * attribute.\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_sharedUserId" ]
  }, {
    "name" : "sharedUserLabel",
    "type" : "int",
    "comment" : "\n     * The shared user ID label of this package, as specified by the &lt;manifest&gt;\n     * tag's {@link android.R.styleable#AndroidManifest_sharedUserLabel sharedUserLabel}\n     * attribute.\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_sharedUserLabel" ]
  }, {
    "name" : "applicationInfo",
    "type" : "ApplicationInfo",
    "comment" : "\n     * Information collected from the &lt;application&gt; tag, or null if\n     * there was none.\n     ",
    "links" : [ ]
  }, {
    "name" : "firstInstallTime",
    "type" : "long",
    "comment" : "\n     * The time at which the app was first installed.  Units are as\n     * per {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "System#currentTimeMillis" ]
  }, {
    "name" : "lastUpdateTime",
    "type" : "long",
    "comment" : "\n     * The time at which the app was last updated.  Units are as\n     * per {@link System#currentTimeMillis()}.\n     ",
    "links" : [ "System#currentTimeMillis" ]
  }, {
    "name" : "gids",
    "type" : "int[]",
    "comment" : "\n     * All kernel group-IDs that have been assigned to this package.\n     * This is only filled in if the flag {@link PackageManager#GET_GIDS} was set.\n     ",
    "links" : [ "PackageManager#GET_GIDS" ]
  }, {
    "name" : "activities",
    "type" : "ActivityInfo[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestActivity\n     * &lt;activity&gt;} tags included under &lt;application&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_ACTIVITIES} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestActivity", "PackageManager#GET_ACTIVITIES" ]
  }, {
    "name" : "receivers",
    "type" : "ActivityInfo[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestReceiver\n     * &lt;receiver&gt;} tags included under &lt;application&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_RECEIVERS} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestReceiver", "PackageManager#GET_RECEIVERS" ]
  }, {
    "name" : "services",
    "type" : "ServiceInfo[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestService\n     * &lt;service&gt;} tags included under &lt;application&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_SERVICES} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestService", "PackageManager#GET_SERVICES" ]
  }, {
    "name" : "providers",
    "type" : "ProviderInfo[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestProvider\n     * &lt;provider&gt;} tags included under &lt;application&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_PROVIDERS} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestProvider", "PackageManager#GET_PROVIDERS" ]
  }, {
    "name" : "instrumentation",
    "type" : "InstrumentationInfo[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestInstrumentation\n     * &lt;instrumentation&gt;} tags included under &lt;manifest&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_INSTRUMENTATION} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestInstrumentation", "PackageManager#GET_INSTRUMENTATION" ]
  }, {
    "name" : "permissions",
    "type" : "PermissionInfo[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestPermission\n     * &lt;permission&gt;} tags included under &lt;manifest&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_PERMISSIONS} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestPermission", "PackageManager#GET_PERMISSIONS" ]
  }, {
    "name" : "requestedPermissions",
    "type" : "String[]",
    "comment" : "\n     * Array of all {@link android.R.styleable#AndroidManifestUsesPermission\n     * &lt;uses-permission&gt;} tags included under &lt;manifest&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_PERMISSIONS} was set.  This list includes\n     * all permissions requested, even those that were not granted or known\n     * by the system at install time.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestUsesPermission", "PackageManager#GET_PERMISSIONS" ]
  }, {
    "name" : "requestedPermissionsFlags",
    "type" : "int[]",
    "comment" : "\n     * Array of flags of all {@link android.R.styleable#AndroidManifestUsesPermission\n     * &lt;uses-permission&gt;} tags included under &lt;manifest&gt;,\n     * or null if there were none.  This is only filled in if the flag\n     * {@link PackageManager#GET_PERMISSIONS} was set.  Each value matches\n     * the corresponding entry in {@link #requestedPermissions}, and will have\n     * the flag {@link #REQUESTED_PERMISSION_GRANTED} set as appropriate.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestUsesPermission", "PackageManager#GET_PERMISSIONS", "#requestedPermissions", "#REQUESTED_PERMISSION_GRANTED" ]
  }, {
    "name" : "REQUESTED_PERMISSION_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #requestedPermissionsFlags}: the requested permission\n     * is required for the application to run; the user can not optionally\n     * disable it.  Currently all permissions are required.\n     *\n     * @removed We do not support required permissions.\n     ",
    "links" : [ "#requestedPermissionsFlags" ]
  }, {
    "name" : "REQUESTED_PERMISSION_GRANTED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #requestedPermissionsFlags}: the requested permission\n     * is currently granted to the application.\n     ",
    "links" : [ "#requestedPermissionsFlags" ]
  }, {
    "name" : "signatures",
    "type" : "Signature[]",
    "comment" : "\n     * Array of all signatures read from the package file. This is only filled\n     * in if the flag {@link PackageManager#GET_SIGNATURES} was set. A package\n     * must be signed with at least one certificate which is at position zero.\n     * The package can be signed with additional certificates which appear as\n     * subsequent entries.\n     *\n     * <strong>Note:</strong> Signature ordering is not guaranteed to be\n     * stable which means that a package signed with certificates A and B is\n     * equivalent to being signed with certificates B and A. This means that\n     * in case multiple signatures are reported you cannot assume the one at\n     * the first position to be the same across updates.\n     *\n     * <strong>Deprecated</strong> This has been replaced by the\n     * {@link PackageInfo#signingInfo} field, which takes into\n     * account signing certificate rotation.  For backwards compatibility in\n     * the event of signing certificate rotation, this will return the oldest\n     * reported signing certificate, so that an application will appear to\n     * callers as though no rotation occurred.\n     *\n     * @deprecated use {@code signingInfo} instead\n     ",
    "links" : [ "PackageManager#GET_SIGNATURES", "PackageInfo#signingInfo" ]
  }, {
    "name" : "signingInfo",
    "type" : "SigningInfo",
    "comment" : "\n     * Signing information read from the package file, potentially\n     * including past signing certificates no longer used after signing\n     * certificate rotation.  This is only filled in if\n     * the flag {@link PackageManager#GET_SIGNING_CERTIFICATES} was set.\n     *\n     * Use this field instead of the deprecated {@code signatures} field.\n     * See {@link SigningInfo} for more information on its contents.\n     ",
    "links" : [ "PackageManager#GET_SIGNING_CERTIFICATES", "SigningInfo" ]
  }, {
    "name" : "configPreferences",
    "type" : "ConfigurationInfo[]",
    "comment" : "\n     * Application specified preferred configuration\n     * {@link android.R.styleable#AndroidManifestUsesConfiguration\n     * &lt;uses-configuration&gt;} tags included under &lt;manifest&gt;,\n     * or null if there were none. This is only filled in if the flag\n     * {@link PackageManager#GET_CONFIGURATIONS} was set.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestUsesConfiguration", "PackageManager#GET_CONFIGURATIONS" ]
  }, {
    "name" : "reqFeatures",
    "type" : "FeatureInfo[]",
    "comment" : "\n     * Features that this application has requested.\n     *\n     * @see FeatureInfo#FLAG_REQUIRED\n     ",
    "links" : [ ]
  }, {
    "name" : "featureGroups",
    "type" : "FeatureGroupInfo[]",
    "comment" : "\n     * Groups of features that this application has requested.\n     * Each group contains a set of features that are required.\n     * A device must match the features listed in {@link #reqFeatures} and one\n     * or more FeatureGroups in order to have satisfied the feature requirement.\n     *\n     * @see FeatureInfo#FLAG_REQUIRED\n     ",
    "links" : [ "#reqFeatures" ]
  }, {
    "name" : "INSTALL_LOCATION_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>auto</code> in\n     * the {@link android.R.attr#installLocation} attribute.\n     * @hide\n     ",
    "links" : [ "android.R.attr#installLocation" ]
  }, {
    "name" : "INSTALL_LOCATION_AUTO",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>auto</code> in the\n     * {@link android.R.attr#installLocation} attribute.\n     ",
    "links" : [ "android.R.attr#installLocation" ]
  }, {
    "name" : "INSTALL_LOCATION_INTERNAL_ONLY",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>internalOnly</code> in the\n     * {@link android.R.attr#installLocation} attribute.\n     ",
    "links" : [ "android.R.attr#installLocation" ]
  }, {
    "name" : "INSTALL_LOCATION_PREFER_EXTERNAL",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>preferExternal</code> in the\n     * {@link android.R.attr#installLocation} attribute.\n     ",
    "links" : [ "android.R.attr#installLocation" ]
  }, {
    "name" : "installLocation",
    "type" : "int",
    "comment" : "\n     * The install location requested by the package. From the\n     * {@link android.R.attr#installLocation} attribute, one of\n     * {@link #INSTALL_LOCATION_AUTO}, {@link #INSTALL_LOCATION_INTERNAL_ONLY},\n     * {@link #INSTALL_LOCATION_PREFER_EXTERNAL}\n     ",
    "links" : [ "android.R.attr#installLocation", "#INSTALL_LOCATION_AUTO", "#INSTALL_LOCATION_INTERNAL_ONLY", "#INSTALL_LOCATION_PREFER_EXTERNAL" ]
  }, {
    "name" : "isStub",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "coreApp",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "requiredForAllUsers",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "restrictedAccountType",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "requiredAccountType",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "overlayTarget",
    "type" : "String",
    "comment" : "\n     * What package, if any, this package will overlay.\n     *\n     * Package name of target package, or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "targetOverlayableName",
    "type" : "String",
    "comment" : "\n     * The name of the overlayable set of elements package, if any, this package will overlay.\n     *\n     * Overlayable name defined within the target package, or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "overlayCategory",
    "type" : "String",
    "comment" : "\n     * The overlay category, if any, of this package\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "overlayPriority",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mOverlayIsStatic",
    "type" : "boolean",
    "comment" : "\n     * Whether the overlay is static, meaning it cannot be enabled/disabled at runtime.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "compileSdkVersion",
    "type" : "int",
    "comment" : "\n     * The user-visible SDK version (ex. 26) of the framework against which the application claims\n     * to have been compiled, or {@code 0} if not specified.\n     * <p>\n     * This property is the compile-time equivalent of\n     * {@link android.os.Build.VERSION#SDK_INT Build.VERSION.SDK_INT}.\n     *\n     * @hide For platform use only; we don't expect developers to need to read this value.\n     ",
    "links" : [ "android.os.Build.VERSION#SDK_INT" ]
  }, {
    "name" : "compileSdkVersionCodename",
    "type" : "String",
    "comment" : "\n     * The development codename (ex. \"O\", \"REL\") of the framework against which the application\n     * claims to have been compiled, or {@code null} if not specified.\n     * <p>\n     * This property is the compile-time equivalent of\n     * {@link android.os.Build.VERSION#CODENAME Build.VERSION.CODENAME}.\n     *\n     * @hide For platform use only; we don't expect developers to need to read this value.\n     ",
    "links" : [ "android.os.Build.VERSION#CODENAME" ]
  }, {
    "name" : "isApex",
    "type" : "boolean",
    "comment" : "\n     * Whether the package is an APEX package.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getLongVersionCode()",
    "returnType" : "long",
    "comment" : "\n     * Return {@link android.R.styleable#AndroidManifest_versionCode versionCode} and\n     * {@link android.R.styleable#AndroidManifest_versionCodeMajor versionCodeMajor} combined\n     * together as a single long value.  The\n     * {@link android.R.styleable#AndroidManifest_versionCodeMajor versionCodeMajor} is placed in\n     * the upper 32 bits.\n     ",
    "links" : [ "android.R.styleable#AndroidManifest_versionCode", "android.R.styleable#AndroidManifest_versionCodeMajor", "android.R.styleable#AndroidManifest_versionCodeMajor" ]
  }, {
    "name" : "public void setLongVersionCode(long longVersionCode)",
    "returnType" : "void",
    "comment" : "\n     * Set the full version code in this PackageInfo, updating {@link #versionCode}\n     * with the lower bits.\n     * @see #getLongVersionCode()\n     ",
    "links" : [ "#versionCode" ]
  }, {
    "name" : "public static long composeLongVersionCode(int major, int minor)",
    "returnType" : "long",
    "comment" : "\n     * @hide Internal implementation for composing a minor and major version code in to\n     * a single long version code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverlayPackage()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the package is a valid Runtime Overlay package.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStaticOverlayPackage()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the package is a valid static Runtime Overlay package. Static overlays\n     * are not updatable outside of a system update and are safe to load in the system process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "packageName", "splitNames", "versionCode", "versionCodeMajor", "versionName", "baseRevisionCode", "splitRevisionCodes", "sharedUserId", "sharedUserLabel", "applicationInfo", "firstInstallTime", "lastUpdateTime", "gids", "activities", "receivers", "services", "providers", "instrumentation", "permissions", "requestedPermissions", "requestedPermissionsFlags", "REQUESTED_PERMISSION_REQUIRED", "REQUESTED_PERMISSION_GRANTED", "signatures", "signingInfo", "configPreferences", "reqFeatures", "featureGroups", "INSTALL_LOCATION_UNSPECIFIED", "INSTALL_LOCATION_AUTO", "INSTALL_LOCATION_INTERNAL_ONLY", "INSTALL_LOCATION_PREFER_EXTERNAL", "installLocation", "isStub", "coreApp", "requiredForAllUsers", "restrictedAccountType", "requiredAccountType", "overlayTarget", "targetOverlayableName", "overlayCategory", "overlayPriority", "mOverlayIsStatic", "compileSdkVersion", "compileSdkVersionCodename", "isApex", "CREATOR" ],
  "methodNames" : [ "public long getLongVersionCode()", "public void setLongVersionCode(long longVersionCode)", "public static long composeLongVersionCode(int major, int minor)", "public boolean isOverlayPackage()", "public boolean isStaticOverlayPackage()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)" ]
}