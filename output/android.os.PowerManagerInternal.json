{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PowerManagerInternal.java",
  "packageName" : "android.os",
  "className" : "PowerManagerInternal",
  "comment" : "\n * Power manager local system service interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "WAKEFULNESS_ASLEEP",
    "type" : "int",
    "comment" : "\n     * Wakefulness: The device is asleep.  It can only be awoken by a call to wakeUp().\n     * The screen should be off or in the process of being turned off by the display controller.\n     * The device typically passes through the dozing state first.\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKEFULNESS_AWAKE",
    "type" : "int",
    "comment" : "\n     * Wakefulness: The device is fully awake.  It can be put to sleep by a call to goToSleep().\n     * When the user activity timeout expires, the device may start dreaming or go to sleep.\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKEFULNESS_DREAMING",
    "type" : "int",
    "comment" : "\n     * Wakefulness: The device is dreaming.  It can be awoken by a call to wakeUp(),\n     * which ends the dream.  The device goes to sleep when goToSleep() is called, when\n     * the dream ends or when unplugged.\n     * User activity may brighten the screen but does not end the dream.\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKEFULNESS_DOZING",
    "type" : "int",
    "comment" : "\n     * Wakefulness: The device is dozing.  It is almost asleep but is allowing a special\n     * low-power \"doze\" dream to run which keeps the display on but lets the application\n     * processor be suspended.  It can be awoken by a call to wakeUp() which ends the dream.\n     * The device fully goes to sleep if the dream cannot be started or ends on its own.\n     ",
    "links" : [ ]
  }, {
    "name" : "BOOST_INTERACTION",
    "type" : "int",
    "comment" : "\n     * Boost: It is sent when user interacting with the device, for example,\n     * touchscreen events are incoming.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Boost.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "BOOST_DISPLAY_UPDATE_IMMINENT",
    "type" : "int",
    "comment" : "\n     * Boost: It indicates that the framework is likely to provide a new display\n     * frame soon. This implies that the device should ensure that the display\n     * processing path is powered up and ready to receive that update.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Boost.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DOUBLE_TAP_TO_WAKE",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates that the device is to allow wake up when the screen\n     * is tapped twice.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_LOW_POWER",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates Low power mode is activated or not. Low power mode\n     * is intended to save battery at the cost of performance.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_SUSTAINED_PERFORMANCE",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates Sustained Performance mode is activated or not.\n     * Sustained performance mode is intended to provide a consistent level of\n     * performance for a prolonged amount of time.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_FIXED_PERFORMANCE",
    "type" : "int",
    "comment" : "\n     * Mode: It sets the device to a fixed performance level which can be sustained\n     * under normal indoor conditions for at least 10 minutes.\n     * Fixed performance mode puts both upper and lower bounds on performance such\n     * that any workload run while in a fixed performance mode should complete in\n     * a repeatable amount of time.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_VR",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates VR Mode is activated or not. VR mode is intended to\n     * provide minimum guarantee for performance for the amount of time the device\n     * can sustain it.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_LAUNCH",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates that an application has been launched.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_EXPENSIVE_RENDERING",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates that the device is about to enter a period of expensive\n     * rendering.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_INTERACTIVE",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates that the device is about entering/leaving interactive\n     * state or on-interactive state.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DEVICE_IDLE",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates the device is in device idle, externally known as doze.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DISPLAY_INACTIVE",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates that display is either off or still on but is optimized\n     * for low power.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_DISPLAY_CHANGE",
    "type" : "int",
    "comment" : "\n     * Mode: It indicates that display is changing layout due to rotation or fold\n     * unfold behavior.\n     * Defined in hardware/interfaces/power/aidl/android/hardware/power/Mode.aidl\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String wakefulnessToString(int wakefulness)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int wakefulnessToProtoEnum(int wakefulness)",
    "returnType" : "int",
    "comment" : "\n     * Converts platform constants to proto enums.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInteractive(int wakefulness)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the wakefulness state represents an interactive state\n     * as defined by {@link android.os.PowerManager#isInteractive}.\n     ",
    "links" : [ "android.os.PowerManager#isInteractive" ]
  }, {
    "name" : "public abstract void setScreenBrightnessOverrideFromWindowManager(float brightness)",
    "returnType" : "void",
    "comment" : "\n     * Used by the window manager to override the screen brightness based on the\n     * current foreground activity.\n     *\n     * This method must only be called by the window manager.\n     *\n     * @param brightness The overridden brightness, or Float.NaN to disable the override.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setUserActivityTimeoutOverrideFromWindowManager(long timeoutMillis)",
    "returnType" : "void",
    "comment" : "\n     * Used by the window manager to override the user activity timeout based on the\n     * current foreground activity.  It can only be used to make the timeout shorter\n     * than usual, not longer.\n     *\n     * This method must only be called by the window manager.\n     *\n     * @param timeoutMillis The overridden timeout, or -1 to disable the override.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setUserInactiveOverrideFromWindowManager()",
    "returnType" : "void",
    "comment" : "\n     * Used by the window manager to tell the power manager that the user is no longer actively\n     * using the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setMaximumScreenOffTimeoutFromDeviceAdmin(int userId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n     * Used by device administration to set the maximum screen off timeout.\n     *\n     * This method must only be called by the device administration policy manager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDozeOverrideFromDreamManager(int screenState, @Display.StateReason int reason, int screenBrightness)",
    "returnType" : "void",
    "comment" : "\n     * Used by the dream manager to override certain properties while dozing.\n     *\n     * @param screenState The overridden screen state, or {@link Display#STATE_UNKNOWN}\n     * to disable the override.\n     * @param reason The reason for overriding the screen state.\n     * @param screenBrightness The overridden screen brightness, or\n     * {@link PowerManager#BRIGHTNESS_DEFAULT} to disable the override.\n     ",
    "links" : [ "android.view.Display#STATE_UNKNOWN", "android.os.PowerManager#BRIGHTNESS_DEFAULT" ]
  }, {
    "name" : "public abstract void setDrawWakeLockOverrideFromSidekick(boolean keepState)",
    "returnType" : "void",
    "comment" : "\n     * Used by sidekick manager to tell the power manager if it shouldn't change the display state\n     * when a draw wake lock is acquired. Some processes may grab such a wake lock to do some work\n     * in a powered-up state, but we shouldn't give up sidekick control over the display until this\n     * override is lifted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PowerSaveState getLowPowerState(int serviceType)",
    "returnType" : "PowerSaveState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerLowPowerModeObserver(LowPowerModeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerLowPowerModeObserver(int serviceType, Consumer<PowerSaveState> listener)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #registerLowPowerModeObserver} but can take a lambda.\n     ",
    "links" : [ "#registerLowPowerModeObserver" ]
  }, {
    "name" : "public abstract boolean setDeviceIdleMode(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setLightDeviceIdleMode(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDeviceIdleWhitelist(int[] appids)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDeviceIdleTempWhitelist(int[] appids)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLowPowerStandbyAllowlist(int[] uids)",
    "returnType" : "void",
    "comment" : "\n     * Updates the Low Power Standby allowlist.\n     *\n     * @param uids UIDs that are exempt from Low Power Standby restrictions\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setLowPowerStandbyActive(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Used by LowPowerStandbyController to notify the power manager that Low Power Standby's\n     * active state has changed.\n     *\n     * @param active {@code true} to activate Low Power Standby, {@code false} to turn it off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void startUidChanges()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void finishUidChanges()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateUidProcState(int uid, int procState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void uidGone(int uid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void uidActive(int uid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void uidIdle(int uid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setPowerBoost(int boost, int durationMs)",
    "returnType" : "void",
    "comment" : "\n     * SetPowerBoost() indicates the device may need to boost some resources, as\n     * the load is likely to increase before the kernel governors can react.\n     * Depending on the boost, it may be appropriate to raise the frequencies of\n     * CPU, GPU, memory subsystem, or stop CPU from going into deep sleep state.\n     *\n     * @param boost Boost which is to be set with a timeout.\n     * @param durationMs The expected duration of the user's interaction, if\n     *        known, or 0 if the expected duration is unknown.\n     *        a negative value indicates canceling previous boost.\n     *        A given platform can choose to boost some time based on durationMs,\n     *        and may also pick an appropriate timeout for 0 case.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setPowerMode(int mode, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * SetPowerMode() is called to enable/disable specific hint mode, which\n     * may result in adjustment of power/performance parameters of the\n     * cpufreq governor and other controls on device side.\n     *\n     * @param mode Mode which is to be enable/disable.\n     * @param enabled true to enable, false to disable the mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean wasDeviceIdleFor(long ms)",
    "returnType" : "boolean",
    "comment" : " Returns whether there hasn't been a user activity event for the given number of ms. ",
    "links" : [ ]
  }, {
    "name" : "public abstract PowerManager.WakeData getLastWakeup()",
    "returnType" : "PowerManager.WakeData",
    "comment" : " Returns information about the last wakeup event. ",
    "links" : [ ]
  }, {
    "name" : "public abstract PowerManager.SleepData getLastGoToSleep()",
    "returnType" : "PowerManager.SleepData",
    "comment" : " Returns information about the last event to go to sleep. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean interceptPowerKeyDown(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : " Allows power button to intercept a power key button press. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void nap(long eventTime, boolean allowWake)",
    "returnType" : "void",
    "comment" : "\n     * Internal version of {@link android.os.PowerManager#nap} which allows for napping while the\n     * device is not awake.\n     ",
    "links" : [ "android.os.PowerManager#nap" ]
  }, {
    "name" : "public abstract boolean isAmbientDisplaySuppressed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if ambient display is suppressed by any app with any token. This method will\n     * return false if ambient display is not available.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String wakefulnessToString(int wakefulness)", "public static int wakefulnessToProtoEnum(int wakefulness)", "public static boolean isInteractive(int wakefulness)", "public abstract void setScreenBrightnessOverrideFromWindowManager(float brightness)", "public abstract void setUserActivityTimeoutOverrideFromWindowManager(long timeoutMillis)", "public abstract void setUserInactiveOverrideFromWindowManager()", "public abstract void setMaximumScreenOffTimeoutFromDeviceAdmin(int userId, long timeMs)", "public abstract void setDozeOverrideFromDreamManager(int screenState, @Display.StateReason int reason, int screenBrightness)", "public abstract void setDrawWakeLockOverrideFromSidekick(boolean keepState)", "public abstract PowerSaveState getLowPowerState(int serviceType)", "public abstract void registerLowPowerModeObserver(LowPowerModeListener listener)", "public void registerLowPowerModeObserver(int serviceType, Consumer<PowerSaveState> listener)", "public abstract boolean setDeviceIdleMode(boolean enabled)", "public abstract boolean setLightDeviceIdleMode(boolean enabled)", "public abstract void setDeviceIdleWhitelist(int[] appids)", "public abstract void setDeviceIdleTempWhitelist(int[] appids)", "public abstract void setLowPowerStandbyAllowlist(int[] uids)", "public abstract void setLowPowerStandbyActive(boolean active)", "public abstract void startUidChanges()", "public abstract void finishUidChanges()", "public abstract void updateUidProcState(int uid, int procState)", "public abstract void uidGone(int uid)", "public abstract void uidActive(int uid)", "public abstract void uidIdle(int uid)", "public abstract void setPowerBoost(int boost, int durationMs)", "public abstract void setPowerMode(int mode, boolean enabled)", "public abstract boolean wasDeviceIdleFor(long ms)", "public abstract PowerManager.WakeData getLastWakeup()", "public abstract PowerManager.SleepData getLastGoToSleep()", "public abstract boolean interceptPowerKeyDown(KeyEvent event)", "public abstract void nap(long eventTime, boolean allowWake)", "public abstract boolean isAmbientDisplaySuppressed()" ],
  "variableNames" : [ "WAKEFULNESS_ASLEEP", "WAKEFULNESS_AWAKE", "WAKEFULNESS_DREAMING", "WAKEFULNESS_DOZING", "BOOST_INTERACTION", "BOOST_DISPLAY_UPDATE_IMMINENT", "MODE_DOUBLE_TAP_TO_WAKE", "MODE_LOW_POWER", "MODE_SUSTAINED_PERFORMANCE", "MODE_FIXED_PERFORMANCE", "MODE_VR", "MODE_LAUNCH", "MODE_EXPENSIVE_RENDERING", "MODE_INTERACTIVE", "MODE_DEVICE_IDLE", "MODE_DISPLAY_INACTIVE", "MODE_DISPLAY_CHANGE" ]
}