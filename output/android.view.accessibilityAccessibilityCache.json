{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityCache.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityCache",
  "comment" : "\n * Cache for AccessibilityWindowInfos and AccessibilityNodeInfos.\n * It is updated when windows change or nodes change.\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERBOSE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECK_INTEGRITY",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_CRITICAL_EVENTS_MASK",
    "type" : "int",
    "comment" : "\n     * {@link AccessibilityEvent} types that are critical for the cache to stay up to date\n     *\n     * When adding new event types in {@link #onAccessibilityEvent}, please add it here also, to\n     * make sure that the events are delivered to cache regardless of\n     * {@link android.accessibilityservice.AccessibilityServiceInfo#eventTypes}\n     ",
    "links" : [ "AccessibilityEvent", "#onAccessibilityEvent", "android.accessibilityservice.AccessibilityServiceInfo#eventTypes" ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityNodeRefresher",
    "type" : "AccessibilityNodeRefresher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityFocus",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputFocus",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityFocusedWindow",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAllWindowsCached",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowCacheByDisplay",
    "type" : "SparseArray<SparseArray<AccessibilityWindowInfo>>",
    "comment" : " The key of outer SparseArray is display ID and the key of inner SparseArray is window ID.",
    "links" : [ ]
  }, {
    "name" : "mNodeCache",
    "type" : "SparseArray<LongSparseArray<AccessibilityNodeInfo>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempWindowArray",
    "type" : "SparseArray<AccessibilityWindowInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setWindowsOnAllDisplays(SparseArray<List<AccessibilityWindowInfo>> windowsOnAllDisplays)",
    "returnType" : "void",
    "comment" : "\n     * Sets all {@link AccessibilityWindowInfo}s of all displays into the cache.\n     * The key of SparseArray is display ID.\n     *\n     * @param windowsOnAllDisplays The accessibility windows of all displays.\n     ",
    "links" : [ "AccessibilityWindowInfo" ]
  }, {
    "name" : "public void addWindow(AccessibilityWindowInfo window)",
    "returnType" : "void",
    "comment" : "\n     * Sets an {@link AccessibilityWindowInfo} into the cache.\n     *\n     * @param window The accessibility window.\n     ",
    "links" : [ "AccessibilityWindowInfo" ]
  }, {
    "name" : "private void addWindowByDisplayLocked(int displayId, AccessibilityWindowInfo window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the cache that the something in the UI changed. As a result\n     * the cache will either refresh some nodes or evict some nodes.\n     *\n     * Note: any event that ends up affecting the cache should also be present in\n     * {@link #CACHE_CRITICAL_EVENTS_MASK}\n     *\n     * @param event An event.\n     ",
    "links" : [ "#CACHE_CRITICAL_EVENTS_MASK" ]
  }, {
    "name" : "private void refreshCachedNodeLocked(int windowId, long sourceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void refreshCachedWindowLocked(int windowId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getNode(int windowId, long accessibilityNodeId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets a cached {@link AccessibilityNodeInfo} given the id of the hosting\n     * window and the accessibility id of the node.\n     *\n     * @param windowId The id of the window hosting the node.\n     * @param accessibilityNodeId The info accessibility node id.\n     * @return The cached {@link AccessibilityNodeInfo} or null if such not found.\n     ",
    "links" : [ "AccessibilityNodeInfo", "AccessibilityNodeInfo" ]
  }, {
    "name" : "public SparseArray<List<AccessibilityWindowInfo>> getWindowsOnAllDisplays()",
    "returnType" : "SparseArray<List<AccessibilityWindowInfo>>",
    "comment" : "\n     * Gets all {@link AccessibilityWindowInfo}s of all displays from the cache.\n     *\n     * @return All cached {@link AccessibilityWindowInfo}s of all displays\n     *         or null if such not found. The key of SparseArray is display ID.\n     ",
    "links" : [ "AccessibilityWindowInfo", "AccessibilityWindowInfo" ]
  }, {
    "name" : "public AccessibilityWindowInfo getWindow(int windowId)",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Gets an {@link AccessibilityWindowInfo} by windowId.\n     *\n     * @param windowId The id of the window.\n     *\n     * @return The {@link AccessibilityWindowInfo} or null if such not found.\n     ",
    "links" : [ "AccessibilityWindowInfo", "AccessibilityWindowInfo" ]
  }, {
    "name" : "public void add(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Caches an {@link AccessibilityNodeInfo}.\n     *\n     * @param info The node to cache.\n     ",
    "links" : [ "AccessibilityNodeInfo" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearWindowCacheLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearNodesForWindowLocked(int windowId)",
    "returnType" : "void",
    "comment" : "\n     * Clears nodes for the window with the given id\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearSubTreeLocked(int windowId, long rootNodeId)",
    "returnType" : "void",
    "comment" : "\n     * Clears a subtree rooted at the node with the given id that is\n     * hosted in a given window.\n     *\n     * @param windowId The id of the hosting window.\n     * @param rootNodeId The root id.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean clearSubTreeRecursiveLocked(LongSparseArray<AccessibilityNodeInfo> nodes, long rootNodeId)",
    "returnType" : "boolean",
    "comment" : "\n     * Clears a subtree given a pointer to the root id and the nodes\n     * in the hosting window.\n     *\n     * @param nodes The nodes in the hosting window.\n     * @param rootNodeId The id of the root to evict.\n     *\n     * @return {@code true} if the cache was cleared\n     ",
    "links" : [ ]
  }, {
    "name" : "public void checkIntegrity()",
    "returnType" : "void",
    "comment" : "\n     * Check the integrity of the cache which is nodes from different windows\n     * are not mixed, there is a single active window, there is a single focused\n     * window, for every window there are no duplicates nodes, all nodes for a\n     * window are connected, for every window there is a single input focused\n     * node, and for every window there is a single accessibility focused node.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "DEBUG", "VERBOSE", "CHECK_INTEGRITY", "CACHE_CRITICAL_EVENTS_MASK", "mLock", "mAccessibilityNodeRefresher", "mAccessibilityFocus", "mInputFocus", "mAccessibilityFocusedWindow", "mIsAllWindowsCached", "mWindowCacheByDisplay", "mNodeCache", "mTempWindowArray" ],
  "methodNames" : [ "public void setWindowsOnAllDisplays(SparseArray<List<AccessibilityWindowInfo>> windowsOnAllDisplays)", "public void addWindow(AccessibilityWindowInfo window)", "private void addWindowByDisplayLocked(int displayId, AccessibilityWindowInfo window)", "public void onAccessibilityEvent(AccessibilityEvent event)", "private void refreshCachedNodeLocked(int windowId, long sourceId)", "private void refreshCachedWindowLocked(int windowId)", "public AccessibilityNodeInfo getNode(int windowId, long accessibilityNodeId)", "public SparseArray<List<AccessibilityWindowInfo>> getWindowsOnAllDisplays()", "public AccessibilityWindowInfo getWindow(int windowId)", "public void add(AccessibilityNodeInfo info)", "public void clear()", "private void clearWindowCacheLocked()", "private void clearNodesForWindowLocked(int windowId)", "private void clearSubTreeLocked(int windowId, long rootNodeId)", "private boolean clearSubTreeRecursiveLocked(LongSparseArray<AccessibilityNodeInfo> nodes, long rootNodeId)", "public void checkIntegrity()" ]
}