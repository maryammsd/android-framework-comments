{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UTF16.java",
  "packageName" : "android.icu.text",
  "className" : "StringComparator",
  "comment" : "\n     * <p>\n     * UTF16 string comparator class. Allows UTF16 string comparison to be done with the various\n     * modes\n     * </p>\n     * <ul>\n     * <li> Code point comparison or code unit comparison\n     * <li> Case sensitive comparison, case insensitive comparison or case insensitive comparison\n     * with special handling for character 'i'.\n     * </ul>\n     * <p>\n     * The code unit or code point comparison differ only when comparing supplementary code points\n     * (&#92;u10000..&#92;u10ffff) to BMP code points near the end of the BMP (i.e.,\n     * &#92;ue000..&#92;uffff). In code unit comparison, high BMP code points sort after\n     * supplementary code points because they are stored as pairs of surrogates which are at\n     * &#92;ud800..&#92;udfff.\n     * </p>\n     *\n     * @see #FOLD_CASE_DEFAULT\n     * @see #FOLD_CASE_EXCLUDE_SPECIAL_I\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FOLD_CASE_DEFAULT",
    "type" : "int",
    "comment" : "\n         * Option value for case folding comparison:\n         *\n         * <p>Comparison is case insensitive, strings are folded using default mappings defined in\n         * Unicode data file CaseFolding.txt, before comparison.\n         ",
    "links" : [ ]
  }, {
    "name" : "FOLD_CASE_EXCLUDE_SPECIAL_I",
    "type" : "int",
    "comment" : "\n         * Option value for case folding:\n         * Use the modified set of mappings provided in CaseFolding.txt to handle dotted I\n         * and dotless i appropriately for Turkic languages (tr, az).\n         *\n         * <p>Comparison is case insensitive, strings are folded using modified mappings defined in\n         * Unicode data file CaseFolding.txt, before comparison.\n         *\n         * @see android.icu.lang.UCharacter#FOLD_CASE_EXCLUDE_SPECIAL_I\n         ",
    "links" : [ ]
  }, {
    "name" : "m_codePointCompare_",
    "type" : "int",
    "comment" : "\n         * Code unit comparison flag. True if code unit comparison is required. False if code point\n         * comparison is required.\n         ",
    "links" : [ ]
  }, {
    "name" : "m_foldCase_",
    "type" : "int",
    "comment" : "\n         * Fold case comparison option.\n         ",
    "links" : [ ]
  }, {
    "name" : "m_ignoreCase_",
    "type" : "boolean",
    "comment" : "\n         * Flag indicator if ignore case is to be used during comparison\n         ",
    "links" : [ ]
  }, {
    "name" : "CODE_POINT_COMPARE_SURROGATE_OFFSET_",
    "type" : "int",
    "comment" : "\n         * Code point order offset for surrogate characters\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCodePointCompare(boolean flag)",
    "returnType" : "void",
    "comment" : "\n         * Sets the comparison mode to code point compare if flag is true. Otherwise comparison mode\n         * is set to code unit compare\n         *\n         * @param flag True for code point compare, false for code unit compare\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoreCase(boolean ignorecase, int foldcaseoption)",
    "returnType" : "void",
    "comment" : "\n         * Sets the Comparator to case-insensitive comparison mode if argument is true, otherwise\n         * case sensitive comparison mode if set to false.\n         *\n         * @param ignorecase True for case-insensitive comparison, false for case sensitive comparison\n         * @param foldcaseoption FOLD_CASE_DEFAULT or FOLD_CASE_EXCLUDE_SPECIAL_I. This option is used only\n         *            when ignorecase is set to true. If ignorecase is false, this option is\n         *            ignored.\n         * @see #FOLD_CASE_DEFAULT\n         * @see #FOLD_CASE_EXCLUDE_SPECIAL_I\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getCodePointCompare()",
    "returnType" : "boolean",
    "comment" : "\n         * Checks if the comparison mode is code point compare.\n         *\n         * @return true for code point compare, false for code unit compare\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIgnoreCase()",
    "returnType" : "boolean",
    "comment" : "\n         * Checks if Comparator is in the case insensitive mode.\n         *\n         * @return true if Comparator performs case insensitive comparison, false otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getIgnoreCaseOption()",
    "returnType" : "int",
    "comment" : "\n         * Gets the fold case options set in Comparator to be used with case insensitive comparison.\n         *\n         * @return either FOLD_CASE_DEFAULT or FOLD_CASE_EXCLUDE_SPECIAL_I\n         * @see #FOLD_CASE_DEFAULT\n         * @see #FOLD_CASE_EXCLUDE_SPECIAL_I\n         ",
    "links" : [ ]
  }, {
    "name" : "public int compare(String a, String b)",
    "returnType" : "int",
    "comment" : "\n         * Compare two strings depending on the options selected during construction.\n         *\n         * @param a first source string.\n         * @param b second source string.\n         * @return 0 returned if a == b. If a &lt; b, a negative value is returned. Otherwise if a &gt; b,\n         *         a positive value is returned.\n         * @exception ClassCastException thrown when either a or b is not a String object\n         ",
    "links" : [ ]
  }, {
    "name" : "private int compareCaseInsensitive(String s1, String s2)",
    "returnType" : "int",
    "comment" : "\n         * Compares case insensitive. This is a direct port of ICU4C, to make maintenance life\n         * easier.\n         *\n         * @param s1\n         *            first string to compare\n         * @param s2\n         *            second string to compare\n         * @return -1 is s1 &lt; s2, 0 if equals,\n         ",
    "links" : [ ]
  }, {
    "name" : "private int compareCaseSensitive(String s1, String s2)",
    "returnType" : "int",
    "comment" : "\n         * Compares case sensitive. This is a direct port of ICU4C, to make maintenance life\n         * easier.\n         *\n         * @param s1\n         *            first string to compare\n         * @param s2\n         *            second string to compare\n         * @return -1 is s1 &lt; s2, 0 if equals,\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCodePointCompare(boolean flag)", "public void setIgnoreCase(boolean ignorecase, int foldcaseoption)", "public boolean getCodePointCompare()", "public boolean getIgnoreCase()", "public int getIgnoreCaseOption()", "public int compare(String a, String b)", "private int compareCaseInsensitive(String s1, String s2)", "private int compareCaseSensitive(String s1, String s2)" ],
  "variableNames" : [ "FOLD_CASE_DEFAULT", "FOLD_CASE_EXCLUDE_SPECIAL_I", "m_codePointCompare_", "m_foldCase_", "m_ignoreCase_", "CODE_POINT_COMPARE_SURROGATE_OFFSET_" ]
}