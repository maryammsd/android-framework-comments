{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/MonthDisplayHelper.java",
  "packageName" : "android.util",
  "className" : "MonthDisplayHelper",
  "comment" : "\n * Helps answer common questions that come up when displaying a month in a\n * 6 row calendar grid format.\n *\n * Not thread safe.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mWeekStartDay",
    "type" : "int",
    "comment" : " display pref",
    "links" : [ ]
  }, {
    "name" : "mCalendar",
    "type" : "Calendar",
    "comment" : " holds current month, year, helps compute display",
    "links" : [ ]
  }, {
    "name" : "mNumDaysInMonth",
    "type" : "int",
    "comment" : " cached computed stuff that helps with display",
    "links" : [ ]
  }, {
    "name" : "mNumDaysInPrevMonth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getYear()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMonth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWeekStartDay()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFirstDayOfMonth()",
    "returnType" : "int",
    "comment" : "\n     * @return The first day of the month using a constants such as\n     *   {@link java.util.Calendar#SUNDAY}.\n     ",
    "links" : [ "java.util.Calendar#SUNDAY" ]
  }, {
    "name" : "public int getNumberOfDaysInMonth()",
    "returnType" : "int",
    "comment" : "\n     * @return The number of days in the month.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset()",
    "returnType" : "int",
    "comment" : "\n     * @return The offset from displaying everything starting on the very first\n     *   box.  For example, if the calendar is set to display the first day of\n     *   the week as Sunday, and the month starts on a Wednesday, the offset is 3.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getDigitsForRow(int row)",
    "returnType" : "int[]",
    "comment" : "\n     * @param row Which row (0-5).\n     * @return the digits of the month to display in one\n     * of the 6 rows of a calendar month display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDayAt(int row, int column)",
    "returnType" : "int",
    "comment" : "\n     * @param row The row, 0-5, starting from the top.\n     * @param column The column, 0-6, starting from the left.\n     * @return The day at a particular row, column\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRowOf(int day)",
    "returnType" : "int",
    "comment" : "\n     * @return Which row day is in.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnOf(int day)",
    "returnType" : "int",
    "comment" : "\n     * @return Which column day is in.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void previousMonth()",
    "returnType" : "void",
    "comment" : "\n     * Decrement the month.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void nextMonth()",
    "returnType" : "void",
    "comment" : "\n     * Increment the month.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWithinCurrentMonth(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the row and column fall within the month.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void recalculate()",
    "returnType" : "void",
    "comment" : " helper method that recalculates cached values based on current month / year",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getYear()", "public int getMonth()", "public int getWeekStartDay()", "public int getFirstDayOfMonth()", "public int getNumberOfDaysInMonth()", "public int getOffset()", "public int[] getDigitsForRow(int row)", "public int getDayAt(int row, int column)", "public int getRowOf(int day)", "public int getColumnOf(int day)", "public void previousMonth()", "public void nextMonth()", "public boolean isWithinCurrentMonth(int row, int column)", "private void recalculate()" ],
  "variableNames" : [ "mWeekStartDay", "mCalendar", "mNumDaysInMonth", "mNumDaysInPrevMonth", "mOffset" ]
}