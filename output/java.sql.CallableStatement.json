{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/CallableStatement.java",
  "packageName" : "java.sql",
  "className" : "CallableStatement",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void registerOutParameter(int parameterIndex, int sqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the OUT parameter in ordinal position\n     * <code>parameterIndex</code> to the JDBC type\n     * <code>sqlType</code>.  All OUT parameters must be registered\n     * before a stored procedure is executed.\n     * <p>\n     * The JDBC type specified by <code>sqlType</code> for an OUT\n     * parameter determines the Java type that must be used\n     * in the <code>get</code> method to read the value of that parameter.\n     * <p>\n     * If the JDBC type expected to be returned to this output parameter\n     * is specific to this particular database, <code>sqlType</code>\n     * should be <code>java.sql.Types.OTHER</code>.  The method\n     * {@link #getObject} retrieves the value.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @param sqlType the JDBC type code defined by <code>java.sql.Types</code>.\n     *        If the parameter is of JDBC type <code>NUMERIC</code>\n     *        or <code>DECIMAL</code>, the version of\n     *        <code>registerOutParameter</code> that accepts a scale value\n     *        should be used.\n     *\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see Types\n     ",
    "links" : [ "#getObject" ]
  }, {
    "name" : " void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the parameter in ordinal position\n     * <code>parameterIndex</code> to be of JDBC type\n     * <code>sqlType</code>. All OUT parameters must be registered\n     * before a stored procedure is executed.\n     * <p>\n     * The JDBC type specified by <code>sqlType</code> for an OUT\n     * parameter determines the Java type that must be used\n     * in the <code>get</code> method to read the value of that parameter.\n     * <p>\n     * This version of <code>registerOutParameter</code> should be\n     * used when the parameter is of JDBC type <code>NUMERIC</code>\n     * or <code>DECIMAL</code>.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param sqlType the SQL type code defined by <code>java.sql.Types</code>.\n     * @param scale the desired number of digits to the right of the\n     * decimal point.  It must be greater than or equal to zero.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see Types\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean wasNull() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the last OUT parameter read had the value of\n     * SQL <code>NULL</code>.  Note that this method should be called only after\n     * calling a getter method; otherwise, there is no value to use in\n     * determining whether it is <code>null</code> or not.\n     *\n     * @return <code>true</code> if the last parameter read was SQL\n     * <code>NULL</code>; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(int parameterIndex) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>CHAR</code>,\n     * <code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a\n     * <code>String</code> in the Java programming language.\n     * <p>\n     * For the fixed-length type JDBC <code>CHAR</code>,\n     * the <code>String</code> object\n     * returned has exactly the same value the SQL\n     * <code>CHAR</code> value had in the\n     * database, including any padding added by the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value. If the value is SQL <code>NULL</code>,\n     *         the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setString\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getBoolean(int parameterIndex) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>BIT</code>\n     * or <code>BOOLEAN</code> parameter as a\n     * <code>boolean</code> in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>,\n     *         the result is <code>false</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setBoolean\n     ",
    "links" : [ ]
  }, {
    "name" : " byte getByte(int parameterIndex) throws SQLException",
    "returnType" : "byte",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>TINYINT</code> parameter\n     * as a <code>byte</code> in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>0</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setByte\n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(int parameterIndex) throws SQLException",
    "returnType" : "short",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter\n     * as a <code>short</code> in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>0</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setShort\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(int parameterIndex) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>INTEGER</code> parameter\n     * as an <code>int</code> in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>0</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setInt\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(int parameterIndex) throws SQLException",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>BIGINT</code> parameter\n     * as a <code>long</code> in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>0</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setLong\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(int parameterIndex) throws SQLException",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>FLOAT</code> parameter\n     * as a <code>float</code> in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>0</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setFloat\n     ",
    "links" : [ ]
  }, {
    "name" : " double getDouble(int parameterIndex) throws SQLException",
    "returnType" : "double",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>\n     * in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>0</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setDouble\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : " byte[] getBytes(int parameterIndex) throws SQLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>BINARY</code> or\n     * <code>VARBINARY</code> parameter as an array of <code>byte</code>\n     * values in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setBytes\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date getDate(int parameterIndex) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>DATE</code> parameter as a\n     * <code>java.sql.Date</code> object.\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setDate\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(int parameterIndex) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>TIME</code> parameter as a\n     * <code>java.sql.Time</code> object.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setTime\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a\n     * <code>java.sql.Timestamp</code> object.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setTimestamp\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(int parameterIndex) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the value of the designated parameter as an <code>Object</code>\n     * in the Java programming language. If the value is an SQL <code>NULL</code>,\n     * the driver returns a Java <code>null</code>.\n     * <p>\n     * This method returns a Java object whose type corresponds to the JDBC\n     * type that was registered for this parameter using the method\n     * <code>registerOutParameter</code>.  By registering the target JDBC\n     * type as <code>java.sql.Types.OTHER</code>, this method can be used\n     * to read database-specific abstract data types.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     *        and so on\n     * @return A <code>java.lang.Object</code> holding the OUT parameter value\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see Types\n     * @see #setObject\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(int parameterIndex) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a\n     * <code>java.math.BigDecimal</code> object with as many digits to the\n     * right of the decimal point as the value contains.\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value in full precision.  If the value is\n     * SQL <code>NULL</code>, the result is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setBigDecimal\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(int parameterIndex, java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Returns an object representing the value of OUT parameter\n     * <code>parameterIndex</code> and uses <code>map</code> for the custom\n     * mapping of the parameter value.\n     * <p>\n     * This method returns a Java object whose type corresponds to the\n     * JDBC type that was registered for this parameter using the method\n     * <code>registerOutParameter</code>.  By registering the target\n     * JDBC type as <code>java.sql.Types.OTHER</code>, this method can\n     * be used to read database-specific abstract data types.\n     * @param parameterIndex the first parameter is 1, the second is 2, and so on\n     * @param map the mapping from SQL type names to Java classes\n     * @return a <code>java.lang.Object</code> holding the OUT parameter value\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setObject\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Ref getRef(int parameterIndex) throws SQLException",
    "returnType" : "Ref",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>REF(&lt;structured-type&gt;)</code>\n     * parameter as a {@link java.sql.Ref} object in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @return the parameter value as a <code>Ref</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the value\n     * <code>null</code> is returned.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ "java.sql.Ref" ]
  }, {
    "name" : " Blob getBlob(int parameterIndex) throws SQLException",
    "returnType" : "Blob",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>BLOB</code> parameter as a\n     * {@link java.sql.Blob} object in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2, and so on\n     * @return the parameter value as a <code>Blob</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the value\n     * <code>null</code> is returned.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ "java.sql.Blob" ]
  }, {
    "name" : " Clob getClob(int parameterIndex) throws SQLException",
    "returnType" : "Clob",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a\n     * <code>java.sql.Clob</code> object in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2, and\n     * so on\n     * @return the parameter value as a <code>Clob</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the\n     * value <code>null</code> is returned.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Array getArray(int parameterIndex) throws SQLException",
    "returnType" : "Array",
    "comment" : "\n     *\n     * Retrieves the value of the designated JDBC <code>ARRAY</code> parameter as an\n     * {@link java.sql.Array} object in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2, and\n     * so on\n     * @return the parameter value as an <code>Array</code> object in\n     * the Java programming language.  If the value was SQL <code>NULL</code>, the\n     * value <code>null</code> is returned.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ "java.sql.Array" ]
  }, {
    "name" : " java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>DATE</code> parameter as a\n     * <code>java.sql.Date</code> object, using\n     * the given <code>Calendar</code> object\n     * to construct the date.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the date taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the date\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setDate\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>TIME</code> parameter as a\n     * <code>java.sql.Time</code> object, using\n     * the given <code>Calendar</code> object\n     * to construct the time.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the time taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the time\n     * @return the parameter value; if the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setTime\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a\n     * <code>java.sql.Timestamp</code> object, using\n     * the given <code>Calendar</code> object to construct\n     * the <code>Timestamp</code> object.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the timestamp taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,\n     * and so on\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the timestamp\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     *         is <code>null</code>.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #setTimestamp\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the designated output parameter.\n     * This version of\n     * the method <code>registerOutParameter</code>\n     * should be used for a user-defined or <code>REF</code> output parameter.  Examples\n     * of user-defined types include: <code>STRUCT</code>, <code>DISTINCT</code>,\n     * <code>JAVA_OBJECT</code>, and named array types.\n     *<p>\n     * All OUT parameters must be registered\n     * before a stored procedure is executed.\n     * <p>  For a user-defined parameter, the fully-qualified SQL\n     * type name of the parameter should also be given, while a <code>REF</code>\n     * parameter requires that the fully-qualified type name of the\n     * referenced type be given.  A JDBC driver that does not need the\n     * type code and type name information may ignore it.   To be portable,\n     * however, applications should always provide these values for\n     * user-defined and <code>REF</code> parameters.\n     *\n     * Although it is intended for user-defined and <code>REF</code> parameters,\n     * this method may be used to register a parameter of any JDBC type.\n     * If the parameter does not have a user-defined or <code>REF</code> type, the\n     * <i>typeName</i> parameter is ignored.\n     *\n     * <P><B>Note:</B> When reading the value of an out parameter, you\n     * must use the getter method whose Java type corresponds to the\n     * parameter's registered SQL type.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,...\n     * @param sqlType a value from {@link java.sql.Types}\n     * @param typeName the fully-qualified name of an SQL structured type\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see Types\n     * @since 1.2\n     ",
    "links" : [ "java.sql.Types" ]
  }, {
    "name" : " void registerOutParameter(String parameterName, int sqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the OUT parameter named\n     * <code>parameterName</code> to the JDBC type\n     * <code>sqlType</code>.  All OUT parameters must be registered\n     * before a stored procedure is executed.\n     * <p>\n     * The JDBC type specified by <code>sqlType</code> for an OUT\n     * parameter determines the Java type that must be used\n     * in the <code>get</code> method to read the value of that parameter.\n     * <p>\n     * If the JDBC type expected to be returned to this output parameter\n     * is specific to this particular database, <code>sqlType</code>\n     * should be <code>java.sql.Types.OTHER</code>.  The method\n     * {@link #getObject} retrieves the value.\n     * @param parameterName the name of the parameter\n     * @param sqlType the JDBC type code defined by <code>java.sql.Types</code>.\n     * If the parameter is of JDBC type <code>NUMERIC</code>\n     * or <code>DECIMAL</code>, the version of\n     * <code>registerOutParameter</code> that accepts a scale value\n     * should be used.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type or if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     * @see Types\n     ",
    "links" : [ "#getObject" ]
  }, {
    "name" : " void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the parameter named\n     * <code>parameterName</code> to be of JDBC type\n     * <code>sqlType</code>.  All OUT parameters must be registered\n     * before a stored procedure is executed.\n     * <p>\n     * The JDBC type specified by <code>sqlType</code> for an OUT\n     * parameter determines the Java type that must be used\n     * in the <code>get</code> method to read the value of that parameter.\n     * <p>\n     * This version of <code>registerOutParameter</code> should be\n     * used when the parameter is of JDBC type <code>NUMERIC</code>\n     * or <code>DECIMAL</code>.\n     *\n     * @param parameterName the name of the parameter\n     * @param sqlType SQL type code defined by <code>java.sql.Types</code>.\n     * @param scale the desired number of digits to the right of the\n     * decimal point.  It must be greater than or equal to zero.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type or if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     * @see Types\n     ",
    "links" : [ ]
  }, {
    "name" : " void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Registers the designated output parameter.  This version of\n     * the method <code>registerOutParameter</code>\n     * should be used for a user-named or REF output parameter.  Examples\n     * of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and\n     * named array types.\n     *<p>\n     * All OUT parameters must be registered\n     * before a stored procedure is executed.\n     * <p>\n     * For a user-named parameter the fully-qualified SQL\n     * type name of the parameter should also be given, while a REF\n     * parameter requires that the fully-qualified type name of the\n     * referenced type be given.  A JDBC driver that does not need the\n     * type code and type name information may ignore it.   To be portable,\n     * however, applications should always provide these values for\n     * user-named and REF parameters.\n     *\n     * Although it is intended for user-named and REF parameters,\n     * this method may be used to register a parameter of any JDBC type.\n     * If the parameter does not have a user-named or REF type, the\n     * typeName parameter is ignored.\n     *\n     * <P><B>Note:</B> When reading the value of an out parameter, you\n     * must use the <code>getXXX</code> method whose Java type XXX corresponds to the\n     * parameter's registered SQL type.\n     *\n     * @param parameterName the name of the parameter\n     * @param sqlType a value from {@link java.sql.Types}\n     * @param typeName the fully-qualified name of an SQL structured type\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type or if the JDBC driver does not support\n     * this method\n     * @see Types\n     * @since 1.4\n     ",
    "links" : [ "java.sql.Types" ]
  }, {
    "name" : " java.net.URL getURL(int parameterIndex) throws SQLException",
    "returnType" : "java.net.URL",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>DATALINK</code> parameter as a\n     * <code>java.net.URL</code> object.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,...\n     * @return a <code>java.net.URL</code> object that represents the\n     *         JDBC <code>DATALINK</code> value used as the designated\n     *         parameter\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs,\n     * this method is called on a closed <code>CallableStatement</code>,\n     *            or if the URL being returned is\n     *            not a valid URL on the Java platform\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setURL\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setURL(String parameterName, java.net.URL val) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.net.URL</code> object.\n     * The driver converts this to an SQL <code>DATALINK</code> value when\n     * it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param val the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs;\n     * this method is called on a closed <code>CallableStatement</code>\n     *            or if a URL is malformed\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getURL\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNull(String parameterName, int sqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to SQL <code>NULL</code>.\n     *\n     * <P><B>Note:</B> You must specify the parameter's SQL type.\n     *\n     * @param parameterName the name of the parameter\n     * @param sqlType the SQL type code defined in <code>java.sql.Types</code>\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBoolean(String parameterName, boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>boolean</code> value.\n     * The driver converts this\n     * to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @see #getBoolean\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setByte(String parameterName, byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>byte</code> value.\n     * The driver converts this\n     * to an SQL <code>TINYINT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getByte\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setShort(String parameterName, short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>short</code> value.\n     * The driver converts this\n     * to an SQL <code>SMALLINT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getShort\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setInt(String parameterName, int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>int</code> value.\n     * The driver converts this\n     * to an SQL <code>INTEGER</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getInt\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setLong(String parameterName, long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>long</code> value.\n     * The driver converts this\n     * to an SQL <code>BIGINT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getLong\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFloat(String parameterName, float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>float</code> value.\n     * The driver converts this\n     * to an SQL <code>FLOAT</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getFloat\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDouble(String parameterName, double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>double</code> value.\n     * The driver converts this\n     * to an SQL <code>DOUBLE</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getDouble\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBigDecimal(String parameterName, BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given\n     * <code>java.math.BigDecimal</code> value.\n     * The driver converts this to an SQL <code>NUMERIC</code> value when\n     * it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBigDecimal\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setString(String parameterName, String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java <code>String</code> value.\n     * The driver converts this\n     * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value\n     * (depending on the argument's\n     * size relative to the driver's limits on <code>VARCHAR</code> values)\n     * when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getString\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBytes(String parameterName, byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given Java array of bytes.\n     * The driver converts this to an SQL <code>VARBINARY</code> or\n     * <code>LONGVARBINARY</code> (depending on the argument's size relative\n     * to the driver's limits on <code>VARBINARY</code> values) when it sends\n     * it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getBytes\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDate(String parameterName, java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Date</code> value\n     * using the default time zone of the virtual machine that is running\n     * the application.\n     * The driver converts this\n     * to an SQL <code>DATE</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getDate\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTime(String parameterName, java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Time</code> value.\n     * The driver converts this\n     * to an SQL <code>TIME</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTime\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.\n     * The driver\n     * converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the\n     * database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTimestamp\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the java input stream which contains the binary parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the designated parameter with the given object. The second\n     * argument must be an object type; for integral values, the\n     * <code>java.lang</code> equivalent objects should be used.\n     *\n     * <p>The given Java object will be converted to the given targetSqlType\n     * before being sent to the database.\n     *\n     * If the object has a custom mapping (is of a class implementing the\n     * interface <code>SQLData</code>),\n     * the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it\n     * to the SQL data stream.\n     * If, on the other hand, the object is of a class implementing\n     * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n     *  <code>Struct</code>, <code>java.net.URL</code>,\n     * or <code>Array</code>, the driver should pass it to the database as a\n     * value of the corresponding SQL type.\n     * <P>\n     * Note that this method may be used to pass datatabase-\n     * specific abstract data types.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the object containing the input parameter value\n     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be\n     * sent to the database. The scale argument may further qualify this type.\n     * @param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,\n     *          this is the number of digits after the decimal point.  For all other\n     *          types, this value will be ignored.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see Types\n     * @see #getObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(String parameterName, Object x, int targetSqlType) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the designated parameter with the given object.\n     * This method is like the method <code>setObject</code>\n     * above, except that it assumes a scale of zero.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the object containing the input parameter value\n     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be\n     *                      sent to the database\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is\n     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,\n     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,\n     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,\n     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>\n     * or  <code>STRUCT</code> data type and the JDBC driver does not support\n     * this data type\n     * @see #getObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(String parameterName, Object x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the designated parameter with the given object.\n     * The second parameter must be of type <code>Object</code>; therefore, the\n     * <code>java.lang</code> equivalent objects should be used for built-in types.\n     *\n     * <p>The JDBC specification specifies a standard mapping from\n     * Java <code>Object</code> types to SQL types.  The given argument\n     * will be converted to the corresponding SQL type before being\n     * sent to the database.\n     * <p>Note that this method may be used to pass datatabase-\n     * specific abstract data types, by using a driver-specific Java\n     * type.\n     *\n     * If the object is of a class implementing the interface <code>SQLData</code>,\n     * the JDBC driver should call the method <code>SQLData.writeSQL</code>\n     * to write it to the SQL data stream.\n     * If, on the other hand, the object is of a class implementing\n     * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,\n     *  <code>Struct</code>, <code>java.net.URL</code>,\n     * or <code>Array</code>, the driver should pass it to the database as a\n     * value of the corresponding SQL type.\n     * <P>\n     * This method throws an exception if there is an ambiguity, for example, if the\n     * object is of a class implementing more than one of the interfaces named above.\n     *<p>\n     *<b>Note:</b> Not all databases allow for a non-typed Null to be sent to\n     * the backend. For maximum portability, the <code>setNull</code> or the\n     * <code>setObject(String parameterName, Object x, int sqlType)</code>\n     * method should be used\n     * instead of <code>setObject(String parameterName, Object x)</code>.\n     *<p>\n     * @param parameterName the name of the parameter\n     * @param x the object containing the input parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs,\n     * this method is called on a closed <code>CallableStatement</code> or if the given\n     *            <code>Object</code> parameter is ambiguous\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader the <code>java.io.Reader</code> object that\n     *        contains the UNICODE data used as the designated parameter\n     * @param length the number of characters in the stream\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Date</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,\n     * which the driver then sends to the database.  With a\n     * a <code>Calendar</code> object, the driver can calculate the date\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the date\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getDate\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Time</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,\n     * which the driver then sends to the database.  With a\n     * a <code>Calendar</code> object, the driver can calculate the time\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the time\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTime\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,\n     * using the given <code>Calendar</code> object.  The driver uses\n     * the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,\n     * which the driver then sends to the database.  With a\n     * a <code>Calendar</code> object, the driver can calculate the timestamp\n     * taking into account a custom timezone.  If no\n     * <code>Calendar</code> object is specified, the driver uses the default\n     * timezone, which is that of the virtual machine running the application.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the timestamp\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getTimestamp\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNull(String parameterName, int sqlType, String typeName) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to SQL <code>NULL</code>.\n     * This version of the method <code>setNull</code> should\n     * be used for user-defined types and REF type parameters.  Examples\n     * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and\n     * named array types.\n     *\n     * <P><B>Note:</B> To be portable, applications must give the\n     * SQL type code and the fully-qualified SQL type name when specifying\n     * a NULL user-defined or REF parameter.  In the case of a user-defined type\n     * the name is the type name of the parameter itself.  For a REF\n     * parameter, the name is the type name of the referenced type.\n     * <p>\n     * Although it is intended for user-defined and Ref parameters,\n     * this method may be used to set a null parameter of any JDBC type.\n     * If the parameter does not have a user-defined or REF type, the given\n     * typeName is ignored.\n     *\n     *\n     * @param parameterName the name of the parameter\n     * @param sqlType a value from <code>java.sql.Types</code>\n     * @param typeName the fully-qualified name of an SQL user-defined type;\n     *        ignored if the parameter is not a user-defined type or\n     *        SQL <code>REF</code> value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(String parameterName) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of a JDBC <code>CHAR</code>, <code>VARCHAR</code>,\n     * or <code>LONGVARCHAR</code> parameter as a <code>String</code> in\n     * the Java programming language.\n     * <p>\n     * For the fixed-length type JDBC <code>CHAR</code>,\n     * the <code>String</code> object\n     * returned has exactly the same value the SQL\n     * <code>CHAR</code> value had in the\n     * database, including any padding added by the database.\n     * @param parameterName the name of the parameter\n     * @return the parameter value. If the value is SQL <code>NULL</code>, the result\n     * is <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setString\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getBoolean(String parameterName) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves the value of a JDBC <code>BIT</code> or <code>BOOLEAN</code>\n     * parameter as a\n     * <code>boolean</code> in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>false</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setBoolean\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " byte getByte(String parameterName) throws SQLException",
    "returnType" : "byte",
    "comment" : "\n     * Retrieves the value of a JDBC <code>TINYINT</code> parameter as a <code>byte</code>\n     * in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>0</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setByte\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(String parameterName) throws SQLException",
    "returnType" : "short",
    "comment" : "\n     * Retrieves the value of a JDBC <code>SMALLINT</code> parameter as a <code>short</code>\n     * in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>0</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setShort\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(String parameterName) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the value of a JDBC <code>INTEGER</code> parameter as an <code>int</code>\n     * in the Java programming language.\n     *\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>,\n     *         the result is <code>0</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setInt\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(String parameterName) throws SQLException",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the value of a JDBC <code>BIGINT</code> parameter as a <code>long</code>\n     * in the Java programming language.\n     *\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>,\n     *         the result is <code>0</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setLong\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(String parameterName) throws SQLException",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the value of a JDBC <code>FLOAT</code> parameter as a <code>float</code>\n     * in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>,\n     *         the result is <code>0</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setFloat\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " double getDouble(String parameterName) throws SQLException",
    "returnType" : "double",
    "comment" : "\n     * Retrieves the value of a JDBC <code>DOUBLE</code> parameter as a <code>double</code>\n     * in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>,\n     *         the result is <code>0</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setDouble\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " byte[] getBytes(String parameterName) throws SQLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieves the value of a JDBC <code>BINARY</code> or <code>VARBINARY</code>\n     * parameter as an array of <code>byte</code> values in the Java\n     * programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result is\n     *  <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setBytes\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date getDate(String parameterName) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of a JDBC <code>DATE</code> parameter as a\n     * <code>java.sql.Date</code> object.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setDate\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(String parameterName) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of a JDBC <code>TIME</code> parameter as a\n     * <code>java.sql.Time</code> object.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setTime\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(String parameterName) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a\n     * <code>java.sql.Timestamp</code> object.\n     * @param parameterName the name of the parameter\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n     * is <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setTimestamp\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(String parameterName) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the value of a parameter as an <code>Object</code> in the Java\n     * programming language. If the value is an SQL <code>NULL</code>, the\n     * driver returns a Java <code>null</code>.\n     * <p>\n     * This method returns a Java object whose type corresponds to the JDBC\n     * type that was registered for this parameter using the method\n     * <code>registerOutParameter</code>.  By registering the target JDBC\n     * type as <code>java.sql.Types.OTHER</code>, this method can be used\n     * to read database-specific abstract data types.\n     * @param parameterName the name of the parameter\n     * @return A <code>java.lang.Object</code> holding the OUT parameter value.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see Types\n     * @see #setObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(String parameterName) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Retrieves the value of a JDBC <code>NUMERIC</code> parameter as a\n     * <code>java.math.BigDecimal</code> object with as many digits to the\n     * right of the decimal point as the value contains.\n     * @param parameterName the name of the parameter\n     * @return the parameter value in full precision.  If the value is\n     * SQL <code>NULL</code>, the result is <code>null</code>.\n     * @exception SQLExceptionif parameterName does not correspond to a named\n     * parameter;  if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setBigDecimal\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(String parameterName, java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Returns an object representing the value of OUT parameter\n     * <code>parameterName</code> and uses <code>map</code> for the custom\n     * mapping of the parameter value.\n     * <p>\n     * This method returns a Java object whose type corresponds to the\n     * JDBC type that was registered for this parameter using the method\n     * <code>registerOutParameter</code>.  By registering the target\n     * JDBC type as <code>java.sql.Types.OTHER</code>, this method can\n     * be used to read database-specific abstract data types.\n     * @param parameterName the name of the parameter\n     * @param map the mapping from SQL type names to Java classes\n     * @return a <code>java.lang.Object</code> holding the OUT parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setObject\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Ref getRef(String parameterName) throws SQLException",
    "returnType" : "Ref",
    "comment" : "\n     * Retrieves the value of a JDBC <code>REF(&lt;structured-type&gt;)</code>\n     * parameter as a {@link java.sql.Ref} object in the Java programming language.\n     *\n     * @param parameterName the name of the parameter\n     * @return the parameter value as a <code>Ref</code> object in the\n     *         Java programming language.  If the value was SQL <code>NULL</code>,\n     *         the value <code>null</code> is returned.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ "java.sql.Ref" ]
  }, {
    "name" : " Blob getBlob(String parameterName) throws SQLException",
    "returnType" : "Blob",
    "comment" : "\n     * Retrieves the value of a JDBC <code>BLOB</code> parameter as a\n     * {@link java.sql.Blob} object in the Java programming language.\n     *\n     * @param parameterName the name of the parameter\n     * @return the parameter value as a <code>Blob</code> object in the\n     *         Java programming language.  If the value was SQL <code>NULL</code>,\n     *         the value <code>null</code> is returned.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ "java.sql.Blob" ]
  }, {
    "name" : " Clob getClob(String parameterName) throws SQLException",
    "returnType" : "Clob",
    "comment" : "\n     * Retrieves the value of a JDBC <code>CLOB</code> parameter as a\n     * <code>java.sql.Clob</code> object in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value as a <code>Clob</code> object in the\n     *         Java programming language.  If the value was SQL <code>NULL</code>,\n     *         the value <code>null</code> is returned.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " Array getArray(String parameterName) throws SQLException",
    "returnType" : "Array",
    "comment" : "\n     * Retrieves the value of a JDBC <code>ARRAY</code> parameter as an\n     * {@link java.sql.Array} object in the Java programming language.\n     *\n     * @param parameterName the name of the parameter\n     * @return the parameter value as an <code>Array</code> object in\n     *         Java programming language.  If the value was SQL <code>NULL</code>,\n     *         the value <code>null</code> is returned.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ "java.sql.Array" ]
  }, {
    "name" : " java.sql.Date getDate(String parameterName, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of a JDBC <code>DATE</code> parameter as a\n     * <code>java.sql.Date</code> object, using\n     * the given <code>Calendar</code> object\n     * to construct the date.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the date taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * @param parameterName the name of the parameter\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the date\n     * @return the parameter value.  If the value is SQL <code>NULL</code>,\n     * the result is <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setDate\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(String parameterName, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of a JDBC <code>TIME</code> parameter as a\n     * <code>java.sql.Time</code> object, using\n     * the given <code>Calendar</code> object\n     * to construct the time.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the time taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     * @param parameterName the name of the parameter\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the time\n     * @return the parameter value; if the value is SQL <code>NULL</code>, the result is\n     * <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setTime\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a\n     * <code>java.sql.Timestamp</code> object, using\n     * the given <code>Calendar</code> object to construct\n     * the <code>Timestamp</code> object.\n     * With a <code>Calendar</code> object, the driver\n     * can calculate the timestamp taking into account a custom timezone and locale.\n     * If no <code>Calendar</code> object is specified, the driver uses the\n     * default timezone and locale.\n     *\n     *\n     * @param parameterName the name of the parameter\n     * @param cal the <code>Calendar</code> object the driver will use\n     *            to construct the timestamp\n     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result is\n     * <code>null</code>.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setTimestamp\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.net.URL getURL(String parameterName) throws SQLException",
    "returnType" : "java.net.URL",
    "comment" : "\n     * Retrieves the value of a JDBC <code>DATALINK</code> parameter as a\n     * <code>java.net.URL</code> object.\n     *\n     * @param parameterName the name of the parameter\n     * @return the parameter value as a <code>java.net.URL</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the\n     * value <code>null</code> is returned.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs,\n     * this method is called on a closed <code>CallableStatement</code>,\n     *            or if there is a problem with the URL\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #setURL\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " RowId getRowId(int parameterIndex) throws SQLException",
    "returnType" : "RowId",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a\n     * <code>java.sql.RowId</code> object.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2,...\n     * @return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>\n     *     value is used as the designated parameter. If the parameter contains\n     * a SQL <code>NULL</code>, then a <code>null</code> value is returned.\n     * @throws SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " RowId getRowId(String parameterName) throws SQLException",
    "returnType" : "RowId",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a\n     * <code>java.sql.RowId</code> object.\n     *\n     * @param parameterName the name of the parameter\n     * @return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>\n     *     value is used as the designated parameter. If the parameter contains\n     * a SQL <code>NULL</code>, then a <code>null</code> value is returned.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRowId(String parameterName, RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.RowId</code> object. The\n     * driver converts this to a SQL <code>ROWID</code> when it sends it to the\n     * database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the parameter value\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNString(String parameterName, String value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>String</code> object.\n     * The driver converts this to a SQL <code>NCHAR</code> or\n     * <code>NVARCHAR</code> or <code>LONGNVARCHAR</code>\n     * @param parameterName the name of the parameter to be set\n     * @param value the parameter value\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * @param parameterName the name of the parameter to be set\n     * @param value the parameter value\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(String parameterName, NClob value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>java.sql.NClob</code> object. The object\n     * implements the <code>java.sql.NClob</code> interface. This <code>NClob</code>\n     * object maps to a SQL <code>NCLOB</code>.\n     * @param parameterName the name of the parameter to be set\n     * @param value the parameter value\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(String parameterName, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>CallableStatement</code> is executed.\n     * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     * @param parameterName the name of the parameter to be set\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the length specified is less than zero;\n     * a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.  The <code>inputstream</code> must contain  the number\n     * of characters specified by length, otherwise a <code>SQLException</code> will be\n     * generated when the <code>CallableStatement</code> is executed.\n     * This method differs from the <code>setBinaryStream (int, InputStream, int)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     *\n     * @param parameterName the name of the parameter to be set\n     * the second is 2, ...\n     *\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @param length the number of bytes in the parameter data.\n     * @throws SQLException  if parameterName does not correspond to a named\n     * parameter; if the length specified\n     * is less than zero; if the number of bytes in the inputstream does not match\n     * the specfied length; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(String parameterName, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number\n     * of characters specified by length otherwise a <code>SQLException</code> will be\n     * generated when the <code>CallableStatement</code> is executed.\n     * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     *\n     * @param parameterName the name of the parameter to be set\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the length specified is less than zero;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " NClob getNClob(int parameterIndex) throws SQLException",
    "returnType" : "NClob",
    "comment" : "\n     * Retrieves the value of the designated JDBC <code>NCLOB</code> parameter as a\n     * <code>java.sql.NClob</code> object in the Java programming language.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, and\n     * so on\n     * @return the parameter value as a <code>NClob</code> object in the\n     * Java programming language.  If the value was SQL <code>NULL</code>, the\n     * value <code>null</code> is returned.\n     * @exception SQLException if the parameterIndex is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " NClob getNClob(String parameterName) throws SQLException",
    "returnType" : "NClob",
    "comment" : "\n     * Retrieves the value of a JDBC <code>NCLOB</code> parameter as a\n     * <code>java.sql.NClob</code> object in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return the parameter value as a <code>NClob</code> object in the\n     *         Java programming language.  If the value was SQL <code>NULL</code>,\n     *         the value <code>null</code> is returned.\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an\n     * <code>SQL XML</code> value when it sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs;\n     * this method is called on a closed <code>CallableStatement</code> or\n     * the <code>java.xml.transform.Result</code>,\n   *  <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLXML getSQLXML(int parameterIndex) throws SQLException",
    "returnType" : "SQLXML",
    "comment" : "\n     * Retrieves the value of the designated <code>SQL XML</code> parameter as a\n     * <code>java.sql.SQLXML</code> object in the Java programming language.\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n     * @throws SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLXML getSQLXML(String parameterName) throws SQLException",
    "returnType" : "SQLXML",
    "comment" : "\n     * Retrieves the value of the designated <code>SQL XML</code> parameter as a\n     * <code>java.sql.SQLXML</code> object in the Java programming language.\n     * @param parameterName the name of the parameter\n     * @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " String getNString(int parameterIndex) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of the designated <code>NCHAR</code>,\n     * <code>NVARCHAR</code>\n     * or <code>LONGNVARCHAR</code> parameter as\n     * a <code>String</code> in the Java programming language.\n     *  <p>\n     * For the fixed-length type JDBC <code>NCHAR</code>,\n     * the <code>String</code> object\n     * returned has exactly the same value the SQL\n     * <code>NCHAR</code> value had in the\n     * database, including any padding added by the database.\n     *\n     * @param parameterIndex index of the first parameter is 1, the second is 2, ...\n     * @return a <code>String</code> object that maps an\n     * <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     * @see #setNString\n     ",
    "links" : [ ]
  }, {
    "name" : " String getNString(String parameterName) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     *  Retrieves the value of the designated <code>NCHAR</code>,\n     * <code>NVARCHAR</code>\n     * or <code>LONGNVARCHAR</code> parameter as\n     * a <code>String</code> in the Java programming language.\n     * <p>\n     * For the fixed-length type JDBC <code>NCHAR</code>,\n     * the <code>String</code> object\n     * returned has exactly the same value the SQL\n     * <code>NCHAR</code> value had in the\n     * database, including any padding added by the database.\n     *\n     * @param parameterName the name of the parameter\n     * @return a <code>String</code> object that maps an\n     * <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     * @see #setNString\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getNCharacterStream(int parameterIndex) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated parameter as a\n     * <code>java.io.Reader</code> object in the Java programming language.\n     * It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> parameters.\n     *\n     * @return a <code>java.io.Reader</code> object that contains the parameter\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @exception SQLException if the parameterIndex is not valid;\n     * if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getNCharacterStream(String parameterName) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated parameter as a\n     * <code>java.io.Reader</code> object in the Java programming language.\n     * It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> parameters.\n     *\n     * @param parameterName the name of the parameter\n     * @return a <code>java.io.Reader</code> object that contains the parameter\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getCharacterStream(int parameterIndex) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated parameter as a\n     * <code>java.io.Reader</code> object in the Java programming language.\n     *\n     * @return a <code>java.io.Reader</code> object that contains the parameter\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language.\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @exception SQLException if the parameterIndex is not valid; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getCharacterStream(String parameterName) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated parameter as a\n     * <code>java.io.Reader</code> object in the Java programming language.\n     *\n     * @param parameterName the name of the parameter\n     * @return a <code>java.io.Reader</code> object that contains the parameter\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(String parameterName, Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Blob</code> object.\n     * The driver converts this to an SQL <code>BLOB</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(String parameterName, Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>java.sql.Clob</code> object.\n     * The driver converts this to an SQL <code>CLOB</code> value when it\n     * sends it to the database.\n     *\n     * @param parameterName the name of the parameter\n     * @param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(String parameterName, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(String parameterName, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream, which will have\n     * the specified number of bytes.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the java input stream which contains the binary parameter value\n     * @param length the number of bytes in the stream\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(String parameterName, java.io.Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader the <code>java.io.Reader</code> object that\n     *        contains the UNICODE data used as the designated parameter\n     * @param length the number of characters in the stream\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream.\n     * When a very large ASCII value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code>. Data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from ASCII to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setAsciiStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the Java input stream that contains the ASCII parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n       * @since 1.6\n    ",
    "links" : [ ]
  }, {
    "name" : " void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given input stream.\n     * When a very large binary value is input to a <code>LONGVARBINARY</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.InputStream</code> object. The data will be read from the\n     * stream as needed until end-of-file is reached.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBinaryStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param x the java input stream which contains the binary parameter value\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to the given <code>Reader</code>\n     * object.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The data will be read from the stream\n     * as needed until end-of-file is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setCharacterStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader the <code>java.io.Reader</code> object that contains the\n     *        Unicode data\n     * @exception SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNCharacterStream(String parameterName, Reader value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object. The\n     * <code>Reader</code> reads the data till end-of-file is reached. The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n\n     * <P><B>Note:</B> This stream object can either be a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNCharacterStream</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param value the parameter value\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; if a database access error occurs; or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setClob(String parameterName, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setClob</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or this method is called on\n     * a closed <code>CallableStatement</code>\n     *\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setBlob(String parameterName, InputStream inputStream) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>InputStream</code> object.\n     * This method differs from the <code>setBinaryStream (int, InputStream)</code>\n     * method because it informs the driver that the parameter value should be\n     * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,\n     * the driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setBlob</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNClob(String parameterName, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the designated parameter to a <code>Reader</code> object.\n     * This method differs from the <code>setCharacterStream (int, Reader)</code> method\n     * because it informs the driver that the parameter value should be sent to\n     * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the\n     * driver may have to do extra work to determine whether the parameter\n     * data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>setNClob</code> which takes a length parameter.\n     *\n     * @param parameterName the name of the parameter\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if parameterName does not correspond to a named\n     * parameter; if the driver does not support national character sets;\n     * if the driver can detect that a data conversion\n     *  error could occur;  if a database access error occurs or\n     * this method is called on a closed <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void registerOutParameter(int parameterIndex, int sqlType) throws SQLException", " void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException", " boolean wasNull() throws SQLException", " String getString(int parameterIndex) throws SQLException", " boolean getBoolean(int parameterIndex) throws SQLException", " byte getByte(int parameterIndex) throws SQLException", " short getShort(int parameterIndex) throws SQLException", " int getInt(int parameterIndex) throws SQLException", " long getLong(int parameterIndex) throws SQLException", " float getFloat(int parameterIndex) throws SQLException", " double getDouble(int parameterIndex) throws SQLException", " BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException", " byte[] getBytes(int parameterIndex) throws SQLException", " java.sql.Date getDate(int parameterIndex) throws SQLException", " java.sql.Time getTime(int parameterIndex) throws SQLException", " java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException", " Object getObject(int parameterIndex) throws SQLException", " BigDecimal getBigDecimal(int parameterIndex) throws SQLException", " Object getObject(int parameterIndex, java.util.Map<String, Class<?>> map) throws SQLException", " Ref getRef(int parameterIndex) throws SQLException", " Blob getBlob(int parameterIndex) throws SQLException", " Clob getClob(int parameterIndex) throws SQLException", " Array getArray(int parameterIndex) throws SQLException", " java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException", " java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException", " java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException", " void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException", " void registerOutParameter(String parameterName, int sqlType) throws SQLException", " void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException", " void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException", " java.net.URL getURL(int parameterIndex) throws SQLException", " void setURL(String parameterName, java.net.URL val) throws SQLException", " void setNull(String parameterName, int sqlType) throws SQLException", " void setBoolean(String parameterName, boolean x) throws SQLException", " void setByte(String parameterName, byte x) throws SQLException", " void setShort(String parameterName, short x) throws SQLException", " void setInt(String parameterName, int x) throws SQLException", " void setLong(String parameterName, long x) throws SQLException", " void setFloat(String parameterName, float x) throws SQLException", " void setDouble(String parameterName, double x) throws SQLException", " void setBigDecimal(String parameterName, BigDecimal x) throws SQLException", " void setString(String parameterName, String x) throws SQLException", " void setBytes(String parameterName, byte[] x) throws SQLException", " void setDate(String parameterName, java.sql.Date x) throws SQLException", " void setTime(String parameterName, java.sql.Time x) throws SQLException", " void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException", " void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException", " void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException", " void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException", " void setObject(String parameterName, Object x, int targetSqlType) throws SQLException", " void setObject(String parameterName, Object x) throws SQLException", " void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException", " void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException", " void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException", " void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException", " void setNull(String parameterName, int sqlType, String typeName) throws SQLException", " String getString(String parameterName) throws SQLException", " boolean getBoolean(String parameterName) throws SQLException", " byte getByte(String parameterName) throws SQLException", " short getShort(String parameterName) throws SQLException", " int getInt(String parameterName) throws SQLException", " long getLong(String parameterName) throws SQLException", " float getFloat(String parameterName) throws SQLException", " double getDouble(String parameterName) throws SQLException", " byte[] getBytes(String parameterName) throws SQLException", " java.sql.Date getDate(String parameterName) throws SQLException", " java.sql.Time getTime(String parameterName) throws SQLException", " java.sql.Timestamp getTimestamp(String parameterName) throws SQLException", " Object getObject(String parameterName) throws SQLException", " BigDecimal getBigDecimal(String parameterName) throws SQLException", " Object getObject(String parameterName, java.util.Map<String, Class<?>> map) throws SQLException", " Ref getRef(String parameterName) throws SQLException", " Blob getBlob(String parameterName) throws SQLException", " Clob getClob(String parameterName) throws SQLException", " Array getArray(String parameterName) throws SQLException", " java.sql.Date getDate(String parameterName, Calendar cal) throws SQLException", " java.sql.Time getTime(String parameterName, Calendar cal) throws SQLException", " java.sql.Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException", " java.net.URL getURL(String parameterName) throws SQLException", " RowId getRowId(int parameterIndex) throws SQLException", " RowId getRowId(String parameterName) throws SQLException", " void setRowId(String parameterName, RowId x) throws SQLException", " void setNString(String parameterName, String value) throws SQLException", " void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException", " void setNClob(String parameterName, NClob value) throws SQLException", " void setClob(String parameterName, Reader reader, long length) throws SQLException", " void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException", " void setNClob(String parameterName, Reader reader, long length) throws SQLException", " NClob getNClob(int parameterIndex) throws SQLException", " NClob getNClob(String parameterName) throws SQLException", " void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException", " SQLXML getSQLXML(int parameterIndex) throws SQLException", " SQLXML getSQLXML(String parameterName) throws SQLException", " String getNString(int parameterIndex) throws SQLException", " String getNString(String parameterName) throws SQLException", " java.io.Reader getNCharacterStream(int parameterIndex) throws SQLException", " java.io.Reader getNCharacterStream(String parameterName) throws SQLException", " java.io.Reader getCharacterStream(int parameterIndex) throws SQLException", " java.io.Reader getCharacterStream(String parameterName) throws SQLException", " void setBlob(String parameterName, Blob x) throws SQLException", " void setClob(String parameterName, Clob x) throws SQLException", " void setAsciiStream(String parameterName, java.io.InputStream x, long length) throws SQLException", " void setBinaryStream(String parameterName, java.io.InputStream x, long length) throws SQLException", " void setCharacterStream(String parameterName, java.io.Reader reader, long length) throws SQLException", " void setAsciiStream(String parameterName, java.io.InputStream x) throws SQLException", " void setBinaryStream(String parameterName, java.io.InputStream x) throws SQLException", " void setCharacterStream(String parameterName, java.io.Reader reader) throws SQLException", " void setNCharacterStream(String parameterName, Reader value) throws SQLException", " void setClob(String parameterName, Reader reader) throws SQLException", " void setBlob(String parameterName, InputStream inputStream) throws SQLException", " void setNClob(String parameterName, Reader reader) throws SQLException" ],
  "variableNames" : [ ]
}