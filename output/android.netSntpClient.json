{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/SntpClient.java",
  "packageName" : "android.net",
  "className" : "SntpClient",
  "comment" : "\n * {@hide}\n *\n * Simple SNTP client class for retrieving network time.\n *\n * Sample usage:\n * <pre>SntpClient client = new SntpClient();\n * if (client.requestTime(\"time.foo.com\")) {\n *     long now = client.getNtpTime() + SystemClock.elapsedRealtime() - client.getNtpTimeReference();\n * }\n * </pre>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REFERENCE_TIME_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIGINATE_TIME_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECEIVE_TIME_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSMIT_TIME_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_PACKET_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_PORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_MODE_CLIENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_MODE_SERVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_MODE_BROADCAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_LEAP_NOSYNC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_STRATUM_DEATH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NTP_STRATUM_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFFSET_1900_TO_1970",
    "type" : "long",
    "comment" : " 70 years plus 17 leap days",
    "links" : [ ]
  }, {
    "name" : "mNtpTime",
    "type" : "long",
    "comment" : " system time computed from NTP server response",
    "links" : [ ]
  }, {
    "name" : "mNtpTimeReference",
    "type" : "long",
    "comment" : " value of SystemClock.elapsedRealtime() corresponding to mNtpTime",
    "links" : [ ]
  }, {
    "name" : "mRoundTripTime",
    "type" : "long",
    "comment" : " round trip time in milliseconds",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean requestTime(String host, int timeout, Network network)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends an SNTP request to the given host and processes the response.\n     *\n     * @param host host name of the server.\n     * @param timeout network timeout in milliseconds.\n     * @param network network over which to send the request.\n     * @return true if the transaction was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestTime(InetAddress address, int port, int timeout, Network network)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean requestTime(String host, int timeout)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getNtpTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time computed from the NTP transaction.\n     *\n     * @return time value computed from NTP server response.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getNtpTimeReference()",
    "returnType" : "long",
    "comment" : "\n     * Returns the reference clock value (value of SystemClock.elapsedRealtime())\n     * corresponding to the NTP time.\n     *\n     * @return reference clock corresponding to the NTP time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getRoundTripTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the round trip time of the NTP transaction\n     *\n     * @return round trip time in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkValidServerReply(byte leap, byte mode, int stratum, long transmitTime) throws InvalidServerReplyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long read32(byte[] buffer, int offset)",
    "returnType" : "long",
    "comment" : "\n     * Reads an unsigned 32 bit big endian number from the given offset in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long readTimeStamp(byte[] buffer, int offset)",
    "returnType" : "long",
    "comment" : "\n     * Reads the NTP time stamp at the given offset in the buffer and returns\n     * it as a system time (milliseconds since January 1, 1970).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeTimeStamp(byte[] buffer, int offset, long time)",
    "returnType" : "void",
    "comment" : "\n     * Writes system time (milliseconds since January 1, 1970) as an NTP time stamp\n     * at the given offset in the buffer.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "REFERENCE_TIME_OFFSET", "ORIGINATE_TIME_OFFSET", "RECEIVE_TIME_OFFSET", "TRANSMIT_TIME_OFFSET", "NTP_PACKET_SIZE", "NTP_PORT", "NTP_MODE_CLIENT", "NTP_MODE_SERVER", "NTP_MODE_BROADCAST", "NTP_VERSION", "NTP_LEAP_NOSYNC", "NTP_STRATUM_DEATH", "NTP_STRATUM_MAX", "OFFSET_1900_TO_1970", "mNtpTime", "mNtpTimeReference", "mRoundTripTime" ],
  "methodNames" : [ "public boolean requestTime(String host, int timeout, Network network)", "public boolean requestTime(InetAddress address, int port, int timeout, Network network)", "public boolean requestTime(String host, int timeout)", "public long getNtpTime()", "public long getNtpTimeReference()", "public long getRoundTripTime()", "private static void checkValidServerReply(byte leap, byte mode, int stratum, long transmitTime) throws InvalidServerReplyException", "private long read32(byte[] buffer, int offset)", "private long readTimeStamp(byte[] buffer, int offset)", "private void writeTimeStamp(byte[] buffer, int offset, long time)" ]
}