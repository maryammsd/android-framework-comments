{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/HorizontalScrollView.java",
  "packageName" : "android.widget",
  "className" : "HorizontalScrollView",
  "comment" : "\n * Layout container for a view hierarchy that can be scrolled by the user,\n * allowing it to be larger than the physical display.  A HorizontalScrollView\n * is a {@link FrameLayout}, meaning you should place one child in it\n * containing the entire contents to scroll; this child may itself be a layout\n * manager with a complex hierarchy of objects.  A child that is often used\n * is a {@link LinearLayout} in a horizontal orientation, presenting a horizontal\n * array of top-level items that the user can scroll through.\n *\n * <p>The {@link TextView} class also\n * takes care of its own scrolling, so does not require a HorizontalScrollView, but\n * using the two together is possible to achieve the effect of a text view\n * within a larger container.\n *\n * <p>HorizontalScrollView only supports horizontal scrolling. For vertical scrolling,\n * use either {@link ScrollView} or {@link ListView}.\n *\n * @attr ref android.R.styleable#HorizontalScrollView_fillViewport\n ",
  "links" : [ "android.widget.LinearLayout", "android.widget.TextView", "android.widget.ScrollView", "android.widget.FrameLayout", "android.widget.ListView" ],
  "variables" : [ {
    "name" : "ANIMATED_SCROLL_GAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SCROLL_FACTOR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLING_DESTRETCH_FACTOR",
    "type" : "float",
    "comment" : "\n     * When flinging the stretch towards scrolling content, it should destretch quicker than the\n     * fling would normally do. The visual effect of flinging the stretch looks strange as little\n     * appears to happen at first and then when the stretch disappears, the content starts\n     * scrolling quickly.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastScroll",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScroller",
    "type" : "OverScroller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEdgeGlowLeft",
    "type" : "EdgeEffect",
    "comment" : "\n     * Tracks the state of the left edge glow.\n     *\n     * Even though this field is practically final, we cannot make it final because there are apps\n     * setting it via reflection and they need to keep working until they target Q.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mEdgeGlowRight",
    "type" : "EdgeEffect",
    "comment" : "\n     * Tracks the state of the bottom edge glow.\n     *\n     * Even though this field is practically final, we cannot make it final because there are apps\n     * setting it via reflection and they need to keep working until they target Q.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLastMotionX",
    "type" : "int",
    "comment" : "\n     * Position of the last motion event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsLayoutDirty",
    "type" : "boolean",
    "comment" : "\n     * True when the layout has changed but the traversal has not come through yet.\n     * Ideally the view hierarchy would keep track of this for us.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChildToScrollTo",
    "type" : "View",
    "comment" : "\n     * The child to give focus to in the event that a child has requested focus while the\n     * layout is dirty. This prevents the scroll from being wrong if the child has not been\n     * laid out before requesting focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsBeingDragged",
    "type" : "boolean",
    "comment" : "\n     * True if the user is currently dragging this ScrollView around. This is\n     * not the same as 'is being flinged', which can be checked by\n     * mScroller.isFinished() (flinging begins when the user lifts their finger).\n     ",
    "links" : [ ]
  }, {
    "name" : "mVelocityTracker",
    "type" : "VelocityTracker",
    "comment" : "\n     * Determines speed during touch scrolling\n     ",
    "links" : [ ]
  }, {
    "name" : "mFillViewport",
    "type" : "boolean",
    "comment" : "\n     * When set to true, the scroll view measure its child to make it fill the currently\n     * visible area.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSmoothScrollingEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether arrow scrolling is animated.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTouchSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumVelocity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverscrollDistance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverflingDistance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalScrollFactor",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivePointerId",
    "type" : "int",
    "comment" : "\n     * ID of the active pointer. This is used to retain consistency during\n     * drags/flings if multiple pointers are used.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_POINTER",
    "type" : "int",
    "comment" : "\n     * Sentinel value for no current active pointer.\n     * Used by {@link #mActivePointerId}.\n     ",
    "links" : [ "#mActivePointerId" ]
  }, {
    "name" : "mSavedState",
    "type" : "SavedState",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected float getLeftFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected float getRightFadingEdgeStrength()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEdgeEffectColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the edge effect color for both left and right edge effects.\n     *\n     * @param color The color for the edge effects.\n     * @see #setLeftEdgeEffectColor(int)\n     * @see #setRightEdgeEffectColor(int)\n     * @see #getLeftEdgeEffectColor()\n     * @see #getRightEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRightEdgeEffectColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the right edge effect color.\n     *\n     * @param color The color for the right edge effect.\n     * @see #setLeftEdgeEffectColor(int)\n     * @see #setEdgeEffectColor(int)\n     * @see #getLeftEdgeEffectColor()\n     * @see #getRightEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLeftEdgeEffectColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the left edge effect color.\n     *\n     * @param color The color for the left edge effect.\n     * @see #setRightEdgeEffectColor(int)\n     * @see #setEdgeEffectColor(int)\n     * @see #getLeftEdgeEffectColor()\n     * @see #getRightEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLeftEdgeEffectColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the left edge effect color.\n     *\n     * @return The left edge effect color.\n     * @see #setEdgeEffectColor(int)\n     * @see #setLeftEdgeEffectColor(int)\n     * @see #setRightEdgeEffectColor(int)\n     * @see #getRightEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRightEdgeEffectColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the right edge effect color.\n     *\n     * @return The right edge effect color.\n     * @see #setEdgeEffectColor(int)\n     * @see #setLeftEdgeEffectColor(int)\n     * @see #setRightEdgeEffectColor(int)\n     * @see #getLeftEdgeEffectColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxScrollAmount()",
    "returnType" : "int",
    "comment" : "\n     * @return The maximum amount this scroll view will scroll in response to\n     *   an arrow event.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initScrollView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean canScroll()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Returns true this HorizontalScrollView can be scrolled\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFillViewport()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this HorizontalScrollView's content is stretched to\n     * fill the viewport.\n     *\n     * @return True if the content fills the viewport, false otherwise.\n     *\n     * @attr ref android.R.styleable#HorizontalScrollView_fillViewport\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFillViewport(boolean fillViewport)",
    "returnType" : "void",
    "comment" : "\n     * Indicates this HorizontalScrollView whether it should stretch its content width\n     * to fill the viewport or not.\n     *\n     * @param fillViewport True to stretch the content's width to the viewport's\n     *        boundaries, false otherwise.\n     *\n     * @attr ref android.R.styleable#HorizontalScrollView_fillViewport\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSmoothScrollingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether arrow scrolling will animate its transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSmoothScrollingEnabled(boolean smoothScrollingEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether arrow scrolling will animate its transition.\n     * @param smoothScrollingEnabled whether arrow scrolling will animate its transition\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean executeKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * You can call this function yourself to have the scroll view perform\n     * scrolling from a key event, just as if the event had been dispatched to\n     * it by the view hierarchy.\n     *\n     * @param event The key event to execute.\n     * @return Return true if the event was handled, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean inChild(int x, int y)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initOrResetVelocityTracker()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initVelocityTrackerIfNotExists()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recycleVelocityTracker()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onInterceptTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSecondaryPointerUp(MotionEvent ev)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDelayChildPressedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private int getScrollRange()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findFocusableViewInMyBounds(final boolean leftFocus, final int left, View preferredFocusable)",
    "returnType" : "View",
    "comment" : "\n     * <p>\n     * Finds the next focusable component that fits in this View's bounds\n     * (excluding fading edges) pretending that this View's left is located at\n     * the parameter left.\n     * </p>\n     *\n     * @param leftFocus          look for a candidate is the one at the left of the bounds\n     *                           if leftFocus is true, or at the right of the bounds if leftFocus\n     *                           is false\n     * @param left               the left offset of the bounds in which a focusable must be\n     *                           found (the fading edge is assumed to start at this position)\n     * @param preferredFocusable the View that has highest priority and will be\n     *                           returned if it is within my bounds (null is valid)\n     * @return the next focusable component in the bounds or null if none can be found\n     ",
    "links" : [ ]
  }, {
    "name" : "private View findFocusableViewInBounds(boolean leftFocus, int left, int right)",
    "returnType" : "View",
    "comment" : "\n     * <p>\n     * Finds the next focusable component that fits in the specified bounds.\n     * </p>\n     *\n     * @param leftFocus look for a candidate is the one at the left of the bounds\n     *                  if leftFocus is true, or at the right of the bounds if\n     *                  leftFocus is false\n     * @param left      the left offset of the bounds in which a focusable must be\n     *                  found\n     * @param right     the right offset of the bounds in which a focusable must\n     *                  be found\n     * @return the next focusable component in the bounds or null if none can\n     *         be found\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pageScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Handles scrolling in response to a \"page up/down\" shortcut press. This\n     * method will scroll the view by one page left or right and give the focus\n     * to the leftmost/rightmost component in the new visible area. If no\n     * component is a good candidate for focus, this scrollview reclaims the\n     * focus.</p>\n     *\n     * @param direction the scroll direction: {@link android.view.View#FOCUS_LEFT}\n     *                  to go one page left or {@link android.view.View#FOCUS_RIGHT}\n     *                  to go one page right\n     * @return true if the key event is consumed by this method, false otherwise\n     ",
    "links" : [ "android.view.View#FOCUS_LEFT", "android.view.View#FOCUS_RIGHT" ]
  }, {
    "name" : "public boolean fullScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Handles scrolling in response to a \"home/end\" shortcut press. This\n     * method will scroll the view to the left or right and give the focus\n     * to the leftmost/rightmost component in the new visible area. If no\n     * component is a good candidate for focus, this scrollview reclaims the\n     * focus.</p>\n     *\n     * @param direction the scroll direction: {@link android.view.View#FOCUS_LEFT}\n     *                  to go the left of the view or {@link android.view.View#FOCUS_RIGHT}\n     *                  to go the right\n     * @return true if the key event is consumed by this method, false otherwise\n     ",
    "links" : [ "android.view.View#FOCUS_LEFT", "android.view.View#FOCUS_RIGHT" ]
  }, {
    "name" : "private boolean scrollAndFocus(int direction, int left, int right)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Scrolls the view to make the area defined by <code>left</code> and\n     * <code>right</code> visible. This method attempts to give the focus\n     * to a component visible in this area. If no component can be focused in\n     * the new visible area, the focus is reclaimed by this scrollview.</p>\n     *\n     * @param direction the scroll direction: {@link android.view.View#FOCUS_LEFT}\n     *                  to go left {@link android.view.View#FOCUS_RIGHT} to right\n     * @param left     the left offset of the new area to be made visible\n     * @param right    the right offset of the new area to be made visible\n     * @return true if the key event is consumed by this method, false otherwise\n     ",
    "links" : [ "android.view.View#FOCUS_LEFT", "android.view.View#FOCUS_RIGHT" ]
  }, {
    "name" : "public boolean arrowScroll(int direction)",
    "returnType" : "boolean",
    "comment" : "\n     * Handle scrolling in response to a left or right arrow click.\n     *\n     * @param direction The direction corresponding to the arrow key that was\n     *                  pressed\n     * @return True if we consumed the event, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isOffScreen(View descendant)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the descendant of this scroll view is scrolled off\n     *  screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isWithinDeltaOfScreen(View descendant, int delta)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the descendant of this scroll view is within delta\n     *  pixels of being on the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doScrollX(int delta)",
    "returnType" : "void",
    "comment" : "\n     * Smooth scroll by a X delta\n     *\n     * @param delta the number of pixels to scroll by on the X axis\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void smoothScrollBy(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.\n     *\n     * @param dx the number of pixels to scroll by on the X axis\n     * @param dy the number of pixels to scroll by on the Y axis\n     ",
    "links" : [ "android.view.View#scrollBy" ]
  }, {
    "name" : "public final void smoothScrollTo(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #scrollTo}, but scroll smoothly instead of immediately.\n     *\n     * @param x the position where to scroll on the X axis\n     * @param y the position where to scroll on the Y axis\n     ",
    "links" : [ "#scrollTo" ]
  }, {
    "name" : "protected int computeHorizontalScrollRange()",
    "returnType" : "int",
    "comment" : "\n     * <p>The scroll range of a scroll view is the overall width of all of its\n     * children.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int computeHorizontalScrollOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void computeScroll()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int consumeFlingInStretch(int unconsumed)",
    "returnType" : "int",
    "comment" : "\n     * Used by consumeFlingInHorizontalStretch() and consumeFlinInVerticalStretch() for\n     * consuming deltas from EdgeEffects\n     * @param unconsumed The unconsumed delta that the EdgeEffets may consume\n     * @return The unconsumed delta after the EdgeEffects have had an opportunity to consume.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void scrollToChild(View child)",
    "returnType" : "void",
    "comment" : "\n     * Scrolls the view to the given child.\n     *\n     * @param child the View to scroll to\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean scrollToChildRect(Rect rect, boolean immediate)",
    "returnType" : "boolean",
    "comment" : "\n     * If rect is off screen, scroll just enough to get it (or at least the\n     * first screen size chunk of it) on screen.\n     *\n     * @param rect      The rectangle.\n     * @param immediate True to scroll immediately without animation\n     * @return true if scrolling was performed\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)",
    "returnType" : "int",
    "comment" : "\n     * Compute the amount to scroll in the X direction in order to get\n     * a rectangle completely on the screen (or, if taller than the screen,\n     * at least the first screen size chunk of it).\n     *\n     * @param rect The rect.\n     * @return The scroll delta.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestChildFocus(View child, View focused)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)",
    "returnType" : "boolean",
    "comment" : "\n     * When looking for focus in children of a scroll view, need to be a little\n     * more careful not to give focus to something that is scrolled off screen.\n     *\n     * This is more expensive than the default {@link android.view.ViewGroup}\n     * implementation, otherwise this behavior might have been made the default.\n     ",
    "links" : [ "android.view.ViewGroup" ]
  }, {
    "name" : "public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isViewDescendantOf(View child, View parent)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if child is a descendant of parent, (or equal to the parent).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fling(int velocityX)",
    "returnType" : "void",
    "comment" : "\n     * Fling the scroll view\n     *\n     * @param velocityX The initial velocity in the X direction. Positive\n     *                  numbers mean that the finger/cursor is moving down the screen,\n     *                  which means we want to scroll towards the left.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldAbsorb(EdgeEffect edgeEffect, int velocity)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if edgeEffect should call onAbsorb() with veclocity or false if it should\n     * animate with a fling. It will animate with a fling if the velocity will remove the\n     * EdgeEffect through its normal operation.\n     *\n     * @param edgeEffect The EdgeEffect that might absorb the velocity.\n     * @param velocity The velocity of the fling motion\n     * @return true if the velocity should be absorbed or false if it should be flung.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scrollTo(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This version also clamps the scrolling to the bounds of our child.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldDisplayEdgeEffects()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int clamp(int n, int my, int child)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected float getLeftFadingEdgeStrength()", "protected float getRightFadingEdgeStrength()", "public void setEdgeEffectColor(@ColorInt int color)", "public void setRightEdgeEffectColor(@ColorInt int color)", "public void setLeftEdgeEffectColor(@ColorInt int color)", "public int getLeftEdgeEffectColor()", "public int getRightEdgeEffectColor()", "public int getMaxScrollAmount()", "private void initScrollView()", "public void addView(View child)", "public void addView(View child, int index)", "public void addView(View child, ViewGroup.LayoutParams params)", "public void addView(View child, int index, ViewGroup.LayoutParams params)", "private boolean canScroll()", "public boolean isFillViewport()", "public void setFillViewport(boolean fillViewport)", "public boolean isSmoothScrollingEnabled()", "public void setSmoothScrollingEnabled(boolean smoothScrollingEnabled)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean executeKeyEvent(KeyEvent event)", "private boolean inChild(int x, int y)", "private void initOrResetVelocityTracker()", "private void initVelocityTrackerIfNotExists()", "private void recycleVelocityTracker()", "public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "public boolean onTouchEvent(MotionEvent ev)", "private void onSecondaryPointerUp(MotionEvent ev)", "public boolean onGenericMotionEvent(MotionEvent event)", "public boolean shouldDelayChildPressedState()", "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "private int getScrollRange()", "private View findFocusableViewInMyBounds(final boolean leftFocus, final int left, View preferredFocusable)", "private View findFocusableViewInBounds(boolean leftFocus, int left, int right)", "public boolean pageScroll(int direction)", "public boolean fullScroll(int direction)", "private boolean scrollAndFocus(int direction, int left, int right)", "public boolean arrowScroll(int direction)", "private boolean isOffScreen(View descendant)", "private boolean isWithinDeltaOfScreen(View descendant, int delta)", "private void doScrollX(int delta)", "public final void smoothScrollBy(int dx, int dy)", "public final void smoothScrollTo(int x, int y)", "protected int computeHorizontalScrollRange()", "protected int computeHorizontalScrollOffset()", "protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)", "protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed)", "public void computeScroll()", "private int consumeFlingInStretch(int unconsumed)", "private void scrollToChild(View child)", "private boolean scrollToChildRect(Rect rect, boolean immediate)", "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)", "public void requestChildFocus(View child, View focused)", "protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)", "public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)", "public void requestLayout()", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "private static boolean isViewDescendantOf(View child, View parent)", "public void fling(int velocityX)", "private boolean shouldAbsorb(EdgeEffect edgeEffect, int velocity)", "public void scrollTo(int x, int y)", "private boolean shouldDisplayEdgeEffects()", "public void draw(Canvas canvas)", "private static int clamp(int n, int my, int child)", "protected void onRestoreInstanceState(Parcelable state)", "protected Parcelable onSaveInstanceState()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ],
  "variableNames" : [ "ANIMATED_SCROLL_GAP", "MAX_SCROLL_FACTOR", "TAG", "FLING_DESTRETCH_FACTOR", "mLastScroll", "mTempRect", "mScroller", "mEdgeGlowLeft", "mEdgeGlowRight", "mLastMotionX", "mIsLayoutDirty", "mChildToScrollTo", "mIsBeingDragged", "mVelocityTracker", "mFillViewport", "mSmoothScrollingEnabled", "mTouchSlop", "mMinimumVelocity", "mMaximumVelocity", "mOverscrollDistance", "mOverflingDistance", "mHorizontalScrollFactor", "mActivePointerId", "INVALID_POINTER", "mSavedState" ]
}