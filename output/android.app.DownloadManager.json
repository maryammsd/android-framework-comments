{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/DownloadManager.java",
  "packageName" : "android.app",
  "className" : "DownloadManager",
  "comment" : "\n * The download manager is a system service that handles long-running HTTP downloads. Clients may\n * request that a URI be downloaded to a particular destination file. The download manager will\n * conduct the download in the background, taking care of HTTP interactions and retrying downloads\n * after failures or across connectivity changes and system reboots.\n * <p>\n * Apps that request downloads through this API should register a broadcast receiver for\n * {@link #ACTION_NOTIFICATION_CLICKED} to appropriately handle when the user clicks on a running\n * download in a notification or from the downloads UI.\n * <p>\n * Note that the application must have the {@link android.Manifest.permission#INTERNET}\n * permission to use this class.\n ",
  "links" : [ "android.Manifest.permission#INTERNET", "#ACTION_NOTIFICATION_CLICKED" ],
  "variables" : [ {
    "name" : "COLUMN_ID",
    "type" : "String",
    "comment" : "\n     * An identifier for a particular download, unique across the system.  Clients use this ID to\n     * make subsequent calls related to the download.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_TITLE",
    "type" : "String",
    "comment" : "\n     * The client-supplied title for this download.  This will be displayed in system notifications.\n     * Defaults to the empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_DESCRIPTION",
    "type" : "String",
    "comment" : "\n     * The client-supplied description of this download.  This will be displayed in system\n     * notifications.  Defaults to the empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_URI",
    "type" : "String",
    "comment" : "\n     * URI to be downloaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_MEDIA_TYPE",
    "type" : "String",
    "comment" : "\n     * Internet Media Type of the downloaded file.  If no value is provided upon creation, this will\n     * initially be null and will be filled in based on the server's response once the download has\n     * started.\n     *\n     * @see <a href=\"http://www.ietf.org/rfc/rfc1590.txt\">RFC 1590, defining Media Types</a>\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_TOTAL_SIZE_BYTES",
    "type" : "String",
    "comment" : "\n     * Total size of the download in bytes.  This will initially be -1 and will be filled in once\n     * the download starts.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_LOCAL_URI",
    "type" : "String",
    "comment" : "\n     * Uri where downloaded file will be stored.  If a destination is supplied by client, that URI\n     * will be used here.  Otherwise, the value will initially be null and will be filled in with a\n     * generated URI once the download has started.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_LOCAL_FILENAME",
    "type" : "String",
    "comment" : "\n     * Path to the downloaded file on disk.\n     * <p>\n     * Note that apps may not have filesystem permissions to directly access\n     * this path. Instead of trying to open this path directly, apps should use\n     * {@link ContentResolver#openFileDescriptor(Uri, String)} to gain access.\n     *\n     * @deprecated apps should transition to using\n     *             {@link ContentResolver#openFileDescriptor(Uri, String)}\n     *             instead.\n     ",
    "links" : [ "android.content.ContentResolver#openFileDescriptor(Uri" ]
  }, {
    "name" : "COLUMN_STATUS",
    "type" : "String",
    "comment" : "\n     * Current status of the download, as one of the STATUS_* constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_FILE_NAME_HINT",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_REASON",
    "type" : "String",
    "comment" : "\n     * Provides more detail on the status of the download.  Its meaning depends on the value of\n     * {@link #COLUMN_STATUS}.\n     *\n     * When {@link #COLUMN_STATUS} is {@link #STATUS_FAILED}, this indicates the type of error that\n     * occurred.  If an HTTP error occurred, this will hold the HTTP status code as defined in RFC\n     * 2616.  Otherwise, it will hold one of the ERROR_* constants.\n     *\n     * When {@link #COLUMN_STATUS} is {@link #STATUS_PAUSED}, this indicates why the download is\n     * paused.  It will hold one of the PAUSED_* constants.\n     *\n     * If {@link #COLUMN_STATUS} is neither {@link #STATUS_FAILED} nor {@link #STATUS_PAUSED}, this\n     * column's value is undefined.\n     *\n     * @see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1.1\">RFC 2616\n     * status codes</a>\n     ",
    "links" : [ "#COLUMN_STATUS", "#STATUS_FAILED", "#STATUS_PAUSED" ]
  }, {
    "name" : "COLUMN_BYTES_DOWNLOADED_SO_FAR",
    "type" : "String",
    "comment" : "\n     * Number of bytes download so far.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_LAST_MODIFIED_TIMESTAMP",
    "type" : "String",
    "comment" : "\n     * Timestamp when the download was last modified, in {@link System#currentTimeMillis\n     * System.currentTimeMillis()} (wall clock time in UTC).\n     ",
    "links" : [ "#currentTimeMillisSystem.currentTimeMillis()" ]
  }, {
    "name" : "COLUMN_MEDIAPROVIDER_URI",
    "type" : "String",
    "comment" : "\n     * The URI to the corresponding entry in MediaProvider for this downloaded entry. It is\n     * used to delete the entries from MediaProvider database when it is deleted from the\n     * downloaded list.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_DESTINATION",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_MEDIASTORE_URI",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ALLOW_WRITE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PENDING",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_STATUS} when the download is waiting to start.\n     ",
    "links" : [ "#COLUMN_STATUS" ]
  }, {
    "name" : "STATUS_RUNNING",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_STATUS} when the download is currently running.\n     ",
    "links" : [ "#COLUMN_STATUS" ]
  }, {
    "name" : "STATUS_PAUSED",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_STATUS} when the download is waiting to retry or resume.\n     ",
    "links" : [ "#COLUMN_STATUS" ]
  }, {
    "name" : "STATUS_SUCCESSFUL",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_STATUS} when the download has successfully completed.\n     ",
    "links" : [ "#COLUMN_STATUS" ]
  }, {
    "name" : "STATUS_FAILED",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_STATUS} when the download has failed (and will not be retried).\n     ",
    "links" : [ "#COLUMN_STATUS" ]
  }, {
    "name" : "ERROR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Value of COLUMN_ERROR_CODE when the download has completed with an error that doesn't fit\n     * under any other error code.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FILE_ERROR",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when a storage issue arises which doesn't fit under any\n     * other error code. Use the more specific {@link #ERROR_INSUFFICIENT_SPACE} and\n     * {@link #ERROR_DEVICE_NOT_FOUND} when appropriate.\n     ",
    "links" : [ "#ERROR_DEVICE_NOT_FOUND", "#ERROR_INSUFFICIENT_SPACE", "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_UNHANDLED_HTTP_CODE",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when an HTTP code was received that download manager\n     * can't handle.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_HTTP_DATA_ERROR",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when an error receiving or processing data occurred at\n     * the HTTP level.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_TOO_MANY_REDIRECTS",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when there were too many redirects.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_INSUFFICIENT_SPACE",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when there was insufficient storage space. Typically,\n     * this is because the SD card is full.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_DEVICE_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when no external storage device was found. Typically,\n     * this is because the SD card is not mounted.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_CANNOT_RESUME",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when some possibly transient error occurred but we can't\n     * resume the download.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_FILE_ALREADY_EXISTS",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when the requested destination file already exists (the\n     * download manager will not overwrite an existing file).\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ERROR_BLOCKED",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when the download has failed because of\n     * {@link NetworkPolicyManager} controls on the requesting application.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkPolicyManager", "#COLUMN_REASON" ]
  }, {
    "name" : "PAUSED_WAITING_TO_RETRY",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when the download is paused because some network error\n     * occurred and the download manager is waiting before retrying the request.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "PAUSED_WAITING_FOR_NETWORK",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when the download is waiting for network connectivity to\n     * proceed.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "PAUSED_QUEUED_FOR_WIFI",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when the download exceeds a size limit for downloads over\n     * the mobile network and the download manager is waiting for a Wi-Fi connection to proceed.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "PAUSED_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Value of {@link #COLUMN_REASON} when the download is paused for some other reason.\n     ",
    "links" : [ "#COLUMN_REASON" ]
  }, {
    "name" : "ACTION_DOWNLOAD_COMPLETE",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action sent by the download manager when a download completes.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_NOTIFICATION_CLICKED",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action sent by the download manager when the user clicks on a running\n     * download, either from a system notification or from the downloads UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VIEW_DOWNLOADS",
    "type" : "String",
    "comment" : "\n     * Intent action to launch an activity to display all downloads.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTENT_EXTRAS_SORT_BY_SIZE",
    "type" : "String",
    "comment" : "\n     * Intent extra included with {@link #ACTION_VIEW_DOWNLOADS} to start DownloadApp in\n     * sort-by-size mode.\n     ",
    "links" : [ "#ACTION_VIEW_DOWNLOADS" ]
  }, {
    "name" : "EXTRA_DOWNLOAD_ID",
    "type" : "String",
    "comment" : "\n     * Intent extra included with {@link #ACTION_DOWNLOAD_COMPLETE} intents, indicating the ID (as a\n     * long) of the download that just completed.\n     ",
    "links" : [ "#ACTION_DOWNLOAD_COMPLETE" ]
  }, {
    "name" : "EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS",
    "type" : "String",
    "comment" : "\n     * When clicks on multiple notifications are received, the following\n     * provides an array of download ids corresponding to the download notification that was\n     * clicked. It can be retrieved by the receiver of this\n     * Intent using {@link android.content.Intent#getLongArrayExtra(String)}.\n     ",
    "links" : [ "android.content.Intent#getLongArrayExtra(String)" ]
  }, {
    "name" : "ACTION_DOWNLOAD_COMPLETED",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "UNDERLYING_COLUMNS",
    "type" : "String[]",
    "comment" : "\n     * columns to request from DownloadProvider.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mResolver",
    "type" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBaseUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessFilename",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NON_DOWNLOADMANAGER_DOWNLOAD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setAccessAllDownloads(boolean accessAllDownloads)",
    "returnType" : "void",
    "comment" : "\n     * Makes this object access the download provider through /all_downloads URIs rather than\n     * /my_downloads URIs, for clients that have permission to do so.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessFilename(boolean accessFilename)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void onMediaStoreDownloadsDeleted(@NonNull LongSparseArray<String> idToMime)",
    "returnType" : "void",
    "comment" : "\n     * Notify {@link DownloadManager} that the given {@link MediaStore} items\n     * were just deleted so that {@link DownloadManager} internal data\n     * structures can be cleaned up.\n     *\n     * @param idToMime map from {@link BaseColumns#_ID} to\n     *            {@link ContentResolver#getType(Uri)}.\n     * @hide\n     ",
    "links" : [ "android.app.DownloadManager", "android.provider.MediaStore", "android.provider.BaseColumns#_ID", "android.content.ContentResolver#getType(Uri)" ]
  }, {
    "name" : "public long enqueue(Request request)",
    "returnType" : "long",
    "comment" : "\n     * Enqueue a new download.  The download will start automatically once the download manager is\n     * ready to execute it and connectivity is available.\n     *\n     * @param request the parameters specifying this download\n     * @return an ID for the download, unique across the system.  This ID is used to make\n     * future calls related to this download. Returns -1 if the operation fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int markRowDeleted(long... ids)",
    "returnType" : "int",
    "comment" : "\n     * Marks the specified download as 'to be deleted'. This is done when a completed download\n     * is to be removed but the row was stored without enough info to delete the corresponding\n     * metadata from Mediaprovider database. Actual cleanup of this row is done in DownloadService.\n     *\n     * @param ids the IDs of the downloads to be marked 'deleted'\n     * @return the number of downloads actually updated\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int remove(long... ids)",
    "returnType" : "int",
    "comment" : "\n     * Cancel downloads and remove them from the download manager.  Each download will be stopped if\n     * it was running, and it will no longer be accessible through the download manager.\n     * If there is a downloaded file, partial or complete, it is deleted.\n     *\n     * @param ids the IDs of the downloads to remove\n     * @return the number of downloads actually removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(Query query)",
    "returnType" : "Cursor",
    "comment" : "\n     * Query the download manager about downloads that have been requested.\n     * @param query parameters specifying filters for this query\n     * @return a Cursor over the result set of downloads, with columns consisting of all the\n     * COLUMN_* constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(Query query, String[] projection)",
    "returnType" : "Cursor",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor openDownloadedFile(long id) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Open a downloaded file for reading.  The download must have completed.\n     * @param id the ID of the download\n     * @return a read-only {@link ParcelFileDescriptor}\n     * @throws FileNotFoundException if the destination file does not already exist\n     ",
    "links" : [ "android.os.ParcelFileDescriptor" ]
  }, {
    "name" : "public Uri getUriForDownloadedFile(long id)",
    "returnType" : "Uri",
    "comment" : "\n     * Returns the {@link Uri} of the given downloaded file id, if the file is\n     * downloaded successfully. Otherwise, null is returned.\n     *\n     * @param id the id of the downloaded file.\n     * @return the {@link Uri} of the given downloaded file id, if download was\n     *         successful. null otherwise.\n     ",
    "links" : [ "android.net.Uri" ]
  }, {
    "name" : "public String getMimeTypeForDownloadedFile(long id)",
    "returnType" : "String",
    "comment" : "\n     * Returns the media type of the given downloaded file id, if the file was\n     * downloaded successfully. Otherwise, null is returned.\n     *\n     * @param id the id of the downloaded file.\n     * @return the media type of the given downloaded file id, if download was successful. null\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restartDownload(long... ids)",
    "returnType" : "void",
    "comment" : "\n     * Restart the given downloads, which must have already completed (successfully or not).  This\n     * method will only work when called from within the download manager's process.\n     * @param ids the IDs of the downloads\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forceDownload(long... ids)",
    "returnType" : "void",
    "comment" : "\n     * Force the given downloads to proceed even if their size is larger than\n     * {@link #getMaxBytesOverMobile(Context)}.\n     *\n     * @hide\n     ",
    "links" : [ "#getMaxBytesOverMobile(Context)" ]
  }, {
    "name" : "public static Long getMaxBytesOverMobile(Context context)",
    "returnType" : "Long",
    "comment" : "\n     * Returns maximum size, in bytes, of downloads that may go over a mobile connection; or null if\n     * there's no limit\n     *\n     * @param context the {@link Context} to use for accessing the {@link ContentResolver}\n     * @return maximum size, in bytes, of downloads that may go over a mobile connection; or null if\n     * there's no limit\n     ",
    "links" : [ "android.content.Context", "android.content.ContentResolver" ]
  }, {
    "name" : "public boolean rename(Context context, long id, String displayName)",
    "returnType" : "boolean",
    "comment" : "\n     * Rename the given download if the download has completed\n     *\n     * @param context the {@link Context} to use in case need to update MediaProvider\n     * @param id the downloaded id\n     * @param displayName the new name to rename to\n     * @return true if rename was successful, false otherwise\n     * @hide\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public static Long getRecommendedMaxBytesOverMobile(Context context)",
    "returnType" : "Long",
    "comment" : "\n     * Returns recommended maximum size, in bytes, of downloads that may go over a mobile\n     * connection; or null if there's no recommended limit.  The user will have the option to bypass\n     * this limit.\n     *\n     * @param context the {@link Context} to use for accessing the {@link ContentResolver}\n     * @return recommended maximum size, in bytes, of downloads that may go over a mobile\n     * connection; or null if there's no recommended limit.\n     ",
    "links" : [ "android.content.Context", "android.content.ContentResolver" ]
  }, {
    "name" : "public static boolean isActiveNetworkExpensive(Context context)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long getActiveNetworkWarningBytes(Context context)",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification)",
    "returnType" : "long",
    "comment" : "\n     * Adds a file to the downloads database system, so it could appear in Downloads App\n     * (and thus become eligible for management by the Downloads App).\n     * <p>\n     * It is helpful to make the file scannable by MediaScanner by setting the param\n     * isMediaScannerScannable to true. It makes the file visible in media managing\n     * applications such as Gallery App, which could be a useful purpose of using this API.\n     *\n     * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,\n     * {@code path} must be within directories owned by the application\n     * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under\n     * the legacy storage model (see\n     * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage\n     * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level\n     * Downloads directory (as returned by\n     * {@link Environment#getExternalStoragePublicDirectory(String)} with\n     * {@link Environment#DIRECTORY_DOWNLOADS}).\n     *\n     * @param title the title that would appear for this file in Downloads App.\n     * @param description the description that would appear for this file in Downloads App.\n     * @param isMediaScannerScannable true if the file is to be scanned by MediaScanner. Files\n     * scanned by MediaScanner appear in the applications used to view media (for example,\n     * Gallery app).\n     * @param mimeType mimetype of the file.\n     * @param path absolute pathname to the file. The file should be world-readable, so that it can\n     * be managed by the Downloads App and any other app that is used to read it (for example,\n     * Gallery app to display the file, if the file contents represent a video/image).\n     * @param length length of the downloaded file\n     * @param showNotification true if a notification is to be sent, false otherwise\n     * @return  an ID for the download entry added to the downloads app, unique across the system\n     * This ID is used to make future calls related to this download.\n     *\n     * @deprecated Apps should instead contribute files to\n     * {@link android.provider.MediaStore.Downloads} collection to make them available to user\n     * as part of Downloads.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "android.provider.MediaStore.Downloads", "android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorageandroid", "android.content.Context#getExternalFilesDir(String)", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS" ]
  }, {
    "name" : "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, Uri uri, Uri referer)",
    "returnType" : "long",
    "comment" : "\n     * Adds a file to the downloads database system, so it could appear in Downloads App\n     * (and thus become eligible for management by the Downloads App).\n     * <p>\n     * It is helpful to make the file scannable by MediaScanner by setting the param\n     * isMediaScannerScannable to true. It makes the file visible in media managing\n     * applications such as Gallery App, which could be a useful purpose of using this API.\n     *\n     * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,\n     * {@code path} must be within directories owned by the application\n     * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under\n     * the legacy storage model (see\n     * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage\n     * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level\n     * Downloads directory (as returned by\n     * {@link Environment#getExternalStoragePublicDirectory(String)} with\n     * {@link Environment#DIRECTORY_DOWNLOADS}).\n     *\n     * @param title the title that would appear for this file in Downloads App.\n     * @param description the description that would appear for this file in Downloads App.\n     * @param isMediaScannerScannable true if the file is to be scanned by MediaScanner. Files\n     * scanned by MediaScanner appear in the applications used to view media (for example,\n     * Gallery app).\n     * @param mimeType mimetype of the file.\n     * @param path absolute pathname to the file. The file should be world-readable, so that it can\n     * be managed by the Downloads App and any other app that is used to read it (for example,\n     * Gallery app to display the file, if the file contents represent a video/image).\n     * @param length length of the downloaded file\n     * @param showNotification true if a notification is to be sent, false otherwise\n     * @param uri the original HTTP URI of the download\n     * @param referer the HTTP Referer for the download\n     * @return  an ID for the download entry added to the downloads app, unique across the system\n     * This ID is used to make future calls related to this download.\n     *\n     * @deprecated Apps should instead contribute files to\n     * {@link android.provider.MediaStore.Downloads} collection to make them available to user\n     * as part of Downloads.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "android.provider.MediaStore.Downloads", "android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorageandroid", "android.content.Context#getExternalFilesDir(String)", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS" ]
  }, {
    "name" : "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, boolean allowWrite)",
    "returnType" : "long",
    "comment" : "\n     * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,\n     * {@code path} must be within directories owned by the application\n     * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under\n     * the legacy storage model (see\n     * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage\n     * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level\n     * Downloads directory (as returned by\n     * {@link Environment#getExternalStoragePublicDirectory(String)} with\n     * {@link Environment#DIRECTORY_DOWNLOADS}).\n     *\n     * @deprecated Apps should instead contribute files to\n     * {@link android.provider.MediaStore.Downloads} collection to make them available to user\n     * as part of Downloads.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "android.provider.MediaStore.Downloads", "android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorageandroid", "android.content.Context#getExternalFilesDir(String)", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS" ]
  }, {
    "name" : "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, boolean allowWrite, Uri uri, Uri referer)",
    "returnType" : "long",
    "comment" : "\n     * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,\n     * {@code path} must be within directories owned by the application\n     * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under\n     * the legacy storage model (see\n     * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage\n     * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level\n     * Downloads directory (as returned by\n     * {@link Environment#getExternalStoragePublicDirectory(String)} with\n     * {@link Environment#DIRECTORY_DOWNLOADS}).\n     *\n     * {@hide}\n     *\n     * @deprecated Apps should instead contribute files to\n     * {@link android.provider.MediaStore.Downloads} collection to make them available to user\n     * as part of Downloads.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "android.provider.MediaStore.Downloads", "android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorageandroid", "android.content.Context#getExternalFilesDir(String)", "android.os.Environment#getExternalStoragePublicDirectory(String)", "android.os.Environment#DIRECTORY_DOWNLOADS" ]
  }, {
    "name" : "private static String resolveMimeType(@NonNull File file)",
    "returnType" : "String",
    "comment" : "\n     * Shamelessly borrowed from\n     * {@code packages/providers/MediaProvider/src/com/android/providers/media/util/MimeUtils.java}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String extractDisplayName(@Nullable String data)",
    "returnType" : "String",
    "comment" : "\n     * Shamelessly borrowed from\n     * {@code packages/providers/MediaProvider/src/com/android/providers/media/util/FileUtils.java}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String extractFileExtension(@Nullable String data)",
    "returnType" : "String",
    "comment" : "\n     * Shamelessly borrowed from\n     * {@code packages/providers/MediaProvider/src/com/android/providers/media/util/FileUtils.java}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void validateArgumentIsNonEmpty(String paramName, String val)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri getDownloadUri(long id)",
    "returnType" : "Uri",
    "comment" : "\n     * Get the DownloadProvider URI for the download with the given ID.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getWhereClauseForIds(long[] ids)",
    "returnType" : "String",
    "comment" : "\n     * Get a parameterized SQL WHERE clause to select a bunch of IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String[] getWhereArgsForIds(long[] ids)",
    "returnType" : "String[]",
    "comment" : "\n     * Get the selection args for a clause returned by {@link #getWhereClauseForIds(long[])}.\n     ",
    "links" : [ "#getWhereClauseForIds(long" ]
  }, {
    "name" : " static String[] getWhereArgsForIds(long[] ids, String[] args)",
    "returnType" : "String[]",
    "comment" : "\n     * Get selection args for a clause returned by {@link #getWhereClauseForIds(long[])}\n     * and write it to the supplied args array.\n     ",
    "links" : [ "#getWhereClauseForIds(long" ]
  } ],
  "methodNames" : [ "public void setAccessAllDownloads(boolean accessAllDownloads)", "public void setAccessFilename(boolean accessFilename)", "public void onMediaStoreDownloadsDeleted(@NonNull LongSparseArray<String> idToMime)", "public long enqueue(Request request)", "public int markRowDeleted(long... ids)", "public int remove(long... ids)", "public Cursor query(Query query)", "public Cursor query(Query query, String[] projection)", "public ParcelFileDescriptor openDownloadedFile(long id) throws FileNotFoundException", "public Uri getUriForDownloadedFile(long id)", "public String getMimeTypeForDownloadedFile(long id)", "public void restartDownload(long... ids)", "public void forceDownload(long... ids)", "public static Long getMaxBytesOverMobile(Context context)", "public boolean rename(Context context, long id, String displayName)", "public static Long getRecommendedMaxBytesOverMobile(Context context)", "public static boolean isActiveNetworkExpensive(Context context)", "public static long getActiveNetworkWarningBytes(Context context)", "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification)", "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, Uri uri, Uri referer)", "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, boolean allowWrite)", "public long addCompletedDownload(String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, boolean allowWrite, Uri uri, Uri referer)", "private static String resolveMimeType(@NonNull File file)", "private static String extractDisplayName(@Nullable String data)", "private static String extractFileExtension(@Nullable String data)", "private static void validateArgumentIsNonEmpty(String paramName, String val)", "public Uri getDownloadUri(long id)", " static String getWhereClauseForIds(long[] ids)", " static String[] getWhereArgsForIds(long[] ids)", " static String[] getWhereArgsForIds(long[] ids, String[] args)" ],
  "variableNames" : [ "COLUMN_ID", "COLUMN_TITLE", "COLUMN_DESCRIPTION", "COLUMN_URI", "COLUMN_MEDIA_TYPE", "COLUMN_TOTAL_SIZE_BYTES", "COLUMN_LOCAL_URI", "COLUMN_LOCAL_FILENAME", "COLUMN_STATUS", "COLUMN_FILE_NAME_HINT", "COLUMN_REASON", "COLUMN_BYTES_DOWNLOADED_SO_FAR", "COLUMN_LAST_MODIFIED_TIMESTAMP", "COLUMN_MEDIAPROVIDER_URI", "COLUMN_DESTINATION", "COLUMN_MEDIASTORE_URI", "COLUMN_ALLOW_WRITE", "STATUS_PENDING", "STATUS_RUNNING", "STATUS_PAUSED", "STATUS_SUCCESSFUL", "STATUS_FAILED", "ERROR_UNKNOWN", "ERROR_FILE_ERROR", "ERROR_UNHANDLED_HTTP_CODE", "ERROR_HTTP_DATA_ERROR", "ERROR_TOO_MANY_REDIRECTS", "ERROR_INSUFFICIENT_SPACE", "ERROR_DEVICE_NOT_FOUND", "ERROR_CANNOT_RESUME", "ERROR_FILE_ALREADY_EXISTS", "ERROR_BLOCKED", "PAUSED_WAITING_TO_RETRY", "PAUSED_WAITING_FOR_NETWORK", "PAUSED_QUEUED_FOR_WIFI", "PAUSED_UNKNOWN", "ACTION_DOWNLOAD_COMPLETE", "ACTION_NOTIFICATION_CLICKED", "ACTION_VIEW_DOWNLOADS", "INTENT_EXTRAS_SORT_BY_SIZE", "EXTRA_DOWNLOAD_ID", "EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS", "ACTION_DOWNLOAD_COMPLETED", "UNDERLYING_COLUMNS", "mResolver", "mPackageName", "mBaseUri", "mAccessFilename", "NON_DOWNLOADMANAGER_DOWNLOAD" ]
}