{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/lights/Light.java",
  "packageName" : "android.hardware.lights",
  "className" : "Light",
  "comment" : "\n * Represents a logical light on the device.\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LIGHT_TYPE_MICROPHONE",
    "type" : "int",
    "comment" : " Type for lights that indicate microphone usage ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_TYPE_CAMERA",
    "type" : "int",
    "comment" : " Type for lights that indicate camera usage\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_TYPE_INPUT",
    "type" : "int",
    "comment" : "\n     * Type for lights that indicate a monochrome color LED light.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_TYPE_PLAYER_ID",
    "type" : "int",
    "comment" : "\n     * Type for lights that indicate a group of LED lights representing player id.\n     * Player id lights normally present on game controllers are lights that consist of a row of\n     * LEDs.\n     * During multi-player game, the player id for the current game controller is represented by\n     * one of the LED that is lit according to its position in the row.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_TYPE_KEYBOARD_BACKLIGHT",
    "type" : "int",
    "comment" : "\n     * Type for lights that illuminate keyboard keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_TYPE_KEYBOARD_MIC_MUTE",
    "type" : "int",
    "comment" : "\n     * Type for keyboard microphone mute light.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_CAPABILITY_BRIGHTNESS",
    "type" : "int",
    "comment" : "\n     * Capability for lights that could adjust its LED brightness. If the capability is not present\n     * the LED can only be turned either on or off.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_CAPABILITY_COLOR_RGB",
    "type" : "int",
    "comment" : "\n     * Capability for lights that have red, green and blue LEDs to control the light's color.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGHT_CAPABILITY_RGB",
    "type" : "int",
    "comment" : "\n     * Capability for lights that have red, green and blue LEDs to control the light's color.\n     *\n     * @deprecated Wrong int based flag with value 0. Use capability flag {@code\n     * LIGHT_CAPABILITY_COLOR_RGB} instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrdinal",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferredBrightnessLevels",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Light>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the id of the light.\n     *\n     * <p>This is an opaque value used as a unique identifier for the light.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the light.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOrdinal()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ordinal of the light.\n     *\n     * <p>This is a sort key that represents the physical order of lights on the device with the\n     * same type. In the case of multiple lights arranged in a line, for example, the ordinals\n     * could be [1, 2, 3, 4], or [0, 10, 20, 30], or any other values that have the same sort order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the logical type of the light.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Returns the capabilities of the light.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBrightnessControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the light has led brightness control.\n     *\n     * @return True if the hardware can control the led brightness, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasRgbControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the light has RGB led control.\n     *\n     * @return True if the hardware can control the RGB led, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getPreferredBrightnessLevels()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns preferred brightness levels for the light which will be used when user\n     * increase/decrease brightness levels for the light (currently only used for Keyboard\n     * backlight control using backlight up/down keys).\n     *\n     * The values in the preferred brightness level array are in the range [0, 255].\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public String toString()", "public int getId()", "public String getName()", "public int getOrdinal()", "public int getType()", "public int getCapabilities()", "public boolean hasBrightnessControl()", "public boolean hasRgbControl()", "public int[] getPreferredBrightnessLevels()" ],
  "variableNames" : [ "LIGHT_TYPE_MICROPHONE", "LIGHT_TYPE_CAMERA", "LIGHT_TYPE_INPUT", "LIGHT_TYPE_PLAYER_ID", "LIGHT_TYPE_KEYBOARD_BACKLIGHT", "LIGHT_TYPE_KEYBOARD_MIC_MUTE", "LIGHT_CAPABILITY_BRIGHTNESS", "LIGHT_CAPABILITY_COLOR_RGB", "LIGHT_CAPABILITY_RGB", "mId", "mName", "mOrdinal", "mType", "mCapabilities", "mPreferredBrightnessLevels", "CREATOR" ]
}