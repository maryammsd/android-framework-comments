{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/traversal/NodeIterator.java",
  "packageName" : "org.w3c.dom.traversal",
  "className" : "NodeIterator",
  "comment" : "\n * <code>NodeIterators</code> are used to step through a set of nodes, e.g.\n * the set of nodes in a <code>NodeList</code>, the document subtree\n * governed by a particular <code>Node</code>, the results of a query, or\n * any other set of nodes. The set of nodes to be iterated is determined by\n * the implementation of the <code>NodeIterator</code>. DOM Level 2\n * specifies a single <code>NodeIterator</code> implementation for\n * document-order traversal of a document subtree. Instances of these\n * <code>NodeIterators</code> are created by calling\n * <code>DocumentTraversal</code><code>.createNodeIterator()</code>.\n * <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.\n * @since DOM Level 2\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Node getRoot()",
    "returnType" : "Node",
    "comment" : "\n     * The root node of the <code>NodeIterator</code>, as specified when it\n     * was created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n     * This attribute determines which node types are presented via the\n     * <code>NodeIterator</code>. The available set of constants is defined\n     * in the <code>NodeFilter</code> interface.  Nodes not accepted by\n     * <code>whatToShow</code> will be skipped, but their children may still\n     * be considered. Note that this skip takes precedence over the filter,\n     * if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NodeFilter getFilter()",
    "returnType" : "NodeFilter",
    "comment" : "\n     * The <code>NodeFilter</code> used to screen nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : "\n     *  The value of this flag determines whether the children of entity\n     * reference nodes are visible to the <code>NodeIterator</code>. If\n     * false, these children  and their descendants will be rejected. Note\n     * that this rejection takes precedence over <code>whatToShow</code> and\n     * the filter. Also note that this is currently the only situation where\n     * <code>NodeIterators</code> may reject a complete subtree rather than\n     * skipping individual nodes.\n     * <br>\n     * <br> To produce a view of the document that has entity references\n     * expanded and does not expose the entity reference node itself, use\n     * the <code>whatToShow</code> flags to hide the entity reference node\n     * and set <code>expandEntityReferences</code> to true when creating the\n     * <code>NodeIterator</code>. To produce a view of the document that has\n     * entity reference nodes but no entity expansion, use the\n     * <code>whatToShow</code> flags to show the entity reference node and\n     * set <code>expandEntityReferences</code> to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node nextNode() throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Returns the next node in the set and advances the position of the\n     * <code>NodeIterator</code> in the set. After a\n     * <code>NodeIterator</code> is created, the first call to\n     * <code>nextNode()</code> returns the first node in the set.\n     * @return The next <code>Node</code> in the set being iterated over, or\n     *   <code>null</code> if there are no more members in that set.\n     * @exception DOMException\n     *   INVALID_STATE_ERR: Raised if this method is called after the\n     *   <code>detach</code> method was invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node previousNode() throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Returns the previous node in the set and moves the position of the\n     * <code>NodeIterator</code> backwards in the set.\n     * @return The previous <code>Node</code> in the set being iterated over,\n     *   or <code>null</code> if there are no more members in that set.\n     * @exception DOMException\n     *   INVALID_STATE_ERR: Raised if this method is called after the\n     *   <code>detach</code> method was invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n     * Detaches the <code>NodeIterator</code> from the set which it iterated\n     * over, releasing any computational resources and placing the\n     * <code>NodeIterator</code> in the INVALID state. After\n     * <code>detach</code> has been invoked, calls to <code>nextNode</code>\n     * or <code>previousNode</code> will raise the exception\n     * INVALID_STATE_ERR.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node getRoot()", "public int getWhatToShow()", "public NodeFilter getFilter()", "public boolean getExpandEntityReferences()", "public Node nextNode() throws DOMException", "public Node previousNode() throws DOMException", "public void detach()" ],
  "variableNames" : [ ]
}