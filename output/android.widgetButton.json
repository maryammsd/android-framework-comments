{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Button.java",
  "packageName" : "android.widget",
  "className" : "Button",
  "comment" : "\n * A user interface element the user can tap or click to perform an action.\n *\n * <p>To display a button in an activity, add a button to the activity's layout XML file:</p>\n *\n * <pre>\n * &lt;Button\n *     android:id=\"@+id/button_id\"\n *     android:layout_height=\"wrap_content\"\n *     android:layout_width=\"wrap_content\"\n *     android:text=\"@string/self_destruct\" /&gt;</pre>\n *\n * <p>To specify an action when the button is pressed, set a click\n * listener on the button object in the corresponding activity code:</p>\n *\n * <pre>\n * public class MyActivity extends Activity {\n *     protected void onCreate(Bundle savedInstanceState) {\n *         super.onCreate(savedInstanceState);\n *\n *         setContentView(R.layout.content_layout_id);\n *\n *         final Button button = findViewById(R.id.button_id);\n *         button.setOnClickListener(new View.OnClickListener() {\n *             public void onClick(View v) {\n *                 // Code here executes on main thread after user presses button\n *             }\n *         });\n *     }\n * }</pre>\n *\n * <p>The above snippet creates an instance of {@link android.view.View.OnClickListener} and wires\n * the listener to the button using\n * {@link #setOnClickListener setOnClickListener(View.OnClickListener)}.\n * As a result, the system executes the code you write in {@code onClick(View)} after the\n * user presses the button.</p>\n *\n * <p class=\"note\">The system executes the code in {@code onClick} on the\n * <a href=\"{@docRoot}guide/components/processes-and-threads.html#Threads\">main thread</a>.\n * This means your onClick code must execute quickly to avoid delaying your app's response\n * to further user actions.  See\n * <a href=\"{@docRoot}training/articles/perf-anr.html\">Keeping Your App Responsive</a>\n * for more details.</p>\n *\n * <p>Every button is styled using the system's default button background, which is often\n * different from one version of the platform to another. If you are not satisfied with the\n * default button style, you can customize it. For more details and code samples, see the\n * <a href=\"{@docRoot}guide/topics/ui/controls/button.html#Style\">Styling Your Button</a>\n * guide.</p>\n *\n * <p>For all XML style attributes available on Button see\n * {@link android.R.styleable#Button Button Attributes},\n * {@link android.R.styleable#TextView TextView Attributes},\n * {@link android.R.styleable#View View Attributes}.  See the\n * <a href=\"{@docRoot}guide/topics/ui/themes.html#ApplyingStyles\">Styles and Themes</a>\n * guide to learn how to implement and organize overrides to style-related attributes.</p>\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)",
    "returnType" : "PointerIcon",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public CharSequence getAccessibilityClassName()", "public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)" ]
}