{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/KeyguardManager.java",
  "packageName" : "android.app",
  "className" : "KeyguardManager",
  "comment" : "\n * Class that can be used to lock and unlock the keyguard. The\n * actual class to control the keyguard locking is\n * {@link android.app.KeyguardManager.KeyguardLock}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWM",
    "type" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAm",
    "type" : "IActivityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustManager",
    "type" : "ITrustManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotificationManager",
    "type" : "INotificationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONFIRM_DEVICE_CREDENTIAL",
    "type" : "String",
    "comment" : "\n     * Intent used to prompt user for device credentials.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONFIRM_DEVICE_CREDENTIAL_WITH_USER",
    "type" : "String",
    "comment" : "\n     * Intent used to prompt user for device credentials.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONFIRM_FRP_CREDENTIAL",
    "type" : "String",
    "comment" : "\n     * Intent used to prompt user for factory reset credentials.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TITLE",
    "type" : "String",
    "comment" : "\n     * A CharSequence dialog title to show to the user when used with a\n     * {@link #ACTION_CONFIRM_DEVICE_CREDENTIAL}.\n     * @hide\n     ",
    "links" : [ "#ACTION_CONFIRM_DEVICE_CREDENTIAL" ]
  }, {
    "name" : "EXTRA_DESCRIPTION",
    "type" : "String",
    "comment" : "\n     * A CharSequence description to show to the user when used with\n     * {@link #ACTION_CONFIRM_DEVICE_CREDENTIAL}.\n     * @hide\n     ",
    "links" : [ "#ACTION_CONFIRM_DEVICE_CREDENTIAL" ]
  }, {
    "name" : "EXTRA_ALTERNATE_BUTTON_LABEL",
    "type" : "String",
    "comment" : "\n     * A CharSequence description to show to the user on the alternate button when used with\n     * {@link #ACTION_CONFIRM_FRP_CREDENTIAL}.\n     * @hide\n     ",
    "links" : [ "#ACTION_CONFIRM_FRP_CREDENTIAL" ]
  }, {
    "name" : "RESULT_ALTERNATE",
    "type" : "int",
    "comment" : "\n     * Result code returned by the activity started by\n     * {@link #createConfirmFactoryResetCredentialIntent} indicating that the user clicked the\n     * alternate button.\n     *\n     * @hide\n     ",
    "links" : [ "#createConfirmFactoryResetCredentialIntent" ]
  }, {
    "name" : "EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS",
    "type" : "String",
    "comment" : "\n     *\n     * If this is set, check device policy for allowed biometrics when the user is authenticating.\n     * This should only be used in the context of managed profiles.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Intent createConfirmDeviceCredentialIntent(CharSequence title, CharSequence description)",
    "returnType" : "Intent",
    "comment" : "\n     * Get an intent to prompt the user to confirm credentials (pin, pattern, password or biometrics\n     * if enrolled) for the current user of the device. The caller is expected to launch this\n     * activity using {@link android.app.Activity#startActivityForResult(Intent, int)} and check for\n     * {@link android.app.Activity#RESULT_OK} if the user successfully completes the challenge.\n     *\n     * @return the intent for launching the activity or null if no password is required.\n     * @deprecated see BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)\n     ",
    "links" : [ "android.app.Activity#startActivityForResult", "android.app.Activity#RESULT_OK" ]
  }, {
    "name" : "public Intent createConfirmDeviceCredentialIntent(CharSequence title, CharSequence description, int userId)",
    "returnType" : "Intent",
    "comment" : "\n     * Get an intent to prompt the user to confirm credentials (pin, pattern or password)\n     * for the given user. The caller is expected to launch this activity using\n     * {@link android.app.Activity#startActivityForResult(Intent, int)} and check for\n     * {@link android.app.Activity#RESULT_OK} if the user successfully completes the challenge.\n     *\n     * @return the intent for launching the activity or null if no password is required.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.Activity#startActivityForResult", "android.app.Activity#RESULT_OK" ]
  }, {
    "name" : "public Intent createConfirmDeviceCredentialIntent(CharSequence title, CharSequence description, int userId, boolean disallowBiometricsIfPolicyExists)",
    "returnType" : "Intent",
    "comment" : "\n     * Get an intent to prompt the user to confirm credentials (pin, pattern or password)\n     * for the given user. The caller is expected to launch this activity using\n     * {@link android.app.Activity#startActivityForResult(Intent, int)} and check for\n     * {@link android.app.Activity#RESULT_OK} if the user successfully completes the challenge.\n     *\n     * @param disallowBiometricsIfPolicyExists If true check if the Device Policy Manager has\n     * disabled biometrics on the device. If biometrics are disabled, fall back to PIN/pattern/pass.\n     *\n     * @return the intent for launching the activity or null if no password is required.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.Activity#startActivityForResult", "android.app.Activity#RESULT_OK" ]
  }, {
    "name" : "public Intent createConfirmFactoryResetCredentialIntent(CharSequence title, CharSequence description, CharSequence alternateButtonLabel)",
    "returnType" : "Intent",
    "comment" : "\n     * Get an intent to prompt the user to confirm credentials (pin, pattern or password)\n     * for the previous owner of the device. The caller is expected to launch this activity using\n     * {@link android.app.Activity#startActivityForResult(Intent, int)} and check for\n     * {@link android.app.Activity#RESULT_OK} if the user successfully completes the challenge.\n     *\n     * @param alternateButtonLabel if not empty, a button is provided with the given label. Upon\n     *                             clicking this button, the activity returns\n     *                             {@link #RESULT_ALTERNATE}\n     *\n     * @return the intent for launching the activity or null if the previous owner of the device\n     *         did not set a credential.\n     * @throws UnsupportedOperationException if the device does not support factory reset\n     *                                       credentials\n     * @throws IllegalStateException if the device has already been provisioned\n     * @hide\n     ",
    "links" : [ "android.app.Activity#startActivityForResult", "android.app.Activity#RESULT_OK", "#RESULT_ALTERNATE" ]
  }, {
    "name" : "public void setPrivateNotificationsAllowed(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether notifications can be shown atop a securely locked screen in their full\n     * private form (same as when the device is unlocked).\n     *\n     * <p>Other sources like the DevicePolicyManger and Settings app can modify this configuration.\n     * The result is that private notifications are only shown if all sources allow it.\n     *\n     * @param allow secure notifications can be shown if {@code true},\n     * secure notifications cannot be shown if {@code false}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPrivateNotificationsAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether notifications can be shown atop a securely locked screen in their full\n     * private form (same as when the device is unlocked).\n     *\n     * @return {@code true} if secure notifications can be shown, {@code false} otherwise.\n     * By default, private notifications are allowed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getSettingsPackageForIntent(Intent intent)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeyguardLock newKeyguardLock(String tag)",
    "returnType" : "KeyguardLock",
    "comment" : "\n     * Enables you to lock or unlock the keyguard. Get an instance of this class by\n     * calling {@link android.content.Context#getSystemService(java.lang.String) Context.getSystemService()}.\n     * This class is wrapped by {@link android.app.KeyguardManager KeyguardManager}.\n     * @param tag A tag that informally identifies who you are (for debugging who\n     *   is disabling the keyguard).\n     *\n     * @return A {@link KeyguardLock} handle to use to disable and reenable the\n     *   keyguard.\n     *\n     * @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}\n     *   and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}\n     *   instead; this allows you to seamlessly hide the keyguard as your application\n     *   moves in and out of the foreground and does not require that any special\n     *   permissions be requested.\n     ",
    "links" : [ "android.content.Context#getSystemService", "android.app.KeyguardManager", "KeyguardLock", "LayoutParams#FLAG_DISMISS_KEYGUARD", "LayoutParams#FLAG_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "public boolean isKeyguardLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the keyguard is currently locked.\n     *\n     * @return true if keyguard is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isKeyguardSecure()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the keyguard is secured by a PIN, pattern or password or a SIM card\n     * is currently locked.\n     *\n     * <p>See also {@link #isDeviceSecure()} which ignores SIM locked states.\n     *\n     * @return true if a PIN, pattern or password is set or a SIM card is locked.\n     ",
    "links" : [ "#isDeviceSecure" ]
  }, {
    "name" : "public boolean inKeyguardRestrictedInputMode()",
    "returnType" : "boolean",
    "comment" : "\n     * If keyguard screen is showing or in restricted key input mode (i.e. in\n     * keyguard password emergency screen). When in such mode, certain keys,\n     * such as the Home key and the right soft keys, don't work.\n     *\n     * @return true if in keyguard restricted input mode.\n     * @deprecated Use {@link #isKeyguardLocked()} instead.\n     ",
    "links" : [ "#isKeyguardLocked" ]
  }, {
    "name" : "public boolean isDeviceLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the device is currently locked and requires a PIN, pattern or\n     * password to unlock.\n     *\n     * @return true if unlocking the device currently requires a PIN, pattern or\n     * password.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceLocked(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Per-user version of {@link #isDeviceLocked()}.\n     *\n     * @hide\n     ",
    "links" : [ "#isDeviceLocked" ]
  }, {
    "name" : "public boolean isDeviceSecure()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the device is secured with a PIN, pattern or\n     * password.\n     *\n     * <p>See also {@link #isKeyguardSecure} which treats SIM locked states as secure.\n     *\n     * @return true if a PIN, pattern or password was set.\n     ",
    "links" : [ "#isKeyguardSecure" ]
  }, {
    "name" : "public boolean isDeviceSecure(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Per-user version of {@link #isDeviceSecure()}.\n     *\n     * @hide\n     ",
    "links" : [ "#isDeviceSecure" ]
  }, {
    "name" : "public void requestDismissKeyguard(@NonNull Activity activity, @Nullable KeyguardDismissCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * If the device is currently locked (see {@link #isKeyguardLocked()}, requests the Keyguard to\n     * be dismissed.\n     * <p>\n     * If the Keyguard is not secure or the device is currently in a trusted state, calling this\n     * method will immediately dismiss the Keyguard without any user interaction.\n     * <p>\n     * If the Keyguard is secure and the device is not in a trusted state, this will bring up the\n     * UI so the user can enter their credentials.\n     * <p>\n     * If the value set for the {@link Activity} attr {@link android.R.attr#turnScreenOn} is true,\n     * the screen will turn on when the keyguard is dismissed.\n     *\n     * @param activity The activity requesting the dismissal. The activity must be either visible\n     *                 by using {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED} or must be in a state in\n     *                 which it would be visible if Keyguard would not be hiding it. If that's not\n     *                 the case, the request will fail immediately and\n     *                 {@link KeyguardDismissCallback#onDismissError} will be invoked.\n     * @param callback The callback to be called if the request to dismiss Keyguard was successful\n     *                 or {@code null} if the caller isn't interested in knowing the result. The\n     *                 callback will not be invoked if the activity was destroyed before the\n     *                 callback was received.\n     ",
    "links" : [ "#isKeyguardLocked", "Activity", "android.R.attr#turnScreenOn", "LayoutParams#FLAG_SHOW_WHEN_LOCKED", "KeyguardDismissCallback#onDismissError" ]
  }, {
    "name" : "public void requestDismissKeyguard(@NonNull Activity activity, @Nullable CharSequence message, @Nullable KeyguardDismissCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * If the device is currently locked (see {@link #isKeyguardLocked()}, requests the Keyguard to\n     * be dismissed.\n     * <p>\n     * If the Keyguard is not secure or the device is currently in a trusted state, calling this\n     * method will immediately dismiss the Keyguard without any user interaction.\n     * <p>\n     * If the Keyguard is secure and the device is not in a trusted state, this will bring up the\n     * UI so the user can enter their credentials.\n     * <p>\n     * If the value set for the {@link Activity} attr {@link android.R.attr#turnScreenOn} is true,\n     * the screen will turn on when the keyguard is dismissed.\n     *\n     * @param activity The activity requesting the dismissal. The activity must be either visible\n     *                 by using {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED} or must be in a state in\n     *                 which it would be visible if Keyguard would not be hiding it. If that's not\n     *                 the case, the request will fail immediately and\n     *                 {@link KeyguardDismissCallback#onDismissError} will be invoked.\n     * @param message  A message that will be shown in the keyguard explaining why the user\n     *                 would want to dismiss it.\n     * @param callback The callback to be called if the request to dismiss Keyguard was successful\n     *                 or {@code null} if the caller isn't interested in knowing the result. The\n     *                 callback will not be invoked if the activity was destroyed before the\n     *                 callback was received.\n     * @hide\n     ",
    "links" : [ "#isKeyguardLocked", "Activity", "android.R.attr#turnScreenOn", "LayoutParams#FLAG_SHOW_WHEN_LOCKED", "KeyguardDismissCallback#onDismissError" ]
  }, {
    "name" : "public void exitKeyguardSecurely(final OnKeyguardExitResult callback)",
    "returnType" : "void",
    "comment" : "\n     * Exit the keyguard securely.  The use case for this api is that, after\n     * disabling the keyguard, your app, which was granted permission to\n     * disable the keyguard and show a limited amount of information deemed\n     * safe without the user getting past the keyguard, needs to navigate to\n     * something that is not safe to view without getting past the keyguard.\n     *\n     * This will, if the keyguard is secure, bring up the unlock screen of\n     * the keyguard.\n     *\n     * @param callback Lets you know whether the operation was successful and\n     *   it is safe to launch anything that would normally be considered safe\n     *   once the user has gotten past the keyguard.\n\n     * @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}\n     *   and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}\n     *   instead; this allows you to seamlessly hide the keyguard as your application\n     *   moves in and out of the foreground and does not require that any special\n     *   permissions be requested.\n     ",
    "links" : [ "LayoutParams#FLAG_DISMISS_KEYGUARD", "LayoutParams#FLAG_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "private boolean checkInitialLockMethodUsage()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValidLockPasswordComplexity(@LockTypes int lockType, @NonNull byte[] password, @PasswordComplexity int complexity)",
    "returnType" : "boolean",
    "comment" : "\n    * Determine if a given password is valid based off its lock type and expected complexity level.\n    *\n    * @param lockType - type of lock as specified in {@link LockTypes}\n    * @param password - password to validate; this has the same encoding\n    *        as the output of String#getBytes\n    * @param complexity - complexity level imposed by the requester\n    *        as defined in {@code DevicePolicyManager.PasswordComplexity}\n    * @return true if the password is valid, false otherwise\n    * @hide\n    ",
    "links" : [ "LockTypes" ]
  }, {
    "name" : "public int getMinLockLength(boolean isPin, @PasswordComplexity int complexity)",
    "returnType" : "int",
    "comment" : "\n    * Determine the minimum allowable length for a lock type for a given complexity level.\n    *\n    * @param isPin - whether this is a PIN-type password (only digits)\n    * @param complexity - complexity level imposed by the requester\n    *        as defined in {@code DevicePolicyManager.PasswordComplexity}\n    * @return minimum allowable password length\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean setLock(@LockTypes int lockType, @NonNull byte[] password, @PasswordComplexity int complexity)",
    "returnType" : "boolean",
    "comment" : "\n    * Set the lockscreen password after validating against its expected complexity level.\n    *\n    * @param lockType - type of lock as specified in {@link LockTypes}\n    * @param password - password to validate; this has the same encoding\n    *        as the output of String#getBytes\n    * @param complexity - complexity level imposed by the requester\n    *        as defined in {@code DevicePolicyManager.PasswordComplexity}\n    * @return true if the lock is successfully set, false otherwise\n    * @hide\n    ",
    "links" : [ "LockTypes" ]
  } ],
  "variableNames" : [ "TAG", "mContext", "mWM", "mAm", "mTrustManager", "mNotificationManager", "ACTION_CONFIRM_DEVICE_CREDENTIAL", "ACTION_CONFIRM_DEVICE_CREDENTIAL_WITH_USER", "ACTION_CONFIRM_FRP_CREDENTIAL", "EXTRA_TITLE", "EXTRA_DESCRIPTION", "EXTRA_ALTERNATE_BUTTON_LABEL", "RESULT_ALTERNATE", "EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS" ],
  "methodNames" : [ "public Intent createConfirmDeviceCredentialIntent(CharSequence title, CharSequence description)", "public Intent createConfirmDeviceCredentialIntent(CharSequence title, CharSequence description, int userId)", "public Intent createConfirmDeviceCredentialIntent(CharSequence title, CharSequence description, int userId, boolean disallowBiometricsIfPolicyExists)", "public Intent createConfirmFactoryResetCredentialIntent(CharSequence title, CharSequence description, CharSequence alternateButtonLabel)", "public void setPrivateNotificationsAllowed(boolean allow)", "public boolean getPrivateNotificationsAllowed()", "private String getSettingsPackageForIntent(Intent intent)", "public KeyguardLock newKeyguardLock(String tag)", "public boolean isKeyguardLocked()", "public boolean isKeyguardSecure()", "public boolean inKeyguardRestrictedInputMode()", "public boolean isDeviceLocked()", "public boolean isDeviceLocked(int userId)", "public boolean isDeviceSecure()", "public boolean isDeviceSecure(int userId)", "public void requestDismissKeyguard(@NonNull Activity activity, @Nullable KeyguardDismissCallback callback)", "public void requestDismissKeyguard(@NonNull Activity activity, @Nullable CharSequence message, @Nullable KeyguardDismissCallback callback)", "public void exitKeyguardSecurely(final OnKeyguardExitResult callback)", "private boolean checkInitialLockMethodUsage()", "public boolean isValidLockPasswordComplexity(@LockTypes int lockType, @NonNull byte[] password, @PasswordComplexity int complexity)", "public int getMinLockLength(boolean isPin, @PasswordComplexity int complexity)", "public boolean setLock(@LockTypes int lockType, @NonNull byte[] password, @PasswordComplexity int complexity)" ]
}