{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/http/params/CoreConnectionPNames.java",
  "packageName" : "org.apache.http.params",
  "className" : "CoreConnectionPNames",
  "comment" : "\n * Defines parameter names for connections in HttpCore.\n * \n * @version $Revision: 576077 $\n * \n * @since 4.0\n *\n * @deprecated Please use {@link java.net.URL#openConnection} instead.\n *     Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>\n *     for further details.\n ",
  "links" : [ "java.net.URL#openConnection" ],
  "variables" : [ {
    "name" : "SO_TIMEOUT",
    "type" : "String",
    "comment" : "\n     * Defines the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the \n     * timeout for waiting for data. A timeout value of zero is interpreted as an infinite \n     * timeout. This value is used when no socket timeout is set in the \n     * method parameters. \n     * <p>\n     * This parameter expects a value of type {@link Integer}.\n     * </p>\n     * @see java.net.SocketOptions#SO_TIMEOUT\n     ",
    "links" : [ "Integer" ]
  }, {
    "name" : "TCP_NODELAY",
    "type" : "String",
    "comment" : "\n     * Determines whether Nagle's algorithm is to be used. The Nagle's algorithm \n     * tries to conserve bandwidth by minimizing the number of segments that are \n     * sent. When applications wish to decrease network latency and increase \n     * performance, they can disable Nagle's algorithm (that is enable TCP_NODELAY). \n     * Data will be sent earlier, at the cost of an increase in bandwidth consumption. \n     * <p>\n     * This parameter expects a value of type {@link Boolean}.\n     * </p>\n     * @see java.net.SocketOptions#TCP_NODELAY\n     ",
    "links" : [ "Boolean" ]
  }, {
    "name" : "SOCKET_BUFFER_SIZE",
    "type" : "String",
    "comment" : "\n     * Determines the size of the internal socket buffer used to buffer data\n     * while receiving / transmitting HTTP messages.\n     * <p>\n     * This parameter expects a value of type {@link Integer}.\n     * </p>\n     ",
    "links" : [ "Integer" ]
  }, {
    "name" : "SO_LINGER",
    "type" : "String",
    "comment" : "\n     * Sets SO_LINGER with the specified linger time in seconds. The maximum timeout \n     * value is platform specific. Value <tt>0</tt> implies that the option is disabled.\n     * Value <tt>-1</tt> implies that the JRE default is used. The setting only affects \n     * socket close.  \n     * <p>\n     * This parameter expects a value of type {@link Integer}.\n     * </p>\n     * @see java.net.SocketOptions#SO_LINGER\n     ",
    "links" : [ "Integer" ]
  }, {
    "name" : "CONNECTION_TIMEOUT",
    "type" : "String",
    "comment" : "\n     * Determines the timeout until a connection is etablished. A value of zero \n     * means the timeout is not used. The default value is zero.\n     * <p>\n     * This parameter expects a value of type {@link Integer}.\n     * </p>\n     ",
    "links" : [ "Integer" ]
  }, {
    "name" : "STALE_CONNECTION_CHECK",
    "type" : "String",
    "comment" : "\n     * Determines whether stale connection check is to be used. Disabling \n     * stale connection check may result in slight performance improvement \n     * at the risk of getting an I/O error when executing a request over a\n     * connection that has been closed at the server side. \n     * <p>\n     * This parameter expects a value of type {@link Boolean}.\n     * </p>\n     ",
    "links" : [ "Boolean" ]
  }, {
    "name" : "MAX_LINE_LENGTH",
    "type" : "String",
    "comment" : "\n     * Determines the maximum line length limit. If set to a positive value, any HTTP \n     * line exceeding this limit will cause an IOException. A negative or zero value\n     * will effectively disable the check.\n     * <p>\n     * This parameter expects a value of type {@link Integer}.\n     * </p>\n     ",
    "links" : [ "Integer" ]
  }, {
    "name" : "MAX_HEADER_COUNT",
    "type" : "String",
    "comment" : "\n     * Determines the maximum HTTP header count allowed. If set to a positive value, \n     * the number of HTTP headers received from the data stream exceeding this limit \n     * will cause an IOException. A negative or zero value will effectively disable \n     * the check. \n     * <p>\n     * This parameter expects a value of type {@link Integer}.\n     * </p>\n     ",
    "links" : [ "Integer" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "SO_TIMEOUT", "TCP_NODELAY", "SOCKET_BUFFER_SIZE", "SO_LINGER", "CONNECTION_TIMEOUT", "STALE_CONNECTION_CHECK", "MAX_LINE_LENGTH", "MAX_HEADER_COUNT" ]
}