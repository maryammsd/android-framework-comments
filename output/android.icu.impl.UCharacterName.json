{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UCharacterName.java",
  "packageName" : "android.icu.impl",
  "className" : "UCharacterName",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "INSTANCE",
    "type" : "UCharacterName",
    "comment" : "\n     * public singleton instance\n     ",
    "links" : [ ]
  }, {
    "name" : "LINES_PER_GROUP_",
    "type" : "int",
    "comment" : "\n    * Number of lines per group\n    * 1 << GROUP_SHIFT_\n    ",
    "links" : [ ]
  }, {
    "name" : "m_groupcount_",
    "type" : "int",
    "comment" : "\n     * Maximum number of groups\n     ",
    "links" : [ ]
  }, {
    "name" : "m_groupsize_",
    "type" : "int",
    "comment" : "\n     * Size of each groups\n     ",
    "links" : [ ]
  }, {
    "name" : "m_tokentable_",
    "type" : "char[]",
    "comment" : "\n    * Data used in unames.icu\n    ",
    "links" : [ ]
  }, {
    "name" : "m_tokenstring_",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_groupinfo_",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_groupstring_",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_algorithm_",
    "type" : "AlgorithmName[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_groupoffsets_",
    "type" : "char[]",
    "comment" : "\n    * Group use.  Note - access must be synchronized.\n    ",
    "links" : [ ]
  }, {
    "name" : "m_grouplengths_",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILE_NAME_",
    "type" : "String",
    "comment" : "\n    * Default name of the name datafile\n    ",
    "links" : [ ]
  }, {
    "name" : "GROUP_SHIFT_",
    "type" : "int",
    "comment" : "\n    * Shift count to retrieve group information\n    ",
    "links" : [ ]
  }, {
    "name" : "GROUP_MASK_",
    "type" : "int",
    "comment" : "\n    * Mask to retrieve the offset for a particular character within a group\n    ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_HIGH_OFFSET_",
    "type" : "int",
    "comment" : "\n    * Position of offsethigh in group information array\n    ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_LOW_OFFSET_",
    "type" : "int",
    "comment" : "\n    * Position of offsetlow in group information array\n    ",
    "links" : [ ]
  }, {
    "name" : "SINGLE_NIBBLE_MAX_",
    "type" : "int",
    "comment" : "\n    * Double nibble indicator, any nibble > this number has to be combined\n    * with its following nibble\n    ",
    "links" : [ ]
  }, {
    "name" : "m_nameSet_",
    "type" : "int[]",
    "comment" : "\n     * Set of chars used in character names (regular & 1.0).\n     * Chars are platform-dependent (can be EBCDIC).\n     ",
    "links" : [ ]
  }, {
    "name" : "m_ISOCommentSet_",
    "type" : "int[]",
    "comment" : "\n     * Set of chars used in ISO comments. (regular & 1.0).\n     * Chars are platform-dependent (can be EBCDIC).\n     ",
    "links" : [ ]
  }, {
    "name" : "m_utilStringBuffer_",
    "type" : "StringBuffer",
    "comment" : "\n     * Utility StringBuffer\n     ",
    "links" : [ ]
  }, {
    "name" : "m_utilIntBuffer_",
    "type" : "int[]",
    "comment" : "\n     * Utility int buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "m_maxISOCommentLength_",
    "type" : "int",
    "comment" : "\n     * Maximum ISO comment length\n     ",
    "links" : [ ]
  }, {
    "name" : "m_maxNameLength_",
    "type" : "int",
    "comment" : "\n     * Maximum name length\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NAMES_",
    "type" : "String[]",
    "comment" : "\n     * Type names used for extended names\n     ",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_TYPE_NAME_",
    "type" : "String",
    "comment" : "\n     * Unknown type name\n     ",
    "links" : [ ]
  }, {
    "name" : "NON_CHARACTER_",
    "type" : "int",
    "comment" : "\n     * Not a character type\n     ",
    "links" : [ ]
  }, {
    "name" : "LEAD_SURROGATE_",
    "type" : "int",
    "comment" : "\n    * Lead surrogate type\n    ",
    "links" : [ ]
  }, {
    "name" : "TRAIL_SURROGATE_",
    "type" : "int",
    "comment" : "\n    * Trail surrogate type\n    ",
    "links" : [ ]
  }, {
    "name" : "EXTENDED_CATEGORY_",
    "type" : "int",
    "comment" : "\n    * Extended category count\n    ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName(int ch, int choice)",
    "returnType" : "String",
    "comment" : "\n    * Retrieve the name of a Unicode code point.\n    * Depending on <code>choice</code>, the character name written into the\n    * buffer is the \"modern\" name or the name that was defined in Unicode\n    * version 1.0.\n    * The name contains only \"invariant\" characters\n    * like A-Z, 0-9, space, and '-'.\n    *\n    * @param ch the code point for which to get the name.\n    * @param choice Selector for which name to get.\n    * @return if code point is above 0x1fff, null is returned\n    ",
    "links" : [ ]
  }, {
    "name" : "public int getCharFromName(int choice, String name)",
    "returnType" : "int",
    "comment" : "\n    * Find a character by its name and return its code point value\n    * @param choice selector to indicate if argument name is a Unicode 1.0\n    *        or the most current version\n    * @param name the name to search for\n    * @return code point\n    ",
    "links" : [ ]
  }, {
    "name" : "public int getGroupLengths(int index, char[] offsets, char[] lengths)",
    "returnType" : "int",
    "comment" : "\n    * Reads a block of compressed lengths of 32 strings and expands them into\n    * offsets and lengths for each string. Lengths are stored with a\n    * variable-width encoding in consecutive nibbles:\n    * If a nibble<0xc, then it is the length itself (0 = empty string).\n    * If a nibble>=0xc, then it forms a length value with the following\n    * nibble.\n    * The offsets and lengths arrays must be at least 33 (one more) long\n    * because there is no check here at the end if the last nibble is still\n    * used.\n    * @param index of group string object in array\n    * @param offsets array to store the value of the string offsets\n    * @param lengths array to store the value of the string length\n    * @return next index of the data string immediately after the lengths\n    *         in terms of byte address\n    ",
    "links" : [ ]
  }, {
    "name" : "public String getGroupName(int index, int length, int choice)",
    "returnType" : "String",
    "comment" : "\n    * Gets the name of the argument group index.\n    * UnicodeData.txt uses ';' as a field separator, so no field can contain\n    * ';' as part of its contents. In unames.icu, it is marked as\n    * token[';'] == -1 only if the semicolon is used in the data file - which\n    * is iff we have Unicode 1.0 names or ISO comments or aliases.\n    * So, it will be token[';'] == -1 if we store U1.0 names/ISO comments/aliases\n    * although we know that it will never be part of a name.\n    * Equivalent to ICU4C's expandName.\n    * @param index of the group name string in byte count\n    * @param length of the group name string\n    * @param choice of Unicode 1.0 name or the most current name\n    * @return name of the group\n    ",
    "links" : [ ]
  }, {
    "name" : "public String getExtendedName(int ch)",
    "returnType" : "String",
    "comment" : "\n    * Retrieves the extended name\n    ",
    "links" : [ ]
  }, {
    "name" : "public int getGroup(int codepoint)",
    "returnType" : "int",
    "comment" : "\n     * Gets the group index for the codepoint, or the group before it.\n     * @param codepoint The codepoint index.\n     * @return group index containing codepoint or the group before it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtendedOr10Name(int ch)",
    "returnType" : "String",
    "comment" : "\n     * Gets the extended and 1.0 name when the most current unicode names\n     * fail\n     * @param ch codepoint\n     * @return name of codepoint extended or 1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGroupMSB(int gindex)",
    "returnType" : "int",
    "comment" : "\n     * Gets the MSB from the group index\n     * @param gindex group index\n     * @return the MSB of the group if gindex is valid, -1 otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getCodepointMSB(int codepoint)",
    "returnType" : "int",
    "comment" : "\n     * Gets the MSB of the codepoint\n     * @param codepoint The codepoint value.\n     * @return the MSB of the codepoint\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getGroupLimit(int msb)",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum codepoint + 1 of the group\n     * @param msb most significant byte of the group\n     * @return limit codepoint of the group\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getGroupMin(int msb)",
    "returnType" : "int",
    "comment" : "\n     * Gets the minimum codepoint of the group\n     * @param msb most significant byte of the group\n     * @return minimum codepoint of the group\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getGroupOffset(int codepoint)",
    "returnType" : "int",
    "comment" : "\n     * Gets the offset to a group\n     * @param codepoint The codepoint value.\n     * @return offset to a group\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getGroupMinFromCodepoint(int codepoint)",
    "returnType" : "int",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : "public int getAlgorithmLength()",
    "returnType" : "int",
    "comment" : "\n     * Get the Algorithm range length\n     * @return Algorithm range length\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAlgorithmStart(int index)",
    "returnType" : "int",
    "comment" : "\n     * Gets the start of the range\n     * @param index algorithm index\n     * @return algorithm range start\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAlgorithmEnd(int index)",
    "returnType" : "int",
    "comment" : "\n     * Gets the end of the range\n     * @param index algorithm index\n     * @return algorithm range end\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAlgorithmName(int index, int codepoint)",
    "returnType" : "String",
    "comment" : "\n     * Gets the Algorithmic name of the codepoint\n     * @param index algorithmic range index\n     * @param codepoint The codepoint value.\n     * @return algorithmic name of codepoint\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String getGroupName(int ch, int choice)",
    "returnType" : "String",
    "comment" : "\n    * Gets the group name of the character\n    * @param ch character to get the group name\n    * @param choice name choice selector to choose a unicode 1.0 or newer name\n    ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxCharNameLength()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum length of any codepoint name.\n     * Equivalent to uprv_getMaxCharNameLength.\n     * @return the maximum length of any codepoint name\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxISOCommentLength()",
    "returnType" : "int",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : "public void getCharNameCharacters(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "\n     * Fills set with characters that are used in Unicode character names.\n     * Equivalent to uprv_getCharNameCharacters.\n     * @param set USet to receive characters. Existing contents are deleted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getISOCommentCharacters(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : " boolean setToken(char[] token, byte[] tokenstring)",
    "returnType" : "boolean",
    "comment" : "\n    * Sets the token data\n    * @param token array of tokens\n    * @param tokenstring array of string values of the tokens\n    * @return false if there is a data error\n    ",
    "links" : [ ]
  }, {
    "name" : " boolean setAlgorithm(AlgorithmName[] alg)",
    "returnType" : "boolean",
    "comment" : "\n    * Set the algorithm name information array\n    * @param alg Algorithm information array\n    * @return true if the group string offset has been set correctly\n    ",
    "links" : [ ]
  }, {
    "name" : " boolean setGroupCountSize(int count, int size)",
    "returnType" : "boolean",
    "comment" : "\n    * Sets the number of group and size of each group in number of char\n    * @param count number of groups\n    * @param size size of group in char\n    * @return true if group size is set correctly\n    ",
    "links" : [ ]
  }, {
    "name" : " boolean setGroup(char[] group, byte[] groupstring)",
    "returnType" : "boolean",
    "comment" : "\n    * Sets the group name data\n    * @param group index information array\n    * @param groupstring name information array\n    * @return false if there is a data error\n    ",
    "links" : [ ]
  }, {
    "name" : "private String getAlgName(int ch, int choice)",
    "returnType" : "String",
    "comment" : "\n    * Gets the algorithmic name for the argument character\n    * @param ch character to determine name for\n    * @param choice name choice\n    * @return the algorithmic name or null if not found\n    ",
    "links" : [ ]
  }, {
    "name" : "private synchronized int getGroupChar(String name, int choice)",
    "returnType" : "int",
    "comment" : "\n    * Getting the character with the tokenized argument name\n    * @param name of the character\n    * @return character with the tokenized argument name or -1 if character\n    *         is not found\n    ",
    "links" : [ ]
  }, {
    "name" : "private int getGroupChar(int index, char[] length, String name, int choice)",
    "returnType" : "int",
    "comment" : "\n    * Compares and retrieve character if name is found within the argument\n    * group\n    * @param index index where the set of names reside in the group block\n    * @param length list of lengths of the strings\n    * @param name character name to search for\n    * @param choice of either 1.0 or the most current unicode name\n    * @return relative character in the group which matches name, otherwise if\n    *         not found, -1 will be returned\n    ",
    "links" : [ ]
  }, {
    "name" : "private static int getType(int ch)",
    "returnType" : "int",
    "comment" : "\n    * Gets the character extended type\n    * @param ch character to be tested\n    * @return extended type it is associated with\n    ",
    "links" : [ ]
  }, {
    "name" : "private static int getExtendedChar(String name, int choice)",
    "returnType" : "int",
    "comment" : "\n    * Getting the character with extended name of the form <....>.\n    * @param name of the character to be found\n    * @param choice name choice\n    * @return character associated with the name, -1 if such character is not\n    *                   found and -2 if we should continue with the search.\n    ",
    "links" : [ ]
  }, {
    "name" : "private static void add(int[] set, char ch)",
    "returnType" : "void",
    "comment" : "\n     * Adds a codepoint into a set of ints.\n     * Equivalent to SET_ADD.\n     * @param set set to add to\n     * @param ch 16 bit char to add\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean contains(int[] set, char ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a codepoint is a part of a set of ints.\n     * Equivalent to SET_CONTAINS.\n     * @param set set to check in\n     * @param ch 16 bit char to check\n     * @return true if codepoint is part of the set, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int add(int[] set, String str)",
    "returnType" : "int",
    "comment" : "\n     * Adds all characters of the argument str and gets the length\n     * Equivalent to calcStringSetLength.\n     * @param set set to add all chars of str to\n     * @param str string to add\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int add(int[] set, StringBuffer str)",
    "returnType" : "int",
    "comment" : "\n     * Adds all characters of the argument str and gets the length\n     * Equivalent to calcStringSetLength.\n     * @param set set to add all chars of str to\n     * @param str string to add\n     ",
    "links" : [ ]
  }, {
    "name" : "private int addAlgorithmName(int maxlength)",
    "returnType" : "int",
    "comment" : "\n     * Adds all algorithmic names into the name set.\n     * Equivalent to part of calcAlgNameSetsLengths.\n     * @param maxlength length to compare to\n     * @return the maximum length of any possible algorithmic name if it is >\n     *         maxlength, otherwise maxlength is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int addExtendedName(int maxlength)",
    "returnType" : "int",
    "comment" : "\n     * Adds all extended names into the name set.\n     * Equivalent to part of calcExtNameSetsLengths.\n     * @param maxlength length to compare to\n     * @return the maxlength of any possible extended name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] addGroupName(int offset, int length, byte[] tokenlength, int[] set)",
    "returnType" : "int[]",
    "comment" : "\n     * Adds names of a group to the argument set.\n     * Equivalent to calcNameSetLength.\n     * @param offset of the group name string in byte count\n     * @param length of the group name string\n     * @param tokenlength array to store the length of each token\n     * @param set to add to\n     * @return the length of the name string and the length of the group\n     *         string parsed\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addGroupName(int maxlength)",
    "returnType" : "void",
    "comment" : "\n     * Adds names of all group to the argument set.\n     * Sets the data member m_max*Length_.\n     * Method called only once.\n     * Equivalent to calcGroupNameSetsLength.\n     * @param maxlength length to compare to\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean initNameSetsLengths()",
    "returnType" : "boolean",
    "comment" : "\n     * Sets up the name sets and the calculation of the maximum lengths.\n     * Equivalent to calcNameSetsLengths.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void convert(int[] set, UnicodeSet uset)",
    "returnType" : "void",
    "comment" : "\n     * Converts the char set cset into a Unicode set uset.\n     * Equivalent to charSetToUSet.\n     * @param set Set of 256 bit flags corresponding to a set of chars.\n     * @param uset USet to receive characters. Existing contents are deleted.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName(int ch, int choice)", "public int getCharFromName(int choice, String name)", "public int getGroupLengths(int index, char[] offsets, char[] lengths)", "public String getGroupName(int index, int length, int choice)", "public String getExtendedName(int ch)", "public int getGroup(int codepoint)", "public String getExtendedOr10Name(int ch)", "public int getGroupMSB(int gindex)", "public static int getCodepointMSB(int codepoint)", "public static int getGroupLimit(int msb)", "public static int getGroupMin(int msb)", "public static int getGroupOffset(int codepoint)", "public static int getGroupMinFromCodepoint(int codepoint)", "public int getAlgorithmLength()", "public int getAlgorithmStart(int index)", "public int getAlgorithmEnd(int index)", "public String getAlgorithmName(int index, int codepoint)", "public synchronized String getGroupName(int ch, int choice)", "public int getMaxCharNameLength()", "public int getMaxISOCommentLength()", "public void getCharNameCharacters(UnicodeSet set)", "public void getISOCommentCharacters(UnicodeSet set)", " boolean setToken(char[] token, byte[] tokenstring)", " boolean setAlgorithm(AlgorithmName[] alg)", " boolean setGroupCountSize(int count, int size)", " boolean setGroup(char[] group, byte[] groupstring)", "private String getAlgName(int ch, int choice)", "private synchronized int getGroupChar(String name, int choice)", "private int getGroupChar(int index, char[] length, String name, int choice)", "private static int getType(int ch)", "private static int getExtendedChar(String name, int choice)", "private static void add(int[] set, char ch)", "private static boolean contains(int[] set, char ch)", "private static int add(int[] set, String str)", "private static int add(int[] set, StringBuffer str)", "private int addAlgorithmName(int maxlength)", "private int addExtendedName(int maxlength)", "private int[] addGroupName(int offset, int length, byte[] tokenlength, int[] set)", "private void addGroupName(int maxlength)", "private boolean initNameSetsLengths()", "private void convert(int[] set, UnicodeSet uset)" ],
  "variableNames" : [ "INSTANCE", "LINES_PER_GROUP_", "m_groupcount_", "m_groupsize_", "m_tokentable_", "m_tokenstring_", "m_groupinfo_", "m_groupstring_", "m_algorithm_", "m_groupoffsets_", "m_grouplengths_", "FILE_NAME_", "GROUP_SHIFT_", "GROUP_MASK_", "OFFSET_HIGH_OFFSET_", "OFFSET_LOW_OFFSET_", "SINGLE_NIBBLE_MAX_", "m_nameSet_", "m_ISOCommentSet_", "m_utilStringBuffer_", "m_utilIntBuffer_", "m_maxISOCommentLength_", "m_maxNameLength_", "TYPE_NAMES_", "UNKNOWN_TYPE_NAME_", "NON_CHARACTER_", "LEAD_SURROGATE_", "TRAIL_SURROGATE_", "EXTENDED_CATEGORY_" ]
}