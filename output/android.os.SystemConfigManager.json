{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/SystemConfigManager.java",
  "packageName" : "android.os",
  "className" : "SystemConfigManager",
  "comment" : "\n * Allows apps outside the system process to access various bits of configuration defined in\n * /etc/sysconfig and its counterparts on OEM and vendor partitions.\n *\n * TODO: Intended for access by system mainline modules only. Marking as SystemApi until the\n * module-only API surface is available.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ISystemConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Set<String> getDisabledUntilUsedPreinstalledCarrierApps()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a set of package names for carrier apps that are preinstalled on the device but\n     * should be disabled until the matching carrier's SIM is inserted into the device.\n     * @return A set of package names.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getDisabledUntilUsedPreinstalledCarrierAssociatedApps()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns a map that describes helper apps associated with carrier apps that, like the apps\n     * returned by {@link #getDisabledUntilUsedPreinstalledCarrierApps()}, should be disabled until\n     * the correct SIM is inserted into the device.\n     * @return A map with keys corresponding to package names returned by\n     *         {@link #getDisabledUntilUsedPreinstalledCarrierApps()} and values as lists of package\n     *         names of helper apps.\n     ",
    "links" : [ "#getDisabledUntilUsedPreinstalledCarrierApps()" ]
  }, {
    "name" : "public Map<String, List<CarrierAssociatedAppEntry>> getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()",
    "returnType" : "Map<String, List<CarrierAssociatedAppEntry>>",
    "comment" : "\n     * Returns a map that describes helper apps associated with carrier apps that, like the apps\n     * returned by {@link #getDisabledUntilUsedPreinstalledCarrierApps()}, should be disabled until\n     * the correct SIM is inserted into the device.\n     *\n     * <p>TODO(b/159069037) expose this and get rid of the other method that omits SDK version.\n     *\n     * @return A map with keys corresponding to package names returned by\n     *         {@link #getDisabledUntilUsedPreinstalledCarrierApps()} and values as lists of package\n     *         names of helper apps and the SDK versions when they were first added.\n     *\n     * @hide\n     ",
    "links" : [ "#getDisabledUntilUsedPreinstalledCarrierApps()" ]
  }, {
    "name" : "public int[] getSystemPermissionUids(@NonNull String permissionName)",
    "returnType" : "int[]",
    "comment" : "\n     * Get uids which have been granted given permission in system configuration.\n     *\n     * The uids and assigning permissions are defined on data/etc/platform.xml\n     *\n     * @param permissionName The target permission.\n     * @return The uids have been granted given permission in system configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ComponentName> getEnabledComponentOverrides(@NonNull String packageName)",
    "returnType" : "List<ComponentName>",
    "comment" : "\n     * Get enabled component for a specific package\n     *\n     * @param packageName The target package.\n     * @return The enabled component\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ComponentName> getDefaultVrComponents()",
    "returnType" : "List<ComponentName>",
    "comment" : "\n     * Return the components that are enabled by default as VR mode listener services.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getPreventUserDisablePackages()",
    "returnType" : "List<String>",
    "comment" : "\n     * Return the packages that are prevented from being disabled, where if\n     * disabled it would result in a non-functioning system or similar.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<SignedPackage> getEnhancedConfirmationTrustedPackages()",
    "returnType" : "Set<SignedPackage>",
    "comment" : "\n     * Returns a set of signed packages, represented as (packageName, certificateDigest) pairs, that\n     * should be considered \"trusted packages\" by ECM (Enhanced Confirmation Mode).\n     *\n     * <p>\"Trusted packages\" are exempt from ECM (i.e., they will never be considered \"restricted\").\n     *\n     * <p>A package will be considered \"trusted package\" if and only if it *matches* least one of\n     * the (*packageName*, *certificateDigest*) pairs in this set, where *matches* means satisfying\n     * both of the following:\n     *\n     * <ol>\n     *   <li>The package's name equals *packageName*\n     *   <li>The package is, or was ever, signed by *certificateDigest*, according to the package's\n     *       {@link android.content.pm.SigningDetails}\n     * </ol>\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.SigningDetails" ]
  }, {
    "name" : "public Set<SignedPackage> getEnhancedConfirmationTrustedInstallers()",
    "returnType" : "Set<SignedPackage>",
    "comment" : "\n     * Returns a set of signed packages, represented as (packageName, certificateDigest) pairs, that\n     * should be considered \"trusted installers\" by ECM (Enhanced Confirmation Mode).\n     *\n     * <p>\"Trusted installers\", and all apps installed by a trusted installer, are exempt from ECM\n     * (i.e., they will never be considered \"restricted\").\n     *\n     * <p>A package will be considered a \"trusted installer\" if and only if it *matches* least one\n     * of the (*packageName*, *certificateDigest*) pairs in this set, where *matches* means\n     * satisfying both of the following:\n     *\n     * <ol>\n     *   <li>The package's name equals *packageName*\n     *   <li>The package is, or was ever, signed by *certificateDigest*, according to the package's\n     *       {@link android.content.pm.SigningDetails}\n     * </ol>\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.SigningDetails" ]
  } ],
  "methodNames" : [ "public Set<String> getDisabledUntilUsedPreinstalledCarrierApps()", "public Map<String, List<String>> getDisabledUntilUsedPreinstalledCarrierAssociatedApps()", "public Map<String, List<CarrierAssociatedAppEntry>> getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()", "public int[] getSystemPermissionUids(@NonNull String permissionName)", "public List<ComponentName> getEnabledComponentOverrides(@NonNull String packageName)", "public List<ComponentName> getDefaultVrComponents()", "public List<String> getPreventUserDisablePackages()", "public Set<SignedPackage> getEnhancedConfirmationTrustedPackages()", "public Set<SignedPackage> getEnhancedConfirmationTrustedInstallers()" ],
  "variableNames" : [ "TAG", "mInterface" ]
}