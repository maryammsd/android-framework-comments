{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/IkeTrafficSelector.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "IkeTrafficSelector",
  "comment" : "\n * IkeTrafficSelector represents a Traffic Selector of a Child Session.\n *\n * <p>Traffic Selectors specify addresses that are acceptable within the IPsec SA.\n *\n * <p>Callers can propose {@link IkeTrafficSelector}s when building a {@link ChildSessionParams} and\n * receive the negotiated {@link IkeTrafficSelector}s via a {@link ChildSessionConfiguration}.\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc7296#section-3.13\">RFC 7296, Internet Key Exchange\n *     Protocol Version 2 (IKEv2)</a>\n ",
  "links" : [ "android.net.ipsec.ike.IkeTrafficSelector", "android.net.ipsec.ike.ChildSessionParams", "android.net.ipsec.ike.ChildSessionConfiguration" ],
  "variables" : [ {
    "name" : "IP_PROTOCOL_ID_UNSPEC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IP_PROTOCOL_ID_ICMP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IP_PROTOCOL_ID_TCP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IP_PROTOCOL_ID_UDP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IP_PROTOCOL_ID_SET",
    "type" : "ArraySet<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRAFFIC_SELECTOR_TYPE_IPV4_ADDR_RANGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRAFFIC_SELECTOR_TYPE_IPV6_ADDR_RANGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PORT_NUMBER_MIN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PORT_NUMBER_MAX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "IPV4_ADDR_LEN",
    "type" : "int",
    "comment" : " TODO: Consider defining these constants in a central place in Connectivity.",
    "links" : [ ]
  }, {
    "name" : "IPV6_ADDR_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRAFFIC_SELECTOR_IPV4_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRAFFIC_SELECTOR_IPV6_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_PORT_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_PORT_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_ADDRESS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_ADDRESS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tsType",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ipProtocolId",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "selectorLength",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "startPort",
    "type" : "int",
    "comment" : " The smallest port number allowed by this Traffic Selector. Informational only. ",
    "links" : [ ]
  }, {
    "name" : "endPort",
    "type" : "int",
    "comment" : " The largest port number allowed by this Traffic Selector. Informational only. ",
    "links" : [ ]
  }, {
    "name" : "startingAddress",
    "type" : "InetAddress",
    "comment" : " The smallest address included in this Traffic Selector. ",
    "links" : [ ]
  }, {
    "name" : "endingAddress",
    "type" : "InetAddress",
    "comment" : " The largest address included in this Traffic Selector. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int getTsType(InetAddress address)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IkeTrafficSelector fromPersistableBundle(@NonNull PersistableBundle in)",
    "returnType" : "IkeTrafficSelector",
    "comment" : "\n     * Constructs this object by deserializing a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle toPersistableBundle()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Serializes this object to a PersistableBundle\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IkeTrafficSelector[] decodeIkeTrafficSelectors(int numTs, byte[] tsBytes) throws InvalidSyntaxException",
    "returnType" : "IkeTrafficSelector[]",
    "comment" : "\n     * Decode IkeTrafficSelectors from inbound Traffic Selector Payload.\n     *\n     * <p>This method is only called by IkeTsPayload when decoding inbound IKE message.\n     *\n     * @param numTs number or Traffic Selectors\n     * @param tsBytes encoded byte array of Traffic Selectors\n     * @return an array of decoded IkeTrafficSelectors\n     * @throws InvalidSyntaxException if received bytes are malformed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IkeTrafficSelector decodeTrafficSelector(ByteBuffer inputBuffer, int tsType) throws InvalidSyntaxException",
    "returnType" : "IkeTrafficSelector",
    "comment" : " caught by method caller if operation reaches the input ByteBuffer's limit.",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPortRangeValid(int startPort, int endPort)",
    "returnType" : "boolean",
    "comment" : " Validate port range.",
    "links" : [ ]
  }, {
    "name" : "private static int compareInetAddressTo(InetAddress leftAddress, InetAddress rightAddress)",
    "returnType" : "int",
    "comment" : " TODO: Consider moving it to the platform code in the future./",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(IkeTrafficSelector ts)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the input IkeTrafficSelector is a subset of this instance.\n     *\n     * @param ts the provided IkeTrafficSelector to check.\n     * @return true if the input IkeTrafficSelector is a subset of this instance, otherwise false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void encodeToByteBuffer(ByteBuffer byteBuffer)",
    "returnType" : "void",
    "comment" : "\n     * Encode traffic selector to ByteBuffer.\n     *\n     * <p>This method will be only called by IkeTsPayload for building an outbound IKE message.\n     *\n     * @param byteBuffer destination ByteBuffer that stores encoded traffic selector.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int getTsType(InetAddress address)", "public static IkeTrafficSelector fromPersistableBundle(@NonNull PersistableBundle in)", "public PersistableBundle toPersistableBundle()", "public static IkeTrafficSelector[] decodeIkeTrafficSelectors(int numTs, byte[] tsBytes) throws InvalidSyntaxException", "private static IkeTrafficSelector decodeTrafficSelector(ByteBuffer inputBuffer, int tsType) throws InvalidSyntaxException", "private static boolean isPortRangeValid(int startPort, int endPort)", "private static int compareInetAddressTo(InetAddress leftAddress, InetAddress rightAddress)", "public boolean contains(IkeTrafficSelector ts)", "public int hashCode()", "public boolean equals(Object o)", "public void encodeToByteBuffer(ByteBuffer byteBuffer)" ],
  "variableNames" : [ "IP_PROTOCOL_ID_UNSPEC", "IP_PROTOCOL_ID_ICMP", "IP_PROTOCOL_ID_TCP", "IP_PROTOCOL_ID_UDP", "IP_PROTOCOL_ID_SET", "TRAFFIC_SELECTOR_TYPE_IPV4_ADDR_RANGE", "TRAFFIC_SELECTOR_TYPE_IPV6_ADDR_RANGE", "PORT_NUMBER_MIN", "PORT_NUMBER_MAX", "IPV4_ADDR_LEN", "IPV6_ADDR_LEN", "TRAFFIC_SELECTOR_IPV4_LEN", "TRAFFIC_SELECTOR_IPV6_LEN", "START_PORT_KEY", "END_PORT_KEY", "START_ADDRESS_KEY", "END_ADDRESS_KEY", "tsType", "ipProtocolId", "selectorLength", "startPort", "endPort", "startingAddress", "endingAddress" ]
}