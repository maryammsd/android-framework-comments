{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/NodeSequence.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "NodeSequence",
  "comment" : "\n * This class is the dynamic wrapper for a Xalan DTMIterator instance, and \n * provides random access capabilities.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_last",
    "type" : "int",
    "comment" : " The index of the last node in the iteration. ",
    "links" : [ ]
  }, {
    "name" : "m_next",
    "type" : "int",
    "comment" : "\n   * The index of the next node to be fetched.  Useful if this\n   * is a cached iterator, and is being used as random access\n   * NodeList.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_cache",
    "type" : "IteratorCache",
    "comment" : "\n   * A cache of a list of nodes obtained from the iterator so far.\n   * This list is appended to until the iterator is exhausted and\n   * the cache is complete.\n   * <p>\n   * Multiple NodeSequence objects may share the same cache.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_iter",
    "type" : "DTMIterator",
    "comment" : "\n   * The functional iterator that fetches nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_dtmMgr",
    "type" : "DTMManager",
    "comment" : "\n   * The DTMManager to use if we're using a NodeVector only.\n   * We may well want to do away with this, and store it in the NodeVector.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected NodeVector getVector()",
    "returnType" : "NodeVector",
    "comment" : "\n   * If this iterator needs to cache nodes that are fetched, they\n   * are stored in the Vector in the generic object.\n   ",
    "links" : [ ]
  }, {
    "name" : "private IteratorCache getCache()",
    "returnType" : "IteratorCache",
    "comment" : "\n   * Get the cache (if any) of nodes obtained from\n   * the iterator so far. Note that the cache keeps\n   * growing until the iterator is walked to exhaustion,\n   * at which point the cache is \"complete\".\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void SetVector(NodeVector v)",
    "returnType" : "void",
    "comment" : "\n   * Set the vector where nodes will be cached.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCache()",
    "returnType" : "boolean",
    "comment" : "\n   * If the iterator needs to cache nodes as they are fetched,\n   * then this method returns true. \n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean cacheComplete()",
    "returnType" : "boolean",
    "comment" : "\n   * If this NodeSequence has a cache, and that cache is \n   * fully populated then this method returns true, otherwise\n   * if there is no cache or it is not complete it returns false.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void markCacheComplete()",
    "returnType" : "void",
    "comment" : "\n   * If this NodeSequence has a cache, mark that it is complete.\n   * This method should be called after the iterator is exhausted.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setIter(DTMIterator iter)",
    "returnType" : "void",
    "comment" : "\n   * Set the functional iterator that fetches nodes.\n   * @param iter The iterator that is to be contained.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final DTMIterator getContainedIter()",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Get the functional iterator that fetches nodes.\n   * @return The contained iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * @see DTMIterator#getDTM(int)\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMManager getDTMManager()",
    "returnType" : "DTMManager",
    "comment" : "\n   * @see DTMIterator#getDTMManager()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getRoot()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#getRoot()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRoot(int nodeHandle, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#setRoot(int, Object)\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#reset()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#getWhatToShow()\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : "\n   * @see DTMIterator#getExpandEntityReferences()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#nextNode()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int previousNode()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#previousNode()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#detach()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void allowDetachToRelease(boolean allowRelease)",
    "returnType" : "void",
    "comment" : "\n   * Calling this with a value of false will cause the nodeset \n   * to be cached.\n   * @see DTMIterator#allowDetachToRelease(boolean)\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentNode()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#getCurrentNode()\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFresh()",
    "returnType" : "boolean",
    "comment" : "\n   * @see DTMIterator#isFresh()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldCacheNodes(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#setShouldCacheNodes(boolean)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMutable()",
    "returnType" : "boolean",
    "comment" : "\n   * @see DTMIterator#isMutable()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentPos()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#getCurrentPos()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void runTo(int index)",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#runTo(int)\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPos(int i)",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#setCurrentPos(int)\n   ",
    "links" : [ ]
  }, {
    "name" : "public int item(int index)",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#item(int)\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setItem(int node, int index)",
    "returnType" : "void",
    "comment" : "\n   * @see DTMIterator#setItem(int, int)\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#getLength()\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator cloneWithReset() throws CloneNotSupportedException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Note: Not a deep clone.\n   * @see DTMIterator#cloneWithReset()\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a clone of this iterator, but don't reset the iteration in the \n   * process, so that it may be used from the current position.\n   * Note: Not a deep clone.\n   *\n   * @return A clone of this object.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * @see DTMIterator#isDocOrdered()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * @see DTMIterator#getAxis()\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : "\n   * @see PathComponent#getAnalysisBits()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.Expression#fixupVariables(Vector, int)\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int addNodeInDocOrder(int node)",
    "returnType" : "int",
    "comment" : "\n   * Add the node into a vector of nodes where it should occur in\n   * document order.\n   * @param node The node to be added.\n   * @return insertIndex.\n   * @throws RuntimeException thrown if this NodeSetDTM is not of \n   * a mutable type.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void setObject(Object obj)",
    "returnType" : "void",
    "comment" : "\n    * It used to be that many locations in the code simply\n    * did an assignment to this.m_obj directly, rather than\n    * calling the setObject(Object) method. The problem is\n    * that our super-class would be updated on what the \n    * cache associated with this NodeSequence, but\n    * we wouldn't know ourselves.\n    * <p>\n    * All setting of m_obj is done through setObject() now,\n    * and this method over-rides the super-class method.\n    * So now we are in the loop have an opportunity\n    * to update some caching information.\n    *\n    ",
    "links" : [ ]
  }, {
    "name" : "protected IteratorCache getIteratorCache()",
    "returnType" : "IteratorCache",
    "comment" : "\n     * Get the cached list of nodes appended with\n     * values obtained from the iterator as\n     * a NodeSequence is walked when its\n     * nextNode() method is called.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected NodeVector getVector()", "private IteratorCache getCache()", "protected void SetVector(NodeVector v)", "public boolean hasCache()", "private boolean cacheComplete()", "private void markCacheComplete()", "public final void setIter(DTMIterator iter)", "public final DTMIterator getContainedIter()", "public DTM getDTM(int nodeHandle)", "public DTMManager getDTMManager()", "public int getRoot()", "public void setRoot(int nodeHandle, Object environment)", "public void reset()", "public int getWhatToShow()", "public boolean getExpandEntityReferences()", "public int nextNode()", "public int previousNode()", "public void detach()", "public void allowDetachToRelease(boolean allowRelease)", "public int getCurrentNode()", "public boolean isFresh()", "public void setShouldCacheNodes(boolean b)", "public boolean isMutable()", "public int getCurrentPos()", "public void runTo(int index)", "public void setCurrentPos(int i)", "public int item(int index)", "public void setItem(int node, int index)", "public int getLength()", "public DTMIterator cloneWithReset() throws CloneNotSupportedException", "public Object clone() throws CloneNotSupportedException", "public boolean isDocOrdered()", "public int getAxis()", "public int getAnalysisBits()", "public void fixupVariables(Vector vars, int globalsSize)", "protected int addNodeInDocOrder(int node)", "protected void setObject(Object obj)", "protected IteratorCache getIteratorCache()" ],
  "variableNames" : [ "serialVersionUID", "m_last", "m_next", "m_cache", "m_iter", "m_dtmMgr" ]
}