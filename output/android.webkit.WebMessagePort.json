{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebMessagePort.java",
  "packageName" : "android.webkit",
  "className" : "WebMessagePort",
  "comment" : "\n * <p>The Java representation of the\n * <a href=\"https://html.spec.whatwg.org/multipage/comms.html#messageport\">\n * HTML5 message ports.</a>\n *\n * <p>A Message port represents one endpoint of a Message Channel. In Android\n * webview, there is no separate Message Channel object. When a message channel\n * is created, both ports are tangled to each other and started, and then\n * returned in a MessagePort array, see {@link WebView#createWebMessageChannel}\n * for creating a message channel.\n *\n * <p>When a message port is first created or received via transfer, it does not\n * have a WebMessageCallback to receive web messages. The messages are queued until\n * a WebMessageCallback is set.\n *\n * <p>A message port should be closed when it is not used by the embedder application\n * anymore. A closed port cannot be transferred or cannot be reopened to send\n * messages. Close can be called multiple times.\n *\n * <p>When a port is transferred to JS, it cannot be used to send or receive messages\n * at the Java side anymore. Different from HTML5 Spec, a port cannot be transferred\n * if one of these has ever happened: i. a message callback was set, ii. a message was\n * posted on it. A transferred port cannot be closed by the application, since\n * the ownership is also transferred.\n *\n * <p>It is possible to transfer both ports of a channel to JS, for example for\n * communication between subframes.\n ",
  "links" : [ "android.webkit.WebView#createWebMessageChannel" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void postMessage(WebMessage message)",
    "returnType" : "void",
    "comment" : "\n     * Post a WebMessage to the entangled port.\n     *\n     * @param message  the message from Java to JS.\n     *\n     * @throws IllegalStateException If message port is already transferred or closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the message port and free any resources associated with it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setWebMessageCallback(WebMessageCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a callback to receive message events on the main thread.\n     *\n     * @param callback  the message callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setWebMessageCallback(WebMessageCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Sets a callback to receive message events on the handler that is provided\n     * by the application.\n     *\n     * @param callback  the message callback.\n     * @param handler   the handler to receive the message messages.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void postMessage(WebMessage message)", "public abstract void close()", "public abstract void setWebMessageCallback(WebMessageCallback callback)", "public abstract void setWebMessageCallback(WebMessageCallback callback, Handler handler)" ],
  "variableNames" : [ ]
}