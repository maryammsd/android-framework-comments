{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/style/SpanUtils.java",
  "packageName" : "android.text.style",
  "className" : "SpanUtils",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static boolean toggleBold(@NonNull Spannable spannable, @IntRange(from = 0) int min, @IntRange(from = 0) int max)",
    "returnType" : "boolean",
    "comment" : "\n     * Toggle the bold state of the given range.\n     *\n     * If there is at least one character is not bold in the given range, make the entire region to\n     * be bold. If all characters of the given range is already bolded, this method removes bold\n     * style from the given selection.\n     *\n     * @param spannable a spannable string\n     * @param min minimum inclusive index of the selection.\n     * @param max maximum exclusive index of the selection.\n     * @return true if the selected region is toggled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean toggleItalic(@NonNull Spannable spannable, @IntRange(from = 0) int min, @IntRange(from = 0) int max)",
    "returnType" : "boolean",
    "comment" : "\n     * Toggle the italic state of the given range.\n     *\n     * If there is at least one character is not italic in the given range, make the entire region\n     * to be italic. If all characters of the given range is already italic, this method removes\n     * italic style from the given selection.\n     *\n     * @param spannable a spannable string\n     * @param min minimum inclusive index of the selection.\n     * @param max maximum exclusive index of the selection.\n     * @return true if the selected region is toggled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean toggleUnderline(@NonNull Spannable spannable, @IntRange(from = 0) int min, @IntRange(from = 0) int max)",
    "returnType" : "boolean",
    "comment" : "\n     * Toggle the underline state of the given range.\n     *\n     * If there is at least one character is not underlined in the given range, make the entire\n     * region to underlined. If all characters of the given range is already underlined, this\n     * method removes underline from the given selection.\n     *\n     * @param spannable a spannable string\n     * @param min minimum inclusive index of the selection.\n     * @param max maximum exclusive index of the selection.\n     * @return true if the selected region is toggled.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long pack(int from, int to)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int min(long packed)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int max(long packed)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasIntersection(int aMin, int aMax, int bMin, int bMax)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long intersection(int aMin, int aMax, int bMin, int bMax)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCovered(@NonNull Spannable spannable, @NonNull List<T> spans, @IntRange(from = 0) int min, @IntRange(from = 0) int max)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean toggleBold(@NonNull Spannable spannable, @IntRange(from = 0) int min, @IntRange(from = 0) int max)", "public static boolean toggleItalic(@NonNull Spannable spannable, @IntRange(from = 0) int min, @IntRange(from = 0) int max)", "public static boolean toggleUnderline(@NonNull Spannable spannable, @IntRange(from = 0) int min, @IntRange(from = 0) int max)", "private static long pack(int from, int to)", "private static int min(long packed)", "private static int max(long packed)", "private static boolean hasIntersection(int aMin, int aMax, int bMin, int bMax)", "private static long intersection(int aMin, int aMax, int bMin, int bMax)", "private static boolean isCovered(@NonNull Spannable spannable, @NonNull List<T> spans, @IntRange(from = 0) int min, @IntRange(from = 0) int max)" ],
  "variableNames" : [ ]
}