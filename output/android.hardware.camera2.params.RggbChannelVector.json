{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/params/RggbChannelVector.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "RggbChannelVector",
  "comment" : "\n * Immutable class to store a 4-element vector of floats indexable by a bayer RAW 2x2 pixel block.\n ",
  "variables" : [ {
    "name" : "COUNT",
    "type" : "int",
    "comment" : "\n     * The number of color channels in this vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "RED",
    "type" : "int",
    "comment" : " Red color channel in a bayer Raw pattern. ",
    "links" : [ ]
  }, {
    "name" : "GREEN_EVEN",
    "type" : "int",
    "comment" : " Green color channel in a bayer Raw pattern used by the even rows. ",
    "links" : [ ]
  }, {
    "name" : "GREEN_ODD",
    "type" : "int",
    "comment" : " Green color channel in a bayer Raw pattern used by the odd rows. ",
    "links" : [ ]
  }, {
    "name" : "BLUE",
    "type" : "int",
    "comment" : " Blue color channel in a bayer Raw pattern. ",
    "links" : [ ]
  }, {
    "name" : "mRed",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGreenEven",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGreenOdd",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlue",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final float getRed()",
    "returnType" : "float",
    "comment" : "\n     * Get the red component.\n     *\n     * @return a floating point value (guaranteed to be finite)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getGreenEven()",
    "returnType" : "float",
    "comment" : "\n     * Get the green (even rows) component.\n     *\n     * @return a floating point value (guaranteed to be finite)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getGreenOdd()",
    "returnType" : "float",
    "comment" : "\n     * Get the green (odd rows) component.\n     *\n     * @return a floating point value (guaranteed to be finite)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getBlue()",
    "returnType" : "float",
    "comment" : "\n     * Get the blue component.\n     *\n     * @return a floating point value (guaranteed to be finite)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getComponent(final int colorChannel)",
    "returnType" : "float",
    "comment" : "\n     * Get the component by the color channel index.\n     *\n     * <p>{@code colorChannel} must be one of {@link #RED}, {@link #GREEN_EVEN}, {@link #GREEN_ODD},\n     * {@link #BLUE}.</p>\n     *\n     * @param colorChannel greater or equal to {@code 0} and less than {@link #COUNT}\n     * @return a floating point value (guaranteed to be finite)\n     *\n     * @throws IllegalArgumentException if {@code colorChannel} was out of range\n     ",
    "links" : [ "#BLUE", "#COUNT", "#GREEN_ODD", "#GREEN_EVEN", "#RED" ]
  }, {
    "name" : "public void copyTo(final float[] destination, final int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy the vector into the destination in the order {@code [R, Geven, Godd, B]}.\n     *\n     * @param destination\n     *          an array big enough to hold at least {@value #COUNT} elements after the\n     *          {@code offset}\n     * @param offset\n     *          a non-negative offset into the array\n     *\n     * @throws NullPointerException\n     *          If {@code destination} was {@code null}\n     * @throws ArrayIndexOutOfBoundsException\n     *          If there's not enough room to write the elements at the specified destination and\n     *          offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link RggbChannelVector} is equal to another {@link RggbChannelVector}.\n     *\n     * <p>Two vectors are only equal if and only if each of the respective elements is equal.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "android.hardware.camera2.params.RggbChannelVector" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the RggbChannelVector as a string representation.\n     *\n     * <p> {@code \"RggbChannelVector{R:%f, G_even:%f, G_odd:%f, B:%f}\"}, where each\n     * {@code %f} respectively represents one of the the four color channels. </p>\n     *\n     * @return string representation of {@link RggbChannelVector}\n     ",
    "links" : [ "android.hardware.camera2.params.RggbChannelVector" ]
  }, {
    "name" : "private String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Return the RggbChannelVector as a string in compact form.\n     *\n     * <p> {@code \"{R:%f, G_even:%f, G_odd:%f, B:%f}\"}, where each {@code %f}\n     * respectively represents one of the the four color channels. </p>\n     *\n     * @return compact string representation of {@link RggbChannelVector}\n     ",
    "links" : [ "android.hardware.camera2.params.RggbChannelVector" ]
  } ],
  "variableNames" : [ "COUNT", "RED", "GREEN_EVEN", "GREEN_ODD", "BLUE", "mRed", "mGreenEven", "mGreenOdd", "mBlue" ],
  "methodNames" : [ "public final float getRed()", "public float getGreenEven()", "public float getGreenOdd()", "public float getBlue()", "public float getComponent(final int colorChannel)", "public void copyTo(final float[] destination, final int offset)", "public boolean equals(final Object obj)", "public int hashCode()", "public String toString()", "private String toShortString()" ]
}