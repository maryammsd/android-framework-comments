{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/ApplicationInfo.java",
  "packageName" : "android.content.pm",
  "className" : "ApplicationInfo",
  "comment" : "\n * Information you can retrieve about a particular application.  This\n * corresponds to information collected from the AndroidManifest.xml's\n * &lt;application&gt; tag.\n ",
  "variables" : [ {
    "name" : "taskAffinity",
    "type" : "String",
    "comment" : "\n     * Default task affinity of all activities in this application. See \n     * {@link ActivityInfo#taskAffinity} for more information.  This comes \n     * from the \"taskAffinity\" attribute. \n     ",
    "links" : [ "android.content.pm.ActivityInfo#taskAffinity" ]
  }, {
    "name" : "permission",
    "type" : "String",
    "comment" : "\n     * Optional name of a permission required to be able to access this\n     * application's components.  From the \"permission\" attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "processName",
    "type" : "String",
    "comment" : "\n     * The name of the process this application should run in.  From the\n     * \"process\" attribute or, if not set, the same as\n     * <var>packageName</var>.\n     ",
    "links" : [ ]
  }, {
    "name" : "className",
    "type" : "String",
    "comment" : "\n     * Class implementing the Application object.  From the \"class\"\n     * attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "descriptionRes",
    "type" : "int",
    "comment" : "\n     * A style resource identifier (in the package's resources) of the\n     * description of an application.  From the \"description\" attribute\n     * or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "theme",
    "type" : "int",
    "comment" : "\n     * A style resource identifier (in the package's resources) of the\n     * default visual theme of the application.  From the \"theme\" attribute\n     * or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "manageSpaceActivityName",
    "type" : "String",
    "comment" : "\n     * Class implementing the Application's manage space\n     * functionality.  From the \"manageSpaceActivity\"\n     * attribute. This is an optional attribute and will be null if\n     * applications don't specify it in their manifest\n     ",
    "links" : [ ]
  }, {
    "name" : "backupAgentName",
    "type" : "String",
    "comment" : "\n     * Class implementing the Application's backup functionality.  From\n     * the \"backupAgent\" attribute.  This is an optional attribute and\n     * will be null if the application does not specify it in its manifest.\n     * \n     * <p>If android:allowBackup is set to false, this attribute is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "fullBackupContent",
    "type" : "int",
    "comment" : "\n     * An optional attribute that indicates the app supports automatic backup of app data.\n     * <p>0 is the default and means the app's entire data folder + managed external storage will\n     * be backed up;\n     * Any negative value indicates the app does not support full-data backup, though it may still\n     * want to participate via the traditional key/value backup API;\n     * A positive number specifies an xml resource in which the application has defined its backup\n     * include/exclude criteria.\n     * <p>If android:allowBackup is set to false, this attribute is ignored.\n     *\n     * @see android.content.Context#getNoBackupFilesDir()\n     * @see #FLAG_ALLOW_BACKUP\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "crossProfile",
    "type" : "boolean",
    "comment" : "\n     * <code>true</code> if the package is capable of presenting a unified interface representing\n     * multiple profiles.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "uiOptions",
    "type" : "int",
    "comment" : "\n     * The default extra UI options for activities in this application.\n     * Set from the {@link android.R.attr#uiOptions} attribute in the\n     * activity's manifest.\n     ",
    "links" : [ "android.R.attr#uiOptions" ]
  }, {
    "name" : "FLAG_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: if set, this application is installed in the\n     * device's system image.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_DEBUGGABLE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to true if this application would like to\n     * allow debugging of its\n     * code, even when installed on a non-development system.  Comes\n     * from {@link android.R.styleable#AndroidManifestApplication_debuggable\n     * android:debuggable} of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_debuggableandroid", "#flags" ]
  }, {
    "name" : "FLAG_HAS_CODE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to true if this application has code\n     * associated with it.  Comes\n     * from {@link android.R.styleable#AndroidManifestApplication_hasCode\n     * android:hasCode} of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_hasCodeandroid", "#flags" ]
  }, {
    "name" : "FLAG_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to true if this application is persistent.\n     * Comes from {@link android.R.styleable#AndroidManifestApplication_persistent\n     * android:persistent} of the &lt;application&gt; tag.\n     ",
    "links" : [ "#flags", "android.R.styleable#AndroidManifestApplication_persistentandroid" ]
  }, {
    "name" : "FLAG_FACTORY_TEST",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to true if this application holds the\n     * {@link android.Manifest.permission#FACTORY_TEST} permission and the\n     * device is running in factory test mode.\n     ",
    "links" : [ "android.Manifest.permission#FACTORY_TEST", "#flags" ]
  }, {
    "name" : "FLAG_ALLOW_TASK_REPARENTING",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.\n     * Comes from {@link android.R.styleable#AndroidManifestApplication_allowTaskReparenting\n     * android:allowTaskReparenting} of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_allowTaskReparentingandroid", "#flags" ]
  }, {
    "name" : "FLAG_ALLOW_CLEAR_USER_DATA",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.\n     * Comes from {@link android.R.styleable#AndroidManifestApplication_allowClearUserData\n     * android:allowClearUserData} of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_allowClearUserDataandroid", "#flags" ]
  }, {
    "name" : "FLAG_UPDATED_SYSTEM_APP",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: this is set if this application has been\n     * installed as an update to a built-in system application.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_TEST_ONLY",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: this is set if the application has specified\n     * {@link android.R.styleable#AndroidManifestApplication_testOnly\n     * android:testOnly} to be true.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_testOnlyandroid", "#flags" ]
  }, {
    "name" : "FLAG_SUPPORTS_SMALL_SCREENS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application's window can be\n     * reduced in size for smaller screens.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_smallScreens\n     * android:smallScreens}.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_smallScreensandroid", "#flags" ]
  }, {
    "name" : "FLAG_SUPPORTS_NORMAL_SCREENS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application's window can be\n     * displayed on normal screens.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_normalScreens\n     * android:normalScreens}.\n     ",
    "links" : [ "#flags", "android.R.styleable#AndroidManifestSupportsScreens_normalScreensandroid" ]
  }, {
    "name" : "FLAG_SUPPORTS_LARGE_SCREENS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application's window can be\n     * increased in size for larger screens.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_largeScreens\n     * android:largeScreens}.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_largeScreensandroid", "#flags" ]
  }, {
    "name" : "FLAG_RESIZEABLE_FOR_SCREENS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application knows how to adjust\n     * its UI for different screen sizes.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_resizeable\n     * android:resizeable}.\n     ",
    "links" : [ "#flags", "android.R.styleable#AndroidManifestSupportsScreens_resizeableandroid" ]
  }, {
    "name" : "FLAG_SUPPORTS_SCREEN_DENSITIES",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application knows how to\n     * accommodate different screen densities.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_anyDensity\n     * android:anyDensity}.\n     *\n     * @deprecated Set by default when targeting API 4 or higher and apps\n     *             should not set this to false.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_anyDensityandroid", "#flags" ]
  }, {
    "name" : "FLAG_VM_SAFE_MODE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to true if this application would like to\n     * request the VM to operate under the safe mode. Comes from\n     * {@link android.R.styleable#AndroidManifestApplication_vmSafeMode\n     * android:vmSafeMode} of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_vmSafeModeandroid", "#flags" ]
  }, {
    "name" : "FLAG_ALLOW_BACKUP",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to <code>false</code> if the application does not wish\n     * to permit any OS-driven backups of its data; <code>true</code> otherwise.\n     * \n     * <p>Comes from the\n     * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}\n     * attribute of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_allowBackup", "#flags" ]
  }, {
    "name" : "FLAG_KILL_AFTER_RESTORE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: set to <code>false</code> if the application must be kept\n     * in memory following a full-system restore operation; <code>true</code> otherwise.\n     * Ordinarily, during a full system restore operation each application is shut down\n     * following execution of its agent's onRestore() method.  Setting this attribute to\n     * <code>false</code> prevents this.  Most applications will not need to set this attribute.\n     *\n     * <p>If\n     * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}\n     * is set to <code>false</code> or no\n     * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}\n     * is specified, this flag will be ignored.\n     *\n     * <p>Comes from the\n     * {@link android.R.styleable#AndroidManifestApplication_killAfterRestore android:killAfterRestore}\n     * attribute of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_allowBackup", "#flags", "android.R.styleable#AndroidManifestApplication_backupAgent", "android.R.styleable#AndroidManifestApplication_killAfterRestore" ]
  }, {
    "name" : "FLAG_RESTORE_ANY_VERSION",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: Set to <code>true</code> if the application's backup\n     * agent claims to be able to handle restore data even \"from the future,\"\n     * i.e. from versions of the application with a versionCode greater than\n     * the one currently installed on the device.  <i>Use with caution!</i>  By default\n     * this attribute is <code>false</code> and the Backup Manager will ensure that data\n     * from \"future\" versions of the application are never supplied during a restore operation.\n     *\n     * <p>If\n     * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}\n     * is set to <code>false</code> or no\n     * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}\n     * is specified, this flag will be ignored.\n     *\n     * <p>Comes from the\n     * {@link android.R.styleable#AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}\n     * attribute of the &lt;application&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_restoreAnyVersion", "android.R.styleable#AndroidManifestApplication_allowBackup", "#flags", "android.R.styleable#AndroidManifestApplication_backupAgent" ]
  }, {
    "name" : "FLAG_EXTERNAL_STORAGE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: Set to true if the application is\n     * currently installed on external/removable/unprotected storage.  Such\n     * applications may not be available if their storage is not currently\n     * mounted.  When the storage it is on is not available, it will look like\n     * the application has been uninstalled (its .apk is no longer available)\n     * but its persistent data is not removed.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SUPPORTS_XLARGE_SCREENS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application's window can be\n     * increased in size for extra large screens.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_xlargeScreens\n     * android:xlargeScreens}.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_xlargeScreensandroid", "#flags" ]
  }, {
    "name" : "FLAG_LARGE_HEAP",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application has requested a\n     * large heap for its processes.  Corresponds to\n     * {@link android.R.styleable#AndroidManifestApplication_largeHeap\n     * android:largeHeap}.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_largeHeapandroid", "#flags" ]
  }, {
    "name" : "FLAG_STOPPED",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true if this application's package is in\n     * the stopped state.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SUPPORTS_RTL",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true  when the application is willing to support\n     * RTL (right to left). All activities will inherit this value.\n     *\n     * Set from the {@link android.R.attr#supportsRtl} attribute in the\n     * activity's manifest.\n     *\n     * Default value is false (no support for RTL).\n     ",
    "links" : [ "#flags", "android.R.attr#supportsRtl" ]
  }, {
    "name" : "FLAG_INSTALLED",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true if the application is currently\n     * installed for the calling user.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_IS_DATA_ONLY",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true if the application only has its\n     * data installed; the application package itself does not currently\n     * exist on the device.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_IS_GAME",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true if the application was declared to be a\n     * game, or false if it is a non-game application.\n     *\n     * @deprecated use {@link #CATEGORY_GAME} instead.\n     ",
    "links" : [ "#CATEGORY_GAME", "#flags" ]
  }, {
    "name" : "FLAG_FULL_BACKUP_ONLY",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: {@code true} if the application asks that only\n     * full-data streaming backups of its data be performed even though it defines\n     * a {@link android.app.backup.BackupAgent BackupAgent}, which normally\n     * indicates that the app will manage its backed-up data via incremental\n     * key/value updates.\n     ",
    "links" : [ "#flags", "android.app.backup.BackupAgent" ]
  }, {
    "name" : "FLAG_USES_CLEARTEXT_TRAFFIC",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: {@code true} if the application may use cleartext network traffic\n     * (e.g., HTTP rather than HTTPS; WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP\n     * without STARTTLS or TLS). If {@code false}, the app declares that it does not intend to use\n     * cleartext network traffic, in which case platform components (e.g., HTTP stacks,\n     * {@code DownloadManager}, {@code MediaPlayer}) will refuse app's requests to use cleartext\n     * traffic. Third-party libraries are encouraged to honor this flag as well.\n     *\n     * <p>NOTE: {@code WebView} honors this flag for applications targeting API level 26 and up.\n     *\n     * <p>This flag is ignored on Android N and above if an Android Network Security Config is\n     * present.\n     *\n     * <p>This flag comes from\n     * {@link android.R.styleable#AndroidManifestApplication_usesCleartextTraffic\n     * android:usesCleartextTraffic} of the &lt;application&gt; tag.\n     ",
    "links" : [ "#flags", "android.R.styleable#AndroidManifestApplication_usesCleartextTrafficandroid" ]
  }, {
    "name" : "FLAG_EXTRACT_NATIVE_LIBS",
    "type" : "int",
    "comment" : "\n     * When set installer extracts native libs from .apk files.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HARDWARE_ACCELERATED",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: {@code true} when the application's rendering\n     * should be hardware accelerated.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SUSPENDED",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true if this application's package is in\n     * the suspended state.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_MULTIARCH",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true if code from this application will need to be\n     * loaded into other applications' processes. On devices that support multiple\n     * instruction sets, this implies the code might be loaded into a process that's\n     * using any of the devices supported instruction sets.\n     *\n     * <p> The system might treat such applications specially, for eg., by\n     * extracting the application's native libraries for all supported instruction\n     * sets or by compiling the application's dex code for all supported instruction\n     * sets.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Flags associated with the application.  Any combination of\n     * {@link #FLAG_SYSTEM}, {@link #FLAG_DEBUGGABLE}, {@link #FLAG_HAS_CODE},\n     * {@link #FLAG_PERSISTENT}, {@link #FLAG_FACTORY_TEST}, and\n     * {@link #FLAG_ALLOW_TASK_REPARENTING}\n     * {@link #FLAG_ALLOW_CLEAR_USER_DATA}, {@link #FLAG_UPDATED_SYSTEM_APP},\n     * {@link #FLAG_TEST_ONLY}, {@link #FLAG_SUPPORTS_SMALL_SCREENS},\n     * {@link #FLAG_SUPPORTS_NORMAL_SCREENS},\n     * {@link #FLAG_SUPPORTS_LARGE_SCREENS}, {@link #FLAG_SUPPORTS_XLARGE_SCREENS},\n     * {@link #FLAG_RESIZEABLE_FOR_SCREENS},\n     * {@link #FLAG_SUPPORTS_SCREEN_DENSITIES}, {@link #FLAG_VM_SAFE_MODE},\n     * {@link #FLAG_ALLOW_BACKUP}, {@link #FLAG_KILL_AFTER_RESTORE},\n     * {@link #FLAG_RESTORE_ANY_VERSION}, {@link #FLAG_EXTERNAL_STORAGE},\n     * {@link #FLAG_LARGE_HEAP}, {@link #FLAG_STOPPED},\n     * {@link #FLAG_SUPPORTS_RTL}, {@link #FLAG_INSTALLED},\n     * {@link #FLAG_IS_DATA_ONLY}, {@link #FLAG_IS_GAME},\n     * {@link #FLAG_FULL_BACKUP_ONLY}, {@link #FLAG_USES_CLEARTEXT_TRAFFIC},\n     * {@link #FLAG_MULTIARCH}.\n     ",
    "links" : [ "#FLAG_IS_GAME", "#FLAG_EXTERNAL_STORAGE", "#FLAG_KILL_AFTER_RESTORE", "#FLAG_SUPPORTS_RTL", "#FLAG_ALLOW_BACKUP", "#FLAG_RESTORE_ANY_VERSION", "#FLAG_SYSTEM", "#FLAG_VM_SAFE_MODE", "#FLAG_INSTALLED", "#FLAG_SUPPORTS_SMALL_SCREENS", "#FLAG_SUPPORTS_SCREEN_DENSITIES", "#FLAG_RESIZEABLE_FOR_SCREENS", "#FLAG_ALLOW_TASK_REPARENTING", "#FLAG_TEST_ONLY", "#FLAG_USES_CLEARTEXT_TRAFFIC", "#FLAG_UPDATED_SYSTEM_APP", "#FLAG_PERSISTENT", "#FLAG_FULL_BACKUP_ONLY", "#FLAG_DEBUGGABLE", "#FLAG_FACTORY_TEST", "#FLAG_STOPPED", "#FLAG_LARGE_HEAP", "#FLAG_IS_DATA_ONLY", "#FLAG_SUPPORTS_LARGE_SCREENS", "#FLAG_SUPPORTS_NORMAL_SCREENS", "#FLAG_HAS_CODE", "#FLAG_ALLOW_CLEAR_USER_DATA", "#FLAG_SUPPORTS_XLARGE_SCREENS", "#FLAG_MULTIARCH" ]
  }, {
    "name" : "PRIVATE_FLAG_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: true if the application is hidden via restrictions and for\n     * most purposes is considered as not installed.\n     * {@hide}\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_CANT_SAVE_STATE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: set to <code>true</code> if the application\n     * has reported that it is heavy-weight, and thus can not participate in\n     * the normal application lifecycle.\n     *\n     * <p>Comes from the\n     * android.R.styleable#AndroidManifestApplication_cantSaveState\n     * attribute of the &lt;application&gt; tag.\n     *\n     * {@hide}\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_PRIVILEGED",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: set to {@code true} if the application\n     * is permitted to hold privileged permissions.\n     *\n     * {@hide}\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_HAS_DOMAIN_URLS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: {@code true} if the application has any IntentFiler\n     * with some data URI using HTTP or HTTPS with an associated VIEW action.\n     *\n     * {@hide}\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_DEFAULT_TO_DEVICE_PROTECTED_STORAGE",
    "type" : "int",
    "comment" : "\n     * When set, the default data storage directory for this app is pointed at\n     * the device-protected location.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_DIRECT_BOOT_AWARE",
    "type" : "int",
    "comment" : "\n     * When set, assume that all components under the given app are direct boot\n     * aware, unless otherwise specified.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_INSTANT",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: {@code true} if the application is installed\n     * as instant app.\n     *\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_PARTIALLY_DIRECT_BOOT_AWARE",
    "type" : "int",
    "comment" : "\n     * When set, at least one component inside this application is direct boot\n     * aware.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_REQUIRED_FOR_SYSTEM_USER",
    "type" : "int",
    "comment" : "\n     * When set, signals that the application is required for the system user and should not be\n     * uninstalled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE",
    "type" : "int",
    "comment" : "\n     * When set, the application explicitly requested that its activities be resizeable by default.\n     * @see android.R.styleable#AndroidManifestActivity_resizeableActivity\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_UNRESIZEABLE",
    "type" : "int",
    "comment" : "\n     * When set, the application explicitly requested that its activities *not* be resizeable by\n     * default.\n     * @see android.R.styleable#AndroidManifestActivity_resizeableActivity\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION",
    "type" : "int",
    "comment" : "\n     * The application isn't requesting explicitly requesting for its activities to be resizeable or\n     * non-resizeable by default. So, we are making it activities resizeable by default based on the\n     * target SDK version of the app.\n     * @see android.R.styleable#AndroidManifestActivity_resizeableActivity\n     *\n     * NOTE: This only affects apps with target SDK >= N where the resizeableActivity attribute was\n     * introduced. It shouldn't be confused with {@link ActivityInfo#RESIZE_MODE_FORCE_RESIZEABLE}\n     * where certain pre-N apps are forced to the resizeable.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo#RESIZE_MODE_FORCE_RESIZEABLE" ]
  }, {
    "name" : "PRIVATE_FLAG_BACKUP_IN_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: {@code true} means the OS should go ahead and\n     * run full-data backup operations for the app even when it is in a\n     * foreground-equivalent run state.  Defaults to {@code false} if unspecified.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_STATIC_SHARED_LIBRARY",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: {@code true} means this application\n     * contains a static shared library. Defaults to {@code false} if unspecified.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_ISOLATED_SPLIT_LOADING",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: When set, the application will only have its splits loaded\n     * if they are required to load a component. Splits can be loaded on demand using the\n     * {@link Context#createContextForSplit(String)} API.\n     * @hide\n     ",
    "links" : [ "#privateFlags", "android.content.Context#createContextForSplit(String)" ]
  }, {
    "name" : "PRIVATE_FLAG_VIRTUAL_PRELOAD",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: When set, the application was installed as\n     * a virtual preload.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_OEM",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: whether this app is pre-installed on the\n     * OEM partition of the system image.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_VENDOR",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: whether this app is pre-installed on the\n     * vendor partition of the system image.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_PRODUCT",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: whether this app is pre-installed on the\n     * product partition of the system image.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_SIGNED_WITH_PLATFORM_KEY",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: whether this app is signed with the\n     * platform key.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_SYSTEM_EXT",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: whether this app is pre-installed on the\n     * system_ext partition of the system image.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_USES_NON_SDK_API",
    "type" : "int",
    "comment" : "\n     * Indicates whether this package requires access to non-SDK APIs.\n     * Only system apps and tests are allowed to use this property.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_PROFILEABLE_BY_SHELL",
    "type" : "int",
    "comment" : "\n     * Indicates whether this application can be profiled by the shell user,\n     * even when running on a device that is running in user mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_HAS_FRAGILE_USER_DATA",
    "type" : "int",
    "comment" : "\n     * Indicates whether this package requires access to non-SDK APIs.\n     * Only system apps and tests are allowed to use this property.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_USE_EMBEDDED_DEX",
    "type" : "int",
    "comment" : "\n     * Indicates whether this application wants to use the embedded dex in the APK, rather than\n     * extracted or locally compiled variants. This keeps the dex code protected by the APK\n     * signature. Such apps will always run in JIT mode (same when they are first installed), and\n     * the system will never generate ahead-of-time compiled code for them. Depending on the app's\n     * workload, there may be some run time performance change, noteably the cold start time.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_ALLOW_CLEAR_USER_DATA_ON_FAILED_RESTORE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: indicates whether this application's data will be cleared\n     * on a failed restore.\n     *\n     * <p>Comes from the\n     * android.R.styleable#AndroidManifestApplication_allowClearUserDataOnFailedRestore attribute\n     * of the &lt;application&gt; tag.\n     *\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_ALLOW_AUDIO_PLAYBACK_CAPTURE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: true if the application allows its audio playback\n     * to be captured by other apps.\n     *\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_IS_RESOURCE_OVERLAY",
    "type" : "int",
    "comment" : "\n     * Indicates whether this package is in fact a runtime resource overlay.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_FLAG_REQUEST_LEGACY_EXTERNAL_STORAGE",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: If {@code true} this app requests\n     * full external storage access. The request may not be honored due to\n     * policy or other reasons.\n     *\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_ODM",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: whether this app is pre-installed on the\n     * ODM partition of the system image.\n     * @hide\n     ",
    "links" : [ "#privateFlags" ]
  }, {
    "name" : "PRIVATE_FLAG_ALLOW_NATIVE_HEAP_POINTER_TAGGING",
    "type" : "int",
    "comment" : "\n     * Value for {@link #privateFlags}: If {@code true} this app allows heap tagging.\n     * {@link com.android.server.am.ProcessList#NATIVE_HEAP_POINTER_TAGGING}\n     * @hide\n     ",
    "links" : [ "#privateFlags", "com.android.server.am.ProcessList#NATIVE_HEAP_POINTER_TAGGING" ]
  }, {
    "name" : "AUTO_REVOKE_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>allowed</code> in the\n     * {@link android.R.attr#autoRevokePermissions} attribute.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#autoRevokePermissions" ]
  }, {
    "name" : "AUTO_REVOKE_DISCOURAGED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>discouraged</code> in the\n     * {@link android.R.attr#autoRevokePermissions} attribute.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#autoRevokePermissions" ]
  }, {
    "name" : "AUTO_REVOKE_DISALLOWED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>disallowed</code> in the\n     * {@link android.R.attr#autoRevokePermissions} attribute.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#autoRevokePermissions" ]
  }, {
    "name" : "privateFlags",
    "type" : "int",
    "comment" : "\n     * Private/hidden flags. See {@code PRIVATE_FLAG_...} constants.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_PRELOADED_FONTS",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "requiresSmallestWidthDp",
    "type" : "int",
    "comment" : "\n     * The required smallest screen width the application can run on.  If 0,\n     * nothing has been specified.  Comes from\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_requiresSmallestWidthDp\n     * android:requiresSmallestWidthDp} attribute of the &lt;supports-screens&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_requiresSmallestWidthDpandroid" ]
  }, {
    "name" : "compatibleWidthLimitDp",
    "type" : "int",
    "comment" : "\n     * The maximum smallest screen width the application is designed for.  If 0,\n     * nothing has been specified.  Comes from\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_compatibleWidthLimitDp\n     * android:compatibleWidthLimitDp} attribute of the &lt;supports-screens&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_compatibleWidthLimitDpandroid" ]
  }, {
    "name" : "largestWidthLimitDp",
    "type" : "int",
    "comment" : "\n     * The maximum smallest screen width the application will work on.  If 0,\n     * nothing has been specified.  Comes from\n     * {@link android.R.styleable#AndroidManifestSupportsScreens_largestWidthLimitDp\n     * android:largestWidthLimitDp} attribute of the &lt;supports-screens&gt; tag.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestSupportsScreens_largestWidthLimitDpandroid" ]
  }, {
    "name" : "maxAspectRatio",
    "type" : "float",
    "comment" : "\n     * Value indicating the maximum aspect ratio the application supports.\n     * <p>\n     * 0 means unset.\n     * @See {@link android.R.attr#maxAspectRatio}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#maxAspectRatio" ]
  }, {
    "name" : "minAspectRatio",
    "type" : "float",
    "comment" : "\n     * Value indicating the minimum aspect ratio the application supports.\n     * <p>\n     * 0 means unset.\n     * @see {@link android.R.attr#minAspectRatio}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#minAspectRatio" ]
  }, {
    "name" : "volumeUuid",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "storageUuid",
    "type" : "UUID",
    "comment" : "\n     * UUID of the storage volume on which this application is being hosted. For\n     * apps hosted on the default internal storage at\n     * {@link Environment#getDataDirectory()}, the UUID value is\n     * {@link StorageManager#UUID_DEFAULT}.\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT", "android.os.Environment#getDataDirectory()" ]
  }, {
    "name" : "scanSourceDir",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "scanPublicSourceDir",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sourceDir",
    "type" : "String",
    "comment" : "\n     * Full path to the base APK for this application.\n     ",
    "links" : [ ]
  }, {
    "name" : "publicSourceDir",
    "type" : "String",
    "comment" : "\n     * Full path to the publicly available parts of {@link #sourceDir},\n     * including resources and manifest. This may be different from\n     * {@link #sourceDir} if an application is forward locked.\n     ",
    "links" : [ "#sourceDir" ]
  }, {
    "name" : "splitNames",
    "type" : "String[]",
    "comment" : "\n     * The names of all installed split APKs, ordered lexicographically.\n     ",
    "links" : [ ]
  }, {
    "name" : "splitSourceDirs",
    "type" : "String[]",
    "comment" : "\n     * Full paths to zero or more split APKs, indexed by the same order as {@link #splitNames}.\n     ",
    "links" : [ "#splitNames" ]
  }, {
    "name" : "splitPublicSourceDirs",
    "type" : "String[]",
    "comment" : "\n     * Full path to the publicly available parts of {@link #splitSourceDirs},\n     * including resources and manifest. This may be different from\n     * {@link #splitSourceDirs} if an application is forward locked.\n     *\n     * @see #splitSourceDirs\n     ",
    "links" : [ "#splitSourceDirs" ]
  }, {
    "name" : "splitDependencies",
    "type" : "SparseArray<int[]>",
    "comment" : "\n     * Maps the dependencies between split APKs. All splits implicitly depend on the base APK.\n     *\n     * Available since platform version O.\n     *\n     * Only populated if the application opts in to isolated split loading via the\n     * {@link android.R.attr.isolatedSplits} attribute in the &lt;manifest&gt; tag of the app's\n     * AndroidManifest.xml.\n     *\n     * The keys and values are all indices into the {@link #splitNames}, {@link #splitSourceDirs},\n     * and {@link #splitPublicSourceDirs} arrays.\n     * Each key represents a split and its value is an array of splits. The first element of this\n     * array is the parent split, and the rest are configuration splits. These configuration splits\n     * have no dependencies themselves.\n     * Cycles do not exist because they are illegal and screened for during installation.\n     *\n     * May be null if no splits are installed, or if no dependencies exist between them.\n     *\n     * NOTE: Any change to the way split dependencies are stored must update the logic that\n     *       creates the class loader context for dexopt (DexoptUtils#getClassLoaderContexts).\n     *\n     * @hide\n     ",
    "links" : [ "#splitPublicSourceDirs", "#splitSourceDirs", "android.R.attr.isolatedSplits", "#splitNames" ]
  }, {
    "name" : "resourceDirs",
    "type" : "String[]",
    "comment" : "\n     * Full paths to the locations of extra resource packages (runtime overlays)\n     * this application uses. This field is only used if there are extra resource\n     * packages, otherwise it is null.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "seInfo",
    "type" : "String",
    "comment" : "\n     * String retrieved from the seinfo tag found in selinux policy. This value can be set through\n     * the mac_permissions.xml policy construct. This value is used for setting an SELinux security\n     * context on the process as well as its data directory.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "seInfoUser",
    "type" : "String",
    "comment" : "\n     * The seinfo tag generated per-user. This value may change based upon the\n     * user's configuration. For example, when an instant app is installed for\n     * a user. It is an error if this field is ever {@code null} when trying to\n     * start a new process.\n     * <p>NOTE: We need to separate this out because we modify per-user values\n     * multiple times. This needs to be refactored since we're performing more\n     * work than necessary and these values should only be set once. When that\n     * happens, we can merge the per-user value with the seInfo state above.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "sharedLibraryFiles",
    "type" : "String[]",
    "comment" : "\n     * Paths to all shared libraries this application is linked against.  This\n     * field is only set if the {@link PackageManager#GET_SHARED_LIBRARY_FILES\n     * PackageManager.GET_SHARED_LIBRARY_FILES} flag was used when retrieving\n     * the structure.\n     ",
    "links" : [ "android.content.pm.PackageManager#GET_SHARED_LIBRARY_FILESPackageManager.GET_SHARED_LIBRARY_FILES" ]
  }, {
    "name" : "sharedLibraryInfos",
    "type" : "List<SharedLibraryInfo>",
    "comment" : "\n     * List of all shared libraries this application is linked against.  This\n     * field is only set if the {@link PackageManager#GET_SHARED_LIBRARY_FILES\n     * PackageManager.GET_SHARED_LIBRARY_FILES} flag was used when retrieving\n     * the structure.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.content.pm.PackageManager#GET_SHARED_LIBRARY_FILESPackageManager.GET_SHARED_LIBRARY_FILES" ]
  }, {
    "name" : "dataDir",
    "type" : "String",
    "comment" : "\n     * Full path to the default directory assigned to the package for its\n     * persistent data.\n     ",
    "links" : [ ]
  }, {
    "name" : "deviceProtectedDataDir",
    "type" : "String",
    "comment" : "\n     * Full path to the device-protected directory assigned to the package for\n     * its persistent data.\n     *\n     * @see Context#createDeviceProtectedStorageContext()\n     ",
    "links" : [ ]
  }, {
    "name" : "credentialProtectedDataDir",
    "type" : "String",
    "comment" : "\n     * Full path to the credential-protected directory assigned to the package\n     * for its persistent data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "nativeLibraryDir",
    "type" : "String",
    "comment" : "\n     * Full path to the directory where native JNI libraries are stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "secondaryNativeLibraryDir",
    "type" : "String",
    "comment" : "\n     * Full path where unpacked native libraries for {@link #secondaryCpuAbi}\n     * are stored, if present.\n     *\n     * The main reason this exists is for bundled multi-arch apps, where\n     * it's not trivial to calculate the location of libs for the secondary abi\n     * given the location of the primary.\n     *\n     * TODO: Change the layout of bundled installs so that we can use\n     * nativeLibraryRootDir & nativeLibraryRootRequiresIsa there as well.\n     * (e.g {@code [ \"/system/app-lib/Foo/arm\", \"/system/app-lib/Foo/arm64\" ]}\n     * instead of {@code [ \"/system/lib/Foo\", \"/system/lib64/Foo\" ]}.\n     *\n     * @hide\n     ",
    "links" : [ "#secondaryCpuAbi" ]
  }, {
    "name" : "nativeLibraryRootDir",
    "type" : "String",
    "comment" : "\n     * The root path where unpacked native libraries are stored.\n     * <p>\n     * When {@link #nativeLibraryRootRequiresIsa} is set, the libraries are\n     * placed in ISA-specific subdirectories under this path, otherwise the\n     * libraries are placed directly at this path.\n     *\n     * @hide\n     ",
    "links" : [ "#nativeLibraryRootRequiresIsa" ]
  }, {
    "name" : "nativeLibraryRootRequiresIsa",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating that ISA must be appended to\n     * {@link #nativeLibraryRootDir} to be useful.\n     *\n     * @hide\n     ",
    "links" : [ "#nativeLibraryRootDir" ]
  }, {
    "name" : "primaryCpuAbi",
    "type" : "String",
    "comment" : "\n     * The primary ABI that this application requires, This is inferred from the ABIs\n     * of the native JNI libraries the application bundles. Will be {@code null}\n     * if this application does not require any particular ABI.\n     *\n     * If non-null, the application will always be launched with this ABI.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "secondaryCpuAbi",
    "type" : "String",
    "comment" : "\n     * The secondary ABI for this application. Might be non-null for multi-arch\n     * installs. The application itself never uses this ABI, but other applications that\n     * use its code might.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "uid",
    "type" : "int",
    "comment" : "\n     * The kernel user-ID that has been assigned to this application;\n     * currently this is not a unique ID (multiple applications can have\n     * the same uid).\n     ",
    "links" : [ ]
  }, {
    "name" : "minSdkVersion",
    "type" : "int",
    "comment" : "\n     * The minimum SDK version this application can run on. It will not run\n     * on earlier versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "targetSdkVersion",
    "type" : "int",
    "comment" : "\n     * The minimum SDK version this application targets.  It may run on earlier\n     * versions, but it knows how to work with any new behavior added at this\n     * version.  Will be {@link android.os.Build.VERSION_CODES#CUR_DEVELOPMENT}\n     * if this is a development build and the app is targeting that.  You should\n     * compare that this number is >= the SDK version number at which your\n     * behavior was introduced.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#CUR_DEVELOPMENT" ]
  }, {
    "name" : "longVersionCode",
    "type" : "long",
    "comment" : "\n     * The app's declared version code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "versionCode",
    "type" : "int",
    "comment" : "\n     * An integer representation of the app's declared version code. This is being left in place as\n     * some apps were using reflection to access it before the move to long in\n     * {@link android.os.Build.VERSION_CODES#P}\n     * @deprecated Use {@link #longVersionCode} instead.\n     * @hide\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "#longVersionCode" ]
  }, {
    "name" : "compileSdkVersion",
    "type" : "int",
    "comment" : "\n     * The user-visible SDK version (ex. 26) of the framework against which the application claims\n     * to have been compiled, or {@code 0} if not specified.\n     * <p>\n     * This property is the compile-time equivalent of\n     * {@link android.os.Build.VERSION#CODENAME Build.VERSION.SDK_INT}.\n     *\n     * @hide For platform use only; we don't expect developers to need to read this value.\n     ",
    "links" : [ "android.os.Build.VERSION#CODENAME" ]
  }, {
    "name" : "compileSdkVersionCodename",
    "type" : "String",
    "comment" : "\n     * The development codename (ex. \"O\", \"REL\") of the framework against which the application\n     * claims to have been compiled, or {@code null} if not specified.\n     * <p>\n     * This property is the compile-time equivalent of\n     * {@link android.os.Build.VERSION#CODENAME Build.VERSION.CODENAME}.\n     *\n     * @hide For platform use only; we don't expect developers to need to read this value.\n     ",
    "links" : [ "android.os.Build.VERSION#CODENAME" ]
  }, {
    "name" : "enabled",
    "type" : "boolean",
    "comment" : "\n     * When false, indicates that all components within this application are\n     * considered disabled, regardless of their individually set enabled status.\n     ",
    "links" : [ ]
  }, {
    "name" : "enabledSetting",
    "type" : "int",
    "comment" : "\n     * For convenient access to the current enabled setting of this app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "installLocation",
    "type" : "int",
    "comment" : "\n     * For convenient access to package's install location.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "networkSecurityConfigRes",
    "type" : "int",
    "comment" : "\n     * Resource file providing the application's Network Security Config.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "targetSandboxVersion",
    "type" : "int",
    "comment" : "\n     * Version of the sandbox the application wants to run in.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "appComponentFactory",
    "type" : "String",
    "comment" : "\n     * The factory of this package, as specified by the &lt;manifest&gt;\n     * tag's {@link android.R.styleable#AndroidManifestApplication_appComponentFactory}\n     * attribute.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestApplication_appComponentFactory" ]
  }, {
    "name" : "iconRes",
    "type" : "int",
    "comment" : "\n     * Resource id of {@link com.android.internal.R.styleable.AndroidManifestProvider_icon}\n     * @hide\n     ",
    "links" : [ "com.android.internal.R.styleable.AndroidManifestProvider_icon" ]
  }, {
    "name" : "roundIconRes",
    "type" : "int",
    "comment" : "\n     * Resource id of {@link com.android.internal.R.styleable.AndroidManifestProvider_roundIcon}\n     * @hide\n     ",
    "links" : [ "com.android.internal.R.styleable.AndroidManifestProvider_roundIcon" ]
  }, {
    "name" : "category",
    "type" : "int",
    "comment" : "\n     * The category of this app. Categories are used to cluster multiple apps\n     * together into meaningful groups, such as when summarizing battery,\n     * network, or disk usage. Apps should only define this value when they fit\n     * well into one of the specific categories.\n     * <p>\n     * Set from the {@link android.R.attr#appCategory} attribute in the\n     * manifest. If the manifest doesn't define a category, this value may have\n     * been provided by the installer via\n     * {@link PackageManager#setApplicationCategoryHint(String, int)}.\n     ",
    "links" : [ "android.content.pm.PackageManager#setApplicationCategoryHint(String", "android.R.attr#appCategory" ]
  }, {
    "name" : "CATEGORY_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Value when category is undefined.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_GAME",
    "type" : "int",
    "comment" : "\n     * Category for apps which are primarily games.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_AUDIO",
    "type" : "int",
    "comment" : "\n     * Category for apps which primarily work with audio or music, such as music\n     * players.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_VIDEO",
    "type" : "int",
    "comment" : "\n     * Category for apps which primarily work with video or movies, such as\n     * streaming video apps.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_IMAGE",
    "type" : "int",
    "comment" : "\n     * Category for apps which primarily work with images or photos, such as\n     * camera or gallery apps.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_SOCIAL",
    "type" : "int",
    "comment" : "\n     * Category for apps which are primarily social apps, such as messaging,\n     * communication, email, or social network apps.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_NEWS",
    "type" : "int",
    "comment" : "\n     * Category for apps which are primarily news apps, such as newspapers,\n     * magazines, or sports apps.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_MAPS",
    "type" : "int",
    "comment" : "\n     * Category for apps which are primarily maps apps, such as navigation apps.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_PRODUCTIVITY",
    "type" : "int",
    "comment" : "\n     * Category for apps which are primarily productivity apps, such as cloud\n     * storage or workplace apps.\n     *\n     * @see #category\n     ",
    "links" : [ ]
  }, {
    "name" : "classLoaderName",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "splitClassLoaderNames",
    "type" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "hiddenUntilInstalled",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "zygotePreloadName",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "GWP_ASAN_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default (unspecified) setting of GWP-ASan.\n     ",
    "links" : [ ]
  }, {
    "name" : "GWP_ASAN_NEVER",
    "type" : "int",
    "comment" : "\n     * Never enable GWP-ASan in this application or process.\n     ",
    "links" : [ ]
  }, {
    "name" : "GWP_ASAN_ALWAYS",
    "type" : "int",
    "comment" : "\n     * Always enable GWP-ASan in this application or process.\n     ",
    "links" : [ ]
  }, {
    "name" : "gwpAsanMode",
    "type" : "int",
    "comment" : "\n     * Indicates if the application has requested GWP-ASan to be enabled, disabled, or left\n     * unspecified. Processes can override this setting.\n     ",
    "links" : [ ]
  }, {
    "name" : "HIDDEN_API_ENFORCEMENT_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Represents the default policy. The actual policy used will depend on other properties of\n     * the application, e.g. the target SDK version.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HIDDEN_API_ENFORCEMENT_DISABLED",
    "type" : "int",
    "comment" : "\n     * No API enforcement; the app can access the entire internal private API. Only for use by\n     * system apps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HIDDEN_API_ENFORCEMENT_JUST_WARN",
    "type" : "int",
    "comment" : "\n     * No API enforcement, but enable the detection logic and warnings. Observed behaviour is the\n     * same as {@link #HIDDEN_API_ENFORCEMENT_DISABLED} but you may see warnings in the log when\n     * APIs are accessed.\n     * @hide\n     * ",
    "links" : [ "#HIDDEN_API_ENFORCEMENT_DISABLED" ]
  }, {
    "name" : "HIDDEN_API_ENFORCEMENT_ENABLED",
    "type" : "int",
    "comment" : "\n     * Dark grey list enforcement. Enforces the dark grey and black lists\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HIDDEN_API_ENFORCEMENT_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HIDDEN_API_ENFORCEMENT_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHiddenApiPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ApplicationInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CharSequence getCategoryTitle(Context context, @Category int category)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return a concise, localized title for the given\n     * {@link ApplicationInfo#category} value, or {@code null} for unknown\n     * values such as {@link #CATEGORY_UNDEFINED}.\n     *\n     * @see #category\n     ",
    "links" : [ "android.content.pm.ApplicationInfo#category", "#CATEGORY_UNDEFINED" ]
  }, {
    "name" : "public static boolean isValidHiddenApiEnforcementPolicy(int policy)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix, int dumpFlags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId, int dumpFlags)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasRtlSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if \"supportsRtl\" has been set to true in the AndroidManifest\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCode()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadDescription(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the textual description of the application.  This\n     * will call back on the given PackageManager to load the description from\n     * the application.\n     *\n     * @param pm A PackageManager from which the label can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a CharSequence containing the application's description.\n     * If there is no description, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableCompatibilityMode()",
    "returnType" : "void",
    "comment" : "\n     * Disable compatibility mode\n     * \n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean usesCompatibilityMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Is using compatibility mode for non densty aware legacy applications.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initForUser(int userId)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPackageWhitelistedForHiddenApis()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean usesNonSdkApi()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFragileUserData()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether an app needs to keep the app data on uninstall.\n     *\n     * @return {@code true} if the app indicates that it needs to keep the app data\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAudioPlaybackCaptureAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether an app allows its playback audio to be captured by other apps.\n     *\n     * @return {@code true} if the app indicates that its audio can be captured by other apps.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasRequestedLegacyExternalStorage()",
    "returnType" : "boolean",
    "comment" : "\n     * If {@code true} this app requested to run in the legacy storage mode.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowsNativeHeapPointerTagging()",
    "returnType" : "boolean",
    "comment" : "\n     * If {@code true} this app allows heap pointer tagging.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isAllowedToUseHiddenApis()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHiddenApiEnforcementPolicy()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHiddenApiEnforcementPolicy(@HiddenApiEnforcementPolicy int policy)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void maybeUpdateHiddenApiEnforcementPolicy(@HiddenApiEnforcementPolicy int policy)",
    "returnType" : "void",
    "comment" : "\n     * Updates the hidden API enforcement policy for this app from the given values, if appropriate.\n     *\n     * This will have no effect if this app is not subject to hidden API enforcement, i.e. if it\n     * is on the package whitelist.\n     *\n     * @param policy configured policy for this app, or {@link #HIDDEN_API_ENFORCEMENT_DEFAULT}\n     *        if nothing configured.\n     * @hide\n     ",
    "links" : [ "#HIDDEN_API_ENFORCEMENT_DEFAULT" ]
  }, {
    "name" : "public void setVersionCode(long newVersionCode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadDefaultIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPackageUnavailable(PackageManager pm)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultToDeviceProtectedStorage()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDirectBootAware()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEncryptionAware()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the application is encryption aware.\n     *\n     * @see #isDirectBootAware()\n     * @see #isPartiallyDirectBootAware()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExternal()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantApp()",
    "returnType" : "boolean",
    "comment" : "\n     * True if the application is installed as an instant app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInternal()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOem()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOdm()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPartiallyDirectBootAware()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSignedWithPlatformKey()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrivilegedApp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequiredForSystemUser()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStaticSharedLibrary()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemApp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpdatedSystemApp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVendor()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProduct()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemExt()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmbeddedDexUsed()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVirtualPreload()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this application was installed as a virtual preload.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfileableByShell()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this application can be profiled by the shell user,\n     * even when running on a device that is running in user mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestsIsolatedSplitLoading()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the app has declared in its manifest that it wants its split APKs to be\n     * loaded into isolated Contexts, with their own ClassLoaders and Resources objects.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isResourceOverlay()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the package has declared in its manifest that it is a\n     * runtime resource overlay.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getAllApkPaths()",
    "returnType" : "String[]",
    "comment" : "\n     * Return all the APK paths that may be required to load this application, including all\n     * splits, shared libraries, and resource overlays.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodePath(String codePath)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setBaseCodePath(String baseCodePath)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitCodePaths(String[] splitCodePaths)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setResourcePath(String resourcePath)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setBaseResourcePath(String baseResourcePath)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitResourcePaths(String[] splitResourcePaths)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setGwpAsanMode(@GwpAsanMode int value)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getCodePath()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseCodePath()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String[] getSplitCodePaths()",
    "returnType" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getResourcePath()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseResourcePath()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String[] getSplitResourcePaths()",
    "returnType" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int getGwpAsanMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "taskAffinity", "permission", "processName", "className", "descriptionRes", "theme", "manageSpaceActivityName", "backupAgentName", "fullBackupContent", "crossProfile", "uiOptions", "FLAG_SYSTEM", "FLAG_DEBUGGABLE", "FLAG_HAS_CODE", "FLAG_PERSISTENT", "FLAG_FACTORY_TEST", "FLAG_ALLOW_TASK_REPARENTING", "FLAG_ALLOW_CLEAR_USER_DATA", "FLAG_UPDATED_SYSTEM_APP", "FLAG_TEST_ONLY", "FLAG_SUPPORTS_SMALL_SCREENS", "FLAG_SUPPORTS_NORMAL_SCREENS", "FLAG_SUPPORTS_LARGE_SCREENS", "FLAG_RESIZEABLE_FOR_SCREENS", "FLAG_SUPPORTS_SCREEN_DENSITIES", "FLAG_VM_SAFE_MODE", "FLAG_ALLOW_BACKUP", "FLAG_KILL_AFTER_RESTORE", "FLAG_RESTORE_ANY_VERSION", "FLAG_EXTERNAL_STORAGE", "FLAG_SUPPORTS_XLARGE_SCREENS", "FLAG_LARGE_HEAP", "FLAG_STOPPED", "FLAG_SUPPORTS_RTL", "FLAG_INSTALLED", "FLAG_IS_DATA_ONLY", "FLAG_IS_GAME", "FLAG_FULL_BACKUP_ONLY", "FLAG_USES_CLEARTEXT_TRAFFIC", "FLAG_EXTRACT_NATIVE_LIBS", "FLAG_HARDWARE_ACCELERATED", "FLAG_SUSPENDED", "FLAG_MULTIARCH", "flags", "PRIVATE_FLAG_HIDDEN", "PRIVATE_FLAG_CANT_SAVE_STATE", "PRIVATE_FLAG_PRIVILEGED", "PRIVATE_FLAG_HAS_DOMAIN_URLS", "PRIVATE_FLAG_DEFAULT_TO_DEVICE_PROTECTED_STORAGE", "PRIVATE_FLAG_DIRECT_BOOT_AWARE", "PRIVATE_FLAG_INSTANT", "PRIVATE_FLAG_PARTIALLY_DIRECT_BOOT_AWARE", "PRIVATE_FLAG_REQUIRED_FOR_SYSTEM_USER", "PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE", "PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_UNRESIZEABLE", "PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION", "PRIVATE_FLAG_BACKUP_IN_FOREGROUND", "PRIVATE_FLAG_STATIC_SHARED_LIBRARY", "PRIVATE_FLAG_ISOLATED_SPLIT_LOADING", "PRIVATE_FLAG_VIRTUAL_PRELOAD", "PRIVATE_FLAG_OEM", "PRIVATE_FLAG_VENDOR", "PRIVATE_FLAG_PRODUCT", "PRIVATE_FLAG_SIGNED_WITH_PLATFORM_KEY", "PRIVATE_FLAG_SYSTEM_EXT", "PRIVATE_FLAG_USES_NON_SDK_API", "PRIVATE_FLAG_PROFILEABLE_BY_SHELL", "PRIVATE_FLAG_HAS_FRAGILE_USER_DATA", "PRIVATE_FLAG_USE_EMBEDDED_DEX", "PRIVATE_FLAG_ALLOW_CLEAR_USER_DATA_ON_FAILED_RESTORE", "PRIVATE_FLAG_ALLOW_AUDIO_PLAYBACK_CAPTURE", "PRIVATE_FLAG_IS_RESOURCE_OVERLAY", "PRIVATE_FLAG_REQUEST_LEGACY_EXTERNAL_STORAGE", "PRIVATE_FLAG_ODM", "PRIVATE_FLAG_ALLOW_NATIVE_HEAP_POINTER_TAGGING", "AUTO_REVOKE_ALLOWED", "AUTO_REVOKE_DISCOURAGED", "AUTO_REVOKE_DISALLOWED", "privateFlags", "METADATA_PRELOADED_FONTS", "requiresSmallestWidthDp", "compatibleWidthLimitDp", "largestWidthLimitDp", "maxAspectRatio", "minAspectRatio", "volumeUuid", "storageUuid", "scanSourceDir", "scanPublicSourceDir", "sourceDir", "publicSourceDir", "splitNames", "splitSourceDirs", "splitPublicSourceDirs", "splitDependencies", "resourceDirs", "seInfo", "seInfoUser", "sharedLibraryFiles", "sharedLibraryInfos", "dataDir", "deviceProtectedDataDir", "credentialProtectedDataDir", "nativeLibraryDir", "secondaryNativeLibraryDir", "nativeLibraryRootDir", "nativeLibraryRootRequiresIsa", "primaryCpuAbi", "secondaryCpuAbi", "uid", "minSdkVersion", "targetSdkVersion", "longVersionCode", "versionCode", "compileSdkVersion", "compileSdkVersionCodename", "enabled", "enabledSetting", "installLocation", "networkSecurityConfigRes", "targetSandboxVersion", "appComponentFactory", "iconRes", "roundIconRes", "category", "CATEGORY_UNDEFINED", "CATEGORY_GAME", "CATEGORY_AUDIO", "CATEGORY_VIDEO", "CATEGORY_IMAGE", "CATEGORY_SOCIAL", "CATEGORY_NEWS", "CATEGORY_MAPS", "CATEGORY_PRODUCTIVITY", "classLoaderName", "splitClassLoaderNames", "hiddenUntilInstalled", "zygotePreloadName", "GWP_ASAN_DEFAULT", "GWP_ASAN_NEVER", "GWP_ASAN_ALWAYS", "gwpAsanMode", "HIDDEN_API_ENFORCEMENT_DEFAULT", "HIDDEN_API_ENFORCEMENT_DISABLED", "HIDDEN_API_ENFORCEMENT_JUST_WARN", "HIDDEN_API_ENFORCEMENT_ENABLED", "HIDDEN_API_ENFORCEMENT_MIN", "HIDDEN_API_ENFORCEMENT_MAX", "mHiddenApiPolicy", "CREATOR" ],
  "methodNames" : [ "public static CharSequence getCategoryTitle(Context context, @Category int category)", "public static boolean isValidHiddenApiEnforcementPolicy(int policy)", "public void dump(Printer pw, String prefix)", "public void dump(Printer pw, String prefix, int dumpFlags)", "public void dumpDebug(ProtoOutputStream proto, long fieldId, int dumpFlags)", "public boolean hasRtlSupport()", "public boolean hasCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)", "public CharSequence loadDescription(PackageManager pm)", "public void disableCompatibilityMode()", "public boolean usesCompatibilityMode()", "public void initForUser(int userId)", "private boolean isPackageWhitelistedForHiddenApis()", "public boolean usesNonSdkApi()", "public boolean hasFragileUserData()", "public boolean isAudioPlaybackCaptureAllowed()", "public boolean hasRequestedLegacyExternalStorage()", "public boolean allowsNativeHeapPointerTagging()", "private boolean isAllowedToUseHiddenApis()", "public int getHiddenApiEnforcementPolicy()", "public void setHiddenApiEnforcementPolicy(@HiddenApiEnforcementPolicy int policy)", "public void maybeUpdateHiddenApiEnforcementPolicy(@HiddenApiEnforcementPolicy int policy)", "public void setVersionCode(long newVersionCode)", "public Drawable loadDefaultIcon(PackageManager pm)", "private boolean isPackageUnavailable(PackageManager pm)", "public boolean isDefaultToDeviceProtectedStorage()", "public boolean isDirectBootAware()", "public boolean isEncryptionAware()", "public boolean isExternal()", "public boolean isInstantApp()", "public boolean isInternal()", "public boolean isOem()", "public boolean isOdm()", "public boolean isPartiallyDirectBootAware()", "public boolean isSignedWithPlatformKey()", "public boolean isPrivilegedApp()", "public boolean isRequiredForSystemUser()", "public boolean isStaticSharedLibrary()", "public boolean isSystemApp()", "public boolean isUpdatedSystemApp()", "public boolean isVendor()", "public boolean isProduct()", "public boolean isSystemExt()", "public boolean isEmbeddedDexUsed()", "public boolean isVirtualPreload()", "public boolean isProfileableByShell()", "public boolean requestsIsolatedSplitLoading()", "public boolean isResourceOverlay()", "protected ApplicationInfo getApplicationInfo()", "public String[] getAllApkPaths()", "public void setCodePath(String codePath)", "public void setBaseCodePath(String baseCodePath)", "public void setSplitCodePaths(String[] splitCodePaths)", "public void setResourcePath(String resourcePath)", "public void setBaseResourcePath(String baseResourcePath)", "public void setSplitResourcePaths(String[] splitResourcePaths)", "public void setGwpAsanMode(@GwpAsanMode int value)", "public String getCodePath()", "public String getBaseCodePath()", "public String[] getSplitCodePaths()", "public String getResourcePath()", "public String getBaseResourcePath()", "public String[] getSplitResourcePaths()", "public int getGwpAsanMode()" ]
}