{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/ConnectionServiceAdapter.java",
  "packageName" : "android.telecom",
  "className" : "ConnectionServiceAdapter",
  "comment" : "\n * Provides methods for IConnectionService implementations to interact with the system phone app.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mAdapters",
    "type" : "Set<IConnectionServiceAdapter>",
    "comment" : "\n     * ConcurrentHashMap constructor params: 8 is initial table size, 0.9f is\n     * load factor before resizing, 1 means we only expect a single thread to\n     * access the map so make only a single shard\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void addAdapter(IConnectionServiceAdapter adapter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeAdapter(IConnectionServiceAdapter adapter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : " ${inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : " void handleCreateConnectionComplete(String id, ConnectionRequest request, ParcelableConnection connection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void handleCreateConferenceComplete(String id, ConnectionRequest request, ParcelableConference conference)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setActive(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a call's state to active (e.g., an ongoing call where two parties can actively\n     * communicate).\n     *\n     * @param callId The unique ID of the call whose state is changing to active.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRinging(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a call's state to ringing (e.g., an inbound ringing call).\n     *\n     * @param callId The unique ID of the call whose state is changing to ringing.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setDialing(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a call's state to dialing (e.g., dialing an outbound call).\n     *\n     * @param callId The unique ID of the call whose state is changing to dialing.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setPulling(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a call's state to pulling (e.g. a call with {@link Connection#PROPERTY_IS_EXTERNAL_CALL}\n     * is being pulled to the local device.\n     *\n     * @param callId The unique ID of the call whose state is changing to dialing.\n     ",
    "links" : [ "android.telecom.Connection#PROPERTY_IS_EXTERNAL_CALL" ]
  }, {
    "name" : " void setDisconnected(String callId, DisconnectCause disconnectCause)",
    "returnType" : "void",
    "comment" : "\n     * Sets a call's state to disconnected.\n     *\n     * @param callId The unique ID of the call whose state is changing to disconnected.\n     * @param disconnectCause The reason for the disconnection, as described by\n     *            {@link android.telecomm.DisconnectCause}.\n     ",
    "links" : [ "android.telecomm.DisconnectCause" ]
  }, {
    "name" : " void setOnHold(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a call's state to be on hold.\n     *\n     * @param callId - The unique ID of the call whose state is changing to be on hold.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setRingbackRequested(String callId, boolean ringback)",
    "returnType" : "void",
    "comment" : "\n     * Asks Telecom to start or stop a ringback tone for a call.\n     *\n     * @param callId The unique ID of the call whose ringback is being changed.\n     * @param ringback Whether Telecom should start playing a ringback tone.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setConnectionCapabilities(String callId, int capabilities)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setConnectionProperties(String callId, int properties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setIsConferenced(String callId, String conferenceCallId)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether or not the specified call is currently conferenced into the specified\n     * conference call.\n     *\n     * @param callId The unique ID of the call being conferenced.\n     * @param conferenceCallId The unique ID of the conference call. Null if call is not\n     *            conferenced.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onConferenceMergeFailed(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the merge request on this call has failed.\n     *\n     * @param callId The unique ID of the call being conferenced.\n     ",
    "links" : [ ]
  }, {
    "name" : " void resetConnectionTime(String callId)",
    "returnType" : "void",
    "comment" : "\n        * Resets the cdma connection time.\n        ",
    "links" : [ ]
  }, {
    "name" : " void removeCall(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that the call no longer exists. Can be used with either a call or a conference\n     * call.\n     *\n     * @param callId The unique ID of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onPostDialWait(String callId, String remaining)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onPostDialChar(String callId, char nextChar)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addConferenceCall(String callId, ParcelableConference parcelableConference)",
    "returnType" : "void",
    "comment" : "\n     * Indicates that a new conference call has been created.\n     *\n     * @param callId The unique ID of the conference call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void queryRemoteConnectionServices(RemoteServiceCallback callback, String callingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves a list of remote connection services usable to place calls.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setVideoProvider(String callId, Connection.VideoProvider videoProvider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the call video provider for a call.\n     *\n     * @param callId The unique ID of the call to set with the given call video provider.\n     * @param videoProvider The call video provider instance to set on the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setIsVoipAudioMode(String callId, boolean isVoip)",
    "returnType" : "void",
    "comment" : "\n     * Requests that the framework use VOIP audio mode for this connection.\n     *\n     * @param callId The unique ID of the call to set with the given call video provider.\n     * @param isVoip True if the audio mode is VOIP.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setStatusHints(String callId, StatusHints statusHints)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setAddress(String callId, Uri address, int presentation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setCallerDisplayName(String callId, String callerDisplayName, int presentation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setVideoState(String callId, int videoState)",
    "returnType" : "void",
    "comment" : "\n     * Sets the video state associated with a call.\n     *\n     * Valid values: {@link VideoProfile#STATE_BIDIRECTIONAL},\n     * {@link VideoProfile#STATE_AUDIO_ONLY},\n     * {@link VideoProfile#STATE_TX_ENABLED},\n     * {@link VideoProfile#STATE_RX_ENABLED}.\n     *\n     * @param callId The unique ID of the call to set the video state for.\n     * @param videoState The video state.\n     ",
    "links" : [ "android.telecom.VideoProfile#STATE_BIDIRECTIONAL", "android.telecom.VideoProfile#STATE_RX_ENABLED", "android.telecom.VideoProfile#STATE_AUDIO_ONLY", "android.telecom.VideoProfile#STATE_TX_ENABLED" ]
  }, {
    "name" : " void setConferenceableConnections(String callId, List<String> conferenceableCallIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addExistingConnection(String callId, ParcelableConnection connection)",
    "returnType" : "void",
    "comment" : "\n     * Informs telecom of an existing connection which was added by the {@link ConnectionService}.\n     *\n     * @param callId The unique ID of the call being added.\n     * @param connection The connection.\n     ",
    "links" : [ "android.telecom.ConnectionService" ]
  }, {
    "name" : " void putExtras(String callId, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Adds some extras associated with a {@code Connection}.\n     *\n     * @param callId The unique ID of the call.\n     * @param extras The extras to add.\n     ",
    "links" : [ ]
  }, {
    "name" : " void putExtra(String callId, String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an extra associated with a {@code Connection}.\n     *\n     * @param callId The unique ID of the call.\n     * @param key The extra key.\n     * @param value The extra value.\n     ",
    "links" : [ ]
  }, {
    "name" : " void putExtra(String callId, String key, int value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an extra associated with a {@code Connection}.\n     *\n     * @param callId The unique ID of the call.\n     * @param key The extra key.\n     * @param value The extra value.\n     ",
    "links" : [ ]
  }, {
    "name" : " void putExtra(String callId, String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Adds an extra associated with a {@code Connection}.\n     *\n     * @param callId The unique ID of the call.\n     * @param key The extra key.\n     * @param value The extra value.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeExtras(String callId, List<String> keys)",
    "returnType" : "void",
    "comment" : "\n     * Removes extras associated with a {@code Connection}.\n     *  @param callId The unique ID of the call.\n     * @param keys The extra keys to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAudioRoute(String callId, int audioRoute, String bluetoothAddress)",
    "returnType" : "void",
    "comment" : "\n     * Sets the audio route associated with a {@link Connection}.\n     *\n     * @param callId The unique ID of the call.\n     * @param audioRoute The new audio route (see {@code CallAudioState#ROUTE_*}).\n     ",
    "links" : [ "android.telecom.Connection" ]
  }, {
    "name" : " void onConnectionEvent(String callId, String event, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Informs Telecom of a connection level event.\n     *\n     * @param callId The unique ID of the call.\n     * @param event The event.\n     * @param extras Extras associated with the event.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRttInitiationSuccess(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies Telecom that an RTT session was successfully established.\n     *\n     * @param callId The unique ID of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRttInitiationFailure(String callId, int reason)",
    "returnType" : "void",
    "comment" : "\n     * Notifies Telecom that a requested RTT session failed to be established.\n     *\n     * @param callId The unique ID of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRttSessionRemotelyTerminated(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies Telecom that an established RTT session was terminated by the remote user on\n     * the call.\n     *\n     * @param callId The unique ID of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onRemoteRttRequest(String callId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies Telecom that the remote user on the call has requested an upgrade to an RTT\n     * session for this call.\n     *\n     * @param callId The unique ID of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onPhoneAccountChanged(String callId, PhoneAccountHandle pHandle)",
    "returnType" : "void",
    "comment" : "\n     * Notifies Telecom that a call's PhoneAccountHandle has changed.\n     *\n     * @param callId The unique ID of the call.\n     * @param pHandle The new PhoneAccountHandle associated with the call.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onConnectionServiceFocusReleased()",
    "returnType" : "void",
    "comment" : "\n     * Notifies Telecom that the {@link ConnectionService} has released the call resource.\n     ",
    "links" : [ "android.telecom.ConnectionService" ]
  }, {
    "name" : " void setConferenceState(String callId, boolean isConference)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether a conference is treated as a conference or a single party call.\n     * See {@link Conference#setConferenceState(boolean)} for more information.\n     *\n     * @param callId The ID of the telecom call.\n     * @param isConference {@code true} if this call should be treated as a conference,\n     * {@code false} otherwise.\n     ",
    "links" : [ "android.telecom.Conference#setConferenceState(boolean)" ]
  }, {
    "name" : " void setCallDirection(String callId, @Call.Details.CallDirection int direction)",
    "returnType" : "void",
    "comment" : "\n     * Sets the direction of a call. Setting a new direction of an existing call is usually only\n     * applicable during single caller emulation during conferencing, see\n     * {@link Conference#setConferenceState(boolean)} for more information.\n     * @param callId The identifier of the call.\n     * @param direction The new direction of the call.\n     ",
    "links" : [ "android.telecom.Conference#setConferenceState(boolean)" ]
  } ],
  "variableNames" : [ "mAdapters" ],
  "methodNames" : [ " void addAdapter(IConnectionServiceAdapter adapter)", " void removeAdapter(IConnectionServiceAdapter adapter)", "public void binderDied()", " void handleCreateConnectionComplete(String id, ConnectionRequest request, ParcelableConnection connection)", " void handleCreateConferenceComplete(String id, ConnectionRequest request, ParcelableConference conference)", " void setActive(String callId)", " void setRinging(String callId)", " void setDialing(String callId)", " void setPulling(String callId)", " void setDisconnected(String callId, DisconnectCause disconnectCause)", " void setOnHold(String callId)", " void setRingbackRequested(String callId, boolean ringback)", " void setConnectionCapabilities(String callId, int capabilities)", " void setConnectionProperties(String callId, int properties)", " void setIsConferenced(String callId, String conferenceCallId)", " void onConferenceMergeFailed(String callId)", " void resetConnectionTime(String callId)", " void removeCall(String callId)", " void onPostDialWait(String callId, String remaining)", " void onPostDialChar(String callId, char nextChar)", " void addConferenceCall(String callId, ParcelableConference parcelableConference)", " void queryRemoteConnectionServices(RemoteServiceCallback callback, String callingPackage)", " void setVideoProvider(String callId, Connection.VideoProvider videoProvider)", " void setIsVoipAudioMode(String callId, boolean isVoip)", " void setStatusHints(String callId, StatusHints statusHints)", " void setAddress(String callId, Uri address, int presentation)", " void setCallerDisplayName(String callId, String callerDisplayName, int presentation)", " void setVideoState(String callId, int videoState)", " void setConferenceableConnections(String callId, List<String> conferenceableCallIds)", " void addExistingConnection(String callId, ParcelableConnection connection)", " void putExtras(String callId, Bundle extras)", " void putExtra(String callId, String key, boolean value)", " void putExtra(String callId, String key, int value)", " void putExtra(String callId, String key, String value)", " void removeExtras(String callId, List<String> keys)", " void setAudioRoute(String callId, int audioRoute, String bluetoothAddress)", " void onConnectionEvent(String callId, String event, Bundle extras)", " void onRttInitiationSuccess(String callId)", " void onRttInitiationFailure(String callId, int reason)", " void onRttSessionRemotelyTerminated(String callId)", " void onRemoteRttRequest(String callId)", " void onPhoneAccountChanged(String callId, PhoneAccountHandle pHandle)", " void onConnectionServiceFocusReleased()", " void setConferenceState(String callId, boolean isConference)", " void setCallDirection(String callId, @Call.Details.CallDirection int direction)" ]
}