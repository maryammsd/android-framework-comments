{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/datatype/FactoryFinder.java",
  "packageName" : "javax.xml.datatype",
  "className" : "FactoryFinder",
  "comment" : "\n * <p>Implement pluggable data types.</p>\n *\n * <p>This class is duplicated for each JAXP subpackage so keep it in\n * sync.  It is package private for secure class loading.</p>\n *\n * @author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 670432 $, $Date: 2008-06-22 19:02:08 -0700 (Sun, 22 Jun 2008) $\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CLASS_NAME",
    "type" : "String",
    "comment" : " <p>Name of class to display in output messages.</p> ",
    "links" : [ ]
  }, {
    "name" : "debug",
    "type" : "boolean",
    "comment" : " <p>Debug flag to trace loading process.</p> ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LINE_LENGTH",
    "type" : "int",
    "comment" : " Default columns per line. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void debugPrintln(String msg)",
    "returnType" : "void",
    "comment" : "\n     * <p>Output debugging messages.</p>\n     *\n     * @param msg <code>String</code> to print to <code>stderr</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ClassLoader findClassLoader() throws ConfigurationError",
    "returnType" : "ClassLoader",
    "comment" : "\n     * <p>Find the appropriate <code>ClassLoader</code> to use.</p>\n     *\n     * <p>The context ClassLoader is preferred.</p>\n     *\n     * @return <code>ClassLoader</code> to use.\n     *\n     * @throws ConfigurationError If a valid <code>ClassLoader</code> cannot be identified.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object newInstance(String className, ClassLoader classLoader) throws ConfigurationError",
    "returnType" : "Object",
    "comment" : "\n     * <p>Create an instance of a class using the specified ClassLoader.</p>\n     *\n     * @param className Name of class to create.\n     * @param classLoader ClassLoader to use to create named class.\n     *\n     * @return New instance of specified class created using the specified ClassLoader.\n     *\n     * @throws ConfigurationError If class could not be created.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Object find(String factoryId, String fallbackClassName) throws ConfigurationError",
    "returnType" : "Object",
    "comment" : "\n     * Finds the implementation Class object in the specified order.  Main\n     * entry point.\n     * Package private so this code can be shared.\n     *\n     * @param factoryId Name of the factory to find, same as a property name\n     * @param fallbackClassName Implementation class name, if nothing else is found.  Use null to mean no fallback.\n     *\n     * @return Class Object of factory, never null\n     *\n     * @throws ConfigurationError If Class cannot be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Object findJarServiceProvider(String factoryId) throws ConfigurationError",
    "returnType" : "Object",
    "comment" : "\n     * Try to find provider using Jar Service Provider Mechanism\n     *\n     * @return instance of provider class if found or null\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String which(Class clazz)",
    "returnType" : "String",
    "comment" : "\n     * Returns the location where the given Class is loaded from.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void debugPrintln(String msg)", "private static ClassLoader findClassLoader() throws ConfigurationError", " static Object newInstance(String className, ClassLoader classLoader) throws ConfigurationError", " static Object find(String factoryId, String fallbackClassName) throws ConfigurationError", "private static Object findJarServiceProvider(String factoryId) throws ConfigurationError", "private static String which(Class clazz)" ],
  "variableNames" : [ "CLASS_NAME", "debug", "DEFAULT_LINE_LENGTH" ]
}