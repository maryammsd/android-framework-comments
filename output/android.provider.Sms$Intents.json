{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/Telephony.java",
  "packageName" : "android.provider",
  "className" : "Intents",
  "comment" : "\n         * Contains constants for SMS related Intents that are broadcast.\n         ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RESULT_SMS_HANDLED",
    "type" : "int",
    "comment" : "\n             * Set by BroadcastReceiver to indicate that the message was handled\n             * successfully.\n             ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SMS_GENERIC_ERROR",
    "type" : "int",
    "comment" : "\n             * Set by BroadcastReceiver to indicate a generic error while\n             * processing the message.\n             ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SMS_OUT_OF_MEMORY",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate\n             * insufficient memory to store the message.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate that\n             * the message, while possibly valid, is of a format or encoding that is not supported.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_DUPLICATED",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate a\n             * duplicate incoming message.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_DISPATCH_FAILURE",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate a\n             * dispatch failure.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_NULL_PDU",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate a null\n             * PDU was received.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_NULL_MESSAGE",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate a null\n             * message was encountered.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_RECEIVED_WHILE_ENCRYPTED",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate an sms\n             * was received while the phone was in encrypted state.\n             * <p>\n             * This result code is only used on devices that use Full Disk Encryption.  Support for\n             * Full Disk Encryption was entirely removed in API level 33, having been replaced by\n             * File Based Encryption.  Devices that use File Based Encryption never reject incoming\n             * SMS messages due to the encryption state.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_DATABASE_ERROR",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate a\n             * telephony database error.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "RESULT_SMS_INVALID_URI",
    "type" : "int",
    "comment" : "\n             * Set as a \"result\" extra in the {@link #SMS_REJECTED_ACTION} intent to indicate an\n             * invalid uri.\n             ",
    "links" : [ "#SMS_REJECTED_ACTION" ]
  }, {
    "name" : "ACTION_CHANGE_DEFAULT",
    "type" : "String",
    "comment" : "\n             * Activity action: Ask the user to change the default\n             * SMS application. This will show a dialog that asks the\n             * user whether they want to replace the current default\n             * SMS application with the one specified in\n             * {@link #EXTRA_PACKAGE_NAME}.\n             * <p>\n             * This is no longer supported since Q, please use\n             * {@link android.app.role.RoleManager#createRequestRoleIntent(String)} with\n             * {@link android.app.role.RoleManager#ROLE_SMS} instead.\n             ",
    "links" : [ "android.app.role.RoleManager#ROLE_SMS", "#EXTRA_PACKAGE_NAME", "android.app.role.RoleManager#createRequestRoleIntent(String)" ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n             * The PackageName string passed in as an\n             * extra for {@link #ACTION_CHANGE_DEFAULT}\n             *\n             * @see #ACTION_CHANGE_DEFAULT\n             * <p>\n             * This is no longer supported since Q, please use\n             * {@link android.app.role.RoleManager#createRequestRoleIntent(String)} with\n             * {@link android.app.role.RoleManager#ROLE_SMS} instead.\n             ",
    "links" : [ "android.app.role.RoleManager#ROLE_SMS", "#ACTION_CHANGE_DEFAULT", "android.app.role.RoleManager#createRequestRoleIntent(String)" ]
  }, {
    "name" : "SMS_DELIVER_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new text-based SMS message has been received\n             * by the device. This intent will only be delivered to the default\n             * sms app. That app is responsible for writing the message and notifying\n             * the user. The intent will have the following extra values:</p>\n             *\n             * <ul>\n             *   <li><em>\"pdus\"</em> - An Object[] of byte[]s containing the PDUs\n             *   that make up the message.</li>\n             *   <li><em>\"format\"</em> - A String describing the format of the PDUs. It can\n             *   be either \"3gpp\" or \"3gpp2\".</li>\n             *   <li><em>\"subscription\"</em> - An optional long value of the subscription id which\n             *   received the message.</li>\n             *   <li><em>\"slot\"</em> - An optional int value of the SIM slot containing the\n             *   subscription.</li>\n             *   <li><em>\"phone\"</em> - An optional int value of the phone id associated with the\n             *   subscription.</li>\n             *   <li><em>\"errorCode\"</em> - An optional int error code associated with receiving\n             *   the message.</li>\n             * </ul>\n             *\n             * <p>The extra values can be extracted using\n             * {@link #getMessagesFromIntent(Intent)}.</p>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p class=\"note\"><strong>Note:</strong>\n             * The broadcast receiver that filters for this intent must declare\n             * {@link android.Manifest.permission#BROADCAST_SMS} as a required permission in\n             * the <a href=\"{@docRoot}guide/topics/manifest/receiver-element.html\">{@code\n             * <receiver>}</a> tag.\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS", "#getMessagesFromIntent(Intent)", "android.Manifest.permission#BROADCAST_SMS" ]
  }, {
    "name" : "SMS_RECEIVED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new text-based SMS message has been received\n             * by the device. This intent will be delivered to all registered\n             * receivers as a notification. These apps are not expected to write the\n             * message or notify the user. The intent will have the following extra\n             * values:</p>\n             *\n             * <ul>\n             *   <li><em>\"pdus\"</em> - An Object[] of byte[]s containing the PDUs\n             *   that make up the message.</li>\n             * </ul>\n             *\n             * <p>The extra values can be extracted using\n             * {@link #getMessagesFromIntent(Intent)}.</p>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS", "#getMessagesFromIntent(Intent)" ]
  }, {
    "name" : "DATA_SMS_RECEIVED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new data based SMS message has been received\n             * by the device. This intent will be delivered to all registered\n             * receivers as a notification. The intent will have the following extra\n             * values:</p>\n             *\n             * <ul>\n             *   <li><em>\"pdus\"</em> - An Object[] of byte[]s containing the PDUs\n             *   that make up the message.</li>\n             * </ul>\n             *\n             * <p>The extra values can be extracted using\n             * {@link #getMessagesFromIntent(Intent)}.</p>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS", "#getMessagesFromIntent(Intent)" ]
  }, {
    "name" : "WAP_PUSH_DELIVER_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new WAP PUSH message has been received by the\n             * device. This intent will only be delivered to the default\n             * sms app. That app is responsible for writing the message and notifying\n             * the user. The intent will have the following extra values:</p>\n             *\n             * <ul>\n             *   <li><em>\"transactionId\"</em> - (Integer) The WAP transaction ID</li>\n             *   <li><em>\"pduType\"</em> - (Integer) The WAP PDU type</li>\n             *   <li><em>\"header\"</em> - (byte[]) The header of the message</li>\n             *   <li><em>\"data\"</em> - (byte[]) The data payload of the message</li>\n             *   <li><em>\"contentTypeParameters\" </em>\n             *   -(HashMap&lt;String,String&gt;) Any parameters associated with the content type\n             *   (decoded from the WSP Content-Type header)</li>\n             *   <li><em>\"subscription\"</em> - An optional long value of the subscription id which\n             *   received the message.</li>\n             *   <li><em>\"slot\"</em> - An optional int value of the SIM slot containing the\n             *   subscription.</li>\n             *   <li><em>\"phone\"</em> - An optional int value of the phone id associated with the\n             *   subscription.</li>\n             * </ul>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>The contentTypeParameters extra value is map of content parameters keyed by\n             * their names.</p>\n             *\n             * <p>If any unassigned well-known parameters are encountered, the key of the map will\n             * be 'unassigned/0x...', where '...' is the hex value of the unassigned parameter.  If\n             * a parameter has No-Value the value in the map will be null.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_MMS} or\n             * {@link android.Manifest.permission#RECEIVE_WAP_PUSH} (depending on WAP PUSH type) to\n             * receive.</p>\n             *\n             * <p class=\"note\"><strong>Note:</strong>\n             * The broadcast receiver that filters for this intent must declare\n             * {@link android.Manifest.permission#BROADCAST_WAP_PUSH} as a required permission in\n             * the <a href=\"{@docRoot}guide/topics/manifest/receiver-element.html\">{@code\n             * <receiver>}</a> tag.\n             ",
    "links" : [ "android.Manifest.permission#BROADCAST_WAP_PUSH", "android.Manifest.permission#RECEIVE_WAP_PUSH", "android.Manifest.permission#RECEIVE_MMS" ]
  }, {
    "name" : "WAP_PUSH_RECEIVED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new WAP PUSH message has been received by the\n             * device. This intent will be delivered to all registered\n             * receivers as a notification. These apps are not expected to write the\n             * message or notify the user. The intent will have the following extra\n             * values:</p>\n             *\n             * <ul>\n             *   <li><em>\"transactionId\"</em> - (Integer) The WAP transaction ID</li>\n             *   <li><em>\"pduType\"</em> - (Integer) The WAP PDU type</li>\n             *   <li><em>\"header\"</em> - (byte[]) The header of the message</li>\n             *   <li><em>\"data\"</em> - (byte[]) The data payload of the message</li>\n             *   <li><em>\"contentTypeParameters\"</em>\n             *   - (HashMap&lt;String,String&gt;) Any parameters associated with the content type\n             *   (decoded from the WSP Content-Type header)</li>\n             * </ul>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>The contentTypeParameters extra value is map of content parameters keyed by\n             * their names.</p>\n             *\n             * <p>If any unassigned well-known parameters are encountered, the key of the map will\n             * be 'unassigned/0x...', where '...' is the hex value of the unassigned parameter.  If\n             * a parameter has No-Value the value in the map will be null.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_MMS} or\n             * {@link android.Manifest.permission#RECEIVE_WAP_PUSH} (depending on WAP PUSH type) to\n             * receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_WAP_PUSH", "android.Manifest.permission#RECEIVE_MMS" ]
  }, {
    "name" : "SMS_CB_RECEIVED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new Cell Broadcast message has been received\n             * by the device. The intent will have the following extra\n             * values:</p>\n             *\n             * <ul>\n             *   <li><em>\"message\"</em> - An SmsCbMessage object containing the broadcast message\n             *   data. This is not an emergency alert, so ETWS and CMAS data will be null.</li>\n             * </ul>\n             *\n             * <p>The extra values can be extracted using\n             * {@link #getMessagesFromIntent(Intent)}.</p>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS", "#getMessagesFromIntent(Intent)" ]
  }, {
    "name" : "SMS_CARRIER_PROVISION_ACTION",
    "type" : "String",
    "comment" : "\n             * Action: A SMS based carrier provision intent. Used to identify default\n             * carrier provisioning app on the device.\n             * @hide\n             ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SMS_EMERGENCY_CB_RECEIVED",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new Emergency Broadcast message has been received\n             * by the device. The intent will have the following extra\n             * values:</p>\n             *\n             * <ul>\n             *   <li><em>\"message\"</em> - An {@link android.telephony.SmsCbMessage} object\n             *   containing the broadcast message data, including ETWS or CMAS warning notification\n             *   info if present.</li>\n             * </ul>\n             *\n             * <p>The extra values can be extracted using\n             * {@link #getMessagesFromIntent(Intent)}.</p>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_EMERGENCY_BROADCAST} to\n             * receive.</p>\n             * @hide\n             ",
    "links" : [ "#getMessagesFromIntent(Intent)", "android.telephony.SmsCbMessage", "android.Manifest.permission#RECEIVE_EMERGENCY_BROADCAST" ]
  }, {
    "name" : "SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A new CDMA SMS has been received containing Service Category\n             * Program Data (updates the list of enabled broadcast channels). The intent will\n             * have the following extra values:</p>\n             *\n             * <ul>\n             *   <li><em>\"operations\"</em> - An array of CdmaSmsCbProgramData objects containing\n             *   the service category operations (add/delete/clear) to perform.</li>\n             * </ul>\n             *\n             * <p>The extra values can be extracted using\n             * {@link #getMessagesFromIntent(Intent)}.</p>\n             *\n             * <p>If a BroadcastReceiver encounters an error while processing\n             * this intent it should set the result code appropriately.</p>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS", "#getMessagesFromIntent(Intent)" ]
  }, {
    "name" : "SIM_FULL_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: The SIM storage for SMS messages is full.  If\n             * space is not freed, messages targeted for the SIM (class 2) may\n             * not be saved.\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS" ]
  }, {
    "name" : "SMS_REJECTED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: An incoming SMS has been rejected by the\n             * telephony framework.  This intent is sent in lieu of any\n             * of the RECEIVED_ACTION intents.  The intent will have the\n             * following extra value:</p>\n             *\n             * <ul>\n             *   <li><em>\"result\"</em> - An int result code, e.g. {@link #RESULT_SMS_OUT_OF_MEMORY}\n             *   indicating the error returned to the network.</li>\n             * </ul>\n             *\n             * <p>Requires {@link android.Manifest.permission#RECEIVE_SMS} to receive.</p>\n             ",
    "links" : [ "android.Manifest.permission#RECEIVE_SMS", "#RESULT_SMS_OUT_OF_MEMORY" ]
  }, {
    "name" : "MMS_DOWNLOADED_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: An incoming MMS has been downloaded. The intent is sent to all\n             * users, except for secondary users where SMS has been disabled and to managed\n             * profiles.\n             * @hide\n             ",
    "links" : [ ]
  }, {
    "name" : "SECRET_CODE_ACTION",
    "type" : "String",
    "comment" : "\n             * Broadcast Action: A debug code has been entered in the dialer. This intent is\n             * broadcast by the system and OEM telephony apps may need to receive these broadcasts.\n             * These \"secret codes\" are used to activate developer menus by dialing certain codes.\n             * And they are of the form {@code *#*#<code>#*#*}. The intent will have the data\n             * URI: {@code android_secret_code://<code>}. It is possible that a manifest\n             * receiver would be woken up even if it is not currently running.\n             *\n             * <p>Requires {@code android.Manifest.permission#CONTROL_INCALL_EXPERIENCE} to\n             * send and receive.</p>\n             * @deprecated it is no longer supported, use {@link\n             * TelephonyManager#ACTION_SECRET_CODE} instead\n             ",
    "links" : [ "android.telephony.TelephonyManager#ACTION_SECRET_CODE" ]
  }, {
    "name" : "ACTION_DEFAULT_SMS_PACKAGE_CHANGED",
    "type" : "String",
    "comment" : "\n             * Broadcast action: When the default SMS package changes,\n             * the previous default SMS package and the new default SMS\n             * package are sent this broadcast to notify them of the change.\n             * A boolean is specified in {@link #EXTRA_IS_DEFAULT_SMS_APP} to\n             * indicate whether the package is the new default SMS package.\n            ",
    "links" : [ "#EXTRA_IS_DEFAULT_SMS_APP" ]
  }, {
    "name" : "EXTRA_IS_DEFAULT_SMS_APP",
    "type" : "String",
    "comment" : "\n             * The IsDefaultSmsApp boolean passed as an\n             * extra for {@link #ACTION_DEFAULT_SMS_PACKAGE_CHANGED} to indicate whether the\n             * SMS app is becoming the default SMS app or is no longer the default.\n             *\n             * @see #ACTION_DEFAULT_SMS_PACKAGE_CHANGED\n             ",
    "links" : [ "#ACTION_DEFAULT_SMS_PACKAGE_CHANGED" ]
  }, {
    "name" : "ACTION_EXTERNAL_PROVIDER_CHANGE",
    "type" : "String",
    "comment" : "\n             * Broadcast action: When a change is made to the SmsProvider or\n             * MmsProvider by a process other than the default SMS application,\n             * this intent is broadcast to the default SMS application so it can\n             * re-sync or update the change. The uri that was used to call the provider\n             * can be retrieved from the intent with getData(). The actual affected uris\n             * (which would depend on the selection specified) are not included.\n            ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SMS_MMS_DB_CREATED",
    "type" : "String",
    "comment" : "\n             * Broadcast action: When SMS-MMS db is being created. If file-based encryption is\n             * supported, this broadcast indicates creation of the db in credential-encrypted\n             * storage. A boolean is specified in {@link #EXTRA_IS_INITIAL_CREATE} to indicate if\n             * this is the initial create of the db.\n             *\n             * @see #EXTRA_IS_INITIAL_CREATE\n             *\n             * @hide\n             ",
    "links" : [ "#EXTRA_IS_INITIAL_CREATE" ]
  }, {
    "name" : "EXTRA_IS_INITIAL_CREATE",
    "type" : "String",
    "comment" : "\n             * Boolean flag passed as an extra with {@link #ACTION_SMS_MMS_DB_CREATED} to indicate\n             * whether the DB creation is the initial creation on the device, that is it is after a\n             * factory-data reset or a new device. Any subsequent creations of the DB (which\n             * happens only in error scenarios) will have this flag set to false.\n             *\n             * @see #ACTION_SMS_MMS_DB_CREATED\n             *\n             * @hide\n             ",
    "links" : [ "#ACTION_SMS_MMS_DB_CREATED" ]
  }, {
    "name" : "ACTION_SMS_MMS_DB_LOST",
    "type" : "String",
    "comment" : "\n             * Broadcast intent action indicating that the telephony provider SMS MMS database is\n             * corrupted. A boolean is specified in {@link #EXTRA_IS_CORRUPTED} to indicate if the\n             * database is corrupted. Requires the\n             * {@link android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE permission.\n             *\n             * @hide\n             ",
    "links" : [ "#EXTRA_IS_CORRUPTED", "android.Manifest.permission#READ_PRIVILEGED_PHONE_STATE" ]
  }, {
    "name" : "EXTRA_IS_CORRUPTED",
    "type" : "String",
    "comment" : "\n             * Boolean flag passed as an extra with {@link #ACTION_SMS_MMS_DB_LOST} to indicate\n             * whether the DB got corrupted or not.\n             *\n             * @see #ACTION_SMS_MMS_DB_LOST\n             *\n             * @hide\n             ",
    "links" : [ "#ACTION_SMS_MMS_DB_LOST" ]
  } ],
  "methods" : [ {
    "name" : "public static SmsMessage[] getMessagesFromIntent(Intent intent)",
    "returnType" : "SmsMessage[]",
    "comment" : "\n             * Read the PDUs out of an {@link #SMS_RECEIVED_ACTION} or a\n             * {@link #DATA_SMS_RECEIVED_ACTION} intent.\n             *\n             * @param intent the intent to read from\n             * @return an array of SmsMessages for the PDUs\n             ",
    "links" : [ "#DATA_SMS_RECEIVED_ACTION", "#SMS_RECEIVED_ACTION" ]
  } ],
  "methodNames" : [ "public static SmsMessage[] getMessagesFromIntent(Intent intent)" ],
  "variableNames" : [ "RESULT_SMS_HANDLED", "RESULT_SMS_GENERIC_ERROR", "RESULT_SMS_OUT_OF_MEMORY", "RESULT_SMS_UNSUPPORTED", "RESULT_SMS_DUPLICATED", "RESULT_SMS_DISPATCH_FAILURE", "RESULT_SMS_NULL_PDU", "RESULT_SMS_NULL_MESSAGE", "RESULT_SMS_RECEIVED_WHILE_ENCRYPTED", "RESULT_SMS_DATABASE_ERROR", "RESULT_SMS_INVALID_URI", "ACTION_CHANGE_DEFAULT", "EXTRA_PACKAGE_NAME", "SMS_DELIVER_ACTION", "SMS_RECEIVED_ACTION", "DATA_SMS_RECEIVED_ACTION", "WAP_PUSH_DELIVER_ACTION", "WAP_PUSH_RECEIVED_ACTION", "SMS_CB_RECEIVED_ACTION", "SMS_CARRIER_PROVISION_ACTION", "ACTION_SMS_EMERGENCY_CB_RECEIVED", "SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION", "SIM_FULL_ACTION", "SMS_REJECTED_ACTION", "MMS_DOWNLOADED_ACTION", "SECRET_CODE_ACTION", "ACTION_DEFAULT_SMS_PACKAGE_CHANGED", "EXTRA_IS_DEFAULT_SMS_APP", "ACTION_EXTERNAL_PROVIDER_CHANGE", "ACTION_SMS_MMS_DB_CREATED", "EXTRA_IS_INITIAL_CREATE", "ACTION_SMS_MMS_DB_LOST", "EXTRA_IS_CORRUPTED" ]
}