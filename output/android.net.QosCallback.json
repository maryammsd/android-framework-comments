{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/QosCallback.java",
  "packageName" : "android.net",
  "className" : "QosCallback",
  "comment" : "\n * Receives Qos information given a {@link Network}.  The callback is registered with\n * {@link ConnectivityManager#registerQosCallback}.\n *\n * <p>\n * <br/>\n * The callback will no longer receive calls if any of the following takes place:\n * <ol>\n * <li>{@link ConnectivityManager#unregisterQosCallback(QosCallback)} is called with the same\n * callback instance.</li>\n * <li>{@link QosCallback#onError(QosCallbackException)} is called.</li>\n * <li>A network specific issue occurs.  eg. Congestion on a carrier network.</li>\n * <li>The network registered with the callback has no associated QoS providers</li>\n * </ul>\n * {@hide}\n ",
  "links" : [ "android.net.ConnectivityManager#unregisterQosCallback(QosCallback)", "android.net.QosCallback#onError(QosCallbackException)", "android.net.Network", "android.net.ConnectivityManager#registerQosCallback" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onError(@NonNull final QosCallbackException exception)",
    "returnType" : "void",
    "comment" : "\n     * Invoked after an error occurs on a registered callback.  Once called, the callback is\n     * automatically unregistered and the callback will no longer receive calls.\n     *\n     * <p>The underlying exception can either be a runtime exception or a custom exception made for\n     * {@link QosCallback}. see: {@link QosCallbackException}.\n     *\n     * @param exception wraps the underlying cause\n     ",
    "links" : [ "android.net.QosCallbackException", "android.net.QosCallback" ]
  }, {
    "name" : "public void onQosSessionAvailable(@NonNull final QosSession session, @NonNull final QosSessionAttributes sessionAttributes)",
    "returnType" : "void",
    "comment" : "\n     * Called when a Qos Session first becomes available to the callback or if its attributes have\n     * changed.\n     * <p>\n     * Note: The callback may be called multiple times with the same attributes.\n     *\n     * @param session the available session\n     * @param sessionAttributes the attributes of the session\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onQosSessionLost(@NonNull final QosSession session)",
    "returnType" : "void",
    "comment" : "\n     * Called after a Qos Session is lost.\n     * <p>\n     * At least one call to\n     * {@link QosCallback#onQosSessionAvailable(QosSession, QosSessionAttributes)}\n     * with the same {@link QosSession} will precede a call to lost.\n     *\n     * @param session the lost session\n     ",
    "links" : [ "android.net.QosCallback#onQosSessionAvailable(QosSession", "android.net.QosSession" ]
  } ],
  "methodNames" : [ "public void onError(@NonNull final QosCallbackException exception)", "public void onQosSessionAvailable(@NonNull final QosSession session, @NonNull final QosSessionAttributes sessionAttributes)", "public void onQosSessionLost(@NonNull final QosSession session)" ],
  "variableNames" : [ ]
}