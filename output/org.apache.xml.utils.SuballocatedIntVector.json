{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/SuballocatedIntVector.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "SuballocatedIntVector",
  "comment" : "\n * A very simple table that stores a list of int. Very similar API to our\n * IntVector class (same API); different internal storage.\n * \n * This version uses an array-of-arrays solution. Read/write access is thus\n * a bit slower than the simple IntVector, and basic storage is a trifle\n * higher due to the top-level array -- but appending is O(1) fast rather\n * than O(N**2) slow, which will swamp those costs in situations where\n * long vectors are being built up.\n * \n * Known issues:\n * \n * Some methods are private because they haven't yet been tested properly.\n *\n * Retrieval performance is critical, since this is used at the core\n * of the DTM model. (Append performance is almost as important.)\n * That's pushing me toward just letting reads from unset indices\n * throw exceptions or return stale data; safer behavior would have\n * performance costs.\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_blocksize",
    "type" : "int",
    "comment" : " Size of blocks to allocate          ",
    "links" : [ ]
  }, {
    "name" : "m_SHIFT",
    "type" : "int",
    "comment" : " Bitwise addressing (much faster than div/remainder ",
    "links" : [ ]
  }, {
    "name" : "m_MASK",
    "type" : "int",
    "comment" : " Bitwise addressing (much faster than div/remainder ",
    "links" : [ ]
  }, {
    "name" : "NUMBLOCKS_DEFAULT",
    "type" : "int",
    "comment" : " The default number of blocks to (over)allocate by ",
    "links" : [ ]
  }, {
    "name" : "m_numblocks",
    "type" : "int",
    "comment" : " The number of blocks to (over)allocate by ",
    "links" : [ ]
  }, {
    "name" : "m_map",
    "type" : "int[][]",
    "comment" : " Array of arrays of ints          ",
    "links" : [ ]
  }, {
    "name" : "m_firstFree",
    "type" : "int",
    "comment" : " Number of ints in array          ",
    "links" : [ ]
  }, {
    "name" : "m_map0",
    "type" : "int[]",
    "comment" : " \"Shortcut\" handle to m_map[0]. Surprisingly helpful for short vectors. ",
    "links" : [ ]
  }, {
    "name" : "m_buildCache",
    "type" : "int[]",
    "comment" : " \"Shortcut\" handle to most recently added row of m_map.\n   * Very helpful during construction.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "m_buildCacheStartIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the list.\n   *\n   * @return length of the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSize(int sz)",
    "returnType" : "void",
    "comment" : "\n   * Set the length of the list. This will only work to truncate the list, and\n   * even then it has not been heavily tested and may not be trustworthy.\n   *\n   * @return length of the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addElement(int value)",
    "returnType" : "void",
    "comment" : "\n   * Append a int onto the vector.\n   *\n   * @param value Int to add to the list \n   ",
    "links" : [ ]
  }, {
    "name" : "private void addElements(int value, int numberOfElements)",
    "returnType" : "void",
    "comment" : "\n   * Append several int values onto the vector.\n   *\n   * @param value Int to add to the list \n   ",
    "links" : [ ]
  }, {
    "name" : "private void addElements(int numberOfElements)",
    "returnType" : "void",
    "comment" : "\n   * Append several slots onto the vector, but do not set the values.\n   * Note: \"Not Set\" means the value is unspecified.\n   *\n   * @param numberOfElements Int to add to the list \n   ",
    "links" : [ ]
  }, {
    "name" : "private void insertElementAt(int value, int at)",
    "returnType" : "void",
    "comment" : "\n   * Inserts the specified node in this vector at the specified index.\n   * Each component in this vector with an index greater or equal to\n   * the specified index is shifted upward to have an index one greater\n   * than the value it had previously.\n   *\n   * Insertion may be an EXPENSIVE operation!\n   *\n   * @param value Int to insert\n   * @param at Index of where to insert \n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllElements()",
    "returnType" : "void",
    "comment" : "\n   * Wipe it out. Currently defined as equivalent to setSize(0).\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean removeElement(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Removes the first occurrence of the argument from this vector.\n   * If the object is found in this vector, each component in the vector\n   * with an index greater or equal to the object's index is shifted\n   * downward to have an index one smaller than the value it had\n   * previously.\n   *\n   * @param s Int to remove from array\n   *\n   * @return True if the int was removed, false if it was not found\n   ",
    "links" : [ ]
  }, {
    "name" : "private void removeElementAt(int at)",
    "returnType" : "void",
    "comment" : "\n   * Deletes the component at the specified index. Each component in\n   * this vector with an index greater or equal to the specified\n   * index is shifted downward to have an index one smaller than\n   * the value it had previously.\n   *\n   * @param i index of where to remove and int\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setElementAt(int value, int at)",
    "returnType" : "void",
    "comment" : "\n   * Sets the component at the specified index of this vector to be the\n   * specified object. The previous component at that position is discarded.\n   *\n   * The index must be a value greater than or equal to 0 and less\n   * than the current size of the vector.\n   *\n   * @param value object to set\n   * @param at    Index of where to set the object\n   ",
    "links" : [ ]
  }, {
    "name" : "public int elementAt(int i)",
    "returnType" : "int",
    "comment" : "\n   * Get the nth element. This is often at the innermost loop of an\n   * application, so performance is critical.\n   *\n   * @param i index of value to get\n   *\n   * @return value at given index. If that value wasn't previously set,\n   * the result is undefined for performance reasons. It may throw an\n   * exception (see below), may return zero, or (if setSize has previously\n   * been used) may return stale data.\n   *\n   * @throws ArrayIndexOutOfBoundsException if the index was _clearly_\n   * unreasonable (negative, or past the highest block).\n   *\n   * @throws NullPointerException if the index points to a block that could\n   * have existed (based on the highest index used) but has never had anything\n   * set into it.\n   * %REVIEW% Could add a catch to create the block in that case, or return 0.\n   * Try/Catch is _supposed_ to be nearly free when not thrown to. Do we\n   * believe that? Should we have a separate safeElementAt?\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean contains(int s)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the table contains the given node.\n   *\n   * @param s object to look for\n   *\n   * @return true if the object is in the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int elem, int index)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem object to look for\n   * @param index Index of where to begin search\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int elem)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem object to look for\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "private int lastIndexOf(int elem)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the first occurence of the given argument,\n   * beginning the search at index, and testing for equality\n   * using the equals method.\n   *\n   * @param elem Object to look for\n   * @return the index of the first occurrence of the object\n   * argument in this vector at position index or later in the\n   * vector; returns -1 if the object is not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int[] getMap0()",
    "returnType" : "int[]",
    "comment" : "\n   * Return the internal m_map0 array\n   * @return the m_map0 array\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int[][] getMap()",
    "returnType" : "int[][]",
    "comment" : "\n   * Return the m_map double array\n   * @return the internal map of array of arrays \n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int size()", "public void setSize(int sz)", "public void addElement(int value)", "private void addElements(int value, int numberOfElements)", "private void addElements(int numberOfElements)", "private void insertElementAt(int value, int at)", "public void removeAllElements()", "private boolean removeElement(int s)", "private void removeElementAt(int at)", "public void setElementAt(int value, int at)", "public int elementAt(int i)", "private boolean contains(int s)", "public int indexOf(int elem, int index)", "public int indexOf(int elem)", "private int lastIndexOf(int elem)", "public final int[] getMap0()", "public final int[][] getMap()" ],
  "variableNames" : [ "m_blocksize", "m_SHIFT", "m_MASK", "NUMBLOCKS_DEFAULT", "m_numblocks", "m_map", "m_firstFree", "m_map0", "m_buildCache", "m_buildCacheStartIndex" ]
}