{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/MFSerializer.java",
  "packageName" : "android.icu.message2",
  "className" : "MFSerializer",
  "comment" : "\n * This class serializes a MessageFormat 2 data model {@link MFDataModel.Message} to a string,\n * with the proper MessageFormat 2 syntax.\n *\n * @deprecated This API is for technology preview only.\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ "MFDataModel.Message" ],
  "variables" : [ {
    "name" : "shouldDoubleQuotePattern",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "needSpace",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "result",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RE_NUMBER_LITERAL",
    "type" : "java.util.regex.Pattern",
    "comment" : " TBD if it can be refactored to reuse.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String dataModelToString(MFDataModel.Message message)",
    "returnType" : "String",
    "comment" : "\n     * Method converting the {@link MFDataModel.Message} to a string in MessageFormat 2 syntax.\n     *\n     * <p>The result is not necessarily identical with the original string parsed to generate\n     * the data model. But is is functionally equivalent.</p>\n     *\n     * @param message the data model message to serialize\n     * @return the serialized message, in MessageFormat 2 syntax\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "MFDataModel.Message" ]
  }, {
    "name" : "private String messageToString(MFDataModel.Message message)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void selectMessageToString(SelectMessage message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void patternMessageToString(PatternMessage message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void patternToString(Pattern pattern)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void expressionToString(Expression expression)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unsupportedExpressionToString(UnsupportedExpression ue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void markupToString(Markup markup)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void optionsToString(Map<String, Option> options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void functionExpressionToString(FunctionExpression fe)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attributesToString(List<Attribute> attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void annotationToString(Annotation annotation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void variableExpressionToString(VariableExpression ve)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void literalOrVariableRefToString(LiteralOrVariableRef literalOrVarRef)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void literalToString(Literal literal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void literalExpressionToString(LiteralExpression le)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stringPartToString(StringPart part)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void declarationsToString(List<Declaration> declarations)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unsupportedStatementToString(UnsupportedStatement declaration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inputDeclarationToString(InputDeclaration declaration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void localDeclarationToString(LocalDeclaration declaration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void variantToString(Variant variant)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addSpaceIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void errorType(String expectedType, Object obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void error(String text, Object obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void error(String text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String dataModelToString(MFDataModel.Message message)", "private String messageToString(MFDataModel.Message message)", "private void selectMessageToString(SelectMessage message)", "private void patternMessageToString(PatternMessage message)", "private void patternToString(Pattern pattern)", "private void expressionToString(Expression expression)", "private void unsupportedExpressionToString(UnsupportedExpression ue)", "private void markupToString(Markup markup)", "private void optionsToString(Map<String, Option> options)", "private void functionExpressionToString(FunctionExpression fe)", "private void attributesToString(List<Attribute> attributes)", "private void annotationToString(Annotation annotation)", "private void variableExpressionToString(VariableExpression ve)", "private void literalOrVariableRefToString(LiteralOrVariableRef literalOrVarRef)", "private void literalToString(Literal literal)", "private void literalExpressionToString(LiteralExpression le)", "private void stringPartToString(StringPart part)", "private void declarationsToString(List<Declaration> declarations)", "private void unsupportedStatementToString(UnsupportedStatement declaration)", "private void inputDeclarationToString(InputDeclaration declaration)", "private void localDeclarationToString(LocalDeclaration declaration)", "private void variantToString(Variant variant)", "private void addSpaceIfNeeded()", "private void errorType(String expectedType, Object obj)", "private void error(String text, Object obj)", "private void error(String text)" ],
  "variableNames" : [ "shouldDoubleQuotePattern", "needSpace", "result", "RE_NUMBER_LITERAL" ]
}