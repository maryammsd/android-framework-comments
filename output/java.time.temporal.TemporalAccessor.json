{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/temporal/TemporalAccessor.java",
  "packageName" : "java.time.temporal",
  "className" : "TemporalAccessor",
  "comment" : "\n * Framework-level interface defining read-only access to a temporal object,\n * such as a date, time, offset or some combination of these.\n * <p>\n * This is the base interface type for date, time and offset objects.\n * It is implemented by those classes that can provide information\n * as {@linkplain TemporalField fields} or {@linkplain TemporalQuery queries}.\n * <p>\n * Most date and time information can be represented as a number.\n * These are modeled using {@code TemporalField} with the number held using\n * a {@code long} to handle large values. Year, month and day-of-month are\n * simple examples of fields, but they also include instant and offsets.\n * See {@link ChronoField} for the standard set of fields.\n * <p>\n * Two pieces of date/time information cannot be represented by numbers,\n * the {@linkplain java.time.chrono.Chronology chronology} and the\n * {@linkplain java.time.ZoneId time-zone}.\n * These can be accessed via {@linkplain #query(TemporalQuery) queries} using\n * the static methods defined on {@link TemporalQuery}.\n * <p>\n * A sub-interface, {@link Temporal}, extends this definition to one that also\n * supports adjustment and manipulation on more complete temporal objects.\n * <p>\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@code LocalDate}.\n * There are many reasons for this, part of which is that implementations\n * of this interface may be in calendar systems other than ISO.\n * See {@link java.time.chrono.ChronoLocalDate} for a fuller discussion of the issues.\n *\n * @implSpec\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @since 1.8\n ",
  "links" : [ "java.time.temporal.ChronoField", "java.time.chrono.ChronoLocalDate", "java.time.temporal.TemporalQuery", "java.time.temporal.Temporal" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean isSupported(TemporalField field)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified field is supported.\n     * <p>\n     * This checks if the date-time can be queried for the specified field.\n     * If false, then calling the {@link #range(TemporalField) range} and {@link #get(TemporalField) get}\n     * methods will throw an exception.\n     *\n     * @implSpec\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported, then true must be returned, otherwise false must be returned.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * <p>\n     * Implementations must ensure that no observable state is altered when this\n     * read-only method is invoked.\n     *\n     * @param field  the field to check, null returns false\n     * @return true if this date-time can be queried for the field, false if not\n     ",
    "links" : [ "#range(TemporalField)", "java.time.temporal.ChronoField", "#get(TemporalField)" ]
  }, {
    "name" : " ValueRange range(TemporalField field)",
    "returnType" : "ValueRange",
    "comment" : "\n     * Gets the range of valid values for the specified field.\n     * <p>\n     * All fields can be expressed as a {@code long} integer.\n     * This method returns an object that describes the valid range for that value.\n     * The value of this temporal object is used to enhance the accuracy of the returned range.\n     * If the date-time cannot return the range, because the field is unsupported or for\n     * some other reason, an exception will be thrown.\n     * <p>\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * @implSpec\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported, then the range of the field must be returned.\n     * If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * <p>\n     * Implementations must ensure that no observable state is altered when this\n     * read-only method is invoked.\n     * <p>\n     * The default implementation must behave equivalent to this code:\n     * <pre>\n     *  if (field instanceof ChronoField) {\n     *    if (isSupported(field)) {\n     *      return field.range();\n     *    }\n     *    throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n     *  }\n     *  return field.rangeRefinedBy(this);\n     * </pre>\n     *\n     * @param field  the field to query the range for, not null\n     * @return the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     ",
    "links" : [ "java.time.temporal.ChronoField" ]
  }, {
    "name" : " int get(TemporalField field)",
    "returnType" : "int",
    "comment" : "\n     * Gets the value of the specified field as an {@code int}.\n     * <p>\n     * This queries the date-time for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If the date-time cannot return the value, because the field is unsupported or for\n     * some other reason, an exception will be thrown.\n     *\n     * @implSpec\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported and has an {@code int} range, then the value of\n     * the field must be returned.\n     * If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * <p>\n     * Implementations must ensure that no observable state is altered when this\n     * read-only method is invoked.\n     * <p>\n     * The default implementation must behave equivalent to this code:\n     * <pre>\n     *  if (range(field).isIntValue()) {\n     *    return range(field).checkValidIntValue(getLong(field), field);\n     *  }\n     *  throw new UnsupportedTemporalTypeException(\"Invalid field \" + field + \" + for get() method, use getLong() instead\");\n     * </pre>\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field, within the valid range of values\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.ChronoField" ]
  }, {
    "name" : " long getLong(TemporalField field)",
    "returnType" : "long",
    "comment" : "\n     * Gets the value of the specified field as a {@code long}.\n     * <p>\n     * This queries the date-time for the value of the specified field.\n     * The returned value may be outside the valid range of values for the field.\n     * If the date-time cannot return the value, because the field is unsupported or for\n     * some other reason, an exception will be thrown.\n     *\n     * @implSpec\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported, then the value of the field must be returned.\n     * If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * <p>\n     * Implementations must ensure that no observable state is altered when this\n     * read-only method is invoked.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.ChronoField" ]
  }, {
    "name" : " R query(TemporalQuery<R> query)",
    "returnType" : "R",
    "comment" : "\n     * Queries this date-time.\n     * <p>\n     * This queries this date-time using the specified query strategy object.\n     * <p>\n     * Queries are a key tool for extracting information from date-times.\n     * They exists to externalize the process of querying, permitting different\n     * approaches, as per the strategy design pattern.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     * <p>\n     * The most common query implementations are method references, such as\n     * {@code LocalDate::from} and {@code ZoneId::from}.\n     * Additional implementations are provided as static methods on {@link TemporalQuery}.\n     *\n     * @implSpec\n     * The default implementation must behave equivalent to this code:\n     * <pre>\n     *  if (query == TemporalQueries.zoneId() ||\n     *        query == TemporalQueries.chronology() || query == TemporalQueries.precision()) {\n     *    return null;\n     *  }\n     *  return query.queryFrom(this);\n     * </pre>\n     * Future versions are permitted to add further queries to the if statement.\n     * <p>\n     * All classes implementing this interface and overriding this method must call\n     * {@code TemporalAccessor.super.query(query)}. JDK classes may avoid calling\n     * super if they provide behavior equivalent to the default behaviour, however\n     * non-JDK classes may not utilize this optimization and must call {@code super}.\n     * <p>\n     * If the implementation can supply a value for one of the queries listed in the\n     * if statement of the default implementation, then it must do so.\n     * For example, an application-defined {@code HourMin} class storing the hour\n     * and minute must override this method as follows:\n     * <pre>\n     *  if (query == TemporalQueries.precision()) {\n     *    return MINUTES;\n     *  }\n     *  return TemporalAccessor.super.query(query);\n     * </pre>\n     * <p>\n     * Implementations must ensure that no observable state is altered when this\n     * read-only method is invoked.\n     *\n     * @param <R> the type of the result\n     * @param query  the query to invoke, not null\n     * @return the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.TemporalQuery" ]
  } ],
  "methodNames" : [ " boolean isSupported(TemporalField field)", " ValueRange range(TemporalField field)", " int get(TemporalField field)", " long getLong(TemporalField field)", " R query(TemporalQuery<R> query)" ],
  "variableNames" : [ ]
}