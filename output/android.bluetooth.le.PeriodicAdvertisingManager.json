{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/PeriodicAdvertisingManager.java",
  "packageName" : "android.bluetooth.le",
  "className" : "PeriodicAdvertisingManager",
  "comment" : "\n * This class provides methods to perform periodic advertising related\n * operations. An application can register for periodic advertisements using\n * {@link PeriodicAdvertisingManager#registerSync}.\n * <p>\n * Use {@link BluetoothAdapter#getPeriodicAdvertisingManager()} to get an\n * instance of {@link PeriodicAdvertisingManager}.\n * <p>\n * <b>Note:</b> Most of the methods here require\n * {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SKIP_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SKIP_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEOUT_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEOUT_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNC_STARTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothManager",
    "type" : "IBluetoothManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackWrappers",
    "type" : "Map<PeriodicAdvertisingCallback, IPeriodicAdvertisingCallback>",
    "comment" : " maps callback, to callback wrapper and sync handle ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerSync(ScanResult scanResult, int skip, int timeout, PeriodicAdvertisingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Synchronize with periodic advertising pointed to by the {@code scanResult}.\n     * The {@code scanResult} used must contain a valid advertisingSid. First\n     * call to registerSync will use the {@code skip} and {@code timeout} provided.\n     * Subsequent calls from other apps, trying to sync with same set will reuse\n     * existing sync, thus {@code skip} and {@code timeout} values will not take\n     * effect. The values in effect will be returned in\n     * {@link PeriodicAdvertisingCallback#onSyncEstablished}.\n     *\n     * @param scanResult Scan result containing advertisingSid.\n     * @param skip The number of periodic advertising packets that can be skipped after a successful\n     * receive. Must be between 0 and 499.\n     * @param timeout Synchronization timeout for the periodic advertising. One unit is 10ms. Must\n     * be between 10 (100ms) and 16384 (163.84s).\n     * @param callback Callback used to deliver all operations status.\n     * @throws IllegalArgumentException if {@code scanResult} is null or {@code skip} is invalid or\n     * {@code timeout} is invalid or {@code callback} is null.\n     ",
    "links" : [ "android.bluetooth.le.PeriodicAdvertisingCallback#onSyncEstablished" ]
  }, {
    "name" : "public void registerSync(ScanResult scanResult, int skip, int timeout, PeriodicAdvertisingCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Synchronize with periodic advertising pointed to by the {@code scanResult}.\n     * The {@code scanResult} used must contain a valid advertisingSid. First\n     * call to registerSync will use the {@code skip} and {@code timeout} provided.\n     * Subsequent calls from other apps, trying to sync with same set will reuse\n     * existing sync, thus {@code skip} and {@code timeout} values will not take\n     * effect. The values in effect will be returned in\n     * {@link PeriodicAdvertisingCallback#onSyncEstablished}.\n     *\n     * @param scanResult Scan result containing advertisingSid.\n     * @param skip The number of periodic advertising packets that can be skipped after a successful\n     * receive. Must be between 0 and 499.\n     * @param timeout Synchronization timeout for the periodic advertising. One unit is 10ms. Must\n     * be between 10 (100ms) and 16384 (163.84s).\n     * @param callback Callback used to deliver all operations status.\n     * @param handler thread upon which the callbacks will be invoked.\n     * @throws IllegalArgumentException if {@code scanResult} is null or {@code skip} is invalid or\n     * {@code timeout} is invalid or {@code callback} is null.\n     ",
    "links" : [ "android.bluetooth.le.PeriodicAdvertisingCallback#onSyncEstablished" ]
  }, {
    "name" : "public void unregisterSync(PeriodicAdvertisingCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Cancel pending attempt to create sync, or terminate existing sync.\n     *\n     * @param callback Callback used to deliver all operations status.\n     * @throws IllegalArgumentException if {@code callback} is null, or not a properly registered\n     * callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "private IPeriodicAdvertisingCallback wrap(PeriodicAdvertisingCallback callback, Handler handler)",
    "returnType" : "IPeriodicAdvertisingCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "SKIP_MIN", "SKIP_MAX", "TIMEOUT_MIN", "TIMEOUT_MAX", "SYNC_STARTING", "mBluetoothManager", "mBluetoothAdapter", "mCallbackWrappers" ],
  "methodNames" : [ "public void registerSync(ScanResult scanResult, int skip, int timeout, PeriodicAdvertisingCallback callback)", "public void registerSync(ScanResult scanResult, int skip, int timeout, PeriodicAdvertisingCallback callback, Handler handler)", "public void unregisterSync(PeriodicAdvertisingCallback callback)", "private IPeriodicAdvertisingCallback wrap(PeriodicAdvertisingCallback callback, Handler handler)" ]
}