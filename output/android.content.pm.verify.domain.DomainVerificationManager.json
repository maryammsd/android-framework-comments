{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/verify/domain/DomainVerificationManager.java",
  "packageName" : "android.content.pm.verify.domain",
  "className" : "DomainVerificationManager",
  "comment" : "\n * System service to access domain verification APIs.\n *\n * Applications should use {@link #getDomainVerificationUserState(String)} if necessary to\n * check if/how they are verified for a domain, which is required starting from platform\n * {@link android.os.Build.VERSION_CODES#S} in order to open {@link Intent}s which declare\n * {@link Intent#CATEGORY_BROWSABLE} or no category and also match against\n * {@link Intent#CATEGORY_DEFAULT} {@link android.content.IntentFilter}s, either through an\n * explicit declaration of {@link Intent#CATEGORY_DEFAULT} or through the use of\n * {@link android.content.pm.PackageManager#MATCH_DEFAULT_ONLY}, which is usually added for the\n * caller when using {@link Context#startActivity(Intent)} and similar.\n ",
  "links" : [ "android.os.Build.VERSION_CODES#S", "android.content.Intent#CATEGORY_BROWSABLE", "#getDomainVerificationUserState(String)", "android.content.pm.PackageManager#MATCH_DEFAULT_ONLY", "android.content.IntentFilter", "android.content.Intent", "android.content.Context#startActivity(Intent)", "android.content.Intent#CATEGORY_DEFAULT" ],
  "variables" : [ {
    "name" : "EXTRA_VERIFICATION_REQUEST",
    "type" : "String",
    "comment" : "\n     * Extra field name for a {@link DomainVerificationRequest} for the requested packages. Passed\n     * to an the domain verification agent that handles\n     * {@link Intent#ACTION_DOMAINS_NEED_VERIFICATION}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationRequest", "android.content.Intent#ACTION_DOMAINS_NEED_VERIFICATION" ]
  }, {
    "name" : "STATUS_OK",
    "type" : "int",
    "comment" : "\n     * Default return code for when a method has succeeded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_DOMAIN_SET_ID_INVALID",
    "type" : "int",
    "comment" : "\n     * The provided domain set ID was invalid, probably due to the package being updated between\n     * the initial request that provided the ID and the method call that used it. This usually\n     * means the work being processed by the verification agent is outdated and a new request\n     * should be scheduled, which should already be in progress as part of the\n     * {@link Intent#ACTION_DOMAINS_NEED_VERIFICATION} broadcast.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_DOMAINS_NEED_VERIFICATION" ]
  }, {
    "name" : "ERROR_UNKNOWN_DOMAIN",
    "type" : "int",
    "comment" : "\n     * The provided set of domains contains a domain not declared by the target package. This\n     * usually means the work being processed by the verification agent is outdated and a new\n     * request should be scheduled, which should already be in progress as part of the\n     * {@link Intent#ACTION_DOMAINS_NEED_VERIFICATION} broadcast.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_DOMAINS_NEED_VERIFICATION" ]
  }, {
    "name" : "ERROR_UNABLE_TO_APPROVE",
    "type" : "int",
    "comment" : "\n     * The system was unable to select the domain for approval. This indicates another application\n     * has been granted a higher approval, usually through domain verification, and the target\n     * package is unable to override it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_ERROR_NAME_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * Used to communicate through {@link ServiceSpecificException}. Should not be exposed as API.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.ServiceSpecificException" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDomainVerificationManager",
    "type" : "IDomainVerificationManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUriRelativeFilterGroups(@NonNull String packageName, @NonNull Map<String, List<UriRelativeFilterGroup>> domainToGroupsMap)",
    "returnType" : "void",
    "comment" : "\n     * Update the URI relative filter groups for a package. The groups set using this API acts\n     * as an additional filtering layer during intent resolution. It does not replace any\n     * existing groups that have been added to the package's intent filters either using the\n     * {@link android.content.IntentFilter#addUriRelativeFilterGroup(UriRelativeFilterGroup)}\n     * API or defined in the manifest.\n     * <p>\n     * Groups can be indexed to any domain or can be indexed for all subdomains by prefixing the\n     * hostname with a wildcard (i.e. \"*.example.com\"). Priority will be first given to groups\n     * that are indexed to the specific subdomain of the intent's data URI followed by any groups\n     * indexed to wildcard subdomains. If the subdomain consists of more than one label, priority\n     * will decrease corresponding to the decreasing number of subdomain labels after the wildcard.\n     * For example \"a.b.c.d\" will match \"*.b.c.d\" before \"*.c.d\".\n     * <p>\n     * All previously existing groups set for a domain index using this API will be cleared when\n     * new groups are set.\n     *\n     * @param packageName The name of the package.\n     * @param domainToGroupsMap A map of domains to a list of {@link UriRelativeFilterGroup}s that\n     *                         should apply to them. Groups for each domain will replace any groups\n     *                         provided for that domain in a prior call to this method. To clear\n     *                         existing groups, set the list to null or a empty list. Groups will\n     *                         be evaluated in the order they are provided.\n     *\n     * @see UriRelativeFilterGroup\n     * @see android.content.IntentFilter\n     * @hide\n     ",
    "links" : [ "android.content.UriRelativeFilterGroup", "android.content.IntentFilter#addUriRelativeFilterGroup(UriRelativeFilterGroup)" ]
  }, {
    "name" : "public Map<String, List<UriRelativeFilterGroup>> getUriRelativeFilterGroups(@NonNull String packageName, @NonNull List<String> domains)",
    "returnType" : "Map<String, List<UriRelativeFilterGroup>>",
    "comment" : "\n     * Retrieves a map of a package's verified domains to a list of {@link UriRelativeFilterGroup}s\n     * that applies to them.\n     *\n     * @param packageName The name of the package.\n     * @param domains List of domains for which to retrieve group matches.\n     * @return A map of domains to the lists of {@link UriRelativeFilterGroup}s that apply to them.\n     * @hide\n     ",
    "links" : [ "android.content.UriRelativeFilterGroup" ]
  }, {
    "name" : "public List<String> queryValidVerificationPackageNames()",
    "returnType" : "List<String>",
    "comment" : "\n     * Used to iterate all {@link DomainVerificationInfo} values to do cleanup or retries. This is\n     * usually a heavy workload and should be done infrequently.\n     *\n     * @return the current snapshot of package names with valid autoVerify URLs.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationInfo" ]
  }, {
    "name" : "public DomainVerificationInfo getDomainVerificationInfo(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "DomainVerificationInfo",
    "comment" : "\n     * Retrieves the domain verification state for a given package.\n     *\n     * @return the data for the package, or null if it does not declare any autoVerify domains\n     * @throws NameNotFoundException If the package is unavailable. This is an unrecoverable error\n     *                               and should not be re-tried except on a time scheduled basis.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setDomainVerificationStatus(@NonNull UUID domainSetId, @NonNull Set<String> domains, int state) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Change the verification status of the {@param domains} of the package associated with {@param\n     * domainSetId}.\n     *\n     * @param domainSetId See {@link DomainVerificationInfo#getIdentifier()}.\n     * @param domains     List of host names to change the state of.\n     * @param state       See {@link DomainVerificationInfo#getHostToStateMap()}.\n     * @return error code or {@link #STATUS_OK} if successful\n     * @throws NameNotFoundException If the ID is known to be good, but the package is\n     *                               unavailable. This may be because the package is installed on\n     *                               a volume that is no longer mounted. This error is\n     *                               unrecoverable until the package is available again, and\n     *                               should not be re-tried except on a time scheduled basis.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationInfo#getIdentifier()", "android.content.pm.verify.domain.DomainVerificationInfo#getHostToStateMap()", "#STATUS_OK" ]
  }, {
    "name" : "public void setDomainVerificationLinkHandlingAllowed(@NonNull String packageName, boolean allowed) throws NameNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Change whether the given packageName is allowed to handle BROWSABLE and DEFAULT category web\n     * (HTTP/HTTPS) {@link Intent} Activity open requests. The final state is determined along with\n     * the verification status for the specific domain being opened and other system state. An app\n     * with this enabled is not guaranteed to be the sole link handler for its domains.\n     * <p>\n     * By default, all apps are allowed to open links. Users must disable them explicitly.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "public int setDomainVerificationUserSelection(@NonNull UUID domainSetId, @NonNull Set<String> domains, boolean enabled) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Update the recorded user selection for the given {@param domains} for the given {@param\n     * domainSetId}. This state is recorded for the lifetime of a domain for a package on device,\n     * and will never be reset by the system short of an app data clear.\n     * <p>\n     * This state is stored per device user. If another user needs to be changed, the appropriate\n     * permissions must be acquired and {@link Context#createContextAsUser(UserHandle, int)} should\n     * be used.\n     * <p>\n     * Enabling an unverified domain will allow an application to open it, but this can only occur\n     * if no other app on the device is approved for a higher approval level. This can queried\n     * using {@link #getOwnersForDomain(String)}.\n     *\n     * If all owners for a domain are {@link DomainOwner#isOverrideable()}, then calling this to\n     * enable that domain will disable all other owners.\n     *\n     * On the other hand, if any of the owners are non-overrideable, then this must be called with\n     * false for all of the other owners to disable them before the domain can be taken by a new\n     * owner.\n     *\n     * @param domainSetId See {@link DomainVerificationInfo#getIdentifier()}.\n     * @param domains     The domains to toggle the state of.\n     * @param enabled     Whether or not the app should automatically open the domains specified.\n     * @return error code or {@link #STATUS_OK} if successful\n     * @throws NameNotFoundException If the ID is known to be good, but the package is\n     *                               unavailable. This may be because the package is installed on\n     *                               a volume that is no longer mounted. This error is\n     *                               unrecoverable until the package is available again, and\n     *                               should not be re-tried except on a time scheduled basis.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationInfo#getIdentifier()", "android.content.Context#createContextAsUser(UserHandle", "#getOwnersForDomain(String)", "#STATUS_OK", "android.content.pm.verify.domain.DomainOwner#isOverrideable()" ]
  }, {
    "name" : "public DomainVerificationUserState getDomainVerificationUserState(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "DomainVerificationUserState",
    "comment" : "\n     * Retrieve the user state for the given package and the {@link Context}'s user.\n     *\n     * @param packageName The app to query state for.\n     * @return The user selection verification data for the given package for the user, or null if\n     * the package does not declare any HTTP/HTTPS domains.\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public SortedSet<DomainOwner> getOwnersForDomain(@NonNull String domain)",
    "returnType" : "SortedSet<DomainOwner>",
    "comment" : "\n     * For the given domain, return all apps which are approved to open it in a\n     * greater than 0 priority. This does not mean that all apps can actually open\n     * an Intent with that domain. That will be decided by the set of apps which\n     * are the highest priority level, ignoring all lower priority levels.\n     *\n     * The set will be ordered from lowest to highest priority.\n     *\n     * @param domain The host to query for. An invalid domain will result in an empty set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Exception rethrow(Exception exception, @Nullable String packageName)",
    "returnType" : "Exception",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateInput(@Nullable UUID domainSetId, @Nullable Set<String> domains)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setUriRelativeFilterGroups(@NonNull String packageName, @NonNull Map<String, List<UriRelativeFilterGroup>> domainToGroupsMap)", "public Map<String, List<UriRelativeFilterGroup>> getUriRelativeFilterGroups(@NonNull String packageName, @NonNull List<String> domains)", "public List<String> queryValidVerificationPackageNames()", "public DomainVerificationInfo getDomainVerificationInfo(@NonNull String packageName) throws NameNotFoundException", "public int setDomainVerificationStatus(@NonNull UUID domainSetId, @NonNull Set<String> domains, int state) throws NameNotFoundException", "public void setDomainVerificationLinkHandlingAllowed(@NonNull String packageName, boolean allowed) throws NameNotFoundException", "public int setDomainVerificationUserSelection(@NonNull UUID domainSetId, @NonNull Set<String> domains, boolean enabled) throws NameNotFoundException", "public DomainVerificationUserState getDomainVerificationUserState(@NonNull String packageName) throws NameNotFoundException", "public SortedSet<DomainOwner> getOwnersForDomain(@NonNull String domain)", "private Exception rethrow(Exception exception, @Nullable String packageName)", "private void validateInput(@Nullable UUID domainSetId, @Nullable Set<String> domains)" ],
  "variableNames" : [ "EXTRA_VERIFICATION_REQUEST", "STATUS_OK", "ERROR_DOMAIN_SET_ID_INVALID", "ERROR_UNKNOWN_DOMAIN", "ERROR_UNABLE_TO_APPROVE", "INTERNAL_ERROR_NAME_NOT_FOUND", "mContext", "mDomainVerificationManager" ]
}