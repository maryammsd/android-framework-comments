{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/RenderEffect.java",
  "packageName" : "android.graphics",
  "className" : "RenderEffect",
  "comment" : "\n * Intermediate rendering step used to render drawing commands with a corresponding\n * visual effect. A {@link RenderEffect} can be configured on a {@link RenderNode} through\n * {@link RenderNode#setRenderEffect(RenderEffect)} and will be applied when drawn through\n * {@link Canvas#drawRenderNode(RenderNode)}.\n * Additionally a {@link RenderEffect} can be applied to a View's backing RenderNode through\n * {@link android.view.View#setRenderEffect(RenderEffect)}\n ",
  "links" : [ "android.graphics.RenderNode", "android.graphics.RenderNode#setRenderEffect(RenderEffect)", "android.view.View#setRenderEffect(RenderEffect)", "android.graphics.RenderEffect", "android.graphics.Canvas#drawRenderNode(RenderNode)" ],
  "variables" : [ {
    "name" : "mNativeRenderEffect",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RenderEffect createOffsetEffect(float offsetX, float offsetY)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} instance that will offset the drawing content\n     * by the provided x and y offset.\n     * @param offsetX offset along the x axis in pixels\n     * @param offsetY offset along the y axis in pixels\n     ",
    "links" : [ "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createOffsetEffect(float offsetX, float offsetY, @NonNull RenderEffect input)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} instance with the provided x and y offset\n     * @param offsetX offset along the x axis in pixels\n     * @param offsetY offset along the y axis in pixels\n     * @param input target RenderEffect used to render in the offset coordinates.\n     ",
    "links" : [ "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createBlurEffect(float radiusX, float radiusY, @NonNull RenderEffect inputEffect, @NonNull TileMode edgeTreatment)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that blurs the contents of the optional input RenderEffect\n     * with the specified radius along the x and y axis. If no input RenderEffect is provided\n     * then all drawing commands issued with a {@link android.graphics.RenderNode} that this\n     * RenderEffect is installed in will be blurred\n     * @param radiusX Radius of blur along the X axis\n     * @param radiusY Radius of blur along the Y axis\n     * @param inputEffect Input RenderEffect that provides the content to be blurred, can be null\n     *                    to indicate that the drawing commands on the RenderNode are to be\n     *                    blurred instead of the input RenderEffect\n     * @param edgeTreatment Policy for how to blur content near edges of the blur kernel\n     ",
    "links" : [ "android.graphics.RenderNode", "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createBlurEffect(float radiusX, float radiusY, @NonNull TileMode edgeTreatment)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that blurs the contents of the\n     * {@link android.graphics.RenderNode} that this RenderEffect is installed on with the\n     * specified radius along the x and y axis.\n     * @param radiusX Radius of blur along the X axis\n     * @param radiusY Radius of blur along the Y axis\n     * @param edgeTreatment Policy for how to blur content near edges of the blur kernel\n     ",
    "links" : [ "android.graphics.RenderNode", "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createBitmapEffect(@NonNull Bitmap bitmap)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that renders the contents of the input {@link Bitmap}.\n     * This is useful to create an input for other {@link RenderEffect} types such as\n     * {@link RenderEffect#createBlurEffect(float, float, RenderEffect, TileMode)} or\n     * {@link RenderEffect#createColorFilterEffect(ColorFilter, RenderEffect)}\n     *\n     * @param bitmap The source bitmap to be rendered by the created {@link RenderEffect}\n     ",
    "links" : [ "android.graphics.RenderEffect#createColorFilterEffect(ColorFilter", "android.graphics.Bitmap", "android.graphics.RenderEffect", "android.graphics.RenderEffect#createBlurEffect(float" ]
  }, {
    "name" : "public static RenderEffect createBitmapEffect(@NonNull Bitmap bitmap, @Nullable Rect src, @NonNull Rect dst)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that renders the contents of the input {@link Bitmap}.\n     * This is useful to create an input for other {@link RenderEffect} types such as\n     * {@link RenderEffect#createBlurEffect(float, float, RenderEffect, TileMode)} or\n     * {@link RenderEffect#createColorFilterEffect(ColorFilter, RenderEffect)}\n     *\n     * @param bitmap The source bitmap to be rendered by the created {@link RenderEffect}\n     * @param src Optional subset of the bitmap to be part of the rendered output. If null\n     *            is provided, the entire bitmap bounds are used.\n     * @param dst Bounds of the destination which the bitmap is translated and scaled to be\n     *            drawn into within the bounds of the {@link RenderNode} this RenderEffect is\n     *            installed on\n     ",
    "links" : [ "android.graphics.RenderEffect#createColorFilterEffect(ColorFilter", "android.graphics.Bitmap", "android.graphics.RenderNode", "android.graphics.RenderEffect", "android.graphics.RenderEffect#createBlurEffect(float" ]
  }, {
    "name" : "public static RenderEffect createColorFilterEffect(@NonNull ColorFilter colorFilter, @NonNull RenderEffect renderEffect)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that applies the color filter to the provided RenderEffect\n     *\n     * @param colorFilter ColorFilter applied to the content in the input RenderEffect\n     * @param renderEffect Source to be transformed by the specified {@link ColorFilter}\n     ",
    "links" : [ "android.graphics.ColorFilter", "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createColorFilterEffect(@NonNull ColorFilter colorFilter)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that applies the color filter to the contents of the\n     * {@link android.graphics.RenderNode} that this RenderEffect is installed on\n     * @param colorFilter ColorFilter applied to the content in the input RenderEffect\n     ",
    "links" : [ "android.graphics.RenderNode", "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createBlendModeEffect(@NonNull RenderEffect dst, @NonNull RenderEffect src, @NonNull BlendMode blendMode)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that is a composition of 2 other {@link RenderEffect} instances\n     * combined by the specified {@link BlendMode}\n     *\n     * @param dst The Dst pixels used in blending\n     * @param src The Src pixels used in blending\n     * @param blendMode The {@link BlendMode} to be used to combine colors from the two\n     *                  {@link RenderEffect}s\n     ",
    "links" : [ "android.graphics.BlendMode", "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createChainEffect(@NonNull RenderEffect outer, @NonNull RenderEffect inner)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that composes 'inner' with 'outer', such that the results of\n     * 'inner' are treated as the source bitmap passed to 'outer', i.e.\n     *\n     * <pre>\n     * {@code\n     * result = outer(inner(source))\n     * }\n     * </pre>\n     *\n     * Consumers should favor explicit chaining of {@link RenderEffect} instances at creation time\n     * rather than using chain effect. Chain effects are useful for situations where the input or\n     * output are provided from elsewhere and the input or output {@link RenderEffect} need to be\n     * changed.\n     *\n     * @param outer {@link RenderEffect} that consumes the output of {@param inner} as its input\n     * @param inner {@link RenderEffect} that is consumed as input by {@param outer}\n     ",
    "links" : [ "android.graphics.RenderEffect" ]
  }, {
    "name" : "public static RenderEffect createShaderEffect(@NonNull Shader shader)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that renders the contents of the input {@link Shader}.\n     * This is useful to create an input for other {@link RenderEffect} types such as\n     * {@link RenderEffect#createBlurEffect(float, float, RenderEffect, TileMode)}\n     * {@link RenderEffect#createBlurEffect(float, float, RenderEffect, TileMode)} or\n     * {@link RenderEffect#createColorFilterEffect(ColorFilter, RenderEffect)}.\n     ",
    "links" : [ "android.graphics.RenderEffect#createColorFilterEffect(ColorFilter", "android.graphics.Shader", "android.graphics.RenderEffect", "android.graphics.RenderEffect#createBlurEffect(float" ]
  }, {
    "name" : "public static RenderEffect createRuntimeShaderEffect(@NonNull RuntimeShader shader, @NonNull String uniformShaderName)",
    "returnType" : "RenderEffect",
    "comment" : "\n     * Create a {@link RenderEffect} that executes the provided {@link RuntimeShader} and passes\n     * the contents of the {@link android.graphics.RenderNode} that this RenderEffect is installed\n     * on as an input to the shader.\n     * @param shader the runtime shader that will bind the inputShaderName to the RenderEffect input\n     * @param uniformShaderName the uniform name defined in the RuntimeShader's program to which\n     *                         the contents of the RenderNode will be bound\n     ",
    "links" : [ "android.graphics.RuntimeShader", "android.graphics.RenderNode", "android.graphics.RenderEffect" ]
  }, {
    "name" : " long getNativeInstance()",
    "returnType" : "long",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateOffsetEffect(float offsetX, float offsetY, long nativeInput)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateBlurEffect(float radiusX, float radiusY, long nativeInput, int edgeTreatment)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateBitmapEffect(long bitmapHandle, float srcLeft, float srcTop, float srcRight, float srcBottom, float dstLeft, float dstTop, float dstRight, float dstBottom)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateColorFilterEffect(long colorFilter, long nativeInput)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateBlendModeEffect(long dst, long src, int blendmode)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateChainEffect(long outer, long inner)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateShaderEffect(long shader)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateRuntimeShaderEffect(long shaderBuilder, String inputShaderName)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RenderEffect createOffsetEffect(float offsetX, float offsetY)", "public static RenderEffect createOffsetEffect(float offsetX, float offsetY, @NonNull RenderEffect input)", "public static RenderEffect createBlurEffect(float radiusX, float radiusY, @NonNull RenderEffect inputEffect, @NonNull TileMode edgeTreatment)", "public static RenderEffect createBlurEffect(float radiusX, float radiusY, @NonNull TileMode edgeTreatment)", "public static RenderEffect createBitmapEffect(@NonNull Bitmap bitmap)", "public static RenderEffect createBitmapEffect(@NonNull Bitmap bitmap, @Nullable Rect src, @NonNull Rect dst)", "public static RenderEffect createColorFilterEffect(@NonNull ColorFilter colorFilter, @NonNull RenderEffect renderEffect)", "public static RenderEffect createColorFilterEffect(@NonNull ColorFilter colorFilter)", "public static RenderEffect createBlendModeEffect(@NonNull RenderEffect dst, @NonNull RenderEffect src, @NonNull BlendMode blendMode)", "public static RenderEffect createChainEffect(@NonNull RenderEffect outer, @NonNull RenderEffect inner)", "public static RenderEffect createShaderEffect(@NonNull Shader shader)", "public static RenderEffect createRuntimeShaderEffect(@NonNull RuntimeShader shader, @NonNull String uniformShaderName)", " long getNativeInstance()", "private static native long nativeCreateOffsetEffect(float offsetX, float offsetY, long nativeInput)", "private static native long nativeCreateBlurEffect(float radiusX, float radiusY, long nativeInput, int edgeTreatment)", "private static native long nativeCreateBitmapEffect(long bitmapHandle, float srcLeft, float srcTop, float srcRight, float srcBottom, float dstLeft, float dstTop, float dstRight, float dstBottom)", "private static native long nativeCreateColorFilterEffect(long colorFilter, long nativeInput)", "private static native long nativeCreateBlendModeEffect(long dst, long src, int blendmode)", "private static native long nativeCreateChainEffect(long outer, long inner)", "private static native long nativeCreateShaderEffect(long shader)", "private static native long nativeCreateRuntimeShaderEffect(long shaderBuilder, String inputShaderName)", "private static native long nativeGetFinalizer()" ],
  "variableNames" : [ "mNativeRenderEffect" ]
}