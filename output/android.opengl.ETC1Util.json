{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/opengl/ETC1Util.java",
  "packageName" : "android.opengl",
  "className" : "ETC1Util",
  "comment" : "\n * Utility methods for using ETC1 compressed textures.\n *\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void loadTexture(int target, int level, int border, int fallbackFormat, int fallbackType, InputStream input) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to load an ETC1 texture whether or not the active OpenGL context\n     * supports the ETC1 texture compression format.\n     * @param target the texture target.\n     * @param level the texture level\n     * @param border the border size. Typically 0.\n     * @param fallbackFormat the format to use if ETC1 texture compression is not supported.\n     * Must be GL_RGB.\n     * @param fallbackType the type to use if ETC1 texture compression is not supported.\n     * Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel,\n     * or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.\n     * @param input the input stream containing an ETC1 texture in PKM format.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void loadTexture(int target, int level, int border, int fallbackFormat, int fallbackType, ETC1Texture texture)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to load an ETC1 texture whether or not the active OpenGL context\n     * supports the ETC1 texture compression format.\n     * @param target the texture target.\n     * @param level the texture level\n     * @param border the border size. Typically 0.\n     * @param fallbackFormat the format to use if ETC1 texture compression is not supported.\n     * Must be GL_RGB.\n     * @param fallbackType the type to use if ETC1 texture compression is not supported.\n     * Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel,\n     * or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.\n     * @param texture the ETC1 to load.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isETC1Supported()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if ETC1 texture compression is supported by the active OpenGL ES context.\n     * @return true if the active OpenGL ES context supports ETC1 texture compression.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ETC1Texture createTexture(InputStream input) throws IOException",
    "returnType" : "ETC1Texture",
    "comment" : "\n     * Create a new ETC1Texture from an input stream containing a PKM formatted compressed texture.\n     * @param input an input stream containing a PKM formatted compressed texture.\n     * @return an ETC1Texture read from the input stream.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ETC1Texture compressTexture(Buffer input, int width, int height, int pixelSize, int stride)",
    "returnType" : "ETC1Texture",
    "comment" : "\n     * Helper function that compresses an image into an ETC1Texture.\n     * @param input a native order direct buffer containing the image data\n     * @param width the width of the image in pixels\n     * @param height the height of the image in pixels\n     * @param pixelSize the size of a pixel in bytes (2 or 3)\n     * @param stride the width of a line of the image in bytes\n     * @return the ETC1 texture.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void writeTexture(ETC1Texture texture, OutputStream output) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Helper function that writes an ETC1Texture to an output stream formatted as a PKM file.\n     * @param texture the input texture.\n     * @param output the stream to write the formatted texture data to.\n     * @throws IOException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static void loadTexture(int target, int level, int border, int fallbackFormat, int fallbackType, InputStream input) throws IOException", "public static void loadTexture(int target, int level, int border, int fallbackFormat, int fallbackType, ETC1Texture texture)", "public static boolean isETC1Supported()", "public static ETC1Texture createTexture(InputStream input) throws IOException", "public static ETC1Texture compressTexture(Buffer input, int width, int height, int pixelSize, int stride)", "public static void writeTexture(ETC1Texture texture, OutputStream output) throws IOException" ]
}