{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/charset/CharsetEncoder.java",
  "packageName" : "java.nio.charset",
  "className" : "CharsetEncoder",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "charset",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "averageBytesPerChar",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxBytesPerChar",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "replacement",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "malformedInputAction",
    "type" : "CodingErrorAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unmappableCharacterAction",
    "type" : "CodingErrorAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_RESET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_CODING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_FLUSHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stateNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cachedDecoder",
    "type" : "WeakReference<CharsetDecoder>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Charset charset()",
    "returnType" : "Charset",
    "comment" : "\n     * Returns the charset that created this encoder.\n     *\n     * @return  This encoder's charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] replacement()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns this encoder's replacement value.\n     *\n     * @return  This encoder's current replacement,\n     *          which is never {@code null} and is never empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharsetEncoder replaceWith(byte[] newReplacement)",
    "returnType" : "CharsetEncoder",
    "comment" : "\n     * Changes this encoder's replacement value.\n     *\n     * <p> This method invokes the {@link #implReplaceWith implReplaceWith}\n     * method, passing the new replacement, after checking that the new\n     * replacement is acceptable.  </p>\n     *\n     * @param  newReplacement  The new replacement; must not be\n     *         {@code null}, must have non-zero length,\n\n\n\n\n\n     *         must not be longer than the value returned by the\n     *         {@link #maxBytesPerChar() maxBytesPerChar} method, and\n     *         must be {@link #isLegalReplacement legal}\n\n     *\n     * @return  This encoder\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameter do not hold\n     ",
    "links" : [ "#implReplaceWith", "#maxBytesPerChar()", "#isLegalReplacement" ]
  }, {
    "name" : "protected void implReplaceWith(byte[] newReplacement)",
    "returnType" : "void",
    "comment" : "\n     * Reports a change to this encoder's replacement value.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by encoders that require notification of changes to\n     * the replacement.  </p>\n     *\n     * @param  newReplacement    The replacement value\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLegalReplacement(byte[] repl)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not the given byte array is a legal replacement value\n     * for this encoder.\n     *\n     * <p> A replacement is legal if, and only if, it is a legal sequence of\n     * bytes in this encoder's charset; that is, it must be possible to decode\n     * the replacement into one or more sixteen-bit Unicode characters.\n     *\n     * <p> The default implementation of this method is not very efficient; it\n     * should generally be overridden to improve performance.  </p>\n     *\n     * @param  repl  The byte array to be tested\n     *\n     * @return  {@code true} if, and only if, the given byte array\n     *          is a legal replacement value for this encoder\n     ",
    "links" : [ ]
  }, {
    "name" : "public CodingErrorAction malformedInputAction()",
    "returnType" : "CodingErrorAction",
    "comment" : "\n     * Returns this encoder's current action for malformed-input errors.\n     *\n     * @return The current malformed-input action, which is never {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharsetEncoder onMalformedInput(CodingErrorAction newAction)",
    "returnType" : "CharsetEncoder",
    "comment" : "\n     * Changes this encoder's action for malformed-input errors.\n     *\n     * <p> This method invokes the {@link #implOnMalformedInput\n     * implOnMalformedInput} method, passing the new action.  </p>\n     *\n     * @param  newAction  The new action; must not be {@code null}\n     *\n     * @return  This encoder\n     *\n     * @throws IllegalArgumentException\n     *         If the precondition on the parameter does not hold\n     ",
    "links" : [ "#implOnMalformedInputimplOnMalformedInput" ]
  }, {
    "name" : "protected void implOnMalformedInput(CodingErrorAction newAction)",
    "returnType" : "void",
    "comment" : "\n     * Reports a change to this encoder's malformed-input action.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by encoders that require notification of changes to\n     * the malformed-input action.  </p>\n     *\n     * @param  newAction  The new action\n     ",
    "links" : [ ]
  }, {
    "name" : "public CodingErrorAction unmappableCharacterAction()",
    "returnType" : "CodingErrorAction",
    "comment" : "\n     * Returns this encoder's current action for unmappable-character errors.\n     *\n     * @return The current unmappable-character action, which is never\n     *         {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharsetEncoder onUnmappableCharacter(CodingErrorAction newAction)",
    "returnType" : "CharsetEncoder",
    "comment" : "\n     * Changes this encoder's action for unmappable-character errors.\n     *\n     * <p> This method invokes the {@link #implOnUnmappableCharacter\n     * implOnUnmappableCharacter} method, passing the new action.  </p>\n     *\n     * @param  newAction  The new action; must not be {@code null}\n     *\n     * @return  This encoder\n     *\n     * @throws IllegalArgumentException\n     *         If the precondition on the parameter does not hold\n     ",
    "links" : [ "#implOnUnmappableCharacterimplOnUnmappableCharacter" ]
  }, {
    "name" : "protected void implOnUnmappableCharacter(CodingErrorAction newAction)",
    "returnType" : "void",
    "comment" : "\n     * Reports a change to this encoder's unmappable-character action.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by encoders that require notification of changes to\n     * the unmappable-character action.  </p>\n     *\n     * @param  newAction  The new action\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float averageBytesPerChar()",
    "returnType" : "float",
    "comment" : "\n     * Returns the average number of bytes that will be produced for each\n     * character of input.  This heuristic value may be used to estimate the size\n     * of the output buffer required for a given input sequence.\n     *\n     * @return  The average number of bytes produced\n     *          per character of input\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float maxBytesPerChar()",
    "returnType" : "float",
    "comment" : "\n     * Returns the maximum number of bytes that will be produced for each\n     * character of input.  This value may be used to compute the worst-case size\n     * of the output buffer required for a given input sequence. This value\n     * accounts for any necessary content-independent prefix or suffix\n\n     * bytes, such as byte-order marks.\n\n\n\n\n     *\n     * @return  The maximum number of bytes that will be produced per\n     *          character of input\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CoderResult encode(CharBuffer in, ByteBuffer out, boolean endOfInput)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Encodes as many characters as possible from the given input buffer,\n     * writing the results to the given output buffer.\n     *\n     * <p> The buffers are read from, and written to, starting at their current\n     * positions.  At most {@link Buffer#remaining in.remaining()} characters\n     * will be read and at most {@link Buffer#remaining out.remaining()}\n     * bytes will be written.  The buffers' positions will be advanced to\n     * reflect the characters read and the bytes written, but their marks and\n     * limits will not be modified.\n     *\n     * <p> In addition to reading characters from the input buffer and writing\n     * bytes to the output buffer, this method returns a {@link CoderResult}\n     * object to describe its reason for termination:\n     *\n     * <ul>\n     *\n     *   <li><p> {@link CoderResult#UNDERFLOW} indicates that as much of the\n     *   input buffer as possible has been encoded.  If there is no further\n     *   input then the invoker can proceed to the next step of the\n     *   <a href=\"#steps\">encoding operation</a>.  Otherwise this method\n     *   should be invoked again with further input.  </p></li>\n     *\n     *   <li><p> {@link CoderResult#OVERFLOW} indicates that there is\n     *   insufficient space in the output buffer to encode any more characters.\n     *   This method should be invoked again with an output buffer that has\n     *   more {@linkplain Buffer#remaining remaining} bytes. This is\n     *   typically done by draining any encoded bytes from the output\n     *   buffer.  </p></li>\n     *\n     *   <li><p> A {@linkplain CoderResult#malformedForLength\n     *   malformed-input} result indicates that a malformed-input\n     *   error has been detected.  The malformed characters begin at the input\n     *   buffer's (possibly incremented) position; the number of malformed\n     *   characters may be determined by invoking the result object's {@link\n     *   CoderResult#length() length} method.  This case applies only if the\n     *   {@linkplain #onMalformedInput malformed action} of this encoder\n     *   is {@link CodingErrorAction#REPORT}; otherwise the malformed input\n     *   will be ignored or replaced, as requested.  </p></li>\n     *\n     *   <li><p> An {@linkplain CoderResult#unmappableForLength\n     *   unmappable-character} result indicates that an\n     *   unmappable-character error has been detected.  The characters that\n     *   encode the unmappable character begin at the input buffer's (possibly\n     *   incremented) position; the number of such characters may be determined\n     *   by invoking the result object's {@link CoderResult#length() length}\n     *   method.  This case applies only if the {@linkplain #onUnmappableCharacter\n     *   unmappable action} of this encoder is {@link\n     *   CodingErrorAction#REPORT}; otherwise the unmappable character will be\n     *   ignored or replaced, as requested.  </p></li>\n     *\n     * </ul>\n     *\n     * In any case, if this method is to be reinvoked in the same encoding\n     * operation then care should be taken to preserve any characters remaining\n     * in the input buffer so that they are available to the next invocation.\n     *\n     * <p> The {@code endOfInput} parameter advises this method as to whether\n     * the invoker can provide further input beyond that contained in the given\n     * input buffer.  If there is a possibility of providing additional input\n     * then the invoker should pass {@code false} for this parameter; if there\n     * is no possibility of providing further input then the invoker should\n     * pass {@code true}.  It is not erroneous, and in fact it is quite\n     * common, to pass {@code false} in one invocation and later discover that\n     * no further input was actually available.  It is critical, however, that\n     * the final invocation of this method in a sequence of invocations always\n     * pass {@code true} so that any remaining unencoded input will be treated\n     * as being malformed.\n     *\n     * <p> This method works by invoking the {@link #encodeLoop encodeLoop}\n     * method, interpreting its results, handling error conditions, and\n     * reinvoking it as necessary.  </p>\n     *\n     *\n     * @param  in\n     *         The input character buffer\n     *\n     * @param  out\n     *         The output byte buffer\n     *\n     * @param  endOfInput\n     *         {@code true} if, and only if, the invoker can provide no\n     *         additional input characters beyond those in the given buffer\n     *\n     * @return  A coder-result object describing the reason for termination\n     *\n     * @throws  IllegalStateException\n     *          If an encoding operation is already in progress and the previous\n     *          step was an invocation neither of the {@link #reset reset}\n     *          method, nor of this method with a value of {@code false} for\n     *          the {@code endOfInput} parameter, nor of this method with a\n     *          value of {@code true} for the {@code endOfInput} parameter\n     *          but a return value indicating an incomplete encoding operation\n     *\n     * @throws  CoderMalfunctionError\n     *          If an invocation of the encodeLoop method threw\n     *          an unexpected exception\n     *\n     * @throws  NullPointerException if input or output buffer is null\n     ",
    "links" : [ "java.nio.charset.CoderResult#OVERFLOW", "java.nio.charset.CoderResult", "#reset", "java.nio.charset.CodingErrorAction#REPORT", "#encodeLoop", "java.nio.charset.CoderResult#UNDERFLOW", "java.nio.Buffer#remaining", "java.nio.charset.CoderResult#length()" ]
  }, {
    "name" : "public final CoderResult flush(ByteBuffer out)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Flushes this encoder.\n     *\n     * <p> Some encoders maintain internal state and may need to write some\n     * final bytes to the output buffer once the overall input sequence has\n     * been read.\n     *\n     * <p> Any additional output is written to the output buffer beginning at\n     * its current position.  At most {@link Buffer#remaining out.remaining()}\n     * bytes will be written.  The buffer's position will be advanced\n     * appropriately, but its mark and limit will not be modified.\n     *\n     * <p> If this method completes successfully then it returns {@link\n     * CoderResult#UNDERFLOW}.  If there is insufficient room in the output\n     * buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens\n     * then this method must be invoked again, with an output buffer that has\n     * more room, in order to complete the current <a href=\"#steps\">encoding\n     * operation</a>.\n     *\n     * <p> If this encoder has already been flushed then invoking this method\n     * has no effect.\n     *\n     * <p> This method invokes the {@link #implFlush implFlush} method to\n     * perform the actual flushing operation.  </p>\n     *\n     * @param  out\n     *         The output byte buffer\n     *\n     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or\n     *          {@link CoderResult#OVERFLOW}\n     *\n     * @throws  IllegalStateException\n     *          If the previous step of the current encoding operation was an\n     *          invocation neither of the {@link #flush flush} method nor of\n     *          the three-argument {@link\n     *          #encode(CharBuffer,ByteBuffer,boolean) encode} method\n     *          with a value of {@code true} for the {@code endOfInput}\n     *          parameter\n     ",
    "links" : [ "java.nio.charset.CoderResult#OVERFLOW", "#encode(CharBuffer", "#flush", "java.nio.charset.CoderResult#UNDERFLOW", "java.nio.Buffer#remaining", "#implFlush" ]
  }, {
    "name" : "protected CoderResult implFlush(ByteBuffer out)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Flushes this encoder.\n     *\n     * <p> The default implementation of this method does nothing, and always\n     * returns {@link CoderResult#UNDERFLOW}.  This method should be overridden\n     * by encoders that may need to write final bytes to the output buffer\n     * once the entire input sequence has been read. </p>\n     *\n     * @param  out\n     *         The output byte buffer\n     *\n     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or\n     *          {@link CoderResult#OVERFLOW}\n     ",
    "links" : [ "java.nio.charset.CoderResult#OVERFLOW", "java.nio.charset.CoderResult#UNDERFLOW" ]
  }, {
    "name" : "public final CharsetEncoder reset()",
    "returnType" : "CharsetEncoder",
    "comment" : "\n     * Resets this encoder, clearing any internal state.\n     *\n     * <p> This method resets charset-independent state and also invokes the\n     * {@link #implReset() implReset} method in order to perform any\n     * charset-specific reset actions.  </p>\n     *\n     * @return  This encoder\n     *\n     ",
    "links" : [ "#implReset()" ]
  }, {
    "name" : "protected void implReset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this encoder, clearing any charset-specific internal state.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by encoders that maintain internal state.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract CoderResult encodeLoop(CharBuffer in, ByteBuffer out)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Encodes one or more characters into one or more bytes.\n     *\n     * <p> This method encapsulates the basic encoding loop, encoding as many\n     * characters as possible until it either runs out of input, runs out of room\n     * in the output buffer, or encounters an encoding error.  This method is\n     * invoked by the {@link #encode encode} method, which handles result\n     * interpretation and error recovery.\n     *\n     * <p> The buffers are read from, and written to, starting at their current\n     * positions.  At most {@link Buffer#remaining in.remaining()} characters\n     * will be read, and at most {@link Buffer#remaining out.remaining()}\n     * bytes will be written.  The buffers' positions will be advanced to\n     * reflect the characters read and the bytes written, but their marks and\n     * limits will not be modified.\n     *\n     * <p> This method returns a {@link CoderResult} object to describe its\n     * reason for termination, in the same manner as the {@link #encode encode}\n     * method.  Most implementations of this method will handle encoding errors\n     * by returning an appropriate result object for interpretation by the\n     * {@link #encode encode} method.  An optimized implementation may instead\n     * examine the relevant error action and implement that action itself.\n     *\n     * <p> An implementation of this method may perform arbitrary lookahead by\n     * returning {@link CoderResult#UNDERFLOW} until it receives sufficient\n     * input.  </p>\n     *\n     * @param  in\n     *         The input character buffer\n     *\n     * @param  out\n     *         The output byte buffer\n     *\n     * @return  A coder-result object describing the reason for termination\n     ",
    "links" : [ "java.nio.charset.CoderResult", "#encode", "java.nio.charset.CoderResult#UNDERFLOW", "java.nio.Buffer#remaining" ]
  }, {
    "name" : "public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Convenience method that encodes the remaining content of a single input\n     * character buffer into a newly-allocated byte buffer.\n     *\n     * <p> This method implements an entire <a href=\"#steps\">encoding\n     * operation</a>; that is, it resets this encoder, then it encodes the\n     * characters in the given character buffer, and finally it flushes this\n     * encoder.  This method should therefore not be invoked if an encoding\n     * operation is already in progress.  </p>\n     *\n     * @param  in\n     *         The input character buffer\n     *\n     * @return A newly-allocated byte buffer containing the result of the\n     *         encoding operation.  The buffer's position will be zero and its\n     *         limit will follow the last byte written.\n     *\n     * @throws  IllegalStateException\n     *          If an encoding operation is already in progress\n     *\n     * @throws  MalformedInputException\n     *          If the character sequence starting at the input buffer's current\n     *          position is not a legal sixteen-bit Unicode sequence and the current malformed-input action\n     *          is {@link CodingErrorAction#REPORT}\n     *\n     * @throws  UnmappableCharacterException\n     *          If the character sequence starting at the input buffer's current\n     *          position cannot be mapped to an equivalent byte sequence and\n     *          the current unmappable-character action is {@link\n     *          CodingErrorAction#REPORT}\n     *\n     * @throws  CoderMalfunctionError\n     *          If an invocation of the encodeLoop method threw\n     *          an unexpected exception\n     *\n     * @throws  NullPointerException if input buffer is null\n     ",
    "links" : [ "java.nio.charset.CodingErrorAction#REPORT" ]
  }, {
    "name" : "private boolean canEncode(CharBuffer cb)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canEncode(char c)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this encoder can encode the given character.\n     *\n     * <p> This method returns {@code false} if the given character is a\n     * surrogate character; such characters can be interpreted only when they\n     * are members of a pair consisting of a high surrogate followed by a low\n     * surrogate.  The {@link #canEncode(java.lang.CharSequence)\n     * canEncode(CharSequence)} method may be used to test whether or not a\n     * character sequence can be encoded.\n     *\n     * <p> This method may modify this encoder's state; it should therefore not\n     * be invoked if an <a href=\"#steps\">encoding operation</a> is already in\n     * progress.\n     *\n     * <p> The default implementation of this method is not very efficient; it\n     * should generally be overridden to improve performance.  </p>\n     *\n     * @param   c\n     *          The given character\n     *\n     * @return  {@code true} if, and only if, this encoder can encode\n     *          the given character\n     *\n     * @throws  IllegalStateException\n     *          If an encoding operation is already in progress\n     ",
    "links" : [ "#canEncode(java.lang.CharSequence)" ]
  }, {
    "name" : "public boolean canEncode(CharSequence cs)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this encoder can encode the given character\n     * sequence.\n     *\n     * <p> If this method returns {@code false} for a particular character\n     * sequence then more information about why the sequence cannot be encoded\n     * may be obtained by performing a full <a href=\"#steps\">encoding\n     * operation</a>.\n     *\n     * <p> This method may modify this encoder's state; it should therefore not\n     * be invoked if an encoding operation is already in progress.\n     *\n     * <p> The default implementation of this method is not very efficient; it\n     * should generally be overridden to improve performance.  </p>\n     *\n     * @param   cs\n     *          The given character sequence\n     *\n     * @return  {@code true} if, and only if, this encoder can encode\n     *          the given character without throwing any exceptions and without\n     *          performing any replacements\n     *\n     * @throws  IllegalStateException\n     *          If an encoding operation is already in progress\n     ",
    "links" : [ ]
  }, {
    "name" : "private void throwIllegalStateException(int from, int to)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final Charset charset()", "public final byte[] replacement()", "public final CharsetEncoder replaceWith(byte[] newReplacement)", "protected void implReplaceWith(byte[] newReplacement)", "public boolean isLegalReplacement(byte[] repl)", "public CodingErrorAction malformedInputAction()", "public final CharsetEncoder onMalformedInput(CodingErrorAction newAction)", "protected void implOnMalformedInput(CodingErrorAction newAction)", "public CodingErrorAction unmappableCharacterAction()", "public final CharsetEncoder onUnmappableCharacter(CodingErrorAction newAction)", "protected void implOnUnmappableCharacter(CodingErrorAction newAction)", "public final float averageBytesPerChar()", "public final float maxBytesPerChar()", "public final CoderResult encode(CharBuffer in, ByteBuffer out, boolean endOfInput)", "public final CoderResult flush(ByteBuffer out)", "protected CoderResult implFlush(ByteBuffer out)", "public final CharsetEncoder reset()", "protected void implReset()", "protected abstract CoderResult encodeLoop(CharBuffer in, ByteBuffer out)", "public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException", "private boolean canEncode(CharBuffer cb)", "public boolean canEncode(char c)", "public boolean canEncode(CharSequence cs)", "private void throwIllegalStateException(int from, int to)" ],
  "variableNames" : [ "charset", "averageBytesPerChar", "maxBytesPerChar", "replacement", "malformedInputAction", "unmappableCharacterAction", "ST_RESET", "ST_CODING", "ST_END", "ST_FLUSHED", "state", "stateNames", "cachedDecoder" ]
}