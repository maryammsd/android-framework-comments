{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/ImsService.java",
  "packageName" : "android.telephony.ims",
  "className" : "ImsService",
  "comment" : "\n * Main ImsService implementation, which binds via the Telephony ImsResolver. Services that extend\n * ImsService must register the service in their AndroidManifest to be detected by the framework.\n * First, the application must declare that they use the \"android.permission.BIND_IMS_SERVICE\"\n * permission. Then, the ImsService definition in the manifest must follow the following format:\n *\n * ...\n * <service android:name=\".EgImsService\"\n *     android:permission=\"android.permission.BIND_IMS_SERVICE\" >\n *     ...\n *     <intent-filter>\n *         <action android:name=\"android.telephony.ims.ImsService\" />\n *     </intent-filter>\n * </service>\n * ...\n *\n * The telephony framework will then bind to the ImsService you have defined in your manifest\n * if you are either:\n * 1) Defined as the default ImsService for the device in the device overlay using\n *    \"config_ims_mmtel_package\" or \"config_ims_rcs_package\".\n * 2) Defined as a Carrier Provided ImsService in the Carrier Configuration using\n *    {@link CarrierConfigManager#KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING} or\n *    {@link CarrierConfigManager#KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING}.\n *\n * There are two ways to define to the platform which {@link ImsFeature}s this {@link ImsService}\n * supports, dynamic or static definitions.\n *\n * In the static definition, the {@link ImsFeature}s that are supported are defined in the service\n * definition of the AndroidManifest.xml file as metadata:\n * <!-- Apps must declare which features they support as metadata. The different categories are\n *      defined below. In this example, the MMTEL_FEATURE feature is supported. -->\n * <meta-data android:name=\"android.telephony.ims.MMTEL_FEATURE\" android:value=\"true\" />\n *\n * The features that are currently supported in an ImsService are:\n * - RCS_FEATURE: This ImsService implements the RcsFeature class.\n * - MMTEL_FEATURE: This ImsService implements the MmTelFeature class.\n * - EMERGENCY_MMTEL_FEATURE: This ImsService supports Emergency Calling for MMTEL, must be\n *   declared along with the MMTEL_FEATURE. If this is not specified, the framework will use\n *   circuit switch for emergency calling.\n *\n * In the dynamic definition, the supported features are not specified in the service definition\n * of the AndroidManifest. Instead, the framework binds to this service and calls\n * {@link #querySupportedImsFeatures()}. The {@link ImsService} then returns an\n * {@link ImsFeatureConfiguration}, which the framework uses to initialize the supported\n * {@link ImsFeature}s. If at any time, the list of supported {@link ImsFeature}s changes,\n * {@link #onUpdateSupportedImsFeatures(ImsFeatureConfiguration)} can be called to tell the\n * framework of the changes.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The intent that must be defined as an intent-filter in the AndroidManifest of the ImsService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mFeaturesBySlot",
    "type" : "SparseArray<SparseArray<ImsFeature>>",
    "comment" : " call ImsFeature#onFeatureRemoved.",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "IImsServiceControllerListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImsServiceController",
    "type" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<ImsFeature> getFeatures(int slotId)",
    "returnType" : "SparseArray<ImsFeature>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private IImsMmTelFeature createMmTelFeatureInternal(int slotId, IImsFeatureStatusCallback c)",
    "returnType" : "IImsMmTelFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IImsRcsFeature createRcsFeatureInternal(int slotId, IImsFeatureStatusCallback c)",
    "returnType" : "IImsRcsFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupFeature(ImsFeature f, int slotId, int featureType, IImsFeatureStatusCallback c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addImsFeature(int slotId, int featureType, ImsFeature f)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeImsFeature(int slotId, int featureType, IImsFeatureStatusCallback c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ImsFeatureConfiguration querySupportedImsFeatures()",
    "returnType" : "ImsFeatureConfiguration",
    "comment" : "\n     * When called, provide the {@link ImsFeatureConfiguration} that this {@link ImsService}\n     * currently supports. This will trigger the framework to set up the {@link ImsFeature}s that\n     * correspond to the {@link ImsFeature}s configured here.\n     *\n     * Use {@link #onUpdateSupportedImsFeatures(ImsFeatureConfiguration)} to change the supported\n     * {@link ImsFeature}s.\n     *\n     * @return an {@link ImsFeatureConfiguration} containing Features this ImsService supports.\n     ",
    "links" : [ "ImsFeatureConfiguration", "ImsService", "ImsFeature", "ImsFeature", "#onUpdateSupportedImsFeatures", "ImsFeature", "ImsFeatureConfiguration" ]
  }, {
    "name" : "public final void onUpdateSupportedImsFeatures(ImsFeatureConfiguration c) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Updates the framework with a new {@link ImsFeatureConfiguration} containing the updated\n     * features, that this {@link ImsService} supports. This may trigger the framework to add/remove\n     * new ImsFeatures, depending on the configuration.\n     ",
    "links" : [ "ImsFeatureConfiguration", "ImsService" ]
  }, {
    "name" : "public void readyForFeatureCreation()",
    "returnType" : "void",
    "comment" : "\n     * The ImsService has been bound and is ready for ImsFeature creation based on the Features that\n     * the ImsService has registered for with the framework, either in the manifest or via\n     * {@link #querySupportedImsFeatures()}.\n     *\n     * The ImsService should use this signal instead of onCreate/onBind or similar to perform\n     * feature initialization because the framework may bind to this service multiple times to\n     * query the ImsService's {@link ImsFeatureConfiguration} via\n     * {@link #querySupportedImsFeatures()}before creating features.\n     ",
    "links" : [ "#querySupportedImsFeatures", "ImsFeatureConfiguration", "#querySupportedImsFeatures" ]
  }, {
    "name" : "public void enableIms(int slotId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has enabled IMS for the slot specified, the ImsService should register for IMS\n     * and perform all appropriate initialization to bring up all ImsFeatures.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableIms(int slotId)",
    "returnType" : "void",
    "comment" : "\n     * The framework has disabled IMS for the slot specified. The ImsService must deregister for IMS\n     * and set capability status to false for all ImsFeatures.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MmTelFeature createMmTelFeature(int slotId)",
    "returnType" : "MmTelFeature",
    "comment" : "\n     * When called, the framework is requesting that a new {@link MmTelFeature} is created for the\n     * specified slot.\n     *\n     * @param slotId The slot ID that the MMTEL Feature is being created for.\n     * @return The newly created {@link MmTelFeature} associated with the slot or null if the\n     * feature is not supported.\n     ",
    "links" : [ "MmTelFeature", "MmTelFeature" ]
  }, {
    "name" : "public RcsFeature createRcsFeature(int slotId)",
    "returnType" : "RcsFeature",
    "comment" : "\n     * When called, the framework is requesting that a new {@link RcsFeature} is created for the\n     * specified slot.\n     *\n     * @param slotId The slot ID that the RCS Feature is being created for.\n     * @return The newly created {@link RcsFeature} associated with the slot or null if the feature\n     * is not supported.\n     ",
    "links" : [ "RcsFeature", "RcsFeature" ]
  }, {
    "name" : "public ImsConfigImplBase getConfig(int slotId)",
    "returnType" : "ImsConfigImplBase",
    "comment" : "\n     * Return the {@link ImsConfigImplBase} implementation associated with the provided slot. This\n     * will be used by the platform to get/set specific IMS related configurations.\n     *\n     * @param slotId The slot that the IMS configuration is associated with.\n     * @return ImsConfig implementation that is associated with the specified slot.\n     ",
    "links" : [ "ImsConfigImplBase" ]
  }, {
    "name" : "public ImsRegistrationImplBase getRegistration(int slotId)",
    "returnType" : "ImsRegistrationImplBase",
    "comment" : "\n     * Return the {@link ImsRegistrationImplBase} implementation associated with the provided slot.\n     *\n     * @param slotId The slot that is associated with the IMS Registration.\n     * @return the ImsRegistration implementation associated with the slot.\n     ",
    "links" : [ "ImsRegistrationImplBase" ]
  } ],
  "variableNames" : [ "LOG_TAG", "SERVICE_INTERFACE", "mFeaturesBySlot", "mListener", "mImsServiceController" ],
  "methodNames" : [ "public IBinder onBind(Intent intent)", "public SparseArray<ImsFeature> getFeatures(int slotId)", "private IImsMmTelFeature createMmTelFeatureInternal(int slotId, IImsFeatureStatusCallback c)", "private IImsRcsFeature createRcsFeatureInternal(int slotId, IImsFeatureStatusCallback c)", "private void setupFeature(ImsFeature f, int slotId, int featureType, IImsFeatureStatusCallback c)", "private void addImsFeature(int slotId, int featureType, ImsFeature f)", "private void removeImsFeature(int slotId, int featureType, IImsFeatureStatusCallback c)", "public ImsFeatureConfiguration querySupportedImsFeatures()", "public final void onUpdateSupportedImsFeatures(ImsFeatureConfiguration c) throws RemoteException", "public void readyForFeatureCreation()", "public void enableIms(int slotId)", "public void disableIms(int slotId)", "public MmTelFeature createMmTelFeature(int slotId)", "public RcsFeature createRcsFeature(int slotId)", "public ImsConfigImplBase getConfig(int slotId)", "public ImsRegistrationImplBase getRegistration(int slotId)" ]
}