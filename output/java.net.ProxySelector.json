{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/ProxySelector.java",
  "packageName" : "java.net",
  "className" : "ProxySelector",
  "comment" : "\n * Selects the proxy server to use, if any, when connecting to the\n * network resource referenced by a URL. A proxy selector is a\n * concrete sub-class of this class and is registered by invoking the\n * {@link java.net.ProxySelector#setDefault setDefault} method. The\n * currently registered proxy selector can be retrieved by calling\n * {@link java.net.ProxySelector#getDefault getDefault} method.\n *\n * <p> When a proxy selector is registered, for instance, a subclass\n * of URLConnection class should call the {@link #select select}\n * method for each URL request so that the proxy selector can decide\n * if a direct, or proxied connection should be used. The {@link\n * #select select} method returns an iterator over a collection with\n * the preferred connection approach.\n *\n * <p> If a connection cannot be established to a proxy (PROXY or\n * SOCKS) servers then the caller should call the proxy selector's\n * {@link #connectFailed connectFailed} method to notify the proxy\n * selector that the proxy server is unavailable. </p>\n *\n * <P>The default proxy selector does enforce a\n * <a href=\"doc-files/net-properties.html#Proxies\">set of System Properties</a>\n * related to proxy settings.</P>\n *\n * @author Yingxian Wang\n * @author Jean-Christophe Collet\n * @since 1.5\n ",
  "links" : [ "java.net.ProxySelector#setDefault", "#select", "#connectFailed", "java.net.ProxySelector#getDefault" ],
  "variables" : [ {
    "name" : "theProxySelector",
    "type" : "ProxySelector",
    "comment" : "\n     * The system wide proxy selector that selects the proxy server to\n     * use, if any, when connecting to a remote object referenced by\n     * an URL.\n     *\n     * @see #setDefault(ProxySelector)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ProxySelector getDefault()",
    "returnType" : "ProxySelector",
    "comment" : "\n     * Gets the system-wide proxy selector.\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed and it denies\n     * {@link NetPermission}{@code (\"getProxySelector\")}\n     * @see #setDefault(ProxySelector)\n     * @return the system-wide {@code ProxySelector}\n     * @since 1.5\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public static void setDefault(ProxySelector ps)",
    "returnType" : "void",
    "comment" : "\n     * Sets (or unsets) the system-wide proxy selector.\n     *\n     * Note: non-standard protocol handlers may ignore this setting.\n     *\n     * @param ps The HTTP proxy selector, or\n     *          {@code null} to unset the proxy selector.\n     *\n     * @throws  SecurityException\n     *          If a security manager has been installed and it denies\n     * {@link NetPermission}{@code (\"setProxySelector\")}\n     *\n     * @see #getDefault()\n     * @since 1.5\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public abstract List<Proxy> select(URI uri)",
    "returnType" : "List<Proxy>",
    "comment" : "\n     * Selects all the applicable proxies based on the protocol to\n     * access the resource with and a destination address to access\n     * the resource at.\n     * The format of the URI is defined as follow:\n     * <UL>\n     * <LI>http URI for http connections</LI>\n     * <LI>https URI for https connections\n     * <LI>{@code socket://host:port}<br>\n     *     for tcp client sockets connections</LI>\n     * </UL>\n     *\n     * @param   uri\n     *          The URI that a connection is required to\n     *\n     * @return  a List of Proxies. Each element in the\n     *          the List is of type\n     *          {@link java.net.Proxy Proxy};\n     *          when no proxy is available, the list will\n     *          contain one element of type\n     *          {@link java.net.Proxy Proxy}\n     *          that represents a direct connection.\n     * @throws IllegalArgumentException if the argument is null\n     ",
    "links" : [ "java.net.Proxy" ]
  }, {
    "name" : "public abstract void connectFailed(URI uri, SocketAddress sa, IOException ioe)",
    "returnType" : "void",
    "comment" : "\n     * Called to indicate that a connection could not be established\n     * to a proxy/socks server. An implementation of this method can\n     * temporarily remove the proxies or reorder the sequence of\n     * proxies returned by {@link #select(URI)}, using the address\n     * and the IOException caught when trying to connect.\n     *\n     * @param   uri\n     *          The URI that the proxy at sa failed to serve.\n     * @param   sa\n     *          The socket address of the proxy/SOCKS server\n     *\n     * @param   ioe\n     *          The I/O exception thrown when the connect failed.\n     * @throws IllegalArgumentException if either argument is null\n     ",
    "links" : [ "#select(URI)" ]
  } ],
  "methodNames" : [ "public static ProxySelector getDefault()", "public static void setDefault(ProxySelector ps)", "public abstract List<Proxy> select(URI uri)", "public abstract void connectFailed(URI uri, SocketAddress sa, IOException ioe)" ],
  "variableNames" : [ "theProxySelector" ]
}