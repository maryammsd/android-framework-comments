{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/PathParser_Delegate.java",
  "packageName" : "android.util",
  "className" : "PathParser_Delegate",
  "comment" : "\n * Delegate that provides implementation for native methods in {@link android.util.PathParser}\n * <p/>\n * Through the layoutlib_create tool, selected methods of PathParser have been replaced by calls to\n * methods of the same name in this delegate class.\n *\n * Most of the code has been taken from the implementation in\n * {@code tools/base/sdk-common/src/main/java/com/android/ide/common/vectordrawable/PathParser.java}\n * revision be6fe89a3b686db5a75e7e692a148699973957f3\n ",
  "variables" : [ {
    "name" : "LOGGER",
    "type" : "Logger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sManager",
    "type" : "DelegateManager<PathParser_Delegate>",
    "comment" : " ---- Builder delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "mPathDataNodes",
    "type" : "PathDataNode[]",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PathParser_Delegate getDelegate(long nativePtr)",
    "returnType" : "PathParser_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PathDataNode[] getPathDataNodes()",
    "returnType" : "PathDataNode[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nParseStringForPath(long pathPtr, @NonNull String pathString, int stringLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nCreatePathFromPathData(long outPathPtr, long pathData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nCreateEmptyPathData()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nCreatePathData(long nativePtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nCreatePathDataFromString(@NonNull String pathString, int stringLength)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nInterpolatePathData(long outDataPtr, long fromDataPtr, long toDataPtr, float fraction)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nFinalize(long nativePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nCanMorph(long fromDataPtr, long toDataPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetPathData(long outDataPtr, long fromDataPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PathDataNode[] createNodesFromPathData(@NonNull String pathData)",
    "returnType" : "PathDataNode[]",
    "comment" : "\n     * @param pathData The string representing a path, the same as \"d\" string in svg file.\n     *\n     * @return an array of the PathDataNode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PathDataNode[] deepCopyNodes(@NonNull PathDataNode[] source)",
    "returnType" : "PathDataNode[]",
    "comment" : "\n     * @param source The array of PathDataNode to be duplicated.\n     *\n     * @return a deep copy of the <code>source</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean canMorph(PathDataNode[] nodesFrom, PathDataNode[] nodesTo)",
    "returnType" : "boolean",
    "comment" : "\n     * @param nodesFrom The source path represented in an array of PathDataNode\n     * @param nodesTo The target path represented in an array of PathDataNode\n     * @return whether the <code>nodesFrom</code> can morph into <code>nodesTo</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void updateNodes(PathDataNode[] target, PathDataNode[] source)",
    "returnType" : "void",
    "comment" : "\n     * Update the target's data to match the source.\n     * Before calling this, make sure canMorph(target, source) is true.\n     *\n     * @param target The target path represented in an array of PathDataNode\n     * @param source The source path represented in an array of PathDataNode\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int nextStart(@NonNull String s, int end)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void extract(@NonNull String s, int start, @NonNull ExtractFloatResult result)",
    "returnType" : "void",
    "comment" : "\n     * Calculate the position of the next comma or space or negative sign\n     *\n     * @param s the string to search\n     * @param start the position to start searching\n     * @param result the result of the extraction, including the position of the the starting\n     * position of next number, whether it is ending with a '-'.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float[] getFloats(@NonNull String s)",
    "returnType" : "float[]",
    "comment" : "\n     * Parse the floats in the string. This is an optimized version of\n     * parseFloat(s.split(\",|\\\\s\"));\n     *\n     * @param s the string containing a command and list of floats\n     *\n     * @return array of floats\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void addNode(@NonNull ArrayList<PathDataNode> list, char cmd, @NonNull float[] val)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOGGER", "sManager", "mPathDataNodes" ],
  "methodNames" : [ "public static PathParser_Delegate getDelegate(long nativePtr)", "public PathDataNode[] getPathDataNodes()", " static void nParseStringForPath(long pathPtr, @NonNull String pathString, int stringLength)", " static void nCreatePathFromPathData(long outPathPtr, long pathData)", " static long nCreateEmptyPathData()", " static long nCreatePathData(long nativePtr)", " static long nCreatePathDataFromString(@NonNull String pathString, int stringLength)", " static boolean nInterpolatePathData(long outDataPtr, long fromDataPtr, long toDataPtr, float fraction)", " static void nFinalize(long nativePtr)", " static boolean nCanMorph(long fromDataPtr, long toDataPtr)", " static void nSetPathData(long outDataPtr, long fromDataPtr)", "public static PathDataNode[] createNodesFromPathData(@NonNull String pathData)", "public static PathDataNode[] deepCopyNodes(@NonNull PathDataNode[] source)", "public static boolean canMorph(PathDataNode[] nodesFrom, PathDataNode[] nodesTo)", "public static void updateNodes(PathDataNode[] target, PathDataNode[] source)", "private static int nextStart(@NonNull String s, int end)", "private static void extract(@NonNull String s, int start, @NonNull ExtractFloatResult result)", "private static float[] getFloats(@NonNull String s)", "private static void addNode(@NonNull ArrayList<PathDataNode> list, char cmd, @NonNull float[] val)" ]
}