{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/UrlQuerySanitizer.java",
  "packageName" : "android.net",
  "className" : "IllegalCharacterValueSanitizer",
  "comment" : "\n     * Sanitize values based on which characters they contain. Illegal\n     * characters are replaced with either space or '_', depending upon\n     * whether space is a legal character or not.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPACE_OK",
    "type" : "int",
    "comment" : "\n         * Allow space (' ') characters.\n         ",
    "links" : [ ]
  }, {
    "name" : "OTHER_WHITESPACE_OK",
    "type" : "int",
    "comment" : "\n         * Allow whitespace characters other than space. The\n         * other whitespace characters are\n         * '\\t' '\\f' '\\n' '\\r' and '\\0x000b' (vertical tab)\n         ",
    "links" : [ ]
  }, {
    "name" : "NON_7_BIT_ASCII_OK",
    "type" : "int",
    "comment" : "\n         * Allow characters with character codes 128 to 255.\n         ",
    "links" : [ ]
  }, {
    "name" : "DQUOTE_OK",
    "type" : "int",
    "comment" : "\n         * Allow double quote characters. ('\"')\n         ",
    "links" : [ ]
  }, {
    "name" : "SQUOTE_OK",
    "type" : "int",
    "comment" : "\n         * Allow single quote characters. ('\\'')\n         ",
    "links" : [ ]
  }, {
    "name" : "LT_OK",
    "type" : "int",
    "comment" : "\n         * Allow less-than characters. ('<')\n         ",
    "links" : [ ]
  }, {
    "name" : "GT_OK",
    "type" : "int",
    "comment" : "\n         * Allow greater-than characters. ('>')\n         ",
    "links" : [ ]
  }, {
    "name" : "AMP_OK",
    "type" : "int",
    "comment" : "\n         * Allow ampersand characters ('&')\n         ",
    "links" : [ ]
  }, {
    "name" : "PCT_OK",
    "type" : "int",
    "comment" : "\n         * Allow percent-sign characters ('%')\n         ",
    "links" : [ ]
  }, {
    "name" : "NUL_OK",
    "type" : "int",
    "comment" : "\n         * Allow nul characters ('\\0')\n         ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_URL_OK",
    "type" : "int",
    "comment" : "\n         * Allow text to start with a script URL\n         * such as \"javascript:\" or \"vbscript:\"\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_OK",
    "type" : "int",
    "comment" : "\n         * Mask with all fields set to OK\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_WHITESPACE_OK",
    "type" : "int",
    "comment" : "\n         * Mask with both regular space and other whitespace OK\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_ILLEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Deny all special characters.\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_BUT_NUL_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow all special characters except Nul. ('\\0').\n         * <li>Allow script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_BUT_WHITESPACE_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow all special characters except for:\n         * <ul>\n         *  <li>whitespace characters\n         *  <li>Nul ('\\0')\n         * </ul>\n         * <li>Allow script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "URL_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow characters used by encoded URLs.\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "URL_AND_SPACE_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow characters used by encoded URLs.\n         * <li>Allow spaces.\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "AMP_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow ampersand.\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "AMP_AND_SPACE_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow ampersand.\n         * <li>Allow space.\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "SPACE_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow space.\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL",
    "type" : "int",
    "comment" : "\n         * <ul>\n         * <li>Allow all but.\n         * <ul>\n         *  <li>Nul ('\\0')\n         *  <li>Angle brackets ('<', '>')\n         * </ul>\n         * <li>Deny script URLs.\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "JAVASCRIPT_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VBSCRIPT_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_SCRIPT_PREFIX_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String sanitize(String value)",
    "returnType" : "String",
    "comment" : "\n         * Sanitize a value.\n         * <ol>\n         * <li>If script URLs are not OK, they will be removed.\n         * <li>If neither spaces nor other white space is OK, then\n         * white space will be trimmed from the beginning and end of\n         * the URL. (Just the actual white space characters are trimmed, not\n         * other control codes.)\n         * <li> Illegal characters will be replaced with\n         * either ' ' or '_', depending on whether a space is itself a\n         * legal character.\n         * </ol>\n         * @param value\n         * @return the sanitized value\n         ",
    "links" : [ ]
  }, {
    "name" : "private String trimWhitespace(String value)",
    "returnType" : "String",
    "comment" : "\n         * Trim whitespace from the beginning and end of a string.\n         * <p>\n         * Note: can't use {@link String#trim} because {@link String#trim} has a\n         * different definition of whitespace than we want.\n         * @param value the string to trim\n         * @return the trimmed string\n         ",
    "links" : [ "#trim" ]
  }, {
    "name" : "private boolean isWhitespace(char c)",
    "returnType" : "boolean",
    "comment" : "\n         * Check if c is whitespace.\n         * @param c character to test\n         * @return true if c is a whitespace character\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean characterIsLegal(char c)",
    "returnType" : "boolean",
    "comment" : "\n         * Check whether an individual character is legal. Uses the\n         * flag bit-set passed into the constructor.\n         * @param c\n         * @return true if c is a legal character\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String sanitize(String value)", "private String trimWhitespace(String value)", "private boolean isWhitespace(char c)", "private boolean characterIsLegal(char c)" ],
  "variableNames" : [ "mFlags", "SPACE_OK", "OTHER_WHITESPACE_OK", "NON_7_BIT_ASCII_OK", "DQUOTE_OK", "SQUOTE_OK", "LT_OK", "GT_OK", "AMP_OK", "PCT_OK", "NUL_OK", "SCRIPT_URL_OK", "ALL_OK", "ALL_WHITESPACE_OK", "ALL_ILLEGAL", "ALL_BUT_NUL_LEGAL", "ALL_BUT_WHITESPACE_LEGAL", "URL_LEGAL", "URL_AND_SPACE_LEGAL", "AMP_LEGAL", "AMP_AND_SPACE_LEGAL", "SPACE_LEGAL", "ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL", "JAVASCRIPT_PREFIX", "VBSCRIPT_PREFIX", "MIN_SCRIPT_PREFIX_LENGTH" ]
}