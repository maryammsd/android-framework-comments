{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToTextStream.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToTextStream",
  "comment" : "\n * This class is not a public API.\n * It is only public because it is used in other packages. \n * This class converts SAX or SAX-like calls to a \n * serialized document for xsl:output method of \"text\".\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected void startDocumentInternal() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the beginning of a document.\n   *\n   * <p>The SAX parser will invoke this method only once, before any\n   * other methods in this interface or in DTDHandler (except for\n   * setDocumentLocator).</p>\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of a document.\n   *\n   * <p>The SAX parser will invoke this method only once, and it will\n   * be the last method invoked during the parse.  The parser shall\n   * not invoke this method until it has either abandoned parsing\n   * (because of an unrecoverable error) or reached the end of\n   * input.</p>\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String namespaceURI, String localName, String name, Attributes atts) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the beginning of an element.\n   *\n   * <p>The Parser will invoke this method at the beginning of every\n   * element in the XML document; there will be a corresponding\n   * endElement() event for every startElement() event (even when the\n   * element is empty). All of the element's content will be\n   * reported, in order, before the corresponding endElement()\n   * event.</p>\n   *\n   * <p>If the element name has a namespace prefix, the prefix will\n   * still be attached.  Note that the attribute list provided will\n   * contain only attributes with explicit values (specified or\n   * defaulted): #IMPLIED attributes will be omitted.</p>\n   *\n   *\n   * @param namespaceURI The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param name The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   * @param atts The attributes attached to the element, if any.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see #endElement\n   * @see org.xml.sax.AttributeList\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String namespaceURI, String localName, String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of an element.\n   *\n   * <p>The SAX parser will invoke this method at the end of every\n   * element in the XML document; there will be a corresponding\n   * startElement() event for every endElement() event (even when the\n   * element is empty).</p>\n   *\n   * <p>If the element name has a namespace prefix, the prefix will\n   * still be attached to the name.</p>\n   *\n   *\n   * @param namespaceURI The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param name The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of character data.\n   *\n   * <p>The Parser will call this method to report each chunk of\n   * character data.  SAX parsers may return all contiguous character\n   * data in a single chunk, or they may split it into several\n   * chunks; however, all of the characters in any single event\n   * must come from the same external entity, so that the Locator\n   * provides useful information.</p>\n   *\n   * <p>The application must not attempt to read from the array\n   * outside of the specified range.</p>\n   *\n   * <p>Note that some parsers will report whitespace using the\n   * ignorableWhitespace() method rather than this one (validating\n   * parsers must do so).</p>\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see #ignorableWhitespace\n   * @see org.xml.sax.Locator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void charactersRaw(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * If available, when the disable-output-escaping attribute is used,\n   * output raw text without escaping.\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : " void writeNormalizedChars(final char[] ch, final int start, final int length, final boolean useLineSep) throws IOException, org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Normalize the characters, but don't escape.  Different from \n     * SerializerToXML#writeNormalizedChars because it does not attempt to do \n     * XML escaping at all.\n     *\n     * @param ch The characters from the XML document.\n     * @param start The start position in the array.\n     * @param length The number of characters to read from the array.\n     * @param useLineSep true if the operating systems \n     * end-of-line separator should be output rather than a new-line character.\n     * \n     * @throws IOException\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cdata(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of cdata.\n   *\n   * <p>The Parser will call this method to report each chunk of\n   * character data.  SAX parsers may return all contiguous character\n   * data in a single chunk, or they may split it into several\n   * chunks; however, all of the characters in any single event\n   * must come from the same external entity, so that the Locator\n   * provides useful information.</p>\n   *\n   * <p>The application must not attempt to read from the array\n   * outside of the specified range.</p>\n   *\n   * <p>Note that some parsers will report whitespace using the\n   * ignorableWhitespace() method rather than this one (validating\n   * parsers must do so).</p>\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see #ignorableWhitespace\n   * @see org.xml.sax.Locator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of ignorable whitespace in element content.\n   *\n   * <p>Validating Parsers must use this method to report each chunk\n   * of ignorable whitespace (see the W3C XML 1.0 recommendation,\n   * section 2.10): non-validating parsers may also use this method\n   * if they are capable of parsing and using content models.</p>\n   *\n   * <p>SAX parsers may return all contiguous whitespace in a single\n   * chunk, or they may split it into several chunks; however, all of\n   * the characters in any single event must come from the same\n   * external entity, so that the Locator provides useful\n   * information.</p>\n   *\n   * <p>The application must not attempt to read from the array\n   * outside of the specified range.</p>\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see #characters\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a processing instruction.\n   *\n   * <p>The Parser will invoke this method once for each processing\n   * instruction found: note that processing instructions may occur\n   * before or after the main document element.</p>\n   *\n   * <p>A SAX parser should never report an XML declaration (XML 1.0,\n   * section 2.8) or a text declaration (XML 1.0, section 4.3.1)\n   * using this method.</p>\n   *\n   * @param target The processing instruction target.\n   * @param data The processing instruction data, or null if\n   *        none was supplied.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void comment(String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Called when a Comment is to be constructed.\n   * Note that Xalan will normally invoke the other version of this method.\n   * %REVIEW% In fact, is this one ever needed, or was it a mistake?\n   *\n   * @param   data  The comment data.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an XML comment anywhere in the document.\n   *\n   * This callback will be used for comments inside or outside the\n   * document element, including comments in the external DTD\n   * subset (if read).\n   *\n   * @param ch An array holding the characters in the comment.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   * @throws org.xml.sax.SAXException The application may raise an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void entityReference(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notivication of a entityReference.\n   *\n   * @param name non-null reference to the name of the entity.\n   *\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute)",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#addAttribute(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#endCDATA()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String elemName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#endElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String elementNamespaceURI, String elementLocalName, String elementName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(String characters) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String name, String value)",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueAttribute(String qName, String value, int flags) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add a unique attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flushPending() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void startDocumentInternal() throws org.xml.sax.SAXException", "public void endDocument() throws org.xml.sax.SAXException", "public void startElement(String namespaceURI, String localName, String name, Attributes atts) throws org.xml.sax.SAXException", "public void endElement(String namespaceURI, String localName, String name) throws org.xml.sax.SAXException", "public void characters(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void charactersRaw(char[] ch, int start, int length) throws org.xml.sax.SAXException", " void writeNormalizedChars(final char[] ch, final int start, final int length, final boolean useLineSep) throws IOException, org.xml.sax.SAXException", "public void cdata(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException", "public void comment(String data) throws org.xml.sax.SAXException", "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void entityReference(String name) throws org.xml.sax.SAXException", "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute)", "public void endCDATA() throws SAXException", "public void endElement(String elemName) throws SAXException", "public void startElement(String elementNamespaceURI, String elementLocalName, String elementName) throws SAXException", "public void characters(String characters) throws SAXException", "public void addAttribute(String name, String value)", "public void addUniqueAttribute(String qName, String value, int flags) throws SAXException", "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException", "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException", "public void flushPending() throws org.xml.sax.SAXException" ],
  "variableNames" : [ ]
}