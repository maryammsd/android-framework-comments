{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/textclassifier/TextLinks.java",
  "packageName" : "android.view.textclassifier",
  "className" : "TextLinks",
  "comment" : "\n * A collection of links, representing subsequences of text and the entity types (phone number,\n * address, url, etc) they may be.\n ",
  "variables" : [ {
    "name" : "STATUS_LINKS_APPLIED",
    "type" : "int",
    "comment" : " Links were successfully applied to the text. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NO_LINKS_FOUND",
    "type" : "int",
    "comment" : " No links exist to apply to text. Links count is zero. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NO_LINKS_APPLIED",
    "type" : "int",
    "comment" : " No links applied to text. The links were filtered out. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_DIFFERENT_TEXT",
    "type" : "int",
    "comment" : " The specified text does not match the text used to generate the links. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNSUPPORTED_CHARACTER",
    "type" : "int",
    "comment" : " The specified text contains unsupported characters. ",
    "links" : [ ]
  }, {
    "name" : "APPLY_STRATEGY_IGNORE",
    "type" : "int",
    "comment" : "\n     * Do not replace {@link ClickableSpan}s that exist where the {@link TextLinkSpan} needs to\n     * be applied to. Do not apply the TextLinkSpan.\n     ",
    "links" : [ "ClickableSpan", "TextLinkSpan" ]
  }, {
    "name" : "APPLY_STRATEGY_REPLACE",
    "type" : "int",
    "comment" : "\n     * Replace any {@link ClickableSpan}s that exist where the {@link TextLinkSpan} needs to be\n     * applied to.\n     ",
    "links" : [ "ClickableSpan", "TextLinkSpan" ]
  }, {
    "name" : "mFullText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinks",
    "type" : "List<TextLink>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<TextLinks>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text that was used to generate these links.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<TextLink> getLinks()",
    "returnType" : "Collection<TextLink>",
    "comment" : "\n     * Returns an unmodifiable Collection of the links.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the extended data.\n     *\n     * <p><b>NOTE: </b>Do not modify this bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int apply(@NonNull Spannable text, @ApplyStrategy int applyStrategy, @Nullable Function<TextLink, TextLinkSpan> spanFactory)",
    "returnType" : "int",
    "comment" : "\n     * Annotates the given text with the generated links. It will fail if the provided text doesn't\n     * match the original text used to create the TextLinks.\n     *\n     * <p><strong>NOTE: </strong>It may be necessary to set a LinkMovementMethod on the TextView\n     * widget to properly handle links. See {@link TextView#setMovementMethod(MovementMethod)}\n     *\n     * @param text the text to apply the links to. Must match the original text\n     * @param applyStrategy the apply strategy used to determine how to apply links to text.\n     *      e.g {@link TextLinks#APPLY_STRATEGY_IGNORE}\n     * @param spanFactory a custom span factory for converting TextLinks to TextLinkSpans.\n     *      Set to {@code null} to use the default span factory.\n     *\n     * @return a status code indicating whether or not the links were successfully applied\n     *      e.g. {@link #STATUS_LINKS_APPLIED}\n     ",
    "links" : [ "TextView#setMovementMethod", "TextLinks#APPLY_STRATEGY_IGNORE", "#STATUS_LINKS_APPLIED" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STATUS_LINKS_APPLIED", "STATUS_NO_LINKS_FOUND", "STATUS_NO_LINKS_APPLIED", "STATUS_DIFFERENT_TEXT", "STATUS_UNSUPPORTED_CHARACTER", "APPLY_STRATEGY_IGNORE", "APPLY_STRATEGY_REPLACE", "mFullText", "mLinks", "mExtras", "CREATOR" ],
  "methodNames" : [ "public CharSequence getText()", "public Collection<TextLink> getLinks()", "public Bundle getExtras()", "public int apply(@NonNull Spannable text, @ApplyStrategy int applyStrategy, @Nullable Function<TextLink, TextLinkSpan> spanFactory)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}