{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ScrollBarDrawable.java",
  "packageName" : "android.widget",
  "className" : "ScrollBarDrawable",
  "comment" : "\n * This is only used by View for displaying its scroll bars. It should probably\n * be moved in to the view package since it is used in that lower-level layer.\n * For now, we'll hide it so it can be cleaned up later.\n *\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mVerticalTrack",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalTrack",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalThumb",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalThumb",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRange",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtent",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVertical",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundsChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRangeChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysDrawHorizontalTrack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysDrawVerticalTrack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSetAlpha",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorFilter",
    "type" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSetColorFilter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setAlwaysDrawHorizontalTrack(boolean alwaysDrawTrack)",
    "returnType" : "void",
    "comment" : "\n     * Indicate whether the horizontal scrollbar track should always be drawn\n     * regardless of the extent. Defaults to false.\n     *\n     * @param alwaysDrawTrack Whether the track should always be drawn\n     *\n     * @see #getAlwaysDrawHorizontalTrack()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlwaysDrawVerticalTrack(boolean alwaysDrawTrack)",
    "returnType" : "void",
    "comment" : "\n     * Indicate whether the vertical scrollbar track should always be drawn\n     * regardless of the extent. Defaults to false.\n     *\n     * @param alwaysDrawTrack Whether the track should always be drawn\n     *\n     * @see #getAlwaysDrawVerticalTrack()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAlwaysDrawVerticalTrack()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the vertical scrollbar track should always be drawn\n     *         regardless of the extent.\n     *\n     * @see #setAlwaysDrawVerticalTrack(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAlwaysDrawHorizontalTrack()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the horizontal scrollbar track should always be drawn\n     *         regardless of the extent.\n     *\n     * @see #setAlwaysDrawHorizontalTrack(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameters(int range, int offset, int extent, boolean vertical)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawTrack(Canvas canvas, Rect bounds, boolean vertical)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawThumb(Canvas canvas, Rect bounds, int offset, int length, boolean vertical)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalThumbDrawable(Drawable thumb)",
    "returnType" : "void",
    "comment" : "\n     * @see android.view.View#setVerticalThumbDrawable(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getVerticalTrackDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @see View#getVerticalTrackDrawable()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getVerticalThumbDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @see View#getVerticalThumbDrawable()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getHorizontalTrackDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @see View#getHorizontalTrackDrawable()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getHorizontalThumbDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * @see View#getHorizontalThumbDrawable()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalTrackDrawable(Drawable track)",
    "returnType" : "void",
    "comment" : "\n     * @see android.view.View#setVerticalTrackDrawable(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalThumbDrawable(Drawable thumb)",
    "returnType" : "void",
    "comment" : "\n     * @see android.view.View#setHorizontalThumbDrawable(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHorizontalTrackDrawable(Drawable track)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void propagateCurrentState(Drawable d)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSize(boolean vertical)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ScrollBarDrawable mutate()",
    "returnType" : "ScrollBarDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setAlwaysDrawHorizontalTrack(boolean alwaysDrawTrack)", "public void setAlwaysDrawVerticalTrack(boolean alwaysDrawTrack)", "public boolean getAlwaysDrawVerticalTrack()", "public boolean getAlwaysDrawHorizontalTrack()", "public void setParameters(int range, int offset, int extent, boolean vertical)", "public void draw(Canvas canvas)", "protected void onBoundsChange(Rect bounds)", "public boolean isStateful()", "protected boolean onStateChange(int[] state)", "private void drawTrack(Canvas canvas, Rect bounds, boolean vertical)", "private void drawThumb(Canvas canvas, Rect bounds, int offset, int length, boolean vertical)", "public void setVerticalThumbDrawable(Drawable thumb)", "public Drawable getVerticalTrackDrawable()", "public Drawable getVerticalThumbDrawable()", "public Drawable getHorizontalTrackDrawable()", "public Drawable getHorizontalThumbDrawable()", "public void setVerticalTrackDrawable(Drawable track)", "public void setHorizontalThumbDrawable(Drawable thumb)", "public void setHorizontalTrackDrawable(Drawable track)", "private void propagateCurrentState(Drawable d)", "public int getSize(boolean vertical)", "public ScrollBarDrawable mutate()", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setColorFilter(ColorFilter colorFilter)", "public ColorFilter getColorFilter()", "public int getOpacity()", "public void invalidateDrawable(@NonNull Drawable who)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public String toString()" ],
  "variableNames" : [ "mVerticalTrack", "mHorizontalTrack", "mVerticalThumb", "mHorizontalThumb", "mRange", "mOffset", "mExtent", "mVertical", "mBoundsChanged", "mRangeChanged", "mAlwaysDrawHorizontalTrack", "mAlwaysDrawVerticalTrack", "mMutated", "mAlpha", "mHasSetAlpha", "mColorFilter", "mHasSetColorFilter" ]
}