{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/CharSequence.java",
  "packageName" : "java.lang",
  "className" : "CharSequence",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of this character sequence.  The length is the number\n     * of 16-bit {@code char}s in the sequence.\n     *\n     * @return  the number of {@code char}s in this sequence\n     ",
    "links" : [ ]
  }, {
    "name" : " char charAt(int index)",
    "returnType" : "char",
    "comment" : "\n     * Returns the {@code char} value at the specified index.  An index ranges from zero\n     * to {@code length() - 1}.  The first {@code char} value of the sequence is at\n     * index zero, the next at index one, and so on, as for array\n     * indexing.\n     *\n     * <p>If the {@code char} value specified by the index is a\n     * <a href=\"{@docRoot}/java.base/java/lang/Character.html#unicode\">surrogate</a>, the surrogate\n     * value is returned.\n     *\n     * @param   index   the index of the {@code char} value to be returned\n     *\n     * @return  the specified {@code char} value\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if the {@code index} argument is negative or not less than\n     *          {@code length()}\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this character sequence is empty.\n     *\n     * @implSpec\n     * The default implementation returns the result of calling {@code length() == 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 15\n     ",
    "links" : [ "#length()" ]
  }, {
    "name" : " CharSequence subSequence(int start, int end)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a {@code CharSequence} that is a subsequence of this sequence.\n     * The subsequence starts with the {@code char} value at the specified index and\n     * ends with the {@code char} value at index {@code end - 1}.  The length\n     * (in {@code char}s) of the\n     * returned sequence is {@code end - start}, so if {@code start == end}\n     * then an empty sequence is returned.\n     *\n     * @param   start   the start index, inclusive\n     * @param   end     the end index, exclusive\n     *\n     * @return  the specified subsequence\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code start} or {@code end} are negative,\n     *          if {@code end} is greater than {@code length()},\n     *          or if {@code start} is greater than {@code end}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string containing the characters in this sequence in the same\n     * order as this sequence.  The length of the string will be the length of\n     * this sequence.\n     *\n     * @return  a string consisting of exactly this sequence of characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream chars()",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a <a\n     * href=\"{@docRoot}/java.base/java/lang/Character.html#unicode\">surrogate code\n     * point</a> is passed through uninterpreted.\n     *\n     * <p>The stream binds to this sequence when the terminal stream operation\n     * commences (specifically, for mutable sequences the spliterator for the\n     * stream is <a href=\"../util/Spliterator.html#binding\"><em>late-binding</em></a>).\n     * If the sequence is modified during that operation then the result is\n     * undefined.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntStream codePoints()",
    "returnType" : "IntStream",
    "comment" : "\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * <p>The stream binds to this sequence when the terminal stream operation\n     * commences (specifically, for mutable sequences the spliterator for the\n     * stream is <a href=\"../util/Spliterator.html#binding\"><em>late-binding</em></a>).\n     * If the sequence is modified during that operation then the result is\n     * undefined.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(CharSequence cs1, CharSequence cs2)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code CharSequence} instances lexicographically. Returns a\n     * negative value, zero, or a positive value if the first sequence is lexicographically\n     * less than, equal to, or greater than the second, respectively.\n     *\n     * <p>\n     * The lexicographical ordering of {@code CharSequence} is defined as follows.\n     * Consider a {@code CharSequence} <i>cs</i> of length <i>len</i> to be a\n     * sequence of char values, <i>cs[0]</i> to <i>cs[len-1]</i>. Suppose <i>k</i>\n     * is the lowest index at which the corresponding char values from each sequence\n     * differ. The lexicographic ordering of the sequences is determined by a numeric\n     * comparison of the char values <i>cs1[k]</i> with <i>cs2[k]</i>. If there is\n     * no such index <i>k</i>, the shorter sequence is considered lexicographically\n     * less than the other. If the sequences have the same length, the sequences are\n     * considered lexicographically equal.\n     *\n     *\n     * @param cs1 the first {@code CharSequence}\n     * @param cs2 the second {@code CharSequence}\n     *\n     * @return  the value {@code 0} if the two {@code CharSequence} are equal;\n     *          a negative integer if the first {@code CharSequence}\n     *          is lexicographically less than the second; or a\n     *          positive integer if the first {@code CharSequence} is\n     *          lexicographically greater than the second.\n     *\n     * @since 11\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int length()", " char charAt(int index)", " boolean isEmpty()", " CharSequence subSequence(int start, int end)", "public String toString()", "public IntStream chars()", "public IntStream codePoints()", "public static int compare(CharSequence cs1, CharSequence cs2)" ],
  "variableNames" : [ ]
}