{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/NetworkInterface.java",
  "packageName" : "java.net",
  "className" : "NetworkInterface",
  "comment" : "\n * This class represents a Network Interface made up of a name,\n * and a list of IP addresses assigned to this interface.\n * It is used to identify the local interface on which a multicast group\n * is joined.\n *\n * Interfaces are normally known by names such as \"le0\".\n * <p>\n * <a name=\"access-restrictions\"></a>Note that information about\n * {@link NetworkInterface}s may be restricted. For example, non-system apps\n * will only have access to information about {@link NetworkInterface}s that are\n * associated with an {@link InetAddress}.\n *\n * @since 1.4\n ",
  "links" : [ "java.net.InetAddress", "java.net.NetworkInterface" ],
  "variables" : [ {
    "name" : "RETURN_NULL_HARDWARE_ADDRESS",
    "type" : "long",
    "comment" : "\n     * If this change is enabled, {@link #getHardwareAddress()} returns null when the hardware\n     * address is <a href=\"#access-restrictions\">inaccessible</a>. If the change is disabled, the\n     * default MAC address (02:00:00:00:00:00) is returned instead.\n     *\n     * @hide\n     ",
    "links" : [ "#getHardwareAddress()" ]
  }, {
    "name" : "DEFAULT_MAC_ADDRESS",
    "type" : "byte[]",
    "comment" : " Matches android.net.wifi.WifiInfo.DEFAULT_MAC_ADDRESS",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "displayName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "addrs",
    "type" : "InetAddress[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bindings",
    "type" : "InterfaceAddress[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "childs",
    "type" : "List<NetworkInterface>",
    "comment" : " private NetworkInterface childs[];",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "NetworkInterface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "virtual",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultInterface",
    "type" : "NetworkInterface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hardwareAddr",
    "type" : "byte[]",
    "comment" : " Android-changed: Fix upstream bug not returning link-down interfaces. http://b/26238832",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Get the name of this network interface.\n     *\n     * @return the name of this network interface\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<InetAddress> getInetAddresses()",
    "returnType" : "Enumeration<InetAddress>",
    "comment" : "\n     * Convenience method to return an Enumeration with all or a\n     * subset of the InetAddresses bound to this network interface.\n     * <p>\n     * If there is a security manager, its {@code checkConnect}\n     * method is called for each InetAddress. Only InetAddresses where\n     * the {@code checkConnect} doesn't throw a SecurityException\n     * will be returned in the Enumeration. However, if the caller has the\n     * {@link NetPermission}(\"getNetworkInformation\") permission, then all\n     * InetAddresses are returned.\n     * @return an Enumeration object with all or a subset of the InetAddresses\n     * bound to this network interface\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public java.util.List<InterfaceAddress> getInterfaceAddresses()",
    "returnType" : "java.util.List<InterfaceAddress>",
    "comment" : "\n     * Get a List of all or a subset of the {@code InterfaceAddresses}\n     * of this network interface.\n     * <p>\n     * If there is a security manager, its {@code checkConnect}\n     * method is called with the InetAddress for each InterfaceAddress.\n     * Only InterfaceAddresses where the {@code checkConnect} doesn't throw\n     * a SecurityException will be returned in the List.\n     *\n     * @return a {@code List} object with all or a subset of the\n     *         InterfaceAddresss of this network interface\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<NetworkInterface> getSubInterfaces()",
    "returnType" : "Enumeration<NetworkInterface>",
    "comment" : "\n     * Get an Enumeration with all the subinterfaces (also known as virtual\n     * interfaces) attached to this network interface.\n     * <p>\n     * For instance eth0:1 will be a subinterface to eth0.\n     *\n     * @return an Enumeration object with all of the subinterfaces\n     * of this network interface\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkInterface getParent()",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Returns the parent NetworkInterface of this interface if this is\n     * a subinterface, or {@code null} if it is a physical\n     * (non virtual) interface or has no parent.\n     *\n     * @return The {@code NetworkInterface} this interface is attached to.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of this network interface. The index is an integer greater\n     * or equal to zero, or {@code -1} for unknown. This is a system specific value\n     * and interfaces with the same name can have different indexes on different\n     * machines.\n     *\n     * @return the index of this network interface or {@code -1} if the index is\n     *         unknown\n     * @see #getByIndex(int)\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Get the display name of this network interface.\n     * A display name is a human readable String describing the network\n     * device.\n     *\n     * @return a non-empty string representing the display name of this network\n     *         interface, or null if no display name is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NetworkInterface getByName(String name) throws SocketException",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Searches for the network interface with the specified name.\n     *\n     * @param   name\n     *          The name of the network interface.\n     *\n     * @return  A {@code NetworkInterface} with the specified name,\n     *          or {@code null} if the network interface with the specified\n     *          name does not exist or <a href=\"#access-restrictions\">can't be\n     *          accessed</a>.\n     *\n     * @throws  SocketException\n     *          If an I/O error occurs.\n     *\n     * @throws  NullPointerException\n     *          If the specified name is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NetworkInterface getByIndex(int index) throws SocketException",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Get a network interface given its index.\n     *\n     * @param index an integer, the index of the interface\n     * @return the NetworkInterface obtained from its index, or {@code null} if\n     *         an interface with the specified index does not exist or\n     *         <a href=\"#access-restrictions\">can't be accessed</a>.\n     * @throws  SocketException  if an I/O error occurs.\n     * @throws  IllegalArgumentException if index has a negative value\n     * @see #getIndex()\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NetworkInterface getByInetAddress(InetAddress addr) throws SocketException",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Convenience method to search for a network interface that\n     * has the specified Internet Protocol (IP) address bound to\n     * it.\n     * <p>\n     * If the specified IP address is bound to multiple network\n     * interfaces it is not defined which network interface is\n     * returned.\n     *\n     * @param   addr\n     *          The {@code InetAddress} to search with.\n     *\n     * @return  A {@code NetworkInterface}\n     *          or {@code null} if there is no network interface\n     *          with the specified IP address.\n     *\n     * @throws  SocketException\n     *          If an I/O error occurs.\n     *\n     * @throws  NullPointerException\n     *          If the specified address is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Enumeration<NetworkInterface> getNetworkInterfaces() throws SocketException",
    "returnType" : "Enumeration<NetworkInterface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static NetworkInterface[] getAll() throws SocketException",
    "returnType" : "NetworkInterface[]",
    "comment" : "    throws SocketException;",
    "links" : [ ]
  }, {
    "name" : "public boolean isUp() throws SocketException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoopback() throws SocketException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPointToPoint() throws SocketException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsMulticast() throws SocketException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getHardwareAddress() throws SocketException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the hardware address (usually MAC) of the interface if it\n     * has one and if it can be accessed given the current privileges.\n     * If a security manager is set, then the caller must have\n     * the permission {@link NetPermission}(\"getNetworkInformation\").\n     *\n     * @return  a byte array containing the address, or {@code null} if\n     *          the address doesn't exist, is not accessible or a security\n     *          manager is set and the caller does not have the permission\n     *          NetPermission(\"getNetworkInformation\"). For example, this\n     *          method will generally return {@code null} when called by\n     *          non-system apps (or 02:00:00:00:00:00 for apps having\n     *          {@code targetSdkVersion < android.os.Build.VERSION_CODES.R}).\n     *\n     * @exception       SocketException if an I/O error occurs.\n     * @since 1.6\n     ",
    "links" : [ "java.net.NetPermission" ]
  }, {
    "name" : "public int getMTU() throws SocketException",
    "returnType" : "int",
    "comment" : "\n     * Returns the Maximum Transmission Unit (MTU) of this interface.\n     *\n     * @return the value of the MTU for that interface.\n     * @exception       SocketException if an I/O error occurs.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVirtual()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this interface is a virtual interface (also called\n     * subinterface).\n     * Virtual interfaces are, on some systems, interfaces created as a child\n     * of a physical interface and given different settings (like address or\n     * MTU). Usually the name of the interface will the name of the parent\n     * followed by a colon (:) and a number identifying the child since there\n     * can be several virtual interfaces attached to a single physical\n     * interface.\n     *\n     * @return {@code true} if this interface is a virtual interface.\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getFlags() throws SocketException",
    "returnType" : "int",
    "comment" : " BEGIN Android-added: Rewrote NetworkInterface on top of Libcore.io.",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object.\n     * The result is {@code true} if and only if the argument is\n     * not {@code null} and it represents the same NetworkInterface\n     * as this object.\n     * <p>\n     * Two instances of {@code NetworkInterface} represent the same\n     * NetworkInterface if both name and addrs are the same for both.\n     *\n     * @param   obj   the object to compare against.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see     java.net.InetAddress#getAddress()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static NetworkInterface getDefault()",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Returns the default network interface of this system\n     *\n     * @return the default interface\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public Enumeration<InetAddress> getInetAddresses()", "public java.util.List<InterfaceAddress> getInterfaceAddresses()", "public Enumeration<NetworkInterface> getSubInterfaces()", "public NetworkInterface getParent()", "public int getIndex()", "public String getDisplayName()", "public static NetworkInterface getByName(String name) throws SocketException", "public static NetworkInterface getByIndex(int index) throws SocketException", "public static NetworkInterface getByInetAddress(InetAddress addr) throws SocketException", "public static Enumeration<NetworkInterface> getNetworkInterfaces() throws SocketException", "private static NetworkInterface[] getAll() throws SocketException", "public boolean isUp() throws SocketException", "public boolean isLoopback() throws SocketException", "public boolean isPointToPoint() throws SocketException", "public boolean supportsMulticast() throws SocketException", "public byte[] getHardwareAddress() throws SocketException", "public int getMTU() throws SocketException", "public boolean isVirtual()", "private int getFlags() throws SocketException", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", " static NetworkInterface getDefault()" ],
  "variableNames" : [ "RETURN_NULL_HARDWARE_ADDRESS", "DEFAULT_MAC_ADDRESS", "name", "displayName", "index", "addrs", "bindings", "childs", "parent", "virtual", "defaultInterface", "defaultIndex", "hardwareAddr" ]
}