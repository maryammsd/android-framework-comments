{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/FormattedStringBuilder.java",
  "packageName" : "android.icu.impl",
  "className" : "FormattedStringBuilder",
  "comment" : "\n * A StringBuilder optimized for formatting. It implements the following key features beyond a\n * normal JDK StringBuilder:\n *\n * <ol>\n * <li>Efficient prepend as well as append.\n * <li>Keeps tracks of Fields in an efficient manner.\n * <li>String operations are fast-pathed to code point operations when possible.\n * </ol>\n *\n * See also FormattedValueStringBuilderImpl.\n *\n * @author sffc (Shane Carr)\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EMPTY",
    "type" : "FormattedStringBuilder",
    "comment" : " A constant, empty FormattedStringBuilder. Do NOT call mutative operations on this. ",
    "links" : [ ]
  }, {
    "name" : "chars",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fields",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "zero",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "appendOffset",
    "type" : "int",
    "comment" : " Number of characters from the end where .append() operations insert. ",
    "links" : [ ]
  }, {
    "name" : "appendableField",
    "type" : "Object",
    "comment" : " Field applied when Appendable methods are used. ",
    "links" : [ ]
  }, {
    "name" : "fieldToDebugChar",
    "type" : "Map<Object, Character>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static java.text.Format.Field unwrapField(Object field)",
    "returnType" : "java.text.Format.Field",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(FormattedStringBuilder source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int codePointCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int index)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object fieldAt(int index)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFirstCodePoint()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLastCodePoint()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int codePointAt(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int codePointBefore(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FormattedStringBuilder clear()",
    "returnType" : "FormattedStringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAppendIndex(int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the index at which append operations insert. Defaults to the end.\n     *\n     * @param index The index at which append operations should insert.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int appendChar16(char codeUnit, Object field)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int insertChar16(int index, char codeUnit, Object field)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int appendCodePoint(int codePoint, Object field)",
    "returnType" : "int",
    "comment" : "\n     * Appends the specified codePoint to the end of the string.\n     *\n     * @return The number of chars added: 1 if the code point is in the BMP, or 2 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int insertCodePoint(int index, int codePoint, Object field)",
    "returnType" : "int",
    "comment" : "\n     * Inserts the specified codePoint at the specified index in the string.\n     *\n     * @return The number of chars added: 1 if the code point is in the BMP, or 2 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int append(CharSequence sequence, Object field)",
    "returnType" : "int",
    "comment" : "\n     * Appends the specified CharSequence to the end of the string.\n     *\n     * @return The number of chars added, which is the length of CharSequence.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int insert(int index, CharSequence sequence, Object field)",
    "returnType" : "int",
    "comment" : "\n     * Inserts the specified CharSequence at the specified index in the string.\n     *\n     * @return The number of chars added, which is the length of CharSequence.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int insert(int index, CharSequence sequence, int start, int end, Object field)",
    "returnType" : "int",
    "comment" : "\n     * Inserts the specified CharSequence at the specified index in the string, reading from the\n     * CharSequence from start (inclusive) to end (exclusive).\n     *\n     * @return The number of chars added, which is the length of CharSequence.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int splice(int startThis, int endThis, CharSequence sequence, int startOther, int endOther, Object field)",
    "returnType" : "int",
    "comment" : "\n     * Replaces the chars between startThis and endThis with the chars between startOther and endOther of\n     * the given CharSequence. Calling this method with startThis == endThis is equivalent to calling\n     * insert.\n     *\n     * @return The number of chars added, which may be negative if the removed segment is longer than the\n     *         length of the CharSequence segment that was inserted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int append(char[] chars, Object[] fields)",
    "returnType" : "int",
    "comment" : "\n     * Appends the chars in the specified char array to the end of the string, and associates them with\n     * the fields in the specified field array, which must have the same length as chars.\n     *\n     * @return The number of chars added, which is the length of the char array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int insert(int index, char[] chars, Object[] fields)",
    "returnType" : "int",
    "comment" : "\n     * Inserts the chars in the specified char array at the specified index in the string, and associates\n     * them with the fields in the specified field array, which must have the same length as chars.\n     *\n     * @return The number of chars added, which is the length of the char array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int append(FormattedStringBuilder other)",
    "returnType" : "int",
    "comment" : "\n     * Appends the contents of another {@link FormattedStringBuilder} to the end of this instance.\n     *\n     * @return The number of chars added, which is the length of the other {@link FormattedStringBuilder}.\n     ",
    "links" : [ "android.icu.impl.FormattedStringBuilder" ]
  }, {
    "name" : "public int insert(int index, FormattedStringBuilder other)",
    "returnType" : "int",
    "comment" : "\n     * Inserts the contents of another {@link FormattedStringBuilder} into this instance at the given index.\n     *\n     * @return The number of chars added, which is the length of the other {@link FormattedStringBuilder}.\n     ",
    "links" : [ "android.icu.impl.FormattedStringBuilder" ]
  }, {
    "name" : "private int prepareForInsert(int index, int count)",
    "returnType" : "int",
    "comment" : "\n     * Shifts around existing data if necessary to make room for new characters.\n     *\n     * @param index\n     *            The location in the string where the operation is to take place.\n     * @param count\n     *            The number of chars (UTF-16 code units) to be inserted at that location.\n     * @return The position in the char array to insert the chars.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int prepareForInsertHelper(int index, int count)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int remove(int index, int count)",
    "returnType" : "int",
    "comment" : "\n     * Removes the \"count\" chars starting at \"index\". Returns the position at which the chars were\n     * removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCapacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence subSequence(int start, int end)",
    "returnType" : "CharSequence",
    "comment" : " Note: this returns a FormattedStringBuilder. Do not return publicly. ",
    "links" : [ ]
  }, {
    "name" : "public String subString(int start, int end)",
    "returnType" : "String",
    "comment" : " Use this instead of subSequence if returning publicly. ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string represented by the characters in this string builder.\n     *\n     * <p>\n     * For a string intended be used for debugging, use {@link #toDebugString}.\n     ",
    "links" : [ "#toDebugString" ]
  }, {
    "name" : "public String toDebugString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that includes field information, for debugging purposes.\n     *\n     * <p>\n     * For example, if the string is \"-12.345\", the debug string will be something like\n     * \"&lt;FormattedStringBuilder [-123.45] [-iii.ff]&gt;\"\n     *\n     * @return A string for debugging purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] toCharArray()",
    "returnType" : "char[]",
    "comment" : " @return A new array containing the contents of this string builder. ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toFieldArray()",
    "returnType" : "Object[]",
    "comment" : " @return A new array containing the field values of this string builder. ",
    "links" : [ ]
  }, {
    "name" : "public void setAppendableField(Object field)",
    "returnType" : "void",
    "comment" : "\n     * Call this method before using any of the Appendable overrides.\n     *\n     * @param field The field used when inserting strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Appendable append(CharSequence csq)",
    "returnType" : "Appendable",
    "comment" : "\n     * This method is provided for Java Appendable compatibility. In most cases, please use the append methods that take\n     * a Field parameter. If you do use this method, you must call {@link #setAppendableField} first.\n     ",
    "links" : [ "#setAppendableField" ]
  }, {
    "name" : "public Appendable append(CharSequence csq, int start, int end)",
    "returnType" : "Appendable",
    "comment" : "\n     * This method is provided for Java Appendable compatibility. In most cases, please use the append methods that take\n     * a Field parameter. If you do use this method, you must call {@link #setAppendableField} first.\n     ",
    "links" : [ "#setAppendableField" ]
  }, {
    "name" : "public Appendable append(char c)",
    "returnType" : "Appendable",
    "comment" : "\n     * This method is provided for Java Appendable compatibility. In most cases, please use the append methods that take\n     * a Field parameter. If you do use this method, you must call {@link #setAppendableField} first.\n     ",
    "links" : [ "#setAppendableField" ]
  }, {
    "name" : "public boolean contentEquals(char[] chars, Object[] fields)",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the contents and field values of this string builder are equal to the given chars\n     *         and fields.\n     * @see #toCharArray\n     * @see #toFieldArray\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contentEquals(FormattedStringBuilder other)",
    "returnType" : "boolean",
    "comment" : "\n     * @param other\n     *            The instance to compare.\n     * @return Whether the contents of this instance is currently equal to the given instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static java.text.Format.Field unwrapField(Object field)", "public void copyFrom(FormattedStringBuilder source)", "public int length()", "public int codePointCount()", "public char charAt(int index)", "public Object fieldAt(int index)", "public int getFirstCodePoint()", "public int getLastCodePoint()", "public int codePointAt(int index)", "public int codePointBefore(int index)", "public FormattedStringBuilder clear()", "public void setAppendIndex(int index)", "public int appendChar16(char codeUnit, Object field)", "public int insertChar16(int index, char codeUnit, Object field)", "public int appendCodePoint(int codePoint, Object field)", "public int insertCodePoint(int index, int codePoint, Object field)", "public int append(CharSequence sequence, Object field)", "public int insert(int index, CharSequence sequence, Object field)", "public int insert(int index, CharSequence sequence, int start, int end, Object field)", "public int splice(int startThis, int endThis, CharSequence sequence, int startOther, int endOther, Object field)", "public int append(char[] chars, Object[] fields)", "public int insert(int index, char[] chars, Object[] fields)", "public int append(FormattedStringBuilder other)", "public int insert(int index, FormattedStringBuilder other)", "private int prepareForInsert(int index, int count)", "private int prepareForInsertHelper(int index, int count)", "private int remove(int index, int count)", "private int getCapacity()", "public CharSequence subSequence(int start, int end)", "public String subString(int start, int end)", "public String toString()", "public String toDebugString()", "public char[] toCharArray()", "public Object[] toFieldArray()", "public void setAppendableField(Object field)", "public Appendable append(CharSequence csq)", "public Appendable append(CharSequence csq, int start, int end)", "public Appendable append(char c)", "public boolean contentEquals(char[] chars, Object[] fields)", "public boolean contentEquals(FormattedStringBuilder other)", "public int hashCode()", "public boolean equals(Object other)" ],
  "variableNames" : [ "EMPTY", "chars", "fields", "zero", "length", "appendOffset", "appendableField", "fieldToDebugChar" ]
}