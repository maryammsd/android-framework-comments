{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/utils/TaskSingleDrainer.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "TaskSingleDrainer",
  "comment" : "\n * Keep track of a single concurrent task starting and finishing;\n * allow draining the existing task and figuring out when the task has finished\n * (and won't restart).\n *\n * <p>The initial state is to allow all tasks to be started and finished. A task may only be started\n * once, after which it must be finished before starting again. Likewise, finishing a task\n * that hasn't been started is also not allowed.</p>\n *\n * <p>When draining begins, the task cannot be started again. This guarantees that at some\n * point the task will be finished forever, at which point the {@link DrainListener#onDrained}\n * callback will be invoked.</p>\n ",
  "variables" : [ {
    "name" : "mTaskDrainer",
    "type" : "TaskDrainer<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSingleTask",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void taskStarted()",
    "returnType" : "void",
    "comment" : "\n     * Mark this asynchronous task as having started.\n     *\n     * <p>The task cannot be started more than once without first having finished. Once\n     * draining begins with {@link #beginDrain}, no new tasks can be started.</p>\n     *\n     * @see #taskFinished\n     * @see #beginDrain\n     *\n     * @throws IllegalStateException\n     *          If attempting to start a task which is already started (and not finished),\n     *          or if attempting to start a task after draining has begun.\n     ",
    "links" : [ "#beginDrain" ]
  }, {
    "name" : "public void beginDrain()",
    "returnType" : "void",
    "comment" : "\n     * Do not allow any more task re-starts; once the existing task is finished,\n     * fire the {@link DrainListener#onDrained} callback asynchronously.\n     *\n     * <p>This operation is idempotent; calling it more than once has no effect.</p>\n     ",
    "links" : [ "DrainListener#onDrained" ]
  }, {
    "name" : "public void taskFinished()",
    "returnType" : "void",
    "comment" : "\n     * Mark this asynchronous task as having finished.\n     *\n     * <p>The task cannot be finished if it hasn't started. Once finished, a task\n     * cannot be finished again (unless it's started again).</p>\n     *\n     * @see #taskStarted\n     * @see #beginDrain\n     *\n     * @throws IllegalStateException\n     *          If attempting to start a task which is already finished (and not re-started),\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTaskDrainer", "mSingleTask" ],
  "methodNames" : [ "public void taskStarted()", "public void beginDrain()", "public void taskFinished()" ]
}