{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/MeasureUnitImpl.java",
  "packageName" : "android.icu.impl.units",
  "className" : "MeasureUnitImpl",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "identifier",
    "type" : "String",
    "comment" : "\n     * The full unit identifier. Null if not computed.\n     ",
    "links" : [ ]
  }, {
    "name" : "complexity",
    "type" : "MeasureUnit.Complexity",
    "comment" : "\n     * The complexity, either SINGLE, COMPOUND, or MIXED.\n     ",
    "links" : [ ]
  }, {
    "name" : "singleUnits",
    "type" : "ArrayList<SingleUnitImpl>",
    "comment" : "\n     * The list of single units. These may be summed or multiplied, based on the\n     * value of the complexity field.\n     * <p>\n     * The \"dimensionless\" unit (SingleUnitImpl default constructor) must not be added to this list.\n     * <p>\n     * The \"dimensionless\" <code>MeasureUnitImpl</code> has an empty <code>singleUnits</code>.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MeasureUnitImpl forIdentifier(String identifier)",
    "returnType" : "MeasureUnitImpl",
    "comment" : "\n     * Parse a unit identifier into a MeasureUnitImpl.\n     *\n     * @param identifier The unit identifier string.\n     * @return A newly parsed object.\n     * @throws IllegalArgumentException in case of incorrect/non-parsed identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MeasureUnitImpl forCurrencyCode(String currencyCode)",
    "returnType" : "MeasureUnitImpl",
    "comment" : "\n     * Used for currency units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnitImpl copy()",
    "returnType" : "MeasureUnitImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnitImpl copyAndSimplify()",
    "returnType" : "MeasureUnitImpl",
    "comment" : "\n     * Returns a simplified version of the unit.\n     * NOTE: the simplification happen when there are two units equals in their base unit and their\n     * prefixes.\n     *\n     * Example 1: \"square-meter-per-meter\" --> \"meter\"\n     * Example 2: \"square-millimeter-per-meter\" --> \"square-millimeter-per-meter\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<SingleUnitImpl> getSingleUnits()",
    "returnType" : "ArrayList<SingleUnitImpl>",
    "comment" : "\n     * Returns the list of simple units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void takeReciprocal()",
    "returnType" : "void",
    "comment" : "\n     * Mutates this MeasureUnitImpl to take the reciprocal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<MeasureUnitImplWithIndex> extractIndividualUnitsWithIndices()",
    "returnType" : "ArrayList<MeasureUnitImplWithIndex>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyDimensionality(int dimensionality)",
    "returnType" : "void",
    "comment" : "\n     * Applies dimensionality to all the internal single units.\n     * For example: <b>square-meter-per-second</b>, when we apply dimensionality -2, it will be <b>square-second-per-p4-meter</b>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean appendSingleUnit(SingleUnitImpl singleUnit)",
    "returnType" : "boolean",
    "comment" : "\n     * Mutates this MeasureUnitImpl to append a single unit.\n     *\n     * @return true if a new item was added. If unit is the dimensionless unit,\n     * it is never added: the return value will always be false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnit build()",
    "returnType" : "MeasureUnit",
    "comment" : "\n     * Transform this MeasureUnitImpl into a MeasureUnit, simplifying if possible.\n     * <p>\n     * NOTE: this function must be called from a thread-safe class\n     ",
    "links" : [ ]
  }, {
    "name" : "public SingleUnitImpl getSingleUnitImpl()",
    "returnType" : "SingleUnitImpl",
    "comment" : "\n     * @return SingleUnitImpl\n     * @throws UnsupportedOperationException if the object could not be converted to SingleUnitImpl.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getIdentifier()",
    "returnType" : "String",
    "comment" : "\n     * Returns the CLDR unit identifier and null if not computed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnit.Complexity getComplexity()",
    "returnType" : "MeasureUnit.Complexity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComplexity(MeasureUnit.Complexity complexity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void serialize()",
    "returnType" : "void",
    "comment" : "\n     * Normalizes the MeasureUnitImpl and generates the identifier string in place.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MeasureUnitImpl forIdentifier(String identifier)", "public static MeasureUnitImpl forCurrencyCode(String currencyCode)", "public MeasureUnitImpl copy()", "public MeasureUnitImpl copyAndSimplify()", "public ArrayList<SingleUnitImpl> getSingleUnits()", "public void takeReciprocal()", "public ArrayList<MeasureUnitImplWithIndex> extractIndividualUnitsWithIndices()", "public void applyDimensionality(int dimensionality)", "public boolean appendSingleUnit(SingleUnitImpl singleUnit)", "public MeasureUnit build()", "public SingleUnitImpl getSingleUnitImpl()", "public String getIdentifier()", "public MeasureUnit.Complexity getComplexity()", "public void setComplexity(MeasureUnit.Complexity complexity)", "public void serialize()", "public String toString()" ],
  "variableNames" : [ "identifier", "complexity", "singleUnits" ]
}