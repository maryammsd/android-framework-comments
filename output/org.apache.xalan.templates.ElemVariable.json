{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemVariable.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemVariable",
  "comment" : "\n * Implement xsl:variable.\n * <pre>\n * <!ELEMENT xsl:variable %template;>\n * <!ATTLIST xsl:variable\n *   name %qname; #REQUIRED\n *   select %expr; #IMPLIED\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#variables\">variables in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_index",
    "type" : "int",
    "comment" : "\n   * This is the index into the stack frame.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_frameSize",
    "type" : "int",
    "comment" : "\n   * The stack frame size for this variable if it is a global variable \n   * that declares an RTF, which is equal to the maximum number \n   * of variables that can be declared in the variable at one time.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_selectPattern",
    "type" : "XPath",
    "comment" : "\n   * The value of the \"select\" attribute.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_qname",
    "type" : "QName",
    "comment" : "\n   * The value of the \"name\" attribute.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isTopLevel",
    "type" : "boolean",
    "comment" : "\n   * Tells if this is a top-level variable or param, or not.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setIndex(int index)",
    "returnType" : "void",
    "comment" : "\n   * Sets the relative position of this variable within the stack frame (if local)\n   * or the global area (if global).  Note that this should be called only for\n   * global variables since the local position is computed in the compose() method.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n   * If this element is not at the top-level, get the relative position of the\n   * variable into the stack frame.  If this variable is at the top-level, get\n   * the relative position within the global area.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSelect(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"select\" attribute.\n   * If the variable-binding element has a select attribute,\n   * then the value of the attribute must be an expression and\n   * the value of the variable is the object that results from\n   * evaluating the expression. In this case, the content\n   * of the variable must be empty.\n   *\n   * @param v Value to set for the \"select\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getSelect()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"select\" attribute.\n   * If the variable-binding element has a select attribute,\n   * then the value of the attribute must be an expression and\n   * the value of the variable is the object that results from\n   * evaluating the expression. In this case, the content\n   * of the variable must be empty.\n   *\n   * @return Value of the \"select\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setName(QName v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * Both xsl:variable and xsl:param have a required name\n   * attribute, which specifies the name of the variable. The\n   * value of the name attribute is a QName, which is expanded\n   * as described in [2.4 Qualified Names].\n   * @see <a href=\"http://www.w3.org/TR/xslt#qname\">qname in XSLT Specification</a>\n   *\n   * @param v Value to set for the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * Both xsl:variable and xsl:param have a required name\n   * attribute, which specifies the name of the variable. The\n   * value of the name attribute is a QName, which is expanded\n   * as described in [2.4 Qualified Names].\n   * @see <a href=\"http://www.w3.org/TR/xslt#qname\">qname in XSLT Specification</a>\n   *\n   * @return Value of the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIsTopLevel(boolean v)",
    "returnType" : "void",
    "comment" : "\n   * Set if this is a top-level variable or param, or not.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param v Boolean indicating whether this is a top-level variable\n   * or param, or not.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIsTopLevel()",
    "returnType" : "boolean",
    "comment" : "\n   * Get if this is a top-level variable or param, or not.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @return Boolean indicating whether this is a top-level variable\n   * or param, or not.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The node name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute a variable declaration and push it onto the variable stack.\n   * @see <a href=\"http://www.w3.org/TR/xslt#variables\">variables in XSLT Specification</a>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject getValue(TransformerImpl transformer, int sourceNode) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Get the XObject representation of the variable.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param sourceNode non-null reference to the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current source node</a>.\n   *\n   * @return the XObject representation of the variable.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endCompose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This after the template's children have been composed.  We have to get \n   * the count of how many variables have been declared, so we can do a link \n   * and unlink.\n   ",
    "links" : [ ]
  }, {
    "name" : " static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException",
    "returnType" : "XPath",
    "comment" : "\n   * If the children of a variable is a single xsl:value-of or text literal, \n   * it is cheaper to evaluate this as an expression, so try and adapt the \n   * child an an expression.\n   *\n   * @param varElem Should be a ElemParam, ElemVariable, or ElemWithParam.\n   *\n   * @return An XPath if rewrite is possible, else null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root)",
    "returnType" : "void",
    "comment" : "\n   * This function is called during recomposition to\n   * control how this element is composed.\n   * @param root The root stylesheet for this transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setParentElem(ElemTemplateElement p)",
    "returnType" : "void",
    "comment" : "\n   * Set the parent as an ElemTemplateElement.\n   *\n   * @param p This node's parent as an ElemTemplateElement\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean accept(XSLTVisitor visitor)",
    "returnType" : "boolean",
    "comment" : "\n   * Accept a visitor and call the appropriate method \n   * for this class.\n   * \n   * @param visitor The visitor whose appropriate method will be called.\n   * @return true if the children of the object should be visited.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPsuedoVar()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this is a psuedo variable reference, declared by Xalan instead \n   * of by the user.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement elem)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list. If the select attribute\n   * is present, an error will be raised.\n   *\n   * @param elem New element to append to this element's children list\n   *\n   * @return null if the select attribute was present, otherwise the \n   * child just added to the child list \n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setIndex(int index)", "public int getIndex()", "public void setSelect(XPath v)", "public XPath getSelect()", "public void setName(QName v)", "public QName getName()", "public void setIsTopLevel(boolean v)", "public boolean getIsTopLevel()", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public XObject getValue(TransformerImpl transformer, int sourceNode) throws TransformerException", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void endCompose(StylesheetRoot sroot) throws TransformerException", " static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException", "public void recompose(StylesheetRoot root)", "public void setParentElem(ElemTemplateElement p)", "protected boolean accept(XSLTVisitor visitor)", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)", "public boolean isPsuedoVar()", "public ElemTemplateElement appendChild(ElemTemplateElement elem)" ],
  "variableNames" : [ "serialVersionUID", "m_index", "m_frameSize", "m_selectPattern", "m_qname", "m_isTopLevel" ]
}