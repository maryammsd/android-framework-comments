{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/apk/ApkSignatureVerifier.java",
  "packageName" : "android.util.apk",
  "className" : "ApkSignatureVerifier",
  "comment" : "\n * Facade class that takes care of the details of APK verification on\n * behalf of PackageParser.\n *\n * @hide for internal use only.\n ",
  "variables" : [ {
    "name" : "sBuffer",
    "type" : "AtomicReference<byte[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PackageParser.SigningDetails verify(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion) throws PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Verifies the provided APK and returns the certificates associated with each signer.\n     *\n     * @throws PackageParserException if the APK's signature failed to verify.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PackageParser.SigningDetails unsafeGetCertsWithoutVerification(String apkPath, int minSignatureSchemeVersion) throws PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Returns the certificates associated with each signer for the given APK without verification.\n     * This method is dangerous and should not be used, unless the caller is absolutely certain the\n     * APK is trusted.\n     *\n     * @throws PackageParserException if there was a problem collecting certificates.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageParser.SigningDetails verifySignatures(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Verifies the provided APK using all allowed signing schemas.\n     * @return the certificates associated with each signer.\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @throws PackageParserException if there was a problem collecting certificates\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageParser.SigningDetails verifyV3AndBelowSignatures(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PackageParser.SigningDetails verifyV4Signature(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws SignatureNotFoundException, PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Verifies the provided APK using V4 schema.\n     *\n     * @param verifyFull whether to verify (V4 vs V3) or just collect certificates.\n     * @return the certificates associated with each signer.\n     * @throws SignatureNotFoundException if there are no V4 signatures in the APK\n     * @throws PackageParserException     if there was a problem collecting certificates\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageParser.SigningDetails verifyV3Signature(String apkPath, boolean verifyFull) throws SignatureNotFoundException, PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Verifies the provided APK using V3 schema.\n     *\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @return the certificates associated with each signer.\n     * @throws SignatureNotFoundException if there are no V3 signatures in the APK\n     * @throws PackageParserException     if there was a problem collecting certificates\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageParser.SigningDetails verifyV2Signature(String apkPath, boolean verifyFull) throws SignatureNotFoundException, PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Verifies the provided APK using V2 schema.\n     *\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @return the certificates associated with each signer.\n     * @throws SignatureNotFoundException if there are no V2 signatures in the APK\n     * @throws PackageParserException     if there was a problem collecting certificates\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageParser.SigningDetails verifyV1Signature(String apkPath, boolean verifyFull) throws PackageParserException",
    "returnType" : "PackageParser.SigningDetails",
    "comment" : "\n     * Verifies the provided APK using JAR schema.\n     * @return the certificates associated with each signer.\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @throws PackageParserException if there was a problem collecting certificates\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Certificate[][] loadCertificates(StrictJarFile jarFile, ZipEntry entry) throws PackageParserException",
    "returnType" : "Certificate[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void readFullyIgnoringContents(InputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Signature[] convertToSignatures(Certificate[][] certs) throws CertificateEncodingException",
    "returnType" : "Signature[]",
    "comment" : "\n     * Converts an array of certificate chains into the {@code Signature} equivalent used by the\n     * PackageManager.\n     *\n     * @throws CertificateEncodingException if it is unable to create a Signature object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void closeQuietly(StrictJarFile jarFile)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMinimumSignatureSchemeVersionForTargetSdk(int targetSdk)",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum signature scheme version required for an app targeting the specified\n     * {@code targetSdk}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getVerityRootHash(String apkPath) throws IOException, SecurityException",
    "returnType" : "byte[]",
    "comment" : "\n     * @return the verity root hash in the Signing Block.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the Merkle tree and verity metadata to the buffer allocated by the {@code\n     * ByteBufferFactory}.\n     *\n     * @return the verity root hash of the generated Merkle tree.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] generateApkVerityRootHash(String apkPath) throws NoSuchAlgorithmException, DigestException, IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the FSVerity root hash from FSVerity header, extensions and Merkle tree root hash\n     * in Signing Block.\n     *\n     * @return FSverity root hash\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sBuffer" ],
  "methodNames" : [ "public static PackageParser.SigningDetails verify(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion) throws PackageParserException", "public static PackageParser.SigningDetails unsafeGetCertsWithoutVerification(String apkPath, int minSignatureSchemeVersion) throws PackageParserException", "private static PackageParser.SigningDetails verifySignatures(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws PackageParserException", "private static PackageParser.SigningDetails verifyV3AndBelowSignatures(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws PackageParserException", "private static PackageParser.SigningDetails verifyV4Signature(String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws SignatureNotFoundException, PackageParserException", "private static PackageParser.SigningDetails verifyV3Signature(String apkPath, boolean verifyFull) throws SignatureNotFoundException, PackageParserException", "private static PackageParser.SigningDetails verifyV2Signature(String apkPath, boolean verifyFull) throws SignatureNotFoundException, PackageParserException", "private static PackageParser.SigningDetails verifyV1Signature(String apkPath, boolean verifyFull) throws PackageParserException", "private static Certificate[][] loadCertificates(StrictJarFile jarFile, ZipEntry entry) throws PackageParserException", "private static void readFullyIgnoringContents(InputStream in) throws IOException", "private static Signature[] convertToSignatures(Certificate[][] certs) throws CertificateEncodingException", "private static void closeQuietly(StrictJarFile jarFile)", "public static int getMinimumSignatureSchemeVersionForTargetSdk(int targetSdk)", "public static byte[] getVerityRootHash(String apkPath) throws IOException, SecurityException", "public static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException", "public static byte[] generateApkVerityRootHash(String apkPath) throws NoSuchAlgorithmException, DigestException, IOException" ]
}