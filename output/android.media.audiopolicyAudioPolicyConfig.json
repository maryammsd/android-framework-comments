{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiopolicy/AudioPolicyConfig.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "AudioPolicyConfig",
  "comment" : "\n * @hide\n * Internal storage class for AudioPolicy configuration.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMixes",
    "type" : "ArrayList<AudioMix>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuckingPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegistrationId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMixCounter",
    "type" : "int",
    "comment" : " counter for the mixes that are / have been in the list of AudioMix\n     *  e.g. register 4 mixes (counter is 3), remove 1 (counter is 3), add 1 (counter is 4)\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioPolicyConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addMix(AudioMix mix) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Add an {@link AudioMix} to be part of the audio policy being built.\n     * @param mix a non-null {@link AudioMix} to be part of the audio policy.\n     * @return the same Builder instance.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "AudioMix", "AudioMix" ]
  }, {
    "name" : "public ArrayList<AudioMix> getMixes()",
    "returnType" : "ArrayList<AudioMix>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toLogFriendlyString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setRegistration(String regId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setMixRegistration(@NonNull final AudioMix mix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void add(@NonNull ArrayList<AudioMix> mixes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void remove(@NonNull ArrayList<AudioMix> mixes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String mixTypeId(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected String getRegistration()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mMixes", "mDuckingPolicy", "mRegistrationId", "mMixCounter", "CREATOR" ],
  "methodNames" : [ "public void addMix(AudioMix mix) throws IllegalArgumentException", "public ArrayList<AudioMix> getMixes()", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toLogFriendlyString()", "protected void setRegistration(String regId)", "private void setMixRegistration(@NonNull final AudioMix mix)", "protected void add(@NonNull ArrayList<AudioMix> mixes)", "protected void remove(@NonNull ArrayList<AudioMix> mixes)", "private static String mixTypeId(int type)", "protected String getRegistration()" ]
}