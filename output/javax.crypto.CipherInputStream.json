{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/CipherInputStream.java",
  "packageName" : "javax.crypto",
  "className" : "CipherInputStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "cipher",
    "type" : "Cipher",
    "comment" : " the cipher engine to use to process stream data",
    "links" : [ ]
  }, {
    "name" : "input",
    "type" : "InputStream",
    "comment" : " the underlying input stream",
    "links" : [ ]
  }, {
    "name" : "ibuffer",
    "type" : "byte[]",
    "comment" : " the buffer holding data that have been read in from the\n       underlying stream, but have not been processed by the cipher\n       engine. the size 512 bytes is somewhat randomly chosen ",
    "links" : [ ]
  }, {
    "name" : "done",
    "type" : "boolean",
    "comment" : " having reached the end of the underlying input stream",
    "links" : [ ]
  }, {
    "name" : "obuffer",
    "type" : "byte[]",
    "comment" : " the buffer holding data that have been processed by the cipher\n       engine, but have not been read out ",
    "links" : [ ]
  }, {
    "name" : "ostart",
    "type" : "int",
    "comment" : " the offset pointing to the next \"new\" byte",
    "links" : [ ]
  }, {
    "name" : "ofinish",
    "type" : "int",
    "comment" : " the offset pointing to the last \"new\" byte",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : " stream status",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int getMoreData() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * private convenience function.\n     *\n     * Entry condition: ostart = ofinish\n     *\n     * Exit condition: ostart <= ofinish\n     *\n     * return (ofinish-ostart) (we have this many bytes for you)\n     * return 0 (no data now, but could have more later)\n     * return -1 (absolutely no more data)\n     *\n     * Note:  Exceptions are only thrown after the stream is completely read.\n     * For AEAD ciphers a read() of any length will internally cause the\n     * whole stream to be read fully and verify the authentication tag before\n     * returning decrypted data or exceptions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The value\n     * byte is returned as an <code>int</code> in the range\n     * <code>0</code> to <code>255</code>. If no byte is available\n     * because the end of the stream has been reached, the value\n     * <code>-1</code> is returned. This method blocks until input data\n     * is available, the end of the stream is detected, or an exception\n     * is thrown.\n     * <p>\n     *\n     * @return  the next byte of data, or <code>-1</code> if the end of the\n     *          stream is reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @since JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>b.length</code> bytes of data from this input\n     * stream into an array of bytes.\n     * <p>\n     * The <code>read</code> method of <code>InputStream</code> calls\n     * the <code>read</code> method of three arguments with the arguments\n     * <code>b</code>, <code>0</code>, and <code>b.length</code>.\n     *\n     * @param      b   the buffer into which the data is read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> is there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.InputStream#read(byte[], int, int)\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> bytes of data from this input stream\n     * into an array of bytes. This method blocks until some input is\n     * available. If the first argument is <code>null,</code> up to\n     * <code>len</code> bytes are read and discarded.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array\n     *                   <code>buf</code>\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.InputStream#read()\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips <code>n</code> bytes of input from the bytes that can be read\n     * from this input stream without blocking.\n     *\n     * <p>Fewer bytes than requested might be skipped.\n     * The actual number of bytes skipped is equal to <code>n</code> or\n     * the result of a call to\n     * {@link #available() available},\n     * whichever is smaller.\n     * If <code>n</code> is less than zero, no bytes are skipped.\n     *\n     * <p>The actual number of bytes skipped is returned.\n     *\n     * @param      n the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     * @exception  IOException  if an I/O error occurs.\n     * @since JCE1.2\n     ",
    "links" : [ "#available()" ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read from this input\n     * stream without blocking. The <code>available</code> method of\n     * <code>InputStream</code> returns <code>0</code>. This method\n     * <B>should</B> be overridden by subclasses.\n     *\n     * @return     the number of bytes that can be read from this input stream\n     *             without blocking.\n     * @exception  IOException  if an I/O error occurs.\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this input stream and releases any system resources\n     * associated with the stream.\n     * <p>\n     * The <code>close</code> method of <code>CipherInputStream</code>\n     * calls the <code>close</code> method of its underlying input\n     * stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @since JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this input stream supports the <code>mark</code>\n     * and <code>reset</code> methods, which it does not.\n     *\n     * @return  <code>false</code>, since this class does not support the\n     *          <code>mark</code> and <code>reset</code> methods.\n     * @see     java.io.InputStream#mark(int)\n     * @see     java.io.InputStream#reset()\n     * @since   JCE1.2\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int getMoreData() throws IOException", "public int read() throws IOException", "public int read(byte[] b) throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public int available() throws IOException", "public void close() throws IOException", "public boolean markSupported()" ],
  "variableNames" : [ "cipher", "input", "ibuffer", "done", "obuffer", "ostart", "ofinish", "closed" ]
}