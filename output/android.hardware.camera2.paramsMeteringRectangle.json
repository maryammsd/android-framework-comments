{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/params/MeteringRectangle.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "MeteringRectangle",
  "comment" : "\n * An immutable class to represent a rectangle {@code (x, y, width, height)} with an additional\n * weight component.\n * <p>\n * The rectangle is defined to be inclusive of the specified coordinates.\n * </p>\n * <p>\n * When used with a {@link CaptureRequest}, the coordinate system is based on the active pixel\n * array, with {@code (0,0)} being the top-left pixel in the\n * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE active pixel array}, and\n * {@code (android.sensor.info.activeArraySize.width - 1,\n * android.sensor.info.activeArraySize.height - 1)} being the bottom-right pixel in the active pixel\n * array.\n * </p>\n * <p>\n * The weight must range from {@value #METERING_WEIGHT_MIN} to {@value #METERING_WEIGHT_MAX}\n * inclusively, and represents a weight for every pixel in the area. This means that a large\n * metering area with the same weight as a smaller area will have more effect in the metering\n * result. Metering areas can partially overlap and the camera device will add the weights in the\n * overlap rectangle.\n * </p>\n * <p>\n * If all rectangles have 0 weight, then no specific metering area needs to be used by the camera\n * device. If the metering rectangle is outside the used android.scaler.cropRegion returned in\n * capture result metadata, the camera device will ignore the sections outside the rectangle and\n * output the used sections in the result metadata.\n * </p>\n ",
  "variables" : [ {
    "name" : "METERING_WEIGHT_MIN",
    "type" : "int",
    "comment" : "\n     * The minimum value of valid metering weight.\n     ",
    "links" : [ ]
  }, {
    "name" : "METERING_WEIGHT_MAX",
    "type" : "int",
    "comment" : "\n     * The maximum value of valid metering weight.\n     ",
    "links" : [ ]
  }, {
    "name" : "METERING_WEIGHT_DONT_CARE",
    "type" : "int",
    "comment" : "\n     * Weights set to this value will cause the camera device to ignore this rectangle.\n     * If all metering rectangles are weighed with 0, the camera device will choose its own metering\n     * rectangles.\n     ",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getX()",
    "returnType" : "int",
    "comment" : "\n     * Return the X coordinate of the left side of the rectangle.\n     *\n     * @return x coordinate >= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getY()",
    "returnType" : "int",
    "comment" : "\n     * Return the Y coordinate of the upper side of the rectangle.\n     *\n     * @return y coordinate >= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Return the width of the rectangle.\n     *\n     * @return width >= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Return the height of the rectangle.\n     *\n     * @return height >= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMeteringWeight()",
    "returnType" : "int",
    "comment" : "\n     * Return the metering weight of the rectangle.\n     *\n     * @return weight >= 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public Point getUpperLeftPoint()",
    "returnType" : "Point",
    "comment" : "\n     * Convenience method to create the upper-left (X,Y) coordinate as a {@link Point}.\n     *\n     * @return a new {@code (x,y)} {@link Point} with both x,y >= 0\n     ",
    "links" : [ "Point", "Point" ]
  }, {
    "name" : "public Size getSize()",
    "returnType" : "Size",
    "comment" : "\n     * Convenience method to create the size from this metering rectangle.\n     *\n     * <p>This strips away the X,Y,weight from the rectangle.</p>\n     *\n     * @return a new {@link Size} with non-negative width and height\n     ",
    "links" : [ "Size" ]
  }, {
    "name" : "public Rect getRect()",
    "returnType" : "Rect",
    "comment" : "\n     * Convenience method to create a {@link Rect} from this metering rectangle.\n     *\n     * <p>This strips away the weight from the rectangle.</p>\n     *\n     * @return a new {@link Rect} with non-negative x1, y1, x2, y2\n     ",
    "links" : [ "Rect", "Rect" ]
  }, {
    "name" : "public boolean equals(final Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(final MeteringRectangle other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two metering rectangles to see if they are equal.\n     *\n     * Two weighted rectangles are only considered equal if each of their components\n     * (x, y, width, height, weight) is respectively equal.\n     *\n     * @param other Another MeteringRectangle\n     *\n     * @return {@code true} if the metering rectangles are equal, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the metering rectangle as a string representation\n     * {@code \"(x:%d, y:%d, w:%d, h:%d, wt:%d)\"} where each {@code %d} respectively represents\n     * the x, y, width, height, and weight points.\n     *\n     * @return string representation of the metering rectangle\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "METERING_WEIGHT_MIN", "METERING_WEIGHT_MAX", "METERING_WEIGHT_DONT_CARE", "mX", "mY", "mWidth", "mHeight", "mWeight" ],
  "methodNames" : [ "public int getX()", "public int getY()", "public int getWidth()", "public int getHeight()", "public int getMeteringWeight()", "public Point getUpperLeftPoint()", "public Size getSize()", "public Rect getRect()", "public boolean equals(final Object other)", "public boolean equals(final MeteringRectangle other)", "public int hashCode()", "public String toString()" ]
}