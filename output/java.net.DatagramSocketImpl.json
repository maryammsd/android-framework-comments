{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/DatagramSocketImpl.java",
  "packageName" : "java.net",
  "className" : "DatagramSocketImpl",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "localPort",
    "type" : "int",
    "comment" : "\n     * The local port number.\n     ",
    "links" : [ ]
  }, {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : "\n     * The file descriptor object.\n     ",
    "links" : [ ]
  }, {
    "name" : "socket",
    "type" : "DatagramSocket",
    "comment" : "\n     * The DatagramSocket or MulticastSocket\n     * that owns this impl\n     ",
    "links" : [ ]
  }, {
    "name" : "dgSocketOptions",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mcSocketOptions",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setDatagramSocket(DatagramSocket socket)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DatagramSocket getDatagramSocket()",
    "returnType" : "DatagramSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int dataAvailable()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void create() throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Creates a datagram socket.\n     * @exception SocketException if there is an error in the\n     * underlying protocol, such as a TCP error.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void bind(int lport, InetAddress laddr) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Binds a datagram socket to a local port and address.\n     * @param lport the local port\n     * @param laddr the local address\n     * @exception SocketException if there is an error in the\n     * underlying protocol, such as a TCP error.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void send(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sends a datagram packet. The packet contains the data and the\n     * destination address to send the packet to.\n     * @param p the packet to be sent.\n     * @exception IOException if an I/O exception occurs while sending the\n     * datagram packet.\n     * @exception  PortUnreachableException may be thrown if the socket is connected\n     * to a currently unreachable destination. Note, there is no guarantee that\n     * the exception will be thrown.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void connect(InetAddress address, int port) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Connects a datagram socket to a remote destination. This associates the remote\n     * address with the local socket so that datagrams may only be sent to this destination\n     * and received from this destination. This may be overridden to call a native\n     * system connect.\n     *\n     * <p>If the remote destination to which the socket is connected does not\n     * exist, or is otherwise unreachable, and if an ICMP destination unreachable\n     * packet has been received for that address, then a subsequent call to\n     * send or receive may throw a PortUnreachableException.\n     * Note, there is no guarantee that the exception will be thrown.\n     * @param address the remote InetAddress to connect to\n     * @param port the remote port number\n     * @exception   SocketException may be thrown if the socket cannot be\n     * connected to the remote destination\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects a datagram socket from its remote destination.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int peek(InetAddress i) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Peek at the packet to see who it is from. Updates the specified {@code InetAddress}\n     * to the address which the packet came from.\n     * @param i an InetAddress object\n     * @return the port number which the packet came from.\n     * @exception IOException if an I/O exception occurs\n     * @exception  PortUnreachableException may be thrown if the socket is connected\n     *       to a currently unreachable destination. Note, there is no guarantee that the\n     *       exception will be thrown.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int peekData(DatagramPacket p) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Peek at the packet to see who it is from. The data is copied into the specified\n     * {@code DatagramPacket}. The data is returned,\n     * but not consumed, so that a subsequent peekData/receive operation\n     * will see the same data.\n     * @param p the Packet Received.\n     * @return the port number which the packet came from.\n     * @exception IOException if an I/O exception occurs\n     * @exception  PortUnreachableException may be thrown if the socket is connected\n     *       to a currently unreachable destination. Note, there is no guarantee that the\n     *       exception will be thrown.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void receive(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receive the datagram packet.\n     * @param p the Packet Received.\n     * @exception IOException if an I/O exception occurs\n     * while receiving the datagram packet.\n     * @exception  PortUnreachableException may be thrown if the socket is connected\n     *       to a currently unreachable destination. Note, there is no guarantee that the\n     *       exception will be thrown.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void setTTL(byte ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the TTL (time-to-live) option.\n     * @param ttl a byte specifying the TTL value\n     *\n     * @deprecated use setTimeToLive instead.\n     * @exception IOException if an I/O exception occurs while setting\n     * the time-to-live option.\n     * @see #getTTL()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte getTTL() throws IOException",
    "returnType" : "byte",
    "comment" : "\n     * Retrieve the TTL (time-to-live) option.\n     *\n     * @exception IOException if an I/O exception occurs\n     * while retrieving the time-to-live option\n     * @deprecated use getTimeToLive instead.\n     * @return a byte representing the TTL value\n     * @see #setTTL(byte)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void setTimeToLive(int ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the TTL (time-to-live) option.\n     * @param ttl an {@code int} specifying the time-to-live value\n     * @exception IOException if an I/O exception occurs\n     * while setting the time-to-live option.\n     * @see #getTimeToLive()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getTimeToLive() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the TTL (time-to-live) option.\n     * @exception IOException if an I/O exception occurs\n     * while retrieving the time-to-live option\n     * @return an {@code int} representing the time-to-live value\n     * @see #setTimeToLive(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void join(InetAddress inetaddr) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Join the multicast group.\n     * @param inetaddr multicast address to join.\n     * @exception IOException if an I/O exception occurs\n     * while joining the multicast group.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void leave(InetAddress inetaddr) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Leave the multicast group.\n     * @param inetaddr multicast address to leave.\n     * @exception IOException if an I/O exception occurs\n     * while leaving the multicast group.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Join the multicast group.\n     * @param mcastaddr address to join.\n     * @param netIf specifies the local interface to receive multicast\n     *        datagram packets\n     * @throws IOException if an I/O exception occurs while joining\n     * the multicast group\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Leave the multicast group.\n     * @param mcastaddr address to leave.\n     * @param netIf specified the local interface to leave the group at\n     * @throws IOException if an I/O exception occurs while leaving\n     * the multicast group\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getLocalPort()",
    "returnType" : "int",
    "comment" : "\n     * Gets the local port.\n     * @return an {@code int} representing the local port value\n     ",
    "links" : [ ]
  }, {
    "name" : "protected FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Gets the datagram socket file descriptor.\n     * @return a {@code FileDescriptor} object representing the datagram socket\n     * file descriptor\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called to set a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     *\n     * @param value The value of the socket option. A value of {@code null}\n     *              may be valid for some options.\n     *\n     * @throws UnsupportedOperationException if the DatagramSocketImpl does not\n     *         support the option\n     *\n     * @throws NullPointerException if name is {@code null}\n     * @throws IOException if an I/O problem occurs while attempting to set the option\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "protected T getOption(SocketOption<T> name) throws IOException",
    "returnType" : "T",
    "comment" : "\n     * Called to get a socket option.\n     *\n     * @return the socket option\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     *\n     * @throws UnsupportedOperationException if the DatagramSocketImpl does not\n     *         support the option\n     *\n     * @throws NullPointerException if name is {@code null}\n     * @throws IOException if an I/O problem occurs while attempting to set the option\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Set<SocketOption<?>> supportedOptions()",
    "returnType" : "Set<SocketOption<?>>",
    "comment" : "\n     * Returns a set of SocketOptions supported by this impl\n     * and by this impl's socket (DatagramSocket or MulticastSocket)\n     *\n     * @return a Set of SocketOptions\n     *\n     * @since 9\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setDatagramSocket(DatagramSocket socket)", " DatagramSocket getDatagramSocket()", " int dataAvailable()", "protected abstract void create() throws SocketException", "protected abstract void bind(int lport, InetAddress laddr) throws SocketException", "protected abstract void send(DatagramPacket p) throws IOException", "protected void connect(InetAddress address, int port) throws SocketException", "protected void disconnect()", "protected abstract int peek(InetAddress i) throws IOException", "protected abstract int peekData(DatagramPacket p) throws IOException", "protected abstract void receive(DatagramPacket p) throws IOException", "protected abstract void setTTL(byte ttl) throws IOException", "protected abstract byte getTTL() throws IOException", "protected abstract void setTimeToLive(int ttl) throws IOException", "protected abstract int getTimeToLive() throws IOException", "protected abstract void join(InetAddress inetaddr) throws IOException", "protected abstract void leave(InetAddress inetaddr) throws IOException", "protected abstract void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException", "protected abstract void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException", "protected abstract void close()", "protected int getLocalPort()", "protected FileDescriptor getFileDescriptor()", "protected void setOption(SocketOption<T> name, T value) throws IOException", "protected T getOption(SocketOption<T> name) throws IOException", "protected Set<SocketOption<?>> supportedOptions()" ],
  "variableNames" : [ "localPort", "fd", "socket", "dgSocketOptions", "mcSocketOptions" ]
}