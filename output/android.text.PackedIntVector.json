{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/PackedIntVector.java",
  "packageName" : "android.text",
  "className" : "PackedIntVector",
  "comment" : "\n * PackedIntVector stores a two-dimensional array of integers,\n * optimized for inserting and deleting rows and for\n * offsetting the values in segments of a given column.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mColumns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRows",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRowGapStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRowGapLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValueGap",
    "type" : "int[]",
    "comment" : " starts, followed by lengths",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getValue(int row, int column)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value at the specified row and column.\n     *\n     * @param row the index of the row to return.\n     * @param column the index of the column to return.\n     *\n     * @return the value stored at the specified position.\n     *\n     * @throws IndexOutOfBoundsException if the row is out of range\n     *         (row &lt; 0 || row >= size()) or the column is out of range\n     *         (column &lt; 0 || column >= width()).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(int row, int column, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value at the specified row and column.\n     *\n     * @param row the index of the row to set.\n     * @param column the index of the column to set.\n     *\n     * @throws IndexOutOfBoundsException if the row is out of range\n     *         (row &lt; 0 || row >= size()) or the column is out of range\n     *         (column &lt; 0 || column >= width()).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setValueInternal(int row, int column, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value at the specified row and column.\n     * Private internal version: does not check args.\n     *\n     * @param row the index of the row to set.\n     * @param column the index of the column to set.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void adjustValuesBelow(int startRow, int column, int delta)",
    "returnType" : "void",
    "comment" : "\n     * Increments all values in the specified column whose row >= the\n     * specified row by the specified delta.\n     *\n     * @param startRow the row at which to begin incrementing.\n     *        This may be == size(), which case there is no effect.\n     * @param column the index of the column to set.\n     *\n     * @throws IndexOutOfBoundsException if the row is out of range\n     *         (startRow &lt; 0 || startRow > size()) or the column\n     *         is out of range (column &lt; 0 || column >= width()).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void insertAt(int row, int[] values)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a new row of values at the specified row offset.\n     *\n     * @param row the row above which to insert the new row.\n     *        This may be == size(), which case the new row is added\n     *        at the end.\n     * @param values the new values to be added.  If this is null,\n     *        a row of zeroes is added.\n     *\n     * @throws IndexOutOfBoundsException if the row is out of range\n     *         (row &lt; 0 || row > size()) or if the length of the\n     *         values array is too small (values.length < width()).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteAt(int row, int count)",
    "returnType" : "void",
    "comment" : "\n     * Deletes the specified number of rows starting with the specified\n     * row.\n     *\n     * @param row the index of the first row to be deleted.\n     * @param count the number of rows to delete.\n     *\n     * @throws IndexOutOfBoundsException if any of the rows to be deleted\n     *         are out of range (row &lt; 0 || count &lt; 0 ||\n     *         row + count > size()).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of rows in the PackedIntVector.  This number\n     * will change as rows are inserted and deleted.\n     *\n     * @return the number of rows.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int width()",
    "returnType" : "int",
    "comment" : "\n     * Returns the width of the PackedIntVector.  This number is set\n     * at construction and will not change.\n     *\n     * @return the number of columns.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void growBuffer()",
    "returnType" : "void",
    "comment" : "\n     * Grows the value and gap arrays to be large enough to store at least\n     * one more than the current number of rows.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void moveValueGapTo(int column, int where)",
    "returnType" : "void",
    "comment" : "\n     * Moves the gap in the values of the specified column to begin at\n     * the specified row.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void moveRowGapTo(int where)",
    "returnType" : "void",
    "comment" : "\n     * Moves the gap in the row indices to begin at the specified row.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mColumns", "mRows", "mRowGapStart", "mRowGapLength", "mValues", "mValueGap" ],
  "methodNames" : [ "public int getValue(int row, int column)", "public void setValue(int row, int column, int value)", "private void setValueInternal(int row, int column, int value)", "public void adjustValuesBelow(int startRow, int column, int delta)", "public void insertAt(int row, int[] values)", "public void deleteAt(int row, int count)", "public int size()", "public int width()", "private final void growBuffer()", "private final void moveValueGapTo(int column, int where)", "private final void moveRowGapTo(int where)" ]
}