{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/RotationUtils.java",
  "packageName" : "android.util",
  "className" : "RotationUtils",
  "comment" : "\n * A class containing utility methods related to rotation.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Insets rotateInsets(Insets insets, @Rotation int rotation)",
    "returnType" : "Insets",
    "comment" : "\n     * Rotates an Insets according to the given rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rotateBounds(Rect inOutBounds, Rect parentBounds, @Rotation int oldRotation, @Rotation int newRotation)",
    "returnType" : "void",
    "comment" : "\n     * Rotates bounds as if parentBounds and bounds are a group. The group is rotated from\n     * oldRotation to newRotation. This assumes that parentBounds is at 0,0 and remains at 0,0 after\n     * rotation. The bounds will be at the same physical position in parentBounds.\n     *\n     * Only 'inOutBounds' is mutated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rotateBounds(Rect inOutBounds, int parentWidth, int parentHeight, @Rotation int rotation)",
    "returnType" : "void",
    "comment" : "\n     * Rotates inOutBounds together with the parent for a given rotation delta. This assumes that\n     * the parent starts at 0,0 and remains at 0,0 after the rotation. The inOutBounds will remain\n     * at the same physical position within the parent.\n     *\n     * Only 'inOutBounds' is mutated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rotateBounds(Rect inOutBounds, Rect parentBounds, @Rotation int rotation)",
    "returnType" : "void",
    "comment" : "\n     * Rotates bounds as if parentBounds and bounds are a group. The group is rotated by `delta`\n     * 90-degree counter-clockwise increments. This assumes that parentBounds is at 0,0 and\n     * remains at 0,0 after rotation. The bounds will be at the same physical position in\n     * parentBounds.\n     *\n     * Only 'inOutBounds' is mutated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int deltaRotation(@Rotation int oldRotation, @Rotation int newRotation)",
    "returnType" : "int",
    "comment" : " @return the rotation needed to rotate from oldRotation to newRotation. ",
    "links" : [ ]
  }, {
    "name" : "public static void rotateSurface(SurfaceControl.Transaction t, SurfaceControl sc, @Rotation int rotation)",
    "returnType" : "void",
    "comment" : "\n     * Rotates a surface CCW around the origin (eg. a 90-degree rotation will result in the\n     * bottom-left being at the origin). Use {@link #rotatePoint} to transform the top-left\n     * corner appropriately.\n     ",
    "links" : [ "#rotatePoint" ]
  }, {
    "name" : "public static void rotatePoint(Point inOutPoint, @Rotation int rotation, int parentW, int parentH)",
    "returnType" : "void",
    "comment" : "\n     * Rotates a point CCW within a rectangle of size parentW x parentH with top/left at the\n     * origin as if the point is stuck to the rectangle. The rectangle is transformed such that\n     * it's top/left remains at the origin after the rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rotatePointF(PointF inOutPoint, @Rotation int rotation, float parentW, float parentH)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #rotatePoint}, but for float coordinates.\n     ",
    "links" : [ "#rotatePoint" ]
  }, {
    "name" : "public static void transformPhysicalToLogicalCoordinates(@Rotation int rotation, @Dimension int physicalWidth, @Dimension int physicalHeight, Matrix out)",
    "returnType" : "void",
    "comment" : "\n     * Sets a matrix such that given a rotation, it transforms physical display\n     * coordinates to that rotation's logical coordinates.\n     *\n     * @param rotation the rotation to which the matrix should transform\n     * @param out the matrix to be set\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int reverseRotationDirectionAroundZAxis(@Surface.Rotation int rotation)",
    "returnType" : "int",
    "comment" : "\n     * Reverses the rotation direction around the Z axis. Note that this method assumes all\n     * rotations are relative to {@link Surface.ROTATION_0}.\n     *\n     * @param rotation the original rotation.\n     * @return the new rotation that should be applied.\n     ",
    "links" : [ "Surface.ROTATION_0" ]
  } ],
  "methodNames" : [ "public static Insets rotateInsets(Insets insets, @Rotation int rotation)", "public static void rotateBounds(Rect inOutBounds, Rect parentBounds, @Rotation int oldRotation, @Rotation int newRotation)", "public static void rotateBounds(Rect inOutBounds, int parentWidth, int parentHeight, @Rotation int rotation)", "public static void rotateBounds(Rect inOutBounds, Rect parentBounds, @Rotation int rotation)", "public static int deltaRotation(@Rotation int oldRotation, @Rotation int newRotation)", "public static void rotateSurface(SurfaceControl.Transaction t, SurfaceControl sc, @Rotation int rotation)", "public static void rotatePoint(Point inOutPoint, @Rotation int rotation, int parentW, int parentH)", "public static void rotatePointF(PointF inOutPoint, @Rotation int rotation, float parentW, float parentH)", "public static void transformPhysicalToLogicalCoordinates(@Rotation int rotation, @Dimension int physicalWidth, @Dimension int physicalHeight, Matrix out)", "public static int reverseRotationDirectionAroundZAxis(@Surface.Rotation int rotation)" ],
  "variableNames" : [ ]
}