{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/CharInfo.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "CharInfo",
  "comment" : "\n * This class provides services that tell if a character should have\n * special treatement, such as entity reference substitution or normalization\n * of a newline character.  It also provides character to entity reference\n * lookup.\n *\n * DEVELOPERS: See Known Issue in the constructor.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_charToString",
    "type" : "HashMap",
    "comment" : " Given a character, lookup a String to output (e.g. a decorated entity reference). ",
    "links" : [ ]
  }, {
    "name" : "HTML_ENTITIES_RESOURCE",
    "type" : "String",
    "comment" : "\n     * The name of the HTML entities file.\n     * If specified, the file will be resource loaded with the default class loader.\n     ",
    "links" : [ ]
  }, {
    "name" : "XML_ENTITIES_RESOURCE",
    "type" : "String",
    "comment" : "\n     * The name of the XML entities file.\n     * If specified, the file will be resource loaded with the default class loader.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_HORIZONAL_TAB",
    "type" : "char",
    "comment" : " The horizontal tab character, which the parser should always normalize. ",
    "links" : [ ]
  }, {
    "name" : "S_LINEFEED",
    "type" : "char",
    "comment" : " The linefeed character, which the parser should always normalize. ",
    "links" : [ ]
  }, {
    "name" : "S_CARRIAGERETURN",
    "type" : "char",
    "comment" : " The carriage return character, which the parser should always normalize. ",
    "links" : [ ]
  }, {
    "name" : "S_SPACE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_QUOTE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_LT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_GT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_NEL",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_LINE_SEPARATOR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "onlyQuotAmpLtGt",
    "type" : "boolean",
    "comment" : " This flag is an optimization for HTML entities. It false if entities \n     * other than quot (34), amp (38), lt (60) and gt (62) are defined\n     * in the range 0 to 127.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "ASCII_MAX",
    "type" : "int",
    "comment" : " Copy the first 0,1 ... ASCII_MAX values into an array ",
    "links" : [ ]
  }, {
    "name" : "shouldMapAttrChar_ASCII",
    "type" : "boolean[]",
    "comment" : " Array of values is faster access than a set of bits \n     * to quickly check ASCII characters in attribute values,\n     * the value is true if the character in an attribute value\n     * should be mapped to a String. \n     ",
    "links" : [ ]
  }, {
    "name" : "shouldMapTextChar_ASCII",
    "type" : "boolean[]",
    "comment" : " Array of values is faster access than a set of bits \n     * to quickly check ASCII characters in text nodes, \n     * the value is true if the character in a text node\n     * should be mapped to a String. \n     ",
    "links" : [ ]
  }, {
    "name" : "array_of_bits",
    "type" : "int[]",
    "comment" : " An array of bits to record if the character is in the set.\n     * Although information in this array is complete, the\n     * isSpecialAttrASCII array is used first because access to its values\n     * is common and faster.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHIFT_PER_WORD",
    "type" : "int",
    "comment" : "\n     * This constant is used to shift an integer to quickly\n     * calculate which element its bit is stored in.\n     * 5 for 32 bit words (int) ,  6 for 64 bit words (long)\n     ",
    "links" : [ ]
  }, {
    "name" : "LOW_ORDER_BITMASK",
    "type" : "int",
    "comment" : "\n     * A mask to get the low order bits which are used to\n     * calculate the value of the bit within a given word,\n     * that will represent the presence of the integer in the \n     * set.\n     * \n     * 0x1F for 32 bit words (int),\n     * or 0x3F for 64 bit words (long) \n     ",
    "links" : [ ]
  }, {
    "name" : "firstWordNotUsed",
    "type" : "int",
    "comment" : "\n     * This is used for optimizing the lookup of bits representing\n     * the integers in the set. It is the index of the first element\n     * in the array array_of_bits[] that is not used.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_charKey",
    "type" : "CharKey",
    "comment" : "\n     * A utility object, just used to map characters to output Strings,\n     * needed because a HashMap needs to map an object as a key, not a \n     * Java primitive type, like a char, so this object gets around that\n     * and it is reusable.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_getCharInfoCache",
    "type" : "Hashtable",
    "comment" : " \n\t * Table of user-specified char infos.\n\t * The table maps entify file names (the name of the\n\t * property file without the .properties extension)\n\t * to CharInfo objects populated with entities defined in \n\t * corresponding property file.  \n\t ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean defineEntity(String name, char value)",
    "returnType" : "boolean",
    "comment" : "\n     * Defines a new character reference. The reference's name and value are\n     * supplied. Nothing happens if the character reference is already defined.\n     * <p>Unlike internal entities, character references are a string to single\n     * character mapping. They are used to map non-ASCII characters both on\n     * parsing and printing, primarily for HTML documents. '&amp;lt;' is an\n     * example of a character reference.</p>\n     *\n     * @param name The entity's name\n     * @param value The entity's value\n     * @return true if the mapping is not one of:\n     * <ul>\n     * <li> '<' to \"&lt;\"\n     * <li> '>' to \"&gt;\"\n     * <li> '&' to \"&amp;\"\n     * <li> '\"' to \"&quot;\"\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : " String getOutputStringForChar(char value)",
    "returnType" : "String",
    "comment" : "\n     * Map a character to a String. For example given\n     * the character '>' this method would return the fully decorated\n     * entity name \"&lt;\".\n     * Strings for entity references are loaded from a properties file,\n     * but additional mappings defined through calls to defineChar2String()\n     * are possible. Such entity reference mappings could be over-ridden.\n     *\n     * This is reusing a stored key object, in an effort to avoid\n     * heap activity. Unfortunately, that introduces a threading risk.\n     * Simplest fix for now is to make it a synchronized method, or to give\n     * up the reuse; I see very little performance difference between them.\n     * Long-term solution would be to replace the hashtable with a sparse array\n     * keyed directly from the character's integer value; see DTM's\n     * string pool for a related solution.\n     *\n     * @param value The character that should be resolved to\n     * a String, e.g. resolve '>' to  \"&lt;\".\n     *\n     * @return The String that the character is mapped to, or null if not found.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean shouldMapAttrChar(int value)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if the character argument that is from\n     * an attribute value has a mapping to a String.\n     * \n     * @param value the value of a character that is in an attribute value\n     * @return true if the character should have any special treatment, \n     * such as when writing out entity references.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean shouldMapTextChar(int value)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell if the character argument that is from a \n     * text node has a mapping to a String, for example\n     * to map '<' to \"&lt;\".\n     * \n     * @param value the value of a character that is in a text node\n     * @return true if the character has a mapping to a String, \n     * such as when writing out entity references.\n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static CharInfo getCharInfoBasedOnPrivilege(final String entitiesFileName, final String method, final boolean internal)",
    "returnType" : "CharInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static CharInfo getCharInfo(String entitiesFileName, String method)",
    "returnType" : "CharInfo",
    "comment" : "\n     * Factory that reads in a resource file that describes the mapping of\n     * characters to entity references.\n     *\n     * Resource files must be encoded in UTF-8 and have a format like:\n     * <pre>\n     * # First char # is a comment\n     * Entity numericValue\n     * quot 34\n     * amp 38\n     * </pre>\n     * (Note: Why don't we just switch to .properties files? Oct-01 -sc)\n     *\n     * @param entitiesResource Name of entities resource file that should\n     * be loaded, which describes that mapping of characters to entity references.\n     * @param method the output method type, which should be one of \"xml\", \"html\", \"text\"...\n     * \n     * @xsl.usage internal\n     ",
    "links" : [ ]
  }, {
    "name" : "private static CharInfo mutableCopyOf(CharInfo charInfo)",
    "returnType" : "CharInfo",
    "comment" : "\n     * Create a mutable copy of the cached one.\n     * @param charInfo The cached one.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int arrayIndex(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the array element holding the bit value for the\n     * given integer\n     * @param i the integer that might be in the set of integers\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "private static int bit(int i)",
    "returnType" : "int",
    "comment" : "\n     * For a given integer in the set it returns the single bit\n     * value used within a given word that represents whether\n     * the integer is in the set or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] createEmptySetOfIntegers(int max)",
    "returnType" : "int[]",
    "comment" : "\n     * Creates a new empty set of integers (characters)\n     * @param max the maximum integer to be in the set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void set(int i)",
    "returnType" : "void",
    "comment" : "\n     * Adds the integer (character) to the set of integers.\n     * @param i the integer to add to the set, valid values are \n     * 0, 1, 2 ... up to the maximum that was specified at\n     * the creation of the set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final boolean get(int i)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the integer (character)is in the set of integers.\n     * \n     * This implementation uses an array of integers with 32 bits per\n     * integer.  If a bit is set to 1 the corresponding integer is \n     * in the set of integers.\n     * \n     * @param i an integer that is tested to see if it is the\n     * set of integers, or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean extraEntity(String outputString, int charToMap)",
    "returnType" : "boolean",
    "comment" : "\n     * This method returns true if there are some non-standard mappings to\n     * entities other than quot, amp, lt, gt, and its only purpose is for\n     * performance.\n     * @param charToMap The value of the character that is mapped to a String\n     * @param outputString The String to which the character is mapped, usually\n     * an entity reference such as \"&lt;\".\n     * @return true if the mapping is not one of:\n     * <ul>\n     * <li> '<' to \"&lt;\"\n     * <li> '>' to \"&gt;\"\n     * <li> '&' to \"&amp;\"\n     * <li> '\"' to \"&quot;\"\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setASCIItextDirty(int j)",
    "returnType" : "void",
    "comment" : "\n     * If the character is in the ASCII range then\n     * mark it as needing replacement with\n     * a String on output if it occurs in a text node.\n     * @param ch\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setASCIIattrDirty(int j)",
    "returnType" : "void",
    "comment" : "\n     * If the character is in the ASCII range then\n     * mark it as needing replacement with\n     * a String on output if it occurs in a attribute value.\n     * @param ch\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean defineChar2StringMapping(String outputString, char inputChar)",
    "returnType" : "boolean",
    "comment" : "\n     * Call this method to register a char to String mapping, for example\n     * to map '<' to \"&lt;\".\n     * @param outputString The String to map to.\n     * @param inputChar The char to map from.\n     * @return true if the mapping is not one of:\n     * <ul>\n     * <li> '<' to \"&lt;\"\n     * <li> '>' to \"&gt;\"\n     * <li> '&' to \"&amp;\"\n     * <li> '\"' to \"&quot;\"\n     * </ul>\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean defineEntity(String name, char value)", " String getOutputStringForChar(char value)", " final boolean shouldMapAttrChar(int value)", " final boolean shouldMapTextChar(int value)", "private static CharInfo getCharInfoBasedOnPrivilege(final String entitiesFileName, final String method, final boolean internal)", " static CharInfo getCharInfo(String entitiesFileName, String method)", "private static CharInfo mutableCopyOf(CharInfo charInfo)", "private static int arrayIndex(int i)", "private static int bit(int i)", "private int[] createEmptySetOfIntegers(int max)", "private final void set(int i)", "private final boolean get(int i)", "private boolean extraEntity(String outputString, int charToMap)", "private void setASCIItextDirty(int j)", "private void setASCIIattrDirty(int j)", " boolean defineChar2StringMapping(String outputString, char inputChar)" ],
  "variableNames" : [ "m_charToString", "HTML_ENTITIES_RESOURCE", "XML_ENTITIES_RESOURCE", "S_HORIZONAL_TAB", "S_LINEFEED", "S_CARRIAGERETURN", "S_SPACE", "S_QUOTE", "S_LT", "S_GT", "S_NEL", "S_LINE_SEPARATOR", "onlyQuotAmpLtGt", "ASCII_MAX", "shouldMapAttrChar_ASCII", "shouldMapTextChar_ASCII", "array_of_bits", "SHIFT_PER_WORD", "LOW_ORDER_BITMASK", "firstWordNotUsed", "m_charKey", "m_getCharInfoCache" ]
}