{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/radio/RadioManager.java",
  "packageName" : "android.hardware.radio",
  "className" : "RadioManager",
  "comment" : "\n * The RadioManager class allows to control a broadcast radio tuner present on the device.\n * It provides data structures and methods to query for available radio modules, list their\n * properties and open an interface to control tuning operations and receive callbacks when\n * asynchronous operations complete or events occur.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_OK",
    "type" : "int",
    "comment" : " Method return status: successful operation ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ERROR",
    "type" : "int",
    "comment" : " Method return status: unspecified error ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PERMISSION_DENIED",
    "type" : "int",
    "comment" : " Method return status: permission denied ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NO_INIT",
    "type" : "int",
    "comment" : " Method return status: initialization failure ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAD_VALUE",
    "type" : "int",
    "comment" : " Method return status: invalid argument provided ",
    "links" : [ ]
  }, {
    "name" : "STATUS_DEAD_OBJECT",
    "type" : "int",
    "comment" : " Method return status: cannot reach service ",
    "links" : [ ]
  }, {
    "name" : "STATUS_INVALID_OPERATION",
    "type" : "int",
    "comment" : " Method return status: invalid or out of sequence operation ",
    "links" : [ ]
  }, {
    "name" : "STATUS_TIMED_OUT",
    "type" : "int",
    "comment" : " Method return status: time out before operation completion ",
    "links" : [ ]
  }, {
    "name" : "CLASS_AM_FM",
    "type" : "int",
    "comment" : " Radio module class supporting FM (including HD radio) and AM ",
    "links" : [ ]
  }, {
    "name" : "CLASS_SAT",
    "type" : "int",
    "comment" : " Radio module class supporting satellite radio ",
    "links" : [ ]
  }, {
    "name" : "CLASS_DT",
    "type" : "int",
    "comment" : " Radio module class supporting Digital terrestrial radio ",
    "links" : [ ]
  }, {
    "name" : "BAND_INVALID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BAND_AM",
    "type" : "int",
    "comment" : " AM radio band (LW/MW/SW).\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "BAND_FM",
    "type" : "int",
    "comment" : " FM radio band.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "BAND_FM_HD",
    "type" : "int",
    "comment" : " FM HD radio or DRM  band.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "BAND_AM_HD",
    "type" : "int",
    "comment" : " AM HD radio or DRM band.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "REGION_ITU_1",
    "type" : "int",
    "comment" : " Africa, Europe.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "REGION_ITU_2",
    "type" : "int",
    "comment" : " Americas.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "REGION_OIRT",
    "type" : "int",
    "comment" : " Russia.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "REGION_JAPAN",
    "type" : "int",
    "comment" : " Japan.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "REGION_KOREA",
    "type" : "int",
    "comment" : " Korea.\n     * @see BandDescriptor ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_FORCE_MONO",
    "type" : "int",
    "comment" : "\n     * Forces mono audio stream reception.\n     *\n     * <p>Analog broadcasts can recover poor reception conditions by jointing\n     * stereo channels into one. Mainly for, but not limited to AM/FM.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_FORCE_ANALOG",
    "type" : "int",
    "comment" : "\n     * Forces the analog playback for the supporting radio technology.\n     *\n     * <p>User may disable digital playback for FM HD Radio or hybrid FM/DAB with\n     * this option. This is purely user choice, i.e. does not reflect digital-\n     * analog handover state managed from the HAL implementation side.\n     *\n     * <p>Some radio technologies may not support this, i.e. DAB.\n     *\n     * @deprecated Use {@link #CONFIG_FORCE_ANALOG_FM} instead. If {@link #CONFIG_FORCE_ANALOG_FM}\n     * is supported in HAL, {@link RadioTuner#setConfigFlag} and {@link RadioTuner#isConfigFlagSet}\n     * with CONFIG_FORCE_ANALOG will set/get the value of {@link #CONFIG_FORCE_ANALOG_FM}.\n     ",
    "links" : [ "android.hardware.radio.RadioTuner#setConfigFlag", "#CONFIG_FORCE_ANALOG_FM", "android.hardware.radio.RadioTuner#isConfigFlagSet" ]
  }, {
    "name" : "CONFIG_FORCE_DIGITAL",
    "type" : "int",
    "comment" : "\n     * Forces the digital playback for the supporting radio technology.\n     *\n     * <p>User may disable digital-analog handover that happens with poor\n     * reception conditions. With digital forced, the radio will remain silent\n     * instead of switching to analog channel if it's available. This is purely\n     * user choice, it does not reflect the actual state of handover.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_RDS_AF",
    "type" : "int",
    "comment" : "\n     * RDS Alternative Frequencies.\n     *\n     * <p>If set and the currently tuned RDS station broadcasts on multiple\n     * channels, radio tuner automatically switches to the best available\n     * alternative.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_RDS_REG",
    "type" : "int",
    "comment" : "\n     * RDS region-specific program lock-down.\n     *\n     * <p>Allows user to lock to the current region as they move into the\n     * other region.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DAB_DAB_LINKING",
    "type" : "int",
    "comment" : " Enables DAB-DAB hard- and implicit-linking (the same content). ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DAB_FM_LINKING",
    "type" : "int",
    "comment" : " Enables DAB-FM hard- and implicit-linking (the same content). ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DAB_DAB_SOFT_LINKING",
    "type" : "int",
    "comment" : " Enables DAB-DAB soft-linking (related content). ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_DAB_FM_SOFT_LINKING",
    "type" : "int",
    "comment" : " Enables DAB-FM soft-linking (related content). ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_FORCE_ANALOG_FM",
    "type" : "int",
    "comment" : "\n     * Forces the FM analog playback for the supporting radio technology.\n     *\n     * <p>User may disable FM digital playback for FM HD Radio or hybrid FM/DAB\n     * with this option. This is purely user choice, i.e. does not reflect\n     * digital-analog handover state managed from the HAL implementation side.\n     *\n     * <p>Some radio technologies may not support this, i.e. DAB.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONFIG_FORCE_ANALOG_AM",
    "type" : "int",
    "comment" : "\n     * Forces the AM analog playback for the supporting radio technology.\n     *\n     * <p>User may disable FM digital playback for AM HD Radio or hybrid AM/DAB\n     * with this option. This is purely user choice, i.e. does not reflect\n     * digital-analog handover state managed from the HAL implementation side.\n     *\n     * <p>Some radio technologies may not support this, i.e. DAB.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnnouncementListeners",
    "type" : "Map<Announcement.OnListUpdatedListener, ICloseHandle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IRadioService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int listModules(List<ModuleProperties> modules)",
    "returnType" : "int",
    "comment" : "\n     * Returns a list of descriptors for all broadcast radio modules present on the device.\n     * @param modules An List of {@link ModuleProperties} where the list will be returned.\n     * @return\n     * <ul>\n     *  <li>{@link #STATUS_OK} in case of success, </li>\n     *  <li>{@link #STATUS_ERROR} in case of unspecified error, </li>\n     *  <li>{@link #STATUS_NO_INIT} if the native service cannot be reached, </li>\n     *  <li>{@link #STATUS_BAD_VALUE} if modules is null, </li>\n     *  <li>{@link #STATUS_DEAD_OBJECT} if the binder transaction to the native service fails, </li>\n     * </ul>\n     ",
    "links" : [ "#STATUS_ERROR", "#STATUS_DEAD_OBJECT", "#STATUS_OK", "#STATUS_BAD_VALUE", "#STATUS_NO_INIT", "ModuleProperties" ]
  }, {
    "name" : "private native int nativeListModules(List<ModuleProperties> modules)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RadioTuner openTuner(int moduleId, BandConfig config, boolean withAudio, RadioTuner.Callback callback, Handler handler)",
    "returnType" : "RadioTuner",
    "comment" : "\n     * Open an interface to control a tuner on a given broadcast radio module.\n     *\n     * <p>Optionally selects and applies the configuration passed as \"config\" argument.\n     * @param moduleId radio module identifier {@link ModuleProperties#getId()}. Mandatory.\n     * @param config desired band and configuration to apply when enabling the hardware module.\n     * optional, can be null.\n     * @param withAudio {@code true} to request a tuner with an audio source.\n     * This tuner is intended for live listening or recording or a radio program.\n     * If {@code false}, the tuner can only be used to retrieve program information.\n     * @param callback {@link RadioTuner.Callback} interface. Mandatory.\n     * @param handler the Handler on which the callbacks will be received.\n     * Can be null if default handler is OK.\n     * @return a valid {@link RadioTuner} interface in case of success or null in case of error.\n     ",
    "links" : [ "android.hardware.radio.RadioTuner", "#getId()", "RadioTuner.Callback" ]
  }, {
    "name" : "public void addAnnouncementListener(@NonNull Set<Integer> enabledAnnouncementTypes, @NonNull Announcement.OnListUpdatedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds new announcement listener.\n     *\n     * @param enabledAnnouncementTypes a set of announcement types to listen to\n     * @param listener announcement listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAnnouncementListener(@NonNull @CallbackExecutor Executor executor, @NonNull Set<Integer> enabledAnnouncementTypes, @NonNull Announcement.OnListUpdatedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds new announcement listener with executor.\n     *\n     * @param executor the executor\n     * @param enabledAnnouncementTypes a set of announcement types to listen to\n     * @param listener announcement listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAnnouncementListener(@NonNull Announcement.OnListUpdatedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes previously registered announcement listener.\n     *\n     * @param listener announcement listener, previously registered with\n     *        {@link #addAnnouncementListener(Executor, Set, Announcement.OnListUpdatedListener)}\n     *        or {@link #addAnnouncementListener(Set, Announcement.OnListUpdatedListener)}\n     ",
    "links" : [ "#addAnnouncementListener(Set", "#addAnnouncementListener(Executor" ]
  } ],
  "methodNames" : [ "public int listModules(List<ModuleProperties> modules)", "private native int nativeListModules(List<ModuleProperties> modules)", "public RadioTuner openTuner(int moduleId, BandConfig config, boolean withAudio, RadioTuner.Callback callback, Handler handler)", "public void addAnnouncementListener(@NonNull Set<Integer> enabledAnnouncementTypes, @NonNull Announcement.OnListUpdatedListener listener)", "public void addAnnouncementListener(@NonNull @CallbackExecutor Executor executor, @NonNull Set<Integer> enabledAnnouncementTypes, @NonNull Announcement.OnListUpdatedListener listener)", "public void removeAnnouncementListener(@NonNull Announcement.OnListUpdatedListener listener)" ],
  "variableNames" : [ "TAG", "STATUS_OK", "STATUS_ERROR", "STATUS_PERMISSION_DENIED", "STATUS_NO_INIT", "STATUS_BAD_VALUE", "STATUS_DEAD_OBJECT", "STATUS_INVALID_OPERATION", "STATUS_TIMED_OUT", "CLASS_AM_FM", "CLASS_SAT", "CLASS_DT", "BAND_INVALID", "BAND_AM", "BAND_FM", "BAND_FM_HD", "BAND_AM_HD", "REGION_ITU_1", "REGION_ITU_2", "REGION_OIRT", "REGION_JAPAN", "REGION_KOREA", "CONFIG_FORCE_MONO", "CONFIG_FORCE_ANALOG", "CONFIG_FORCE_DIGITAL", "CONFIG_RDS_AF", "CONFIG_RDS_REG", "CONFIG_DAB_DAB_LINKING", "CONFIG_DAB_FM_LINKING", "CONFIG_DAB_DAB_SOFT_LINKING", "CONFIG_DAB_FM_SOFT_LINKING", "CONFIG_FORCE_ANALOG_FM", "CONFIG_FORCE_ANALOG_AM", "mAnnouncementListeners", "mContext", "mService" ]
}