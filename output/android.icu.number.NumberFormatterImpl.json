{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/NumberFormatterImpl.java",
  "packageName" : "android.icu.number",
  "className" : "NumberFormatterImpl",
  "comment" : "\n * This is the \"brain\" of the number formatting pipeline. It ties all the pieces together, taking in a\n * MacroProps and a DecimalQuantity and outputting a properly formatted number string.\n *\n * <p>\n * This class, as well as NumberPropertyMapper, could go into the impl package, but they depend on too\n * many package-private members of the public APIs.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_CURRENCY",
    "type" : "Currency",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "micros",
    "type" : "MicroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "microPropsGenerator",
    "type" : "MicroPropsGenerator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MicroProps formatStatic(MacroProps macros, DecimalQuantity inValue, FormattedStringBuilder outString)",
    "returnType" : "MicroProps",
    "comment" : "\n     * Builds and evaluates an \"unsafe\" MicroPropsGenerator, which is cheaper but can be used only once.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getPrefixSuffixStatic(MacroProps macros, byte signum, StandardPlural plural, FormattedStringBuilder output)",
    "returnType" : "int",
    "comment" : "\n     * Prints only the prefix and suffix; used for DecimalFormat getters.\n     *\n     * @return The index into the output at which the prefix ends and the suffix starts; in other words,\n     *         the prefix length.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MicroProps format(DecimalQuantity inValue, FormattedStringBuilder outString)",
    "returnType" : "MicroProps",
    "comment" : "\n     * Evaluates the \"safe\" MicroPropsGenerator created by \"fromMacros\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public MicroProps preProcess(DecimalQuantity inValue)",
    "returnType" : "MicroProps",
    "comment" : "\n     * Like format(), but saves the result into an output MicroProps without additional processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static MicroProps preProcessUnsafe(MacroProps macros, DecimalQuantity inValue)",
    "returnType" : "MicroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPrefixSuffix(byte signum, StandardPlural plural, FormattedStringBuilder output)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getPrefixSuffixImpl(MicroPropsGenerator generator, byte signum, FormattedStringBuilder output)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MicroProps getRawMicroProps()",
    "returnType" : "MicroProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean unitIsCurrency(MeasureUnit unit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean unitIsBaseUnit(MeasureUnit unit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean unitIsPercent(MeasureUnit unit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean unitIsPermille(MeasureUnit unit)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MicroPropsGenerator macrosToMicroGenerator(MacroProps macros, MicroProps micros, boolean safe)",
    "returnType" : "MicroPropsGenerator",
    "comment" : "\n     * Synthesizes the MacroProps into a MicroPropsGenerator. All information, including the locale, is\n     * encoded into the MicroPropsGenerator, except for the quantity itself, which is left abstract and\n     * must be provided to the returned MicroPropsGenerator instance.\n     *\n     * @see MicroPropsGenerator\n     * @param macros\n     *            The {@link MacroProps} to consume. This method does not mutate the MacroProps instance.\n     * @param safe\n     *            If true, the returned MicroPropsGenerator will be thread-safe. If false, the returned\n     *            value will <em>not</em> be thread-safe, intended for a single \"one-shot\" use only.\n     *            Building the thread-safe object is more expensive.\n     ",
    "links" : [ "android.icu.impl.number.MacroProps" ]
  }, {
    "name" : "public static int writeAffixes(MicroProps micros, FormattedStringBuilder string, int start, int end)",
    "returnType" : "int",
    "comment" : "\n     * Adds the affixes.  Intended to be called immediately after formatNumber.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int writeNumber(MicroProps micros, DecimalQuantity quantity, FormattedStringBuilder string, int index)",
    "returnType" : "int",
    "comment" : "\n     * Synthesizes the output string from a MicroProps and DecimalQuantity.\n     * This method formats only the main number, not affixes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int writeIntegerDigits(MicroProps micros, DecimalQuantity quantity, FormattedStringBuilder string, int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int writeFractionDigits(MicroProps micros, DecimalQuantity quantity, FormattedStringBuilder string, int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MicroProps formatStatic(MacroProps macros, DecimalQuantity inValue, FormattedStringBuilder outString)", "public static int getPrefixSuffixStatic(MacroProps macros, byte signum, StandardPlural plural, FormattedStringBuilder output)", "public MicroProps format(DecimalQuantity inValue, FormattedStringBuilder outString)", "public MicroProps preProcess(DecimalQuantity inValue)", "private static MicroProps preProcessUnsafe(MacroProps macros, DecimalQuantity inValue)", "public int getPrefixSuffix(byte signum, StandardPlural plural, FormattedStringBuilder output)", "private static int getPrefixSuffixImpl(MicroPropsGenerator generator, byte signum, FormattedStringBuilder output)", "public MicroProps getRawMicroProps()", "private static boolean unitIsCurrency(MeasureUnit unit)", "private static boolean unitIsBaseUnit(MeasureUnit unit)", "private static boolean unitIsPercent(MeasureUnit unit)", "private static boolean unitIsPermille(MeasureUnit unit)", "private static MicroPropsGenerator macrosToMicroGenerator(MacroProps macros, MicroProps micros, boolean safe)", "public static int writeAffixes(MicroProps micros, FormattedStringBuilder string, int start, int end)", "public static int writeNumber(MicroProps micros, DecimalQuantity quantity, FormattedStringBuilder string, int index)", "private static int writeIntegerDigits(MicroProps micros, DecimalQuantity quantity, FormattedStringBuilder string, int index)", "private static int writeFractionDigits(MicroProps micros, DecimalQuantity quantity, FormattedStringBuilder string, int index)" ],
  "variableNames" : [ "DEFAULT_CURRENCY", "micros", "microPropsGenerator" ]
}