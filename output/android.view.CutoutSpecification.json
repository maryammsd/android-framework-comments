{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/CutoutSpecification.java",
  "packageName" : "android.view",
  "className" : "CutoutSpecification",
  "comment" : "\n * In order to accept the cutout specification for all of edges in devices, the specification\n * parsing method is extracted from\n * {@link android.view.DisplayCutout#fromResourcesRectApproximation(Resources, int, int)} to be\n * the specified class for parsing the specification.\n * BNF definition:\n * <ul>\n *      <li>Cutouts Specification = ([Cutout Delimiter],Cutout Specification) {...}, [Dp] ; </li>\n *      <li>Cutout Specification  = [Vertical Position], (SVG Path Element), [Horizontal Position]\n *                                  [Bind Cutout] ;</li>\n *      <li>Vertical Position     = \"@bottom\" | \"@center_vertical\" ;</li>\n *      <li>Horizontal Position   = \"@left\" | \"@right\" ;</li>\n *      <li>Bind Cutout           = \"@bind_left_cutout\" | \"@bind_right_cutout\" ;</li>\n *      <li>Cutout Delimiter      = \"@cutout\" ;</li>\n *      <li>Dp                    = \"@dp\"</li>\n * </ul>\n *\n * <ul>\n *     <li>Vertical position is top by default if there is neither \"@bottom\" nor \"@center_vertical\"\n *     </li>\n *     <li>Horizontal position is center horizontal by default if there is neither \"@left\" nor\n *     \"@right\".</li>\n *     <li>@bottom make the cutout piece bind to bottom edge.</li>\n *     <li>both of @bind_left_cutout and @bind_right_cutout are use to claim the cutout belong to\n *     left or right edge cutout.</li>\n * </ul>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINIMAL_ACCEPTABLE_PATH_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_START_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DP_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOTTOM_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RIGHT_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEFT_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CUTOUT_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CENTER_VERTICAL_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BIND_RIGHT_CUTOUT_MARKER",
    "type" : "String",
    "comment" : " By default, it's top bound cutout. That's why TOP_BOUND_CUTOUT_MARKER is not defined ",
    "links" : [ ]
  }, {
    "name" : "BIND_LEFT_CUTOUT_MARKER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftBound",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopBound",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightBound",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottomBound",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsets",
    "type" : "Insets",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Path getPath()",
    "returnType" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getLeftBound()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getTopBound()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getRightBound()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getBottomBound()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getSafeInset()",
    "returnType" : "Rect",
    "comment" : "\n     * To count the safe inset according to the cutout bounds and waterfall inset.\n     *\n     * @return the safe inset.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int decideWhichEdge(boolean isTopEdgeShortEdge, boolean isShortEdge, boolean isStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "MINIMAL_ACCEPTABLE_PATH_LENGTH", "MARKER_START_CHAR", "DP_MARKER", "BOTTOM_MARKER", "RIGHT_MARKER", "LEFT_MARKER", "CUTOUT_MARKER", "CENTER_VERTICAL_MARKER", "BIND_RIGHT_CUTOUT_MARKER", "BIND_LEFT_CUTOUT_MARKER", "mPath", "mLeftBound", "mTopBound", "mRightBound", "mBottomBound", "mInsets" ],
  "methodNames" : [ "public Path getPath()", "public Rect getLeftBound()", "public Rect getTopBound()", "public Rect getRightBound()", "public Rect getBottomBound()", "public Rect getSafeInset()", "private static int decideWhichEdge(boolean isTopEdgeShortEdge, boolean isShortEdge, boolean isStart)" ]
}