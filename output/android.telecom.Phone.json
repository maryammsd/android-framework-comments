{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/Phone.java",
  "packageName" : "android.telecom",
  "className" : "Phone",
  "comment" : "\n * A unified virtual device providing a means of voice (and other) communication on a device.\n *\n * @hide\n * @deprecated Use {@link InCallService} directly instead of using this class.\n ",
  "variables" : [ {
    "name" : "SDK_VERSION_R",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mCallByTelecomCallId",
    "type" : "Map<String, Call>",
    "comment" : " A Map allows us to track each Call by its Telecom-specified call ID",
    "links" : [ ]
  }, {
    "name" : "mCalls",
    "type" : "List<Call>",
    "comment" : " user interface components do not incur any spurious jank",
    "links" : [ ]
  }, {
    "name" : "mUnmodifiableCalls",
    "type" : "List<Call>",
    "comment" : " An unmodifiable view of the above List can be safely shared with subclass implementations",
    "links" : [ ]
  }, {
    "name" : "mInCallAdapter",
    "type" : "InCallAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallAudioState",
    "type" : "CallAudioState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "List<Listener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanAddCall",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetSdkVersion",
    "type" : "int",
    "comment" : "\n     * The Target SDK version of the InCallService implementation.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final void internalAddCall(ParcelableCall parcelableCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalRemoveCall(Call call)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalUpdateCall(ParcelableCall parcelableCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalSetPostDialWait(String telecomId, String remaining)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalCallAudioStateChanged(CallAudioState callAudioState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Call internalGetCallByTelecomId(String telecomId)",
    "returnType" : "Call",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalBringToForeground(boolean showDialpad)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalSetCanAddCall(boolean canAddCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalSilenceRinger()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalOnConnectionEvent(String telecomId, String event, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalOnRttUpgradeRequest(String callId, int requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalOnRttInitiationFailure(String callId, int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalOnHandoverFailed(String callId, int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void internalOnHandoverComplete(String callId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Called to destroy the phone and cleanup any lingering calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void addListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener to this {@code Phone}.\n     *\n     * @param listener A {@code Listener} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener from this {@code Phone}.\n     *\n     * @param listener A {@code Listener} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final List<Call> getCalls()",
    "returnType" : "List<Call>",
    "comment" : "\n     * Obtains the current list of {@code Call}s to be displayed by this in-call experience.\n     *\n     * @return A list of the relevant {@code Call}s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean canAddCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the {@code Phone} can support additional calls.\n     *\n     * @return Whether the phone supports adding more calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setMuted(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the microphone mute state. When this request is honored, there will be change to\n     * the {@link #getAudioState()}.\n     *\n     * @param state {@code true} if the microphone should be muted; {@code false} otherwise.\n     ",
    "links" : [ "#getAudioState()" ]
  }, {
    "name" : "public final void setAudioRoute(int route)",
    "returnType" : "void",
    "comment" : "\n     * Sets the audio route (speaker, bluetooth, etc...).  When this request is honored, there will\n     * be change to the {@link #getAudioState()}.\n     *\n     * @param route The audio route to use.\n     ",
    "links" : [ "#getAudioState()" ]
  }, {
    "name" : "public void requestBluetoothAudio(String bluetoothAddress)",
    "returnType" : "void",
    "comment" : "\n     * Request audio routing to a specific bluetooth device. Calling this method may result in\n     * the device routing audio to a different bluetooth device than the one specified. A list of\n     * available devices can be obtained via {@link CallAudioState#getSupportedBluetoothDevices()}\n     *\n     * @param bluetoothAddress The address of the bluetooth device to connect to, as returned by\n     * {@link BluetoothDevice#getAddress()}, or {@code null} if no device is preferred.\n     ",
    "links" : [ "android.telecom.CallAudioState#getSupportedBluetoothDevices()", "android.bluetooth.BluetoothDevice#getAddress()" ]
  }, {
    "name" : "public final void setProximitySensorOn()",
    "returnType" : "void",
    "comment" : "\n     * Turns the proximity sensor on. When this request is made, the proximity sensor will\n     * become active, and the touch screen and display will be turned off when the user's face\n     * is detected to be in close proximity to the screen. This operation is a no-op on devices\n     * that do not have a proximity sensor.\n     * <p>\n     * This API does not actually turn on the proximity sensor; apps should do this on their own if\n     * required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setProximitySensorOff(boolean screenOnImmediately)",
    "returnType" : "void",
    "comment" : "\n     * Turns the proximity sensor off. When this request is made, the proximity sensor will\n     * become inactive, and no longer affect the touch screen and display. This operation is a\n     * no-op on devices that do not have a proximity sensor.\n     *\n     * @param screenOnImmediately If true, the screen will be turned on immediately if it was\n     * previously off. Otherwise, the screen will only be turned on after the proximity sensor\n     * is no longer triggered.\n     * <p>\n     * This API does not actually turn of the proximity sensor; apps should do this on their own if\n     * required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AudioState getAudioState()",
    "returnType" : "AudioState",
    "comment" : "\n     * Obtains the current phone call audio state of the {@code Phone}.\n     *\n     * @return An object encapsulating the audio state.\n     * @deprecated Use {@link #getCallAudioState()} instead.\n     ",
    "links" : [ "#getCallAudioState()" ]
  }, {
    "name" : "public final CallAudioState getCallAudioState()",
    "returnType" : "CallAudioState",
    "comment" : "\n     * Obtains the current phone call audio state of the {@code Phone}.\n     *\n     * @return An object encapsulating the audio state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fireCallAdded(Call call)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireCallRemoved(Call call)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireCallAudioStateChanged(CallAudioState audioState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireBringToForeground(boolean showDialpad)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireCanAddCallChanged(boolean canAddCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireSilenceRinger()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkCallTree(ParcelableCall parcelableCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SDK_VERSION_R", "mCallByTelecomCallId", "mCalls", "mUnmodifiableCalls", "mInCallAdapter", "mCallAudioState", "mListeners", "mCanAddCall", "mCallingPackage", "mTargetSdkVersion" ],
  "methodNames" : [ " final void internalAddCall(ParcelableCall parcelableCall)", " final void internalRemoveCall(Call call)", " final void internalUpdateCall(ParcelableCall parcelableCall)", " final void internalSetPostDialWait(String telecomId, String remaining)", " final void internalCallAudioStateChanged(CallAudioState callAudioState)", " final Call internalGetCallByTelecomId(String telecomId)", " final void internalBringToForeground(boolean showDialpad)", " final void internalSetCanAddCall(boolean canAddCall)", " final void internalSilenceRinger()", " final void internalOnConnectionEvent(String telecomId, String event, Bundle extras)", " final void internalOnRttUpgradeRequest(String callId, int requestId)", " final void internalOnRttInitiationFailure(String callId, int reason)", " final void internalOnHandoverFailed(String callId, int error)", " final void internalOnHandoverComplete(String callId)", " final void destroy()", "public final void addListener(Listener listener)", "public final void removeListener(Listener listener)", "public final List<Call> getCalls()", "public final boolean canAddCall()", "public final void setMuted(boolean state)", "public final void setAudioRoute(int route)", "public void requestBluetoothAudio(String bluetoothAddress)", "public final void setProximitySensorOn()", "public final void setProximitySensorOff(boolean screenOnImmediately)", "public final AudioState getAudioState()", "public final CallAudioState getCallAudioState()", "private void fireCallAdded(Call call)", "private void fireCallRemoved(Call call)", "private void fireCallAudioStateChanged(CallAudioState audioState)", "private void fireBringToForeground(boolean showDialpad)", "private void fireCanAddCallChanged(boolean canAddCall)", "private void fireSilenceRinger()", "private void checkCallTree(ParcelableCall parcelableCall)" ]
}