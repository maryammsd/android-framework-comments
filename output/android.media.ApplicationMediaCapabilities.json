{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ApplicationMediaCapabilities.java",
  "packageName" : "android.media",
  "className" : "ApplicationMediaCapabilities",
  "comment" : "\n ApplicationMediaCapabilities is an immutable class that encapsulates an application's capabilities\n for handling newer video codec format and media features.\n\n <p>\n Android 12 introduces Compatible media transcoding feature.  See\n <a href=\"https://developer.android.com/about/versions/12/features#compatible_media_transcoding\">\n Compatible media transcoding</a>. By default, Android assumes apps can support playback of all\n media formats. Apps that would like to request that media be transcoded into a more compatible\n format should declare their media capabilities in a media_capabilities.xml resource file and add it\n as a property tag in the AndroidManifest.xml file. Here is a example:\n <pre>\n {@code\n <media-capabilities xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <format android:name=\"HEVC\" supported=\"true\"/>\n     <format android:name=\"HDR10\" supported=\"false\"/>\n     <format android:name=\"HDR10Plus\" supported=\"false\"/>\n </media-capabilities>\n }\n </pre>\n The ApplicationMediaCapabilities class is generated from this xml and used by the platform to\n represent an application's media capabilities in order to determine whether modern media files need\n to be transcoded for that application.\n </p>\n\n <p>\n ApplicationMediaCapabilities objects can also be built by applications at runtime for use with\n {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)} to provide more\n control over the transcoding that is built into the platform. ApplicationMediaCapabilities\n provided by applications at runtime like this override the default manifest capabilities for that\n media access.The object could be build either through {@link #createFromXml(XmlPullParser)} or\n through the builder class {@link ApplicationMediaCapabilities.Builder}\n\n <h3> Video Codec Support</h3>\n <p>\n Newer video codes include HEVC, VP9 and AV1. Application only needs to indicate their support\n for newer format with this class as they are assumed to support older format like h.264.\n\n <h3>Capability of handling HDR(high dynamic range) video</h3>\n <p>\n There are four types of HDR video(Dolby-Vision, HDR10, HDR10+, HLG) supported by the platform,\n application will only need to specify individual types they supported.\n ",
  "links" : [ "ApplicationMediaCapabilities.Builder", "#createFromXml(XmlPullParser)", "android.content.ContentResolver#openTypedAssetFileDescriptor(Uri" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedVideoMimeTypes",
    "type" : "Set<String>",
    "comment" : " List of supported video codec mime types. ",
    "links" : [ ]
  }, {
    "name" : "mUnsupportedVideoMimeTypes",
    "type" : "Set<String>",
    "comment" : " List of unsupported video codec mime types. ",
    "links" : [ ]
  }, {
    "name" : "mSupportedHdrTypes",
    "type" : "Set<String>",
    "comment" : " List of supported hdr types. ",
    "links" : [ ]
  }, {
    "name" : "mUnsupportedHdrTypes",
    "type" : "Set<String>",
    "comment" : " List of unsupported hdr types. ",
    "links" : [ ]
  }, {
    "name" : "mIsSlowMotionSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ApplicationMediaCapabilities>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isVideoMimeTypeSupported(@NonNull String videoMime)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if a video codec format is supported by the application.\n     * <p>\n     * If the application has not specified supporting the format or not, this will return false.\n     * Use {@link #isFormatSpecified(String)} to query if a format is specified or not.\n     *\n     * @param videoMime The mime type of the video codec format. Must be the one used in\n     * {@link MediaFormat#KEY_MIME}.\n     * @return true if application supports the video codec format, false otherwise.\n     ",
    "links" : [ "android.media.MediaFormat#KEY_MIME", "#isFormatSpecified(String)" ]
  }, {
    "name" : "public boolean isHdrTypeSupported(@NonNull @MediaFeature.MediaHdrType String hdrType)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if a HDR type is supported by the application.\n     * <p>\n     * If the application has not specified supporting the format or not, this will return false.\n     * Use {@link #isFormatSpecified(String)} to query if a format is specified or not.\n     *\n     * @param hdrType The type of the HDR format.\n     * @return true if application supports the HDR format, false otherwise.\n     ",
    "links" : [ "#isFormatSpecified(String)" ]
  }, {
    "name" : "public boolean isFormatSpecified(@NonNull String format)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if a format is specified by the application.\n     * <p>\n     * The format could be either the video format or the hdr format.\n     *\n     * @param format The name of the format.\n     * @return true if application specifies the format, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSupportedVideoMimeTypes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Query the video codec mime types supported by the application.\n     * @return List of supported video codec mime types. The list will be empty if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getUnsupportedVideoMimeTypes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Query the video codec mime types that are not supported by the application.\n     * @return List of unsupported video codec mime types. The list will be empty if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSupportedHdrTypes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Query all hdr types that are supported by the application.\n     * @return List of supported hdr types. The list will be empty if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getUnsupportedHdrTypes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Query all hdr types that are not supported by the application.\n     * @return List of unsupported hdr types. The list will be empty if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSlowMotionSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether handling of slow-motion video is supported\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationMediaCapabilities createFromXml(@NonNull XmlPullParser xmlParser)",
    "returnType" : "ApplicationMediaCapabilities",
    "comment" : " TODO: Add developer.android.com link for the format of the xml.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isVideoMimeTypeSupported(@NonNull String videoMime)", "public boolean isHdrTypeSupported(@NonNull @MediaFeature.MediaHdrType String hdrType)", "public boolean isFormatSpecified(@NonNull String format)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public String toString()", "public List<String> getSupportedVideoMimeTypes()", "public List<String> getUnsupportedVideoMimeTypes()", "public List<String> getSupportedHdrTypes()", "public List<String> getUnsupportedHdrTypes()", "public boolean isSlowMotionSupported()", "public static ApplicationMediaCapabilities createFromXml(@NonNull XmlPullParser xmlParser)" ],
  "variableNames" : [ "TAG", "mSupportedVideoMimeTypes", "mUnsupportedVideoMimeTypes", "mSupportedHdrTypes", "mUnsupportedHdrTypes", "mIsSlowMotionSupported", "CREATOR" ]
}