{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicIntegerFieldUpdaterImpl",
  "comment" : "\n     * Standard hotspot implementation using intrinsics.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "U",
    "type" : "Unsafe",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "offset",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cclass",
    "type" : "Class<?>",
    "comment" : "\n         * if field is protected, the subclass constructing updater, else\n         * the same as tclass\n         ",
    "links" : [ ]
  }, {
    "name" : "tclass",
    "type" : "Class<T>",
    "comment" : " class holding the field ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isSamePackage(Class<?> class1, Class<?> class2)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the two classes have the same class loader and\n         * package qualifier\n         ",
    "links" : [ ]
  }, {
    "name" : "private final void accessCheck(T obj)",
    "returnType" : "void",
    "comment" : "\n         * Checks that target argument is instance of cclass.  On\n         * failure, throws cause.\n         ",
    "links" : [ ]
  }, {
    "name" : "private final void throwAccessCheckException(T obj)",
    "returnType" : "void",
    "comment" : "\n         * Throws access exception if accessCheck failed due to\n         * protected access, else ClassCastException.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final boolean compareAndSet(T obj, int expect, int update)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean weakCompareAndSet(T obj, int expect, int update)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void set(T obj, int newValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void lazySet(T obj, int newValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int get(T obj)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getAndSet(T obj, int newValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getAndAdd(T obj, int delta)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getAndIncrement(T obj)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getAndDecrement(T obj)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int incrementAndGet(T obj)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int decrementAndGet(T obj)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int addAndGet(T obj, int delta)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean isSamePackage(Class<?> class1, Class<?> class2)", "private final void accessCheck(T obj)", "private final void throwAccessCheckException(T obj)", "public final boolean compareAndSet(T obj, int expect, int update)", "public final boolean weakCompareAndSet(T obj, int expect, int update)", "public final void set(T obj, int newValue)", "public final void lazySet(T obj, int newValue)", "public final int get(T obj)", "public final int getAndSet(T obj, int newValue)", "public final int getAndAdd(T obj, int delta)", "public final int getAndIncrement(T obj)", "public final int getAndDecrement(T obj)", "public final int incrementAndGet(T obj)", "public final int decrementAndGet(T obj)", "public final int addAndGet(T obj, int delta)" ],
  "variableNames" : [ "U", "offset", "cclass", "tclass" ]
}