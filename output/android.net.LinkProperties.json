{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/LinkProperties.java",
  "packageName" : "android.net",
  "className" : "LinkProperties",
  "comment" : "\n * Describes the properties of a network link.\n *\n * A link represents a connection to a network.\n * It may have multiple addresses and multiple gateways,\n * multiple dns servers but only one http proxy and one\n * network interface.\n *\n * Note that this is just a holder of data.  Modifying it\n * does not affect live networks.\n *\n ",
  "variables" : [ {
    "name" : "mIfaceName",
    "type" : "String",
    "comment" : " The interface described by the network link.",
    "links" : [ ]
  }, {
    "name" : "mLinkAddresses",
    "type" : "ArrayList<LinkAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDnses",
    "type" : "ArrayList<InetAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPcscfs",
    "type" : "ArrayList<InetAddress>",
    "comment" : " PCSCF addresses are addresses of SIP proxies that only exist for the IMS core service.",
    "links" : [ ]
  }, {
    "name" : "mValidatedPrivateDnses",
    "type" : "ArrayList<InetAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsePrivateDns",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivateDnsServerName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDomains",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoutes",
    "type" : "ArrayList<RouteInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDhcpServerAddress",
    "type" : "Inet4Address",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHttpProxy",
    "type" : "ProxyInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMtu",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTcpBufferSizes",
    "type" : "String",
    "comment" : " in the format \"rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max\"",
    "links" : [ ]
  }, {
    "name" : "mNat64Prefix",
    "type" : "IpPrefix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWakeOnLanSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptivePortalApiUrl",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptivePortalData",
    "type" : "CaptivePortalData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParcelSensitiveFields",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether parceling should preserve fields that are set based on permissions of\n     * the process receiving the {@link LinkProperties}.\n     ",
    "links" : [ "android.net.LinkProperties" ]
  }, {
    "name" : "MIN_MTU",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_MTU_V6",
    "type" : "int",
    "comment" : " package-visibility - Used in other files (such as Ikev2VpnProfile) as minimum iface MTU. ",
    "links" : [ ]
  }, {
    "name" : "MAX_MTU",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INET6_ADDR_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStackedLinks",
    "type" : "Hashtable<String, LinkProperties>",
    "comment" : " Indexed by interface name to allow modification and to prevent duplicates being added.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<LinkProperties>",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ProvisioningChange compareProvisioning(LinkProperties before, LinkProperties after)",
    "returnType" : "ProvisioningChange",
    "comment" : "\n     * Compare the provisioning states of two LinkProperties instances.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInterfaceName(@Nullable String iface)",
    "returnType" : "void",
    "comment" : "\n     * Sets the interface name for this link.  All {@link RouteInfo} already set for this\n     * will have their interface changed to match this new value.\n     *\n     * @param iface The name of the network interface used for this link.\n     ",
    "links" : [ "android.net.RouteInfo" ]
  }, {
    "name" : "public String getInterfaceName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the interface name for this link.  May be {@code null} if not set.\n     *\n     * @return The interface name set for this link or {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllInterfaceNames()",
    "returnType" : "List<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<InetAddress> getAddresses()",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Returns all the addresses on this link.  We often think of a link having a single address,\n     * however, particularly with Ipv6 several addresses are typical.  Note that the\n     * {@code LinkProperties} actually contains {@link LinkAddress} objects which also include\n     * prefix lengths for each address.  This is a simplified utility alternative to\n     * {@link LinkProperties#getLinkAddresses}.\n     *\n     * @return An unmodifiable {@link List} of {@link InetAddress} for this link.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress", "android.net.LinkProperties#getLinkAddresses", "android.net.LinkAddress", "java.util.ArrayList" ]
  }, {
    "name" : "public List<InetAddress> getAllAddresses()",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Returns all the addresses on this link and all the links stacked above it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findLinkAddressIndex(LinkAddress address)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addLinkAddress(@NonNull LinkAddress address)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a {@link LinkAddress} to this {@code LinkProperties} if a {@link LinkAddress} of the\n     * same address/prefix does not already exist.  If it does exist it is replaced.\n     * @param address The {@code LinkAddress} to add.\n     * @return true if {@code address} was added or updated, false otherwise.\n     * @hide\n     ",
    "links" : [ "android.net.LinkAddress" ]
  }, {
    "name" : "public boolean removeLinkAddress(@NonNull LinkAddress toRemove)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a {@link LinkAddress} from this {@code LinkProperties}.  Specifically, matches\n     * and {@link LinkAddress} with the same address and prefix.\n     *\n     * @param toRemove A {@link LinkAddress} specifying the address to remove.\n     * @return true if the address was removed, false if it did not exist.\n     * @hide\n     ",
    "links" : [ "android.net.LinkAddress" ]
  }, {
    "name" : "public List<LinkAddress> getLinkAddresses()",
    "returnType" : "List<LinkAddress>",
    "comment" : "\n     * Returns all the {@link LinkAddress} on this link.  Typically a link will have\n     * one IPv4 address and one or more IPv6 addresses.\n     *\n     * @return An unmodifiable {@link List} of {@link LinkAddress} for this link.\n     ",
    "links" : [ "android.net.LinkAddress", "java.util.ArrayList" ]
  }, {
    "name" : "public List<LinkAddress> getAllLinkAddresses()",
    "returnType" : "List<LinkAddress>",
    "comment" : "\n     * Returns all the addresses on this link and all the links stacked above it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLinkAddresses(@NonNull Collection<LinkAddress> addresses)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the {@link LinkAddress} in this {@code LinkProperties} with\n     * the given {@link Collection} of {@link LinkAddress}.\n     *\n     * @param addresses The {@link Collection} of {@link LinkAddress} to set in this\n     *                  object.\n     ",
    "links" : [ "java.util.Collection", "android.net.LinkAddress" ]
  }, {
    "name" : "public boolean addDnsServer(@NonNull InetAddress dnsServer)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the given {@link InetAddress} to the list of DNS servers, if not present.\n     *\n     * @param dnsServer The {@link InetAddress} to add to the list of DNS servers.\n     * @return true if the DNS server was added, false if it was already present.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public boolean removeDnsServer(@NonNull InetAddress dnsServer)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the given {@link InetAddress} from the list of DNS servers.\n     *\n     * @param dnsServer The {@link InetAddress} to remove from the list of DNS servers.\n     * @return true if the DNS server was removed, false if it did not exist.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public void setDnsServers(@NonNull Collection<InetAddress> dnsServers)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the DNS servers in this {@code LinkProperties} with\n     * the given {@link Collection} of {@link InetAddress} objects.\n     *\n     * @param dnsServers The {@link Collection} of DNS servers to set in this object.\n     ",
    "links" : [ "java.net.InetAddress", "java.util.Collection" ]
  }, {
    "name" : "public List<InetAddress> getDnsServers()",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Returns all the {@link InetAddress} for DNS servers on this link.\n     *\n     * @return An unmodifiable {@link List} of {@link InetAddress} for DNS servers on\n     *         this link.\n     ",
    "links" : [ "java.net.InetAddress", "java.util.ArrayList" ]
  }, {
    "name" : "public void setUsePrivateDns(boolean usePrivateDns)",
    "returnType" : "void",
    "comment" : "\n     * Set whether private DNS is currently in use on this network.\n     *\n     * @param usePrivateDns The private DNS state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrivateDnsActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether private DNS is currently in use on this network. When\n     * private DNS is in use, applications must not send unencrypted DNS\n     * queries as doing so could reveal private user information. Furthermore,\n     * if private DNS is in use and {@link #getPrivateDnsServerName} is not\n     * {@code null}, DNS queries must be sent to the specified DNS server.\n     *\n     * @return {@code true} if private DNS is in use, {@code false} otherwise.\n     ",
    "links" : [ "#getPrivateDnsServerName" ]
  }, {
    "name" : "public void setPrivateDnsServerName(@Nullable String privateDnsServerName)",
    "returnType" : "void",
    "comment" : "\n     * Set the name of the private DNS server to which private DNS queries\n     * should be sent when in strict mode. This value should be {@code null}\n     * when private DNS is off or in opportunistic mode.\n     *\n     * @param privateDnsServerName The private DNS server name.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDhcpServerAddress(@Nullable Inet4Address serverAddress)",
    "returnType" : "void",
    "comment" : "\n     * Set DHCP server address.\n     *\n     * @param serverAddress the server address to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Inet4Address getDhcpServerAddress()",
    "returnType" : "Inet4Address",
    "comment" : "\n     * Get DHCP server address\n     *\n     * @return The current DHCP server address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPrivateDnsServerName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the private DNS server name that is in use. If not {@code null},\n     * private DNS is in strict mode. In this mode, applications should ensure\n     * that all DNS queries are encrypted and sent to this hostname and that\n     * queries are only sent if the hostname's certificate is valid. If\n     * {@code null} and {@link #isPrivateDnsActive} is {@code true}, private\n     * DNS is in opportunistic mode, and applications should ensure that DNS\n     * queries are encrypted and sent to a DNS server returned by\n     * {@link #getDnsServers}. System DNS will handle each of these cases\n     * correctly, but applications implementing their own DNS lookups must make\n     * sure to follow these requirements.\n     *\n     * @return The private DNS server name.\n     ",
    "links" : [ "#getDnsServers", "#isPrivateDnsActive" ]
  }, {
    "name" : "public boolean addValidatedPrivateDnsServer(@NonNull InetAddress dnsServer)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the given {@link InetAddress} to the list of validated private DNS servers,\n     * if not present. This is distinct from the server name in that these are actually\n     * resolved addresses.\n     *\n     * @param dnsServer The {@link InetAddress} to add to the list of validated private DNS servers.\n     * @return true if the DNS server was added, false if it was already present.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public boolean removeValidatedPrivateDnsServer(@NonNull InetAddress dnsServer)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the given {@link InetAddress} from the list of validated private DNS servers.\n     *\n     * @param dnsServer The {@link InetAddress} to remove from the list of validated private DNS\n     *        servers.\n     * @return true if the DNS server was removed, false if it did not exist.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public void setValidatedPrivateDnsServers(@NonNull Collection<InetAddress> dnsServers)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the validated private DNS servers in this {@code LinkProperties} with\n     * the given {@link Collection} of {@link InetAddress} objects.\n     *\n     * @param dnsServers The {@link Collection} of validated private DNS servers to set in this\n     *        object.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress", "java.util.Collection" ]
  }, {
    "name" : "public List<InetAddress> getValidatedPrivateDnsServers()",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Returns all the {@link InetAddress} for validated private DNS servers on this link.\n     * These are resolved from the private DNS server name.\n     *\n     * @return An unmodifiable {@link List} of {@link InetAddress} for validated private\n     *         DNS servers on this link.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress", "java.util.ArrayList" ]
  }, {
    "name" : "public boolean addPcscfServer(@NonNull InetAddress pcscfServer)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the given {@link InetAddress} to the list of PCSCF servers, if not present.\n     *\n     * @param pcscfServer The {@link InetAddress} to add to the list of PCSCF servers.\n     * @return true if the PCSCF server was added, false otherwise.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public boolean removePcscfServer(@NonNull InetAddress pcscfServer)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the given {@link InetAddress} from the list of PCSCF servers.\n     *\n     * @param pcscfServer The {@link InetAddress} to remove from the list of PCSCF servers.\n     * @return true if the PCSCF server was removed, false otherwise.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public void setPcscfServers(@NonNull Collection<InetAddress> pcscfServers)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the PCSCF servers in this {@code LinkProperties} with\n     * the given {@link Collection} of {@link InetAddress} objects.\n     *\n     * @param pcscfServers The {@link Collection} of PCSCF servers to set in this object.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress", "java.util.Collection" ]
  }, {
    "name" : "public List<InetAddress> getPcscfServers()",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Returns all the {@link InetAddress} for PCSCF servers on this link.\n     *\n     * @return An unmodifiable {@link List} of {@link InetAddress} for PCSCF servers on\n     *         this link.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress", "java.util.ArrayList" ]
  }, {
    "name" : "public void setDomains(@Nullable String domains)",
    "returnType" : "void",
    "comment" : "\n     * Sets the DNS domain search path used on this link.\n     *\n     * @param domains A {@link String} listing in priority order the comma separated\n     *                domains to search when resolving host names on this link.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "public String getDomains()",
    "returnType" : "String",
    "comment" : "\n     * Get the DNS domains search path set for this link. May be {@code null} if not set.\n     *\n     * @return A {@link String} containing the comma separated domains to search when resolving host\n     *         names on this link or {@code null}.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "public void setMtu(int mtu)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Maximum Transmission Unit size to use on this link.  This should not be used\n     * unless the system default (1500) is incorrect.  Values less than 68 or greater than\n     * 10000 will be ignored.\n     *\n     * @param mtu The MTU to use for this link.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMtu()",
    "returnType" : "int",
    "comment" : "\n     * Gets any non-default MTU size set for this link.  Note that if the default is being used\n     * this will return 0.\n     *\n     * @return The mtu value set for this link.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTcpBufferSizes(@Nullable String tcpBufferSizes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the tcp buffers sizes to be used when this link is the system default.\n     * Should be of the form \"rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max\".\n     *\n     * @param tcpBufferSizes The tcp buffers sizes to use.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTcpBufferSizes()",
    "returnType" : "String",
    "comment" : "\n     * Gets the tcp buffer sizes. May be {@code null} if not set.\n     *\n     * @return the tcp buffer sizes to use when this link is the system default or {@code null}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private RouteInfo routeWithInterface(RouteInfo route)",
    "returnType" : "RouteInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findRouteIndexByRouteKey(RouteInfo route)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addRoute(@NonNull RouteInfo route)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a {@link RouteInfo} to this {@code LinkProperties}, if a {@link RouteInfo}\n     * with the same {@link RouteInfo.RouteKey} with different properties\n     * (e.g., different MTU), it will be updated. If the {@link RouteInfo} had an\n     * interface name set and that differs from the interface set for this\n     * {@code LinkProperties} an {@link IllegalArgumentException} will be thrown.\n     * The proper course is to add either un-named or properly named {@link RouteInfo}.\n     *\n     * @param route A {@link RouteInfo} to add to this object.\n     * @return {@code true} was added or updated, false otherwise.\n     ",
    "links" : [ "android.net.RouteInfo", "RouteInfo.RouteKey", "IllegalArgumentException" ]
  }, {
    "name" : "public boolean removeRoute(@NonNull RouteInfo route)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a {@link RouteInfo} from this {@code LinkProperties}, if present. The route must\n     * specify an interface and the interface must match the interface of this\n     * {@code LinkProperties}, or it will not be removed.\n     *\n     * @param route A {@link RouteInfo} specifying the route to remove.\n     * @return {@code true} if the route was removed, {@code false} if it was not present.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.RouteInfo" ]
  }, {
    "name" : "public List<RouteInfo> getRoutes()",
    "returnType" : "List<RouteInfo>",
    "comment" : "\n     * Returns all the {@link RouteInfo} set on this link.\n     *\n     * @return An unmodifiable {@link List} of {@link RouteInfo} for this link.\n     ",
    "links" : [ "android.net.RouteInfo", "java.util.ArrayList" ]
  }, {
    "name" : "public void ensureDirectlyConnectedRoutes()",
    "returnType" : "void",
    "comment" : "\n     * Make sure this LinkProperties instance contains routes that cover the local subnet\n     * of its link addresses. Add any route that is missing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<RouteInfo> getAllRoutes()",
    "returnType" : "List<RouteInfo>",
    "comment" : "\n     * Returns all the routes on this link and all the links stacked above it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHttpProxy(@Nullable ProxyInfo proxy)",
    "returnType" : "void",
    "comment" : "\n     * Sets the recommended {@link ProxyInfo} to use on this link, or {@code null} for none.\n     * Note that Http Proxies are only a hint - the system recommends their use, but it does\n     * not enforce it and applications may ignore them.\n     *\n     * @param proxy A {@link ProxyInfo} defining the HTTP Proxy to use on this link.\n     ",
    "links" : [ "android.net.ProxyInfo" ]
  }, {
    "name" : "public ProxyInfo getHttpProxy()",
    "returnType" : "ProxyInfo",
    "comment" : "\n     * Gets the recommended {@link ProxyInfo} (or {@code null}) set on this link.\n     *\n     * @return The {@link ProxyInfo} set on this link or {@code null}.\n     ",
    "links" : [ "android.net.ProxyInfo" ]
  }, {
    "name" : "public IpPrefix getNat64Prefix()",
    "returnType" : "IpPrefix",
    "comment" : "\n     * Returns the NAT64 prefix in use on this link, if any.\n     *\n     * @return the NAT64 prefix or {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNat64Prefix(@Nullable IpPrefix prefix)",
    "returnType" : "void",
    "comment" : "\n     * Sets the NAT64 prefix in use on this link.\n     *\n     * Currently, only 96-bit prefixes (i.e., where the 32-bit IPv4 address is at the end of the\n     * 128-bit IPv6 address) are supported or {@code null} for no prefix.\n     *\n     * @param prefix the NAT64 prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addStackedLink(@NonNull LinkProperties link)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a stacked link.\n     *\n     * If there is already a stacked link with the same interface name as link,\n     * that link is replaced with link. Otherwise, link is added to the list\n     * of stacked links.\n     *\n     * @param link The link to add.\n     * @return true if the link was stacked, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeStackedLink(@NonNull String iface)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a stacked link.\n     *\n     * If there is a stacked link with the given interface name, it is\n     * removed. Otherwise, nothing changes.\n     *\n     * @param iface The interface name of the link to remove.\n     * @return true if the link was removed, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<LinkProperties> getStackedLinks()",
    "returnType" : "List<LinkProperties>",
    "comment" : "\n     * Returns all the links stacked on top of this link.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears this object to its initial state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Implement the Parcelable interface\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv4Address()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv4 address.\n     *\n     * @return {@code true} if there is an IPv4 address, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIPv4Address()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if there is an IPv4 address, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasIpv4AddressOnInterface(String iface)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link or any of its stacked interfaces has an IPv4 address.\n     *\n     * @return {@code true} if there is an IPv4 address, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasGlobalIpv6Address()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has a global preferred IPv6 address.\n     *\n     * @return {@code true} if there is a global preferred IPv6 address, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv4UnreachableDefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv4 unreachable default route.\n     *\n     * @return {@code true} if there is an IPv4 unreachable default route, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasGlobalIPv6Address()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if there is a global preferred IPv6 address, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv4DefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv4 default route.\n     *\n     * @return {@code true} if there is an IPv4 default route, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv6UnreachableDefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv6 unreachable default route.\n     *\n     * @return {@code true} if there is an IPv6 unreachable default route, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIPv4DefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if there is an IPv4 default route, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv6DefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv6 default route.\n     *\n     * @return {@code true} if there is an IPv6 default route, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIPv6DefaultRoute()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if there is an IPv6 default route, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv4DnsServer()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv4 DNS server.\n     *\n     * @return {@code true} if there is an IPv4 DNS server, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIPv4DnsServer()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if there is an IPv4 DNS server, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv6DnsServer()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv6 DNS server.\n     *\n     * @return {@code true} if there is an IPv6 DNS server, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIPv6DnsServer()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if there is an IPv6 DNS server, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv4PcscfServer()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv4 PCSCF server.\n     *\n     * @return {@code true} if there is an IPv4 PCSCF server, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIpv6PcscfServer()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link has an IPv6 PCSCF server.\n     *\n     * @return {@code true} if there is an IPv6 PCSCF server, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIpv4Provisioned()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link is provisioned for global IPv4 connectivity.\n     * This requires an IP address, default route, and DNS server.\n     *\n     * @return {@code true} if the link is provisioned, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIpv6Provisioned()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link is provisioned for global IPv6 connectivity.\n     * This requires an IP address, default route, and DNS server.\n     *\n     * @return {@code true} if the link is provisioned, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv6Provisioned()",
    "returnType" : "boolean",
    "comment" : "\n     * For backward compatibility.\n     * This was annotated with @UnsupportedAppUsage in P, so we can't remove the method completely\n     * just yet.\n     * @return {@code true} if the link is provisioned, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProvisioned()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this link is provisioned for global connectivity,\n     * for at least one Internet Protocol family.\n     *\n     * @return {@code true} if the link is provisioned, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReachable(@NonNull InetAddress ip)",
    "returnType" : "boolean",
    "comment" : "\n     * Evaluate whether the {@link InetAddress} is considered reachable.\n     *\n     * @return {@code true} if the given {@link InetAddress} is considered reachable,\n     *         {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public boolean isIdenticalInterfaceName(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} interface name against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalDhcpServerAddress(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} DHCP server address against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalAddresses(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} interface addresses against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalDnses(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} DNS addresses against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalPrivateDns(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} private DNS settings against the\n     * target.\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalValidatedPrivateDnses(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} validated private DNS addresses against\n     * the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalPcscfs(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} PCSCF addresses against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalRoutes(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} Routes against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalHttpProxy(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} HttpProxy against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalStackedLinks(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} stacked links against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalMtu(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} MTU against the target\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalTcpBufferSizes(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} Tcp buffer sizes against the target.\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalNat64Prefix(@NonNull LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} NAT64 prefix against the target.\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalWakeOnLan(LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} WakeOnLan supported against the target.\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalCaptivePortalApiUrl(LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties}'s CaptivePortalApiUrl against the target.\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIdenticalCaptivePortalData(LinkProperties target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties}'s CaptivePortalData against the target.\n     *\n     * @param target LinkProperties to compare.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWakeOnLanSupported(boolean supported)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the network interface supports WakeOnLAN\n     *\n     * @param supported WakeOnLAN supported value\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWakeOnLanSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the network interface supports WakeOnLAN\n     *\n     * @return {@code true} if interface supports WakeOnLAN, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCaptivePortalApiUrl(@Nullable Uri url)",
    "returnType" : "void",
    "comment" : "\n     * Set the URL of the captive portal API endpoint to get more information about the network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getCaptivePortalApiUrl()",
    "returnType" : "Uri",
    "comment" : "\n     * Get the URL of the captive portal API endpoint to get more information about the network.\n     *\n     * <p>This is null unless the application has\n     * {@link android.Manifest.permission.NETWORK_SETTINGS} or\n     * {@link NetworkStack#PERMISSION_MAINLINE_NETWORK_STACK} permissions, and the network provided\n     * the URL.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.NETWORK_SETTINGS", "android.net.NetworkStack#PERMISSION_MAINLINE_NETWORK_STACK" ]
  }, {
    "name" : "public void setCaptivePortalData(@Nullable CaptivePortalData data)",
    "returnType" : "void",
    "comment" : "\n     * Set the CaptivePortalData obtained from the captive portal API (RFC7710bis).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CaptivePortalData getCaptivePortalData()",
    "returnType" : "CaptivePortalData",
    "comment" : "\n     * Get the CaptivePortalData obtained from the captive portal API (RFC7710bis).\n     *\n     * <p>This is null unless the application has\n     * {@link android.Manifest.permission.NETWORK_SETTINGS} or\n     * {@link NetworkStack#PERMISSION_MAINLINE_NETWORK_STACK} permissions.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.NETWORK_SETTINGS", "android.net.NetworkStack#PERMISSION_MAINLINE_NETWORK_STACK" ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code LinkProperties} instance against the target\n     * LinkProperties in {@code obj}. Two LinkPropertieses are equal if\n     * all their fields are equal in values.\n     *\n     * For collection fields, such as mDnses, containsAll() is used to check\n     * if two collections contains the same elements, independent of order.\n     * There are two thoughts regarding containsAll()\n     * 1. Duplicated elements. eg, (A, B, B) and (A, A, B) are equal.\n     * 2. Worst case performance is O(n^2).\n     *\n     * @param obj the object to be tested for equality.\n     * @return {@code true} if both objects are equal, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompareResult<InetAddress> compareDnses(@Nullable LinkProperties target)",
    "returnType" : "CompareResult<InetAddress>",
    "comment" : "\n     * Compares the DNS addresses in this LinkProperties with another\n     * LinkProperties, examining only DNS addresses on the base link.\n     *\n     * @param target a LinkProperties with the new list of dns addresses\n     * @return the differences between the DNS addresses.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompareResult<InetAddress> compareValidatedPrivateDnses(@Nullable LinkProperties target)",
    "returnType" : "CompareResult<InetAddress>",
    "comment" : "\n     * Compares the validated private DNS addresses in this LinkProperties with another\n     * LinkProperties.\n     *\n     * @param target a LinkProperties with the new list of validated private dns addresses\n     * @return the differences between the DNS addresses.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompareResult<RouteInfo> compareAllRoutes(@Nullable LinkProperties target)",
    "returnType" : "CompareResult<RouteInfo>",
    "comment" : "\n     * Compares all routes in this LinkProperties with another LinkProperties,\n     * examining both the the base link and all stacked links.\n     *\n     * @param target a LinkProperties with the new list of routes\n     * @return the differences between the routes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CompareResult<String> compareAllInterfaceNames(@Nullable LinkProperties target)",
    "returnType" : "CompareResult<String>",
    "comment" : "\n     * Compares all interface names in this LinkProperties with another\n     * LinkProperties, examining both the the base link and all stacked links.\n     *\n     * @param target a LinkProperties with the new list of interface names\n     * @return the differences between the interface names.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generate hashcode based on significant fields\n     *\n     * Equal objects must produce the same hash code, while unequal objects\n     * may have the same hash codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeAddresses(@NonNull Parcel dest, @NonNull List<InetAddress> list)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeAddress(@NonNull Parcel dest, @Nullable InetAddress addr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static InetAddress readAddress(@NonNull Parcel p) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidMtu(int mtu, boolean ipv6)",
    "returnType" : "boolean",
    "comment" : "\n     * Check the valid MTU range based on IPv4 or IPv6.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mIfaceName", "mLinkAddresses", "mDnses", "mPcscfs", "mValidatedPrivateDnses", "mUsePrivateDns", "mPrivateDnsServerName", "mDomains", "mRoutes", "mDhcpServerAddress", "mHttpProxy", "mMtu", "mTcpBufferSizes", "mNat64Prefix", "mWakeOnLanSupported", "mCaptivePortalApiUrl", "mCaptivePortalData", "mParcelSensitiveFields", "MIN_MTU", "MIN_MTU_V6", "MAX_MTU", "INET6_ADDR_LENGTH", "mStackedLinks", "CREATOR" ],
  "methodNames" : [ "public static ProvisioningChange compareProvisioning(LinkProperties before, LinkProperties after)", "public void setInterfaceName(@Nullable String iface)", "public String getInterfaceName()", "public List<String> getAllInterfaceNames()", "public List<InetAddress> getAddresses()", "public List<InetAddress> getAllAddresses()", "private int findLinkAddressIndex(LinkAddress address)", "public boolean addLinkAddress(@NonNull LinkAddress address)", "public boolean removeLinkAddress(@NonNull LinkAddress toRemove)", "public List<LinkAddress> getLinkAddresses()", "public List<LinkAddress> getAllLinkAddresses()", "public void setLinkAddresses(@NonNull Collection<LinkAddress> addresses)", "public boolean addDnsServer(@NonNull InetAddress dnsServer)", "public boolean removeDnsServer(@NonNull InetAddress dnsServer)", "public void setDnsServers(@NonNull Collection<InetAddress> dnsServers)", "public List<InetAddress> getDnsServers()", "public void setUsePrivateDns(boolean usePrivateDns)", "public boolean isPrivateDnsActive()", "public void setPrivateDnsServerName(@Nullable String privateDnsServerName)", "public void setDhcpServerAddress(@Nullable Inet4Address serverAddress)", "public Inet4Address getDhcpServerAddress()", "public String getPrivateDnsServerName()", "public boolean addValidatedPrivateDnsServer(@NonNull InetAddress dnsServer)", "public boolean removeValidatedPrivateDnsServer(@NonNull InetAddress dnsServer)", "public void setValidatedPrivateDnsServers(@NonNull Collection<InetAddress> dnsServers)", "public List<InetAddress> getValidatedPrivateDnsServers()", "public boolean addPcscfServer(@NonNull InetAddress pcscfServer)", "public boolean removePcscfServer(@NonNull InetAddress pcscfServer)", "public void setPcscfServers(@NonNull Collection<InetAddress> pcscfServers)", "public List<InetAddress> getPcscfServers()", "public void setDomains(@Nullable String domains)", "public String getDomains()", "public void setMtu(int mtu)", "public int getMtu()", "public void setTcpBufferSizes(@Nullable String tcpBufferSizes)", "public String getTcpBufferSizes()", "private RouteInfo routeWithInterface(RouteInfo route)", "private int findRouteIndexByRouteKey(RouteInfo route)", "public boolean addRoute(@NonNull RouteInfo route)", "public boolean removeRoute(@NonNull RouteInfo route)", "public List<RouteInfo> getRoutes()", "public void ensureDirectlyConnectedRoutes()", "public List<RouteInfo> getAllRoutes()", "public void setHttpProxy(@Nullable ProxyInfo proxy)", "public ProxyInfo getHttpProxy()", "public IpPrefix getNat64Prefix()", "public void setNat64Prefix(@Nullable IpPrefix prefix)", "public boolean addStackedLink(@NonNull LinkProperties link)", "public boolean removeStackedLink(@NonNull String iface)", "public List<LinkProperties> getStackedLinks()", "public void clear()", "public int describeContents()", "public String toString()", "public boolean hasIpv4Address()", "public boolean hasIPv4Address()", "private boolean hasIpv4AddressOnInterface(String iface)", "public boolean hasGlobalIpv6Address()", "public boolean hasIpv4UnreachableDefaultRoute()", "public boolean hasGlobalIPv6Address()", "public boolean hasIpv4DefaultRoute()", "public boolean hasIpv6UnreachableDefaultRoute()", "public boolean hasIPv4DefaultRoute()", "public boolean hasIpv6DefaultRoute()", "public boolean hasIPv6DefaultRoute()", "public boolean hasIpv4DnsServer()", "public boolean hasIPv4DnsServer()", "public boolean hasIpv6DnsServer()", "public boolean hasIPv6DnsServer()", "public boolean hasIpv4PcscfServer()", "public boolean hasIpv6PcscfServer()", "public boolean isIpv4Provisioned()", "public boolean isIpv6Provisioned()", "public boolean isIPv6Provisioned()", "public boolean isProvisioned()", "public boolean isReachable(@NonNull InetAddress ip)", "public boolean isIdenticalInterfaceName(@NonNull LinkProperties target)", "public boolean isIdenticalDhcpServerAddress(@NonNull LinkProperties target)", "public boolean isIdenticalAddresses(@NonNull LinkProperties target)", "public boolean isIdenticalDnses(@NonNull LinkProperties target)", "public boolean isIdenticalPrivateDns(@NonNull LinkProperties target)", "public boolean isIdenticalValidatedPrivateDnses(@NonNull LinkProperties target)", "public boolean isIdenticalPcscfs(@NonNull LinkProperties target)", "public boolean isIdenticalRoutes(@NonNull LinkProperties target)", "public boolean isIdenticalHttpProxy(@NonNull LinkProperties target)", "public boolean isIdenticalStackedLinks(@NonNull LinkProperties target)", "public boolean isIdenticalMtu(@NonNull LinkProperties target)", "public boolean isIdenticalTcpBufferSizes(@NonNull LinkProperties target)", "public boolean isIdenticalNat64Prefix(@NonNull LinkProperties target)", "public boolean isIdenticalWakeOnLan(LinkProperties target)", "public boolean isIdenticalCaptivePortalApiUrl(LinkProperties target)", "public boolean isIdenticalCaptivePortalData(LinkProperties target)", "public void setWakeOnLanSupported(boolean supported)", "public boolean isWakeOnLanSupported()", "public void setCaptivePortalApiUrl(@Nullable Uri url)", "public Uri getCaptivePortalApiUrl()", "public void setCaptivePortalData(@Nullable CaptivePortalData data)", "public CaptivePortalData getCaptivePortalData()", "public boolean equals(Object obj)", "public CompareResult<InetAddress> compareDnses(@Nullable LinkProperties target)", "public CompareResult<InetAddress> compareValidatedPrivateDnses(@Nullable LinkProperties target)", "public CompareResult<RouteInfo> compareAllRoutes(@Nullable LinkProperties target)", "public CompareResult<String> compareAllInterfaceNames(@Nullable LinkProperties target)", "public int hashCode()", "public void writeToParcel(Parcel dest, int flags)", "private static void writeAddresses(@NonNull Parcel dest, @NonNull List<InetAddress> list)", "private static void writeAddress(@NonNull Parcel dest, @Nullable InetAddress addr)", "private static InetAddress readAddress(@NonNull Parcel p) throws UnknownHostException", "public static boolean isValidMtu(int mtu, boolean ipv6)" ]
}