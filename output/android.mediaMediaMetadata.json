{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaMetadata.java",
  "packageName" : "android.media",
  "className" : "MediaMetadata",
  "comment" : "\n * Contains metadata about an item, such as the title, artist, etc.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_TITLE",
    "type" : "String",
    "comment" : "\n     * The title of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ARTIST",
    "type" : "String",
    "comment" : "\n     * The artist of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DURATION",
    "type" : "String",
    "comment" : "\n     * The duration of the media in ms. A negative duration indicates that the\n     * duration is unknown (or infinite).\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ALBUM",
    "type" : "String",
    "comment" : "\n     * The album title for the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_AUTHOR",
    "type" : "String",
    "comment" : "\n     * The author of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_WRITER",
    "type" : "String",
    "comment" : "\n     * The writer of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_COMPOSER",
    "type" : "String",
    "comment" : "\n     * The composer of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_COMPILATION",
    "type" : "String",
    "comment" : "\n     * The compilation status of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DATE",
    "type" : "String",
    "comment" : "\n     * The date the media was created or published. The format is unspecified\n     * but RFC 3339 is recommended.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_YEAR",
    "type" : "String",
    "comment" : "\n     * The year the media was created or published as a long.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_GENRE",
    "type" : "String",
    "comment" : "\n     * The genre of the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_TRACK_NUMBER",
    "type" : "String",
    "comment" : "\n     * The track number for the media.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_NUM_TRACKS",
    "type" : "String",
    "comment" : "\n     * The number of tracks in the media's original source.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DISC_NUMBER",
    "type" : "String",
    "comment" : "\n     * The disc number for the media's original source.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ALBUM_ARTIST",
    "type" : "String",
    "comment" : "\n     * The artist for the album of the media's original source.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_ART",
    "type" : "String",
    "comment" : "\n     * The artwork for the media as a {@link Bitmap}.\n     * <p>\n     * The artwork should be relatively small and may be scaled down by the\n     * system if it is too large. For higher resolution artwork\n     * {@link #METADATA_KEY_ART_URI} should be used instead.\n     ",
    "links" : [ "Bitmap", "#METADATA_KEY_ART_URI" ]
  }, {
    "name" : "METADATA_KEY_ART_URI",
    "type" : "String",
    "comment" : "\n     * The artwork for the media as a Uri formatted String. The artwork can be\n     * loaded using a combination of {@link ContentResolver#openInputStream} and\n     * {@link BitmapFactory#decodeStream}.\n     * <p>\n     * For the best results, Uris should use the content:// style and support\n     * {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through\n     * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}.\n     ",
    "links" : [ "ContentResolver#openInputStream", "BitmapFactory#decodeStream", "ContentResolver#EXTRA_SIZE", "ContentResolver#openTypedAssetFileDescriptor" ]
  }, {
    "name" : "METADATA_KEY_ALBUM_ART",
    "type" : "String",
    "comment" : "\n     * The artwork for the album of the media's original source as a\n     * {@link Bitmap}.\n     * <p>\n     * The artwork should be relatively small and may be scaled down by the\n     * system if it is too large. For higher resolution artwork\n     * {@link #METADATA_KEY_ALBUM_ART_URI} should be used instead.\n     ",
    "links" : [ "Bitmap", "#METADATA_KEY_ALBUM_ART_URI" ]
  }, {
    "name" : "METADATA_KEY_ALBUM_ART_URI",
    "type" : "String",
    "comment" : "\n     * The artwork for the album of the media's original source as a Uri\n     * formatted String. The artwork can be loaded using a combination of\n     * {@link ContentResolver#openInputStream} and\n     * {@link BitmapFactory#decodeStream}.\n     * <p>\n     * For the best results, Uris should use the content:// style and support\n     * {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through\n     * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}.\n     ",
    "links" : [ "ContentResolver#openInputStream", "BitmapFactory#decodeStream", "ContentResolver#EXTRA_SIZE", "ContentResolver#openTypedAssetFileDescriptor" ]
  }, {
    "name" : "METADATA_KEY_USER_RATING",
    "type" : "String",
    "comment" : "\n     * The user's rating for the media.\n     *\n     * @see Rating\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_RATING",
    "type" : "String",
    "comment" : "\n     * The overall rating for the media.\n     *\n     * @see Rating\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DISPLAY_TITLE",
    "type" : "String",
    "comment" : "\n     * A title that is suitable for display to the user. This will generally be\n     * the same as {@link #METADATA_KEY_TITLE} but may differ for some formats.\n     * When displaying media described by this metadata this should be preferred\n     * if present.\n     ",
    "links" : [ "#METADATA_KEY_TITLE" ]
  }, {
    "name" : "METADATA_KEY_DISPLAY_SUBTITLE",
    "type" : "String",
    "comment" : "\n     * A subtitle that is suitable for display to the user. When displaying a\n     * second line for media described by this metadata this should be preferred\n     * to other fields if present.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DISPLAY_DESCRIPTION",
    "type" : "String",
    "comment" : "\n     * A description that is suitable for display to the user. When displaying\n     * more information for media described by this metadata this should be\n     * preferred to other fields if present.\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEY_DISPLAY_ICON",
    "type" : "String",
    "comment" : "\n     * An icon or thumbnail that is suitable for display to the user. When\n     * displaying an icon for media described by this metadata this should be\n     * preferred to other fields if present. This must be a {@link Bitmap}.\n     * <p>\n     * The icon should be relatively small and may be scaled down by the system\n     * if it is too large. For higher resolution artwork\n     * {@link #METADATA_KEY_DISPLAY_ICON_URI} should be used instead.\n     ",
    "links" : [ "Bitmap", "#METADATA_KEY_DISPLAY_ICON_URI" ]
  }, {
    "name" : "METADATA_KEY_DISPLAY_ICON_URI",
    "type" : "String",
    "comment" : "\n     * A Uri formatted String for an icon or thumbnail that is suitable for\n     * display to the user. When displaying more information for media described\n     * by this metadata the display description should be preferred to other\n     * fields when present. The icon can be loaded using a combination of\n     * {@link ContentResolver#openInputStream} and\n     * {@link BitmapFactory#decodeStream}.\n     * <p>\n     * For the best results, Uris should use the content:// style and support\n     * {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through\n     * {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}.\n     ",
    "links" : [ "ContentResolver#openInputStream", "BitmapFactory#decodeStream", "ContentResolver#EXTRA_SIZE", "ContentResolver#openTypedAssetFileDescriptor" ]
  }, {
    "name" : "METADATA_KEY_MEDIA_ID",
    "type" : "String",
    "comment" : "\n     * A String key for identifying the content. This value is specific to the\n     * service providing the content. If used, this should be a persistent\n     * unique key for the underlying content. It may be used with\n     * {@link MediaController.TransportControls#playFromMediaId(String, Bundle)}\n     * to initiate playback when provided by a {@link MediaBrowser} connected to\n     * the same app.\n     ",
    "links" : [ "MediaController.TransportControls#playFromMediaId", "MediaBrowser" ]
  }, {
    "name" : "METADATA_KEY_MEDIA_URI",
    "type" : "String",
    "comment" : "\n     * A Uri formatted String representing the content. This value is specific to the\n     * service providing the content. It may be used with\n     * {@link MediaController.TransportControls#playFromUri(Uri, Bundle)}\n     * to initiate playback when provided by a {@link MediaBrowser} connected to\n     * the same app.\n     ",
    "links" : [ "MediaController.TransportControls#playFromUri", "MediaBrowser" ]
  }, {
    "name" : "METADATA_KEY_BT_FOLDER_TYPE",
    "type" : "String",
    "comment" : "\n     * The bluetooth folder type of the media specified in the section 6.10.2.2 of the Bluetooth\n     * AVRCP 1.5. It should be one of the following:\n     * <ul>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_MIXED}</li>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_TITLES}</li>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_ALBUMS}</li>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_ARTISTS}</li>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_GENRES}</li>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_PLAYLISTS}</li>\n     * <li>{@link MediaDescription#BT_FOLDER_TYPE_YEARS}</li>\n     * </ul>\n     ",
    "links" : [ "MediaDescription#BT_FOLDER_TYPE_MIXED", "MediaDescription#BT_FOLDER_TYPE_TITLES", "MediaDescription#BT_FOLDER_TYPE_ALBUMS", "MediaDescription#BT_FOLDER_TYPE_ARTISTS", "MediaDescription#BT_FOLDER_TYPE_GENRES", "MediaDescription#BT_FOLDER_TYPE_PLAYLISTS", "MediaDescription#BT_FOLDER_TYPE_YEARS" ]
  }, {
    "name" : "PREFERRED_DESCRIPTION_ORDER",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_BITMAP_ORDER",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_URI_ORDER",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_INVALID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_BITMAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_RATING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEYS_TYPE",
    "type" : "ArrayMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EDITOR_KEY_MAPPING",
    "type" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "MediaDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<MediaMetadata>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean containsKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given key is contained in the metadata\n     *\n     * @param key a String key\n     * @return true if the key exists in this metadata, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(@TextKey String key)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the value associated with the given key, or null if no mapping of\n     * the desired type exists for the given key or a null value is explicitly\n     * associated with the key.\n     *\n     * @param key The key the value is stored under\n     * @return a CharSequence value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@TextKey String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the text value associated with the given key as a String, or null\n     * if no mapping of the desired type exists for the given key or a null\n     * value is explicitly associated with the key. This is equivalent to\n     * calling {@link #getText getText().toString()} if the value is not null.\n     *\n     * @param key The key the value is stored under\n     * @return a String value, or null\n     ",
    "links" : [ "#getText" ]
  }, {
    "name" : "public long getLong(@LongKey String key)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value associated with the given key, or 0L if no long exists\n     * for the given key.\n     *\n     * @param key The key the value is stored under\n     * @return a long value\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rating getRating(@RatingKey String key)",
    "returnType" : "Rating",
    "comment" : "\n     * Returns a {@link Rating} for the given key or null if no rating exists\n     * for the given key.\n     *\n     * @param key The key the value is stored under\n     * @return A {@link Rating} or null\n     ",
    "links" : [ "Rating", "Rating" ]
  }, {
    "name" : "public Bitmap getBitmap(@BitmapKey String key)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns a {@link Bitmap} for the given key or null if no bitmap exists\n     * for the given key.\n     *\n     * @param key The key the value is stored under\n     * @return A {@link Bitmap} or null\n     ",
    "links" : [ "Bitmap", "Bitmap" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of fields in this metadata.\n     *\n     * @return The number of fields in the metadata.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> keySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a Set containing the Strings used as keys in this metadata.\n     *\n     * @return a Set of String keys\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaDescription getDescription()",
    "returnType" : "MediaDescription",
    "comment" : "\n     * Returns a simple description of this metadata for display purposes.\n     *\n     * @return A simple description of this metadata.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getKeyFromMetadataEditorKey(int editorKey)",
    "returnType" : "String",
    "comment" : "\n     * Helper for getting the String key used by {@link MediaMetadata} from the\n     * integer key that {@link MediaMetadataEditor} uses.\n     *\n     * @param editorKey The key used by the editor\n     * @return The key used by this class or null if no mapping exists\n     * @hide\n     ",
    "links" : [ "MediaMetadata", "MediaMetadataEditor" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the contents of this object to another MediaMetadata object. It\n     * does not compare Bitmaps and Ratings as the media player can choose to\n     * forgo these fields depending on how you retrieve the MediaMetadata.\n     *\n     * @param o The Metadata object to compare this object against\n     * @return Whether or not the two objects have matching fields (excluding\n     * Bitmaps and Ratings)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "METADATA_KEY_TITLE", "METADATA_KEY_ARTIST", "METADATA_KEY_DURATION", "METADATA_KEY_ALBUM", "METADATA_KEY_AUTHOR", "METADATA_KEY_WRITER", "METADATA_KEY_COMPOSER", "METADATA_KEY_COMPILATION", "METADATA_KEY_DATE", "METADATA_KEY_YEAR", "METADATA_KEY_GENRE", "METADATA_KEY_TRACK_NUMBER", "METADATA_KEY_NUM_TRACKS", "METADATA_KEY_DISC_NUMBER", "METADATA_KEY_ALBUM_ARTIST", "METADATA_KEY_ART", "METADATA_KEY_ART_URI", "METADATA_KEY_ALBUM_ART", "METADATA_KEY_ALBUM_ART_URI", "METADATA_KEY_USER_RATING", "METADATA_KEY_RATING", "METADATA_KEY_DISPLAY_TITLE", "METADATA_KEY_DISPLAY_SUBTITLE", "METADATA_KEY_DISPLAY_DESCRIPTION", "METADATA_KEY_DISPLAY_ICON", "METADATA_KEY_DISPLAY_ICON_URI", "METADATA_KEY_MEDIA_ID", "METADATA_KEY_MEDIA_URI", "METADATA_KEY_BT_FOLDER_TYPE", "PREFERRED_DESCRIPTION_ORDER", "PREFERRED_BITMAP_ORDER", "PREFERRED_URI_ORDER", "METADATA_TYPE_INVALID", "METADATA_TYPE_LONG", "METADATA_TYPE_TEXT", "METADATA_TYPE_BITMAP", "METADATA_TYPE_RATING", "METADATA_KEYS_TYPE", "EDITOR_KEY_MAPPING", "mBundle", "mDescription", "CREATOR" ],
  "methodNames" : [ "public boolean containsKey(String key)", "public CharSequence getText(@TextKey String key)", "public String getString(@TextKey String key)", "public long getLong(@LongKey String key)", "public Rating getRating(@RatingKey String key)", "public Bitmap getBitmap(@BitmapKey String key)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int size()", "public Set<String> keySet()", "public MediaDescription getDescription()", "public static String getKeyFromMetadataEditorKey(int editorKey)", "public boolean equals(Object o)", "public int hashCode()" ]
}