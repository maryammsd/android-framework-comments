{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/ParcelableResource.java",
  "packageName" : "android.app.admin",
  "className" : "ParcelableResource",
  "comment" : "\n * Used to store the required information to load a resource that was updated using\n * {@link DevicePolicyResourcesManager#setDrawables} and\n * {@link DevicePolicyResourcesManager#setStrings}.\n *\n * @hide\n ",
  "links" : [ "android.app.admin.DevicePolicyResourcesManager#setDrawables", "android.app.admin.DevicePolicyResourcesManager#setStrings" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_RESOURCE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_RESOURCE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_RESOURCE_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESOURCE_TYPE_DRAWABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESOURCE_TYPE_STRING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourceType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ParcelableResource>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void verifyResourceExistsInCallingPackage(Context context, @AnyRes int resourceId, @ResourceType int resourceType) throws IllegalStateException, IllegalArgumentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasDrawableInCallingPackage(Context context, @AnyRes int resourceId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasStringInCallingPackage(Context context, @AnyRes int resourceId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getResourceId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getResourceName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getResourceType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(Context context, int density, @NonNull Supplier<Drawable> defaultDrawableLoader)",
    "returnType" : "Drawable",
    "comment" : "\n     * Loads the drawable with id {@code mResourceId} from {@code mPackageName} using the provided\n     * {@code density} and {@link Resources.Theme} and {@link Resources#getConfiguration} of the\n     * provided {@code context}.\n     *\n     * <p>Returns the default drawable by calling the {@code defaultDrawableLoader} if the updated\n     * drawable was not found or could not be loaded.</p>\n     ",
    "links" : [ "android.content.res.Resources#getConfiguration", "Resources.Theme" ]
  }, {
    "name" : "public String getString(Context context, @NonNull Supplier<String> defaultStringLoader)",
    "returnType" : "String",
    "comment" : "\n     * Loads the string with id {@code mResourceId} from {@code mPackageName} using the\n     * configuration returned from {@link Resources#getConfiguration} of the provided\n     * {@code context}.\n     *\n     * <p>Returns the default string by calling  {@code defaultStringLoader} if the updated\n     * string was not found or could not be loaded.</p>\n     ",
    "links" : [ "android.content.res.Resources#getConfiguration" ]
  }, {
    "name" : "public String getString(Context context, @NonNull Supplier<String> defaultStringLoader, @NonNull Object... formatArgs)",
    "returnType" : "String",
    "comment" : "\n     * Loads the string with id {@code mResourceId} from {@code mPackageName} using the\n     * configuration returned from {@link Resources#getConfiguration} of the provided\n     * {@code context}.\n     *\n     * <p>Returns the default string by calling  {@code defaultStringLoader} if the updated\n     * string was not found or could not be loaded.</p>\n     ",
    "links" : [ "android.content.res.Resources#getConfiguration" ]
  }, {
    "name" : "private Resources getAppResourcesWithCallersConfiguration(Context context) throws PackageManager.NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyResourceName(Resources resources) throws IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Drawable loadDefaultDrawable(@NonNull Supplier<Drawable> defaultDrawableLoader)",
    "returnType" : "Drawable",
    "comment" : "\n     * returns the {@link Drawable} loaded from calling {@code defaultDrawableLoader}.\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public static String loadDefaultString(@NonNull Supplier<String> defaultStringLoader)",
    "returnType" : "String",
    "comment" : "\n     * returns the {@link String} loaded from calling {@code defaultStringLoader}.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "public void writeToXmlFile(TypedXmlSerializer xmlSerializer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the content of the current {@code ParcelableDevicePolicyResource} to the xml file\n     * specified by {@code xmlSerializer}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParcelableResource createFromXml(TypedXmlPullParser xmlPullParser) throws XmlPullParserException, IOException",
    "returnType" : "ParcelableResource",
    "comment" : "\n     * Creates a new {@code ParcelableDevicePolicyResource} using the content of\n     * {@code xmlPullParser}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void verifyResourceExistsInCallingPackage(Context context, @AnyRes int resourceId, @ResourceType int resourceType) throws IllegalStateException, IllegalArgumentException", "private static boolean hasDrawableInCallingPackage(Context context, @AnyRes int resourceId)", "private static boolean hasStringInCallingPackage(Context context, @AnyRes int resourceId)", "public int getResourceId()", "public String getPackageName()", "public String getResourceName()", "public int getResourceType()", "public Drawable getDrawable(Context context, int density, @NonNull Supplier<Drawable> defaultDrawableLoader)", "public String getString(Context context, @NonNull Supplier<String> defaultStringLoader)", "public String getString(Context context, @NonNull Supplier<String> defaultStringLoader, @NonNull Object... formatArgs)", "private Resources getAppResourcesWithCallersConfiguration(Context context) throws PackageManager.NameNotFoundException", "private void verifyResourceName(Resources resources) throws IllegalStateException", "public static Drawable loadDefaultDrawable(@NonNull Supplier<Drawable> defaultDrawableLoader)", "public static String loadDefaultString(@NonNull Supplier<String> defaultStringLoader)", "public void writeToXmlFile(TypedXmlSerializer xmlSerializer) throws IOException", "public static ParcelableResource createFromXml(TypedXmlPullParser xmlPullParser) throws XmlPullParserException, IOException", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "ATTR_RESOURCE_ID", "ATTR_PACKAGE_NAME", "ATTR_RESOURCE_NAME", "ATTR_RESOURCE_TYPE", "RESOURCE_TYPE_DRAWABLE", "RESOURCE_TYPE_STRING", "mResourceId", "mPackageName", "mResourceName", "mResourceType", "CREATOR" ]
}