{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/time/ExternalTimeSuggestion.java",
  "packageName" : "android.app.time",
  "className" : "ExternalTimeSuggestion",
  "comment" : "\n * A time signal from an External source.\n *\n * <p>External time suggestions are for use in situations where the Android device is part of a\n * wider network of devices that are required to use a single time source, and where authority for\n * the time is external to the Android device. For example, for the Android Auto use case where the\n * Android device is part of a wider in-car network of devices that should display the same time.\n *\n * <p>Android allows for a single external source for time. If there are several external sources\n * then it is left to the caller to prioritize / filter accordingly to ensure consistency.\n *\n * <p>External is one of several time \"origins\" that the Android platform supports. Stock Android\n * allows for configuration of which origins can be used and the prioritization between them. Until\n * an external suggestion is made, the Android device may use its own RTC to initialize the system\n * clock during boot, and then accept suggestions from the configured origins.\n *\n * <p>The creator of an external suggestion is expected to be separate Android process, e.g. a\n * process integrating with the external time source via a HAL or local network. The creator must\n * capture the elapsed realtime clock value, e.g. via {@link SystemClock#elapsedRealtime()}, when\n * the Unix epoch time is first obtained (usually under a wakelock). This enables Android to adjust\n * for latency introduced between suggestion creation and eventual use. Adjustments for other\n * sources of latency, i.e. those before the external time suggestion is created, must be handled by\n * the creator.\n *\n * <p>{@code elapsedRealtimeMillis} and {@code suggestionMillis} represent the suggested time.\n * {@code suggestionMillis} is the number of milliseconds elapsed since 1/1/1970 00:00:00 UTC\n * according to the Unix time scale. {@code elapsedRealtimeMillis} is the value of the elapsed\n * realtime clock when {@code suggestionMillis} was established. Note that the elapsed realtime\n * clock is considered accurate but it is volatile, so time suggestions cannot be persisted across\n * device resets.\n *\n * <p>{@code debugInfo} contains debugging metadata associated with the suggestion. This is used to\n * record why the suggestion exists and how it was entered. This information exists only to aid in\n * debugging and therefore is used by {@link #toString()}, but it is not for use in detection logic\n * and is not considered in {@link #hashCode()} or {@link #equals(Object)}.\n *\n * @hide\n ",
  "links" : [ "#equals(Object)", "#hashCode()", "#elapsedRealtime()", "#toString()" ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Creator<ExternalTimeSuggestion>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeSuggestionHelper",
    "type" : "TimeSuggestionHelper",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UnixEpochTime getUnixEpochTime()",
    "returnType" : "UnixEpochTime",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getDebugInfo()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns information that can be useful for debugging / logging. See {@link #addDebugInfo}.\n     ",
    "links" : [ "#addDebugInfo" ]
  }, {
    "name" : "public void addDebugInfo(@NonNull String... debugInfos)",
    "returnType" : "void",
    "comment" : "\n     * Associates information with the instance that can be useful for debugging / logging. The\n     * information is present in {@link #toString()} but is not considered for {@link\n     * #equals(Object)} and {@link #hashCode()}.\n     ",
    "links" : [ "#equals(Object)", "#hashCode()", "#toString()" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ExternalTimeSuggestion parseCommandLineArg(@NonNull ShellCommand cmd) throws IllegalArgumentException",
    "returnType" : "ExternalTimeSuggestion",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void printCommandLineOpts(PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public UnixEpochTime getUnixEpochTime()", "public List<String> getDebugInfo()", "public void addDebugInfo(@NonNull String... debugInfos)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public static ExternalTimeSuggestion parseCommandLineArg(@NonNull ShellCommand cmd) throws IllegalArgumentException", "public static void printCommandLineOpts(PrintWriter pw)" ],
  "variableNames" : [ "CREATOR", "mTimeSuggestionHelper" ]
}