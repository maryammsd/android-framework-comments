{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Stack.java",
  "packageName" : "java.util",
  "className" : "Stack",
  "comment" : "\n * The {@code Stack} class represents a last-in-first-out\n * (LIFO) stack of objects. It extends class {@code Vector} with five\n * operations that allow a vector to be treated as a stack. The usual\n * {@code push} and {@code pop} operations are provided, as well as a\n * method to {@code peek} at the top item on the stack, a method to test\n * for whether the stack is {@code empty}, and a method to {@code search}\n * the stack for an item and discover how far it is from the top.\n * <p>\n * When a stack is first created, it contains no items.\n *\n * <p>A more complete and consistent set of LIFO stack operations is\n * provided by the {@link Deque} interface and its implementations, which\n * should be used in preference to this class.  For example:\n * <pre>   {@code\n *   Deque<Integer> stack = new ArrayDeque<Integer>();}</pre>\n *\n * @author  Jonathan Payne\n * @since   1.0\n ",
  "links" : [ "java.util.Deque" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public E push(E item)",
    "returnType" : "E",
    "comment" : "\n     * Pushes an item onto the top of this stack. This has exactly\n     * the same effect as:\n     * <blockquote><pre>\n     * addElement(item)</pre></blockquote>\n     *\n     * @param   item   the item to be pushed onto this stack.\n     * @return  the {@code item} argument.\n     * @see     java.util.Vector#addElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized E pop()",
    "returnType" : "E",
    "comment" : "\n     * Removes the object at the top of this stack and returns that\n     * object as the value of this function.\n     *\n     * @return  The object at the top of this stack (the last item\n     *          of the {@code Vector} object).\n     * @throws  EmptyStackException  if this stack is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized E peek()",
    "returnType" : "E",
    "comment" : "\n     * Looks at the object at the top of this stack without removing it\n     * from the stack.\n     *\n     * @return  the object at the top of this stack (the last item\n     *          of the {@code Vector} object).\n     * @throws  EmptyStackException  if this stack is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean empty()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this stack is empty.\n     *\n     * @return  {@code true} if and only if this stack contains\n     *          no items; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int search(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the 1-based position where an object is on this stack.\n     * If the object {@code o} occurs as an item in this stack, this\n     * method returns the distance from the top of the stack of the\n     * occurrence nearest the top of the stack; the topmost item on the\n     * stack is considered to be at distance {@code 1}. The {@code equals}\n     * method is used to compare {@code o} to the\n     * items in this stack.\n     *\n     * @param   o   the desired object.\n     * @return  the 1-based position from the top of the stack where\n     *          the object is located; the return value {@code -1}\n     *          indicates that the object is not on the stack.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public E push(E item)", "public synchronized E pop()", "public synchronized E peek()", "public boolean empty()", "public synchronized int search(Object o)" ],
  "variableNames" : [ "serialVersionUID" ]
}