{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Matrix.java",
  "packageName" : "android.graphics",
  "className" : "Matrix",
  "comment" : "\n * The Matrix class holds a 3x3 matrix for transforming coordinates.\n ",
  "variables" : [ {
    "name" : "MSCALE_X",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MSKEW_X",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MTRANS_X",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MSKEW_Y",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MSCALE_Y",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MTRANS_Y",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MPERSP_0",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MPERSP_1",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "MPERSP_2",
    "type" : "int",
    "comment" : "!< use with getValues/setValues",
    "links" : [ ]
  }, {
    "name" : "IDENTITY_MATRIX",
    "type" : "Matrix",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "native_instance",
    "type" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isIdentity()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the matrix is identity. This maybe faster than testing if (getType() == 0)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAffine()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this matrix is affine. An affine matrix preserves straight lines and has no\n     * perspective.\n     *\n     * @return Whether the matrix is affine.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean rectStaysRect()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if will map a rectangle to another rectangle. This can be true if the matrix is\n     * identity, scale-only, or rotates a multiple of 90 degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(Matrix src)",
    "returnType" : "void",
    "comment" : "\n     * (deep) copy the src matrix into this matrix. If src is null, reset this matrix to the\n     * identity matrix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff obj is a Matrix and its values equal our values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : " Set the matrix to identity ",
    "links" : [ ]
  }, {
    "name" : "public void setTranslate(float dx, float dy)",
    "returnType" : "void",
    "comment" : " Set the matrix to translate by (dx, dy). ",
    "links" : [ ]
  }, {
    "name" : "public void setScale(float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to scale by sx and sy, with a pivot point at (px, py). The pivot point is the\n     * coordinate that should remain unchanged by the specified transformation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScale(float sx, float sy)",
    "returnType" : "void",
    "comment" : " Set the matrix to scale by sx and sy. ",
    "links" : [ ]
  }, {
    "name" : "public void setRotate(float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py).\n     * The pivot point is the coordinate that should remain unchanged by the specified\n     * transformation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRotate(float degrees)",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to rotate about (0,0) by the specified number of degrees.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSinCos(float sinValue, float cosValue, float px, float py)",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px,\n     * py). The pivot point is the coordinate that should remain unchanged by the specified\n     * transformation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSinCos(float sinValue, float cosValue)",
    "returnType" : "void",
    "comment" : " Set the matrix to rotate by the specified sine and cosine values. ",
    "links" : [ ]
  }, {
    "name" : "public void setSkew(float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to skew by sx and sy, with a pivot point at (px, py). The pivot point is the\n     * coordinate that should remain unchanged by the specified transformation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSkew(float kx, float ky)",
    "returnType" : "void",
    "comment" : " Set the matrix to skew by sx and sy. ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConcat(Matrix a, Matrix b)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the matrix to the concatenation of the two specified matrices and return true.\n     * <p>\n     * Either of the two matrices may also be the target matrix, that is\n     * <code>matrixA.setConcat(matrixA, matrixB);</code> is valid.\n     * </p>\n     * <p class=\"note\">\n     * In {@link android.os.Build.VERSION_CODES#GINGERBREAD_MR1} and below, this function returns\n     * true only if the result can be represented. In\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB} and above, it always returns true.\n     * </p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#GINGERBREAD_MR1", "android.os.Build.VERSION_CODES#HONEYCOMB" ]
  }, {
    "name" : "public boolean preTranslate(float dx, float dy)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified translation. M' = M * T(dx, dy)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preScale(float sx, float sy, float px, float py)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified scale. M' = M * S(sx, sy, px, py)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preScale(float sx, float sy)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified scale. M' = M * S(sx, sy)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preRotate(float degrees, float px, float py)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified rotation. M' = M * R(degrees, px, py)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preRotate(float degrees)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified rotation. M' = M * R(degrees)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preSkew(float kx, float ky, float px, float py)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified skew. M' = M * K(kx, ky, px, py)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preSkew(float kx, float ky)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified skew. M' = M * K(kx, ky)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean preConcat(Matrix other)",
    "returnType" : "boolean",
    "comment" : "\n     * Preconcats the matrix with the specified matrix. M' = M * other\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postTranslate(float dx, float dy)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified translation. M' = T(dx, dy) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postScale(float sx, float sy, float px, float py)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified scale. M' = S(sx, sy, px, py) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postScale(float sx, float sy)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified scale. M' = S(sx, sy) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postRotate(float degrees, float px, float py)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified rotation. M' = R(degrees, px, py) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postRotate(float degrees)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified rotation. M' = R(degrees) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postSkew(float kx, float ky, float px, float py)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified skew. M' = K(kx, ky, px, py) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postSkew(float kx, float ky)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified skew. M' = K(kx, ky) * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean postConcat(Matrix other)",
    "returnType" : "boolean",
    "comment" : "\n     * Postconcats the matrix with the specified matrix. M' = other * M\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setRectToRect(RectF src, RectF dst, ScaleToFit stf)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the matrix to the scale and translate values that map the source rectangle to the\n     * destination rectangle, returning true if the the result can be represented.\n     *\n     * @param src the source rectangle to map from.\n     * @param dst the destination rectangle to map to.\n     * @param stf the ScaleToFit option\n     * @return true if the matrix can be represented by the rectangle mapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkPointArrays(float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)",
    "returnType" : "void",
    "comment" : " private helper to perform range checks on arrays of \"points\"",
    "links" : [ ]
  }, {
    "name" : "public boolean setPolyToPoly(float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the matrix such that the specified src points would map to the specified dst points. The\n     * \"points\" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each\n     * \"point\" is 2 float values.\n     *\n     * @param src The array of src [x,y] pairs (points)\n     * @param srcIndex Index of the first pair of src values\n     * @param dst The array of dst [x,y] pairs (points)\n     * @param dstIndex Index of the first pair of dst values\n     * @param pointCount The number of pairs/points to be used. Must be [0..4]\n     * @return true if the matrix was set to the specified transformation\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean invert(Matrix inverse)",
    "returnType" : "boolean",
    "comment" : "\n     * If this matrix can be inverted, return true and if inverse is not null, set inverse to be the\n     * inverse of this matrix. If this matrix cannot be inverted, ignore inverse and return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mapPoints(float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount)",
    "returnType" : "void",
    "comment" : "\n     * Apply this matrix to the array of 2D points specified by src, and write the transformed\n     * points into the array of points specified by dst. The two arrays represent their \"points\" as\n     * pairs of floats [x, y].\n     *\n     * @param dst The array of dst points (x,y pairs)\n     * @param dstIndex The index of the first [x,y] pair of dst floats\n     * @param src The array of src points (x,y pairs)\n     * @param srcIndex The index of the first [x,y] pair of src floats\n     * @param pointCount The number of points (x,y pairs) to transform\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mapVectors(float[] dst, int dstIndex, float[] src, int srcIndex, int vectorCount)",
    "returnType" : "void",
    "comment" : "\n     * Apply this matrix to the array of 2D vectors specified by src, and write the transformed\n     * vectors into the array of vectors specified by dst. The two arrays represent their \"vectors\"\n     * as pairs of floats [x, y]. Note: this method does not apply the translation associated with\n     * the matrix. Use {@link Matrix#mapPoints(float[], int, float[], int, int)} if you want the\n     * translation to be applied.\n     *\n     * @param dst The array of dst vectors (x,y pairs)\n     * @param dstIndex The index of the first [x,y] pair of dst floats\n     * @param src The array of src vectors (x,y pairs)\n     * @param srcIndex The index of the first [x,y] pair of src floats\n     * @param vectorCount The number of vectors (x,y pairs) to transform\n     ",
    "links" : [ "android.graphics.Matrix#mapPoints(float" ]
  }, {
    "name" : "public void mapPoints(float[] dst, float[] src)",
    "returnType" : "void",
    "comment" : "\n     * Apply this matrix to the array of 2D points specified by src, and write the transformed\n     * points into the array of points specified by dst. The two arrays represent their \"points\" as\n     * pairs of floats [x, y].\n     *\n     * @param dst The array of dst points (x,y pairs)\n     * @param src The array of src points (x,y pairs)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mapVectors(float[] dst, float[] src)",
    "returnType" : "void",
    "comment" : "\n     * Apply this matrix to the array of 2D vectors specified by src, and write the transformed\n     * vectors into the array of vectors specified by dst. The two arrays represent their \"vectors\"\n     * as pairs of floats [x, y]. Note: this method does not apply the translation associated with\n     * the matrix. Use {@link Matrix#mapPoints(float[], float[])} if you want the translation to be\n     * applied.\n     *\n     * @param dst The array of dst vectors (x,y pairs)\n     * @param src The array of src vectors (x,y pairs)\n     ",
    "links" : [ "android.graphics.Matrix#mapPoints(float" ]
  }, {
    "name" : "public void mapPoints(float[] pts)",
    "returnType" : "void",
    "comment" : "\n     * Apply this matrix to the array of 2D points, and write the transformed points back into the\n     * array\n     *\n     * @param pts The array [x0, y0, x1, y1, ...] of points to transform.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mapVectors(float[] vecs)",
    "returnType" : "void",
    "comment" : "\n     * Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the\n     * array. Note: this method does not apply the translation associated with the matrix. Use\n     * {@link Matrix#mapPoints(float[])} if you want the translation to be applied.\n     *\n     * @param vecs The array [x0, y0, x1, y1, ...] of vectors to transform.\n     ",
    "links" : [ "android.graphics.Matrix#mapPoints(float" ]
  }, {
    "name" : "public boolean mapRect(RectF dst, RectF src)",
    "returnType" : "boolean",
    "comment" : "\n     * Apply this matrix to the src rectangle, and write the transformed rectangle into dst. This is\n     * accomplished by transforming the 4 corners of src, and then setting dst to the bounds of\n     * those points.\n     *\n     * @param dst Where the transformed rectangle is written.\n     * @param src The original rectangle to be transformed.\n     * @return the result of calling rectStaysRect()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean mapRect(RectF rect)",
    "returnType" : "boolean",
    "comment" : "\n     * Apply this matrix to the rectangle, and write the transformed rectangle back into it. This is\n     * accomplished by transforming the 4 corners of rect, and then setting it to the bounds of\n     * those points\n     *\n     * @param rect The rectangle to transform.\n     * @return the result of calling rectStaysRect()\n     ",
    "links" : [ ]
  }, {
    "name" : "public float mapRadius(float radius)",
    "returnType" : "float",
    "comment" : "\n     * Return the mean radius of a circle after it has been mapped by this matrix. NOTE: in\n     * perspective this value assumes the circle has its center at the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getValues(float[] values)",
    "returnType" : "void",
    "comment" : "\n     * Copy 9 values from the matrix into the array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setValues(float[] values)",
    "returnType" : "void",
    "comment" : "\n     * Copy 9 values from the array into the matrix. Depending on the implementation of Matrix,\n     * these may be transformed into 16.16 integers in the Matrix, such that a subsequent call to\n     * getValues() will not yield exactly the same values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toShortString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toShortString(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printShortString(PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Print short string, to optimize dumping.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long ni()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreate(long nSrc_or_zero)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nSetRectToRect(long nObject, RectF src, RectF dst, int stf)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nSetPolyToPoly(long nObject, float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nMapPoints(long nObject, float[] dst, int dstIndex, float[] src, int srcIndex, int ptCount, boolean isPts)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nMapRect(long nObject, RectF dst, RectF src)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetValues(long nObject, float[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetValues(long nObject, float[] values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsIdentity(long nObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsAffine(long nObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nRectStaysRect(long nObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nReset(long nObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSet(long nObject, long nOther)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetTranslate(long nObject, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetScale(long nObject, float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetScale(long nObject, float sx, float sy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetRotate(long nObject, float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetRotate(long nObject, float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetSinCos(long nObject, float sinValue, float cosValue, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetSinCos(long nObject, float sinValue, float cosValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetSkew(long nObject, float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetSkew(long nObject, float kx, float ky)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetConcat(long nObject, long nA, long nB)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreTranslate(long nObject, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreScale(long nObject, float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreScale(long nObject, float sx, float sy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreRotate(long nObject, float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreRotate(long nObject, float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreSkew(long nObject, float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreSkew(long nObject, float kx, float ky)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPreConcat(long nObject, long nOther_matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostTranslate(long nObject, float dx, float dy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostScale(long nObject, float sx, float sy, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostScale(long nObject, float sx, float sy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostRotate(long nObject, float degrees, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostRotate(long nObject, float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostSkew(long nObject, float kx, float ky, float px, float py)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostSkew(long nObject, float kx, float ky)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nPostConcat(long nObject, long nOther_matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nInvert(long nObject, long nInverse)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nMapRadius(long nObject, float radius)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nEquals(long nA, long nB)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MSCALE_X", "MSKEW_X", "MTRANS_X", "MSKEW_Y", "MSCALE_Y", "MTRANS_Y", "MPERSP_0", "MPERSP_1", "MPERSP_2", "IDENTITY_MATRIX", "native_instance" ],
  "methodNames" : [ "public boolean isIdentity()", "public boolean isAffine()", "public boolean rectStaysRect()", "public void set(Matrix src)", "public boolean equals(Object obj)", "public int hashCode()", "public void reset()", "public void setTranslate(float dx, float dy)", "public void setScale(float sx, float sy, float px, float py)", "public void setScale(float sx, float sy)", "public void setRotate(float degrees, float px, float py)", "public void setRotate(float degrees)", "public void setSinCos(float sinValue, float cosValue, float px, float py)", "public void setSinCos(float sinValue, float cosValue)", "public void setSkew(float kx, float ky, float px, float py)", "public void setSkew(float kx, float ky)", "public boolean setConcat(Matrix a, Matrix b)", "public boolean preTranslate(float dx, float dy)", "public boolean preScale(float sx, float sy, float px, float py)", "public boolean preScale(float sx, float sy)", "public boolean preRotate(float degrees, float px, float py)", "public boolean preRotate(float degrees)", "public boolean preSkew(float kx, float ky, float px, float py)", "public boolean preSkew(float kx, float ky)", "public boolean preConcat(Matrix other)", "public boolean postTranslate(float dx, float dy)", "public boolean postScale(float sx, float sy, float px, float py)", "public boolean postScale(float sx, float sy)", "public boolean postRotate(float degrees, float px, float py)", "public boolean postRotate(float degrees)", "public boolean postSkew(float kx, float ky, float px, float py)", "public boolean postSkew(float kx, float ky)", "public boolean postConcat(Matrix other)", "public boolean setRectToRect(RectF src, RectF dst, ScaleToFit stf)", "private static void checkPointArrays(float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)", "public boolean setPolyToPoly(float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)", "public boolean invert(Matrix inverse)", "public void mapPoints(float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount)", "public void mapVectors(float[] dst, int dstIndex, float[] src, int srcIndex, int vectorCount)", "public void mapPoints(float[] dst, float[] src)", "public void mapVectors(float[] dst, float[] src)", "public void mapPoints(float[] pts)", "public void mapVectors(float[] vecs)", "public boolean mapRect(RectF dst, RectF src)", "public boolean mapRect(RectF rect)", "public float mapRadius(float radius)", "public void getValues(float[] values)", "public void setValues(float[] values)", "public String toString()", "public String toShortString()", "public void toShortString(StringBuilder sb)", "public void printShortString(PrintWriter pw)", "public final long ni()", "private static native long nCreate(long nSrc_or_zero)", "private static native long nGetNativeFinalizer()", "private static native boolean nSetRectToRect(long nObject, RectF src, RectF dst, int stf)", "private static native boolean nSetPolyToPoly(long nObject, float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)", "private static native void nMapPoints(long nObject, float[] dst, int dstIndex, float[] src, int srcIndex, int ptCount, boolean isPts)", "private static native boolean nMapRect(long nObject, RectF dst, RectF src)", "private static native void nGetValues(long nObject, float[] values)", "private static native void nSetValues(long nObject, float[] values)", "private static native boolean nIsIdentity(long nObject)", "private static native boolean nIsAffine(long nObject)", "private static native boolean nRectStaysRect(long nObject)", "private static native void nReset(long nObject)", "private static native void nSet(long nObject, long nOther)", "private static native void nSetTranslate(long nObject, float dx, float dy)", "private static native void nSetScale(long nObject, float sx, float sy, float px, float py)", "private static native void nSetScale(long nObject, float sx, float sy)", "private static native void nSetRotate(long nObject, float degrees, float px, float py)", "private static native void nSetRotate(long nObject, float degrees)", "private static native void nSetSinCos(long nObject, float sinValue, float cosValue, float px, float py)", "private static native void nSetSinCos(long nObject, float sinValue, float cosValue)", "private static native void nSetSkew(long nObject, float kx, float ky, float px, float py)", "private static native void nSetSkew(long nObject, float kx, float ky)", "private static native void nSetConcat(long nObject, long nA, long nB)", "private static native void nPreTranslate(long nObject, float dx, float dy)", "private static native void nPreScale(long nObject, float sx, float sy, float px, float py)", "private static native void nPreScale(long nObject, float sx, float sy)", "private static native void nPreRotate(long nObject, float degrees, float px, float py)", "private static native void nPreRotate(long nObject, float degrees)", "private static native void nPreSkew(long nObject, float kx, float ky, float px, float py)", "private static native void nPreSkew(long nObject, float kx, float ky)", "private static native void nPreConcat(long nObject, long nOther_matrix)", "private static native void nPostTranslate(long nObject, float dx, float dy)", "private static native void nPostScale(long nObject, float sx, float sy, float px, float py)", "private static native void nPostScale(long nObject, float sx, float sy)", "private static native void nPostRotate(long nObject, float degrees, float px, float py)", "private static native void nPostRotate(long nObject, float degrees)", "private static native void nPostSkew(long nObject, float kx, float ky, float px, float py)", "private static native void nPostSkew(long nObject, float kx, float ky)", "private static native void nPostConcat(long nObject, long nOther_matrix)", "private static native boolean nInvert(long nObject, long nInverse)", "private static native float nMapRadius(long nObject, float radius)", "private static native boolean nEquals(long nA, long nB)" ]
}