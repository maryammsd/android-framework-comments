{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/usage/NetworkStatsManager.java",
  "packageName" : "android.app.usage",
  "className" : "NetworkStatsManager",
  "comment" : "\n * Provides access to network usage history and statistics. Usage data is collected in\n * discrete bins of time called 'Buckets'. See {@link NetworkStats.Bucket} for details.\n * <p />\n * Queries can define a time interval in the form of start and end timestamps (Long.MIN_VALUE and\n * Long.MAX_VALUE can be used to simulate open ended intervals). By default, apps can only obtain\n * data about themselves. See the below note for special cases in which apps can obtain data about\n * other applications.\n * <h3>\n * Summary queries\n * </h3>\n * {@link #querySummaryForDevice} <p />\n * {@link #querySummaryForUser} <p />\n * {@link #querySummary} <p />\n * These queries aggregate network usage across the whole interval. Therefore there will be only one\n * bucket for a particular key, state, metered and roaming combination. In case of the user-wide\n * and device-wide summaries a single bucket containing the totalised network usage is returned.\n * <h3>\n * History queries\n * </h3>\n * {@link #queryDetailsForUid} <p />\n * {@link #queryDetails} <p />\n * These queries do not aggregate over time but do aggregate over state, metered and roaming.\n * Therefore there can be multiple buckets for a particular key. However, all Buckets will have\n * {@code state} {@link NetworkStats.Bucket#STATE_ALL},\n * {@code defaultNetwork} {@link NetworkStats.Bucket#DEFAULT_NETWORK_ALL},\n * {@code metered } {@link NetworkStats.Bucket#METERED_ALL},\n * {@code roaming} {@link NetworkStats.Bucket#ROAMING_ALL}.\n * <p />\n * <b>NOTE:</b> Calling {@link #querySummaryForDevice} or accessing stats for apps other than the\n * calling app requires the permission {@link android.Manifest.permission#PACKAGE_USAGE_STATS},\n * which is a system-level permission and will not be granted to third-party apps. However,\n * declaring the permission implies intention to use the API and the user of the device can grant\n * permission through the Settings application.\n * <p />\n * Profile owner apps are automatically granted permission to query data on the profile they manage\n * (that is, for any query except {@link #querySummaryForDevice}). Device owner apps and carrier-\n * privileged apps likewise get access to usage data for all users on the device.\n * <p />\n * In addition to tethering usage, usage by removed users and apps, and usage by the system\n * is also included in the results for callers with one of these higher levels of access.\n * <p />\n * <b>NOTE:</b> Prior to API level {@value android.os.Build.VERSION_CODES#N}, all calls to these APIs required\n * the above permission, even to access an app's own data usage, and carrier-privileged apps were\n * not included.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_LIMIT_REACHED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_RELEASED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MIN_THRESHOLD_BYTES",
    "type" : "long",
    "comment" : "\n     * Minimum data usage threshold for registering usage callbacks.\n     *\n     * Requests registered with a threshold lower than this will only be triggered once this minimum\n     * is reached.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "INetworkStatsService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_POLL_ON_OPEN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_POLL_FORCE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_AUGMENT_WITH_SUBSCRIPTION_PLAN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPollOnOpen(boolean pollOnOpen)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setPollForce(boolean pollForce)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAugmentWithSubscriptionPlan(boolean augmentWithSubscriptionPlan)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Bucket querySummaryForDevice(NetworkTemplate template, long startTime, long endTime) throws SecurityException, RemoteException",
    "returnType" : "Bucket",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Bucket querySummaryForDevice(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException",
    "returnType" : "Bucket",
    "comment" : "\n     * Query network usage statistics summaries. Result is summarised data usage for the whole\n     * device. Result is a single Bucket aggregated over time, state, uid, tag, metered, and\n     * roaming. This means the bucket's start and end timestamp are going to be the same as the\n     * 'startTime' and 'endTime' parameters. State is going to be\n     * {@link NetworkStats.Bucket#STATE_ALL}, uid {@link NetworkStats.Bucket#UID_ALL},\n     * tag {@link NetworkStats.Bucket#TAG_NONE},\n     * default network {@link NetworkStats.Bucket#DEFAULT_NETWORK_ALL},\n     * metered {@link NetworkStats.Bucket#METERED_ALL},\n     * and roaming {@link NetworkStats.Bucket#ROAMING_ALL}.\n     *\n     * @param networkType As defined in {@link ConnectivityManager}, e.g.\n     *            {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}\n     *            etc.\n     * @param subscriberId If applicable, the subscriber id of the network interface.\n     *                     <p>Starting with API level 29, the {@code subscriberId} is guarded by\n     *                     additional restrictions. Calling apps that do not meet the new\n     *                     requirements to access the {@code subscriberId} can provide a {@code\n     *                     null} value when querying for the mobile network type to receive usage\n     *                     for all mobile networks. For additional details see {@link\n     *                     TelephonyManager#getSubscriberId()}.\n     * @param startTime Start of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @param endTime End of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @return Bucket object or null if permissions are insufficient or error happened during\n     *         statistics collection.\n     ",
    "links" : [ "NetworkStats.Bucket#STATE_ALL", "NetworkStats.Bucket#UID_ALL", "NetworkStats.Bucket#TAG_NONE", "NetworkStats.Bucket#DEFAULT_NETWORK_ALL", "NetworkStats.Bucket#METERED_ALL", "NetworkStats.Bucket#ROAMING_ALL", "ConnectivityManager", "ConnectivityManager#TYPE_MOBILE", "ConnectivityManager#TYPE_WIFI", "java.lang.System#currentTimeMillis", "java.lang.System#currentTimeMillis" ]
  }, {
    "name" : "public Bucket querySummaryForUser(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException",
    "returnType" : "Bucket",
    "comment" : "\n     * Query network usage statistics summaries. Result is summarised data usage for all uids\n     * belonging to calling user. Result is a single Bucket aggregated over time, state and uid.\n     * This means the bucket's start and end timestamp are going to be the same as the 'startTime'\n     * and 'endTime' parameters. State is going to be {@link NetworkStats.Bucket#STATE_ALL},\n     * uid {@link NetworkStats.Bucket#UID_ALL}, tag {@link NetworkStats.Bucket#TAG_NONE},\n     * metered {@link NetworkStats.Bucket#METERED_ALL}, and roaming\n     * {@link NetworkStats.Bucket#ROAMING_ALL}.\n     *\n     * @param networkType As defined in {@link ConnectivityManager}, e.g.\n     *            {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}\n     *            etc.\n     * @param subscriberId If applicable, the subscriber id of the network interface.\n     *                     <p>Starting with API level 29, the {@code subscriberId} is guarded by\n     *                     additional restrictions. Calling apps that do not meet the new\n     *                     requirements to access the {@code subscriberId} can provide a {@code\n     *                     null} value when querying for the mobile network type to receive usage\n     *                     for all mobile networks. For additional details see {@link\n     *                     TelephonyManager#getSubscriberId()}.\n     * @param startTime Start of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @param endTime End of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @return Bucket object or null if permissions are insufficient or error happened during\n     *         statistics collection.\n     ",
    "links" : [ "NetworkStats.Bucket#STATE_ALL", "NetworkStats.Bucket#UID_ALL", "NetworkStats.Bucket#TAG_NONE", "NetworkStats.Bucket#METERED_ALL", "NetworkStats.Bucket#ROAMING_ALL", "ConnectivityManager", "ConnectivityManager#TYPE_MOBILE", "ConnectivityManager#TYPE_WIFI", "java.lang.System#currentTimeMillis", "java.lang.System#currentTimeMillis" ]
  }, {
    "name" : "public NetworkStats querySummary(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Query network usage statistics summaries. Result filtered to include only uids belonging to\n     * calling user. Result is aggregated over time, hence all buckets will have the same start and\n     * end timestamps. Not aggregated over state, uid, default network, metered, or roaming. This\n     * means buckets' start and end timestamps are going to be the same as the 'startTime' and\n     * 'endTime' parameters. State, uid, metered, and roaming are going to vary, and tag is going to\n     * be the same.\n     *\n     * @param networkType As defined in {@link ConnectivityManager}, e.g.\n     *            {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}\n     *            etc.\n     * @param subscriberId If applicable, the subscriber id of the network interface.\n     *                     <p>Starting with API level 29, the {@code subscriberId} is guarded by\n     *                     additional restrictions. Calling apps that do not meet the new\n     *                     requirements to access the {@code subscriberId} can provide a {@code\n     *                     null} value when querying for the mobile network type to receive usage\n     *                     for all mobile networks. For additional details see {@link\n     *                     TelephonyManager#getSubscriberId()}.\n     * @param startTime Start of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @param endTime End of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @return Statistics object or null if permissions are insufficient or error happened during\n     *         statistics collection.\n     ",
    "links" : [ "ConnectivityManager", "ConnectivityManager#TYPE_MOBILE", "ConnectivityManager#TYPE_WIFI", "java.lang.System#currentTimeMillis", "java.lang.System#currentTimeMillis" ]
  }, {
    "name" : "public NetworkStats querySummary(NetworkTemplate template, long startTime, long endTime) throws SecurityException, RemoteException",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats queryDetailsForUid(int networkType, String subscriberId, long startTime, long endTime, int uid) throws SecurityException",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Query network usage statistics details for a given uid.\n     *\n     * @see #queryDetailsForUidTagState(int, String, long, long, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats queryDetailsForUid(NetworkTemplate template, long startTime, long endTime, int uid) throws SecurityException",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats queryDetailsForUidTag(int networkType, String subscriberId, long startTime, long endTime, int uid, int tag) throws SecurityException",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Query network usage statistics details for a given uid and tag.\n     *\n     * @see #queryDetailsForUidTagState(int, String, long, long, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats queryDetailsForUidTagState(int networkType, String subscriberId, long startTime, long endTime, int uid, int tag, int state) throws SecurityException",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Query network usage statistics details for a given uid, tag, and state. Only usable for uids\n     * belonging to calling user. Result is not aggregated over time. This means buckets' start and\n     * end timestamps are going to be between 'startTime' and 'endTime' parameters. The uid is going\n     * to be the same as the 'uid' parameter, the tag the same as the 'tag' parameter, and the state\n     * the same as the 'state' parameter.\n     * defaultNetwork is going to be {@link NetworkStats.Bucket#DEFAULT_NETWORK_ALL},\n     * metered is going to be {@link NetworkStats.Bucket#METERED_ALL}, and\n     * roaming is going to be {@link NetworkStats.Bucket#ROAMING_ALL}.\n     * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't\n     * interpolate across partial buckets. Since bucket length is in the order of hours, this\n     * method cannot be used to measure data usage on a fine grained time scale.\n     *\n     * @param networkType As defined in {@link ConnectivityManager}, e.g.\n     *            {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}\n     *            etc.\n     * @param subscriberId If applicable, the subscriber id of the network interface.\n     *                     <p>Starting with API level 29, the {@code subscriberId} is guarded by\n     *                     additional restrictions. Calling apps that do not meet the new\n     *                     requirements to access the {@code subscriberId} can provide a {@code\n     *                     null} value when querying for the mobile network type to receive usage\n     *                     for all mobile networks. For additional details see {@link\n     *                     TelephonyManager#getSubscriberId()}.\n     * @param startTime Start of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @param endTime End of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @param uid UID of app\n     * @param tag TAG of interest. Use {@link NetworkStats.Bucket#TAG_NONE} for no tags.\n     * @param state state of interest. Use {@link NetworkStats.Bucket#STATE_ALL} to aggregate\n     *            traffic from all states.\n     * @return Statistics object or null if an error happened during statistics collection.\n     * @throws SecurityException if permissions are insufficient to read network statistics.\n     ",
    "links" : [ "NetworkStats.Bucket#DEFAULT_NETWORK_ALL", "NetworkStats.Bucket#METERED_ALL", "NetworkStats.Bucket#ROAMING_ALL", "ConnectivityManager", "ConnectivityManager#TYPE_MOBILE", "ConnectivityManager#TYPE_WIFI", "java.lang.System#currentTimeMillis", "java.lang.System#currentTimeMillis", "NetworkStats.Bucket#TAG_NONE", "NetworkStats.Bucket#STATE_ALL" ]
  }, {
    "name" : "public NetworkStats queryDetailsForUidTagState(NetworkTemplate template, long startTime, long endTime, int uid, int tag, int state) throws SecurityException",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats queryDetails(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Query network usage statistics details. Result filtered to include only uids belonging to\n     * calling user. Result is aggregated over state but not aggregated over time, uid, tag,\n     * metered, nor roaming. This means buckets' start and end timestamps are going to be between\n     * 'startTime' and 'endTime' parameters. State is going to be\n     * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,\n     * tag {@link NetworkStats.Bucket#TAG_NONE},\n     * default network is going to be {@link NetworkStats.Bucket#DEFAULT_NETWORK_ALL},\n     * metered is going to be {@link NetworkStats.Bucket#METERED_ALL},\n     * and roaming is going to be {@link NetworkStats.Bucket#ROAMING_ALL}.\n     * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't\n     * interpolate across partial buckets. Since bucket length is in the order of hours, this\n     * method cannot be used to measure data usage on a fine grained time scale.\n     *\n     * @param networkType As defined in {@link ConnectivityManager}, e.g.\n     *            {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}\n     *            etc.\n     * @param subscriberId If applicable, the subscriber id of the network interface.\n     *                     <p>Starting with API level 29, the {@code subscriberId} is guarded by\n     *                     additional restrictions. Calling apps that do not meet the new\n     *                     requirements to access the {@code subscriberId} can provide a {@code\n     *                     null} value when querying for the mobile network type to receive usage\n     *                     for all mobile networks. For additional details see {@link\n     *                     TelephonyManager#getSubscriberId()}.\n     * @param startTime Start of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @param endTime End of period. Defined in terms of \"Unix time\", see\n     *            {@link java.lang.System#currentTimeMillis}.\n     * @return Statistics object or null if permissions are insufficient or error happened during\n     *         statistics collection.\n     ",
    "links" : [ "NetworkStats.Bucket#STATE_ALL", "NetworkStats.Bucket#TAG_NONE", "NetworkStats.Bucket#DEFAULT_NETWORK_ALL", "NetworkStats.Bucket#METERED_ALL", "NetworkStats.Bucket#ROAMING_ALL", "ConnectivityManager", "ConnectivityManager#TYPE_MOBILE", "ConnectivityManager#TYPE_WIFI", "java.lang.System#currentTimeMillis", "java.lang.System#currentTimeMillis" ]
  }, {
    "name" : "public void registerUsageCallback(NetworkTemplate template, int networkType, long thresholdBytes, UsageCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerUsageCallback(int networkType, String subscriberId, long thresholdBytes, UsageCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers to receive notifications about data usage on specified networks.\n     *\n     * @see #registerUsageCallback(int, String, long, UsageCallback, Handler)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerUsageCallback(int networkType, String subscriberId, long thresholdBytes, UsageCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers to receive notifications about data usage on specified networks.\n     *\n     * <p>The callbacks will continue to be called as long as the process is live or\n     * {@link #unregisterUsageCallback} is called.\n     *\n     * @param networkType Type of network to monitor. Either\n                  {@link ConnectivityManager#TYPE_MOBILE} or {@link ConnectivityManager#TYPE_WIFI}.\n     * @param subscriberId If applicable, the subscriber id of the network interface.\n     *                     <p>Starting with API level 29, the {@code subscriberId} is guarded by\n     *                     additional restrictions. Calling apps that do not meet the new\n     *                     requirements to access the {@code subscriberId} can provide a {@code\n     *                     null} value when registering for the mobile network type to receive\n     *                     notifications for all mobile networks. For additional details see {@link\n     *                     TelephonyManager#getSubscriberId()}.\n     * @param thresholdBytes Threshold in bytes to be notified on.\n     * @param callback The {@link UsageCallback} that the system will call when data usage\n     *            has exceeded the specified threshold.\n     * @param handler to dispatch callback events through, otherwise if {@code null} it uses\n     *            the calling thread.\n     ",
    "links" : [ "#unregisterUsageCallback", "ConnectivityManager#TYPE_MOBILE", "ConnectivityManager#TYPE_WIFI", "UsageCallback" ]
  }, {
    "name" : "public void unregisterUsageCallback(UsageCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters callbacks on data usage.\n     *\n     * @param callback The {@link UsageCallback} used when registering.\n     ",
    "links" : [ "UsageCallback" ]
  }, {
    "name" : "public void registerNetworkStatsProvider(@NonNull String tag, @NonNull NetworkStatsProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Registers a custom provider of {@link android.net.NetworkStats} to provide network statistics\n     * to the system. To unregister, invoke {@link #unregisterNetworkStatsProvider}.\n     * Note that no de-duplication of statistics between providers is performed, so each provider\n     * must only report network traffic that is not being reported by any other provider. Also note\n     * that the provider cannot be re-registered after unregistering.\n     *\n     * @param tag a human readable identifier of the custom network stats provider. This is only\n     *            used for debugging.\n     * @param provider the subclass of {@link NetworkStatsProvider} that needs to be\n     *                 registered to the system.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats", "#unregisterNetworkStatsProvider", "NetworkStatsProvider" ]
  }, {
    "name" : "public void unregisterNetworkStatsProvider(@NonNull NetworkStatsProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters an instance of {@link NetworkStatsProvider}.\n     *\n     * @param provider the subclass of {@link NetworkStatsProvider} that needs to be\n     *                 unregistered to the system.\n     * @hide\n     ",
    "links" : [ "NetworkStatsProvider", "NetworkStatsProvider" ]
  }, {
    "name" : "private static NetworkTemplate createTemplate(int networkType, String subscriberId)",
    "returnType" : "NetworkTemplate",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "CALLBACK_LIMIT_REACHED", "CALLBACK_RELEASED", "MIN_THRESHOLD_BYTES", "mContext", "mService", "FLAG_POLL_ON_OPEN", "FLAG_POLL_FORCE", "FLAG_AUGMENT_WITH_SUBSCRIPTION_PLAN", "mFlags" ],
  "methodNames" : [ "public void setPollOnOpen(boolean pollOnOpen)", "public void setPollForce(boolean pollForce)", "public void setAugmentWithSubscriptionPlan(boolean augmentWithSubscriptionPlan)", "public Bucket querySummaryForDevice(NetworkTemplate template, long startTime, long endTime) throws SecurityException, RemoteException", "public Bucket querySummaryForDevice(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException", "public Bucket querySummaryForUser(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException", "public NetworkStats querySummary(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException", "public NetworkStats querySummary(NetworkTemplate template, long startTime, long endTime) throws SecurityException, RemoteException", "public NetworkStats queryDetailsForUid(int networkType, String subscriberId, long startTime, long endTime, int uid) throws SecurityException", "public NetworkStats queryDetailsForUid(NetworkTemplate template, long startTime, long endTime, int uid) throws SecurityException", "public NetworkStats queryDetailsForUidTag(int networkType, String subscriberId, long startTime, long endTime, int uid, int tag) throws SecurityException", "public NetworkStats queryDetailsForUidTagState(int networkType, String subscriberId, long startTime, long endTime, int uid, int tag, int state) throws SecurityException", "public NetworkStats queryDetailsForUidTagState(NetworkTemplate template, long startTime, long endTime, int uid, int tag, int state) throws SecurityException", "public NetworkStats queryDetails(int networkType, String subscriberId, long startTime, long endTime) throws SecurityException, RemoteException", "public void registerUsageCallback(NetworkTemplate template, int networkType, long thresholdBytes, UsageCallback callback, @Nullable Handler handler)", "public void registerUsageCallback(int networkType, String subscriberId, long thresholdBytes, UsageCallback callback)", "public void registerUsageCallback(int networkType, String subscriberId, long thresholdBytes, UsageCallback callback, @Nullable Handler handler)", "public void unregisterUsageCallback(UsageCallback callback)", "public void registerNetworkStatsProvider(@NonNull String tag, @NonNull NetworkStatsProvider provider)", "public void unregisterNetworkStatsProvider(@NonNull NetworkStatsProvider provider)", "private static NetworkTemplate createTemplate(int networkType, String subscriberId)" ]
}