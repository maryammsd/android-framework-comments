{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/FuncDocument.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "FuncDocument",
  "comment" : "\n * Execute the Doc() function.\n *\n * When the document function has exactly one argument and the argument\n * is a node-set, then the result is the union, for each node in the\n * argument node-set, of the result of calling the document function with\n * the first argument being the string-value of the node, and the second\n * argument being a node-set with the node as its only member. When the\n * document function has two arguments and the first argument is a node-set,\n * then the result is the union, for each node in the argument node-set,\n * of the result of calling the document function with the first argument\n * being the string-value of the node, and with the second argument being\n * the second argument passed to the document function.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute the function.  The function must return\n   * a valid object.\n   * @param xctxt The current execution context.\n   * @return A valid XObject.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " int getDoc(XPathContext xctxt, int context, String uri, String base) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Get the document from the given URI and base\n   *\n   * @param xctxt The XPath runtime state.\n   * @param context The current context node\n   * @param uri Relative(?) URI of the document\n   * @param base Base to resolve relative URI from.\n   *\n   * @return The document Node pointing to the document at the given URI\n   * or null\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param xctxt The XPath runtime state.\n   * @param msg The error message key\n   * @param args Arguments to be used in the error message\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void warn(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Warn the user of a problem.\n   *\n   * @param xctxt The XPath runtime state.\n   * @param msg Warning message key\n   * @param args Arguments to be used in the warning message\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void checkNumberArgs(int argNum) throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Overide the superclass method to allow one or two arguments.\n   *\n   *\n   * @param argNum Number of arguments passed in to this function\n   *\n   * @throws WrongNumberArgsException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void reportWrongNumberArgs() throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Constructs and throws a WrongNumberArgException with the appropriate\n   * message for this function object.\n   *\n   * @throws WrongNumberArgsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNodesetExpr()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the expression is a nodeset expression.\n   * @return true if the expression can be represented as a nodeset.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", " int getDoc(XPathContext xctxt, int context, String uri, String base) throws javax.xml.transform.TransformerException", "public void error(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException", "public void warn(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException", "public void checkNumberArgs(int argNum) throws WrongNumberArgsException", "protected void reportWrongNumberArgs() throws WrongNumberArgsException", "public boolean isNodesetExpr()" ],
  "variableNames" : [ "serialVersionUID" ]
}