{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/NavigableSet.java",
  "packageName" : "java.util",
  "className" : "NavigableSet",
  "comment" : "\n * A {@link SortedSet} extended with navigation methods reporting\n * closest matches for given search targets. Methods {@link #lower},\n * {@link #floor}, {@link #ceiling}, and {@link #higher} return elements\n * respectively less than, less than or equal, greater than or equal,\n * and greater than a given element, returning {@code null} if there\n * is no such element.\n *\n * <p>A {@code NavigableSet} may be accessed and traversed in either\n * ascending or descending order.  The {@link #descendingSet} method\n * returns a view of the set with the senses of all relational and\n * directional methods inverted. The performance of ascending\n * operations and views is likely to be faster than that of descending\n * ones.  This interface additionally defines methods {@link\n * #pollFirst} and {@link #pollLast} that return and remove the lowest\n * and highest element, if one exists, else returning {@code null}.\n * Methods\n * {@link #subSet(Object, boolean, Object, boolean) subSet(E, boolean, E, boolean)},\n * {@link #headSet(Object, boolean) headSet(E, boolean)}, and\n * {@link #tailSet(Object, boolean) tailSet(E, boolean)}\n * differ from the like-named {@code SortedSet} methods in accepting\n * additional arguments describing whether lower and upper bounds are\n * inclusive versus exclusive.  Subsets of any {@code NavigableSet}\n * must implement the {@code NavigableSet} interface.\n *\n * <p>The return values of navigation methods may be ambiguous in\n * implementations that permit {@code null} elements. However, even\n * in this case the result can be disambiguated by checking\n * {@code contains(null)}. To avoid such issues, implementations of\n * this interface are encouraged to <em>not</em> permit insertion of\n * {@code null} elements. (Note that sorted sets of {@link\n * Comparable} elements intrinsically do not permit {@code null}.)\n *\n * <p>Methods\n * {@link #subSet(Object, Object) subSet(E, E)},\n * {@link #headSet(Object) headSet(E)}, and\n * {@link #tailSet(Object) tailSet(E)}\n * are specified to return {@code SortedSet} to allow existing\n * implementations of {@code SortedSet} to be compatibly retrofitted to\n * implement {@code NavigableSet}, but extensions and implementations\n * of this interface are encouraged to override these methods to return\n * {@code NavigableSet}.\n *\n * @author Doug Lea\n * @author Josh Bloch\n * @param <E> the type of elements maintained by this set\n * @since 1.6\n ",
  "links" : [ "#floor", "#subSet(Object", "#lower", "Comparable", "#tailSet(Object)", "java.util.SortedSet", "#pollLast", "#tailSet(Object", "#headSet(Object", "#descendingSet", "#higher", "#pollFirst", "#headSet(Object)", "#ceiling" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " E lower(E e)",
    "returnType" : "E",
    "comment" : "\n     * Returns the greatest element in this set strictly less than the\n     * given element, or {@code null} if there is no such element.\n     *\n     * @param e the value to match\n     * @return the greatest element less than {@code e},\n     *         or {@code null} if there is no such element\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with the elements currently in the set\n     * @throws NullPointerException if the specified element is null\n     *         and this set does not permit null elements\n     ",
    "links" : [ ]
  }, {
    "name" : " E floor(E e)",
    "returnType" : "E",
    "comment" : "\n     * Returns the greatest element in this set less than or equal to\n     * the given element, or {@code null} if there is no such element.\n     *\n     * @param e the value to match\n     * @return the greatest element less than or equal to {@code e},\n     *         or {@code null} if there is no such element\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with the elements currently in the set\n     * @throws NullPointerException if the specified element is null\n     *         and this set does not permit null elements\n     ",
    "links" : [ ]
  }, {
    "name" : " E ceiling(E e)",
    "returnType" : "E",
    "comment" : "\n     * Returns the least element in this set greater than or equal to\n     * the given element, or {@code null} if there is no such element.\n     *\n     * @param e the value to match\n     * @return the least element greater than or equal to {@code e},\n     *         or {@code null} if there is no such element\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with the elements currently in the set\n     * @throws NullPointerException if the specified element is null\n     *         and this set does not permit null elements\n     ",
    "links" : [ ]
  }, {
    "name" : " E higher(E e)",
    "returnType" : "E",
    "comment" : "\n     * Returns the least element in this set strictly greater than the\n     * given element, or {@code null} if there is no such element.\n     *\n     * @param e the value to match\n     * @return the least element greater than {@code e},\n     *         or {@code null} if there is no such element\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with the elements currently in the set\n     * @throws NullPointerException if the specified element is null\n     *         and this set does not permit null elements\n     ",
    "links" : [ ]
  }, {
    "name" : " E pollFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the first (lowest) element,\n     * or returns {@code null} if this set is empty.\n     *\n     * @return the first element, or {@code null} if this set is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " E pollLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the last (highest) element,\n     * or returns {@code null} if this set is empty.\n     *\n     * @return the last element, or {@code null} if this set is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this set, in ascending order.\n     *\n     * @return an iterator over the elements in this set, in ascending order\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableSet<E> descendingSet()",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * Returns a reverse order view of the elements contained in this set.\n     * The descending set is backed by this set, so changes to the set are\n     * reflected in the descending set, and vice-versa.  If either set is\n     * modified while an iteration over either set is in progress (except\n     * through the iterator's own {@code remove} operation), the results of\n     * the iteration are undefined.\n     *\n     * <p>The returned set has an ordering equivalent to\n     * {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.\n     * The expression {@code s.descendingSet().descendingSet()} returns a\n     * view of {@code s} essentially equivalent to {@code s}.\n     *\n     * @return a reverse order view of this set\n     ",
    "links" : [ "java.util.Collections#reverseOrder(Comparator)" ]
  }, {
    "name" : " Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this set, in descending order.\n     * Equivalent in effect to {@code descendingSet().iterator()}.\n     *\n     * @return an iterator over the elements in this set, in descending order\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * Returns a view of the portion of this set whose elements range from\n     * {@code fromElement} to {@code toElement}.  If {@code fromElement} and\n     * {@code toElement} are equal, the returned set is empty unless {@code\n     * fromInclusive} and {@code toInclusive} are both true.  The returned set\n     * is backed by this set, so changes in the returned set are reflected in\n     * this set, and vice-versa.  The returned set supports all optional set\n     * operations that this set supports.\n     *\n     * <p>The returned set will throw an {@code IllegalArgumentException}\n     * on an attempt to insert an element outside its range.\n     *\n     * @param fromElement low endpoint of the returned set\n     * @param fromInclusive {@code true} if the low endpoint\n     *        is to be included in the returned view\n     * @param toElement high endpoint of the returned set\n     * @param toInclusive {@code true} if the high endpoint\n     *        is to be included in the returned view\n     * @return a view of the portion of this set whose elements range from\n     *         {@code fromElement}, inclusive, to {@code toElement}, exclusive\n     * @throws ClassCastException if {@code fromElement} and\n     *         {@code toElement} cannot be compared to one another using this\n     *         set's comparator (or, if the set has no comparator, using\n     *         natural ordering).  Implementations may, but are not required\n     *         to, throw this exception if {@code fromElement} or\n     *         {@code toElement} cannot be compared to elements currently in\n     *         the set.\n     * @throws NullPointerException if {@code fromElement} or\n     *         {@code toElement} is null and this set does\n     *         not permit null elements\n     * @throws IllegalArgumentException if {@code fromElement} is\n     *         greater than {@code toElement}; or if this set itself\n     *         has a restricted range, and {@code fromElement} or\n     *         {@code toElement} lies outside the bounds of the range.\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableSet<E> headSet(E toElement, boolean inclusive)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * Returns a view of the portion of this set whose elements are less than\n     * (or equal to, if {@code inclusive} is true) {@code toElement}.  The\n     * returned set is backed by this set, so changes in the returned set are\n     * reflected in this set, and vice-versa.  The returned set supports all\n     * optional set operations that this set supports.\n     *\n     * <p>The returned set will throw an {@code IllegalArgumentException}\n     * on an attempt to insert an element outside its range.\n     *\n     * @param toElement high endpoint of the returned set\n     * @param inclusive {@code true} if the high endpoint\n     *        is to be included in the returned view\n     * @return a view of the portion of this set whose elements are less than\n     *         (or equal to, if {@code inclusive} is true) {@code toElement}\n     * @throws ClassCastException if {@code toElement} is not compatible\n     *         with this set's comparator (or, if the set has no comparator,\n     *         if {@code toElement} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code toElement} cannot be compared to elements\n     *         currently in the set.\n     * @throws NullPointerException if {@code toElement} is null and\n     *         this set does not permit null elements\n     * @throws IllegalArgumentException if this set itself has a\n     *         restricted range, and {@code toElement} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " NavigableSet<E> tailSet(E fromElement, boolean inclusive)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * Returns a view of the portion of this set whose elements are greater\n     * than (or equal to, if {@code inclusive} is true) {@code fromElement}.\n     * The returned set is backed by this set, so changes in the returned set\n     * are reflected in this set, and vice-versa.  The returned set supports\n     * all optional set operations that this set supports.\n     *\n     * <p>The returned set will throw an {@code IllegalArgumentException}\n     * on an attempt to insert an element outside its range.\n     *\n     * @param fromElement low endpoint of the returned set\n     * @param inclusive {@code true} if the low endpoint\n     *        is to be included in the returned view\n     * @return a view of the portion of this set whose elements are greater\n     *         than or equal to {@code fromElement}\n     * @throws ClassCastException if {@code fromElement} is not compatible\n     *         with this set's comparator (or, if the set has no comparator,\n     *         if {@code fromElement} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code fromElement} cannot be compared to elements\n     *         currently in the set.\n     * @throws NullPointerException if {@code fromElement} is null\n     *         and this set does not permit null elements\n     * @throws IllegalArgumentException if this set itself has a\n     *         restricted range, and {@code fromElement} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " SortedSet<E> subSet(E fromElement, E toElement)",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Equivalent to {@code subSet(fromElement, true, toElement, false)}.\n     *\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedSet<E> headSet(E toElement)",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Equivalent to {@code headSet(toElement, false)}.\n     *\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedSet<E> tailSet(E fromElement)",
    "returnType" : "SortedSet<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Equivalent to {@code tailSet(fromElement, true)}.\n     *\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * If this set is not empty, the implementation in this interface returns the result of calling\n     * the {@code pollFirst} method. Otherwise, it throws {@code NoSuchElementException}.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * If this set is not empty, the implementation in this interface returns the result of calling\n     * the {@code pollLast} method. Otherwise, it throws {@code NoSuchElementException}.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableSet<E> reversed()",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * This method is equivalent to {@link #descendingSet descendingSet}.\n     *\n     * @implSpec\n     * The implementation in this interface returns the result of calling the\n     * {@code descendingSet} method.\n     *\n     * @return a reverse-ordered view of this collection, as a {@code NavigableSet}\n     * @since 21\n     ",
    "links" : [ "#descendingSet" ]
  } ],
  "methodNames" : [ " E lower(E e)", " E floor(E e)", " E ceiling(E e)", " E higher(E e)", " E pollFirst()", " E pollLast()", " Iterator<E> iterator()", " NavigableSet<E> descendingSet()", " Iterator<E> descendingIterator()", " NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)", " NavigableSet<E> headSet(E toElement, boolean inclusive)", " NavigableSet<E> tailSet(E fromElement, boolean inclusive)", " SortedSet<E> subSet(E fromElement, E toElement)", " SortedSet<E> headSet(E toElement)", " SortedSet<E> tailSet(E fromElement)", " E removeFirst()", " E removeLast()", " NavigableSet<E> reversed()" ],
  "variableNames" : [ ]
}