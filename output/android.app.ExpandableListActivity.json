{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ExpandableListActivity.java",
  "packageName" : "android.app",
  "className" : "ExpandableListActivity",
  "comment" : "\n * An activity that displays an expandable list of items by binding to a data\n * source implementing the ExpandableListAdapter, and exposes event handlers\n * when the user selects an item.\n * <p>\n * ExpandableListActivity hosts a\n * {@link android.widget.ExpandableListView ExpandableListView} object that can\n * be bound to different data sources that provide a two-levels of data (the\n * top-level is group, and below each group are children). Binding, screen\n * layout, and row layout are discussed in the following sections.\n * <p>\n * <strong>Screen Layout</strong>\n * </p>\n * <p>\n * ExpandableListActivity has a default layout that consists of a single,\n * full-screen, centered expandable list. However, if you desire, you can\n * customize the screen layout by setting your own view layout with\n * setContentView() in onCreate(). To do this, your own view MUST contain an\n * ExpandableListView object with the id \"@android:id/list\" (or\n * {@link android.R.id#list} if it's in code)\n * <p>\n * Optionally, your custom view can contain another view object of any type to\n * display when the list view is empty. This \"empty list\" notifier must have an\n * id \"android:empty\". Note that when an empty view is present, the expandable\n * list view will be hidden when there is no data to display.\n * <p>\n * The following code demonstrates an (ugly) custom screen layout. It has a list\n * with a green background, and an alternate red \"no data\" message.\n * </p>\n * \n * <pre>\n * &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n * &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *         android:orientation=&quot;vertical&quot;\n *         android:layout_width=&quot;match_parent&quot; \n *         android:layout_height=&quot;match_parent&quot;\n *         android:paddingLeft=&quot;8dp&quot;\n *         android:paddingRight=&quot;8dp&quot;&gt;\n * \n *     &lt;ExpandableListView android:id=&quot;@id/android:list&quot;\n *               android:layout_width=&quot;match_parent&quot; \n *               android:layout_height=&quot;match_parent&quot;\n *               android:background=&quot;#00FF00&quot;\n *               android:layout_weight=&quot;1&quot;\n *               android:drawSelectorOnTop=&quot;false&quot;/&gt;\n * \n *     &lt;TextView android:id=&quot;@id/android:empty&quot;\n *               android:layout_width=&quot;match_parent&quot; \n *               android:layout_height=&quot;match_parent&quot;\n *               android:background=&quot;#FF0000&quot;\n *               android:text=&quot;No data&quot;/&gt;\n * &lt;/LinearLayout&gt;\n * </pre>\n * \n * <p>\n * <strong>Row Layout</strong>\n * </p>\n * The {@link ExpandableListAdapter} set in the {@link ExpandableListActivity}\n * via {@link #setListAdapter(ExpandableListAdapter)} provides the {@link View}s\n * for each row. This adapter has separate methods for providing the group\n * {@link View}s and child {@link View}s. There are a couple provided\n * {@link ExpandableListAdapter}s that simplify use of adapters:\n * {@link SimpleCursorTreeAdapter} and {@link SimpleExpandableListAdapter}.\n * <p>\n * With these, you can specify the layout of individual rows for groups and\n * children in the list. These constructor takes a few parameters that specify\n * layout resources for groups and children. It also has additional parameters\n * that let you specify which data field to associate with which object in the\n * row layout resource. The {@link SimpleCursorTreeAdapter} fetches data from\n * {@link Cursor}s and the {@link SimpleExpandableListAdapter} fetches data\n * from {@link List}s of {@link Map}s.\n * </p>\n * <p>\n * Android provides some standard row layout resources. These are in the\n * {@link android.R.layout} class, and have names such as simple_list_item_1,\n * simple_list_item_2, and two_line_list_item. The following layout XML is the\n * source for the resource two_line_list_item, which displays two data\n * fields,one above the other, for each list row.\n * </p>\n * \n * <pre>\n * &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n * &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *     android:layout_width=&quot;match_parent&quot;\n *     android:layout_height=&quot;wrap_content&quot;\n *     android:orientation=&quot;vertical&quot;&gt;\n * \n *     &lt;TextView android:id=&quot;@+id/text1&quot;\n *         android:textSize=&quot;16sp&quot;\n *         android:textStyle=&quot;bold&quot;\n *         android:layout_width=&quot;match_parent&quot;\n *         android:layout_height=&quot;wrap_content&quot;/&gt;\n * \n *     &lt;TextView android:id=&quot;@+id/text2&quot;\n *         android:textSize=&quot;16sp&quot;\n *         android:layout_width=&quot;match_parent&quot;\n *         android:layout_height=&quot;wrap_content&quot;/&gt;\n * &lt;/LinearLayout&gt;\n * </pre>\n * \n * <p>\n * You must identify the data bound to each TextView object in this layout. The\n * syntax for this is discussed in the next section.\n * </p>\n * <p>\n * <strong>Binding to Data</strong>\n * </p>\n * <p>\n * You bind the ExpandableListActivity's ExpandableListView object to data using\n * a class that implements the\n * {@link android.widget.ExpandableListAdapter ExpandableListAdapter} interface.\n * Android provides two standard list adapters:\n * {@link android.widget.SimpleExpandableListAdapter SimpleExpandableListAdapter}\n * for static data (Maps), and\n * {@link android.widget.SimpleCursorTreeAdapter SimpleCursorTreeAdapter} for\n * Cursor query results.\n * </p>\n * \n * @see #setListAdapter\n * @see android.widget.ExpandableListView\n *\n * @deprecated Use {@link androidx.recyclerview.widget.RecyclerView} or use\n *   {@link android.widget.ExpandableListView} directly\n ",
  "variables" : [ {
    "name" : "mAdapter",
    "type" : "ExpandableListAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mList",
    "type" : "ExpandableListView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedStart",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)",
    "returnType" : "void",
    "comment" : "\n     * Override this to populate the context menu when an item is long pressed. menuInfo\n     * will contain an {@link android.widget.ExpandableListView.ExpandableListContextMenuInfo}\n     * whose packedPosition is a packed position\n     * that should be used with {@link ExpandableListView#getPackedPositionType(long)} and\n     * the other similar methods.\n     * <p>\n     * {@inheritDoc}\n     ",
    "links" : [ "android.widget.ExpandableListView.ExpandableListContextMenuInfo", "android.widget.ExpandableListView#getPackedPositionType(long)" ]
  }, {
    "name" : "public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id)",
    "returnType" : "boolean",
    "comment" : "\n     * Override this for receiving callbacks when a child has been clicked.\n     * <p>\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGroupCollapse(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Override this for receiving callbacks when a group has been collapsed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGroupExpand(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Override this for receiving callbacks when a group has been expanded.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Bundle state)",
    "returnType" : "void",
    "comment" : "\n     * Ensures the expandable list view has been created before Activity restores all\n     * of the view states.\n     * \n     *@see Activity#onRestoreInstanceState(Bundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onContentChanged()",
    "returnType" : "void",
    "comment" : "\n     * Updates the screen state (current list and other views) when the\n     * content changes.\n     * \n     * @see Activity#onContentChanged()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListAdapter(ExpandableListAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Provide the adapter for the expandable list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ExpandableListView getExpandableListView()",
    "returnType" : "ExpandableListView",
    "comment" : "\n     * Get the activity's expandable list view widget.  This can be used to get the selection,\n     * set the selection, and many other useful functions.\n     * \n     * @see ExpandableListView\n     ",
    "links" : [ ]
  }, {
    "name" : "public ExpandableListAdapter getExpandableListAdapter()",
    "returnType" : "ExpandableListAdapter",
    "comment" : "\n     * Get the ExpandableListAdapter associated with this activity's\n     * ExpandableListView.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getSelectedId()",
    "returnType" : "long",
    "comment" : "\n     * Gets the ID of the currently selected group or child.\n     * \n     * @return The ID of the currently selected group or child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSelectedPosition()",
    "returnType" : "long",
    "comment" : "\n     * Gets the position (in packed position representation) of the currently\n     * selected group or child. Use\n     * {@link ExpandableListView#getPackedPositionType},\n     * {@link ExpandableListView#getPackedPositionGroup}, and\n     * {@link ExpandableListView#getPackedPositionChild} to unpack the returned\n     * packed position.\n     * \n     * @return A packed position representation containing the currently\n     *         selected group or child's position and type.\n     ",
    "links" : [ "android.widget.ExpandableListView#getPackedPositionChild", "android.widget.ExpandableListView#getPackedPositionType", "android.widget.ExpandableListView#getPackedPositionGroup" ]
  }, {
    "name" : "public boolean setSelectedChild(int groupPosition, int childPosition, boolean shouldExpandGroup)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the selection to the specified child. If the child is in a collapsed\n     * group, the group will only be expanded and child subsequently selected if\n     * shouldExpandGroup is set to true, otherwise the method will return false.\n     * \n     * @param groupPosition The position of the group that contains the child.\n     * @param childPosition The position of the child within the group.\n     * @param shouldExpandGroup Whether the child's group should be expanded if\n     *            it is collapsed.\n     * @return Whether the selection was successfully set on the child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelectedGroup(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the selection to the specified group.\n     * @param groupPosition The position of the group that should be selected.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mAdapter", "mList", "mFinishedStart" ],
  "methodNames" : [ "public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)", "public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id)", "public void onGroupCollapse(int groupPosition)", "public void onGroupExpand(int groupPosition)", "protected void onRestoreInstanceState(Bundle state)", "public void onContentChanged()", "public void setListAdapter(ExpandableListAdapter adapter)", "public ExpandableListView getExpandableListView()", "public ExpandableListAdapter getExpandableListAdapter()", "private void ensureList()", "public long getSelectedId()", "public long getSelectedPosition()", "public boolean setSelectedChild(int groupPosition, int childPosition, boolean shouldExpandGroup)", "public void setSelectedGroup(int groupPosition)" ]
}