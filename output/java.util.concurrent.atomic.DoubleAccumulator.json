{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/DoubleAccumulator.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "DoubleAccumulator",
  "comment" : "\n * One or more variables that together maintain a running {@code double}\n * value updated using a supplied function.  When updates (method\n * {@link #accumulate}) are contended across threads, the set of variables\n * may grow dynamically to reduce contention.  Method {@link #get}\n * (or, equivalently, {@link #doubleValue}) returns the current value\n * across the variables maintaining updates.\n *\n * <p>This class is usually preferable to alternatives when multiple\n * threads update a common value that is used for purposes such as\n * summary statistics that are frequently updated but less frequently\n * read.\n *\n * <p>The supplied accumulator function should be side-effect-free,\n * since it may be re-applied when attempted updates fail due to\n * contention among threads.  For predictable results, the accumulator\n * function should be commutative and associative within the floating\n * point tolerance required in usage contexts. The function is applied\n * with an existing value (or identity) as one argument, and a given\n * update as the other argument. For example, to maintain a running\n * maximum value, you could supply {@code Double::max} along with\n * {@code Double.NEGATIVE_INFINITY} as the identity. The order of\n * accumulation within or across threads is not guaranteed. Thus, this\n * class may not be applicable if numerical stability is required,\n * especially when combining values of substantially different orders\n * of magnitude.\n *\n * <p>Class {@link DoubleAdder} provides analogs of the functionality\n * of this class for the common special case of maintaining sums.  The\n * call {@code new DoubleAdder()} is equivalent to {@code new\n * DoubleAccumulator((x, y) -> x + y, 0.0)}.\n *\n * <p>This class extends {@link Number}, but does <em>not</em> define\n * methods such as {@code equals}, {@code hashCode} and {@code\n * compareTo} because instances are expected to be mutated, and so are\n * not useful as collection keys.\n *\n * @since 1.8\n * @author Doug Lea\n ",
  "links" : [ "#get", "Number", "#accumulate", "#doubleValue", "java.util.concurrent.atomic.DoubleAdder" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "function",
    "type" : "DoubleBinaryOperator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "identity",
    "type" : "long",
    "comment" : " use long representation",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void accumulate(double x)",
    "returnType" : "void",
    "comment" : "\n     * Updates with the given value.\n     *\n     * @param x the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public double get()",
    "returnType" : "double",
    "comment" : "\n     * Returns the current value.  The returned value is <em>NOT</em>\n     * an atomic snapshot; invocation in the absence of concurrent\n     * updates returns an accurate result, but concurrent updates that\n     * occur while the value is being calculated might not be\n     * incorporated.\n     *\n     * @return the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets variables maintaining updates to the identity value.\n     * This method may be a useful alternative to creating a new\n     * updater, but is only effective if there are no concurrent\n     * updates.  Because this method is intrinsically racy, it should\n     * only be used when it is known that no threads are concurrently\n     * updating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getThenReset()",
    "returnType" : "double",
    "comment" : "\n     * Equivalent in effect to {@link #get} followed by {@link\n     * #reset}. This method may apply for example during quiescent\n     * points between multithreaded computations.  If there are\n     * updates concurrent with this method, the returned value is\n     * <em>not</em> guaranteed to be the final value occurring before\n     * the reset.\n     *\n     * @return the value before reset\n     ",
    "links" : [ "#get", "#reset" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Equivalent to {@link #get}.\n     *\n     * @return the current value\n     ",
    "links" : [ "#get" ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the {@linkplain #get current value} as a {@code long}\n     * after a narrowing primitive conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@linkplain #get current value} as an {@code int}\n     * after a narrowing primitive conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the {@linkplain #get current value} as a {@code float}\n     * after a narrowing primitive conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a\n     * <a href=\"{@docRoot}/serialized-form.html#java.util.concurrent.atomic.DoubleAccumulator.SerializationProxy\">\n     * SerializationProxy</a>\n     * representing the state of this instance.\n     *\n     * @return a {@link SerializationProxy}\n     * representing the state of this instance\n     ",
    "links" : [ "SerializationProxy" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * @param s the stream\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void accumulate(double x)", "public double get()", "public void reset()", "public double getThenReset()", "public String toString()", "public double doubleValue()", "public long longValue()", "public int intValue()", "public float floatValue()", "private Object writeReplace()", "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException" ],
  "variableNames" : [ "serialVersionUID", "function", "identity" ]
}