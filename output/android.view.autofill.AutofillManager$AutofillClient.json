{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/autofill/AutofillManager.java",
  "packageName" : "android.view.autofill",
  "className" : "AutofillClient",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void autofillClientAuthenticate(int authenticationId, IntentSender intent, Intent fillInIntent, boolean authenticateInline)",
    "returnType" : "void",
    "comment" : "\n         * Asks the client to start an authentication flow.\n         *\n         * @param authenticationId A unique id of the authentication operation.\n         * @param intent The authentication intent.\n         * @param fillInIntent The authentication fill-in intent.\n         ",
    "links" : [ ]
  }, {
    "name" : " void autofillClientResetableStateAvailable()",
    "returnType" : "void",
    "comment" : "\n         * Tells the client this manager has state to be reset.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean autofillClientRequestShowFillUi(@NonNull View anchor, int width, int height, @Nullable Rect virtualBounds, IAutofillWindowPresenter presenter)",
    "returnType" : "boolean",
    "comment" : "\n         * Request showing the autofill UI.\n         *\n         * @param anchor The real view the UI needs to anchor to.\n         * @param width The width of the fill UI content.\n         * @param height The height of the fill UI content.\n         * @param virtualBounds The bounds of the virtual decendant of the anchor.\n         * @param presenter The presenter that controls the fill UI window.\n         * @return Whether the UI was shown.\n         ",
    "links" : [ ]
  }, {
    "name" : " void autofillClientDispatchUnhandledKey(@NonNull View anchor, @NonNull KeyEvent keyEvent)",
    "returnType" : "void",
    "comment" : "\n         * Dispatch unhandled keyevent from Autofill window\n         * @param anchor The real view the UI needs to anchor to.\n         * @param keyEvent Unhandled KeyEvent from autofill window.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean autofillClientRequestHideFillUi()",
    "returnType" : "boolean",
    "comment" : "\n         * Request hiding the autofill UI.\n         *\n         * @return Whether the UI was hidden.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean autofillClientIsFillUiShowing()",
    "returnType" : "boolean",
    "comment" : "\n         * Gets whether the fill UI is currenlty being shown.\n         *\n         * @return Whether the fill UI is currently being shown\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean[] autofillClientGetViewVisibility(@NonNull AutofillId[] autofillIds)",
    "returnType" : "boolean[]",
    "comment" : "\n         * Checks if views are currently attached and visible.\n         *\n         * @return And array with {@code true} iff the view is attached or visible\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean autofillClientIsVisibleForAutofill()",
    "returnType" : "boolean",
    "comment" : "\n         * Checks is the client is currently visible as understood by autofill.\n         *\n         * @return {@code true} if the client is currently visible\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean isDisablingEnterExitEventForAutofill()",
    "returnType" : "boolean",
    "comment" : "\n         * Client might disable enter/exit event e.g. when activity is paused.\n         ",
    "links" : [ ]
  }, {
    "name" : " View[] autofillClientFindViewsByAutofillIdTraversal(@NonNull AutofillId[] autofillIds)",
    "returnType" : "View[]",
    "comment" : "\n         * Finds views by traversing the hierarchies of the client.\n         *\n         * @param autofillIds The autofill ids of the views to find\n         *\n         * @return And array containing the views (empty if no views found).\n         ",
    "links" : [ ]
  }, {
    "name" : " View autofillClientFindViewByAutofillIdTraversal(@NonNull AutofillId autofillId)",
    "returnType" : "View",
    "comment" : "\n         * Finds a view by traversing the hierarchies of the client.\n         *\n         * @param autofillId The autofill id of the views to find\n         *\n         * @return The view, or {@code null} if not found\n         ",
    "links" : [ ]
  }, {
    "name" : " View autofillClientFindViewByAccessibilityIdTraversal(int viewId, int windowId)",
    "returnType" : "View",
    "comment" : "\n         * Finds a view by a11y id in a given client window.\n         *\n         * @param viewId The accessibility id of the views to find\n         * @param windowId The accessibility window id where to search\n         *\n         * @return The view, or {@code null} if not found\n         ",
    "links" : [ ]
  }, {
    "name" : " void autofillClientRunOnUiThread(Runnable action)",
    "returnType" : "void",
    "comment" : "\n         * Runs the specified action on the UI thread.\n         ",
    "links" : [ ]
  }, {
    "name" : " ComponentName autofillClientGetComponentName()",
    "returnType" : "ComponentName",
    "comment" : "\n         * Gets the complete component name of this client.\n         ",
    "links" : [ ]
  }, {
    "name" : " IBinder autofillClientGetActivityToken()",
    "returnType" : "IBinder",
    "comment" : "\n         * Gets the activity token\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean autofillClientIsCompatibilityModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n          * @return Whether compatibility mode is enabled.\n          ",
    "links" : [ ]
  }, {
    "name" : " AutofillId autofillClientGetNextAutofillId()",
    "returnType" : "AutofillId",
    "comment" : "\n         * Gets the next unique autofill ID.\n         *\n         * <p>Typically used to manage views whose content is recycled - see\n         * {@link View#setAutofillId(AutofillId)} for more info.\n         *\n         * @return An ID that is unique in the activity.\n         ",
    "links" : [ "android.view.View#setAutofillId(AutofillId)" ]
  } ],
  "methodNames" : [ " void autofillClientAuthenticate(int authenticationId, IntentSender intent, Intent fillInIntent, boolean authenticateInline)", " void autofillClientResetableStateAvailable()", " boolean autofillClientRequestShowFillUi(@NonNull View anchor, int width, int height, @Nullable Rect virtualBounds, IAutofillWindowPresenter presenter)", " void autofillClientDispatchUnhandledKey(@NonNull View anchor, @NonNull KeyEvent keyEvent)", " boolean autofillClientRequestHideFillUi()", " boolean autofillClientIsFillUiShowing()", " boolean[] autofillClientGetViewVisibility(@NonNull AutofillId[] autofillIds)", " boolean autofillClientIsVisibleForAutofill()", " boolean isDisablingEnterExitEventForAutofill()", " View[] autofillClientFindViewsByAutofillIdTraversal(@NonNull AutofillId[] autofillIds)", " View autofillClientFindViewByAutofillIdTraversal(@NonNull AutofillId autofillId)", " View autofillClientFindViewByAccessibilityIdTraversal(int viewId, int windowId)", " void autofillClientRunOnUiThread(Runnable action)", " ComponentName autofillClientGetComponentName()", " IBinder autofillClientGetActivityToken()", " boolean autofillClientIsCompatibilityModeEnabled()", " AutofillId autofillClientGetNextAutofillId()" ],
  "variableNames" : [ ]
}