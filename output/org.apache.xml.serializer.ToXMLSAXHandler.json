{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToXMLSAXHandler.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToXMLSAXHandler",
  "comment" : "\n * This class receives notification of SAX-like events, and with gathered\n * information over these calls it will invoke the equivalent SAX methods\n * on a handler, the ultimate xsl:output method is known to be \"xml\".\n * \n * This class is not a public API.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_escapeSetting",
    "type" : "boolean",
    "comment" : "\n     * Keeps track of whether output escaping is currently enabled\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Properties getOutputFormat()",
    "returnType" : "Properties",
    "comment" : "\n     * @see Serializer#getOutputFormat()\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * @see Serializer#getOutputStream()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "\n     * @see Serializer#getWriter()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void indent(int n) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Do nothing for SAX.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void serialize(Node node) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @see DOMSerializer#serialize(Node)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setEscaping(boolean escape) throws SAXException",
    "returnType" : "boolean",
    "comment" : "\n     * @see SerializationHandler#setEscaping(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputFormat(Properties format)",
    "returnType" : "void",
    "comment" : "\n     * @see Serializer#setOutputFormat(Properties)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputStream(OutputStream output)",
    "returnType" : "void",
    "comment" : "\n     * @see Serializer#setOutputStream(OutputStream)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWriter(Writer writer)",
    "returnType" : "void",
    "comment" : "\n     * @see Serializer#setWriter(Writer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String arg0, String arg1, String arg2, String arg3, String arg4) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#attributeDecl(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#elementDecl(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String arg0, String arg1, String arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#externalEntityDecl(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#internalEntityDecl(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receives notification of the end of the document.\n     * @see org.xml.sax.ContentHandler#endDocument()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void closeStartTag() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is called when all the data needed for a call to the\n     * SAX handler's startElement() method has been gathered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Closes ane open cdata tag, and\n     * unlike the this.endCDATA() method (from the LexicalHandler) interface,\n     * this \"internal\" method will send the endCDATA() call to the wrapped\n     * handler.\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String namespaceURI, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#endElement(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#endPrefixMapping(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] arg0, int arg1, int arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator arg0)",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#setDocumentLocator(Locator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String arg0) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#skippedEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)\n     * @param prefix The prefix that maps to the URI\n     * @param uri The URI for the namespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws org.xml.sax.SAXException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] arg0, int arg1, int arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#endCDATA()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#endDTD()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String arg0) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#startEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(String chars) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#characters(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String elementNamespaceURI, String elementLocalName, String elementName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Start an element in the output document. This might be an XML element\n     * (<elem>data</elem> type) or a CDATA section.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String elementName) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int off, int len) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String elemName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#endElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Send a namespace declaration in the output document. The namespace\n     * declaration will not be include if the namespace is already in scope\n     * with the same prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     *\n     * @see org.xml.sax.ContentHandler#processingInstruction(String, String)\n     * Send a processing instruction to the output document\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean popNamespace(String prefix)",
    "returnType" : "boolean",
    "comment" : "\n     * Undeclare the namespace that is currently pointed to by a given\n     * prefix. Inform SAX handler if prefix was previously mapped.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String namespaceURI, String localName, String name, Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#startElement(String, String, String, Attributes)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensurePrefixIsDeclared(String ns, String rawName) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adds the given attribute to the set of attributes, and also makes sure\n     * that the needed prefix/uri mapping is declared, but only if there is a\n     * currently open element.\n     * \n     * @param uri the URI of the attribute\n     * @param localName the local name of the attribute\n     * @param rawName    the qualified name of the attribute\n     * @param type the type of the attribute (probably CDATA)\n     * @param value the value of the attribute\n     * @param XSLAttribute true if this attribute is coming from an xsl:attribute element\n     * @see ExtendedContentHandler#addAttribute(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * Try's to reset the super class and reset this class for \n     * re-use, so that you don't need to create a new serializer \n     * (mostly for performance reasons).\n     * \n     * @return true if the class was successfuly reset.\n     * @see Serializer#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetToXMLSAXHandler()",
    "returnType" : "void",
    "comment" : "\n     * Reset all of the fields owned by ToXMLSAXHandler class\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Properties getOutputFormat()", "public OutputStream getOutputStream()", "public Writer getWriter()", "public void indent(int n) throws SAXException", "public void serialize(Node node) throws IOException", "public boolean setEscaping(boolean escape) throws SAXException", "public void setOutputFormat(Properties format)", "public void setOutputStream(OutputStream output)", "public void setWriter(Writer writer)", "public void attributeDecl(String arg0, String arg1, String arg2, String arg3, String arg4) throws SAXException", "public void elementDecl(String arg0, String arg1) throws SAXException", "public void externalEntityDecl(String arg0, String arg1, String arg2) throws SAXException", "public void internalEntityDecl(String arg0, String arg1) throws SAXException", "public void endDocument() throws SAXException", "protected void closeStartTag() throws SAXException", "public void closeCDATA() throws SAXException", "public void endElement(String namespaceURI, String localName, String qName) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void ignorableWhitespace(char[] arg0, int arg1, int arg2) throws SAXException", "public void setDocumentLocator(Locator arg0)", "public void skippedEntity(String arg0) throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws org.xml.sax.SAXException", "public void comment(char[] arg0, int arg1, int arg2) throws SAXException", "public void endCDATA() throws SAXException", "public void endDTD() throws SAXException", "public void startEntity(String arg0) throws SAXException", "public void characters(String chars) throws SAXException", "public void startElement(String elementNamespaceURI, String elementLocalName, String elementName) throws SAXException", "public void startElement(String elementName) throws SAXException", "public void characters(char[] ch, int off, int len) throws SAXException", "public void endElement(String elemName) throws SAXException", "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "protected boolean popNamespace(String prefix)", "public void startCDATA() throws SAXException", "public void startElement(String namespaceURI, String localName, String name, Attributes atts) throws SAXException", "private void ensurePrefixIsDeclared(String ns, String rawName) throws org.xml.sax.SAXException", "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute) throws SAXException", "public boolean reset()", "private void resetToXMLSAXHandler()" ],
  "variableNames" : [ "m_escapeSetting" ]
}