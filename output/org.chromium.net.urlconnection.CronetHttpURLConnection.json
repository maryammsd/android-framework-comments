{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/urlconnection/CronetHttpURLConnection.java",
  "packageName" : "org.chromium.net.urlconnection",
  "className" : "CronetHttpURLConnection",
  "comment" : "\n * An implementation of {@link HttpURLConnection} that uses Cronet to send\n * requests and receive responses.\n * {@hide}\n ",
  "links" : [ "java.net.HttpURLConnection" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_LENGTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCronetEngine",
    "type" : "CronetEngine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessageLoop",
    "type" : "MessageLoop",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequest",
    "type" : "UrlRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestHeaders",
    "type" : "List<Pair<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsTagSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsTag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsUidSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputStream",
    "type" : "CronetInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputStream",
    "type" : "CronetOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResponseInfo",
    "type" : "UrlResponseInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mException",
    "type" : "IOException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnRedirectCalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasResponseHeadersOrCompleted",
    "type" : "boolean",
    "comment" : " Whether response headers are received, the request is failed, or the request is canceled.",
    "links" : [ ]
  }, {
    "name" : "mResponseHeadersList",
    "type" : "List<Map.Entry<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResponseHeadersMap",
    "type" : "Map<String, List<String>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void connect() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Opens a connection to the resource. If the connect method is called when\n     * the connection has already been opened (indicated by the connected field\n     * having the value {@code true}), the call is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Releases this connection so that its resources may be either reused or\n     * closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResponseMessage() throws IOException",
    "returnType" : "String",
    "comment" : " Returns the response message returned by the remote HTTP server. ",
    "links" : [ ]
  }, {
    "name" : "public int getResponseCode() throws IOException",
    "returnType" : "int",
    "comment" : " Returns the response code returned by the remote HTTP server. ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getHeaderFields()",
    "returnType" : "Map<String, List<String>>",
    "comment" : " Returns an unmodifiable map of the response-header fields and values. ",
    "links" : [ ]
  }, {
    "name" : "public final String getHeaderField(String fieldName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the named header field. If called on a connection\n     * that sets the same header multiple times with possibly different values,\n     * only the last value is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getHeaderFieldKey(int pos)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the header field at the given position {@code pos}, or {@code null}\n     * if there are fewer than {@code pos} fields.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getHeaderField(int pos)",
    "returnType" : "String",
    "comment" : "\n     * Returns the header value at the field position {@code pos} or {@code null} if the header\n     * has fewer than {@code pos} fields.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an InputStream for reading data from the resource pointed by this\n     * {@link java.net.URLConnection}.\n     * @throws FileNotFoundException if http response code is equal or greater\n     *             than {@link HTTP_BAD_REQUEST}.\n     * @throws IOException If the request gets a network error or HTTP error\n     *             status code, or if the caller tried to read the response body\n     *             of a redirect when redirects are disabled.\n     ",
    "links" : [ "HTTP_BAD_REQUEST", "java.net.URLConnection" ]
  }, {
    "name" : "public OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Returns an {@link OutputStream} for writing data to this {@link URLConnection}.\n     * @throws IOException if no {@code OutputStream} could be created.\n     ",
    "links" : [ "java.io.OutputStream", "java.net.HttpURLConnection" ]
  }, {
    "name" : "private long getStreamingModeContentLength()",
    "returnType" : "long",
    "comment" : "\n     * Helper method to get content length passed in by\n     * {@link #setFixedLengthStreamingMode}\n     ",
    "links" : [ "#setFixedLengthStreamingMode" ]
  }, {
    "name" : "private void startRequest() throws IOException",
    "returnType" : "void",
    "comment" : " Starts the request if {@code connected} is false. ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkTrafficStatsTag()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkTrafficStatsUid()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InputStream getErrorStream()",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an input stream from the server in the case of an error such as\n     * the requested file has not been found on the remote server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void addRequestProperty(String key, String value)",
    "returnType" : "void",
    "comment" : " Adds the given property to the request header. ",
    "links" : [ ]
  }, {
    "name" : "public final void setRequestProperty(String key, String value)",
    "returnType" : "void",
    "comment" : " Sets the value of the specified request header field. ",
    "links" : [ ]
  }, {
    "name" : "private final void setRequestPropertyInternal(String key, String value, boolean overwrite)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getRequestProperties()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns an unmodifiable map of general request properties used by this\n     * connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequestProperty(String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the request header property specified by {@code\n     * key} or {@code null} if there is no key with this name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean usingProxy()",
    "returnType" : "boolean",
    "comment" : " Returns whether this connection uses a proxy server. ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getMoreData(ByteBuffer byteBuffer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Used by {@link CronetInputStream} to get more data from the network\n     * stack. This should only be called after the request has started. Note\n     * that this call might block if there isn't any more data to be read.\n     * Since byteBuffer is passed to the UrlRequest, it must be a direct\n     * ByteBuffer.\n     ",
    "links" : [ "org.chromium.net.urlconnection.CronetInputStream" ]
  }, {
    "name" : "public void setTrafficStatsTag(int tag)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@link android.net.TrafficStats} tag to use when accounting socket traffic caused by\n     * this request. See {@link android.net.TrafficStats} for more information. If no tag is\n     * set (e.g. this method isn't called), then Android accounts for the socket traffic caused\n     * by this request as if the tag value were set to 0.\n     * <p>\n     * <b>NOTE:</b>Setting a tag disallows sharing of sockets with requests\n     * with other tags, which may adversely effect performance by prohibiting\n     * connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n     * and QUIC) will only be allowed if all requests have the same socket tag.\n     *\n     * @param tag the tag value used to when accounting for socket traffic caused by this\n     *            request. Tags between 0xFFFFFF00 and 0xFFFFFFFF are reserved and used\n     *            internally by system services like {@link android.app.DownloadManager} when\n     *            performing traffic on behalf of an application.\n     ",
    "links" : [ "android.app.DownloadManager", "android.net.TrafficStats" ]
  }, {
    "name" : "public void setTrafficStatsUid(int uid)",
    "returnType" : "void",
    "comment" : "\n     * Sets specific UID to use when accounting socket traffic caused by this request. See\n     * {@link android.net.TrafficStats} for more information. Designed for use when performing\n     * an operation on behalf of another application. Caller must hold\n     * {@link android.Manifest.permission#MODIFY_NETWORK_ACCOUNTING} permission. By default\n     * traffic is attributed to UID of caller.\n     * <p>\n     * <b>NOTE:</b>Setting a UID disallows sharing of sockets with requests\n     * with other UIDs, which may adversely effect performance by prohibiting\n     * connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n     * and QUIC) will only be allowed if all requests have the same UID set.\n     *\n     * @param uid the UID to attribute socket traffic caused by this request.\n     ",
    "links" : [ "android.Manifest.permission#MODIFY_NETWORK_ACCOUNTING", "android.net.TrafficStats" ]
  }, {
    "name" : "private int findRequestProperty(String key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of request header in {@link #mRequestHeaders} or\n     * -1 if not found.\n     ",
    "links" : [ "#mRequestHeaders" ]
  }, {
    "name" : "private void getResponse() throws IOException",
    "returnType" : "void",
    "comment" : " Blocks until the response headers are received. ",
    "links" : [ ]
  }, {
    "name" : "private void checkHasResponseHeaders() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Checks whether response headers are received, and throws an exception if\n     * an exception occurred before headers received. This method should only be\n     * called after onResponseStarted or onFailed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Map.Entry<String, String> getHeaderFieldEntry(int pos)",
    "returnType" : "Map.Entry<String, String>",
    "comment" : " Helper method to return the response header field at position pos. ",
    "links" : [ ]
  }, {
    "name" : "private boolean isChunkedUpload()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the client has used {@link #setChunkedStreamingMode} to\n     * set chunked encoding for upload.\n     ",
    "links" : [ "#setChunkedStreamingMode" ]
  }, {
    "name" : "private Map<String, List<String>> getAllHeaders()",
    "returnType" : "Map<String, List<String>>",
    "comment" : " TODO(xunjieli): Refactor to reuse code in UrlResponseInfo.",
    "links" : [ ]
  }, {
    "name" : "private List<Map.Entry<String, String>> getAllHeadersAsList()",
    "returnType" : "List<Map.Entry<String, String>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void connect() throws IOException", "public void disconnect()", "public String getResponseMessage() throws IOException", "public int getResponseCode() throws IOException", "public Map<String, List<String>> getHeaderFields()", "public final String getHeaderField(String fieldName)", "public final String getHeaderFieldKey(int pos)", "public final String getHeaderField(int pos)", "public InputStream getInputStream() throws IOException", "public OutputStream getOutputStream() throws IOException", "private long getStreamingModeContentLength()", "private void startRequest() throws IOException", "private boolean checkTrafficStatsTag()", "private boolean checkTrafficStatsUid()", "public InputStream getErrorStream()", "public final void addRequestProperty(String key, String value)", "public final void setRequestProperty(String key, String value)", "private final void setRequestPropertyInternal(String key, String value, boolean overwrite)", "public Map<String, List<String>> getRequestProperties()", "public String getRequestProperty(String key)", "public boolean usingProxy()", "public void setConnectTimeout(int timeout)", "public void getMoreData(ByteBuffer byteBuffer) throws IOException", "public void setTrafficStatsTag(int tag)", "public void setTrafficStatsUid(int uid)", "private int findRequestProperty(String key)", "private void getResponse() throws IOException", "private void checkHasResponseHeaders() throws IOException", "private Map.Entry<String, String> getHeaderFieldEntry(int pos)", "private boolean isChunkedUpload()", "private Map<String, List<String>> getAllHeaders()", "private List<Map.Entry<String, String>> getAllHeadersAsList()" ],
  "variableNames" : [ "TAG", "CONTENT_LENGTH", "mCronetEngine", "mMessageLoop", "mRequest", "mRequestHeaders", "mTrafficStatsTagSet", "mTrafficStatsTag", "mTrafficStatsUidSet", "mTrafficStatsUid", "mInputStream", "mOutputStream", "mResponseInfo", "mException", "mOnRedirectCalled", "mHasResponseHeadersOrCompleted", "mResponseHeadersList", "mResponseHeadersMap" ]
}