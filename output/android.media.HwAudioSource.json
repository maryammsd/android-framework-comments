{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/HwAudioSource.java",
  "packageName" : "android.media",
  "className" : "HwAudioSource",
  "comment" : "\n * The HwAudioSource represents the audio playback directly from a source audio device.\n * It currently supports {@link HwAudioSource#start()} and {@link HwAudioSource#stop()} only\n * corresponding to {@link AudioSystem#startAudioSource(AudioPortConfig, AudioAttributes)}\n * and {@link AudioSystem#stopAudioSource(int)}.\n *\n * @hide\n ",
  "links" : [ "android.media.HwAudioSource#stop()", "android.media.AudioSystem#stopAudioSource(int)", "android.media.HwAudioSource#start()", "android.media.AudioSystem#startAudioSource(AudioPortConfig" ],
  "variables" : [ {
    "name" : "mAudioDeviceInfo",
    "type" : "AudioDeviceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioAttributes",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeHandle",
    "type" : "int",
    "comment" : "\n     * The value of the native handle encodes the HwAudioSource state.\n     * The native handle returned by {@link AudioSystem#startAudioSource} is either valid\n     * (aka > 0, so successfully started) or hosting an error code (negative).\n     * 0 corresponds to an untialized or stopped HwAudioSource.\n     ",
    "links" : [ "android.media.AudioSystem#startAudioSource" ]
  } ],
  "methods" : [ {
    "name" : " void playerSetVolume(boolean muting, float leftVolume, float rightVolume)",
    "returnType" : "void",
    "comment" : "\n     * TODO: sets the gain on {@link #mAudioDeviceInfo}.\n     *\n     * @param muting if true, the player is to be muted, and the volume values can be ignored\n     * @param leftVolume the left volume to use if muting is false\n     * @param rightVolume the right volume to use if muting is false\n     ",
    "links" : [ "#mAudioDeviceInfo" ]
  }, {
    "name" : " int playerApplyVolumeShaper(@NonNull VolumeShaper.Configuration configuration, @NonNull VolumeShaper.Operation operation)",
    "returnType" : "int",
    "comment" : "\n     * TODO: applies {@link VolumeShaper} on {@link #mAudioDeviceInfo}.\n     *\n     * @param configuration a {@code VolumeShaper.Configuration} object\n     *        created by {@link VolumeShaper.Configuration.Builder} or\n     *        an created from a {@code VolumeShaper} id\n     *        by the {@link VolumeShaper.Configuration} constructor.\n     * @param operation a {@code VolumeShaper.Operation}.\n     * @return\n     ",
    "links" : [ "android.media.VolumeShaper", "VolumeShaper.Configuration", "#mAudioDeviceInfo", "VolumeShaper.Configuration.Builder" ]
  }, {
    "name" : " VolumeShaper.State playerGetVolumeShaperState(int id)",
    "returnType" : "VolumeShaper.State",
    "comment" : "\n     * TODO: gets the {@link VolumeShaper} by a given id.\n     *\n     * @param id the {@code VolumeShaper} id returned from\n     *           sending a fully specified {@code VolumeShaper.Configuration}\n     *           through {@link #playerApplyVolumeShaper}\n     * @return\n     ",
    "links" : [ "android.media.VolumeShaper", "#playerApplyVolumeShaper" ]
  }, {
    "name" : " int playerSetAuxEffectSendLevel(boolean muting, float level)",
    "returnType" : "int",
    "comment" : "\n     * TODO: sets the level on {@link #mAudioDeviceInfo}.\n     *\n     * @param muting\n     * @param level\n     * @return\n     ",
    "links" : [ "#mAudioDeviceInfo" ]
  }, {
    "name" : " void playerStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void playerPause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void playerStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the playback from {@link AudioDeviceInfo}.\n     * Starts does not return any error code, caller must check {@link HwAudioSource#isPlaying} to\n     * ensure the state of the HwAudioSource encoded in {@link mNativeHandle}.\n     ",
    "links" : [ "android.media.AudioDeviceInfo", "android.media.HwAudioSource#isPlaying", "mNativeHandle" ]
  }, {
    "name" : "private int getDeviceId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPlaying()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the HwAudioSource player is playing.\n     * It checks the state of the HwAudioSource encoded in {@link HwAudioSource#isPlaying}.\n     * 0 corresponds to a stopped or uninitialized HwAudioSource.\n     * Negative value corresponds to a status reported by {@link AudioSystem#startAudioSource} to\n     * indicate a failure when trying to start the HwAudioSource.\n     *\n     * @return true if currently playing, false otherwise\n     ",
    "links" : [ "android.media.AudioSystem#startAudioSource", "android.media.HwAudioSource#isPlaying" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops the playback from {@link AudioDeviceInfo}.\n     ",
    "links" : [ "android.media.AudioDeviceInfo" ]
  } ],
  "methodNames" : [ " void playerSetVolume(boolean muting, float leftVolume, float rightVolume)", " int playerApplyVolumeShaper(@NonNull VolumeShaper.Configuration configuration, @NonNull VolumeShaper.Operation operation)", " VolumeShaper.State playerGetVolumeShaperState(int id)", " int playerSetAuxEffectSendLevel(boolean muting, float level)", " void playerStart()", " void playerPause()", " void playerStop()", "public void start()", "private int getDeviceId()", "public boolean isPlaying()", "public void stop()" ],
  "variableNames" : [ "mAudioDeviceInfo", "mAudioAttributes", "mNativeHandle" ]
}