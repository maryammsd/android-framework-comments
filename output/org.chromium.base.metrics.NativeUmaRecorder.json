{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/metrics/NativeUmaRecorder.java",
  "packageName" : "org.chromium.base.metrics",
  "className" : "NativeUmaRecorder",
  "comment" : "\n * An implementation of {@link UmaRecorder} which forwards all calls through JNI.\n *\n * Note: the JNI calls are relatively costly - avoid calling these methods in performance-critical\n * code.\n ",
  "links" : [ "org.chromium.base.metrics.UmaRecorder" ],
  "variables" : [ {
    "name" : "mNativeHints",
    "type" : "Map<String, Long>",
    "comment" : "\n     * Internally, histograms objects are cached on the Java side by their pointer\n     * values (converted to long). This is safe to do because C++ Histogram objects\n     * are never freed. Caching them on the Java side prevents needing to do costly\n     * Java String to C++ string conversions on the C++ side during lookup.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUserActionTestingCallbackNativePtrs",
    "type" : "Map<Callback<String>, Long>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void recordBooleanHistogram(String name, boolean sample)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recordExponentialHistogram(String name, int sample, int min, int max, int numBuckets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recordLinearHistogram(String name, int sample, int min, int max, int numBuckets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recordSparseHistogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void recordUserAction(String name, long elapsedRealtimeMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHistogramValueCountForTesting(String name, int sample)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHistogramTotalCountForTesting(String name)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<HistogramBucket> getHistogramSamplesForTesting(String name)",
    "returnType" : "List<HistogramBucket>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addUserActionCallbackForTesting(Callback<String> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeUserActionCallbackForTesting(Callback<String> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getNativeHint(String name)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeUpdateNativeHint(String name, long oldHint, long newHint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void recordBooleanHistogram(String name, boolean sample)", "public void recordExponentialHistogram(String name, int sample, int min, int max, int numBuckets)", "public void recordLinearHistogram(String name, int sample, int min, int max, int numBuckets)", "public void recordSparseHistogram(String name, int sample)", "public void recordUserAction(String name, long elapsedRealtimeMillis)", "public int getHistogramValueCountForTesting(String name, int sample)", "public int getHistogramTotalCountForTesting(String name)", "public List<HistogramBucket> getHistogramSamplesForTesting(String name)", "public void addUserActionCallbackForTesting(Callback<String> callback)", "public void removeUserActionCallbackForTesting(Callback<String> callback)", "private long getNativeHint(String name)", "private void maybeUpdateNativeHint(String name, long oldHint, long newHint)" ],
  "variableNames" : [ "mNativeHints", "mUserActionTestingCallbackNativePtrs" ]
}