{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/IntTrieBuilder.java",
  "packageName" : "android.icu.impl",
  "className" : "IntTrieBuilder",
  "comment" : "\n * Builder class to manipulate and generate a trie.\n * This is useful for ICU data in primitive types.\n * Provides a compact way to store information that is indexed by Unicode \n * values, such as character properties, types, keyboard values, etc. This is \n * very useful when you have a block of Unicode data that contains significant \n * values while the rest of the Unicode data is unused in the application or \n * when you have a lot of redundance, such as where all 21,000 Han ideographs \n * have the same value.  However, lookup is much faster than a hash table.\n * A trie of any primitive data type serves two purposes:\n * <UL type = round>\n *     <LI>Fast access of the indexed values.\n *     <LI>Smaller memory footprint.\n * </UL>\n * This is a direct port from the ICU4C version\n * @author             Syn Wee Quek\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_data_",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_initialValue_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_leadUnitValue_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getValue(int ch)",
    "returnType" : "int",
    "comment" : "\n     * Gets a 32 bit data from the table data\n     * @param ch codepoint which data is to be retrieved\n     * @return the 32 bit data\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getValue(int ch, boolean[] inBlockZero)",
    "returnType" : "int",
    "comment" : "\n     * Get a 32 bit data from the table data\n     * @param ch  code point for which data is to be retrieved.\n     * @param inBlockZero  Output parameter, inBlockZero[0] returns true if the\n     *                      char maps into block zero, otherwise false.\n     * @return the 32 bit data value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setValue(int ch, int value)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets a 32 bit data in the table data\n     * @param ch codepoint which data is to be set\n     * @param value to set\n     * @return true if the set is successful, otherwise \n     *              if the table has been compacted return false\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntTrie serialize(TrieBuilder.DataManipulate datamanipulate, Trie.DataManipulate triedatamanipulate)",
    "returnType" : "IntTrie",
    "comment" : "\n     * Serializes the build table with 32 bit data\n     * @param datamanipulate builder raw fold method implementation\n     * @param triedatamanipulate result trie fold method\n     * @return a new trie\n     ",
    "links" : [ ]
  }, {
    "name" : "public int serialize(OutputStream os, boolean reduceTo16Bits, TrieBuilder.DataManipulate datamanipulate) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Serializes the build table to an output stream.\n     * \n     * Compacts the build-time trie after all values are set, and then\n     * writes the serialized form onto an output stream.\n     * \n     * After this, this build-time Trie can only be serialized again and/or closed;\n     * no further values can be added.\n     * \n     * This function is the rough equivalent of utrie_seriaize() in ICU4C.\n     * \n     * @param os the output stream to which the seriaized trie will be written.\n     *         If nul, the function still returns the size of the serialized Trie.\n     * @param reduceTo16Bits If true, reduce the data size to 16 bits.  The resulting\n     *         serialized form can then be used to create a CharTrie.\n     * @param datamanipulate builder raw fold method implementation\n     * @return the number of bytes written to the output stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setRange(int start, int limit, int value, boolean overwrite)",
    "returnType" : "boolean",
    "comment" : "\n     * Set a value in a range of code points [start..limit].\n     * All code points c with start &lt;= c &lt; limit will get the value if\n     * overwrite is true or if the old value is 0.\n     * @param start the first code point to get the value\n     * @param limit one past the last code point to get the value\n     * @param value the value\n     * @param overwrite flag for whether old non-initial values are to be \n     *        overwritten\n     * @return false if a failure occurred (illegal argument or data array \n     *               overrun)\n     ",
    "links" : [ ]
  }, {
    "name" : "private int allocDataBlock()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDataBlock(int ch)",
    "returnType" : "int",
    "comment" : "\n     * No error checking for illegal arguments.\n     * @param ch codepoint to look for\n     * @return -1 if no new data block available (out of memory in data array)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void compact(boolean overlap)",
    "returnType" : "void",
    "comment" : "\n     * Compact a folded build-time trie.\n     * The compaction\n     * - removes blocks that are identical with earlier ones\n     * - overlaps adjacent blocks as much as possible (if overlap == true)\n     * - moves blocks in steps of the data granularity\n     * - moves and overlaps blocks that overlap with multiple values in the overlap region\n     *\n     * It does not\n     * - try to move and overlap blocks that are not already adjacent\n     * @param overlap flag\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int findSameDataBlock(int[] data, int dataLength, int otherBlock, int step)",
    "returnType" : "int",
    "comment" : "\n     * Find the same data block\n     * @param data array\n     * @param dataLength\n     * @param otherBlock\n     * @param step\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void fold(DataManipulate manipulate)",
    "returnType" : "void",
    "comment" : "\n     * Fold the normalization data for supplementary code points into\n     * a compact area on top of the BMP-part of the trie index,\n     * with the lead surrogates indexing this compact area.\n     *\n     * Duplicate the index values for lead surrogates:\n     * From inside the BMP area, where some may be overridden with folded values,\n     * to just after the BMP area, where they can be retrieved for\n     * code point lookups.\n     * @param manipulate fold implementation\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fillBlock(int block, int start, int limit, int value, boolean overwrite)",
    "returnType" : "void",
    "comment" : "\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getValue(int ch)", "public int getValue(int ch, boolean[] inBlockZero)", "public boolean setValue(int ch, int value)", "public IntTrie serialize(TrieBuilder.DataManipulate datamanipulate, Trie.DataManipulate triedatamanipulate)", "public int serialize(OutputStream os, boolean reduceTo16Bits, TrieBuilder.DataManipulate datamanipulate) throws IOException", "public boolean setRange(int start, int limit, int value, boolean overwrite)", "private int allocDataBlock()", "private int getDataBlock(int ch)", "private void compact(boolean overlap)", "private static final int findSameDataBlock(int[] data, int dataLength, int otherBlock, int step)", "private final void fold(DataManipulate manipulate)", "private void fillBlock(int block, int start, int limit, int value, boolean overwrite)" ],
  "variableNames" : [ "m_data_", "m_initialValue_", "m_leadUnitValue_" ]
}