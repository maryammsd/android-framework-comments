{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StackWalker.java",
  "packageName" : "java.lang",
  "className" : "StackWalker",
  "comment" : "\n * A stack walker.\n *\n * <p> The {@link StackWalker#walk walk} method opens a sequential stream\n * of {@link StackFrame StackFrame}s for the current thread and then applies\n * the given function to walk the {@code StackFrame} stream.\n * The stream reports stack frame elements in order, from the top most frame\n * that represents the execution point at which the stack was generated to\n * the bottom most frame.\n * The {@code StackFrame} stream is closed when the {@code walk} method returns.\n * If an attempt is made to reuse the closed stream,\n * {@code IllegalStateException} will be thrown.\n *\n * <p> The {@linkplain Option <em>stack walking options</em>} of a\n * {@code StackWalker} determines the information of\n * {@link StackFrame StackFrame} objects to be returned.\n * By default, stack frames of the reflection API and implementation\n * classes are {@linkplain Option#SHOW_HIDDEN_FRAMES hidden}\n * and {@code StackFrame}s have the class name and method name\n * available but not the {@link StackFrame#getDeclaringClass() Class reference}.\n *\n * <p> {@code StackWalker} is thread-safe. Multiple threads can share\n * a single {@code StackWalker} object to traverse its own stack.\n * A permission check is performed when a {@code StackWalker} is created,\n * according to the options it requests.\n * No further permission check is done at stack walking time.\n *\n * @apiNote\n * Examples\n *\n * <p>1. To find the first caller filtering a known list of implementation class:\n * <pre>{@code\n *     StackWalker walker = StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n *     Optional<Class<?>> callerClass = walker.walk(s ->\n *         s.map(StackFrame::getDeclaringClass)\n *          .filter(interestingClasses::contains)\n *          .findFirst());\n * }</pre>\n *\n * <p>2. To snapshot the top 10 stack frames of the current thread,\n * <pre>{@code\n *     List<StackFrame> stack = StackWalker.getInstance().walk(s ->\n *         s.limit(10).collect(Collectors.toList()));\n * }</pre>\n *\n * Unless otherwise noted, passing a {@code null} argument to a\n * constructor or method in this {@code StackWalker} class\n * will cause a {@link NullPointerException NullPointerException}\n * to be thrown.\n *\n * @since 9\n ",
  "links" : [ "java.lang.StackWalker#walk", "#getDeclaringClass()", "StackFrame", "java.lang.NullPointerException" ],
  "variables" : [ {
    "name" : "DEFAULT_EMPTY_OPTION",
    "type" : "EnumSet<Option>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_WALKER",
    "type" : "StackWalker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "options",
    "type" : "Set<Option>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "extendedOption",
    "type" : "ExtendedOption",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "estimateDepth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "retainClassRef",
    "type" : "boolean",
    "comment" : " cached for performance",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static StackWalker getInstance()",
    "returnType" : "StackWalker",
    "comment" : "\n     * Returns a {@code StackWalker} instance.\n     *\n     * <p> This {@code StackWalker} is configured to skip all\n     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and\n     * no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n     *\n     * @return a {@code StackWalker} configured to skip all\n     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and\n     * no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StackWalker getInstance(Option option)",
    "returnType" : "StackWalker",
    "comment" : "\n     * Returns a {@code StackWalker} instance with the given option specifying\n     * the stack frame information it can access.\n     *\n     * <p>\n     * If a security manager is present and the given {@code option} is\n     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n     * it calls its {@link SecurityManager#checkPermission checkPermission}\n     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n     *\n     * @param option {@link Option stack walking option}\n     *\n     * @return a {@code StackWalker} configured with the given option\n     *\n     * @throws SecurityException if a security manager exists and its\n     *         {@code checkPermission} method denies access.\n     ",
    "links" : [ "#RETAIN_CLASS_REFERENCE", "java.lang.SecurityManager#checkPermission", "Option" ]
  }, {
    "name" : "public static StackWalker getInstance(Set<Option> options)",
    "returnType" : "StackWalker",
    "comment" : "\n     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n     * the stack frame information it can access.  If the given {@code options}\n     * is empty, this {@code StackWalker} is configured to skip all\n     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and no\n     * {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n     *\n     * <p>\n     * If a security manager is present and the given {@code options} contains\n     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n     * it calls its {@link SecurityManager#checkPermission checkPermission}\n     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n     *\n     * @param options {@link Option stack walking option}\n     *\n     * @return a {@code StackWalker} configured with the given options\n     *\n     * @throws SecurityException if a security manager exists and its\n     *         {@code checkPermission} method denies access.\n     ",
    "links" : [ "#RETAIN_CLASS_REFERENCE", "java.lang.SecurityManager#checkPermission", "Option" ]
  }, {
    "name" : "public static StackWalker getInstance(Set<Option> options, int estimateDepth)",
    "returnType" : "StackWalker",
    "comment" : "\n     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n     * the stack frame information it can access. If the given {@code options}\n     * is empty, this {@code StackWalker} is configured to skip all\n     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and no\n     * {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n     *\n     * <p>\n     * If a security manager is present and the given {@code options} contains\n     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n     * it calls its {@link SecurityManager#checkPermission checkPermission}\n     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n     *\n     * <p>\n     * The {@code estimateDepth} specifies the estimate number of stack frames\n     * this {@code StackWalker} will traverse that the {@code StackWalker} could\n     * use as a hint for the buffer size.\n     *\n     * @param options {@link Option stack walking options}\n     * @param estimateDepth Estimate number of stack frames to be traversed.\n     *\n     * @return a {@code StackWalker} configured with the given options\n     *\n     * @throws IllegalArgumentException if {@code estimateDepth <= 0}\n     * @throws SecurityException if a security manager exists and its\n     *         {@code checkPermission} method denies access.\n     ",
    "links" : [ "#RETAIN_CLASS_REFERENCE", "java.lang.SecurityManager#checkPermission", "Option" ]
  }, {
    "name" : "private static void checkPermission(Set<Option> options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static EnumSet<Option> toEnumSet(Set<Option> options)",
    "returnType" : "EnumSet<Option>",
    "comment" : "\n     * Returns a defensive copy\n     ",
    "links" : [ ]
  }, {
    "name" : "public T walk(Function<? super Stream<StackFrame>, ? extends T> function)",
    "returnType" : "T",
    "comment" : "\n     * Applies the given function to the stream of {@code StackFrame}s\n     * for the current thread, traversing from the top frame of the stack,\n     * which is the method calling this {@code walk} method.\n     *\n     * <p>The {@code StackFrame} stream will be closed when\n     * this method returns.  When a closed {@code Stream<StackFrame>} object\n     * is reused, {@code IllegalStateException} will be thrown.\n     *\n     * @apiNote\n     * For example, to find the first 10 calling frames, first skipping those frames\n     * whose declaring class is in package {@code com.foo}:\n     * <blockquote>\n     * <pre>{@code\n     * List<StackFrame> frames = StackWalker.getInstance().walk(s ->\n     *     s.dropWhile(f -> f.getClassName().startsWith(\"com.foo.\"))\n     *      .limit(10)\n     *      .collect(Collectors.toList()));\n     * }</pre></blockquote>\n     *\n     * <p>This method takes a {@code Function} accepting a {@code Stream<StackFrame>},\n     * rather than returning a {@code Stream<StackFrame>} and allowing the\n     * caller to directly manipulate the stream. The Java virtual machine is\n     * free to reorganize a thread's control stack, for example, via\n     * deoptimization. By taking a {@code Function} parameter, this method\n     * allows access to stack frames through a stable view of a thread's control\n     * stack.\n     *\n     * <p>Parallel execution is effectively disabled and stream pipeline\n     * execution will only occur on the current thread.\n     *\n     * @implNote The implementation stabilizes the stack by anchoring a frame\n     * specific to the stack walking and ensures that the stack walking is\n     * performed above the anchored frame. When the stream object is closed or\n     * being reused, {@code IllegalStateException} will be thrown.\n     *\n     * @param function a function that takes a stream of\n     *                 {@linkplain StackFrame stack frames} and returns a result.\n     * @param <T> The type of the result of applying the function to the\n     *            stream of {@linkplain StackFrame stack frame}.\n     *\n     * @return the result of applying the function to the stream of\n     *         {@linkplain StackFrame stack frame}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super StackFrame> action)",
    "returnType" : "void",
    "comment" : "\n     * Performs the given action on each element of {@code StackFrame} stream\n     * of the current thread, traversing from the top frame of the stack,\n     * which is the method calling this {@code forEach} method.\n     *\n     * <p> This method is equivalent to calling\n     * <blockquote>\n     * {@code walk(s -> { s.forEach(action); return null; });}\n     * </blockquote>\n     *\n     * @param action an action to be performed on each {@code StackFrame}\n     *               of the stack of the current thread\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getCallerClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Gets the {@code Class} object of the caller who invoked the method\n     * that invoked {@code getCallerClass}.\n     *\n     * <p> This method filters {@linkplain Option#SHOW_REFLECT_FRAMES reflection\n     * frames}, {@link java.lang.invoke.MethodHandle}, and\n     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} regardless of the\n     * {@link Option#SHOW_REFLECT_FRAMES SHOW_REFLECT_FRAMES}\n     * and {@link Option#SHOW_HIDDEN_FRAMES SHOW_HIDDEN_FRAMES} options\n     * this {@code StackWalker} has been configured with.\n     *\n     * <p> This method should be called when a caller frame is present.  If\n     * it is called from the bottom most frame on the stack,\n     * {@code IllegalCallerException} will be thrown.\n     *\n     * <p> This method throws {@code UnsupportedOperationException}\n     * if this {@code StackWalker} is not configured with the\n     * {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option.\n     *\n     * @apiNote\n     * For example, {@code Util::getResourceBundle} loads a resource bundle\n     * on behalf of the caller.  It invokes {@code getCallerClass} to identify\n     * the class whose method called {@code Util::getResourceBundle}.\n     * Then, it obtains the class loader of that class, and uses\n     * the class loader to load the resource bundle. The caller class\n     * in this example is {@code MyTool}.\n     *\n     * <pre>{@code\n     * class Util {\n     *     private final StackWalker walker = StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n     *     public ResourceBundle getResourceBundle(String bundleName) {\n     *         Class<?> caller = walker.getCallerClass();\n     *         return ResourceBundle.getBundle(bundleName, Locale.getDefault(), caller.getClassLoader());\n     *     }\n     * }\n     *\n     * class MyTool {\n     *     private final Util util = new Util();\n     *     private void init() {\n     *         ResourceBundle rb = util.getResourceBundle(\"mybundle\");\n     *     }\n     * }\n     * }</pre>\n     *\n     * An equivalent way to find the caller class using the\n     * {@link StackWalker#walk walk} method is as follows\n     * (filtering the reflection frames, {@code MethodHandle} and hidden frames\n     * not shown below):\n     * <pre>{@code\n     *     Optional<Class<?>> caller = walker.walk(s ->\n     *         s.map(StackFrame::getDeclaringClass)\n     *          .skip(2)\n     *          .findFirst());\n     * }</pre>\n     *\n     * When the {@code getCallerClass} method is called from a method that\n     * is the bottom most frame on the stack,\n     * for example, {@code static public void main} method launched by the\n     * {@code java} launcher, or a method invoked from a JNI attached thread,\n     * {@code IllegalCallerException} is thrown.\n     *\n     * @return {@code Class} object of the caller's caller invoking this method.\n     *\n     * @throws UnsupportedOperationException if this {@code StackWalker}\n     *         is not configured with {@link Option#RETAIN_CLASS_REFERENCE\n     *         Option.RETAIN_CLASS_REFERENCE}.\n     * @throws IllegalCallerException if there is no caller frame, i.e.\n     *         when this {@code getCallerClass} method is called from a method\n     *         which is the last frame on the stack.\n     ",
    "links" : [ "#RETAIN_CLASS_REFERENCE", "java.lang.StackWalker#walk", "java.lang.invoke.MethodHandle", "#SHOW_REFLECT_FRAMES", "#RETAIN_CLASS_REFERENCEOption.RETAIN_CLASS_REFERENCE", "#SHOW_HIDDEN_FRAMES" ]
  }, {
    "name" : " static StackWalker newInstance(Set<Option> options, ExtendedOption extendedOption)",
    "returnType" : "StackWalker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int estimateDepth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasOption(Option option)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasLocalsOperandsOption()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static StackWalker getInstance()", "public static StackWalker getInstance(Option option)", "public static StackWalker getInstance(Set<Option> options)", "public static StackWalker getInstance(Set<Option> options, int estimateDepth)", "private static void checkPermission(Set<Option> options)", "private static EnumSet<Option> toEnumSet(Set<Option> options)", "public T walk(Function<? super Stream<StackFrame>, ? extends T> function)", "public void forEach(Consumer<? super StackFrame> action)", "public Class<?> getCallerClass()", " static StackWalker newInstance(Set<Option> options, ExtendedOption extendedOption)", " int estimateDepth()", " boolean hasOption(Option option)", " boolean hasLocalsOperandsOption()" ],
  "variableNames" : [ "DEFAULT_EMPTY_OPTION", "DEFAULT_WALKER", "options", "extendedOption", "estimateDepth", "retainClassRef" ]
}