{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/ApiVersion.java",
  "packageName" : "org.chromium.net",
  "className" : "ApiVersion",
  "comment" : "\n * Version based on chrome/VERSION.\n * {@hide as it's only used internally}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CRONET_VERSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "API_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_COMPATIBLE_API_LEVEL",
    "type" : "int",
    "comment" : "\n     * The minimum API level of implementations that are compatible with this API.\n     * The last API level which broke backwards API compatibility. In other words, the\n     * Cronet API that this class is part of won't work with Cronet implementations that implement\n     * API levels less than this value. That is if\n     * ImplVersion.getApiLevel() < ApiVersion.getApiLevel(), then the Cronet implementation\n     * providing ImplVersion cannot be used with the Cronet API providing ApiVersion; if they are\n     * used together various unexpected Errors, like AbstractMethodError, may result.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_CHANGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getCronetVersionWithLastChange()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMaximumAvailableApiLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns API level of the API linked into the application. This is the maximum API\n     * level the application can use, even if the application is run with a newer implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getApiLevel()",
    "returnType" : "int",
    "comment" : "\n     * The minimum API level of implementations that are compatible with this API.\n     * Returns the last API level which broke backwards API compatibility. In other words, the\n     * Cronet API that this class is part of won't work with Cronet implementations that implement\n     * API levels less than this value. That is if\n     * ImplVersion.getApiLevel() < ApiVersion.getApiLevel(), then the Cronet implementation\n     * providing ImplVersion cannot be used with the Cronet API providing ApiVersion; if they are\n     * used together various unexpected Errors, like AbstractMethodError, may result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCronetVersion()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getLastChange()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getCronetVersionWithLastChange()", "public static int getMaximumAvailableApiLevel()", "public static int getApiLevel()", "public static String getCronetVersion()", "public static String getLastChange()" ],
  "variableNames" : [ "CRONET_VERSION", "API_LEVEL", "MIN_COMPATIBLE_API_LEVEL", "LAST_CHANGE" ]
}