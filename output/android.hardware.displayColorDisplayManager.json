{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/display/ColorDisplayManager.java",
  "packageName" : "android.hardware.display",
  "className" : "ColorDisplayManager",
  "comment" : "\n * Manages the display's color transforms and modes.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "CAPABILITY_NONE",
    "type" : "int",
    "comment" : "\n     * The device does not support color transforms.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_PROTECTED_CONTENT",
    "type" : "int",
    "comment" : "\n     * The device can use GPU composition on protected content (layers whose buffers are protected\n     * in the trusted memory zone).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_HARDWARE_ACCELERATION_GLOBAL",
    "type" : "int",
    "comment" : "\n     * The device's hardware can efficiently apply transforms to the entire display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_HARDWARE_ACCELERATION_PER_APP",
    "type" : "int",
    "comment" : "\n     * The device's hardware can efficiently apply transforms to a specific Surface (window) so\n     * that apps can be transformed independently of one another.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTO_MODE_DISABLED",
    "type" : "int",
    "comment" : "\n     * Auto mode value to prevent Night display from being automatically activated. It can still\n     * be activated manually via {@link #setNightDisplayActivated(boolean)}.\n     *\n     * @see #setNightDisplayAutoMode(int)\n     *\n     * @hide\n     ",
    "links" : [ "#setNightDisplayActivated" ]
  }, {
    "name" : "AUTO_MODE_CUSTOM_TIME",
    "type" : "int",
    "comment" : "\n     * Auto mode value to automatically activate Night display at a specific start and end time.\n     *\n     * @see #setNightDisplayAutoMode(int)\n     * @see #setNightDisplayCustomStartTime(LocalTime)\n     * @see #setNightDisplayCustomEndTime(LocalTime)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUTO_MODE_TWILIGHT",
    "type" : "int",
    "comment" : "\n     * Auto mode value to automatically activate Night display from sunset to sunrise.\n     *\n     * @see #setNightDisplayAutoMode(int)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_NATURAL",
    "type" : "int",
    "comment" : "\n     * Color mode with natural colors.\n     *\n     * @hide\n     * @see #setColorMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_BOOSTED",
    "type" : "int",
    "comment" : "\n     * Color mode with boosted colors.\n     *\n     * @hide\n     * @see #setColorMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_SATURATED",
    "type" : "int",
    "comment" : "\n     * Color mode with saturated colors.\n     *\n     * @hide\n     * @see #setColorMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_AUTOMATIC",
    "type" : "int",
    "comment" : "\n     * Color mode with automatic colors.\n     *\n     * @hide\n     * @see #setColorMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "VENDOR_COLOR_MODE_RANGE_MIN",
    "type" : "int",
    "comment" : " 0x100",
    "links" : [ ]
  }, {
    "name" : "VENDOR_COLOR_MODE_RANGE_MAX",
    "type" : "int",
    "comment" : " 0x1ff",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "ColorDisplayManagerInternal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetricsLogger",
    "type" : "MetricsLogger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean setNightDisplayActivated(boolean activated)",
    "returnType" : "boolean",
    "comment" : "\n     * (De)activates the night display transform.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNightDisplayActivated()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the night display transform is currently active.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setNightDisplayColorTemperature(int temperature)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the color temperature of the night display transform.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNightDisplayColorTemperature()",
    "returnType" : "int",
    "comment" : "\n     * Gets the color temperature of the night display transform.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNightDisplayAutoMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current auto mode value controlling when Night display will be automatically\n     * activated. One of {@link #AUTO_MODE_DISABLED}, {@link #AUTO_MODE_CUSTOM_TIME}, or\n     * {@link #AUTO_MODE_TWILIGHT}.\n     *\n     * @hide\n     ",
    "links" : [ "#AUTO_MODE_DISABLED", "#AUTO_MODE_CUSTOM_TIME", "#AUTO_MODE_TWILIGHT" ]
  }, {
    "name" : "public int getNightDisplayAutoModeRaw()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current auto mode value, without validation, or {@code 1} if the auto mode has\n     * never been set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setNightDisplayAutoMode(@AutoMode int autoMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the current auto mode value controlling when Night display will be automatically\n     * activated. One of {@link #AUTO_MODE_DISABLED}, {@link #AUTO_MODE_CUSTOM_TIME}, or\n     * {@link #AUTO_MODE_TWILIGHT}.\n     *\n     * @param autoMode the new auto mode to use\n     * @return {@code true} if new auto mode was set successfully\n     *\n     * @hide\n     ",
    "links" : [ "#AUTO_MODE_DISABLED", "#AUTO_MODE_CUSTOM_TIME", "#AUTO_MODE_TWILIGHT" ]
  }, {
    "name" : "public LocalTime getNightDisplayCustomStartTime()",
    "returnType" : "LocalTime",
    "comment" : "\n     * Returns the local time when Night display will be automatically activated when using\n     * {@link ColorDisplayManager#AUTO_MODE_CUSTOM_TIME}.\n     *\n     * @hide\n     ",
    "links" : [ "ColorDisplayManager#AUTO_MODE_CUSTOM_TIME" ]
  }, {
    "name" : "public boolean setNightDisplayCustomStartTime(@NonNull LocalTime startTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the local time when Night display will be automatically activated when using\n     * {@link ColorDisplayManager#AUTO_MODE_CUSTOM_TIME}.\n     *\n     * @param startTime the local time to automatically activate Night display\n     * @return {@code true} if the new custom start time was set successfully\n     *\n     * @hide\n     ",
    "links" : [ "ColorDisplayManager#AUTO_MODE_CUSTOM_TIME" ]
  }, {
    "name" : "public LocalTime getNightDisplayCustomEndTime()",
    "returnType" : "LocalTime",
    "comment" : "\n     * Returns the local time when Night display will be automatically deactivated when using\n     * {@link #AUTO_MODE_CUSTOM_TIME}.\n     *\n     * @hide\n     ",
    "links" : [ "#AUTO_MODE_CUSTOM_TIME" ]
  }, {
    "name" : "public boolean setNightDisplayCustomEndTime(@NonNull LocalTime endTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the local time when Night display will be automatically deactivated when using\n     * {@link #AUTO_MODE_CUSTOM_TIME}.\n     *\n     * @param endTime the local time to automatically deactivate Night display\n     * @return {@code true} if the new custom end time was set successfully\n     *\n     * @hide\n     ",
    "links" : [ "#AUTO_MODE_CUSTOM_TIME" ]
  }, {
    "name" : "public void setColorMode(int colorMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current display color mode.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColorMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current display color mode.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceColorManaged()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the device has a wide color gamut display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setSaturationLevel(@IntRange(from = 0, to = 100) int saturationLevel)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the level of color saturation to apply to the display.\n     *\n     * @param saturationLevel 0-100 (inclusive), where 100 is full saturation\n     * @return whether the saturation level change was applied successfully\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSaturationActivated()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether or not a non-default saturation level is currently applied to the display.\n     *\n     * @return {@code true} if the display is not at full saturation\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setAppSaturationLevel(@NonNull String packageName, @IntRange(from = 0, to = 100) int saturationLevel)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the level of color saturation to apply to a specific app.\n     *\n     * @param packageName the package name of the app whose windows should be desaturated\n     * @param saturationLevel 0-100 (inclusive), where 100 is full saturation\n     * @return whether the saturation level change was applied successfully\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDisplayWhiteBalanceEnabled(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "\n     * Enables or disables display white balance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDisplayWhiteBalanceEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether display white balance is currently enabled. Even if enabled, it may or may\n     * not be active, if another transform with higher priority is active.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNightDisplayAvailable(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if Night Display is supported by the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMinimumColorTemperature(Context context)",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum allowed color temperature (in Kelvin) to tint the display when\n     * activated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaximumColorTemperature(Context context)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum allowed color temperature (in Kelvin) to tint the display when\n     * activated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDisplayWhiteBalanceAvailable(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if display white balance is supported by the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isColorTransformAccelerated(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the color transforms are color accelerated. Some transforms are experimental only\n     * on non-accelerated platforms due to the performance implications.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTransformCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Returns the available software and hardware color transform capabilities of this device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areAccessibilityTransformsEnabled(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether accessibility transforms are currently enabled, which determines whether\n     * color modes are currently configurable for this device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private MetricsLogger getMetricsLogger()",
    "returnType" : "MetricsLogger",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "CAPABILITY_NONE", "CAPABILITY_PROTECTED_CONTENT", "CAPABILITY_HARDWARE_ACCELERATION_GLOBAL", "CAPABILITY_HARDWARE_ACCELERATION_PER_APP", "AUTO_MODE_DISABLED", "AUTO_MODE_CUSTOM_TIME", "AUTO_MODE_TWILIGHT", "COLOR_MODE_NATURAL", "COLOR_MODE_BOOSTED", "COLOR_MODE_SATURATED", "COLOR_MODE_AUTOMATIC", "VENDOR_COLOR_MODE_RANGE_MIN", "VENDOR_COLOR_MODE_RANGE_MAX", "mManager", "mMetricsLogger" ],
  "methodNames" : [ "public boolean setNightDisplayActivated(boolean activated)", "public boolean isNightDisplayActivated()", "public boolean setNightDisplayColorTemperature(int temperature)", "public int getNightDisplayColorTemperature()", "public int getNightDisplayAutoMode()", "public int getNightDisplayAutoModeRaw()", "public boolean setNightDisplayAutoMode(@AutoMode int autoMode)", "public LocalTime getNightDisplayCustomStartTime()", "public boolean setNightDisplayCustomStartTime(@NonNull LocalTime startTime)", "public LocalTime getNightDisplayCustomEndTime()", "public boolean setNightDisplayCustomEndTime(@NonNull LocalTime endTime)", "public void setColorMode(int colorMode)", "public int getColorMode()", "public boolean isDeviceColorManaged()", "public boolean setSaturationLevel(@IntRange(from = 0, to = 100) int saturationLevel)", "public boolean isSaturationActivated()", "public boolean setAppSaturationLevel(@NonNull String packageName, @IntRange(from = 0, to = 100) int saturationLevel)", "public boolean setDisplayWhiteBalanceEnabled(boolean enabled)", "public boolean isDisplayWhiteBalanceEnabled()", "public static boolean isNightDisplayAvailable(Context context)", "public static int getMinimumColorTemperature(Context context)", "public static int getMaximumColorTemperature(Context context)", "public static boolean isDisplayWhiteBalanceAvailable(Context context)", "public static boolean isColorTransformAccelerated(Context context)", "public int getTransformCapabilities()", "public static boolean areAccessibilityTransformsEnabled(Context context)", "private MetricsLogger getMetricsLogger()" ]
}