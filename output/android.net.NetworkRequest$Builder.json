{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkRequest.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : "\n     * Builder used to create {@link NetworkRequest} objects.  Specify the Network features\n     * needed in terms of {@link NetworkCapabilities} features\n     ",
  "links" : [ "android.net.NetworkCapabilities", "android.net.NetworkRequest" ],
  "variables" : [ {
    "name" : "VCN_SUPPORTED_CAPABILITIES",
    "type" : "List<Integer>",
    "comment" : "\n         * Capabilities that are currently compatible with VCN networks.\n         ",
    "links" : [ ]
  }, {
    "name" : "mNetworkCapabilities",
    "type" : "NetworkCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldDeduceNotVcnManaged",
    "type" : "boolean",
    "comment" : " the NetworkRequest object is built.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public NetworkRequest build()",
    "returnType" : "NetworkRequest",
    "comment" : "\n         * Build {@link NetworkRequest} give the current set of capabilities.\n         ",
    "links" : [ "android.net.NetworkRequest" ]
  }, {
    "name" : "public Builder addCapability(@NetworkCapabilities.NetCapability int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Add the given capability requirement to this builder.  These represent\n         * the requested network's required capabilities.  Note that when searching\n         * for a network to satisfy a request, all capabilities requested must be\n         * satisfied.\n         *\n         * @param capability The capability to add.\n         * @return The builder to facilitate chaining\n         *         {@code builder.addCapability(...).addCapability();}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeCapability(@NetworkCapabilities.NetCapability int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes (if found) the given capability from this builder instance.\n         *\n         * @param capability The capability to remove.\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCapabilities(NetworkCapabilities nc)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@code NetworkCapabilities} for this builder instance,\n         * overriding any capabilities that had been previously set.\n         *\n         * @param nc The superseding {@code NetworkCapabilities} instance.\n         * @return The builder to facilitate chaining.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUids(@Nullable Set<Range<Integer>> uids)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets this request to match only networks that apply to the specified UIDs.\n         *\n         * By default, the set of UIDs is the UID of the calling app, and this request will match\n         * any network that applies to the app. Setting it to {@code null} will observe any\n         * network on the system, even if it does not apply to this app. In this case, any\n         * {@link NetworkSpecifier} set on this request will be redacted or removed to prevent the\n         * application deducing restricted information such as location.\n         *\n         * @param uids The UIDs as a set of {@code Range<Integer>}, or null for everything.\n         * @return The builder to facilitate chaining.\n         * @hide\n         ",
    "links" : [ "android.net.NetworkSpecifier" ]
  }, {
    "name" : "public Builder addForbiddenCapability(@NetworkCapabilities.NetCapability int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a capability that must not exist in the requested network.\n         * <p>\n         * If the capability was previously added to the list of required capabilities (for\n         * example, it was there by default or added using {@link #addCapability(int)} method), then\n         * it will be removed from the list of required capabilities as well.\n         *\n         * @see #addCapability(int)\n         *\n         * @param capability The capability to add to forbidden capability list.\n         * @return The builder to facilitate chaining.\n         *\n         * @hide\n         ",
    "links" : [ "#addCapability(int)" ]
  }, {
    "name" : "public Builder removeForbiddenCapability(@NetworkCapabilities.NetCapability int capability)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes (if found) the given forbidden capability from this builder instance.\n         *\n         * @param capability The forbidden capability to remove.\n         * @return The builder to facilitate chaining.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder clearCapabilities()",
    "returnType" : "Builder",
    "comment" : "\n         * Completely clears all the {@code NetworkCapabilities} from this builder instance,\n         * removing even the capabilities that are set by default when the object is constructed.\n         * Also removes any set forbidden capabilities.\n         *\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addTransportType(@NetworkCapabilities.Transport int transportType)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds the given transport requirement to this builder.  These represent\n         * the set of allowed transports for the request.  Only networks using one\n         * of these transports will satisfy the request.  If no particular transports\n         * are required, none should be specified here.\n         *\n         * @param transportType The transport type to add.\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeTransportType(@NetworkCapabilities.Transport int transportType)",
    "returnType" : "Builder",
    "comment" : "\n         * Removes (if found) the given transport from this builder instance.\n         *\n         * @param transportType The transport type to remove.\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLinkUpstreamBandwidthKbps(int upKbps)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLinkDownstreamBandwidthKbps(int downKbps)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNetworkSpecifier(String networkSpecifier)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the optional bearer specific network specifier.\n         * This has no meaning if a single transport is also not specified, so calling\n         * this without a single transport set will generate an exception, as will\n         * subsequently adding or removing transports after this is set.\n         * </p>\n         * If the {@code networkSpecifier} is provided, it shall be interpreted as follows:\n         * <ul>\n         * <li>If the specifier can be parsed as an integer, it will be treated as a\n         * {@link android.net TelephonyNetworkSpecifier}, and the provided integer will be\n         * interpreted as a SubscriptionId.\n         * <li>If the value is an ethernet interface name, it will be treated as such.\n         * <li>For all other cases, the behavior is undefined.\n         * </ul>\n         *\n         * @param networkSpecifier A {@code String} of either a SubscriptionId in cellular\n         *                         network request or an ethernet interface name in ethernet\n         *                         network request.\n         *\n         * @deprecated Use {@link #setNetworkSpecifier(NetworkSpecifier)} instead.\n         ",
    "links" : [ "android.net", "#setNetworkSpecifier(NetworkSpecifier)" ]
  }, {
    "name" : "public Builder setNetworkSpecifier(NetworkSpecifier networkSpecifier)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the optional bearer specific network specifier.\n         * This has no meaning if a single transport is also not specified, so calling\n         * this without a single transport set will generate an exception, as will\n         * subsequently adding or removing transports after this is set.\n         * </p>\n         *\n         * @param networkSpecifier A concrete, parcelable framework class that extends\n         *                         NetworkSpecifier.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSignalStrength(int signalStrength)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the signal strength. This is a signed integer, with higher values indicating a\n         * stronger signal. The exact units are bearer-dependent. For example, Wi-Fi uses the same\n         * RSSI units reported by WifiManager.\n         * <p>\n         * Note that when used to register a network callback, this specifies the minimum acceptable\n         * signal strength. When received as the state of an existing network it specifies the\n         * current value. A value of {@code SIGNAL_STRENGTH_UNSPECIFIED} means no value when\n         * received and has no effect when requesting a callback.\n         *\n         * <p>This method requires the caller to hold the\n         * {@link android.Manifest.permission#NETWORK_SIGNAL_STRENGTH_WAKEUP} permission\n         *\n         * @param signalStrength the bearer-specific signal strength.\n         * @hide\n         ",
    "links" : [ "android.Manifest.permission#NETWORK_SIGNAL_STRENGTH_WAKEUP" ]
  }, {
    "name" : "private void deduceNotVcnManagedCapability(final NetworkCapabilities nc)",
    "returnType" : "void",
    "comment" : "\n         * Deduce the NET_CAPABILITY_NOT_VCN_MANAGED capability from other capabilities\n         * and user intention, which includes:\n         *   1. For the requests that don't have anything besides\n         *      {@link #VCN_SUPPORTED_CAPABILITIES}, add the NET_CAPABILITY_NOT_VCN_MANAGED to\n         *      allow the callers automatically utilize VCN networks if available.\n         *   2. For the requests that explicitly add or remove NET_CAPABILITY_NOT_VCN_MANAGED,\n         *      or has clear intention of tracking specific network,\n         *      do not alter them to allow user fire request that suits their need.\n         *\n         * @hide\n         ",
    "links" : [ "#VCN_SUPPORTED_CAPABILITIES" ]
  }, {
    "name" : "public Builder setSubscriptionIds(@NonNull Set<Integer> subIds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the optional subscription ID set.\n         * <p>\n         * This specify the subscription IDs requirement.\n         * A network will satisfy this request only if it matches one of the subIds in this set.\n         * An empty set matches all networks, including those without a subId.\n         *\n         * <p>Registering a NetworkRequest with a non-empty set of subIds requires the\n         * NETWORK_FACTORY permission.\n         *\n         * @param subIds A {@code Set} that represents subscription IDs.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIncludeOtherUidNetworks(boolean include)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies whether the built request should also match networks that do not apply to the\n         * calling UID.\n         *\n         * By default, the built request will only match networks that apply to the calling UID.\n         * If this method is called with {@code true}, the built request will match any network on\n         * the system that matches the other parameters of the request. In this case, any\n         * information in the built request that is subject to redaction for security or privacy\n         * purposes, such as a {@link NetworkSpecifier}, will be redacted or removed to prevent the\n         * application deducing sensitive information.\n         *\n         * @param include Whether to match networks that do not apply to the calling UID.\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ "android.net.NetworkSpecifier" ]
  } ],
  "methodNames" : [ "public NetworkRequest build()", "public Builder addCapability(@NetworkCapabilities.NetCapability int capability)", "public Builder removeCapability(@NetworkCapabilities.NetCapability int capability)", "public Builder setCapabilities(NetworkCapabilities nc)", "public Builder setUids(@Nullable Set<Range<Integer>> uids)", "public Builder addForbiddenCapability(@NetworkCapabilities.NetCapability int capability)", "public Builder removeForbiddenCapability(@NetworkCapabilities.NetCapability int capability)", "public Builder clearCapabilities()", "public Builder addTransportType(@NetworkCapabilities.Transport int transportType)", "public Builder removeTransportType(@NetworkCapabilities.Transport int transportType)", "public Builder setLinkUpstreamBandwidthKbps(int upKbps)", "public Builder setLinkDownstreamBandwidthKbps(int downKbps)", "public Builder setNetworkSpecifier(String networkSpecifier)", "public Builder setNetworkSpecifier(NetworkSpecifier networkSpecifier)", "public Builder setSignalStrength(int signalStrength)", "private void deduceNotVcnManagedCapability(final NetworkCapabilities nc)", "public Builder setSubscriptionIds(@NonNull Set<Integer> subIds)", "public Builder setIncludeOtherUidNetworks(boolean include)" ],
  "variableNames" : [ "VCN_SUPPORTED_CAPABILITIES", "mNetworkCapabilities", "mShouldDeduceNotVcnManaged" ]
}