{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/InputMethod.java",
  "packageName" : "android.accessibilityservice",
  "className" : "AccessibilityInputConnection",
  "comment" : "\n     * This class provides the allowed list of {@link InputConnection} APIs for\n     * accessibility services.\n     ",
  "links" : [ "android.view.inputmethod.InputConnection" ],
  "variables" : [ {
    "name" : "mIc",
    "type" : "RemoteAccessibilityInputConnection",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void commitText(@NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "void",
    "comment" : "\n         * Commit text to the text box and set the new cursor position. This method is\n         * used to allow the IME to provide extra information while setting up text.\n         *\n         * <p>This method commits the contents of the currently composing text, and then\n         * moves the cursor according to {@code newCursorPosition}. If there\n         * is no composing text when this method is called, the new text is\n         * inserted at the cursor position, removing text inside the selection\n         * if any.\n         *\n         * <p>Calling this method will cause the editor to call\n         * {@link #onUpdateSelection(int, int, int, int,\n         * int, int)} on the current accessibility service after the batch input is over.\n         * <strong>Editor authors</strong>, for this to happen you need to\n         * make the changes known to the accessibility service by calling\n         * {@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)},\n         * but be careful to wait until the batch edit is over if one is\n         * in progress.</p>\n         *\n         * @param text The text to commit. This may include styles.\n         * @param newCursorPosition The new cursor position around the text,\n         *        in Java characters. If > 0, this is relative to the end\n         *        of the text - 1; if <= 0, this is relative to the start\n         *        of the text. So a value of 1 will always advance the cursor\n         *        to the position after the full text being inserted. Note that\n         *        this means you can't position the cursor within the text,\n         *        because the editor can make modifications to the text\n         *        you are providing so it is not possible to correctly specify\n         *        locations there.\n         * @param textAttribute The extra information about the text.\n         ",
    "links" : [ "android.view.inputmethod.InputMethodManager#updateSelection(android.view.View", "#onUpdateSelection(int" ]
  }, {
    "name" : "public void setSelection(int start, int end)",
    "returnType" : "void",
    "comment" : "\n         * Set the selection of the text editor. To set the cursor\n         * position, start and end should have the same value.\n         *\n         * <p>Since this moves the cursor, calling this method will cause\n         * the editor to call\n         * {@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int,\n         * int,int, int)} on the current IME after the batch input is over.\n         * <strong>Editor authors</strong>, for this to happen you need to\n         * make the changes known to the input method by calling\n         * {@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)},\n         * but be careful to wait until the batch edit is over if one is\n         * in progress.</p>\n         *\n         * <p>This has no effect on the composing region which must stay\n         * unchanged. The order of start and end is not important. In\n         * effect, the region from start to end and the region from end to\n         * start is the same. Editor authors, be ready to accept a start\n         * that is greater than end.</p>\n         *\n         * @param start the character index where the selection should start.\n         * @param end the character index where the selection should end.\n         ",
    "links" : [ "android.inputmethodservice.InputMethodService#onUpdateSelection(int", "android.view.inputmethod.InputMethodManager#updateSelection(android.view.View" ]
  }, {
    "name" : "public SurroundingText getSurroundingText(@IntRange(from = 0) int beforeLength, @IntRange(from = 0) int afterLength, @InputConnection.GetTextType int flags)",
    "returnType" : "SurroundingText",
    "comment" : "\n         * Gets the surrounding text around the current cursor, with <var>beforeLength</var>\n         * characters of text before the cursor (start of the selection), <var>afterLength</var>\n         * characters of text after the cursor (end of the selection), and all of the selected\n         * text. The range are for java characters, not glyphs that can be multiple characters.\n         *\n         * <p>This method may fail either if the input connection has become invalid (such as its\n         * process crashing), or the client is taking too long to respond with the text (it is\n         * given a couple seconds to return), or the protocol is not supported. In any of these\n         * cases, null is returned.\n         *\n         * <p>This method does not affect the text in the editor in any way, nor does it affect the\n         * selection or composing spans.</p>\n         *\n         * <p>If {@link InputConnection#GET_TEXT_WITH_STYLES} is supplied as flags, the editor\n         * should return a {@link android.text.Spanned} with all the spans set on the text.</p>\n         *\n         * <p><strong>Accessibility service authors:</strong> please consider this will trigger an\n         * IPC round-trip that will take some time. Assume this method consumes a lot of time.\n         *\n         * @param beforeLength The expected length of the text before the cursor.\n         * @param afterLength The expected length of the text after the cursor.\n         * @param flags Supplies additional options controlling how the text is returned. May be\n         *              either {@code 0} or {@link InputConnection#GET_TEXT_WITH_STYLES}.\n         * @return an {@link android.view.inputmethod.SurroundingText} object describing the\n         * surrounding text and state of selection, or null if the input connection is no longer\n         * valid, or the editor can't comply with the request for some reason, or the application\n         * does not implement this method. The length of the returned text might be less than the\n         * sum of <var>beforeLength</var> and <var>afterLength</var> .\n         * @throws IllegalArgumentException if {@code beforeLength} or {@code afterLength} is\n         * negative.\n         ",
    "links" : [ "android.text.Spanned", "android.view.inputmethod.InputConnection#GET_TEXT_WITH_STYLES", "android.view.inputmethod.SurroundingText" ]
  }, {
    "name" : "public void deleteSurroundingText(int beforeLength, int afterLength)",
    "returnType" : "void",
    "comment" : "\n         * Delete <var>beforeLength</var> characters of text before the\n         * current cursor position, and delete <var>afterLength</var>\n         * characters of text after the current cursor position, excluding\n         * the selection. Before and after refer to the order of the\n         * characters in the string, not to their visual representation:\n         * this means you don't have to figure out the direction of the\n         * text and can just use the indices as-is.\n         *\n         * <p>The lengths are supplied in Java chars, not in code points\n         * or in glyphs.</p>\n         *\n         * <p>Since this method only operates on text before and after the\n         * selection, it can't affect the contents of the selection. This\n         * may affect the composing span if the span includes characters\n         * that are to be deleted, but otherwise will not change it. If\n         * some characters in the composing span are deleted, the\n         * composing span will persist but get shortened by however many\n         * chars inside it have been removed.</p>\n         *\n         * <p><strong>Accessibility service authors:</strong> please be careful not to\n         * delete only half of a surrogate pair. Also take care not to\n         * delete more characters than are in the editor, as that may have\n         * ill effects on the application. Calling this method will cause\n         * the editor to call {@link InputMethod#onUpdateSelection(int, int, int, int, int, int)}\n         * on your service after the batch input is over.</p>\n         *\n         * <p><strong>Editor authors:</strong> please be careful of race\n         * conditions in implementing this call. An IME can make a change\n         * to the text or change the selection position and use this\n         * method right away; you need to make sure the effects are\n         * consistent with the results of the latest edits. Also, although\n         * the IME should not send lengths bigger than the contents of the\n         * string, you should check the values for overflows and trim the\n         * indices to the size of the contents to avoid crashes. Since\n         * this changes the contents of the editor, you need to make the\n         * changes known to the input method by calling\n         * {@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)},\n         * but be careful to wait until the batch edit is over if one is\n         * in progress.</p>\n         *\n         * @param beforeLength The number of characters before the cursor to be deleted, in code\n         *        unit. If this is greater than the number of existing characters between the\n         *        beginning of the text and the cursor, then this method does not fail but deletes\n         *        all the characters in that range.\n         * @param afterLength The number of characters after the cursor to be deleted, in code unit.\n         *        If this is greater than the number of existing characters between the cursor and\n         *        the end of the text, then this method does not fail but deletes all the characters\n         *        in that range.\n         ",
    "links" : [ "android.accessibilityservice.InputMethod#onUpdateSelection(int", "android.view.inputmethod.InputMethodManager#updateSelection(android.view.View" ]
  }, {
    "name" : "public void sendKeyEvent(@NonNull KeyEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Send a key event to the process that is currently attached\n         * through this input connection. The event will be dispatched\n         * like a normal key event, to the currently focused view; this\n         * generally is the view that is providing this InputConnection,\n         * but due to the asynchronous nature of this protocol that can\n         * not be guaranteed and the focus may have changed by the time\n         * the event is received.\n         *\n         * <p>This method can be used to send key events to the\n         * application. For example, an on-screen keyboard may use this\n         * method to simulate a hardware keyboard. There are three types\n         * of standard keyboards, numeric (12-key), predictive (20-key)\n         * and ALPHA (QWERTY). You can specify the keyboard type by\n         * specify the device id of the key event.</p>\n         *\n         * <p>You will usually want to set the flag\n         * {@link KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD}\n         * on all key event objects you give to this API; the flag will\n         * not be set for you.</p>\n         *\n         * <p>Note that it's discouraged to send such key events in normal\n         * operation; this is mainly for use with\n         * {@link android.text.InputType#TYPE_NULL} type text fields. Use\n         * the {@link #commitText} family of methods to send text to the\n         * application instead.</p>\n         *\n         * @param event The key event.\n         *\n         * @see KeyEvent\n         * @see KeyCharacterMap#NUMERIC\n         * @see KeyCharacterMap#PREDICTIVE\n         * @see KeyCharacterMap#ALPHA\n         ",
    "links" : [ "android.view.KeyEvent#FLAG_SOFT_KEYBOARD", "#commitText", "android.text.InputType#TYPE_NULL" ]
  }, {
    "name" : "public void performEditorAction(int editorAction)",
    "returnType" : "void",
    "comment" : "\n         * Have the editor perform an action it has said it can do.\n         *\n         * @param editorAction This must be one of the action constants for\n         * {@link EditorInfo#imeOptions EditorInfo.imeOptions}, such as\n         * {@link EditorInfo#IME_ACTION_GO EditorInfo.EDITOR_ACTION_GO}, or the value of\n         * {@link EditorInfo#actionId EditorInfo.actionId} if a custom action is available.\n         ",
    "links" : [ "android.view.inputmethod.EditorInfo#actionId", "android.view.inputmethod.EditorInfo#IME_ACTION_GO", "android.view.inputmethod.EditorInfo#imeOptions" ]
  }, {
    "name" : "public void performContextMenuAction(int id)",
    "returnType" : "void",
    "comment" : "\n         * Perform a context menu action on the field. The given id may be one of:\n         * {@link android.R.id#selectAll},\n         * {@link android.R.id#startSelectingText}, {@link android.R.id#stopSelectingText},\n         * {@link android.R.id#cut}, {@link android.R.id#copy},\n         * {@link android.R.id#paste}, {@link android.R.id#copyUrl},\n         * or {@link android.R.id#switchInputMethod}\n         ",
    "links" : [ "android.R.id#copyUrl", "android.R.id#paste", "android.R.id#cut", "android.R.id#selectAll", "android.R.id#stopSelectingText", "android.R.id#switchInputMethod", "android.R.id#copy", "android.R.id#startSelectingText" ]
  }, {
    "name" : "public int getCursorCapsMode(int reqModes)",
    "returnType" : "int",
    "comment" : "\n         * Retrieve the current capitalization mode in effect at the\n         * current cursor position in the text. See\n         * {@link android.text.TextUtils#getCapsMode TextUtils.getCapsMode}\n         * for more information.\n         *\n         * <p>This method may fail either if the input connection has\n         * become invalid (such as its process crashing) or the client is\n         * taking too long to respond with the text (it is given a couple\n         * seconds to return). In either case, 0 is returned.</p>\n         *\n         * <p>This method does not affect the text in the editor in any\n         * way, nor does it affect the selection or composing spans.</p>\n         *\n         * <p><strong>Editor authors:</strong> please be careful of race\n         * conditions in implementing this call. An IME can change the\n         * cursor position and use this method right away; you need to make\n         * sure the returned value is consistent with the results of the\n         * latest edits and changes to the cursor position.</p>\n         *\n         * @param reqModes The desired modes to retrieve, as defined by\n         * {@link android.text.TextUtils#getCapsMode TextUtils.getCapsMode}. These\n         * constants are defined so that you can simply pass the current\n         * {@link EditorInfo#inputType TextBoxAttribute.contentType} value\n         * directly in to here.\n         * @return the caps mode flags that are in effect at the current\n         * cursor position. See TYPE_TEXT_FLAG_CAPS_* in {@link android.text.InputType}.\n         ",
    "links" : [ "android.text.InputType", "android.view.inputmethod.EditorInfo#inputType", "android.text.TextUtils#getCapsMode" ]
  }, {
    "name" : "public void clearMetaKeyStates(int states)",
    "returnType" : "void",
    "comment" : "\n         * Clear the given meta key pressed states in the given input\n         * connection.\n         *\n         * <p>This can be used by the accessibility service to clear the meta key states set\n         * by a hardware keyboard with latched meta keys, if the editor\n         * keeps track of these.</p>\n         *\n         * @param states The states to be cleared, may be one or more bits as\n         * per {@link KeyEvent#getMetaState() KeyEvent.getMetaState()}.\n         ",
    "links" : [ "android.view.KeyEvent#getMetaState()" ]
  } ],
  "methodNames" : [ "public void commitText(@NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public void setSelection(int start, int end)", "public SurroundingText getSurroundingText(@IntRange(from = 0) int beforeLength, @IntRange(from = 0) int afterLength, @InputConnection.GetTextType int flags)", "public void deleteSurroundingText(int beforeLength, int afterLength)", "public void sendKeyEvent(@NonNull KeyEvent event)", "public void performEditorAction(int editorAction)", "public void performContextMenuAction(int id)", "public int getCursorCapsMode(int reqModes)", "public void clearMetaKeyStates(int states)" ],
  "variableNames" : [ "mIc" ]
}