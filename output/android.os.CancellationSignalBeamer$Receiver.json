{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/CancellationSignalBeamer.java",
  "packageName" : "android.os",
  "className" : "Receiver",
  "comment" : " The receiving side of a {@link CancellationSignalBeamer}. ",
  "links" : [ "android.os.CancellationSignalBeamer" ],
  "variables" : [ {
    "name" : "mTokenMap",
    "type" : "HashMap<IBinder, CancellationSignal>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelOnSenderDeath",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CancellationSignal unbeam(@Nullable IBinder token)",
    "returnType" : "CancellationSignal",
    "comment" : "\n         * Unbeams a token that was obtained via {@link Sender#beam} and turns it back into a\n         * {@link CancellationSignal}.\n         *\n         * A subsequent call to {@link #cancel} with the same token will cancel the returned\n         * {@code CancellationSignal}.\n         *\n         * @param token a token that was obtained from {@link Sender}, possibly in a remote process.\n         * @return a {@link CancellationSignal} linked to the given token.\n         ",
    "links" : [ "Sender", "android.os.CancellationSignal", "#beam", "#cancel" ]
  }, {
    "name" : "public void forget(@Nullable IBinder token)",
    "returnType" : "void",
    "comment" : "\n         * Forgets state associated with the given token (if any).\n         *\n         * Subsequent calls to {@link #cancel} or binder death notifications on the token will not\n         * have any effect.\n         *\n         * This MUST be invoked when forwarding {@link Sender#onForget}, otherwise the token and\n         * {@link CancellationSignal} will leak if the token was ever {@link #unbeam}ed.\n         *\n         * Optionally, the receiving service logic may also invoke this if it can guarantee that\n         * the unbeamed CancellationSignal isn't needed anymore (i.e. the cancellable operation\n         * using the CancellationSignal has been fully completed).\n         *\n         * @param token the token to forget. No-op if {@code null}.\n         ",
    "links" : [ "#onForget", "#unbeam", "android.os.CancellationSignal", "#cancel" ]
  }, {
    "name" : "public void cancel(@Nullable IBinder token)",
    "returnType" : "void",
    "comment" : "\n         * Cancels the {@link CancellationSignal} associated with the given token (if any).\n         *\n         * This MUST be invoked when forwarding {@link Sender#onCancel}, otherwise the token and\n         * {@link CancellationSignal} will leak if the token was ever {@link #unbeam}ed.\n         *\n         * Optionally, the receiving service logic may also invoke this if it can guarantee that\n         * the unbeamed CancellationSignal isn't needed anymore (i.e. the cancellable operation\n         * using the CancellationSignal has been fully completed).\n         *\n         * @param token the token to forget. No-op if {@code null}.\n         ",
    "links" : [ "#onCancel", "#unbeam", "android.os.CancellationSignal" ]
  }, {
    "name" : "private void dead(@NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void binderDied(@NonNull IBinder who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CancellationSignal unbeam(@Nullable IBinder token)", "public void forget(@Nullable IBinder token)", "public void cancel(@Nullable IBinder token)", "private void dead(@NonNull IBinder token)", "public void binderDied(@NonNull IBinder who)", "public void binderDied()" ],
  "variableNames" : [ "mTokenMap", "mCancelOnSenderDeath" ]
}