{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/inputmethodservice/IRemoteInputConnectionInvoker.java",
  "packageName" : "android.inputmethodservice",
  "className" : "IRemoteInputConnectionInvoker",
  "comment" : "\n * A stateless wrapper of {@link com.android.internal.inputmethod.IRemoteInputConnection} to\n * encapsulate boilerplate code around {@link AndroidFuture} and {@link RemoteException}.\n ",
  "links" : [ "android.os.RemoteException", "com.android.internal.infra.AndroidFuture", "com.android.internal.inputmethod.IRemoteInputConnection" ],
  "variables" : [ {
    "name" : "mConnection",
    "type" : "IRemoteInputConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBeamer",
    "type" : "CancellationSignalBeamer.Sender",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static IRemoteInputConnectionInvoker create(@NonNull IRemoteInputConnection connection)",
    "returnType" : "IRemoteInputConnectionInvoker",
    "comment" : "\n     * Creates a new instance of {@link IRemoteInputConnectionInvoker} for the given\n     * {@link IRemoteInputConnection}.\n     *\n     * @param connection {@link IRemoteInputConnection} to be wrapped.\n     * @return A new instance of {@link IRemoteInputConnectionInvoker}.\n     ",
    "links" : [ "android.inputmethodservice.IRemoteInputConnectionInvoker", "com.android.internal.inputmethod.IRemoteInputConnection" ]
  }, {
    "name" : "public IRemoteInputConnectionInvoker cloneWithSessionId(int sessionId)",
    "returnType" : "IRemoteInputConnectionInvoker",
    "comment" : "\n     * Creates a new instance of {@link IRemoteInputConnectionInvoker} with the given\n     * {@code sessionId}.\n     *\n     * @param sessionId the new session ID to be used.\n     * @return A new instance of {@link IRemoteInputConnectionInvoker}.\n     ",
    "links" : [ "android.inputmethodservice.IRemoteInputConnectionInvoker" ]
  }, {
    "name" : "public boolean isSameConnection(@NonNull IRemoteInputConnection connection)",
    "returnType" : "boolean",
    "comment" : "\n     * @param connection {@code IRemoteInputConnection} to be compared with\n     * @return {@code true} if the underlying {@code IRemoteInputConnection} is the same.\n     *         {@code false} if {@code inputContext} is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : " InputConnectionCommandHeader createHeader()",
    "returnType" : "InputConnectionCommandHeader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AndroidFuture<CharSequence> getTextAfterCursor(int length, int flags)",
    "returnType" : "AndroidFuture<CharSequence>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#getTextAfterCursor(InputConnectionCommandHeader, int,\n     * int, AndroidFuture)}.\n     *\n     * @param length {@code length} parameter to be passed.\n     * @param flags {@code flags} parameter to be passed.\n     * @return {@link AndroidFuture<CharSequence>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#getTextAfterCursor(InputConnectionCommandHeader", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public AndroidFuture<CharSequence> getTextBeforeCursor(int length, int flags)",
    "returnType" : "AndroidFuture<CharSequence>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#getTextBeforeCursor(InputConnectionCommandHeader, int,\n     * int, AndroidFuture)}.\n     *\n     * @param length {@code length} parameter to be passed.\n     * @param flags {@code flags} parameter to be passed.\n     * @return {@link AndroidFuture<CharSequence>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#getTextBeforeCursor(InputConnectionCommandHeader", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public AndroidFuture<CharSequence> getSelectedText(int flags)",
    "returnType" : "AndroidFuture<CharSequence>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#getSelectedText(InputConnectionCommandHeader, int,\n     * AndroidFuture)}.\n     *\n     * @param flags {@code flags} parameter to be passed.\n     * @return {@link AndroidFuture<CharSequence>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.infra.AndroidFuture", "com.android.internal.inputmethod.IRemoteInputConnection#getSelectedText(InputConnectionCommandHeader" ]
  }, {
    "name" : "public AndroidFuture<SurroundingText> getSurroundingText(int beforeLength, int afterLength, int flags)",
    "returnType" : "AndroidFuture<SurroundingText>",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#getSurroundingText(InputConnectionCommandHeader, int, int, int,\n     * AndroidFuture)}.\n     *\n     * @param beforeLength {@code beforeLength} parameter to be passed.\n     * @param afterLength {@code afterLength} parameter to be passed.\n     * @param flags {@code flags} parameter to be passed.\n     * @return {@link AndroidFuture<SurroundingText>} that can be used to retrieve the\n     *         invocation result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#getSurroundingText(InputConnectionCommandHeader", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public AndroidFuture<Integer> getCursorCapsMode(int reqModes)",
    "returnType" : "AndroidFuture<Integer>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#getCursorCapsMode(InputConnectionCommandHeader, int,\n     * AndroidFuture)}.\n     *\n     * @param reqModes {@code reqModes} parameter to be passed.\n     * @return {@link AndroidFuture<Integer>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#getCursorCapsMode(InputConnectionCommandHeader", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public AndroidFuture<ExtractedText> getExtractedText(ExtractedTextRequest request, int flags)",
    "returnType" : "AndroidFuture<ExtractedText>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#getExtractedText(InputConnectionCommandHeader,\n     * ExtractedTextRequest, int, AndroidFuture)}.\n     *\n     * @param request {@code request} parameter to be passed.\n     * @param flags {@code flags} parameter to be passed.\n     * @return {@link AndroidFuture<ExtractedText>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#getExtractedText(InputConnectionCommandHeader", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public boolean commitText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#commitText(InputConnectionCommandHeader, CharSequence, int)}.\n     *\n     * @param text {@code text} parameter to be passed.\n     * @param newCursorPosition {@code newCursorPosition} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#commitText(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean commitText(CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#commitTextWithTextAttribute(\n     * InputConnectionCommandHeader, int, CharSequence)}.\n     *\n     * @param text {@code text} parameter to be passed.\n     * @param newCursorPosition {@code newCursorPosition} parameter to be passed.\n     * @param textAttribute The extra information about the text.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#commitTextWithTextAttribute(" ]
  }, {
    "name" : "public boolean commitCompletion(CompletionInfo text)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#commitCompletion(InputConnectionCommandHeader,\n     * CompletionInfo)}.\n     *\n     * @param text {@code text} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#commitCompletion(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean commitCorrection(CorrectionInfo correctionInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#commitCorrection(InputConnectionCommandHeader,\n     * CorrectionInfo)}.\n     *\n     * @param correctionInfo {@code correctionInfo} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#commitCorrection(InputConnectionCommandHeader" ]
  }, {
    "name" : "public boolean setSelection(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#setSelection(InputConnectionCommandHeader, int, int)}.\n     *\n     * @param start {@code start} parameter to be passed.\n     * @param end {@code start} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#setSelection(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean performEditorAction(int actionCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#performEditorAction(InputConnectionCommandHeader, int)}.\n     *\n     * @param actionCode {@code start} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#performEditorAction(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean performContextMenuAction(int id)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#performContextMenuAction(InputConnectionCommandHeader, int)}.\n     *\n     * @param id {@code id} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#performContextMenuAction(InputConnectionCommandHeader" ]
  }, {
    "name" : "public boolean setComposingRegion(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#setComposingRegion(InputConnectionCommandHeader, int, int)}.\n     *\n     * @param start {@code id} parameter to be passed.\n     * @param end {@code id} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#setComposingRegion(InputConnectionCommandHeader" ]
  }, {
    "name" : "public boolean setComposingRegion(int start, int end, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#setComposingRegionWithTextAttribute(\n     * InputConnectionCommandHeader, int, int, TextAttribute)}.\n     *\n     * @param start {@code id} parameter to be passed.\n     * @param end {@code id} parameter to be passed.\n     * @param textAttribute The extra information about the text.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#setComposingRegionWithTextAttribute(" ]
  }, {
    "name" : "public boolean setComposingText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#setComposingText(InputConnectionCommandHeader,\n     * CharSequence, int)}.\n     *\n     * @param text {@code text} parameter to be passed.\n     * @param newCursorPosition {@code newCursorPosition} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#setComposingText(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean setComposingText(CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#setComposingTextWithTextAttribute(\n     * InputConnectionCommandHeader, CharSequence, int, TextAttribute)}.\n     *\n     * @param text {@code text} parameter to be passed.\n     * @param newCursorPosition {@code newCursorPosition} parameter to be passed.\n     * @param textAttribute The extra information about the text.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#setComposingTextWithTextAttribute(", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean finishComposingText()",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#finishComposingText(InputConnectionCommandHeader)}.\n     *\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#finishComposingText(InputConnectionCommandHeader)" ]
  }, {
    "name" : "public boolean beginBatchEdit()",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#beginBatchEdit(InputConnectionCommandHeader)}.\n     *\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#beginBatchEdit(InputConnectionCommandHeader)" ]
  }, {
    "name" : "public boolean endBatchEdit()",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#endBatchEdit(InputConnectionCommandHeader)}.\n     *\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#endBatchEdit(InputConnectionCommandHeader)" ]
  }, {
    "name" : "public boolean sendKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#sendKeyEvent(InputConnectionCommandHeader, KeyEvent)}.\n     *\n     * @param event {@code event} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#sendKeyEvent(InputConnectionCommandHeader" ]
  }, {
    "name" : "public boolean clearMetaKeyStates(int states)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#clearMetaKeyStates(InputConnectionCommandHeader, int)}.\n     *\n     * @param states {@code states} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#clearMetaKeyStates(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean deleteSurroundingText(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#deleteSurroundingText(InputConnectionCommandHeader, int, int)}.\n     *\n     * @param beforeLength {@code beforeLength} parameter to be passed.\n     * @param afterLength {@code afterLength} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#deleteSurroundingText(InputConnectionCommandHeader" ]
  }, {
    "name" : "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#deleteSurroundingTextInCodePoints(\n     * InputConnectionCommandHeader, int, int)}.\n     *\n     * @param beforeLength {@code beforeLength} parameter to be passed.\n     * @param afterLength {@code afterLength} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#deleteSurroundingTextInCodePoints(", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean performSpellCheck()",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#performSpellCheck(InputConnectionCommandHeader)}.\n     *\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#performSpellCheck(InputConnectionCommandHeader)", "android.os.RemoteException" ]
  }, {
    "name" : "public boolean performPrivateCommand(String action, Bundle data)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#performPrivateCommand(InputConnectionCommandHeader,\n     * String, Bundle)}.\n     *\n     * @param action {@code action} parameter to be passed.\n     * @param data {@code data} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#performPrivateCommand(InputConnectionCommandHeader", "android.os.RemoteException" ]
  }, {
    "name" : "public void performHandwritingGesture(@NonNull HandwritingGesture gesture, @Nullable @CallbackExecutor Executor executor, @Nullable IntConsumer consumer)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#performHandwritingGesture(\n     * InputConnectionCommandHeader, ParcelableHandwritingGesture, ResultReceiver)}.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#performHandwritingGesture(" ]
  }, {
    "name" : "public boolean previewHandwritingGesture(@NonNull HandwritingGesture gesture, @Nullable CancellationSignal cancellationSignal)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes one of {@link IRemoteInputConnection#previewHandwritingGesture(\n     * InputConnectionCommandHeader, HandwritingGesture, IBinder)}\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#previewHandwritingGesture(" ]
  }, {
    "name" : " CancellationSignalBeamer.Sender.CloseableToken beam(CancellationSignal cs)",
    "returnType" : "CancellationSignalBeamer.Sender.CloseableToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CancellationSignalBeamer.Sender getCancellationSignalBeamer()",
    "returnType" : "CancellationSignalBeamer.Sender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AndroidFuture<Boolean> requestCursorUpdates(int cursorUpdateMode, int imeDisplayId)",
    "returnType" : "AndroidFuture<Boolean>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#requestCursorUpdates(InputConnectionCommandHeader, int,\n     * int, AndroidFuture)}.\n     *\n     * @param cursorUpdateMode {@code cursorUpdateMode} parameter to be passed.\n     * @param imeDisplayId the display ID that is associated with the IME.\n     * @return {@link AndroidFuture<Boolean>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#requestCursorUpdates(InputConnectionCommandHeader", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public AndroidFuture<Boolean> requestCursorUpdates(int cursorUpdateMode, int cursorUpdateFilter, int imeDisplayId)",
    "returnType" : "AndroidFuture<Boolean>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#requestCursorUpdatesWithFilter(\n     * InputConnectionCommandHeader, int, int, int, AndroidFuture)}.\n     *\n     * @param cursorUpdateMode {@code cursorUpdateMode} parameter to be passed.\n     * @param cursorUpdateFilter {@code cursorUpdateFilter} parameter to be passed.\n     * @param imeDisplayId the display ID that is associated with the IME.\n     * @return {@link AndroidFuture<Boolean>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#requestCursorUpdatesWithFilter(", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public void requestTextBoundsInfo(@NonNull RectF bounds, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<TextBoundsInfoResult> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#requestTextBoundsInfo(InputConnectionCommandHeader,\n     * RectF, ResultReceiver)}\n     * @param bounds {@code rectF} parameter to be passed.\n     * @param executor {@code Executor} parameter to be passed.\n     * @param consumer {@code Consumer} parameter to be passed.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#requestTextBoundsInfo(InputConnectionCommandHeader" ]
  }, {
    "name" : "public AndroidFuture<Boolean> commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)",
    "returnType" : "AndroidFuture<Boolean>",
    "comment" : "\n     * Invokes {@link IRemoteInputConnection#commitContent(InputConnectionCommandHeader,\n     * InputContentInfo, int, Bundle, AndroidFuture)}.\n     *\n     * @param inputContentInfo {@code inputContentInfo} parameter to be passed.\n     * @param flags {@code flags} parameter to be passed.\n     * @param opts {@code opts} parameter to be passed.\n     * @return {@link AndroidFuture<Boolean>} that can be used to retrieve the invocation\n     *         result. {@link RemoteException} will be treated as an error.\n     ",
    "links" : [ "com.android.internal.inputmethod.IRemoteInputConnection#commitContent(InputConnectionCommandHeader", "android.os.RemoteException", "com.android.internal.infra.AndroidFuture" ]
  }, {
    "name" : "public boolean setImeConsumesInput(boolean imeConsumesInput)",
    "returnType" : "boolean",
    "comment" : "\n     * Invokes\n     * {@link IRemoteInputConnection#setImeConsumesInput(InputConnectionCommandHeader, boolean)}.\n     *\n     * @param imeConsumesInput {@code imeConsumesInput} parameter to be passed.\n     * @return {@code true} if the invocation is completed without {@link RemoteException}.\n     *         {@code false} otherwise.\n     ",
    "links" : [ "android.os.RemoteException", "com.android.internal.inputmethod.IRemoteInputConnection#setImeConsumesInput(InputConnectionCommandHeader" ]
  }, {
    "name" : "public boolean replaceText(int start, int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "\n     * Replaces the specific range in the current input field with suggested text.\n     *\n     * @param start the character index where the replacement should start.\n     * @param end the character index where the replacement should end.\n     * @param newCursorPosition the new cursor position around the text. If > 0, this is relative to\n     *     the end of the text - 1; if <= 0, this is relative to the start of the text. So a value\n     *     of 1 will always advance you to the position after the full text being inserted. Note\n     *     that this means you can't position the cursor within the text.\n     * @param text the text to replace. This may include styles.\n     * @param textAttribute The extra information about the text. This value may be null.\n     * @return {@code true} if the specific range is replaced successfully, {@code false} otherwise.\n     * @see android.view.inputmethod.InputConnection#replaceText(int, int, CharSequence, int,\n     *     TextAttribute)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static IRemoteInputConnectionInvoker create(@NonNull IRemoteInputConnection connection)", "public IRemoteInputConnectionInvoker cloneWithSessionId(int sessionId)", "public boolean isSameConnection(@NonNull IRemoteInputConnection connection)", " InputConnectionCommandHeader createHeader()", "public AndroidFuture<CharSequence> getTextAfterCursor(int length, int flags)", "public AndroidFuture<CharSequence> getTextBeforeCursor(int length, int flags)", "public AndroidFuture<CharSequence> getSelectedText(int flags)", "public AndroidFuture<SurroundingText> getSurroundingText(int beforeLength, int afterLength, int flags)", "public AndroidFuture<Integer> getCursorCapsMode(int reqModes)", "public AndroidFuture<ExtractedText> getExtractedText(ExtractedTextRequest request, int flags)", "public boolean commitText(CharSequence text, int newCursorPosition)", "public boolean commitText(CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public boolean commitCompletion(CompletionInfo text)", "public boolean commitCorrection(CorrectionInfo correctionInfo)", "public boolean setSelection(int start, int end)", "public boolean performEditorAction(int actionCode)", "public boolean performContextMenuAction(int id)", "public boolean setComposingRegion(int start, int end)", "public boolean setComposingRegion(int start, int end, @Nullable TextAttribute textAttribute)", "public boolean setComposingText(CharSequence text, int newCursorPosition)", "public boolean setComposingText(CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "public boolean finishComposingText()", "public boolean beginBatchEdit()", "public boolean endBatchEdit()", "public boolean sendKeyEvent(KeyEvent event)", "public boolean clearMetaKeyStates(int states)", "public boolean deleteSurroundingText(int beforeLength, int afterLength)", "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)", "public boolean performSpellCheck()", "public boolean performPrivateCommand(String action, Bundle data)", "public void performHandwritingGesture(@NonNull HandwritingGesture gesture, @Nullable @CallbackExecutor Executor executor, @Nullable IntConsumer consumer)", "public boolean previewHandwritingGesture(@NonNull HandwritingGesture gesture, @Nullable CancellationSignal cancellationSignal)", " CancellationSignalBeamer.Sender.CloseableToken beam(CancellationSignal cs)", "private CancellationSignalBeamer.Sender getCancellationSignalBeamer()", "public AndroidFuture<Boolean> requestCursorUpdates(int cursorUpdateMode, int imeDisplayId)", "public AndroidFuture<Boolean> requestCursorUpdates(int cursorUpdateMode, int cursorUpdateFilter, int imeDisplayId)", "public void requestTextBoundsInfo(@NonNull RectF bounds, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<TextBoundsInfoResult> consumer)", "public AndroidFuture<Boolean> commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", "public boolean setImeConsumesInput(boolean imeConsumesInput)", "public boolean replaceText(int start, int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)" ],
  "variableNames" : [ "mConnection", "mSessionId", "mBeamer" ]
}