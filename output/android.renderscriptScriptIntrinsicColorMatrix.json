{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/ScriptIntrinsicColorMatrix.java",
  "packageName" : "android.renderscript",
  "className" : "ScriptIntrinsicColorMatrix",
  "comment" : "\n * Intrinsic for applying a color matrix to allocations.\n *\n * If the element type is {@link Element.DataType#UNSIGNED_8},\n * it is converted to {@link Element.DataType#FLOAT_32} and\n * normalized from (0-255) to (0-1). If the incoming vector size\n * is less than four, a {@link Element#F32_4} is created by\n * filling the missing vector channels with zero. This value is\n * then multiplied by the 4x4 color matrix as performed by\n * rsMatrixMultiply(), adding a {@link Element#F32_4}, and then\n * writing it to the output {@link Allocation}.\n *\n * If the ouptut type is unsigned, the value is normalized from\n * (0-1) to (0-255) and converted. If the output vector size is\n * less than four, the unused channels are discarded.\n *\n * Supported elements types are {@link Element#U8}, {@link\n * Element#U8_2}, {@link Element#U8_3}, {@link Element#U8_4},\n * {@link Element#F32}, {@link Element#F32_2}, {@link\n * Element#F32_3}, and {@link Element#F32_4}.\n *",
  "variables" : [ {
    "name" : "mMatrix",
    "type" : "Matrix4f",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdd",
    "type" : "Float4",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ScriptIntrinsicColorMatrix create(RenderScript rs, Element e)",
    "returnType" : "ScriptIntrinsicColorMatrix",
    "comment" : "\n     * Create an intrinsic for applying a color matrix to an\n     * allocation.\n     *\n     * @param rs The RenderScript context\n     * @param e Element type for inputs and outputs, As of API 19,\n     *          this parameter is ignored. The Element type check is\n     *          performed in the kernel launch.\n     *\n     * @deprecated Use the single argument version as Element is now\n     *             ignored.\n     *\n     * @return ScriptIntrinsicColorMatrix\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScriptIntrinsicColorMatrix create(RenderScript rs)",
    "returnType" : "ScriptIntrinsicColorMatrix",
    "comment" : "\n     * Create an intrinsic for applying a color matrix to an\n     * allocation.\n     *\n     * @param rs The RenderScript context\n     *\n     * @return ScriptIntrinsicColorMatrix\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setMatrix()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorMatrix(Matrix4f m)",
    "returnType" : "void",
    "comment" : "\n     * Set the color matrix which will be applied to each cell of\n     * the image.\n     *\n     * @param m The 4x4 matrix to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorMatrix(Matrix3f m)",
    "returnType" : "void",
    "comment" : "\n     * Set the color matrix which will be applied to each cell of the image.\n     * This will set the alpha channel to be a copy.\n     *\n     * @param m The 3x3 matrix to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdd(Float4 f)",
    "returnType" : "void",
    "comment" : "\n     * Set the value to be added after the color matrix has been\n     * applied. The default value is {0, 0, 0, 0}\n     *\n     * @param f The float4 value to be added.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdd(float r, float g, float b, float a)",
    "returnType" : "void",
    "comment" : "\n     * Set the value to be added after the color matrix has been\n     * applied. The default value is {0, 0, 0, 0}\n     *\n     * @param r The red add value.\n     * @param g The green add value.\n     * @param b The blue add value.\n     * @param a The alpha add value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGreyscale()",
    "returnType" : "void",
    "comment" : "\n     * Set a color matrix to convert from RGB to luminance. The alpha channel\n     * will be a copy.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setYUVtoRGB()",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to convert from YUV to RGB with a direct copy of the 4th\n     * channel.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRGBtoYUV()",
    "returnType" : "void",
    "comment" : "\n     * Set the matrix to convert from RGB to YUV with a direct copy of the 4th\n     * channel.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Invoke the kernel and apply the matrix to each cell of input\n     * {@link Allocation} and copy to the output {@link Allocation}.\n     *\n     * If the vector size of the input is less than four, the\n     * remaining components are treated as zero for the matrix\n     * multiply.\n     *\n     * If the output vector size is less than four, the unused\n     * vector components are discarded.\n     *\n     *\n     * @param ain Input allocation\n     * @param aout Output allocation\n     ",
    "links" : [ "Allocation", "Allocation" ]
  }, {
    "name" : "public void forEach(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Invoke the kernel and apply the matrix to each cell of input\n     * {@link Allocation} and copy to the output {@link Allocation}.\n     *\n     * If the vector size of the input is less than four, the\n     * remaining components are treated as zero for the matrix\n     * multiply.\n     *\n     * If the output vector size is less than four, the unused\n     * vector components are discarded.\n     *\n     *\n     * @param ain Input allocation\n     * @param aout Output allocation\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ "Allocation", "Allocation" ]
  }, {
    "name" : "public Script.KernelID getKernelID()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for this intrinsic kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mMatrix", "mAdd" ],
  "methodNames" : [ "public static ScriptIntrinsicColorMatrix create(RenderScript rs, Element e)", "public static ScriptIntrinsicColorMatrix create(RenderScript rs)", "private void setMatrix()", "public void setColorMatrix(Matrix4f m)", "public void setColorMatrix(Matrix3f m)", "public void setAdd(Float4 f)", "public void setAdd(float r, float g, float b, float a)", "public void setGreyscale()", "public void setYUVtoRGB()", "public void setRGBtoYUV()", "public void forEach(Allocation ain, Allocation aout)", "public void forEach(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelID()" ]
}