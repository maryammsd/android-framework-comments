{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkStatsHistory.java",
  "packageName" : "android.net",
  "className" : "NetworkStatsHistory",
  "comment" : "\n * Collection of historical network statistics, recorded into equally-sized\n * \"buckets\" in time. Internally it stores data in {@code long} series for more\n * efficient persistence.\n * <p>\n * Each bucket is defined by a {@link #bucketStart} timestamp, and lasts for\n * {@link #bucketDuration}. Internally assumes that {@link #bucketStart} is\n * sorted at all times.\n *\n * @hide\n ",
  "links" : [ "#bucketDuration", "#bucketStart" ],
  "variables" : [ {
    "name" : "VERSION_INIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_ADD_PACKETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_ADD_ACTIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIELD_ACTIVE_TIME",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIELD_RX_BYTES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIELD_RX_PACKETS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIELD_TX_BYTES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIELD_TX_PACKETS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIELD_OPERATIONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIELD_ALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "bucketDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bucketCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bucketStart",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "activeTime",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rxBytes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rxPackets",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "txBytes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "txPackets",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "operations",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "totalBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkStatsHistory>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToStream(DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getBucketDuration()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getStart()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getEnd()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return total bytes represented by this history.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexBefore(long time)",
    "returnType" : "int",
    "comment" : "\n     * Return index of bucket that contains or is immediately before the\n     * requested time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexAfter(long time)",
    "returnType" : "int",
    "comment" : "\n     * Return index of bucket that contains or is immediately after the\n     * requested time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Entry getValues(int i, Entry recycle)",
    "returnType" : "Entry",
    "comment" : "\n     * Return specific stats entry.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Entry> getEntries()",
    "returnType" : "List<Entry>",
    "comment" : "\n     * Get List of {@link Entry} of the {@link NetworkStatsHistory} instance.\n     *\n     * @return\n     ",
    "links" : [ "Entry", "android.net.NetworkStatsHistory" ]
  }, {
    "name" : "public void setValues(int i, Entry entry)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void recordData(long start, long end, long rxBytes, long txBytes)",
    "returnType" : "void",
    "comment" : "\n     * Record that data traffic occurred in the given time range. Will\n     * distribute across internal buckets, creating new buckets as needed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recordData(long start, long end, NetworkStats.Entry entry)",
    "returnType" : "void",
    "comment" : "\n     * Record that data traffic occurred in the given time range. Will\n     * distribute across internal buckets, creating new buckets as needed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recordEntireHistory(NetworkStatsHistory input)",
    "returnType" : "void",
    "comment" : "\n     * Record an entire {@link NetworkStatsHistory} into this history. Usually\n     * for combining together stats for external reporting.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStatsHistory" ]
  }, {
    "name" : "public void recordHistory(NetworkStatsHistory input, long start, long end)",
    "returnType" : "void",
    "comment" : "\n     * Record given {@link NetworkStatsHistory} into this history, copying only\n     * buckets that atomically occur in the inclusive time range. Doesn't\n     * interpolate across partial buckets.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStatsHistory" ]
  }, {
    "name" : "private void ensureBuckets(long start, long end)",
    "returnType" : "void",
    "comment" : "\n     * Ensure that buckets exist for given time range, creating as needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void insertBucket(int index, long start)",
    "returnType" : "void",
    "comment" : "\n     * Insert new bucket at requested index and starting time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear all data stored in this object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeBucketsStartingBefore(final long cutoff)",
    "returnType" : "void",
    "comment" : "\n     * Remove buckets that start older than requested cutoff.\n     *\n     * This method will remove any bucket that contains any data older than the requested\n     * cutoff, even if that same bucket includes some data from after the cutoff.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Entry getValues(long start, long end, Entry recycle)",
    "returnType" : "Entry",
    "comment" : "\n     * Return interpolated data usage across the requested range. Interpolates\n     * across buckets, so values may be rounded slightly.\n     *\n     * <p>If the active bucket is not completed yet, it returns the proportional value of it\n     * based on its duration and the {@code end} param.\n     *\n     * @param start - start of the range, timestamp in milliseconds since the epoch.\n     * @param end - end of the range, timestamp in milliseconds since the epoch.\n     * @param recycle - entry instance for performance, could be null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Entry getValues(long start, long end, long now, Entry recycle)",
    "returnType" : "Entry",
    "comment" : "\n     * Return interpolated data usage across the requested range. Interpolates\n     * across buckets, so values may be rounded slightly.\n     *\n     * @param start - start of the range, timestamp in milliseconds since the epoch.\n     * @param end - end of the range, timestamp in milliseconds since the epoch.\n     * @param now - current timestamp in milliseconds since the epoch (wall clock).\n     * @param recycle - entry instance for performance, could be null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void generateRandom(long start, long end, long bytes)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated only for temporary testing\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations, Random r)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated only for temporary testing\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long randomLong(Random r, long start, long end)",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean intersects(long start, long end)",
    "returnType" : "boolean",
    "comment" : "\n     * Quickly determine if this history intersects with given window.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(IndentingPrintWriter pw, boolean fullHistory)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpCheckin(PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long tag)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void dumpDebug(ProtoOutputStream proto, long tag, long[] array, int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameAs(NetworkStatsHistory other)",
    "returnType" : "boolean",
    "comment" : "\n     * Same as \"equals\", but not actually called equals as this would affect public API behavior.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long getLong(long[] array, int i, long value)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setLong(long[] array, int i, long value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addLong(long[] array, int i, long value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int estimateResizeBuckets(long newBucketDuration)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@NonNull Parcel out, int flags)", "public void writeToStream(DataOutput out) throws IOException", "public int describeContents()", "public int size()", "public long getBucketDuration()", "public long getStart()", "public long getEnd()", "public long getTotalBytes()", "public int getIndexBefore(long time)", "public int getIndexAfter(long time)", "public Entry getValues(int i, Entry recycle)", "public List<Entry> getEntries()", "public void setValues(int i, Entry entry)", "public void recordData(long start, long end, long rxBytes, long txBytes)", "public void recordData(long start, long end, NetworkStats.Entry entry)", "public void recordEntireHistory(NetworkStatsHistory input)", "public void recordHistory(NetworkStatsHistory input, long start, long end)", "private void ensureBuckets(long start, long end)", "private void insertBucket(int index, long start)", "public void clear()", "public void removeBucketsStartingBefore(final long cutoff)", "public Entry getValues(long start, long end, Entry recycle)", "public Entry getValues(long start, long end, long now, Entry recycle)", "public void generateRandom(long start, long end, long bytes)", "public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations, Random r)", "public static long randomLong(Random r, long start, long end)", "public boolean intersects(long start, long end)", "public void dump(IndentingPrintWriter pw, boolean fullHistory)", "public void dumpCheckin(PrintWriter pw)", "public void dumpDebug(ProtoOutputStream proto, long tag)", "private static void dumpDebug(ProtoOutputStream proto, long tag, long[] array, int index)", "public String toString()", "public boolean isSameAs(NetworkStatsHistory other)", "private static long getLong(long[] array, int i, long value)", "private static void setLong(long[] array, int i, long value)", "private static void addLong(long[] array, int i, long value)", "public int estimateResizeBuckets(long newBucketDuration)" ],
  "variableNames" : [ "VERSION_INIT", "VERSION_ADD_PACKETS", "VERSION_ADD_ACTIVE", "FIELD_ACTIVE_TIME", "FIELD_RX_BYTES", "FIELD_RX_PACKETS", "FIELD_TX_BYTES", "FIELD_TX_PACKETS", "FIELD_OPERATIONS", "FIELD_ALL", "bucketDuration", "bucketCount", "bucketStart", "activeTime", "rxBytes", "rxPackets", "txBytes", "txPackets", "operations", "totalBytes", "CREATOR" ]
}