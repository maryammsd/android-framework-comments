{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/temporal/TemporalAmount.java",
  "packageName" : "java.time.temporal",
  "className" : "TemporalAmount",
  "comment" : "\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n * <p>\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n * <p>\n * The amount can be thought of as a {@code Map} of {@link TemporalUnit} to\n * {@code long}, exposed via {@link #getUnits()} and {@link #get(TemporalUnit)}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n * <p>\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n * <p>\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@code Period} and {@code Duration}.\n *\n * @implSpec\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @since 1.8\n ",
  "links" : [ "#getUnits()", "java.time.Period", "#get(TemporalUnit)", "java.time.temporal.TemporalUnit", "java.time.Duration" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " long get(TemporalUnit unit)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the requested unit.\n     * The units returned from {@link #getUnits()} uniquely define the\n     * value of the {@code TemporalAmount}.  A value must be returned\n     * for each unit listed in {@code getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link #getUnits()}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param unit the {@code TemporalUnit} for which to return the value\n     * @return the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@code unit} is not supported\n     ",
    "links" : [ "#getUnits()" ]
  }, {
    "name" : " List<TemporalUnit> getUnits()",
    "returnType" : "List<TemporalUnit>",
    "comment" : "\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@code TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@code getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return the List of {@code TemporalUnits}; not null\n     ",
    "links" : [ ]
  }, {
    "name" : " Temporal addTo(Temporal temporal)",
    "returnType" : "Temporal",
    "comment" : "\n     * Adds to the specified temporal object.\n     * <p>\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus(TemporalAmount)}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@code plus(TemporalAmount)},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@code Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     * <p>\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     * <p>\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.\n     * <p>\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param temporal  the temporal object to add the amount to, not null\n     * @return an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.Temporal#plus(TemporalAmount)", "java.time.temporal.TemporalQueries#chronology()" ]
  }, {
    "name" : " Temporal subtractFrom(Temporal temporal)",
    "returnType" : "Temporal",
    "comment" : "\n     * Subtracts this object from the specified temporal object.\n     * <p>\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus(TemporalAmount)}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@code minus(TemporalAmount)},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@code Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     * <p>\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     * <p>\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.\n     * <p>\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param temporal  the temporal object to subtract the amount from, not null\n     * @return an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.TemporalQueries#chronology()", "java.time.temporal.Temporal#minus(TemporalAmount)" ]
  } ],
  "methodNames" : [ " long get(TemporalUnit unit)", " List<TemporalUnit> getUnits()", " Temporal addTo(Temporal temporal)", " Temporal subtractFrom(Temporal temporal)" ],
  "variableNames" : [ ]
}