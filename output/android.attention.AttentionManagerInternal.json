{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/attention/AttentionManagerInternal.java",
  "packageName" : "android.attention",
  "className" : "AttentionManagerInternal",
  "comment" : "\n * Attention manager local system server interface.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract boolean isAttentionServiceSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if attention service is supported on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isProximitySupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if proximity update is supported by the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean checkAttention(long timeoutMillis, AttentionCallbackInternal callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether user attention is at the screen and calls in the provided callback.\n     *\n     * @param timeoutMillis a budget for the attention check; if it takes longer - {@link\n     *                      AttentionCallbackInternal#onFailure} would be called with the {@link\n     *                      android.service.attention.AttentionService#ATTENTION_FAILURE_TIMED_OUT}\n     *                      code\n     * @param callback      a callback for when the attention check has completed\n     * @return {@code true} if the attention check should succeed.\n     ",
    "links" : [ "#onFailure", "android.service.attention.AttentionService#ATTENTION_FAILURE_TIMED_OUT" ]
  }, {
    "name" : "public abstract void cancelAttentionCheck(AttentionCallbackInternal callback)",
    "returnType" : "void",
    "comment" : "\n     * Cancels the specified attention check in case it's no longer needed.\n     *\n     * @param callback a callback that was used in {@link #checkAttention}\n     ",
    "links" : [ "#checkAttention" ]
  }, {
    "name" : "public abstract boolean onStartProximityUpdates(ProximityUpdateCallbackInternal callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Requests the continuous updates of proximity signal via the provided callback,\n     * until the given callback is unregistered. Currently, AttentionManagerService only\n     * anticipates one client and updates one client at a time.\n     *\n     * @param callback      a callback that receives the proximity updates\n     * @return {@code true} if the registration should succeed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStopProximityUpdates(ProximityUpdateCallbackInternal callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests to stop providing continuous updates until the callback is registered.\n     *\n     * @param callback a callback that was used in {@link #onStartProximityUpdates}\n     ",
    "links" : [ "#onStartProximityUpdates" ]
  } ],
  "methodNames" : [ "public abstract boolean isAttentionServiceSupported()", "public abstract boolean isProximitySupported()", "public abstract boolean checkAttention(long timeoutMillis, AttentionCallbackInternal callback)", "public abstract void cancelAttentionCheck(AttentionCallbackInternal callback)", "public abstract boolean onStartProximityUpdates(ProximityUpdateCallbackInternal callback)", "public abstract void onStopProximityUpdates(ProximityUpdateCallbackInternal callback)" ],
  "variableNames" : [ ]
}