{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraManager.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CameraManagerGlobal",
  "comment" : "\n     * A per-process global camera manager instance, to retain a connection to the camera service,\n     * and to distribute camera availability notices to API-registered callbacks\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAMERA_SERVICE_RECONNECT_DELAY_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gCameraManager",
    "type" : "CameraManagerGlobal",
    "comment" : " Singleton instance",
    "links" : [ ]
  }, {
    "name" : "CAMERA_SERVICE_BINDER_NAME",
    "type" : "String",
    "comment" : "\n         * This must match the ICameraService definition\n         ",
    "links" : [ ]
  }, {
    "name" : "mScheduler",
    "type" : "ScheduledExecutorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceStatus",
    "type" : "ArrayMap<DeviceCameraInfo, Integer>",
    "comment" : " Camera ID -> Status map",
    "links" : [ ]
  }, {
    "name" : "mUnavailablePhysicalDevices",
    "type" : "ArrayMap<DeviceCameraInfo, ArrayList<String>>",
    "comment" : " Camera ID -> (physical camera ID -> Status map)",
    "links" : [ ]
  }, {
    "name" : "mOpenedDevices",
    "type" : "ArrayMap<DeviceCameraInfo, String>",
    "comment" : " Opened Camera ID -> apk name map",
    "links" : [ ]
  }, {
    "name" : "mConcurrentCameraIdCombinations",
    "type" : "Set<Set<DeviceCameraInfo>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackMap",
    "type" : "ArrayMap<AvailabilityCallback, Executor>",
    "comment" : " Registered availability callbacks and their executors",
    "links" : [ ]
  }, {
    "name" : "mTorchClientBinder",
    "type" : "Binder",
    "comment" : " torch client binder to set the torch mode with.",
    "links" : [ ]
  }, {
    "name" : "mTorchStatus",
    "type" : "ArrayMap<DeviceCameraInfo, Integer>",
    "comment" : " Camera ID -> Torch status map",
    "links" : [ ]
  }, {
    "name" : "mTorchCallbackMap",
    "type" : "ArrayMap<TorchCallback, Executor>",
    "comment" : " Registered torch callbacks and their executors",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCameraService",
    "type" : "ICameraService",
    "comment" : " Access only through getCameraService to deal with binder death",
    "links" : [ ]
  }, {
    "name" : "mHasOpenCloseListenerPermission",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceStateHandlerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceStateHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFoldStateListener",
    "type" : "FoldStateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCameraServiceDisabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLandscapeToPortrait",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CameraManagerGlobal get()",
    "returnType" : "CameraManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDeviceStateListener(@NonNull CameraCharacteristics chars, @NonNull Context ctx)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder asBinder()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICameraService getCameraService()",
    "returnType" : "ICameraService",
    "comment" : "\n         * Return a best-effort ICameraService.\n         *\n         * <p>This will be null if the camera service is not currently available. If the camera\n         * service has died since the last use of the camera service, will try to reconnect to the\n         * service.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "private void connectCameraServiceLocked()",
    "returnType" : "void",
    "comment" : "\n         * Connect to the camera service if it's available, and set up listeners.\n         * If the service is already connected, do nothing.\n         *\n         * <p>Sets mCameraService to a valid pointer or null if the connection does not succeed.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "public void injectSessionParams(@NonNull String cameraId, @NonNull CaptureRequest sessionParams) throws CameraAccessException, SecurityException",
    "returnType" : "void",
    "comment" : " Injects session params into an existing client for cameraid. ",
    "links" : [ ]
  }, {
    "name" : "private String[] extractCameraIdListLocked(int deviceId, int devicePolicy)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Set<Set<String>> extractConcurrentCameraIdListLocked(int deviceId, int devicePolicy)",
    "returnType" : "Set<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void sortCameraIds(String[] cameraIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldHideCamera(int currentDeviceId, int devicePolicy, DeviceCameraInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean cameraStatusesContains(CameraStatus[] cameraStatuses, DeviceCameraInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getCameraIdListNoLazy(int deviceId, int devicePolicy)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getCameraIdList(int deviceId, int devicePolicy)",
    "returnType" : "String[]",
    "comment" : "\n         * Get a list of all camera IDs that are at least PRESENT; ignore devices that are\n         * NOT_PRESENT or ENUMERATING, since they cannot be used by anyone.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Set<Set<String>> getConcurrentCameraIds(int deviceId, int devicePolicy)",
    "returnType" : "Set<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isConcurrentSessionConfigurationSupported(@NonNull Map<String, SessionConfiguration> cameraIdsAndSessionConfigurations, int targetSdkVersion, int deviceId, int devicePolicy) throws CameraAccessException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean cameraIdHasConcurrentStreamsLocked(String cameraId, int deviceId, int devicePolicy)",
    "returnType" : "boolean",
    "comment" : "\n         * Helper function to find out if a camera id is in the set of combinations returned by\n         * getConcurrentCameraIds()\n         * @param cameraId the unique identifier of the camera device to query\n         * @param deviceId the device id of the context\n         * @return Whether the camera device was found in the set of combinations returned by\n         *         getConcurrentCameraIds\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setTorchMode(String cameraId, boolean enabled, int deviceId, int devicePolicy) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void turnOnTorchWithStrengthLevel(String cameraId, int torchStrength, int deviceId, int devicePolicy) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTorchStrengthLevel(String cameraId, int deviceId, int devicePolicy) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleRecoverableSetupErrors(ServiceSpecificException e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAvailable(int status)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean validStatus(int status)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean validTorchStatus(int status)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postSingleAccessPriorityChangeUpdate(final AvailabilityCallback callback, final Executor executor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postSingleCameraOpenedUpdate(final AvailabilityCallback callback, final Executor executor, final String id, final String packageId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postSingleCameraClosedUpdate(final AvailabilityCallback callback, final Executor executor, final String id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postSingleUpdate(final AvailabilityCallback callback, final Executor executor, final String id, final String physicalId, final int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postSingleTorchUpdate(final TorchCallback callback, final Executor executor, final String id, final int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postSingleTorchStrengthLevelUpdate(final TorchCallback callback, final Executor executor, final String id, final int newStrengthLevel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCallbackLocked(AvailabilityCallback callback, Executor executor)",
    "returnType" : "void",
    "comment" : "\n         * Send the state of all known cameras to the provided listener, to initialize\n         * the listener's knowledge of camera state.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void onStatusChangedLocked(int status, DeviceCameraInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onPhysicalCameraStatusChangedLocked(int status, DeviceCameraInfo info, String physicalId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateTorchCallbackLocked(TorchCallback callback, Executor executor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onTorchStatusChangedLocked(int status, DeviceCameraInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onTorchStrengthLevelChangedLocked(DeviceCameraInfo info, int newStrengthLevel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerAvailabilityCallback(AvailabilityCallback callback, Executor executor, boolean hasOpenCloseListenerPermission, int deviceId, int devicePolicy)",
    "returnType" : "void",
    "comment" : "\n         * Register a callback to be notified about camera device availability with the\n         * global listener singleton.\n         *\n         * @param callback the new callback to send camera availability notices to\n         * @param executor The executor which should invoke the callback. May not be null.\n         * @param hasOpenCloseListenerPermission whether the client has permission for\n         *                                       onCameraOpened/onCameraClosed callback\n         ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterAvailabilityCallback(AvailabilityCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Remove a previously-added callback; the callback will no longer receive connection and\n         * disconnection callbacks, and is no longer referenced by the global listener singleton.\n         *\n         * @param callback The callback to remove from the notification list\n         ",
    "links" : [ ]
  }, {
    "name" : "public void registerTorchCallback(TorchCallback callback, Executor executor, int deviceId, int devicePolicy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterTorchCallback(TorchCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStatusChanged(int status, String cameraId, int deviceId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * Callback from camera service notifying the process about camera availability changes\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPhysicalCameraStatusChanged(int status, String cameraId, String physicalCameraId, int deviceId) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTorchStatusChanged(int status, String cameraId, int deviceId) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTorchStrengthLevelChanged(String cameraId, int newStrengthLevel, int deviceId) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCameraAccessPrioritiesChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCameraOpened(String cameraId, String clientPackageId, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCameraOpenedLocked(DeviceCameraInfo info, String clientPackageId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCameraClosed(String cameraId, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCameraClosedLocked(DeviceCameraInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleCameraServiceReconnectionLocked()",
    "returnType" : "void",
    "comment" : "\n         * Try to connect to camera service after some delay if any client registered camera\n         * availability callback or torch status callback.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void binderDied()",
    "returnType" : "void",
    "comment" : "\n         * Listener for camera service death.\n         *\n         * <p>The camera service isn't supposed to die under any normal circumstances, but can be\n         * turned off during debug, or crash due to bugs.  So detect that and null out the interface\n         * object, so that the next calls to the manager can try to reconnect.</p>\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static CameraManagerGlobal get()", "public void registerDeviceStateListener(@NonNull CameraCharacteristics chars, @NonNull Context ctx)", "public IBinder asBinder()", "public ICameraService getCameraService()", "private void connectCameraServiceLocked()", "public void injectSessionParams(@NonNull String cameraId, @NonNull CaptureRequest sessionParams) throws CameraAccessException, SecurityException", "private String[] extractCameraIdListLocked(int deviceId, int devicePolicy)", "private Set<Set<String>> extractConcurrentCameraIdListLocked(int deviceId, int devicePolicy)", "private static void sortCameraIds(String[] cameraIds)", "private boolean shouldHideCamera(int currentDeviceId, int devicePolicy, DeviceCameraInfo info)", "private static boolean cameraStatusesContains(CameraStatus[] cameraStatuses, DeviceCameraInfo info)", "public String[] getCameraIdListNoLazy(int deviceId, int devicePolicy)", "public String[] getCameraIdList(int deviceId, int devicePolicy)", "public Set<Set<String>> getConcurrentCameraIds(int deviceId, int devicePolicy)", "public boolean isConcurrentSessionConfigurationSupported(@NonNull Map<String, SessionConfiguration> cameraIdsAndSessionConfigurations, int targetSdkVersion, int deviceId, int devicePolicy) throws CameraAccessException", "public boolean cameraIdHasConcurrentStreamsLocked(String cameraId, int deviceId, int devicePolicy)", "public void setTorchMode(String cameraId, boolean enabled, int deviceId, int devicePolicy) throws CameraAccessException", "public void turnOnTorchWithStrengthLevel(String cameraId, int torchStrength, int deviceId, int devicePolicy) throws CameraAccessException", "public int getTorchStrengthLevel(String cameraId, int deviceId, int devicePolicy) throws CameraAccessException", "private void handleRecoverableSetupErrors(ServiceSpecificException e)", "private boolean isAvailable(int status)", "private boolean validStatus(int status)", "private boolean validTorchStatus(int status)", "private void postSingleAccessPriorityChangeUpdate(final AvailabilityCallback callback, final Executor executor)", "private void postSingleCameraOpenedUpdate(final AvailabilityCallback callback, final Executor executor, final String id, final String packageId)", "private void postSingleCameraClosedUpdate(final AvailabilityCallback callback, final Executor executor, final String id)", "private void postSingleUpdate(final AvailabilityCallback callback, final Executor executor, final String id, final String physicalId, final int status)", "private void postSingleTorchUpdate(final TorchCallback callback, final Executor executor, final String id, final int status)", "private void postSingleTorchStrengthLevelUpdate(final TorchCallback callback, final Executor executor, final String id, final int newStrengthLevel)", "private void updateCallbackLocked(AvailabilityCallback callback, Executor executor)", "private void onStatusChangedLocked(int status, DeviceCameraInfo info)", "private void onPhysicalCameraStatusChangedLocked(int status, DeviceCameraInfo info, String physicalId)", "private void updateTorchCallbackLocked(TorchCallback callback, Executor executor)", "private void onTorchStatusChangedLocked(int status, DeviceCameraInfo info)", "private void onTorchStrengthLevelChangedLocked(DeviceCameraInfo info, int newStrengthLevel)", "public void registerAvailabilityCallback(AvailabilityCallback callback, Executor executor, boolean hasOpenCloseListenerPermission, int deviceId, int devicePolicy)", "public void unregisterAvailabilityCallback(AvailabilityCallback callback)", "public void registerTorchCallback(TorchCallback callback, Executor executor, int deviceId, int devicePolicy)", "public void unregisterTorchCallback(TorchCallback callback)", "public void onStatusChanged(int status, String cameraId, int deviceId) throws RemoteException", "public void onPhysicalCameraStatusChanged(int status, String cameraId, String physicalCameraId, int deviceId) throws RemoteException", "public void onTorchStatusChanged(int status, String cameraId, int deviceId) throws RemoteException", "public void onTorchStrengthLevelChanged(String cameraId, int newStrengthLevel, int deviceId) throws RemoteException", "public void onCameraAccessPrioritiesChanged()", "public void onCameraOpened(String cameraId, String clientPackageId, int deviceId)", "private void onCameraOpenedLocked(DeviceCameraInfo info, String clientPackageId)", "public void onCameraClosed(String cameraId, int deviceId)", "private void onCameraClosedLocked(DeviceCameraInfo info)", "private void scheduleCameraServiceReconnectionLocked()", "public void binderDied()" ],
  "variableNames" : [ "TAG", "DEBUG", "CAMERA_SERVICE_RECONNECT_DELAY_MS", "gCameraManager", "CAMERA_SERVICE_BINDER_NAME", "mScheduler", "mDeviceStatus", "mUnavailablePhysicalDevices", "mOpenedDevices", "mConcurrentCameraIdCombinations", "mCallbackMap", "mTorchClientBinder", "mTorchStatus", "mTorchCallbackMap", "mLock", "mCameraService", "mHasOpenCloseListenerPermission", "mDeviceStateHandlerThread", "mDeviceStateHandler", "mFoldStateListener", "sCameraServiceDisabled", "sLandscapeToPortrait" ]
}