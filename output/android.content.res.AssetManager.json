{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/AssetManager.java",
  "packageName" : "android.content.res",
  "className" : "AssetManager",
  "comment" : "\n * Provides access to an application's raw asset files; see {@link Resources}\n * for the way most applications will want to retrieve their resource data.\n * This class presents a lower-level API that allows you to open and read raw\n * files that have been bundled with the application as a simple stream of\n * bytes.\n ",
  "links" : [ "android.content.res.Resources" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_REFS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FRAMEWORK_APK_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEmptyApkAssets",
    "type" : "ApkAssets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSystem",
    "type" : "AssetManager",
    "comment" : " Not private for LayoutLib's BridgeAssetManager.",
    "links" : [ ]
  }, {
    "name" : "sSystemApkAssets",
    "type" : "ApkAssets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSystemApkAssetsSet",
    "type" : "ArraySet<ApkAssets>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COOKIE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Cookie value to use when the actual cookie is unknown. This value tells the system to search\n     * all the ApkAssets for the asset.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCESS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #open(String, int)}: no specific information about how\n     * data will be accessed.\n     ",
    "links" : [ "#open(String" ]
  }, {
    "name" : "ACCESS_RANDOM",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #open(String, int)}: Read chunks, and seek forward and\n     * backward.\n     ",
    "links" : [ "#open(String" ]
  }, {
    "name" : "ACCESS_STREAMING",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #open(String, int)}: Read sequentially, with an\n     * occasional forward seek.\n     ",
    "links" : [ "#open(String" ]
  }, {
    "name" : "ACCESS_BUFFER",
    "type" : "int",
    "comment" : "\n     * Mode for {@link #open(String, int)}: Attempt to load contents into\n     * memory, for fast small reads.\n     ",
    "links" : [ "#open(String" ]
  }, {
    "name" : "mValue",
    "type" : "TypedValue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffsets",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObject",
    "type" : "long",
    "comment" : " Pointer to native implementation, stuffed inside a long.",
    "links" : [ ]
  }, {
    "name" : "mApkAssets",
    "type" : "ApkAssets[]",
    "comment" : " The loaded asset paths.",
    "links" : [ ]
  }, {
    "name" : "mOpen",
    "type" : "boolean",
    "comment" : " Debug/reference counting implementation.",
    "links" : [ ]
  }, {
    "name" : "mNumRefs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefStacks",
    "type" : "HashMap<Long, RuntimeException>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoaders",
    "type" : "ResourcesLoader[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void createSystemAssetsInZygoteLocked(boolean reinitialize, String frameworkPath)",
    "returnType" : "void",
    "comment" : "\n     * This must be called from Zygote so that system assets are shared by all applications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AssetManager getSystem()",
    "returnType" : "AssetManager",
    "comment" : "\n     * Return a global shared asset manager that provides access to only\n     * system assets (no application assets).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close this asset manager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setApkAssets(@NonNull ApkAssets[] apkAssets, boolean invalidateCaches)",
    "returnType" : "void",
    "comment" : "\n     * Changes the asset paths in this AssetManager. This replaces the {@link #addAssetPath(String)}\n     * family of methods.\n     *\n     * @param apkAssets The new set of paths.\n     * @param invalidateCaches Whether to invalidate any caches. This should almost always be true.\n     *                         Set this to false if you are appending new resources\n     *                         (not new configurations).\n     * @hide\n     ",
    "links" : [ "#addAssetPath(String)" ]
  }, {
    "name" : " void setLoaders(@NonNull List<ResourcesLoader> newLoaders)",
    "returnType" : "void",
    "comment" : "\n     * Changes the {@link ResourcesLoader ResourcesLoaders} used in this AssetManager.\n     * @hide\n     ",
    "links" : [ "android.content.res.loader.ResourcesLoader" ]
  }, {
    "name" : "private void invalidateCachesLocked(int diff)",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the caches in this AssetManager according to the bitmask `diff`.\n     *\n     * @param diff The bitmask of changes generated by {@link Configuration#diff(Configuration)}.\n     * @see ActivityInfo.Config\n     ",
    "links" : [ "android.content.res.Configuration#diff(Configuration)" ]
  }, {
    "name" : "public ApkAssets[] getApkAssets()",
    "returnType" : "ApkAssets[]",
    "comment" : "\n     * Returns the set of ApkAssets loaded by this AssetManager. If the AssetManager is closed, this\n     * returns a 0-length array.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getApkPaths()",
    "returnType" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int findCookieForPath(@NonNull String path)",
    "returnType" : "int",
    "comment" : "\n     * Returns a cookie for use with the other APIs of AssetManager.\n     * @return 0 if the path was not found, otherwise a positive integer cookie representing\n     * this path in the AssetManager.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addAssetPath(String path)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}\n     * @hide\n     ",
    "links" : [ "#setApkAssets(ApkAssets" ]
  }, {
    "name" : "public int addAssetPathAsSharedLibrary(String path)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}\n     * @hide\n     ",
    "links" : [ "#setApkAssets(ApkAssets" ]
  }, {
    "name" : "public int addOverlayPath(String path)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}\n     * @hide\n     ",
    "links" : [ "#setApkAssets(ApkAssets" ]
  }, {
    "name" : "public void addSharedLibraryPaths(@NonNull String[] paths)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int addAssetPathInternal(String path, boolean overlay, boolean appAsLib)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResourcesLoader> getLoaders()",
    "returnType" : "List<ResourcesLoader>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void ensureValidLocked()",
    "returnType" : "void",
    "comment" : "\n     * Ensures that the native implementation has not been destroyed.\n     * The AssetManager may have been closed, but references to it still exist\n     * and therefore the native implementation is not destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureOpenLocked()",
    "returnType" : "void",
    "comment" : "\n     * Ensures that the AssetManager has not been explicitly closed. If this method passes,\n     * then this implies that ensureValidLocked() also passes.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getResourceValue(@AnyRes int resId, int densityDpi, @NonNull TypedValue outValue, boolean resolveRefs)",
    "returnType" : "boolean",
    "comment" : "\n     * Populates {@code outValue} with the data associated a particular\n     * resource identifier for the current configuration.\n     *\n     * @param resId the resource identifier to load\n     * @param densityDpi the density bucket for which to load the resource\n     * @param outValue the typed value in which to put the data\n     * @param resolveRefs {@code true} to resolve references, {@code false}\n     *                    to leave them unresolved\n     * @return {@code true} if the data was loaded into {@code outValue},\n     *         {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getResourceText(@StringRes int resId)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieves the string value associated with a particular resource\n     * identifier for the current configuration.\n     *\n     * @param resId the resource identifier to load\n     * @return the string value, or {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getResourceBagText(@StringRes int resId, int bagEntryId)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieves the string value associated with a particular resource\n     * identifier for the current configuration.\n     *\n     * @param resId the resource identifier to load\n     * @param bagEntryId the index into the bag to load\n     * @return the string value, or {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : " int getResourceArraySize(@ArrayRes int resId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getResourceArray(@ArrayRes int resId, @NonNull int[] outData)",
    "returnType" : "int",
    "comment" : "\n     * Populates `outData` with array elements of `resId`. `outData` is normally\n     * used with\n     * {@link TypedArray}.\n     *\n     * Each logical element in `outData` is {@link TypedArray#STYLE_NUM_ENTRIES}\n     * long,\n     * with the indices of the data representing the type, value, asset cookie,\n     * resource ID,\n     * configuration change mask, and density of the element.\n     *\n     * @param resId The resource ID of an array resource.\n     * @param outData The array to populate with data.\n     * @return The length of the array.\n     *\n     * @see TypedArray#STYLE_TYPE\n     * @see TypedArray#STYLE_DATA\n     * @see TypedArray#STYLE_ASSET_COOKIE\n     * @see TypedArray#STYLE_RESOURCE_ID\n     * @see TypedArray#STYLE_CHANGING_CONFIGURATIONS\n     * @see TypedArray#STYLE_DENSITY\n     ",
    "links" : [ "android.content.res.TypedArray#STYLE_NUM_ENTRIES", "android.content.res.TypedArray" ]
  }, {
    "name" : " String[] getResourceStringArray(@ArrayRes int resId)",
    "returnType" : "String[]",
    "comment" : "\n     * Retrieves the string array associated with a particular resource\n     * identifier for the current configuration.\n     *\n     * @param resId the resource identifier of the string array\n     * @return the string array, or {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence[] getResourceTextArray(@ArrayRes int resId)",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Retrieve the text array associated with a particular resource\n     * identifier.\n     *\n     * @param resId the resource id of the string array\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] getResourceIntArray(@ArrayRes int resId)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int[] getStyleAttributes(@StyleRes int resId)",
    "returnType" : "int[]",
    "comment" : "\n     * Get the attributes for a style resource. These are the &lt;item&gt;\n     * elements in\n     * a &lt;style&gt; resource.\n     * @param resId The resource ID of the style\n     * @return An array of attribute IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getThemeValue(long theme, @AnyRes int resId, @NonNull TypedValue outValue, boolean resolveRefs)",
    "returnType" : "boolean",
    "comment" : "\n     * Populates {@code outValue} with the data associated with a particular\n     * resource identifier for the current configuration. Resolves theme\n     * attributes against the specified theme.\n     *\n     * @param theme the native pointer of the theme\n     * @param resId the resource identifier to load\n     * @param outValue the typed value in which to put the data\n     * @param resolveRefs {@code true} to resolve references, {@code false}\n     *                    to leave them unresolved\n     * @return {@code true} if the data was loaded into {@code outValue},\n     *         {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : " void dumpTheme(long theme, int priority, String tag, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourceName(@AnyRes int resId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourcePackageName(@AnyRes int resId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourceTypeName(@AnyRes int resId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String getResourceEntryName(@AnyRes int resId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getResourceIdentifier(@NonNull String name, @Nullable String defType, @Nullable String defPackage)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getParentThemeIdentifier(@StyleRes int resId)",
    "returnType" : "int",
    "comment" : "\n     * To get the parent theme resource id according to the parameter theme resource id.\n     * @param resId theme resource id.\n     * @return the parent theme resource id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResourceResolutionLoggingEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable resource resolution logging to track the steps taken to resolve the last resource\n     * entry retrieved. Stores the configuration and package names for each step.\n     *\n     * Default disabled.\n     *\n     * @param enabled Boolean indicating whether to enable or disable logging.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLastResourceResolution()",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the last resource resolution path logged.\n     *\n     * @return Formatted string containing last resource ID/name and steps taken to resolve final\n     * entry, including configuration and package names.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsAllocatedTable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the {@code resources.arsc} of any loaded apk assets is allocated in RAM\n     * (not mmapped).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getPooledStringForCookie(int cookie, int id)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InputStream open(@NonNull String fileName) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open an asset using ACCESS_STREAMING mode.  This provides access to\n     * files that have been bundled with an application as assets -- that is,\n     * files placed in to the \"assets\" directory.\n     * \n     * @param fileName The name of the asset to open.  This name can be hierarchical.\n     * \n     * @see #open(String, int)\n     * @see #list\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream open(@NonNull String fileName, int accessMode) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open an asset using an explicit access mode, returning an InputStream to\n     * read its contents.  This provides access to files that have been bundled\n     * with an application as assets -- that is, files placed in to the\n     * \"assets\" directory.\n     * \n     * @param fileName The name of the asset to open.  This name can be hierarchical.\n     * @param accessMode Desired access mode for retrieving the data.\n     * \n     * @see #ACCESS_UNKNOWN\n     * @see #ACCESS_STREAMING\n     * @see #ACCESS_RANDOM\n     * @see #ACCESS_BUFFER\n     * @see #open(String)\n     * @see #list\n     ",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openFd(@NonNull String fileName) throws IOException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Open an uncompressed asset by mmapping it and returning an {@link AssetFileDescriptor}.\n     * This provides access to files that have been bundled with an application as assets -- that\n     * is, files placed in to the \"assets\" directory.\n     *\n     * The asset must be uncompressed, or an exception will be thrown.\n     *\n     * @param fileName The name of the asset to open.  This name can be hierarchical.\n     * @return An open AssetFileDescriptor.\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor" ]
  }, {
    "name" : "public String[] list(@NonNull String path) throws IOException",
    "returnType" : "String[]",
    "comment" : "\n     * Return a String array of all the assets at the given path.\n     * \n     * @param path A relative path within the assets, i.e., \"docs/home.html\".\n     * \n     * @return String[] Array of strings, one for each asset.  These file\n     *         names are relative to 'path'.  You can open the file by\n     *         concatenating 'path' and a name in the returned string (via\n     *         File) and passing that to open().\n     * \n     * @see #open\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream openNonAsset(@NonNull String fileName) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open a non-asset file as an asset using ACCESS_STREAMING mode.  This\n     * provides direct access to all of the files included in an application\n     * package (not only its assets).  Applications should not normally use\n     * this.\n     *\n     * @param fileName Name of the asset to retrieve.\n     *\n     * @see #open(String)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream openNonAsset(@NonNull String fileName, int accessMode) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open a non-asset file as an asset using a specific access mode.  This\n     * provides direct access to all of the files included in an application\n     * package (not only its assets).  Applications should not normally use\n     * this.\n     *\n     * @param fileName Name of the asset to retrieve.\n     * @param accessMode Desired access mode for retrieving the data.\n     *\n     * @see #ACCESS_UNKNOWN\n     * @see #ACCESS_STREAMING\n     * @see #ACCESS_RANDOM\n     * @see #ACCESS_BUFFER\n     * @see #open(String, int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream openNonAsset(int cookie, @NonNull String fileName) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open a non-asset in a specified package.  Not for use by applications.\n     *\n     * @param cookie Identifier of the package to be opened.\n     * @param fileName Name of the asset to retrieve.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream openNonAsset(int cookie, @NonNull String fileName, int accessMode) throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Open a non-asset in a specified package.  Not for use by applications.\n     *\n     * @param cookie Identifier of the package to be opened.\n     * @param fileName Name of the asset to retrieve.\n     * @param accessMode Desired access mode for retrieving the data.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openNonAssetFd(@NonNull String fileName) throws IOException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Open a non-asset as an asset by mmapping it and returning an {@link AssetFileDescriptor}.\n     * This provides direct access to all of the files included in an application\n     * package (not only its assets).  Applications should not normally use this.\n     *\n     * The asset must not be compressed, or an exception will be thrown.\n     *\n     * @param fileName Name of the asset to retrieve.\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor" ]
  }, {
    "name" : "public AssetFileDescriptor openNonAssetFd(int cookie, @NonNull String fileName) throws IOException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Open a non-asset as an asset by mmapping it and returning an {@link AssetFileDescriptor}.\n     * This provides direct access to all of the files included in an application\n     * package (not only its assets).  Applications should not normally use this.\n     *\n     * The asset must not be compressed, or an exception will be thrown.\n     *\n     * @param cookie Identifier of the package to be opened.\n     * @param fileName Name of the asset to retrieve.\n     ",
    "links" : [ "android.content.res.AssetFileDescriptor" ]
  }, {
    "name" : "public XmlResourceParser openXmlResourceParser(@NonNull String fileName) throws IOException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Retrieve a parser for a compiled XML file.\n     * \n     * @param fileName The name of the file to retrieve.\n     ",
    "links" : [ ]
  }, {
    "name" : "public XmlResourceParser openXmlResourceParser(int cookie, @NonNull String fileName) throws IOException",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Retrieve a parser for a compiled XML file.\n     * \n     * @param cookie Identifier of the package to be opened.\n     * @param fileName The name of the file to retrieve.\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlBlock openXmlBlockAsset(@NonNull String fileName) throws IOException",
    "returnType" : "XmlBlock",
    "comment" : "\n     * Retrieve a non-asset as a compiled XML file.  Not for use by applications.\n     * \n     * @param fileName The name of the file to retrieve.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlBlock openXmlBlockAsset(int cookie, @NonNull String fileName) throws IOException",
    "returnType" : "XmlBlock",
    "comment" : "\n     * Retrieve a non-asset as a compiled XML file.  Not for use by\n     * applications.\n     * \n     * @param cookie Identifier of the package to be opened.\n     * @param fileName Name of the asset to retrieve.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void xmlBlockGone(int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void applyStyle(long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @Nullable XmlBlock.Parser parser, @NonNull int[] inAttrs, long outValuesAddress, long outIndicesAddress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int[] getAttributeResolutionStack(long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @StyleRes int xmlStyle)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean resolveAttrs(long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @Nullable int[] inValues, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean retrieveAttributes(@NonNull XmlBlock.Parser parser, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long createTheme()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void releaseTheme(long themePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long getThemeFreeFunction()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void applyStyleToTheme(long themePtr, @StyleRes int resId, boolean force)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AssetManager rebaseTheme(long themePtr, @NonNull AssetManager newAssetManager, @StyleRes int[] styleIds, @StyleRes boolean[] force, int count)",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setThemeTo(long dstThemePtr, @NonNull AssetManager srcAssetManager, long srcThemePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpToDate()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether the state in this asset manager is up-to-date with\n     * the files on the filesystem.  If false is returned, you need to\n     * instantiate a new AssetManager class to see the new data.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getLocales()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the locales that this asset manager contains data for.\n     *\n     * <p>On SDK 21 (Android 5.0: Lollipop) and above, Locale strings are valid\n     * <a href=\"https://tools.ietf.org/html/bcp47\">BCP-47</a> language tags and can be\n     * parsed using {@link Locale#forLanguageTag(String)}.\n     *\n     * <p>On SDK 20 (Android 4.4W: KitKat for watches) and below, locale strings\n     * are of the form {@code ll_CC} where {@code ll} is a two letter language code,\n     * and {@code CC} is a two letter country code.\n     ",
    "links" : [ "java.util.Locale#forLanguageTag(String)" ]
  }, {
    "name" : "public String[] getNonSystemLocales()",
    "returnType" : "String[]",
    "comment" : "\n     * Same as getLocales(), except that locales that are only provided by the system (i.e. those\n     * present in framework-res.apk or its overlays) will not be listed.\n     *\n     * For example, if the \"system\" assets support English, French, and German, and the additional\n     * assets support Cherokee and French, getLocales() would return\n     * [Cherokee, English, French, German], while getNonSystemLocales() would return\n     * [Cherokee, French].\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " Configuration[] getSizeConfigurations()",
    "returnType" : "Configuration[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " Configuration[] getSizeAndUiModeConfigurations()",
    "returnType" : "Configuration[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConfiguration(int mcc, int mnc, @Nullable String locale, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion)",
    "returnType" : "void",
    "comment" : "\n     * Change the configuration used when retrieving resources.  Not for use by\n     * applications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConfiguration(int mcc, int mnc, String defaultLocale, String[] locales, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion)",
    "returnType" : "void",
    "comment" : "\n     * Change the configuration used when retrieving resources.  Not for use by\n     * applications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setConfigurationInternal(int mcc, int mnc, String defaultLocale, String[] locales, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion, boolean forceRefresh)",
    "returnType" : "void",
    "comment" : "\n     * Change the configuration used when retrieving resources, and potentially force a refresh of\n     * the state.  Not for use by applications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<String> getAssignedPackageIdentifiers()",
    "returnType" : "SparseArray<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<String> getAssignedPackageIdentifiers(boolean includeOverlays, boolean includeLoaders)",
    "returnType" : "SparseArray<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getOverlayableMap(String packageName)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOverlayablesToString(String packageName)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incRefsLocked(long id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void decRefsLocked(long id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreate()",
    "returnType" : "long",
    "comment" : " AssetManager setup native methods.",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroy(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetApkAssets(long ptr, @NonNull ApkAssets[] apkAssets, boolean invalidateCaches, boolean preset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetConfiguration(long ptr, int mcc, int mnc, @Nullable String defaultLocale, @NonNull String[] locales, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion, boolean forceRefresh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native SparseArray<String> nativeGetAssignedPackageIdentifiers(long ptr, boolean includeOverlays, boolean includeLoaders)",
    "returnType" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeContainsAllocatedTable(long ptr)",
    "returnType" : "boolean",
    "comment" : " File native methods.",
    "links" : [ ]
  }, {
    "name" : "private static native String[] nativeList(long ptr, @NonNull String path) throws IOException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpenAsset(long ptr, @NonNull String fileName, int accessMode)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native ParcelFileDescriptor nativeOpenAssetFd(long ptr, @NonNull String fileName, long[] outOffsets) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpenNonAsset(long ptr, int cookie, @NonNull String fileName, int accessMode)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native ParcelFileDescriptor nativeOpenNonAssetFd(long ptr, int cookie, @NonNull String fileName, @NonNull long[] outOffsets) throws IOException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpenXmlAsset(long ptr, int cookie, @NonNull String fileName)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeOpenXmlAssetFd(long ptr, int cookie, @NonNull FileDescriptor fileDescriptor)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetResourceValue(long ptr, @AnyRes int resId, short density, @NonNull TypedValue outValue, boolean resolveReferences)",
    "returnType" : "int",
    "comment" : " Primitive resource native methods.",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetResourceBagValue(long ptr, @AnyRes int resId, int bagEntryId, @NonNull TypedValue outValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetStyleAttributes(long ptr, @StyleRes int resId)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String[] nativeGetResourceStringArray(long ptr, @ArrayRes int resId)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetResourceStringArrayInfo(long ptr, @ArrayRes int resId)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetResourceIntArray(long ptr, @ArrayRes int resId)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetResourceArraySize(long ptr, @ArrayRes int resId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetResourceArray(long ptr, @ArrayRes int resId, @NonNull int[] outValues)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetResourceIdentifier(long ptr, @NonNull String name, @Nullable String defType, @Nullable String defPackage)",
    "returnType" : "int",
    "comment" : " Resource name/ID native methods.",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetResourceName(long ptr, @AnyRes int resid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetResourcePackageName(long ptr, @AnyRes int resid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetResourceTypeName(long ptr, @AnyRes int resid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetResourceEntryName(long ptr, @AnyRes int resid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String[] nativeGetLocales(long ptr, boolean excludeSystem)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Configuration[] nativeGetSizeConfigurations(long ptr)",
    "returnType" : "Configuration[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Configuration[] nativeGetSizeAndUiModeConfigurations(long ptr)",
    "returnType" : "Configuration[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetResourceResolutionLoggingEnabled(long ptr, boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetLastResourceResolution(long ptr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeAttributeResolutionStack(long ptr, long themePtr, @StyleRes int xmlStyleRes, @AttrRes int defStyleAttr, @StyleRes int defStyleRes)",
    "returnType" : "int[]",
    "comment" : " Style attribute retrieval native methods.",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeApplyStyle(long ptr, long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, long xmlParserPtr, @NonNull int[] inAttrs, long outValuesAddress, long outIndicesAddress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeResolveAttrs(long ptr, long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @Nullable int[] inValues, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeRetrieveAttributes(long ptr, long xmlParserPtr, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeThemeCreate(long ptr)",
    "returnType" : "long",
    "comment" : " Theme related native methods",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetThemeFreeFunction()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeThemeApplyStyle(long ptr, long themePtr, @StyleRes int resId, boolean force)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeThemeRebase(long ptr, long themePtr, @NonNull int[] styleIds, @NonNull boolean[] force, int styleSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeThemeCopy(long dstAssetManagerPtr, long dstThemePtr, long srcAssetManagerPtr, long srcThemePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeThemeGetAttributeValue(long ptr, long themePtr, @AttrRes int resId, @NonNull TypedValue outValue, boolean resolve)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeThemeDump(long ptr, long themePtr, int priority, String tag, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static native int nativeThemeGetChangingConfigurations(long themePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetParentThemeIdentifier(long ptr, @StyleRes int styleId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAssetDestroy(long assetPtr)",
    "returnType" : "void",
    "comment" : " AssetInputStream related native methods.",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeAssetReadChar(long assetPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeAssetRead(long assetPtr, byte[] b, int off, int len)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeAssetSeek(long assetPtr, long offset, int whence)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeAssetGetLength(long assetPtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeAssetGetRemainingLength(long assetPtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Map nativeGetOverlayableMap(long ptr, @NonNull String packageName)",
    "returnType" : "Map",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetOverlayablesToString(long ptr, @NonNull String packageName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static native int getGlobalAssetCount()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native String getAssetAllocations()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getGlobalAssetManagerCount()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void createSystemAssetsInZygoteLocked(boolean reinitialize, String frameworkPath)", "public static AssetManager getSystem()", "public void close()", "public void setApkAssets(@NonNull ApkAssets[] apkAssets, boolean invalidateCaches)", " void setLoaders(@NonNull List<ResourcesLoader> newLoaders)", "private void invalidateCachesLocked(int diff)", "public ApkAssets[] getApkAssets()", "public String[] getApkPaths()", "public int findCookieForPath(@NonNull String path)", "public int addAssetPath(String path)", "public int addAssetPathAsSharedLibrary(String path)", "public int addOverlayPath(String path)", "public void addSharedLibraryPaths(@NonNull String[] paths)", "private int addAssetPathInternal(String path, boolean overlay, boolean appAsLib)", "public List<ResourcesLoader> getLoaders()", "private void ensureValidLocked()", "private void ensureOpenLocked()", " boolean getResourceValue(@AnyRes int resId, int densityDpi, @NonNull TypedValue outValue, boolean resolveRefs)", " CharSequence getResourceText(@StringRes int resId)", " CharSequence getResourceBagText(@StringRes int resId, int bagEntryId)", " int getResourceArraySize(@ArrayRes int resId)", " int getResourceArray(@ArrayRes int resId, @NonNull int[] outData)", " String[] getResourceStringArray(@ArrayRes int resId)", " CharSequence[] getResourceTextArray(@ArrayRes int resId)", " int[] getResourceIntArray(@ArrayRes int resId)", " int[] getStyleAttributes(@StyleRes int resId)", " boolean getThemeValue(long theme, @AnyRes int resId, @NonNull TypedValue outValue, boolean resolveRefs)", " void dumpTheme(long theme, int priority, String tag, String prefix)", " String getResourceName(@AnyRes int resId)", " String getResourcePackageName(@AnyRes int resId)", " String getResourceTypeName(@AnyRes int resId)", " String getResourceEntryName(@AnyRes int resId)", " int getResourceIdentifier(@NonNull String name, @Nullable String defType, @Nullable String defPackage)", " int getParentThemeIdentifier(@StyleRes int resId)", "public void setResourceResolutionLoggingEnabled(boolean enabled)", "public String getLastResourceResolution()", "public boolean containsAllocatedTable()", " CharSequence getPooledStringForCookie(int cookie, int id)", "public InputStream open(@NonNull String fileName) throws IOException", "public InputStream open(@NonNull String fileName, int accessMode) throws IOException", "public AssetFileDescriptor openFd(@NonNull String fileName) throws IOException", "public String[] list(@NonNull String path) throws IOException", "public InputStream openNonAsset(@NonNull String fileName) throws IOException", "public InputStream openNonAsset(@NonNull String fileName, int accessMode) throws IOException", "public InputStream openNonAsset(int cookie, @NonNull String fileName) throws IOException", "public InputStream openNonAsset(int cookie, @NonNull String fileName, int accessMode) throws IOException", "public AssetFileDescriptor openNonAssetFd(@NonNull String fileName) throws IOException", "public AssetFileDescriptor openNonAssetFd(int cookie, @NonNull String fileName) throws IOException", "public XmlResourceParser openXmlResourceParser(@NonNull String fileName) throws IOException", "public XmlResourceParser openXmlResourceParser(int cookie, @NonNull String fileName) throws IOException", " XmlBlock openXmlBlockAsset(@NonNull String fileName) throws IOException", " XmlBlock openXmlBlockAsset(int cookie, @NonNull String fileName) throws IOException", " void xmlBlockGone(int id)", " void applyStyle(long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @Nullable XmlBlock.Parser parser, @NonNull int[] inAttrs, long outValuesAddress, long outIndicesAddress)", " int[] getAttributeResolutionStack(long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @StyleRes int xmlStyle)", " boolean resolveAttrs(long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @Nullable int[] inValues, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)", " boolean retrieveAttributes(@NonNull XmlBlock.Parser parser, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)", " long createTheme()", " void releaseTheme(long themePtr)", " static long getThemeFreeFunction()", " void applyStyleToTheme(long themePtr, @StyleRes int resId, boolean force)", " AssetManager rebaseTheme(long themePtr, @NonNull AssetManager newAssetManager, @StyleRes int[] styleIds, @StyleRes boolean[] force, int count)", " void setThemeTo(long dstThemePtr, @NonNull AssetManager srcAssetManager, long srcThemePtr)", "protected void finalize() throws Throwable", "public boolean isUpToDate()", "public String[] getLocales()", "public String[] getNonSystemLocales()", " Configuration[] getSizeConfigurations()", " Configuration[] getSizeAndUiModeConfigurations()", "public void setConfiguration(int mcc, int mnc, @Nullable String locale, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion)", "public void setConfiguration(int mcc, int mnc, String defaultLocale, String[] locales, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion)", " void setConfigurationInternal(int mcc, int mnc, String defaultLocale, String[] locales, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion, boolean forceRefresh)", "public SparseArray<String> getAssignedPackageIdentifiers()", "public SparseArray<String> getAssignedPackageIdentifiers(boolean includeOverlays, boolean includeLoaders)", "public Map<String, String> getOverlayableMap(String packageName)", "public String getOverlayablesToString(String packageName)", "private void incRefsLocked(long id)", "private void decRefsLocked(long id)", " synchronized void dump(PrintWriter pw, String prefix)", "private static native long nativeCreate()", "private static native void nativeDestroy(long ptr)", "private static native void nativeSetApkAssets(long ptr, @NonNull ApkAssets[] apkAssets, boolean invalidateCaches, boolean preset)", "private static native void nativeSetConfiguration(long ptr, int mcc, int mnc, @Nullable String defaultLocale, @NonNull String[] locales, int orientation, int touchscreen, int density, int keyboard, int keyboardHidden, int navigation, int screenWidth, int screenHeight, int smallestScreenWidthDp, int screenWidthDp, int screenHeightDp, int screenLayout, int uiMode, int colorMode, int grammaticalGender, int majorVersion, boolean forceRefresh)", "private static native SparseArray<String> nativeGetAssignedPackageIdentifiers(long ptr, boolean includeOverlays, boolean includeLoaders)", "private static native boolean nativeContainsAllocatedTable(long ptr)", "private static native String[] nativeList(long ptr, @NonNull String path) throws IOException", "private static native long nativeOpenAsset(long ptr, @NonNull String fileName, int accessMode)", "private static native ParcelFileDescriptor nativeOpenAssetFd(long ptr, @NonNull String fileName, long[] outOffsets) throws IOException", "private static native long nativeOpenNonAsset(long ptr, int cookie, @NonNull String fileName, int accessMode)", "private static native ParcelFileDescriptor nativeOpenNonAssetFd(long ptr, int cookie, @NonNull String fileName, @NonNull long[] outOffsets) throws IOException", "private static native long nativeOpenXmlAsset(long ptr, int cookie, @NonNull String fileName)", "private static native long nativeOpenXmlAssetFd(long ptr, int cookie, @NonNull FileDescriptor fileDescriptor)", "private static native int nativeGetResourceValue(long ptr, @AnyRes int resId, short density, @NonNull TypedValue outValue, boolean resolveReferences)", "private static native int nativeGetResourceBagValue(long ptr, @AnyRes int resId, int bagEntryId, @NonNull TypedValue outValue)", "private static native int[] nativeGetStyleAttributes(long ptr, @StyleRes int resId)", "private static native String[] nativeGetResourceStringArray(long ptr, @ArrayRes int resId)", "private static native int[] nativeGetResourceStringArrayInfo(long ptr, @ArrayRes int resId)", "private static native int[] nativeGetResourceIntArray(long ptr, @ArrayRes int resId)", "private static native int nativeGetResourceArraySize(long ptr, @ArrayRes int resId)", "private static native int nativeGetResourceArray(long ptr, @ArrayRes int resId, @NonNull int[] outValues)", "private static native int nativeGetResourceIdentifier(long ptr, @NonNull String name, @Nullable String defType, @Nullable String defPackage)", "private static native String nativeGetResourceName(long ptr, @AnyRes int resid)", "private static native String nativeGetResourcePackageName(long ptr, @AnyRes int resid)", "private static native String nativeGetResourceTypeName(long ptr, @AnyRes int resid)", "private static native String nativeGetResourceEntryName(long ptr, @AnyRes int resid)", "private static native String[] nativeGetLocales(long ptr, boolean excludeSystem)", "private static native Configuration[] nativeGetSizeConfigurations(long ptr)", "private static native Configuration[] nativeGetSizeAndUiModeConfigurations(long ptr)", "private static native void nativeSetResourceResolutionLoggingEnabled(long ptr, boolean enabled)", "private static native String nativeGetLastResourceResolution(long ptr)", "private static native int[] nativeAttributeResolutionStack(long ptr, long themePtr, @StyleRes int xmlStyleRes, @AttrRes int defStyleAttr, @StyleRes int defStyleRes)", "private static native void nativeApplyStyle(long ptr, long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, long xmlParserPtr, @NonNull int[] inAttrs, long outValuesAddress, long outIndicesAddress)", "private static native boolean nativeResolveAttrs(long ptr, long themePtr, @AttrRes int defStyleAttr, @StyleRes int defStyleRes, @Nullable int[] inValues, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)", "private static native boolean nativeRetrieveAttributes(long ptr, long xmlParserPtr, @NonNull int[] inAttrs, @NonNull int[] outValues, @NonNull int[] outIndices)", "private static native long nativeThemeCreate(long ptr)", "private static native long nativeGetThemeFreeFunction()", "private static native void nativeThemeApplyStyle(long ptr, long themePtr, @StyleRes int resId, boolean force)", "private static native void nativeThemeRebase(long ptr, long themePtr, @NonNull int[] styleIds, @NonNull boolean[] force, int styleSize)", "private static native void nativeThemeCopy(long dstAssetManagerPtr, long dstThemePtr, long srcAssetManagerPtr, long srcThemePtr)", "private static native int nativeThemeGetAttributeValue(long ptr, long themePtr, @AttrRes int resId, @NonNull TypedValue outValue, boolean resolve)", "private static native void nativeThemeDump(long ptr, long themePtr, int priority, String tag, String prefix)", " static native int nativeThemeGetChangingConfigurations(long themePtr)", "private static native int nativeGetParentThemeIdentifier(long ptr, @StyleRes int styleId)", "private static native void nativeAssetDestroy(long assetPtr)", "private static native int nativeAssetReadChar(long assetPtr)", "private static native int nativeAssetRead(long assetPtr, byte[] b, int off, int len)", "private static native long nativeAssetSeek(long assetPtr, long offset, int whence)", "private static native long nativeAssetGetLength(long assetPtr)", "private static native long nativeAssetGetRemainingLength(long assetPtr)", "private static native Map nativeGetOverlayableMap(long ptr, @NonNull String packageName)", "private static native String nativeGetOverlayablesToString(long ptr, @NonNull String packageName)", "public static native int getGlobalAssetCount()", "public static native String getAssetAllocations()", "public static native int getGlobalAssetManagerCount()" ],
  "variableNames" : [ "TAG", "DEBUG_REFS", "FRAMEWORK_APK_PATH", "sSync", "sEmptyApkAssets", "sSystem", "sSystemApkAssets", "sSystemApkAssetsSet", "COOKIE_UNKNOWN", "ACCESS_UNKNOWN", "ACCESS_RANDOM", "ACCESS_STREAMING", "ACCESS_BUFFER", "mValue", "mOffsets", "mObject", "mApkAssets", "mOpen", "mNumRefs", "mRefStacks", "mLoaders" ]
}