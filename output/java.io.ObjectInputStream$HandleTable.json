{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectInputStream.java",
  "packageName" : "java.io",
  "className" : "HandleTable",
  "comment" : " REMIND: add full description of exception propagation algorithm?",
  "links" : [ ],
  "variables" : [ {
    "name" : "STATUS_OK",
    "type" : "byte",
    "comment" : " status codes indicating whether object has associated exception ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNKNOWN",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_EXCEPTION",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "status",
    "type" : "byte[]",
    "comment" : " array mapping handle -> object status ",
    "links" : [ ]
  }, {
    "name" : "entries",
    "type" : "Object[]",
    "comment" : " array mapping handle -> object/exception (depending on status) ",
    "links" : [ ]
  }, {
    "name" : "deps",
    "type" : "HandleList[]",
    "comment" : " array mapping handle -> list of dependent handles (if any) ",
    "links" : [ ]
  }, {
    "name" : "lowDep",
    "type" : "int",
    "comment" : " lowest unresolved dependency ",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : " number of handles in table ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int assign(Object obj)",
    "returnType" : "int",
    "comment" : "\n         * Assigns next available handle to given object, and returns assigned\n         * handle.  Once object has been completely deserialized (and all\n         * dependencies on other objects identified), the handle should be\n         * \"closed\" by passing it to finish().\n         ",
    "links" : [ ]
  }, {
    "name" : " void markDependency(int dependent, int target)",
    "returnType" : "void",
    "comment" : "\n         * Registers a dependency (in exception status) of one handle on\n         * another.  The dependent handle must be \"open\" (i.e., assigned, but\n         * not finished yet).  No action is taken if either dependent or target\n         * handle is NULL_HANDLE.\n         ",
    "links" : [ ]
  }, {
    "name" : " void markException(int handle, ClassNotFoundException ex)",
    "returnType" : "void",
    "comment" : "\n         * Associates a ClassNotFoundException (if one not already associated)\n         * with the currently active handle and propagates it to other\n         * referencing objects as appropriate.  The specified handle must be\n         * \"open\" (i.e., assigned, but not finished yet).\n         ",
    "links" : [ ]
  }, {
    "name" : " void finish(int handle)",
    "returnType" : "void",
    "comment" : "\n         * Marks given handle as finished, meaning that no new dependencies\n         * will be marked for handle.  Calls to the assign and finish methods\n         * must occur in LIFO order.\n         ",
    "links" : [ ]
  }, {
    "name" : " void setObject(int handle, Object obj)",
    "returnType" : "void",
    "comment" : "\n         * Assigns a new object to the given handle.  The object previously\n         * associated with the handle is forgotten.  This method has no effect\n         * if the given handle already has an exception associated with it.\n         * This method may be called at any time after the handle is assigned.\n         ",
    "links" : [ ]
  }, {
    "name" : " Object lookupObject(int handle)",
    "returnType" : "Object",
    "comment" : "\n         * Looks up and returns object associated with the given handle.\n         * Returns null if the given handle is NULL_HANDLE, or if it has an\n         * associated ClassNotFoundException.\n         ",
    "links" : [ ]
  }, {
    "name" : " ClassNotFoundException lookupException(int handle)",
    "returnType" : "ClassNotFoundException",
    "comment" : "\n         * Looks up and returns ClassNotFoundException associated with the\n         * given handle.  Returns null if the given handle is NULL_HANDLE, or\n         * if there is no ClassNotFoundException associated with the handle.\n         ",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n         * Resets table to its initial state.\n         ",
    "links" : [ ]
  }, {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n         * Returns number of handles registered in table.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void grow()",
    "returnType" : "void",
    "comment" : "\n         * Expands capacity of internal arrays.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int assign(Object obj)", " void markDependency(int dependent, int target)", " void markException(int handle, ClassNotFoundException ex)", " void finish(int handle)", " void setObject(int handle, Object obj)", " Object lookupObject(int handle)", " ClassNotFoundException lookupException(int handle)", " void clear()", " int size()", "private void grow()" ],
  "variableNames" : [ "STATUS_OK", "STATUS_UNKNOWN", "STATUS_EXCEPTION", "status", "entries", "deps", "lowDep", "size" ]
}