{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/BaseInputConnection.java",
  "packageName" : "android.view.inputmethod",
  "className" : "BaseInputConnection",
  "comment" : "\n * Base class for implementors of the InputConnection interface, taking care\n * of most of the common behavior for providing a connection to an Editable.\n * Implementors of this class will want to be sure to implement\n * {@link #getEditable} to provide access to their own editable object, and\n * to refer to the documentation in {@link InputConnection}.\n ",
  "links" : [ "#getEditable", "android.view.inputmethod.InputConnection" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPOSING",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIMM",
    "type" : "InputMethodManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mTargetView",
    "type" : "View",
    "comment" : "\n     * Target view for the input connection.\n     *\n     * <p>This could be null for a fallback input connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFallbackMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultComposingSpans",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEditable",
    "type" : "Editable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyCharacterMap",
    "type" : "KeyCharacterMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final void removeComposingSpans(@NonNull Spannable text)",
    "returnType" : "void",
    "comment" : "\n     * Removes the composing spans from the given text if any.\n     *\n     * @param text the spannable text to remove composing spans\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setComposingSpans(@NonNull Spannable text)",
    "returnType" : "void",
    "comment" : "\n     * Removes the composing spans from the given text if any.\n     *\n     * @param text the spannable text to remove composing spans\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setComposingSpans(@NonNull Spannable text, int start, int end)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getComposingSpanStart(@NonNull Spannable text)",
    "returnType" : "int",
    "comment" : " Return the beginning of the range of composing text, or -1 if there's no composing text. ",
    "links" : [ ]
  }, {
    "name" : "public static int getComposingSpanEnd(@NonNull Spannable text)",
    "returnType" : "int",
    "comment" : " Return the end of the range of composing text, or -1 if there's no composing text. ",
    "links" : [ ]
  }, {
    "name" : "public Editable getEditable()",
    "returnType" : "Editable",
    "comment" : "\n     * Return the target of edit operations. The default implementation returns its own fake\n     * editable that is just used for composing text; subclasses that are real text editors should\n     * override this and supply their own.\n     *\n     * <p>Subclasses could override this method to turn null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean beginBatchEdit()",
    "returnType" : "boolean",
    "comment" : " Default implementation does nothing. ",
    "links" : [ ]
  }, {
    "name" : "public boolean endBatchEdit()",
    "returnType" : "boolean",
    "comment" : " Default implementation does nothing. ",
    "links" : [ ]
  }, {
    "name" : "public void endComposingRegionEditInternal()",
    "returnType" : "void",
    "comment" : "\n     * Called after only the composing region is modified (so it isn't called if the text also\n     * changes).\n     *\n     * <p>Default implementation does nothing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeConnection()",
    "returnType" : "void",
    "comment" : "\n     * Default implementation calls {@link #finishComposingText()} and {@code\n     * setImeConsumesInput(false)}.\n     ",
    "links" : [ "#finishComposingText()" ]
  }, {
    "name" : "public boolean clearMetaKeyStates(int states)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation uses {@link MetaKeyKeyListener#clearMetaKeyState(long, int)\n     * MetaKeyKeyListener.clearMetaKeyState(long, int)} to clear the state.\n     ",
    "links" : [ "android.text.method.MetaKeyKeyListener#clearMetaKeyState(long" ]
  }, {
    "name" : "public boolean commitCompletion(CompletionInfo text)",
    "returnType" : "boolean",
    "comment" : " Default implementation does nothing and returns false. ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitCorrection(CorrectionInfo correctionInfo)",
    "returnType" : "boolean",
    "comment" : " Default implementation does nothing and returns false. ",
    "links" : [ ]
  }, {
    "name" : "public boolean commitText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation replaces any existing composing text with the given text. In addition,\n     * only if fallback mode, a key event is sent for the new text and the current editable buffer\n     * cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSurroundingText(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * The default implementation performs the deletion around the current selection position of the\n     * editable text.\n     *\n     * @param beforeLength The number of characters before the cursor to be deleted, in code unit.\n     *     If this is greater than the number of existing characters between the beginning of the\n     *     text and the cursor, then this method does not fail but deletes all the characters in\n     *     that range.\n     * @param afterLength The number of characters after the cursor to be deleted, in code unit. If\n     *     this is greater than the number of existing characters between the cursor and the end of\n     *     the text, then this method does not fail but deletes all the characters in that range.\n     * @return {@code true} when selected text is deleted, {@code false} when either the selection\n     *     is invalid or not yet attached (i.e. selection start or end is -1), or the editable text\n     *     is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int findIndexBackward(final CharSequence cs, final int from, final int numCodePoints)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int findIndexForward(final CharSequence cs, final int from, final int numCodePoints)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)",
    "returnType" : "boolean",
    "comment" : "\n     * The default implementation performs the deletion around the current selection position of the\n     * editable text.\n     *\n     * @param beforeLength The number of characters before the cursor to be deleted, in code points.\n     *     If this is greater than the number of existing characters between the beginning of the\n     *     text and the cursor, then this method does not fail but deletes all the characters in\n     *     that range.\n     * @param afterLength The number of characters after the cursor to be deleted, in code points.\n     *     If this is greater than the number of existing characters between the cursor and the end\n     *     of the text, then this method does not fail but deletes all the characters in that range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean finishComposingText()",
    "returnType" : "boolean",
    "comment" : "\n     * The default implementation removes the composing state from the current editable text. In\n     * addition, only if fallback mode, a key event is sent for the new text and the current\n     * editable buffer cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCursorCapsMode(int reqModes)",
    "returnType" : "int",
    "comment" : "\n     * The default implementation uses TextUtils.getCapsMode to get the cursor caps mode for the\n     * current selection position in the editable text, unless in fallback mode in which case 0 is\n     * always returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ExtractedText getExtractedText(ExtractedTextRequest request, int flags)",
    "returnType" : "ExtractedText",
    "comment" : " The default implementation always returns null. ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextBeforeCursor(@IntRange(from = 0) int length, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * The default implementation returns the given amount of text from the current cursor position\n     * in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSelectedText(int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * The default implementation returns the text currently selected, or null if none is selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextAfterCursor(@IntRange(from = 0) int length, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * The default implementation returns the given amount of text from the current cursor position\n     * in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SurroundingText getSurroundingText(@IntRange(from = 0) int beforeLength, @IntRange(from = 0) int afterLength, int flags)",
    "returnType" : "SurroundingText",
    "comment" : "\n     * The default implementation returns the given amount of text around the current cursor\n     * position in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performEditorAction(int actionCode)",
    "returnType" : "boolean",
    "comment" : " The default implementation turns this into the enter key. ",
    "links" : [ ]
  }, {
    "name" : "public boolean performContextMenuAction(int id)",
    "returnType" : "boolean",
    "comment" : " The default implementation does nothing. ",
    "links" : [ ]
  }, {
    "name" : "public boolean performPrivateCommand(String action, Bundle data)",
    "returnType" : "boolean",
    "comment" : " The default implementation does nothing. ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestCursorUpdates(int cursorUpdateMode)",
    "returnType" : "boolean",
    "comment" : " The default implementation does nothing. ",
    "links" : [ ]
  }, {
    "name" : "public Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingText(CharSequence text, int newCursorPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * The default implementation places the given text into the editable, replacing any existing\n     * composing text. The new text is marked as in a composing state with the composing style.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setComposingRegion(int start, int end)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setSelection(int start, int end)",
    "returnType" : "boolean",
    "comment" : " The default implementation changes the selection position in the current editable text. ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides standard implementation for sending a key event to the window attached to the input\n     * connection's view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reportFullscreenMode(boolean enabled)",
    "returnType" : "boolean",
    "comment" : " Updates InputMethodManager with the current fullscreen mode. ",
    "links" : [ ]
  }, {
    "name" : "private void sendCurrentText()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureDefaultComposingSpans()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean replaceText(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void replaceText(CharSequence text, int newCursorPosition, boolean composing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void replaceTextInternal(int a, int b, CharSequence text, int newCursorPosition, boolean composing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)",
    "returnType" : "boolean",
    "comment" : "\n     * Default implementation which invokes {@link View#performReceiveContent} on the target view if\n     * the view {@link View#getReceiveContentMimeTypes allows} content insertion; otherwise returns\n     * false without any side effects.\n     ",
    "links" : [ "android.view.View#performReceiveContent", "android.view.View#getReceiveContentMimeTypes" ]
  }, {
    "name" : "public TextSnapshot takeSnapshot()",
    "returnType" : "TextSnapshot",
    "comment" : "\n     * Default implementation that constructs {@link TextSnapshot} with information extracted from\n     * {@link BaseInputConnection}.\n     *\n     * @return {@code null} when {@link TextSnapshot} cannot be fully taken.\n     ",
    "links" : [ "android.view.inputmethod.TextSnapshot", "android.view.inputmethod.BaseInputConnection" ]
  } ],
  "methodNames" : [ "public static final void removeComposingSpans(@NonNull Spannable text)", "public static void setComposingSpans(@NonNull Spannable text)", "public static void setComposingSpans(@NonNull Spannable text, int start, int end)", "public static int getComposingSpanStart(@NonNull Spannable text)", "public static int getComposingSpanEnd(@NonNull Spannable text)", "public Editable getEditable()", "public boolean beginBatchEdit()", "public boolean endBatchEdit()", "public void endComposingRegionEditInternal()", "public void closeConnection()", "public boolean clearMetaKeyStates(int states)", "public boolean commitCompletion(CompletionInfo text)", "public boolean commitCorrection(CorrectionInfo correctionInfo)", "public boolean commitText(CharSequence text, int newCursorPosition)", "public boolean deleteSurroundingText(int beforeLength, int afterLength)", "private static int findIndexBackward(final CharSequence cs, final int from, final int numCodePoints)", "private static int findIndexForward(final CharSequence cs, final int from, final int numCodePoints)", "public boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)", "public boolean finishComposingText()", "public int getCursorCapsMode(int reqModes)", "public ExtractedText getExtractedText(ExtractedTextRequest request, int flags)", "public CharSequence getTextBeforeCursor(@IntRange(from = 0) int length, int flags)", "public CharSequence getSelectedText(int flags)", "public CharSequence getTextAfterCursor(@IntRange(from = 0) int length, int flags)", "public SurroundingText getSurroundingText(@IntRange(from = 0) int beforeLength, @IntRange(from = 0) int afterLength, int flags)", "public boolean performEditorAction(int actionCode)", "public boolean performContextMenuAction(int id)", "public boolean performPrivateCommand(String action, Bundle data)", "public boolean requestCursorUpdates(int cursorUpdateMode)", "public Handler getHandler()", "public boolean setComposingText(CharSequence text, int newCursorPosition)", "public boolean setComposingRegion(int start, int end)", "public boolean setSelection(int start, int end)", "public boolean sendKeyEvent(KeyEvent event)", "public boolean reportFullscreenMode(boolean enabled)", "private void sendCurrentText()", "private void ensureDefaultComposingSpans()", "public boolean replaceText(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull CharSequence text, int newCursorPosition, @Nullable TextAttribute textAttribute)", "private void replaceText(CharSequence text, int newCursorPosition, boolean composing)", "private void replaceTextInternal(int a, int b, CharSequence text, int newCursorPosition, boolean composing)", "public boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", "public TextSnapshot takeSnapshot()" ],
  "variableNames" : [ "DEBUG", "TAG", "COMPOSING", "mIMM", "mTargetView", "mFallbackMode", "mDefaultComposingSpans", "mEditable", "mKeyCharacterMap", "INVALID_INDEX" ]
}