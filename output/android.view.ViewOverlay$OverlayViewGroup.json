{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ViewOverlay.java",
  "packageName" : "android.view",
  "className" : "OverlayViewGroup",
  "comment" : "\n     * OverlayViewGroup is a container that View and ViewGroup use to host\n     * drawables and views added to their overlays  ({@link ViewOverlay} and\n     * {@link ViewGroupOverlay}, respectively). Drawables are added to the overlay\n     * via the add/remove methods in ViewOverlay, Views are added/removed via\n     * ViewGroupOverlay. These drawable and view objects are\n     * drawn whenever the view itself is drawn; first the view draws its own\n     * content (and children, if it is a ViewGroup), then it draws its overlay\n     * (if it has one).\n     *\n     * <p>Besides managing and drawing the list of drawables, this class serves\n     * two purposes:\n     * (1) it noops layout calls because children are absolutely positioned and\n     * (2) it forwards all invalidation calls to its host view. The invalidation\n     * redirect is necessary because the overlay is not a child of the host view\n     * and invalidation cannot therefore follow the normal path up through the\n     * parent hierarchy.</p>\n     *\n     * @see View#getOverlay()\n     * @see ViewGroup#getOverlay()\n     ",
  "links" : [ "android.view.ViewGroupOverlay", "android.view.ViewOverlay" ],
  "variables" : [ {
    "name" : "mHostView",
    "type" : "View",
    "comment" : "\n         * The View for which this is an overlay. Invalidations of the overlay are redirected to\n         * this host view.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDrawables",
    "type" : "ArrayList<Drawable>",
    "comment" : "\n         * The set of drawables to draw when the overlay is rendered.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(@NonNull Drawable drawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void remove(@NonNull Drawable drawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void add(@NonNull View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void remove(@NonNull View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable drawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidate(Rect dirty)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidate(int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidate(boolean invalidateCache)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void invalidateViewProperty(boolean invalidateParent, boolean forceRedraw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void invalidateParentCaches()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void invalidateParentIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDescendantInvalidated(@NonNull View child, @NonNull View target)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ViewParent invalidateChildInParent(int[] location, Rect dirty)",
    "returnType" : "ViewParent",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(@NonNull Drawable drawable)", "public void remove(@NonNull Drawable drawable)", "protected boolean verifyDrawable(@NonNull Drawable who)", "public void add(@NonNull View child)", "public void remove(@NonNull View view)", "public void clear()", " boolean isEmpty()", "public void invalidateDrawable(@NonNull Drawable drawable)", "protected void dispatchDraw(Canvas canvas)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "public void invalidate(Rect dirty)", "public void invalidate(int l, int t, int r, int b)", "public void invalidate()", "public void invalidate(boolean invalidateCache)", " void invalidateViewProperty(boolean invalidateParent, boolean forceRedraw)", "protected void invalidateParentCaches()", "protected void invalidateParentIfNeeded()", "public void onDescendantInvalidated(@NonNull View child, @NonNull View target)", "public ViewParent invalidateChildInParent(int[] location, Rect dirty)" ],
  "variableNames" : [ "mHostView", "mDrawables" ]
}