{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/StrictMode.java",
  "packageName" : "android.os",
  "className" : "Builder",
  "comment" : "\n         * Creates {@link VmPolicy} instances. Methods whose names start with {@code detect} specify\n         * what problems we should look for. Methods whose names start with {@code penalty} specify\n         * what we should do when we detect a problem.\n         *\n         * <p>You can call as many {@code detect} and {@code penalty} methods as you like. Currently\n         * order is insignificant: all penalties apply to all detected problems.\n         *\n         * <p>For example, detect everything and log anything that's found:\n         *\n         * <pre>\n         * StrictMode.VmPolicy policy = new StrictMode.VmPolicy.Builder()\n         *     .detectAll()\n         *     .penaltyLog()\n         *     .build();\n         * StrictMode.setVmPolicy(policy);\n         * </pre>\n         ",
  "links" : [ "VmPolicy" ],
  "variables" : [ {
    "name" : "mMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnVmViolationListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassInstanceLimit",
    "type" : "HashMap<Class, Integer>",
    "comment" : " null until needed",
    "links" : [ ]
  }, {
    "name" : "mClassInstanceLimitNeedCow",
    "type" : "boolean",
    "comment" : " need copy-on-write",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setClassInstanceLimit(Class klass, int instanceLimit)",
    "returnType" : "Builder",
    "comment" : "\n             * Set an upper bound on how many instances of a class can be in memory at once. Helps\n             * to prevent object leaks.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectActivityLeaks()",
    "returnType" : "Builder",
    "comment" : " Detect leaks of {@link android.app.Activity} subclasses. ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public Builder permitActivityLeaks()",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectNonSdkApiUsage()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect reflective usage of APIs that are not part of the public Android SDK.\n             *\n             * <p>Note that any non-SDK APIs that this processes accesses before this detection is\n             * enabled may not be detected. To ensure that all such API accesses are detected,\n             * you should apply this policy as early as possible after process creation.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitNonSdkApiUsage()",
    "returnType" : "Builder",
    "comment" : "\n             * Permit reflective usage of APIs that are not part of the public Android SDK. Note\n             * that this <b>only</b> affects {@code StrictMode}, the underlying runtime may\n             * continue to restrict or warn on access to methods that are not part of the\n             * public SDK.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectAll()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect everything that's potentially suspect.\n             *\n             * <p>In the Honeycomb release this includes leaks of SQLite cursors, Activities, and\n             * other closable objects but will likely expand in future releases.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectLeakedSqlLiteObjects()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect when an {@link android.database.sqlite.SQLiteCursor} or other SQLite object is\n             * finalized without having been closed.\n             *\n             * <p>You always want to explicitly close your SQLite cursors to avoid unnecessary\n             * database contention and temporary memory leaks.\n             ",
    "links" : [ "android.database.sqlite.SQLiteCursor" ]
  }, {
    "name" : "public Builder detectLeakedClosableObjects()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect when an {@link java.io.Closeable} or other object with an explicit termination\n             * method is finalized without having been closed.\n             *\n             * <p>You always want to explicitly close such objects to avoid unnecessary resources\n             * leaks.\n             ",
    "links" : [ "java.io.Closeable" ]
  }, {
    "name" : "public Builder detectLeakedRegistrationObjects()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect when a {@link BroadcastReceiver} or {@link ServiceConnection} is leaked during\n             * {@link Context} teardown.\n             ",
    "links" : [ "android.content.Context", "android.content.ServiceConnection", "android.content.BroadcastReceiver" ]
  }, {
    "name" : "public Builder detectFileUriExposure()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect when the calling application exposes a {@code file://} {@link android.net.Uri}\n             * to another app.\n             *\n             * <p>This exposure is discouraged since the receiving app may not have access to the\n             * shared path. For example, the receiving app may not have requested the {@link\n             * android.Manifest.permission#READ_EXTERNAL_STORAGE} runtime permission, or the\n             * platform may be sharing the {@link android.net.Uri} across user profile boundaries.\n             *\n             * <p>Instead, apps should use {@code content://} Uris so the platform can extend\n             * temporary permission for the receiving app to access the resource.\n             *\n             * @see androidx.core.content.FileProvider\n             * @see Intent#FLAG_GRANT_READ_URI_PERMISSION\n             ",
    "links" : [ "android.Manifest.permission#READ_EXTERNAL_STORAGE", "android.net.Uri" ]
  }, {
    "name" : "public Builder detectCleartextNetwork()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect any network traffic from the calling app which is not wrapped in SSL/TLS. This\n             * can help you detect places that your app is inadvertently sending cleartext data\n             * across the network.\n             *\n             * <p>Using {@link #penaltyDeath()} or {@link #penaltyDeathOnCleartextNetwork()} will\n             * block further traffic on that socket to prevent accidental data leakage, in addition\n             * to crashing your process.\n             *\n             * <p>Using {@link #penaltyDropBox()} will log the raw contents of the packet that\n             * triggered the violation.\n             *\n             * <p>This inspects both IPv4/IPv6 and TCP/UDP network traffic, but it may be subject to\n             * false positives, such as when STARTTLS protocols or HTTP proxies are used.\n             ",
    "links" : [ "#penaltyDropBox()", "#penaltyDeath()", "#penaltyDeathOnCleartextNetwork()" ]
  }, {
    "name" : "public Builder detectContentUriWithoutPermission()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect when the calling application sends a {@code content://} {@link\n             * android.net.Uri} to another app without setting {@link\n             * Intent#FLAG_GRANT_READ_URI_PERMISSION} or {@link\n             * Intent#FLAG_GRANT_WRITE_URI_PERMISSION}.\n             *\n             * <p>Forgetting to include one or more of these flags when sending an intent is\n             * typically an app bug.\n             *\n             * @see Intent#FLAG_GRANT_READ_URI_PERMISSION\n             * @see Intent#FLAG_GRANT_WRITE_URI_PERMISSION\n             ",
    "links" : [ "android.net.Uri", "android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION", "android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION" ]
  }, {
    "name" : "public Builder detectUntaggedSockets()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect any sockets in the calling app which have not been tagged using {@link\n             * TrafficStats}. Tagging sockets can help you investigate network usage inside your\n             * app, such as a narrowing down heavy usage to a specific library or component.\n             *\n             * <p>This currently does not detect sockets created in native code.\n             *\n             * @see TrafficStats#setThreadStatsTag(int)\n             * @see TrafficStats#tagSocket(java.net.Socket)\n             * @see TrafficStats#tagDatagramSocket(java.net.DatagramSocket)\n             ",
    "links" : [ "android.net.TrafficStats" ]
  }, {
    "name" : "public Builder permitUntaggedSockets()",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectImplicitDirectBoot()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect any implicit reliance on Direct Boot automatic filtering\n             * of {@link PackageManager} values. Violations are only triggered\n             * when implicit calls are made while the user is locked.\n             * <p>\n             * Apps becoming Direct Boot aware need to carefully inspect each\n             * query site and explicitly decide which combination of flags they\n             * want to use:\n             * <ul>\n             * <li>{@link PackageManager#MATCH_DIRECT_BOOT_AWARE}\n             * <li>{@link PackageManager#MATCH_DIRECT_BOOT_UNAWARE}\n             * <li>{@link PackageManager#MATCH_DIRECT_BOOT_AUTO}\n             * </ul>\n             ",
    "links" : [ "android.content.pm.PackageManager", "android.content.pm.PackageManager#MATCH_DIRECT_BOOT_UNAWARE", "android.content.pm.PackageManager#MATCH_DIRECT_BOOT_AUTO", "android.content.pm.PackageManager#MATCH_DIRECT_BOOT_AWARE" ]
  }, {
    "name" : "public Builder permitImplicitDirectBoot()",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectCredentialProtectedWhileLocked()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect access to filesystem paths stored in credential protected\n             * storage areas while the user is locked.\n             * <p>\n             * When a user is locked, credential protected storage is\n             * unavailable, and files stored in these locations appear to not\n             * exist, which can result in subtle app bugs if they assume default\n             * behaviors or empty states. Instead, apps should store data needed\n             * while a user is locked under device protected storage areas.\n             *\n             * @see Context#createDeviceProtectedStorageContext()\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder permitCredentialProtectedWhileLocked()",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectIncorrectContextUse()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect attempts to invoke a method on a {@link Context} that is not suited for such\n             * operation.\n             * <p>An example of this is trying to obtain an instance of UI service (e.g.\n             * {@link android.view.WindowManager}) from a non-visual {@link Context}. This is not\n             * allowed, since a non-visual {@link Context} is not adjusted to any visual area, and\n             * therefore can report incorrect metrics or resources.\n             * @see Context#getDisplay()\n             * @see Context#getSystemService(String)\n             ",
    "links" : [ "android.content.Context", "android.view.WindowManager" ]
  }, {
    "name" : "public Builder permitIncorrectContextUse()",
    "returnType" : "Builder",
    "comment" : "\n             * Disable detection of incorrect context use.\n             *\n             * @see #detectIncorrectContextUse()\n             *\n             * @hide\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder detectUnsafeIntentLaunch()",
    "returnType" : "Builder",
    "comment" : "\n             * Detect when your app sends an unsafe {@link Intent}.\n             * <p>\n             * Violations may indicate security vulnerabilities in the design of\n             * your app, where a malicious app could trick you into granting\n             * {@link Uri} permissions or launching unexported components. Here\n             * are some typical design patterns that can be used to safely\n             * resolve these violations:\n             * <ul>\n             * <li> If you are sending an implicit intent to an unexported component, you should\n             * make it an explicit intent by using {@link Intent#setPackage},\n             * {@link Intent#setClassName} or {@link Intent#setComponent}.\n             * </li>\n             * <li> If you are unparceling and sending an intent from the intent delivered, The\n             * ideal approach is to migrate to using a {@link android.app.PendingIntent}, which\n             * ensures that your launch is performed using the identity of the original creator,\n             * completely avoiding the security issues described above.\n             * <li>If using a {@link android.app.PendingIntent} isn't feasible, an\n             * alternative approach is to create a brand new {@link Intent} and\n             * carefully copy only specific values from the original\n             * {@link Intent} after careful validation.\n             * </ul>\n             * <p>\n             * Note that this <em>may</em> detect false-positives if your app\n             * sends itself an {@link Intent} which is first routed through the\n             * OS, such as using {@link Intent#createChooser}. In these cases,\n             * careful inspection is required to determine if the return point\n             * into your app is appropriately protected with a signature\n             * permission or marked as unexported. If the return point is not\n             * protected, your app is likely vulnerable to malicious apps.\n             *\n             * @see Context#startActivity(Intent)\n             * @see Context#startService(Intent)\n             * @see Context#bindService(Intent, ServiceConnection, int)\n             * @see Context#sendBroadcast(Intent)\n             * @see android.app.Activity#setResult(int, Intent)\n             ",
    "links" : [ "android.content.Intent#setComponent", "android.content.Intent#setPackage", "android.net.Uri", "android.content.Intent", "android.app.PendingIntent", "android.content.Intent#createChooser", "android.content.Intent#setClassName" ]
  }, {
    "name" : "public Builder permitUnsafeIntentLaunch()",
    "returnType" : "Builder",
    "comment" : "\n             * Permit your app to launch any {@link Intent} which originated\n             * from outside your app.\n             * <p>\n             * Disabling this check is <em>strongly discouraged</em>, as\n             * violations may indicate security vulnerabilities in the design of\n             * your app, where a malicious app could trick you into granting\n             * {@link Uri} permissions or launching unexported components.\n             *\n             * @see #detectUnsafeIntentLaunch()\n             ",
    "links" : [ "android.net.Uri", "android.content.Intent" ]
  }, {
    "name" : "public Builder penaltyDeath()",
    "returnType" : "Builder",
    "comment" : "\n             * Crashes the whole process on violation. This penalty runs at the end of all enabled\n             * penalties so you'll still get your logging or other violations before the process\n             * dies.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder penaltyDeathOnCleartextNetwork()",
    "returnType" : "Builder",
    "comment" : "\n             * Crashes the whole process when cleartext network traffic is detected.\n             *\n             * @see #detectCleartextNetwork()\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder penaltyDeathOnFileUriExposure()",
    "returnType" : "Builder",
    "comment" : "\n             * Crashes the whole process when a {@code file://} {@link android.net.Uri} is exposed\n             * beyond this app.\n             *\n             * @see #detectFileUriExposure()\n             ",
    "links" : [ "android.net.Uri" ]
  }, {
    "name" : "public Builder penaltyLog()",
    "returnType" : "Builder",
    "comment" : " Log detected violations to the system log. ",
    "links" : [ ]
  }, {
    "name" : "public Builder penaltyDropBox()",
    "returnType" : "Builder",
    "comment" : "\n             * Enable detected violations log a stacktrace and timing data to the {@link\n             * android.os.DropBoxManager DropBox} on policy violation. Intended mostly for platform\n             * integrators doing beta user field data collection.\n             ",
    "links" : [ "android.os.DropBoxManager" ]
  }, {
    "name" : "public Builder penaltyListener(@NonNull Executor executor, @NonNull OnVmViolationListener listener)",
    "returnType" : "Builder",
    "comment" : "\n             * Call #{@link OnVmViolationListener#onVmViolation(Violation)} on every violation.\n             ",
    "links" : [ "#onVmViolation(Violation)" ]
  }, {
    "name" : "public Builder penaltyListener(@NonNull OnVmViolationListener listener, @NonNull Executor executor)",
    "returnType" : "Builder",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "private Builder enable(@VmPolicyMask int mask)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Builder disable(@VmPolicyMask int mask)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VmPolicy build()",
    "returnType" : "VmPolicy",
    "comment" : "\n             * Construct the VmPolicy instance.\n             *\n             * <p>Note: if no penalties are enabled before calling <code>build</code>, {@link\n             * #penaltyLog} is implicitly set.\n             ",
    "links" : [ "#penaltyLog" ]
  } ],
  "methodNames" : [ "public Builder setClassInstanceLimit(Class klass, int instanceLimit)", "public Builder detectActivityLeaks()", "public Builder permitActivityLeaks()", "public Builder detectNonSdkApiUsage()", "public Builder permitNonSdkApiUsage()", "public Builder detectAll()", "public Builder detectLeakedSqlLiteObjects()", "public Builder detectLeakedClosableObjects()", "public Builder detectLeakedRegistrationObjects()", "public Builder detectFileUriExposure()", "public Builder detectCleartextNetwork()", "public Builder detectContentUriWithoutPermission()", "public Builder detectUntaggedSockets()", "public Builder permitUntaggedSockets()", "public Builder detectImplicitDirectBoot()", "public Builder permitImplicitDirectBoot()", "public Builder detectCredentialProtectedWhileLocked()", "public Builder permitCredentialProtectedWhileLocked()", "public Builder detectIncorrectContextUse()", "public Builder permitIncorrectContextUse()", "public Builder detectUnsafeIntentLaunch()", "public Builder permitUnsafeIntentLaunch()", "public Builder penaltyDeath()", "public Builder penaltyDeathOnCleartextNetwork()", "public Builder penaltyDeathOnFileUriExposure()", "public Builder penaltyLog()", "public Builder penaltyDropBox()", "public Builder penaltyListener(@NonNull Executor executor, @NonNull OnVmViolationListener listener)", "public Builder penaltyListener(@NonNull OnVmViolationListener listener, @NonNull Executor executor)", "private Builder enable(@VmPolicyMask int mask)", " Builder disable(@VmPolicyMask int mask)", "public VmPolicy build()" ],
  "variableNames" : [ "mMask", "mListener", "mExecutor", "mClassInstanceLimit", "mClassInstanceLimitNeedCow" ]
}