{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/devicestate/DeviceState.java",
  "packageName" : "android.hardware.devicestate",
  "className" : "DeviceState",
  "comment" : "\n * A state of the device managed by {@link DeviceStateManager}.\n * <p>\n * Device state is an abstract concept that allows mapping the current state of the device to the\n * state of the system. This is useful for variable-state devices, like foldable or rollable\n * devices, that can be configured by users into differing hardware states, which each may have a\n * different expected use case.\n *\n * @hide\n * @see DeviceStateManager\n ",
  "links" : [ "android.hardware.devicestate.DeviceStateManager" ],
  "variables" : [ {
    "name" : "PROPERTY_FOLDABLE_HARDWARE_CONFIGURATION_FOLD_IN_CLOSED",
    "type" : "int",
    "comment" : "\n     * Property that indicates that a fold-in style foldable device is currently in a fully closed\n     * configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_FOLDABLE_HARDWARE_CONFIGURATION_FOLD_IN_HALF_OPEN",
    "type" : "int",
    "comment" : "\n     * Property that indicates that a fold-in style foldable device is currently in a half-opened\n     * configuration. This signifies that the device's hinge is positioned somewhere around 90\n     * degrees. Checking for display configuration properties as well can provide information\n     * on which display is currently active.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_FOLDABLE_HARDWARE_CONFIGURATION_FOLD_IN_OPEN",
    "type" : "int",
    "comment" : "\n     * Property that indicates that a fold-in style foldable device is currently in a fully open\n     * configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_POLICY_CANCEL_OVERRIDE_REQUESTS",
    "type" : "int",
    "comment" : "\n     * Property that indicates override requests should be cancelled when the device is physically\n     * put into this state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_POLICY_CANCEL_WHEN_REQUESTER_NOT_ON_TOP",
    "type" : "int",
    "comment" : "\n     * This property indicates that the corresponding state should be automatically canceled when\n     * the requesting app is no longer on top. The app is considered not on top when (1) the top\n     * activity in the system is from a different app, (2) the device is in sleep mode, or\n     * (3) the keyguard shows up.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_POLICY_UNSUPPORTED_WHEN_THERMAL_STATUS_CRITICAL",
    "type" : "int",
    "comment" : "\n     * This property indicates that the corresponding state should be disabled when the device is\n     * overheating and reaching the critical status.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_POLICY_UNSUPPORTED_WHEN_POWER_SAVE_MODE",
    "type" : "int",
    "comment" : "\n     * This property indicates that the corresponding state should be disabled when power save mode\n     * is enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_POLICY_AVAILABLE_FOR_APP_REQUEST",
    "type" : "int",
    "comment" : "\n     * This property denotes that this state is available for applications to request and the system\n     * server should deny any request that comes from a process that does not hold the\n     * CONTROL_DEVICE_STATE permission if it is requesting a state that does not have this property\n     * on it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_APP_INACCESSIBLE",
    "type" : "int",
    "comment" : "\n     * Property that indicates this device state is inaccessible for applications to be made\n     * visible to the user. This could be a device-state where the {@link Display#DEFAULT_DISPLAY}\n     * is not enabled.\n     * @hide\n     ",
    "links" : [ "#DEFAULT_DISPLAY" ]
  }, {
    "name" : "PROPERTY_EMULATED_ONLY",
    "type" : "int",
    "comment" : "\n     * This property indidcates that this state can only be entered through emulation and has no\n     * physical configuration to match.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_FOLDABLE_DISPLAY_CONFIGURATION_OUTER_PRIMARY",
    "type" : "int",
    "comment" : "\n     * Property that indicates that the outer display area of a foldable device is currently the\n     * primary display area.\n     *\n     * Note: This does not necessarily mean that the outer display area is the\n     * {@link Display#DEFAULT_DISPLAY}.\n     ",
    "links" : [ "#DEFAULT_DISPLAY" ]
  }, {
    "name" : "PROPERTY_FOLDABLE_DISPLAY_CONFIGURATION_INNER_PRIMARY",
    "type" : "int",
    "comment" : "\n     * Property that indicates that the inner display area of a foldable device is currently the\n     * primary display area.\n     *\n     * Note: This does not necessarily mean that the inner display area is the\n     * {@link Display#DEFAULT_DISPLAY}.\n     ",
    "links" : [ "#DEFAULT_DISPLAY" ]
  }, {
    "name" : "PROPERTY_POWER_CONFIGURATION_TRIGGER_SLEEP",
    "type" : "int",
    "comment" : "\n     * Property that indicates that this device state will attempt to trigger the device to go to\n     * sleep.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_POWER_CONFIGURATION_TRIGGER_WAKE",
    "type" : "int",
    "comment" : "\n     * Property that indicates that this device state will attempt to trigger the device to wake up.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_EXTENDED_DEVICE_STATE_EXTERNAL_DISPLAY",
    "type" : "int",
    "comment" : "\n     * Property that indicates that an external display has been connected to the device. Specifics\n     * around display mode or properties around the display should be gathered through\n     * {@link android.hardware.display.DisplayManager}\n     ",
    "links" : [ "android.hardware.display.DisplayManager" ]
  }, {
    "name" : "PROPERTY_FEATURE_REAR_DISPLAY",
    "type" : "int",
    "comment" : "\n     * Property that indicates that this state corresponds to the device state for rear display\n     * mode. This means that the active display is facing the same direction as the rear camera.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_FEATURE_DUAL_DISPLAY_INTERNAL_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Property that indicates that this state corresponds to the device state where both displays\n     * on a foldable are active, with the internal display being the default display.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeviceStateConfiguration",
    "type" : "DeviceState.Configuration",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getIdentifier()",
    "returnType" : "int",
    "comment" : " Returns the unique identifier for the device state. ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : " Returns a string description of the device state. ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasProperty(@DeviceStateProperties int propertyToCheckFor)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a specific property is set on this state\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasProperties(@NonNull @DeviceStateProperties int... properties)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a list of properties are all set on this state\n     ",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "\n     * Returns the underlying {@link DeviceState.Configuration} object used to model the\n     * device state.\n     * @hide\n     ",
    "links" : [ "DeviceState.Configuration" ]
  } ],
  "methodNames" : [ "public int getIdentifier()", "public String getName()", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "public boolean hasProperty(@DeviceStateProperties int propertyToCheckFor)", "public boolean hasProperties(@NonNull @DeviceStateProperties int... properties)", "public Configuration getConfiguration()" ],
  "variableNames" : [ "PROPERTY_FOLDABLE_HARDWARE_CONFIGURATION_FOLD_IN_CLOSED", "PROPERTY_FOLDABLE_HARDWARE_CONFIGURATION_FOLD_IN_HALF_OPEN", "PROPERTY_FOLDABLE_HARDWARE_CONFIGURATION_FOLD_IN_OPEN", "PROPERTY_POLICY_CANCEL_OVERRIDE_REQUESTS", "PROPERTY_POLICY_CANCEL_WHEN_REQUESTER_NOT_ON_TOP", "PROPERTY_POLICY_UNSUPPORTED_WHEN_THERMAL_STATUS_CRITICAL", "PROPERTY_POLICY_UNSUPPORTED_WHEN_POWER_SAVE_MODE", "PROPERTY_POLICY_AVAILABLE_FOR_APP_REQUEST", "PROPERTY_APP_INACCESSIBLE", "PROPERTY_EMULATED_ONLY", "PROPERTY_FOLDABLE_DISPLAY_CONFIGURATION_OUTER_PRIMARY", "PROPERTY_FOLDABLE_DISPLAY_CONFIGURATION_INNER_PRIMARY", "PROPERTY_POWER_CONFIGURATION_TRIGGER_SLEEP", "PROPERTY_POWER_CONFIGURATION_TRIGGER_WAKE", "PROPERTY_EXTENDED_DEVICE_STATE_EXTERNAL_DISPLAY", "PROPERTY_FEATURE_REAR_DISPLAY", "PROPERTY_FEATURE_DUAL_DISPLAY_INTERNAL_DEFAULT", "mDeviceStateConfiguration" ]
}