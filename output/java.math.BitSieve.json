{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/math/BitSieve.java",
  "packageName" : "java.math",
  "className" : "BitSieve",
  "comment" : "\n * A simple bit sieve used for finding prime number candidates. Allows setting\n * and clearing of bits in a storage array. The size of the sieve is assumed to\n * be constant to reduce overhead. All the bits of a new bitSieve are zero, and\n * bits are removed from it by setting them.\n *\n * To reduce storage space and increase efficiency, no even numbers are\n * represented in the sieve (each bit in the sieve represents an odd number).\n * The relationship between the index of a bit and the number it represents is\n * given by\n * N = offset + (2*index + 1);\n * Where N is the integer represented by a bit in the sieve, offset is some\n * even integer offset indicating where the sieve begins, and index is the\n * index of a bit in the sieve array.\n *\n * @see     BigInteger\n * @author  Michael McCloskey\n * @since   1.3\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "bits",
    "type" : "long[]",
    "comment" : "\n     * Stores the bits in this bitSieve.\n     ",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "\n     * Length is how many bits this sieve holds.\n     ",
    "links" : [ ]
  }, {
    "name" : "smallSieve",
    "type" : "BitSieve",
    "comment" : "\n     * A small sieve used to filter out multiples of small primes in a search\n     * sieve.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int unitIndex(int bitIndex)",
    "returnType" : "int",
    "comment" : "\n     * Given a bit index return unit index containing it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long bit(int bitIndex)",
    "returnType" : "long",
    "comment" : "\n     * Return a unit that masks the specified bit in its unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean get(int bitIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the value of the bit at the specified index.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void set(int bitIndex)",
    "returnType" : "void",
    "comment" : "\n     * Set the bit at the specified index.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int sieveSearch(int limit, int start)",
    "returnType" : "int",
    "comment" : "\n     * This method returns the index of the first clear bit in the search\n     * array that occurs at or after start. It will not search past the\n     * specified limit. It returns -1 if there is no such clear bit.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sieveSingle(int limit, int start, int step)",
    "returnType" : "void",
    "comment" : "\n     * Sieve a single set of multiples out of the sieve. Begin to remove\n     * multiples of the specified step starting at the specified start index,\n     * up to the specified limit.\n     ",
    "links" : [ ]
  }, {
    "name" : " BigInteger retrieve(BigInteger initValue, int certainty, java.util.Random random)",
    "returnType" : "BigInteger",
    "comment" : "\n     * Test probable primes in the sieve and return successful candidates.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int unitIndex(int bitIndex)", "private static long bit(int bitIndex)", "private boolean get(int bitIndex)", "private void set(int bitIndex)", "private int sieveSearch(int limit, int start)", "private void sieveSingle(int limit, int start, int step)", " BigInteger retrieve(BigInteger initValue, int certainty, java.util.Random random)" ],
  "variableNames" : [ "bits", "length", "smallSieve" ]
}