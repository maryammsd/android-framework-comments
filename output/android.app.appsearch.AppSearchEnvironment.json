{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/AppSearchEnvironment.java",
  "packageName" : "android.app.appsearch",
  "className" : "AppSearchEnvironment",
  "comment" : "\n * An interface which exposes environment specific methods for AppSearch.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " File getAppSearchDir(@NonNull Context context, @Nullable UserHandle userHandle)",
    "returnType" : "File",
    "comment" : " Returns the directory to initialize appsearch based on the environment. ",
    "links" : [ ]
  }, {
    "name" : " Context createContextAsUser(@NonNull Context context, @NonNull UserHandle userHandle)",
    "returnType" : "Context",
    "comment" : " Returns the correct context for the user based on the environment. ",
    "links" : [ ]
  }, {
    "name" : " ExecutorService createExecutorService(int corePoolSize, int maxConcurrency, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, int priority)",
    "returnType" : "ExecutorService",
    "comment" : " Returns an ExecutorService based on given parameters. ",
    "links" : [ ]
  }, {
    "name" : " ExecutorService createSingleThreadExecutor()",
    "returnType" : "ExecutorService",
    "comment" : " Returns an ExecutorService with a single thread. ",
    "links" : [ ]
  }, {
    "name" : " File getCacheDir(@NonNull Context context)",
    "returnType" : "File",
    "comment" : "\n     * Returns a cache directory for creating temporary files like in case of migrating documents.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInvalidUid()",
    "returnType" : "int",
    "comment" : " Invalid UID constant duplicated for code-sync with GMSCore ",
    "links" : [ ]
  }, {
    "name" : " ExecutorService createCachedThreadPoolExecutor()",
    "returnType" : "ExecutorService",
    "comment" : " Creates and returns an Executor with cached thread pools. ",
    "links" : [ ]
  }, {
    "name" : " boolean isInfoLoggingEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns if we can log INFO level logs. ",
    "links" : [ ]
  } ],
  "methodNames" : [ " File getAppSearchDir(@NonNull Context context, @Nullable UserHandle userHandle)", " Context createContextAsUser(@NonNull Context context, @NonNull UserHandle userHandle)", " ExecutorService createExecutorService(int corePoolSize, int maxConcurrency, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, int priority)", " ExecutorService createSingleThreadExecutor()", " File getCacheDir(@NonNull Context context)", " int getInvalidUid()", " ExecutorService createCachedThreadPoolExecutor()", " boolean isInfoLoggingEnabled()" ],
  "variableNames" : [ ]
}