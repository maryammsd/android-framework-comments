{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/AnimatorSet.java",
  "packageName" : "android.animation",
  "className" : "Builder",
  "comment" : "\n     * The <code>Builder</code> object is a utility class to facilitate adding animations to a\n     * <code>AnimatorSet</code> along with the relationships between the various animations. The\n     * intention of the <code>Builder</code> methods, along with the {@link\n     * AnimatorSet#play(Animator) play()} method of <code>AnimatorSet</code> is to make it possible\n     * to express the dependency relationships of animations in a natural way. Developers can also\n     * use the {@link AnimatorSet#playTogether(Animator[]) playTogether()} and {@link\n     * AnimatorSet#playSequentially(Animator[]) playSequentially()} methods if these suit the need,\n     * but it might be easier in some situations to express the AnimatorSet of animations in pairs.\n     * <p/>\n     * <p>The <code>Builder</code> object cannot be constructed directly, but is rather constructed\n     * internally via a call to {@link AnimatorSet#play(Animator)}.</p>\n     * <p/>\n     * <p>For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to\n     * play when anim2 finishes, and anim4 to play when anim3 finishes:</p>\n     * <pre>\n     *     AnimatorSet s = new AnimatorSet();\n     *     s.play(anim1).with(anim2);\n     *     s.play(anim2).before(anim3);\n     *     s.play(anim4).after(anim3);\n     * </pre>\n     * <p/>\n     * <p>Note in the example that both {@link Builder#before(Animator)} and {@link\n     * Builder#after(Animator)} are used. These are just different ways of expressing the same\n     * relationship and are provided to make it easier to say things in a way that is more natural,\n     * depending on the situation.</p>\n     * <p/>\n     * <p>It is possible to make several calls into the same <code>Builder</code> object to express\n     * multiple relationships. However, note that it is only the animation passed into the initial\n     * {@link AnimatorSet#play(Animator)} method that is the dependency in any of the successive\n     * calls to the <code>Builder</code> object. For example, the following code starts both anim2\n     * and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and\n     * anim3:\n     * <pre>\n     *   AnimatorSet s = new AnimatorSet();\n     *   s.play(anim1).before(anim2).before(anim3);\n     * </pre>\n     * If the desired result is to play anim1 then anim2 then anim3, this code expresses the\n     * relationship correctly:</p>\n     * <pre>\n     *   AnimatorSet s = new AnimatorSet();\n     *   s.play(anim1).before(anim2);\n     *   s.play(anim2).before(anim3);\n     * </pre>\n     * <p/>\n     * <p>Note that it is possible to express relationships that cannot be resolved and will not\n     * result in sensible results. For example, <code>play(anim1).after(anim1)</code> makes no\n     * sense. In general, circular dependencies like this one (or more indirect ones where a depends\n     * on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets\n     * that can boil down to a simple, one-way relationship of animations starting with, before, and\n     * after other, different, animations.</p>\n     ",
  "links" : [ "#before(Animator)", "android.animation.AnimatorSet#play(Animator)", "#after(Animator)", "android.animation.AnimatorSet#playTogether(Animator", "android.animation.AnimatorSet#playSequentially(Animator" ],
  "variables" : [ {
    "name" : "mCurrentNode",
    "type" : "Node",
    "comment" : "\n         * This tracks the current node being processed. It is supplied to the play() method\n         * of AnimatorSet and passed into the constructor of Builder.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder with(Animator anim)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets up the given animation to play at the same time as the animation supplied in the\n         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object.\n         *\n         * @param anim The animation that will play when the animation supplied to the\n         * {@link AnimatorSet#play(Animator)} method starts.\n         ",
    "links" : [ "android.animation.AnimatorSet#play(Animator)" ]
  }, {
    "name" : "public Builder before(Animator anim)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets up the given animation to play when the animation supplied in the\n         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object\n         * ends.\n         *\n         * @param anim The animation that will play when the animation supplied to the\n         * {@link AnimatorSet#play(Animator)} method ends.\n         ",
    "links" : [ "android.animation.AnimatorSet#play(Animator)" ]
  }, {
    "name" : "public Builder after(Animator anim)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets up the given animation to play when the animation supplied in the\n         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object\n         * to start when the animation supplied in this method call ends.\n         *\n         * @param anim The animation whose end will cause the animation supplied to the\n         * {@link AnimatorSet#play(Animator)} method to play.\n         ",
    "links" : [ "android.animation.AnimatorSet#play(Animator)" ]
  }, {
    "name" : "public Builder after(long delay)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets up the animation supplied in the\n         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object\n         * to play when the given amount of time elapses.\n         *\n         * @param delay The number of milliseconds that should elapse before the\n         * animation starts.\n         ",
    "links" : [ "android.animation.AnimatorSet#play(Animator)" ]
  } ],
  "methodNames" : [ "public Builder with(Animator anim)", "public Builder before(Animator anim)", "public Builder after(Animator anim)", "public Builder after(long delay)" ],
  "variableNames" : [ "mCurrentNode" ]
}