{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/provider/LocationProviderBase.java",
  "packageName" : "android.location.provider",
  "className" : "LocationProviderBase",
  "comment" : "\n * Base class for location providers outside the system server.\n *\n * Location providers should be wrapped in a non-exported service which returns the result of\n * {@link #getBinder()} from the service's {@link android.app.Service#onBind(Intent)} method. The\n * service should not be exported so that components other than the system server cannot bind to it.\n * Alternatively, the service may be guarded by a permission that only system server can obtain. The\n * service may specify metadata on its capabilities:\n *\n * <ul>\n *     <li>\n *         \"serviceVersion\": An integer version code to help tie break if multiple services are\n *         capable of implementing the same location provider. All else equal, the service with the\n *         highest version code will be chosen. Assumed to be 0 if not specified.\n *     </li>\n *     <li>\n *         \"serviceIsMultiuser\": A boolean property, indicating if the service wishes to take\n *         responsibility for handling changes to the current user on the device. If true, the\n *         service will always be bound from the system user. If false, the service will always be\n *         bound from the current user. If the current user changes, the old binding will be\n *         released, and a new binding established under the new user. Assumed to be false if not\n *         specified.\n *     </li>\n * </ul>\n *\n * <p>The service should have an intent filter in place for the location provider it wishes to\n * implements. Defaults for some providers are specified as constants in this class.\n *\n * <p>Location providers are identified by their UID / package name / attribution tag. Based on this\n * identity, location providers may be given some special privileges (such as making special\n * requests to other location providers).\n *\n * @hide\n ",
  "links" : [ "#getBinder()", "android.app.Service#onBind(Intent)" ],
  "variables" : [ {
    "name" : "ACTION_NETWORK_PROVIDER",
    "type" : "String",
    "comment" : "\n     * The action the wrapping service should have in its intent filter to implement the\n     * {@link android.location.LocationManager#NETWORK_PROVIDER}.\n     ",
    "links" : [ "android.location.LocationManager#NETWORK_PROVIDER" ]
  }, {
    "name" : "ACTION_FUSED_PROVIDER",
    "type" : "String",
    "comment" : "\n     * The action the wrapping service should have in its intent filter to implement the\n     * {@link android.location.LocationManager#FUSED_PROVIDER}.\n     ",
    "links" : [ "android.location.LocationManager#FUSED_PROVIDER" ]
  }, {
    "name" : "ACTION_GNSS_PROVIDER",
    "type" : "String",
    "comment" : "\n     * The action the wrapping service should have in its intent filter to implement the\n     * {@link android.location.LocationManager#GPS_PROVIDER}.\n     ",
    "links" : [ "android.location.LocationManager#GPS_PROVIDER" ]
  }, {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "ILocationProviderManager",
    "comment" : " write locked on mBinder, read lock is optional depending on atomicity requirements",
    "links" : [ ]
  }, {
    "name" : "mProperties",
    "type" : "ProviderProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder getBinder()",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the IBinder instance that should be returned from the\n     * {@link android.app.Service#onBind(Intent)} method of the wrapping service.\n     ",
    "links" : [ "android.app.Service#onBind(Intent)" ]
  }, {
    "name" : "public void setAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this provider is currently allowed or not. Note that this is specific to the\n     * provider only, and is unrelated to global location settings. This is a hint to the location\n     * manager that this provider will be unable to fulfill incoming requests. Setting a provider\n     * as not allowed will result in the provider being disabled. Setting a provider as allowed\n     * means that the provider may be in either the enabled or disabled state.\n     *\n     * <p>Some guidelines: providers should set their own allowed/disallowed status based only on\n     * state \"owned\" by that provider. For instance, providers should not take into account the\n     * state of the location master setting when setting themselves allowed or disallowed, as this\n     * state is not owned by a particular provider. If a provider requires some additional user\n     * consent that is particular to the provider, this should be use to set the allowed/disallowed\n     * state. If the provider proxies to another provider, the child provider's allowed/disallowed\n     * state should be taken into account in the parent's allowed state. For most providers, it is\n     * expected that they will be always allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this provider is allowed. Providers start as allowed on construction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(@NonNull ProviderProperties properties)",
    "returnType" : "void",
    "comment" : "\n     * Sets the provider properties that may be queried by clients. Generally speaking, providers\n     * should try to avoid changing their properties after construction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ProviderProperties getProperties()",
    "returnType" : "ProviderProperties",
    "comment" : "\n     * Returns the currently set properties of the provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportLocation(@NonNull Location location)",
    "returnType" : "void",
    "comment" : "\n     * Reports a new location from this provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportLocations(@NonNull List<Location> locations)",
    "returnType" : "void",
    "comment" : "\n     * Reports a new batch of locations from this provider. Locations must be ordered in the list\n     * from earliest first to latest last.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSetRequest(@NonNull ProviderRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Set the current {@link ProviderRequest} for this provider. Each call to this method overrides\n     * any prior ProviderRequests. The provider should immediately attempt to provide locations (or\n     * not provide locations) according to the parameters of the provider request.\n     ",
    "links" : [ "android.location.provider.ProviderRequest" ]
  }, {
    "name" : "public abstract void onFlush(@NonNull OnFlushCompleteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests a flush of any pending batched locations. The callback must always be invoked once\n     * per invocation, and should be invoked after {@link #reportLocation(Location)} or\n     * {@link #reportLocations(List)} has been invoked with any flushed locations. The callback may\n     * be invoked immediately if no locations are flushed.\n     ",
    "links" : [ "#reportLocations(List)", "#reportLocation(Location)" ]
  }, {
    "name" : "public abstract void onSendExtraCommand(@NonNull String command, @SuppressLint(\"NullableCollection\") @Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Implements optional custom commands.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Location stripExtras(Location location)",
    "returnType" : "Location",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Location> stripExtras(List<Location> locations)",
    "returnType" : "List<Location>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder getBinder()", "public void setAllowed(boolean allowed)", "public boolean isAllowed()", "public void setProperties(@NonNull ProviderProperties properties)", "public ProviderProperties getProperties()", "public void reportLocation(@NonNull Location location)", "public void reportLocations(@NonNull List<Location> locations)", "public abstract void onSetRequest(@NonNull ProviderRequest request)", "public abstract void onFlush(@NonNull OnFlushCompleteCallback callback)", "public abstract void onSendExtraCommand(@NonNull String command, @SuppressLint(\"NullableCollection\") @Nullable Bundle extras)", "private static Location stripExtras(Location location)", "private static List<Location> stripExtras(List<Location> locations)" ],
  "variableNames" : [ "ACTION_NETWORK_PROVIDER", "ACTION_FUSED_PROVIDER", "ACTION_GNSS_PROVIDER", "mTag", "mAttributionTag", "mBinder", "mManager", "mProperties", "mAllowed" ]
}