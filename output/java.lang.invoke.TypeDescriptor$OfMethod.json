{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/invoke/TypeDescriptor.java",
  "packageName" : "java.lang.invoke",
  "className" : "OfMethod",
  "comment" : "\n     * An entity that has a method type descriptor\n     * Method descriptors conforming to JVMS {@jvms 4.3.3} can be described\n     *\n     * @param <F> the type representing field type descriptors\n     * @param <M> the class implementing {@linkplain TypeDescriptor.OfMethod}\n     * @jvms 4.3.2 Field Descriptors\n     * @jvms 4.3.3 Method Descriptors\n     * @since 12\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int parameterCount()",
    "returnType" : "int",
    "comment" : "\n         * Return the number of parameters in the method type\n         * @return the number of parameters\n         ",
    "links" : [ ]
  }, {
    "name" : " F parameterType(int i)",
    "returnType" : "F",
    "comment" : "\n         * Return a field descriptor describing the requested parameter of the method type\n         * described by this descriptor\n         * @param i the index of the parameter\n         * @return a field descriptor for the requested parameter type\n         * @throws IndexOutOfBoundsException if the index is outside the half-open\n         * range {[0, parameterCount)}\n         ",
    "links" : [ ]
  }, {
    "name" : " F returnType()",
    "returnType" : "F",
    "comment" : "\n         * Return a field descriptor describing the return type of the method type described\n         * by this descriptor\n         * @return a field descriptor for the return type\n         ",
    "links" : [ ]
  }, {
    "name" : " F[] parameterArray()",
    "returnType" : "F[]",
    "comment" : "\n         * Return an array of field descriptors for the parameter types of the method type\n         * described by this descriptor\n         * @return field descriptors for the parameter types\n         ",
    "links" : [ ]
  }, {
    "name" : " List<F> parameterList()",
    "returnType" : "List<F>",
    "comment" : "\n         * Return an immutable list of field descriptors for the parameter types of the method type\n         * described by this descriptor\n         * @return field descriptors for the parameter types\n         ",
    "links" : [ ]
  }, {
    "name" : " M changeReturnType(F newReturn)",
    "returnType" : "M",
    "comment" : "\n         * Return a method descriptor that is identical to this one, except that the return\n         * type has been changed to the specified type\n         *\n         * @param newReturn a field descriptor for the new return type\n         * @throws NullPointerException if any argument is {@code null}\n         * @return the new method descriptor\n         ",
    "links" : [ ]
  }, {
    "name" : " M changeParameterType(int index, F paramType)",
    "returnType" : "M",
    "comment" : "\n         * Return a method descriptor that is identical to this one,\n         * except that a single parameter type has been changed to the specified type.\n         *\n         * @param index the index of the parameter to change\n         * @param paramType a field descriptor describing the new parameter type\n         * @return the new method descriptor\n         * @throws NullPointerException if any argument is {@code null}\n         * @throws IndexOutOfBoundsException if the index is outside the half-open\n         * range {[0, parameterCount)}\n         ",
    "links" : [ ]
  }, {
    "name" : " M dropParameterTypes(int start, int end)",
    "returnType" : "M",
    "comment" : "\n         * Return a method descriptor that is identical to this one,\n         * except that a range of parameter types have been removed.\n         *\n         * @param start the index of the first parameter to remove\n         * @param end the index after the last parameter to remove\n         * @return the new method descriptor\n         *\n         * @throws IndexOutOfBoundsException if {@code start} is outside the half-open\n         * range {@code [0, parameterCount)}, or {@code end} is outside the closed range\n         * {@code [0, parameterCount]}, or if {@code start > end}\n         ",
    "links" : [ ]
  }, {
    "name" : " M insertParameterTypes(int pos, F... paramTypes)",
    "returnType" : "M",
    "comment" : "\n         * Return a method descriptor that is identical to this one,\n         * except that a range of additional parameter types have been inserted.\n         *\n         * @param pos the index at which to insert the first inserted parameter\n         * @param paramTypes field descriptors describing the new parameter types\n         *                   to insert\n         * @return the new method descriptor\n         * @throws NullPointerException if any argument is {@code null}\n         * @throws IndexOutOfBoundsException if {@code pos} is outside the closed\n         * range {[0, parameterCount]}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int parameterCount()", " F parameterType(int i)", " F returnType()", " F[] parameterArray()", " List<F> parameterList()", " M changeReturnType(F newReturn)", " M changeParameterType(int index, F paramType)", " M dropParameterTypes(int start, int end)", " M insertParameterTypes(int pos, F... paramTypes)" ],
  "variableNames" : [ ]
}