{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Iterable.java",
  "packageName" : "java.lang",
  "className" : "Iterable",
  "comment" : "\n * Implementing this interface allows an object to be the target of the enhanced\n * {@code for} statement (sometimes called the \"for-each loop\" statement).\n *\n * @param <T> the type of elements returned by the iterator\n *\n * @since 1.5\n * @jls 14.14.2 The enhanced {@code for} statement\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Iterator<T> iterator()",
    "returnType" : "Iterator<T>",
    "comment" : "\n     * Returns an iterator over elements of type {@code T}.\n     *\n     * @return an Iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : " void forEach(Consumer<? super T> action)",
    "returnType" : "void",
    "comment" : "\n     * Performs the given action for each element of the {@code Iterable}\n     * until all elements have been processed or the action throws an\n     * exception.  Actions are performed in the order of iteration, if that\n     * order is specified.  Exceptions thrown by the action are relayed to the\n     * caller.\n     * <p>\n     * The behavior of this method is unspecified if the action performs\n     * side-effects that modify the underlying source of elements, unless an\n     * overriding class has specified a concurrent modification policy.\n     *\n     * @implSpec\n     * <p>The default implementation behaves as if:\n     * <pre>{@code\n     *     for (T t : this)\n     *         action.accept(t);\n     * }</pre>\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : " Spliterator<T> spliterator()",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates a {@link Spliterator} over the elements described by this\n     * {@code Iterable}.\n     *\n     * @implSpec\n     * The default implementation creates an\n     * <em><a href=\"../util/Spliterator.html#binding\">early-binding</a></em>\n     * spliterator from the iterable's {@code Iterator}.  The spliterator\n     * inherits the <em>fail-fast</em> properties of the iterable's iterator.\n     *\n     * @implNote\n     * The default implementation should usually be overridden.  The\n     * spliterator returned by the default implementation has poor splitting\n     * capabilities, is unsized, and does not report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     *\n     * @return a {@code Spliterator} over the elements described by this\n     * {@code Iterable}.\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator" ]
  } ],
  "methodNames" : [ " Iterator<T> iterator()", " void forEach(Consumer<? super T> action)", " Spliterator<T> spliterator()" ],
  "variableNames" : [ ]
}