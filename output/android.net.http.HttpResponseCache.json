{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/http/HttpResponseCache.java",
  "packageName" : "android.net.http",
  "className" : "HttpResponseCache",
  "comment" : "\n * Caches HTTP and HTTPS responses to the filesystem so they may be reused,\n * saving time and bandwidth. This class supports {@link\n * java.net.HttpURLConnection} and {@link javax.net.ssl.HttpsURLConnection};\n * there is no platform-provided cache for {@code DefaultHttpClient} or\n * {@code AndroidHttpClient}. Installation and instances are thread\n * safe.\n *\n * <h3>Installing an HTTP response cache</h3>\n * Enable caching of all of your application's HTTP requests by installing the\n * cache at application startup. For example, this code installs a 10 MiB cache\n * in the {@link android.content.Context#getCacheDir() application-specific\n * cache directory} of the filesystem}: <pre>   {@code\n *   protected void onCreate(Bundle savedInstanceState) {\n *       ...\n *\n *       try {\n *           File httpCacheDir = new File(context.getCacheDir(), \"http\");\n *           long httpCacheSize = 10 * 1024 * 1024; // 10 MiB\n *           HttpResponseCache.install(httpCacheDir, httpCacheSize);\n *       } catch (IOException e) {\n *           Log.i(TAG, \"HTTP response cache installation failed:\" + e);\n *       }\n *   }\n *\n *   protected void onStop() {\n *       ...\n *\n *       HttpResponseCache cache = HttpResponseCache.getInstalled();\n *       if (cache != null) {\n *           cache.flush();\n *       }\n *   }}</pre>\n * This cache will evict entries as necessary to keep its size from exceeding\n * 10 MiB. The best cache size is application specific and depends on the size\n * and frequency of the files being downloaded. Increasing the limit may improve\n * the hit rate, but it may also just waste filesystem space!\n *\n * <p>For some applications it may be preferable to create the cache in the\n * external storage directory. <strong>There are no access controls on the\n * external storage directory so it should not be used for caches that could\n * contain private data.</strong> Although it often has more free space,\n * external storage is optional and&#8212;even if available&#8212;can disappear\n * during use. Retrieve the external cache directory using {@link\n * android.content.Context#getExternalCacheDir()}. If this method returns null,\n * your application should fall back to either not caching or caching on\n * non-external storage. If the external storage is removed during use, the\n * cache hit rate will drop to zero and ongoing cache reads will fail.\n *\n * <p>Flushing the cache forces its data to the filesystem. This ensures that\n * all responses written to the cache will be readable the next time the\n * activity starts.\n *\n * <h3>Cache Optimization</h3>\n * To measure cache effectiveness, this class tracks three statistics:\n * <ul>\n *     <li><strong>{@link #getRequestCount() Request Count:}</strong> the number\n *         of HTTP requests issued since this cache was created.\n *     <li><strong>{@link #getNetworkCount() Network Count:}</strong> the\n *         number of those requests that required network use.\n *     <li><strong>{@link #getHitCount() Hit Count:}</strong> the number of\n *         those requests whose responses were served by the cache.\n * </ul>\n * Sometimes a request will result in a conditional cache hit. If the cache\n * contains a stale copy of the response, the client will issue a conditional\n * {@code GET}. The server will then send either the updated response if it has\n * changed, or a short 'not modified' response if the client's copy is still\n * valid. Such responses increment both the network count and hit count.\n *\n * <p>The best way to improve the cache hit rate is by configuring the web\n * server to return cacheable responses. Although this client honors all <a\n * href=\"http://www.ietf.org/rfc/rfc2616.txt\">HTTP/1.1 (RFC 2068)</a> cache\n * headers, it doesn't cache partial responses.\n *\n * <h3>Force a Network Response</h3>\n * In some situations, such as after a user clicks a 'refresh' button, it may be\n * necessary to skip the cache, and fetch data directly from the server. To force\n * a full refresh, add the {@code no-cache} directive: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n * }</pre>\n * If it is only necessary to force a cached response to be validated by the\n * server, use the more efficient {@code max-age=0} instead: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n * }</pre>\n *\n * <h3>Force a Cache Response</h3>\n * Sometimes you'll want to show resources if they are available immediately,\n * but not otherwise. This can be used so your application can show\n * <i>something</i> while waiting for the latest data to be downloaded. To\n * restrict a request to locally-cached resources, add the {@code\n * only-if-cached} directive: <pre>   {@code\n *     try {\n *         connection.addRequestProperty(\"Cache-Control\", \"only-if-cached\");\n *         InputStream cached = connection.getInputStream();\n *         // the resource was cached! show it\n *     } catch (FileNotFoundException e) {\n *         // the resource was not cached\n *     }\n * }</pre>\n * This technique works even better in situations where a stale response is\n * better than no response. To permit stale cached responses, use the {@code\n * max-stale} directive with the maximum staleness in seconds: <pre>   {@code\n *         int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks stale\n *         connection.addRequestProperty(\"Cache-Control\", \"max-stale=\" + maxStale);\n * }</pre>\n *\n * <h3>Working With Earlier Releases</h3>\n * This class was added in Android 4.0 (Ice Cream Sandwich). Use reflection to\n * enable the response cache without impacting earlier releases: <pre>   {@code\n *       try {\n *           File httpCacheDir = new File(context.getCacheDir(), \"http\");\n *           long httpCacheSize = 10 * 1024 * 1024; // 10 MiB\n *           Class.forName(\"android.net.http.HttpResponseCache\")\n *                   .getMethod(\"install\", File.class, long.class)\n *                   .invoke(null, httpCacheDir, httpCacheSize);\n *       } catch (Exception httpResponseCacheNotAvailable) {\n *       }}</pre>\n ",
  "variables" : [ {
    "name" : "mDelegate",
    "type" : "AndroidResponseCacheAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static HttpResponseCache getInstalled()",
    "returnType" : "HttpResponseCache",
    "comment" : "\n     * Returns the currently-installed {@code HttpResponseCache}, or null if\n     * there is no cache installed or it is not a {@code HttpResponseCache}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized HttpResponseCache install(File directory, long maxSize) throws IOException",
    "returnType" : "HttpResponseCache",
    "comment" : "\n     * Creates a new HTTP response cache and sets it as the system default cache.\n     *\n     * @param directory the directory to hold cache data.\n     * @param maxSize the maximum size of the cache in bytes.\n     * @return the newly-installed cache\n     * @throws IOException if {@code directory} cannot be used for this cache.\n     *     Most applications should respond to this exception by logging a\n     *     warning.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders) throws IOException",
    "returnType" : "CacheResponse",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException",
    "returnType" : "CacheRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long size()",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of bytes currently being used to store the values in\n     * this cache. This may be greater than the {@link #maxSize} if a background\n     * deletion is pending. {@code -1} is returned if the size cannot be determined.\n     ",
    "links" : [ "#maxSize" ]
  }, {
    "name" : "public long maxSize()",
    "returnType" : "long",
    "comment" : "\n     * Returns the maximum number of bytes that this cache should use to store\n     * its data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Force buffered operations to the filesystem. This ensures that responses\n     * written to the cache will be available the next time the cache is opened,\n     * even if this process is killed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetworkCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of HTTP requests that required the network to either\n     * supply a response or validate a locally cached response.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHitCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of HTTP requests whose response was provided by the\n     * cache. This may include conditional {@code GET} requests that were\n     * validated over the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRequestCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total number of HTTP requests that were made. This includes\n     * both client requests and requests that were made on the client's behalf\n     * to handle a redirects and retries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Uninstalls the cache and releases any active resources. Stored contents\n     * will remain on the filesystem.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void delete() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Uninstalls the cache and deletes all of its stored contents.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CacheHolder getCacheHolder()",
    "returnType" : "CacheHolder",
    "comment" : " @hide Needed for OkHttp integration. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDelegate" ],
  "methodNames" : [ "public static HttpResponseCache getInstalled()", "public static synchronized HttpResponseCache install(File directory, long maxSize) throws IOException", "public CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders) throws IOException", "public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException", "public long size()", "public long maxSize()", "public void flush()", "public int getNetworkCount()", "public int getHitCount()", "public int getRequestCount()", "public void close() throws IOException", "public void delete() throws IOException", "public CacheHolder getCacheHolder()" ]
}