{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ondeviceintelligence/OnDeviceIntelligenceManager.java",
  "packageName" : "android.app.ondeviceintelligence",
  "className" : "OnDeviceIntelligenceManager",
  "comment" : "\n * Allows granted apps to manage on-device intelligence service configured on the device. Typical\n * calling pattern will be to query and setup a required feature before proceeding to request\n * processing.\n *\n * The contracts in this Manager class are designed to be open-ended in general, to allow\n * interoperability. Therefore, it is recommended that implementations of this system-service\n * expose this API to the clients via a separate sdk or library which has more defined contract.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "API_VERSION_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AUGMENT_REQUEST_CONTENT_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IOnDeviceIntelligenceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REQUEST_TYPE_INFERENCE",
    "type" : "int",
    "comment" : " Request inference with provided Bundle and Params. ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_TYPE_PREPARE",
    "type" : "int",
    "comment" : "\n     * Prepares the remote implementation environment for e.g.loading inference runtime etc\n     * .which\n     * are time consuming beforehand to remove overhead and allow quick processing of requests\n     * thereof.\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_TYPE_EMBEDDINGS",
    "type" : "int",
    "comment" : " Request Embeddings of the passed-in Bundle. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void getVersion(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull LongConsumer versionConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously get the version of the underlying remote implementation.\n     *\n     * @param versionConsumer  consumer to populate the version of remote implementation.\n     * @param callbackExecutor executor to run the callback on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRemoteServicePackageName()",
    "returnType" : "String",
    "comment" : "\n     * Get package name configured for providing the remote implementation for this system service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getFeature(int featureId, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<Feature, OnDeviceIntelligenceException> featureReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously get feature for a given id.\n     *\n     * @param featureId        the identifier pointing to the feature.\n     * @param featureReceiver  callback to populate the feature object for given identifier.\n     * @param callbackExecutor executor to run the callback on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void listFeatures(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException> featureListReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously get a list of features that are supported for the caller.\n     *\n     * @param featureListReceiver callback to populate the list of features.\n     * @param callbackExecutor    executor to run the callback on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getFeatureDetails(@NonNull Feature feature, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException> featureDetailsReceiver)",
    "returnType" : "void",
    "comment" : "\n     * This method should be used to fetch details about a feature which need some additional\n     * computation, that can be inefficient to return in all calls to {@link #getFeature}. Callers\n     * and implementation can utilize the {@link Feature#getFeatureParams()} to pass hint on what\n     * details are expected by the caller.\n     *\n     * @param feature                the feature to check status for.\n     * @param featureDetailsReceiver callback to populate the feature details to.\n     * @param callbackExecutor       executor to run the callback on.\n     ",
    "links" : [ "android.app.ondeviceintelligence.Feature#getFeatureParams()", "#getFeature" ]
  }, {
    "name" : "public void requestFeatureDownload(@NonNull Feature feature, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull DownloadCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This method handles downloading all model and config files required to process requests\n     * sent against a given feature. The caller can listen to updates on the download status via\n     * the callback.\n     *\n     * Note: If a feature was already requested for downloaded previously, the onDownloadFailed\n     * callback would be invoked with {@link DownloadCallback#DOWNLOAD_FAILURE_STATUS_DOWNLOADING}.\n     * In such cases, clients should query the feature status via {@link #getFeatureDetails} to\n     * check on the feature's download status.\n     *\n     * @param feature            feature to request download for.\n     * @param callback           callback to populate updates about download status.\n     * @param cancellationSignal signal to invoke cancellation on the operation in the remote\n     *                           implementation.\n     * @param callbackExecutor   executor to run the callback on.\n     ",
    "links" : [ "#getFeatureDetails", "android.app.ondeviceintelligence.DownloadCallback#DOWNLOAD_FAILURE_STATUS_DOWNLOADING" ]
  }, {
    "name" : "public void requestTokenInfo(@NonNull Feature feature, @NonNull @InferenceParams Bundle request, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException> outcomeReceiver)",
    "returnType" : "void",
    "comment" : "\n     * The methods computes the token related information for a given request payload using the\n     * provided {@link Feature}.\n     *\n     * @param feature            feature associated with the request.\n     * @param request            request and associated params represented by the Bundle\n     *                           data.\n     * @param outcomeReceiver    callback to populate the token info or exception in case of\n     *                           failure.\n     * @param cancellationSignal signal to invoke cancellation on the operation in the remote\n     *                           implementation.\n     * @param callbackExecutor   executor to run the callback on.\n     ",
    "links" : [ "android.app.ondeviceintelligence.Feature" ]
  }, {
    "name" : "public void processRequest(@NonNull Feature feature, @NonNull @InferenceParams Bundle request, @RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull ProcessingCallback processingCallback)",
    "returnType" : "void",
    "comment" : "\n     * Asynchronously Process a request based on the associated params, to populate a\n     * response in\n     * {@link OutcomeReceiver#onResult} callback or failure callback status code if there\n     * was a\n     * failure.\n     *\n     * @param feature            feature associated with the request.\n     * @param request            request and associated params represented by the Bundle\n     *                           data.\n     * @param requestType        type of request being sent for processing the content.\n     * @param cancellationSignal signal to invoke cancellation.\n     * @param processingSignal   signal to send custom signals in the\n     *                           remote implementation.\n     * @param callbackExecutor   executor to run the callback on.\n     * @param processingCallback callback to populate the response content and\n     *                           associated params.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult" ]
  }, {
    "name" : "public void processRequestStreaming(@NonNull Feature feature, @NonNull @InferenceParams Bundle request, @RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull StreamingProcessingCallback streamingProcessingCallback)",
    "returnType" : "void",
    "comment" : "\n     * Variation of {@link #processRequest} that asynchronously processes a request in a\n     * streaming\n     * fashion, where new content is pushed to caller in chunks via the\n     * {@link StreamingProcessingCallback#onPartialResult}. After the streaming is complete,\n     * the service should call {@link StreamingProcessingCallback#onResult} and can optionally\n     * populate the complete the full response {@link Bundle} as part of the callback in cases\n     * when the final response contains an enhanced aggregation of the contents already\n     * streamed.\n     *\n     * @param feature                     feature associated with the request.\n     * @param request                     request and associated params represented by the Bundle\n     *                                    data.\n     * @param requestType                 type of request being sent for processing the content.\n     * @param cancellationSignal          signal to invoke cancellation.\n     * @param processingSignal            signal to send custom signals in the\n     *                                    remote implementation.\n     * @param streamingProcessingCallback streaming callback to populate the response content and\n     *                                    associated params.\n     * @param callbackExecutor            executor to run the callback on.\n     ",
    "links" : [ "android.app.ondeviceintelligence.StreamingProcessingCallback#onResult", "android.os.Bundle", "android.app.ondeviceintelligence.StreamingProcessingCallback#onPartialResult", "#processRequest" ]
  }, {
    "name" : "private static AndroidFuture<IBinder> configureRemoteCancellationFuture(@Nullable CancellationSignal cancellationSignal, @NonNull Executor callbackExecutor)",
    "returnType" : "AndroidFuture<IBinder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AndroidFuture<IBinder> configureRemoteProcessingSignalFuture(ProcessingSignal processingSignal, Executor executor)",
    "returnType" : "AndroidFuture<IBinder>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void getVersion(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull LongConsumer versionConsumer)", "public String getRemoteServicePackageName()", "public void getFeature(int featureId, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<Feature, OnDeviceIntelligenceException> featureReceiver)", "public void listFeatures(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<List<Feature>, OnDeviceIntelligenceException> featureListReceiver)", "public void getFeatureDetails(@NonNull Feature feature, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<FeatureDetails, OnDeviceIntelligenceException> featureDetailsReceiver)", "public void requestFeatureDownload(@NonNull Feature feature, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull DownloadCallback callback)", "public void requestTokenInfo(@NonNull Feature feature, @NonNull @InferenceParams Bundle request, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull OutcomeReceiver<TokenInfo, OnDeviceIntelligenceException> outcomeReceiver)", "public void processRequest(@NonNull Feature feature, @NonNull @InferenceParams Bundle request, @RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull ProcessingCallback processingCallback)", "public void processRequestStreaming(@NonNull Feature feature, @NonNull @InferenceParams Bundle request, @RequestType int requestType, @Nullable CancellationSignal cancellationSignal, @Nullable ProcessingSignal processingSignal, @NonNull @CallbackExecutor Executor callbackExecutor, @NonNull StreamingProcessingCallback streamingProcessingCallback)", "private static AndroidFuture<IBinder> configureRemoteCancellationFuture(@Nullable CancellationSignal cancellationSignal, @NonNull Executor callbackExecutor)", "private static AndroidFuture<IBinder> configureRemoteProcessingSignalFuture(ProcessingSignal processingSignal, Executor executor)" ],
  "variableNames" : [ "API_VERSION_BUNDLE_KEY", "AUGMENT_REQUEST_CONTENT_BUNDLE_KEY", "TAG", "mContext", "mService", "REQUEST_TYPE_INFERENCE", "REQUEST_TYPE_PREPARE", "REQUEST_TYPE_EMBEDDINGS" ]
}