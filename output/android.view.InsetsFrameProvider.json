{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InsetsFrameProvider.java",
  "packageName" : "android.view",
  "className" : "InsetsFrameProvider",
  "comment" : "\n * Insets provided by a window.\n *\n * The insets frame will by default as the window frame size. If the providers are set, the\n * calculation result based on the source size will be used as the insets frame.\n *\n * The InsetsFrameProvider should be self-contained. Nothing describing the window itself, such as\n * contentInsets, visibleInsets, etc. won't affect the insets providing to other windows when this\n * is set.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SOURCE_DISPLAY",
    "type" : "int",
    "comment" : "\n     * Uses the display frame as the source.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CONTAINER_BOUNDS",
    "type" : "int",
    "comment" : "\n     * Uses the window bounds as the source.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_FRAME",
    "type" : "int",
    "comment" : "\n     * Uses the window frame as the source.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOURCE_ARBITRARY_RECTANGLE",
    "type" : "int",
    "comment" : "\n     * Uses {@link #mArbitraryRectangle} as the source.\n     ",
    "links" : [ "#mArbitraryRectangle" ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "int",
    "comment" : "\n     * The selection of the starting rectangle to be converted into source frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "mArbitraryRectangle",
    "type" : "Rect",
    "comment" : "\n     * This is used as the source frame only if SOURCE_ARBITRARY_RECTANGLE is applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInsetsSize",
    "type" : "Insets",
    "comment" : "\n     * Modifies the starting rectangle selected by {@link #mSource}.\n     *\n     * For example, when the given source frame is (0, 0) - (100, 200), and the insetsSize is null,\n     * the source frame will be directly used as the final insets frame. If the insetsSize is set to\n     * (0, 0, 0, 50) instead, the insets frame will be a frame starting from the bottom side of the\n     * source frame with height of 50, i.e., (0, 150) - (100, 200).\n     ",
    "links" : [ "#mSource" ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "\n     * Various behavioral options/flags. Default is none.\n     *\n     * @see Flags\n     ",
    "links" : [ ]
  }, {
    "name" : "mInsetsSizeOverrides",
    "type" : "InsetsSizeOverride[]",
    "comment" : "\n     * If null, the size set in insetsSize will be applied to all window types. If it contains\n     * element of some types, the insets reported to the window with that types will be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinimalInsetsSizeInDisplayCutoutSafe",
    "type" : "Insets",
    "comment" : "\n     * This field, if set, is indicating the insets needs to be at least the given size inside the\n     * display cutout safe area. This will be compared to the insets size calculated based on other\n     * attributes, and will be applied when this is larger. This is independent of the\n     * PRIVATE_FLAG_LAYOUT_SIZE_EXTENDED_BY_CUTOUT in LayoutParams, as this is not going to change\n     * the layout of the window, but only change the insets frame. This can be applied to insets\n     * calculated based on all three source frames.\n     *\n     * Be cautious, this will not be in effect for the window types whose insets size is overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBoundingRects",
    "type" : "Rect[]",
    "comment" : "\n     * Indicates the bounding rectangles within the provided insets frame, in relative coordinates\n     * to the source frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InsetsFrameProvider>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns an unique integer which identifies the insets source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index specified in {@link #InsetsFrameProvider(IBinder, int, int)}.\n     ",
    "links" : [ "#InsetsFrameProvider(IBinder" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@link InsetsType} specified in {@link #InsetsFrameProvider(IBinder, int, int)}.\n     ",
    "links" : [ "#InsetsFrameProvider(IBinder", "android.view.WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "public InsetsFrameProvider setSource(int source)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSource()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsFrameProvider setFlags(@Flags int flags, @Flags int mask)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFlags(@Flags int mask)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsFrameProvider setInsetsSize(Insets insetsSize)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getInsetsSize()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsFrameProvider setArbitraryRectangle(Rect rect)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getArbitraryRectangle()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsFrameProvider setInsetsSizeOverrides(InsetsSizeOverride[] insetsSizeOverrides)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSizeOverride[] getInsetsSizeOverrides()",
    "returnType" : "InsetsSizeOverride[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsFrameProvider setMinimalInsetsSizeInDisplayCutoutSafe(Insets minimalInsetsSizeInDisplayCutoutSafe)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getMinimalInsetsSizeInDisplayCutoutSafe()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsFrameProvider setBoundingRects(@Nullable Rect[] boundingRects)",
    "returnType" : "InsetsFrameProvider",
    "comment" : "\n     * Sets the bounding rectangles within and relative to the source frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect[] getBoundingRects()",
    "returnType" : "Rect[]",
    "comment" : "\n     * Returns the arbitrary bounding rects, or null if none were set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String sourceToString(int source)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean idEquals(InsetsFrameProvider o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getId()", "public int getIndex()", "public int getType()", "public InsetsFrameProvider setSource(int source)", "public int getSource()", "public InsetsFrameProvider setFlags(@Flags int flags, @Flags int mask)", "public int getFlags()", "public boolean hasFlags(@Flags int mask)", "public InsetsFrameProvider setInsetsSize(Insets insetsSize)", "public Insets getInsetsSize()", "public InsetsFrameProvider setArbitraryRectangle(Rect rect)", "public Rect getArbitraryRectangle()", "public InsetsFrameProvider setInsetsSizeOverrides(InsetsSizeOverride[] insetsSizeOverrides)", "public InsetsSizeOverride[] getInsetsSizeOverrides()", "public InsetsFrameProvider setMinimalInsetsSizeInDisplayCutoutSafe(Insets minimalInsetsSizeInDisplayCutoutSafe)", "public Insets getMinimalInsetsSizeInDisplayCutoutSafe()", "public InsetsFrameProvider setBoundingRects(@Nullable Rect[] boundingRects)", "public Rect[] getBoundingRects()", "public int describeContents()", "public String toString()", "private static String sourceToString(int source)", "public void writeToParcel(Parcel out, int flags)", "public boolean idEquals(InsetsFrameProvider o)", "public boolean equals(Object o)", "public int hashCode()" ],
  "variableNames" : [ "SOURCE_DISPLAY", "SOURCE_CONTAINER_BOUNDS", "SOURCE_FRAME", "SOURCE_ARBITRARY_RECTANGLE", "mId", "mSource", "mArbitraryRectangle", "mInsetsSize", "mFlags", "mInsetsSizeOverrides", "mMinimalInsetsSizeInDisplayCutoutSafe", "mBoundingRects", "CREATOR" ]
}