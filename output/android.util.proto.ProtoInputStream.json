{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/proto/ProtoInputStream.java",
  "packageName" : "android.util.proto",
  "className" : "ProtoInputStream",
  "comment" : "\n * Class to read to a protobuf stream.\n *\n * Each read method takes an ID code from the protoc generated classes\n * and return a value of the field. To read a nested object, call #start\n * and then #end when you are done.\n *\n * The ID codes have type information embedded into them, so if you call\n * the incorrect function you will get an IllegalArgumentException.\n *\n * nextField will return the field number of the next field, which can be\n * matched to the protoc generated ID code and used to determine how to\n * read the next field.\n *\n * It is STRONGLY RECOMMENDED to read from the ProtoInputStream with a switch\n * statement wrapped in a while loop. Additionally, it is worth logging or\n * storing unexpected fields or ones that do not match the expected wire type\n *\n * ex:\n * void parseFromProto(ProtoInputStream stream) {\n *     while(stream.nextField() != ProtoInputStream.NO_MORE_FIELDS) {\n *         try {\n *             switch (stream.getFieldNumber()) {\n *                 case (int) DummyProto.NAME:\n *                     mName = stream.readString(DummyProto.NAME);\n *                     break;\n *                 case (int) DummyProto.VALUE:\n *                     mValue = stream.readInt(DummyProto.VALUE);\n *                     break;\n *                 default:\n *                     LOG(TAG, \"Unhandled field in proto!\\n\"\n *                              + ProtoUtils.currentFieldToString(stream));\n *             }\n *         } catch (WireTypeMismatchException wtme) {\n *             LOG(TAG, \"Wire Type mismatch in proto!\\n\" + ProtoUtils.currentFieldToString(stream));\n *         }\n *     }\n * }\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "NO_MORE_FIELDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStream",
    "type" : "InputStream",
    "comment" : "\n     * Our stream.  If there is one.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFieldNumber",
    "type" : "int",
    "comment" : "\n     * The field number of the current field. Will be equal to NO_MORE_FIELDS if end of message is\n     * reached\n     ",
    "links" : [ ]
  }, {
    "name" : "mWireType",
    "type" : "int",
    "comment" : "\n     * The wire type of the current field\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_STARTED_FIELD_READ",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_READING_PACKED",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FIELD_MISS",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "byte",
    "comment" : "\n     * Tracks some boolean states for the proto input stream\n     * bit 0: Started Field Read, true - tag has been read, ready to read field data.\n     * false - field data has been read, reading to start next field.\n     * bit 1: Reading Packed Field, true - currently reading values from a packed field\n     * false - not reading from packed field.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExpectedObjectTokenStack",
    "type" : "ArrayList<Long>",
    "comment" : "\n     * Keeps track of the currently read nested Objects, for end object sanity checking and debug\n     ",
    "links" : [ ]
  }, {
    "name" : "mDepth",
    "type" : "int",
    "comment" : "\n     * Current nesting depth of start calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBuffer",
    "type" : "byte[]",
    "comment" : "\n     * Buffer for the to be read data. If mStream is not null, it will be constantly refilled from\n     * the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BUFFER_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferSize",
    "type" : "int",
    "comment" : "\n     * Size of the buffer if reading from a stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDiscardedBytes",
    "type" : "int",
    "comment" : "\n     * The number of bytes that have been skipped or dropped from the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOffset",
    "type" : "int",
    "comment" : "\n     * Current offset in the buffer\n     * mOffset + mDiscardedBytes = current offset in proto binary\n     ",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "\n     * Note the offset of the last byte in the buffer. Usually will equal the size of the buffer.\n     * mEnd + mDiscardedBytes = the last known byte offset + 1\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackedEnd",
    "type" : "int",
    "comment" : "\n     * Packed repeated fields are not read in one go. mPackedEnd keeps track of where the packed\n     * field ends in the proto binary if current field is packed.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getFieldNumber()",
    "returnType" : "int",
    "comment" : "\n     * Get the field number of the current field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWireType()",
    "returnType" : "int",
    "comment" : "\n     * Get the wire type of the current field.\n     *\n     * @return an int that matches one of the ProtoStream WIRE_TYPE_ constants\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset()",
    "returnType" : "int",
    "comment" : "\n     * Get the current offset in the proto binary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextField() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the tag of the next field from the stream. If previous field value was not read, its\n     * data will be skipped over.\n     *\n     * @return the field number of the next field\n     * @throws IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean nextField(long fieldId) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Reads the tag of the next field from the stream. If previous field value was not read, its\n     * data will be skipped over. If {@code fieldId} matches the next field ID, the field data will\n     * be ready to read. If it does not match, {@link #nextField()} or {@link #nextField(long)} will\n     * need to be called again before the field data can be read.\n     *\n     * @return true if fieldId matches the next field, false if not\n     ",
    "links" : [ "#nextField()", "#nextField(long)" ]
  }, {
    "name" : "public double readDouble(long fieldId) throws IOException",
    "returnType" : "double",
    "comment" : "\n     * Read a single double.\n     * Will throw if the current wire type is not fixed64\n     *\n     * @param fieldId - must match the current field number and field type\n     ",
    "links" : [ ]
  }, {
    "name" : "public float readFloat(long fieldId) throws IOException",
    "returnType" : "float",
    "comment" : "\n     * Read a single float.\n     * Will throw if the current wire type is not fixed32\n     *\n     * @param fieldId - must match the current field number and field type\n     ",
    "links" : [ ]
  }, {
    "name" : "public int readInt(long fieldId) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Read a single 32bit or varint proto type field as an int.\n     * Will throw if the current wire type is not varint or fixed32\n     *\n     * @param fieldId - must match the current field number and field type\n     ",
    "links" : [ ]
  }, {
    "name" : "public long readLong(long fieldId) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Read a single 64bit or varint proto type field as an long.\n     *\n     * @param fieldId - must match the current field number\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean readBoolean(long fieldId) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Read a single 32bit or varint proto type field as an boolean.\n     *\n     * @param fieldId - must match the current field number\n     ",
    "links" : [ ]
  }, {
    "name" : "public String readString(long fieldId) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Read a string field\n     *\n     * @param fieldId - must match the current field number\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] readBytes(long fieldId) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Read a bytes field\n     *\n     * @param fieldId - must match the current field number\n     ",
    "links" : [ ]
  }, {
    "name" : "public long start(long fieldId) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Start the read of an embedded Object\n     *\n     * @param fieldId - must match the current field number\n     * @return a token. The token must be handed back when finished reading embedded Object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void end(long token)",
    "returnType" : "void",
    "comment" : "\n     * Note the end of a nested object. Must be called to continue streaming the rest of the proto.\n     * end can be called mid object parse. The offset will be moved to the next field outside the\n     * object.\n     *\n     * @param token - token\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readTag() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Read the tag at the start of the next field and collect field number and wire type.\n     * Will set mFieldNumber to NO_MORE_FIELDS if end of buffer/stream reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int decodeZigZag32(final int n)",
    "returnType" : "int",
    "comment" : "\n     * Decode a 32 bit ZigZag encoded signed int.\n     *\n     * @param n - int to decode\n     * @return the decoded signed int\n     ",
    "links" : [ ]
  }, {
    "name" : "public long decodeZigZag64(final long n)",
    "returnType" : "long",
    "comment" : "\n     * Decode a 64 bit ZigZag encoded signed long.\n     *\n     * @param n - long to decode\n     * @return the decoded signed long\n     ",
    "links" : [ ]
  }, {
    "name" : "private long readVarint() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Read a varint from the buffer\n     *\n     * @return the varint as a long\n     ",
    "links" : [ ]
  }, {
    "name" : "private int readFixed32() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Read a fixed 32 bit int from the buffer\n     *\n     * @return the fixed32 as a int\n     ",
    "links" : [ ]
  }, {
    "name" : "private long readFixed64() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Read a fixed 64 bit long from the buffer\n     *\n     * @return the fixed64 as a long\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte[] readRawBytes(int n) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Read raw bytes from the buffer\n     *\n     * @param n - number of bytes to read\n     * @return a byte array with raw bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "private String readRawString(int n) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Read raw string from the buffer\n     *\n     * @param n - number of bytes to read\n     * @return a string\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fillBuffer() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Fill the buffer with a chunk from the stream if need be.\n     * Will skip chunks until mOffset is reached\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skip() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Skips the rest of current field and moves to the start of the next field. This should only be\n     * called while state is STATE_STARTED_FIELD_READ\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incOffset(int n)",
    "returnType" : "void",
    "comment" : "\n     * Increment the offset and handle all the relevant bookkeeping\n     * Refilling the buffer when its end is reached will be handled elsewhere (ideally just before\n     * a read, to avoid unnecessary reads from stream)\n     *\n     * @param n - number of bytes to increment\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkPacked(long fieldId) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check the current wire type to determine if current numeric field is packed. If it is packed,\n     * set up to deal with the field\n     * This should only be called for primitive numeric field types.\n     *\n     * @param fieldId - used to determine what the packed wire type is.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void assertFieldNumber(long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Check a field id constant against current field number\n     *\n     * @param fieldId - throws if fieldId does not match mFieldNumber\n     ",
    "links" : [ ]
  }, {
    "name" : "private void assertWireType(int wireType)",
    "returnType" : "void",
    "comment" : "\n     * Check a wire type against current wire type.\n     *\n     * @param wireType - throws if wireType does not match mWireType.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void assertFreshData()",
    "returnType" : "void",
    "comment" : "\n     * Check if there is data ready to be read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String dumpDebugData()",
    "returnType" : "String",
    "comment" : "\n     * Dump debugging data about the buffer.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_MORE_FIELDS", "mStream", "mFieldNumber", "mWireType", "STATE_STARTED_FIELD_READ", "STATE_READING_PACKED", "STATE_FIELD_MISS", "mState", "mExpectedObjectTokenStack", "mDepth", "mBuffer", "DEFAULT_BUFFER_SIZE", "mBufferSize", "mDiscardedBytes", "mOffset", "mEnd", "mPackedEnd" ],
  "methodNames" : [ "public int getFieldNumber()", "public int getWireType()", "public int getOffset()", "public int nextField() throws IOException", "public boolean nextField(long fieldId) throws IOException", "public double readDouble(long fieldId) throws IOException", "public float readFloat(long fieldId) throws IOException", "public int readInt(long fieldId) throws IOException", "public long readLong(long fieldId) throws IOException", "public boolean readBoolean(long fieldId) throws IOException", "public String readString(long fieldId) throws IOException", "public byte[] readBytes(long fieldId) throws IOException", "public long start(long fieldId) throws IOException", "public void end(long token)", "private void readTag() throws IOException", "public int decodeZigZag32(final int n)", "public long decodeZigZag64(final long n)", "private long readVarint() throws IOException", "private int readFixed32() throws IOException", "private long readFixed64() throws IOException", "private byte[] readRawBytes(int n) throws IOException", "private String readRawString(int n) throws IOException", "private void fillBuffer() throws IOException", "public void skip() throws IOException", "private void incOffset(int n)", "private void checkPacked(long fieldId) throws IOException", "private void assertFieldNumber(long fieldId)", "private void assertWireType(int wireType)", "private void assertFreshData()", "public String dumpDebugData()" ]
}