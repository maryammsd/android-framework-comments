{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ExpandableListView.java",
  "packageName" : "android.widget",
  "className" : "ExpandableListView",
  "comment" : "\n * A view that shows items in a vertically scrolling two-level list. This\n * differs from the {@link ListView} by allowing two levels: groups which can\n * individually be expanded to show its children. The items come from the\n * {@link ExpandableListAdapter} associated with this view.\n * <p>\n * Expandable lists are able to show an indicator beside each item to display\n * the item's current state (the states are usually one of expanded group,\n * collapsed group, child, or last child). Use\n * {@link #setChildIndicator(Drawable)} or {@link #setGroupIndicator(Drawable)}\n * (or the corresponding XML attributes) to set these indicators (see the docs\n * for each method to see additional state that each Drawable can have). The\n * default style for an {@link ExpandableListView} provides indicators which\n * will be shown next to Views given to the {@link ExpandableListView}. The\n * layouts android.R.layout.simple_expandable_list_item_1 and\n * android.R.layout.simple_expandable_list_item_2 (which should be used with\n * {@link SimpleCursorTreeAdapter}) contain the preferred position information\n * for indicators.\n * <p>\n * The context menu information set by an {@link ExpandableListView} will be a\n * {@link ExpandableListContextMenuInfo} object with\n * {@link ExpandableListContextMenuInfo#packedPosition} being a packed position\n * that can be used with {@link #getPackedPositionType(long)} and the other\n * similar methods.\n * <p>\n * <em><b>Note:</b></em> You cannot use the value <code>wrap_content</code>\n * for the <code>android:layout_height</code> attribute of a\n * ExpandableListView in XML if the parent's size is also not strictly specified\n * (for example, if the parent were ScrollView you could not specify\n * wrap_content since it also can be any length. However, you can use\n * wrap_content if the ExpandableListView parent has a specific size, such as\n * 100 pixels.\n *\n * @attr ref android.R.styleable#ExpandableListView_groupIndicator\n * @attr ref android.R.styleable#ExpandableListView_indicatorLeft\n * @attr ref android.R.styleable#ExpandableListView_indicatorRight\n * @attr ref android.R.styleable#ExpandableListView_childIndicator\n * @attr ref android.R.styleable#ExpandableListView_childIndicatorLeft\n * @attr ref android.R.styleable#ExpandableListView_childIndicatorRight\n * @attr ref android.R.styleable#ExpandableListView_childDivider\n * @attr ref android.R.styleable#ExpandableListView_indicatorStart\n * @attr ref android.R.styleable#ExpandableListView_indicatorEnd\n * @attr ref android.R.styleable#ExpandableListView_childIndicatorStart\n * @attr ref android.R.styleable#ExpandableListView_childIndicatorEnd\n ",
  "variables" : [ {
    "name" : "PACKED_POSITION_TYPE_GROUP",
    "type" : "int",
    "comment" : "\n     * The packed position represents a group.\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_TYPE_CHILD",
    "type" : "int",
    "comment" : "\n     * The packed position represents a child.\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_TYPE_NULL",
    "type" : "int",
    "comment" : "\n     * The packed position represents a neither/null/no preference.\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_VALUE_NULL",
    "type" : "long",
    "comment" : "\n     * The value for a packed position that represents neither/null/no\n     * preference. This value is not otherwise possible since a group type\n     * (first bit 0) should not have a child position filled.\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_MASK_CHILD",
    "type" : "long",
    "comment" : " The mask (in packed position representation) for the child ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_MASK_GROUP",
    "type" : "long",
    "comment" : " The mask (in packed position representation) for the group ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_MASK_TYPE",
    "type" : "long",
    "comment" : " The mask (in packed position representation) for the type ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_SHIFT_GROUP",
    "type" : "long",
    "comment" : " The shift amount (in packed position representation) for the group ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_SHIFT_TYPE",
    "type" : "long",
    "comment" : " The shift amount (in packed position representation) for the type ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_INT_MASK_CHILD",
    "type" : "long",
    "comment" : " The mask (in integer child position representation) for the child ",
    "links" : [ ]
  }, {
    "name" : "PACKED_POSITION_INT_MASK_GROUP",
    "type" : "long",
    "comment" : " The mask (in integer group position representation) for the group ",
    "links" : [ ]
  }, {
    "name" : "mConnector",
    "type" : "ExpandableListConnector",
    "comment" : " Serves as the glue/translator between a ListView and an ExpandableListView ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "ExpandableListAdapter",
    "comment" : " Gives us Views through group+child positions ",
    "links" : [ ]
  }, {
    "name" : "mIndicatorLeft",
    "type" : "int",
    "comment" : " Left bound for drawing the indicator. ",
    "links" : [ ]
  }, {
    "name" : "mIndicatorRight",
    "type" : "int",
    "comment" : " Right bound for drawing the indicator. ",
    "links" : [ ]
  }, {
    "name" : "mIndicatorStart",
    "type" : "int",
    "comment" : " Start bound for drawing the indicator. ",
    "links" : [ ]
  }, {
    "name" : "mIndicatorEnd",
    "type" : "int",
    "comment" : " End bound for drawing the indicator. ",
    "links" : [ ]
  }, {
    "name" : "mChildIndicatorLeft",
    "type" : "int",
    "comment" : "\n     * Left bound for drawing the indicator of a child. Value of\n     * {@link #CHILD_INDICATOR_INHERIT} means use mIndicatorLeft.\n     ",
    "links" : [ "#CHILD_INDICATOR_INHERIT" ]
  }, {
    "name" : "mChildIndicatorRight",
    "type" : "int",
    "comment" : "\n     * Right bound for drawing the indicator of a child. Value of\n     * {@link #CHILD_INDICATOR_INHERIT} means use mIndicatorRight.\n     ",
    "links" : [ "#CHILD_INDICATOR_INHERIT" ]
  }, {
    "name" : "mChildIndicatorStart",
    "type" : "int",
    "comment" : "\n     * Start bound for drawing the indicator of a child. Value of\n     * {@link #CHILD_INDICATOR_INHERIT} means use mIndicatorStart.\n     ",
    "links" : [ "#CHILD_INDICATOR_INHERIT" ]
  }, {
    "name" : "mChildIndicatorEnd",
    "type" : "int",
    "comment" : "\n     * End bound for drawing the indicator of a child. Value of\n     * {@link #CHILD_INDICATOR_INHERIT} means use mIndicatorEnd.\n     ",
    "links" : [ "#CHILD_INDICATOR_INHERIT" ]
  }, {
    "name" : "CHILD_INDICATOR_INHERIT",
    "type" : "int",
    "comment" : "\n     * Denotes when a child indicator should inherit this bound from the generic\n     * indicator bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "INDICATOR_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Denotes an undefined value for an indicator\n     ",
    "links" : [ ]
  }, {
    "name" : "mGroupIndicator",
    "type" : "Drawable",
    "comment" : " The indicator drawn next to a group. ",
    "links" : [ ]
  }, {
    "name" : "mChildIndicator",
    "type" : "Drawable",
    "comment" : " The indicator drawn next to a child. ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STATE_SET",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GROUP_EXPANDED_STATE_SET",
    "type" : "int[]",
    "comment" : " State indicating the group is expanded. ",
    "links" : [ ]
  }, {
    "name" : "GROUP_EMPTY_STATE_SET",
    "type" : "int[]",
    "comment" : " State indicating the group is empty (has no children). ",
    "links" : [ ]
  }, {
    "name" : "GROUP_EXPANDED_EMPTY_STATE_SET",
    "type" : "int[]",
    "comment" : " State indicating the group is expanded and empty (has no children). ",
    "links" : [ ]
  }, {
    "name" : "GROUP_STATE_SETS",
    "type" : "int[][]",
    "comment" : " States for the group where the 0th bit is expanded and 1st bit is empty. ",
    "links" : [ ]
  }, {
    "name" : "CHILD_LAST_STATE_SET",
    "type" : "int[]",
    "comment" : " State indicating the child is the last within its group. ",
    "links" : [ ]
  }, {
    "name" : "mChildDivider",
    "type" : "Drawable",
    "comment" : " Drawable to be used as a divider when it is adjacent to any children ",
    "links" : [ ]
  }, {
    "name" : "mIndicatorRect",
    "type" : "Rect",
    "comment" : " Bounds of the indicator to be drawn",
    "links" : [ ]
  }, {
    "name" : "mOnGroupCollapseListener",
    "type" : "OnGroupCollapseListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnGroupExpandListener",
    "type" : "OnGroupExpandListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnGroupClickListener",
    "type" : "OnGroupClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnChildClickListener",
    "type" : "OnChildClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean isRtlCompatibilityMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if we are in RTL compatibility mode (either before Jelly Bean MR1 or\n     * RTL not supported)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasRtlSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the application tag in the AndroidManifest has set \"supportRtl\" to true\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(int layoutDirection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resolveIndicator()",
    "returnType" : "void",
    "comment" : "\n     * Resolve start/end indicator. start/end indicator always takes precedence over left/right\n     * indicator when defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resolveChildIndicator()",
    "returnType" : "void",
    "comment" : "\n     * Resolve start/end child indicator. start/end child indicator always takes precedence over\n     * left/right child indicator when defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getIndicator(PositionMetadata pos)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the indicator for the item at the given position. If the indicator\n     * is stateful, the state will be given to the indicator.\n     *\n     * @param pos The flat list position of the item whose indicator\n     *            should be returned.\n     * @return The indicator in the proper state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChildDivider(Drawable childDivider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable that will be drawn adjacent to every child in the list. This will\n     * be drawn using the same height as the normal divider ({@link #setDivider(Drawable)}) or\n     * if it does not have an intrinsic height, the height set by {@link #setDividerHeight(int)}.\n     *\n     * @param childDivider The drawable to use.\n     ",
    "links" : [ "#setDivider(Drawable)", "#setDividerHeight(int)" ]
  }, {
    "name" : " void drawDivider(Canvas canvas, Rect bounds, int childIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAdapter(ListAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * This overloaded method should not be used, instead use\n     * {@link #setAdapter(ExpandableListAdapter)}.\n     * <p>\n     * {@inheritDoc}\n     ",
    "links" : [ "#setAdapter(ExpandableListAdapter)" ]
  }, {
    "name" : "public ListAdapter getAdapter()",
    "returnType" : "ListAdapter",
    "comment" : "\n     * This method should not be used, use {@link #getExpandableListAdapter()}.\n     ",
    "links" : [ "#getExpandableListAdapter()" ]
  }, {
    "name" : "public void setOnItemClickListener(OnItemClickListener l)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when an item has been clicked and the\n     * caller prefers to receive a ListView-style position instead of a group\n     * and/or child position. In most cases, the caller should use\n     * {@link #setOnGroupClickListener} and/or {@link #setOnChildClickListener}.\n     * <p />\n     * {@inheritDoc}\n     ",
    "links" : [ "#setOnGroupClickListener", "#setOnChildClickListener" ]
  }, {
    "name" : "public void setAdapter(ExpandableListAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the adapter that provides data to this view.\n     * @param adapter The adapter that provides data to this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ExpandableListAdapter getExpandableListAdapter()",
    "returnType" : "ExpandableListAdapter",
    "comment" : "\n     * Gets the adapter that provides data to this view.\n     * @return The adapter that provides data to this view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isHeaderOrFooterPosition(int position)",
    "returnType" : "boolean",
    "comment" : "\n     * @param position An absolute (including header and footer) flat list position.\n     * @return true if the position corresponds to a header or a footer item.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getFlatPositionForConnector(int flatListPosition)",
    "returnType" : "int",
    "comment" : "\n     * Converts an absolute item flat position into a group/child flat position, shifting according\n     * to the number of header items.\n     *\n     * @param flatListPosition The absolute flat position\n     * @return A group/child flat position as expected by the connector.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getAbsoluteFlatPosition(int flatListPosition)",
    "returnType" : "int",
    "comment" : "\n     * Converts a group/child flat position into an absolute flat position, that takes into account\n     * the possible headers.\n     *\n     * @param flatListPosition The child/group flat position\n     * @return An absolute flat position.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performItemClick(View v, int position, long id)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean handleItemClick(View v, int position, long id)",
    "returnType" : "boolean",
    "comment" : "\n     * This will either expand/collapse groups (if a group was clicked) or pass\n     * on the click to the proper child (if a child was clicked)\n     *\n     * @param position The flat list position. This has already been factored to\n     *            remove the header/footer.\n     * @param id The ListAdapter ID, not the group or child ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean expandGroup(int groupPos)",
    "returnType" : "boolean",
    "comment" : "\n     * Expand a group in the grouped list view\n     *\n     * @param groupPos the group to be expanded\n     * @return True if the group was expanded, false otherwise (if the group\n     *         was already expanded, this will return false)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean expandGroup(int groupPos, boolean animate)",
    "returnType" : "boolean",
    "comment" : "\n     * Expand a group in the grouped list view\n     *\n     * @param groupPos the group to be expanded\n     * @param animate true if the expanding group should be animated in\n     * @return True if the group was expanded, false otherwise (if the group\n     *         was already expanded, this will return false)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean collapseGroup(int groupPos)",
    "returnType" : "boolean",
    "comment" : "\n     * Collapse a group in the grouped list view\n     *\n     * @param groupPos position of the group to collapse\n     * @return True if the group was collapsed, false otherwise (if the group\n     *         was already collapsed, this will return false)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnGroupCollapseListener(OnGroupCollapseListener onGroupCollapseListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnGroupExpandListener(OnGroupExpandListener onGroupExpandListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnGroupClickListener(OnGroupClickListener onGroupClickListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnChildClickListener(OnChildClickListener onChildClickListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getExpandableListPosition(int flatListPosition)",
    "returnType" : "long",
    "comment" : "\n     * Converts a flat list position (the raw position of an item (child or group)\n     * in the list) to a group and/or child position (represented in a\n     * packed position). This is useful in situations where the caller needs to\n     * use the underlying {@link ListView}'s methods. Use\n     * {@link ExpandableListView#getPackedPositionType} ,\n     * {@link ExpandableListView#getPackedPositionChild},\n     * {@link ExpandableListView#getPackedPositionGroup} to unpack.\n     *\n     * @param flatListPosition The flat list position to be converted.\n     * @return The group and/or child position for the given flat list position\n     *         in packed position representation. #PACKED_POSITION_VALUE_NULL if\n     *         the position corresponds to a header or a footer item.\n     ",
    "links" : [ "android.widget.ExpandableListView#getPackedPositionChild", "android.widget.ExpandableListView#getPackedPositionType", "android.widget.ListView", "android.widget.ExpandableListView#getPackedPositionGroup" ]
  }, {
    "name" : "public int getFlatListPosition(long packedPosition)",
    "returnType" : "int",
    "comment" : "\n     * Converts a group and/or child position to a flat list position. This is\n     * useful in situations where the caller needs to use the underlying\n     * {@link ListView}'s methods.\n     *\n     * @param packedPosition The group and/or child positions to be converted in\n     *            packed position representation. Use\n     *            {@link #getPackedPositionForChild(int, int)} or\n     *            {@link #getPackedPositionForGroup(int)}.\n     * @return The flat list position for the given child or group.\n     ",
    "links" : [ "#getPackedPositionForChild(int", "android.widget.ListView", "#getPackedPositionForGroup(int)" ]
  }, {
    "name" : "public long getSelectedPosition()",
    "returnType" : "long",
    "comment" : "\n     * Gets the position of the currently selected group or child (along with\n     * its type). Can return {@link #PACKED_POSITION_VALUE_NULL} if no selection.\n     *\n     * @return A packed position containing the currently selected group or\n     *         child's position and type. #PACKED_POSITION_VALUE_NULL if no selection\n     *         or if selection is on a header or a footer item.\n     ",
    "links" : [ "#PACKED_POSITION_VALUE_NULL" ]
  }, {
    "name" : "public long getSelectedId()",
    "returnType" : "long",
    "comment" : "\n     * Gets the ID of the currently selected group or child. Can return -1 if no\n     * selection.\n     *\n     * @return The ID of the currently selected group or child. -1 if no\n     *         selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelectedGroup(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the selection to the specified group.\n     * @param groupPosition The position of the group that should be selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setSelectedChild(int groupPosition, int childPosition, boolean shouldExpandGroup)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the selection to the specified child. If the child is in a collapsed\n     * group, the group will only be expanded and child subsequently selected if\n     * shouldExpandGroup is set to true, otherwise the method will return false.\n     *\n     * @param groupPosition The position of the group that contains the child.\n     * @param childPosition The position of the child within the group.\n     * @param shouldExpandGroup Whether the child's group should be expanded if\n     *            it is collapsed.\n     * @return Whether the selection was successfully set on the child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGroupExpanded(int groupPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the given group is currently expanded.\n     *\n     * @param groupPosition The group to check.\n     * @return Whether the group is currently expanded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getPackedPositionType(long packedPosition)",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of a packed position. See\n     * {@link #getPackedPositionForChild(int, int)}.\n     *\n     * @param packedPosition The packed position for which to return the type.\n     * @return The type of the position contained within the packed position,\n     *         either {@link #PACKED_POSITION_TYPE_CHILD}, {@link #PACKED_POSITION_TYPE_GROUP}, or\n     *         {@link #PACKED_POSITION_TYPE_NULL}.\n     ",
    "links" : [ "#getPackedPositionForChild(int", "#PACKED_POSITION_TYPE_NULL", "#PACKED_POSITION_TYPE_CHILD", "#PACKED_POSITION_TYPE_GROUP" ]
  }, {
    "name" : "public static int getPackedPositionGroup(long packedPosition)",
    "returnType" : "int",
    "comment" : "\n     * Gets the group position from a packed position. See\n     * {@link #getPackedPositionForChild(int, int)}.\n     *\n     * @param packedPosition The packed position from which the group position\n     *            will be returned.\n     * @return The group position portion of the packed position. If this does\n     *         not contain a group, returns -1.\n     ",
    "links" : [ "#getPackedPositionForChild(int" ]
  }, {
    "name" : "public static int getPackedPositionChild(long packedPosition)",
    "returnType" : "int",
    "comment" : "\n     * Gets the child position from a packed position that is of\n     * {@link #PACKED_POSITION_TYPE_CHILD} type (use {@link #getPackedPositionType(long)}).\n     * To get the group that this child belongs to, use\n     * {@link #getPackedPositionGroup(long)}. See\n     * {@link #getPackedPositionForChild(int, int)}.\n     *\n     * @param packedPosition The packed position from which the child position\n     *            will be returned.\n     * @return The child position portion of the packed position. If this does\n     *         not contain a child, returns -1.\n     ",
    "links" : [ "#getPackedPositionGroup(long)", "#getPackedPositionForChild(int", "#getPackedPositionType(long)", "#PACKED_POSITION_TYPE_CHILD" ]
  }, {
    "name" : "public static long getPackedPositionForChild(int groupPosition, int childPosition)",
    "returnType" : "long",
    "comment" : "\n     * Returns the packed position representation of a child's position.\n     * <p>\n     * In general, a packed position should be used in\n     * situations where the position given to/returned from an\n     * {@link ExpandableListAdapter} or {@link ExpandableListView} method can\n     * either be a child or group. The two positions are packed into a single\n     * long which can be unpacked using\n     * {@link #getPackedPositionChild(long)},\n     * {@link #getPackedPositionGroup(long)}, and\n     * {@link #getPackedPositionType(long)}.\n     *\n     * @param groupPosition The child's parent group's position.\n     * @param childPosition The child position within the group.\n     * @return The packed position representation of the child (and parent group).\n     ",
    "links" : [ "#getPackedPositionGroup(long)", "#getPackedPositionType(long)", "android.widget.ExpandableListAdapter", "android.widget.ExpandableListView", "#getPackedPositionChild(long)" ]
  }, {
    "name" : "public static long getPackedPositionForGroup(int groupPosition)",
    "returnType" : "long",
    "comment" : "\n     * Returns the packed position representation of a group's position. See\n     * {@link #getPackedPositionForChild(int, int)}.\n     *\n     * @param groupPosition The child's parent group's position.\n     * @return The packed position representation of the group.\n     ",
    "links" : [ "#getPackedPositionForChild(int" ]
  }, {
    "name" : " ContextMenuInfo createContextMenuInfo(View view, int flatListPosition, long id)",
    "returnType" : "ContextMenuInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getChildOrGroupId(ExpandableListPosition position)",
    "returnType" : "long",
    "comment" : "\n     * Gets the ID of the group or child at the given <code>position</code>.\n     * This is useful since there is no ListAdapter ID -> ExpandableListAdapter\n     * ID conversion mechanism (in some cases, it isn't possible).\n     *\n     * @param position The position of the child or group whose ID should be\n     *            returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChildIndicator(Drawable childIndicator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the indicator to be drawn next to a child.\n     *\n     * @param childIndicator The drawable to be used as an indicator. If the\n     *            child is the last child for a group, the state\n     *            {@link android.R.attr#state_last} will be set.\n     ",
    "links" : [ "android.R.attr#state_last" ]
  }, {
    "name" : "public void setChildIndicatorBounds(int left, int right)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawing bounds for the child indicator. For either, you can\n     * specify {@link #CHILD_INDICATOR_INHERIT} to use inherit from the general\n     * indicator's bounds.\n     *\n     * @see #setIndicatorBounds(int, int)\n     * @param left The left position (relative to the left bounds of this View)\n     *            to start drawing the indicator.\n     * @param right The right position (relative to the left bounds of this\n     *            View) to end the drawing of the indicator.\n     ",
    "links" : [ "#CHILD_INDICATOR_INHERIT" ]
  }, {
    "name" : "public void setChildIndicatorBoundsRelative(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Sets the relative drawing bounds for the child indicator. For either, you can\n     * specify {@link #CHILD_INDICATOR_INHERIT} to use inherit from the general\n     * indicator's bounds.\n     *\n     * @see #setIndicatorBounds(int, int)\n     * @param start The start position (relative to the start bounds of this View)\n     *            to start drawing the indicator.\n     * @param end The end position (relative to the end bounds of this\n     *            View) to end the drawing of the indicator.\n     ",
    "links" : [ "#CHILD_INDICATOR_INHERIT" ]
  }, {
    "name" : "public void setGroupIndicator(Drawable groupIndicator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the indicator to be drawn next to a group.\n     *\n     * @param groupIndicator The drawable to be used as an indicator. If the\n     *            group is empty, the state {@link android.R.attr#state_empty} will be\n     *            set. If the group is expanded, the state\n     *            {@link android.R.attr#state_expanded} will be set.\n     ",
    "links" : [ "android.R.attr#state_empty", "android.R.attr#state_expanded" ]
  }, {
    "name" : "public void setIndicatorBounds(int left, int right)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawing bounds for the indicators (at minimum, the group indicator\n     * is affected by this; the child indicator is affected by this if the\n     * child indicator bounds are set to inherit).\n     *\n     * @see #setChildIndicatorBounds(int, int)\n     * @param left The left position (relative to the left bounds of this View)\n     *            to start drawing the indicator.\n     * @param right The right position (relative to the left bounds of this\n     *            View) to end the drawing of the indicator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndicatorBoundsRelative(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Sets the relative drawing bounds for the indicators (at minimum, the group indicator\n     * is affected by this; the child indicator is affected by this if the\n     * child indicator bounds are set to inherit).\n     *\n     * @see #setChildIndicatorBounds(int, int)\n     * @param start The start position (relative to the start bounds of this View)\n     *            to start drawing the indicator.\n     * @param end The end position (relative to the end bounds of this\n     *            View) to end the drawing of the indicator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "PACKED_POSITION_TYPE_GROUP", "PACKED_POSITION_TYPE_CHILD", "PACKED_POSITION_TYPE_NULL", "PACKED_POSITION_VALUE_NULL", "PACKED_POSITION_MASK_CHILD", "PACKED_POSITION_MASK_GROUP", "PACKED_POSITION_MASK_TYPE", "PACKED_POSITION_SHIFT_GROUP", "PACKED_POSITION_SHIFT_TYPE", "PACKED_POSITION_INT_MASK_CHILD", "PACKED_POSITION_INT_MASK_GROUP", "mConnector", "mAdapter", "mIndicatorLeft", "mIndicatorRight", "mIndicatorStart", "mIndicatorEnd", "mChildIndicatorLeft", "mChildIndicatorRight", "mChildIndicatorStart", "mChildIndicatorEnd", "CHILD_INDICATOR_INHERIT", "INDICATOR_UNDEFINED", "mGroupIndicator", "mChildIndicator", "EMPTY_STATE_SET", "GROUP_EXPANDED_STATE_SET", "GROUP_EMPTY_STATE_SET", "GROUP_EXPANDED_EMPTY_STATE_SET", "GROUP_STATE_SETS", "CHILD_LAST_STATE_SET", "mChildDivider", "mIndicatorRect", "mOnGroupCollapseListener", "mOnGroupExpandListener", "mOnGroupClickListener", "mOnChildClickListener" ],
  "methodNames" : [ "private boolean isRtlCompatibilityMode()", "private boolean hasRtlSupport()", "public void onRtlPropertiesChanged(int layoutDirection)", "private void resolveIndicator()", "private void resolveChildIndicator()", "protected void dispatchDraw(Canvas canvas)", "private Drawable getIndicator(PositionMetadata pos)", "public void setChildDivider(Drawable childDivider)", " void drawDivider(Canvas canvas, Rect bounds, int childIndex)", "public void setAdapter(ListAdapter adapter)", "public ListAdapter getAdapter()", "public void setOnItemClickListener(OnItemClickListener l)", "public void setAdapter(ExpandableListAdapter adapter)", "public ExpandableListAdapter getExpandableListAdapter()", "private boolean isHeaderOrFooterPosition(int position)", "private int getFlatPositionForConnector(int flatListPosition)", "private int getAbsoluteFlatPosition(int flatListPosition)", "public boolean performItemClick(View v, int position, long id)", " boolean handleItemClick(View v, int position, long id)", "public boolean expandGroup(int groupPos)", "public boolean expandGroup(int groupPos, boolean animate)", "public boolean collapseGroup(int groupPos)", "public void setOnGroupCollapseListener(OnGroupCollapseListener onGroupCollapseListener)", "public void setOnGroupExpandListener(OnGroupExpandListener onGroupExpandListener)", "public void setOnGroupClickListener(OnGroupClickListener onGroupClickListener)", "public void setOnChildClickListener(OnChildClickListener onChildClickListener)", "public long getExpandableListPosition(int flatListPosition)", "public int getFlatListPosition(long packedPosition)", "public long getSelectedPosition()", "public long getSelectedId()", "public void setSelectedGroup(int groupPosition)", "public boolean setSelectedChild(int groupPosition, int childPosition, boolean shouldExpandGroup)", "public boolean isGroupExpanded(int groupPosition)", "public static int getPackedPositionType(long packedPosition)", "public static int getPackedPositionGroup(long packedPosition)", "public static int getPackedPositionChild(long packedPosition)", "public static long getPackedPositionForChild(int groupPosition, int childPosition)", "public static long getPackedPositionForGroup(int groupPosition)", " ContextMenuInfo createContextMenuInfo(View view, int flatListPosition, long id)", "private long getChildOrGroupId(ExpandableListPosition position)", "public void setChildIndicator(Drawable childIndicator)", "public void setChildIndicatorBounds(int left, int right)", "public void setChildIndicatorBoundsRelative(int start, int end)", "public void setGroupIndicator(Drawable groupIndicator)", "public void setIndicatorBounds(int left, int right)", "public void setIndicatorBoundsRelative(int start, int end)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "public CharSequence getAccessibilityClassName()" ]
}