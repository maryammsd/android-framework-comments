{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/ULocale.java",
  "packageName" : "android.icu.util",
  "className" : "ULocale",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.util.Locale}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * A class analogous to {@link java.util.Locale} that provides additional\n * support for ICU protocol.  In ICU 3.0 this class is enhanced to support\n * RFC 3066 language identifiers.\n *\n * <p>Many classes and services in ICU follow a factory idiom, in\n * which a factory method or object responds to a client request with\n * an object.  The request includes a locale (the <i>requested</i>\n * locale), and the returned object is constructed using data for that\n * locale.  The system may lack data for the requested locale, in\n * which case the locale fallback mechanism will be invoked until a\n * populated locale is found (the <i>valid</i> locale).  Furthermore,\n * even when a populated locale is found (the <i>valid</i> locale),\n * further fallback may be required to reach a locale containing the\n * specific data required by the service (the <i>actual</i> locale).\n *\n * <p>ULocale performs <b>'normalization'</b> and <b>'canonicalization'</b> of locale ids.\n * Normalization 'cleans up' ICU locale ids as follows:\n * <ul>\n * <li>language, script, country, variant, and keywords are properly cased<br>\n * (lower, title, upper, upper, and lower case respectively)</li>\n * <li>hyphens used as separators are converted to underscores</li>\n * <li>three-letter language and country ids are converted to two-letter\n * equivalents where available</li>\n * <li>surrounding spaces are removed from keywords and values</li>\n * <li>if there are multiple keywords, they are put in sorted order</li>\n * </ul>\n * Canonicalization additionally performs the following:\n * <ul>\n * <li>POSIX ids are converted to ICU format IDs</li>\n * <li>Legacy language tags (marked as “Type: grandfathered” in BCP 47)\n * are converted to ICU standard form</li>\n * </ul>\n * All ULocale constructors automatically normalize the locale id.  To handle\n * POSIX ids, <code>canonicalize</code> can be called to convert the id\n * to canonical form, or the <code>canonicalInstance</code> factory method\n * can be called.\n *\n * <p>Note: The <i>actual</i> locale is returned correctly, but the <i>valid</i>\n * locale is not, in most cases.\n *\n * @see java.util.Locale\n * @author weiv\n * @author Alan Liu\n * @author Ram Viswanadha\n ",
  "links" : [ "java.util.Locale" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " using serialver from jdk1.4.2_05",
    "links" : [ ]
  }, {
    "name" : "nameCache",
    "type" : "CacheBase<String, String, Void>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENGLISH",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRENCH",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "GERMAN",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "ITALIAN",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "JAPANESE",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "KOREAN",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHINESE",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIMPLIFIED_CHINESE",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRADITIONAL_CHINESE",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for language.\n     ",
    "links" : [ ]
  }, {
    "name" : "FRANCE",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "GERMANY",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "ITALY",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "JAPAN",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "KOREA",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHINA",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRC",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAIWAN",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "UK",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "US",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "CANADA",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "CANADA_FRENCH",
    "type" : "ULocale",
    "comment" : "\n     * Useful constant for country/region.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STRING",
    "type" : "String",
    "comment" : "\n     * Handy constant.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDERSCORE",
    "type" : "char",
    "comment" : " Used in both ULocale and LocaleIDParser, so moved up here.",
    "links" : [ ]
  }, {
    "name" : "EMPTY_LOCALE",
    "type" : "Locale",
    "comment" : " default empty locale",
    "links" : [ ]
  }, {
    "name" : "LOCALE_ATTRIBUTE_KEY",
    "type" : "String",
    "comment" : " special keyword key for Unicode locale attributes",
    "links" : [ ]
  }, {
    "name" : "ROOT",
    "type" : "ULocale",
    "comment" : "\n     * The root ULocale.\n     ",
    "links" : [ ]
  }, {
    "name" : "CACHE",
    "type" : "SoftCache<Locale, ULocale, Void>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "\n     * Cache the locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "localeID",
    "type" : "String",
    "comment" : "\n     * The raw localeID that we were passed in.\n     ",
    "links" : [ ]
  }, {
    "name" : "baseLocale",
    "type" : "BaseLocale",
    "comment" : "\n     * Cache the locale data container fields.\n     * In future, we want to use them as the primary locale identifier storage.\n     ",
    "links" : [ ]
  }, {
    "name" : "extensions",
    "type" : "LocaleExtensions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANONICALIZE_MAP",
    "type" : "String[][]",
    "comment" : "\n     * This table lists pairs of locale ids for canonicalization.\n     * The 1st item is the normalized id. The 2nd item is the\n     * canonicalized id.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultULocale",
    "type" : "ULocale",
    "comment" : "\n     * Keep our own default ULocale.\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultCategoryLocales",
    "type" : "Locale[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultCategoryULocales",
    "type" : "ULocale[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gKnownCanonicalizedCases",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LANG_DIR_STRING",
    "type" : "String",
    "comment" : "\n     * Pairs of (language subtag, + or -) for finding out fast if common languages\n     * are LTR (minus) or RTL (plus).\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTUAL_LOCALE",
    "type" : "Type",
    "comment" : "\n     * <strong>[icu]</strong> Selector for <tt>getLocale()</tt> indicating the locale of the\n     * resource containing the data.  This is always at or above the\n     * valid locale.  If the valid locale does not contain the\n     * specific data being requested, then the actual locale will be\n     * above the valid locale.  If the object was not constructed from\n     * locale data, then the valid locale is <i>null</i>.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "VALID_LOCALE",
    "type" : "Type",
    "comment" : "\n     * <strong>[icu]</strong> Selector for <tt>getLocale()</tt> indicating the most specific\n     * locale for which any data exists.  This is always at or above\n     * the requested locale, and at or below the actual locale.  If\n     * the requested locale does not correspond to any resource data,\n     * then the valid locale will be above the requested locale.  If\n     * the object was not constructed from locale data, then the\n     * actual locale is <i>null</i>.\n     *\n     * <p>Note: The valid locale will be returned correctly in ICU\n     * 3.0 or later.  In ICU 2.8, it is not returned correctly.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_LANGUAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_SCRIPT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_REGION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIVATE_USE_EXTENSION",
    "type" : "char",
    "comment" : "\n     * The key for the private use locale extension ('x').\n     *\n     * @see #getExtension(char)\n     * @see Builder#setExtension(char, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_LOCALE_EXTENSION",
    "type" : "char",
    "comment" : "\n     * The key for Unicode locale extension ('u').\n     *\n     * @see #getExtension(char)\n     * @see Builder#setExtension(char, String)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ULocale forLocale(Locale loc)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns a ULocale object for a {@link java.util.Locale}.\n     * The ULocale is canonicalized.\n     * @param loc a {@link java.util.Locale}\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static ULocale createCanonical(String nonCanonicalID)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Creates a ULocale from the id by first canonicalizing the id according to CLDR.\n     * @param nonCanonicalID the locale id to canonicalize\n     * @return the locale created from the canonical version of the ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale createCanonical(ULocale locale)",
    "returnType" : "ULocale",
    "comment" : "\n     * Creates a ULocale from the locale by first canonicalizing the locale according to CLDR.\n     * @param locale the ULocale to canonicalize\n     * @return the ULocale created from the canonical version of the ULocale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String lscvToID(String lang, String script, String country, String variant)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Locale toLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * <strong>[icu]</strong> Converts this ULocale object to a {@link java.util.Locale}.\n     * @return a {@link java.util.Locale} that either exactly represents this object\n     * or is the closest approximation.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static ULocale getDefault()",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the current default ULocale.\n     * <p>\n     * The default ULocale is synchronized to the default Java Locale. This method checks\n     * the current default Java Locale and returns an equivalent ULocale.\n     *\n     * @return the default ULocale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setDefault(ULocale newLocale)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default ULocale.  This also sets the default Locale.\n     * If the caller does not have write permission to the\n     * user.language property, a security exception will be thrown,\n     * and the default ULocale will remain unchanged.\n     * <p>\n     * By setting the default ULocale with this method, all of the default category locales\n     * are also set to the specified default ULocale.\n     * @param newLocale the new default locale\n     * @throws SecurityException if a security manager exists and its\n     *        <code>checkPermission</code> method doesn't allow the operation.\n     * @throws NullPointerException if <code>newLocale</code> is null\n     * @see SecurityManager#checkPermission(java.security.Permission)\n     * @see java.util.PropertyPermission\n     * @see ULocale#setDefault(Category, ULocale)\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale getDefault(Category category)",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the current default ULocale for the specified category.\n     *\n     * @param category the category\n     * @return the default ULocale for the specified category.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setDefault(Category category, ULocale newLocale)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default <code>ULocale</code> for the specified <code>Category</code>.\n     * This also sets the default <code>Locale</code> for the specified <code>Category</code>\n     * of the JVM. If the caller does not have write permission to the\n     * user.language property, a security exception will be thrown,\n     * and the default ULocale for the specified Category will remain unchanged.\n     *\n     * @param category the specified category to set the default locale\n     * @param newLocale the new default locale\n     * @see SecurityManager#checkPermission(java.security.Permission)\n     * @see java.util.PropertyPermission\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * This is for compatibility with Locale-- in actuality, since ULocale is\n     * immutable, there is no reason to clone it, so this API returns 'this'.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hashCode.\n     * @return a hash code value for this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the other object is another ULocale with the\n     * same full name.\n     * Note that since names are not canonicalized, two ULocales that\n     * function identically might not compare equal.\n     *\n     * @return true if this Locale is equal to the specified object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(ULocale other)",
    "returnType" : "int",
    "comment" : "\n     * Compares two ULocale for ordering.\n     * <p><b>Note:</b> The order might change in future.\n     *\n     * @param other the ULocale to be compared.\n     * @return a negative integer, zero, or a positive integer as this ULocale is less than, equal to, or greater\n     * than the specified ULocale.\n     * @throws NullPointerException if <code>other</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale[] getAvailableLocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * <strong>[icu] Note:</strong> Unlike the Locale API, this returns an array of <code>ULocale</code>,\n     * not <code>Locale</code>.\n     *\n     * <p>Returns a list of all installed locales. This is equivalent to calling\n     * {@link #getAvailableLocalesByType} with AvailableType.DEFAULT.\n     ",
    "links" : [ "#getAvailableLocalesByType" ]
  }, {
    "name" : "public static Collection<ULocale> getAvailableLocalesByType(AvailableType type)",
    "returnType" : "Collection<ULocale>",
    "comment" : "\n     * Returns a list of all installed locales according to the specified type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getISOCountries()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a list of all 2-letter country codes defined in ISO 3166.\n     * Can be used to create Locales.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getISOLanguages()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a list of all unique language codes defined in ISO 639.\n     * They can be 2 or 3 letter codes, as defined by\n     * <a href=\"https://www.ietf.org/rfc/bcp/bcp47.html#section-2.2.1\">\n     * BCP 47, section 2.2.1</a>. Can be used to create Locales.\n     * [NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.\n     * The list this function returns includes both the new and the old codes for the\n     * languages whose codes have changed.]\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLanguage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the language code for this locale, which will either be the empty string\n     * or a lowercase ISO 639 code.\n     * @see #getDisplayLanguage()\n     * @see #getDisplayLanguage(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getLanguage(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * Returns the language code for the locale ID,\n     * which will either be the empty string\n     * or a lowercase ISO 639 code.\n     * @see #getDisplayLanguage()\n     * @see #getDisplayLanguage(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getScript()",
    "returnType" : "String",
    "comment" : "\n     * Returns the script code for this locale, which might be the empty string.\n     * @see #getDisplayScript()\n     * @see #getDisplayScript(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getScript(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the script code for the specified locale, which might be the empty\n     * string.\n     * @see #getDisplayScript()\n     * @see #getDisplayScript(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCountry()",
    "returnType" : "String",
    "comment" : "\n     * Returns the country/region code for this locale, which will either be the empty string\n     * or an uppercase ISO 3166 2-letter code.\n     * @see #getDisplayCountry()\n     * @see #getDisplayCountry(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCountry(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the country/region code for this locale, which will either be the empty string\n     * or an uppercase ISO 3166 2-letter code.\n     * @param localeID The locale identification string.\n     * @see #getDisplayCountry()\n     * @see #getDisplayCountry(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getRegionFromKey(ULocale locale, String key)",
    "returnType" : "String",
    "comment" : "\n     * Get region code from a key in locale or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getRegionForSupplementalData(ULocale locale, boolean inferRegion)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Get the region to use for supplemental data lookup.\n     * Uses\n     * (1) any region specified by locale tag \"rg\"; if none then\n     * (2) any unicode_region_tag in the locale ID; if none then\n     * (3) if inferRegion is true, the region suggested by\n     *     getLikelySubtags on the localeID.\n     * If no region is found, returns empty string \"\"\n     *\n     * @param locale\n     *     The locale (includes any keywords) from which\n     *     to get the region to use for supplemental data.\n     * @param inferRegion\n     *     If true, will try to infer region from other\n     *     locale elements if not found any other way.\n     * @return\n     *     String with region to use (\"\" if none found).\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVariant()",
    "returnType" : "String",
    "comment" : "\n     * Returns the variant code for this locale, which might be the empty string.\n     * @see #getDisplayVariant()\n     * @see #getDisplayVariant(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getVariant(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the variant code for the specified locale, which might be the empty string.\n     * @see #getDisplayVariant()\n     * @see #getDisplayVariant(ULocale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getFallback(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the fallback locale for the specified locale, which might be the\n     * empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale getFallback()",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the fallback locale for this locale.  If this locale is root,\n     * returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getFallbackString(String fallback)",
    "returnType" : "String",
    "comment" : "\n     * Returns the given (canonical) locale id minus the last part before the tags.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseName()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the (normalized) base name for this locale,\n     * like {@link #getName()}, but without keywords.\n     *\n     * @return the base name as a String.\n     ",
    "links" : [ "#getName()" ]
  }, {
    "name" : "public static String getBaseName(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the (normalized) base name for the specified locale,\n     * like {@link #getName(String)}, but without keywords.\n     *\n     * @param localeID the locale ID as a string\n     * @return the base name as a String.\n     ",
    "links" : [ "#getName(String)" ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the (normalized) full name for this locale.\n     *\n     * @return String the full name of the localeID\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getShortestSubtagLength(String localeID)",
    "returnType" : "int",
    "comment" : "\n     * Gets the shortest length subtag's size.\n     *\n     * @param localeID\n     * @return The size of the shortest length subtag\n     *",
    "links" : [ ]
  }, {
    "name" : "public static String getName(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the (normalized) full name for the specified locale.\n     *\n     * @param localeID the localeID as a string\n     * @return String the full name of the localeID\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String stripLeadingUnd(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * Strips out the leading \"und\" language code case-insensitively.\n     *\n     * @implNote Avoids creating new local non-primitive objects to reduce GC pressure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this object.\n     * @return a string representation of the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<String> getKeywords()",
    "returnType" : "Iterator<String>",
    "comment" : "\n     * <strong>[icu]</strong> Returns an iterator over keywords for this locale.  If there\n     * are no keywords, returns null.\n     * @return iterator over keywords, or null if there are no keywords.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Iterator<String> getKeywords(String localeID)",
    "returnType" : "Iterator<String>",
    "comment" : "\n     * <strong>[icu]</strong> Returns an iterator over keywords for the specified locale.  If there\n     * are no keywords, returns null.\n     * @return an iterator over the keywords in the specified locale, or null\n     * if there are no keywords.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKeywordValue(String keywordName)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the value for a keyword in this locale. If the keyword is not\n     * defined, returns null.\n     * @param keywordName name of the keyword whose value is desired. Case insensitive.\n     * @return the value of the keyword, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getKeywordValue(String localeID, String keywordName)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the value for a keyword in the specified locale. If the keyword is\n     * not defined, returns null.  The locale name does not need to be normalized.\n     * @param keywordName name of the keyword whose value is desired. Case insensitive.\n     * @return String the value of the keyword as a string\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String canonicalize(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the canonical name according to CLDR for the specified locale ID.\n     * This is used to convert POSIX and other legacy IDs to standard ICU form.\n     * @param localeID the locale id\n     * @return the canonicalized id\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized boolean isKnownCanonicalizedLocale(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ULocale setKeywordValue(String keyword, String value)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Given a keyword and a value, return a new locale with an updated\n     * keyword and value.  If the keyword is null, this removes all keywords from the locale id.\n     * Otherwise, if the value is null, this removes the value for this keyword from the\n     * locale id.  Otherwise, this adds/replaces the value for this keyword in the locale id.\n     * The keyword and value must not be empty.\n     *\n     * <p>Related: {@link #getBaseName()} returns the locale ID string with all keywords removed.\n     *\n     * @param keyword the keyword to add/remove, or null to remove all keywords.\n     * @param value the value to add/set, or null to remove this particular keyword.\n     * @return the updated locale\n     ",
    "links" : [ "#getBaseName()" ]
  }, {
    "name" : "public static String setKeywordValue(String localeID, String keyword, String value)",
    "returnType" : "String",
    "comment" : "\n     * Given a locale id, a keyword, and a value, return a new locale id with an updated\n     * keyword and value.  If the keyword is null, this removes all keywords from the locale id.\n     * Otherwise, if the value is null, this removes the value for this keyword from the\n     * locale id.  Otherwise, this adds/replaces the value for this keyword in the locale id.\n     * The keyword and value must not be empty.\n     *\n     * <p>Related: {@link #getBaseName(String)} returns the locale ID string with all keywords removed.\n     *\n     * @param localeID the locale id to modify\n     * @param keyword the keyword to add/remove, or null to remove all keywords.\n     * @param value the value to add/set, or null to remove this particular keyword.\n     * @return the updated locale id\n     ",
    "links" : [ "#getBaseName(String)" ]
  }, {
    "name" : "public String getISO3Language()",
    "returnType" : "String",
    "comment" : "\n     * Returns a three-letter abbreviation for this locale's language.  If the locale\n     * doesn't specify a language, returns the empty string.  Otherwise, returns\n     * a lowercase ISO 639-2/T language code.\n     * The ISO 639-2 language codes can be found on-line at\n     *   <a href=\"ftp://dkuug.dk/i18n/iso-639-2.txt\"><code>ftp://dkuug.dk/i18n/iso-639-2.txt</code></a>\n     * @exception MissingResourceException Throws MissingResourceException if the\n     * three-letter language abbreviation is not available for this locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getISO3Language(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a three-letter abbreviation for this locale's language.  If the locale\n     * doesn't specify a language, returns the empty string.  Otherwise, returns\n     * a lowercase ISO 639-2/T language code.\n     * The ISO 639-2 language codes can be found on-line at\n     *   <a href=\"ftp://dkuug.dk/i18n/iso-639-2.txt\"><code>ftp://dkuug.dk/i18n/iso-639-2.txt</code></a>\n     * @exception MissingResourceException Throws MissingResourceException if the\n     * three-letter language abbreviation is not available for this locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getISO3Country()",
    "returnType" : "String",
    "comment" : "\n     * Returns a three-letter abbreviation for this locale's country/region.  If the locale\n     * doesn't specify a country, returns the empty string.  Otherwise, returns\n     * an uppercase ISO 3166 3-letter country code.\n     * @exception MissingResourceException Throws MissingResourceException if the\n     * three-letter country abbreviation is not available for this locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getISO3Country(String localeID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a three-letter abbreviation for this locale's country/region.  If the locale\n     * doesn't specify a country, returns the empty string.  Otherwise, returns\n     * an uppercase ISO 3166 3-letter country code.\n     * @exception MissingResourceException Throws MissingResourceException if the\n     * three-letter country abbreviation is not available for this locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRightToLeft()",
    "returnType" : "boolean",
    "comment" : "\n     * <strong>[icu]</strong> Returns whether this locale's script is written right-to-left.\n     * If there is no script subtag, then the likely script is used,\n     * see {@link #addLikelySubtags(ULocale)}.\n     * If no likely script is known, then false is returned.\n     *\n     * <p>A script is right-to-left according to the CLDR script metadata\n     * which corresponds to whether the script's letters have Bidi_Class=R or AL.\n     *\n     * <p>Returns true for \"ar\" and \"en-Hebr\", false for \"zh\" and \"fa-Cyrl\".\n     *\n     * @return true if the locale's script is written right-to-left\n     ",
    "links" : [ "#addLikelySubtags(ULocale)" ]
  }, {
    "name" : "public String getDisplayLanguage()",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's language localized for display in the default <code>DISPLAY</code> locale.\n     * @return the localized language name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayLanguage(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's language localized for display in the provided locale.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized language name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayLanguage(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose language will be displayed\n     * @param displayLocaleID the id of the locale in which to display the name.\n     * @return the localized language name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayLanguage(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose language will be displayed.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized language name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayLanguageWithDialect()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale's language localized for display in the default <code>DISPLAY</code> locale.\n     * If a dialect name is present in the data, then it is returned.\n     * @return the localized language name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayLanguageWithDialect(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale's language localized for display in the provided locale.\n     * If a dialect name is present in the data, then it is returned.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized language name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayLanguageWithDialect(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.\n     * If a dialect name is present in the data, then it is returned.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose language will be displayed\n     * @param displayLocaleID the id of the locale in which to display the name.\n     * @return the localized language name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayLanguageWithDialect(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.\n     * If a dialect name is present in the data, then it is returned.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose language will be displayed.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized language name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayLanguageInternal(ULocale locale, ULocale displayLocale, boolean useDialect)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayScript()",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's script localized for display in the default <code>DISPLAY</code> locale.\n     * @return the localized script name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayScriptInContext()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale's script localized for display in the default <code>DISPLAY</code> locale.\n     * @return the localized script name.\n     * @see Category#DISPLAY\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayScript(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's script localized for display in the provided locale.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized script name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayScriptInContext(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale's script localized for display in the provided locale.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized script name.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayScript(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose script will be displayed\n     * @param displayLocaleID the id of the locale in which to display the name.\n     * @return the localized script name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayScriptInContext(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose script will be displayed\n     * @param displayLocaleID the id of the locale in which to display the name.\n     * @return the localized script name.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayScript(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.\n     * @param localeID the id of the locale whose script will be displayed.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized script name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayScriptInContext(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.\n     * @param localeID the id of the locale whose script will be displayed.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized script name.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayScriptInternal(ULocale locale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : " displayLocaleID is canonical, localeID need not be since parsing will fix this.",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayScriptInContextInternal(ULocale locale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayCountry()",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's country localized for display in the default <code>DISPLAY</code> locale.\n     * <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like \"FR\").\n     * To get the display name for a region alone, or for other options, use {@link LocaleDisplayNames} instead.\n     * @return the localized country name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ "android.icu.text.LocaleDisplayNames" ]
  }, {
    "name" : "public String getDisplayCountry(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's country localized for display in the provided locale.\n     * <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like \"FR\").\n     * To get the display name for a region alone, or for other options, use {@link LocaleDisplayNames} instead.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized country name.\n     ",
    "links" : [ "android.icu.text.LocaleDisplayNames" ]
  }, {
    "name" : "public static String getDisplayCountry(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's country localized for display in the provided locale.\n     * <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like \"FR\").\n     * To get the display name for a region alone, or for other options, use {@link LocaleDisplayNames} instead.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose country will be displayed\n     * @param displayLocaleID the id of the locale in which to display the name.\n     * @return the localized country name.\n     ",
    "links" : [ "android.icu.text.LocaleDisplayNames" ]
  }, {
    "name" : "public static String getDisplayCountry(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's country localized for display in the provided locale.\n     * <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like \"FR\").\n     * To get the display name for a region alone, or for other options, use {@link LocaleDisplayNames} instead.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose country will be displayed.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized country name.\n     ",
    "links" : [ "android.icu.text.LocaleDisplayNames" ]
  }, {
    "name" : "private static String getDisplayCountryInternal(ULocale locale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : " displayLocaleID is canonical, localeID need not be since parsing will fix this.",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayVariant()",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's variant localized for display in the default <code>DISPLAY</code> locale.\n     * @return the localized variant name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayVariant(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale's variant localized for display in the provided locale.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized variant name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayVariant(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's variant localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose variant will be displayed\n     * @param displayLocaleID the id of the locale in which to display the name.\n     * @return the localized variant name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayVariant(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a locale's variant localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose variant will be displayed.\n     * @param displayLocale the locale in which to display the name.\n     * @return the localized variant name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayVariantInternal(ULocale locale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayKeyword(String keyword)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword localized for display in the default <code>DISPLAY</code> locale.\n     * @param keyword the keyword to be displayed.\n     * @return the localized keyword name.\n     * @see #getKeywords()\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayKeyword(String keyword, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword localized for display in the specified locale.\n     * @param keyword the keyword to be displayed.\n     * @param displayLocaleID the id of the locale in which to display the keyword.\n     * @return the localized keyword name.\n     * @see #getKeywords(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayKeyword(String keyword, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword localized for display in the specified locale.\n     * @param keyword the keyword to be displayed.\n     * @param displayLocale the locale in which to display the keyword.\n     * @return the localized keyword name.\n     * @see #getKeywords(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayKeywordInternal(String keyword, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayKeywordValue(String keyword)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword value localized for display in the default <code>DISPLAY</code> locale.\n     * @param keyword the keyword whose value is to be displayed.\n     * @return the localized value name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayKeywordValue(String keyword, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.\n     * @param keyword the keyword whose value is to be displayed.\n     * @param displayLocale the locale in which to display the value.\n     * @return the localized value name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayKeywordValue(String localeID, String keyword, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose keyword value is to be displayed.\n     * @param keyword the keyword whose value is to be displayed.\n     * @param displayLocaleID the id of the locale in which to display the value.\n     * @return the localized value name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayKeywordValue(String localeID, String keyword, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the id of the locale whose keyword value is to be displayed.\n     * @param keyword the keyword whose value is to be displayed.\n     * @param displayLocale the id of the locale in which to display the value.\n     * @return the localized value name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayKeywordValueInternal(ULocale locale, String keyword, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : " displayLocaleID is canonical, localeID need not be since parsing will fix this.",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale name localized for display in the default <code>DISPLAY</code> locale.\n     * @return the localized locale name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * Returns this locale name localized for display in the provided locale.\n     * @param displayLocale the locale in which to display the locale name.\n     * @return the localized locale name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the locale whose name is to be displayed.\n     * @param displayLocaleID the id of the locale in which to display the locale name.\n     * @return the localized locale name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.\n     * This is a cover for the ICU4C API.\n     * @param localeID the locale whose name is to be displayed.\n     * @param displayLocale the locale in which to display the locale name.\n     * @return the localized locale name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayNameInternal(ULocale locale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayNameWithDialect()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale name localized for display in the default <code>DISPLAY</code> locale.\n     * If a dialect name is present in the locale data, then it is returned.\n     * @return the localized locale name.\n     * @see Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayNameWithDialect(ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale name localized for display in the provided locale.\n     * If a dialect name is present in the locale data, then it is returned.\n     * @param displayLocale the locale in which to display the locale name.\n     * @return the localized locale name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayNameWithDialect(String localeID, String displayLocaleID)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.\n     * If a dialect name is present in the locale data, then it is returned.\n     * This is a cover for the ICU4C API.\n     * @param localeID the locale whose name is to be displayed.\n     * @param displayLocaleID the id of the locale in which to display the locale name.\n     * @return the localized locale name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayNameWithDialect(String localeID, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.\n     * If a dialect name is present in the locale data, then it is returned.\n     * This is a cover for the ICU4C API.\n     * @param localeID the locale whose name is to be displayed.\n     * @param displayLocale the locale in which to display the locale name.\n     * @return the localized locale name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDisplayNameWithDialectInternal(ULocale locale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getCharacterOrientation()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale's layout orientation for characters.  The possible\n     * values are \"left-to-right\", \"right-to-left\", \"top-to-bottom\" or\n     * \"bottom-to-top\".\n     * @return The locale's layout orientation for characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLineOrientation()",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns this locale's layout orientation for lines.  The possible\n     * values are \"left-to-right\", \"right-to-left\", \"top-to-bottom\" or\n     * \"bottom-to-top\".\n     * @return The locale's layout orientation for lines.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale acceptLanguage(String acceptLanguageList, ULocale[] availableLocales, boolean[] fallback)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Based on a HTTP formatted list of acceptable locales, determine an available\n     * locale for the user.  NullPointerException is thrown if acceptLanguageList or\n     * availableLocales is null.  If fallback is non-null, it will contain true if a\n     * fallback locale (one not in the acceptLanguageList) was returned.  The value on\n     * entry is ignored.  ULocale will be one of the locales in availableLocales, or the\n     * ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in\n     * availableLocales matched).  No ULocale array element should be null; behavior is\n     * undefined if this is the case.\n     *\n     * @param acceptLanguageList list in HTTP \"Accept-Language:\" format of acceptable locales\n     * @param availableLocales list of available locales. One of these will be returned.\n     * @param fallback if non-null, a 1-element array containing a boolean to be set with\n     * the fallback status\n     * @return one of the locales from the availableLocales list, or null if none match\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale acceptLanguage(ULocale[] acceptLanguageList, ULocale[] availableLocales, boolean[] fallback)",
    "returnType" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ULocale acceptLanguage(String acceptLanguageList, boolean[] fallback)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Based on a HTTP formatted list of acceptable locales, determine an available\n     * locale for the user.  NullPointerException is thrown if acceptLanguageList or\n     * availableLocales is null.  If fallback is non-null, it will contain true if a\n     * fallback locale (one not in the acceptLanguageList) was returned.  The value on\n     * entry is ignored.  ULocale will be one of the locales in availableLocales, or the\n     * ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in\n     * availableLocales matched).  No ULocale array element should be null; behavior is\n     * undefined if this is the case.  This function will choose a locale from the\n     * ULocale.getAvailableLocales() list as available.\n     *\n     * @param acceptLanguageList list in HTTP \"Accept-Language:\" format of acceptable locales\n     * @param fallback if non-null, a 1-element array containing a boolean to be set with\n     * the fallback status\n     * @return one of the locales from the ULocale.getAvailableLocales() list, or null if\n     * none match\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale acceptLanguage(ULocale[] acceptLanguageList, boolean[] fallback)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Based on an ordered array of acceptable locales, determine an available\n     * locale for the user.  NullPointerException is thrown if acceptLanguageList or\n     * availableLocales is null.  If fallback is non-null, it will contain true if a\n     * fallback locale (one not in the acceptLanguageList) was returned.  The value on\n     * entry is ignored.  ULocale will be one of the locales in availableLocales, or the\n     * ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in\n     * availableLocales matched).  No ULocale array element should be null; behavior is\n     * undefined if this is the case.  This function will choose a locale from the\n     * ULocale.getAvailableLocales() list as available.\n     *\n     * @param acceptLanguageList ordered array of acceptable locales (preferred are listed first)\n     * @param fallback if non-null, a 1-element array containing a boolean to be set with\n     * the fallback status\n     * @return one of the locales from the ULocale.getAvailableLocales() list, or null if none match\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale addLikelySubtags(ULocale loc)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Adds the likely subtags for a provided locale ID, per the algorithm\n     * described in the following CLDR technical report:\n     *\n     *   http://www.unicode.org/reports/tr35/#Likely_Subtags\n     *\n     * If the provided ULocale instance is already in the maximal form, or there is no\n     * data available available for maximization, it will be returned.  For example,\n     * \"sh\" cannot be maximized, since there is no reasonable maximization.\n     * Otherwise, a new ULocale instance with the maximal form is returned.\n     *\n     * Examples:\n     *\n     * \"en\" maximizes to \"en_Latn_US\"\n     *\n     * \"de\" maximizes to \"de_Latn_DE\"\n     *\n     * \"sr\" maximizes to \"sr_Cyrl_RS\"\n     *\n     * \"zh_Hani\" maximizes to \"zh_Hani_CN\"\n     *\n     * @param loc The ULocale to maximize\n     * @return The maximized ULocale instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale minimizeSubtags(ULocale loc)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Minimizes the subtags for a provided locale ID, per the algorithm described\n     * in the following CLDR technical report:<blockquote>\n     *\n     *   <a href=\"http://www.unicode.org/reports/tr35/#Likely_Subtags\"\n     *>http://www.unicode.org/reports/tr35/#Likely_Subtags</a></blockquote>\n     *\n     * If the provided ULocale instance is already in the minimal form, or there\n     * is no data available for minimization, it will be returned.  Since the\n     * minimization algorithm relies on proper maximization, see the comments\n     * for addLikelySubtags for reasons why there might not be any data.\n     *\n     * Examples:<pre>\n     *\n     * \"en_Latn_US\" minimizes to \"en\"\n     *\n     * \"de_Latn_US\" minimizes to \"de\"\n     *\n     * \"sr_Cyrl_RS\" minimizes to \"sr\"\n     *\n     * \"zh_Hant_TW\" minimizes to \"zh_TW\" (The region is preferred to the\n     * script, and minimizing to \"zh\" would imply \"zh_Hans_CN\".) </pre>\n     *\n     * @param loc The ULocale to minimize\n     * @return The minimized ULocale instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale minimizeSubtags(ULocale loc, Minimize fieldToFavor)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Minimizes the subtags for a provided locale ID, per the algorithm described\n     * in the following CLDR technical report:<blockquote>\n     *\n     *   <a href=\"http://www.unicode.org/reports/tr35/#Likely_Subtags\"\n     *>http://www.unicode.org/reports/tr35/#Likely_Subtags</a></blockquote>\n     *\n     * If the provided ULocale instance is already in the minimal form, or there\n     * is no data available for minimization, it will be returned.  Since the\n     * minimization algorithm relies on proper maximization, see the comments\n     * for addLikelySubtags for reasons why there might not be any data.\n     *\n     * Examples:<pre>\n     *\n     * \"en_Latn_US\" minimizes to \"en\"\n     *\n     * \"de_Latn_US\" minimizes to \"de\"\n     *\n     * \"sr_Cyrl_RS\" minimizes to \"sr\"\n     *\n     * \"zh_Hant_TW\" minimizes to \"zh_TW\" if fieldToFavor == {@link Minimize#FAVOR_REGION}\n     * \"zh_Hant_TW\" minimizes to \"zh_Hant\" if fieldToFavor == {@link Minimize#FAVOR_SCRIPT}\n     * </pre>\n     * The fieldToFavor only has an effect if either the region or the script could be suppressed, but not both.\n     * @param loc The ULocale to minimize\n     * @param fieldToFavor Indicate which should be preferred, when either the region <b>or</b> the script could be suppressed, but not both.\n     * @return The minimized ULocale instance.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "#FAVOR_REGION", "#FAVOR_SCRIPT" ]
  }, {
    "name" : "private static boolean isEmptyString(String string)",
    "returnType" : "boolean",
    "comment" : "\n     * A trivial utility function that checks for a null\n     * reference or checks the length of the supplied String.\n     *\n     *   @param string The string to check\n     *\n     *   @return true if the String is empty, or if the reference is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void appendTag(String tag, StringBuilder buffer)",
    "returnType" : "void",
    "comment" : "\n     * Append a tag to a StringBuilder, adding the separator if necessary.The tag must\n     * not be a zero-length string.\n     *\n     * @param tag The tag to add.\n     * @param buffer The output buffer.\n     *",
    "links" : [ ]
  }, {
    "name" : "private static String createTagString(String lang, String script, String region, String trailing)",
    "returnType" : "String",
    "comment" : "\n     * Create a tag string from the supplied parameters.  The lang, script and region\n     * parameters may be null references.\n     *\n     * If any of the language, script or region parameters are empty, and the alternateTags\n     * parameter is not null, it will be parsed for potential language, script and region tags\n     * to be used when constructing the new tag.  If the alternateTags parameter is null, or\n     * it contains no language tag, the default tag for the unknown language is used.\n     *\n     * @param lang The language tag to use.\n     * @param script The script tag to use.\n     * @param region The region tag to use.\n     * @param trailing Any trailing data to append to the new tag.\n     * @param alternateTags A string containing any alternate tags.\n     * @return The new tag string.\n     *",
    "links" : [ ]
  }, {
    "name" : "private static int parseTagString(String localeID, String[] tags)",
    "returnType" : "int",
    "comment" : "\n     * Parse the language, script, and region subtags from a tag string, and return the results.\n     *\n     * This function does not return the canonical strings for the unknown script and region.\n     *\n     * @param localeID The locale ID to parse.\n     * @param tags An array of three String references to return the subtag strings.\n     * @return The number of chars of the localeID parameter consumed.\n     *",
    "links" : [ ]
  }, {
    "name" : "public String getExtension(char key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the extension (or private use) value associated with\n     * the specified key, or null if there is no extension\n     * associated with the key. To be well-formed, the key must be one\n     * of <code>[0-9A-Za-z]</code>. Keys are case-insensitive, so\n     * for example 'z' and 'Z' represent the same extension.\n     *\n     * @param key the extension key\n     * @return The extension, or null if this locale defines no\n     * extension for the specified key.\n     * @throws IllegalArgumentException if key is not well-formed\n     * @see #PRIVATE_USE_EXTENSION\n     * @see #UNICODE_LOCALE_EXTENSION\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Character> getExtensionKeys()",
    "returnType" : "Set<Character>",
    "comment" : "\n     * Returns the set of extension keys associated with this locale, or the\n     * empty set if it has no extensions. The returned set is unmodifiable.\n     * The keys will all be lower-case.\n     *\n     * @return the set of extension keys, or the empty set if this locale has\n     * no extensions\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getUnicodeLocaleAttributes()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns the set of unicode locale attributes associated with\n     * this locale, or the empty set if it has no attributes. The\n     * returned set is unmodifiable.\n     *\n     * @return The set of attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUnicodeLocaleType(String key)",
    "returnType" : "String",
    "comment" : "\n     * Returns the Unicode locale type associated with the specified Unicode locale key\n     * for this locale. Returns the empty string for keys that are defined with no type.\n     * Returns null if the key is not defined. Keys are case-insensitive. The key must\n     * be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is\n     * thrown.\n     *\n     * @param key the Unicode locale key\n     * @return The Unicode locale type associated with the key, or null if the\n     * locale does not define the key.\n     * @throws IllegalArgumentException if the key is not well-formed\n     * @throws NullPointerException if <code>key</code> is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getUnicodeLocaleKeys()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns the set of Unicode locale keys defined by this locale, or the empty set if\n     * this locale has none.  The returned set is immutable.  Keys are all lower case.\n     *\n     * @return The set of Unicode locale keys, or the empty set if this locale has\n     * no Unicode locale keywords.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toLanguageTag()",
    "returnType" : "String",
    "comment" : "\n     * Returns a well-formed IETF BCP 47 language tag representing\n     * this locale.\n     *\n     * <p>If this <code>ULocale</code> has a language, script, country, or\n     * variant that does not satisfy the IETF BCP 47 language tag\n     * syntax requirements, this method handles these fields as\n     * described below:\n     *\n     * <p><b>Language:</b> If language is empty, or not well-formed\n     * (for example \"a\" or \"e2\"), it will be emitted as \"und\" (Undetermined).\n     *\n     * <p><b>Script:</b> If script is not well-formed (for example \"12\"\n     * or \"Latin\"), it will be omitted.\n     *\n     * <p><b>Country:</b> If country is not well-formed (for example \"12\"\n     * or \"USA\"), it will be omitted.\n     *\n     * <p><b>Variant:</b> If variant <b>is</b> well-formed, each sub-segment\n     * (delimited by '-' or '_') is emitted as a subtag.  Otherwise:\n     * <ul>\n     *\n     * <li>if all sub-segments match <code>[0-9a-zA-Z]{1,8}</code>\n     * (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first\n     * ill-formed sub-segment and all following will be appended to\n     * the private use subtag.  The first appended subtag will be\n     * \"lvariant\", followed by the sub-segments in order, separated by\n     * hyphen. For example, \"x-lvariant-WIN\",\n     * \"Oracle-x-lvariant-JDK-Standard-Edition\".\n     *\n     * <li>if any sub-segment does not match\n     * <code>[0-9a-zA-Z]{1,8}</code>, the variant will be truncated\n     * and the problematic sub-segment and all following sub-segments\n     * will be omitted.  If the remainder is non-empty, it will be\n     * emitted as a private use subtag as above (even if the remainder\n     * turns out to be well-formed).  For example,\n     * \"Solaris_isjustthecoolestthing\" is emitted as\n     * \"x-lvariant-Solaris\", not as \"solaris\".</li></ul>\n     *\n     * <p><b>Note:</b> Although the language tag created by this\n     * method is well-formed (satisfies the syntax requirements\n     * defined by the IETF BCP 47 specification), it is not\n     * necessarily a valid BCP 47 language tag.  For example,\n     * <pre>\n     *   new Locale(\"xx\", \"YY\").toLanguageTag();</pre>\n     *\n     * will return \"xx-YY\", but the language subtag \"xx\" and the\n     * region subtag \"YY\" are invalid because they are not registered\n     * in the IANA Language Subtag Registry.\n     *\n     * @return a BCP47 language tag representing the locale\n     * @see #forLanguageTag(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale forLanguageTag(String languageTag)",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns a locale for the specified IETF BCP 47 language tag string.\n     *\n     * <p>If the specified language tag contains any ill-formed subtags,\n     * the first such subtag and all following subtags are ignored.  Compare\n     * to {@link ULocale.Builder#setLanguageTag} which throws an exception\n     * in this case.\n     *\n     * <p>The following <b>conversions</b> are performed:\n     * <ul>\n     *\n     * <li>The language code \"und\" is mapped to language \"\".\n     *\n     * <li>The portion of a private use subtag prefixed by \"lvariant\",\n     * if any, is removed and appended to the variant field in the\n     * result locale (without case normalization).  If it is then\n     * empty, the private use subtag is discarded:\n     *\n     * <pre>\n     *     ULocale loc;\n     *     loc = ULocale.forLanguageTag(\"en-US-x-lvariant-icu4j);\n     *     loc.getVariant(); // returns \"ICU4J\"\n     *     loc.getExtension('x'); // returns null\n     *\n     *     loc = Locale.forLanguageTag(\"de-icu4j-x-URP-lvariant-Abc-Def\");\n     *     loc.getVariant(); // returns \"ICU4J_ABC_DEF\"\n     *     loc.getExtension('x'); // returns \"urp\"\n     * </pre>\n     *\n     * <li>When the languageTag argument contains an extlang subtag,\n     * the first such subtag is used as the language, and the primary\n     * language subtag and other extlang subtags are ignored:\n     *\n     * <pre>\n     *     ULocale.forLanguageTag(\"ar-aao\").getLanguage(); // returns \"aao\"\n     *     ULocale.forLanguageTag(\"en-abc-def-us\").toString(); // returns \"abc_US\"\n     * </pre>\n     *\n     * <li>Case is normalized. Language is normalized to lower case,\n     * script to title case, country to upper case, variant to upper case,\n     * and extensions to lower case.\n     *\n     * </ul>\n     *\n     * <p>This implements the 'Language-Tag' production of BCP 47, and so\n     * supports legacy language tags (marked as “Type: grandfathered” in BCP 47)\n     * (regular and irregular) as well as private use language tags.\n     *\n     * <p>Stand-alone private use tags are represented as empty language and extension 'x-whatever',\n     * and legacy tags are converted to their canonical replacements where they exist.\n     *\n     * <p>Note that a few legacy tags have no modern replacement;\n     * these will be converted using the fallback described in\n     * the first paragraph, so some information might be lost.\n     *\n     * <p><b>Note</b>: there is no guarantee that <code>toLanguageTag</code>\n     * and <code>forLanguageTag</code> will round-trip.\n     *\n     * @param languageTag the language tag\n     * @return The locale that best represents the language tag.\n     * @throws NullPointerException if <code>languageTag</code> is <code>null</code>\n     * @see #toLanguageTag()\n     * @see ULocale.Builder#setLanguageTag(String)\n     ",
    "links" : [ "ULocale.Builder#setLanguageTag" ]
  }, {
    "name" : "public static String toUnicodeLocaleKey(String keyword)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Converts the specified keyword (legacy key, or BCP 47 Unicode locale\n     * extension key) to the equivalent BCP 47 Unicode locale extension key.\n     * For example, BCP 47 Unicode locale extension key \"co\" is returned for\n     * the input keyword \"collation\".\n     * <p>\n     * When the specified keyword is unknown, but satisfies the BCP syntax,\n     * then the lower-case version of the input keyword will be returned.\n     * For example,\n     * <code>toUnicodeLocaleKey(\"ZZ\")</code> returns \"zz\".\n     *\n     * @param keyword       the input locale keyword (either legacy key\n     *                      such as \"collation\" or BCP 47 Unicode locale extension\n     *                      key such as \"co\").\n     * @return              the well-formed BCP 47 Unicode locale extension key,\n     *                      or null if the specified locale keyword cannot be mapped\n     *                      to a well-formed BCP 47 Unicode locale extension key.\n     * @see #toLegacyKey(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toUnicodeLocaleType(String keyword, String value)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Converts the specified keyword value (legacy type, or BCP 47\n     * Unicode locale extension type) to the well-formed BCP 47 Unicode locale\n     * extension type for the specified keyword (category). For example, BCP 47\n     * Unicode locale extension type \"phonebk\" is returned for the input\n     * keyword value \"phonebook\", with the keyword \"collation\" (or \"co\").\n     * <p>\n     * When the specified keyword is not recognized, but the specified value\n     * satisfies the syntax of the BCP 47 Unicode locale extension type,\n     * or when the specified keyword allows 'variable' type and the specified\n     * value satisfies the syntax, the lower-case version of the input value\n     * will be returned. For example,\n     * <code>toUnicodeLocaleType(\"Foo\", \"Bar\")</code> returns \"bar\",\n     * <code>toUnicodeLocaleType(\"variableTop\", \"00A4\")</code> returns \"00a4\".\n     *\n     * @param keyword       the locale keyword (either legacy key such as\n     *                      \"collation\" or BCP 47 Unicode locale extension\n     *                      key such as \"co\").\n     * @param value         the locale keyword value (either legacy type\n     *                      such as \"phonebook\" or BCP 47 Unicode locale extension\n     *                      type such as \"phonebk\").\n     * @return              the well-formed BCP47 Unicode locale extension type,\n     *                      or null if the locale keyword value cannot be mapped to\n     *                      a well-formed BCP 47 Unicode locale extension type.\n     * @see #toLegacyType(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toLegacyKey(String keyword)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Converts the specified keyword (BCP 47 Unicode locale extension key, or\n     * legacy key) to the legacy key. For example, legacy key \"collation\" is\n     * returned for the input BCP 47 Unicode locale extension key \"co\".\n     *\n     * @param keyword       the input locale keyword (either BCP 47 Unicode locale\n     *                      extension key or legacy key).\n     * @return              the well-formed legacy key, or null if the specified\n     *                      keyword cannot be mapped to a well-formed legacy key.\n     * @see #toUnicodeLocaleKey(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toLegacyType(String keyword, String value)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Converts the specified keyword value (BCP 47 Unicode locale extension type,\n     * or legacy type or type alias) to the canonical legacy type. For example,\n     * the legacy type \"phonebook\" is returned for the input BCP 47 Unicode\n     * locale extension type \"phonebk\" with the keyword \"collation\" (or \"co\").\n     * <p>\n     * When the specified keyword is not recognized, but the specified value\n     * satisfies the syntax of legacy key, or when the specified keyword\n     * allows 'variable' type and the specified value satisfies the syntax,\n     * the lower-case version of the input value will be returned.\n     * For example,\n     * <code>toLegacyType(\"Foo\", \"Bar\")</code> returns \"bar\",\n     * <code>toLegacyType(\"vt\", \"00A4\")</code> returns \"00a4\".\n     *\n     * @param keyword       the locale keyword (either legacy keyword such as\n     *                      \"collation\" or BCP 47 Unicode locale extension\n     *                      key such as \"co\").\n     * @param value         the locale keyword value (either BCP 47 Unicode locale\n     *                      extension type such as \"phonebk\" or legacy keyword value\n     *                      such as \"phonebook\").\n     * @return              the well-formed legacy type, or null if the specified\n     *                      keyword value cannot be mapped to a well-formed legacy\n     *                      type.\n     * @see #toUnicodeLocaleType(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ULocale getInstance(BaseLocale base, LocaleExtensions exts)",
    "returnType" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private BaseLocale base()",
    "returnType" : "BaseLocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LocaleExtensions extensions()",
    "returnType" : "LocaleExtensions",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ULocale forLocale(Locale loc)", "public static ULocale createCanonical(String nonCanonicalID)", "public static ULocale createCanonical(ULocale locale)", "private static String lscvToID(String lang, String script, String country, String variant)", "public Locale toLocale()", "public static ULocale getDefault()", "public static synchronized void setDefault(ULocale newLocale)", "public static ULocale getDefault(Category category)", "public static synchronized void setDefault(Category category, ULocale newLocale)", "public Object clone()", "public int hashCode()", "public boolean equals(Object obj)", "public int compareTo(ULocale other)", "public static ULocale[] getAvailableLocales()", "public static Collection<ULocale> getAvailableLocalesByType(AvailableType type)", "public static String[] getISOCountries()", "public static String[] getISOLanguages()", "public String getLanguage()", "public static String getLanguage(String localeID)", "public String getScript()", "public static String getScript(String localeID)", "public String getCountry()", "public static String getCountry(String localeID)", "private static String getRegionFromKey(ULocale locale, String key)", "public static String getRegionForSupplementalData(ULocale locale, boolean inferRegion)", "public String getVariant()", "public static String getVariant(String localeID)", "public static String getFallback(String localeID)", "public ULocale getFallback()", "private static String getFallbackString(String fallback)", "public String getBaseName()", "public static String getBaseName(String localeID)", "public String getName()", "private static int getShortestSubtagLength(String localeID)", "public static String getName(String localeID)", "private static String stripLeadingUnd(String localeID)", "public String toString()", "public Iterator<String> getKeywords()", "public static Iterator<String> getKeywords(String localeID)", "public String getKeywordValue(String keywordName)", "public static String getKeywordValue(String localeID, String keywordName)", "public static String canonicalize(String localeID)", "private static synchronized boolean isKnownCanonicalizedLocale(String name)", "public ULocale setKeywordValue(String keyword, String value)", "public static String setKeywordValue(String localeID, String keyword, String value)", "public String getISO3Language()", "public static String getISO3Language(String localeID)", "public String getISO3Country()", "public static String getISO3Country(String localeID)", "public boolean isRightToLeft()", "public String getDisplayLanguage()", "public String getDisplayLanguage(ULocale displayLocale)", "public static String getDisplayLanguage(String localeID, String displayLocaleID)", "public static String getDisplayLanguage(String localeID, ULocale displayLocale)", "public String getDisplayLanguageWithDialect()", "public String getDisplayLanguageWithDialect(ULocale displayLocale)", "public static String getDisplayLanguageWithDialect(String localeID, String displayLocaleID)", "public static String getDisplayLanguageWithDialect(String localeID, ULocale displayLocale)", "private static String getDisplayLanguageInternal(ULocale locale, ULocale displayLocale, boolean useDialect)", "public String getDisplayScript()", "public String getDisplayScriptInContext()", "public String getDisplayScript(ULocale displayLocale)", "public String getDisplayScriptInContext(ULocale displayLocale)", "public static String getDisplayScript(String localeID, String displayLocaleID)", "public static String getDisplayScriptInContext(String localeID, String displayLocaleID)", "public static String getDisplayScript(String localeID, ULocale displayLocale)", "public static String getDisplayScriptInContext(String localeID, ULocale displayLocale)", "private static String getDisplayScriptInternal(ULocale locale, ULocale displayLocale)", "private static String getDisplayScriptInContextInternal(ULocale locale, ULocale displayLocale)", "public String getDisplayCountry()", "public String getDisplayCountry(ULocale displayLocale)", "public static String getDisplayCountry(String localeID, String displayLocaleID)", "public static String getDisplayCountry(String localeID, ULocale displayLocale)", "private static String getDisplayCountryInternal(ULocale locale, ULocale displayLocale)", "public String getDisplayVariant()", "public String getDisplayVariant(ULocale displayLocale)", "public static String getDisplayVariant(String localeID, String displayLocaleID)", "public static String getDisplayVariant(String localeID, ULocale displayLocale)", "private static String getDisplayVariantInternal(ULocale locale, ULocale displayLocale)", "public static String getDisplayKeyword(String keyword)", "public static String getDisplayKeyword(String keyword, String displayLocaleID)", "public static String getDisplayKeyword(String keyword, ULocale displayLocale)", "private static String getDisplayKeywordInternal(String keyword, ULocale displayLocale)", "public String getDisplayKeywordValue(String keyword)", "public String getDisplayKeywordValue(String keyword, ULocale displayLocale)", "public static String getDisplayKeywordValue(String localeID, String keyword, String displayLocaleID)", "public static String getDisplayKeywordValue(String localeID, String keyword, ULocale displayLocale)", "private static String getDisplayKeywordValueInternal(ULocale locale, String keyword, ULocale displayLocale)", "public String getDisplayName()", "public String getDisplayName(ULocale displayLocale)", "public static String getDisplayName(String localeID, String displayLocaleID)", "public static String getDisplayName(String localeID, ULocale displayLocale)", "private static String getDisplayNameInternal(ULocale locale, ULocale displayLocale)", "public String getDisplayNameWithDialect()", "public String getDisplayNameWithDialect(ULocale displayLocale)", "public static String getDisplayNameWithDialect(String localeID, String displayLocaleID)", "public static String getDisplayNameWithDialect(String localeID, ULocale displayLocale)", "private static String getDisplayNameWithDialectInternal(ULocale locale, ULocale displayLocale)", "public String getCharacterOrientation()", "public String getLineOrientation()", "public static ULocale acceptLanguage(String acceptLanguageList, ULocale[] availableLocales, boolean[] fallback)", "public static ULocale acceptLanguage(ULocale[] acceptLanguageList, ULocale[] availableLocales, boolean[] fallback)", "public static ULocale acceptLanguage(String acceptLanguageList, boolean[] fallback)", "public static ULocale acceptLanguage(ULocale[] acceptLanguageList, boolean[] fallback)", "public static ULocale addLikelySubtags(ULocale loc)", "public static ULocale minimizeSubtags(ULocale loc)", "public static ULocale minimizeSubtags(ULocale loc, Minimize fieldToFavor)", "private static boolean isEmptyString(String string)", "private static void appendTag(String tag, StringBuilder buffer)", "private static String createTagString(String lang, String script, String region, String trailing)", "private static int parseTagString(String localeID, String[] tags)", "public String getExtension(char key)", "public Set<Character> getExtensionKeys()", "public Set<String> getUnicodeLocaleAttributes()", "public String getUnicodeLocaleType(String key)", "public Set<String> getUnicodeLocaleKeys()", "public String toLanguageTag()", "public static ULocale forLanguageTag(String languageTag)", "public static String toUnicodeLocaleKey(String keyword)", "public static String toUnicodeLocaleType(String keyword, String value)", "public static String toLegacyKey(String keyword)", "public static String toLegacyType(String keyword, String value)", "private static ULocale getInstance(BaseLocale base, LocaleExtensions exts)", "private BaseLocale base()", "private LocaleExtensions extensions()" ],
  "variableNames" : [ "serialVersionUID", "nameCache", "ENGLISH", "FRENCH", "GERMAN", "ITALIAN", "JAPANESE", "KOREAN", "CHINESE", "SIMPLIFIED_CHINESE", "TRADITIONAL_CHINESE", "FRANCE", "GERMANY", "ITALY", "JAPAN", "KOREA", "CHINA", "PRC", "TAIWAN", "UK", "US", "CANADA", "CANADA_FRENCH", "EMPTY_STRING", "UNDERSCORE", "EMPTY_LOCALE", "LOCALE_ATTRIBUTE_KEY", "ROOT", "CACHE", "locale", "localeID", "baseLocale", "extensions", "CANONICALIZE_MAP", "defaultULocale", "defaultCategoryLocales", "defaultCategoryULocales", "gKnownCanonicalizedCases", "LANG_DIR_STRING", "ACTUAL_LOCALE", "VALID_LOCALE", "UNDEFINED_LANGUAGE", "UNDEFINED_SCRIPT", "UNDEFINED_REGION", "PRIVATE_USE_EXTENSION", "UNICODE_LOCALE_EXTENSION" ]
}