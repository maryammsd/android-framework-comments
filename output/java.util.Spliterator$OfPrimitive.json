{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Spliterator.java",
  "packageName" : "java.util",
  "className" : "OfPrimitive",
  "comment" : "\n     * A Spliterator specialized for primitive values.\n     *\n     * @param <T> the type of elements returned by this Spliterator.  The\n     * type must be a wrapper type for a primitive type, such as {@code Integer}\n     * for the primitive {@code int} type.\n     * @param <T_CONS> the type of primitive consumer.  The type must be a\n     * primitive specialization of {@link java.util.function.Consumer} for\n     * {@code T}, such as {@link java.util.function.IntConsumer} for\n     * {@code Integer}.\n     * @param <T_SPLITR> the type of primitive Spliterator.  The type must be\n     * a primitive specialization of Spliterator for {@code T}, such as\n     * {@link Spliterator.OfInt} for {@code Integer}.\n     *\n     * @see Spliterator.OfInt\n     * @see Spliterator.OfLong\n     * @see Spliterator.OfDouble\n     * @since 1.8\n     ",
  "links" : [ "java.util.function.Consumer", "Spliterator.OfInt", "java.util.function.IntConsumer" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " T_SPLITR trySplit()",
    "returnType" : "T_SPLITR",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean tryAdvance(T_CONS action)",
    "returnType" : "boolean",
    "comment" : "\n         * If a remaining element exists, performs the given action on it,\n         * returning {@code true}; else returns {@code false}.  If this\n         * Spliterator is {@link #ORDERED} the action is performed on the\n         * next element in encounter order.  Exceptions thrown by the\n         * action are relayed to the caller.\n         * <p>\n         * Subsequent behavior of a spliterator is unspecified if the action throws\n         * an exception.\n         *\n         * @param action The action\n         * @return {@code false} if no remaining elements existed\n         * upon entry to this method, else {@code true}.\n         * @throws NullPointerException if the specified action is null\n         ",
    "links" : [ "#ORDERED" ]
  }, {
    "name" : " void forEachRemaining(T_CONS action)",
    "returnType" : "void",
    "comment" : "\n         * Performs the given action for each remaining element, sequentially in\n         * the current thread, until all elements have been processed or the\n         * action throws an exception.  If this Spliterator is {@link #ORDERED},\n         * actions are performed in encounter order.  Exceptions thrown by the\n         * action are relayed to the caller.\n         * <p>\n         * Subsequent behavior of a spliterator is unspecified if the action throws\n         * an exception.\n         *\n         * @implSpec\n         * The default implementation repeatedly invokes {@link #tryAdvance}\n         * until it returns {@code false}.  It should be overridden whenever\n         * possible.\n         *\n         * @param action The action\n         * @throws NullPointerException if the specified action is null\n         ",
    "links" : [ "#tryAdvance", "#ORDERED" ]
  } ],
  "methodNames" : [ " T_SPLITR trySplit()", " boolean tryAdvance(T_CONS action)", " void forEachRemaining(T_CONS action)" ],
  "variableNames" : [ ]
}