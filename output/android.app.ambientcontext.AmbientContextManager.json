{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ambientcontext/AmbientContextManager.java",
  "packageName" : "android.app.ambientcontext",
  "className" : "AmbientContextManager",
  "comment" : "\n * Allows granted apps to register for event types defined in {@link AmbientContextEvent}.\n * After registration, the app receives a Consumer callback of the service status.\n * If it is {@link STATUS_SUCCESSFUL}, when the requested events are detected, the provided\n * {@link PendingIntent} callback will receive the list of detected {@link AmbientContextEvent}s.\n * If it is {@link STATUS_ACCESS_DENIED}, the app can call {@link #startConsentActivity}\n * to load the consent screen.\n *\n * @hide\n ",
  "links" : [ "#startConsentActivity", "STATUS_SUCCESSFUL", "android.app.ambientcontext.AmbientContextEvent", "STATUS_ACCESS_DENIED", "android.app.PendingIntent" ],
  "variables" : [ {
    "name" : "STATUS_RESPONSE_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * The bundle key for the service status query result, used in\n     * {@code RemoteCallback#sendResult}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AMBIENT_CONTEXT_EVENTS",
    "type" : "String",
    "comment" : "\n     * The key of an intent extra indicating a list of detected {@link AmbientContextEvent}s.\n     * The intent is sent to the app in the app's registered {@link PendingIntent}.\n     ",
    "links" : [ "android.app.ambientcontext.AmbientContextEvent", "android.app.PendingIntent" ]
  }, {
    "name" : "STATUS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * An unknown status.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates success.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates one or more of the\n     * requested events are not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_SERVICE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * The value of the status code that indicates service not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_MICROPHONE_DISABLED",
    "type" : "int",
    "comment" : "\n     * The value of the status code that microphone is disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ACCESS_DENIED",
    "type" : "int",
    "comment" : "\n     * The value of the status code that the app is not granted access.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAmbientContextManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static List<AmbientContextEvent> getEventsFromIntent(@NonNull Intent intent)",
    "returnType" : "List<AmbientContextEvent>",
    "comment" : "\n     * Allows clients to retrieve the list of {@link AmbientContextEvent}s from the intent.\n     *\n     * @param intent received from the PendingIntent callback\n     *\n     * @return the list of events, or an empty list if the intent doesn't have such events.\n     ",
    "links" : [ "android.app.ambientcontext.AmbientContextEvent" ]
  }, {
    "name" : "public void queryAmbientContextServiceStatus(@NonNull @AmbientContextEvent.EventCode Set<Integer> eventTypes, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Queries the {@link AmbientContextEvent} service status for the calling package, and\n     * sends the result to the {@link Consumer} right after the call. This is used by foreground\n     * apps to check whether the requested events are enabled for detection on the device.\n     * If all events are enabled for detection, the response has\n     * {@link AmbientContextManager#STATUS_SUCCESS}.\n     * If any of the events are not consented by user, the response has\n     * {@link AmbientContextManager#STATUS_ACCESS_DENIED}, and the app can\n     * call {@link #startConsentActivity} to redirect the user to the consent screen.\n     * If the AmbientContextRequest contains a mixed set of events containing values both greater\n     * than and less than {@link AmbientContextEvent.EVENT_VENDOR_WEARABLE_START}, the request\n     * will be rejected with {@link AmbientContextManager#STATUS_NOT_SUPPORTED}.\n     * <p />\n     *\n     * Example:\n     *\n     * <pre><code>\n     *   Set<Integer> eventTypes = new HashSet<>();\n     *   eventTypes.add(AmbientContextEvent.EVENT_COUGH);\n     *   eventTypes.add(AmbientContextEvent.EVENT_SNORE);\n     *\n     *   // Create Consumer\n     *   Consumer<Integer> statusConsumer = status -> {\n     *     int status = status.getStatusCode();\n     *     if (status == AmbientContextManager.STATUS_SUCCESS) {\n     *       // Show user it's enabled\n     *     } else if (status == AmbientContextManager.STATUS_ACCESS_DENIED) {\n     *       // Send user to grant access\n     *       startConsentActivity(eventTypes);\n     *     }\n     *   };\n     *\n     *   // Query status\n     *   AmbientContextManager ambientContextManager =\n     *       context.getSystemService(AmbientContextManager.class);\n     *   ambientContextManager.queryAmbientContextStatus(eventTypes, executor, statusConsumer);\n     * </code></pre>\n     *\n     * @param eventTypes The set of event codes to check status on.\n     * @param executor Executor on which to run the consumer callback.\n     * @param consumer The consumer that handles the status code.\n     ",
    "links" : [ "java.util.function.Consumer", "#startConsentActivity", "android.app.ambientcontext.AmbientContextManager#STATUS_ACCESS_DENIED", "android.app.ambientcontext.AmbientContextEvent", "android.app.ambientcontext.AmbientContextManager#STATUS_SUCCESS", "AmbientContextEvent.EVENT_VENDOR_WEARABLE_START", "android.app.ambientcontext.AmbientContextManager#STATUS_NOT_SUPPORTED" ]
  }, {
    "name" : "public void startConsentActivity(@NonNull @AmbientContextEvent.EventCode Set<Integer> eventTypes)",
    "returnType" : "void",
    "comment" : "\n     * Requests the consent data host to open an activity that allows users to modify consent.\n     * If the eventTypes contains a mixed set of events containing values both greater than and less\n     * than {@link AmbientContextEvent.EVENT_VENDOR_WEARABLE_START}, the request will be rejected\n     * with {@link AmbientContextManager#STATUS_NOT_SUPPORTED}.\n     *\n     * @param eventTypes The set of event codes to be consented.\n     ",
    "links" : [ "AmbientContextEvent.EVENT_VENDOR_WEARABLE_START", "android.app.ambientcontext.AmbientContextManager#STATUS_NOT_SUPPORTED" ]
  }, {
    "name" : "private static int[] integerSetToIntArray(@NonNull Set<Integer> integerSet)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerObserver(@NonNull AmbientContextEventRequest request, @NonNull PendingIntent resultPendingIntent, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Allows app to register as a {@link AmbientContextEvent} observer. The\n     * observer receives a callback on the provided {@link PendingIntent} when the requested\n     * event is detected. Registering another observer from the same package that has already been\n     * registered will override the previous observer.\n     * If the AmbientContextRequest contains a mixed set of events containing values both greater\n     * than and less than {@link AmbientContextEvent.EVENT_VENDOR_WEARABLE_START}, the request\n     * will be rejected with {@link AmbientContextManager#STATUS_NOT_SUPPORTED}.\n     * <p />\n     *\n     * Example:\n     *\n     * <pre><code>\n     *   // Create request\n     *   AmbientContextEventRequest request = new AmbientContextEventRequest.Builder()\n     *       .addEventType(AmbientContextEvent.EVENT_COUGH)\n     *       .addEventType(AmbientContextEvent.EVENT_SNORE)\n     *       .build();\n     *\n     *   // Create PendingIntent for delivering detection results to my receiver\n     *   Intent intent = new Intent(actionString, null, context, MyBroadcastReceiver.class)\n     *       .addFlags(Intent.FLAG_RECEIVER_FOREGROUND);\n     *   PendingIntent pendingIntent =\n     *       PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n     *\n     *   // Create Consumer of service status\n     *   Consumer<Integer> statusConsumer = status -> {\n     *       if (status == AmbientContextManager.STATUS_ACCESS_DENIED) {\n     *         // User did not consent event detection. See #queryAmbientContextServiceStatus and\n     *         // #startConsentActivity\n     *       }\n     *   };\n     *\n     *   // Register as observer\n     *   AmbientContextManager ambientContextManager =\n     *       context.getSystemService(AmbientContextManager.class);\n     *   ambientContextManager.registerObserver(request, pendingIntent, executor, statusConsumer);\n     *\n     *   // Handle the list of {@link AmbientContextEvent}s in your receiver\n     *   {@literal @}Override\n     *   protected void onReceive(Context context, Intent intent) {\n     *     List<AmbientContextEvent> events = AmbientContextManager.getEventsFromIntent(intent);\n     *     if (!events.isEmpty()) {\n     *       // Do something useful with the events.\n     *     }\n     *   }\n     * </code></pre>\n     *\n     * @param request The request with events to observe.\n     * @param resultPendingIntent A mutable {@link PendingIntent} that will be dispatched after the\n     *                            requested events are detected.\n     * @param executor Executor on which to run the consumer callback.\n     * @param statusConsumer A consumer that handles the status code, which is returned\n     *                      right after the call.\n     ",
    "links" : [ "android.app.ambientcontext.AmbientContextEvent", "android.app.PendingIntent", "AmbientContextEvent.EVENT_VENDOR_WEARABLE_START", "android.app.ambientcontext.AmbientContextManager#STATUS_NOT_SUPPORTED" ]
  }, {
    "name" : "public void registerObserver(@NonNull AmbientContextEventRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull AmbientContextCallback ambientContextCallback)",
    "returnType" : "void",
    "comment" : "\n     * Allows app to register as a {@link AmbientContextEvent} observer. Same as {@link\n     * #registerObserver(AmbientContextEventRequest, PendingIntent, Executor, Consumer)},\n     * but use {@link AmbientContextCallback} instead of {@link PendingIntent} as a callback on\n     * detected events.\n     * Registering another observer from the same package that has already been\n     * registered will override the previous observer. If the same app previously calls\n     * {@link #registerObserver(AmbientContextEventRequest, AmbientContextCallback, Executor)},\n     * and now calls\n     * {@link #registerObserver(AmbientContextEventRequest, PendingIntent, Executor, Consumer)},\n     * the previous observer will be replaced with the new observer with the PendingIntent callback.\n     * Or vice versa.\n     * If the AmbientContextRequest contains a mixed set of events containing values both greater\n     * than and less than {@link AmbientContextEvent.EVENT_VENDOR_WEARABLE_START}, the request\n     * will be rejected with {@link AmbientContextManager#STATUS_NOT_SUPPORTED}.\n     *\n     * When the registration completes, a status will be returned to client through\n     * {@link AmbientContextCallback#onRegistrationComplete(int)}.\n     * If the AmbientContextManager service is not enabled yet, or the underlying detection service\n     * is not running yet, {@link AmbientContextManager#STATUS_SERVICE_UNAVAILABLE} will be\n     * returned, and the detection won't be really started.\n     * If the underlying detection service feature is not enabled, or the requested event type is\n     * not enabled yet, {@link AmbientContextManager#STATUS_NOT_SUPPORTED} will be returned, and the\n     * detection won't be really started.\n     * If there is no user consent,  {@link AmbientContextManager#STATUS_ACCESS_DENIED} will be\n     * returned, and the detection won't be really started.\n     * Otherwise, it will try to start the detection. And if it starts successfully, it will return\n     * {@link AmbientContextManager#STATUS_SUCCESS}. If it fails to start the detection, then\n     * it will return {@link AmbientContextManager#STATUS_SERVICE_UNAVAILABLE}\n     * After registerObserver succeeds and when the service detects an event, the service will\n     * trigger {@link AmbientContextCallback#onEvents(List)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.ambientcontext.AmbientContextManager#STATUS_ACCESS_DENIED", "android.app.ambientcontext.AmbientContextEvent", "android.app.ambientcontext.AmbientContextCallback", "android.app.ambientcontext.AmbientContextManager#STATUS_SERVICE_UNAVAILABLE", "#registerObserver(AmbientContextEventRequest", "android.app.ambientcontext.AmbientContextManager#STATUS_SUCCESS", "android.app.ambientcontext.AmbientContextCallback#onEvents(List)", "android.app.PendingIntent", "AmbientContextEvent.EVENT_VENDOR_WEARABLE_START", "android.app.ambientcontext.AmbientContextManager#STATUS_NOT_SUPPORTED", "android.app.ambientcontext.AmbientContextCallback#onRegistrationComplete(int)" ]
  }, {
    "name" : "public void unregisterObserver()",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the requesting app as an {@code AmbientContextEvent} observer. Unregistering an\n     * observer that was already unregistered or never registered will have no effect.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static List<AmbientContextEvent> getEventsFromIntent(@NonNull Intent intent)", "public void queryAmbientContextServiceStatus(@NonNull @AmbientContextEvent.EventCode Set<Integer> eventTypes, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> consumer)", "public void startConsentActivity(@NonNull @AmbientContextEvent.EventCode Set<Integer> eventTypes)", "private static int[] integerSetToIntArray(@NonNull Set<Integer> integerSet)", "public void registerObserver(@NonNull AmbientContextEventRequest request, @NonNull PendingIntent resultPendingIntent, @NonNull @CallbackExecutor Executor executor, @NonNull @StatusCode Consumer<Integer> statusConsumer)", "public void registerObserver(@NonNull AmbientContextEventRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull AmbientContextCallback ambientContextCallback)", "public void unregisterObserver()" ],
  "variableNames" : [ "STATUS_RESPONSE_BUNDLE_KEY", "EXTRA_AMBIENT_CONTEXT_EVENTS", "STATUS_UNKNOWN", "STATUS_SUCCESS", "STATUS_NOT_SUPPORTED", "STATUS_SERVICE_UNAVAILABLE", "STATUS_MICROPHONE_DISABLED", "STATUS_ACCESS_DENIED", "mContext", "mService" ]
}