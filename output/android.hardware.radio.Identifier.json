{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/radio/ProgramSelector.java",
  "packageName" : "android.hardware.radio",
  "className" : "Identifier",
  "comment" : "\n     * A single program identifier component, eg. frequency or channel ID.\n     *\n     * The long value field holds the value in format described in comments for\n     * IdentifierType constants.\n     ",
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValue",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Identifier>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n         * Type of an identifier.\n         *\n         * @return type of an identifier.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCategoryType()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this Identifier's type is considered a category when filtering\n         * ProgramLists for category entries.\n         *\n         * @see {@link ProgramList.Filter#areCategoriesIncluded()}\n         * @return False if this identifier's type is not tuneable (e.g. DAB ensemble or\n         *         vendor-specified type). True otherwise.\n         ",
    "links" : [ "ProgramList.Filter#areCategoriesIncluded()" ]
  }, {
    "name" : "public long getValue()",
    "returnType" : "long",
    "comment" : "\n         * Value of an identifier.\n         *\n         * Its meaning depends on identifier type, ie. for IDENTIFIER_TYPE_AMFM_FREQUENCY type,\n         * the value is a frequency in kHz.\n         *\n         * The range of a value depends on its type; it does not always require the whole long\n         * range. Casting to necessary type (ie. int) without range checking is correct in front-end\n         * code - any range violations are either errors in the framework or in the\n         * HAL implementation. For example, IDENTIFIER_TYPE_AMFM_FREQUENCY always fits in int,\n         * as Integer.MAX_VALUE would mean 2.1THz.\n         *\n         * @return value of an identifier.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mType", "mValue", "CREATOR" ],
  "methodNames" : [ "public int getType()", "public boolean isCategoryType()", "public long getValue()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}