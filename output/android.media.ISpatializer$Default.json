{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ISpatializer.java",
  "packageName" : "android.media",
  "className" : "Default",
  "comment" : " Default implementation for ISpatializer. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void release() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Releases a ISpatializer interface previously acquired. ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSupportedLevels() throws android.os.RemoteException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reports the list of supported spatialization levels.\n     * The list should never be empty if an ISpatializer interface was successfully\n     * retrieved with IAudioPolicyService.getSpatializer().\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLevel(byte level) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Selects the desired spatialization level. Selecting a level\n     * different from Spatializer.Level.NONE with create the specialized multichannel output\n     * mixer, create and enable the spatializer effect and let the audio policy attach eligible\n     * AudioTrack to this output stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getLevel() throws android.os.RemoteException",
    "returnType" : "byte",
    "comment" : " Gets the selected spatialization level. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHeadTrackingSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Reports if the spatializer engine supports head tracking or not.\n     * This is a pre condition independent of the fact that a head tracking sensor is\n     * registered or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSupportedHeadTrackingModes() throws android.os.RemoteException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reports the list of supported head tracking modes.\n     * The list always contains SpatializerHeadTrackingMode.DISABLED and can include other modes\n     * if the spatializer effect implementation supports head tracking.\n     * The result does not depend on currently connected sensors but reflects the capabilities\n     * when sensors are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDesiredHeadTrackingMode(byte mode) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Selects the desired head tracking mode. ",
    "links" : [ ]
  }, {
    "name" : "public byte getActualHeadTrackingMode() throws android.os.RemoteException",
    "returnType" : "byte",
    "comment" : "\n     * Gets the actual head tracking mode. Can be different from the desired mode if conditions to\n     * enable the desired mode are not met (e.g if the head tracking device was removed)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recenterHeadTracker() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Reset the head tracking algorithm to consider current head pose as neutral ",
    "links" : [ ]
  }, {
    "name" : "public void setGlobalTransform(float[] screenToStage) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Set the screen to stage transform to use by the head tracking algorithm\n     * The screen to stage transform is conveyed as a vector of 6 elements,\n     * where the first three are a translation vector and\n     * the last three are a rotation vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHeadSensor(int sensorHandle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Set the sensor that is to be used for head-tracking.\n     * -1 can be used to disable head-tracking.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScreenSensor(int sensorHandle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Set the sensor that is to be used for screen-tracking.\n     * -1 can be used to disable screen-tracking.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayOrientation(float physicalToLogicalAngle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Sets the display orientation.\n     * \n     * This is the rotation of the displayed content relative to its natural orientation.\n     * \n     * Orientation is expressed in the angle of rotation from the physical \"up\" side of the screen\n     * to the logical \"up\" side of the content displayed the screen. Counterclockwise angles, as\n     * viewed while facing the screen are positive.\n     * \n     * Note: DisplayManager currently only returns this in increments of 90 degrees,\n     * so the values will be 0, PI/2, PI, 3PI/2.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHingeAngle(float hingeAngle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Sets the hinge angle for foldable devices.\n     * \n     * Per the hinge angle sensor, this returns a value from 0 to 2PI.\n     * The value of 0 is considered closed, and PI is considered flat open.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFoldState(boolean folded) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Sets whether a foldable is considered \"folded\" or not.\n     * \n     * The fold state may affect which physical screen is active for display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSupportedModes() throws android.os.RemoteException",
    "returnType" : "byte[]",
    "comment" : "\n     * Reports the list of supported spatialization modess.\n     * The list should never be empty if an ISpatializer interface was successfully\n     * retrieved with IAudioPolicyService.getSpatializer().\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerHeadTrackingCallback(android.media.ISpatializerHeadTrackingCallback callback) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to monitor head tracking functions.\n     * Only one callback can be registered on a Spatializer.\n     * The last callback registered wins and passing a nullptr unregisters\n     * last registered callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameter(int key, byte[] value) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Sets a parameter to the spatializer engine. Used by effect implementor for vendor\n     * specific configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getParameter(int key, byte[] value) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Gets a parameter from the spatializer engine. Used by effect implementor for vendor\n     * specific configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOutput() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " Gets the io handle of the output stream the spatializer is connected to. ",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void release() throws android.os.RemoteException", "public byte[] getSupportedLevels() throws android.os.RemoteException", "public void setLevel(byte level) throws android.os.RemoteException", "public byte getLevel() throws android.os.RemoteException", "public boolean isHeadTrackingSupported() throws android.os.RemoteException", "public byte[] getSupportedHeadTrackingModes() throws android.os.RemoteException", "public void setDesiredHeadTrackingMode(byte mode) throws android.os.RemoteException", "public byte getActualHeadTrackingMode() throws android.os.RemoteException", "public void recenterHeadTracker() throws android.os.RemoteException", "public void setGlobalTransform(float[] screenToStage) throws android.os.RemoteException", "public void setHeadSensor(int sensorHandle) throws android.os.RemoteException", "public void setScreenSensor(int sensorHandle) throws android.os.RemoteException", "public void setDisplayOrientation(float physicalToLogicalAngle) throws android.os.RemoteException", "public void setHingeAngle(float hingeAngle) throws android.os.RemoteException", "public void setFoldState(boolean folded) throws android.os.RemoteException", "public byte[] getSupportedModes() throws android.os.RemoteException", "public void registerHeadTrackingCallback(android.media.ISpatializerHeadTrackingCallback callback) throws android.os.RemoteException", "public void setParameter(int key, byte[] value) throws android.os.RemoteException", "public void getParameter(int key, byte[] value) throws android.os.RemoteException", "public int getOutput() throws android.os.RemoteException", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}