{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/FrameLayout.java",
  "packageName" : "android.widget",
  "className" : "FrameLayout",
  "comment" : "\n * FrameLayout is designed to block out an area on the screen to display\n * a single item. Generally, FrameLayout should be used to hold a single child view, because it can\n * be difficult to organize child views in a way that's scalable to different screen sizes without\n * the children overlapping each other. You can, however, add multiple children to a FrameLayout\n * and control their position within the FrameLayout by assigning gravity to each child, using the\n * <a href=\"FrameLayout.LayoutParams.html#attr_android:layout_gravity\">{@code\n * android:layout_gravity}</a> attribute.\n * <p>Child views are drawn in a stack, with the most recently added child on top.\n * The size of the FrameLayout is the size of its largest child (plus padding), visible\n * or not (if the FrameLayout's parent permits). Views that are {@link android.view.View#GONE} are\n * used for sizing\n * only if {@link #setMeasureAllChildren(boolean) setConsiderGoneChildrenWhenMeasuring()}\n * is set to true.\n *\n * @attr ref android.R.styleable#FrameLayout_measureAllChildren\n ",
  "variables" : [ {
    "name" : "DEFAULT_CHILD_GRAVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeasureAllChildren",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForegroundPaddingLeft",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForegroundPaddingTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForegroundPaddingRight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForegroundPaddingBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchParentChildren",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setForegroundGravity(int foregroundGravity)",
    "returnType" : "void",
    "comment" : "\n     * Describes how the foreground is positioned. Defaults to START and TOP.\n     *\n     * @param foregroundGravity See {@link android.view.Gravity}\n     *\n     * @see #getForegroundGravity()\n     *\n     * @attr ref android.R.styleable#View_foregroundGravity\n     ",
    "links" : [ "android.view.Gravity" ]
  }, {
    "name" : "protected LayoutParams generateDefaultLayoutParams()",
    "returnType" : "LayoutParams",
    "comment" : "\n     * Returns a set of layout parameters with a width of\n     * {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT},\n     * and a height of {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}.\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#MATCH_PARENT" ]
  }, {
    "name" : " int getPaddingLeftWithForeground()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getPaddingRightWithForeground()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getPaddingTopWithForeground()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getPaddingBottomWithForeground()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void layoutChildren(int left, int top, int right, int bottom, boolean forceLeftGravity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMeasureAllChildren(boolean measureAll)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to consider all children, or just those in\n     * the VISIBLE or INVISIBLE state, when measuring. Defaults to false.\n     *\n     * @param measureAll true to consider children marked GONE, false otherwise.\n     * Default value is false.\n     *\n     * @attr ref android.R.styleable#FrameLayout_measureAllChildren\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getConsiderGoneChildrenWhenMeasuring()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether all children, or just those in the VISIBLE or\n     * INVISIBLE state, are considered when measuring.\n     *\n     * @return Whether all children are considered when measuring.\n     *\n     * @deprecated This method is deprecated in favor of\n     * {@link #getMeasureAllChildren() getMeasureAllChildren()}, which was\n     * renamed for consistency with\n     * {@link #setMeasureAllChildren(boolean) setMeasureAllChildren()}.\n     ",
    "links" : [ "#getMeasureAllChildren", "#setMeasureAllChildren" ]
  }, {
    "name" : "public boolean getMeasureAllChildren()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether all children, or just those in the VISIBLE or\n     * INVISIBLE state, are considered when measuring.\n     *\n     * @return Whether all children are considered when measuring.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDelayChildPressedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp)",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_CHILD_GRAVITY", "mMeasureAllChildren", "mForegroundPaddingLeft", "mForegroundPaddingTop", "mForegroundPaddingRight", "mForegroundPaddingBottom", "mMatchParentChildren" ],
  "methodNames" : [ "public void setForegroundGravity(int foregroundGravity)", "protected LayoutParams generateDefaultLayoutParams()", " int getPaddingLeftWithForeground()", " int getPaddingRightWithForeground()", "private int getPaddingTopWithForeground()", "private int getPaddingBottomWithForeground()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", " void layoutChildren(int left, int top, int right, int bottom, boolean forceLeftGravity)", "public void setMeasureAllChildren(boolean measureAll)", "public boolean getConsiderGoneChildrenWhenMeasuring()", "public boolean getMeasureAllChildren()", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public boolean shouldDelayChildPressedState()", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp)", "public CharSequence getAccessibilityClassName()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)" ]
}