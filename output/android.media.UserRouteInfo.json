{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaRouter.java",
  "packageName" : "android.media",
  "className" : "UserRouteInfo",
  "comment" : "\n     * Information about a route that the application may define and modify.\n     * A user route defaults to {@link RouteInfo#PLAYBACK_TYPE_REMOTE} and\n     * {@link RouteInfo#PLAYBACK_VOLUME_FIXED}.\n     *\n     * @see MediaRouter.RouteInfo\n     ",
  "variables" : [ {
    "name" : "mRcc",
    "type" : "RemoteControlClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSvp",
    "type" : "SessionVolumeProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setName(CharSequence name)",
    "returnType" : "void",
    "comment" : "\n         * Set the user-visible name of this route.\n         * @param name Name to display to the user to describe this route\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setName(int resId)",
    "returnType" : "void",
    "comment" : "\n         * Set the user-visible name of this route.\n         * <p>\n         * The route name identifies the destination represented by the route.\n         * It may be a user-supplied name, an alias, or device serial number.\n         * </p>\n         *\n         * @param resId Resource ID of the name to display to the user to describe this route\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setDescription(CharSequence description)",
    "returnType" : "void",
    "comment" : "\n         * Set the user-visible description of this route.\n         * <p>\n         * The route description describes the kind of destination represented by the route.\n         * It may be a user-supplied string, a model number or brand of device.\n         * </p>\n         *\n         * @param description The description of the route, or null if none.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setStatus(CharSequence status)",
    "returnType" : "void",
    "comment" : "\n         * Set the current user-visible status for this route.\n         * @param status Status to display to the user to describe what the endpoint\n         * of this route is currently doing\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteControlClient(RemoteControlClient rcc)",
    "returnType" : "void",
    "comment" : "\n         * Set the RemoteControlClient responsible for reporting playback info for this\n         * user route.\n         *\n         * <p>If this route manages remote playback, the data exposed by this\n         * RemoteControlClient will be used to reflect and update information\n         * such as route volume info in related UIs.</p>\n         *\n         * <p>The RemoteControlClient must have been previously registered with\n         * {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}.</p>\n         *\n         * @param rcc RemoteControlClient associated with this route\n         ",
    "links" : [ "android.media.AudioManager#registerRemoteControlClient(RemoteControlClient)" ]
  }, {
    "name" : "public RemoteControlClient getRemoteControlClient()",
    "returnType" : "RemoteControlClient",
    "comment" : "\n         * Retrieve the RemoteControlClient associated with this route, if one has been set.\n         *\n         * @return the RemoteControlClient associated with this route\n         * @see #setRemoteControlClient(RemoteControlClient)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setIconDrawable(Drawable icon)",
    "returnType" : "void",
    "comment" : "\n         * Set an icon that will be used to represent this route.\n         * The system may use this icon in picker UIs or similar.\n         *\n         * @param icon icon drawable to use to represent this route\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setIconResource(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n         * Set an icon that will be used to represent this route.\n         * The system may use this icon in picker UIs or similar.\n         *\n         * @param resId Resource ID of an icon drawable to use to represent this route\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setVolumeCallback(VolumeCallback vcb)",
    "returnType" : "void",
    "comment" : "\n         * Set a callback to be notified of volume update requests\n         * @param vcb\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPlaybackType(@RouteInfo.PlaybackType int type)",
    "returnType" : "void",
    "comment" : "\n         * Defines whether playback associated with this route is \"local\"\n         *    ({@link RouteInfo#PLAYBACK_TYPE_LOCAL}) or \"remote\"\n         *    ({@link RouteInfo#PLAYBACK_TYPE_REMOTE}).\n         * @param type\n         ",
    "links" : [ "#PLAYBACK_TYPE_REMOTE", "#PLAYBACK_TYPE_LOCAL" ]
  }, {
    "name" : "public void setVolumeHandling(@RouteInfo.PlaybackVolume int volumeHandling)",
    "returnType" : "void",
    "comment" : "\n         * Defines whether volume for the playback associated with this route is fixed\n         * ({@link RouteInfo#PLAYBACK_VOLUME_FIXED}) or can modified\n         * ({@link RouteInfo#PLAYBACK_VOLUME_VARIABLE}).\n         * @param volumeHandling\n         ",
    "links" : [ "#PLAYBACK_VOLUME_VARIABLE", "#PLAYBACK_VOLUME_FIXED" ]
  }, {
    "name" : "public void setVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n         * Defines at what volume the playback associated with this route is performed (for user\n         * feedback purposes). This information is only used when the playback is not local.\n         * @param volume\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestSetVolume(int volume)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestUpdateVolume(int direction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVolumeMax(int volumeMax)",
    "returnType" : "void",
    "comment" : "\n         * Defines the maximum volume at which the playback associated with this route is performed\n         * (for user feedback purposes). This information is only used when the playback is not\n         * local.\n         * @param volumeMax\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPlaybackStream(int stream)",
    "returnType" : "void",
    "comment" : "\n         * Defines over what stream type the media is presented.\n         * @param stream\n         ",
    "links" : [ ]
  }, {
    "name" : "private void updatePlaybackInfoOnRcc()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureSessionVolume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRcc", "mSvp" ],
  "methodNames" : [ "public void setName(CharSequence name)", "public void setName(int resId)", "public void setDescription(CharSequence description)", "public void setStatus(CharSequence status)", "public void setRemoteControlClient(RemoteControlClient rcc)", "public RemoteControlClient getRemoteControlClient()", "public void setIconDrawable(Drawable icon)", "public void setIconResource(@DrawableRes int resId)", "public void setVolumeCallback(VolumeCallback vcb)", "public void setPlaybackType(@RouteInfo.PlaybackType int type)", "public void setVolumeHandling(@RouteInfo.PlaybackVolume int volumeHandling)", "public void setVolume(int volume)", "public void requestSetVolume(int volume)", "public void requestUpdateVolume(int direction)", "public void setVolumeMax(int volumeMax)", "public void setPlaybackStream(int stream)", "private void updatePlaybackInfoOnRcc()", "private void configureSessionVolume()" ]
}