{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/TypeNotPresentException.java",
  "packageName" : "java.lang",
  "className" : "TypeNotPresentException",
  "comment" : "\n * Thrown when an application tries to access a type using a string\n * representing the type's name, but no definition for the type with\n * the specified name can be found.   This exception differs from\n * {@link ClassNotFoundException} in that {@code ClassNotFoundException} is a\n * checked exception, whereas this exception is unchecked.\n *\n * <p>Note that this exception may be used when undefined type variables\n * are accessed as well as when types (e.g., classes, interfaces or\n * annotation types) are loaded.\n * In particular, this exception can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since 1.5\n ",
  "links" : [ "java.lang.ClassNotFoundException" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "typeName",
    "type" : "String",
    "comment" : "\n     * The type name.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String typeName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the fully qualified name of the unavailable type.\n     *\n     * @return the fully qualified name of the unavailable type\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String typeName()" ],
  "variableNames" : [ "serialVersionUID", "typeName" ]
}