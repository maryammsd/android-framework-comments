{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/VirtualDeviceParams.java",
  "packageName" : "android.companion.virtual",
  "className" : "VirtualDeviceParams",
  "comment" : "\n * Params that can be configured when creating virtual devices.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOCK_STATE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Indicates that the lock state of the virtual device will be the same as the default physical\n     * display.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCK_STATE_ALWAYS_UNLOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that the lock state of the virtual device should be always unlocked.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_POLICY_DEFAULT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Indicates that activities are allowed by default on this virtual device, unless they are\n     * explicitly blocked by {@link Builder#setBlockedActivities}.\n     *\n     * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and {@link #DEVICE_POLICY_DEFAULT}\n     ",
    "links" : [ "#setBlockedActivities", "#POLICY_TYPE_ACTIVITY", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "ACTIVITY_POLICY_DEFAULT_BLOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that activities are blocked by default on this virtual device, unless they are\n     * allowed by {@link Builder#setAllowedActivities}.\n     *\n     * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and {@link #DEVICE_POLICY_CUSTOM}\n     ",
    "links" : [ "#setAllowedActivities", "#DEVICE_POLICY_CUSTOM", "#POLICY_TYPE_ACTIVITY" ]
  }, {
    "name" : "NAVIGATION_POLICY_DEFAULT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Indicates that tasks are allowed to navigate to other tasks on this virtual device,\n     * unless they are explicitly blocked by {@link Builder#setBlockedCrossTaskNavigations}.\n     *\n     * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and {@link #DEVICE_POLICY_DEFAULT}\n     ",
    "links" : [ "#POLICY_TYPE_ACTIVITY", "#setBlockedCrossTaskNavigations", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "NAVIGATION_POLICY_DEFAULT_BLOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that tasks are blocked from navigating to other tasks by default on this virtual\n     * device, unless allowed by {@link Builder#setAllowedCrossTaskNavigations}.\n     *\n     * @deprecated Use {@link #POLICY_TYPE_ACTIVITY} and {@link #DEVICE_POLICY_CUSTOM}\n     ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#POLICY_TYPE_ACTIVITY", "#setAllowedCrossTaskNavigations" ]
  }, {
    "name" : "DEVICE_POLICY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Indicates that there is no special logic for this virtual device and it should be treated\n     * the same way as the default device, keeping the default behavior unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_POLICY_CUSTOM",
    "type" : "int",
    "comment" : "\n     * Indicates that there is custom logic, specific to this virtual device, which should be\n     * triggered instead of the default behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_TYPE_SENSORS",
    "type" : "int",
    "comment" : "\n     * Tells the sensor framework how to handle sensor requests from contexts associated with this\n     * virtual device, namely the sensors returned by\n     * {@link android.hardware.SensorManager#getSensorList}:\n     *\n     * <ul>\n     *     <li>{@link #DEVICE_POLICY_DEFAULT}: Return the sensors of the default device.\n     *     <li>{@link #DEVICE_POLICY_CUSTOM}: Return the sensors of the virtual device. Note that if\n     *     the virtual device did not create any virtual sensors, then an empty list is returned.\n     * </ul>\n     ",
    "links" : [ "android.hardware.SensorManager#getSensorList", "#DEVICE_POLICY_CUSTOM", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "POLICY_TYPE_AUDIO",
    "type" : "int",
    "comment" : "\n     * Tells the audio framework whether to configure the players ({@link android.media.AudioTrack},\n     * {@link android.media.MediaPlayer}, {@link android.media.SoundPool} and recorders\n     * {@link android.media.AudioRecord}) to use specific session ids re-routed to\n     * VirtualAudioDevice.\n     *\n     * <ul>\n     *     <li>{@link #DEVICE_POLICY_DEFAULT}: fall back to default session id handling.\n     *     <li>{@link #DEVICE_POLICY_CUSTOM}: audio framework will assign device specific session\n     *     ids to players and recorders constructed within device context. The session ids are\n     *     used to re-route corresponding audio streams to VirtualAudioDevice.\n     * </ul>\n     ",
    "links" : [ "android.media.SoundPool", "#DEVICE_POLICY_CUSTOM", "android.media.MediaPlayer", "android.media.AudioRecord", "android.media.AudioTrack", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "POLICY_TYPE_RECENTS",
    "type" : "int",
    "comment" : "\n     * Tells the activity manager how to handle recents entries for activities run on this device.\n     *\n     * <ul>\n     *     <li>{@link #DEVICE_POLICY_DEFAULT}: Activities launched on VirtualDisplays owned by this\n     *     device will appear in the host device recents.\n     *     <li>{@link #DEVICE_POLICY_CUSTOM}: Activities launched on VirtualDisplays owned by this\n     *     device will not appear in recents.\n     * </ul>\n     ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "POLICY_TYPE_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Tells the activity manager what the default launch behavior for activities on this device is.\n     *\n     * <ul>\n     *     <li>{@link #DEVICE_POLICY_DEFAULT}: Activities are allowed to be launched on displays\n     *     owned by this device, unless explicitly blocked by the device.\n     *     <li>{@link #DEVICE_POLICY_CUSTOM}: Activities are blocked from launching on displays\n     *     owned by this device, unless explicitly allowed by the device.\n     * </ul>\n     *\n     * @see VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption\n     * @see VirtualDeviceManager.VirtualDevice#removeActivityPolicyExemption\n     ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "POLICY_TYPE_CLIPBOARD",
    "type" : "int",
    "comment" : "\n     * Tells the clipboard manager whether this device's clipboard should be shared or not.\n     *\n     * <ul>\n     *     <li>{@link #DEVICE_POLICY_DEFAULT}: By default the device's clipboard is its own and is\n     *     not shared with other devices' clipboards, including the clipboard of the default device.\n     *     <li>{@link #DEVICE_POLICY_CUSTOM}: The device's clipboard is shared with the default\n     *     device's clipboard. Any clipboard operation on the virtual device is as if it was done on\n     *     the default device.\n     * </ul>\n     ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "POLICY_TYPE_CAMERA",
    "type" : "int",
    "comment" : "\n     * Tells the camera framework how to handle camera requests for the front and back cameras from\n     * contexts associated with this virtual device.\n     *\n     * <ul>\n     *     <li>{@link #DEVICE_POLICY_DEFAULT}: Returns the front and back cameras of the default\n     *     device.\n     *     <li>{@link #DEVICE_POLICY_CUSTOM}: Returns the front and back cameras cameras of the\n     *     virtual device. Note that if the virtual device did not create any virtual cameras,\n     *     then no front and back cameras will be available.\n     * </ul>\n     *\n     * @see Context#getDeviceId\n     ",
    "links" : [ "#DEVICE_POLICY_CUSTOM", "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "mLockState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsersWithMatchingAccounts",
    "type" : "ArraySet<UserHandle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNavigationPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCrossTaskNavigationExemptions",
    "type" : "ArraySet<ComponentName>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultActivityPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityPolicyExemptions",
    "type" : "ArraySet<ComponentName>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevicePolicies",
    "type" : "SparseIntArray",
    "comment" : " Mapping of @PolicyType to @DevicePolicy",
    "links" : [ ]
  }, {
    "name" : "mHomeComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputMethodComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorConfigs",
    "type" : "List<VirtualSensorConfig>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualSensorCallback",
    "type" : "IVirtualSensorCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioPlaybackSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioRecordingSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VirtualDeviceParams>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLockState()",
    "returnType" : "int",
    "comment" : "\n     * Returns the lock state of the virtual device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getHomeComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the custom component used as home on all displays owned by this virtual device that\n     * support home activities.\n     *\n     * @see Builder#setHomeComponent\n     * @see VirtualDisplayConfig#isHomeSupported()\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getInputMethodComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the custom component used as input method on all displays owned by this virtual\n     * device.\n     *\n     * @see Builder#setInputMethodComponent\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<UserHandle> getUsersWithMatchingAccounts()",
    "returnType" : "Set<UserHandle>",
    "comment" : "\n     * Returns the user handles with matching managed accounts on the remote device to which\n     * this virtual device is streaming.\n     *\n     * @see android.app.admin.DevicePolicyManager#NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<ComponentName> getAllowedCrossTaskNavigations()",
    "returnType" : "Set<ComponentName>",
    "comment" : "\n     * Returns the set of tasks that are allowed to navigate from current task,\n     * or empty set if all tasks are allowed, except the ones explicitly blocked.\n     * If neither allowed or blocked tasks are provided, all task navigations will\n     * be be allowed by default.\n     *\n     * @see Builder#setAllowedCrossTaskNavigations(Set)\n     *\n     * @deprecated See {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n     ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption" ]
  }, {
    "name" : "public Set<ComponentName> getBlockedCrossTaskNavigations()",
    "returnType" : "Set<ComponentName>",
    "comment" : "\n     * Returns the set of tasks that are blocked from navigating from the current task,\n     * or empty set to indicate that all tasks in {@link #getAllowedCrossTaskNavigations}\n     * are allowed. If neither allowed or blocked tasks are provided, all task navigations\n     * will be be allowed by default.\n     *\n     * @see Builder#setBlockedCrossTaskNavigations(Set)\n     *\n     * @deprecated See {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n     ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption", "#getAllowedCrossTaskNavigations" ]
  }, {
    "name" : "public int getDefaultNavigationPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Returns {@link #NAVIGATION_POLICY_DEFAULT_ALLOWED} if tasks are allowed to navigate on\n     * this virtual device by default, or {@link #NAVIGATION_POLICY_DEFAULT_BLOCKED} if tasks\n     * must be allowed by {@link Builder#setAllowedCrossTaskNavigations} to navigate here.\n     *\n     * @see Builder#setAllowedCrossTaskNavigations\n     * @see Builder#setBlockedCrossTaskNavigations\n     *\n     * @deprecated Use {@link #getDevicePolicy} with {@link #POLICY_TYPE_ACTIVITY}\n     ",
    "links" : [ "#getDevicePolicy", "#NAVIGATION_POLICY_DEFAULT_BLOCKED", "#POLICY_TYPE_ACTIVITY", "#NAVIGATION_POLICY_DEFAULT_ALLOWED", "#setAllowedCrossTaskNavigations" ]
  }, {
    "name" : "public Set<ComponentName> getAllowedActivities()",
    "returnType" : "Set<ComponentName>",
    "comment" : "\n     * Returns the set of activities allowed to be streamed, or empty set if all activities are\n     * allowed, except the ones explicitly blocked.\n     *\n     * @see Builder#setAllowedActivities(Set)\n     *\n     * @deprecated See {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n     ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption" ]
  }, {
    "name" : "public Set<ComponentName> getBlockedActivities()",
    "returnType" : "Set<ComponentName>",
    "comment" : "\n     * Returns the set of activities that are blocked from streaming, or empty set to indicate\n     * that all activities in {@link #getAllowedActivities} are allowed.\n     *\n     * @see Builder#setBlockedActivities(Set)\n     *\n     * @deprecated See {@link VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption}\n     ",
    "links" : [ "VirtualDeviceManager.VirtualDevice#addActivityPolicyExemption", "#getAllowedActivities" ]
  }, {
    "name" : "public int getDefaultActivityPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Returns {@link #ACTIVITY_POLICY_DEFAULT_ALLOWED} if activities are allowed to launch on this\n     * virtual device by default, or {@link #ACTIVITY_POLICY_DEFAULT_BLOCKED} if activities must be\n     * allowed by {@link Builder#setAllowedActivities} to launch here.\n     *\n     * @see Builder#setBlockedActivities\n     * @see Builder#setAllowedActivities\n     *\n     * @deprecated Use {@link #getDevicePolicy} with {@link #POLICY_TYPE_ACTIVITY}\n     ",
    "links" : [ "#setAllowedActivities", "#getDevicePolicy", "#POLICY_TYPE_ACTIVITY", "#ACTIVITY_POLICY_DEFAULT_ALLOWED", "#ACTIVITY_POLICY_DEFAULT_BLOCKED" ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the (optional) name of the virtual device.\n     *\n     * @see Builder#setName\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDevicePolicy(@PolicyType int policyType)",
    "returnType" : "int",
    "comment" : "\n     * Returns the policy specified for this policy type, or {@link #DEVICE_POLICY_DEFAULT} if no\n     * policy for this type has been explicitly specified.\n     *\n     * @see Builder#setDevicePolicy\n     ",
    "links" : [ "#DEVICE_POLICY_DEFAULT" ]
  }, {
    "name" : "public SparseIntArray getDevicePolicies()",
    "returnType" : "SparseIntArray",
    "comment" : "\n     * Returns all device policies.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<VirtualSensorConfig> getVirtualSensorConfigs()",
    "returnType" : "List<VirtualSensorConfig>",
    "comment" : "\n     * Returns the configurations for all sensors that should be created for this device.\n     *\n     * @see Builder#addVirtualSensorConfig\n     ",
    "links" : [ ]
  }, {
    "name" : "public IVirtualSensorCallback getVirtualSensorCallback()",
    "returnType" : "IVirtualSensorCallback",
    "comment" : "\n     * Returns the callback to get notified about changes in the sensor listeners or sensor direct\n     * channel configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioPlaybackSessionId()",
    "returnType" : "int",
    "comment" : "\n     * Returns device-specific audio session id for playback.\n     *\n     * @see Builder#setAudioPlaybackSessionId(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioRecordingSessionId()",
    "returnType" : "int",
    "comment" : "\n     * Returns device-specific audio session id for recording.\n     *\n     * @see Builder#setAudioRecordingSessionId(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Dumps debugging information about the VirtualDeviceParams\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLockState()", "public ComponentName getHomeComponent()", "public ComponentName getInputMethodComponent()", "public Set<UserHandle> getUsersWithMatchingAccounts()", "public Set<ComponentName> getAllowedCrossTaskNavigations()", "public Set<ComponentName> getBlockedCrossTaskNavigations()", "public int getDefaultNavigationPolicy()", "public Set<ComponentName> getAllowedActivities()", "public Set<ComponentName> getBlockedActivities()", "public int getDefaultActivityPolicy()", "public String getName()", "public int getDevicePolicy(@PolicyType int policyType)", "public SparseIntArray getDevicePolicies()", "public List<VirtualSensorConfig> getVirtualSensorConfigs()", "public IVirtualSensorCallback getVirtualSensorCallback()", "public int getAudioPlaybackSessionId()", "public int getAudioRecordingSessionId()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public void dump(PrintWriter pw, String prefix)" ],
  "variableNames" : [ "LOCK_STATE_DEFAULT", "LOCK_STATE_ALWAYS_UNLOCKED", "ACTIVITY_POLICY_DEFAULT_ALLOWED", "ACTIVITY_POLICY_DEFAULT_BLOCKED", "NAVIGATION_POLICY_DEFAULT_ALLOWED", "NAVIGATION_POLICY_DEFAULT_BLOCKED", "DEVICE_POLICY_DEFAULT", "DEVICE_POLICY_CUSTOM", "POLICY_TYPE_SENSORS", "POLICY_TYPE_AUDIO", "POLICY_TYPE_RECENTS", "POLICY_TYPE_ACTIVITY", "POLICY_TYPE_CLIPBOARD", "POLICY_TYPE_CAMERA", "mLockState", "mUsersWithMatchingAccounts", "mDefaultNavigationPolicy", "mCrossTaskNavigationExemptions", "mDefaultActivityPolicy", "mActivityPolicyExemptions", "mName", "mDevicePolicies", "mHomeComponent", "mInputMethodComponent", "mVirtualSensorConfigs", "mVirtualSensorCallback", "mAudioPlaybackSessionId", "mAudioRecordingSessionId", "CREATOR" ]
}