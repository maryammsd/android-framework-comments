{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/AbstractShortCircuitTask.java",
  "packageName" : "java.util.stream",
  "className" : "AbstractShortCircuitTask",
  "comment" : "\n * Abstract class for fork-join tasks used to implement short-circuiting\n * stream ops, which can produce a result without processing all elements of the\n * stream.\n *\n * @param <P_IN> type of input elements to the pipeline\n * @param <P_OUT> type of output elements from the pipeline\n * @param <R> type of intermediate result, may be different from operation\n *        result type\n * @param <K> type of child and sibling tasks\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sharedResult",
    "type" : "AtomicReference<R>",
    "comment" : "\n     * The result for this computation; this is shared among all tasks and set\n     * exactly once\n     ",
    "links" : [ ]
  }, {
    "name" : "canceled",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether this task has been canceled.  Tasks may cancel other\n     * tasks in the computation under various conditions, such as in a\n     * find-first operation, a task that finds a value will cancel all tasks\n     * that are later in the encounter order.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract R getEmptyResult()",
    "returnType" : "R",
    "comment" : "\n     * Returns the value indicating the computation completed with no task\n     * finding a short-circuitable result.  For example, for a \"find\" operation,\n     * this might be null or an empty {@code Optional}.\n     *\n     * @return the result to return when no task finds a result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void compute()",
    "returnType" : "void",
    "comment" : "\n     * Overrides AbstractTask version to include checks for early\n     * exits while splitting or computing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void shortCircuit(R result)",
    "returnType" : "void",
    "comment" : "\n     * Declares that a globally valid result has been found.  If another task has\n     * not already found the answer, the result is installed in\n     * {@code sharedResult}.  The {@code compute()} method will check\n     * {@code sharedResult} before proceeding with computation, so this causes\n     * the computation to terminate early.\n     *\n     * @param result the result found\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setLocalResult(R localResult)",
    "returnType" : "void",
    "comment" : "\n     * Sets a local result for this task.  If this task is the root, set the\n     * shared result instead (if not already set).\n     *\n     * @param localResult The result to set for this task\n     ",
    "links" : [ ]
  }, {
    "name" : "public R getRawResult()",
    "returnType" : "R",
    "comment" : "\n     * Retrieves the local result for this task\n     ",
    "links" : [ ]
  }, {
    "name" : "public R getLocalResult()",
    "returnType" : "R",
    "comment" : "\n     * Retrieves the local result for this task.  If this task is the root,\n     * retrieves the shared result instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Mark this task as canceled\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean taskCanceled()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether this task is canceled.  A task is considered canceled if\n     * it or any of its parents have been canceled.\n     *\n     * @return {@code true} if this task or any parent is canceled.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void cancelLaterNodes()",
    "returnType" : "void",
    "comment" : "\n     * Cancels all tasks which succeed this one in the encounter order.  This\n     * includes canceling all the current task's right sibling, as well as the\n     * later right siblings of all its parents.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract R getEmptyResult()", "public void compute()", "protected void shortCircuit(R result)", "protected void setLocalResult(R localResult)", "public R getRawResult()", "public R getLocalResult()", "protected void cancel()", "protected boolean taskCanceled()", "protected void cancelLaterNodes()" ],
  "variableNames" : [ "sharedResult", "canceled" ]
}