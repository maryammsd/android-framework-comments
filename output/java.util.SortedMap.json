{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/SortedMap.java",
  "packageName" : "java.util",
  "className" : "SortedMap",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Comparator<? super K> comparator()",
    "returnType" : "Comparator<? super K>",
    "comment" : "\n     * Returns the comparator used to order the keys in this map, or\n     * {@code null} if this map uses the {@linkplain Comparable\n     * natural ordering} of its keys.\n     *\n     * @return the comparator used to order the keys in this map,\n     *         or {@code null} if this map uses the natural ordering\n     *         of its keys\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedMap<K, V> subMap(K fromKey, K toKey)",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * Returns a view of the portion of this map whose keys range from\n     * {@code fromKey}, inclusive, to {@code toKey}, exclusive.  (If\n     * {@code fromKey} and {@code toKey} are equal, the returned map\n     * is empty.)  The returned map is backed by this map, so changes\n     * in the returned map are reflected in this map, and vice-versa.\n     * The returned map supports all optional map operations that this\n     * map supports.\n     *\n     * <p>The returned map will throw an {@code IllegalArgumentException}\n     * on an attempt to insert a key outside its range.\n     *\n     * @param fromKey low endpoint (inclusive) of the keys in the returned map\n     * @param toKey high endpoint (exclusive) of the keys in the returned map\n     * @return a view of the portion of this map whose keys range from\n     *         {@code fromKey}, inclusive, to {@code toKey}, exclusive\n     * @throws ClassCastException if {@code fromKey} and {@code toKey}\n     *         cannot be compared to one another using this map's comparator\n     *         (or, if the map has no comparator, using natural ordering).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code fromKey} or {@code toKey}\n     *         cannot be compared to keys currently in the map.\n     * @throws NullPointerException if {@code fromKey} or {@code toKey}\n     *         is null and this map does not permit null keys\n     * @throws IllegalArgumentException if {@code fromKey} is greater than\n     *         {@code toKey}; or if this map itself has a restricted\n     *         range, and {@code fromKey} or {@code toKey} lies\n     *         outside the bounds of the range\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedMap<K, V> headMap(K toKey)",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * Returns a view of the portion of this map whose keys are\n     * strictly less than {@code toKey}.  The returned map is backed\n     * by this map, so changes in the returned map are reflected in\n     * this map, and vice-versa.  The returned map supports all\n     * optional map operations that this map supports.\n     *\n     * <p>The returned map will throw an {@code IllegalArgumentException}\n     * on an attempt to insert a key outside its range.\n     *\n     * @param toKey high endpoint (exclusive) of the keys in the returned map\n     * @return a view of the portion of this map whose keys are strictly\n     *         less than {@code toKey}\n     * @throws ClassCastException if {@code toKey} is not compatible\n     *         with this map's comparator (or, if the map has no comparator,\n     *         if {@code toKey} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code toKey} cannot be compared to keys\n     *         currently in the map.\n     * @throws NullPointerException if {@code toKey} is null and\n     *         this map does not permit null keys\n     * @throws IllegalArgumentException if this map itself has a\n     *         restricted range, and {@code toKey} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " SortedMap<K, V> tailMap(K fromKey)",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * Returns a view of the portion of this map whose keys are\n     * greater than or equal to {@code fromKey}.  The returned map is\n     * backed by this map, so changes in the returned map are\n     * reflected in this map, and vice-versa.  The returned map\n     * supports all optional map operations that this map supports.\n     *\n     * <p>The returned map will throw an {@code IllegalArgumentException}\n     * on an attempt to insert a key outside its range.\n     *\n     * @param fromKey low endpoint (inclusive) of the keys in the returned map\n     * @return a view of the portion of this map whose keys are greater\n     *         than or equal to {@code fromKey}\n     * @throws ClassCastException if {@code fromKey} is not compatible\n     *         with this map's comparator (or, if the map has no comparator,\n     *         if {@code fromKey} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code fromKey} cannot be compared to keys\n     *         currently in the map.\n     * @throws NullPointerException if {@code fromKey} is null and\n     *         this map does not permit null keys\n     * @throws IllegalArgumentException if this map itself has a\n     *         restricted range, and {@code fromKey} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " K firstKey()",
    "returnType" : "K",
    "comment" : "\n     * Returns the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this map\n     * @throws NoSuchElementException if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " K lastKey()",
    "returnType" : "K",
    "comment" : "\n     * Returns the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this map\n     * @throws NoSuchElementException if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Set<K> keySet()",
    "returnType" : "Set<K>",
    "comment" : "\n     * Returns a {@link Set} view of the keys contained in this map.\n     * The set's iterator returns the keys in ascending order.\n     * The set is backed by the map, so changes to the map are\n     * reflected in the set, and vice-versa.  If the map is modified\n     * while an iteration over the set is in progress (except through\n     * the iterator's own {@code remove} operation), the results of\n     * the iteration are undefined.  The set supports element removal,\n     * which removes the corresponding mapping from the map, via the\n     * {@code Iterator.remove}, {@code Set.remove},\n     * {@code removeAll}, {@code retainAll}, and {@code clear}\n     * operations.  It does not support the {@code add} or {@code addAll}\n     * operations.\n     *\n     * @return a set view of the keys contained in this map, sorted in\n     *         ascending order\n     ",
    "links" : [ "java.util.Set" ]
  }, {
    "name" : " Collection<V> values()",
    "returnType" : "Collection<V>",
    "comment" : "\n     * Returns a {@link Collection} view of the values contained in this map.\n     * The collection's iterator returns the values in ascending order\n     * of the corresponding keys.\n     * The collection is backed by the map, so changes to the map are\n     * reflected in the collection, and vice-versa.  If the map is\n     * modified while an iteration over the collection is in progress\n     * (except through the iterator's own {@code remove} operation),\n     * the results of the iteration are undefined.  The collection\n     * supports element removal, which removes the corresponding\n     * mapping from the map, via the {@code Iterator.remove},\n     * {@code Collection.remove}, {@code removeAll},\n     * {@code retainAll} and {@code clear} operations.  It does not\n     * support the {@code add} or {@code addAll} operations.\n     *\n     * @return a collection view of the values contained in this map,\n     *         sorted in ascending key order\n     ",
    "links" : [ "java.util.Collection" ]
  }, {
    "name" : " Set<Map.Entry<K, V>> entrySet()",
    "returnType" : "Set<Map.Entry<K, V>>",
    "comment" : "\n     * Returns a {@link Set} view of the mappings contained in this map.\n     * The set's iterator returns the entries in ascending key order.\n     * The set is backed by the map, so changes to the map are\n     * reflected in the set, and vice-versa.  If the map is modified\n     * while an iteration over the set is in progress (except through\n     * the iterator's own {@code remove} operation, or through the\n     * {@code setValue} operation on a map entry returned by the\n     * iterator) the results of the iteration are undefined.  The set\n     * supports element removal, which removes the corresponding\n     * mapping from the map, via the {@code Iterator.remove},\n     * {@code Set.remove}, {@code removeAll}, {@code retainAll} and\n     * {@code clear} operations.  It does not support the\n     * {@code add} or {@code addAll} operations.\n     *\n     * @return a set view of the mappings contained in this map,\n     *         sorted in ascending key order\n     ",
    "links" : [ "java.util.Set" ]
  }, {
    "name" : " V putFirst(K k, V v)",
    "returnType" : "V",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}. The encounter order induced by this\n     * map's comparison method determines the position of mappings, so explicit positioning\n     * is not supported.\n     *\n     * @implSpec\n     * The implementation in this interface always throws {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " V putLast(K k, V v)",
    "returnType" : "V",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}. The encounter order induced by this\n     * map's comparison method determines the position of mappings, so explicit positioning\n     * is not supported.\n     *\n     * @implSpec\n     * The implementation in this interface always throws {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedMap<K, V> reversed()",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface returns a reverse-ordered SortedMap\n     * view. The {@code reversed()} method of the view returns a reference\n     * to this SortedMap. Other operations on the view are implemented via calls to\n     * public methods on this SortedMap. The exact relationship between calls on the\n     * view and calls on this SortedMap is unspecified. However, order-sensitive\n     * operations generally delegate to the appropriate method with the opposite\n     * orientation. For example, calling {@code firstEntry} on the view results in\n     * a call to {@code lastEntry} on this SortedMap.\n     *\n     * @return a reverse-ordered view of this map, as a {@code SortedMap}\n     * @since 21\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Comparator<? super K> comparator()", " SortedMap<K, V> subMap(K fromKey, K toKey)", " SortedMap<K, V> headMap(K toKey)", " SortedMap<K, V> tailMap(K fromKey)", " K firstKey()", " K lastKey()", " Set<K> keySet()", " Collection<V> values()", " Set<Map.Entry<K, V>> entrySet()", " V putFirst(K k, V v)", " V putLast(K k, V v)", " SortedMap<K, V> reversed()" ],
  "variableNames" : [ ]
}