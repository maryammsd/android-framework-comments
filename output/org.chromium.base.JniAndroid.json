{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/JniAndroid.java",
  "packageName" : "org.chromium.base",
  "className" : "JniAndroid",
  "comment" : " Provides Java-side code to back `jni_android` native logic. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static String sanitizedStacktraceForUnhandledException(Throwable throwable)",
    "returnType" : "String",
    "comment" : "\n     * Returns a sanitized stacktrace (per {@link PiiElider#sanitizeStacktrace(String)}) for the\n     * given throwable. Returns null if an OutOfMemoryError occurs.\n     *\n     * <p>Since this is running inside an uncaught exception handler, this method will make every\n     * effort not to throw; instead, any failures will be surfaced through the returned string.\n     ",
    "links" : [ "org.chromium.base.PiiElider#sanitizeStacktrace(String)" ]
  }, {
    "name" : "private static Throwable handleException(Throwable throwable, String nativeStackTrace)",
    "returnType" : "Throwable",
    "comment" : "\n     * Called by the Chromium native JNI framework when faced with an uncaught Java exception while\n     * executing a Java method from native code.\n     *\n     * <p>This method is expected to terminate the process (but is not guaranteed to).\n     *\n     * <p>The goal of this method is to provide an opportunity to terminate the process from the\n     * Java side so that the crash looks like any other uncaught Java exception, and is handled\n     * accordingly by system crash handlers. This ensures the Java stack trace will be collected, as\n     * opposed to the native stack trace - the former is typically more useful as the true root\n     * cause of the crash is Java code, not native code. See https://crbug.com/1426888 for more\n     * discussion.\n     *\n     * <p>This method will make every effort not to throw to avoid re-entering the Chromium JNI\n     * native exception handler. Errors will be sent to the system log instead.\n     *\n     * @param throwable The uncaught Java exception that was thrown by a Java method called via JNI.\n     * @param nativeStackTrace The stack trace of the native code that called the Java method that\n     *     threw.\n     * @return null, unless the uncaught exception handler threw an exception other than\n     *     OutOfMemoryError exception, in which case that exception is returned.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static String sanitizedStacktraceForUnhandledException(Throwable throwable)", "private static Throwable handleException(Throwable throwable, String nativeStackTrace)" ],
  "variableNames" : [ "TAG" ]
}