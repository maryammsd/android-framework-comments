{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/SyncOneshotSupplierImpl.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "SyncOneshotSupplierImpl",
  "comment" : "\n * A concrete implementation of {@link SyncOneshotSupplier} to used when callbacks need to be called\n * synchronously when a value is set. This differs from {@link OneshotSupplierImpl} in that the\n * pending {@link Callback}s are not posted when {@link #set(T)} is invoked.\n *\n * <p>Instances of this class must only be accessed from the thread they were created on.\n *\n * <p>To use:\n *\n * <ol>\n *   <li>Create a new {@code SyncOneshotSupplierImpl<T>} to pass as a dependency.\n *   <li>Call {@link #set(Object)} when the object becomes available. {@link #set(Object)} may only\n *       be called once.\n * </ol>\n *\n * @param <T> The type of the wrapped object.\n ",
  "links" : [ "#set(T)", "org.chromium.base.supplier.OneshotSupplierImpl", "org.chromium.base.Callback", "#set(Object)", "org.chromium.base.supplier.SyncOneshotSupplier" ],
  "variables" : [ {
    "name" : "mThreadChecker",
    "type" : "ThreadUtils.ThreadChecker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingCallbacks",
    "type" : "ArrayList<Callback<T>>",
    "comment" : " Lazily created list of pending callbacks to invoke when an object is set. ",
    "links" : [ ]
  }, {
    "name" : "mObject",
    "type" : "T",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T onAvailable(Callback<T> callback)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T get()",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull T object)",
    "returnType" : "void",
    "comment" : "\n     * Set the object supplied by this supplier. This will synchronously notify registered callbacks\n     * that the dependency is available. If {@link #set(Object)} has already been called, this\n     * method will assert.\n     *\n     * @param object The object to supply.\n     ",
    "links" : [ "#set(Object)" ]
  } ],
  "methodNames" : [ "public T onAvailable(Callback<T> callback)", "public T get()", "public void set(@NonNull T object)" ],
  "variableNames" : [ "mThreadChecker", "mPendingCallbacks", "mObject" ]
}