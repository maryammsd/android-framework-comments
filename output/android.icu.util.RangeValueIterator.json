{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/RangeValueIterator.java",
  "packageName" : "android.icu.util",
  "className" : "RangeValueIterator",
  "comment" : "\n * <p>Interface for enabling iteration over sets of &lt;int index, int value&gt;,\n * where index is the sorted integer index in ascending order and value, its\n * associated integer value.\n * <p>The result for each iteration is the consecutive range of\n * &lt;int index, int value&gt; with the same value. Result is represented by\n * &lt;start, limit, value&gt; where\n * <ul>\n * <li> start is the starting integer of the result range\n * <li> limit is 1 after the maximum integer that follows start, such that\n *      all integers between start and (limit - 1), inclusive, have the same\n *      associated integer value.\n * <li> value is the integer value that all integers from start to (limit - 1)\n *      share in common.\n * </ul>\n * <p>\n * Hence value(start) = value(start + 1) = .... = value(start + n) = .... =\n * value(limit - 1). However value(start -1) != value(start) and\n * value(limit) != value(start).\n * \n * <p>Most implementations will be created by factory methods, such as the\n * character type iterator in UCharacter.getTypeIterator. See example below.\n * \n * <p>Example of use:<br>\n * <pre>\n * RangeValueIterator iterator = UCharacter.getTypeIterator();\n * RangeValueIterator.Element result = new RangeValueIterator.Element();\n * while (iterator.next(result)) {\n *     System.out.println(\"Codepoint \\\\u\" +\n *                        Integer.toHexString(result.start) +\n *                        \" to codepoint \\\\u\" +\n *                        Integer.toHexString(result.limit - 1) +\n *                        \" has the character type \" + result.value);\n * }\n * </pre>\n * @author synwee\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean next(Element element)",
    "returnType" : "boolean",
    "comment" : "\n    * <p>Returns the next maximal result range with a common value and returns\n    * true if we are not at the end of the iteration, false otherwise.\n    * <p>If this returns a false, the contents of elements will not\n    * be updated.\n    * @param element for storing the result range and value\n    * @return true if we are not at the end of the iteration, false otherwise.\n    * @see Element\n    ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n    * Resets the iterator to the beginning of the iteration.\n    ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean next(Element element)", "public void reset()" ],
  "variableNames" : [ ]
}