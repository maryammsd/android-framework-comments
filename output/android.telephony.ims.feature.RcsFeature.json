{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/feature/RcsFeature.java",
  "packageName" : "android.telephony.ims.feature",
  "className" : "RcsFeature",
  "comment" : "\n * Base implementation of the RcsFeature APIs. Any ImsService wishing to support RCS should extend\n * this class and provide implementations of the RcsFeature methods that they support.\n * @hide\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImsRcsBinder",
    "type" : "RcsFeatureBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerBinder",
    "type" : "IRcsFeatureListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresExchange",
    "type" : "RcsPresenceExchangeImplBase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSipOptions",
    "type" : "RcsSipOptionsImplBase",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final RcsImsCapabilities queryCapabilityStatus()",
    "returnType" : "RcsImsCapabilities",
    "comment" : "\n     * Query the current {@link RcsImsCapabilities} status set by the RcsFeature. If a capability is\n     * set, the {@link RcsFeature} has brought up the capability and is ready for framework\n     * requests. To change the status of the capabilities\n     * {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)} should be called.\n     * @hide\n     ",
    "links" : [ "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "RcsImsCapabilities" ]
  }, {
    "name" : "public final void notifyCapabilitiesStatusChanged(@NonNull RcsImsCapabilities c)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the capabilities status has changed. If a capability is enabled,\n     * this signals to the framework that the capability has been initialized and is ready.\n     * Call {@link #queryCapabilityStatus()} to return the current capability status.\n     * @hide\n     ",
    "links" : [ "#queryCapabilityStatus()" ]
  }, {
    "name" : "public boolean queryCapabilityConfiguration(@RcsImsCapabilities.RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides the RcsFeature with the ability to return the framework capability configuration set\n     * by the framework. When the framework calls\n     * {@link #changeEnabledCapabilities(CapabilityChangeRequest, CapabilityCallbackProxy)} to\n     * enable or disable capability A, this method should return the correct configuration for\n     * capability A afterwards (until it has changed).\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities(CapabilityChangeRequest" ]
  }, {
    "name" : "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy c)",
    "returnType" : "void",
    "comment" : "\n     * Called from the framework when the {@link RcsImsCapabilities} that have been configured for\n     * this {@link RcsFeature} has changed.\n     * <p>\n     * For each newly enabled capability flag, the corresponding capability should be brought up in\n     * the {@link RcsFeature} and registered on the network. For each newly disabled capability\n     * flag, the corresponding capability should be brought down, and deregistered. Once a new\n     * capability has been initialized and is ready for usage, the status of that capability should\n     * also be set to true using {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)}. This\n     * will notify the framework that the capability is ready.\n     * <p>\n     * If for some reason one or more of these capabilities can not be enabled/disabled,\n     * {@link CapabilityCallbackProxy#onChangeCapabilityConfigurationError(int, int, int)} should\n     * be called for each capability change that resulted in an error.\n     * @hide\n     ",
    "links" : [ "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "#onChangeCapabilityConfigurationError(int", "RcsImsCapabilities" ]
  }, {
    "name" : "public RcsSipOptionsImplBase getOptionsExchangeImpl()",
    "returnType" : "RcsSipOptionsImplBase",
    "comment" : "\n     * Retrieve the implementation of SIP OPTIONS for this {@link RcsFeature}.\n     * <p>\n     * Will only be requested by the framework if capability exchange via SIP OPTIONS is\n     * configured as capable during a\n     * {@link #changeEnabledCapabilities(CapabilityChangeRequest, CapabilityCallbackProxy)}\n     * operation and the RcsFeature sets the status of the capability to true using\n     * {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)}.\n     *\n     * @return An instance of {@link RcsSipOptionsImplBase} that implements SIP options exchange if\n     * it is supported by the device.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.stub.RcsSipOptionsImplBase", "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "#changeEnabledCapabilities(CapabilityChangeRequest" ]
  }, {
    "name" : "public RcsPresenceExchangeImplBase getPresenceExchangeImpl()",
    "returnType" : "RcsPresenceExchangeImplBase",
    "comment" : "\n     * Retrieve the implementation of UCE presence for this {@link RcsFeature}.\n     * Will only be requested by the framework if presence exchang is configured as capable during\n     * a {@link #changeEnabledCapabilities(CapabilityChangeRequest, CapabilityCallbackProxy)}\n     * operation and the RcsFeature sets the status of the capability to true using\n     * {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)}.\n     *\n     * @return An instance of {@link RcsPresenceExchangeImplBase} that implements presence\n     * exchange if it is supported by the device.\n     * @hide\n     ",
    "links" : [ "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "#changeEnabledCapabilities(CapabilityChangeRequest", "android.telephony.ims.stub.RcsPresenceExchangeImplBase" ]
  }, {
    "name" : "public void onFeatureRemoved()",
    "returnType" : "void",
    "comment" : "{@inheritDoc}",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureReady()",
    "returnType" : "void",
    "comment" : "{@inheritDoc}",
    "links" : [ ]
  }, {
    "name" : "public final IImsRcsFeature getBinder()",
    "returnType" : "IImsRcsFeature",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IRcsFeatureListener getListener()",
    "returnType" : "IRcsFeatureListener",
    "comment" : "@hide",
    "links" : [ ]
  }, {
    "name" : "private void setListener(IRcsFeatureListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RcsPresenceExchangeImplBase getPresenceExchangeInternal()",
    "returnType" : "RcsPresenceExchangeImplBase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RcsSipOptionsImplBase getOptionsExchangeInternal()",
    "returnType" : "RcsSipOptionsImplBase",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "mImsRcsBinder", "mListenerBinder", "mPresExchange", "mSipOptions" ],
  "methodNames" : [ "public final RcsImsCapabilities queryCapabilityStatus()", "public final void notifyCapabilitiesStatusChanged(@NonNull RcsImsCapabilities c)", "public boolean queryCapabilityConfiguration(@RcsImsCapabilities.RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)", "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy c)", "public RcsSipOptionsImplBase getOptionsExchangeImpl()", "public RcsPresenceExchangeImplBase getPresenceExchangeImpl()", "public void onFeatureRemoved()", "public void onFeatureReady()", "public final IImsRcsFeature getBinder()", "public IRcsFeatureListener getListener()", "private void setListener(IRcsFeatureListener listener)", "private RcsPresenceExchangeImplBase getPresenceExchangeInternal()", "private RcsSipOptionsImplBase getOptionsExchangeInternal()" ]
}