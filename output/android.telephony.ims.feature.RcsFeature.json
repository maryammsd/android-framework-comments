{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/feature/RcsFeature.java",
  "packageName" : "android.telephony.ims.feature",
  "className" : "RcsFeature",
  "comment" : "\n * Base implementation of the RcsFeature APIs. Any ImsService wishing to support RCS should extend\n * this class and provide implementations of the RcsFeature methods that they support.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImsRcsBinder",
    "type" : "RcsFeatureBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilityExchangeImpl",
    "type" : "RcsCapabilityExchangeImplBase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapExchangeEventListener",
    "type" : "CapabilityExchangeEventListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void initialize(@NonNull Context context, @NonNull int slotId)",
    "returnType" : "void",
    "comment" : "\n     * Called when the RcsFeature is initialized.\n     *\n     * @param context The context that is used in the ImsService.\n     * @param slotId The slot ID associated with the RcsFeature.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final RcsImsCapabilities queryCapabilityStatus()",
    "returnType" : "RcsImsCapabilities",
    "comment" : "\n     * Query the current {@link RcsImsCapabilities} status set by the RcsFeature. If a capability is\n     * set, the {@link RcsFeature} has brought up the capability and is ready for framework\n     * requests. To change the status of the capabilities\n     * {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)} should be called.\n     * @return A copy of the current RcsFeature capability status.\n     ",
    "links" : [ "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "RcsImsCapabilities" ]
  }, {
    "name" : "public final void notifyCapabilitiesStatusChanged(@NonNull RcsImsCapabilities capabilities)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the capabilities status has changed. If a capability is enabled,\n     * this signals to the framework that the capability has been initialized and is ready.\n     * Call {@link #queryCapabilityStatus()} to return the current capability status.\n     * @param capabilities The current capability status of the RcsFeature.\n     ",
    "links" : [ "#queryCapabilityStatus()" ]
  }, {
    "name" : "public boolean queryCapabilityConfiguration(@ImsRcsManager.RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides the RcsFeature with the ability to return the framework capability configuration set\n     * by the framework. When the framework calls\n     * {@link #changeEnabledCapabilities(CapabilityChangeRequest, CapabilityCallbackProxy)} to\n     * enable or disable capability A, this method should return the correct configuration for\n     * capability A afterwards (until it has changed).\n     * @param capability The capability that we are querying the configuration for.\n     * @param radioTech The radio technology type that we are querying.\n     * @return true if the capability is enabled, false otherwise.\n     ",
    "links" : [ "#changeEnabledCapabilities(CapabilityChangeRequest" ]
  }, {
    "name" : "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy callback)",
    "returnType" : "void",
    "comment" : "\n     * Called from the framework when the {@link RcsImsCapabilities} that have been configured for\n     * this {@link RcsFeature} has changed.\n     * <p>\n     * For each newly enabled capability flag, the corresponding capability should be brought up in\n     * the {@link RcsFeature} and registered on the network. For each newly disabled capability\n     * flag, the corresponding capability should be brought down, and deregistered. Once a new\n     * capability has been initialized and is ready for usage, the status of that capability should\n     * also be set to true using {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)}. This\n     * will notify the framework that the capability is ready.\n     * <p>\n     * If for some reason one or more of these capabilities can not be enabled/disabled,\n     * {@link CapabilityCallbackProxy#onChangeCapabilityConfigurationError(int, int, int)} should\n     * be called for each capability change that resulted in an error.\n     * @param request The request to change the capability.\n     * @param callback To notify the framework that the result of the capability changes.\n     ",
    "links" : [ "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "#onChangeCapabilityConfigurationError(int", "RcsImsCapabilities" ]
  }, {
    "name" : "public RcsCapabilityExchangeImplBase createCapabilityExchangeImpl(@NonNull CapabilityExchangeEventListener listener)",
    "returnType" : "RcsCapabilityExchangeImplBase",
    "comment" : "\n     * Retrieve the implementation of UCE for this {@link RcsFeature}, which can use either\n     * presence or OPTIONS for capability exchange.\n     *\n     * Will only be requested by the framework if capability exchange is configured\n     * as capable during a\n     * {@link #changeEnabledCapabilities(CapabilityChangeRequest, CapabilityCallbackProxy)}\n     * operation and the RcsFeature sets the status of the capability to true using\n     * {@link #notifyCapabilitiesStatusChanged(RcsImsCapabilities)}.\n     *\n     * @param listener A {@link CapabilityExchangeEventListener} to send the capability exchange\n     * event to the framework.\n     * @return An instance of {@link RcsCapabilityExchangeImplBase} that implements capability\n     * exchange if it is supported by the device.\n     ",
    "links" : [ "#notifyCapabilitiesStatusChanged(RcsImsCapabilities)", "android.telephony.ims.aidl.IImsRcsFeature", "#changeEnabledCapabilities(CapabilityChangeRequest", "android.telephony.ims.aidl.ICapabilityExchangeEventListener", "android.telephony.ims.stub.RcsCapabilityExchangeImplBase" ]
  }, {
    "name" : "public void destroyCapabilityExchangeImpl(@NonNull RcsCapabilityExchangeImplBase capExchangeImpl)",
    "returnType" : "void",
    "comment" : "\n     * Remove the given CapabilityExchangeImplBase instance.\n     * @param capExchangeImpl The {@link RcsCapabilityExchangeImplBase} instance to be destroyed.\n     ",
    "links" : [ "android.telephony.ims.stub.RcsCapabilityExchangeImplBase" ]
  }, {
    "name" : "public void onFeatureRemoved()",
    "returnType" : "void",
    "comment" : "{@inheritDoc}",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureReady()",
    "returnType" : "void",
    "comment" : "{@inheritDoc}",
    "links" : [ ]
  }, {
    "name" : "public final IImsRcsFeature getBinder()",
    "returnType" : "IImsRcsFeature",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setCapabilityExchangeEventListener(@Nullable CapabilityExchangeEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set the capability exchange listener.\n     * @param listener A {@link CapabilityExchangeEventListener} to send the capability exchange\n     * event to the framework.\n     ",
    "links" : [ "android.telephony.ims.aidl.ICapabilityExchangeEventListener" ]
  }, {
    "name" : "private void initRcsCapabilityExchangeImplBase(@NonNull CapabilityExchangeEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the RcsCapabilityExchangeImplBase instance if the capability exchange instance\n     * has already been created in the framework.\n     * @param listener A {@link CapabilityExchangeEventListener} to send the capability exchange\n     * event to the framework.\n     ",
    "links" : [ "android.telephony.ims.aidl.ICapabilityExchangeEventListener" ]
  }, {
    "name" : "private RcsCapabilityExchangeImplBase getCapabilityExchangeImplBaseInternal()",
    "returnType" : "RcsCapabilityExchangeImplBase",
    "comment" : "\n     * @return the {@link RcsCapabilityExchangeImplBase} associated with the RcsFeature.\n     ",
    "links" : [ "android.telephony.ims.stub.RcsCapabilityExchangeImplBase" ]
  }, {
    "name" : "public final void setDefaultExecutor(@NonNull Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Set default Executor from ImsService.\n     * @param executor The default executor for the framework to use when executing the methods\n     * overridden by the implementation of RcsFeature.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void initialize(@NonNull Context context, @NonNull int slotId)", "public final RcsImsCapabilities queryCapabilityStatus()", "public final void notifyCapabilitiesStatusChanged(@NonNull RcsImsCapabilities capabilities)", "public boolean queryCapabilityConfiguration(@ImsRcsManager.RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)", "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy callback)", "public RcsCapabilityExchangeImplBase createCapabilityExchangeImpl(@NonNull CapabilityExchangeEventListener listener)", "public void destroyCapabilityExchangeImpl(@NonNull RcsCapabilityExchangeImplBase capExchangeImpl)", "public void onFeatureRemoved()", "public void onFeatureReady()", "public final IImsRcsFeature getBinder()", "private void setCapabilityExchangeEventListener(@Nullable CapabilityExchangeEventListener listener)", "private void initRcsCapabilityExchangeImplBase(@NonNull CapabilityExchangeEventListener listener)", "private RcsCapabilityExchangeImplBase getCapabilityExchangeImplBaseInternal()", "public final void setDefaultExecutor(@NonNull Executor executor)" ],
  "variableNames" : [ "LOG_TAG", "mExecutor", "mImsRcsBinder", "mCapabilityExchangeImpl", "mCapExchangeEventListener" ]
}