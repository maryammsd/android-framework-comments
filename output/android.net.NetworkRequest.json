{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkRequest.java",
  "packageName" : "android.net",
  "className" : "NetworkRequest",
  "comment" : "\n * An object describing a network that the application is interested in.\n *\n * <p>@see <a href=\"https://developer.android.com/training/basics/network-ops/reading-network-state>\n * this general guide</a> on how to use NetworkCapabilities and related classes.\n *\n * NetworkRequest defines a request for a network, made through\n * {@link NetworkRequest.Builder} and used to request a network via\n * {@link ConnectivityManager#requestNetwork} or to listen for changes\n * via the {@link ConnectivityManager#registerNetworkCallback} family of\n * functions.\n *\n * <p>{@link ConnectivityManager#requestNetwork} will try to find a connected\n * network matching the NetworkRequest, and return it if there is one.\n * As long as the request is outstanding, the system will try to find the best\n * possible network that matches the request. The request will keep up the\n * currently best connected network, and if a better one is found (e.g. cheaper\n * or faster) the system will bring up that better network to better serve the\n * request. A request filed with {@link ConnectivityManager#requestNetwork} will\n * only match one network at a time (the one the system thinks is best), even if\n * other networks can match the request that are being kept up by other requests.\n *\n * For example, an application needing a network with\n * {@link NetworkCapabilities#NET_CAPABILITY_INTERNET} should use\n * {@link ConnectivityManager#requestNetwork} to request the system keeps one up.\n * A general cellular network can satisfy this request, but if the system finds\n * a free Wi-Fi network which is expected to be faster, it will try and connect\n * to that Wi-Fi network and switch the request over to it once it is connected.\n * The cell network may stay connected if there are outstanding requests (from\n * the same app or from other apps on the system) that match the cell network\n * but not the Wi-Fi network, such as a request with {@link NetworkCapabilities#NET_CAPABILITY_MMS}.\n *\n * When a network is no longer needed to serve any request, the system can\n * tear it down at any time and usually does so immediately, so make sure to\n * keep up requests for the networks your app needs.\n *\n * <p>By contrast, requests filed with {@link ConnectivityManager#registerNetworkCallback}\n * will receive callbacks for all matching networks, and will not cause the system to\n * keep up the networks they match. Use this to listen to networks that the device is\n * connected to, but that you don't want the system to keep up for your use case.\n *\n * <p>Applications build a NetworkRequest and pass it to one of the\n * {@link ConnectivityManager} methods above together with a\n * {@link ConnectivityManager.NetworkCallback} object. The callback\n * will then start receiving method calls about networks that match\n * the request.\n *\n * <p>Networks are brought up and/or matched according to the capabilities\n * set in the builder. For example, a request with\n * {@link NetworkCapabilities#NET_CAPABILITY_MMS} lets the system match\n * and/or bring up a network that is capable to send MMS. A request with\n * {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} matches a network\n * that doesn't charge the user for usage. See\n * {@link NetworkCapabilities} for a list of capabilities and their\n * description.\n *\n * <p>While all capabilities can be matched with the\n * {@link ConnectivityManager#registerNetworkCallback} family of methods,\n * not all capabilities can be used to request that the system brings\n * up a network with {@link ConnectivityManager#requestNetwork}. For example,\n * an application cannot use {@link ConnectivityManager#requestNetwork} to\n * ask the system to bring up a network with\n * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}, because the\n * system won't know if a network has a captive portal before it connects\n * to that network. Similarly, some capabilities may require a specific\n * permission or privilege to be requested.\n *\n * Look up the specific capability and the {@link ConnectivityManager#requestNetwork}\n * method for limitations applicable to each capability.\n *\n * <p>Also, starting with {@link Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, some capabilities\n * require the application to self-certify by explicitly adding the\n * {@link android.content.pm.PackageManager#PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES}\n * property in the AndroidManifest.xml, which points to an XML resource file. In the\n * XML resource file, the application declares what kind of network capabilities the application\n * wants to have.\n *\n * Here is an example self-certification XML resource file :\n * <pre>\n *  {@code\n *  <network-capabilities-declaration xmlns:android=\"http://schemas.android.com/apk/res/android\">\n *     <uses-network-capability android:name=\"NET_CAPABILITY_PRIORITIZE_LATENCY\"/>\n *     <uses-network-capability android:name=\"NET_CAPABILITY_PRIORITIZE_BANDWIDTH\"/>\n * </network-capabilities-declaration>\n *  }\n *  </pre>\n * Look up the specific capability to learn whether its usage requires this self-certification.\n ",
  "links" : [ "android.net.ConnectivityManager", "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_METERED", "android.net.NetworkCapabilities#NET_CAPABILITY_MMS", "NetworkRequest.Builder", "android.net.ConnectivityManager#requestNetwork", "android.net.NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL", "android.content.pm.PackageManager#PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES", "Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "ConnectivityManager.NetworkCallback", "android.net.NetworkCapabilities", "android.net.ConnectivityManager#registerNetworkCallback", "android.net.NetworkCapabilities#NET_CAPABILITY_INTERNET" ],
  "variables" : [ {
    "name" : "FIRST_REQUEST_ID",
    "type" : "int",
    "comment" : "\n     * The first requestId value that will be allocated.\n     * @hide only used by ConnectivityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_ID_NONE",
    "type" : "int",
    "comment" : "\n     * The requestId value that represents the absence of a request.\n     * @hide only used by ConnectivityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "networkCapabilities",
    "type" : "NetworkCapabilities",
    "comment" : "\n     * The {@link NetworkCapabilities} that define this request.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "requestId",
    "type" : "int",
    "comment" : "\n     * Identifies the request.  NetworkRequests should only be constructed by\n     * the Framework and given out to applications as tokens to be used to identify\n     * the request.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "legacyType",
    "type" : "int",
    "comment" : "\n     * Set for legacy requests and the default.  Set to TYPE_NONE for none.\n     * Causes CONNECTIVITY_ACTION broadcasts to be sent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "Type",
    "comment" : "\n     * The type of the request. This is only used by the system and is always NONE elsewhere.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " implement the Parcelable interface",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isListen()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff. this NetworkRequest is of type LISTEN.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isListenForBest()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff. this NetworkRequest is of type LISTEN_FOR_BEST.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequest()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff. the contained NetworkRequest is one that:\n     *\n     *     - should be associated with at most one satisfying network\n     *       at a time;\n     *\n     *     - should cause a network to be kept up, but not necessarily in\n     *       the foreground, if it is the best network which can satisfy the\n     *       NetworkRequest.\n     *\n     * For full detail of how isRequest() is used for pairing Networks with\n     * NetworkRequests read rematchNetworkAndRequests().\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBackgroundRequest()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff. this NetworkRequest is of type BACKGROUND_REQUEST.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCapability(@NetCapability int capability)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Builder#addCapability(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasForbiddenCapability(@NetCapability int capability)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Builder#addForbiddenCapability(int)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canBeSatisfiedBy(@Nullable NetworkCapabilities nc)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if and only if the capabilities requested in this NetworkRequest are satisfied\n     * by the provided {@link NetworkCapabilities}.\n     *\n     * @param nc Capabilities that should satisfy this NetworkRequest. null capabilities do not\n     *           satisfy any request.\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public boolean hasTransport(@Transport int transportType)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Builder#addTransportType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSpecifier getNetworkSpecifier()",
    "returnType" : "NetworkSpecifier",
    "comment" : "\n     * @see Builder#setNetworkSpecifier(NetworkSpecifier)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRequestorUid()",
    "returnType" : "int",
    "comment" : "\n     * @return the uid of the app making the request.\n     *\n     * Note: This could return {@link Process#INVALID_UID} if the {@link NetworkRequest} object was\n     * not obtained from {@link ConnectivityManager}.\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager", "android.os.Process#INVALID_UID", "android.net.NetworkRequest" ]
  }, {
    "name" : "public String getRequestorPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the package name of the app making the request.\n     *\n     * Note: This could return {@code null} if the {@link NetworkRequest} object was not obtained\n     * from {@link ConnectivityManager}.\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager", "android.net.NetworkRequest" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getCapabilities()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all the capabilities set on this {@code NetworkRequest} instance.\n     *\n     * @return an array of capability values for this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getEnterpriseIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Get the enteprise identifiers.\n     *\n     * Get all the enterprise identifiers set on this {@code NetworkCapability}\n     * @return array of all the enterprise identifiers.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnterpriseId(@NetworkCapabilities.EnterpriseId int enterpriseId)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests for the presence of an enterprise identifier on this instance.\n     *\n     * @param enterpriseId the enterprise capability identifier to be tested for.\n     * @return {@code true} if set on this instance.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getForbiddenCapabilities()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all the forbidden capabilities set on this {@code NetworkRequest} instance.\n     *\n     * @return an array of forbidden capability values for this instance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getTransportTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all the transports set on this {@code NetworkRequest} instance.\n     *\n     * @return an array of transport type values for this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> getSubscriptionIds()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Gets all the subscription ids set on this {@code NetworkRequest} instance.\n     *\n     * @return Set of Integer values for this instance.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean isListen()", "public boolean isListenForBest()", "public boolean isRequest()", "public boolean isBackgroundRequest()", "public boolean hasCapability(@NetCapability int capability)", "public boolean hasForbiddenCapability(@NetCapability int capability)", "public boolean canBeSatisfiedBy(@Nullable NetworkCapabilities nc)", "public boolean hasTransport(@Transport int transportType)", "public NetworkSpecifier getNetworkSpecifier()", "public int getRequestorUid()", "public String getRequestorPackageName()", "public String toString()", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public int[] getCapabilities()", "public int[] getEnterpriseIds()", "public boolean hasEnterpriseId(@NetworkCapabilities.EnterpriseId int enterpriseId)", "public int[] getForbiddenCapabilities()", "public int[] getTransportTypes()", "public Set<Integer> getSubscriptionIds()" ],
  "variableNames" : [ "FIRST_REQUEST_ID", "REQUEST_ID_NONE", "networkCapabilities", "requestId", "legacyType", "type", "CREATOR" ]
}