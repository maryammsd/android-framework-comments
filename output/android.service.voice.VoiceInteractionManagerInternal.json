{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/VoiceInteractionManagerInternal.java",
  "packageName" : "android.service.voice",
  "className" : "VoiceInteractionManagerInternal",
  "comment" : "\n * @hide Private interface to the VoiceInteractionManagerService for use within system_server.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void startLocalVoiceInteraction(@NonNull IBinder callingActivity, @Nullable String attributionTag, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Start a new voice interaction session when requested from within an activity\n     * by Activity.startLocalVoiceInteraction()\n     * @param callingActivity The binder token representing the calling activity.\n     * @param attributionTag The attribution tag of the calling context or {@code null} for default\n     *                       attribution\n     * @param options A Bundle of private arguments to the current voice interaction service\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean supportsLocalVoiceInteraction()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the currently selected voice interaction service supports local voice\n     * interaction for launching from an Activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void stopLocalVoiceInteraction(IBinder callingActivity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasActiveSession(String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given package is currently in an active session\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getVoiceInteractorPackageName(IBinder callingVoiceInteractor)",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the active session.\n     *\n     * @param callingVoiceInteractor the voice interactor binder from the calling VoiceInteractor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract HotwordDetectionServiceIdentity getHotwordDetectionServiceIdentity()",
    "returnType" : "HotwordDetectionServiceIdentity",
    "comment" : "\n     * Gets the identity of the currently active HotwordDetectionService.\n     *\n     * @see HotwordDetectionServiceIdentity\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onPreCreatedUserConversion(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : " TODO(b/226201975): remove method once RoleService supports pre-created users",
    "links" : [ ]
  }, {
    "name" : "public abstract void startListeningFromWearable(ParcelFileDescriptor audioStream, AudioFormat audioFormat, PersistableBundle options, ComponentName targetVisComponentName, int userId, WearableHotwordDetectionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link com.android.server.wearable.WearableSensingManagerPerUserService} when a\n     * wearable starts sending audio data for hotword detection.\n     *\n     * @param audioStream The audio data.\n     * @param audioFormat The format of the audio data.\n     * @param options Options supporting hotword detection.\n     * @param targetVisComponentName The target VoiceInteractionService ComponentName\n     * @param userId The user ID of the calling wearable service\n     * @param callback The callback to notify the caller of the hotword detection result.\n     ",
    "links" : [ "com.android.server.wearable.WearableSensingManagerPerUserService" ]
  } ],
  "methodNames" : [ "public abstract void startLocalVoiceInteraction(@NonNull IBinder callingActivity, @Nullable String attributionTag, @Nullable Bundle options)", "public abstract boolean supportsLocalVoiceInteraction()", "public abstract void stopLocalVoiceInteraction(IBinder callingActivity)", "public abstract boolean hasActiveSession(String packageName)", "public abstract String getVoiceInteractorPackageName(IBinder callingVoiceInteractor)", "public abstract HotwordDetectionServiceIdentity getHotwordDetectionServiceIdentity()", "public abstract void onPreCreatedUserConversion(@UserIdInt int userId)", "public abstract void startListeningFromWearable(ParcelFileDescriptor audioStream, AudioFormat audioFormat, PersistableBundle options, ComponentName targetVisComponentName, int userId, WearableHotwordDetectionCallback callback)" ],
  "variableNames" : [ ]
}