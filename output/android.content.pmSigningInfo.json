{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/SigningInfo.java",
  "packageName" : "android.content.pm",
  "className" : "SigningInfo",
  "comment" : "\n * Information pertaining to the signing certificates used to sign a package.\n ",
  "variables" : [ {
    "name" : "mSigningDetails",
    "type" : "PackageParser.SigningDetails",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SigningInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasMultipleSigners()",
    "returnType" : "boolean",
    "comment" : "\n     * Although relatively uncommon, packages may be signed by more than one signer, in which case\n     * their identity is viewed as being the set of all signers, not just any one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPastSigningCertificates()",
    "returnType" : "boolean",
    "comment" : "\n     * APK Signature Scheme v3 enables packages to provide a proof-of-rotation record that the\n     * platform verifies, and uses, to allow the use of new signing certificates.  This is only\n     * available to packages that are not signed by multiple signers.  In the event of a change to a\n     * new signing certificate, the package's past signing certificates are presented as well.  Any\n     * check of a package's signing certificate should also include a search through its entire\n     * signing history, since it could change to a new signing certificate at any time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Signature[] getSigningCertificateHistory()",
    "returnType" : "Signature[]",
    "comment" : "\n     * Returns the signing certificates this package has proven it is authorized to use. This\n     * includes both the signing certificate associated with the signer of the package and the past\n     * signing certificates it included as its proof of signing certificate rotation.  This method\n     * is the preferred replacement for the {@code GET_SIGNATURES} flag used with {@link\n     * PackageManager#getPackageInfo(String, int)}.  When determining if a package is signed by a\n     * desired certificate, the returned array should be checked to determine if it is one of the\n     * entries.\n     *\n     * <note>\n     *     This method returns null if the package is signed by multiple signing certificates, as\n     *     opposed to being signed by one current signer and also providing the history of past\n     *     signing certificates.  {@link #hasMultipleSigners()} may be used to determine if this\n     *     package is signed by multiple signers.  Packages which are signed by multiple signers\n     *     cannot change their signing certificates and their {@code Signature} array should be\n     *     checked to make sure that every entry matches the looked-for signing certificates.\n     * </note>\n     ",
    "links" : [ "#hasMultipleSigners" ]
  }, {
    "name" : "public Signature[] getApkContentsSigners()",
    "returnType" : "Signature[]",
    "comment" : "\n     * Returns the signing certificates used to sign the APK contents of this application.  Not\n     * including any past signing certificates the package proved it is authorized to use.\n     * <note>\n     *     This method should not be used unless {@link #hasMultipleSigners()} returns true,\n     *     indicating that {@link #getSigningCertificateHistory()} cannot be used, otherwise {@link\n     *     #getSigningCertificateHistory()} should be preferred.\n     * </note>\n     ",
    "links" : [ "#hasMultipleSigners", "#getSigningCertificateHistory" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSigningDetails", "CREATOR" ],
  "methodNames" : [ "public boolean hasMultipleSigners()", "public boolean hasPastSigningCertificates()", "public Signature[] getSigningCertificateHistory()", "public Signature[] getApkContentsSigners()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)" ]
}