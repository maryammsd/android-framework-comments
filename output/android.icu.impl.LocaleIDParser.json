{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/LocaleIDParser.java",
  "packageName" : "android.icu.impl",
  "className" : "LocaleIDParser",
  "comment" : "\n * Utility class to parse and normalize locale ids (including POSIX style)\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "id",
    "type" : "char[]",
    "comment" : "\n     * Char array representing the locale ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : "\n     * Current position in {@link #id} (while parsing).\n     ",
    "links" : [ "#id" ]
  }, {
    "name" : "buffer",
    "type" : "StringBuilder",
    "comment" : "\n     * Temporary buffer for parsed sections of data.\n     ",
    "links" : [ ]
  }, {
    "name" : "canonicalize",
    "type" : "boolean",
    "comment" : " um, don't handle POSIX ids unless we request it.  why not?  well... because.",
    "links" : [ ]
  }, {
    "name" : "hadCountry",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "keywords",
    "type" : "Map<String, String>",
    "comment" : " used when canonicalizing",
    "links" : [ ]
  }, {
    "name" : "baseName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYWORD_SEPARATOR",
    "type" : "char",
    "comment" : "\n     * Parsing constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "HYPHEN",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYWORD_ASSIGN",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMMA",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITEM_SEPARATOR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOT",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDERSCORE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DONE",
    "type" : "char",
    "comment" : "\n     * Character to indicate no more text is available in the id.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VARIANTS_LENGTH",
    "type" : "int",
    "comment" : " 8*20 + 1*(20-1) = 179",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void append(char c)",
    "returnType" : "void",
    "comment" : "\n     * Append c to the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addSeparator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getString(int start)",
    "returnType" : "String",
    "comment" : "\n     * Returns the text in the buffer from start to blen as a String.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void set(int pos, String s)",
    "returnType" : "void",
    "comment" : "\n     * Set the length of the buffer to pos, then append the string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void append(String s)",
    "returnType" : "void",
    "comment" : "\n     * Append the string to the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private char next()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character at index in the id, and advance index.  The returned character\n     * is DONE if index was at the limit of the buffer.  The index is advanced regardless\n     * so that decrementing the index will always 'unget' the last character returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void skipUntilTerminatorOrIDSeparator()",
    "returnType" : "void",
    "comment" : "\n     * Advance index until the next terminator or id separator, and leave it there.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean atTerminator()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the character at index in the id is a terminator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isTerminator(char c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the character is a terminator (keyword separator, dot, or DONE).\n     * Dot is a terminator because of the POSIX form, where dot precedes the codepage.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isTerminatorOrIDSeparator(char c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the character is a terminator or id separator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean haveExperimentalLanguagePrefix()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the start of the buffer has an experimental or private language\n     * prefix, the pattern '[ixIX][-_].' shows the syntax checked.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean haveKeywordAssign()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if a value separator occurs at or after index.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseLanguage()",
    "returnType" : "int",
    "comment" : "\n     * Advance index past language, and accumulate normalized language code in buffer.\n     * Index must be at 0 when this is called.  Index is left at a terminator or id\n     * separator.  Returns the start of the language code in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void skipLanguage()",
    "returnType" : "void",
    "comment" : "\n     * Advance index past language.  Index must be at 0 when this is called.  Index\n     * is left at a terminator or id separator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseScript()",
    "returnType" : "int",
    "comment" : "\n     * Advance index past script, and accumulate normalized script in buffer.\n     * Index must be immediately after the language.\n     * If the item at this position is not a script (is not four characters\n     * long) leave index and buffer unchanged.  Otherwise index is left at\n     * a terminator or id separator.  Returns the start of the script code\n     * in the buffer (this may be equal to the buffer length, if there is no\n     * script).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void skipScript()",
    "returnType" : "void",
    "comment" : "\n     * Advance index past script.\n     * Index must be immediately after the language and IDSeparator.\n     * If the item at this position is not a script (is not four characters\n     * long) leave index.  Otherwise index is left at a terminator or\n     * id separator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseCountry()",
    "returnType" : "int",
    "comment" : "\n     * Advance index past country, and accumulate normalized country in buffer.\n     * Index must be immediately after the script (if there is one, else language)\n     * and IDSeparator.  Return the start of the country code in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void skipCountry()",
    "returnType" : "void",
    "comment" : "\n     * Advance index past country.\n     * Index must be immediately after the script (if there is one, else language)\n     * and IDSeparator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseVariant()",
    "returnType" : "int",
    "comment" : "\n     * Advance index past variant, and accumulate normalized variant in buffer.  This ignores\n     * the codepage information from POSIX ids.  Index must be immediately after the country\n     * or script.  Index is left at the keyword separator or at the end of the text.  Return\n     * the start of the variant code in the buffer.\n     *\n     * In standard form, we can have the following forms:\n     * ll__VVVV\n     * ll_CC_VVVV\n     * ll_Ssss_VVVV\n     * ll_Ssss_CC_VVVV\n     *\n     * This also handles POSIX ids, which can have the following forms (pppp is code page id):\n     * ll_CC.pppp          --> ll_CC\n     * ll_CC.pppp@VVVV     --> ll_CC_VVVV\n     * ll_CC@VVVV          --> ll_CC_VVVV\n     *\n     * We identify this use of '@' in POSIX ids by looking for an '=' following\n     * the '@'.  If there is one, we consider '@' to start a keyword list, instead of\n     * being part of a POSIX id.\n     *\n     * Note:  since it was decided that we want an option to not handle POSIX ids, this\n     * becomes a bit more complex.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLanguage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized language id, or the empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getScript()",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized script id, or the empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCountry()",
    "returnType" : "String",
    "comment" : "\n     * return the normalized country id, or the empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVariant()",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized variant id, or the empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getLanguageScriptCountryVariant()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the language, script, country, and variant as separate strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBaseName(String baseName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parseBaseName()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBaseName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized base form of the locale id.  The base\n     * form does not include keywords.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized full form of the locale id.  The full\n     * form includes keywords if they are present.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setToKeywordStart()",
    "returnType" : "boolean",
    "comment" : "\n     * If we have keywords, advance index to the start of the keywords and return true,\n     * otherwise return false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDoneOrKeywordAssign(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDoneOrItemSeparator(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getKeyword()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getValue()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Comparator<String> getKeyComparator()",
    "returnType" : "Comparator<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getKeywordMap()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Returns a map of the keywords and values, or null if there are none.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int parseKeywords()",
    "returnType" : "int",
    "comment" : "\n     * Parse the keywords and return start of the string in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<String> getKeywords()",
    "returnType" : "Iterator<String>",
    "comment" : "\n     * Returns an iterator over the keywords, or null if we have an empty map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKeywordValue(String keywordName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value for the named keyword, or null if the keyword is not\n     * present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void defaultKeywordValue(String keywordName, String value)",
    "returnType" : "void",
    "comment" : "\n     * Set the keyword value only if it is not already set to something else.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setKeywordValue(String keywordName, String value)",
    "returnType" : "void",
    "comment" : "\n     * Set the value for the named keyword, or unset it if value is null.  If\n     * keywordName itself is null, unset all keywords.  If keywordName is not null,\n     * value must not be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setKeywordValue(String keywordName, String value, boolean reset)",
    "returnType" : "void",
    "comment" : "\n     * Set the value for the named keyword, or unset it if value is null.  If\n     * keywordName itself is null, unset all keywords.  If keywordName is not null,\n     * value must not be null.  If reset is true, ignore any previous value for\n     * the keyword, otherwise do not change the keyword (including removal of\n     * one or all keywords).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void reset()", "private void append(char c)", "private void addSeparator()", "private String getString(int start)", "private void set(int pos, String s)", "private void append(String s)", "private char next()", "private void skipUntilTerminatorOrIDSeparator()", "private boolean atTerminator()", "private boolean isTerminator(char c)", "private boolean isTerminatorOrIDSeparator(char c)", "private boolean haveExperimentalLanguagePrefix()", "private boolean haveKeywordAssign()", "private int parseLanguage()", "private void skipLanguage()", "private int parseScript()", "private void skipScript()", "private int parseCountry()", "private void skipCountry()", "private int parseVariant()", "public String getLanguage()", "public String getScript()", "public String getCountry()", "public String getVariant()", "public String[] getLanguageScriptCountryVariant()", "public void setBaseName(String baseName)", "public void parseBaseName()", "public String getBaseName()", "public String getName()", "private boolean setToKeywordStart()", "private static boolean isDoneOrKeywordAssign(char c)", "private static boolean isDoneOrItemSeparator(char c)", "private String getKeyword()", "private String getValue()", "private Comparator<String> getKeyComparator()", "public Map<String, String> getKeywordMap()", "private int parseKeywords()", "public Iterator<String> getKeywords()", "public String getKeywordValue(String keywordName)", "public void defaultKeywordValue(String keywordName, String value)", "public void setKeywordValue(String keywordName, String value)", "private void setKeywordValue(String keywordName, String value, boolean reset)" ],
  "variableNames" : [ "id", "index", "buffer", "canonicalize", "hadCountry", "keywords", "baseName", "KEYWORD_SEPARATOR", "HYPHEN", "KEYWORD_ASSIGN", "COMMA", "ITEM_SEPARATOR", "DOT", "UNDERSCORE", "DONE", "MAX_VARIANTS_LENGTH" ]
}