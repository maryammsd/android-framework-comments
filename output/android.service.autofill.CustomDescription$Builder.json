{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/CustomDescription.java",
  "packageName" : "android.service.autofill",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link CustomDescription} objects.\n     ",
  "links" : [ "android.service.autofill.CustomDescription" ],
  "variables" : [ {
    "name" : "mPresentation",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransformations",
    "type" : "ArrayList<Pair<Integer, InternalTransformation>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdates",
    "type" : "ArrayList<Pair<InternalValidator, BatchUpdates>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActions",
    "type" : "SparseArray<InternalOnClickAction>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addChild(int id, @NonNull Transformation transformation)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a transformation to replace the value of a child view with the fields in the\n         * screen.\n         *\n         * <p>When multiple transformations are added for the same child view, they will be applied\n         * in the same order as added.\n         *\n         * @param id view id of the children view.\n         * @param transformation an implementation provided by the Android System.\n         *\n         * @return this builder.\n         *\n         * @throws IllegalArgumentException if {@code transformation} is not a class provided\n         * by the Android System.\n         * @throws IllegalStateException if {@link #build()} was already called.\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public Builder batchUpdate(@NonNull Validator condition, @NonNull BatchUpdates updates)",
    "returnType" : "Builder",
    "comment" : "\n         * Updates the {@link RemoteViews presentation template} when a condition is satisfied by\n         * applying a series of remote view operations. This allows dynamic customization of the\n         * portion of the save UI that is controlled by the autofill service. Such dynamic\n         * customization is based on the content of target views.\n         *\n         * <p>The updates are applied in the sequence they are added, after the\n         * {@link #addChild(int, Transformation) transformations} are applied to the children\n         * views.\n         *\n         * <p>For example, to make children views visible when fields are not empty:\n         *\n         * <pre class=\"prettyprint\">\n         * RemoteViews template = new RemoteViews(pgkName, R.layout.my_full_template);\n         *\n         * Pattern notEmptyPattern = Pattern.compile(\".+\");\n         * Validator hasAddress = new RegexValidator(addressAutofillId, notEmptyPattern);\n         * Validator hasCcNumber = new RegexValidator(ccNumberAutofillId, notEmptyPattern);\n         *\n         * RemoteViews addressUpdates = new RemoteViews(pgkName, R.layout.my_full_template)\n         * addressUpdates.setViewVisibility(R.id.address, View.VISIBLE);\n         *\n         * // Make address visible\n         * BatchUpdates addressBatchUpdates = new BatchUpdates.Builder()\n         *     .updateTemplate(addressUpdates)\n         *     .build();\n         *\n         * RemoteViews ccUpdates = new RemoteViews(pgkName, R.layout.my_full_template)\n         * ccUpdates.setViewVisibility(R.id.cc_number, View.VISIBLE);\n         *\n         * // Mask credit card number (as .....LAST_4_DIGITS) and make it visible\n         * BatchUpdates ccBatchUpdates = new BatchUpdates.Builder()\n         *     .updateTemplate(ccUpdates)\n         *     .transformChild(R.id.templateCcNumber, new CharSequenceTransformation\n         *                     .Builder(ccNumberId, Pattern.compile(\"^.*(\\\\d\\\\d\\\\d\\\\d)$\"), \"...$1\")\n         *                     .build())\n         *     .build();\n         *\n         * CustomDescription customDescription = new CustomDescription.Builder(template)\n         *     .batchUpdate(hasAddress, addressBatchUpdates)\n         *     .batchUpdate(hasCcNumber, ccBatchUpdates)\n         *     .build();\n         * </pre>\n         *\n         * <p>Another approach is to add a child first, then apply the transformations. Example:\n         *\n         * <pre class=\"prettyprint\">\n         * RemoteViews template = new RemoteViews(pgkName, R.layout.my_base_template);\n         *\n         * RemoteViews addressPresentation = new RemoteViews(pgkName, R.layout.address)\n         * RemoteViews addressUpdates = new RemoteViews(pgkName, R.layout.my_template)\n         * addressUpdates.addView(R.id.parentId, addressPresentation);\n         * BatchUpdates addressBatchUpdates = new BatchUpdates.Builder()\n         *     .updateTemplate(addressUpdates)\n         *     .build();\n         *\n         * RemoteViews ccPresentation = new RemoteViews(pgkName, R.layout.cc)\n         * RemoteViews ccUpdates = new RemoteViews(pgkName, R.layout.my_template)\n         * ccUpdates.addView(R.id.parentId, ccPresentation);\n         * BatchUpdates ccBatchUpdates = new BatchUpdates.Builder()\n         *     .updateTemplate(ccUpdates)\n         *     .transformChild(R.id.templateCcNumber, new CharSequenceTransformation\n         *                     .Builder(ccNumberId, Pattern.compile(\"^.*(\\\\d\\\\d\\\\d\\\\d)$\"), \"...$1\")\n         *                     .build())\n         *     .build();\n         *\n         * CustomDescription customDescription = new CustomDescription.Builder(template)\n         *     .batchUpdate(hasAddress, addressBatchUpdates)\n         *     .batchUpdate(hasCcNumber, ccBatchUpdates)\n         *     .build();\n         * </pre>\n         *\n         * @param condition condition used to trigger the updates.\n         * @param updates actions to be applied to the\n         * {@link #Builder(RemoteViews) template presentation} when the condition\n         * is satisfied.\n         *\n         * @return this builder\n         *\n         * @throws IllegalArgumentException if {@code condition} is not a class provided\n         * by the Android System.\n         * @throws IllegalStateException if {@link #build()} was already called.\n         ",
    "links" : [ "android.widget.RemoteViews", "#Builder(RemoteViews)", "#build()", "#addChild(int" ]
  }, {
    "name" : "public Builder addOnClickAction(int id, @NonNull OnClickAction action)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an action to be applied to the {@link RemoteViews presentation template} when the\n         * child view with the given {@code id} is clicked.\n         *\n         * <p>Typically used when the presentation uses a masked field (like {@code ****}) for\n         * sensitive fields like passwords or credit cards numbers, but offers a an icon that the\n         * user can tap to show the value for that field.\n         *\n         * <p>Example:\n         *\n         * <pre class=\"prettyprint\">\n         * customDescriptionBuilder\n         *   .addChild(R.id.password_plain, new CharSequenceTransformation\n         *      .Builder(passwordId, Pattern.compile(\"^(.*)$\"), \"$1\").build())\n         *   .addOnClickAction(R.id.showIcon, new VisibilitySetterAction\n         *     .Builder(R.id.hideIcon, View.VISIBLE)\n         *     .setVisibility(R.id.showIcon, View.GONE)\n         *     .setVisibility(R.id.password_plain, View.VISIBLE)\n         *     .setVisibility(R.id.password_masked, View.GONE)\n         *     .build())\n         *   .addOnClickAction(R.id.hideIcon, new VisibilitySetterAction\n         *     .Builder(R.id.showIcon, View.VISIBLE)\n         *     .setVisibility(R.id.hideIcon, View.GONE)\n         *     .setVisibility(R.id.password_masked, View.VISIBLE)\n         *     .setVisibility(R.id.password_plain, View.GONE)\n         *     .build());\n         * </pre>\n         *\n         * <p><b>Note:</b> Currently only one action can be applied to a child; if this method\n         * is called multiple times passing the same {@code id}, only the last call will be used.\n         *\n         * @param id resource id of the child view.\n         * @param action action to be performed. Must be an an implementation provided by the\n         * Android System.\n         *\n         * @return this builder\n         *\n         * @throws IllegalArgumentException if {@code action} is not a class provided\n         * by the Android System.\n         * @throws IllegalStateException if {@link #build()} was already called.\n         ",
    "links" : [ "android.widget.RemoteViews", "#build()" ]
  }, {
    "name" : "public CustomDescription build()",
    "returnType" : "CustomDescription",
    "comment" : "\n         * Creates a new {@link CustomDescription} instance.\n         ",
    "links" : [ "android.service.autofill.CustomDescription" ]
  }, {
    "name" : "private void throwIfDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder addChild(int id, @NonNull Transformation transformation)", "public Builder batchUpdate(@NonNull Validator condition, @NonNull BatchUpdates updates)", "public Builder addOnClickAction(int id, @NonNull OnClickAction action)", "public CustomDescription build()", "private void throwIfDestroyed()" ],
  "variableNames" : [ "mPresentation", "mDestroyed", "mTransformations", "mUpdates", "mActions" ]
}