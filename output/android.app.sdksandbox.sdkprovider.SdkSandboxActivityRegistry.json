{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/sdksandbox/sdkprovider/SdkSandboxActivityRegistry.java",
  "packageName" : "android.app.sdksandbox.sdkprovider",
  "className" : "SdkSandboxActivityRegistry",
  "comment" : "\n * It is a Singleton class to store the registered {@link SdkSandboxActivityHandler} instances and\n * their associated {@link Activity} instances.\n *\n * @hide\n ",
  "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.app.Activity" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "SdkSandboxActivityRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMapsLock",
    "type" : "Object",
    "comment" : " A lock to keep all map synchronized",
    "links" : [ ]
  }, {
    "name" : "mInjector",
    "type" : "Injector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlerToHandlerInfoMap",
    "type" : "Map<SdkSandboxActivityHandler, HandlerInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTokenToHandlerInfoMap",
    "type" : "Map<IBinder, HandlerInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SdkSandboxActivityRegistry getInstance()",
    "returnType" : "SdkSandboxActivityRegistry",
    "comment" : " Returns a singleton instance of this class. ",
    "links" : [ ]
  }, {
    "name" : "public static SdkSandboxActivityRegistry getInstance(@NonNull Injector injector)",
    "returnType" : "SdkSandboxActivityRegistry",
    "comment" : "\n     * Returns a singleton instance of this class with a custom {@link Injector}. If the instance\n     * already exists, overrides old injector with the new one.\n     *\n     * @hide\n     ",
    "links" : [ "Injector" ]
  }, {
    "name" : "private void setInjector(@NonNull Injector injector)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder register(@NonNull SandboxedSdkContext sdkContext, @NonNull SdkSandboxActivityHandler handler)",
    "returnType" : "IBinder",
    "comment" : "\n     * Registers the passed {@link SdkSandboxActivityHandler} and returns a {@link IBinder} token\n     * that identifies it.\n     *\n     * <p>If {@link SdkSandboxActivityHandler} is already registered, its {@link IBinder} identifier\n     * will be returned.\n     *\n     * @param sdkContext is the {@link SandboxedSdkContext} which is registering the {@link\n     *     SdkSandboxActivityHandler}\n     * @param handler is the {@link SdkSandboxActivityHandler} to register.\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.app.sdksandbox.SandboxedSdkContext", "android.os.IBinder" ]
  }, {
    "name" : "public void unregister(@NonNull SdkSandboxActivityHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the passed {@link SdkSandboxActivityHandler}.\n     *\n     * @param handler is the {@link SdkSandboxActivityHandler} to unregister.\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler" ]
  }, {
    "name" : "public void notifyOnActivityCreation(@NonNull Intent intent, @NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the SDK about {@link Activity} creation.\n     *\n     * <p>This should be called by the sandbox {@link Activity} while being created to notify the\n     * SDK that registered the {@link SdkSandboxActivityHandler} that identified by an {@link\n     * IBinder} token which be part of the passed {@link Intent} extras.\n     *\n     * @param intent the {@link Intent} that contains an {@link IBinder} identifier for the {@link\n     *     SdkSandboxActivityHandler} in its extras.\n     * @param activity the {@link Activity} is being created.\n     * @throws IllegalArgumentException if the passed {@link Intent} does not have the handler token\n     *     in its extras or there is no registered handler for the passed handler token (that mostly\n     *     would mean that the handler is de-registered before the passed {@link Activity} is\n     *     created), on both cases the passed {@link Activity} will not start.\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.content.Intent", "android.app.Activity", "android.os.IBinder" ]
  }, {
    "name" : "public ActivityContextInfo getContextInfo(@NonNull Intent intent)",
    "returnType" : "ActivityContextInfo",
    "comment" : "\n     * Returns {@link ActivityContextInfo} instance containing the information which is needed to\n     * build the sandbox activity {@link android.content.Context} for the passed {@link Intent}.\n     *\n     * @param intent an {@link Intent} for a sandbox {@link Activity} containing information to\n     *     identify the SDK which requested the activity.\n     * @return {@link ActivityContextInfo} instance if the intent refers to a registered {@link\n     *     SdkSandboxActivityHandler}, otherwise {@code null}.\n     * @throws IllegalStateException if Customized SDK Context flag is not enabled\n     ",
    "links" : [ "android.app.sdksandbox.sandboxactivity.ActivityContextInfo", "android.content.Context", "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.content.Intent", "android.app.Activity" ]
  }, {
    "name" : "public SandboxedSdkContext getSdkContext(@NonNull Intent intent)",
    "returnType" : "SandboxedSdkContext",
    "comment" : "\n     * Returns the SDK {@link SandboxedSdkContext} which requested the activity for the passed\n     * {@link Intent}.\n     *\n     * @param intent the {@link Intent} that contains an {@link IBinder} identifier for the {@link\n     *     SdkSandboxActivityHandler} in its extras.\n     * @return SDK {@link SandboxedSdkContext} if its handler is registered, otherwise {@code null}`\n     *     .\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.content.Intent", "android.app.sdksandbox.SandboxedSdkContext", "android.os.IBinder" ]
  }, {
    "name" : "private IBinder extractHandlerToken(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long extractActivityInitiationTime(Intent intent)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logSandboxActivityApiLatency(int method, int callResult, long timeEventStarted)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterAllActivityHandlersForSdk(@NonNull String sdkName)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters all {@link SdkSandboxActivityHandler} instances that are registered by the passed\n     * SDK.\n     *\n     * <p>This is expected to be called by the system when an SDK is unloaded to free memory.\n     *\n     * @param sdkName the name of the SDK to unregister its registered handlers\n     ",
    "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler" ]
  } ],
  "methodNames" : [ "public static SdkSandboxActivityRegistry getInstance()", "public static SdkSandboxActivityRegistry getInstance(@NonNull Injector injector)", "private void setInjector(@NonNull Injector injector)", "public IBinder register(@NonNull SandboxedSdkContext sdkContext, @NonNull SdkSandboxActivityHandler handler)", "public void unregister(@NonNull SdkSandboxActivityHandler handler)", "public void notifyOnActivityCreation(@NonNull Intent intent, @NonNull Activity activity)", "public ActivityContextInfo getContextInfo(@NonNull Intent intent)", "public SandboxedSdkContext getSdkContext(@NonNull Intent intent)", "private IBinder extractHandlerToken(Intent intent)", "private long extractActivityInitiationTime(Intent intent)", "private void logSandboxActivityApiLatency(int method, int callResult, long timeEventStarted)", "public void unregisterAllActivityHandlersForSdk(@NonNull String sdkName)" ],
  "variableNames" : [ "TAG", "sLock", "sInstance", "mMapsLock", "mInjector", "mHandlerToHandlerInfoMap", "mTokenToHandlerInfoMap" ]
}