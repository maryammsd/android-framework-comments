{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/ScriptGroup.java",
  "packageName" : "android.renderscript",
  "className" : "ScriptGroup",
  "comment" : "\n * A group of kernels that are executed\n * together with one execution call as if they were a single kernel\n * <p>\n * In addition to kernels, a script group may contain invocable functions as well.\n * A script group may take inputs and generate outputs, which are consumed and\n * produced by its member kernels.\n * Inside a script group, outputs from one kernel can be passed to another kernel as inputs.\n * The API disallows cyclic dependencies among kernels in a script group,\n * effectively making it a directed acyclic graph (DAG) of kernels.\n * <p>\n * Grouping kernels together allows for more efficient execution. For example,\n * runtime and compiler optimization can be applied to reduce computation and\n * communication overhead, and to make better use of the CPU and the GPU.\n *",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputs",
    "type" : "IO[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputs",
    "type" : "IO[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosures",
    "type" : "List<Closure>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputs2",
    "type" : "List<Input>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputs2",
    "type" : "Future[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object[] execute(Object... inputs)",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInput(Script.KernelID s, Allocation a)",
    "returnType" : "void",
    "comment" : "\n     * Sets an input of the ScriptGroup. This specifies an\n     * Allocation to be used for kernels that require an input\n     * Allocation provided from outside of the ScriptGroup.\n     *\n     * @deprecated Set arguments to {@link #execute(Object...)} instead.\n     *\n     * @param s The ID of the kernel where the allocation should be\n     *          connected.\n     * @param a The allocation to connect.\n     ",
    "links" : [ "#execute(Object...)" ]
  }, {
    "name" : "public void setOutput(Script.KernelID s, Allocation a)",
    "returnType" : "void",
    "comment" : "\n     * Sets an output of the ScriptGroup. This specifies an\n     * Allocation to be used for the kernels that require an output\n     * Allocation visible after the ScriptGroup is executed.\n     *\n     * @deprecated Use return value of {@link #execute(Object...)} instead.\n     *\n     * @param s The ID of the kernel where the allocation should be\n     *          connected.\n     * @param a The allocation to connect.\n     ",
    "links" : [ "#execute(Object...)" ]
  }, {
    "name" : "public void execute()",
    "returnType" : "void",
    "comment" : "\n     * Execute the ScriptGroup.  This will run all the kernels in\n     * the ScriptGroup.  No internal connection results will be visible\n     * after execution of the ScriptGroup.\n     *\n     * @deprecated Use {@link #execute} instead.\n     *\n     ",
    "links" : [ "#execute" ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroy this ScriptGroup and all Closures in it\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mOutputs", "mInputs", "mName", "mClosures", "mInputs2", "mOutputs2" ],
  "methodNames" : [ "public Object[] execute(Object... inputs)", "public void setInput(Script.KernelID s, Allocation a)", "public void setOutput(Script.KernelID s, Allocation a)", "public void execute()", "public void destroy()" ]
}