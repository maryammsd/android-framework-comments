{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/LargeBitmap.java",
  "packageName" : "android.graphics",
  "className" : "LargeBitmap",
  "comment" : "\n * LargeBitmap can be used to decode a rectangle region from an image.\n * LargeBimap is particularly useful when an original image is large and\n * you only need parts of the image.\n *\n * To create a LargeBitmap, call BitmapFactory.createLargeBitmap().\n * Given a LargeBitmap, users can call decodeRegion() repeatedly\n * to get a decoded Bitmap of the specified region.\n * @hide\n ",
  "variables" : [ {
    "name" : "mNativeLargeBitmap",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Bitmap decodeRegion(Rect rect, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Decodes a rectangle region in the image specified by rect.\n     *\n     * @param rect The rectangle that specified the region to be decode.\n     * @param opts null-ok; Options that control downsampling.\n     *             inPurgeable is not supported.\n     * @return The decoded bitmap, or null if the image data could not be\n     *         decoded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : " Returns the original image's width ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : " Returns the original image's height ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Frees up the memory associated with this large bitmap, and mark the\n     * large bitmap as \"dead\", meaning it will throw an exception if decodeRegion(),\n     * getWidth() or getHeight() is called.\n     * This operation cannot be reversed, so it should only be called if you are\n     * sure there are no further uses for the large bitmap. This is an advanced call,\n     * and normally need not be called, since the normal GC process will free up this\n     * memory when there are no more references to this bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isRecycled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this large bitmap has been recycled.\n     * If so, then it is an error to try use its method.\n     *\n     * @return true if the large bitmap has been recycled\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkRecycled(String errorMessage)",
    "returnType" : "void",
    "comment" : "\n     * Called by methods that want to throw an exception if the bitmap\n     * has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Bitmap nativeDecodeRegion(long nativeLbm, int start_x, int start_y, int width, int height, BitmapFactory.Options options)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetWidth(long nativeLbm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetHeight(long nativeLbm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClean(long nativeLbm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mNativeLargeBitmap", "mRecycled" ],
  "methodNames" : [ "public Bitmap decodeRegion(Rect rect, BitmapFactory.Options options)", "public int getWidth()", "public int getHeight()", "public void recycle()", "public final boolean isRecycled()", "private void checkRecycled(String errorMessage)", "protected void finalize()", "private static native Bitmap nativeDecodeRegion(long nativeLbm, int start_x, int start_y, int width, int height, BitmapFactory.Options options)", "private static native int nativeGetWidth(long nativeLbm)", "private static native int nativeGetHeight(long nativeLbm)", "private static native void nativeClean(long nativeLbm)" ]
}