{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/lang/UProperty.java",
  "packageName" : "android.icu.lang",
  "className" : "UProperty",
  "comment" : "\n * <p>Selection constants for Unicode properties.\n * <p>These constants are used in functions like\n * UCharacter.hasBinaryProperty(int) to select one of the Unicode properties.\n *\n * <p>The properties APIs are intended to reflect Unicode properties as\n * defined in the Unicode Character Database (UCD) and Unicode Technical\n * Reports (UTR).\n * <p>For details about the properties see\n * <a href=\"http://www.unicode.org/reports/tr44/\">UAX #44: Unicode Character Database</a>.\n *\n * <p>Important: If ICU is built with UCD files from Unicode versions below\n * 3.2, then properties marked with \"new\" are not or not fully\n * available. Check UCharacter.getUnicodeVersion() to be sure.\n * @author Syn Wee Quek\n * @see android.icu.lang.UCharacter\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Special value indicating undefined property.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ALPHABETIC",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Alphabetic.\n     * <p>Property for UCharacter.isUAlphabetic(), different from the property\n     * in UCharacter.isalpha().\n     * <p>Lu + Ll + Lt + Lm + Lo + Nl + Other_Alphabetic.\n     ",
    "links" : [ ]
  }, {
    "name" : "BINARY_START",
    "type" : "int",
    "comment" : "\n     * First constant for binary Unicode properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "ASCII_HEX_DIGIT",
    "type" : "int",
    "comment" : "\n     * Binary property ASCII_Hex_Digit (0-9 A-F a-f).\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_CONTROL",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Bidi_Control.\n     * <p>Format controls which have specific functions in the Bidi Algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_MIRRORED",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Bidi_Mirrored.\n     * <p>Characters that may change display in RTL text.\n     * <p>Property for UCharacter.isMirrored().\n     * <p>See Bidi Algorithm; UTR 9.\n     ",
    "links" : [ ]
  }, {
    "name" : "DASH",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Dash.\n     * <p>Variations of dashes.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_IGNORABLE_CODE_POINT",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Default_Ignorable_Code_Point (new).\n     *\n     * <p>Property that indicates codepoint is ignorable in most processing.\n     *\n     * <p>Codepoints (2060..206F, FFF0..FFFB, E0000..E0FFF) +\n     * Other_Default_Ignorable_Code_Point + (Cf + Cc + Cs - White_Space)\n     ",
    "links" : [ ]
  }, {
    "name" : "DEPRECATED",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Deprecated (new).\n     * <p>The usage of deprecated characters is strongly discouraged.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIACRITIC",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Diacritic.\n     * <p>Characters that linguistically modify the meaning of another\n     * character to which they apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENDER",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Extender.\n     * <p>Extend the value or shape of a preceding alphabetic character, e.g.\n     * length and iteration marks.\n     ",
    "links" : [ ]
  }, {
    "name" : "FULL_COMPOSITION_EXCLUSION",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Full_Composition_Exclusion.\n     * <p>CompositionExclusions.txt + Singleton Decompositions +\n     * Non-Starter Decompositions.\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_BASE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Grapheme_Base (new).\n     * <p>For programmatic determination of grapheme cluster boundaries.\n     * [0..10FFFF]-Cc-Cf-Cs-Co-Cn-Zl-Zp-Grapheme_Link-Grapheme_Extend-CGJ\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_EXTEND",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Grapheme_Extend (new).\n     * <p>For programmatic determination of grapheme cluster boundaries.\n     * <p>Me+Mn+Mc+Other_Grapheme_Extend-Grapheme_Link-CGJ\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_LINK",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Grapheme_Link (new).\n     * <p>For programmatic determination of grapheme cluster boundaries.\n     ",
    "links" : [ ]
  }, {
    "name" : "HEX_DIGIT",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Hex_Digit.\n     * <p>Characters commonly used for hexadecimal numbers.\n     ",
    "links" : [ ]
  }, {
    "name" : "HYPHEN",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Hyphen.\n     * <p>Dashes used to mark connections between pieces of words, plus the\n     * Katakana middle dot.\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_CONTINUE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property ID_Continue.\n     * <p>Characters that can continue an identifier.\n     * <p>ID_Start+Mn+Mc+Nd+Pc\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_START",
    "type" : "int",
    "comment" : "\n     * <p>Binary property ID_Start.\n     * <p>Characters that can start an identifier.\n     * <p>Lu+Ll+Lt+Lm+Lo+Nl\n     ",
    "links" : [ ]
  }, {
    "name" : "IDEOGRAPHIC",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Ideographic.\n     * <p>CJKV ideographs.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDS_BINARY_OPERATOR",
    "type" : "int",
    "comment" : "\n     * <p>Binary property IDS_Binary_Operator (new).\n     * <p>For programmatic determination of Ideographic Description Sequences.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDS_TRINARY_OPERATOR",
    "type" : "int",
    "comment" : "\n     * <p>Binary property IDS_Trinary_Operator (new).\n     * <p>For programmatic determination of Ideographic Description\n     * Sequences.\n     ",
    "links" : [ ]
  }, {
    "name" : "JOIN_CONTROL",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Join_Control.\n     * <p>Format controls for cursive joining and ligation.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOGICAL_ORDER_EXCEPTION",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Logical_Order_Exception (new).\n     * <p>Characters that do not use logical order and require special\n     * handling in most processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOWERCASE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Lowercase.\n     * <p>Same as UCharacter.isULowercase(), different from\n     * UCharacter.islower().\n     * <p>Ll+Other_Lowercase\n     ",
    "links" : [ ]
  }, {
    "name" : "MATH",
    "type" : "int",
    "comment" : " <p>Binary property Math.\n     * <p>Sm+Other_Math\n     ",
    "links" : [ ]
  }, {
    "name" : "NONCHARACTER_CODE_POINT",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Noncharacter_Code_Point.\n     * <p>Code points that are explicitly defined as illegal for the encoding\n     * of characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUOTATION_MARK",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Quotation_Mark.\n     ",
    "links" : [ ]
  }, {
    "name" : "RADICAL",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Radical (new).\n     * <p>For programmatic determination of Ideographic Description\n     * Sequences.\n     ",
    "links" : [ ]
  }, {
    "name" : "SOFT_DOTTED",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Soft_Dotted (new).\n     * <p>Characters with a \"soft dot\", like i or j.\n     * <p>An accent placed on these characters causes the dot to disappear.\n     ",
    "links" : [ ]
  }, {
    "name" : "TERMINAL_PUNCTUATION",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Terminal_Punctuation.\n     * <p>Punctuation characters that generally mark the end of textual\n     * units.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNIFIED_IDEOGRAPH",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Unified_Ideograph (new).\n     * <p>For programmatic determination of Ideographic Description\n     * Sequences.\n     ",
    "links" : [ ]
  }, {
    "name" : "UPPERCASE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Uppercase.\n     * <p>Same as UCharacter.isUUppercase(), different from\n     * UCharacter.isUpperCase().\n     * <p>Lu+Other_Uppercase\n     ",
    "links" : [ ]
  }, {
    "name" : "WHITE_SPACE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property White_Space.\n     * <p>Same as UCharacter.isUWhiteSpace(), different from\n     * UCharacter.isSpace() and UCharacter.isWhitespace().\n     * Space characters+TAB+CR+LF-ZWSP-ZWNBSP\n     ",
    "links" : [ ]
  }, {
    "name" : "XID_CONTINUE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property XID_Continue.\n     * <p>ID_Continue modified to allow closure under normalization forms\n     * NFKC and NFKD.\n     ",
    "links" : [ ]
  }, {
    "name" : "XID_START",
    "type" : "int",
    "comment" : "\n     * <p>Binary property XID_Start.\n     * <p>ID_Start modified to allow closure under normalization forms NFKC\n     * and NFKD.\n     ",
    "links" : [ ]
  }, {
    "name" : "CASE_SENSITIVE",
    "type" : "int",
    "comment" : "\n     * <p>Binary property Case_Sensitive.\n     * <p>Either the source of a case\n     * mapping or <i>in</i> the target of a case mapping. Not the same as\n     * the general category Cased_Letter.\n     ",
    "links" : [ ]
  }, {
    "name" : "S_TERM",
    "type" : "int",
    "comment" : "\n     * Binary property STerm (new in Unicode 4.0.1).\n     * Sentence Terminal. Used in UAX #29: Text Boundaries\n     * (http://www.unicode.org/reports/tr29/)\n     ",
    "links" : [ ]
  }, {
    "name" : "VARIATION_SELECTOR",
    "type" : "int",
    "comment" : "\n     * Binary property Variation_Selector (new in Unicode 4.0.1).\n     * Indicates all those characters that qualify as Variation Selectors.\n     * For details on the behavior of these characters,\n     * see StandardizedVariants.html and 15.6 Variation Selectors.\n     ",
    "links" : [ ]
  }, {
    "name" : "NFD_INERT",
    "type" : "int",
    "comment" : "\n     * Binary property NFD_Inert.\n     * ICU-specific property for characters that are inert under NFD,\n     * i.e., they do not interact with adjacent characters.\n     * Used for example in normalizing transforms in incremental mode\n     * to find the boundary of safely normalizable text despite possible\n     * text additions.\n     *\n     * There is one such property per normalization form.\n     * These properties are computed as follows - an inert character is:\n     * a) unassigned, or ALL of the following:\n     * b) of combining class 0.\n     * c) not decomposed by this normalization form.\n     * AND if NFC or NFKC,\n     * d) can never compose with a previous character.\n     * e) can never compose with a following character.\n     * f) can never change if another character is added.\n     * Example: a-breve might satisfy all but f, but if you\n     * add an ogonek it changes to a-ogonek + breve\n     *\n     * See also com.ibm.text.UCD.NFSkippable in the ICU4J repository,\n     * and icu/source/common/unormimp.h .\n     ",
    "links" : [ ]
  }, {
    "name" : "NFKD_INERT",
    "type" : "int",
    "comment" : "\n     * Binary property NFKD_Inert.\n     * ICU-specific property for characters that are inert under NFKD,\n     * i.e., they do not interact with adjacent characters.\n     * Used for example in normalizing transforms in incremental mode\n     * to find the boundary of safely normalizable text despite possible\n     * text additions.\n     * @see #NFD_INERT\n     ",
    "links" : [ ]
  }, {
    "name" : "NFC_INERT",
    "type" : "int",
    "comment" : "\n     * Binary property NFC_Inert.\n     * ICU-specific property for characters that are inert under NFC,\n     * i.e., they do not interact with adjacent characters.\n     * Used for example in normalizing transforms in incremental mode\n     * to find the boundary of safely normalizable text despite possible\n     * text additions.\n     * @see #NFD_INERT\n     ",
    "links" : [ ]
  }, {
    "name" : "NFKC_INERT",
    "type" : "int",
    "comment" : "\n     * Binary property NFKC_Inert.\n     * ICU-specific property for characters that are inert under NFKC,\n     * i.e., they do not interact with adjacent characters.\n     * Used for example in normalizing transforms in incremental mode\n     * to find the boundary of safely normalizable text despite possible\n     * text additions.\n     * @see #NFD_INERT\n     ",
    "links" : [ ]
  }, {
    "name" : "SEGMENT_STARTER",
    "type" : "int",
    "comment" : "\n     * Binary Property Segment_Starter.\n     * ICU-specific property for characters that are starters in terms of\n     * Unicode normalization and combining character sequences.\n     * They have ccc=0 and do not occur in non-initial position of the\n     * canonical decomposition of any character\n     * (like \" in NFD(a-umlaut) and a Jamo T in an NFD(Hangul LVT)).\n     * ICU uses this property for segmenting a string for generating a set of\n     * canonically equivalent strings, e.g. for canonical closure while\n     * processing collation tailoring rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "PATTERN_SYNTAX",
    "type" : "int",
    "comment" : "\n     * Binary property Pattern_Syntax (new in Unicode 4.1).\n     * See UAX #31 Identifier and Pattern Syntax\n     * (http://www.unicode.org/reports/tr31/)\n     ",
    "links" : [ ]
  }, {
    "name" : "PATTERN_WHITE_SPACE",
    "type" : "int",
    "comment" : "\n     * Binary property Pattern_White_Space (new in Unicode 4.1).\n     * See UAX #31 Identifier and Pattern Syntax\n     * (http://www.unicode.org/reports/tr31/)\n     ",
    "links" : [ ]
  }, {
    "name" : "POSIX_ALNUM",
    "type" : "int",
    "comment" : "\n     * Binary property alnum (a C/POSIX character class).\n     * Implemented according to the UTS #18 Annex C Standard Recommendation.\n     * See the UCharacter class documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSIX_BLANK",
    "type" : "int",
    "comment" : "\n     * Binary property blank (a C/POSIX character class).\n     * Implemented according to the UTS #18 Annex C Standard Recommendation.\n     * See the UCharacter class documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSIX_GRAPH",
    "type" : "int",
    "comment" : "\n     * Binary property graph (a C/POSIX character class).\n     * Implemented according to the UTS #18 Annex C Standard Recommendation.\n     * See the UCharacter class documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSIX_PRINT",
    "type" : "int",
    "comment" : "\n     * Binary property print (a C/POSIX character class).\n     * Implemented according to the UTS #18 Annex C Standard Recommendation.\n     * See the UCharacter class documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSIX_XDIGIT",
    "type" : "int",
    "comment" : "\n     * Binary property xdigit (a C/POSIX character class).\n     * Implemented according to the UTS #18 Annex C Standard Recommendation.\n     * See the UCharacter class documentation.\n     ",
    "links" : [ ]
  }, {
    "name" : "CASED",
    "type" : "int",
    "comment" : "\n     * Binary property Cased.\n     * For Lowercase, Uppercase and Titlecase characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "CASE_IGNORABLE",
    "type" : "int",
    "comment" : "\n     * Binary property Case_Ignorable.\n     * Used in context-sensitive case mappings.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGES_WHEN_LOWERCASED",
    "type" : "int",
    "comment" : "\n     * Binary property Changes_When_Lowercased.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGES_WHEN_UPPERCASED",
    "type" : "int",
    "comment" : "\n     * Binary property Changes_When_Uppercased.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGES_WHEN_TITLECASED",
    "type" : "int",
    "comment" : "\n     * Binary property Changes_When_Titlecased.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGES_WHEN_CASEFOLDED",
    "type" : "int",
    "comment" : "\n     * Binary property Changes_When_Casefolded.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGES_WHEN_CASEMAPPED",
    "type" : "int",
    "comment" : "\n     * Binary property Changes_When_Casemapped.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGES_WHEN_NFKC_CASEFOLDED",
    "type" : "int",
    "comment" : "\n     * Binary property Changes_When_NFKC_Casefolded.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMOJI",
    "type" : "int",
    "comment" : "\n     * Binary property Emoji.\n     * See http://www.unicode.org/reports/tr51/#Emoji_Properties\n     ",
    "links" : [ ]
  }, {
    "name" : "EMOJI_PRESENTATION",
    "type" : "int",
    "comment" : "\n     * Binary property Emoji_Presentation.\n     * See http://www.unicode.org/reports/tr51/#Emoji_Properties\n     ",
    "links" : [ ]
  }, {
    "name" : "EMOJI_MODIFIER",
    "type" : "int",
    "comment" : "\n     * Binary property Emoji_Modifier.\n     * See http://www.unicode.org/reports/tr51/#Emoji_Properties\n     ",
    "links" : [ ]
  }, {
    "name" : "EMOJI_MODIFIER_BASE",
    "type" : "int",
    "comment" : "\n     * Binary property Emoji_Modifier_Base.\n     * See http://www.unicode.org/reports/tr51/#Emoji_Properties\n     ",
    "links" : [ ]
  }, {
    "name" : "EMOJI_COMPONENT",
    "type" : "int",
    "comment" : "\n     * Binary property Emoji_Component.\n     * See http://www.unicode.org/reports/tr51/#Emoji_Properties\n     ",
    "links" : [ ]
  }, {
    "name" : "REGIONAL_INDICATOR",
    "type" : "int",
    "comment" : "\n     * Binary property Regional_Indicator.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREPENDED_CONCATENATION_MARK",
    "type" : "int",
    "comment" : "\n     * Binary property Prepended_Concatenation_Mark.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENDED_PICTOGRAPHIC",
    "type" : "int",
    "comment" : "\n     * Binary property Extended_Pictographic.\n     * See http://www.unicode.org/reports/tr51/#Emoji_Properties\n     ",
    "links" : [ ]
  }, {
    "name" : "BASIC_EMOJI",
    "type" : "int",
    "comment" : "\n     * Binary property of strings Basic_Emoji.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "EMOJI_KEYCAP_SEQUENCE",
    "type" : "int",
    "comment" : "\n     * Binary property of strings Emoji_Keycap_Sequence.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "RGI_EMOJI_MODIFIER_SEQUENCE",
    "type" : "int",
    "comment" : "\n     * Binary property of strings RGI_Emoji_Modifier_Sequence.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "RGI_EMOJI_FLAG_SEQUENCE",
    "type" : "int",
    "comment" : "\n     * Binary property of strings RGI_Emoji_Flag_Sequence.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "RGI_EMOJI_TAG_SEQUENCE",
    "type" : "int",
    "comment" : "\n     * Binary property of strings RGI_Emoji_Tag_Sequence.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "RGI_EMOJI_ZWJ_SEQUENCE",
    "type" : "int",
    "comment" : "\n     * Binary property of strings RGI_Emoji_ZWJ_Sequence.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "RGI_EMOJI",
    "type" : "int",
    "comment" : "\n     * Binary property of strings RGI_Emoji.\n     * See https://www.unicode.org/reports/tr51/#Emoji_Sets\n     ",
    "links" : [ ]
  }, {
    "name" : "IDS_UNARY_OPERATOR",
    "type" : "int",
    "comment" : "\n     * Binary property IDS_Unary_Operator.\n     * For programmatic determination of Ideographic Description Sequences.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_COMPAT_MATH_START",
    "type" : "int",
    "comment" : "\n     * Binary property ID_Compat_Math_Start.\n     * <p>Used in mathematical identifier profile in UAX #31.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_COMPAT_MATH_CONTINUE",
    "type" : "int",
    "comment" : "\n     * Binary property ID_Compat_Math_Continue.\n     * <p>Used in mathematical identifier profile in UAX #31.\n     *\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "BINARY_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the last constant for binary Unicode properties.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_CLASS",
    "type" : "int",
    "comment" : "\n     * Enumerated property Bidi_Class.\n     * Same as UCharacter.getDirection(int), returns UCharacterDirection values.\n     ",
    "links" : [ ]
  }, {
    "name" : "INT_START",
    "type" : "int",
    "comment" : "\n     * First constant for enumerated/integer Unicode properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "BLOCK",
    "type" : "int",
    "comment" : "\n     * Enumerated property Block.\n     * Same as UCharacter.UnicodeBlock.of(int), returns UCharacter.UnicodeBlock\n     * values.\n     ",
    "links" : [ ]
  }, {
    "name" : "CANONICAL_COMBINING_CLASS",
    "type" : "int",
    "comment" : "\n     * Enumerated property Canonical_Combining_Class.\n     * Same as UCharacter.getCombiningClass(int), returns 8-bit numeric values.\n     ",
    "links" : [ ]
  }, {
    "name" : "DECOMPOSITION_TYPE",
    "type" : "int",
    "comment" : "\n     * Enumerated property Decomposition_Type.\n     * Returns UCharacter.DecompositionType values.\n     ",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_WIDTH",
    "type" : "int",
    "comment" : "\n     * Enumerated property East_Asian_Width.\n     * See http://www.unicode.org/reports/tr11/\n     * Returns UCharacter.EastAsianWidth values.\n     ",
    "links" : [ ]
  }, {
    "name" : "GENERAL_CATEGORY",
    "type" : "int",
    "comment" : "\n     * Enumerated property General_Category.\n     * Same as UCharacter.getType(int), returns UCharacterCategory values.\n     ",
    "links" : [ ]
  }, {
    "name" : "JOINING_GROUP",
    "type" : "int",
    "comment" : "\n     * Enumerated property Joining_Group.\n     * Returns UCharacter.JoiningGroup values.\n     ",
    "links" : [ ]
  }, {
    "name" : "JOINING_TYPE",
    "type" : "int",
    "comment" : "\n     * Enumerated property Joining_Type.\n     * Returns UCharacter.JoiningType values.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE_BREAK",
    "type" : "int",
    "comment" : "\n     * Enumerated property Line_Break.\n     * Returns UCharacter.LineBreak values.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUMERIC_TYPE",
    "type" : "int",
    "comment" : "\n     * Enumerated property Numeric_Type.\n     * Returns UCharacter.NumericType values.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT",
    "type" : "int",
    "comment" : "\n     * Enumerated property Script.\n     * Same as UScript.getScript(int), returns UScript values.\n     ",
    "links" : [ ]
  }, {
    "name" : "HANGUL_SYLLABLE_TYPE",
    "type" : "int",
    "comment" : "\n     * Enumerated property Hangul_Syllable_Type, new in Unicode 4.\n     * Returns UCharacter.HangulSyllableType values.\n     ",
    "links" : [ ]
  }, {
    "name" : "NFD_QUICK_CHECK",
    "type" : "int",
    "comment" : "\n     * Enumerated property NFD_Quick_Check.\n     * Returns numeric values compatible with Normalizer.QuickCheckResult.\n     ",
    "links" : [ ]
  }, {
    "name" : "NFKD_QUICK_CHECK",
    "type" : "int",
    "comment" : "\n     * Enumerated property NFKD_Quick_Check.\n     * Returns numeric values compatible with Normalizer.QuickCheckResult.\n     ",
    "links" : [ ]
  }, {
    "name" : "NFC_QUICK_CHECK",
    "type" : "int",
    "comment" : "\n     * Enumerated property NFC_Quick_Check.\n     * Returns numeric values compatible with Normalizer.QuickCheckResult.\n     ",
    "links" : [ ]
  }, {
    "name" : "NFKC_QUICK_CHECK",
    "type" : "int",
    "comment" : "\n     * Enumerated property NFKC_Quick_Check.\n     * Returns numeric values compatible with Normalizer.QuickCheckResult.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEAD_CANONICAL_COMBINING_CLASS",
    "type" : "int",
    "comment" : "\n     * Enumerated property Lead_Canonical_Combining_Class.\n     * ICU-specific property for the ccc of the first code point\n     * of the decomposition, or lccc(c)=ccc(NFD(c)[0]).\n     * Useful for checking for canonically ordered text;\n     * see Normalizer.FCD and http://www.unicode.org/notes/tn5/#FCD .\n     * Returns 8-bit numeric values like CANONICAL_COMBINING_CLASS.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRAIL_CANONICAL_COMBINING_CLASS",
    "type" : "int",
    "comment" : "\n     * Enumerated property Trail_Canonical_Combining_Class.\n     * ICU-specific property for the ccc of the last code point\n     * of the decomposition, or lccc(c)=ccc(NFD(c)[last]).\n     * Useful for checking for canonically ordered text;\n     * see Normalizer.FCD and http://www.unicode.org/notes/tn5/#FCD .\n     * Returns 8-bit numeric values like CANONICAL_COMBINING_CLASS.\n     ",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_CLUSTER_BREAK",
    "type" : "int",
    "comment" : "\n     * Enumerated property Grapheme_Cluster_Break (new in Unicode 4.1).\n     * Used in UAX #29: Text Boundaries\n     * (http://www.unicode.org/reports/tr29/)\n     * Returns UCharacter.GraphemeClusterBreak values.\n     ",
    "links" : [ ]
  }, {
    "name" : "SENTENCE_BREAK",
    "type" : "int",
    "comment" : "\n     * Enumerated property Sentence_Break (new in Unicode 4.1).\n     * Used in UAX #29: Text Boundaries\n     * (http://www.unicode.org/reports/tr29/)\n     * Returns UCharacter.SentenceBreak values.\n     ",
    "links" : [ ]
  }, {
    "name" : "WORD_BREAK",
    "type" : "int",
    "comment" : "\n     * Enumerated property Word_Break (new in Unicode 4.1).\n     * Used in UAX #29: Text Boundaries\n     * (http://www.unicode.org/reports/tr29/)\n     * Returns UCharacter.WordBreak values.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_PAIRED_BRACKET_TYPE",
    "type" : "int",
    "comment" : "\n     * Enumerated property Bidi_Paired_Bracket_Type (new in Unicode 6.3).\n     * Used in UAX #9: Unicode Bidirectional Algorithm\n     * (http://www.unicode.org/reports/tr9/)\n     * Returns UCharacter.BidiPairedBracketType values.\n     ",
    "links" : [ ]
  }, {
    "name" : "INDIC_POSITIONAL_CATEGORY",
    "type" : "int",
    "comment" : "\n     * Enumerated property Indic_Positional_Category.\n     * New in Unicode 6.0 as provisional property Indic_Matra_Category;\n     * renamed and changed to informative in Unicode 8.0.\n     * See http://www.unicode.org/reports/tr44/#IndicPositionalCategory.txt\n     ",
    "links" : [ ]
  }, {
    "name" : "INDIC_SYLLABIC_CATEGORY",
    "type" : "int",
    "comment" : "\n     * Enumerated property Indic_Syllabic_Category.\n     * New in Unicode 6.0 as provisional; informative since Unicode 8.0.\n     * See http://www.unicode.org/reports/tr44/#IndicSyllabicCategory.txt\n     ",
    "links" : [ ]
  }, {
    "name" : "VERTICAL_ORIENTATION",
    "type" : "int",
    "comment" : "\n     * Enumerated property Vertical_Orientation.\n     * Used for UAX #50 Unicode Vertical Text Layout (https://www.unicode.org/reports/tr50/).\n     * New as a UCD property in Unicode 10.0.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_STATUS",
    "type" : "int",
    "comment" : "\n     * Enumerated property Identifier_Status.\n     * Used for UTS #39 General Security Profile for Identifiers\n     * (https://www.unicode.org/reports/tr39/#General_Security_Profile).\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "INT_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the last constant for enumerated/integer Unicode properties.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "GENERAL_CATEGORY_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask property General_Category_Mask.\n     * This is the General_Category property returned as a bit mask.\n     * When used in UCharacter.getIntPropertyValue(c),\n     * returns bit masks for UCharacterCategory values where exactly one bit is set.\n     * When used with UCharacter.getPropertyValueName() and UCharacter.getPropertyValueEnum(),\n     * a multi-bit mask is used for sets of categories like \"Letters\".\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_START",
    "type" : "int",
    "comment" : "\n     * First constant for bit-mask Unicode properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the last constant for bit-mask Unicode properties.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "NUMERIC_VALUE",
    "type" : "int",
    "comment" : "\n     * Double property Numeric_Value.\n     * Corresponds to UCharacter.getUnicodeNumericValue(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_START",
    "type" : "int",
    "comment" : "\n     * First constant for double Unicode properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the last constant for double Unicode properties.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "AGE",
    "type" : "int",
    "comment" : "\n     * String property Age.\n     * Corresponds to UCharacter.getAge(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_START",
    "type" : "int",
    "comment" : "\n     * First constant for string Unicode properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_MIRRORING_GLYPH",
    "type" : "int",
    "comment" : "\n     * String property Bidi_Mirroring_Glyph.\n     * Corresponds to UCharacter.getMirror(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "CASE_FOLDING",
    "type" : "int",
    "comment" : "\n     * String property Case_Folding.\n     * Corresponds to UCharacter.foldCase(String, boolean).\n     ",
    "links" : [ ]
  }, {
    "name" : "ISO_COMMENT",
    "type" : "int",
    "comment" : "\n     * Deprecated string property ISO_Comment.\n     * Corresponds to UCharacter.getISOComment(int).\n     * @deprecated ICU 49\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "LOWERCASE_MAPPING",
    "type" : "int",
    "comment" : "\n     * String property Lowercase_Mapping.\n     * Corresponds to UCharacter.toLowerCase(String).\n     ",
    "links" : [ ]
  }, {
    "name" : "NAME",
    "type" : "int",
    "comment" : "\n     * String property Name.\n     * Corresponds to UCharacter.getName(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "SIMPLE_CASE_FOLDING",
    "type" : "int",
    "comment" : "\n     * String property Simple_Case_Folding.\n     * Corresponds to UCharacter.foldCase(int, boolean).\n     ",
    "links" : [ ]
  }, {
    "name" : "SIMPLE_LOWERCASE_MAPPING",
    "type" : "int",
    "comment" : "\n     * String property Simple_Lowercase_Mapping.\n     * Corresponds to UCharacter.toLowerCase(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "SIMPLE_TITLECASE_MAPPING",
    "type" : "int",
    "comment" : "\n     * String property Simple_Titlecase_Mapping.\n     * Corresponds to UCharacter.toTitleCase(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "SIMPLE_UPPERCASE_MAPPING",
    "type" : "int",
    "comment" : "\n     * String property Simple_Uppercase_Mapping.\n     * Corresponds to UCharacter.toUpperCase(int).\n     ",
    "links" : [ ]
  }, {
    "name" : "TITLECASE_MAPPING",
    "type" : "int",
    "comment" : "\n     * String property Titlecase_Mapping.\n     * Corresponds to UCharacter.toTitleCase(String).\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_1_NAME",
    "type" : "int",
    "comment" : "\n     * String property Unicode_1_Name.\n     * This property is of little practical value.\n     * Beginning with ICU 49, ICU APIs return null or an empty string for this property.\n     * Corresponds to UCharacter.getName1_0(int).\n     * @deprecated ICU 49\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "UPPERCASE_MAPPING",
    "type" : "int",
    "comment" : "\n     * String property Uppercase_Mapping.\n     * Corresponds to UCharacter.toUpperCase(String).\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_PAIRED_BRACKET",
    "type" : "int",
    "comment" : "\n     * String property Bidi_Paired_Bracket (new in Unicode 6.3).\n     * Corresponds to UCharacter.getBidiPairedBracket.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the last constant for string Unicode properties.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_EXTENSIONS",
    "type" : "int",
    "comment" : "\n     * Miscellaneous property Script_Extensions (new in Unicode 6.0).\n     * Some characters are commonly used in multiple scripts.\n     * For more information, see UAX #24: http://www.unicode.org/reports/tr24/.\n     * Corresponds to UScript.hasScript and UScript.getScriptExtensions.\n     ",
    "links" : [ ]
  }, {
    "name" : "OTHER_PROPERTY_START",
    "type" : "int",
    "comment" : "\n     * First constant for Unicode properties with unusual value types.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE",
    "type" : "int",
    "comment" : "\n     * Miscellaneous property Identifier_Type.\n     * Used for UTS #39 General Security Profile for Identifiers\n     * (https://www.unicode.org/reports/tr39/#General_Security_Profile).\n     *\n     * <p>Corresponds to {@link UCharacter#hasIdentifierType(int, UCharacter.IdentifierType)} and\n     * {@link UCharacter#getIdentifierTypes(int, java.util.EnumSet)}.\n     *\n     * <p>Each code point maps to a <i>set</i> of IdentifierType values.\n     *\n     * @see UCharacter#hasIdentifierType(int, UCharacter.IdentifierType)\n     * @see UCharacter#getIdentifierTypes(int, java.util.EnumSet)\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.lang.UCharacter#getIdentifierTypes(int", "android.icu.lang.UCharacter#hasIdentifierType(int" ]
  }, {
    "name" : "OTHER_PROPERTY_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the last constant for Unicode properties with unusual value types.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "UNDEFINED", "ALPHABETIC", "BINARY_START", "ASCII_HEX_DIGIT", "BIDI_CONTROL", "BIDI_MIRRORED", "DASH", "DEFAULT_IGNORABLE_CODE_POINT", "DEPRECATED", "DIACRITIC", "EXTENDER", "FULL_COMPOSITION_EXCLUSION", "GRAPHEME_BASE", "GRAPHEME_EXTEND", "GRAPHEME_LINK", "HEX_DIGIT", "HYPHEN", "ID_CONTINUE", "ID_START", "IDEOGRAPHIC", "IDS_BINARY_OPERATOR", "IDS_TRINARY_OPERATOR", "JOIN_CONTROL", "LOGICAL_ORDER_EXCEPTION", "LOWERCASE", "MATH", "NONCHARACTER_CODE_POINT", "QUOTATION_MARK", "RADICAL", "SOFT_DOTTED", "TERMINAL_PUNCTUATION", "UNIFIED_IDEOGRAPH", "UPPERCASE", "WHITE_SPACE", "XID_CONTINUE", "XID_START", "CASE_SENSITIVE", "S_TERM", "VARIATION_SELECTOR", "NFD_INERT", "NFKD_INERT", "NFC_INERT", "NFKC_INERT", "SEGMENT_STARTER", "PATTERN_SYNTAX", "PATTERN_WHITE_SPACE", "POSIX_ALNUM", "POSIX_BLANK", "POSIX_GRAPH", "POSIX_PRINT", "POSIX_XDIGIT", "CASED", "CASE_IGNORABLE", "CHANGES_WHEN_LOWERCASED", "CHANGES_WHEN_UPPERCASED", "CHANGES_WHEN_TITLECASED", "CHANGES_WHEN_CASEFOLDED", "CHANGES_WHEN_CASEMAPPED", "CHANGES_WHEN_NFKC_CASEFOLDED", "EMOJI", "EMOJI_PRESENTATION", "EMOJI_MODIFIER", "EMOJI_MODIFIER_BASE", "EMOJI_COMPONENT", "REGIONAL_INDICATOR", "PREPENDED_CONCATENATION_MARK", "EXTENDED_PICTOGRAPHIC", "BASIC_EMOJI", "EMOJI_KEYCAP_SEQUENCE", "RGI_EMOJI_MODIFIER_SEQUENCE", "RGI_EMOJI_FLAG_SEQUENCE", "RGI_EMOJI_TAG_SEQUENCE", "RGI_EMOJI_ZWJ_SEQUENCE", "RGI_EMOJI", "IDS_UNARY_OPERATOR", "ID_COMPAT_MATH_START", "ID_COMPAT_MATH_CONTINUE", "BINARY_LIMIT", "BIDI_CLASS", "INT_START", "BLOCK", "CANONICAL_COMBINING_CLASS", "DECOMPOSITION_TYPE", "EAST_ASIAN_WIDTH", "GENERAL_CATEGORY", "JOINING_GROUP", "JOINING_TYPE", "LINE_BREAK", "NUMERIC_TYPE", "SCRIPT", "HANGUL_SYLLABLE_TYPE", "NFD_QUICK_CHECK", "NFKD_QUICK_CHECK", "NFC_QUICK_CHECK", "NFKC_QUICK_CHECK", "LEAD_CANONICAL_COMBINING_CLASS", "TRAIL_CANONICAL_COMBINING_CLASS", "GRAPHEME_CLUSTER_BREAK", "SENTENCE_BREAK", "WORD_BREAK", "BIDI_PAIRED_BRACKET_TYPE", "INDIC_POSITIONAL_CATEGORY", "INDIC_SYLLABIC_CATEGORY", "VERTICAL_ORIENTATION", "IDENTIFIER_STATUS", "INT_LIMIT", "GENERAL_CATEGORY_MASK", "MASK_START", "MASK_LIMIT", "NUMERIC_VALUE", "DOUBLE_START", "DOUBLE_LIMIT", "AGE", "STRING_START", "BIDI_MIRRORING_GLYPH", "CASE_FOLDING", "ISO_COMMENT", "LOWERCASE_MAPPING", "NAME", "SIMPLE_CASE_FOLDING", "SIMPLE_LOWERCASE_MAPPING", "SIMPLE_TITLECASE_MAPPING", "SIMPLE_UPPERCASE_MAPPING", "TITLECASE_MAPPING", "UNICODE_1_NAME", "UPPERCASE_MAPPING", "BIDI_PAIRED_BRACKET", "STRING_LIMIT", "SCRIPT_EXTENSIONS", "OTHER_PROPERTY_START", "IDENTIFIER_TYPE", "OTHER_PROPERTY_LIMIT" ]
}