{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/TemplateSubPatternAssociation.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "TemplateSubPatternAssociation",
  "comment" : "\n * A class to contain a match pattern and it's corresponding template.\n * This class also defines a node in a match pattern linked list.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_stepPattern",
    "type" : "StepPattern",
    "comment" : " Step pattern           ",
    "links" : [ ]
  }, {
    "name" : "m_pattern",
    "type" : "String",
    "comment" : " Template pattern          ",
    "links" : [ ]
  }, {
    "name" : "m_template",
    "type" : "ElemTemplate",
    "comment" : " The template element         ",
    "links" : [ ]
  }, {
    "name" : "m_next",
    "type" : "TemplateSubPatternAssociation",
    "comment" : " Next pattern         ",
    "links" : [ ]
  }, {
    "name" : "m_wild",
    "type" : "boolean",
    "comment" : " Flag indicating whether this is wild card pattern          ",
    "links" : [ ]
  }, {
    "name" : "m_targetString",
    "type" : "String",
    "comment" : " Target string for this match pattern           ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Clone this object.\n   *\n   * @return The cloned object.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getTargetString()",
    "returnType" : "String",
    "comment" : "\n   * Get the target string of the pattern.  For instance, if the pattern is\n   * \"foo/baz/boo[@daba]\", this string will be \"boo\".\n   *\n   * @return The \"target\" string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetString(String key)",
    "returnType" : "void",
    "comment" : "\n   * Set Target String for this template pattern  \n   *\n   *\n   * @param key Target string to set\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean matchMode(QName m1)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two modes match according to the rules of XSLT.\n   *\n   * @param m1 mode to match\n   *\n   * @return True if the given mode matches this template's mode\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean matchModes(QName m1, QName m2)",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if two modes match according to the rules of XSLT.\n   *\n   * @param m1 First mode to match\n   * @param m2 Second mode to match\n   *\n   * @return True if the two given modes match\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(XPathContext xctxt, int targetNode, QName mode) throws TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Return the mode associated with the template.\n   *\n   *\n   * @param xctxt XPath context to use with this template\n   * @param targetNode Target node\n   * @param mode reference, which may be null, to the <a href=\"http://www.w3.org/TR/xslt#modes\">current mode</a>.\n   * @return The mode associated with the template.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isWild()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the pattern for this association is a wildcard.\n   *\n   * @return true if this pattern is considered to be a wild match.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final StepPattern getStepPattern()",
    "returnType" : "StepPattern",
    "comment" : "\n   * Get associated XSLT StepPattern.\n   *\n   * @return An executable StepPattern object, never null.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public final String getPattern()",
    "returnType" : "String",
    "comment" : "\n   * Get the pattern string for diagnostic purposes.\n   *\n   * @return The pattern string for diagnostic purposes.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getDocOrderPos()",
    "returnType" : "int",
    "comment" : "\n   * Return the position of the template in document\n   * order in the stylesheet.\n   *\n   * @return The position of the template in the overall template order.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getImportLevel()",
    "returnType" : "int",
    "comment" : "\n   * Return the import level associated with the stylesheet into which  \n   * this template is composed.\n   *\n   * @return The import level of this template.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final ElemTemplate getTemplate()",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Get the assocated xsl:template.\n   *\n   * @return An ElemTemplate, never null.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public final TemplateSubPatternAssociation getNext()",
    "returnType" : "TemplateSubPatternAssociation",
    "comment" : "\n   * Get the next association.\n   *\n   * @return A valid TemplateSubPatternAssociation, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNext(TemplateSubPatternAssociation mp)",
    "returnType" : "void",
    "comment" : "\n   * Set the next element on this association\n   * list, which should be equal or less in priority to\n   * this association, and, if equal priority, should occur\n   * before this template in document order.\n   *\n   * @param mp The next association to score if this one fails.\n   *\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone() throws CloneNotSupportedException", "public final String getTargetString()", "public void setTargetString(String key)", " boolean matchMode(QName m1)", "private boolean matchModes(QName m1, QName m2)", "public boolean matches(XPathContext xctxt, int targetNode, QName mode) throws TransformerException", "public final boolean isWild()", "public final StepPattern getStepPattern()", "public final String getPattern()", "public int getDocOrderPos()", "public final int getImportLevel()", "public final ElemTemplate getTemplate()", "public final TemplateSubPatternAssociation getNext()", "public void setNext(TemplateSubPatternAssociation mp)" ],
  "variableNames" : [ "serialVersionUID", "m_stepPattern", "m_pattern", "m_template", "m_next", "m_wild", "m_targetString" ]
}