{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/Window.java",
  "packageName" : "android.view",
  "className" : "Callback",
  "comment" : "\n     * API from a Window back to its caller.  This allows the client to\n     * intercept key dispatching, panels and menus, etc.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean dispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called to process key events.  At the very least your\n         * implementation must call\n         * {@link android.view.Window#superDispatchKeyEvent} to do the\n         * standard key processing.\n         *\n         * @param event The key event.\n         *\n         * @return boolean Return true if this event was consumed.\n         ",
    "links" : [ "android.view.Window#superDispatchKeyEvent" ]
  }, {
    "name" : "public boolean dispatchKeyShortcutEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called to process a key shortcut event.\n         * At the very least your implementation must call\n         * {@link android.view.Window#superDispatchKeyShortcutEvent} to do the\n         * standard key shortcut processing.\n         *\n         * @param event The key shortcut event.\n         * @return True if this event was consumed.\n         ",
    "links" : [ "android.view.Window#superDispatchKeyShortcutEvent" ]
  }, {
    "name" : "public boolean dispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called to process touch screen events.  At the very least your\n         * implementation must call\n         * {@link android.view.Window#superDispatchTouchEvent} to do the\n         * standard touch screen processing.\n         *\n         * @param event The touch screen event.\n         *\n         * @return boolean Return true if this event was consumed.\n         ",
    "links" : [ "android.view.Window#superDispatchTouchEvent" ]
  }, {
    "name" : "public boolean dispatchTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called to process trackball events.  At the very least your\n         * implementation must call\n         * {@link android.view.Window#superDispatchTrackballEvent} to do the\n         * standard trackball processing.\n         *\n         * @param event The trackball event.\n         *\n         * @return boolean Return true if this event was consumed.\n         ",
    "links" : [ "android.view.Window#superDispatchTrackballEvent" ]
  }, {
    "name" : "public boolean dispatchGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called to process generic motion events.  At the very least your\n         * implementation must call\n         * {@link android.view.Window#superDispatchGenericMotionEvent} to do the\n         * standard processing.\n         *\n         * @param event The generic motion event.\n         *\n         * @return boolean Return true if this event was consumed.\n         ",
    "links" : [ "android.view.Window#superDispatchGenericMotionEvent" ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Called to process population of {@link AccessibilityEvent}s.\n         *\n         * @param event The event.\n         *\n         * @return boolean Return true if event population was completed.\n         ",
    "links" : [ "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public View onCreatePanelView(int featureId)",
    "returnType" : "View",
    "comment" : "\n         * Instantiate the view to display in the panel for 'featureId'.\n         * You can return null, in which case the default content (typically\n         * a menu) will be created for you.\n         *\n         * @param featureId Which panel is being created.\n         *\n         * @return view The top-level view to place in the panel.\n         *\n         * @see #onPreparePanel\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean onCreatePanelMenu(int featureId, @NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n         * Initialize the contents of the menu for panel 'featureId'.  This is\n         * called if onCreatePanelView() returns null, giving you a standard\n         * menu in which you can place your items.  It is only called once for\n         * the panel, the first time it is shown.\n         *\n         * <p>You can safely hold on to <var>menu</var> (and any items created\n         * from it), making modifications to it as desired, until the next\n         * time onCreatePanelMenu() is called for this feature.\n         *\n         * @param featureId The panel being created.\n         * @param menu The menu inside the panel.\n         *\n         * @return boolean You must return true for the panel to be displayed;\n         *         if you return false it will not be shown.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean onPreparePanel(int featureId, @Nullable View view, @NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n         * Prepare a panel to be displayed.  This is called right before the\n         * panel window is shown, every time it is shown.\n         *\n         * @param featureId The panel that is being displayed.\n         * @param view The View that was returned by onCreatePanelView().\n         * @param menu If onCreatePanelView() returned null, this is the Menu\n         *             being displayed in the panel.\n         *\n         * @return boolean You must return true for the panel to be displayed;\n         *         if you return false it will not be shown.\n         *\n         * @see #onCreatePanelView\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean onMenuOpened(int featureId, @NonNull Menu menu)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a panel's menu is opened by the user. This may also be\n         * called when the menu is changing from one type to another (for\n         * example, from the icon menu to the expanded menu).\n         *\n         * @param featureId The panel that the menu is in.\n         * @param menu The menu that is opened.\n         * @return Return true to allow the menu to open, or false to prevent\n         *         the menu from opening.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean onMenuItemSelected(int featureId, @NonNull MenuItem item)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when a panel's menu item has been selected by the user.\n         *\n         * @param featureId The panel that the menu is in.\n         * @param item The menu item that was selected.\n         *\n         * @return boolean Return true to finish processing of selection, or\n         *         false to perform the normal menu handling (calling its\n         *         Runnable or sending a Message to its target Handler).\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowAttributesChanged(WindowManager.LayoutParams attrs)",
    "returnType" : "void",
    "comment" : "\n         * This is called whenever the current window attributes change.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onContentChanged()",
    "returnType" : "void",
    "comment" : "\n         * This hook is called whenever the content view of the screen changes\n         * (due to a call to\n         * {@link Window#setContentView(View, android.view.ViewGroup.LayoutParams)\n         * Window.setContentView} or\n         * {@link Window#addContentView(View, android.view.ViewGroup.LayoutParams)\n         * Window.addContentView}).\n         ",
    "links" : [ "android.view.Window#setContentView(View", "android.view.Window#addContentView(View" ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "\n         * This hook is called whenever the window focus changes.  See\n         * {@link View#onWindowFocusChanged(boolean)\n         * View.onWindowFocusChangedNotLocked(boolean)} for more information.\n         *\n         * @param hasFocus Whether the window now has focus.\n         ",
    "links" : [ "android.view.View#onWindowFocusChanged(boolean)" ]
  }, {
    "name" : "public void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "\n         * Called when the window has been attached to the window manager.\n         * See {@link View#onAttachedToWindow() View.onAttachedToWindow()}\n         * for more information.\n         ",
    "links" : [ "android.view.View#onAttachedToWindow()" ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "\n         * Called when the window has been detached from the window manager.\n         * See {@link View#onDetachedFromWindow() View.onDetachedFromWindow()}\n         * for more information.\n         ",
    "links" : [ "android.view.View#onDetachedFromWindow()" ]
  }, {
    "name" : " void onPanelClosed(int featureId, @NonNull Menu menu)",
    "returnType" : "void",
    "comment" : "\n         * Called when a panel is being closed.  If another logical subsequent\n         * panel is being opened (and this panel is being closed to make room for the subsequent\n         * panel), this method will NOT be called.\n         *\n         * @param featureId The panel that is being displayed.\n         * @param menu If onCreatePanelView() returned null, this is the Menu\n         *            being displayed in the panel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSearchRequested()",
    "returnType" : "boolean",
    "comment" : "\n         * Called when the user signals the desire to start a search.\n         *\n         * @return true if search launched, false if activity refuses (blocks)\n         *\n         * @see android.app.Activity#onSearchRequested()\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSearchRequested(SearchEvent searchEvent)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when the user signals the desire to start a search.\n         *\n         * @param searchEvent A {@link SearchEvent} describing the signal to\n         *                   start a search.\n         * @return true if search launched, false if activity refuses (blocks)\n         ",
    "links" : [ "android.view.SearchEvent" ]
  }, {
    "name" : "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback)",
    "returnType" : "ActionMode",
    "comment" : "\n         * Called when an action mode is being started for this window. Gives the\n         * callback an opportunity to handle the action mode in its own unique and\n         * beautiful way. If this method returns null the system can choose a way\n         * to present the mode or choose not to start the mode at all. This is equivalent\n         * to {@link #onWindowStartingActionMode(android.view.ActionMode.Callback, int)}\n         * with type {@link ActionMode#TYPE_PRIMARY}.\n         *\n         * @param callback Callback to control the lifecycle of this action mode\n         * @return The ActionMode that was started, or null if the system should present it\n         ",
    "links" : [ "android.view.ActionMode#TYPE_PRIMARY", "#onWindowStartingActionMode(android.view.ActionMode.Callback" ]
  }, {
    "name" : "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type)",
    "returnType" : "ActionMode",
    "comment" : "\n         * Called when an action mode is being started for this window. Gives the\n         * callback an opportunity to handle the action mode in its own unique and\n         * beautiful way. If this method returns null the system can choose a way\n         * to present the mode or choose not to start the mode at all.\n         *\n         * @param callback Callback to control the lifecycle of this action mode\n         * @param type One of {@link ActionMode#TYPE_PRIMARY} or {@link ActionMode#TYPE_FLOATING}.\n         * @return The ActionMode that was started, or null if the system should present it\n         ",
    "links" : [ "android.view.ActionMode#TYPE_FLOATING", "android.view.ActionMode#TYPE_PRIMARY" ]
  }, {
    "name" : "public void onActionModeStarted(ActionMode mode)",
    "returnType" : "void",
    "comment" : "\n         * Called when an action mode has been started. The appropriate mode callback\n         * method will have already been invoked.\n         *\n         * @param mode The new mode that has just been started.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onActionModeFinished(ActionMode mode)",
    "returnType" : "void",
    "comment" : "\n         * Called when an action mode has been finished. The appropriate mode callback\n         * method will have already been invoked.\n         *\n         * @param mode The mode that was just finished.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, @Nullable Menu menu, int deviceId)",
    "returnType" : "void",
    "comment" : "\n         * Called when Keyboard Shortcuts are requested for the current window.\n         *\n         * @param data The data list to populate with shortcuts.\n         * @param menu The current menu, which may be null.\n         * @param deviceId The id for the connected device the shortcuts should be provided for.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPointerCaptureChanged(boolean hasCapture)",
    "returnType" : "void",
    "comment" : "\n         * Called when pointer capture is enabled or disabled for the current window.\n         *\n         * @param hasCapture True if the window has pointer capture.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean dispatchKeyEvent(KeyEvent event)", "public boolean dispatchKeyShortcutEvent(KeyEvent event)", "public boolean dispatchTouchEvent(MotionEvent event)", "public boolean dispatchTrackballEvent(MotionEvent event)", "public boolean dispatchGenericMotionEvent(MotionEvent event)", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "public View onCreatePanelView(int featureId)", " boolean onCreatePanelMenu(int featureId, @NonNull Menu menu)", " boolean onPreparePanel(int featureId, @Nullable View view, @NonNull Menu menu)", " boolean onMenuOpened(int featureId, @NonNull Menu menu)", " boolean onMenuItemSelected(int featureId, @NonNull MenuItem item)", "public void onWindowAttributesChanged(WindowManager.LayoutParams attrs)", "public void onContentChanged()", "public void onWindowFocusChanged(boolean hasFocus)", "public void onAttachedToWindow()", "public void onDetachedFromWindow()", " void onPanelClosed(int featureId, @NonNull Menu menu)", "public boolean onSearchRequested()", "public boolean onSearchRequested(SearchEvent searchEvent)", "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback)", "public ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type)", "public void onActionModeStarted(ActionMode mode)", "public void onActionModeFinished(ActionMode mode)", "public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, @Nullable Menu menu, int deviceId)", "public void onPointerCaptureChanged(boolean hasCapture)" ],
  "variableNames" : [ ]
}