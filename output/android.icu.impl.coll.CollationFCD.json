{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationFCD.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationFCD",
  "comment" : "\n * Data and functions for the FCD check fast path.\n *\n * The fast path looks at a pair of 16-bit code units and checks\n * whether there is an FCD boundary between them;\n * there is if the first unit has a trailing ccc=0 (!hasTccc(first))\n * or the second unit has a leading ccc=0 (!hasLccc(second)),\n * or both.\n * When the fast path finds a possible non-boundary,\n * then the FCD check slow path looks at the actual sequence of FCD values.\n *\n * This is a pure optimization.\n * The fast path must at least find all possible non-boundaries.\n * If the fast path is too pessimistic, it costs performance.\n *\n * For a pair of BMP characters, the fast path tests are precise (1 bit per character).\n *\n * For a supplementary code point, the two units are its lead and trail surrogates.\n * We set hasTccc(lead)=true if any of its 1024 associated supplementary code points\n * has lccc!=0 or tccc!=0.\n * We set hasLccc(trail)=true for all trail surrogates.\n * As a result, we leave the fast path if the lead surrogate might start a\n * supplementary code point that is not FCD-inert.\n * (So the fast path need not detect that there is a surrogate pair,\n * nor look ahead to the next full code point.)\n *\n * hasLccc(lead)=true if any of its 1024 associated supplementary code points\n * has lccc!=0, for fast boundary checking between BMP & supplementary.\n *\n * hasTccc(trail)=false:\n * It should only be tested for unpaired trail surrogates which are FCD-inert.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "lcccIndex",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lcccBits",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tcccIndex",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tcccBits",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean hasLccc(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasTccc(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean mayHaveLccc(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean maybeTibetanCompositeVowel(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Tibetan composite vowel signs (U+0F73, U+0F75, U+0F81)\n     * must be decomposed before reaching the core collation code,\n     * or else some sequences including them, even ones passing the FCD check,\n     * do not yield canonically equivalent results.\n     *\n     * This is a fast and imprecise test.\n     *\n     * @param c a code point\n     * @return true if c is U+0F73, U+0F75 or U+0F81 or one of several other Tibetan characters\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isFCD16OfTibetanCompositeVowel(int fcd16)",
    "returnType" : "boolean",
    "comment" : "\n     * Tibetan composite vowel signs (U+0F73, U+0F75, U+0F81)\n     * must be decomposed before reaching the core collation code,\n     * or else some sequences including them, even ones passing the FCD check,\n     * do not yield canonically equivalent results.\n     *\n     * They have distinct lccc/tccc combinations: 129/130 or 129/132.\n     *\n     * @param fcd16 the FCD value (lccc/tccc combination) of a code point\n     * @return true if fcd16 is from U+0F73, U+0F75 or U+0F81\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean hasLccc(int c)", "public static boolean hasTccc(int c)", " static boolean mayHaveLccc(int c)", " static boolean maybeTibetanCompositeVowel(int c)", " static boolean isFCD16OfTibetanCompositeVowel(int fcd16)" ],
  "variableNames" : [ "lcccIndex", "lcccBits", "tcccIndex", "tcccBits" ]
}