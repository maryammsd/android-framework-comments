{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/JsonWriter.java",
  "packageName" : "android.util",
  "className" : "JsonWriter",
  "comment" : "\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I write JSON on Android?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"android_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@android_newb just use android.util.JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"  \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n ",
  "variables" : [ {
    "name" : "out",
    "type" : "Writer",
    "comment" : " The output data, containing at most one top-level array or object. ",
    "links" : [ ]
  }, {
    "name" : "stack",
    "type" : "List<JsonScope>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "indent",
    "type" : "String",
    "comment" : "\n     * A string containing a full set of spaces for a single level of\n     * indentation, or null for no pretty printing.\n     ",
    "links" : [ ]
  }, {
    "name" : "separator",
    "type" : "String",
    "comment" : "\n     * The name/value separator; either \":\" or \": \".\n     ",
    "links" : [ ]
  }, {
    "name" : "lenient",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setIndent(String indent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the indentation string to be repeated for each level of indentation\n     * in the encoded document. If {@code indent.isEmpty()} the encoded document\n     * will be compact. Otherwise the encoded document will be more\n     * human-readable.\n     *\n     * @param indent a string containing only whitespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLenient(boolean lenient)",
    "returnType" : "void",
    "comment" : "\n     * Configure this writer to relax its syntax rules. By default, this writer\n     * only emits well-formed JSON as specified by <a\n     * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the writer\n     * to lenient permits the following:\n     * <ul>\n     *   <li>Top-level values of any type. With strict writing, the top-level\n     *       value must be an object or an array.\n     *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n     *       Double#isInfinite() infinities}.\n     * </ul>\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public boolean isLenient()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this writer has relaxed syntax rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter beginArray() throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Begins encoding a new array. Each call to this method must be paired with\n     * a call to {@link #endArray}.\n     *\n     * @return this writer.\n     ",
    "links" : [ "#endArray" ]
  }, {
    "name" : "public JsonWriter endArray() throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Ends encoding the current array.\n     *\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter beginObject() throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Begins encoding a new object. Each call to this method must be paired\n     * with a call to {@link #endObject}.\n     *\n     * @return this writer.\n     ",
    "links" : [ "#endObject" ]
  }, {
    "name" : "public JsonWriter endObject() throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Ends encoding the current object.\n     *\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private JsonWriter open(JsonScope empty, String openBracket) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Enters a new scope by appending any necessary whitespace and the given\n     * bracket.\n     ",
    "links" : [ ]
  }, {
    "name" : "private JsonWriter close(JsonScope empty, JsonScope nonempty, String closeBracket) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Closes the current scope by appending any necessary whitespace and the\n     * given bracket.\n     ",
    "links" : [ ]
  }, {
    "name" : "private JsonScope peek()",
    "returnType" : "JsonScope",
    "comment" : "\n     * Returns the value on the top of the stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void replaceTop(JsonScope topOfStack)",
    "returnType" : "void",
    "comment" : "\n     * Replace the value on the top of the stack with the given value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter name(String name) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes the property name.\n     *\n     * @param name the name of the forthcoming value. May not be null.\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter value(String value) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes {@code value}.\n     *\n     * @param value the literal string value, or null to encode a null literal.\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter nullValue() throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes {@code null}.\n     *\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter value(boolean value) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes {@code value}.\n     *\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter value(double value) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes {@code value}.\n     *\n     * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities} unless this writer is lenient.\n     * @return this writer.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public JsonWriter value(long value) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes {@code value}.\n     *\n     * @return this writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JsonWriter value(Number value) throws IOException",
    "returnType" : "JsonWriter",
    "comment" : "\n     * Encodes {@code value}.\n     *\n     * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities} unless this writer is lenient.\n     * @return this writer.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Ensures all buffered data is written to the underlying {@link Writer}\n     * and flushes that writer.\n     ",
    "links" : [ "java.io.Writer" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes and closes this writer and the underlying {@link Writer}.\n     *\n     * @throws IOException if the JSON document is incomplete.\n     ",
    "links" : [ "java.io.Writer" ]
  }, {
    "name" : "private void string(String value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void newline() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void beforeName() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Inserts any necessary separators and whitespace before a name. Also\n     * adjusts the stack to expect the name's value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void beforeValue(boolean root) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Inserts any necessary separators and whitespace before a literal value,\n     * inline array, or inline object. Also adjusts the stack to expect either a\n     * closing bracket or another element.\n     *\n     * @param root true if the value is a new array or object, the two values\n     *     permitted as top-level elements.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "out", "stack", "indent", "separator", "lenient" ],
  "methodNames" : [ "public void setIndent(String indent)", "public void setLenient(boolean lenient)", "public boolean isLenient()", "public JsonWriter beginArray() throws IOException", "public JsonWriter endArray() throws IOException", "public JsonWriter beginObject() throws IOException", "public JsonWriter endObject() throws IOException", "private JsonWriter open(JsonScope empty, String openBracket) throws IOException", "private JsonWriter close(JsonScope empty, JsonScope nonempty, String closeBracket) throws IOException", "private JsonScope peek()", "private void replaceTop(JsonScope topOfStack)", "public JsonWriter name(String name) throws IOException", "public JsonWriter value(String value) throws IOException", "public JsonWriter nullValue() throws IOException", "public JsonWriter value(boolean value) throws IOException", "public JsonWriter value(double value) throws IOException", "public JsonWriter value(long value) throws IOException", "public JsonWriter value(Number value) throws IOException", "public void flush() throws IOException", "public void close() throws IOException", "private void string(String value) throws IOException", "private void newline() throws IOException", "private void beforeName() throws IOException", "private void beforeValue(boolean root) throws IOException" ]
}