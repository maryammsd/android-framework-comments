{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/TouchDelegate.java",
  "packageName" : "android.view",
  "className" : "TouchDelegate",
  "comment" : "\n * Helper class to handle situations where you want a view to have a larger touch area than its\n * actual view bounds. The view whose touch area is changed is called the delegate view. This\n * class should be used by an ancestor of the delegate. To use a TouchDelegate, first create an\n * instance that specifies the bounds that should be mapped to the delegate and the delegate\n * view itself.\n * <p>\n * The ancestor should then forward all of its touch events received in its\n * {@link android.view.View#onTouchEvent(MotionEvent)} to {@link #onTouchEvent(MotionEvent)}.\n * </p>\n ",
  "links" : [ "#onTouchEvent(MotionEvent)", "android.view.View#onTouchEvent(MotionEvent)" ],
  "variables" : [ {
    "name" : "mDelegateView",
    "type" : "View",
    "comment" : "\n     * View that should receive forwarded touch events\n     ",
    "links" : [ ]
  }, {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : "\n     * Bounds in local coordinates of the containing view that should be mapped to the delegate\n     * view. This rect is used for initial hit testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSlopBounds",
    "type" : "Rect",
    "comment" : "\n     * mBounds inflated to include some slop. This rect is to track whether the motion events\n     * should be considered to be within the delegate view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDelegateTargeted",
    "type" : "boolean",
    "comment" : "\n     * True if the delegate had been targeted on a down event (intersected mBounds).\n     ",
    "links" : [ ]
  }, {
    "name" : "ABOVE",
    "type" : "int",
    "comment" : "\n     * The touchable region of the View extends above its actual extent.\n     ",
    "links" : [ ]
  }, {
    "name" : "BELOW",
    "type" : "int",
    "comment" : "\n     * The touchable region of the View extends below its actual extent.\n     ",
    "links" : [ ]
  }, {
    "name" : "TO_LEFT",
    "type" : "int",
    "comment" : "\n     * The touchable region of the View extends to the left of its actual extent.\n     ",
    "links" : [ ]
  }, {
    "name" : "TO_RIGHT",
    "type" : "int",
    "comment" : "\n     * The touchable region of the View extends to the right of its actual extent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchDelegateInfo",
    "type" : "TouchDelegateInfo",
    "comment" : "\n     * Touch delegate information for accessibility\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean onTouchEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Forward touch events to the delegate view if the event is within the bounds\n     * specified in the constructor.\n     *\n     * @param event The touch event to forward\n     * @return True if the event was consumed by the delegate, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchExplorationHoverEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Forward hover events to the delegate view if the event is within the bounds\n     * specified in the constructor and touch exploration is enabled.\n     *\n     * <p>This method is provided for accessibility purposes so touch exploration, which is\n     * commonly used by screen readers, can properly place accessibility focus on views that\n     * use touch delegates. Therefore, touch exploration must be enabled for hover events\n     * to be dispatched through the delegate.</p>\n     *\n     * @param event The hover event to forward\n     * @return True if the event was consumed by the delegate, false otherwise.\n     *\n     * @see android.view.accessibility.AccessibilityManager#isTouchExplorationEnabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public TouchDelegateInfo getTouchDelegateInfo()",
    "returnType" : "TouchDelegateInfo",
    "comment" : "\n     * Return a {@link TouchDelegateInfo} mapping from regions (in view coordinates) to\n     * delegated views for accessibility usage.\n     *\n     * @return A TouchDelegateInfo.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo" ]
  } ],
  "methodNames" : [ "public boolean onTouchEvent(@NonNull MotionEvent event)", "public boolean onTouchExplorationHoverEvent(@NonNull MotionEvent event)", "public TouchDelegateInfo getTouchDelegateInfo()" ],
  "variableNames" : [ "mDelegateView", "mBounds", "mSlopBounds", "mDelegateTargeted", "ABOVE", "BELOW", "TO_LEFT", "TO_RIGHT", "mSlop", "mTouchDelegateInfo" ]
}