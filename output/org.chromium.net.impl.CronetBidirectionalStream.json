{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/impl/CronetBidirectionalStream.java",
  "packageName" : "org.chromium.net.impl",
  "className" : "CronetBidirectionalStream",
  "comment" : "\n * {@link BidirectionalStream} implementation using Chromium network stack.\n * All @CalledByNative methods are called on the native network thread\n * and post tasks with callback calls onto Executor. Upon returning from callback, the native\n * stream is called on Executor thread and posts native tasks to the native network thread.\n ",
  "links" : [ "org.chromium.net.BidirectionalStream" ],
  "variables" : [ {
    "name" : "mRequestContext",
    "type" : "CronetUrlRequestContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "VersionSafeCallbacks.BidirectionalStreamCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialUrl",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialMethod",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestHeaders",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestHeaderBlock",
    "type" : "UrlResponseInfo.HeaderBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelayRequestHeadersUntilFirstFlush",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestAnnotations",
    "type" : "Collection<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsTagSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsTag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsUidSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInflightDoneCallbackCount",
    "type" : "RefCountDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mException",
    "type" : "CronetException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeStreamLock",
    "type" : "Object",
    "comment" : "\n     * Synchronizes access to mNativeStream, mReadState and mWriteState.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPendingData",
    "type" : "LinkedList<ByteBuffer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlushData",
    "type" : "LinkedList<ByteBuffer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndOfStreamWritten",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestHeadersSent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetrics",
    "type" : "RequestFinishedInfo.Metrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeStream",
    "type" : "long",
    "comment" : " Native BidirectionalStream object, owned by CronetBidirectionalStream. ",
    "links" : [ ]
  }, {
    "name" : "mReadState",
    "type" : "int",
    "comment" : "\n     * Read state is tracking reading flow.\n     *                         / <--- READING <--- \\\n     *                         |                   |\n     *                         \\                   /\n     * NOT_STARTED -> STARTED --> WAITING_FOR_READ -> READING_DONE -> SUCCESS\n     ",
    "links" : [ ]
  }, {
    "name" : "mWriteState",
    "type" : "int",
    "comment" : "\n     * Write state is tracking writing flow.\n     *                         / <---  WRITING  <--- \\\n     *                         |                     |\n     *                         \\                     /\n     * NOT_STARTED -> STARTED --> WAITING_FOR_FLUSH -> WRITING_DONE -> SUCCESS\n     ",
    "links" : [ ]
  }, {
    "name" : "mResponseInfo",
    "type" : "UrlResponseInfoImpl",
    "comment" : " Only modified on the network thread.",
    "links" : [ ]
  }, {
    "name" : "mOnReadCompletedTask",
    "type" : "OnReadCompletedRunnable",
    "comment" : " Only modified on the network thread.",
    "links" : [ ]
  }, {
    "name" : "mOnDestroyedCallbackForTesting",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getHttpMethod()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTrafficStatsTag()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTrafficStatsTag()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTrafficStatsUid()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTrafficStatsUid()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UrlResponseInfo.HeaderBlock getHeaders()",
    "returnType" : "UrlResponseInfo.HeaderBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPriority()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDelayRequestHeadersUntilFirstFlushEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void read(ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(ByteBuffer buffer, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendFlushDataLocked()",
    "returnType" : "void",
    "comment" : " mFlushData queue isn't empty.",
    "links" : [ ]
  }, {
    "name" : "public List<ByteBuffer> getPendingDataForTesting()",
    "returnType" : "List<ByteBuffer>",
    "comment" : " Returns a read-only copy of {@code mPendingData} for testing. ",
    "links" : [ ]
  }, {
    "name" : "public List<ByteBuffer> getFlushDataForTesting()",
    "returnType" : "List<ByteBuffer>",
    "comment" : " Returns a read-only copy of {@code mFlushData} for testing. ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isDoneLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeOnSucceededOnExecutor()",
    "returnType" : "void",
    "comment" : "\n     * Runs an onSucceeded callback if both Read and Write sides are closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onStreamReady(final boolean requestHeadersSent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onResponseHeadersReceived(int httpStatusCode, String negotiatedProtocol, String[] headers, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "\n     * Called when the final set of headers, after all redirects,\n     * is received. Can only be called once for each stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onReadCompleted(final ByteBuffer byteBuffer, int bytesRead, int initialPosition, int initialLimit, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onWritevCompleted(final ByteBuffer[] byteBuffers, int[] initialPositions, int[] initialLimits, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onResponseTrailersReceived(String[] trailers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onError(int errorCode, int nativeError, int nativeQuicError, String errorString, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCanceled()",
    "returnType" : "void",
    "comment" : " Called when request is canceled, no callbacks will be called afterwards. ",
    "links" : [ ]
  }, {
    "name" : "private void onMetricsCollected(long requestStartMs, long dnsStartMs, long dnsEndMs, long connectStartMs, long connectEndMs, long sslStartMs, long sslEndMs, long sendingStartMs, long sendingEndMs, long pushStartMs, long pushEndMs, long responseStartMs, long requestEndMs, boolean socketReused, long sentByteCount, long receivedByteCount)",
    "returnType" : "void",
    "comment" : " Called by the native code to report metrics just before the native adapter is destroyed. ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDestroyedCallbackForTesting(Runnable onDestroyedCallbackForTesting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean doesMethodAllowWriteData(String methodName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ArrayList<Map.Entry<String, String>> headersListFromStrings(String[] headers)",
    "returnType" : "ArrayList<Map.Entry<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String[] stringsFromHeaderList(List<Map.Entry<String, String>> headersList)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int convertStreamPriority(@CronetEngineBase.StreamPriority int priority)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postTaskToExecutor(Runnable task)",
    "returnType" : "void",
    "comment" : "\n     * Posts task to application Executor. Used for callbacks\n     * and other tasks that should not be executed on network thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "private UrlResponseInfoImpl prepareResponseInfoOnNetworkThread(int httpStatusCode, String negotiatedProtocol, String[] headers, long receivedByteCount)",
    "returnType" : "UrlResponseInfoImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void destroyNativeStreamLocked(boolean sendOnCanceled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void failWithExceptionOnExecutor(CronetException e)",
    "returnType" : "void",
    "comment" : " Fails the stream with an exception. Only called on the Executor. ",
    "links" : [ ]
  }, {
    "name" : "private void onCallbackException(Exception e)",
    "returnType" : "void",
    "comment" : "\n     * If callback method throws an exception, stream gets canceled\n     * and exception is reported via onFailed callback.\n     * Only called on the Executor.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void failWithException(final CronetException exception)",
    "returnType" : "void",
    "comment" : " Fails the stream with an exception. Can be called on any thread. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getHttpMethod()", "public boolean hasTrafficStatsTag()", "public int getTrafficStatsTag()", "public boolean hasTrafficStatsUid()", "public int getTrafficStatsUid()", "public UrlResponseInfo.HeaderBlock getHeaders()", "public int getPriority()", "public boolean isDelayRequestHeadersUntilFirstFlushEnabled()", "public void start()", "public void read(ByteBuffer buffer)", "public void write(ByteBuffer buffer, boolean endOfStream)", "public void flush()", "private void sendFlushDataLocked()", "public List<ByteBuffer> getPendingDataForTesting()", "public List<ByteBuffer> getFlushDataForTesting()", "public void cancel()", "public boolean isDone()", "private boolean isDoneLocked()", "private void maybeOnSucceededOnExecutor()", "private void onStreamReady(final boolean requestHeadersSent)", "private void onResponseHeadersReceived(int httpStatusCode, String negotiatedProtocol, String[] headers, long receivedByteCount)", "private void onReadCompleted(final ByteBuffer byteBuffer, int bytesRead, int initialPosition, int initialLimit, long receivedByteCount)", "private void onWritevCompleted(final ByteBuffer[] byteBuffers, int[] initialPositions, int[] initialLimits, boolean endOfStream)", "private void onResponseTrailersReceived(String[] trailers)", "private void onError(int errorCode, int nativeError, int nativeQuicError, String errorString, long receivedByteCount)", "private void onCanceled()", "private void onMetricsCollected(long requestStartMs, long dnsStartMs, long dnsEndMs, long connectStartMs, long connectEndMs, long sslStartMs, long sslEndMs, long sendingStartMs, long sendingEndMs, long pushStartMs, long pushEndMs, long responseStartMs, long requestEndMs, boolean socketReused, long sentByteCount, long receivedByteCount)", "public void setOnDestroyedCallbackForTesting(Runnable onDestroyedCallbackForTesting)", "private static boolean doesMethodAllowWriteData(String methodName)", "private static ArrayList<Map.Entry<String, String>> headersListFromStrings(String[] headers)", "private static String[] stringsFromHeaderList(List<Map.Entry<String, String>> headersList)", "private static int convertStreamPriority(@CronetEngineBase.StreamPriority int priority)", "private void postTaskToExecutor(Runnable task)", "private UrlResponseInfoImpl prepareResponseInfoOnNetworkThread(int httpStatusCode, String negotiatedProtocol, String[] headers, long receivedByteCount)", "private void destroyNativeStreamLocked(boolean sendOnCanceled)", "private void failWithExceptionOnExecutor(CronetException e)", "private void onCallbackException(Exception e)", "private void failWithException(final CronetException exception)" ],
  "variableNames" : [ "mRequestContext", "mExecutor", "mCallback", "mInitialUrl", "mInitialPriority", "mInitialMethod", "mRequestHeaders", "mRequestHeaderBlock", "mDelayRequestHeadersUntilFirstFlush", "mRequestAnnotations", "mTrafficStatsTagSet", "mTrafficStatsTag", "mTrafficStatsUidSet", "mTrafficStatsUid", "mNetworkHandle", "mInflightDoneCallbackCount", "mException", "mNativeStreamLock", "mPendingData", "mFlushData", "mEndOfStreamWritten", "mRequestHeadersSent", "mMetrics", "mNativeStream", "mReadState", "mWriteState", "mResponseInfo", "mOnReadCompletedTask", "mOnDestroyedCallbackForTesting" ]
}