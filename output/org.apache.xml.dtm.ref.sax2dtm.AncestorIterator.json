{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/sax2dtm/SAX2DTM2.java",
  "packageName" : "org.apache.xml.dtm.ref.sax2dtm",
  "className" : "AncestorIterator",
  "comment" : "\n   * Iterator that returns the ancestors of a given node in document\n   * order.  (NOTE!  This was changed from the XSLTC code!)\n   ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_blocksize",
    "type" : "int",
    "comment" : " The initial size of the ancestor array",
    "links" : [ ]
  }, {
    "name" : "m_ancestors",
    "type" : "int[]",
    "comment" : " The array for ancestor nodes. This array will grow dynamically.",
    "links" : [ ]
  }, {
    "name" : "m_size",
    "type" : "int",
    "comment" : " Number of ancestor nodes in the array",
    "links" : [ ]
  }, {
    "name" : "m_ancestorsPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_markedPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_realStartNode",
    "type" : "int",
    "comment" : " The real start node for this axes, since _startNode will be adjusted. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getStartNode()",
    "returnType" : "int",
    "comment" : "\n     * Get start to END should 'close' the iterator,\n     * i.e. subsequent call to next() should return END.\n     *\n     * @return The root node of the iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isReverse()",
    "returnType" : "boolean",
    "comment" : "\n     * True if this iterator has a reversed axis.\n     *\n     * @return true since this iterator is a reversed axis.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DTMAxisIterator cloneIterator()",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n     * Returns a deep copy of this iterator.  The cloned iterator is not reset.\n     *\n     * @return a deep copy of this iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DTMAxisIterator setStartNode(int node)",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n     * Set start to END should 'close' the iterator,\n     * i.e. subsequent call to next() should return END.\n     *\n     * @param node Sets the root of the iteration.\n     *\n     * @return A DTMAxisIterator set to the start of the iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DTMAxisIterator reset()",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n     * Resets the iterator to the last start node.\n     *\n     * @return A DTMAxisIterator, which may or may not be the same as this\n     *         iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "\n     * Get the next node in the iteration.\n     *\n     * @return The next node handle in the iteration, or END.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMark()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void gotoMark()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getStartNode()", "public final boolean isReverse()", "public DTMAxisIterator cloneIterator()", "public DTMAxisIterator setStartNode(int node)", "public DTMAxisIterator reset()", "public int next()", "public void setMark()", "public void gotoMark()" ],
  "variableNames" : [ "m_blocksize", "m_ancestors", "m_size", "m_ancestorsPos", "m_markedPos", "m_realStartNode" ]
}