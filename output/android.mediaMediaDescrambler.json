{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaDescrambler.java",
  "packageName" : "android.media",
  "className" : "MediaDescrambler",
  "comment" : "\n * MediaDescrambler class can be used in conjunction with {@link android.media.MediaCodec}\n * and {@link android.media.MediaExtractor} to decode media data scrambled by conditional\n * access (CA) systems such as those in the ISO/IEC13818-1.\n *\n * A MediaDescrambler object is initialized from a session opened by a MediaCas object,\n * and can be used to descramble media streams scrambled with that session's keys.\n *\n * Scrambling schemes are identified by 16-bit unsigned integer as in CA_system_id.\n *\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIDescrambler",
    "type" : "IDescramblerBase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCRAMBLE_CONTROL_UNSCRAMBLED",
    "type" : "byte",
    "comment" : "\n     * Scramble control value indicating that the samples are not scrambled.\n     * @see #descramble(ByteBuffer, ByteBuffer, android.media.MediaCodec.CryptoInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRAMBLE_CONTROL_RESERVED",
    "type" : "byte",
    "comment" : "\n     * Scramble control value reserved and shouldn't be used currently.\n     * @see #descramble(ByteBuffer, ByteBuffer, android.media.MediaCodec.CryptoInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRAMBLE_CONTROL_EVEN_KEY",
    "type" : "byte",
    "comment" : "\n     * Scramble control value indicating that the even key is used.\n     * @see #descramble(ByteBuffer, ByteBuffer, android.media.MediaCodec.CryptoInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRAMBLE_CONTROL_ODD_KEY",
    "type" : "byte",
    "comment" : "\n     * Scramble control value indicating that the odd key is used.\n     * @see #descramble(ByteBuffer, ByteBuffer, android.media.MediaCodec.CryptoInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRAMBLE_FLAG_PES_HEADER",
    "type" : "byte",
    "comment" : "\n     * Scramble flag for a hint indicating that the descrambling request is for\n     * retrieving the PES header info only.\n     *\n     * @see #descramble(ByteBuffer, ByteBuffer, android.media.MediaCodec.CryptoInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private final void validateInternalStates()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void cleanupAndRethrowIllegalState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " IHwBinder getBinder()",
    "returnType" : "IHwBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean requiresSecureDecoderComponent(@NonNull String mime)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if the scrambling scheme requires the use of a secure decoder\n     * to decode data of the given mime type.\n     *\n     * @param mime The mime type of the media data\n     *\n     * @throws IllegalStateException if the descrambler instance is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setMediaCasSession(@NonNull MediaCas.Session session)",
    "returnType" : "void",
    "comment" : "\n     * Associate a MediaCas session with this MediaDescrambler instance.\n     * The MediaCas session is used to securely load decryption keys for\n     * the descrambler. The crypto keys loaded through the MediaCas session\n     * may be selected for use during the descrambling operation performed\n     * by {@link android.media.MediaExtractor or @link\n     * android.media.MediaCodec#queueSecureInputBuffer} by specifying even\n     * or odd key in the {@link android.media.MediaCodec.CryptoInfo#key} field.\n     *\n     * @param session the MediaCas session to associate with this\n     * MediaDescrambler instance.\n     *\n     * @throws IllegalStateException if the descrambler instance is not valid.\n     * @throws MediaCasStateException for CAS-specific state exceptions.\n     ",
    "links" : [ "android.media.MediaExtractor", "android.media.MediaCodec.CryptoInfo#key" ]
  }, {
    "name" : "public final int descramble(@NonNull ByteBuffer srcBuf, @NonNull ByteBuffer dstBuf, @NonNull MediaCodec.CryptoInfo cryptoInfo)",
    "returnType" : "int",
    "comment" : "\n     * Descramble a ByteBuffer of data described by a\n     * {@link android.media.MediaCodec.CryptoInfo} structure.\n     *\n     * @param srcBuf ByteBuffer containing the scrambled data, which starts at\n     * srcBuf.position().\n     * @param dstBuf ByteBuffer to hold the descrambled data, which starts at\n     * dstBuf.position().\n     * @param cryptoInfo a {@link android.media.MediaCodec.CryptoInfo} structure\n     * describing the subsamples contained in srcBuf. The iv and mode fields in\n     * CryptoInfo are not used. key[0] contains the MPEG2TS scrambling control bits\n     * (as defined in ETSI TS 100 289 (2011): \"Digital Video Broadcasting (DVB);\n     * Support for use of the DVB Scrambling Algorithm version 3 within digital\n     * broadcasting systems\"), and the value must be one of {@link #SCRAMBLE_CONTROL_UNSCRAMBLED},\n     * {@link #SCRAMBLE_CONTROL_RESERVED}, {@link #SCRAMBLE_CONTROL_EVEN_KEY} or\n     * {@link #SCRAMBLE_CONTROL_ODD_KEY}. key[1] is a set of bit flags, with the\n     * only possible bit being {@link #SCRAMBLE_FLAG_PES_HEADER} currently.\n     * key[2~15] are not used.\n     *\n     * @return number of bytes that have been successfully descrambled, with negative\n     * values indicating errors.\n     *\n     * @throws IllegalStateException if the descrambler instance is not valid.\n     * @throws MediaCasStateException for CAS-specific state exceptions.\n     ",
    "links" : [ "android.media.MediaCodec.CryptoInfo", "android.media.MediaCodec.CryptoInfo", "#SCRAMBLE_CONTROL_UNSCRAMBLED", "#SCRAMBLE_CONTROL_RESERVED", "#SCRAMBLE_CONTROL_EVEN_KEY", "#SCRAMBLE_CONTROL_ODD_KEY", "#SCRAMBLE_FLAG_PES_HEADER" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_setup(@NonNull IHwBinder decramblerBinder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native int native_descramble(byte key, byte flags, int numSubSamples, int[] numBytesOfClearData, int[] numBytesOfEncryptedData, @NonNull ByteBuffer srcBuf, int srcOffset, int srcLimit, ByteBuffer dstBuf, int dstOffset, int dstLimit) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mIDescrambler", "SCRAMBLE_CONTROL_UNSCRAMBLED", "SCRAMBLE_CONTROL_RESERVED", "SCRAMBLE_CONTROL_EVEN_KEY", "SCRAMBLE_CONTROL_ODD_KEY", "SCRAMBLE_FLAG_PES_HEADER", "mNativeContext" ],
  "methodNames" : [ "private final void validateInternalStates()", "private final void cleanupAndRethrowIllegalState()", " IHwBinder getBinder()", "public final boolean requiresSecureDecoderComponent(@NonNull String mime)", "public final void setMediaCasSession(@NonNull MediaCas.Session session)", "public final int descramble(@NonNull ByteBuffer srcBuf, @NonNull ByteBuffer dstBuf, @NonNull MediaCodec.CryptoInfo cryptoInfo)", "public void close()", "protected void finalize()", "private static final native void native_init()", "private final native void native_setup(@NonNull IHwBinder decramblerBinder)", "private final native void native_release()", "private final native int native_descramble(byte key, byte flags, int numSubSamples, int[] numBytesOfClearData, int[] numBytesOfEncryptedData, @NonNull ByteBuffer srcBuf, int srcOffset, int srcLimit, ByteBuffer dstBuf, int dstOffset, int dstLimit) throws RemoteException" ]
}