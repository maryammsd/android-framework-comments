{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/util/Rfc822Tokenizer.java",
  "packageName" : "android.text.util",
  "className" : "Rfc822Tokenizer",
  "comment" : "\n * This class works as a Tokenizer for MultiAutoCompleteTextView for\n * address list fields, and also provides a method for converting\n * a string of addresses (such as might be typed into such a field)\n * into a series of Rfc822Tokens.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static void tokenize(CharSequence text, Collection<Rfc822Token> out)",
    "returnType" : "void",
    "comment" : "\n     * This constructor will try to take a string like\n     * \"Foo Bar (something) &lt;foo\\@google.com&gt;,\n     * blah\\@google.com (something)\"\n     * and convert it into one or more Rfc822Tokens, output into the supplied\n     * collection.\n     *\n     * It does *not* decode MIME encoded-words; charset conversion\n     * must already have taken place if necessary.\n     * It will try to be tolerant of broken syntax instead of\n     * returning an error.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Rfc822Token[] tokenize(CharSequence text)",
    "returnType" : "Rfc822Token[]",
    "comment" : "\n     * This method will try to take a string like\n     * \"Foo Bar (something) &lt;foo\\@google.com&gt;,\n     * blah\\@google.com (something)\"\n     * and convert it into one or more Rfc822Tokens.\n     * It does *not* decode MIME encoded-words; charset conversion\n     * must already have taken place if necessary.\n     * It will try to be tolerant of broken syntax instead of\n     * returning an error.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void crunch(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int findTokenStart(CharSequence text, int cursor)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int findTokenEnd(CharSequence text, int cursor)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence terminateToken(CharSequence text)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Terminates the specified address with a comma and space.\n     * This assumes that the specified text already has valid syntax.\n     * The Adapter subclass's convertToString() method must make that\n     * guarantee.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static void tokenize(CharSequence text, Collection<Rfc822Token> out)", "public static Rfc822Token[] tokenize(CharSequence text)", "private static void crunch(StringBuilder sb)", "public int findTokenStart(CharSequence text, int cursor)", "public int findTokenEnd(CharSequence text, int cursor)", "public CharSequence terminateToken(CharSequence text)" ]
}