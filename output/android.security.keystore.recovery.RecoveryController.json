{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/recovery/RecoveryController.java",
  "packageName" : "android.security.keystore.recovery",
  "className" : "RecoveryController",
  "comment" : "\n * Backs up cryptographic keys to remote secure hardware, encrypted with the user's lock screen.\n *\n * <p>A system app with the {@code android.permission.RECOVER_KEYSTORE} permission may generate or\n * import recoverable keys using this class. To generate a key, the app must call\n * {@link #generateKey(String)} with the desired alias for the key. This returns an AndroidKeyStore\n * reference to a 256-bit {@link javax.crypto.SecretKey}, which can be used for AES/GCM/NoPadding.\n * In order to get the same key again at a later time, the app can call {@link #getKey(String)} with\n * the same alias. If a key is generated in this way the key's raw material is never directly\n * exposed to the calling app. The system app may also import key material using\n * {@link #importKey(String, byte[])}. The app may only generate and import keys for its own\n * {@code uid}.\n *\n * <p>The same system app must also register a Recovery Agent to manage syncing recoverable keys to\n * remote secure hardware. The Recovery Agent is a service that registers itself with the controller\n * as follows:\n *\n * <ul>\n *     <li>Invokes {@link #initRecoveryService(String, byte[], byte[])}\n *     <ul>\n *         <li>The first argument is the alias of the root certificate used to verify trusted\n *         hardware modules. Each trusted hardware module must have a public key signed with this\n *         root of trust. Roots of trust must be shipped with the framework. The app can list all\n *         valid roots of trust by calling {@link #getRootCertificates()}.\n *         <li>The second argument is the UTF-8 bytes of the XML listing file. It lists the X509\n *         certificates containing the public keys of all available remote trusted hardware modules.\n *         Each of the X509 certificates can be validated against the chosen root of trust.\n *         <li>The third argument is the UTF-8 bytes of the XML signing file. The file contains a\n *         signature of the XML listing file. The signature can be validated against the chosen root\n *         of trust.\n *     </ul>\n *     <p>This will cause the controller to choose a random public key from the list. From then\n *     on the controller will attempt to sync the key chain with the trusted hardware module to whom\n *     that key belongs.\n *     <li>Invokes {@link #setServerParams(byte[])} with a byte string that identifies the device\n *     to a remote server. This server may act as the front-end to the trusted hardware modules. It\n *     is up to the Recovery Agent to decide how best to identify devices, but this could be, e.g.,\n *     based on the <a href=\"https://developers.google.com/instance-id/\">Instance ID</a> of the\n *     system app.\n *     <li>Invokes {@link #setRecoverySecretTypes(int[])} with a list of types of secret used to\n *     secure the recoverable key chain. For now only\n *     {@link KeyChainProtectionParams#TYPE_LOCKSCREEN} is supported.\n *     <li>Invokes {@link #setSnapshotCreatedPendingIntent(PendingIntent)} with a\n *     {@link PendingIntent} that is to be invoked whenever a new snapshot is created. Although the\n *     controller can create snapshots without the Recovery Agent registering this intent, it is a\n *     good idea to register the intent so that the Recovery Agent is able to sync this snapshot to\n *     the trusted hardware module as soon as it is available.\n * </ul>\n *\n * <p>The trusted hardware module's public key MUST be generated on secure hardware with protections\n * equivalent to those described in the\n * <a href=\"https://developer.android.com/preview/features/security/ckv-whitepaper.html\">Google\n * Cloud Key Vault Service whitepaper</a>. The trusted hardware module itself must protect the key\n * chain from brute-forcing using the methods also described in the whitepaper: i.e., it should\n * limit the number of allowed attempts to enter the lock screen. If the number of attempts is\n * exceeded the key material must no longer be recoverable.\n *\n * <p>A recoverable key chain snapshot is considered pending if any of the following conditions\n * are met:\n *\n * <ul>\n *     <li>The system app mutates the key chain. i.e., generates, imports, or removes a key.\n *     <li>The user changes their lock screen.\n * </ul>\n *\n * <p>Whenever the user unlocks their device, if a snapshot is pending, the Recovery Controller\n * generates a new snapshot. It follows these steps to do so:\n *\n * <ul>\n *     <li>Generates a 256-bit AES key using {@link java.security.SecureRandom}. This is the\n *     Recovery Key.\n *     <li>Wraps the key material of all keys in the recoverable key chain with the Recovery Key.\n *     <li>Encrypts the Recovery Key with both the public key of the trusted hardware module and a\n *     symmetric key derived from the user's lock screen.\n * </ul>\n *\n * <p>The controller then writes this snapshot to disk, and uses the {@link PendingIntent} that was\n * set by the Recovery Agent during initialization to inform it that a new snapshot is available.\n * The snapshot only contains keys for that Recovery Agent's {@code uid} - i.e., keys the agent's\n * app itself generated. If multiple Recovery Agents exist on the device, each will be notified of\n * their new snapshots, and each snapshots' keys will be only those belonging to the same\n * {@code uid}.\n *\n * <p>The Recovery Agent retrieves its most recent snapshot by calling\n * {@link #getKeyChainSnapshot()}. It syncs the snapshot to the remote server. The snapshot contains\n * the public key used for encryption, which the server uses to forward the encrypted recovery key\n * to the correct trusted hardware module. The snapshot also contains the server params, which are\n * used to identify this device to the server.\n *\n * <p>The client uses the server params to identify a device whose key chain it wishes to restore.\n * This may be on a different device to the device that originally synced the key chain. The client\n * sends the server params identifying the previous device to the server. The server returns the\n * X509 certificate identifying the trusted hardware module in which the encrypted Recovery Key is\n * stored. It also returns some vault parameters identifying that particular Recovery Key to the\n * trusted hardware module. And it also returns a vault challenge, which is used as part of the\n * vault opening protocol to ensure the recovery claim is fresh. See the whitepaper for more\n * details.\n *\n * <p>The key chain is recovered via a {@link RecoverySession}. A Recovery Agent creates one by\n * invoking {@link #createRecoverySession()}. It then invokes\n * {@link RecoverySession#start(String, CertPath, byte[], byte[], List)} with these arguments:\n *\n * <ul>\n *     <li>The alias of the root of trust used to verify the trusted hardware module.\n *     <li>The X509 certificate of the trusted hardware module.\n *     <li>The vault parameters used to identify the Recovery Key to the trusted hardware module.\n *     <li>The vault challenge, as issued by the trusted hardware module.\n *     <li>A list of secrets, corresponding to the secrets used to protect the key chain. At the\n *     moment this is a single {@link KeyChainProtectionParams} containing the lock screen of the\n *     device whose key chain is to be recovered.\n * </ul>\n *\n * <p>This method returns a byte array containing the Recovery Claim, which can be issued to the\n * remote trusted hardware module. It is encrypted with the trusted hardware module's public key\n * (which has itself been certified with the root of trust). It also contains an ephemeral symmetric\n * key generated for this recovery session, which the remote trusted hardware module uses to encrypt\n * its responses. This is the Session Key.\n *\n * <p>If the lock screen provided is correct, the remote trusted hardware module decrypts one of the\n * layers of lock-screen encryption from the Recovery Key. It then returns this key, encrypted with\n * the Session Key to the Recovery Agent. As the Recovery Agent does not know the Session Key, it\n * must then invoke {@link RecoverySession#recoverKeyChainSnapshot(byte[], List)} with the encrypted\n * Recovery Key and the list of wrapped application keys. The controller then decrypts the layer of\n * encryption provided by the Session Key, and uses the lock screen to decrypt the final layer of\n * encryption. It then uses the Recovery Key to decrypt all of the wrapped application keys, and\n * imports them into its own KeyStore. The Recovery Agent's app may then access these keys by\n * calling {@link #getKey(String)}. Only this app's {@code uid} may access the keys that have been\n * recovered.\n *\n * @hide\n ",
  "links" : [ "#getKey(String)", "#setServerParams(byte", "#initRecoveryService(String", "android.app.PendingIntent", "#getKeyChainSnapshot()", "#createRecoverySession()", "android.security.keystore.recovery.KeyChainProtectionParams#TYPE_LOCKSCREEN", "java.security.SecureRandom", "#importKey(String", "#setSnapshotCreatedPendingIntent(PendingIntent)", "#setRecoverySecretTypes(int", "#getRootCertificates()", "android.security.keystore.recovery.KeyChainProtectionParams", "javax.crypto.SecretKey", "#generateKey(String)", "android.security.keystore.recovery.RecoverySession", "android.security.keystore.recovery.RecoverySession#start(String", "android.security.keystore.recovery.RecoverySession#recoverKeyChainSnapshot(byte" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECOVERY_STATUS_SYNCED",
    "type" : "int",
    "comment" : " Key has been successfully synced. ",
    "links" : [ ]
  }, {
    "name" : "RECOVERY_STATUS_SYNC_IN_PROGRESS",
    "type" : "int",
    "comment" : " Waiting for recovery agent to sync the key. ",
    "links" : [ ]
  }, {
    "name" : "RECOVERY_STATUS_PERMANENT_FAILURE",
    "type" : "int",
    "comment" : " Key cannot be synced. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_SNAPSHOT_PENDING",
    "type" : "int",
    "comment" : "\n     * Failed because no snapshot is yet pending to be synced for the user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SERVICE_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Failed due to an error internal to the recovery service. This is unexpected and indicates\n     * either a problem with the logic in the service, or a problem with a dependency of the\n     * service (such as AndroidKeyStore).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSECURE_USER",
    "type" : "int",
    "comment" : "\n     * Failed because the user does not have a lock screen set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SESSION_EXPIRED",
    "type" : "int",
    "comment" : "\n     * Error thrown when attempting to use a recovery session that has since been closed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BAD_CERTIFICATE_FORMAT",
    "type" : "int",
    "comment" : "\n     * Failed because the format of the provided certificate is incorrect, e.g., cannot be decoded\n     * properly or misses necessary fields.\n     *\n     * <p>Note that this is different from {@link #ERROR_INVALID_CERTIFICATE}, which implies the\n     * certificate has a correct format but cannot be validated.\n     *\n     * @hide\n     ",
    "links" : [ "#ERROR_INVALID_CERTIFICATE" ]
  }, {
    "name" : "ERROR_DECRYPTION_FAILED",
    "type" : "int",
    "comment" : "\n     * Error thrown if decryption failed. This might be because the tag is wrong, the key is wrong,\n     * the data has become corrupted, the data has been tampered with, etc.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_KEY_FORMAT",
    "type" : "int",
    "comment" : "\n     * Error thrown if the format of a given key is invalid. This might be because the key has a\n     * wrong length, invalid content, etc.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_CERTIFICATE",
    "type" : "int",
    "comment" : "\n     * Failed because the provided certificate cannot be validated, e.g., is expired or has invalid\n     * signatures.\n     *\n     * <p>Note that this is different from {@link #ERROR_BAD_CERTIFICATE_FORMAT}, which denotes\n     * incorrect certificate formats, e.g., due to wrong encoding or structure.\n     *\n     * @hide\n     ",
    "links" : [ "#ERROR_BAD_CERTIFICATE_FORMAT" ]
  }, {
    "name" : "ERROR_DOWNGRADE_CERTIFICATE",
    "type" : "int",
    "comment" : "\n     * Failed because the provided certificate contained serial version which is lower that the\n     * version device is already initialized with. It is not possible to downgrade serial version of\n     * the provided certificate.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * Requested key is not available in AndroidKeyStore.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "ILockSettings",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLICATION_KEY_GRANT_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ILockSettings getBinder()",
    "returnType" : "ILockSettings",
    "comment" : "\n     * Internal method used by {@code RecoverySession}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RecoveryController getInstance(@NonNull Context context)",
    "returnType" : "RecoveryController",
    "comment" : "\n     * Gets a new instance of the class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isRecoverableKeyStoreEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the recoverable key store is currently available.\n     *\n     * <p>If it returns true, the device must currently be using a screen lock that is supported for\n     * use with the recoverable key store, i.e. AOSP PIN, pattern or password.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initRecoveryService(@NonNull String rootCertificateAlias, @NonNull byte[] certificateFile, @NonNull byte[] signatureFile) throws CertificateException, InternalRecoveryServiceException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the recovery service for the calling application. The detailed steps should be:\n     * <ol>\n     *     <li>Parse {@code signatureFile} to get relevant information.\n     *     <li>Validate the signer's X509 certificate, contained in {@code signatureFile}, against\n     *         the root certificate pre-installed in the OS and chosen by {@code\n     *         rootCertificateAlias}.\n     *     <li>Verify the public-key signature, contained in {@code signatureFile}, and verify it\n     *         against the entire {@code certificateFile}.\n     *     <li>Parse {@code certificateFile} to get relevant information.\n     *     <li>Check the serial number, contained in {@code certificateFile}, and skip the following\n     *         steps if the serial number is not larger than the one previously stored.\n     *     <li>Randomly choose a X509 certificate from the endpoint X509 certificates, contained in\n     *         {@code certificateFile}, and validate it against the root certificate pre-installed\n     *         in the OS and chosen by {@code rootCertificateAlias}.\n     *     <li>Store the chosen X509 certificate and the serial in local database for later use.\n     * </ol>\n     *\n     * @param rootCertificateAlias the alias of a root certificate pre-installed in the OS\n     * @param certificateFile the binary content of the XML file containing a list of recovery\n     *     service X509 certificates, and other metadata including the serial number\n     * @param signatureFile the binary content of the XML file containing the public-key signature\n     *     of the entire certificate file, and a signer's X509 certificate\n     * @throws CertificateException if the given certificate files cannot be parsed or validated\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyChainSnapshot getKeyChainSnapshot() throws InternalRecoveryServiceException",
    "returnType" : "KeyChainSnapshot",
    "comment" : "\n     * Returns data necessary to store all recoverable keys. Key material is\n     * encrypted with user secret and recovery public key.\n     *\n     * @return Data necessary to recover keystore or {@code null} if snapshot is not available.\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSnapshotCreatedPendingIntent(@Nullable PendingIntent intent) throws InternalRecoveryServiceException",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener which notifies recovery agent that new recovery snapshot is available. {@link\n     * #getKeyChainSnapshot} can be used to get the snapshot. Note that every recovery agent can\n     * have at most one registered listener at any time.\n     *\n     * @param intent triggered when new snapshot is available. Unregisters listener if the value is\n     *     {@code null}.\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ "#getKeyChainSnapshot" ]
  }, {
    "name" : "public void setServerParams(@NonNull byte[] serverParams) throws InternalRecoveryServiceException",
    "returnType" : "void",
    "comment" : "\n     * Server parameters used to generate new recovery key blobs. This value will be included in\n     * {@code KeyChainSnapshot.getEncryptedRecoveryKeyBlob()}. The same value must be included\n     * in vaultParams {@link RecoverySession#start(CertPath, byte[], byte[], List)}.\n     *\n     * @param serverParams included in recovery key blob.\n     * @see #getKeyChainSnapshot\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ "android.security.keystore.recovery.RecoverySession#start(CertPath" ]
  }, {
    "name" : "public List<String> getAliases() throws InternalRecoveryServiceException",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of aliases of keys belonging to the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRecoveryStatus(@NonNull String alias, int status) throws InternalRecoveryServiceException",
    "returnType" : "void",
    "comment" : "\n     * Sets the recovery status for given key. It is used to notify the keystore that the key was\n     * successfully stored on the server or that there was an error. An application can check this\n     * value using {@link #getRecoveryStatus(String, String)}.\n     *\n     * @param alias The alias of the key whose status to set.\n     * @param status The status of the key. One of {@link #RECOVERY_STATUS_SYNCED},\n     *     {@link #RECOVERY_STATUS_SYNC_IN_PROGRESS} or {@link #RECOVERY_STATUS_PERMANENT_FAILURE}.\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ "#getRecoveryStatus(String", "#RECOVERY_STATUS_SYNC_IN_PROGRESS", "#RECOVERY_STATUS_SYNCED", "#RECOVERY_STATUS_PERMANENT_FAILURE" ]
  }, {
    "name" : "public int getRecoveryStatus(@NonNull String alias) throws InternalRecoveryServiceException",
    "returnType" : "int",
    "comment" : "\n     * Returns the recovery status for the key with the given {@code alias}.\n     *\n     * <ul>\n     *   <li>{@link #RECOVERY_STATUS_SYNCED}\n     *   <li>{@link #RECOVERY_STATUS_SYNC_IN_PROGRESS}\n     *   <li>{@link #RECOVERY_STATUS_PERMANENT_FAILURE}\n     * </ul>\n     *\n     * @see #setRecoveryStatus(String, int)\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ "#RECOVERY_STATUS_SYNC_IN_PROGRESS", "#RECOVERY_STATUS_SYNCED", "#RECOVERY_STATUS_PERMANENT_FAILURE" ]
  }, {
    "name" : "public void setRecoverySecretTypes(@NonNull @KeyChainProtectionParams.UserSecretType int[] secretTypes) throws InternalRecoveryServiceException",
    "returnType" : "void",
    "comment" : "\n     * Specifies a set of secret types used for end-to-end keystore encryption. Knowing all of them\n     * is necessary to recover data.\n     *\n     * @param secretTypes {@link KeyChainProtectionParams#TYPE_LOCKSCREEN}\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ "android.security.keystore.recovery.KeyChainProtectionParams#TYPE_LOCKSCREEN" ]
  }, {
    "name" : "public int[] getRecoverySecretTypes() throws InternalRecoveryServiceException",
    "returnType" : "int[]",
    "comment" : "\n     * Defines a set of secret types used for end-to-end keystore encryption. Knowing all of them is\n     * necessary to generate KeyChainSnapshot.\n     *\n     * @return list of recovery secret types\n     * @see KeyChainSnapshot\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Key generateKey(@NonNull String alias) throws InternalRecoveryServiceException, LockScreenRequiredException",
    "returnType" : "Key",
    "comment" : "\n     * Generates a recoverable key with the given {@code alias}.\n     *\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     * @throws LockScreenRequiredException if the user does not have a lock screen set. A lock\n     *     screen is required to generate recoverable keys.\n     *\n     * @deprecated Use the method {@link #generateKey(String, byte[])} instead.\n     ",
    "links" : [ "#generateKey(String" ]
  }, {
    "name" : "public Key generateKey(@NonNull String alias, @Nullable byte[] metadata) throws InternalRecoveryServiceException, LockScreenRequiredException",
    "returnType" : "Key",
    "comment" : "\n     * Generates a recoverable key with the given {@code alias} and {@code metadata}.\n     *\n     * <p>The metadata should contain any data that needs to be cryptographically bound to the\n     * generated key, but does not need to be encrypted by the key. For example, the metadata can\n     * be a byte string describing the algorithms and non-secret parameters to be used with the\n     * key. The supplied metadata can later be obtained via\n     * {@link WrappedApplicationKey#getMetadata()}.\n     *\n     * <p>During the key recovery process, the same metadata has to be supplied via\n     * {@link WrappedApplicationKey.Builder#setMetadata(byte[])}; otherwise, the recovery process\n     * will fail due to the checking of the cryptographic binding. This can help prevent\n     * potential attacks that try to swap key materials on the backup server and trick the\n     * application to use keys with different algorithms or parameters.\n     *\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     * @throws LockScreenRequiredException if the user does not have a lock screen set. A lock\n     *     screen is required to generate recoverable keys.\n     ",
    "links" : [ "WrappedApplicationKey.Builder#setMetadata(byte", "android.security.keystore.recovery.WrappedApplicationKey#getMetadata()" ]
  }, {
    "name" : "public Key importKey(@NonNull String alias, @NonNull byte[] keyBytes) throws InternalRecoveryServiceException, LockScreenRequiredException",
    "returnType" : "Key",
    "comment" : "\n     * Imports a 256-bit recoverable AES key with the given {@code alias} and the raw bytes {@code\n     * keyBytes}.\n     *\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     * @throws LockScreenRequiredException if the user does not have a lock screen set. A lock\n     *     screen is required to generate recoverable keys.\n     *\n     * @deprecated Use the method {@link #importKey(String, byte[], byte[])} instead.\n     ",
    "links" : [ "#importKey(String" ]
  }, {
    "name" : "public Key importKey(@NonNull String alias, @NonNull byte[] keyBytes, @Nullable byte[] metadata) throws InternalRecoveryServiceException, LockScreenRequiredException",
    "returnType" : "Key",
    "comment" : "\n     * Imports a recoverable 256-bit AES key with the given {@code alias}, the raw bytes {@code\n     * keyBytes}, and the {@code metadata}.\n     *\n     * <p>The metadata should contain any data that needs to be cryptographically bound to the\n     * imported key, but does not need to be encrypted by the key. For example, the metadata can\n     * be a byte string describing the algorithms and non-secret parameters to be used with the\n     * key. The supplied metadata can later be obtained via\n     * {@link WrappedApplicationKey#getMetadata()}.\n     *\n     * <p>During the key recovery process, the same metadata has to be supplied via\n     * {@link WrappedApplicationKey.Builder#setMetadata(byte[])}; otherwise, the recovery process\n     * will fail due to the checking of the cryptographic binding. This can help prevent\n     * potential attacks that try to swap key materials on the backup server and trick the\n     * application to use keys with different algorithms or parameters.\n     *\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     * @throws LockScreenRequiredException if the user does not have a lock screen set. A lock\n     *     screen is required to generate recoverable keys.\n     ",
    "links" : [ "WrappedApplicationKey.Builder#setMetadata(byte", "android.security.keystore.recovery.WrappedApplicationKey#getMetadata()" ]
  }, {
    "name" : "public Key getKey(@NonNull String alias) throws InternalRecoveryServiceException, UnrecoverableKeyException",
    "returnType" : "Key",
    "comment" : "\n     * Gets a key called {@code alias} from the recoverable key store.\n     *\n     * @param alias The key alias.\n     * @return The key.\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     * @throws UnrecoverableKeyException if key is permanently invalidated or not found.\n     ",
    "links" : [ ]
  }, {
    "name" : " Key getKeyFromGrant(@NonNull String grantAlias) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException",
    "returnType" : "Key",
    "comment" : "\n     * Returns the key with the given {@code grantAlias}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static KeyDescriptor getGrantDescriptor(String grantAlias)",
    "returnType" : "KeyDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeKey(@NonNull String alias) throws InternalRecoveryServiceException",
    "returnType" : "void",
    "comment" : "\n     * Removes a key called {@code alias} from the recoverable key store.\n     *\n     * @param alias The key alias.\n     * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     *     service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RecoverySession createRecoverySession()",
    "returnType" : "RecoverySession",
    "comment" : "\n     * Returns a new {@link RecoverySession}.\n     *\n     * <p>A recovery session is required to restore keys from a remote store.\n     ",
    "links" : [ "android.security.keystore.recovery.RecoverySession" ]
  }, {
    "name" : "public Map<String, X509Certificate> getRootCertificates()",
    "returnType" : "Map<String, X509Certificate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(ServiceSpecificException e)",
    "returnType" : "InternalRecoveryServiceException",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " ILockSettings getBinder()", "public static RecoveryController getInstance(@NonNull Context context)", "public static boolean isRecoverableKeyStoreEnabled(@NonNull Context context)", "public void initRecoveryService(@NonNull String rootCertificateAlias, @NonNull byte[] certificateFile, @NonNull byte[] signatureFile) throws CertificateException, InternalRecoveryServiceException", "public KeyChainSnapshot getKeyChainSnapshot() throws InternalRecoveryServiceException", "public void setSnapshotCreatedPendingIntent(@Nullable PendingIntent intent) throws InternalRecoveryServiceException", "public void setServerParams(@NonNull byte[] serverParams) throws InternalRecoveryServiceException", "public List<String> getAliases() throws InternalRecoveryServiceException", "public void setRecoveryStatus(@NonNull String alias, int status) throws InternalRecoveryServiceException", "public int getRecoveryStatus(@NonNull String alias) throws InternalRecoveryServiceException", "public void setRecoverySecretTypes(@NonNull @KeyChainProtectionParams.UserSecretType int[] secretTypes) throws InternalRecoveryServiceException", "public int[] getRecoverySecretTypes() throws InternalRecoveryServiceException", "public Key generateKey(@NonNull String alias) throws InternalRecoveryServiceException, LockScreenRequiredException", "public Key generateKey(@NonNull String alias, @Nullable byte[] metadata) throws InternalRecoveryServiceException, LockScreenRequiredException", "public Key importKey(@NonNull String alias, @NonNull byte[] keyBytes) throws InternalRecoveryServiceException, LockScreenRequiredException", "public Key importKey(@NonNull String alias, @NonNull byte[] keyBytes, @Nullable byte[] metadata) throws InternalRecoveryServiceException, LockScreenRequiredException", "public Key getKey(@NonNull String alias) throws InternalRecoveryServiceException, UnrecoverableKeyException", " Key getKeyFromGrant(@NonNull String grantAlias) throws UnrecoverableKeyException, KeyPermanentlyInvalidatedException", "private static KeyDescriptor getGrantDescriptor(String grantAlias)", "public void removeKey(@NonNull String alias) throws InternalRecoveryServiceException", "public RecoverySession createRecoverySession()", "public Map<String, X509Certificate> getRootCertificates()", " InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(ServiceSpecificException e)" ],
  "variableNames" : [ "TAG", "RECOVERY_STATUS_SYNCED", "RECOVERY_STATUS_SYNC_IN_PROGRESS", "RECOVERY_STATUS_PERMANENT_FAILURE", "ERROR_NO_SNAPSHOT_PENDING", "ERROR_SERVICE_INTERNAL_ERROR", "ERROR_INSECURE_USER", "ERROR_SESSION_EXPIRED", "ERROR_BAD_CERTIFICATE_FORMAT", "ERROR_DECRYPTION_FAILED", "ERROR_INVALID_KEY_FORMAT", "ERROR_INVALID_CERTIFICATE", "ERROR_DOWNGRADE_CERTIFICATE", "ERROR_KEY_NOT_FOUND", "mBinder", "APPLICATION_KEY_GRANT_PREFIX" ]
}