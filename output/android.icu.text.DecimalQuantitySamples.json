{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/PluralRules.java",
  "packageName" : "android.icu.text",
  "className" : "DecimalQuantitySamples",
  "comment" : "\n     * A list of DecimalQuantity representing PluralRules that includes all\n     * values with the same visibleFractionDigitCount.\n     * @deprecated This API is ICU internal only.\n     * @hide Only a subset of ICU is exposed in Android\n     * @hide draft / provisional / internal are hidden on Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sampleType",
    "type" : "SampleType",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "samples",
    "type" : "Set<DecimalQuantitySamplesRange>",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "bounded",
    "type" : "boolean",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static DecimalQuantitySamples parse(String source)",
    "returnType" : "DecimalQuantitySamples",
    "comment" : "\n         * Parse a list of the form described in CLDR. The source must be trimmed.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void checkDecimal(SampleType sampleType2, DecimalQuantity sample)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Collection<Double> addSamples(Collection<Double> result)",
    "returnType" : "Collection<Double>",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public Collection<DecimalQuantity> addDecimalQuantitySamples(Collection<DecimalQuantity> result)",
    "returnType" : "Collection<DecimalQuantity>",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addSamples(Collection<Double> doubleResult, Collection<DecimalQuantity> dqResult)",
    "returnType" : "void",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public Set<DecimalQuantitySamplesRange> getSamples()",
    "returnType" : "Set<DecimalQuantitySamplesRange>",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "public void getStartEndSamples(Set<DecimalQuantity> target)",
    "returnType" : "void",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static DecimalQuantitySamples parse(String source)", "private static void checkDecimal(SampleType sampleType2, DecimalQuantity sample)", "public Collection<Double> addSamples(Collection<Double> result)", "public Collection<DecimalQuantity> addDecimalQuantitySamples(Collection<DecimalQuantity> result)", "public void addSamples(Collection<Double> doubleResult, Collection<DecimalQuantity> dqResult)", "public String toString()", "public Set<DecimalQuantitySamplesRange> getSamples()", "public void getStartEndSamples(Set<DecimalQuantity> target)" ],
  "variableNames" : [ "sampleType", "samples", "bounded" ]
}