{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/VibratorManager.java",
  "packageName" : "android.os",
  "className" : "VibratorManager",
  "comment" : "\n * Provides access to all vibrators from the device, as well as the ability to run them\n * in a synchronized fashion.\n * <p>\n * If your process exits, any vibration you started will stop.\n * </p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int[] getVibratorIds()",
    "returnType" : "int[]",
    "comment" : "\n     * List all available vibrator ids, returning a possible empty list.\n     *\n     * @return An array containing the ids of the vibrators available on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Vibrator getVibrator(int vibratorId)",
    "returnType" : "Vibrator",
    "comment" : "\n     * Retrieve a single vibrator by id.\n     *\n     * @param vibratorId The id of the vibrator to be retrieved.\n     * @return The vibrator with given {@code vibratorId}, never null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Vibrator getDefaultVibrator()",
    "returnType" : "Vibrator",
    "comment" : "\n     * Returns the default Vibrator for the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, @Nullable CombinedVibration effect, @Nullable VibrationAttributes attributes)",
    "returnType" : "boolean",
    "comment" : "\n     * Configure an always-on haptics effect.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void vibrate(@NonNull CombinedVibration effect)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given combination of effects.\n     *\n     * <p>\n     * Pass in a {@link CombinedVibration} representing a combination of {@link\n     * VibrationEffect VibrationEffects} to be played on one or more vibrators.\n     * </p>\n     *\n     * <p>The app should be in foreground for the vibration to happen.</p>\n     *\n     * @param effect a combination of effects to be performed by one or more vibrators.\n     ",
    "links" : [ "android.os.CombinedVibration", "android.os.VibrationEffect" ]
  }, {
    "name" : "public final void vibrate(@NonNull CombinedVibration effect, @Nullable VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Vibrate with a given combination of effects.\n     *\n     * <p>\n     * Pass in a {@link CombinedVibration} representing a combination of {@link\n     * VibrationEffect} to be played on one or more vibrators.\n     * </p>\n     *\n     * <p>The app should be in foreground for the vibration to happen. Background apps should\n     * specify a ringtone, notification or alarm usage in order to vibrate.</p>\n     *\n     * @param effect a combination of effects to be performed by one or more vibrators.\n     * @param attributes {@link VibrationAttributes} corresponding to the vibration. For example,\n     *                   specify {@link VibrationAttributes#USAGE_ALARM} for alarm vibrations or\n     *                   {@link VibrationAttributes#USAGE_RINGTONE} for vibrations associated with\n     *                   incoming calls.\n     ",
    "links" : [ "android.os.CombinedVibration", "android.os.VibrationEffect", "android.os.VibrationAttributes#USAGE_ALARM", "android.os.VibrationAttributes#USAGE_RINGTONE", "android.os.VibrationAttributes" ]
  }, {
    "name" : "public abstract void vibrate(int uid, String opPkg, @NonNull CombinedVibration effect, String reason, @Nullable VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #vibrate(CombinedVibration, VibrationAttributes)}, but allows the\n     * caller to specify the vibration is owned by someone else and set reason for vibration.\n     *\n     * @hide\n     ",
    "links" : [ "#vibrate(CombinedVibration" ]
  }, {
    "name" : "public void performHapticFeedback(int constant, boolean always, String reason, boolean fromIme)",
    "returnType" : "void",
    "comment" : "\n     * Performs a haptic feedback.\n     *\n     * @param constant the ID of the requested haptic feedback. Should be one of the constants\n     *          defined in {@link HapticFeedbackConstants}.\n     * @param always {@code true} if the haptic feedback should be played regardless of the user\n     *          vibration intensity settings applicable to the corresponding vibration.\n     *          {@code false} otherwise.\n     * @param reason the reason for this haptic feedback.\n     * @param fromIme the haptic feedback is performed from an IME.\n     * @hide\n     ",
    "links" : [ "HapticFeedbackConstants" ]
  }, {
    "name" : "public abstract void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Turn all the vibrators off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void cancel(int usageFilter)",
    "returnType" : "void",
    "comment" : "\n     * Cancel specific types of ongoing vibrations.\n     *\n     * @param usageFilter The type of vibration to be cancelled, represented as a bitwise\n     *                    combination of {@link VibrationAttributes.Usage} values.\n     * @hide\n     ",
    "links" : [ "VibrationAttributes.Usage" ]
  } ],
  "methodNames" : [ "public abstract int[] getVibratorIds()", "public abstract Vibrator getVibrator(int vibratorId)", "public abstract Vibrator getDefaultVibrator()", "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, @Nullable CombinedVibration effect, @Nullable VibrationAttributes attributes)", "public final void vibrate(@NonNull CombinedVibration effect)", "public final void vibrate(@NonNull CombinedVibration effect, @Nullable VibrationAttributes attributes)", "public abstract void vibrate(int uid, String opPkg, @NonNull CombinedVibration effect, String reason, @Nullable VibrationAttributes attributes)", "public void performHapticFeedback(int constant, boolean always, String reason, boolean fromIme)", "public abstract void cancel()", "public abstract void cancel(int usageFilter)" ],
  "variableNames" : [ "TAG", "mPackageName" ]
}