{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ContextThemeWrapper.java",
  "packageName" : "android.view",
  "className" : "ContextThemeWrapper",
  "comment" : "\n * A context wrapper that allows you to modify or replace the theme of the\n * wrapped context.\n ",
  "variables" : [ {
    "name" : "mThemeResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTheme",
    "type" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInflater",
    "type" : "LayoutInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverrideConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void attachBaseContext(Context newBase)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyOverrideConfiguration(Configuration overrideConfiguration)",
    "returnType" : "void",
    "comment" : "\n     * Call to set an \"override configuration\" on this context -- this is\n     * a configuration that replies one or more values of the standard\n     * configuration that is applied to the context.  See\n     * {@link Context#createConfigurationContext(Configuration)} for more\n     * information.\n     *\n     * <p>This method can only be called once, and must be called before any\n     * calls to {@link #getResources()} or {@link #getAssets()} are made.\n     ",
    "links" : [ "Context#createConfigurationContext", "#getResources", "#getAssets" ]
  }, {
    "name" : "public Configuration getOverrideConfiguration()",
    "returnType" : "Configuration",
    "comment" : "\n     * Used by ActivityThread to apply the overridden configuration to onConfigurationChange\n     * callbacks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Resources getResourcesInternal()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTheme(int resid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTheme(@Nullable Resources.Theme theme)",
    "returnType" : "void",
    "comment" : "\n     * Set the configure the current theme. If null is provided then the default Theme is returned\n     * on the next call to {@link #getTheme()}\n     * @param theme Theme to consume in the wrapper, a value of null resets the theme to the default\n     ",
    "links" : [ "#getTheme" ]
  }, {
    "name" : "public int getThemeResId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Resources.Theme getTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getSystemService(String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onApplyThemeResource(Resources.Theme theme, int resId, boolean first)",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link #setTheme} and {@link #getTheme} to apply a theme\n     * resource to the current Theme object. May be overridden to change the\n     * default (simple) behavior. This method will not be called in multiple\n     * threads simultaneously.\n     *\n     * @param theme the theme being modified\n     * @param resId the style resource being applied to <var>theme</var>\n     * @param first {@code true} if this is the first time a style is being\n     *              applied to <var>theme</var>\n     ",
    "links" : [ "#setTheme", "#getTheme" ]
  }, {
    "name" : "private void initializeTheme()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mThemeResource", "mTheme", "mInflater", "mOverrideConfiguration", "mResources" ],
  "methodNames" : [ "protected void attachBaseContext(Context newBase)", "public void applyOverrideConfiguration(Configuration overrideConfiguration)", "public Configuration getOverrideConfiguration()", "public AssetManager getAssets()", "public Resources getResources()", "private Resources getResourcesInternal()", "public void setTheme(int resid)", "public void setTheme(@Nullable Resources.Theme theme)", "public int getThemeResId()", "public Resources.Theme getTheme()", "public Object getSystemService(String name)", "protected void onApplyThemeResource(Resources.Theme theme, int resId, boolean first)", "private void initializeTheme()" ]
}