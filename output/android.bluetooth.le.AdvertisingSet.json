{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/AdvertisingSet.java",
  "packageName" : "android.bluetooth.le",
  "className" : "AdvertisingSet",
  "comment" : "\n * This class provides a way to control single Bluetooth LE advertising instance.\n *\n * <p>To get an instance of {@link AdvertisingSet}, call the {@link\n * BluetoothLeAdvertiser#startAdvertisingSet} method.\n *\n * @see AdvertiseData\n ",
  "links" : [ "android.bluetooth.le.BluetoothLeAdvertiser#startAdvertisingSet", "android.bluetooth.le.AdvertisingSet" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGatt",
    "type" : "IBluetoothGatt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertiserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setAdvertiserId(int advertiserId)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents)",
    "returnType" : "void",
    "comment" : "\n     * Enables Advertising. This method returns immediately, the operation status is delivered\n     * through {@code callback.onAdvertisingEnabled()}.\n     *\n     * @param enable whether the advertising should be enabled (true), or disabled (false)\n     * @param duration advertising duration, in 10ms unit. Valid range is from 1 (10ms) to 65535\n     *     (655,350 ms)\n     * @param maxExtendedAdvertisingEvents maximum number of extended advertising events the\n     *     controller shall attempt to send prior to terminating the extended advertising, even if\n     *     the duration has not expired. Valid range is from 1 to 255.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdvertisingData(AdvertiseData advertiseData)",
    "returnType" : "void",
    "comment" : "\n     * Set/update data being Advertised. Make sure that data doesn't exceed the size limit for\n     * specified AdvertisingSetParameters. This method returns immediately, the operation status is\n     * delivered through {@code callback.onAdvertisingDataSet()}.\n     *\n     * <p>Advertising data must be empty if non-legacy scannable advertising is used.\n     *\n     * @param advertiseData Advertisement data to be broadcasted. Size must not exceed {@link\n     *     BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the advertisement is connectable,\n     *     three bytes will be added for flags. If the update takes place when the advertising set\n     *     is enabled, the data can be maximum 251 bytes long.\n     ",
    "links" : [ "android.bluetooth.BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void setScanResponseData(AdvertiseData scanResponse)",
    "returnType" : "void",
    "comment" : "\n     * Set/update scan response data. Make sure that data doesn't exceed the size limit for\n     * specified AdvertisingSetParameters. This method returns immediately, the operation status is\n     * delivered through {@code callback.onScanResponseDataSet()}.\n     *\n     * @param scanResponse Scan response associated with the advertisement data. Size must not\n     *     exceed {@link BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the update takes\n     *     place when the advertising set is enabled, the data can be maximum 251 bytes long.\n     ",
    "links" : [ "android.bluetooth.BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void setAdvertisingParameters(AdvertisingSetParameters parameters)",
    "returnType" : "void",
    "comment" : "\n     * Update advertising parameters associated with this AdvertisingSet. Must be called when\n     * advertising is not active. This method returns immediately, the operation status is delivered\n     * through {@code callback.onAdvertisingParametersUpdated}.\n     *\n     * @param parameters advertising set parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters parameters)",
    "returnType" : "void",
    "comment" : "\n     * Update periodic advertising parameters associated with this set. Must be called when periodic\n     * advertising is not enabled. This method returns immediately, the operation status is\n     * delivered through {@code callback.onPeriodicAdvertisingParametersUpdated()}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPeriodicAdvertisingData(AdvertiseData periodicData)",
    "returnType" : "void",
    "comment" : "\n     * Used to set periodic advertising data, must be called after setPeriodicAdvertisingParameters,\n     * or after advertising was started with periodic advertising data set. This method returns\n     * immediately, the operation status is delivered through {@code\n     * callback.onPeriodicAdvertisingDataSet()}.\n     *\n     * @param periodicData Periodic advertising data. Size must not exceed {@link\n     *     BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the update takes place when the\n     *     periodic advertising is enabled for this set, the data can be maximum 251 bytes long.\n     ",
    "links" : [ "android.bluetooth.BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void setPeriodicAdvertisingEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Used to enable/disable periodic advertising. This method returns immediately, the operation\n     * status is delivered through {@code callback.onPeriodicAdvertisingEnable()}.\n     *\n     * @param enable whether the periodic advertising should be enabled (true), or disabled (false).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOwnAddress()",
    "returnType" : "void",
    "comment" : "\n     * Returns address associated with this advertising set. This method is exposed only for\n     * Bluetooth PTS tests, no app or system service should ever use it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAdvertiserId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the advertiser ID associated with this advertising set.\n     *\n     * <p>This corresponds to the advertising set ID used at the HCI layer, in either LE Extended\n     * Advertising or Android-specific Multi-Advertising.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setAdvertiserId(int advertiserId)", "public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents)", "public void setAdvertisingData(AdvertiseData advertiseData)", "public void setScanResponseData(AdvertiseData scanResponse)", "public void setAdvertisingParameters(AdvertisingSetParameters parameters)", "public void setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters parameters)", "public void setPeriodicAdvertisingData(AdvertiseData periodicData)", "public void setPeriodicAdvertisingEnabled(boolean enable)", "public void getOwnAddress()", "public int getAdvertiserId()" ],
  "variableNames" : [ "TAG", "mGatt", "mAdvertiserId", "mAttributionSource" ]
}