{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/VelocityTracker.java",
  "packageName" : "android.view",
  "className" : "VelocityTracker",
  "comment" : "\n * Helper for tracking the velocity of touch events, for implementing\n * flinging and other such gestures.\n *\n * Use {@link #obtain} to retrieve a new instance of the class when you are going\n * to begin tracking.  Put the motion events you receive into it with\n * {@link #addMovement(MotionEvent)}.  When you want to determine the velocity call\n * {@link #computeCurrentVelocity(int)} and then call {@link #getXVelocity(int)}\n * and {@link #getYVelocity(int)} to retrieve the velocity for each pointer id.\n ",
  "variables" : [ {
    "name" : "sPool",
    "type" : "SynchronizedPool<VelocityTracker>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIVE_POINTER_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrategy",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeInitialize(String strategy)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDispose(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClear(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddMovement(long ptr, MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeComputeCurrentVelocity(long ptr, int units, float maxVelocity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetXVelocity(long ptr, int id)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetYVelocity(long ptr, int id)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetEstimator(long ptr, int id, Estimator outEstimator)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static VelocityTracker obtain()",
    "returnType" : "VelocityTracker",
    "comment" : "\n     * Retrieve a new VelocityTracker object to watch the velocity of a\n     * motion.  Be sure to call {@link #recycle} when done.  You should\n     * generally only maintain an active object while tracking a movement,\n     * so that the VelocityTracker can be re-used elsewhere.\n     *\n     * @return Returns a new VelocityTracker.\n     ",
    "links" : [ "#recycle" ]
  }, {
    "name" : "public static VelocityTracker obtain(String strategy)",
    "returnType" : "VelocityTracker",
    "comment" : "\n     * Obtains a velocity tracker with the specified strategy.\n     * For testing and comparison purposes only.\n     *\n     * @param strategy The strategy, or null to use the default.\n     * @return The velocity tracker.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Return a VelocityTracker object back to be re-used by others.  You must\n     * not touch the object after calling this function.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Reset the velocity tracker back to its initial state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addMovement(MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Add a user's movement to the tracker.  You should call this for the\n     * initial {@link MotionEvent#ACTION_DOWN}, the following\n     * {@link MotionEvent#ACTION_MOVE} events that you receive, and the\n     * final {@link MotionEvent#ACTION_UP}.  You can, however, call this\n     * for whichever events you desire.\n     * \n     * @param event The MotionEvent you received and would like to track.\n     ",
    "links" : [ "MotionEvent#ACTION_DOWN", "MotionEvent#ACTION_MOVE", "MotionEvent#ACTION_UP" ]
  }, {
    "name" : "public void computeCurrentVelocity(int units)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to invoking {@link #computeCurrentVelocity(int, float)} with a maximum\n     * velocity of Float.MAX_VALUE.\n     * \n     * @see #computeCurrentVelocity(int, float) \n     ",
    "links" : [ "#computeCurrentVelocity" ]
  }, {
    "name" : "public void computeCurrentVelocity(int units, float maxVelocity)",
    "returnType" : "void",
    "comment" : "\n     * Compute the current velocity based on the points that have been\n     * collected.  Only call this when you actually want to retrieve velocity\n     * information, as it is relatively expensive.  You can then retrieve\n     * the velocity with {@link #getXVelocity()} and\n     * {@link #getYVelocity()}.\n     * \n     * @param units The units you would like the velocity in.  A value of 1\n     * provides pixels per millisecond, 1000 provides pixels per second, etc.\n     * @param maxVelocity The maximum velocity that can be computed by this method.\n     * This value must be declared in the same unit as the units parameter. This value\n     * must be positive.\n     ",
    "links" : [ "#getXVelocity", "#getYVelocity" ]
  }, {
    "name" : "public float getXVelocity()",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed X velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     * \n     * @return The previously computed X velocity.\n     ",
    "links" : [ "#computeCurrentVelocity" ]
  }, {
    "name" : "public float getYVelocity()",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed Y velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     * \n     * @return The previously computed Y velocity.\n     ",
    "links" : [ "#computeCurrentVelocity" ]
  }, {
    "name" : "public float getXVelocity(int id)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed X velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     * \n     * @param id Which pointer's velocity to return.\n     * @return The previously computed X velocity.\n     ",
    "links" : [ "#computeCurrentVelocity" ]
  }, {
    "name" : "public float getYVelocity(int id)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed Y velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     * \n     * @param id Which pointer's velocity to return.\n     * @return The previously computed Y velocity.\n     ",
    "links" : [ "#computeCurrentVelocity" ]
  }, {
    "name" : "public boolean getEstimator(int id, Estimator outEstimator)",
    "returnType" : "boolean",
    "comment" : "\n     * Get an estimator for the movements of a pointer using past movements of the\n     * pointer to predict future movements.\n     *\n     * It is not necessary to call {@link #computeCurrentVelocity(int)} before calling\n     * this method.\n     *\n     * @param id Which pointer's velocity to return.\n     * @param outEstimator The estimator to populate.\n     * @return True if an estimator was obtained, false if there is no information\n     * available about the pointer.\n     *\n     * @hide For internal use only.  Not a final API.\n     ",
    "links" : [ "#computeCurrentVelocity" ]
  } ],
  "variableNames" : [ "sPool", "ACTIVE_POINTER_ID", "mPtr", "mStrategy" ],
  "methodNames" : [ "private static native long nativeInitialize(String strategy)", "private static native void nativeDispose(long ptr)", "private static native void nativeClear(long ptr)", "private static native void nativeAddMovement(long ptr, MotionEvent event)", "private static native void nativeComputeCurrentVelocity(long ptr, int units, float maxVelocity)", "private static native float nativeGetXVelocity(long ptr, int id)", "private static native float nativeGetYVelocity(long ptr, int id)", "private static native boolean nativeGetEstimator(long ptr, int id, Estimator outEstimator)", "public static VelocityTracker obtain()", "public static VelocityTracker obtain(String strategy)", "public void recycle()", "protected void finalize() throws Throwable", "public void clear()", "public void addMovement(MotionEvent event)", "public void computeCurrentVelocity(int units)", "public void computeCurrentVelocity(int units, float maxVelocity)", "public float getXVelocity()", "public float getYVelocity()", "public float getXVelocity(int id)", "public float getYVelocity(int id)", "public boolean getEstimator(int id, Estimator outEstimator)" ]
}