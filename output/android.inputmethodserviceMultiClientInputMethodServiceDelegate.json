{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/inputmethodservice/MultiClientInputMethodServiceDelegate.java",
  "packageName" : "android.inputmethodservice",
  "className" : "MultiClientInputMethodServiceDelegate",
  "comment" : "\n * Defines all the public APIs and interfaces that are necessary to implement multi-client IMEs.\n *\n * <p>Actual implementation is further delegated to\n * {@link MultiClientInputMethodServiceDelegateImpl}.</p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : " @SdkConstant(SdkConstantType.SERVICE_ACTION)",
    "links" : [ ]
  }, {
    "name" : "INVALID_CLIENT_ID",
    "type" : "int",
    "comment" : "\n     * Special value that is guaranteed to be not used for IME client ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_WINDOW_HANDLE",
    "type" : "int",
    "comment" : "\n     * Special value that is guaranteed to be not used for window handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "mImpl",
    "type" : "MultiClientInputMethodServiceDelegateImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MultiClientInputMethodServiceDelegate create(Context context, ServiceCallback serviceCallback)",
    "returnType" : "MultiClientInputMethodServiceDelegate",
    "comment" : "\n     * Must be called by the multi-client IME implementer to create\n     * {@link MultiClientInputMethodServiceDelegate}.\n     *\n     * @param context {@link Context} with which the delegate should interact with the system.\n     * @param serviceCallback {@link ServiceCallback} to receive service-level callbacks.\n     * @return A new instance of {@link MultiClientInputMethodServiceDelegate}.\n     ",
    "links" : [ "MultiClientInputMethodServiceDelegate", "Context", "ServiceCallback", "MultiClientInputMethodServiceDelegate" ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Must be called by the multi-client IME service when {@link android.app.Service#onDestroy()}\n     * is called.\n     ",
    "links" : [ "android.app.Service#onDestroy" ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * Must be called by the multi-client IME service when\n     * {@link android.app.Service#onBind(Intent)} is called.\n     *\n     * @param intent {@link Intent} passed to {@link android.app.Service#onBind(Intent)}.\n     * @return An {@link IBinder} object that needs to be returned from\n     *         {@link android.app.Service#onBind(Intent)}.\n     ",
    "links" : [ "android.app.Service#onBind", "Intent", "android.app.Service#onBind", "IBinder", "android.app.Service#onBind" ]
  }, {
    "name" : "public boolean onUnbind(Intent intent)",
    "returnType" : "boolean",
    "comment" : "\n     * Must be called by the multi-client IME service when\n     * {@link android.app.Service#onUnbind(Intent)} is called.\n     *\n     * @param intent {@link Intent} passed to {@link android.app.Service#onUnbind(Intent)}.\n     * @return A boolean value that needs to be returned from\n     *         {@link android.app.Service#onUnbind(Intent)}.\n     ",
    "links" : [ "android.app.Service#onUnbind", "Intent", "android.app.Service#onUnbind", "android.app.Service#onUnbind" ]
  }, {
    "name" : "public IBinder createInputMethodWindowToken(int displayId)",
    "returnType" : "IBinder",
    "comment" : "\n     * Must be called by the multi-client IME service to create a special window token for IME\n     * window.\n     *\n     * <p>This method is available only after {@link ServiceCallback#initialized()}.</p>\n     *\n     * @param displayId display ID on which the IME window will be shown.\n     * @return Window token to be specified to the IME window/\n     ",
    "links" : [ "ServiceCallback#initialized" ]
  }, {
    "name" : "public void acceptClient(int clientId, ClientCallback clientCallback, KeyEvent.DispatcherState dispatcherState, Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Must be called by the multi-client IME service to notify the system when the IME is ready to\n     * accept callback events from the specified IME client.\n     *\n     * @param clientId The IME client ID specified in\n     *                 {@link ServiceCallback#addClient(int, int, int, int)}.\n     * @param clientCallback The {@link ClientCallback} to receive callback events from this IME\n     *                       client.\n     * @param dispatcherState {@link KeyEvent.DispatcherState} to be used when receiving key-related\n     *                        callbacks in {@link ClientCallback}.\n     * @param looper {@link Looper} on which {@link ClientCallback} will be called back.\n     ",
    "links" : [ "ServiceCallback#addClient", "ClientCallback", "KeyEvent.DispatcherState", "ClientCallback", "Looper", "ClientCallback" ]
  }, {
    "name" : "public void reportImeWindowTarget(int clientId, int targetWindowHandle, IBinder imeWindowToken)",
    "returnType" : "void",
    "comment" : "\n     * Must be called by the multi-client IME service to notify the system when the IME is ready to\n     * interact with the window in the IME client.\n     *\n     * @param clientId The IME client ID specified in\n     *                 {@link ServiceCallback#addClient(int, int, int, int)}.\n     * @param targetWindowHandle The window handle specified in\n     *                           {@link ClientCallback#onStartInputOrWindowGainedFocus}.\n     * @param imeWindowToken The IME window token returned from\n     *                       {@link #createInputMethodWindowToken(int)}.\n     ",
    "links" : [ "ServiceCallback#addClient", "ClientCallback#onStartInputOrWindowGainedFocus", "#createInputMethodWindowToken" ]
  }, {
    "name" : "public boolean isUidAllowedOnDisplay(int displayId, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Can be called by the multi-client IME service to check if the given {@code uid} is allowed\n     * to access to {@code displayId}.\n     *\n     * @param displayId Display ID to be queried.\n     * @param uid UID to be queried.\n     * @return {@code true} if {@code uid} is allowed to access to {@code displayId}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActive(int clientId, boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Can be called by MSIME to activate/deactivate a client when it is gaining/losing focus\n     * respectively.\n     *\n     * @param clientId client ID to activate/deactivate.\n     * @param active {@code true} to activate a client.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SERVICE_INTERFACE", "INVALID_CLIENT_ID", "INVALID_WINDOW_HANDLE", "mImpl" ],
  "methodNames" : [ "public static MultiClientInputMethodServiceDelegate create(Context context, ServiceCallback serviceCallback)", "public void onDestroy()", "public IBinder onBind(Intent intent)", "public boolean onUnbind(Intent intent)", "public IBinder createInputMethodWindowToken(int displayId)", "public void acceptClient(int clientId, ClientCallback clientCallback, KeyEvent.DispatcherState dispatcherState, Looper looper)", "public void reportImeWindowTarget(int clientId, int targetWindowHandle, IBinder imeWindowToken)", "public boolean isUidAllowedOnDisplay(int displayId, int uid)", "public void setActive(int clientId, boolean active)" ]
}