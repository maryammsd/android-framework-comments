{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/appwidget/AppWidgetHostView.java",
  "packageName" : "android.appwidget",
  "className" : "AppWidgetHostView",
  "comment" : "\n * Provides the glue to show AppWidget views. This class offers automatic animation\n * between updates, and will try recycling old views for each incoming\n * {@link RemoteViews}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_JAILED_ARRAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_MODE_NOINIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_MODE_CONTENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_MODE_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_MODE_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INFLATER_FILTER",
    "type" : "LayoutInflater.Filter",
    "comment" : " views that are allowed in RemoteViews.",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppWidgetId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInfo",
    "type" : "AppWidgetProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnClickHandler",
    "type" : "OnClickHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnLightBackground",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAsyncExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastExecutionSignal",
    "type" : "CancellationSignal",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnClickHandler(OnClickHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Pass the given handler to RemoteViews when updating this widget. Unless this\n     * is done immediatly after construction, a call to {@link #updateAppWidget(RemoteViews)}\n     * should be made.\n     * @param handler\n     * @hide\n     ",
    "links" : [ "#updateAppWidget(RemoteViews)" ]
  }, {
    "name" : "public void setAppWidget(int appWidgetId, AppWidgetProviderInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Set the AppWidget that will be displayed by this view. This method also adds default padding\n     * to widgets, as described in {@link #getDefaultPaddingForWidget(Context, ComponentName, Rect)}\n     * and can be overridden in order to add custom padding.\n     ",
    "links" : [ "#getDefaultPaddingForWidget(Context" ]
  }, {
    "name" : "public static Rect getDefaultPaddingForWidget(Context context, ComponentName component, Rect padding)",
    "returnType" : "Rect",
    "comment" : "\n     * As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting\n     * ICE_CREAM_SANDWICH and higher. The new widget design guidelines strongly recommend\n     * that widget developers do not add extra padding to their widgets. This will help\n     * achieve consistency among widgets.\n     *\n     * Note: this method is only needed by developers of AppWidgetHosts. The method is provided in\n     * order for the AppWidgetHost to account for the automatic padding when computing the number\n     * of cells to allocate to a particular widget.\n     *\n     * @param context the current context\n     * @param component the component name of the widget\n     * @param padding Rect in which to place the output, if null, a new Rect will be allocated and\n     *                returned\n     * @return default padding for this widget, in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Rect getDefaultPaddingForWidget(Context context, Rect padding)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect getDefaultPadding()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAppWidgetId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AppWidgetProviderInfo getAppWidgetInfo()",
    "returnType" : "AppWidgetProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSaveInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int generateId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateAppWidgetSize(Bundle newOptions, int minWidth, int minHeight, int maxWidth, int maxHeight)",
    "returnType" : "void",
    "comment" : "\n     * Provide guidance about the size of this widget to the AppWidgetManager. The widths and\n     * heights should correspond to the full area the AppWidgetHostView is given. Padding added by\n     * the framework will be accounted for automatically. This information gets embedded into the\n     * AppWidget options and causes a callback to the AppWidgetProvider.\n     * @see AppWidgetProvider#onAppWidgetOptionsChanged(Context, AppWidgetManager, int, Bundle)\n     *\n     * @param newOptions The bundle of options, in addition to the size information,\n     *          can be null.\n     * @param minWidth The minimum width in dips that the widget will be displayed at.\n     * @param minHeight The maximum height in dips that the widget will be displayed at.\n     * @param maxWidth The maximum width in dips that the widget will be displayed at.\n     * @param maxHeight The maximum height in dips that the widget will be displayed at.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateAppWidgetSize(Bundle newOptions, int minWidth, int minHeight, int maxWidth, int maxHeight, boolean ignorePadding)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateAppWidgetOptions(Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Specify some extra information for the widget provider. Causes a callback to the\n     * AppWidgetProvider.\n     * @see AppWidgetProvider#onAppWidgetOptionsChanged(Context, AppWidgetManager, int, Bundle)\n     *\n     * @param options The bundle of options information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public void setExecutor(Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Sets an executor which can be used for asynchronously inflating. CPU intensive tasks like\n     * view inflation or loading images will be performed on the executor. The updates will still\n     * be applied on the UI thread.\n     *\n     * @param executor the executor to use or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnLightBackground(boolean onLightBackground)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the widget is being displayed on a light/white background and use an\n     * alternate UI if available.\n     * @see RemoteViews#setLightBackgroundLayoutId(int)\n     ",
    "links" : [ ]
  }, {
    "name" : " void resetAppWidget(AppWidgetProviderInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Update the AppWidgetProviderInfo for this view, and reset it to the\n     * initial layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateAppWidget(RemoteViews remoteViews)",
    "returnType" : "void",
    "comment" : "\n     * Process a set of {@link RemoteViews} coming in as an update from the\n     * AppWidget provider. Will animate into these new views as needed\n     ",
    "links" : [ "android.widget.RemoteViews" ]
  }, {
    "name" : "protected void applyRemoteViews(RemoteViews remoteViews, boolean useAsyncIfPossible)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyContent(View content, boolean recycled, Exception exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inflateAsync(RemoteViews remoteViews)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void viewDataChanged(int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Process data-changed notifications for the specified view in the specified\n     * set of {@link RemoteViews} views.\n     ",
    "links" : [ "android.widget.RemoteViews" ]
  }, {
    "name" : "protected Context getRemoteContext()",
    "returnType" : "Context",
    "comment" : "\n     * Build a {@link Context} cloned into another package name, usually for the\n     * purposes of reading remote resources.\n     * @hide\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "protected void prepareView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Prepare the given view to be shown. This might include adjusting\n     * {@link FrameLayout.LayoutParams} before inserting.\n     ",
    "links" : [ "FrameLayout.LayoutParams" ]
  }, {
    "name" : "protected View getDefaultView()",
    "returnType" : "View",
    "comment" : "\n     * Inflate and return the default layout requested by AppWidget provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onDefaultViewClicked(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected View getErrorView()",
    "returnType" : "View",
    "comment" : "\n     * Inflate and return a view that represents an error state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ActivityOptions createSharedElementActivityOptions(int[] sharedViewIds, String[] sharedViewNames, Intent fillInIntent)",
    "returnType" : "ActivityOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private OnClickHandler getHandler(OnClickHandler handler)",
    "returnType" : "OnClickHandler",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "KEY_JAILED_ARRAY", "LOGD", "VIEW_MODE_NOINIT", "VIEW_MODE_CONTENT", "VIEW_MODE_ERROR", "VIEW_MODE_DEFAULT", "INFLATER_FILTER", "mContext", "mRemoteContext", "mAppWidgetId", "mInfo", "mView", "mViewMode", "mLayoutId", "mOnClickHandler", "mOnLightBackground", "mAsyncExecutor", "mLastExecutionSignal" ],
  "methodNames" : [ "public void setOnClickHandler(OnClickHandler handler)", "public void setAppWidget(int appWidgetId, AppWidgetProviderInfo info)", "public static Rect getDefaultPaddingForWidget(Context context, ComponentName component, Rect padding)", "private static Rect getDefaultPaddingForWidget(Context context, Rect padding)", "private Rect getDefaultPadding()", "public int getAppWidgetId()", "public AppWidgetProviderInfo getAppWidgetInfo()", "protected void dispatchSaveInstanceState(SparseArray<Parcelable> container)", "private int generateId()", "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void updateAppWidgetSize(Bundle newOptions, int minWidth, int minHeight, int maxWidth, int maxHeight)", "public void updateAppWidgetSize(Bundle newOptions, int minWidth, int minHeight, int maxWidth, int maxHeight, boolean ignorePadding)", "public void updateAppWidgetOptions(Bundle options)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public void setExecutor(Executor executor)", "public void setOnLightBackground(boolean onLightBackground)", " void resetAppWidget(AppWidgetProviderInfo info)", "public void updateAppWidget(RemoteViews remoteViews)", "protected void applyRemoteViews(RemoteViews remoteViews, boolean useAsyncIfPossible)", "private void applyContent(View content, boolean recycled, Exception exception)", "private void inflateAsync(RemoteViews remoteViews)", " void viewDataChanged(int viewId)", "protected Context getRemoteContext()", "protected void prepareView(View view)", "protected View getDefaultView()", "private void onDefaultViewClicked(View view)", "protected View getErrorView()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public ActivityOptions createSharedElementActivityOptions(int[] sharedViewIds, String[] sharedViewNames, Intent fillInIntent)", "private OnClickHandler getHandler(OnClickHandler handler)" ]
}